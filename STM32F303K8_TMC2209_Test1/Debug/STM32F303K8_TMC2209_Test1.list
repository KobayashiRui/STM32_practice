
STM32F303K8_TMC2209_Test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003958  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000324  08003ae0  08003ae0  00013ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e04  08003e04  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003e04  08003e04  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e04  08003e04  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e04  08003e04  00013e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e08  08003e08  00013e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003e0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000007dc  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000084c  2000084c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a5bc  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b2a  00000000  00000000  0002a65c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000800  00000000  00000000  0002c188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000748  00000000  00000000  0002c988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bd8a  00000000  00000000  0002d0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ac91  00000000  00000000  00048e5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ee44  00000000  00000000  00053aeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f292f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000025e8  00000000  00000000  000f2980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003ac8 	.word	0x08003ac8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08003ac8 	.word	0x08003ac8

080001c8 <TMC2209_INIT>:
	return tmc2209_restore(&TMC2209);
}


void TMC2209_INIT()
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af02      	add	r7, sp, #8
	tmc_fillCRC8Table(0x07, true, 1);
 80001ce:	2201      	movs	r2, #1
 80001d0:	2101      	movs	r1, #1
 80001d2:	2007      	movs	r0, #7
 80001d4:	f002 fd46 	bl	8002c64 <tmc_fillCRC8Table>

	//TMC2209_config->reset = reset;
	//TMC2209_config->restore = restore;

	tmc2209_init(&TMC2209, 0, 0, &TMC2209_config, &tmc2209_defaultRegisterResetState[0]);
 80001d8:	4b05      	ldr	r3, [pc, #20]	; (80001f0 <TMC2209_INIT+0x28>)
 80001da:	9300      	str	r3, [sp, #0]
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <TMC2209_INIT+0x2c>)
 80001de:	2200      	movs	r2, #0
 80001e0:	2100      	movs	r1, #0
 80001e2:	4805      	ldr	r0, [pc, #20]	; (80001f8 <TMC2209_INIT+0x30>)
 80001e4:	f002 fe20 	bl	8002e28 <tmc2209_init>

	//restore();
}
 80001e8:	bf00      	nop
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	08003ae8 	.word	0x08003ae8
 80001f4:	2000041c 	.word	0x2000041c
 80001f8:	20000194 	.word	0x20000194

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
   setbuf(stdout, NULL);
 8000200:	4b0d      	ldr	r3, [pc, #52]	; (8000238 <main+0x3c>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	689b      	ldr	r3, [r3, #8]
 8000206:	2100      	movs	r1, #0
 8000208:	4618      	mov	r0, r3
 800020a:	f002 feff 	bl	800300c <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800020e:	f000 fa8f 	bl	8000730 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000212:	f000 f815 	bl	8000240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000216:	f000 f8c5 	bl	80003a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800021a:	f000 f893 	bl	8000344 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800021e:	f000 f861 	bl	80002e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  TMC2209_INIT();
 8000222:	f7ff ffd1 	bl	80001c8 <TMC2209_INIT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("Hello\r\n");
 8000226:	4805      	ldr	r0, [pc, #20]	; (800023c <main+0x40>)
 8000228:	f002 fee8 	bl	8002ffc <puts>
	  HAL_Delay(1000);
 800022c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000230:	f000 fae4 	bl	80007fc <HAL_Delay>
	  printf("Hello\r\n");
 8000234:	e7f7      	b.n	8000226 <main+0x2a>
 8000236:	bf00      	nop
 8000238:	2000000c 	.word	0x2000000c
 800023c:	08003ae0 	.word	0x08003ae0

08000240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b096      	sub	sp, #88	; 0x58
 8000244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000246:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800024a:	2228      	movs	r2, #40	; 0x28
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f002 fe5e 	bl	8002f10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000254:	f107 031c 	add.w	r3, r7, #28
 8000258:	2200      	movs	r2, #0
 800025a:	601a      	str	r2, [r3, #0]
 800025c:	605a      	str	r2, [r3, #4]
 800025e:	609a      	str	r2, [r3, #8]
 8000260:	60da      	str	r2, [r3, #12]
 8000262:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000264:	1d3b      	adds	r3, r7, #4
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	605a      	str	r2, [r3, #4]
 800026c:	609a      	str	r2, [r3, #8]
 800026e:	60da      	str	r2, [r3, #12]
 8000270:	611a      	str	r2, [r3, #16]
 8000272:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000274:	2302      	movs	r3, #2
 8000276:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000278:	2301      	movs	r3, #1
 800027a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800027c:	2310      	movs	r3, #16
 800027e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000280:	2300      	movs	r3, #0
 8000282:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000284:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000288:	4618      	mov	r0, r3
 800028a:	f000 fd33 	bl	8000cf4 <HAL_RCC_OscConfig>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000294:	f000 f8be 	bl	8000414 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000298:	230f      	movs	r3, #15
 800029a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800029c:	2300      	movs	r3, #0
 800029e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ac:	f107 031c 	add.w	r3, r7, #28
 80002b0:	2100      	movs	r1, #0
 80002b2:	4618      	mov	r0, r3
 80002b4:	f001 fd5c 	bl	8001d70 <HAL_RCC_ClockConfig>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002be:	f000 f8a9 	bl	8000414 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80002c2:	2301      	movs	r3, #1
 80002c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	4618      	mov	r0, r3
 80002ce:	f001 ff85 	bl	80021dc <HAL_RCCEx_PeriphCLKConfig>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80002d8:	f000 f89c 	bl	8000414 <Error_Handler>
  }
}
 80002dc:	bf00      	nop
 80002de:	3758      	adds	r7, #88	; 0x58
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002e8:	4b14      	ldr	r3, [pc, #80]	; (800033c <MX_USART1_UART_Init+0x58>)
 80002ea:	4a15      	ldr	r2, [pc, #84]	; (8000340 <MX_USART1_UART_Init+0x5c>)
 80002ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80002ee:	4b13      	ldr	r3, [pc, #76]	; (800033c <MX_USART1_UART_Init+0x58>)
 80002f0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80002f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002f6:	4b11      	ldr	r3, [pc, #68]	; (800033c <MX_USART1_UART_Init+0x58>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002fc:	4b0f      	ldr	r3, [pc, #60]	; (800033c <MX_USART1_UART_Init+0x58>)
 80002fe:	2200      	movs	r2, #0
 8000300:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000302:	4b0e      	ldr	r3, [pc, #56]	; (800033c <MX_USART1_UART_Init+0x58>)
 8000304:	2200      	movs	r2, #0
 8000306:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000308:	4b0c      	ldr	r3, [pc, #48]	; (800033c <MX_USART1_UART_Init+0x58>)
 800030a:	220c      	movs	r2, #12
 800030c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800030e:	4b0b      	ldr	r3, [pc, #44]	; (800033c <MX_USART1_UART_Init+0x58>)
 8000310:	2200      	movs	r2, #0
 8000312:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000314:	4b09      	ldr	r3, [pc, #36]	; (800033c <MX_USART1_UART_Init+0x58>)
 8000316:	2200      	movs	r2, #0
 8000318:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800031a:	4b08      	ldr	r3, [pc, #32]	; (800033c <MX_USART1_UART_Init+0x58>)
 800031c:	2200      	movs	r2, #0
 800031e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <MX_USART1_UART_Init+0x58>)
 8000322:	2200      	movs	r2, #0
 8000324:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000326:	4805      	ldr	r0, [pc, #20]	; (800033c <MX_USART1_UART_Init+0x58>)
 8000328:	f002 f8cc 	bl	80024c4 <HAL_HalfDuplex_Init>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000332:	f000 f86f 	bl	8000414 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	2000008c 	.word	0x2000008c
 8000340:	40013800 	.word	0x40013800

08000344 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000348:	4b14      	ldr	r3, [pc, #80]	; (800039c <MX_USART2_UART_Init+0x58>)
 800034a:	4a15      	ldr	r2, [pc, #84]	; (80003a0 <MX_USART2_UART_Init+0x5c>)
 800034c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800034e:	4b13      	ldr	r3, [pc, #76]	; (800039c <MX_USART2_UART_Init+0x58>)
 8000350:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000354:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000356:	4b11      	ldr	r3, [pc, #68]	; (800039c <MX_USART2_UART_Init+0x58>)
 8000358:	2200      	movs	r2, #0
 800035a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800035c:	4b0f      	ldr	r3, [pc, #60]	; (800039c <MX_USART2_UART_Init+0x58>)
 800035e:	2200      	movs	r2, #0
 8000360:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000362:	4b0e      	ldr	r3, [pc, #56]	; (800039c <MX_USART2_UART_Init+0x58>)
 8000364:	2200      	movs	r2, #0
 8000366:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000368:	4b0c      	ldr	r3, [pc, #48]	; (800039c <MX_USART2_UART_Init+0x58>)
 800036a:	220c      	movs	r2, #12
 800036c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800036e:	4b0b      	ldr	r3, [pc, #44]	; (800039c <MX_USART2_UART_Init+0x58>)
 8000370:	2200      	movs	r2, #0
 8000372:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000374:	4b09      	ldr	r3, [pc, #36]	; (800039c <MX_USART2_UART_Init+0x58>)
 8000376:	2200      	movs	r2, #0
 8000378:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800037a:	4b08      	ldr	r3, [pc, #32]	; (800039c <MX_USART2_UART_Init+0x58>)
 800037c:	2200      	movs	r2, #0
 800037e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000380:	4b06      	ldr	r3, [pc, #24]	; (800039c <MX_USART2_UART_Init+0x58>)
 8000382:	2200      	movs	r2, #0
 8000384:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000386:	4805      	ldr	r0, [pc, #20]	; (800039c <MX_USART2_UART_Init+0x58>)
 8000388:	f002 f84e 	bl	8002428 <HAL_UART_Init>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000392:	f000 f83f 	bl	8000414 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	20000110 	.word	0x20000110
 80003a0:	40004400 	.word	0x40004400

080003a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003aa:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <MX_GPIO_Init+0x44>)
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	4a0e      	ldr	r2, [pc, #56]	; (80003e8 <MX_GPIO_Init+0x44>)
 80003b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003b4:	6153      	str	r3, [r2, #20]
 80003b6:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <MX_GPIO_Init+0x44>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003be:	607b      	str	r3, [r7, #4]
 80003c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c2:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <MX_GPIO_Init+0x44>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	4a08      	ldr	r2, [pc, #32]	; (80003e8 <MX_GPIO_Init+0x44>)
 80003c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003cc:	6153      	str	r3, [r2, #20]
 80003ce:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <MX_GPIO_Init+0x44>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003d6:	603b      	str	r3, [r7, #0]
 80003d8:	683b      	ldr	r3, [r7, #0]

}
 80003da:	bf00      	nop
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	40021000 	.word	0x40021000

080003ec <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	60f8      	str	r0, [r7, #12]
 80003f4:	60b9      	str	r1, [r7, #8]
 80003f6:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	b29a      	uxth	r2, r3
 80003fc:	230a      	movs	r3, #10
 80003fe:	68b9      	ldr	r1, [r7, #8]
 8000400:	4803      	ldr	r0, [pc, #12]	; (8000410 <_write+0x24>)
 8000402:	f002 f8b5 	bl	8002570 <HAL_UART_Transmit>
  return len;
 8000406:	687b      	ldr	r3, [r7, #4]
}
 8000408:	4618      	mov	r0, r3
 800040a:	3710      	adds	r7, #16
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	20000110 	.word	0x20000110

08000414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000418:	b672      	cpsid	i
}
 800041a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800041c:	e7fe      	b.n	800041c <Error_Handler+0x8>
	...

08000420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000426:	4b0f      	ldr	r3, [pc, #60]	; (8000464 <HAL_MspInit+0x44>)
 8000428:	699b      	ldr	r3, [r3, #24]
 800042a:	4a0e      	ldr	r2, [pc, #56]	; (8000464 <HAL_MspInit+0x44>)
 800042c:	f043 0301 	orr.w	r3, r3, #1
 8000430:	6193      	str	r3, [r2, #24]
 8000432:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <HAL_MspInit+0x44>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	f003 0301 	and.w	r3, r3, #1
 800043a:	607b      	str	r3, [r7, #4]
 800043c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800043e:	4b09      	ldr	r3, [pc, #36]	; (8000464 <HAL_MspInit+0x44>)
 8000440:	69db      	ldr	r3, [r3, #28]
 8000442:	4a08      	ldr	r2, [pc, #32]	; (8000464 <HAL_MspInit+0x44>)
 8000444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000448:	61d3      	str	r3, [r2, #28]
 800044a:	4b06      	ldr	r3, [pc, #24]	; (8000464 <HAL_MspInit+0x44>)
 800044c:	69db      	ldr	r3, [r3, #28]
 800044e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000452:	603b      	str	r3, [r7, #0]
 8000454:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000456:	bf00      	nop
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	40021000 	.word	0x40021000

08000468 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b08c      	sub	sp, #48	; 0x30
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000470:	f107 031c 	add.w	r3, r7, #28
 8000474:	2200      	movs	r2, #0
 8000476:	601a      	str	r2, [r3, #0]
 8000478:	605a      	str	r2, [r3, #4]
 800047a:	609a      	str	r2, [r3, #8]
 800047c:	60da      	str	r2, [r3, #12]
 800047e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a30      	ldr	r2, [pc, #192]	; (8000548 <HAL_UART_MspInit+0xe0>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d12a      	bne.n	80004e0 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800048a:	4b30      	ldr	r3, [pc, #192]	; (800054c <HAL_UART_MspInit+0xe4>)
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	4a2f      	ldr	r2, [pc, #188]	; (800054c <HAL_UART_MspInit+0xe4>)
 8000490:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000494:	6193      	str	r3, [r2, #24]
 8000496:	4b2d      	ldr	r3, [pc, #180]	; (800054c <HAL_UART_MspInit+0xe4>)
 8000498:	699b      	ldr	r3, [r3, #24]
 800049a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800049e:	61bb      	str	r3, [r7, #24]
 80004a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a2:	4b2a      	ldr	r3, [pc, #168]	; (800054c <HAL_UART_MspInit+0xe4>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	4a29      	ldr	r2, [pc, #164]	; (800054c <HAL_UART_MspInit+0xe4>)
 80004a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004ac:	6153      	str	r3, [r2, #20]
 80004ae:	4b27      	ldr	r3, [pc, #156]	; (800054c <HAL_UART_MspInit+0xe4>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004b6:	617b      	str	r3, [r7, #20]
 80004b8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004c0:	2312      	movs	r3, #18
 80004c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c4:	2300      	movs	r3, #0
 80004c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004c8:	2303      	movs	r3, #3
 80004ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80004cc:	2307      	movs	r3, #7
 80004ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d0:	f107 031c 	add.w	r3, r7, #28
 80004d4:	4619      	mov	r1, r3
 80004d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004da:	f000 fa99 	bl	8000a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80004de:	e02e      	b.n	800053e <HAL_UART_MspInit+0xd6>
  else if(huart->Instance==USART2)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a1a      	ldr	r2, [pc, #104]	; (8000550 <HAL_UART_MspInit+0xe8>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d129      	bne.n	800053e <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART2_CLK_ENABLE();
 80004ea:	4b18      	ldr	r3, [pc, #96]	; (800054c <HAL_UART_MspInit+0xe4>)
 80004ec:	69db      	ldr	r3, [r3, #28]
 80004ee:	4a17      	ldr	r2, [pc, #92]	; (800054c <HAL_UART_MspInit+0xe4>)
 80004f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004f4:	61d3      	str	r3, [r2, #28]
 80004f6:	4b15      	ldr	r3, [pc, #84]	; (800054c <HAL_UART_MspInit+0xe4>)
 80004f8:	69db      	ldr	r3, [r3, #28]
 80004fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004fe:	613b      	str	r3, [r7, #16]
 8000500:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000502:	4b12      	ldr	r3, [pc, #72]	; (800054c <HAL_UART_MspInit+0xe4>)
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	4a11      	ldr	r2, [pc, #68]	; (800054c <HAL_UART_MspInit+0xe4>)
 8000508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800050c:	6153      	str	r3, [r2, #20]
 800050e:	4b0f      	ldr	r3, [pc, #60]	; (800054c <HAL_UART_MspInit+0xe4>)
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800051a:	f248 0304 	movw	r3, #32772	; 0x8004
 800051e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000520:	2302      	movs	r3, #2
 8000522:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000524:	2300      	movs	r3, #0
 8000526:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000528:	2303      	movs	r3, #3
 800052a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800052c:	2307      	movs	r3, #7
 800052e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000530:	f107 031c 	add.w	r3, r7, #28
 8000534:	4619      	mov	r1, r3
 8000536:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800053a:	f000 fa69 	bl	8000a10 <HAL_GPIO_Init>
}
 800053e:	bf00      	nop
 8000540:	3730      	adds	r7, #48	; 0x30
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40013800 	.word	0x40013800
 800054c:	40021000 	.word	0x40021000
 8000550:	40004400 	.word	0x40004400

08000554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000558:	e7fe      	b.n	8000558 <NMI_Handler+0x4>

0800055a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800055a:	b480      	push	{r7}
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800055e:	e7fe      	b.n	800055e <HardFault_Handler+0x4>

08000560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000564:	e7fe      	b.n	8000564 <MemManage_Handler+0x4>

08000566 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800056a:	e7fe      	b.n	800056a <BusFault_Handler+0x4>

0800056c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000570:	e7fe      	b.n	8000570 <UsageFault_Handler+0x4>

08000572 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000576:	bf00      	nop
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr

08000580 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr

0800058e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000592:	bf00      	nop
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr

0800059c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005a0:	f000 f90c 	bl	80007bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
 80005b8:	e00a      	b.n	80005d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005ba:	f3af 8000 	nop.w
 80005be:	4601      	mov	r1, r0
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	1c5a      	adds	r2, r3, #1
 80005c4:	60ba      	str	r2, [r7, #8]
 80005c6:	b2ca      	uxtb	r2, r1
 80005c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ca:	697b      	ldr	r3, [r7, #20]
 80005cc:	3301      	adds	r3, #1
 80005ce:	617b      	str	r3, [r7, #20]
 80005d0:	697a      	ldr	r2, [r7, #20]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	dbf0      	blt.n	80005ba <_read+0x12>
	}

return len;
 80005d8:	687b      	ldr	r3, [r7, #4]
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3718      	adds	r7, #24
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80005e2:	b480      	push	{r7}
 80005e4:	b083      	sub	sp, #12
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
	return -1;
 80005ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr

080005fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005fa:	b480      	push	{r7}
 80005fc:	b083      	sub	sp, #12
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
 8000602:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800060a:	605a      	str	r2, [r3, #4]
	return 0;
 800060c:	2300      	movs	r3, #0
}
 800060e:	4618      	mov	r0, r3
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <_isatty>:

int _isatty(int file)
{
 800061a:	b480      	push	{r7}
 800061c:	b083      	sub	sp, #12
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
	return 1;
 8000622:	2301      	movs	r3, #1
}
 8000624:	4618      	mov	r0, r3
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr

08000630 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	60f8      	str	r0, [r7, #12]
 8000638:	60b9      	str	r1, [r7, #8]
 800063a:	607a      	str	r2, [r7, #4]
	return 0;
 800063c:	2300      	movs	r3, #0
}
 800063e:	4618      	mov	r0, r3
 8000640:	3714      	adds	r7, #20
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
	...

0800064c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000654:	4a14      	ldr	r2, [pc, #80]	; (80006a8 <_sbrk+0x5c>)
 8000656:	4b15      	ldr	r3, [pc, #84]	; (80006ac <_sbrk+0x60>)
 8000658:	1ad3      	subs	r3, r2, r3
 800065a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000660:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <_sbrk+0x64>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d102      	bne.n	800066e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <_sbrk+0x64>)
 800066a:	4a12      	ldr	r2, [pc, #72]	; (80006b4 <_sbrk+0x68>)
 800066c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <_sbrk+0x64>)
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4413      	add	r3, r2
 8000676:	693a      	ldr	r2, [r7, #16]
 8000678:	429a      	cmp	r2, r3
 800067a:	d207      	bcs.n	800068c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800067c:	f002 fc1e 	bl	8002ebc <__errno>
 8000680:	4603      	mov	r3, r0
 8000682:	220c      	movs	r2, #12
 8000684:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000686:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800068a:	e009      	b.n	80006a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800068c:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <_sbrk+0x64>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000692:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <_sbrk+0x64>)
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4413      	add	r3, r2
 800069a:	4a05      	ldr	r2, [pc, #20]	; (80006b0 <_sbrk+0x64>)
 800069c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800069e:	68fb      	ldr	r3, [r7, #12]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3718      	adds	r7, #24
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20003000 	.word	0x20003000
 80006ac:	00000400 	.word	0x00000400
 80006b0:	20000630 	.word	0x20000630
 80006b4:	20000850 	.word	0x20000850

080006b8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <SystemInit+0x20>)
 80006be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006c2:	4a05      	ldr	r2, [pc, #20]	; (80006d8 <SystemInit+0x20>)
 80006c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000714 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006e0:	480d      	ldr	r0, [pc, #52]	; (8000718 <LoopForever+0x6>)
  ldr r1, =_edata
 80006e2:	490e      	ldr	r1, [pc, #56]	; (800071c <LoopForever+0xa>)
  ldr r2, =_sidata
 80006e4:	4a0e      	ldr	r2, [pc, #56]	; (8000720 <LoopForever+0xe>)
  movs r3, #0
 80006e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006e8:	e002      	b.n	80006f0 <LoopCopyDataInit>

080006ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ee:	3304      	adds	r3, #4

080006f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f4:	d3f9      	bcc.n	80006ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006f6:	4a0b      	ldr	r2, [pc, #44]	; (8000724 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006f8:	4c0b      	ldr	r4, [pc, #44]	; (8000728 <LoopForever+0x16>)
  movs r3, #0
 80006fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006fc:	e001      	b.n	8000702 <LoopFillZerobss>

080006fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000700:	3204      	adds	r2, #4

08000702 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000702:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000704:	d3fb      	bcc.n	80006fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000706:	f7ff ffd7 	bl	80006b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800070a:	f002 fbdd 	bl	8002ec8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800070e:	f7ff fd75 	bl	80001fc <main>

08000712 <LoopForever>:

LoopForever:
    b LoopForever
 8000712:	e7fe      	b.n	8000712 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000714:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000718:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800071c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000720:	08003e0c 	.word	0x08003e0c
  ldr r2, =_sbss
 8000724:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000728:	2000084c 	.word	0x2000084c

0800072c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800072c:	e7fe      	b.n	800072c <ADC1_2_IRQHandler>
	...

08000730 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000734:	4b08      	ldr	r3, [pc, #32]	; (8000758 <HAL_Init+0x28>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a07      	ldr	r2, [pc, #28]	; (8000758 <HAL_Init+0x28>)
 800073a:	f043 0310 	orr.w	r3, r3, #16
 800073e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000740:	2003      	movs	r0, #3
 8000742:	f000 f931 	bl	80009a8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000746:	2000      	movs	r0, #0
 8000748:	f000 f808 	bl	800075c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800074c:	f7ff fe68 	bl	8000420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000750:	2300      	movs	r3, #0
}
 8000752:	4618      	mov	r0, r3
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40022000 	.word	0x40022000

0800075c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000764:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <HAL_InitTick+0x54>)
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <HAL_InitTick+0x58>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	4619      	mov	r1, r3
 800076e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000772:	fbb3 f3f1 	udiv	r3, r3, r1
 8000776:	fbb2 f3f3 	udiv	r3, r2, r3
 800077a:	4618      	mov	r0, r3
 800077c:	f000 f93b 	bl	80009f6 <HAL_SYSTICK_Config>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000786:	2301      	movs	r3, #1
 8000788:	e00e      	b.n	80007a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2b0f      	cmp	r3, #15
 800078e:	d80a      	bhi.n	80007a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000790:	2200      	movs	r2, #0
 8000792:	6879      	ldr	r1, [r7, #4]
 8000794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000798:	f000 f911 	bl	80009be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800079c:	4a06      	ldr	r2, [pc, #24]	; (80007b8 <HAL_InitTick+0x5c>)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007a2:	2300      	movs	r3, #0
 80007a4:	e000      	b.n	80007a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000000 	.word	0x20000000
 80007b4:	20000008 	.word	0x20000008
 80007b8:	20000004 	.word	0x20000004

080007bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <HAL_IncTick+0x20>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	461a      	mov	r2, r3
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <HAL_IncTick+0x24>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4413      	add	r3, r2
 80007cc:	4a04      	ldr	r2, [pc, #16]	; (80007e0 <HAL_IncTick+0x24>)
 80007ce:	6013      	str	r3, [r2, #0]
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	20000008 	.word	0x20000008
 80007e0:	20000634 	.word	0x20000634

080007e4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  return uwTick;  
 80007e8:	4b03      	ldr	r3, [pc, #12]	; (80007f8 <HAL_GetTick+0x14>)
 80007ea:	681b      	ldr	r3, [r3, #0]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	20000634 	.word	0x20000634

080007fc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000804:	f7ff ffee 	bl	80007e4 <HAL_GetTick>
 8000808:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000814:	d005      	beq.n	8000822 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000816:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <HAL_Delay+0x44>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	461a      	mov	r2, r3
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	4413      	add	r3, r2
 8000820:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000822:	bf00      	nop
 8000824:	f7ff ffde 	bl	80007e4 <HAL_GetTick>
 8000828:	4602      	mov	r2, r0
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	68fa      	ldr	r2, [r7, #12]
 8000830:	429a      	cmp	r2, r3
 8000832:	d8f7      	bhi.n	8000824 <HAL_Delay+0x28>
  {
  }
}
 8000834:	bf00      	nop
 8000836:	bf00      	nop
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000008 	.word	0x20000008

08000844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f003 0307 	and.w	r3, r3, #7
 8000852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <__NVIC_SetPriorityGrouping+0x44>)
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800085a:	68ba      	ldr	r2, [r7, #8]
 800085c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000860:	4013      	ands	r3, r2
 8000862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800086c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000876:	4a04      	ldr	r2, [pc, #16]	; (8000888 <__NVIC_SetPriorityGrouping+0x44>)
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	60d3      	str	r3, [r2, #12]
}
 800087c:	bf00      	nop
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000890:	4b04      	ldr	r3, [pc, #16]	; (80008a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	0a1b      	lsrs	r3, r3, #8
 8000896:	f003 0307 	and.w	r3, r3, #7
}
 800089a:	4618      	mov	r0, r3
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	6039      	str	r1, [r7, #0]
 80008b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	db0a      	blt.n	80008d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	490c      	ldr	r1, [pc, #48]	; (80008f4 <__NVIC_SetPriority+0x4c>)
 80008c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c6:	0112      	lsls	r2, r2, #4
 80008c8:	b2d2      	uxtb	r2, r2
 80008ca:	440b      	add	r3, r1
 80008cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008d0:	e00a      	b.n	80008e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	4908      	ldr	r1, [pc, #32]	; (80008f8 <__NVIC_SetPriority+0x50>)
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	f003 030f 	and.w	r3, r3, #15
 80008de:	3b04      	subs	r3, #4
 80008e0:	0112      	lsls	r2, r2, #4
 80008e2:	b2d2      	uxtb	r2, r2
 80008e4:	440b      	add	r3, r1
 80008e6:	761a      	strb	r2, [r3, #24]
}
 80008e8:	bf00      	nop
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	e000e100 	.word	0xe000e100
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b089      	sub	sp, #36	; 0x24
 8000900:	af00      	add	r7, sp, #0
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	f003 0307 	and.w	r3, r3, #7
 800090e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	f1c3 0307 	rsb	r3, r3, #7
 8000916:	2b04      	cmp	r3, #4
 8000918:	bf28      	it	cs
 800091a:	2304      	movcs	r3, #4
 800091c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	3304      	adds	r3, #4
 8000922:	2b06      	cmp	r3, #6
 8000924:	d902      	bls.n	800092c <NVIC_EncodePriority+0x30>
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	3b03      	subs	r3, #3
 800092a:	e000      	b.n	800092e <NVIC_EncodePriority+0x32>
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000930:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000934:	69bb      	ldr	r3, [r7, #24]
 8000936:	fa02 f303 	lsl.w	r3, r2, r3
 800093a:	43da      	mvns	r2, r3
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	401a      	ands	r2, r3
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000944:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	fa01 f303 	lsl.w	r3, r1, r3
 800094e:	43d9      	mvns	r1, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000954:	4313      	orrs	r3, r2
         );
}
 8000956:	4618      	mov	r0, r3
 8000958:	3724      	adds	r7, #36	; 0x24
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
	...

08000964 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	3b01      	subs	r3, #1
 8000970:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000974:	d301      	bcc.n	800097a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000976:	2301      	movs	r3, #1
 8000978:	e00f      	b.n	800099a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800097a:	4a0a      	ldr	r2, [pc, #40]	; (80009a4 <SysTick_Config+0x40>)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	3b01      	subs	r3, #1
 8000980:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000982:	210f      	movs	r1, #15
 8000984:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000988:	f7ff ff8e 	bl	80008a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800098c:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <SysTick_Config+0x40>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000992:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <SysTick_Config+0x40>)
 8000994:	2207      	movs	r2, #7
 8000996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000998:	2300      	movs	r3, #0
}
 800099a:	4618      	mov	r0, r3
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	e000e010 	.word	0xe000e010

080009a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f7ff ff47 	bl	8000844 <__NVIC_SetPriorityGrouping>
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b086      	sub	sp, #24
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	4603      	mov	r3, r0
 80009c6:	60b9      	str	r1, [r7, #8]
 80009c8:	607a      	str	r2, [r7, #4]
 80009ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009d0:	f7ff ff5c 	bl	800088c <__NVIC_GetPriorityGrouping>
 80009d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	68b9      	ldr	r1, [r7, #8]
 80009da:	6978      	ldr	r0, [r7, #20]
 80009dc:	f7ff ff8e 	bl	80008fc <NVIC_EncodePriority>
 80009e0:	4602      	mov	r2, r0
 80009e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009e6:	4611      	mov	r1, r2
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff ff5d 	bl	80008a8 <__NVIC_SetPriority>
}
 80009ee:	bf00      	nop
 80009f0:	3718      	adds	r7, #24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b082      	sub	sp, #8
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f7ff ffb0 	bl	8000964 <SysTick_Config>
 8000a04:	4603      	mov	r3, r0
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b087      	sub	sp, #28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a1e:	e14e      	b.n	8000cbe <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	2101      	movs	r1, #1
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	f000 8140 	beq.w	8000cb8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	f003 0303 	and.w	r3, r3, #3
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d005      	beq.n	8000a50 <HAL_GPIO_Init+0x40>
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f003 0303 	and.w	r3, r3, #3
 8000a4c:	2b02      	cmp	r3, #2
 8000a4e:	d130      	bne.n	8000ab2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	689b      	ldr	r3, [r3, #8]
 8000a54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	2203      	movs	r2, #3
 8000a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a60:	43db      	mvns	r3, r3
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	4013      	ands	r3, r2
 8000a66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	68da      	ldr	r2, [r3, #12]
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	fa02 f303 	lsl.w	r3, r2, r3
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	693a      	ldr	r2, [r7, #16]
 8000a7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a86:	2201      	movs	r2, #1
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8e:	43db      	mvns	r3, r3
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	4013      	ands	r3, r2
 8000a94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	091b      	lsrs	r3, r3, #4
 8000a9c:	f003 0201 	and.w	r2, r3, #1
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	f003 0303 	and.w	r3, r3, #3
 8000aba:	2b03      	cmp	r3, #3
 8000abc:	d017      	beq.n	8000aee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	68db      	ldr	r3, [r3, #12]
 8000ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	2203      	movs	r2, #3
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	693a      	ldr	r2, [r7, #16]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	689a      	ldr	r2, [r3, #8]
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f003 0303 	and.w	r3, r3, #3
 8000af6:	2b02      	cmp	r3, #2
 8000af8:	d123      	bne.n	8000b42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	08da      	lsrs	r2, r3, #3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	3208      	adds	r2, #8
 8000b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	f003 0307 	and.w	r3, r3, #7
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	220f      	movs	r2, #15
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	43db      	mvns	r3, r3
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	691a      	ldr	r2, [r3, #16]
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	f003 0307 	and.w	r3, r3, #7
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	08da      	lsrs	r2, r3, #3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3208      	adds	r2, #8
 8000b3c:	6939      	ldr	r1, [r7, #16]
 8000b3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	2203      	movs	r2, #3
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	43db      	mvns	r3, r3
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	4013      	ands	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	f003 0203 	and.w	r2, r3, #3
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	f000 809a 	beq.w	8000cb8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b84:	4b55      	ldr	r3, [pc, #340]	; (8000cdc <HAL_GPIO_Init+0x2cc>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	4a54      	ldr	r2, [pc, #336]	; (8000cdc <HAL_GPIO_Init+0x2cc>)
 8000b8a:	f043 0301 	orr.w	r3, r3, #1
 8000b8e:	6193      	str	r3, [r2, #24]
 8000b90:	4b52      	ldr	r3, [pc, #328]	; (8000cdc <HAL_GPIO_Init+0x2cc>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	f003 0301 	and.w	r3, r3, #1
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b9c:	4a50      	ldr	r2, [pc, #320]	; (8000ce0 <HAL_GPIO_Init+0x2d0>)
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	089b      	lsrs	r3, r3, #2
 8000ba2:	3302      	adds	r3, #2
 8000ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	f003 0303 	and.w	r3, r3, #3
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	220f      	movs	r2, #15
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	43db      	mvns	r3, r3
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bc6:	d013      	beq.n	8000bf0 <HAL_GPIO_Init+0x1e0>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a46      	ldr	r2, [pc, #280]	; (8000ce4 <HAL_GPIO_Init+0x2d4>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d00d      	beq.n	8000bec <HAL_GPIO_Init+0x1dc>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a45      	ldr	r2, [pc, #276]	; (8000ce8 <HAL_GPIO_Init+0x2d8>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d007      	beq.n	8000be8 <HAL_GPIO_Init+0x1d8>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4a44      	ldr	r2, [pc, #272]	; (8000cec <HAL_GPIO_Init+0x2dc>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d101      	bne.n	8000be4 <HAL_GPIO_Init+0x1d4>
 8000be0:	2303      	movs	r3, #3
 8000be2:	e006      	b.n	8000bf2 <HAL_GPIO_Init+0x1e2>
 8000be4:	2305      	movs	r3, #5
 8000be6:	e004      	b.n	8000bf2 <HAL_GPIO_Init+0x1e2>
 8000be8:	2302      	movs	r3, #2
 8000bea:	e002      	b.n	8000bf2 <HAL_GPIO_Init+0x1e2>
 8000bec:	2301      	movs	r3, #1
 8000bee:	e000      	b.n	8000bf2 <HAL_GPIO_Init+0x1e2>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	697a      	ldr	r2, [r7, #20]
 8000bf4:	f002 0203 	and.w	r2, r2, #3
 8000bf8:	0092      	lsls	r2, r2, #2
 8000bfa:	4093      	lsls	r3, r2
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c02:	4937      	ldr	r1, [pc, #220]	; (8000ce0 <HAL_GPIO_Init+0x2d0>)
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	089b      	lsrs	r3, r3, #2
 8000c08:	3302      	adds	r3, #2
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c10:	4b37      	ldr	r3, [pc, #220]	; (8000cf0 <HAL_GPIO_Init+0x2e0>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d003      	beq.n	8000c34 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c34:	4a2e      	ldr	r2, [pc, #184]	; (8000cf0 <HAL_GPIO_Init+0x2e0>)
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000c3a:	4b2d      	ldr	r3, [pc, #180]	; (8000cf0 <HAL_GPIO_Init+0x2e0>)
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	43db      	mvns	r3, r3
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	4013      	ands	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d003      	beq.n	8000c5e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c5e:	4a24      	ldr	r2, [pc, #144]	; (8000cf0 <HAL_GPIO_Init+0x2e0>)
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c64:	4b22      	ldr	r3, [pc, #136]	; (8000cf0 <HAL_GPIO_Init+0x2e0>)
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	4013      	ands	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d003      	beq.n	8000c88 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c88:	4a19      	ldr	r2, [pc, #100]	; (8000cf0 <HAL_GPIO_Init+0x2e0>)
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c8e:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <HAL_GPIO_Init+0x2e0>)
 8000c90:	68db      	ldr	r3, [r3, #12]
 8000c92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	43db      	mvns	r3, r3
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d003      	beq.n	8000cb2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cb2:	4a0f      	ldr	r2, [pc, #60]	; (8000cf0 <HAL_GPIO_Init+0x2e0>)
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	f47f aea9 	bne.w	8000a20 <HAL_GPIO_Init+0x10>
  }
}
 8000cce:	bf00      	nop
 8000cd0:	bf00      	nop
 8000cd2:	371c      	adds	r7, #28
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	40010000 	.word	0x40010000
 8000ce4:	48000400 	.word	0x48000400
 8000ce8:	48000800 	.word	0x48000800
 8000cec:	48000c00 	.word	0x48000c00
 8000cf0:	40010400 	.word	0x40010400

08000cf4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d04:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d102      	bne.n	8000d1a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000d14:	2301      	movs	r3, #1
 8000d16:	f001 b823 	b.w	8001d60 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	f000 817d 	beq.w	800102a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d30:	4bbc      	ldr	r3, [pc, #752]	; (8001024 <HAL_RCC_OscConfig+0x330>)
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f003 030c 	and.w	r3, r3, #12
 8000d38:	2b04      	cmp	r3, #4
 8000d3a:	d00c      	beq.n	8000d56 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d3c:	4bb9      	ldr	r3, [pc, #740]	; (8001024 <HAL_RCC_OscConfig+0x330>)
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f003 030c 	and.w	r3, r3, #12
 8000d44:	2b08      	cmp	r3, #8
 8000d46:	d15c      	bne.n	8000e02 <HAL_RCC_OscConfig+0x10e>
 8000d48:	4bb6      	ldr	r3, [pc, #728]	; (8001024 <HAL_RCC_OscConfig+0x330>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d54:	d155      	bne.n	8000e02 <HAL_RCC_OscConfig+0x10e>
 8000d56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d5a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d5e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000d62:	fa93 f3a3 	rbit	r3, r3
 8000d66:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d6a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d6e:	fab3 f383 	clz	r3, r3
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	095b      	lsrs	r3, r3, #5
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d102      	bne.n	8000d88 <HAL_RCC_OscConfig+0x94>
 8000d82:	4ba8      	ldr	r3, [pc, #672]	; (8001024 <HAL_RCC_OscConfig+0x330>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	e015      	b.n	8000db4 <HAL_RCC_OscConfig+0xc0>
 8000d88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d8c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d90:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000d94:	fa93 f3a3 	rbit	r3, r3
 8000d98:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000d9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000da0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000da4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000da8:	fa93 f3a3 	rbit	r3, r3
 8000dac:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000db0:	4b9c      	ldr	r3, [pc, #624]	; (8001024 <HAL_RCC_OscConfig+0x330>)
 8000db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000db8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000dbc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000dc0:	fa92 f2a2 	rbit	r2, r2
 8000dc4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000dc8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000dcc:	fab2 f282 	clz	r2, r2
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	f042 0220 	orr.w	r2, r2, #32
 8000dd6:	b2d2      	uxtb	r2, r2
 8000dd8:	f002 021f 	and.w	r2, r2, #31
 8000ddc:	2101      	movs	r1, #1
 8000dde:	fa01 f202 	lsl.w	r2, r1, r2
 8000de2:	4013      	ands	r3, r2
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	f000 811f 	beq.w	8001028 <HAL_RCC_OscConfig+0x334>
 8000dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f040 8116 	bne.w	8001028 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	f000 bfaf 	b.w	8001d60 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e12:	d106      	bne.n	8000e22 <HAL_RCC_OscConfig+0x12e>
 8000e14:	4b83      	ldr	r3, [pc, #524]	; (8001024 <HAL_RCC_OscConfig+0x330>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a82      	ldr	r2, [pc, #520]	; (8001024 <HAL_RCC_OscConfig+0x330>)
 8000e1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e1e:	6013      	str	r3, [r2, #0]
 8000e20:	e036      	b.n	8000e90 <HAL_RCC_OscConfig+0x19c>
 8000e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d10c      	bne.n	8000e4c <HAL_RCC_OscConfig+0x158>
 8000e32:	4b7c      	ldr	r3, [pc, #496]	; (8001024 <HAL_RCC_OscConfig+0x330>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a7b      	ldr	r2, [pc, #492]	; (8001024 <HAL_RCC_OscConfig+0x330>)
 8000e38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e3c:	6013      	str	r3, [r2, #0]
 8000e3e:	4b79      	ldr	r3, [pc, #484]	; (8001024 <HAL_RCC_OscConfig+0x330>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a78      	ldr	r2, [pc, #480]	; (8001024 <HAL_RCC_OscConfig+0x330>)
 8000e44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e48:	6013      	str	r3, [r2, #0]
 8000e4a:	e021      	b.n	8000e90 <HAL_RCC_OscConfig+0x19c>
 8000e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e5c:	d10c      	bne.n	8000e78 <HAL_RCC_OscConfig+0x184>
 8000e5e:	4b71      	ldr	r3, [pc, #452]	; (8001024 <HAL_RCC_OscConfig+0x330>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a70      	ldr	r2, [pc, #448]	; (8001024 <HAL_RCC_OscConfig+0x330>)
 8000e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e68:	6013      	str	r3, [r2, #0]
 8000e6a:	4b6e      	ldr	r3, [pc, #440]	; (8001024 <HAL_RCC_OscConfig+0x330>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a6d      	ldr	r2, [pc, #436]	; (8001024 <HAL_RCC_OscConfig+0x330>)
 8000e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e74:	6013      	str	r3, [r2, #0]
 8000e76:	e00b      	b.n	8000e90 <HAL_RCC_OscConfig+0x19c>
 8000e78:	4b6a      	ldr	r3, [pc, #424]	; (8001024 <HAL_RCC_OscConfig+0x330>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a69      	ldr	r2, [pc, #420]	; (8001024 <HAL_RCC_OscConfig+0x330>)
 8000e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e82:	6013      	str	r3, [r2, #0]
 8000e84:	4b67      	ldr	r3, [pc, #412]	; (8001024 <HAL_RCC_OscConfig+0x330>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a66      	ldr	r2, [pc, #408]	; (8001024 <HAL_RCC_OscConfig+0x330>)
 8000e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e8e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e90:	4b64      	ldr	r3, [pc, #400]	; (8001024 <HAL_RCC_OscConfig+0x330>)
 8000e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e94:	f023 020f 	bic.w	r2, r3, #15
 8000e98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	495f      	ldr	r1, [pc, #380]	; (8001024 <HAL_RCC_OscConfig+0x330>)
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000eae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d059      	beq.n	8000f6e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eba:	f7ff fc93 	bl	80007e4 <HAL_GetTick>
 8000ebe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ec2:	e00a      	b.n	8000eda <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ec4:	f7ff fc8e 	bl	80007e4 <HAL_GetTick>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	2b64      	cmp	r3, #100	; 0x64
 8000ed2:	d902      	bls.n	8000eda <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	f000 bf43 	b.w	8001d60 <HAL_RCC_OscConfig+0x106c>
 8000eda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ede:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000ee6:	fa93 f3a3 	rbit	r3, r3
 8000eea:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000eee:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ef2:	fab3 f383 	clz	r3, r3
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	095b      	lsrs	r3, r3, #5
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d102      	bne.n	8000f0c <HAL_RCC_OscConfig+0x218>
 8000f06:	4b47      	ldr	r3, [pc, #284]	; (8001024 <HAL_RCC_OscConfig+0x330>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	e015      	b.n	8000f38 <HAL_RCC_OscConfig+0x244>
 8000f0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f10:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f14:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000f18:	fa93 f3a3 	rbit	r3, r3
 8000f1c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f24:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f28:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000f2c:	fa93 f3a3 	rbit	r3, r3
 8000f30:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000f34:	4b3b      	ldr	r3, [pc, #236]	; (8001024 <HAL_RCC_OscConfig+0x330>)
 8000f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f3c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000f40:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000f44:	fa92 f2a2 	rbit	r2, r2
 8000f48:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000f4c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000f50:	fab2 f282 	clz	r2, r2
 8000f54:	b2d2      	uxtb	r2, r2
 8000f56:	f042 0220 	orr.w	r2, r2, #32
 8000f5a:	b2d2      	uxtb	r2, r2
 8000f5c:	f002 021f 	and.w	r2, r2, #31
 8000f60:	2101      	movs	r1, #1
 8000f62:	fa01 f202 	lsl.w	r2, r1, r2
 8000f66:	4013      	ands	r3, r2
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d0ab      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x1d0>
 8000f6c:	e05d      	b.n	800102a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f6e:	f7ff fc39 	bl	80007e4 <HAL_GetTick>
 8000f72:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f76:	e00a      	b.n	8000f8e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f78:	f7ff fc34 	bl	80007e4 <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	2b64      	cmp	r3, #100	; 0x64
 8000f86:	d902      	bls.n	8000f8e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	f000 bee9 	b.w	8001d60 <HAL_RCC_OscConfig+0x106c>
 8000f8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f92:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f96:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000f9a:	fa93 f3a3 	rbit	r3, r3
 8000f9e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000fa2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fa6:	fab3 f383 	clz	r3, r3
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	095b      	lsrs	r3, r3, #5
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d102      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x2cc>
 8000fba:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <HAL_RCC_OscConfig+0x330>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	e015      	b.n	8000fec <HAL_RCC_OscConfig+0x2f8>
 8000fc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fc4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000fcc:	fa93 f3a3 	rbit	r3, r3
 8000fd0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000fd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fd8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000fdc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000fe0:	fa93 f3a3 	rbit	r3, r3
 8000fe4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000fe8:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <HAL_RCC_OscConfig+0x330>)
 8000fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ff0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000ff4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000ff8:	fa92 f2a2 	rbit	r2, r2
 8000ffc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001000:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001004:	fab2 f282 	clz	r2, r2
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	f042 0220 	orr.w	r2, r2, #32
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	f002 021f 	and.w	r2, r2, #31
 8001014:	2101      	movs	r1, #1
 8001016:	fa01 f202 	lsl.w	r2, r1, r2
 800101a:	4013      	ands	r3, r2
 800101c:	2b00      	cmp	r3, #0
 800101e:	d1ab      	bne.n	8000f78 <HAL_RCC_OscConfig+0x284>
 8001020:	e003      	b.n	800102a <HAL_RCC_OscConfig+0x336>
 8001022:	bf00      	nop
 8001024:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800102a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800102e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	2b00      	cmp	r3, #0
 800103c:	f000 817d 	beq.w	800133a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001040:	4ba6      	ldr	r3, [pc, #664]	; (80012dc <HAL_RCC_OscConfig+0x5e8>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 030c 	and.w	r3, r3, #12
 8001048:	2b00      	cmp	r3, #0
 800104a:	d00b      	beq.n	8001064 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800104c:	4ba3      	ldr	r3, [pc, #652]	; (80012dc <HAL_RCC_OscConfig+0x5e8>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 030c 	and.w	r3, r3, #12
 8001054:	2b08      	cmp	r3, #8
 8001056:	d172      	bne.n	800113e <HAL_RCC_OscConfig+0x44a>
 8001058:	4ba0      	ldr	r3, [pc, #640]	; (80012dc <HAL_RCC_OscConfig+0x5e8>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d16c      	bne.n	800113e <HAL_RCC_OscConfig+0x44a>
 8001064:	2302      	movs	r3, #2
 8001066:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800106e:	fa93 f3a3 	rbit	r3, r3
 8001072:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001076:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800107a:	fab3 f383 	clz	r3, r3
 800107e:	b2db      	uxtb	r3, r3
 8001080:	095b      	lsrs	r3, r3, #5
 8001082:	b2db      	uxtb	r3, r3
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b01      	cmp	r3, #1
 800108c:	d102      	bne.n	8001094 <HAL_RCC_OscConfig+0x3a0>
 800108e:	4b93      	ldr	r3, [pc, #588]	; (80012dc <HAL_RCC_OscConfig+0x5e8>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	e013      	b.n	80010bc <HAL_RCC_OscConfig+0x3c8>
 8001094:	2302      	movs	r3, #2
 8001096:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800109a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800109e:	fa93 f3a3 	rbit	r3, r3
 80010a2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80010a6:	2302      	movs	r3, #2
 80010a8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80010ac:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80010b0:	fa93 f3a3 	rbit	r3, r3
 80010b4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80010b8:	4b88      	ldr	r3, [pc, #544]	; (80012dc <HAL_RCC_OscConfig+0x5e8>)
 80010ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010bc:	2202      	movs	r2, #2
 80010be:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80010c2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80010c6:	fa92 f2a2 	rbit	r2, r2
 80010ca:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80010ce:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80010d2:	fab2 f282 	clz	r2, r2
 80010d6:	b2d2      	uxtb	r2, r2
 80010d8:	f042 0220 	orr.w	r2, r2, #32
 80010dc:	b2d2      	uxtb	r2, r2
 80010de:	f002 021f 	and.w	r2, r2, #31
 80010e2:	2101      	movs	r1, #1
 80010e4:	fa01 f202 	lsl.w	r2, r1, r2
 80010e8:	4013      	ands	r3, r2
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d00a      	beq.n	8001104 <HAL_RCC_OscConfig+0x410>
 80010ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	691b      	ldr	r3, [r3, #16]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d002      	beq.n	8001104 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	f000 be2e 	b.w	8001d60 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001104:	4b75      	ldr	r3, [pc, #468]	; (80012dc <HAL_RCC_OscConfig+0x5e8>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800110c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001110:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	695b      	ldr	r3, [r3, #20]
 8001118:	21f8      	movs	r1, #248	; 0xf8
 800111a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800111e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001122:	fa91 f1a1 	rbit	r1, r1
 8001126:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800112a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800112e:	fab1 f181 	clz	r1, r1
 8001132:	b2c9      	uxtb	r1, r1
 8001134:	408b      	lsls	r3, r1
 8001136:	4969      	ldr	r1, [pc, #420]	; (80012dc <HAL_RCC_OscConfig+0x5e8>)
 8001138:	4313      	orrs	r3, r2
 800113a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800113c:	e0fd      	b.n	800133a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800113e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001142:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	691b      	ldr	r3, [r3, #16]
 800114a:	2b00      	cmp	r3, #0
 800114c:	f000 8088 	beq.w	8001260 <HAL_RCC_OscConfig+0x56c>
 8001150:	2301      	movs	r3, #1
 8001152:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001156:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800115a:	fa93 f3a3 	rbit	r3, r3
 800115e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001162:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001166:	fab3 f383 	clz	r3, r3
 800116a:	b2db      	uxtb	r3, r3
 800116c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001170:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	461a      	mov	r2, r3
 8001178:	2301      	movs	r3, #1
 800117a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117c:	f7ff fb32 	bl	80007e4 <HAL_GetTick>
 8001180:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001184:	e00a      	b.n	800119c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001186:	f7ff fb2d 	bl	80007e4 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b02      	cmp	r3, #2
 8001194:	d902      	bls.n	800119c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	f000 bde2 	b.w	8001d60 <HAL_RCC_OscConfig+0x106c>
 800119c:	2302      	movs	r3, #2
 800119e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80011a6:	fa93 f3a3 	rbit	r3, r3
 80011aa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80011ae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b2:	fab3 f383 	clz	r3, r3
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	095b      	lsrs	r3, r3, #5
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d102      	bne.n	80011cc <HAL_RCC_OscConfig+0x4d8>
 80011c6:	4b45      	ldr	r3, [pc, #276]	; (80012dc <HAL_RCC_OscConfig+0x5e8>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	e013      	b.n	80011f4 <HAL_RCC_OscConfig+0x500>
 80011cc:	2302      	movs	r3, #2
 80011ce:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80011d6:	fa93 f3a3 	rbit	r3, r3
 80011da:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80011de:	2302      	movs	r3, #2
 80011e0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80011e4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80011e8:	fa93 f3a3 	rbit	r3, r3
 80011ec:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80011f0:	4b3a      	ldr	r3, [pc, #232]	; (80012dc <HAL_RCC_OscConfig+0x5e8>)
 80011f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f4:	2202      	movs	r2, #2
 80011f6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80011fa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80011fe:	fa92 f2a2 	rbit	r2, r2
 8001202:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001206:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800120a:	fab2 f282 	clz	r2, r2
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	f042 0220 	orr.w	r2, r2, #32
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	f002 021f 	and.w	r2, r2, #31
 800121a:	2101      	movs	r1, #1
 800121c:	fa01 f202 	lsl.w	r2, r1, r2
 8001220:	4013      	ands	r3, r2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d0af      	beq.n	8001186 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001226:	4b2d      	ldr	r3, [pc, #180]	; (80012dc <HAL_RCC_OscConfig+0x5e8>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800122e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001232:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	21f8      	movs	r1, #248	; 0xf8
 800123c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001240:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001244:	fa91 f1a1 	rbit	r1, r1
 8001248:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800124c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001250:	fab1 f181 	clz	r1, r1
 8001254:	b2c9      	uxtb	r1, r1
 8001256:	408b      	lsls	r3, r1
 8001258:	4920      	ldr	r1, [pc, #128]	; (80012dc <HAL_RCC_OscConfig+0x5e8>)
 800125a:	4313      	orrs	r3, r2
 800125c:	600b      	str	r3, [r1, #0]
 800125e:	e06c      	b.n	800133a <HAL_RCC_OscConfig+0x646>
 8001260:	2301      	movs	r3, #1
 8001262:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001266:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800126a:	fa93 f3a3 	rbit	r3, r3
 800126e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001272:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001276:	fab3 f383 	clz	r3, r3
 800127a:	b2db      	uxtb	r3, r3
 800127c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001280:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	461a      	mov	r2, r3
 8001288:	2300      	movs	r3, #0
 800128a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128c:	f7ff faaa 	bl	80007e4 <HAL_GetTick>
 8001290:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001294:	e00a      	b.n	80012ac <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001296:	f7ff faa5 	bl	80007e4 <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d902      	bls.n	80012ac <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	f000 bd5a 	b.w	8001d60 <HAL_RCC_OscConfig+0x106c>
 80012ac:	2302      	movs	r3, #2
 80012ae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80012b6:	fa93 f3a3 	rbit	r3, r3
 80012ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80012be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012c2:	fab3 f383 	clz	r3, r3
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	095b      	lsrs	r3, r3, #5
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d104      	bne.n	80012e0 <HAL_RCC_OscConfig+0x5ec>
 80012d6:	4b01      	ldr	r3, [pc, #4]	; (80012dc <HAL_RCC_OscConfig+0x5e8>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	e015      	b.n	8001308 <HAL_RCC_OscConfig+0x614>
 80012dc:	40021000 	.word	0x40021000
 80012e0:	2302      	movs	r3, #2
 80012e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80012ea:	fa93 f3a3 	rbit	r3, r3
 80012ee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80012f2:	2302      	movs	r3, #2
 80012f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80012f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80012fc:	fa93 f3a3 	rbit	r3, r3
 8001300:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001304:	4bc8      	ldr	r3, [pc, #800]	; (8001628 <HAL_RCC_OscConfig+0x934>)
 8001306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001308:	2202      	movs	r2, #2
 800130a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800130e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001312:	fa92 f2a2 	rbit	r2, r2
 8001316:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800131a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800131e:	fab2 f282 	clz	r2, r2
 8001322:	b2d2      	uxtb	r2, r2
 8001324:	f042 0220 	orr.w	r2, r2, #32
 8001328:	b2d2      	uxtb	r2, r2
 800132a:	f002 021f 	and.w	r2, r2, #31
 800132e:	2101      	movs	r1, #1
 8001330:	fa01 f202 	lsl.w	r2, r1, r2
 8001334:	4013      	ands	r3, r2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1ad      	bne.n	8001296 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800133a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800133e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0308 	and.w	r3, r3, #8
 800134a:	2b00      	cmp	r3, #0
 800134c:	f000 8110 	beq.w	8001570 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001350:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001354:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d079      	beq.n	8001454 <HAL_RCC_OscConfig+0x760>
 8001360:	2301      	movs	r3, #1
 8001362:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001366:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800136a:	fa93 f3a3 	rbit	r3, r3
 800136e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001372:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001376:	fab3 f383 	clz	r3, r3
 800137a:	b2db      	uxtb	r3, r3
 800137c:	461a      	mov	r2, r3
 800137e:	4bab      	ldr	r3, [pc, #684]	; (800162c <HAL_RCC_OscConfig+0x938>)
 8001380:	4413      	add	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	461a      	mov	r2, r3
 8001386:	2301      	movs	r3, #1
 8001388:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800138a:	f7ff fa2b 	bl	80007e4 <HAL_GetTick>
 800138e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001392:	e00a      	b.n	80013aa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001394:	f7ff fa26 	bl	80007e4 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d902      	bls.n	80013aa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	f000 bcdb 	b.w	8001d60 <HAL_RCC_OscConfig+0x106c>
 80013aa:	2302      	movs	r3, #2
 80013ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80013b4:	fa93 f3a3 	rbit	r3, r3
 80013b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80013bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013c0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80013c4:	2202      	movs	r2, #2
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013cc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	fa93 f2a3 	rbit	r2, r3
 80013d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80013e8:	2202      	movs	r2, #2
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	fa93 f2a3 	rbit	r2, r3
 80013fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001402:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001404:	4b88      	ldr	r3, [pc, #544]	; (8001628 <HAL_RCC_OscConfig+0x934>)
 8001406:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800140c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001410:	2102      	movs	r1, #2
 8001412:	6019      	str	r1, [r3, #0]
 8001414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001418:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	fa93 f1a3 	rbit	r1, r3
 8001422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001426:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800142a:	6019      	str	r1, [r3, #0]
  return result;
 800142c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001430:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	fab3 f383 	clz	r3, r3
 800143a:	b2db      	uxtb	r3, r3
 800143c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001440:	b2db      	uxtb	r3, r3
 8001442:	f003 031f 	and.w	r3, r3, #31
 8001446:	2101      	movs	r1, #1
 8001448:	fa01 f303 	lsl.w	r3, r1, r3
 800144c:	4013      	ands	r3, r2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0a0      	beq.n	8001394 <HAL_RCC_OscConfig+0x6a0>
 8001452:	e08d      	b.n	8001570 <HAL_RCC_OscConfig+0x87c>
 8001454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001458:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800145c:	2201      	movs	r2, #1
 800145e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001460:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001464:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	fa93 f2a3 	rbit	r2, r3
 800146e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001472:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001476:	601a      	str	r2, [r3, #0]
  return result;
 8001478:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800147c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001480:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001482:	fab3 f383 	clz	r3, r3
 8001486:	b2db      	uxtb	r3, r3
 8001488:	461a      	mov	r2, r3
 800148a:	4b68      	ldr	r3, [pc, #416]	; (800162c <HAL_RCC_OscConfig+0x938>)
 800148c:	4413      	add	r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	461a      	mov	r2, r3
 8001492:	2300      	movs	r3, #0
 8001494:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001496:	f7ff f9a5 	bl	80007e4 <HAL_GetTick>
 800149a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800149e:	e00a      	b.n	80014b6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014a0:	f7ff f9a0 	bl	80007e4 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d902      	bls.n	80014b6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	f000 bc55 	b.w	8001d60 <HAL_RCC_OscConfig+0x106c>
 80014b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80014be:	2202      	movs	r2, #2
 80014c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	fa93 f2a3 	rbit	r2, r3
 80014d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014de:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80014e2:	2202      	movs	r2, #2
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	fa93 f2a3 	rbit	r2, r3
 80014f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001502:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001506:	2202      	movs	r2, #2
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800150e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	fa93 f2a3 	rbit	r2, r3
 8001518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800151c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001520:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001522:	4b41      	ldr	r3, [pc, #260]	; (8001628 <HAL_RCC_OscConfig+0x934>)
 8001524:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800152a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800152e:	2102      	movs	r1, #2
 8001530:	6019      	str	r1, [r3, #0]
 8001532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001536:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	fa93 f1a3 	rbit	r1, r3
 8001540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001544:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001548:	6019      	str	r1, [r3, #0]
  return result;
 800154a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800154e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	fab3 f383 	clz	r3, r3
 8001558:	b2db      	uxtb	r3, r3
 800155a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800155e:	b2db      	uxtb	r3, r3
 8001560:	f003 031f 	and.w	r3, r3, #31
 8001564:	2101      	movs	r1, #1
 8001566:	fa01 f303 	lsl.w	r3, r1, r3
 800156a:	4013      	ands	r3, r2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d197      	bne.n	80014a0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001574:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	2b00      	cmp	r3, #0
 8001582:	f000 81a1 	beq.w	80018c8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001586:	2300      	movs	r3, #0
 8001588:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800158c:	4b26      	ldr	r3, [pc, #152]	; (8001628 <HAL_RCC_OscConfig+0x934>)
 800158e:	69db      	ldr	r3, [r3, #28]
 8001590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d116      	bne.n	80015c6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001598:	4b23      	ldr	r3, [pc, #140]	; (8001628 <HAL_RCC_OscConfig+0x934>)
 800159a:	69db      	ldr	r3, [r3, #28]
 800159c:	4a22      	ldr	r2, [pc, #136]	; (8001628 <HAL_RCC_OscConfig+0x934>)
 800159e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a2:	61d3      	str	r3, [r2, #28]
 80015a4:	4b20      	ldr	r3, [pc, #128]	; (8001628 <HAL_RCC_OscConfig+0x934>)
 80015a6:	69db      	ldr	r3, [r3, #28]
 80015a8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80015ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ba:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80015be:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80015c0:	2301      	movs	r3, #1
 80015c2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c6:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <HAL_RCC_OscConfig+0x93c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d11a      	bne.n	8001608 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015d2:	4b17      	ldr	r3, [pc, #92]	; (8001630 <HAL_RCC_OscConfig+0x93c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a16      	ldr	r2, [pc, #88]	; (8001630 <HAL_RCC_OscConfig+0x93c>)
 80015d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015dc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015de:	f7ff f901 	bl	80007e4 <HAL_GetTick>
 80015e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e6:	e009      	b.n	80015fc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015e8:	f7ff f8fc 	bl	80007e4 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b64      	cmp	r3, #100	; 0x64
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e3b1      	b.n	8001d60 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <HAL_RCC_OscConfig+0x93c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0ef      	beq.n	80015e8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800160c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d10d      	bne.n	8001634 <HAL_RCC_OscConfig+0x940>
 8001618:	4b03      	ldr	r3, [pc, #12]	; (8001628 <HAL_RCC_OscConfig+0x934>)
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	4a02      	ldr	r2, [pc, #8]	; (8001628 <HAL_RCC_OscConfig+0x934>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	6213      	str	r3, [r2, #32]
 8001624:	e03c      	b.n	80016a0 <HAL_RCC_OscConfig+0x9ac>
 8001626:	bf00      	nop
 8001628:	40021000 	.word	0x40021000
 800162c:	10908120 	.word	0x10908120
 8001630:	40007000 	.word	0x40007000
 8001634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001638:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d10c      	bne.n	800165e <HAL_RCC_OscConfig+0x96a>
 8001644:	4bc1      	ldr	r3, [pc, #772]	; (800194c <HAL_RCC_OscConfig+0xc58>)
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	4ac0      	ldr	r2, [pc, #768]	; (800194c <HAL_RCC_OscConfig+0xc58>)
 800164a:	f023 0301 	bic.w	r3, r3, #1
 800164e:	6213      	str	r3, [r2, #32]
 8001650:	4bbe      	ldr	r3, [pc, #760]	; (800194c <HAL_RCC_OscConfig+0xc58>)
 8001652:	6a1b      	ldr	r3, [r3, #32]
 8001654:	4abd      	ldr	r2, [pc, #756]	; (800194c <HAL_RCC_OscConfig+0xc58>)
 8001656:	f023 0304 	bic.w	r3, r3, #4
 800165a:	6213      	str	r3, [r2, #32]
 800165c:	e020      	b.n	80016a0 <HAL_RCC_OscConfig+0x9ac>
 800165e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001662:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	2b05      	cmp	r3, #5
 800166c:	d10c      	bne.n	8001688 <HAL_RCC_OscConfig+0x994>
 800166e:	4bb7      	ldr	r3, [pc, #732]	; (800194c <HAL_RCC_OscConfig+0xc58>)
 8001670:	6a1b      	ldr	r3, [r3, #32]
 8001672:	4ab6      	ldr	r2, [pc, #728]	; (800194c <HAL_RCC_OscConfig+0xc58>)
 8001674:	f043 0304 	orr.w	r3, r3, #4
 8001678:	6213      	str	r3, [r2, #32]
 800167a:	4bb4      	ldr	r3, [pc, #720]	; (800194c <HAL_RCC_OscConfig+0xc58>)
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	4ab3      	ldr	r2, [pc, #716]	; (800194c <HAL_RCC_OscConfig+0xc58>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6213      	str	r3, [r2, #32]
 8001686:	e00b      	b.n	80016a0 <HAL_RCC_OscConfig+0x9ac>
 8001688:	4bb0      	ldr	r3, [pc, #704]	; (800194c <HAL_RCC_OscConfig+0xc58>)
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	4aaf      	ldr	r2, [pc, #700]	; (800194c <HAL_RCC_OscConfig+0xc58>)
 800168e:	f023 0301 	bic.w	r3, r3, #1
 8001692:	6213      	str	r3, [r2, #32]
 8001694:	4bad      	ldr	r3, [pc, #692]	; (800194c <HAL_RCC_OscConfig+0xc58>)
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	4aac      	ldr	r2, [pc, #688]	; (800194c <HAL_RCC_OscConfig+0xc58>)
 800169a:	f023 0304 	bic.w	r3, r3, #4
 800169e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f000 8081 	beq.w	80017b4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b2:	f7ff f897 	bl	80007e4 <HAL_GetTick>
 80016b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ba:	e00b      	b.n	80016d4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016bc:	f7ff f892 	bl	80007e4 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e345      	b.n	8001d60 <HAL_RCC_OscConfig+0x106c>
 80016d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80016dc:	2202      	movs	r2, #2
 80016de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	fa93 f2a3 	rbit	r2, r3
 80016ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016fc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001700:	2202      	movs	r2, #2
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001708:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	fa93 f2a3 	rbit	r2, r3
 8001712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001716:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800171a:	601a      	str	r2, [r3, #0]
  return result;
 800171c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001720:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001724:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001726:	fab3 f383 	clz	r3, r3
 800172a:	b2db      	uxtb	r3, r3
 800172c:	095b      	lsrs	r3, r3, #5
 800172e:	b2db      	uxtb	r3, r3
 8001730:	f043 0302 	orr.w	r3, r3, #2
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d102      	bne.n	8001740 <HAL_RCC_OscConfig+0xa4c>
 800173a:	4b84      	ldr	r3, [pc, #528]	; (800194c <HAL_RCC_OscConfig+0xc58>)
 800173c:	6a1b      	ldr	r3, [r3, #32]
 800173e:	e013      	b.n	8001768 <HAL_RCC_OscConfig+0xa74>
 8001740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001744:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001748:	2202      	movs	r2, #2
 800174a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001750:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	fa93 f2a3 	rbit	r2, r3
 800175a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800175e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	4b79      	ldr	r3, [pc, #484]	; (800194c <HAL_RCC_OscConfig+0xc58>)
 8001766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001768:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800176c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001770:	2102      	movs	r1, #2
 8001772:	6011      	str	r1, [r2, #0]
 8001774:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001778:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800177c:	6812      	ldr	r2, [r2, #0]
 800177e:	fa92 f1a2 	rbit	r1, r2
 8001782:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001786:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800178a:	6011      	str	r1, [r2, #0]
  return result;
 800178c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001790:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001794:	6812      	ldr	r2, [r2, #0]
 8001796:	fab2 f282 	clz	r2, r2
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017a0:	b2d2      	uxtb	r2, r2
 80017a2:	f002 021f 	and.w	r2, r2, #31
 80017a6:	2101      	movs	r1, #1
 80017a8:	fa01 f202 	lsl.w	r2, r1, r2
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d084      	beq.n	80016bc <HAL_RCC_OscConfig+0x9c8>
 80017b2:	e07f      	b.n	80018b4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b4:	f7ff f816 	bl	80007e4 <HAL_GetTick>
 80017b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017bc:	e00b      	b.n	80017d6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017be:	f7ff f811 	bl	80007e4 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e2c4      	b.n	8001d60 <HAL_RCC_OscConfig+0x106c>
 80017d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017da:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80017de:	2202      	movs	r2, #2
 80017e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	fa93 f2a3 	rbit	r2, r3
 80017f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017fe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001802:	2202      	movs	r2, #2
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800180a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	fa93 f2a3 	rbit	r2, r3
 8001814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001818:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800181c:	601a      	str	r2, [r3, #0]
  return result;
 800181e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001822:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001826:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001828:	fab3 f383 	clz	r3, r3
 800182c:	b2db      	uxtb	r3, r3
 800182e:	095b      	lsrs	r3, r3, #5
 8001830:	b2db      	uxtb	r3, r3
 8001832:	f043 0302 	orr.w	r3, r3, #2
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d102      	bne.n	8001842 <HAL_RCC_OscConfig+0xb4e>
 800183c:	4b43      	ldr	r3, [pc, #268]	; (800194c <HAL_RCC_OscConfig+0xc58>)
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	e013      	b.n	800186a <HAL_RCC_OscConfig+0xb76>
 8001842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001846:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800184a:	2202      	movs	r2, #2
 800184c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001852:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	fa93 f2a3 	rbit	r2, r3
 800185c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001860:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	4b39      	ldr	r3, [pc, #228]	; (800194c <HAL_RCC_OscConfig+0xc58>)
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800186e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001872:	2102      	movs	r1, #2
 8001874:	6011      	str	r1, [r2, #0]
 8001876:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800187a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800187e:	6812      	ldr	r2, [r2, #0]
 8001880:	fa92 f1a2 	rbit	r1, r2
 8001884:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001888:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800188c:	6011      	str	r1, [r2, #0]
  return result;
 800188e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001892:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001896:	6812      	ldr	r2, [r2, #0]
 8001898:	fab2 f282 	clz	r2, r2
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	f002 021f 	and.w	r2, r2, #31
 80018a8:	2101      	movs	r1, #1
 80018aa:	fa01 f202 	lsl.w	r2, r1, r2
 80018ae:	4013      	ands	r3, r2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d184      	bne.n	80017be <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018b4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d105      	bne.n	80018c8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018bc:	4b23      	ldr	r3, [pc, #140]	; (800194c <HAL_RCC_OscConfig+0xc58>)
 80018be:	69db      	ldr	r3, [r3, #28]
 80018c0:	4a22      	ldr	r2, [pc, #136]	; (800194c <HAL_RCC_OscConfig+0xc58>)
 80018c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018c6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	69db      	ldr	r3, [r3, #28]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f000 8242 	beq.w	8001d5e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018da:	4b1c      	ldr	r3, [pc, #112]	; (800194c <HAL_RCC_OscConfig+0xc58>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 030c 	and.w	r3, r3, #12
 80018e2:	2b08      	cmp	r3, #8
 80018e4:	f000 8213 	beq.w	8001d0e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	69db      	ldr	r3, [r3, #28]
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	f040 8162 	bne.w	8001bbe <HAL_RCC_OscConfig+0xeca>
 80018fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018fe:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001902:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001906:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001908:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800190c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	fa93 f2a3 	rbit	r2, r3
 8001916:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800191a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800191e:	601a      	str	r2, [r3, #0]
  return result;
 8001920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001924:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001928:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800192a:	fab3 f383 	clz	r3, r3
 800192e:	b2db      	uxtb	r3, r3
 8001930:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001934:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	461a      	mov	r2, r3
 800193c:	2300      	movs	r3, #0
 800193e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001940:	f7fe ff50 	bl	80007e4 <HAL_GetTick>
 8001944:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001948:	e00c      	b.n	8001964 <HAL_RCC_OscConfig+0xc70>
 800194a:	bf00      	nop
 800194c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001950:	f7fe ff48 	bl	80007e4 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e1fd      	b.n	8001d60 <HAL_RCC_OscConfig+0x106c>
 8001964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001968:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800196c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001970:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001976:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	fa93 f2a3 	rbit	r2, r3
 8001980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001984:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001988:	601a      	str	r2, [r3, #0]
  return result;
 800198a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800198e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001992:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001994:	fab3 f383 	clz	r3, r3
 8001998:	b2db      	uxtb	r3, r3
 800199a:	095b      	lsrs	r3, r3, #5
 800199c:	b2db      	uxtb	r3, r3
 800199e:	f043 0301 	orr.w	r3, r3, #1
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d102      	bne.n	80019ae <HAL_RCC_OscConfig+0xcba>
 80019a8:	4bb0      	ldr	r3, [pc, #704]	; (8001c6c <HAL_RCC_OscConfig+0xf78>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	e027      	b.n	80019fe <HAL_RCC_OscConfig+0xd0a>
 80019ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80019b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	fa93 f2a3 	rbit	r2, r3
 80019ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ce:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80019dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	fa93 f2a3 	rbit	r2, r3
 80019f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	4b9c      	ldr	r3, [pc, #624]	; (8001c6c <HAL_RCC_OscConfig+0xf78>)
 80019fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a02:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a06:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a0a:	6011      	str	r1, [r2, #0]
 8001a0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a10:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a14:	6812      	ldr	r2, [r2, #0]
 8001a16:	fa92 f1a2 	rbit	r1, r2
 8001a1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a1e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a22:	6011      	str	r1, [r2, #0]
  return result;
 8001a24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a28:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a2c:	6812      	ldr	r2, [r2, #0]
 8001a2e:	fab2 f282 	clz	r2, r2
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	f042 0220 	orr.w	r2, r2, #32
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	f002 021f 	and.w	r2, r2, #31
 8001a3e:	2101      	movs	r1, #1
 8001a40:	fa01 f202 	lsl.w	r2, r1, r2
 8001a44:	4013      	ands	r3, r2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d182      	bne.n	8001950 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a4a:	4b88      	ldr	r3, [pc, #544]	; (8001c6c <HAL_RCC_OscConfig+0xf78>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6a1b      	ldr	r3, [r3, #32]
 8001a6a:	430b      	orrs	r3, r1
 8001a6c:	497f      	ldr	r1, [pc, #508]	; (8001c6c <HAL_RCC_OscConfig+0xf78>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	604b      	str	r3, [r1, #4]
 8001a72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a76:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001a7a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a84:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	fa93 f2a3 	rbit	r2, r3
 8001a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a92:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a96:	601a      	str	r2, [r3, #0]
  return result;
 8001a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001aa0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aa2:	fab3 f383 	clz	r3, r3
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001aac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab8:	f7fe fe94 	bl	80007e4 <HAL_GetTick>
 8001abc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ac0:	e009      	b.n	8001ad6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac2:	f7fe fe8f 	bl	80007e4 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e144      	b.n	8001d60 <HAL_RCC_OscConfig+0x106c>
 8001ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ada:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001ade:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ae2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	fa93 f2a3 	rbit	r2, r3
 8001af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001afa:	601a      	str	r2, [r3, #0]
  return result;
 8001afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b00:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b04:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b06:	fab3 f383 	clz	r3, r3
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	095b      	lsrs	r3, r3, #5
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d102      	bne.n	8001b20 <HAL_RCC_OscConfig+0xe2c>
 8001b1a:	4b54      	ldr	r3, [pc, #336]	; (8001c6c <HAL_RCC_OscConfig+0xf78>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	e027      	b.n	8001b70 <HAL_RCC_OscConfig+0xe7c>
 8001b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b24:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b32:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	fa93 f2a3 	rbit	r2, r3
 8001b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b40:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b58:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	fa93 f2a3 	rbit	r2, r3
 8001b62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b66:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	4b3f      	ldr	r3, [pc, #252]	; (8001c6c <HAL_RCC_OscConfig+0xf78>)
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b74:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b78:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b7c:	6011      	str	r1, [r2, #0]
 8001b7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b82:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b86:	6812      	ldr	r2, [r2, #0]
 8001b88:	fa92 f1a2 	rbit	r1, r2
 8001b8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b90:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b94:	6011      	str	r1, [r2, #0]
  return result;
 8001b96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b9a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b9e:	6812      	ldr	r2, [r2, #0]
 8001ba0:	fab2 f282 	clz	r2, r2
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	f042 0220 	orr.w	r2, r2, #32
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	f002 021f 	and.w	r2, r2, #31
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d082      	beq.n	8001ac2 <HAL_RCC_OscConfig+0xdce>
 8001bbc:	e0cf      	b.n	8001d5e <HAL_RCC_OscConfig+0x106a>
 8001bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001bc6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	fa93 f2a3 	rbit	r2, r3
 8001bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bde:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001be2:	601a      	str	r2, [r3, #0]
  return result;
 8001be4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001bec:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bee:	fab3 f383 	clz	r3, r3
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bf8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	461a      	mov	r2, r3
 8001c00:	2300      	movs	r3, #0
 8001c02:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c04:	f7fe fdee 	bl	80007e4 <HAL_GetTick>
 8001c08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c0c:	e009      	b.n	8001c22 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c0e:	f7fe fde9 	bl	80007e4 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e09e      	b.n	8001d60 <HAL_RCC_OscConfig+0x106c>
 8001c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c26:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c34:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	fa93 f2a3 	rbit	r2, r3
 8001c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c42:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c46:	601a      	str	r2, [r3, #0]
  return result;
 8001c48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c50:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c52:	fab3 f383 	clz	r3, r3
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	095b      	lsrs	r3, r3, #5
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d104      	bne.n	8001c70 <HAL_RCC_OscConfig+0xf7c>
 8001c66:	4b01      	ldr	r3, [pc, #4]	; (8001c6c <HAL_RCC_OscConfig+0xf78>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	e029      	b.n	8001cc0 <HAL_RCC_OscConfig+0xfcc>
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c74:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c82:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	fa93 f2a3 	rbit	r2, r3
 8001c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c90:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	fa93 f2a3 	rbit	r2, r3
 8001cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	4b2b      	ldr	r3, [pc, #172]	; (8001d6c <HAL_RCC_OscConfig+0x1078>)
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cc4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001cc8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ccc:	6011      	str	r1, [r2, #0]
 8001cce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cd2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001cd6:	6812      	ldr	r2, [r2, #0]
 8001cd8:	fa92 f1a2 	rbit	r1, r2
 8001cdc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ce0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001ce4:	6011      	str	r1, [r2, #0]
  return result;
 8001ce6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cea:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001cee:	6812      	ldr	r2, [r2, #0]
 8001cf0:	fab2 f282 	clz	r2, r2
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	f042 0220 	orr.w	r2, r2, #32
 8001cfa:	b2d2      	uxtb	r2, r2
 8001cfc:	f002 021f 	and.w	r2, r2, #31
 8001d00:	2101      	movs	r1, #1
 8001d02:	fa01 f202 	lsl.w	r2, r1, r2
 8001d06:	4013      	ands	r3, r2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d180      	bne.n	8001c0e <HAL_RCC_OscConfig+0xf1a>
 8001d0c:	e027      	b.n	8001d5e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d101      	bne.n	8001d22 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e01e      	b.n	8001d60 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d22:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <HAL_RCC_OscConfig+0x1078>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d2a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d2e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d10b      	bne.n	8001d5a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001d42:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d001      	beq.n	8001d5e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40021000 	.word	0x40021000

08001d70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b09e      	sub	sp, #120	; 0x78
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e162      	b.n	800204e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d88:	4b90      	ldr	r3, [pc, #576]	; (8001fcc <HAL_RCC_ClockConfig+0x25c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d910      	bls.n	8001db8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d96:	4b8d      	ldr	r3, [pc, #564]	; (8001fcc <HAL_RCC_ClockConfig+0x25c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f023 0207 	bic.w	r2, r3, #7
 8001d9e:	498b      	ldr	r1, [pc, #556]	; (8001fcc <HAL_RCC_ClockConfig+0x25c>)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da6:	4b89      	ldr	r3, [pc, #548]	; (8001fcc <HAL_RCC_ClockConfig+0x25c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d001      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e14a      	b.n	800204e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d008      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dc4:	4b82      	ldr	r3, [pc, #520]	; (8001fd0 <HAL_RCC_ClockConfig+0x260>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	497f      	ldr	r1, [pc, #508]	; (8001fd0 <HAL_RCC_ClockConfig+0x260>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f000 80dc 	beq.w	8001f9c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d13c      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xf6>
 8001dec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001df0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001df4:	fa93 f3a3 	rbit	r3, r3
 8001df8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfc:	fab3 f383 	clz	r3, r3
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	095b      	lsrs	r3, r3, #5
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d102      	bne.n	8001e16 <HAL_RCC_ClockConfig+0xa6>
 8001e10:	4b6f      	ldr	r3, [pc, #444]	; (8001fd0 <HAL_RCC_ClockConfig+0x260>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	e00f      	b.n	8001e36 <HAL_RCC_ClockConfig+0xc6>
 8001e16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e1a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e1e:	fa93 f3a3 	rbit	r3, r3
 8001e22:	667b      	str	r3, [r7, #100]	; 0x64
 8001e24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e28:	663b      	str	r3, [r7, #96]	; 0x60
 8001e2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e2c:	fa93 f3a3 	rbit	r3, r3
 8001e30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e32:	4b67      	ldr	r3, [pc, #412]	; (8001fd0 <HAL_RCC_ClockConfig+0x260>)
 8001e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e3a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e3e:	fa92 f2a2 	rbit	r2, r2
 8001e42:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001e44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e46:	fab2 f282 	clz	r2, r2
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	f042 0220 	orr.w	r2, r2, #32
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	f002 021f 	and.w	r2, r2, #31
 8001e56:	2101      	movs	r1, #1
 8001e58:	fa01 f202 	lsl.w	r2, r1, r2
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d17b      	bne.n	8001f5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e0f3      	b.n	800204e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d13c      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0x178>
 8001e6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e72:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e76:	fa93 f3a3 	rbit	r3, r3
 8001e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e7e:	fab3 f383 	clz	r3, r3
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	095b      	lsrs	r3, r3, #5
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d102      	bne.n	8001e98 <HAL_RCC_ClockConfig+0x128>
 8001e92:	4b4f      	ldr	r3, [pc, #316]	; (8001fd0 <HAL_RCC_ClockConfig+0x260>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	e00f      	b.n	8001eb8 <HAL_RCC_ClockConfig+0x148>
 8001e98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e9c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ea0:	fa93 f3a3 	rbit	r3, r3
 8001ea4:	647b      	str	r3, [r7, #68]	; 0x44
 8001ea6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eaa:	643b      	str	r3, [r7, #64]	; 0x40
 8001eac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eae:	fa93 f3a3 	rbit	r3, r3
 8001eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001eb4:	4b46      	ldr	r3, [pc, #280]	; (8001fd0 <HAL_RCC_ClockConfig+0x260>)
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ebc:	63ba      	str	r2, [r7, #56]	; 0x38
 8001ebe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ec0:	fa92 f2a2 	rbit	r2, r2
 8001ec4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001ec6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ec8:	fab2 f282 	clz	r2, r2
 8001ecc:	b2d2      	uxtb	r2, r2
 8001ece:	f042 0220 	orr.w	r2, r2, #32
 8001ed2:	b2d2      	uxtb	r2, r2
 8001ed4:	f002 021f 	and.w	r2, r2, #31
 8001ed8:	2101      	movs	r1, #1
 8001eda:	fa01 f202 	lsl.w	r2, r1, r2
 8001ede:	4013      	ands	r3, r2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d13a      	bne.n	8001f5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e0b2      	b.n	800204e <HAL_RCC_ClockConfig+0x2de>
 8001ee8:	2302      	movs	r3, #2
 8001eea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eee:	fa93 f3a3 	rbit	r3, r3
 8001ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef6:	fab3 f383 	clz	r3, r3
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	095b      	lsrs	r3, r3, #5
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d102      	bne.n	8001f10 <HAL_RCC_ClockConfig+0x1a0>
 8001f0a:	4b31      	ldr	r3, [pc, #196]	; (8001fd0 <HAL_RCC_ClockConfig+0x260>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	e00d      	b.n	8001f2c <HAL_RCC_ClockConfig+0x1bc>
 8001f10:	2302      	movs	r3, #2
 8001f12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f16:	fa93 f3a3 	rbit	r3, r3
 8001f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	623b      	str	r3, [r7, #32]
 8001f20:	6a3b      	ldr	r3, [r7, #32]
 8001f22:	fa93 f3a3 	rbit	r3, r3
 8001f26:	61fb      	str	r3, [r7, #28]
 8001f28:	4b29      	ldr	r3, [pc, #164]	; (8001fd0 <HAL_RCC_ClockConfig+0x260>)
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	61ba      	str	r2, [r7, #24]
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	fa92 f2a2 	rbit	r2, r2
 8001f36:	617a      	str	r2, [r7, #20]
  return result;
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	fab2 f282 	clz	r2, r2
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	f042 0220 	orr.w	r2, r2, #32
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	f002 021f 	and.w	r2, r2, #31
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f50:	4013      	ands	r3, r2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e079      	b.n	800204e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f5a:	4b1d      	ldr	r3, [pc, #116]	; (8001fd0 <HAL_RCC_ClockConfig+0x260>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f023 0203 	bic.w	r2, r3, #3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	491a      	ldr	r1, [pc, #104]	; (8001fd0 <HAL_RCC_ClockConfig+0x260>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f6c:	f7fe fc3a 	bl	80007e4 <HAL_GetTick>
 8001f70:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f72:	e00a      	b.n	8001f8a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f74:	f7fe fc36 	bl	80007e4 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e061      	b.n	800204e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8a:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <HAL_RCC_ClockConfig+0x260>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f003 020c 	and.w	r2, r3, #12
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d1eb      	bne.n	8001f74 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <HAL_RCC_ClockConfig+0x25c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d214      	bcs.n	8001fd4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001faa:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <HAL_RCC_ClockConfig+0x25c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 0207 	bic.w	r2, r3, #7
 8001fb2:	4906      	ldr	r1, [pc, #24]	; (8001fcc <HAL_RCC_ClockConfig+0x25c>)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fba:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <HAL_RCC_ClockConfig+0x25c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d005      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e040      	b.n	800204e <HAL_RCC_ClockConfig+0x2de>
 8001fcc:	40022000 	.word	0x40022000
 8001fd0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d008      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe0:	4b1d      	ldr	r3, [pc, #116]	; (8002058 <HAL_RCC_ClockConfig+0x2e8>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	491a      	ldr	r1, [pc, #104]	; (8002058 <HAL_RCC_ClockConfig+0x2e8>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d009      	beq.n	8002012 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ffe:	4b16      	ldr	r3, [pc, #88]	; (8002058 <HAL_RCC_ClockConfig+0x2e8>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	4912      	ldr	r1, [pc, #72]	; (8002058 <HAL_RCC_ClockConfig+0x2e8>)
 800200e:	4313      	orrs	r3, r2
 8002010:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002012:	f000 f829 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 8002016:	4601      	mov	r1, r0
 8002018:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <HAL_RCC_ClockConfig+0x2e8>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002020:	22f0      	movs	r2, #240	; 0xf0
 8002022:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	fa92 f2a2 	rbit	r2, r2
 800202a:	60fa      	str	r2, [r7, #12]
  return result;
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	fab2 f282 	clz	r2, r2
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	40d3      	lsrs	r3, r2
 8002036:	4a09      	ldr	r2, [pc, #36]	; (800205c <HAL_RCC_ClockConfig+0x2ec>)
 8002038:	5cd3      	ldrb	r3, [r2, r3]
 800203a:	fa21 f303 	lsr.w	r3, r1, r3
 800203e:	4a08      	ldr	r2, [pc, #32]	; (8002060 <HAL_RCC_ClockConfig+0x2f0>)
 8002040:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002042:	4b08      	ldr	r3, [pc, #32]	; (8002064 <HAL_RCC_ClockConfig+0x2f4>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe fb88 	bl	800075c <HAL_InitTick>
  
  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3778      	adds	r7, #120	; 0x78
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40021000 	.word	0x40021000
 800205c:	08003ce8 	.word	0x08003ce8
 8002060:	20000000 	.word	0x20000000
 8002064:	20000004 	.word	0x20000004

08002068 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002068:	b480      	push	{r7}
 800206a:	b08b      	sub	sp, #44	; 0x2c
 800206c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800206e:	2300      	movs	r3, #0
 8002070:	61fb      	str	r3, [r7, #28]
 8002072:	2300      	movs	r3, #0
 8002074:	61bb      	str	r3, [r7, #24]
 8002076:	2300      	movs	r3, #0
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
 800207a:	2300      	movs	r3, #0
 800207c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800207e:	2300      	movs	r3, #0
 8002080:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002082:	4b29      	ldr	r3, [pc, #164]	; (8002128 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f003 030c 	and.w	r3, r3, #12
 800208e:	2b04      	cmp	r3, #4
 8002090:	d002      	beq.n	8002098 <HAL_RCC_GetSysClockFreq+0x30>
 8002092:	2b08      	cmp	r3, #8
 8002094:	d003      	beq.n	800209e <HAL_RCC_GetSysClockFreq+0x36>
 8002096:	e03c      	b.n	8002112 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002098:	4b24      	ldr	r3, [pc, #144]	; (800212c <HAL_RCC_GetSysClockFreq+0xc4>)
 800209a:	623b      	str	r3, [r7, #32]
      break;
 800209c:	e03c      	b.n	8002118 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80020a4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80020a8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	fa92 f2a2 	rbit	r2, r2
 80020b0:	607a      	str	r2, [r7, #4]
  return result;
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	fab2 f282 	clz	r2, r2
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	40d3      	lsrs	r3, r2
 80020bc:	4a1c      	ldr	r2, [pc, #112]	; (8002130 <HAL_RCC_GetSysClockFreq+0xc8>)
 80020be:	5cd3      	ldrb	r3, [r2, r3]
 80020c0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80020c2:	4b19      	ldr	r3, [pc, #100]	; (8002128 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c6:	f003 030f 	and.w	r3, r3, #15
 80020ca:	220f      	movs	r2, #15
 80020cc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	fa92 f2a2 	rbit	r2, r2
 80020d4:	60fa      	str	r2, [r7, #12]
  return result;
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	fab2 f282 	clz	r2, r2
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	40d3      	lsrs	r3, r2
 80020e0:	4a14      	ldr	r2, [pc, #80]	; (8002134 <HAL_RCC_GetSysClockFreq+0xcc>)
 80020e2:	5cd3      	ldrb	r3, [r2, r3]
 80020e4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d008      	beq.n	8002102 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020f0:	4a0e      	ldr	r2, [pc, #56]	; (800212c <HAL_RCC_GetSysClockFreq+0xc4>)
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	fb02 f303 	mul.w	r3, r2, r3
 80020fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002100:	e004      	b.n	800210c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	4a0c      	ldr	r2, [pc, #48]	; (8002138 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002106:	fb02 f303 	mul.w	r3, r2, r3
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	623b      	str	r3, [r7, #32]
      break;
 8002110:	e002      	b.n	8002118 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002112:	4b06      	ldr	r3, [pc, #24]	; (800212c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002114:	623b      	str	r3, [r7, #32]
      break;
 8002116:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002118:	6a3b      	ldr	r3, [r7, #32]
}
 800211a:	4618      	mov	r0, r3
 800211c:	372c      	adds	r7, #44	; 0x2c
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	40021000 	.word	0x40021000
 800212c:	007a1200 	.word	0x007a1200
 8002130:	08003d00 	.word	0x08003d00
 8002134:	08003d10 	.word	0x08003d10
 8002138:	003d0900 	.word	0x003d0900

0800213c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002140:	4b03      	ldr	r3, [pc, #12]	; (8002150 <HAL_RCC_GetHCLKFreq+0x14>)
 8002142:	681b      	ldr	r3, [r3, #0]
}
 8002144:	4618      	mov	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	20000000 	.word	0x20000000

08002154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800215a:	f7ff ffef 	bl	800213c <HAL_RCC_GetHCLKFreq>
 800215e:	4601      	mov	r1, r0
 8002160:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002168:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800216c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	fa92 f2a2 	rbit	r2, r2
 8002174:	603a      	str	r2, [r7, #0]
  return result;
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	fab2 f282 	clz	r2, r2
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	40d3      	lsrs	r3, r2
 8002180:	4a04      	ldr	r2, [pc, #16]	; (8002194 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002182:	5cd3      	ldrb	r3, [r2, r3]
 8002184:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002188:	4618      	mov	r0, r3
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40021000 	.word	0x40021000
 8002194:	08003cf8 	.word	0x08003cf8

08002198 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800219e:	f7ff ffcd 	bl	800213c <HAL_RCC_GetHCLKFreq>
 80021a2:	4601      	mov	r1, r0
 80021a4:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80021ac:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80021b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	fa92 f2a2 	rbit	r2, r2
 80021b8:	603a      	str	r2, [r7, #0]
  return result;
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	fab2 f282 	clz	r2, r2
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	40d3      	lsrs	r3, r2
 80021c4:	4a04      	ldr	r2, [pc, #16]	; (80021d8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80021c6:	5cd3      	ldrb	r3, [r2, r3]
 80021c8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80021cc:	4618      	mov	r0, r3
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40021000 	.word	0x40021000
 80021d8:	08003cf8 	.word	0x08003cf8

080021dc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b092      	sub	sp, #72	; 0x48
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021e4:	2300      	movs	r3, #0
 80021e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80021ec:	2300      	movs	r3, #0
 80021ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 80cd 	beq.w	800239a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002200:	4b86      	ldr	r3, [pc, #536]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002202:	69db      	ldr	r3, [r3, #28]
 8002204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10e      	bne.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800220c:	4b83      	ldr	r3, [pc, #524]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800220e:	69db      	ldr	r3, [r3, #28]
 8002210:	4a82      	ldr	r2, [pc, #520]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002216:	61d3      	str	r3, [r2, #28]
 8002218:	4b80      	ldr	r3, [pc, #512]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800221a:	69db      	ldr	r3, [r3, #28]
 800221c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002220:	60bb      	str	r3, [r7, #8]
 8002222:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002224:	2301      	movs	r3, #1
 8002226:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222a:	4b7d      	ldr	r3, [pc, #500]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002232:	2b00      	cmp	r3, #0
 8002234:	d118      	bne.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002236:	4b7a      	ldr	r3, [pc, #488]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a79      	ldr	r2, [pc, #484]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800223c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002240:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002242:	f7fe facf 	bl	80007e4 <HAL_GetTick>
 8002246:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002248:	e008      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800224a:	f7fe facb 	bl	80007e4 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b64      	cmp	r3, #100	; 0x64
 8002256:	d901      	bls.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e0db      	b.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800225c:	4b70      	ldr	r3, [pc, #448]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0f0      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002268:	4b6c      	ldr	r3, [pc, #432]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002270:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002274:	2b00      	cmp	r3, #0
 8002276:	d07d      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002280:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002282:	429a      	cmp	r2, r3
 8002284:	d076      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002286:	4b65      	ldr	r3, [pc, #404]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800228e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002290:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002294:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002298:	fa93 f3a3 	rbit	r3, r3
 800229c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800229e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022a0:	fab3 f383 	clz	r3, r3
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	461a      	mov	r2, r3
 80022a8:	4b5e      	ldr	r3, [pc, #376]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80022aa:	4413      	add	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	461a      	mov	r2, r3
 80022b0:	2301      	movs	r3, #1
 80022b2:	6013      	str	r3, [r2, #0]
 80022b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022bc:	fa93 f3a3 	rbit	r3, r3
 80022c0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80022c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022c4:	fab3 f383 	clz	r3, r3
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	461a      	mov	r2, r3
 80022cc:	4b55      	ldr	r3, [pc, #340]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80022ce:	4413      	add	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	461a      	mov	r2, r3
 80022d4:	2300      	movs	r3, #0
 80022d6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022d8:	4a50      	ldr	r2, [pc, #320]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80022da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022dc:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d045      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e8:	f7fe fa7c 	bl	80007e4 <HAL_GetTick>
 80022ec:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ee:	e00a      	b.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f0:	f7fe fa78 	bl	80007e4 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fe:	4293      	cmp	r3, r2
 8002300:	d901      	bls.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e086      	b.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002306:	2302      	movs	r3, #2
 8002308:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800230c:	fa93 f3a3 	rbit	r3, r3
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
 8002312:	2302      	movs	r3, #2
 8002314:	623b      	str	r3, [r7, #32]
 8002316:	6a3b      	ldr	r3, [r7, #32]
 8002318:	fa93 f3a3 	rbit	r3, r3
 800231c:	61fb      	str	r3, [r7, #28]
  return result;
 800231e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002320:	fab3 f383 	clz	r3, r3
 8002324:	b2db      	uxtb	r3, r3
 8002326:	095b      	lsrs	r3, r3, #5
 8002328:	b2db      	uxtb	r3, r3
 800232a:	f043 0302 	orr.w	r3, r3, #2
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d102      	bne.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002334:	4b39      	ldr	r3, [pc, #228]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	e007      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800233a:	2302      	movs	r3, #2
 800233c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	fa93 f3a3 	rbit	r3, r3
 8002344:	617b      	str	r3, [r7, #20]
 8002346:	4b35      	ldr	r3, [pc, #212]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234a:	2202      	movs	r2, #2
 800234c:	613a      	str	r2, [r7, #16]
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	fa92 f2a2 	rbit	r2, r2
 8002354:	60fa      	str	r2, [r7, #12]
  return result;
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	fab2 f282 	clz	r2, r2
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	f002 021f 	and.w	r2, r2, #31
 8002368:	2101      	movs	r1, #1
 800236a:	fa01 f202 	lsl.w	r2, r1, r2
 800236e:	4013      	ands	r3, r2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0bd      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002374:	4b29      	ldr	r3, [pc, #164]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	4926      	ldr	r1, [pc, #152]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002382:	4313      	orrs	r3, r2
 8002384:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002386:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800238a:	2b01      	cmp	r3, #1
 800238c:	d105      	bne.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800238e:	4b23      	ldr	r3, [pc, #140]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	4a22      	ldr	r2, [pc, #136]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002394:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002398:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d008      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023a6:	4b1d      	ldr	r3, [pc, #116]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	f023 0203 	bic.w	r2, r3, #3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	491a      	ldr	r1, [pc, #104]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0320 	and.w	r3, r3, #32
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d008      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023c4:	4b15      	ldr	r3, [pc, #84]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c8:	f023 0210 	bic.w	r2, r3, #16
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	4912      	ldr	r1, [pc, #72]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d008      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80023e2:	4b0e      	ldr	r3, [pc, #56]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	490b      	ldr	r1, [pc, #44]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d008      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002404:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	4903      	ldr	r1, [pc, #12]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800240e:	4313      	orrs	r3, r2
 8002410:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3748      	adds	r7, #72	; 0x48
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40021000 	.word	0x40021000
 8002420:	40007000 	.word	0x40007000
 8002424:	10908100 	.word	0x10908100

08002428 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e040      	b.n	80024bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800243e:	2b00      	cmp	r3, #0
 8002440:	d106      	bne.n	8002450 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7fe f80c 	bl	8000468 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2224      	movs	r2, #36	; 0x24
 8002454:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 0201 	bic.w	r2, r2, #1
 8002464:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f916 	bl	8002698 <UART_SetConfig>
 800246c:	4603      	mov	r3, r0
 800246e:	2b01      	cmp	r3, #1
 8002470:	d101      	bne.n	8002476 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e022      	b.n	80024bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247a:	2b00      	cmp	r3, #0
 800247c:	d002      	beq.n	8002484 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 fa40 	bl	8002904 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002492:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	689a      	ldr	r2, [r3, #8]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 0201 	orr.w	r2, r2, #1
 80024b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 fac7 	bl	8002a48 <UART_CheckIdleState>
 80024ba:	4603      	mov	r3, r0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e048      	b.n	8002568 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d106      	bne.n	80024ec <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7fd ffbe 	bl	8000468 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2224      	movs	r2, #36	; 0x24
 80024f0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0201 	bic.w	r2, r2, #1
 8002500:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f8c8 	bl	8002698 <UART_SetConfig>
 8002508:	4603      	mov	r3, r0
 800250a:	2b01      	cmp	r3, #1
 800250c:	d101      	bne.n	8002512 <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e02a      	b.n	8002568 <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002516:	2b00      	cmp	r3, #0
 8002518:	d002      	beq.n	8002520 <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f9f2 	bl	8002904 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800252e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800253e:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0208 	orr.w	r2, r2, #8
 800254e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f042 0201 	orr.w	r2, r2, #1
 800255e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 fa71 	bl	8002a48 <UART_CheckIdleState>
 8002566:	4603      	mov	r3, r0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b08a      	sub	sp, #40	; 0x28
 8002574:	af02      	add	r7, sp, #8
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	603b      	str	r3, [r7, #0]
 800257c:	4613      	mov	r3, r2
 800257e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002584:	2b20      	cmp	r3, #32
 8002586:	f040 8082 	bne.w	800268e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d002      	beq.n	8002596 <HAL_UART_Transmit+0x26>
 8002590:	88fb      	ldrh	r3, [r7, #6]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e07a      	b.n	8002690 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d101      	bne.n	80025a8 <HAL_UART_Transmit+0x38>
 80025a4:	2302      	movs	r3, #2
 80025a6:	e073      	b.n	8002690 <HAL_UART_Transmit+0x120>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2221      	movs	r2, #33	; 0x21
 80025bc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025be:	f7fe f911 	bl	80007e4 <HAL_GetTick>
 80025c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	88fa      	ldrh	r2, [r7, #6]
 80025c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	88fa      	ldrh	r2, [r7, #6]
 80025d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025dc:	d108      	bne.n	80025f0 <HAL_UART_Transmit+0x80>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d104      	bne.n	80025f0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	61bb      	str	r3, [r7, #24]
 80025ee:	e003      	b.n	80025f8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002600:	e02d      	b.n	800265e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	2200      	movs	r2, #0
 800260a:	2180      	movs	r1, #128	; 0x80
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 fa64 	bl	8002ada <UART_WaitOnFlagUntilTimeout>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e039      	b.n	8002690 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10b      	bne.n	800263a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	881a      	ldrh	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800262e:	b292      	uxth	r2, r2
 8002630:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	3302      	adds	r3, #2
 8002636:	61bb      	str	r3, [r7, #24]
 8002638:	e008      	b.n	800264c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	781a      	ldrb	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	b292      	uxth	r2, r2
 8002644:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	3301      	adds	r3, #1
 800264a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002652:	b29b      	uxth	r3, r3
 8002654:	3b01      	subs	r3, #1
 8002656:	b29a      	uxth	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002664:	b29b      	uxth	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1cb      	bne.n	8002602 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	2200      	movs	r2, #0
 8002672:	2140      	movs	r1, #64	; 0x40
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f000 fa30 	bl	8002ada <UART_WaitOnFlagUntilTimeout>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e005      	b.n	8002690 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2220      	movs	r2, #32
 8002688:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800268a:	2300      	movs	r3, #0
 800268c:	e000      	b.n	8002690 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800268e:	2302      	movs	r3, #2
  }
}
 8002690:	4618      	mov	r0, r3
 8002692:	3720      	adds	r7, #32
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b088      	sub	sp, #32
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80026a0:	2300      	movs	r3, #0
 80026a2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	431a      	orrs	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	4b8a      	ldr	r3, [pc, #552]	; (80028ec <UART_SetConfig+0x254>)
 80026c4:	4013      	ands	r3, r2
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	6812      	ldr	r2, [r2, #0]
 80026ca:	6979      	ldr	r1, [r7, #20]
 80026cc:	430b      	orrs	r3, r1
 80026ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68da      	ldr	r2, [r3, #12]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	430a      	orrs	r2, r1
 8002708:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a78      	ldr	r2, [pc, #480]	; (80028f0 <UART_SetConfig+0x258>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d120      	bne.n	8002756 <UART_SetConfig+0xbe>
 8002714:	4b77      	ldr	r3, [pc, #476]	; (80028f4 <UART_SetConfig+0x25c>)
 8002716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002718:	f003 0303 	and.w	r3, r3, #3
 800271c:	2b03      	cmp	r3, #3
 800271e:	d817      	bhi.n	8002750 <UART_SetConfig+0xb8>
 8002720:	a201      	add	r2, pc, #4	; (adr r2, 8002728 <UART_SetConfig+0x90>)
 8002722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002726:	bf00      	nop
 8002728:	08002739 	.word	0x08002739
 800272c:	08002745 	.word	0x08002745
 8002730:	0800274b 	.word	0x0800274b
 8002734:	0800273f 	.word	0x0800273f
 8002738:	2300      	movs	r3, #0
 800273a:	77fb      	strb	r3, [r7, #31]
 800273c:	e01d      	b.n	800277a <UART_SetConfig+0xe2>
 800273e:	2302      	movs	r3, #2
 8002740:	77fb      	strb	r3, [r7, #31]
 8002742:	e01a      	b.n	800277a <UART_SetConfig+0xe2>
 8002744:	2304      	movs	r3, #4
 8002746:	77fb      	strb	r3, [r7, #31]
 8002748:	e017      	b.n	800277a <UART_SetConfig+0xe2>
 800274a:	2308      	movs	r3, #8
 800274c:	77fb      	strb	r3, [r7, #31]
 800274e:	e014      	b.n	800277a <UART_SetConfig+0xe2>
 8002750:	2310      	movs	r3, #16
 8002752:	77fb      	strb	r3, [r7, #31]
 8002754:	e011      	b.n	800277a <UART_SetConfig+0xe2>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a67      	ldr	r2, [pc, #412]	; (80028f8 <UART_SetConfig+0x260>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d102      	bne.n	8002766 <UART_SetConfig+0xce>
 8002760:	2300      	movs	r3, #0
 8002762:	77fb      	strb	r3, [r7, #31]
 8002764:	e009      	b.n	800277a <UART_SetConfig+0xe2>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a64      	ldr	r2, [pc, #400]	; (80028fc <UART_SetConfig+0x264>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d102      	bne.n	8002776 <UART_SetConfig+0xde>
 8002770:	2300      	movs	r3, #0
 8002772:	77fb      	strb	r3, [r7, #31]
 8002774:	e001      	b.n	800277a <UART_SetConfig+0xe2>
 8002776:	2310      	movs	r3, #16
 8002778:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002782:	d15b      	bne.n	800283c <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8002784:	7ffb      	ldrb	r3, [r7, #31]
 8002786:	2b08      	cmp	r3, #8
 8002788:	d827      	bhi.n	80027da <UART_SetConfig+0x142>
 800278a:	a201      	add	r2, pc, #4	; (adr r2, 8002790 <UART_SetConfig+0xf8>)
 800278c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002790:	080027b5 	.word	0x080027b5
 8002794:	080027bd 	.word	0x080027bd
 8002798:	080027c5 	.word	0x080027c5
 800279c:	080027db 	.word	0x080027db
 80027a0:	080027cb 	.word	0x080027cb
 80027a4:	080027db 	.word	0x080027db
 80027a8:	080027db 	.word	0x080027db
 80027ac:	080027db 	.word	0x080027db
 80027b0:	080027d3 	.word	0x080027d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027b4:	f7ff fcce 	bl	8002154 <HAL_RCC_GetPCLK1Freq>
 80027b8:	61b8      	str	r0, [r7, #24]
        break;
 80027ba:	e013      	b.n	80027e4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80027bc:	f7ff fcec 	bl	8002198 <HAL_RCC_GetPCLK2Freq>
 80027c0:	61b8      	str	r0, [r7, #24]
        break;
 80027c2:	e00f      	b.n	80027e4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027c4:	4b4e      	ldr	r3, [pc, #312]	; (8002900 <UART_SetConfig+0x268>)
 80027c6:	61bb      	str	r3, [r7, #24]
        break;
 80027c8:	e00c      	b.n	80027e4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027ca:	f7ff fc4d 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 80027ce:	61b8      	str	r0, [r7, #24]
        break;
 80027d0:	e008      	b.n	80027e4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027d6:	61bb      	str	r3, [r7, #24]
        break;
 80027d8:	e004      	b.n	80027e4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80027da:	2300      	movs	r3, #0
 80027dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	77bb      	strb	r3, [r7, #30]
        break;
 80027e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d074      	beq.n	80028d4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	005a      	lsls	r2, r3, #1
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	085b      	lsrs	r3, r3, #1
 80027f4:	441a      	add	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fe:	b29b      	uxth	r3, r3
 8002800:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	2b0f      	cmp	r3, #15
 8002806:	d916      	bls.n	8002836 <UART_SetConfig+0x19e>
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800280e:	d212      	bcs.n	8002836 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	b29b      	uxth	r3, r3
 8002814:	f023 030f 	bic.w	r3, r3, #15
 8002818:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	085b      	lsrs	r3, r3, #1
 800281e:	b29b      	uxth	r3, r3
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	b29a      	uxth	r2, r3
 8002826:	89fb      	ldrh	r3, [r7, #14]
 8002828:	4313      	orrs	r3, r2
 800282a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	89fa      	ldrh	r2, [r7, #14]
 8002832:	60da      	str	r2, [r3, #12]
 8002834:	e04e      	b.n	80028d4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	77bb      	strb	r3, [r7, #30]
 800283a:	e04b      	b.n	80028d4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800283c:	7ffb      	ldrb	r3, [r7, #31]
 800283e:	2b08      	cmp	r3, #8
 8002840:	d827      	bhi.n	8002892 <UART_SetConfig+0x1fa>
 8002842:	a201      	add	r2, pc, #4	; (adr r2, 8002848 <UART_SetConfig+0x1b0>)
 8002844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002848:	0800286d 	.word	0x0800286d
 800284c:	08002875 	.word	0x08002875
 8002850:	0800287d 	.word	0x0800287d
 8002854:	08002893 	.word	0x08002893
 8002858:	08002883 	.word	0x08002883
 800285c:	08002893 	.word	0x08002893
 8002860:	08002893 	.word	0x08002893
 8002864:	08002893 	.word	0x08002893
 8002868:	0800288b 	.word	0x0800288b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800286c:	f7ff fc72 	bl	8002154 <HAL_RCC_GetPCLK1Freq>
 8002870:	61b8      	str	r0, [r7, #24]
        break;
 8002872:	e013      	b.n	800289c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002874:	f7ff fc90 	bl	8002198 <HAL_RCC_GetPCLK2Freq>
 8002878:	61b8      	str	r0, [r7, #24]
        break;
 800287a:	e00f      	b.n	800289c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800287c:	4b20      	ldr	r3, [pc, #128]	; (8002900 <UART_SetConfig+0x268>)
 800287e:	61bb      	str	r3, [r7, #24]
        break;
 8002880:	e00c      	b.n	800289c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002882:	f7ff fbf1 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 8002886:	61b8      	str	r0, [r7, #24]
        break;
 8002888:	e008      	b.n	800289c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800288a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800288e:	61bb      	str	r3, [r7, #24]
        break;
 8002890:	e004      	b.n	800289c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002892:	2300      	movs	r3, #0
 8002894:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	77bb      	strb	r3, [r7, #30]
        break;
 800289a:	bf00      	nop
    }

    if (pclk != 0U)
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d018      	beq.n	80028d4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	085a      	lsrs	r2, r3, #1
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	441a      	add	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	2b0f      	cmp	r3, #15
 80028bc:	d908      	bls.n	80028d0 <UART_SetConfig+0x238>
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c4:	d204      	bcs.n	80028d0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	60da      	str	r2, [r3, #12]
 80028ce:	e001      	b.n	80028d4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80028e0:	7fbb      	ldrb	r3, [r7, #30]
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3720      	adds	r7, #32
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	efff69f3 	.word	0xefff69f3
 80028f0:	40013800 	.word	0x40013800
 80028f4:	40021000 	.word	0x40021000
 80028f8:	40004400 	.word	0x40004400
 80028fc:	40004800 	.word	0x40004800
 8002900:	007a1200 	.word	0x007a1200

08002904 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00a      	beq.n	800292e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	430a      	orrs	r2, r1
 800292c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00a      	beq.n	8002950 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002954:	f003 0304 	and.w	r3, r3, #4
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00a      	beq.n	8002972 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	f003 0308 	and.w	r3, r3, #8
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00a      	beq.n	8002994 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	430a      	orrs	r2, r1
 8002992:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	f003 0310 	and.w	r3, r3, #16
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00a      	beq.n	80029b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	f003 0320 	and.w	r3, r3, #32
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00a      	beq.n	80029d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d01a      	beq.n	8002a1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a02:	d10a      	bne.n	8002a1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00a      	beq.n	8002a3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	605a      	str	r2, [r3, #4]
  }
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af02      	add	r7, sp, #8
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002a58:	f7fd fec4 	bl	80007e4 <HAL_GetTick>
 8002a5c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0308 	and.w	r3, r3, #8
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d10e      	bne.n	8002a8a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f82d 	bl	8002ada <UART_WaitOnFlagUntilTimeout>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e023      	b.n	8002ad2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b04      	cmp	r3, #4
 8002a96:	d10e      	bne.n	8002ab6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f817 	bl	8002ada <UART_WaitOnFlagUntilTimeout>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e00d      	b.n	8002ad2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2220      	movs	r2, #32
 8002aba:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b09c      	sub	sp, #112	; 0x70
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	60f8      	str	r0, [r7, #12]
 8002ae2:	60b9      	str	r1, [r7, #8]
 8002ae4:	603b      	str	r3, [r7, #0]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aea:	e0a5      	b.n	8002c38 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002aee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002af2:	f000 80a1 	beq.w	8002c38 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002af6:	f7fd fe75 	bl	80007e4 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d302      	bcc.n	8002b0c <UART_WaitOnFlagUntilTimeout+0x32>
 8002b06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d13e      	bne.n	8002b8a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b14:	e853 3f00 	ldrex	r3, [r3]
 8002b18:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b20:	667b      	str	r3, [r7, #100]	; 0x64
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	461a      	mov	r2, r3
 8002b28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b2c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b2e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002b30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002b32:	e841 2300 	strex	r3, r2, [r1]
 8002b36:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002b38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1e6      	bne.n	8002b0c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	3308      	adds	r3, #8
 8002b44:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b48:	e853 3f00 	ldrex	r3, [r3]
 8002b4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b50:	f023 0301 	bic.w	r3, r3, #1
 8002b54:	663b      	str	r3, [r7, #96]	; 0x60
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	3308      	adds	r3, #8
 8002b5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b5e:	64ba      	str	r2, [r7, #72]	; 0x48
 8002b60:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002b64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b66:	e841 2300 	strex	r3, r2, [r1]
 8002b6a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1e5      	bne.n	8002b3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2220      	movs	r2, #32
 8002b76:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e067      	b.n	8002c5a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d04f      	beq.n	8002c38 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ba2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ba6:	d147      	bne.n	8002c38 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bb0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bba:	e853 3f00 	ldrex	r3, [r3]
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002bc6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	461a      	mov	r2, r3
 8002bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bd0:	637b      	str	r3, [r7, #52]	; 0x34
 8002bd2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bd8:	e841 2300 	strex	r3, r2, [r1]
 8002bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1e6      	bne.n	8002bb2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	3308      	adds	r3, #8
 8002bea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	e853 3f00 	ldrex	r3, [r3]
 8002bf2:	613b      	str	r3, [r7, #16]
   return(result);
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	f023 0301 	bic.w	r3, r3, #1
 8002bfa:	66bb      	str	r3, [r7, #104]	; 0x68
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	3308      	adds	r3, #8
 8002c02:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002c04:	623a      	str	r2, [r7, #32]
 8002c06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c08:	69f9      	ldr	r1, [r7, #28]
 8002c0a:	6a3a      	ldr	r2, [r7, #32]
 8002c0c:	e841 2300 	strex	r3, r2, [r1]
 8002c10:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1e5      	bne.n	8002be4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2220      	movs	r2, #32
 8002c22:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2220      	movs	r2, #32
 8002c28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e010      	b.n	8002c5a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	69da      	ldr	r2, [r3, #28]
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	4013      	ands	r3, r2
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	bf0c      	ite	eq
 8002c48:	2301      	moveq	r3, #1
 8002c4a:	2300      	movne	r3, #0
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	461a      	mov	r2, r3
 8002c50:	79fb      	ldrb	r3, [r7, #7]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	f43f af4a 	beq.w	8002aec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3770      	adds	r7, #112	; 0x70
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <tmc_fillCRC8Table>:
 *     This allows us to simply store the lowest byte of the uint32_t,
 *     right-shift the uint32_t by 8 and increment the table pointer.
 *     After 4 iterations of that all 4 bytes of the uint32_t are stored in the table.
 */
uint8_t tmc_fillCRC8Table(uint8_t polynomial, bool isReflected, uint8_t index)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b088      	sub	sp, #32
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	71fb      	strb	r3, [r7, #7]
 8002c6e:	460b      	mov	r3, r1
 8002c70:	71bb      	strb	r3, [r7, #6]
 8002c72:	4613      	mov	r3, r2
 8002c74:	717b      	strb	r3, [r7, #5]
	uint32_t CRCdata;
	// Helper pointer for traversing the result table
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 8002c76:	797b      	ldrb	r3, [r7, #5]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d901      	bls.n	8002c80 <tmc_fillCRC8Table+0x1c>
		return 0;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	e09e      	b.n	8002dbe <tmc_fillCRC8Table+0x15a>

	CRCTables[index].polynomial   = polynomial;
 8002c80:	797a      	ldrb	r2, [r7, #5]
 8002c82:	4951      	ldr	r1, [pc, #324]	; (8002dc8 <tmc_fillCRC8Table+0x164>)
 8002c84:	4613      	mov	r3, r2
 8002c86:	01db      	lsls	r3, r3, #7
 8002c88:	4413      	add	r3, r2
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	440b      	add	r3, r1
 8002c8e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002c92:	79fa      	ldrb	r2, [r7, #7]
 8002c94:	701a      	strb	r2, [r3, #0]
	CRCTables[index].isReflected  = isReflected;
 8002c96:	797a      	ldrb	r2, [r7, #5]
 8002c98:	494b      	ldr	r1, [pc, #300]	; (8002dc8 <tmc_fillCRC8Table+0x164>)
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	01db      	lsls	r3, r3, #7
 8002c9e:	4413      	add	r3, r2
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	440b      	add	r3, r1
 8002ca4:	f203 1301 	addw	r3, r3, #257	; 0x101
 8002ca8:	79ba      	ldrb	r2, [r7, #6]
 8002caa:	701a      	strb	r2, [r3, #0]
	table = &CRCTables[index].table[0];
 8002cac:	797a      	ldrb	r2, [r7, #5]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	01db      	lsls	r3, r3, #7
 8002cb2:	4413      	add	r3, r2
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	4a44      	ldr	r2, [pc, #272]	; (8002dc8 <tmc_fillCRC8Table+0x164>)
 8002cb8:	4413      	add	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]

	// Extend the polynomial to correct byte MSBs shifting into next bytes
	uint32_t poly = (uint32_t) polynomial | 0x0100;
 8002cbc:	79fb      	ldrb	r3, [r7, #7]
 8002cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc2:	60fb      	str	r3, [r7, #12]

	// Iterate over all 256 possible uint8_t values, compressed into a uint32_t (see detailed explanation above)
	uint32_t i;
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 8002cc4:	4b41      	ldr	r3, [pc, #260]	; (8002dcc <tmc_fillCRC8Table+0x168>)
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	e074      	b.n	8002db4 <tmc_fillCRC8Table+0x150>
	{
		// For reflected table: Flip the bits of each input byte
		CRCdata = (isReflected)? flipBitsInBytes(i) : i;
 8002cca:	79bb      	ldrb	r3, [r7, #6]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d004      	beq.n	8002cda <tmc_fillCRC8Table+0x76>
 8002cd0:	6978      	ldr	r0, [r7, #20]
 8002cd2:	f000 f87f 	bl	8002dd4 <flipBitsInBytes>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	e000      	b.n	8002cdc <tmc_fillCRC8Table+0x78>
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	61fb      	str	r3, [r7, #28]

		// Iterate over 8 Bits
		int j;
		for(j = 0; j < 8; j++)
 8002cde:	2300      	movs	r3, #0
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	e035      	b.n	8002d50 <tmc_fillCRC8Table+0xec>
		{
			// Store value of soon-to-be shifted out byte
			uint8_t isMSBSet = (CRCdata & 0x80000000)? 1:0;
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	0fdb      	lsrs	r3, r3, #31
 8002ce8:	72fb      	strb	r3, [r7, #11]

			// CRC Shift
			CRCdata <<= 1;
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	61fb      	str	r3, [r7, #28]

			// XOR the bytes when required, lowest to highest
			CRCdata ^= (CRCdata & 0x00000100)? (poly      ) : 0;
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <tmc_fillCRC8Table+0x9a>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	e000      	b.n	8002d00 <tmc_fillCRC8Table+0x9c>
 8002cfe:	2300      	movs	r3, #0
 8002d00:	69fa      	ldr	r2, [r7, #28]
 8002d02:	4053      	eors	r3, r2
 8002d04:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x00010000)? (poly << 8 ) : 0;
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d002      	beq.n	8002d16 <tmc_fillCRC8Table+0xb2>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	021b      	lsls	r3, r3, #8
 8002d14:	e000      	b.n	8002d18 <tmc_fillCRC8Table+0xb4>
 8002d16:	2300      	movs	r3, #0
 8002d18:	69fa      	ldr	r2, [r7, #28]
 8002d1a:	4053      	eors	r3, r2
 8002d1c:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x01000000)? (poly << 16) : 0;
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d002      	beq.n	8002d2e <tmc_fillCRC8Table+0xca>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	041b      	lsls	r3, r3, #16
 8002d2c:	e000      	b.n	8002d30 <tmc_fillCRC8Table+0xcc>
 8002d2e:	2300      	movs	r3, #0
 8002d30:	69fa      	ldr	r2, [r7, #28]
 8002d32:	4053      	eors	r3, r2
 8002d34:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (isMSBSet)?             (poly << 24) : 0;
 8002d36:	7afb      	ldrb	r3, [r7, #11]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d002      	beq.n	8002d42 <tmc_fillCRC8Table+0xde>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	061b      	lsls	r3, r3, #24
 8002d40:	e000      	b.n	8002d44 <tmc_fillCRC8Table+0xe0>
 8002d42:	2300      	movs	r3, #0
 8002d44:	69fa      	ldr	r2, [r7, #28]
 8002d46:	4053      	eors	r3, r2
 8002d48:	61fb      	str	r3, [r7, #28]
		for(j = 0; j < 8; j++)
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	613b      	str	r3, [r7, #16]
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	2b07      	cmp	r3, #7
 8002d54:	ddc6      	ble.n	8002ce4 <tmc_fillCRC8Table+0x80>
		}

		// For reflected table: Flip the bits of each output byte
		CRCdata = (isReflected)? flipBitsInBytes(CRCdata) : CRCdata;
 8002d56:	79bb      	ldrb	r3, [r7, #6]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d004      	beq.n	8002d66 <tmc_fillCRC8Table+0x102>
 8002d5c:	69f8      	ldr	r0, [r7, #28]
 8002d5e:	f000 f839 	bl	8002dd4 <flipBitsInBytes>
 8002d62:	4603      	mov	r3, r0
 8002d64:	e000      	b.n	8002d68 <tmc_fillCRC8Table+0x104>
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	61fb      	str	r3, [r7, #28]
		// Store the CRC result bytes in the table array
		*table++ = (uint8_t) CRCdata;
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	61ba      	str	r2, [r7, #24]
 8002d70:	69fa      	ldr	r2, [r7, #28]
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	0a1b      	lsrs	r3, r3, #8
 8002d7a:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	1c5a      	adds	r2, r3, #1
 8002d80:	61ba      	str	r2, [r7, #24]
 8002d82:	69fa      	ldr	r2, [r7, #28]
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	0a1b      	lsrs	r3, r3, #8
 8002d8c:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	1c5a      	adds	r2, r3, #1
 8002d92:	61ba      	str	r2, [r7, #24]
 8002d94:	69fa      	ldr	r2, [r7, #28]
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	0a1b      	lsrs	r3, r3, #8
 8002d9e:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	1c5a      	adds	r2, r3, #1
 8002da4:	61ba      	str	r2, [r7, #24]
 8002da6:	69fa      	ldr	r2, [r7, #28]
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	701a      	strb	r2, [r3, #0]
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
 8002db2:	617b      	str	r3, [r7, #20]
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	4a06      	ldr	r2, [pc, #24]	; (8002dd0 <tmc_fillCRC8Table+0x16c>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d186      	bne.n	8002cca <tmc_fillCRC8Table+0x66>
	}

	return 1;
 8002dbc:	2301      	movs	r3, #1
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3720      	adds	r7, #32
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	20000638 	.word	0x20000638
 8002dcc:	03020100 	.word	0x03020100
 8002dd0:	04030200 	.word	0x04030200

08002dd4 <flipBitsInBytes>:
 *                                 \||/
 *                                  \/
 * [b24 b25 b26 b27 b28 b29 b30 b31 .. b0 b1 b2 b3 b4 b5 b6 b7]
 */
static uint32_t flipBitsInBytes(uint32_t value)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
	// swap odd and even bits
	value = ((value >> 1) & 0x55555555) | ((value & 0x55555555) << 1);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	085b      	lsrs	r3, r3, #1
 8002de0:	f003 3255 	and.w	r2, r3, #1431655765	; 0x55555555
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 8002dec:	4313      	orrs	r3, r2
 8002dee:	607b      	str	r3, [r7, #4]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33333333) | ((value & 0x33333333) << 2);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	089b      	lsrs	r3, r3, #2
 8002df4:	f003 3233 	and.w	r2, r3, #858993459	; 0x33333333
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	f003 33cc 	and.w	r3, r3, #3435973836	; 0xcccccccc
 8002e00:	4313      	orrs	r3, r2
 8002e02:	607b      	str	r3, [r7, #4]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F0F0F0F) | ((value & 0x0F0F0F0F) << 4);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	091b      	lsrs	r3, r3, #4
 8002e08:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	011b      	lsls	r3, r3, #4
 8002e10:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8002e14:	4313      	orrs	r3, r2
 8002e16:	607b      	str	r3, [r7, #4]

	return value;
 8002e18:	687b      	ldr	r3, [r7, #4]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
	...

08002e28 <tmc2209_init>:

	return ((uint32_t)data[3] << 24) | ((uint32_t)data[4] << 16) | (data[5] << 8) | data[6];
}

void tmc2209_init(TMC2209TypeDef *tmc2209, uint8_t channel, uint8_t slaveAddress, ConfigurationTypeDef *tmc2209_config, const int32_t *registerResetState)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b087      	sub	sp, #28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	607b      	str	r3, [r7, #4]
 8002e32:	460b      	mov	r3, r1
 8002e34:	72fb      	strb	r3, [r7, #11]
 8002e36:	4613      	mov	r3, r2
 8002e38:	72bb      	strb	r3, [r7, #10]
	tmc2209->slaveAddress = slaveAddress;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	7aba      	ldrb	r2, [r7, #10]
 8002e3e:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284

	tmc2209->config               = tmc2209_config;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	601a      	str	r2, [r3, #0]
	tmc2209->config->callback     = NULL;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	tmc2209->config->channel      = channel;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	7afa      	ldrb	r2, [r7, #11]
 8002e58:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
	tmc2209->config->configIndex  = 0;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2200      	movs	r2, #0
 8002e62:	705a      	strb	r2, [r3, #1]
	tmc2209->config->state        = CONFIG_READY;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	701a      	strb	r2, [r3, #0]

	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	617b      	str	r3, [r7, #20]
 8002e70:	e017      	b.n	8002ea2 <tmc2209_init+0x7a>
	{
		tmc2209->registerAccess[i]      = tmc2209_defaultRegisterAccess[i];
 8002e72:	4a11      	ldr	r2, [pc, #68]	; (8002eb8 <tmc2209_init+0x90>)
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	4413      	add	r3, r2
 8002e78:	7819      	ldrb	r1, [r3, #0]
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	4413      	add	r3, r2
 8002e80:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002e84:	460a      	mov	r2, r1
 8002e86:	701a      	strb	r2, [r3, #0]
		tmc2209->registerResetState[i]  = registerResetState[i];
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	6a3a      	ldr	r2, [r7, #32]
 8002e8e:	4413      	add	r3, r2
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	68f9      	ldr	r1, [r7, #12]
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	617b      	str	r3, [r7, #20]
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	2b7f      	cmp	r3, #127	; 0x7f
 8002ea6:	d9e4      	bls.n	8002e72 <tmc2209_init+0x4a>
	}
}
 8002ea8:	bf00      	nop
 8002eaa:	bf00      	nop
 8002eac:	371c      	adds	r7, #28
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	08003d20 	.word	0x08003d20

08002ebc <__errno>:
 8002ebc:	4b01      	ldr	r3, [pc, #4]	; (8002ec4 <__errno+0x8>)
 8002ebe:	6818      	ldr	r0, [r3, #0]
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	2000000c 	.word	0x2000000c

08002ec8 <__libc_init_array>:
 8002ec8:	b570      	push	{r4, r5, r6, lr}
 8002eca:	4d0d      	ldr	r5, [pc, #52]	; (8002f00 <__libc_init_array+0x38>)
 8002ecc:	4c0d      	ldr	r4, [pc, #52]	; (8002f04 <__libc_init_array+0x3c>)
 8002ece:	1b64      	subs	r4, r4, r5
 8002ed0:	10a4      	asrs	r4, r4, #2
 8002ed2:	2600      	movs	r6, #0
 8002ed4:	42a6      	cmp	r6, r4
 8002ed6:	d109      	bne.n	8002eec <__libc_init_array+0x24>
 8002ed8:	4d0b      	ldr	r5, [pc, #44]	; (8002f08 <__libc_init_array+0x40>)
 8002eda:	4c0c      	ldr	r4, [pc, #48]	; (8002f0c <__libc_init_array+0x44>)
 8002edc:	f000 fdf4 	bl	8003ac8 <_init>
 8002ee0:	1b64      	subs	r4, r4, r5
 8002ee2:	10a4      	asrs	r4, r4, #2
 8002ee4:	2600      	movs	r6, #0
 8002ee6:	42a6      	cmp	r6, r4
 8002ee8:	d105      	bne.n	8002ef6 <__libc_init_array+0x2e>
 8002eea:	bd70      	pop	{r4, r5, r6, pc}
 8002eec:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ef0:	4798      	blx	r3
 8002ef2:	3601      	adds	r6, #1
 8002ef4:	e7ee      	b.n	8002ed4 <__libc_init_array+0xc>
 8002ef6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002efa:	4798      	blx	r3
 8002efc:	3601      	adds	r6, #1
 8002efe:	e7f2      	b.n	8002ee6 <__libc_init_array+0x1e>
 8002f00:	08003e04 	.word	0x08003e04
 8002f04:	08003e04 	.word	0x08003e04
 8002f08:	08003e04 	.word	0x08003e04
 8002f0c:	08003e08 	.word	0x08003e08

08002f10 <memset>:
 8002f10:	4402      	add	r2, r0
 8002f12:	4603      	mov	r3, r0
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d100      	bne.n	8002f1a <memset+0xa>
 8002f18:	4770      	bx	lr
 8002f1a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f1e:	e7f9      	b.n	8002f14 <memset+0x4>

08002f20 <_puts_r>:
 8002f20:	b570      	push	{r4, r5, r6, lr}
 8002f22:	460e      	mov	r6, r1
 8002f24:	4605      	mov	r5, r0
 8002f26:	b118      	cbz	r0, 8002f30 <_puts_r+0x10>
 8002f28:	6983      	ldr	r3, [r0, #24]
 8002f2a:	b90b      	cbnz	r3, 8002f30 <_puts_r+0x10>
 8002f2c:	f000 fb16 	bl	800355c <__sinit>
 8002f30:	69ab      	ldr	r3, [r5, #24]
 8002f32:	68ac      	ldr	r4, [r5, #8]
 8002f34:	b913      	cbnz	r3, 8002f3c <_puts_r+0x1c>
 8002f36:	4628      	mov	r0, r5
 8002f38:	f000 fb10 	bl	800355c <__sinit>
 8002f3c:	4b2c      	ldr	r3, [pc, #176]	; (8002ff0 <_puts_r+0xd0>)
 8002f3e:	429c      	cmp	r4, r3
 8002f40:	d120      	bne.n	8002f84 <_puts_r+0x64>
 8002f42:	686c      	ldr	r4, [r5, #4]
 8002f44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f46:	07db      	lsls	r3, r3, #31
 8002f48:	d405      	bmi.n	8002f56 <_puts_r+0x36>
 8002f4a:	89a3      	ldrh	r3, [r4, #12]
 8002f4c:	0598      	lsls	r0, r3, #22
 8002f4e:	d402      	bmi.n	8002f56 <_puts_r+0x36>
 8002f50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f52:	f000 fba1 	bl	8003698 <__retarget_lock_acquire_recursive>
 8002f56:	89a3      	ldrh	r3, [r4, #12]
 8002f58:	0719      	lsls	r1, r3, #28
 8002f5a:	d51d      	bpl.n	8002f98 <_puts_r+0x78>
 8002f5c:	6923      	ldr	r3, [r4, #16]
 8002f5e:	b1db      	cbz	r3, 8002f98 <_puts_r+0x78>
 8002f60:	3e01      	subs	r6, #1
 8002f62:	68a3      	ldr	r3, [r4, #8]
 8002f64:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	60a3      	str	r3, [r4, #8]
 8002f6c:	bb39      	cbnz	r1, 8002fbe <_puts_r+0x9e>
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	da38      	bge.n	8002fe4 <_puts_r+0xc4>
 8002f72:	4622      	mov	r2, r4
 8002f74:	210a      	movs	r1, #10
 8002f76:	4628      	mov	r0, r5
 8002f78:	f000 f916 	bl	80031a8 <__swbuf_r>
 8002f7c:	3001      	adds	r0, #1
 8002f7e:	d011      	beq.n	8002fa4 <_puts_r+0x84>
 8002f80:	250a      	movs	r5, #10
 8002f82:	e011      	b.n	8002fa8 <_puts_r+0x88>
 8002f84:	4b1b      	ldr	r3, [pc, #108]	; (8002ff4 <_puts_r+0xd4>)
 8002f86:	429c      	cmp	r4, r3
 8002f88:	d101      	bne.n	8002f8e <_puts_r+0x6e>
 8002f8a:	68ac      	ldr	r4, [r5, #8]
 8002f8c:	e7da      	b.n	8002f44 <_puts_r+0x24>
 8002f8e:	4b1a      	ldr	r3, [pc, #104]	; (8002ff8 <_puts_r+0xd8>)
 8002f90:	429c      	cmp	r4, r3
 8002f92:	bf08      	it	eq
 8002f94:	68ec      	ldreq	r4, [r5, #12]
 8002f96:	e7d5      	b.n	8002f44 <_puts_r+0x24>
 8002f98:	4621      	mov	r1, r4
 8002f9a:	4628      	mov	r0, r5
 8002f9c:	f000 f956 	bl	800324c <__swsetup_r>
 8002fa0:	2800      	cmp	r0, #0
 8002fa2:	d0dd      	beq.n	8002f60 <_puts_r+0x40>
 8002fa4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002fa8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002faa:	07da      	lsls	r2, r3, #31
 8002fac:	d405      	bmi.n	8002fba <_puts_r+0x9a>
 8002fae:	89a3      	ldrh	r3, [r4, #12]
 8002fb0:	059b      	lsls	r3, r3, #22
 8002fb2:	d402      	bmi.n	8002fba <_puts_r+0x9a>
 8002fb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002fb6:	f000 fb70 	bl	800369a <__retarget_lock_release_recursive>
 8002fba:	4628      	mov	r0, r5
 8002fbc:	bd70      	pop	{r4, r5, r6, pc}
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	da04      	bge.n	8002fcc <_puts_r+0xac>
 8002fc2:	69a2      	ldr	r2, [r4, #24]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	dc06      	bgt.n	8002fd6 <_puts_r+0xb6>
 8002fc8:	290a      	cmp	r1, #10
 8002fca:	d004      	beq.n	8002fd6 <_puts_r+0xb6>
 8002fcc:	6823      	ldr	r3, [r4, #0]
 8002fce:	1c5a      	adds	r2, r3, #1
 8002fd0:	6022      	str	r2, [r4, #0]
 8002fd2:	7019      	strb	r1, [r3, #0]
 8002fd4:	e7c5      	b.n	8002f62 <_puts_r+0x42>
 8002fd6:	4622      	mov	r2, r4
 8002fd8:	4628      	mov	r0, r5
 8002fda:	f000 f8e5 	bl	80031a8 <__swbuf_r>
 8002fde:	3001      	adds	r0, #1
 8002fe0:	d1bf      	bne.n	8002f62 <_puts_r+0x42>
 8002fe2:	e7df      	b.n	8002fa4 <_puts_r+0x84>
 8002fe4:	6823      	ldr	r3, [r4, #0]
 8002fe6:	250a      	movs	r5, #10
 8002fe8:	1c5a      	adds	r2, r3, #1
 8002fea:	6022      	str	r2, [r4, #0]
 8002fec:	701d      	strb	r5, [r3, #0]
 8002fee:	e7db      	b.n	8002fa8 <_puts_r+0x88>
 8002ff0:	08003dc4 	.word	0x08003dc4
 8002ff4:	08003de4 	.word	0x08003de4
 8002ff8:	08003da4 	.word	0x08003da4

08002ffc <puts>:
 8002ffc:	4b02      	ldr	r3, [pc, #8]	; (8003008 <puts+0xc>)
 8002ffe:	4601      	mov	r1, r0
 8003000:	6818      	ldr	r0, [r3, #0]
 8003002:	f7ff bf8d 	b.w	8002f20 <_puts_r>
 8003006:	bf00      	nop
 8003008:	2000000c 	.word	0x2000000c

0800300c <setbuf>:
 800300c:	2900      	cmp	r1, #0
 800300e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003012:	bf0c      	ite	eq
 8003014:	2202      	moveq	r2, #2
 8003016:	2200      	movne	r2, #0
 8003018:	f000 b800 	b.w	800301c <setvbuf>

0800301c <setvbuf>:
 800301c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003020:	461d      	mov	r5, r3
 8003022:	4b5d      	ldr	r3, [pc, #372]	; (8003198 <setvbuf+0x17c>)
 8003024:	681f      	ldr	r7, [r3, #0]
 8003026:	4604      	mov	r4, r0
 8003028:	460e      	mov	r6, r1
 800302a:	4690      	mov	r8, r2
 800302c:	b127      	cbz	r7, 8003038 <setvbuf+0x1c>
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	b913      	cbnz	r3, 8003038 <setvbuf+0x1c>
 8003032:	4638      	mov	r0, r7
 8003034:	f000 fa92 	bl	800355c <__sinit>
 8003038:	4b58      	ldr	r3, [pc, #352]	; (800319c <setvbuf+0x180>)
 800303a:	429c      	cmp	r4, r3
 800303c:	d167      	bne.n	800310e <setvbuf+0xf2>
 800303e:	687c      	ldr	r4, [r7, #4]
 8003040:	f1b8 0f02 	cmp.w	r8, #2
 8003044:	d006      	beq.n	8003054 <setvbuf+0x38>
 8003046:	f1b8 0f01 	cmp.w	r8, #1
 800304a:	f200 809f 	bhi.w	800318c <setvbuf+0x170>
 800304e:	2d00      	cmp	r5, #0
 8003050:	f2c0 809c 	blt.w	800318c <setvbuf+0x170>
 8003054:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003056:	07db      	lsls	r3, r3, #31
 8003058:	d405      	bmi.n	8003066 <setvbuf+0x4a>
 800305a:	89a3      	ldrh	r3, [r4, #12]
 800305c:	0598      	lsls	r0, r3, #22
 800305e:	d402      	bmi.n	8003066 <setvbuf+0x4a>
 8003060:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003062:	f000 fb19 	bl	8003698 <__retarget_lock_acquire_recursive>
 8003066:	4621      	mov	r1, r4
 8003068:	4638      	mov	r0, r7
 800306a:	f000 f9e3 	bl	8003434 <_fflush_r>
 800306e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003070:	b141      	cbz	r1, 8003084 <setvbuf+0x68>
 8003072:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003076:	4299      	cmp	r1, r3
 8003078:	d002      	beq.n	8003080 <setvbuf+0x64>
 800307a:	4638      	mov	r0, r7
 800307c:	f000 fb7c 	bl	8003778 <_free_r>
 8003080:	2300      	movs	r3, #0
 8003082:	6363      	str	r3, [r4, #52]	; 0x34
 8003084:	2300      	movs	r3, #0
 8003086:	61a3      	str	r3, [r4, #24]
 8003088:	6063      	str	r3, [r4, #4]
 800308a:	89a3      	ldrh	r3, [r4, #12]
 800308c:	0619      	lsls	r1, r3, #24
 800308e:	d503      	bpl.n	8003098 <setvbuf+0x7c>
 8003090:	6921      	ldr	r1, [r4, #16]
 8003092:	4638      	mov	r0, r7
 8003094:	f000 fb70 	bl	8003778 <_free_r>
 8003098:	89a3      	ldrh	r3, [r4, #12]
 800309a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800309e:	f023 0303 	bic.w	r3, r3, #3
 80030a2:	f1b8 0f02 	cmp.w	r8, #2
 80030a6:	81a3      	strh	r3, [r4, #12]
 80030a8:	d06c      	beq.n	8003184 <setvbuf+0x168>
 80030aa:	ab01      	add	r3, sp, #4
 80030ac:	466a      	mov	r2, sp
 80030ae:	4621      	mov	r1, r4
 80030b0:	4638      	mov	r0, r7
 80030b2:	f000 faf3 	bl	800369c <__swhatbuf_r>
 80030b6:	89a3      	ldrh	r3, [r4, #12]
 80030b8:	4318      	orrs	r0, r3
 80030ba:	81a0      	strh	r0, [r4, #12]
 80030bc:	2d00      	cmp	r5, #0
 80030be:	d130      	bne.n	8003122 <setvbuf+0x106>
 80030c0:	9d00      	ldr	r5, [sp, #0]
 80030c2:	4628      	mov	r0, r5
 80030c4:	f000 fb50 	bl	8003768 <malloc>
 80030c8:	4606      	mov	r6, r0
 80030ca:	2800      	cmp	r0, #0
 80030cc:	d155      	bne.n	800317a <setvbuf+0x15e>
 80030ce:	f8dd 9000 	ldr.w	r9, [sp]
 80030d2:	45a9      	cmp	r9, r5
 80030d4:	d14a      	bne.n	800316c <setvbuf+0x150>
 80030d6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80030da:	2200      	movs	r2, #0
 80030dc:	60a2      	str	r2, [r4, #8]
 80030de:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80030e2:	6022      	str	r2, [r4, #0]
 80030e4:	6122      	str	r2, [r4, #16]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030ec:	6162      	str	r2, [r4, #20]
 80030ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80030f0:	f043 0302 	orr.w	r3, r3, #2
 80030f4:	07d2      	lsls	r2, r2, #31
 80030f6:	81a3      	strh	r3, [r4, #12]
 80030f8:	d405      	bmi.n	8003106 <setvbuf+0xea>
 80030fa:	f413 7f00 	tst.w	r3, #512	; 0x200
 80030fe:	d102      	bne.n	8003106 <setvbuf+0xea>
 8003100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003102:	f000 faca 	bl	800369a <__retarget_lock_release_recursive>
 8003106:	4628      	mov	r0, r5
 8003108:	b003      	add	sp, #12
 800310a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800310e:	4b24      	ldr	r3, [pc, #144]	; (80031a0 <setvbuf+0x184>)
 8003110:	429c      	cmp	r4, r3
 8003112:	d101      	bne.n	8003118 <setvbuf+0xfc>
 8003114:	68bc      	ldr	r4, [r7, #8]
 8003116:	e793      	b.n	8003040 <setvbuf+0x24>
 8003118:	4b22      	ldr	r3, [pc, #136]	; (80031a4 <setvbuf+0x188>)
 800311a:	429c      	cmp	r4, r3
 800311c:	bf08      	it	eq
 800311e:	68fc      	ldreq	r4, [r7, #12]
 8003120:	e78e      	b.n	8003040 <setvbuf+0x24>
 8003122:	2e00      	cmp	r6, #0
 8003124:	d0cd      	beq.n	80030c2 <setvbuf+0xa6>
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	b913      	cbnz	r3, 8003130 <setvbuf+0x114>
 800312a:	4638      	mov	r0, r7
 800312c:	f000 fa16 	bl	800355c <__sinit>
 8003130:	f1b8 0f01 	cmp.w	r8, #1
 8003134:	bf08      	it	eq
 8003136:	89a3      	ldrheq	r3, [r4, #12]
 8003138:	6026      	str	r6, [r4, #0]
 800313a:	bf04      	itt	eq
 800313c:	f043 0301 	orreq.w	r3, r3, #1
 8003140:	81a3      	strheq	r3, [r4, #12]
 8003142:	89a2      	ldrh	r2, [r4, #12]
 8003144:	f012 0308 	ands.w	r3, r2, #8
 8003148:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800314c:	d01c      	beq.n	8003188 <setvbuf+0x16c>
 800314e:	07d3      	lsls	r3, r2, #31
 8003150:	bf41      	itttt	mi
 8003152:	2300      	movmi	r3, #0
 8003154:	426d      	negmi	r5, r5
 8003156:	60a3      	strmi	r3, [r4, #8]
 8003158:	61a5      	strmi	r5, [r4, #24]
 800315a:	bf58      	it	pl
 800315c:	60a5      	strpl	r5, [r4, #8]
 800315e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003160:	f015 0501 	ands.w	r5, r5, #1
 8003164:	d115      	bne.n	8003192 <setvbuf+0x176>
 8003166:	f412 7f00 	tst.w	r2, #512	; 0x200
 800316a:	e7c8      	b.n	80030fe <setvbuf+0xe2>
 800316c:	4648      	mov	r0, r9
 800316e:	f000 fafb 	bl	8003768 <malloc>
 8003172:	4606      	mov	r6, r0
 8003174:	2800      	cmp	r0, #0
 8003176:	d0ae      	beq.n	80030d6 <setvbuf+0xba>
 8003178:	464d      	mov	r5, r9
 800317a:	89a3      	ldrh	r3, [r4, #12]
 800317c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003180:	81a3      	strh	r3, [r4, #12]
 8003182:	e7d0      	b.n	8003126 <setvbuf+0x10a>
 8003184:	2500      	movs	r5, #0
 8003186:	e7a8      	b.n	80030da <setvbuf+0xbe>
 8003188:	60a3      	str	r3, [r4, #8]
 800318a:	e7e8      	b.n	800315e <setvbuf+0x142>
 800318c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003190:	e7b9      	b.n	8003106 <setvbuf+0xea>
 8003192:	2500      	movs	r5, #0
 8003194:	e7b7      	b.n	8003106 <setvbuf+0xea>
 8003196:	bf00      	nop
 8003198:	2000000c 	.word	0x2000000c
 800319c:	08003dc4 	.word	0x08003dc4
 80031a0:	08003de4 	.word	0x08003de4
 80031a4:	08003da4 	.word	0x08003da4

080031a8 <__swbuf_r>:
 80031a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031aa:	460e      	mov	r6, r1
 80031ac:	4614      	mov	r4, r2
 80031ae:	4605      	mov	r5, r0
 80031b0:	b118      	cbz	r0, 80031ba <__swbuf_r+0x12>
 80031b2:	6983      	ldr	r3, [r0, #24]
 80031b4:	b90b      	cbnz	r3, 80031ba <__swbuf_r+0x12>
 80031b6:	f000 f9d1 	bl	800355c <__sinit>
 80031ba:	4b21      	ldr	r3, [pc, #132]	; (8003240 <__swbuf_r+0x98>)
 80031bc:	429c      	cmp	r4, r3
 80031be:	d12b      	bne.n	8003218 <__swbuf_r+0x70>
 80031c0:	686c      	ldr	r4, [r5, #4]
 80031c2:	69a3      	ldr	r3, [r4, #24]
 80031c4:	60a3      	str	r3, [r4, #8]
 80031c6:	89a3      	ldrh	r3, [r4, #12]
 80031c8:	071a      	lsls	r2, r3, #28
 80031ca:	d52f      	bpl.n	800322c <__swbuf_r+0x84>
 80031cc:	6923      	ldr	r3, [r4, #16]
 80031ce:	b36b      	cbz	r3, 800322c <__swbuf_r+0x84>
 80031d0:	6923      	ldr	r3, [r4, #16]
 80031d2:	6820      	ldr	r0, [r4, #0]
 80031d4:	1ac0      	subs	r0, r0, r3
 80031d6:	6963      	ldr	r3, [r4, #20]
 80031d8:	b2f6      	uxtb	r6, r6
 80031da:	4283      	cmp	r3, r0
 80031dc:	4637      	mov	r7, r6
 80031de:	dc04      	bgt.n	80031ea <__swbuf_r+0x42>
 80031e0:	4621      	mov	r1, r4
 80031e2:	4628      	mov	r0, r5
 80031e4:	f000 f926 	bl	8003434 <_fflush_r>
 80031e8:	bb30      	cbnz	r0, 8003238 <__swbuf_r+0x90>
 80031ea:	68a3      	ldr	r3, [r4, #8]
 80031ec:	3b01      	subs	r3, #1
 80031ee:	60a3      	str	r3, [r4, #8]
 80031f0:	6823      	ldr	r3, [r4, #0]
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	6022      	str	r2, [r4, #0]
 80031f6:	701e      	strb	r6, [r3, #0]
 80031f8:	6963      	ldr	r3, [r4, #20]
 80031fa:	3001      	adds	r0, #1
 80031fc:	4283      	cmp	r3, r0
 80031fe:	d004      	beq.n	800320a <__swbuf_r+0x62>
 8003200:	89a3      	ldrh	r3, [r4, #12]
 8003202:	07db      	lsls	r3, r3, #31
 8003204:	d506      	bpl.n	8003214 <__swbuf_r+0x6c>
 8003206:	2e0a      	cmp	r6, #10
 8003208:	d104      	bne.n	8003214 <__swbuf_r+0x6c>
 800320a:	4621      	mov	r1, r4
 800320c:	4628      	mov	r0, r5
 800320e:	f000 f911 	bl	8003434 <_fflush_r>
 8003212:	b988      	cbnz	r0, 8003238 <__swbuf_r+0x90>
 8003214:	4638      	mov	r0, r7
 8003216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003218:	4b0a      	ldr	r3, [pc, #40]	; (8003244 <__swbuf_r+0x9c>)
 800321a:	429c      	cmp	r4, r3
 800321c:	d101      	bne.n	8003222 <__swbuf_r+0x7a>
 800321e:	68ac      	ldr	r4, [r5, #8]
 8003220:	e7cf      	b.n	80031c2 <__swbuf_r+0x1a>
 8003222:	4b09      	ldr	r3, [pc, #36]	; (8003248 <__swbuf_r+0xa0>)
 8003224:	429c      	cmp	r4, r3
 8003226:	bf08      	it	eq
 8003228:	68ec      	ldreq	r4, [r5, #12]
 800322a:	e7ca      	b.n	80031c2 <__swbuf_r+0x1a>
 800322c:	4621      	mov	r1, r4
 800322e:	4628      	mov	r0, r5
 8003230:	f000 f80c 	bl	800324c <__swsetup_r>
 8003234:	2800      	cmp	r0, #0
 8003236:	d0cb      	beq.n	80031d0 <__swbuf_r+0x28>
 8003238:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800323c:	e7ea      	b.n	8003214 <__swbuf_r+0x6c>
 800323e:	bf00      	nop
 8003240:	08003dc4 	.word	0x08003dc4
 8003244:	08003de4 	.word	0x08003de4
 8003248:	08003da4 	.word	0x08003da4

0800324c <__swsetup_r>:
 800324c:	4b32      	ldr	r3, [pc, #200]	; (8003318 <__swsetup_r+0xcc>)
 800324e:	b570      	push	{r4, r5, r6, lr}
 8003250:	681d      	ldr	r5, [r3, #0]
 8003252:	4606      	mov	r6, r0
 8003254:	460c      	mov	r4, r1
 8003256:	b125      	cbz	r5, 8003262 <__swsetup_r+0x16>
 8003258:	69ab      	ldr	r3, [r5, #24]
 800325a:	b913      	cbnz	r3, 8003262 <__swsetup_r+0x16>
 800325c:	4628      	mov	r0, r5
 800325e:	f000 f97d 	bl	800355c <__sinit>
 8003262:	4b2e      	ldr	r3, [pc, #184]	; (800331c <__swsetup_r+0xd0>)
 8003264:	429c      	cmp	r4, r3
 8003266:	d10f      	bne.n	8003288 <__swsetup_r+0x3c>
 8003268:	686c      	ldr	r4, [r5, #4]
 800326a:	89a3      	ldrh	r3, [r4, #12]
 800326c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003270:	0719      	lsls	r1, r3, #28
 8003272:	d42c      	bmi.n	80032ce <__swsetup_r+0x82>
 8003274:	06dd      	lsls	r5, r3, #27
 8003276:	d411      	bmi.n	800329c <__swsetup_r+0x50>
 8003278:	2309      	movs	r3, #9
 800327a:	6033      	str	r3, [r6, #0]
 800327c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003280:	81a3      	strh	r3, [r4, #12]
 8003282:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003286:	e03e      	b.n	8003306 <__swsetup_r+0xba>
 8003288:	4b25      	ldr	r3, [pc, #148]	; (8003320 <__swsetup_r+0xd4>)
 800328a:	429c      	cmp	r4, r3
 800328c:	d101      	bne.n	8003292 <__swsetup_r+0x46>
 800328e:	68ac      	ldr	r4, [r5, #8]
 8003290:	e7eb      	b.n	800326a <__swsetup_r+0x1e>
 8003292:	4b24      	ldr	r3, [pc, #144]	; (8003324 <__swsetup_r+0xd8>)
 8003294:	429c      	cmp	r4, r3
 8003296:	bf08      	it	eq
 8003298:	68ec      	ldreq	r4, [r5, #12]
 800329a:	e7e6      	b.n	800326a <__swsetup_r+0x1e>
 800329c:	0758      	lsls	r0, r3, #29
 800329e:	d512      	bpl.n	80032c6 <__swsetup_r+0x7a>
 80032a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032a2:	b141      	cbz	r1, 80032b6 <__swsetup_r+0x6a>
 80032a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80032a8:	4299      	cmp	r1, r3
 80032aa:	d002      	beq.n	80032b2 <__swsetup_r+0x66>
 80032ac:	4630      	mov	r0, r6
 80032ae:	f000 fa63 	bl	8003778 <_free_r>
 80032b2:	2300      	movs	r3, #0
 80032b4:	6363      	str	r3, [r4, #52]	; 0x34
 80032b6:	89a3      	ldrh	r3, [r4, #12]
 80032b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80032bc:	81a3      	strh	r3, [r4, #12]
 80032be:	2300      	movs	r3, #0
 80032c0:	6063      	str	r3, [r4, #4]
 80032c2:	6923      	ldr	r3, [r4, #16]
 80032c4:	6023      	str	r3, [r4, #0]
 80032c6:	89a3      	ldrh	r3, [r4, #12]
 80032c8:	f043 0308 	orr.w	r3, r3, #8
 80032cc:	81a3      	strh	r3, [r4, #12]
 80032ce:	6923      	ldr	r3, [r4, #16]
 80032d0:	b94b      	cbnz	r3, 80032e6 <__swsetup_r+0x9a>
 80032d2:	89a3      	ldrh	r3, [r4, #12]
 80032d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80032d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032dc:	d003      	beq.n	80032e6 <__swsetup_r+0x9a>
 80032de:	4621      	mov	r1, r4
 80032e0:	4630      	mov	r0, r6
 80032e2:	f000 fa01 	bl	80036e8 <__smakebuf_r>
 80032e6:	89a0      	ldrh	r0, [r4, #12]
 80032e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80032ec:	f010 0301 	ands.w	r3, r0, #1
 80032f0:	d00a      	beq.n	8003308 <__swsetup_r+0xbc>
 80032f2:	2300      	movs	r3, #0
 80032f4:	60a3      	str	r3, [r4, #8]
 80032f6:	6963      	ldr	r3, [r4, #20]
 80032f8:	425b      	negs	r3, r3
 80032fa:	61a3      	str	r3, [r4, #24]
 80032fc:	6923      	ldr	r3, [r4, #16]
 80032fe:	b943      	cbnz	r3, 8003312 <__swsetup_r+0xc6>
 8003300:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003304:	d1ba      	bne.n	800327c <__swsetup_r+0x30>
 8003306:	bd70      	pop	{r4, r5, r6, pc}
 8003308:	0781      	lsls	r1, r0, #30
 800330a:	bf58      	it	pl
 800330c:	6963      	ldrpl	r3, [r4, #20]
 800330e:	60a3      	str	r3, [r4, #8]
 8003310:	e7f4      	b.n	80032fc <__swsetup_r+0xb0>
 8003312:	2000      	movs	r0, #0
 8003314:	e7f7      	b.n	8003306 <__swsetup_r+0xba>
 8003316:	bf00      	nop
 8003318:	2000000c 	.word	0x2000000c
 800331c:	08003dc4 	.word	0x08003dc4
 8003320:	08003de4 	.word	0x08003de4
 8003324:	08003da4 	.word	0x08003da4

08003328 <__sflush_r>:
 8003328:	898a      	ldrh	r2, [r1, #12]
 800332a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800332e:	4605      	mov	r5, r0
 8003330:	0710      	lsls	r0, r2, #28
 8003332:	460c      	mov	r4, r1
 8003334:	d458      	bmi.n	80033e8 <__sflush_r+0xc0>
 8003336:	684b      	ldr	r3, [r1, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	dc05      	bgt.n	8003348 <__sflush_r+0x20>
 800333c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800333e:	2b00      	cmp	r3, #0
 8003340:	dc02      	bgt.n	8003348 <__sflush_r+0x20>
 8003342:	2000      	movs	r0, #0
 8003344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003348:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800334a:	2e00      	cmp	r6, #0
 800334c:	d0f9      	beq.n	8003342 <__sflush_r+0x1a>
 800334e:	2300      	movs	r3, #0
 8003350:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003354:	682f      	ldr	r7, [r5, #0]
 8003356:	602b      	str	r3, [r5, #0]
 8003358:	d032      	beq.n	80033c0 <__sflush_r+0x98>
 800335a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800335c:	89a3      	ldrh	r3, [r4, #12]
 800335e:	075a      	lsls	r2, r3, #29
 8003360:	d505      	bpl.n	800336e <__sflush_r+0x46>
 8003362:	6863      	ldr	r3, [r4, #4]
 8003364:	1ac0      	subs	r0, r0, r3
 8003366:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003368:	b10b      	cbz	r3, 800336e <__sflush_r+0x46>
 800336a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800336c:	1ac0      	subs	r0, r0, r3
 800336e:	2300      	movs	r3, #0
 8003370:	4602      	mov	r2, r0
 8003372:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003374:	6a21      	ldr	r1, [r4, #32]
 8003376:	4628      	mov	r0, r5
 8003378:	47b0      	blx	r6
 800337a:	1c43      	adds	r3, r0, #1
 800337c:	89a3      	ldrh	r3, [r4, #12]
 800337e:	d106      	bne.n	800338e <__sflush_r+0x66>
 8003380:	6829      	ldr	r1, [r5, #0]
 8003382:	291d      	cmp	r1, #29
 8003384:	d82c      	bhi.n	80033e0 <__sflush_r+0xb8>
 8003386:	4a2a      	ldr	r2, [pc, #168]	; (8003430 <__sflush_r+0x108>)
 8003388:	40ca      	lsrs	r2, r1
 800338a:	07d6      	lsls	r6, r2, #31
 800338c:	d528      	bpl.n	80033e0 <__sflush_r+0xb8>
 800338e:	2200      	movs	r2, #0
 8003390:	6062      	str	r2, [r4, #4]
 8003392:	04d9      	lsls	r1, r3, #19
 8003394:	6922      	ldr	r2, [r4, #16]
 8003396:	6022      	str	r2, [r4, #0]
 8003398:	d504      	bpl.n	80033a4 <__sflush_r+0x7c>
 800339a:	1c42      	adds	r2, r0, #1
 800339c:	d101      	bne.n	80033a2 <__sflush_r+0x7a>
 800339e:	682b      	ldr	r3, [r5, #0]
 80033a0:	b903      	cbnz	r3, 80033a4 <__sflush_r+0x7c>
 80033a2:	6560      	str	r0, [r4, #84]	; 0x54
 80033a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033a6:	602f      	str	r7, [r5, #0]
 80033a8:	2900      	cmp	r1, #0
 80033aa:	d0ca      	beq.n	8003342 <__sflush_r+0x1a>
 80033ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033b0:	4299      	cmp	r1, r3
 80033b2:	d002      	beq.n	80033ba <__sflush_r+0x92>
 80033b4:	4628      	mov	r0, r5
 80033b6:	f000 f9df 	bl	8003778 <_free_r>
 80033ba:	2000      	movs	r0, #0
 80033bc:	6360      	str	r0, [r4, #52]	; 0x34
 80033be:	e7c1      	b.n	8003344 <__sflush_r+0x1c>
 80033c0:	6a21      	ldr	r1, [r4, #32]
 80033c2:	2301      	movs	r3, #1
 80033c4:	4628      	mov	r0, r5
 80033c6:	47b0      	blx	r6
 80033c8:	1c41      	adds	r1, r0, #1
 80033ca:	d1c7      	bne.n	800335c <__sflush_r+0x34>
 80033cc:	682b      	ldr	r3, [r5, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0c4      	beq.n	800335c <__sflush_r+0x34>
 80033d2:	2b1d      	cmp	r3, #29
 80033d4:	d001      	beq.n	80033da <__sflush_r+0xb2>
 80033d6:	2b16      	cmp	r3, #22
 80033d8:	d101      	bne.n	80033de <__sflush_r+0xb6>
 80033da:	602f      	str	r7, [r5, #0]
 80033dc:	e7b1      	b.n	8003342 <__sflush_r+0x1a>
 80033de:	89a3      	ldrh	r3, [r4, #12]
 80033e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033e4:	81a3      	strh	r3, [r4, #12]
 80033e6:	e7ad      	b.n	8003344 <__sflush_r+0x1c>
 80033e8:	690f      	ldr	r7, [r1, #16]
 80033ea:	2f00      	cmp	r7, #0
 80033ec:	d0a9      	beq.n	8003342 <__sflush_r+0x1a>
 80033ee:	0793      	lsls	r3, r2, #30
 80033f0:	680e      	ldr	r6, [r1, #0]
 80033f2:	bf08      	it	eq
 80033f4:	694b      	ldreq	r3, [r1, #20]
 80033f6:	600f      	str	r7, [r1, #0]
 80033f8:	bf18      	it	ne
 80033fa:	2300      	movne	r3, #0
 80033fc:	eba6 0807 	sub.w	r8, r6, r7
 8003400:	608b      	str	r3, [r1, #8]
 8003402:	f1b8 0f00 	cmp.w	r8, #0
 8003406:	dd9c      	ble.n	8003342 <__sflush_r+0x1a>
 8003408:	6a21      	ldr	r1, [r4, #32]
 800340a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800340c:	4643      	mov	r3, r8
 800340e:	463a      	mov	r2, r7
 8003410:	4628      	mov	r0, r5
 8003412:	47b0      	blx	r6
 8003414:	2800      	cmp	r0, #0
 8003416:	dc06      	bgt.n	8003426 <__sflush_r+0xfe>
 8003418:	89a3      	ldrh	r3, [r4, #12]
 800341a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800341e:	81a3      	strh	r3, [r4, #12]
 8003420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003424:	e78e      	b.n	8003344 <__sflush_r+0x1c>
 8003426:	4407      	add	r7, r0
 8003428:	eba8 0800 	sub.w	r8, r8, r0
 800342c:	e7e9      	b.n	8003402 <__sflush_r+0xda>
 800342e:	bf00      	nop
 8003430:	20400001 	.word	0x20400001

08003434 <_fflush_r>:
 8003434:	b538      	push	{r3, r4, r5, lr}
 8003436:	690b      	ldr	r3, [r1, #16]
 8003438:	4605      	mov	r5, r0
 800343a:	460c      	mov	r4, r1
 800343c:	b913      	cbnz	r3, 8003444 <_fflush_r+0x10>
 800343e:	2500      	movs	r5, #0
 8003440:	4628      	mov	r0, r5
 8003442:	bd38      	pop	{r3, r4, r5, pc}
 8003444:	b118      	cbz	r0, 800344e <_fflush_r+0x1a>
 8003446:	6983      	ldr	r3, [r0, #24]
 8003448:	b90b      	cbnz	r3, 800344e <_fflush_r+0x1a>
 800344a:	f000 f887 	bl	800355c <__sinit>
 800344e:	4b14      	ldr	r3, [pc, #80]	; (80034a0 <_fflush_r+0x6c>)
 8003450:	429c      	cmp	r4, r3
 8003452:	d11b      	bne.n	800348c <_fflush_r+0x58>
 8003454:	686c      	ldr	r4, [r5, #4]
 8003456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0ef      	beq.n	800343e <_fflush_r+0xa>
 800345e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003460:	07d0      	lsls	r0, r2, #31
 8003462:	d404      	bmi.n	800346e <_fflush_r+0x3a>
 8003464:	0599      	lsls	r1, r3, #22
 8003466:	d402      	bmi.n	800346e <_fflush_r+0x3a>
 8003468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800346a:	f000 f915 	bl	8003698 <__retarget_lock_acquire_recursive>
 800346e:	4628      	mov	r0, r5
 8003470:	4621      	mov	r1, r4
 8003472:	f7ff ff59 	bl	8003328 <__sflush_r>
 8003476:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003478:	07da      	lsls	r2, r3, #31
 800347a:	4605      	mov	r5, r0
 800347c:	d4e0      	bmi.n	8003440 <_fflush_r+0xc>
 800347e:	89a3      	ldrh	r3, [r4, #12]
 8003480:	059b      	lsls	r3, r3, #22
 8003482:	d4dd      	bmi.n	8003440 <_fflush_r+0xc>
 8003484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003486:	f000 f908 	bl	800369a <__retarget_lock_release_recursive>
 800348a:	e7d9      	b.n	8003440 <_fflush_r+0xc>
 800348c:	4b05      	ldr	r3, [pc, #20]	; (80034a4 <_fflush_r+0x70>)
 800348e:	429c      	cmp	r4, r3
 8003490:	d101      	bne.n	8003496 <_fflush_r+0x62>
 8003492:	68ac      	ldr	r4, [r5, #8]
 8003494:	e7df      	b.n	8003456 <_fflush_r+0x22>
 8003496:	4b04      	ldr	r3, [pc, #16]	; (80034a8 <_fflush_r+0x74>)
 8003498:	429c      	cmp	r4, r3
 800349a:	bf08      	it	eq
 800349c:	68ec      	ldreq	r4, [r5, #12]
 800349e:	e7da      	b.n	8003456 <_fflush_r+0x22>
 80034a0:	08003dc4 	.word	0x08003dc4
 80034a4:	08003de4 	.word	0x08003de4
 80034a8:	08003da4 	.word	0x08003da4

080034ac <std>:
 80034ac:	2300      	movs	r3, #0
 80034ae:	b510      	push	{r4, lr}
 80034b0:	4604      	mov	r4, r0
 80034b2:	e9c0 3300 	strd	r3, r3, [r0]
 80034b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80034ba:	6083      	str	r3, [r0, #8]
 80034bc:	8181      	strh	r1, [r0, #12]
 80034be:	6643      	str	r3, [r0, #100]	; 0x64
 80034c0:	81c2      	strh	r2, [r0, #14]
 80034c2:	6183      	str	r3, [r0, #24]
 80034c4:	4619      	mov	r1, r3
 80034c6:	2208      	movs	r2, #8
 80034c8:	305c      	adds	r0, #92	; 0x5c
 80034ca:	f7ff fd21 	bl	8002f10 <memset>
 80034ce:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <std+0x38>)
 80034d0:	6263      	str	r3, [r4, #36]	; 0x24
 80034d2:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <std+0x3c>)
 80034d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80034d6:	4b05      	ldr	r3, [pc, #20]	; (80034ec <std+0x40>)
 80034d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80034da:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <std+0x44>)
 80034dc:	6224      	str	r4, [r4, #32]
 80034de:	6323      	str	r3, [r4, #48]	; 0x30
 80034e0:	bd10      	pop	{r4, pc}
 80034e2:	bf00      	nop
 80034e4:	08003959 	.word	0x08003959
 80034e8:	0800397b 	.word	0x0800397b
 80034ec:	080039b3 	.word	0x080039b3
 80034f0:	080039d7 	.word	0x080039d7

080034f4 <_cleanup_r>:
 80034f4:	4901      	ldr	r1, [pc, #4]	; (80034fc <_cleanup_r+0x8>)
 80034f6:	f000 b8af 	b.w	8003658 <_fwalk_reent>
 80034fa:	bf00      	nop
 80034fc:	08003435 	.word	0x08003435

08003500 <__sfmoreglue>:
 8003500:	b570      	push	{r4, r5, r6, lr}
 8003502:	2268      	movs	r2, #104	; 0x68
 8003504:	1e4d      	subs	r5, r1, #1
 8003506:	4355      	muls	r5, r2
 8003508:	460e      	mov	r6, r1
 800350a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800350e:	f000 f99f 	bl	8003850 <_malloc_r>
 8003512:	4604      	mov	r4, r0
 8003514:	b140      	cbz	r0, 8003528 <__sfmoreglue+0x28>
 8003516:	2100      	movs	r1, #0
 8003518:	e9c0 1600 	strd	r1, r6, [r0]
 800351c:	300c      	adds	r0, #12
 800351e:	60a0      	str	r0, [r4, #8]
 8003520:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003524:	f7ff fcf4 	bl	8002f10 <memset>
 8003528:	4620      	mov	r0, r4
 800352a:	bd70      	pop	{r4, r5, r6, pc}

0800352c <__sfp_lock_acquire>:
 800352c:	4801      	ldr	r0, [pc, #4]	; (8003534 <__sfp_lock_acquire+0x8>)
 800352e:	f000 b8b3 	b.w	8003698 <__retarget_lock_acquire_recursive>
 8003532:	bf00      	nop
 8003534:	2000083d 	.word	0x2000083d

08003538 <__sfp_lock_release>:
 8003538:	4801      	ldr	r0, [pc, #4]	; (8003540 <__sfp_lock_release+0x8>)
 800353a:	f000 b8ae 	b.w	800369a <__retarget_lock_release_recursive>
 800353e:	bf00      	nop
 8003540:	2000083d 	.word	0x2000083d

08003544 <__sinit_lock_acquire>:
 8003544:	4801      	ldr	r0, [pc, #4]	; (800354c <__sinit_lock_acquire+0x8>)
 8003546:	f000 b8a7 	b.w	8003698 <__retarget_lock_acquire_recursive>
 800354a:	bf00      	nop
 800354c:	2000083e 	.word	0x2000083e

08003550 <__sinit_lock_release>:
 8003550:	4801      	ldr	r0, [pc, #4]	; (8003558 <__sinit_lock_release+0x8>)
 8003552:	f000 b8a2 	b.w	800369a <__retarget_lock_release_recursive>
 8003556:	bf00      	nop
 8003558:	2000083e 	.word	0x2000083e

0800355c <__sinit>:
 800355c:	b510      	push	{r4, lr}
 800355e:	4604      	mov	r4, r0
 8003560:	f7ff fff0 	bl	8003544 <__sinit_lock_acquire>
 8003564:	69a3      	ldr	r3, [r4, #24]
 8003566:	b11b      	cbz	r3, 8003570 <__sinit+0x14>
 8003568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800356c:	f7ff bff0 	b.w	8003550 <__sinit_lock_release>
 8003570:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003574:	6523      	str	r3, [r4, #80]	; 0x50
 8003576:	4b13      	ldr	r3, [pc, #76]	; (80035c4 <__sinit+0x68>)
 8003578:	4a13      	ldr	r2, [pc, #76]	; (80035c8 <__sinit+0x6c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	62a2      	str	r2, [r4, #40]	; 0x28
 800357e:	42a3      	cmp	r3, r4
 8003580:	bf04      	itt	eq
 8003582:	2301      	moveq	r3, #1
 8003584:	61a3      	streq	r3, [r4, #24]
 8003586:	4620      	mov	r0, r4
 8003588:	f000 f820 	bl	80035cc <__sfp>
 800358c:	6060      	str	r0, [r4, #4]
 800358e:	4620      	mov	r0, r4
 8003590:	f000 f81c 	bl	80035cc <__sfp>
 8003594:	60a0      	str	r0, [r4, #8]
 8003596:	4620      	mov	r0, r4
 8003598:	f000 f818 	bl	80035cc <__sfp>
 800359c:	2200      	movs	r2, #0
 800359e:	60e0      	str	r0, [r4, #12]
 80035a0:	2104      	movs	r1, #4
 80035a2:	6860      	ldr	r0, [r4, #4]
 80035a4:	f7ff ff82 	bl	80034ac <std>
 80035a8:	68a0      	ldr	r0, [r4, #8]
 80035aa:	2201      	movs	r2, #1
 80035ac:	2109      	movs	r1, #9
 80035ae:	f7ff ff7d 	bl	80034ac <std>
 80035b2:	68e0      	ldr	r0, [r4, #12]
 80035b4:	2202      	movs	r2, #2
 80035b6:	2112      	movs	r1, #18
 80035b8:	f7ff ff78 	bl	80034ac <std>
 80035bc:	2301      	movs	r3, #1
 80035be:	61a3      	str	r3, [r4, #24]
 80035c0:	e7d2      	b.n	8003568 <__sinit+0xc>
 80035c2:	bf00      	nop
 80035c4:	08003da0 	.word	0x08003da0
 80035c8:	080034f5 	.word	0x080034f5

080035cc <__sfp>:
 80035cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ce:	4607      	mov	r7, r0
 80035d0:	f7ff ffac 	bl	800352c <__sfp_lock_acquire>
 80035d4:	4b1e      	ldr	r3, [pc, #120]	; (8003650 <__sfp+0x84>)
 80035d6:	681e      	ldr	r6, [r3, #0]
 80035d8:	69b3      	ldr	r3, [r6, #24]
 80035da:	b913      	cbnz	r3, 80035e2 <__sfp+0x16>
 80035dc:	4630      	mov	r0, r6
 80035de:	f7ff ffbd 	bl	800355c <__sinit>
 80035e2:	3648      	adds	r6, #72	; 0x48
 80035e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80035e8:	3b01      	subs	r3, #1
 80035ea:	d503      	bpl.n	80035f4 <__sfp+0x28>
 80035ec:	6833      	ldr	r3, [r6, #0]
 80035ee:	b30b      	cbz	r3, 8003634 <__sfp+0x68>
 80035f0:	6836      	ldr	r6, [r6, #0]
 80035f2:	e7f7      	b.n	80035e4 <__sfp+0x18>
 80035f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80035f8:	b9d5      	cbnz	r5, 8003630 <__sfp+0x64>
 80035fa:	4b16      	ldr	r3, [pc, #88]	; (8003654 <__sfp+0x88>)
 80035fc:	60e3      	str	r3, [r4, #12]
 80035fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003602:	6665      	str	r5, [r4, #100]	; 0x64
 8003604:	f000 f847 	bl	8003696 <__retarget_lock_init_recursive>
 8003608:	f7ff ff96 	bl	8003538 <__sfp_lock_release>
 800360c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003610:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003614:	6025      	str	r5, [r4, #0]
 8003616:	61a5      	str	r5, [r4, #24]
 8003618:	2208      	movs	r2, #8
 800361a:	4629      	mov	r1, r5
 800361c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003620:	f7ff fc76 	bl	8002f10 <memset>
 8003624:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003628:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800362c:	4620      	mov	r0, r4
 800362e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003630:	3468      	adds	r4, #104	; 0x68
 8003632:	e7d9      	b.n	80035e8 <__sfp+0x1c>
 8003634:	2104      	movs	r1, #4
 8003636:	4638      	mov	r0, r7
 8003638:	f7ff ff62 	bl	8003500 <__sfmoreglue>
 800363c:	4604      	mov	r4, r0
 800363e:	6030      	str	r0, [r6, #0]
 8003640:	2800      	cmp	r0, #0
 8003642:	d1d5      	bne.n	80035f0 <__sfp+0x24>
 8003644:	f7ff ff78 	bl	8003538 <__sfp_lock_release>
 8003648:	230c      	movs	r3, #12
 800364a:	603b      	str	r3, [r7, #0]
 800364c:	e7ee      	b.n	800362c <__sfp+0x60>
 800364e:	bf00      	nop
 8003650:	08003da0 	.word	0x08003da0
 8003654:	ffff0001 	.word	0xffff0001

08003658 <_fwalk_reent>:
 8003658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800365c:	4606      	mov	r6, r0
 800365e:	4688      	mov	r8, r1
 8003660:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003664:	2700      	movs	r7, #0
 8003666:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800366a:	f1b9 0901 	subs.w	r9, r9, #1
 800366e:	d505      	bpl.n	800367c <_fwalk_reent+0x24>
 8003670:	6824      	ldr	r4, [r4, #0]
 8003672:	2c00      	cmp	r4, #0
 8003674:	d1f7      	bne.n	8003666 <_fwalk_reent+0xe>
 8003676:	4638      	mov	r0, r7
 8003678:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800367c:	89ab      	ldrh	r3, [r5, #12]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d907      	bls.n	8003692 <_fwalk_reent+0x3a>
 8003682:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003686:	3301      	adds	r3, #1
 8003688:	d003      	beq.n	8003692 <_fwalk_reent+0x3a>
 800368a:	4629      	mov	r1, r5
 800368c:	4630      	mov	r0, r6
 800368e:	47c0      	blx	r8
 8003690:	4307      	orrs	r7, r0
 8003692:	3568      	adds	r5, #104	; 0x68
 8003694:	e7e9      	b.n	800366a <_fwalk_reent+0x12>

08003696 <__retarget_lock_init_recursive>:
 8003696:	4770      	bx	lr

08003698 <__retarget_lock_acquire_recursive>:
 8003698:	4770      	bx	lr

0800369a <__retarget_lock_release_recursive>:
 800369a:	4770      	bx	lr

0800369c <__swhatbuf_r>:
 800369c:	b570      	push	{r4, r5, r6, lr}
 800369e:	460e      	mov	r6, r1
 80036a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036a4:	2900      	cmp	r1, #0
 80036a6:	b096      	sub	sp, #88	; 0x58
 80036a8:	4614      	mov	r4, r2
 80036aa:	461d      	mov	r5, r3
 80036ac:	da08      	bge.n	80036c0 <__swhatbuf_r+0x24>
 80036ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	602a      	str	r2, [r5, #0]
 80036b6:	061a      	lsls	r2, r3, #24
 80036b8:	d410      	bmi.n	80036dc <__swhatbuf_r+0x40>
 80036ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036be:	e00e      	b.n	80036de <__swhatbuf_r+0x42>
 80036c0:	466a      	mov	r2, sp
 80036c2:	f000 f9af 	bl	8003a24 <_fstat_r>
 80036c6:	2800      	cmp	r0, #0
 80036c8:	dbf1      	blt.n	80036ae <__swhatbuf_r+0x12>
 80036ca:	9a01      	ldr	r2, [sp, #4]
 80036cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80036d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80036d4:	425a      	negs	r2, r3
 80036d6:	415a      	adcs	r2, r3
 80036d8:	602a      	str	r2, [r5, #0]
 80036da:	e7ee      	b.n	80036ba <__swhatbuf_r+0x1e>
 80036dc:	2340      	movs	r3, #64	; 0x40
 80036de:	2000      	movs	r0, #0
 80036e0:	6023      	str	r3, [r4, #0]
 80036e2:	b016      	add	sp, #88	; 0x58
 80036e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080036e8 <__smakebuf_r>:
 80036e8:	898b      	ldrh	r3, [r1, #12]
 80036ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80036ec:	079d      	lsls	r5, r3, #30
 80036ee:	4606      	mov	r6, r0
 80036f0:	460c      	mov	r4, r1
 80036f2:	d507      	bpl.n	8003704 <__smakebuf_r+0x1c>
 80036f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80036f8:	6023      	str	r3, [r4, #0]
 80036fa:	6123      	str	r3, [r4, #16]
 80036fc:	2301      	movs	r3, #1
 80036fe:	6163      	str	r3, [r4, #20]
 8003700:	b002      	add	sp, #8
 8003702:	bd70      	pop	{r4, r5, r6, pc}
 8003704:	ab01      	add	r3, sp, #4
 8003706:	466a      	mov	r2, sp
 8003708:	f7ff ffc8 	bl	800369c <__swhatbuf_r>
 800370c:	9900      	ldr	r1, [sp, #0]
 800370e:	4605      	mov	r5, r0
 8003710:	4630      	mov	r0, r6
 8003712:	f000 f89d 	bl	8003850 <_malloc_r>
 8003716:	b948      	cbnz	r0, 800372c <__smakebuf_r+0x44>
 8003718:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800371c:	059a      	lsls	r2, r3, #22
 800371e:	d4ef      	bmi.n	8003700 <__smakebuf_r+0x18>
 8003720:	f023 0303 	bic.w	r3, r3, #3
 8003724:	f043 0302 	orr.w	r3, r3, #2
 8003728:	81a3      	strh	r3, [r4, #12]
 800372a:	e7e3      	b.n	80036f4 <__smakebuf_r+0xc>
 800372c:	4b0d      	ldr	r3, [pc, #52]	; (8003764 <__smakebuf_r+0x7c>)
 800372e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003730:	89a3      	ldrh	r3, [r4, #12]
 8003732:	6020      	str	r0, [r4, #0]
 8003734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003738:	81a3      	strh	r3, [r4, #12]
 800373a:	9b00      	ldr	r3, [sp, #0]
 800373c:	6163      	str	r3, [r4, #20]
 800373e:	9b01      	ldr	r3, [sp, #4]
 8003740:	6120      	str	r0, [r4, #16]
 8003742:	b15b      	cbz	r3, 800375c <__smakebuf_r+0x74>
 8003744:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003748:	4630      	mov	r0, r6
 800374a:	f000 f97d 	bl	8003a48 <_isatty_r>
 800374e:	b128      	cbz	r0, 800375c <__smakebuf_r+0x74>
 8003750:	89a3      	ldrh	r3, [r4, #12]
 8003752:	f023 0303 	bic.w	r3, r3, #3
 8003756:	f043 0301 	orr.w	r3, r3, #1
 800375a:	81a3      	strh	r3, [r4, #12]
 800375c:	89a0      	ldrh	r0, [r4, #12]
 800375e:	4305      	orrs	r5, r0
 8003760:	81a5      	strh	r5, [r4, #12]
 8003762:	e7cd      	b.n	8003700 <__smakebuf_r+0x18>
 8003764:	080034f5 	.word	0x080034f5

08003768 <malloc>:
 8003768:	4b02      	ldr	r3, [pc, #8]	; (8003774 <malloc+0xc>)
 800376a:	4601      	mov	r1, r0
 800376c:	6818      	ldr	r0, [r3, #0]
 800376e:	f000 b86f 	b.w	8003850 <_malloc_r>
 8003772:	bf00      	nop
 8003774:	2000000c 	.word	0x2000000c

08003778 <_free_r>:
 8003778:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800377a:	2900      	cmp	r1, #0
 800377c:	d044      	beq.n	8003808 <_free_r+0x90>
 800377e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003782:	9001      	str	r0, [sp, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	f1a1 0404 	sub.w	r4, r1, #4
 800378a:	bfb8      	it	lt
 800378c:	18e4      	addlt	r4, r4, r3
 800378e:	f000 f97d 	bl	8003a8c <__malloc_lock>
 8003792:	4a1e      	ldr	r2, [pc, #120]	; (800380c <_free_r+0x94>)
 8003794:	9801      	ldr	r0, [sp, #4]
 8003796:	6813      	ldr	r3, [r2, #0]
 8003798:	b933      	cbnz	r3, 80037a8 <_free_r+0x30>
 800379a:	6063      	str	r3, [r4, #4]
 800379c:	6014      	str	r4, [r2, #0]
 800379e:	b003      	add	sp, #12
 80037a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80037a4:	f000 b978 	b.w	8003a98 <__malloc_unlock>
 80037a8:	42a3      	cmp	r3, r4
 80037aa:	d908      	bls.n	80037be <_free_r+0x46>
 80037ac:	6825      	ldr	r5, [r4, #0]
 80037ae:	1961      	adds	r1, r4, r5
 80037b0:	428b      	cmp	r3, r1
 80037b2:	bf01      	itttt	eq
 80037b4:	6819      	ldreq	r1, [r3, #0]
 80037b6:	685b      	ldreq	r3, [r3, #4]
 80037b8:	1949      	addeq	r1, r1, r5
 80037ba:	6021      	streq	r1, [r4, #0]
 80037bc:	e7ed      	b.n	800379a <_free_r+0x22>
 80037be:	461a      	mov	r2, r3
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	b10b      	cbz	r3, 80037c8 <_free_r+0x50>
 80037c4:	42a3      	cmp	r3, r4
 80037c6:	d9fa      	bls.n	80037be <_free_r+0x46>
 80037c8:	6811      	ldr	r1, [r2, #0]
 80037ca:	1855      	adds	r5, r2, r1
 80037cc:	42a5      	cmp	r5, r4
 80037ce:	d10b      	bne.n	80037e8 <_free_r+0x70>
 80037d0:	6824      	ldr	r4, [r4, #0]
 80037d2:	4421      	add	r1, r4
 80037d4:	1854      	adds	r4, r2, r1
 80037d6:	42a3      	cmp	r3, r4
 80037d8:	6011      	str	r1, [r2, #0]
 80037da:	d1e0      	bne.n	800379e <_free_r+0x26>
 80037dc:	681c      	ldr	r4, [r3, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	6053      	str	r3, [r2, #4]
 80037e2:	4421      	add	r1, r4
 80037e4:	6011      	str	r1, [r2, #0]
 80037e6:	e7da      	b.n	800379e <_free_r+0x26>
 80037e8:	d902      	bls.n	80037f0 <_free_r+0x78>
 80037ea:	230c      	movs	r3, #12
 80037ec:	6003      	str	r3, [r0, #0]
 80037ee:	e7d6      	b.n	800379e <_free_r+0x26>
 80037f0:	6825      	ldr	r5, [r4, #0]
 80037f2:	1961      	adds	r1, r4, r5
 80037f4:	428b      	cmp	r3, r1
 80037f6:	bf04      	itt	eq
 80037f8:	6819      	ldreq	r1, [r3, #0]
 80037fa:	685b      	ldreq	r3, [r3, #4]
 80037fc:	6063      	str	r3, [r4, #4]
 80037fe:	bf04      	itt	eq
 8003800:	1949      	addeq	r1, r1, r5
 8003802:	6021      	streq	r1, [r4, #0]
 8003804:	6054      	str	r4, [r2, #4]
 8003806:	e7ca      	b.n	800379e <_free_r+0x26>
 8003808:	b003      	add	sp, #12
 800380a:	bd30      	pop	{r4, r5, pc}
 800380c:	20000840 	.word	0x20000840

08003810 <sbrk_aligned>:
 8003810:	b570      	push	{r4, r5, r6, lr}
 8003812:	4e0e      	ldr	r6, [pc, #56]	; (800384c <sbrk_aligned+0x3c>)
 8003814:	460c      	mov	r4, r1
 8003816:	6831      	ldr	r1, [r6, #0]
 8003818:	4605      	mov	r5, r0
 800381a:	b911      	cbnz	r1, 8003822 <sbrk_aligned+0x12>
 800381c:	f000 f88c 	bl	8003938 <_sbrk_r>
 8003820:	6030      	str	r0, [r6, #0]
 8003822:	4621      	mov	r1, r4
 8003824:	4628      	mov	r0, r5
 8003826:	f000 f887 	bl	8003938 <_sbrk_r>
 800382a:	1c43      	adds	r3, r0, #1
 800382c:	d00a      	beq.n	8003844 <sbrk_aligned+0x34>
 800382e:	1cc4      	adds	r4, r0, #3
 8003830:	f024 0403 	bic.w	r4, r4, #3
 8003834:	42a0      	cmp	r0, r4
 8003836:	d007      	beq.n	8003848 <sbrk_aligned+0x38>
 8003838:	1a21      	subs	r1, r4, r0
 800383a:	4628      	mov	r0, r5
 800383c:	f000 f87c 	bl	8003938 <_sbrk_r>
 8003840:	3001      	adds	r0, #1
 8003842:	d101      	bne.n	8003848 <sbrk_aligned+0x38>
 8003844:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003848:	4620      	mov	r0, r4
 800384a:	bd70      	pop	{r4, r5, r6, pc}
 800384c:	20000844 	.word	0x20000844

08003850 <_malloc_r>:
 8003850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003854:	1ccd      	adds	r5, r1, #3
 8003856:	f025 0503 	bic.w	r5, r5, #3
 800385a:	3508      	adds	r5, #8
 800385c:	2d0c      	cmp	r5, #12
 800385e:	bf38      	it	cc
 8003860:	250c      	movcc	r5, #12
 8003862:	2d00      	cmp	r5, #0
 8003864:	4607      	mov	r7, r0
 8003866:	db01      	blt.n	800386c <_malloc_r+0x1c>
 8003868:	42a9      	cmp	r1, r5
 800386a:	d905      	bls.n	8003878 <_malloc_r+0x28>
 800386c:	230c      	movs	r3, #12
 800386e:	603b      	str	r3, [r7, #0]
 8003870:	2600      	movs	r6, #0
 8003872:	4630      	mov	r0, r6
 8003874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003878:	4e2e      	ldr	r6, [pc, #184]	; (8003934 <_malloc_r+0xe4>)
 800387a:	f000 f907 	bl	8003a8c <__malloc_lock>
 800387e:	6833      	ldr	r3, [r6, #0]
 8003880:	461c      	mov	r4, r3
 8003882:	bb34      	cbnz	r4, 80038d2 <_malloc_r+0x82>
 8003884:	4629      	mov	r1, r5
 8003886:	4638      	mov	r0, r7
 8003888:	f7ff ffc2 	bl	8003810 <sbrk_aligned>
 800388c:	1c43      	adds	r3, r0, #1
 800388e:	4604      	mov	r4, r0
 8003890:	d14d      	bne.n	800392e <_malloc_r+0xde>
 8003892:	6834      	ldr	r4, [r6, #0]
 8003894:	4626      	mov	r6, r4
 8003896:	2e00      	cmp	r6, #0
 8003898:	d140      	bne.n	800391c <_malloc_r+0xcc>
 800389a:	6823      	ldr	r3, [r4, #0]
 800389c:	4631      	mov	r1, r6
 800389e:	4638      	mov	r0, r7
 80038a0:	eb04 0803 	add.w	r8, r4, r3
 80038a4:	f000 f848 	bl	8003938 <_sbrk_r>
 80038a8:	4580      	cmp	r8, r0
 80038aa:	d13a      	bne.n	8003922 <_malloc_r+0xd2>
 80038ac:	6821      	ldr	r1, [r4, #0]
 80038ae:	3503      	adds	r5, #3
 80038b0:	1a6d      	subs	r5, r5, r1
 80038b2:	f025 0503 	bic.w	r5, r5, #3
 80038b6:	3508      	adds	r5, #8
 80038b8:	2d0c      	cmp	r5, #12
 80038ba:	bf38      	it	cc
 80038bc:	250c      	movcc	r5, #12
 80038be:	4629      	mov	r1, r5
 80038c0:	4638      	mov	r0, r7
 80038c2:	f7ff ffa5 	bl	8003810 <sbrk_aligned>
 80038c6:	3001      	adds	r0, #1
 80038c8:	d02b      	beq.n	8003922 <_malloc_r+0xd2>
 80038ca:	6823      	ldr	r3, [r4, #0]
 80038cc:	442b      	add	r3, r5
 80038ce:	6023      	str	r3, [r4, #0]
 80038d0:	e00e      	b.n	80038f0 <_malloc_r+0xa0>
 80038d2:	6822      	ldr	r2, [r4, #0]
 80038d4:	1b52      	subs	r2, r2, r5
 80038d6:	d41e      	bmi.n	8003916 <_malloc_r+0xc6>
 80038d8:	2a0b      	cmp	r2, #11
 80038da:	d916      	bls.n	800390a <_malloc_r+0xba>
 80038dc:	1961      	adds	r1, r4, r5
 80038de:	42a3      	cmp	r3, r4
 80038e0:	6025      	str	r5, [r4, #0]
 80038e2:	bf18      	it	ne
 80038e4:	6059      	strne	r1, [r3, #4]
 80038e6:	6863      	ldr	r3, [r4, #4]
 80038e8:	bf08      	it	eq
 80038ea:	6031      	streq	r1, [r6, #0]
 80038ec:	5162      	str	r2, [r4, r5]
 80038ee:	604b      	str	r3, [r1, #4]
 80038f0:	4638      	mov	r0, r7
 80038f2:	f104 060b 	add.w	r6, r4, #11
 80038f6:	f000 f8cf 	bl	8003a98 <__malloc_unlock>
 80038fa:	f026 0607 	bic.w	r6, r6, #7
 80038fe:	1d23      	adds	r3, r4, #4
 8003900:	1af2      	subs	r2, r6, r3
 8003902:	d0b6      	beq.n	8003872 <_malloc_r+0x22>
 8003904:	1b9b      	subs	r3, r3, r6
 8003906:	50a3      	str	r3, [r4, r2]
 8003908:	e7b3      	b.n	8003872 <_malloc_r+0x22>
 800390a:	6862      	ldr	r2, [r4, #4]
 800390c:	42a3      	cmp	r3, r4
 800390e:	bf0c      	ite	eq
 8003910:	6032      	streq	r2, [r6, #0]
 8003912:	605a      	strne	r2, [r3, #4]
 8003914:	e7ec      	b.n	80038f0 <_malloc_r+0xa0>
 8003916:	4623      	mov	r3, r4
 8003918:	6864      	ldr	r4, [r4, #4]
 800391a:	e7b2      	b.n	8003882 <_malloc_r+0x32>
 800391c:	4634      	mov	r4, r6
 800391e:	6876      	ldr	r6, [r6, #4]
 8003920:	e7b9      	b.n	8003896 <_malloc_r+0x46>
 8003922:	230c      	movs	r3, #12
 8003924:	603b      	str	r3, [r7, #0]
 8003926:	4638      	mov	r0, r7
 8003928:	f000 f8b6 	bl	8003a98 <__malloc_unlock>
 800392c:	e7a1      	b.n	8003872 <_malloc_r+0x22>
 800392e:	6025      	str	r5, [r4, #0]
 8003930:	e7de      	b.n	80038f0 <_malloc_r+0xa0>
 8003932:	bf00      	nop
 8003934:	20000840 	.word	0x20000840

08003938 <_sbrk_r>:
 8003938:	b538      	push	{r3, r4, r5, lr}
 800393a:	4d06      	ldr	r5, [pc, #24]	; (8003954 <_sbrk_r+0x1c>)
 800393c:	2300      	movs	r3, #0
 800393e:	4604      	mov	r4, r0
 8003940:	4608      	mov	r0, r1
 8003942:	602b      	str	r3, [r5, #0]
 8003944:	f7fc fe82 	bl	800064c <_sbrk>
 8003948:	1c43      	adds	r3, r0, #1
 800394a:	d102      	bne.n	8003952 <_sbrk_r+0x1a>
 800394c:	682b      	ldr	r3, [r5, #0]
 800394e:	b103      	cbz	r3, 8003952 <_sbrk_r+0x1a>
 8003950:	6023      	str	r3, [r4, #0]
 8003952:	bd38      	pop	{r3, r4, r5, pc}
 8003954:	20000848 	.word	0x20000848

08003958 <__sread>:
 8003958:	b510      	push	{r4, lr}
 800395a:	460c      	mov	r4, r1
 800395c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003960:	f000 f8a0 	bl	8003aa4 <_read_r>
 8003964:	2800      	cmp	r0, #0
 8003966:	bfab      	itete	ge
 8003968:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800396a:	89a3      	ldrhlt	r3, [r4, #12]
 800396c:	181b      	addge	r3, r3, r0
 800396e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003972:	bfac      	ite	ge
 8003974:	6563      	strge	r3, [r4, #84]	; 0x54
 8003976:	81a3      	strhlt	r3, [r4, #12]
 8003978:	bd10      	pop	{r4, pc}

0800397a <__swrite>:
 800397a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800397e:	461f      	mov	r7, r3
 8003980:	898b      	ldrh	r3, [r1, #12]
 8003982:	05db      	lsls	r3, r3, #23
 8003984:	4605      	mov	r5, r0
 8003986:	460c      	mov	r4, r1
 8003988:	4616      	mov	r6, r2
 800398a:	d505      	bpl.n	8003998 <__swrite+0x1e>
 800398c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003990:	2302      	movs	r3, #2
 8003992:	2200      	movs	r2, #0
 8003994:	f000 f868 	bl	8003a68 <_lseek_r>
 8003998:	89a3      	ldrh	r3, [r4, #12]
 800399a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800399e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039a2:	81a3      	strh	r3, [r4, #12]
 80039a4:	4632      	mov	r2, r6
 80039a6:	463b      	mov	r3, r7
 80039a8:	4628      	mov	r0, r5
 80039aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039ae:	f000 b817 	b.w	80039e0 <_write_r>

080039b2 <__sseek>:
 80039b2:	b510      	push	{r4, lr}
 80039b4:	460c      	mov	r4, r1
 80039b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039ba:	f000 f855 	bl	8003a68 <_lseek_r>
 80039be:	1c43      	adds	r3, r0, #1
 80039c0:	89a3      	ldrh	r3, [r4, #12]
 80039c2:	bf15      	itete	ne
 80039c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80039c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80039ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80039ce:	81a3      	strheq	r3, [r4, #12]
 80039d0:	bf18      	it	ne
 80039d2:	81a3      	strhne	r3, [r4, #12]
 80039d4:	bd10      	pop	{r4, pc}

080039d6 <__sclose>:
 80039d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039da:	f000 b813 	b.w	8003a04 <_close_r>
	...

080039e0 <_write_r>:
 80039e0:	b538      	push	{r3, r4, r5, lr}
 80039e2:	4d07      	ldr	r5, [pc, #28]	; (8003a00 <_write_r+0x20>)
 80039e4:	4604      	mov	r4, r0
 80039e6:	4608      	mov	r0, r1
 80039e8:	4611      	mov	r1, r2
 80039ea:	2200      	movs	r2, #0
 80039ec:	602a      	str	r2, [r5, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	f7fc fcfc 	bl	80003ec <_write>
 80039f4:	1c43      	adds	r3, r0, #1
 80039f6:	d102      	bne.n	80039fe <_write_r+0x1e>
 80039f8:	682b      	ldr	r3, [r5, #0]
 80039fa:	b103      	cbz	r3, 80039fe <_write_r+0x1e>
 80039fc:	6023      	str	r3, [r4, #0]
 80039fe:	bd38      	pop	{r3, r4, r5, pc}
 8003a00:	20000848 	.word	0x20000848

08003a04 <_close_r>:
 8003a04:	b538      	push	{r3, r4, r5, lr}
 8003a06:	4d06      	ldr	r5, [pc, #24]	; (8003a20 <_close_r+0x1c>)
 8003a08:	2300      	movs	r3, #0
 8003a0a:	4604      	mov	r4, r0
 8003a0c:	4608      	mov	r0, r1
 8003a0e:	602b      	str	r3, [r5, #0]
 8003a10:	f7fc fde7 	bl	80005e2 <_close>
 8003a14:	1c43      	adds	r3, r0, #1
 8003a16:	d102      	bne.n	8003a1e <_close_r+0x1a>
 8003a18:	682b      	ldr	r3, [r5, #0]
 8003a1a:	b103      	cbz	r3, 8003a1e <_close_r+0x1a>
 8003a1c:	6023      	str	r3, [r4, #0]
 8003a1e:	bd38      	pop	{r3, r4, r5, pc}
 8003a20:	20000848 	.word	0x20000848

08003a24 <_fstat_r>:
 8003a24:	b538      	push	{r3, r4, r5, lr}
 8003a26:	4d07      	ldr	r5, [pc, #28]	; (8003a44 <_fstat_r+0x20>)
 8003a28:	2300      	movs	r3, #0
 8003a2a:	4604      	mov	r4, r0
 8003a2c:	4608      	mov	r0, r1
 8003a2e:	4611      	mov	r1, r2
 8003a30:	602b      	str	r3, [r5, #0]
 8003a32:	f7fc fde2 	bl	80005fa <_fstat>
 8003a36:	1c43      	adds	r3, r0, #1
 8003a38:	d102      	bne.n	8003a40 <_fstat_r+0x1c>
 8003a3a:	682b      	ldr	r3, [r5, #0]
 8003a3c:	b103      	cbz	r3, 8003a40 <_fstat_r+0x1c>
 8003a3e:	6023      	str	r3, [r4, #0]
 8003a40:	bd38      	pop	{r3, r4, r5, pc}
 8003a42:	bf00      	nop
 8003a44:	20000848 	.word	0x20000848

08003a48 <_isatty_r>:
 8003a48:	b538      	push	{r3, r4, r5, lr}
 8003a4a:	4d06      	ldr	r5, [pc, #24]	; (8003a64 <_isatty_r+0x1c>)
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	4604      	mov	r4, r0
 8003a50:	4608      	mov	r0, r1
 8003a52:	602b      	str	r3, [r5, #0]
 8003a54:	f7fc fde1 	bl	800061a <_isatty>
 8003a58:	1c43      	adds	r3, r0, #1
 8003a5a:	d102      	bne.n	8003a62 <_isatty_r+0x1a>
 8003a5c:	682b      	ldr	r3, [r5, #0]
 8003a5e:	b103      	cbz	r3, 8003a62 <_isatty_r+0x1a>
 8003a60:	6023      	str	r3, [r4, #0]
 8003a62:	bd38      	pop	{r3, r4, r5, pc}
 8003a64:	20000848 	.word	0x20000848

08003a68 <_lseek_r>:
 8003a68:	b538      	push	{r3, r4, r5, lr}
 8003a6a:	4d07      	ldr	r5, [pc, #28]	; (8003a88 <_lseek_r+0x20>)
 8003a6c:	4604      	mov	r4, r0
 8003a6e:	4608      	mov	r0, r1
 8003a70:	4611      	mov	r1, r2
 8003a72:	2200      	movs	r2, #0
 8003a74:	602a      	str	r2, [r5, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	f7fc fdda 	bl	8000630 <_lseek>
 8003a7c:	1c43      	adds	r3, r0, #1
 8003a7e:	d102      	bne.n	8003a86 <_lseek_r+0x1e>
 8003a80:	682b      	ldr	r3, [r5, #0]
 8003a82:	b103      	cbz	r3, 8003a86 <_lseek_r+0x1e>
 8003a84:	6023      	str	r3, [r4, #0]
 8003a86:	bd38      	pop	{r3, r4, r5, pc}
 8003a88:	20000848 	.word	0x20000848

08003a8c <__malloc_lock>:
 8003a8c:	4801      	ldr	r0, [pc, #4]	; (8003a94 <__malloc_lock+0x8>)
 8003a8e:	f7ff be03 	b.w	8003698 <__retarget_lock_acquire_recursive>
 8003a92:	bf00      	nop
 8003a94:	2000083c 	.word	0x2000083c

08003a98 <__malloc_unlock>:
 8003a98:	4801      	ldr	r0, [pc, #4]	; (8003aa0 <__malloc_unlock+0x8>)
 8003a9a:	f7ff bdfe 	b.w	800369a <__retarget_lock_release_recursive>
 8003a9e:	bf00      	nop
 8003aa0:	2000083c 	.word	0x2000083c

08003aa4 <_read_r>:
 8003aa4:	b538      	push	{r3, r4, r5, lr}
 8003aa6:	4d07      	ldr	r5, [pc, #28]	; (8003ac4 <_read_r+0x20>)
 8003aa8:	4604      	mov	r4, r0
 8003aaa:	4608      	mov	r0, r1
 8003aac:	4611      	mov	r1, r2
 8003aae:	2200      	movs	r2, #0
 8003ab0:	602a      	str	r2, [r5, #0]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	f7fc fd78 	bl	80005a8 <_read>
 8003ab8:	1c43      	adds	r3, r0, #1
 8003aba:	d102      	bne.n	8003ac2 <_read_r+0x1e>
 8003abc:	682b      	ldr	r3, [r5, #0]
 8003abe:	b103      	cbz	r3, 8003ac2 <_read_r+0x1e>
 8003ac0:	6023      	str	r3, [r4, #0]
 8003ac2:	bd38      	pop	{r3, r4, r5, pc}
 8003ac4:	20000848 	.word	0x20000848

08003ac8 <_init>:
 8003ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aca:	bf00      	nop
 8003acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ace:	bc08      	pop	{r3}
 8003ad0:	469e      	mov	lr, r3
 8003ad2:	4770      	bx	lr

08003ad4 <_fini>:
 8003ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ad6:	bf00      	nop
 8003ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ada:	bc08      	pop	{r3}
 8003adc:	469e      	mov	lr, r3
 8003ade:	4770      	bx	lr
