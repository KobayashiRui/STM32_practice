
STM32F746_TimerTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c04  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002dcc  08002dcc  00012dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ddc  08002ddc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002ddc  08002ddc  00012ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002de4  08002de4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002de4  08002de4  00012de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002de8  08002de8  00012de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002dec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000000c  08002df8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08002df8  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009bb2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014f4  00000000  00000000  00029bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  0002b0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d8  00000000  00000000  0002ba68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024329  00000000  00000000  0002c340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a5aa  00000000  00000000  00050669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5cb7  00000000  00000000  0005ac13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001408ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027a0  00000000  00000000  00140920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08002db4 	.word	0x08002db4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08002db4 	.word	0x08002db4

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b96e 	b.w	80004fc <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468c      	mov	ip, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	f040 8083 	bne.w	800034e <__udivmoddi4+0x116>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d947      	bls.n	80002de <__udivmoddi4+0xa6>
 800024e:	fab2 f282 	clz	r2, r2
 8000252:	b142      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000254:	f1c2 0020 	rsb	r0, r2, #32
 8000258:	fa24 f000 	lsr.w	r0, r4, r0
 800025c:	4091      	lsls	r1, r2
 800025e:	4097      	lsls	r7, r2
 8000260:	ea40 0c01 	orr.w	ip, r0, r1
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbbc f6f8 	udiv	r6, ip, r8
 8000270:	fa1f fe87 	uxth.w	lr, r7
 8000274:	fb08 c116 	mls	r1, r8, r6, ip
 8000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027c:	fb06 f10e 	mul.w	r1, r6, lr
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 8119 	bcs.w	80004c0 <__udivmoddi4+0x288>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8116 	bls.w	80004c0 <__udivmoddi4+0x288>
 8000294:	3e02      	subs	r6, #2
 8000296:	443b      	add	r3, r7
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ac:	45a6      	cmp	lr, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	193c      	adds	r4, r7, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b6:	f080 8105 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	f240 8102 	bls.w	80004c4 <__udivmoddi4+0x28c>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c8:	eba4 040e 	sub.w	r4, r4, lr
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xaa>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d150      	bne.n	800038c <__udivmoddi4+0x154>
 80002ea:	1bcb      	subs	r3, r1, r7
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	fa1f f887 	uxth.w	r8, r7
 80002f4:	2601      	movs	r6, #1
 80002f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002fa:	0c21      	lsrs	r1, r4, #16
 80002fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000304:	fb08 f30c 	mul.w	r3, r8, ip
 8000308:	428b      	cmp	r3, r1
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0xe4>
 800030c:	1879      	adds	r1, r7, r1
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0xe2>
 8000314:	428b      	cmp	r3, r1
 8000316:	f200 80e9 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 800031a:	4684      	mov	ip, r0
 800031c:	1ac9      	subs	r1, r1, r3
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x10c>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x10a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80d9 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e7bf      	b.n	80002ce <__udivmoddi4+0x96>
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x12e>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80b1 	beq.w	80004ba <__udivmoddi4+0x282>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x1cc>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0x140>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80b8 	bhi.w	80004e8 <__udivmoddi4+0x2b0>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0103 	sbc.w	r1, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	468c      	mov	ip, r1
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0a8      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000386:	e9c5 4c00 	strd	r4, ip, [r5]
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0xa0>
 800038c:	f1c2 0320 	rsb	r3, r2, #32
 8000390:	fa20 f603 	lsr.w	r6, r0, r3
 8000394:	4097      	lsls	r7, r2
 8000396:	fa01 f002 	lsl.w	r0, r1, r2
 800039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039e:	40d9      	lsrs	r1, r3
 80003a0:	4330      	orrs	r0, r6
 80003a2:	0c03      	lsrs	r3, r0, #16
 80003a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f108 	mul.w	r1, r6, r8
 80003b8:	4299      	cmp	r1, r3
 80003ba:	fa04 f402 	lsl.w	r4, r4, r2
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x19c>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003c6:	f080 808d 	bcs.w	80004e4 <__udivmoddi4+0x2ac>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 808a 	bls.w	80004e4 <__udivmoddi4+0x2ac>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	443b      	add	r3, r7
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b281      	uxth	r1, r0
 80003d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb00 f308 	mul.w	r3, r0, r8
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x1c4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003f2:	d273      	bcs.n	80004dc <__udivmoddi4+0x2a4>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d971      	bls.n	80004dc <__udivmoddi4+0x2a4>
 80003f8:	3802      	subs	r0, #2
 80003fa:	4439      	add	r1, r7
 80003fc:	1acb      	subs	r3, r1, r3
 80003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000402:	e778      	b.n	80002f6 <__udivmoddi4+0xbe>
 8000404:	f1c6 0c20 	rsb	ip, r6, #32
 8000408:	fa03 f406 	lsl.w	r4, r3, r6
 800040c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000410:	431c      	orrs	r4, r3
 8000412:	fa20 f70c 	lsr.w	r7, r0, ip
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000422:	431f      	orrs	r7, r3
 8000424:	0c3b      	lsrs	r3, r7, #16
 8000426:	fbb1 f9fe 	udiv	r9, r1, lr
 800042a:	fa1f f884 	uxth.w	r8, r4
 800042e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000436:	fb09 fa08 	mul.w	sl, r9, r8
 800043a:	458a      	cmp	sl, r1
 800043c:	fa02 f206 	lsl.w	r2, r2, r6
 8000440:	fa00 f306 	lsl.w	r3, r0, r6
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x220>
 8000446:	1861      	adds	r1, r4, r1
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800044c:	d248      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 800044e:	458a      	cmp	sl, r1
 8000450:	d946      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	4421      	add	r1, r4
 8000458:	eba1 010a 	sub.w	r1, r1, sl
 800045c:	b2bf      	uxth	r7, r7
 800045e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000462:	fb0e 1110 	mls	r1, lr, r0, r1
 8000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45b8      	cmp	r8, r7
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x24a>
 8000472:	19e7      	adds	r7, r4, r7
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000478:	d22e      	bcs.n	80004d8 <__udivmoddi4+0x2a0>
 800047a:	45b8      	cmp	r8, r7
 800047c:	d92c      	bls.n	80004d8 <__udivmoddi4+0x2a0>
 800047e:	3802      	subs	r0, #2
 8000480:	4427      	add	r7, r4
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba7 0708 	sub.w	r7, r7, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454f      	cmp	r7, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	4649      	mov	r1, r9
 8000494:	d31a      	bcc.n	80004cc <__udivmoddi4+0x294>
 8000496:	d017      	beq.n	80004c8 <__udivmoddi4+0x290>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x27a>
 800049a:	ebb3 020e 	subs.w	r2, r3, lr
 800049e:	eb67 0701 	sbc.w	r7, r7, r1
 80004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a6:	40f2      	lsrs	r2, r6
 80004a8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ac:	40f7      	lsrs	r7, r6
 80004ae:	e9c5 2700 	strd	r2, r7, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e70b      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fd      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004c8:	4543      	cmp	r3, r8
 80004ca:	d2e5      	bcs.n	8000498 <__udivmoddi4+0x260>
 80004cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d0:	eb69 0104 	sbc.w	r1, r9, r4
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7df      	b.n	8000498 <__udivmoddi4+0x260>
 80004d8:	4608      	mov	r0, r1
 80004da:	e7d2      	b.n	8000482 <__udivmoddi4+0x24a>
 80004dc:	4660      	mov	r0, ip
 80004de:	e78d      	b.n	80003fc <__udivmoddi4+0x1c4>
 80004e0:	4681      	mov	r9, r0
 80004e2:	e7b9      	b.n	8000458 <__udivmoddi4+0x220>
 80004e4:	4666      	mov	r6, ip
 80004e6:	e775      	b.n	80003d4 <__udivmoddi4+0x19c>
 80004e8:	4630      	mov	r0, r6
 80004ea:	e74a      	b.n	8000382 <__udivmoddi4+0x14a>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	4439      	add	r1, r7
 80004f2:	e713      	b.n	800031c <__udivmoddi4+0xe4>
 80004f4:	3802      	subs	r0, #2
 80004f6:	443c      	add	r4, r7
 80004f8:	e724      	b.n	8000344 <__udivmoddi4+0x10c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <HAL_TIM_OC_DelayElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
unsigned int counter = 0;
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000508:	2100      	movs	r1, #0
 800050a:	4815      	ldr	r0, [pc, #84]	; (8000560 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 800050c:	f001 fbf4 	bl	8001cf8 <HAL_TIM_OC_Stop_IT>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000510:	2180      	movs	r1, #128	; 0x80
 8000512:	4814      	ldr	r0, [pc, #80]	; (8000564 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 8000514:	f000 fd97 	bl	8001046 <HAL_GPIO_TogglePin>
	if((htim->Instance == TIM1) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)){
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a12      	ldr	r2, [pc, #72]	; (8000568 <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d10b      	bne.n	800053a <HAL_TIM_OC_DelayElapsedCallback+0x3a>
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	7f1b      	ldrb	r3, [r3, #28]
 8000526:	2b01      	cmp	r3, #1
 8000528:	d107      	bne.n	800053a <HAL_TIM_OC_DelayElapsedCallback+0x3a>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800052a:	2101      	movs	r1, #1
 800052c:	480d      	ldr	r0, [pc, #52]	; (8000564 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 800052e:	f000 fd8a 	bl	8001046 <HAL_GPIO_TogglePin>
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000532:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	2200      	movs	r2, #0
 8000538:	625a      	str	r2, [r3, #36]	; 0x24
	}
	counter++;
 800053a:	4b0c      	ldr	r3, [pc, #48]	; (800056c <HAL_TIM_OC_DelayElapsedCallback+0x6c>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	3301      	adds	r3, #1
 8000540:	4a0a      	ldr	r2, [pc, #40]	; (800056c <HAL_TIM_OC_DelayElapsedCallback+0x6c>)
 8000542:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (counter)+2-1 );
 8000544:	4b09      	ldr	r3, [pc, #36]	; (800056c <HAL_TIM_OC_DelayElapsedCallback+0x6c>)
 8000546:	681a      	ldr	r2, [r3, #0]
 8000548:	4b05      	ldr	r3, [pc, #20]	; (8000560 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	3201      	adds	r2, #1
 800054e:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000550:	2100      	movs	r1, #0
 8000552:	4803      	ldr	r0, [pc, #12]	; (8000560 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 8000554:	f001 fa90 	bl	8001a78 <HAL_TIM_OC_Start_IT>
}
 8000558:	bf00      	nop
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	2000002c 	.word	0x2000002c
 8000564:	40020400 	.word	0x40020400
 8000568:	40010000 	.word	0x40010000
 800056c:	20000028 	.word	0x20000028

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fa0f 	bl	8000996 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f816 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f91a 	bl	80007b4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000580:	f000 f86e 	bl	8000660 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000584:	2100      	movs	r1, #0
 8000586:	4806      	ldr	r0, [pc, #24]	; (80005a0 <main+0x30>)
 8000588:	f001 fa76 	bl	8001a78 <HAL_TIM_OC_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800058c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000590:	4804      	ldr	r0, [pc, #16]	; (80005a4 <main+0x34>)
 8000592:	f000 fd58 	bl	8001046 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000596:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800059a:	f000 fa59 	bl	8000a50 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800059e:	e7f5      	b.n	800058c <main+0x1c>
 80005a0:	2000002c 	.word	0x2000002c
 80005a4:	40020400 	.word	0x40020400

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b094      	sub	sp, #80	; 0x50
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0320 	add.w	r3, r7, #32
 80005b2:	2230      	movs	r2, #48	; 0x30
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f002 fbf4 	bl	8002da4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005cc:	4b22      	ldr	r3, [pc, #136]	; (8000658 <SystemClock_Config+0xb0>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	4a21      	ldr	r2, [pc, #132]	; (8000658 <SystemClock_Config+0xb0>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d6:	6413      	str	r3, [r2, #64]	; 0x40
 80005d8:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <SystemClock_Config+0xb0>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005e4:	4b1d      	ldr	r3, [pc, #116]	; (800065c <SystemClock_Config+0xb4>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005ec:	4a1b      	ldr	r2, [pc, #108]	; (800065c <SystemClock_Config+0xb4>)
 80005ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b19      	ldr	r3, [pc, #100]	; (800065c <SystemClock_Config+0xb4>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000600:	2302      	movs	r3, #2
 8000602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000604:	2301      	movs	r3, #1
 8000606:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000608:	2310      	movs	r3, #16
 800060a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800060c:	2300      	movs	r3, #0
 800060e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000610:	f107 0320 	add.w	r3, r7, #32
 8000614:	4618      	mov	r0, r3
 8000616:	f000 fd31 	bl	800107c <HAL_RCC_OscConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000620:	f000 f8fa 	bl	8000818 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000624:	230f      	movs	r3, #15
 8000626:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000628:	2300      	movs	r3, #0
 800062a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000634:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000638:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800063a:	f107 030c 	add.w	r3, r7, #12
 800063e:	2100      	movs	r1, #0
 8000640:	4618      	mov	r0, r3
 8000642:	f000 ffbf 	bl	80015c4 <HAL_RCC_ClockConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800064c:	f000 f8e4 	bl	8000818 <Error_Handler>
  }
}
 8000650:	bf00      	nop
 8000652:	3750      	adds	r7, #80	; 0x50
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40023800 	.word	0x40023800
 800065c:	40007000 	.word	0x40007000

08000660 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b09a      	sub	sp, #104	; 0x68
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000666:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000674:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000680:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]
 8000690:	615a      	str	r2, [r3, #20]
 8000692:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	222c      	movs	r2, #44	; 0x2c
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f002 fb82 	bl	8002da4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006a0:	4b42      	ldr	r3, [pc, #264]	; (80007ac <MX_TIM1_Init+0x14c>)
 80006a2:	4a43      	ldr	r2, [pc, #268]	; (80007b0 <MX_TIM1_Init+0x150>)
 80006a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20000-1;
 80006a6:	4b41      	ldr	r3, [pc, #260]	; (80007ac <MX_TIM1_Init+0x14c>)
 80006a8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80006ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ae:	4b3f      	ldr	r3, [pc, #252]	; (80007ac <MX_TIM1_Init+0x14c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80006b4:	4b3d      	ldr	r3, [pc, #244]	; (80007ac <MX_TIM1_Init+0x14c>)
 80006b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006bc:	4b3b      	ldr	r3, [pc, #236]	; (80007ac <MX_TIM1_Init+0x14c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006c2:	4b3a      	ldr	r3, [pc, #232]	; (80007ac <MX_TIM1_Init+0x14c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c8:	4b38      	ldr	r3, [pc, #224]	; (80007ac <MX_TIM1_Init+0x14c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006ce:	4837      	ldr	r0, [pc, #220]	; (80007ac <MX_TIM1_Init+0x14c>)
 80006d0:	f001 f91a 	bl	8001908 <HAL_TIM_Base_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80006da:	f000 f89d 	bl	8000818 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e2:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006e4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006e8:	4619      	mov	r1, r3
 80006ea:	4830      	ldr	r0, [pc, #192]	; (80007ac <MX_TIM1_Init+0x14c>)
 80006ec:	f001 fd60 	bl	80021b0 <HAL_TIM_ConfigClockSource>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80006f6:	f000 f88f 	bl	8000818 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80006fa:	482c      	ldr	r0, [pc, #176]	; (80007ac <MX_TIM1_Init+0x14c>)
 80006fc:	f001 f95b 	bl	80019b6 <HAL_TIM_OC_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8000706:	f000 f887 	bl	8000818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800070a:	2300      	movs	r3, #0
 800070c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800070e:	2300      	movs	r3, #0
 8000710:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000712:	2300      	movs	r3, #0
 8000714:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000716:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800071a:	4619      	mov	r1, r3
 800071c:	4823      	ldr	r0, [pc, #140]	; (80007ac <MX_TIM1_Init+0x14c>)
 800071e:	f002 f9f3 	bl	8002b08 <HAL_TIMEx_MasterConfigSynchronization>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8000728:	f000 f876 	bl	8000818 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800072c:	2300      	movs	r3, #0
 800072e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 2-1;
 8000730:	2301      	movs	r3, #1
 8000732:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000734:	2300      	movs	r3, #0
 8000736:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000738:	2300      	movs	r3, #0
 800073a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800073c:	2300      	movs	r3, #0
 800073e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000740:	2300      	movs	r3, #0
 8000742:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000744:	2300      	movs	r3, #0
 8000746:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000748:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800074c:	2200      	movs	r2, #0
 800074e:	4619      	mov	r1, r3
 8000750:	4816      	ldr	r0, [pc, #88]	; (80007ac <MX_TIM1_Init+0x14c>)
 8000752:	f001 fcb7 	bl	80020c4 <HAL_TIM_OC_ConfigChannel>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800075c:	f000 f85c 	bl	8000818 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000760:	2300      	movs	r3, #0
 8000762:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000764:	2300      	movs	r3, #0
 8000766:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000774:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000778:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800077e:	2300      	movs	r3, #0
 8000780:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000782:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000786:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800078c:	2300      	movs	r3, #0
 800078e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	4619      	mov	r1, r3
 8000794:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_TIM1_Init+0x14c>)
 8000796:	f002 fa45 	bl	8002c24 <HAL_TIMEx_ConfigBreakDeadTime>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80007a0:	f000 f83a 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	3768      	adds	r7, #104	; 0x68
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	2000002c 	.word	0x2000002c
 80007b0:	40010000 	.word	0x40010000

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_GPIO_Init+0x5c>)
 80007ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007cc:	4a10      	ldr	r2, [pc, #64]	; (8000810 <MX_GPIO_Init+0x5c>)
 80007ce:	f043 0302 	orr.w	r3, r3, #2
 80007d2:	6313      	str	r3, [r2, #48]	; 0x30
 80007d4:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_GPIO_Init+0x5c>)
 80007d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d8:	f003 0302 	and.w	r3, r3, #2
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	f244 0181 	movw	r1, #16513	; 0x4081
 80007e6:	480b      	ldr	r0, [pc, #44]	; (8000814 <MX_GPIO_Init+0x60>)
 80007e8:	f000 fc14 	bl	8001014 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 80007ec:	f244 0381 	movw	r3, #16513	; 0x4081
 80007f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	4619      	mov	r1, r3
 8000802:	4804      	ldr	r0, [pc, #16]	; (8000814 <MX_GPIO_Init+0x60>)
 8000804:	f000 fa5a 	bl	8000cbc <HAL_GPIO_Init>

}
 8000808:	bf00      	nop
 800080a:	3718      	adds	r7, #24
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40023800 	.word	0x40023800
 8000814:	40020400 	.word	0x40020400

08000818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800081c:	b672      	cpsid	i
}
 800081e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000820:	e7fe      	b.n	8000820 <Error_Handler+0x8>
	...

08000824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <HAL_MspInit+0x44>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	4a0e      	ldr	r2, [pc, #56]	; (8000868 <HAL_MspInit+0x44>)
 8000830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000834:	6413      	str	r3, [r2, #64]	; 0x40
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <HAL_MspInit+0x44>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <HAL_MspInit+0x44>)
 8000844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000846:	4a08      	ldr	r2, [pc, #32]	; (8000868 <HAL_MspInit+0x44>)
 8000848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800084c:	6453      	str	r3, [r2, #68]	; 0x44
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <HAL_MspInit+0x44>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	40023800 	.word	0x40023800

0800086c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a0d      	ldr	r2, [pc, #52]	; (80008b0 <HAL_TIM_Base_MspInit+0x44>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d113      	bne.n	80008a6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800087e:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <HAL_TIM_Base_MspInit+0x48>)
 8000880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000882:	4a0c      	ldr	r2, [pc, #48]	; (80008b4 <HAL_TIM_Base_MspInit+0x48>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6453      	str	r3, [r2, #68]	; 0x44
 800088a:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <HAL_TIM_Base_MspInit+0x48>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	2100      	movs	r1, #0
 800089a:	201b      	movs	r0, #27
 800089c:	f000 f9d7 	bl	8000c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80008a0:	201b      	movs	r0, #27
 80008a2:	f000 f9f0 	bl	8000c86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80008a6:	bf00      	nop
 80008a8:	3710      	adds	r7, #16
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40010000 	.word	0x40010000
 80008b4:	40023800 	.word	0x40023800

080008b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <NMI_Handler+0x4>

080008be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c2:	e7fe      	b.n	80008c2 <HardFault_Handler+0x4>

080008c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <MemManage_Handler+0x4>

080008ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <BusFault_Handler+0x4>

080008d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <UsageFault_Handler+0x4>

080008d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000904:	f000 f884 	bl	8000a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}

0800090c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000910:	4802      	ldr	r0, [pc, #8]	; (800091c <TIM1_CC_IRQHandler+0x10>)
 8000912:	f001 fab7 	bl	8001e84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	2000002c 	.word	0x2000002c

08000920 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <SystemInit+0x20>)
 8000926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800092a:	4a05      	ldr	r2, [pc, #20]	; (8000940 <SystemInit+0x20>)
 800092c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000944:	f8df d034 	ldr.w	sp, [pc, #52]	; 800097c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000948:	480d      	ldr	r0, [pc, #52]	; (8000980 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800094a:	490e      	ldr	r1, [pc, #56]	; (8000984 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800094c:	4a0e      	ldr	r2, [pc, #56]	; (8000988 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000950:	e002      	b.n	8000958 <LoopCopyDataInit>

08000952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000956:	3304      	adds	r3, #4

08000958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800095c:	d3f9      	bcc.n	8000952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800095e:	4a0b      	ldr	r2, [pc, #44]	; (800098c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000960:	4c0b      	ldr	r4, [pc, #44]	; (8000990 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000964:	e001      	b.n	800096a <LoopFillZerobss>

08000966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000968:	3204      	adds	r2, #4

0800096a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800096c:	d3fb      	bcc.n	8000966 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800096e:	f7ff ffd7 	bl	8000920 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000972:	f002 f9f3 	bl	8002d5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000976:	f7ff fdfb 	bl	8000570 <main>
  bx  lr    
 800097a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800097c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000984:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000988:	08002dec 	.word	0x08002dec
  ldr r2, =_sbss
 800098c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000990:	2000007c 	.word	0x2000007c

08000994 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000994:	e7fe      	b.n	8000994 <ADC_IRQHandler>

08000996 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800099a:	2003      	movs	r0, #3
 800099c:	f000 f94c 	bl	8000c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009a0:	2000      	movs	r0, #0
 80009a2:	f000 f805 	bl	80009b0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80009a6:	f7ff ff3d 	bl	8000824 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80009aa:	2300      	movs	r3, #0
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <HAL_InitTick+0x54>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <HAL_InitTick+0x58>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	4619      	mov	r1, r3
 80009c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ce:	4618      	mov	r0, r3
 80009d0:	f000 f967 	bl	8000ca2 <HAL_SYSTICK_Config>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009da:	2301      	movs	r3, #1
 80009dc:	e00e      	b.n	80009fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2b0f      	cmp	r3, #15
 80009e2:	d80a      	bhi.n	80009fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e4:	2200      	movs	r2, #0
 80009e6:	6879      	ldr	r1, [r7, #4]
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009ec:	f000 f92f 	bl	8000c4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f0:	4a06      	ldr	r2, [pc, #24]	; (8000a0c <HAL_InitTick+0x5c>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009f6:	2300      	movs	r3, #0
 80009f8:	e000      	b.n	80009fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000000 	.word	0x20000000
 8000a08:	20000008 	.word	0x20000008
 8000a0c:	20000004 	.word	0x20000004

08000a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_IncTick+0x20>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_IncTick+0x24>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4413      	add	r3, r2
 8000a20:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <HAL_IncTick+0x24>)
 8000a22:	6013      	str	r3, [r2, #0]
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	20000008 	.word	0x20000008
 8000a34:	20000078 	.word	0x20000078

08000a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a3c:	4b03      	ldr	r3, [pc, #12]	; (8000a4c <HAL_GetTick+0x14>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	20000078 	.word	0x20000078

08000a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a58:	f7ff ffee 	bl	8000a38 <HAL_GetTick>
 8000a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a68:	d005      	beq.n	8000a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <HAL_Delay+0x44>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4413      	add	r3, r2
 8000a74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a76:	bf00      	nop
 8000a78:	f7ff ffde 	bl	8000a38 <HAL_GetTick>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	68fa      	ldr	r2, [r7, #12]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d8f7      	bhi.n	8000a78 <HAL_Delay+0x28>
  {
  }
}
 8000a88:	bf00      	nop
 8000a8a:	bf00      	nop
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000008 	.word	0x20000008

08000a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f003 0307 	and.w	r3, r3, #7
 8000aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <__NVIC_SetPriorityGrouping+0x40>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <__NVIC_SetPriorityGrouping+0x44>)
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ac6:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <__NVIC_SetPriorityGrouping+0x40>)
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	60d3      	str	r3, [r2, #12]
}
 8000acc:	bf00      	nop
 8000ace:	3714      	adds	r7, #20
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	e000ed00 	.word	0xe000ed00
 8000adc:	05fa0000 	.word	0x05fa0000

08000ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	0a1b      	lsrs	r3, r3, #8
 8000aea:	f003 0307 	and.w	r3, r3, #7
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	db0b      	blt.n	8000b26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	f003 021f 	and.w	r2, r3, #31
 8000b14:	4907      	ldr	r1, [pc, #28]	; (8000b34 <__NVIC_EnableIRQ+0x38>)
 8000b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1a:	095b      	lsrs	r3, r3, #5
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000e100 	.word	0xe000e100

08000b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	6039      	str	r1, [r7, #0]
 8000b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	db0a      	blt.n	8000b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	490c      	ldr	r1, [pc, #48]	; (8000b84 <__NVIC_SetPriority+0x4c>)
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	0112      	lsls	r2, r2, #4
 8000b58:	b2d2      	uxtb	r2, r2
 8000b5a:	440b      	add	r3, r1
 8000b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b60:	e00a      	b.n	8000b78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4908      	ldr	r1, [pc, #32]	; (8000b88 <__NVIC_SetPriority+0x50>)
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	f003 030f 	and.w	r3, r3, #15
 8000b6e:	3b04      	subs	r3, #4
 8000b70:	0112      	lsls	r2, r2, #4
 8000b72:	b2d2      	uxtb	r2, r2
 8000b74:	440b      	add	r3, r1
 8000b76:	761a      	strb	r2, [r3, #24]
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000e100 	.word	0xe000e100
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b089      	sub	sp, #36	; 0x24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	f1c3 0307 	rsb	r3, r3, #7
 8000ba6:	2b04      	cmp	r3, #4
 8000ba8:	bf28      	it	cs
 8000baa:	2304      	movcs	r3, #4
 8000bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	3304      	adds	r3, #4
 8000bb2:	2b06      	cmp	r3, #6
 8000bb4:	d902      	bls.n	8000bbc <NVIC_EncodePriority+0x30>
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	3b03      	subs	r3, #3
 8000bba:	e000      	b.n	8000bbe <NVIC_EncodePriority+0x32>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43da      	mvns	r2, r3
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	401a      	ands	r2, r3
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	fa01 f303 	lsl.w	r3, r1, r3
 8000bde:	43d9      	mvns	r1, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be4:	4313      	orrs	r3, r2
         );
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3724      	adds	r7, #36	; 0x24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
	...

08000bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c04:	d301      	bcc.n	8000c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c06:	2301      	movs	r3, #1
 8000c08:	e00f      	b.n	8000c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <SysTick_Config+0x40>)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c12:	210f      	movs	r1, #15
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c18:	f7ff ff8e 	bl	8000b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <SysTick_Config+0x40>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c22:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <SysTick_Config+0x40>)
 8000c24:	2207      	movs	r2, #7
 8000c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	e000e010 	.word	0xe000e010

08000c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff ff29 	bl	8000a98 <__NVIC_SetPriorityGrouping>
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b086      	sub	sp, #24
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	4603      	mov	r3, r0
 8000c56:	60b9      	str	r1, [r7, #8]
 8000c58:	607a      	str	r2, [r7, #4]
 8000c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c60:	f7ff ff3e 	bl	8000ae0 <__NVIC_GetPriorityGrouping>
 8000c64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	68b9      	ldr	r1, [r7, #8]
 8000c6a:	6978      	ldr	r0, [r7, #20]
 8000c6c:	f7ff ff8e 	bl	8000b8c <NVIC_EncodePriority>
 8000c70:	4602      	mov	r2, r0
 8000c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c76:	4611      	mov	r1, r2
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff5d 	bl	8000b38 <__NVIC_SetPriority>
}
 8000c7e:	bf00      	nop
 8000c80:	3718      	adds	r7, #24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ff31 	bl	8000afc <__NVIC_EnableIRQ>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f7ff ffa2 	bl	8000bf4 <SysTick_Config>
 8000cb0:	4603      	mov	r3, r0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b089      	sub	sp, #36	; 0x24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
 8000cda:	e175      	b.n	8000fc8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000cdc:	2201      	movs	r2, #1
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	697a      	ldr	r2, [r7, #20]
 8000cec:	4013      	ands	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	f040 8164 	bne.w	8000fc2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d00b      	beq.n	8000d1a <HAL_GPIO_Init+0x5e>
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d007      	beq.n	8000d1a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d0e:	2b11      	cmp	r3, #17
 8000d10:	d003      	beq.n	8000d1a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	2b12      	cmp	r3, #18
 8000d18:	d130      	bne.n	8000d7c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	2203      	movs	r2, #3
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	68da      	ldr	r2, [r3, #12]
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d50:	2201      	movs	r2, #1
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	091b      	lsrs	r3, r3, #4
 8000d66:	f003 0201 	and.w	r2, r3, #1
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	2203      	movs	r2, #3
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4013      	ands	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	689a      	ldr	r2, [r3, #8]
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d003      	beq.n	8000dbc <HAL_GPIO_Init+0x100>
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	2b12      	cmp	r3, #18
 8000dba:	d123      	bne.n	8000e04 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	08da      	lsrs	r2, r3, #3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3208      	adds	r2, #8
 8000dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	f003 0307 	and.w	r3, r3, #7
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	220f      	movs	r2, #15
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	691a      	ldr	r2, [r3, #16]
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	08da      	lsrs	r2, r3, #3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	3208      	adds	r2, #8
 8000dfe:	69b9      	ldr	r1, [r7, #24]
 8000e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	2203      	movs	r2, #3
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f003 0203 	and.w	r2, r3, #3
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	f000 80be 	beq.w	8000fc2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e46:	4b66      	ldr	r3, [pc, #408]	; (8000fe0 <HAL_GPIO_Init+0x324>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4a:	4a65      	ldr	r2, [pc, #404]	; (8000fe0 <HAL_GPIO_Init+0x324>)
 8000e4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e50:	6453      	str	r3, [r2, #68]	; 0x44
 8000e52:	4b63      	ldr	r3, [pc, #396]	; (8000fe0 <HAL_GPIO_Init+0x324>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000e5e:	4a61      	ldr	r2, [pc, #388]	; (8000fe4 <HAL_GPIO_Init+0x328>)
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	089b      	lsrs	r3, r3, #2
 8000e64:	3302      	adds	r3, #2
 8000e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	f003 0303 	and.w	r3, r3, #3
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	220f      	movs	r2, #15
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a58      	ldr	r2, [pc, #352]	; (8000fe8 <HAL_GPIO_Init+0x32c>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d037      	beq.n	8000efa <HAL_GPIO_Init+0x23e>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a57      	ldr	r2, [pc, #348]	; (8000fec <HAL_GPIO_Init+0x330>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d031      	beq.n	8000ef6 <HAL_GPIO_Init+0x23a>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a56      	ldr	r2, [pc, #344]	; (8000ff0 <HAL_GPIO_Init+0x334>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d02b      	beq.n	8000ef2 <HAL_GPIO_Init+0x236>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a55      	ldr	r2, [pc, #340]	; (8000ff4 <HAL_GPIO_Init+0x338>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d025      	beq.n	8000eee <HAL_GPIO_Init+0x232>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a54      	ldr	r2, [pc, #336]	; (8000ff8 <HAL_GPIO_Init+0x33c>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d01f      	beq.n	8000eea <HAL_GPIO_Init+0x22e>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a53      	ldr	r2, [pc, #332]	; (8000ffc <HAL_GPIO_Init+0x340>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d019      	beq.n	8000ee6 <HAL_GPIO_Init+0x22a>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a52      	ldr	r2, [pc, #328]	; (8001000 <HAL_GPIO_Init+0x344>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d013      	beq.n	8000ee2 <HAL_GPIO_Init+0x226>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a51      	ldr	r2, [pc, #324]	; (8001004 <HAL_GPIO_Init+0x348>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d00d      	beq.n	8000ede <HAL_GPIO_Init+0x222>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a50      	ldr	r2, [pc, #320]	; (8001008 <HAL_GPIO_Init+0x34c>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d007      	beq.n	8000eda <HAL_GPIO_Init+0x21e>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a4f      	ldr	r2, [pc, #316]	; (800100c <HAL_GPIO_Init+0x350>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d101      	bne.n	8000ed6 <HAL_GPIO_Init+0x21a>
 8000ed2:	2309      	movs	r3, #9
 8000ed4:	e012      	b.n	8000efc <HAL_GPIO_Init+0x240>
 8000ed6:	230a      	movs	r3, #10
 8000ed8:	e010      	b.n	8000efc <HAL_GPIO_Init+0x240>
 8000eda:	2308      	movs	r3, #8
 8000edc:	e00e      	b.n	8000efc <HAL_GPIO_Init+0x240>
 8000ede:	2307      	movs	r3, #7
 8000ee0:	e00c      	b.n	8000efc <HAL_GPIO_Init+0x240>
 8000ee2:	2306      	movs	r3, #6
 8000ee4:	e00a      	b.n	8000efc <HAL_GPIO_Init+0x240>
 8000ee6:	2305      	movs	r3, #5
 8000ee8:	e008      	b.n	8000efc <HAL_GPIO_Init+0x240>
 8000eea:	2304      	movs	r3, #4
 8000eec:	e006      	b.n	8000efc <HAL_GPIO_Init+0x240>
 8000eee:	2303      	movs	r3, #3
 8000ef0:	e004      	b.n	8000efc <HAL_GPIO_Init+0x240>
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	e002      	b.n	8000efc <HAL_GPIO_Init+0x240>
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e000      	b.n	8000efc <HAL_GPIO_Init+0x240>
 8000efa:	2300      	movs	r3, #0
 8000efc:	69fa      	ldr	r2, [r7, #28]
 8000efe:	f002 0203 	and.w	r2, r2, #3
 8000f02:	0092      	lsls	r2, r2, #2
 8000f04:	4093      	lsls	r3, r2
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f0c:	4935      	ldr	r1, [pc, #212]	; (8000fe4 <HAL_GPIO_Init+0x328>)
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	089b      	lsrs	r3, r3, #2
 8000f12:	3302      	adds	r3, #2
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f1a:	4b3d      	ldr	r3, [pc, #244]	; (8001010 <HAL_GPIO_Init+0x354>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	43db      	mvns	r3, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4013      	ands	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d003      	beq.n	8000f3e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f3e:	4a34      	ldr	r2, [pc, #208]	; (8001010 <HAL_GPIO_Init+0x354>)
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f44:	4b32      	ldr	r3, [pc, #200]	; (8001010 <HAL_GPIO_Init+0x354>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d003      	beq.n	8000f68 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f68:	4a29      	ldr	r2, [pc, #164]	; (8001010 <HAL_GPIO_Init+0x354>)
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f6e:	4b28      	ldr	r3, [pc, #160]	; (8001010 <HAL_GPIO_Init+0x354>)
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	43db      	mvns	r3, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d003      	beq.n	8000f92 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f92:	4a1f      	ldr	r2, [pc, #124]	; (8001010 <HAL_GPIO_Init+0x354>)
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f98:	4b1d      	ldr	r3, [pc, #116]	; (8001010 <HAL_GPIO_Init+0x354>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d003      	beq.n	8000fbc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fbc:	4a14      	ldr	r2, [pc, #80]	; (8001010 <HAL_GPIO_Init+0x354>)
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	61fb      	str	r3, [r7, #28]
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	2b0f      	cmp	r3, #15
 8000fcc:	f67f ae86 	bls.w	8000cdc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000fd0:	bf00      	nop
 8000fd2:	bf00      	nop
 8000fd4:	3724      	adds	r7, #36	; 0x24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40013800 	.word	0x40013800
 8000fe8:	40020000 	.word	0x40020000
 8000fec:	40020400 	.word	0x40020400
 8000ff0:	40020800 	.word	0x40020800
 8000ff4:	40020c00 	.word	0x40020c00
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40021400 	.word	0x40021400
 8001000:	40021800 	.word	0x40021800
 8001004:	40021c00 	.word	0x40021c00
 8001008:	40022000 	.word	0x40022000
 800100c:	40022400 	.word	0x40022400
 8001010:	40013c00 	.word	0x40013c00

08001014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	460b      	mov	r3, r1
 800101e:	807b      	strh	r3, [r7, #2]
 8001020:	4613      	mov	r3, r2
 8001022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001024:	787b      	ldrb	r3, [r7, #1]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800102a:	887a      	ldrh	r2, [r7, #2]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001030:	e003      	b.n	800103a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001032:	887b      	ldrh	r3, [r7, #2]
 8001034:	041a      	lsls	r2, r3, #16
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	619a      	str	r2, [r3, #24]
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001046:	b480      	push	{r7}
 8001048:	b085      	sub	sp, #20
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
 800104e:	460b      	mov	r3, r1
 8001050:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001058:	887a      	ldrh	r2, [r7, #2]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	4013      	ands	r3, r2
 800105e:	041a      	lsls	r2, r3, #16
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	43d9      	mvns	r1, r3
 8001064:	887b      	ldrh	r3, [r7, #2]
 8001066:	400b      	ands	r3, r1
 8001068:	431a      	orrs	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	619a      	str	r2, [r3, #24]
}
 800106e:	bf00      	nop
 8001070:	3714      	adds	r7, #20
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
	...

0800107c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001084:	2300      	movs	r3, #0
 8001086:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d101      	bne.n	8001092 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e291      	b.n	80015b6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	2b00      	cmp	r3, #0
 800109c:	f000 8087 	beq.w	80011ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010a0:	4b96      	ldr	r3, [pc, #600]	; (80012fc <HAL_RCC_OscConfig+0x280>)
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f003 030c 	and.w	r3, r3, #12
 80010a8:	2b04      	cmp	r3, #4
 80010aa:	d00c      	beq.n	80010c6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ac:	4b93      	ldr	r3, [pc, #588]	; (80012fc <HAL_RCC_OscConfig+0x280>)
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	f003 030c 	and.w	r3, r3, #12
 80010b4:	2b08      	cmp	r3, #8
 80010b6:	d112      	bne.n	80010de <HAL_RCC_OscConfig+0x62>
 80010b8:	4b90      	ldr	r3, [pc, #576]	; (80012fc <HAL_RCC_OscConfig+0x280>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010c4:	d10b      	bne.n	80010de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c6:	4b8d      	ldr	r3, [pc, #564]	; (80012fc <HAL_RCC_OscConfig+0x280>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d06c      	beq.n	80011ac <HAL_RCC_OscConfig+0x130>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d168      	bne.n	80011ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e26b      	b.n	80015b6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010e6:	d106      	bne.n	80010f6 <HAL_RCC_OscConfig+0x7a>
 80010e8:	4b84      	ldr	r3, [pc, #528]	; (80012fc <HAL_RCC_OscConfig+0x280>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a83      	ldr	r2, [pc, #524]	; (80012fc <HAL_RCC_OscConfig+0x280>)
 80010ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	e02e      	b.n	8001154 <HAL_RCC_OscConfig+0xd8>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d10c      	bne.n	8001118 <HAL_RCC_OscConfig+0x9c>
 80010fe:	4b7f      	ldr	r3, [pc, #508]	; (80012fc <HAL_RCC_OscConfig+0x280>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a7e      	ldr	r2, [pc, #504]	; (80012fc <HAL_RCC_OscConfig+0x280>)
 8001104:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	4b7c      	ldr	r3, [pc, #496]	; (80012fc <HAL_RCC_OscConfig+0x280>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a7b      	ldr	r2, [pc, #492]	; (80012fc <HAL_RCC_OscConfig+0x280>)
 8001110:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001114:	6013      	str	r3, [r2, #0]
 8001116:	e01d      	b.n	8001154 <HAL_RCC_OscConfig+0xd8>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001120:	d10c      	bne.n	800113c <HAL_RCC_OscConfig+0xc0>
 8001122:	4b76      	ldr	r3, [pc, #472]	; (80012fc <HAL_RCC_OscConfig+0x280>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a75      	ldr	r2, [pc, #468]	; (80012fc <HAL_RCC_OscConfig+0x280>)
 8001128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	4b73      	ldr	r3, [pc, #460]	; (80012fc <HAL_RCC_OscConfig+0x280>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a72      	ldr	r2, [pc, #456]	; (80012fc <HAL_RCC_OscConfig+0x280>)
 8001134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	e00b      	b.n	8001154 <HAL_RCC_OscConfig+0xd8>
 800113c:	4b6f      	ldr	r3, [pc, #444]	; (80012fc <HAL_RCC_OscConfig+0x280>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a6e      	ldr	r2, [pc, #440]	; (80012fc <HAL_RCC_OscConfig+0x280>)
 8001142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001146:	6013      	str	r3, [r2, #0]
 8001148:	4b6c      	ldr	r3, [pc, #432]	; (80012fc <HAL_RCC_OscConfig+0x280>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a6b      	ldr	r2, [pc, #428]	; (80012fc <HAL_RCC_OscConfig+0x280>)
 800114e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001152:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d013      	beq.n	8001184 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800115c:	f7ff fc6c 	bl	8000a38 <HAL_GetTick>
 8001160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001162:	e008      	b.n	8001176 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001164:	f7ff fc68 	bl	8000a38 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b64      	cmp	r3, #100	; 0x64
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e21f      	b.n	80015b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001176:	4b61      	ldr	r3, [pc, #388]	; (80012fc <HAL_RCC_OscConfig+0x280>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d0f0      	beq.n	8001164 <HAL_RCC_OscConfig+0xe8>
 8001182:	e014      	b.n	80011ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001184:	f7ff fc58 	bl	8000a38 <HAL_GetTick>
 8001188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800118a:	e008      	b.n	800119e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800118c:	f7ff fc54 	bl	8000a38 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b64      	cmp	r3, #100	; 0x64
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e20b      	b.n	80015b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800119e:	4b57      	ldr	r3, [pc, #348]	; (80012fc <HAL_RCC_OscConfig+0x280>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1f0      	bne.n	800118c <HAL_RCC_OscConfig+0x110>
 80011aa:	e000      	b.n	80011ae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d069      	beq.n	800128e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011ba:	4b50      	ldr	r3, [pc, #320]	; (80012fc <HAL_RCC_OscConfig+0x280>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f003 030c 	and.w	r3, r3, #12
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d00b      	beq.n	80011de <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011c6:	4b4d      	ldr	r3, [pc, #308]	; (80012fc <HAL_RCC_OscConfig+0x280>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f003 030c 	and.w	r3, r3, #12
 80011ce:	2b08      	cmp	r3, #8
 80011d0:	d11c      	bne.n	800120c <HAL_RCC_OscConfig+0x190>
 80011d2:	4b4a      	ldr	r3, [pc, #296]	; (80012fc <HAL_RCC_OscConfig+0x280>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d116      	bne.n	800120c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011de:	4b47      	ldr	r3, [pc, #284]	; (80012fc <HAL_RCC_OscConfig+0x280>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d005      	beq.n	80011f6 <HAL_RCC_OscConfig+0x17a>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d001      	beq.n	80011f6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e1df      	b.n	80015b6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f6:	4b41      	ldr	r3, [pc, #260]	; (80012fc <HAL_RCC_OscConfig+0x280>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	691b      	ldr	r3, [r3, #16]
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	493d      	ldr	r1, [pc, #244]	; (80012fc <HAL_RCC_OscConfig+0x280>)
 8001206:	4313      	orrs	r3, r2
 8001208:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800120a:	e040      	b.n	800128e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d023      	beq.n	800125c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001214:	4b39      	ldr	r3, [pc, #228]	; (80012fc <HAL_RCC_OscConfig+0x280>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a38      	ldr	r2, [pc, #224]	; (80012fc <HAL_RCC_OscConfig+0x280>)
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001220:	f7ff fc0a 	bl	8000a38 <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001228:	f7ff fc06 	bl	8000a38 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e1bd      	b.n	80015b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800123a:	4b30      	ldr	r3, [pc, #192]	; (80012fc <HAL_RCC_OscConfig+0x280>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d0f0      	beq.n	8001228 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001246:	4b2d      	ldr	r3, [pc, #180]	; (80012fc <HAL_RCC_OscConfig+0x280>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	4929      	ldr	r1, [pc, #164]	; (80012fc <HAL_RCC_OscConfig+0x280>)
 8001256:	4313      	orrs	r3, r2
 8001258:	600b      	str	r3, [r1, #0]
 800125a:	e018      	b.n	800128e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800125c:	4b27      	ldr	r3, [pc, #156]	; (80012fc <HAL_RCC_OscConfig+0x280>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a26      	ldr	r2, [pc, #152]	; (80012fc <HAL_RCC_OscConfig+0x280>)
 8001262:	f023 0301 	bic.w	r3, r3, #1
 8001266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001268:	f7ff fbe6 	bl	8000a38 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001270:	f7ff fbe2 	bl	8000a38 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e199      	b.n	80015b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001282:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <HAL_RCC_OscConfig+0x280>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1f0      	bne.n	8001270 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0308 	and.w	r3, r3, #8
 8001296:	2b00      	cmp	r3, #0
 8001298:	d038      	beq.n	800130c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d019      	beq.n	80012d6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012a2:	4b16      	ldr	r3, [pc, #88]	; (80012fc <HAL_RCC_OscConfig+0x280>)
 80012a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012a6:	4a15      	ldr	r2, [pc, #84]	; (80012fc <HAL_RCC_OscConfig+0x280>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ae:	f7ff fbc3 	bl	8000a38 <HAL_GetTick>
 80012b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012b4:	e008      	b.n	80012c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012b6:	f7ff fbbf 	bl	8000a38 <HAL_GetTick>
 80012ba:	4602      	mov	r2, r0
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d901      	bls.n	80012c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e176      	b.n	80015b6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <HAL_RCC_OscConfig+0x280>)
 80012ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d0f0      	beq.n	80012b6 <HAL_RCC_OscConfig+0x23a>
 80012d4:	e01a      	b.n	800130c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012d6:	4b09      	ldr	r3, [pc, #36]	; (80012fc <HAL_RCC_OscConfig+0x280>)
 80012d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012da:	4a08      	ldr	r2, [pc, #32]	; (80012fc <HAL_RCC_OscConfig+0x280>)
 80012dc:	f023 0301 	bic.w	r3, r3, #1
 80012e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e2:	f7ff fba9 	bl	8000a38 <HAL_GetTick>
 80012e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012e8:	e00a      	b.n	8001300 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012ea:	f7ff fba5 	bl	8000a38 <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d903      	bls.n	8001300 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e15c      	b.n	80015b6 <HAL_RCC_OscConfig+0x53a>
 80012fc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001300:	4b91      	ldr	r3, [pc, #580]	; (8001548 <HAL_RCC_OscConfig+0x4cc>)
 8001302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d1ee      	bne.n	80012ea <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0304 	and.w	r3, r3, #4
 8001314:	2b00      	cmp	r3, #0
 8001316:	f000 80a4 	beq.w	8001462 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800131a:	4b8b      	ldr	r3, [pc, #556]	; (8001548 <HAL_RCC_OscConfig+0x4cc>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d10d      	bne.n	8001342 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001326:	4b88      	ldr	r3, [pc, #544]	; (8001548 <HAL_RCC_OscConfig+0x4cc>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	4a87      	ldr	r2, [pc, #540]	; (8001548 <HAL_RCC_OscConfig+0x4cc>)
 800132c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001330:	6413      	str	r3, [r2, #64]	; 0x40
 8001332:	4b85      	ldr	r3, [pc, #532]	; (8001548 <HAL_RCC_OscConfig+0x4cc>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800133e:	2301      	movs	r3, #1
 8001340:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001342:	4b82      	ldr	r3, [pc, #520]	; (800154c <HAL_RCC_OscConfig+0x4d0>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800134a:	2b00      	cmp	r3, #0
 800134c:	d118      	bne.n	8001380 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800134e:	4b7f      	ldr	r3, [pc, #508]	; (800154c <HAL_RCC_OscConfig+0x4d0>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a7e      	ldr	r2, [pc, #504]	; (800154c <HAL_RCC_OscConfig+0x4d0>)
 8001354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001358:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800135a:	f7ff fb6d 	bl	8000a38 <HAL_GetTick>
 800135e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001360:	e008      	b.n	8001374 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001362:	f7ff fb69 	bl	8000a38 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b64      	cmp	r3, #100	; 0x64
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e120      	b.n	80015b6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001374:	4b75      	ldr	r3, [pc, #468]	; (800154c <HAL_RCC_OscConfig+0x4d0>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800137c:	2b00      	cmp	r3, #0
 800137e:	d0f0      	beq.n	8001362 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d106      	bne.n	8001396 <HAL_RCC_OscConfig+0x31a>
 8001388:	4b6f      	ldr	r3, [pc, #444]	; (8001548 <HAL_RCC_OscConfig+0x4cc>)
 800138a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800138c:	4a6e      	ldr	r2, [pc, #440]	; (8001548 <HAL_RCC_OscConfig+0x4cc>)
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	6713      	str	r3, [r2, #112]	; 0x70
 8001394:	e02d      	b.n	80013f2 <HAL_RCC_OscConfig+0x376>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d10c      	bne.n	80013b8 <HAL_RCC_OscConfig+0x33c>
 800139e:	4b6a      	ldr	r3, [pc, #424]	; (8001548 <HAL_RCC_OscConfig+0x4cc>)
 80013a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a2:	4a69      	ldr	r2, [pc, #420]	; (8001548 <HAL_RCC_OscConfig+0x4cc>)
 80013a4:	f023 0301 	bic.w	r3, r3, #1
 80013a8:	6713      	str	r3, [r2, #112]	; 0x70
 80013aa:	4b67      	ldr	r3, [pc, #412]	; (8001548 <HAL_RCC_OscConfig+0x4cc>)
 80013ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ae:	4a66      	ldr	r2, [pc, #408]	; (8001548 <HAL_RCC_OscConfig+0x4cc>)
 80013b0:	f023 0304 	bic.w	r3, r3, #4
 80013b4:	6713      	str	r3, [r2, #112]	; 0x70
 80013b6:	e01c      	b.n	80013f2 <HAL_RCC_OscConfig+0x376>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	2b05      	cmp	r3, #5
 80013be:	d10c      	bne.n	80013da <HAL_RCC_OscConfig+0x35e>
 80013c0:	4b61      	ldr	r3, [pc, #388]	; (8001548 <HAL_RCC_OscConfig+0x4cc>)
 80013c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013c4:	4a60      	ldr	r2, [pc, #384]	; (8001548 <HAL_RCC_OscConfig+0x4cc>)
 80013c6:	f043 0304 	orr.w	r3, r3, #4
 80013ca:	6713      	str	r3, [r2, #112]	; 0x70
 80013cc:	4b5e      	ldr	r3, [pc, #376]	; (8001548 <HAL_RCC_OscConfig+0x4cc>)
 80013ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d0:	4a5d      	ldr	r2, [pc, #372]	; (8001548 <HAL_RCC_OscConfig+0x4cc>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	6713      	str	r3, [r2, #112]	; 0x70
 80013d8:	e00b      	b.n	80013f2 <HAL_RCC_OscConfig+0x376>
 80013da:	4b5b      	ldr	r3, [pc, #364]	; (8001548 <HAL_RCC_OscConfig+0x4cc>)
 80013dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013de:	4a5a      	ldr	r2, [pc, #360]	; (8001548 <HAL_RCC_OscConfig+0x4cc>)
 80013e0:	f023 0301 	bic.w	r3, r3, #1
 80013e4:	6713      	str	r3, [r2, #112]	; 0x70
 80013e6:	4b58      	ldr	r3, [pc, #352]	; (8001548 <HAL_RCC_OscConfig+0x4cc>)
 80013e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ea:	4a57      	ldr	r2, [pc, #348]	; (8001548 <HAL_RCC_OscConfig+0x4cc>)
 80013ec:	f023 0304 	bic.w	r3, r3, #4
 80013f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d015      	beq.n	8001426 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013fa:	f7ff fb1d 	bl	8000a38 <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001400:	e00a      	b.n	8001418 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001402:	f7ff fb19 	bl	8000a38 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001410:	4293      	cmp	r3, r2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e0ce      	b.n	80015b6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001418:	4b4b      	ldr	r3, [pc, #300]	; (8001548 <HAL_RCC_OscConfig+0x4cc>)
 800141a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0ee      	beq.n	8001402 <HAL_RCC_OscConfig+0x386>
 8001424:	e014      	b.n	8001450 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001426:	f7ff fb07 	bl	8000a38 <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800142c:	e00a      	b.n	8001444 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800142e:	f7ff fb03 	bl	8000a38 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	f241 3288 	movw	r2, #5000	; 0x1388
 800143c:	4293      	cmp	r3, r2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e0b8      	b.n	80015b6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001444:	4b40      	ldr	r3, [pc, #256]	; (8001548 <HAL_RCC_OscConfig+0x4cc>)
 8001446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1ee      	bne.n	800142e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001450:	7dfb      	ldrb	r3, [r7, #23]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d105      	bne.n	8001462 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001456:	4b3c      	ldr	r3, [pc, #240]	; (8001548 <HAL_RCC_OscConfig+0x4cc>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	4a3b      	ldr	r2, [pc, #236]	; (8001548 <HAL_RCC_OscConfig+0x4cc>)
 800145c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001460:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	2b00      	cmp	r3, #0
 8001468:	f000 80a4 	beq.w	80015b4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800146c:	4b36      	ldr	r3, [pc, #216]	; (8001548 <HAL_RCC_OscConfig+0x4cc>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f003 030c 	and.w	r3, r3, #12
 8001474:	2b08      	cmp	r3, #8
 8001476:	d06b      	beq.n	8001550 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	2b02      	cmp	r3, #2
 800147e:	d149      	bne.n	8001514 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001480:	4b31      	ldr	r3, [pc, #196]	; (8001548 <HAL_RCC_OscConfig+0x4cc>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a30      	ldr	r2, [pc, #192]	; (8001548 <HAL_RCC_OscConfig+0x4cc>)
 8001486:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800148a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800148c:	f7ff fad4 	bl	8000a38 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001494:	f7ff fad0 	bl	8000a38 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e087      	b.n	80015b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014a6:	4b28      	ldr	r3, [pc, #160]	; (8001548 <HAL_RCC_OscConfig+0x4cc>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1f0      	bne.n	8001494 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69da      	ldr	r2, [r3, #28]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a1b      	ldr	r3, [r3, #32]
 80014ba:	431a      	orrs	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c0:	019b      	lsls	r3, r3, #6
 80014c2:	431a      	orrs	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c8:	085b      	lsrs	r3, r3, #1
 80014ca:	3b01      	subs	r3, #1
 80014cc:	041b      	lsls	r3, r3, #16
 80014ce:	431a      	orrs	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d4:	061b      	lsls	r3, r3, #24
 80014d6:	4313      	orrs	r3, r2
 80014d8:	4a1b      	ldr	r2, [pc, #108]	; (8001548 <HAL_RCC_OscConfig+0x4cc>)
 80014da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80014de:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014e0:	4b19      	ldr	r3, [pc, #100]	; (8001548 <HAL_RCC_OscConfig+0x4cc>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a18      	ldr	r2, [pc, #96]	; (8001548 <HAL_RCC_OscConfig+0x4cc>)
 80014e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ec:	f7ff faa4 	bl	8000a38 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014f4:	f7ff faa0 	bl	8000a38 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e057      	b.n	80015b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001506:	4b10      	ldr	r3, [pc, #64]	; (8001548 <HAL_RCC_OscConfig+0x4cc>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0f0      	beq.n	80014f4 <HAL_RCC_OscConfig+0x478>
 8001512:	e04f      	b.n	80015b4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <HAL_RCC_OscConfig+0x4cc>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0b      	ldr	r2, [pc, #44]	; (8001548 <HAL_RCC_OscConfig+0x4cc>)
 800151a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800151e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001520:	f7ff fa8a 	bl	8000a38 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001528:	f7ff fa86 	bl	8000a38 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e03d      	b.n	80015b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800153a:	4b03      	ldr	r3, [pc, #12]	; (8001548 <HAL_RCC_OscConfig+0x4cc>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f0      	bne.n	8001528 <HAL_RCC_OscConfig+0x4ac>
 8001546:	e035      	b.n	80015b4 <HAL_RCC_OscConfig+0x538>
 8001548:	40023800 	.word	0x40023800
 800154c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001550:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <HAL_RCC_OscConfig+0x544>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d028      	beq.n	80015b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001568:	429a      	cmp	r2, r3
 800156a:	d121      	bne.n	80015b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001576:	429a      	cmp	r2, r3
 8001578:	d11a      	bne.n	80015b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001580:	4013      	ands	r3, r2
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001586:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001588:	4293      	cmp	r3, r2
 800158a:	d111      	bne.n	80015b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001596:	085b      	lsrs	r3, r3, #1
 8001598:	3b01      	subs	r3, #1
 800159a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800159c:	429a      	cmp	r2, r3
 800159e:	d107      	bne.n	80015b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015aa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d001      	beq.n	80015b4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e000      	b.n	80015b6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40023800 	.word	0x40023800

080015c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d101      	bne.n	80015dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e0d0      	b.n	800177e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015dc:	4b6a      	ldr	r3, [pc, #424]	; (8001788 <HAL_RCC_ClockConfig+0x1c4>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 030f 	and.w	r3, r3, #15
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d910      	bls.n	800160c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ea:	4b67      	ldr	r3, [pc, #412]	; (8001788 <HAL_RCC_ClockConfig+0x1c4>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f023 020f 	bic.w	r2, r3, #15
 80015f2:	4965      	ldr	r1, [pc, #404]	; (8001788 <HAL_RCC_ClockConfig+0x1c4>)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015fa:	4b63      	ldr	r3, [pc, #396]	; (8001788 <HAL_RCC_ClockConfig+0x1c4>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 030f 	and.w	r3, r3, #15
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	429a      	cmp	r2, r3
 8001606:	d001      	beq.n	800160c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e0b8      	b.n	800177e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d020      	beq.n	800165a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	2b00      	cmp	r3, #0
 8001622:	d005      	beq.n	8001630 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001624:	4b59      	ldr	r3, [pc, #356]	; (800178c <HAL_RCC_ClockConfig+0x1c8>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	4a58      	ldr	r2, [pc, #352]	; (800178c <HAL_RCC_ClockConfig+0x1c8>)
 800162a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800162e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0308 	and.w	r3, r3, #8
 8001638:	2b00      	cmp	r3, #0
 800163a:	d005      	beq.n	8001648 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800163c:	4b53      	ldr	r3, [pc, #332]	; (800178c <HAL_RCC_ClockConfig+0x1c8>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	4a52      	ldr	r2, [pc, #328]	; (800178c <HAL_RCC_ClockConfig+0x1c8>)
 8001642:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001646:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001648:	4b50      	ldr	r3, [pc, #320]	; (800178c <HAL_RCC_ClockConfig+0x1c8>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	494d      	ldr	r1, [pc, #308]	; (800178c <HAL_RCC_ClockConfig+0x1c8>)
 8001656:	4313      	orrs	r3, r2
 8001658:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	2b00      	cmp	r3, #0
 8001664:	d040      	beq.n	80016e8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d107      	bne.n	800167e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166e:	4b47      	ldr	r3, [pc, #284]	; (800178c <HAL_RCC_ClockConfig+0x1c8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d115      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e07f      	b.n	800177e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	2b02      	cmp	r3, #2
 8001684:	d107      	bne.n	8001696 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001686:	4b41      	ldr	r3, [pc, #260]	; (800178c <HAL_RCC_ClockConfig+0x1c8>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d109      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e073      	b.n	800177e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001696:	4b3d      	ldr	r3, [pc, #244]	; (800178c <HAL_RCC_ClockConfig+0x1c8>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e06b      	b.n	800177e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016a6:	4b39      	ldr	r3, [pc, #228]	; (800178c <HAL_RCC_ClockConfig+0x1c8>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f023 0203 	bic.w	r2, r3, #3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	4936      	ldr	r1, [pc, #216]	; (800178c <HAL_RCC_ClockConfig+0x1c8>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016b8:	f7ff f9be 	bl	8000a38 <HAL_GetTick>
 80016bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016be:	e00a      	b.n	80016d6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016c0:	f7ff f9ba 	bl	8000a38 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e053      	b.n	800177e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016d6:	4b2d      	ldr	r3, [pc, #180]	; (800178c <HAL_RCC_ClockConfig+0x1c8>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 020c 	and.w	r2, r3, #12
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d1eb      	bne.n	80016c0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016e8:	4b27      	ldr	r3, [pc, #156]	; (8001788 <HAL_RCC_ClockConfig+0x1c4>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 030f 	and.w	r3, r3, #15
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d210      	bcs.n	8001718 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016f6:	4b24      	ldr	r3, [pc, #144]	; (8001788 <HAL_RCC_ClockConfig+0x1c4>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f023 020f 	bic.w	r2, r3, #15
 80016fe:	4922      	ldr	r1, [pc, #136]	; (8001788 <HAL_RCC_ClockConfig+0x1c4>)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	4313      	orrs	r3, r2
 8001704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001706:	4b20      	ldr	r3, [pc, #128]	; (8001788 <HAL_RCC_ClockConfig+0x1c4>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	429a      	cmp	r2, r3
 8001712:	d001      	beq.n	8001718 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e032      	b.n	800177e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	2b00      	cmp	r3, #0
 8001722:	d008      	beq.n	8001736 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001724:	4b19      	ldr	r3, [pc, #100]	; (800178c <HAL_RCC_ClockConfig+0x1c8>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	4916      	ldr	r1, [pc, #88]	; (800178c <HAL_RCC_ClockConfig+0x1c8>)
 8001732:	4313      	orrs	r3, r2
 8001734:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0308 	and.w	r3, r3, #8
 800173e:	2b00      	cmp	r3, #0
 8001740:	d009      	beq.n	8001756 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001742:	4b12      	ldr	r3, [pc, #72]	; (800178c <HAL_RCC_ClockConfig+0x1c8>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	490e      	ldr	r1, [pc, #56]	; (800178c <HAL_RCC_ClockConfig+0x1c8>)
 8001752:	4313      	orrs	r3, r2
 8001754:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001756:	f000 f821 	bl	800179c <HAL_RCC_GetSysClockFreq>
 800175a:	4602      	mov	r2, r0
 800175c:	4b0b      	ldr	r3, [pc, #44]	; (800178c <HAL_RCC_ClockConfig+0x1c8>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	091b      	lsrs	r3, r3, #4
 8001762:	f003 030f 	and.w	r3, r3, #15
 8001766:	490a      	ldr	r1, [pc, #40]	; (8001790 <HAL_RCC_ClockConfig+0x1cc>)
 8001768:	5ccb      	ldrb	r3, [r1, r3]
 800176a:	fa22 f303 	lsr.w	r3, r2, r3
 800176e:	4a09      	ldr	r2, [pc, #36]	; (8001794 <HAL_RCC_ClockConfig+0x1d0>)
 8001770:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001772:	4b09      	ldr	r3, [pc, #36]	; (8001798 <HAL_RCC_ClockConfig+0x1d4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff f91a 	bl	80009b0 <HAL_InitTick>

  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40023c00 	.word	0x40023c00
 800178c:	40023800 	.word	0x40023800
 8001790:	08002dcc 	.word	0x08002dcc
 8001794:	20000000 	.word	0x20000000
 8001798:	20000004 	.word	0x20000004

0800179c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800179c:	b5b0      	push	{r4, r5, r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80017a2:	2100      	movs	r1, #0
 80017a4:	6079      	str	r1, [r7, #4]
 80017a6:	2100      	movs	r1, #0
 80017a8:	60f9      	str	r1, [r7, #12]
 80017aa:	2100      	movs	r1, #0
 80017ac:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80017ae:	2100      	movs	r1, #0
 80017b0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017b2:	4952      	ldr	r1, [pc, #328]	; (80018fc <HAL_RCC_GetSysClockFreq+0x160>)
 80017b4:	6889      	ldr	r1, [r1, #8]
 80017b6:	f001 010c 	and.w	r1, r1, #12
 80017ba:	2908      	cmp	r1, #8
 80017bc:	d00d      	beq.n	80017da <HAL_RCC_GetSysClockFreq+0x3e>
 80017be:	2908      	cmp	r1, #8
 80017c0:	f200 8094 	bhi.w	80018ec <HAL_RCC_GetSysClockFreq+0x150>
 80017c4:	2900      	cmp	r1, #0
 80017c6:	d002      	beq.n	80017ce <HAL_RCC_GetSysClockFreq+0x32>
 80017c8:	2904      	cmp	r1, #4
 80017ca:	d003      	beq.n	80017d4 <HAL_RCC_GetSysClockFreq+0x38>
 80017cc:	e08e      	b.n	80018ec <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017ce:	4b4c      	ldr	r3, [pc, #304]	; (8001900 <HAL_RCC_GetSysClockFreq+0x164>)
 80017d0:	60bb      	str	r3, [r7, #8]
      break;
 80017d2:	e08e      	b.n	80018f2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017d4:	4b4b      	ldr	r3, [pc, #300]	; (8001904 <HAL_RCC_GetSysClockFreq+0x168>)
 80017d6:	60bb      	str	r3, [r7, #8]
      break;
 80017d8:	e08b      	b.n	80018f2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017da:	4948      	ldr	r1, [pc, #288]	; (80018fc <HAL_RCC_GetSysClockFreq+0x160>)
 80017dc:	6849      	ldr	r1, [r1, #4]
 80017de:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80017e2:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80017e4:	4945      	ldr	r1, [pc, #276]	; (80018fc <HAL_RCC_GetSysClockFreq+0x160>)
 80017e6:	6849      	ldr	r1, [r1, #4]
 80017e8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80017ec:	2900      	cmp	r1, #0
 80017ee:	d024      	beq.n	800183a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017f0:	4942      	ldr	r1, [pc, #264]	; (80018fc <HAL_RCC_GetSysClockFreq+0x160>)
 80017f2:	6849      	ldr	r1, [r1, #4]
 80017f4:	0989      	lsrs	r1, r1, #6
 80017f6:	4608      	mov	r0, r1
 80017f8:	f04f 0100 	mov.w	r1, #0
 80017fc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001800:	f04f 0500 	mov.w	r5, #0
 8001804:	ea00 0204 	and.w	r2, r0, r4
 8001808:	ea01 0305 	and.w	r3, r1, r5
 800180c:	493d      	ldr	r1, [pc, #244]	; (8001904 <HAL_RCC_GetSysClockFreq+0x168>)
 800180e:	fb01 f003 	mul.w	r0, r1, r3
 8001812:	2100      	movs	r1, #0
 8001814:	fb01 f102 	mul.w	r1, r1, r2
 8001818:	1844      	adds	r4, r0, r1
 800181a:	493a      	ldr	r1, [pc, #232]	; (8001904 <HAL_RCC_GetSysClockFreq+0x168>)
 800181c:	fba2 0101 	umull	r0, r1, r2, r1
 8001820:	1863      	adds	r3, r4, r1
 8001822:	4619      	mov	r1, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	461a      	mov	r2, r3
 8001828:	f04f 0300 	mov.w	r3, #0
 800182c:	f7fe fcec 	bl	8000208 <__aeabi_uldivmod>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4613      	mov	r3, r2
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	e04a      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800183a:	4b30      	ldr	r3, [pc, #192]	; (80018fc <HAL_RCC_GetSysClockFreq+0x160>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	099b      	lsrs	r3, r3, #6
 8001840:	461a      	mov	r2, r3
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	f240 10ff 	movw	r0, #511	; 0x1ff
 800184a:	f04f 0100 	mov.w	r1, #0
 800184e:	ea02 0400 	and.w	r4, r2, r0
 8001852:	ea03 0501 	and.w	r5, r3, r1
 8001856:	4620      	mov	r0, r4
 8001858:	4629      	mov	r1, r5
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	f04f 0300 	mov.w	r3, #0
 8001862:	014b      	lsls	r3, r1, #5
 8001864:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001868:	0142      	lsls	r2, r0, #5
 800186a:	4610      	mov	r0, r2
 800186c:	4619      	mov	r1, r3
 800186e:	1b00      	subs	r0, r0, r4
 8001870:	eb61 0105 	sbc.w	r1, r1, r5
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	f04f 0300 	mov.w	r3, #0
 800187c:	018b      	lsls	r3, r1, #6
 800187e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001882:	0182      	lsls	r2, r0, #6
 8001884:	1a12      	subs	r2, r2, r0
 8001886:	eb63 0301 	sbc.w	r3, r3, r1
 800188a:	f04f 0000 	mov.w	r0, #0
 800188e:	f04f 0100 	mov.w	r1, #0
 8001892:	00d9      	lsls	r1, r3, #3
 8001894:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001898:	00d0      	lsls	r0, r2, #3
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	1912      	adds	r2, r2, r4
 80018a0:	eb45 0303 	adc.w	r3, r5, r3
 80018a4:	f04f 0000 	mov.w	r0, #0
 80018a8:	f04f 0100 	mov.w	r1, #0
 80018ac:	0299      	lsls	r1, r3, #10
 80018ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80018b2:	0290      	lsls	r0, r2, #10
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4610      	mov	r0, r2
 80018ba:	4619      	mov	r1, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	461a      	mov	r2, r3
 80018c0:	f04f 0300 	mov.w	r3, #0
 80018c4:	f7fe fca0 	bl	8000208 <__aeabi_uldivmod>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4613      	mov	r3, r2
 80018ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80018d0:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <HAL_RCC_GetSysClockFreq+0x160>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	0c1b      	lsrs	r3, r3, #16
 80018d6:	f003 0303 	and.w	r3, r3, #3
 80018da:	3301      	adds	r3, #1
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e8:	60bb      	str	r3, [r7, #8]
      break;
 80018ea:	e002      	b.n	80018f2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018ec:	4b04      	ldr	r3, [pc, #16]	; (8001900 <HAL_RCC_GetSysClockFreq+0x164>)
 80018ee:	60bb      	str	r3, [r7, #8]
      break;
 80018f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018f2:	68bb      	ldr	r3, [r7, #8]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bdb0      	pop	{r4, r5, r7, pc}
 80018fc:	40023800 	.word	0x40023800
 8001900:	00f42400 	.word	0x00f42400
 8001904:	017d7840 	.word	0x017d7840

08001908 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e049      	b.n	80019ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d106      	bne.n	8001934 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7fe ff9c 	bl	800086c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2202      	movs	r2, #2
 8001938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3304      	adds	r3, #4
 8001944:	4619      	mov	r1, r3
 8001946:	4610      	mov	r0, r2
 8001948:	f000 fd20 	bl	800238c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e049      	b.n	8001a5c <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d106      	bne.n	80019e2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 f841 	bl	8001a64 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2202      	movs	r2, #2
 80019e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	3304      	adds	r3, #4
 80019f2:	4619      	mov	r1, r3
 80019f4:	4610      	mov	r0, r2
 80019f6:	f000 fcc9 	bl	800238c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2201      	movs	r2, #1
 8001a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2201      	movs	r2, #1
 8001a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d109      	bne.n	8001a9c <HAL_TIM_OC_Start_IT+0x24>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	bf14      	ite	ne
 8001a94:	2301      	movne	r3, #1
 8001a96:	2300      	moveq	r3, #0
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	e03c      	b.n	8001b16 <HAL_TIM_OC_Start_IT+0x9e>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	d109      	bne.n	8001ab6 <HAL_TIM_OC_Start_IT+0x3e>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	bf14      	ite	ne
 8001aae:	2301      	movne	r3, #1
 8001ab0:	2300      	moveq	r3, #0
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	e02f      	b.n	8001b16 <HAL_TIM_OC_Start_IT+0x9e>
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	2b08      	cmp	r3, #8
 8001aba:	d109      	bne.n	8001ad0 <HAL_TIM_OC_Start_IT+0x58>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	bf14      	ite	ne
 8001ac8:	2301      	movne	r3, #1
 8001aca:	2300      	moveq	r3, #0
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	e022      	b.n	8001b16 <HAL_TIM_OC_Start_IT+0x9e>
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	2b0c      	cmp	r3, #12
 8001ad4:	d109      	bne.n	8001aea <HAL_TIM_OC_Start_IT+0x72>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	bf14      	ite	ne
 8001ae2:	2301      	movne	r3, #1
 8001ae4:	2300      	moveq	r3, #0
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	e015      	b.n	8001b16 <HAL_TIM_OC_Start_IT+0x9e>
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	2b10      	cmp	r3, #16
 8001aee:	d109      	bne.n	8001b04 <HAL_TIM_OC_Start_IT+0x8c>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	bf14      	ite	ne
 8001afc:	2301      	movne	r3, #1
 8001afe:	2300      	moveq	r3, #0
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	e008      	b.n	8001b16 <HAL_TIM_OC_Start_IT+0x9e>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	bf14      	ite	ne
 8001b10:	2301      	movne	r3, #1
 8001b12:	2300      	moveq	r3, #0
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_TIM_OC_Start_IT+0xa6>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e0d8      	b.n	8001cd0 <HAL_TIM_OC_Start_IT+0x258>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d104      	bne.n	8001b2e <HAL_TIM_OC_Start_IT+0xb6>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2202      	movs	r2, #2
 8001b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b2c:	e023      	b.n	8001b76 <HAL_TIM_OC_Start_IT+0xfe>
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d104      	bne.n	8001b3e <HAL_TIM_OC_Start_IT+0xc6>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2202      	movs	r2, #2
 8001b38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b3c:	e01b      	b.n	8001b76 <HAL_TIM_OC_Start_IT+0xfe>
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	2b08      	cmp	r3, #8
 8001b42:	d104      	bne.n	8001b4e <HAL_TIM_OC_Start_IT+0xd6>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2202      	movs	r2, #2
 8001b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b4c:	e013      	b.n	8001b76 <HAL_TIM_OC_Start_IT+0xfe>
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	2b0c      	cmp	r3, #12
 8001b52:	d104      	bne.n	8001b5e <HAL_TIM_OC_Start_IT+0xe6>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2202      	movs	r2, #2
 8001b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001b5c:	e00b      	b.n	8001b76 <HAL_TIM_OC_Start_IT+0xfe>
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	2b10      	cmp	r3, #16
 8001b62:	d104      	bne.n	8001b6e <HAL_TIM_OC_Start_IT+0xf6>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2202      	movs	r2, #2
 8001b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b6c:	e003      	b.n	8001b76 <HAL_TIM_OC_Start_IT+0xfe>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2202      	movs	r2, #2
 8001b72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	2b0c      	cmp	r3, #12
 8001b7a:	d841      	bhi.n	8001c00 <HAL_TIM_OC_Start_IT+0x188>
 8001b7c:	a201      	add	r2, pc, #4	; (adr r2, 8001b84 <HAL_TIM_OC_Start_IT+0x10c>)
 8001b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b82:	bf00      	nop
 8001b84:	08001bb9 	.word	0x08001bb9
 8001b88:	08001c01 	.word	0x08001c01
 8001b8c:	08001c01 	.word	0x08001c01
 8001b90:	08001c01 	.word	0x08001c01
 8001b94:	08001bcb 	.word	0x08001bcb
 8001b98:	08001c01 	.word	0x08001c01
 8001b9c:	08001c01 	.word	0x08001c01
 8001ba0:	08001c01 	.word	0x08001c01
 8001ba4:	08001bdd 	.word	0x08001bdd
 8001ba8:	08001c01 	.word	0x08001c01
 8001bac:	08001c01 	.word	0x08001c01
 8001bb0:	08001c01 	.word	0x08001c01
 8001bb4:	08001bef 	.word	0x08001bef
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68da      	ldr	r2, [r3, #12]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f042 0202 	orr.w	r2, r2, #2
 8001bc6:	60da      	str	r2, [r3, #12]
      break;
 8001bc8:	e01b      	b.n	8001c02 <HAL_TIM_OC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68da      	ldr	r2, [r3, #12]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f042 0204 	orr.w	r2, r2, #4
 8001bd8:	60da      	str	r2, [r3, #12]
      break;
 8001bda:	e012      	b.n	8001c02 <HAL_TIM_OC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68da      	ldr	r2, [r3, #12]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f042 0208 	orr.w	r2, r2, #8
 8001bea:	60da      	str	r2, [r3, #12]
      break;
 8001bec:	e009      	b.n	8001c02 <HAL_TIM_OC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68da      	ldr	r2, [r3, #12]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f042 0210 	orr.w	r2, r2, #16
 8001bfc:	60da      	str	r2, [r3, #12]
      break;
 8001bfe:	e000      	b.n	8001c02 <HAL_TIM_OC_Start_IT+0x18a>
    }

    default:
      break;
 8001c00:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2201      	movs	r2, #1
 8001c08:	6839      	ldr	r1, [r7, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f000 ff56 	bl	8002abc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a30      	ldr	r2, [pc, #192]	; (8001cd8 <HAL_TIM_OC_Start_IT+0x260>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d004      	beq.n	8001c24 <HAL_TIM_OC_Start_IT+0x1ac>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a2f      	ldr	r2, [pc, #188]	; (8001cdc <HAL_TIM_OC_Start_IT+0x264>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d101      	bne.n	8001c28 <HAL_TIM_OC_Start_IT+0x1b0>
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <HAL_TIM_OC_Start_IT+0x1b2>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d007      	beq.n	8001c3e <HAL_TIM_OC_Start_IT+0x1c6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a25      	ldr	r2, [pc, #148]	; (8001cd8 <HAL_TIM_OC_Start_IT+0x260>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d022      	beq.n	8001c8e <HAL_TIM_OC_Start_IT+0x216>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c50:	d01d      	beq.n	8001c8e <HAL_TIM_OC_Start_IT+0x216>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a22      	ldr	r2, [pc, #136]	; (8001ce0 <HAL_TIM_OC_Start_IT+0x268>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d018      	beq.n	8001c8e <HAL_TIM_OC_Start_IT+0x216>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a20      	ldr	r2, [pc, #128]	; (8001ce4 <HAL_TIM_OC_Start_IT+0x26c>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d013      	beq.n	8001c8e <HAL_TIM_OC_Start_IT+0x216>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a1f      	ldr	r2, [pc, #124]	; (8001ce8 <HAL_TIM_OC_Start_IT+0x270>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d00e      	beq.n	8001c8e <HAL_TIM_OC_Start_IT+0x216>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a19      	ldr	r2, [pc, #100]	; (8001cdc <HAL_TIM_OC_Start_IT+0x264>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d009      	beq.n	8001c8e <HAL_TIM_OC_Start_IT+0x216>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a1b      	ldr	r2, [pc, #108]	; (8001cec <HAL_TIM_OC_Start_IT+0x274>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d004      	beq.n	8001c8e <HAL_TIM_OC_Start_IT+0x216>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a19      	ldr	r2, [pc, #100]	; (8001cf0 <HAL_TIM_OC_Start_IT+0x278>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d115      	bne.n	8001cba <HAL_TIM_OC_Start_IT+0x242>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	4b17      	ldr	r3, [pc, #92]	; (8001cf4 <HAL_TIM_OC_Start_IT+0x27c>)
 8001c96:	4013      	ands	r3, r2
 8001c98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2b06      	cmp	r3, #6
 8001c9e:	d015      	beq.n	8001ccc <HAL_TIM_OC_Start_IT+0x254>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca6:	d011      	beq.n	8001ccc <HAL_TIM_OC_Start_IT+0x254>
    {
      __HAL_TIM_ENABLE(htim);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f042 0201 	orr.w	r2, r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cb8:	e008      	b.n	8001ccc <HAL_TIM_OC_Start_IT+0x254>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f042 0201 	orr.w	r2, r2, #1
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	e000      	b.n	8001cce <HAL_TIM_OC_Start_IT+0x256>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ccc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40010000 	.word	0x40010000
 8001cdc:	40010400 	.word	0x40010400
 8001ce0:	40000400 	.word	0x40000400
 8001ce4:	40000800 	.word	0x40000800
 8001ce8:	40000c00 	.word	0x40000c00
 8001cec:	40014000 	.word	0x40014000
 8001cf0:	40001800 	.word	0x40001800
 8001cf4:	00010007 	.word	0x00010007

08001cf8 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	2b0c      	cmp	r3, #12
 8001d06:	d841      	bhi.n	8001d8c <HAL_TIM_OC_Stop_IT+0x94>
 8001d08:	a201      	add	r2, pc, #4	; (adr r2, 8001d10 <HAL_TIM_OC_Stop_IT+0x18>)
 8001d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d0e:	bf00      	nop
 8001d10:	08001d45 	.word	0x08001d45
 8001d14:	08001d8d 	.word	0x08001d8d
 8001d18:	08001d8d 	.word	0x08001d8d
 8001d1c:	08001d8d 	.word	0x08001d8d
 8001d20:	08001d57 	.word	0x08001d57
 8001d24:	08001d8d 	.word	0x08001d8d
 8001d28:	08001d8d 	.word	0x08001d8d
 8001d2c:	08001d8d 	.word	0x08001d8d
 8001d30:	08001d69 	.word	0x08001d69
 8001d34:	08001d8d 	.word	0x08001d8d
 8001d38:	08001d8d 	.word	0x08001d8d
 8001d3c:	08001d8d 	.word	0x08001d8d
 8001d40:	08001d7b 	.word	0x08001d7b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68da      	ldr	r2, [r3, #12]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 0202 	bic.w	r2, r2, #2
 8001d52:	60da      	str	r2, [r3, #12]
      break;
 8001d54:	e01b      	b.n	8001d8e <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68da      	ldr	r2, [r3, #12]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 0204 	bic.w	r2, r2, #4
 8001d64:	60da      	str	r2, [r3, #12]
      break;
 8001d66:	e012      	b.n	8001d8e <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68da      	ldr	r2, [r3, #12]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0208 	bic.w	r2, r2, #8
 8001d76:	60da      	str	r2, [r3, #12]
      break;
 8001d78:	e009      	b.n	8001d8e <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68da      	ldr	r2, [r3, #12]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 0210 	bic.w	r2, r2, #16
 8001d88:	60da      	str	r2, [r3, #12]
      break;
 8001d8a:	e000      	b.n	8001d8e <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 8001d8c:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2200      	movs	r2, #0
 8001d94:	6839      	ldr	r1, [r7, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f000 fe90 	bl	8002abc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a36      	ldr	r2, [pc, #216]	; (8001e7c <HAL_TIM_OC_Stop_IT+0x184>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d004      	beq.n	8001db0 <HAL_TIM_OC_Stop_IT+0xb8>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a35      	ldr	r2, [pc, #212]	; (8001e80 <HAL_TIM_OC_Stop_IT+0x188>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d101      	bne.n	8001db4 <HAL_TIM_OC_Stop_IT+0xbc>
 8001db0:	2301      	movs	r3, #1
 8001db2:	e000      	b.n	8001db6 <HAL_TIM_OC_Stop_IT+0xbe>
 8001db4:	2300      	movs	r3, #0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d017      	beq.n	8001dea <HAL_TIM_OC_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6a1a      	ldr	r2, [r3, #32]
 8001dc0:	f241 1311 	movw	r3, #4369	; 0x1111
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d10f      	bne.n	8001dea <HAL_TIM_OC_Stop_IT+0xf2>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6a1a      	ldr	r2, [r3, #32]
 8001dd0:	f240 4344 	movw	r3, #1092	; 0x444
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d107      	bne.n	8001dea <HAL_TIM_OC_Stop_IT+0xf2>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001de8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6a1a      	ldr	r2, [r3, #32]
 8001df0:	f241 1311 	movw	r3, #4369	; 0x1111
 8001df4:	4013      	ands	r3, r2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10f      	bne.n	8001e1a <HAL_TIM_OC_Stop_IT+0x122>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6a1a      	ldr	r2, [r3, #32]
 8001e00:	f240 4344 	movw	r3, #1092	; 0x444
 8001e04:	4013      	ands	r3, r2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d107      	bne.n	8001e1a <HAL_TIM_OC_Stop_IT+0x122>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0201 	bic.w	r2, r2, #1
 8001e18:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d104      	bne.n	8001e2a <HAL_TIM_OC_Stop_IT+0x132>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e28:	e023      	b.n	8001e72 <HAL_TIM_OC_Stop_IT+0x17a>
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	2b04      	cmp	r3, #4
 8001e2e:	d104      	bne.n	8001e3a <HAL_TIM_OC_Stop_IT+0x142>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e38:	e01b      	b.n	8001e72 <HAL_TIM_OC_Stop_IT+0x17a>
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	d104      	bne.n	8001e4a <HAL_TIM_OC_Stop_IT+0x152>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e48:	e013      	b.n	8001e72 <HAL_TIM_OC_Stop_IT+0x17a>
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	2b0c      	cmp	r3, #12
 8001e4e:	d104      	bne.n	8001e5a <HAL_TIM_OC_Stop_IT+0x162>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001e58:	e00b      	b.n	8001e72 <HAL_TIM_OC_Stop_IT+0x17a>
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	2b10      	cmp	r3, #16
 8001e5e:	d104      	bne.n	8001e6a <HAL_TIM_OC_Stop_IT+0x172>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e68:	e003      	b.n	8001e72 <HAL_TIM_OC_Stop_IT+0x17a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40010000 	.word	0x40010000
 8001e80:	40010400 	.word	0x40010400

08001e84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d122      	bne.n	8001ee0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d11b      	bne.n	8001ee0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f06f 0202 	mvn.w	r2, #2
 8001eb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 fa42 	bl	8002350 <HAL_TIM_IC_CaptureCallback>
 8001ecc:	e005      	b.n	8001eda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7fe fb16 	bl	8000500 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 fa45 	bl	8002364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	d122      	bne.n	8001f34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b04      	cmp	r3, #4
 8001efa:	d11b      	bne.n	8001f34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f06f 0204 	mvn.w	r2, #4
 8001f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2202      	movs	r2, #2
 8001f0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 fa18 	bl	8002350 <HAL_TIM_IC_CaptureCallback>
 8001f20:	e005      	b.n	8001f2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7fe faec 	bl	8000500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 fa1b 	bl	8002364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	d122      	bne.n	8001f88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	f003 0308 	and.w	r3, r3, #8
 8001f4c:	2b08      	cmp	r3, #8
 8001f4e:	d11b      	bne.n	8001f88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f06f 0208 	mvn.w	r2, #8
 8001f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2204      	movs	r2, #4
 8001f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f9ee 	bl	8002350 <HAL_TIM_IC_CaptureCallback>
 8001f74:	e005      	b.n	8001f82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7fe fac2 	bl	8000500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f9f1 	bl	8002364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	f003 0310 	and.w	r3, r3, #16
 8001f92:	2b10      	cmp	r3, #16
 8001f94:	d122      	bne.n	8001fdc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	f003 0310 	and.w	r3, r3, #16
 8001fa0:	2b10      	cmp	r3, #16
 8001fa2:	d11b      	bne.n	8001fdc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f06f 0210 	mvn.w	r2, #16
 8001fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2208      	movs	r2, #8
 8001fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f9c4 	bl	8002350 <HAL_TIM_IC_CaptureCallback>
 8001fc8:	e005      	b.n	8001fd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7fe fa98 	bl	8000500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f9c7 	bl	8002364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d10e      	bne.n	8002008 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d107      	bne.n	8002008 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f06f 0201 	mvn.w	r2, #1
 8002000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f99a 	bl	800233c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002012:	2b80      	cmp	r3, #128	; 0x80
 8002014:	d10e      	bne.n	8002034 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002020:	2b80      	cmp	r3, #128	; 0x80
 8002022:	d107      	bne.n	8002034 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800202c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 fe80 	bl	8002d34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002042:	d10e      	bne.n	8002062 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800204e:	2b80      	cmp	r3, #128	; 0x80
 8002050:	d107      	bne.n	8002062 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800205a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 fe73 	bl	8002d48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800206c:	2b40      	cmp	r3, #64	; 0x40
 800206e:	d10e      	bne.n	800208e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800207a:	2b40      	cmp	r3, #64	; 0x40
 800207c:	d107      	bne.n	800208e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f975 	bl	8002378 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	f003 0320 	and.w	r3, r3, #32
 8002098:	2b20      	cmp	r3, #32
 800209a:	d10e      	bne.n	80020ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	f003 0320 	and.w	r3, r3, #32
 80020a6:	2b20      	cmp	r3, #32
 80020a8:	d107      	bne.n	80020ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f06f 0220 	mvn.w	r2, #32
 80020b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 fe33 	bl	8002d20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
	...

080020c4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d101      	bne.n	80020de <HAL_TIM_OC_ConfigChannel+0x1a>
 80020da:	2302      	movs	r3, #2
 80020dc:	e064      	b.n	80021a8 <HAL_TIM_OC_ConfigChannel+0xe4>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b14      	cmp	r3, #20
 80020ea:	d857      	bhi.n	800219c <HAL_TIM_OC_ConfigChannel+0xd8>
 80020ec:	a201      	add	r2, pc, #4	; (adr r2, 80020f4 <HAL_TIM_OC_ConfigChannel+0x30>)
 80020ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f2:	bf00      	nop
 80020f4:	08002149 	.word	0x08002149
 80020f8:	0800219d 	.word	0x0800219d
 80020fc:	0800219d 	.word	0x0800219d
 8002100:	0800219d 	.word	0x0800219d
 8002104:	08002157 	.word	0x08002157
 8002108:	0800219d 	.word	0x0800219d
 800210c:	0800219d 	.word	0x0800219d
 8002110:	0800219d 	.word	0x0800219d
 8002114:	08002165 	.word	0x08002165
 8002118:	0800219d 	.word	0x0800219d
 800211c:	0800219d 	.word	0x0800219d
 8002120:	0800219d 	.word	0x0800219d
 8002124:	08002173 	.word	0x08002173
 8002128:	0800219d 	.word	0x0800219d
 800212c:	0800219d 	.word	0x0800219d
 8002130:	0800219d 	.word	0x0800219d
 8002134:	08002181 	.word	0x08002181
 8002138:	0800219d 	.word	0x0800219d
 800213c:	0800219d 	.word	0x0800219d
 8002140:	0800219d 	.word	0x0800219d
 8002144:	0800218f 	.word	0x0800218f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68b9      	ldr	r1, [r7, #8]
 800214e:	4618      	mov	r0, r3
 8002150:	f000 f9bc 	bl	80024cc <TIM_OC1_SetConfig>
      break;
 8002154:	e023      	b.n	800219e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68b9      	ldr	r1, [r7, #8]
 800215c:	4618      	mov	r0, r3
 800215e:	f000 fa27 	bl	80025b0 <TIM_OC2_SetConfig>
      break;
 8002162:	e01c      	b.n	800219e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68b9      	ldr	r1, [r7, #8]
 800216a:	4618      	mov	r0, r3
 800216c:	f000 fa98 	bl	80026a0 <TIM_OC3_SetConfig>
      break;
 8002170:	e015      	b.n	800219e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68b9      	ldr	r1, [r7, #8]
 8002178:	4618      	mov	r0, r3
 800217a:	f000 fb07 	bl	800278c <TIM_OC4_SetConfig>
      break;
 800217e:	e00e      	b.n	800219e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68b9      	ldr	r1, [r7, #8]
 8002186:	4618      	mov	r0, r3
 8002188:	f000 fb58 	bl	800283c <TIM_OC5_SetConfig>
      break;
 800218c:	e007      	b.n	800219e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68b9      	ldr	r1, [r7, #8]
 8002194:	4618      	mov	r0, r3
 8002196:	f000 fba3 	bl	80028e0 <TIM_OC6_SetConfig>
      break;
 800219a:	e000      	b.n	800219e <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 800219c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d101      	bne.n	80021c8 <HAL_TIM_ConfigClockSource+0x18>
 80021c4:	2302      	movs	r3, #2
 80021c6:	e0b3      	b.n	8002330 <HAL_TIM_ConfigClockSource+0x180>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2202      	movs	r2, #2
 80021d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	4b55      	ldr	r3, [pc, #340]	; (8002338 <HAL_TIM_ConfigClockSource+0x188>)
 80021e4:	4013      	ands	r3, r2
 80021e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002200:	d03e      	beq.n	8002280 <HAL_TIM_ConfigClockSource+0xd0>
 8002202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002206:	f200 8087 	bhi.w	8002318 <HAL_TIM_ConfigClockSource+0x168>
 800220a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800220e:	f000 8085 	beq.w	800231c <HAL_TIM_ConfigClockSource+0x16c>
 8002212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002216:	d87f      	bhi.n	8002318 <HAL_TIM_ConfigClockSource+0x168>
 8002218:	2b70      	cmp	r3, #112	; 0x70
 800221a:	d01a      	beq.n	8002252 <HAL_TIM_ConfigClockSource+0xa2>
 800221c:	2b70      	cmp	r3, #112	; 0x70
 800221e:	d87b      	bhi.n	8002318 <HAL_TIM_ConfigClockSource+0x168>
 8002220:	2b60      	cmp	r3, #96	; 0x60
 8002222:	d050      	beq.n	80022c6 <HAL_TIM_ConfigClockSource+0x116>
 8002224:	2b60      	cmp	r3, #96	; 0x60
 8002226:	d877      	bhi.n	8002318 <HAL_TIM_ConfigClockSource+0x168>
 8002228:	2b50      	cmp	r3, #80	; 0x50
 800222a:	d03c      	beq.n	80022a6 <HAL_TIM_ConfigClockSource+0xf6>
 800222c:	2b50      	cmp	r3, #80	; 0x50
 800222e:	d873      	bhi.n	8002318 <HAL_TIM_ConfigClockSource+0x168>
 8002230:	2b40      	cmp	r3, #64	; 0x40
 8002232:	d058      	beq.n	80022e6 <HAL_TIM_ConfigClockSource+0x136>
 8002234:	2b40      	cmp	r3, #64	; 0x40
 8002236:	d86f      	bhi.n	8002318 <HAL_TIM_ConfigClockSource+0x168>
 8002238:	2b30      	cmp	r3, #48	; 0x30
 800223a:	d064      	beq.n	8002306 <HAL_TIM_ConfigClockSource+0x156>
 800223c:	2b30      	cmp	r3, #48	; 0x30
 800223e:	d86b      	bhi.n	8002318 <HAL_TIM_ConfigClockSource+0x168>
 8002240:	2b20      	cmp	r3, #32
 8002242:	d060      	beq.n	8002306 <HAL_TIM_ConfigClockSource+0x156>
 8002244:	2b20      	cmp	r3, #32
 8002246:	d867      	bhi.n	8002318 <HAL_TIM_ConfigClockSource+0x168>
 8002248:	2b00      	cmp	r3, #0
 800224a:	d05c      	beq.n	8002306 <HAL_TIM_ConfigClockSource+0x156>
 800224c:	2b10      	cmp	r3, #16
 800224e:	d05a      	beq.n	8002306 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002250:	e062      	b.n	8002318 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6818      	ldr	r0, [r3, #0]
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	6899      	ldr	r1, [r3, #8]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	f000 fc0b 	bl	8002a7c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002274:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	609a      	str	r2, [r3, #8]
      break;
 800227e:	e04e      	b.n	800231e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6818      	ldr	r0, [r3, #0]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	6899      	ldr	r1, [r3, #8]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	f000 fbf4 	bl	8002a7c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022a2:	609a      	str	r2, [r3, #8]
      break;
 80022a4:	e03b      	b.n	800231e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6818      	ldr	r0, [r3, #0]
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	6859      	ldr	r1, [r3, #4]
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	461a      	mov	r2, r3
 80022b4:	f000 fb68 	bl	8002988 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2150      	movs	r1, #80	; 0x50
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 fbc1 	bl	8002a46 <TIM_ITRx_SetConfig>
      break;
 80022c4:	e02b      	b.n	800231e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6818      	ldr	r0, [r3, #0]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	6859      	ldr	r1, [r3, #4]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	461a      	mov	r2, r3
 80022d4:	f000 fb87 	bl	80029e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2160      	movs	r1, #96	; 0x60
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 fbb1 	bl	8002a46 <TIM_ITRx_SetConfig>
      break;
 80022e4:	e01b      	b.n	800231e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6818      	ldr	r0, [r3, #0]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	6859      	ldr	r1, [r3, #4]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	461a      	mov	r2, r3
 80022f4:	f000 fb48 	bl	8002988 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2140      	movs	r1, #64	; 0x40
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 fba1 	bl	8002a46 <TIM_ITRx_SetConfig>
      break;
 8002304:	e00b      	b.n	800231e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4619      	mov	r1, r3
 8002310:	4610      	mov	r0, r2
 8002312:	f000 fb98 	bl	8002a46 <TIM_ITRx_SetConfig>
        break;
 8002316:	e002      	b.n	800231e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002318:	bf00      	nop
 800231a:	e000      	b.n	800231e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800231c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	fffeff88 	.word	0xfffeff88

0800233c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a40      	ldr	r2, [pc, #256]	; (80024a0 <TIM_Base_SetConfig+0x114>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d013      	beq.n	80023cc <TIM_Base_SetConfig+0x40>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023aa:	d00f      	beq.n	80023cc <TIM_Base_SetConfig+0x40>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a3d      	ldr	r2, [pc, #244]	; (80024a4 <TIM_Base_SetConfig+0x118>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d00b      	beq.n	80023cc <TIM_Base_SetConfig+0x40>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a3c      	ldr	r2, [pc, #240]	; (80024a8 <TIM_Base_SetConfig+0x11c>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d007      	beq.n	80023cc <TIM_Base_SetConfig+0x40>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a3b      	ldr	r2, [pc, #236]	; (80024ac <TIM_Base_SetConfig+0x120>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d003      	beq.n	80023cc <TIM_Base_SetConfig+0x40>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a3a      	ldr	r2, [pc, #232]	; (80024b0 <TIM_Base_SetConfig+0x124>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d108      	bne.n	80023de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	4313      	orrs	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a2f      	ldr	r2, [pc, #188]	; (80024a0 <TIM_Base_SetConfig+0x114>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d02b      	beq.n	800243e <TIM_Base_SetConfig+0xb2>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ec:	d027      	beq.n	800243e <TIM_Base_SetConfig+0xb2>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a2c      	ldr	r2, [pc, #176]	; (80024a4 <TIM_Base_SetConfig+0x118>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d023      	beq.n	800243e <TIM_Base_SetConfig+0xb2>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a2b      	ldr	r2, [pc, #172]	; (80024a8 <TIM_Base_SetConfig+0x11c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d01f      	beq.n	800243e <TIM_Base_SetConfig+0xb2>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a2a      	ldr	r2, [pc, #168]	; (80024ac <TIM_Base_SetConfig+0x120>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d01b      	beq.n	800243e <TIM_Base_SetConfig+0xb2>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a29      	ldr	r2, [pc, #164]	; (80024b0 <TIM_Base_SetConfig+0x124>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d017      	beq.n	800243e <TIM_Base_SetConfig+0xb2>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a28      	ldr	r2, [pc, #160]	; (80024b4 <TIM_Base_SetConfig+0x128>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d013      	beq.n	800243e <TIM_Base_SetConfig+0xb2>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a27      	ldr	r2, [pc, #156]	; (80024b8 <TIM_Base_SetConfig+0x12c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d00f      	beq.n	800243e <TIM_Base_SetConfig+0xb2>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a26      	ldr	r2, [pc, #152]	; (80024bc <TIM_Base_SetConfig+0x130>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d00b      	beq.n	800243e <TIM_Base_SetConfig+0xb2>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a25      	ldr	r2, [pc, #148]	; (80024c0 <TIM_Base_SetConfig+0x134>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d007      	beq.n	800243e <TIM_Base_SetConfig+0xb2>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a24      	ldr	r2, [pc, #144]	; (80024c4 <TIM_Base_SetConfig+0x138>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d003      	beq.n	800243e <TIM_Base_SetConfig+0xb2>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a23      	ldr	r2, [pc, #140]	; (80024c8 <TIM_Base_SetConfig+0x13c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d108      	bne.n	8002450 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002444:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	4313      	orrs	r3, r2
 800244e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	4313      	orrs	r3, r2
 800245c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a0a      	ldr	r2, [pc, #40]	; (80024a0 <TIM_Base_SetConfig+0x114>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d003      	beq.n	8002484 <TIM_Base_SetConfig+0xf8>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a0c      	ldr	r2, [pc, #48]	; (80024b0 <TIM_Base_SetConfig+0x124>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d103      	bne.n	800248c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	691a      	ldr	r2, [r3, #16]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	615a      	str	r2, [r3, #20]
}
 8002492:	bf00      	nop
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40010000 	.word	0x40010000
 80024a4:	40000400 	.word	0x40000400
 80024a8:	40000800 	.word	0x40000800
 80024ac:	40000c00 	.word	0x40000c00
 80024b0:	40010400 	.word	0x40010400
 80024b4:	40014000 	.word	0x40014000
 80024b8:	40014400 	.word	0x40014400
 80024bc:	40014800 	.word	0x40014800
 80024c0:	40001800 	.word	0x40001800
 80024c4:	40001c00 	.word	0x40001c00
 80024c8:	40002000 	.word	0x40002000

080024cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b087      	sub	sp, #28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	f023 0201 	bic.w	r2, r3, #1
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	4b2b      	ldr	r3, [pc, #172]	; (80025a4 <TIM_OC1_SetConfig+0xd8>)
 80024f8:	4013      	ands	r3, r2
 80024fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f023 0303 	bic.w	r3, r3, #3
 8002502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	4313      	orrs	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f023 0302 	bic.w	r3, r3, #2
 8002514:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	4313      	orrs	r3, r2
 800251e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a21      	ldr	r2, [pc, #132]	; (80025a8 <TIM_OC1_SetConfig+0xdc>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d003      	beq.n	8002530 <TIM_OC1_SetConfig+0x64>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a20      	ldr	r2, [pc, #128]	; (80025ac <TIM_OC1_SetConfig+0xe0>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d10c      	bne.n	800254a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	f023 0308 	bic.w	r3, r3, #8
 8002536:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	4313      	orrs	r3, r2
 8002540:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	f023 0304 	bic.w	r3, r3, #4
 8002548:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a16      	ldr	r2, [pc, #88]	; (80025a8 <TIM_OC1_SetConfig+0xdc>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d003      	beq.n	800255a <TIM_OC1_SetConfig+0x8e>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a15      	ldr	r2, [pc, #84]	; (80025ac <TIM_OC1_SetConfig+0xe0>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d111      	bne.n	800257e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002560:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002568:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	4313      	orrs	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4313      	orrs	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	621a      	str	r2, [r3, #32]
}
 8002598:	bf00      	nop
 800259a:	371c      	adds	r7, #28
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	fffeff8f 	.word	0xfffeff8f
 80025a8:	40010000 	.word	0x40010000
 80025ac:	40010400 	.word	0x40010400

080025b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b087      	sub	sp, #28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	f023 0210 	bic.w	r2, r3, #16
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	4b2e      	ldr	r3, [pc, #184]	; (8002694 <TIM_OC2_SetConfig+0xe4>)
 80025dc:	4013      	ands	r3, r2
 80025de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	021b      	lsls	r3, r3, #8
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	f023 0320 	bic.w	r3, r3, #32
 80025fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	4313      	orrs	r3, r2
 8002606:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a23      	ldr	r2, [pc, #140]	; (8002698 <TIM_OC2_SetConfig+0xe8>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d003      	beq.n	8002618 <TIM_OC2_SetConfig+0x68>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a22      	ldr	r2, [pc, #136]	; (800269c <TIM_OC2_SetConfig+0xec>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d10d      	bne.n	8002634 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800261e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	011b      	lsls	r3, r3, #4
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	4313      	orrs	r3, r2
 800262a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002632:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a18      	ldr	r2, [pc, #96]	; (8002698 <TIM_OC2_SetConfig+0xe8>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d003      	beq.n	8002644 <TIM_OC2_SetConfig+0x94>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a17      	ldr	r2, [pc, #92]	; (800269c <TIM_OC2_SetConfig+0xec>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d113      	bne.n	800266c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800264a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002652:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	695b      	ldr	r3, [r3, #20]
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	4313      	orrs	r3, r2
 800265e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	4313      	orrs	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685a      	ldr	r2, [r3, #4]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	621a      	str	r2, [r3, #32]
}
 8002686:	bf00      	nop
 8002688:	371c      	adds	r7, #28
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	feff8fff 	.word	0xfeff8fff
 8002698:	40010000 	.word	0x40010000
 800269c:	40010400 	.word	0x40010400

080026a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b087      	sub	sp, #28
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	4b2d      	ldr	r3, [pc, #180]	; (8002780 <TIM_OC3_SetConfig+0xe0>)
 80026cc:	4013      	ands	r3, r2
 80026ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f023 0303 	bic.w	r3, r3, #3
 80026d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	4313      	orrs	r3, r2
 80026e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	021b      	lsls	r3, r3, #8
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a22      	ldr	r2, [pc, #136]	; (8002784 <TIM_OC3_SetConfig+0xe4>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d003      	beq.n	8002706 <TIM_OC3_SetConfig+0x66>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a21      	ldr	r2, [pc, #132]	; (8002788 <TIM_OC3_SetConfig+0xe8>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d10d      	bne.n	8002722 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800270c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	021b      	lsls	r3, r3, #8
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	4313      	orrs	r3, r2
 8002718:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002720:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a17      	ldr	r2, [pc, #92]	; (8002784 <TIM_OC3_SetConfig+0xe4>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d003      	beq.n	8002732 <TIM_OC3_SetConfig+0x92>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a16      	ldr	r2, [pc, #88]	; (8002788 <TIM_OC3_SetConfig+0xe8>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d113      	bne.n	800275a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002738:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002740:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	011b      	lsls	r3, r3, #4
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	4313      	orrs	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	011b      	lsls	r3, r3, #4
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	4313      	orrs	r3, r2
 8002758:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	621a      	str	r2, [r3, #32]
}
 8002774:	bf00      	nop
 8002776:	371c      	adds	r7, #28
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	fffeff8f 	.word	0xfffeff8f
 8002784:	40010000 	.word	0x40010000
 8002788:	40010400 	.word	0x40010400

0800278c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800278c:	b480      	push	{r7}
 800278e:	b087      	sub	sp, #28
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	4b1e      	ldr	r3, [pc, #120]	; (8002830 <TIM_OC4_SetConfig+0xa4>)
 80027b8:	4013      	ands	r3, r2
 80027ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	021b      	lsls	r3, r3, #8
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	031b      	lsls	r3, r3, #12
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a13      	ldr	r2, [pc, #76]	; (8002834 <TIM_OC4_SetConfig+0xa8>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d003      	beq.n	80027f4 <TIM_OC4_SetConfig+0x68>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a12      	ldr	r2, [pc, #72]	; (8002838 <TIM_OC4_SetConfig+0xac>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d109      	bne.n	8002808 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	019b      	lsls	r3, r3, #6
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	4313      	orrs	r3, r2
 8002806:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	621a      	str	r2, [r3, #32]
}
 8002822:	bf00      	nop
 8002824:	371c      	adds	r7, #28
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	feff8fff 	.word	0xfeff8fff
 8002834:	40010000 	.word	0x40010000
 8002838:	40010400 	.word	0x40010400

0800283c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800283c:	b480      	push	{r7}
 800283e:	b087      	sub	sp, #28
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	4b1b      	ldr	r3, [pc, #108]	; (80028d4 <TIM_OC5_SetConfig+0x98>)
 8002868:	4013      	ands	r3, r2
 800286a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	4313      	orrs	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800287c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	041b      	lsls	r3, r3, #16
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	4313      	orrs	r3, r2
 8002888:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a12      	ldr	r2, [pc, #72]	; (80028d8 <TIM_OC5_SetConfig+0x9c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d003      	beq.n	800289a <TIM_OC5_SetConfig+0x5e>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a11      	ldr	r2, [pc, #68]	; (80028dc <TIM_OC5_SetConfig+0xa0>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d109      	bne.n	80028ae <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	021b      	lsls	r3, r3, #8
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	621a      	str	r2, [r3, #32]
}
 80028c8:	bf00      	nop
 80028ca:	371c      	adds	r7, #28
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	fffeff8f 	.word	0xfffeff8f
 80028d8:	40010000 	.word	0x40010000
 80028dc:	40010400 	.word	0x40010400

080028e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b087      	sub	sp, #28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	4b1c      	ldr	r3, [pc, #112]	; (800297c <TIM_OC6_SetConfig+0x9c>)
 800290c:	4013      	ands	r3, r2
 800290e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	021b      	lsls	r3, r3, #8
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4313      	orrs	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002922:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	051b      	lsls	r3, r3, #20
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4313      	orrs	r3, r2
 800292e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a13      	ldr	r2, [pc, #76]	; (8002980 <TIM_OC6_SetConfig+0xa0>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d003      	beq.n	8002940 <TIM_OC6_SetConfig+0x60>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a12      	ldr	r2, [pc, #72]	; (8002984 <TIM_OC6_SetConfig+0xa4>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d109      	bne.n	8002954 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002946:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	695b      	ldr	r3, [r3, #20]
 800294c:	029b      	lsls	r3, r3, #10
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	4313      	orrs	r3, r2
 8002952:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	621a      	str	r2, [r3, #32]
}
 800296e:	bf00      	nop
 8002970:	371c      	adds	r7, #28
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	feff8fff 	.word	0xfeff8fff
 8002980:	40010000 	.word	0x40010000
 8002984:	40010400 	.word	0x40010400

08002988 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002988:	b480      	push	{r7}
 800298a:	b087      	sub	sp, #28
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	f023 0201 	bic.w	r2, r3, #1
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	011b      	lsls	r3, r3, #4
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f023 030a 	bic.w	r3, r3, #10
 80029c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	621a      	str	r2, [r3, #32]
}
 80029da:	bf00      	nop
 80029dc:	371c      	adds	r7, #28
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b087      	sub	sp, #28
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	60f8      	str	r0, [r7, #12]
 80029ee:	60b9      	str	r1, [r7, #8]
 80029f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	f023 0210 	bic.w	r2, r3, #16
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	031b      	lsls	r3, r3, #12
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	621a      	str	r2, [r3, #32]
}
 8002a3a:	bf00      	nop
 8002a3c:	371c      	adds	r7, #28
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b085      	sub	sp, #20
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
 8002a4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	f043 0307 	orr.w	r3, r3, #7
 8002a68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	609a      	str	r2, [r3, #8]
}
 8002a70:	bf00      	nop
 8002a72:	3714      	adds	r7, #20
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b087      	sub	sp, #28
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
 8002a88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	021a      	lsls	r2, r3, #8
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	609a      	str	r2, [r3, #8]
}
 8002ab0:	bf00      	nop
 8002ab2:	371c      	adds	r7, #28
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b087      	sub	sp, #28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	f003 031f 	and.w	r3, r3, #31
 8002ace:	2201      	movs	r2, #1
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6a1a      	ldr	r2, [r3, #32]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	43db      	mvns	r3, r3
 8002ade:	401a      	ands	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6a1a      	ldr	r2, [r3, #32]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	f003 031f 	and.w	r3, r3, #31
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	fa01 f303 	lsl.w	r3, r1, r3
 8002af4:	431a      	orrs	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	621a      	str	r2, [r3, #32]
}
 8002afa:	bf00      	nop
 8002afc:	371c      	adds	r7, #28
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
	...

08002b08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	e06d      	b.n	8002bfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a30      	ldr	r2, [pc, #192]	; (8002c08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d004      	beq.n	8002b54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a2f      	ldr	r2, [pc, #188]	; (8002c0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d108      	bne.n	8002b66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002b5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a20      	ldr	r2, [pc, #128]	; (8002c08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d022      	beq.n	8002bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b92:	d01d      	beq.n	8002bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a1d      	ldr	r2, [pc, #116]	; (8002c10 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d018      	beq.n	8002bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a1c      	ldr	r2, [pc, #112]	; (8002c14 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d013      	beq.n	8002bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a1a      	ldr	r2, [pc, #104]	; (8002c18 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d00e      	beq.n	8002bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a15      	ldr	r2, [pc, #84]	; (8002c0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d009      	beq.n	8002bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a16      	ldr	r2, [pc, #88]	; (8002c1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d004      	beq.n	8002bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a15      	ldr	r2, [pc, #84]	; (8002c20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d10c      	bne.n	8002bea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bd6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68ba      	ldr	r2, [r7, #8]
 8002be8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	40010000 	.word	0x40010000
 8002c0c:	40010400 	.word	0x40010400
 8002c10:	40000400 	.word	0x40000400
 8002c14:	40000800 	.word	0x40000800
 8002c18:	40000c00 	.word	0x40000c00
 8002c1c:	40014000 	.word	0x40014000
 8002c20:	40001800 	.word	0x40001800

08002c24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d101      	bne.n	8002c40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	e065      	b.n	8002d0c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	041b      	lsls	r3, r3, #16
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a16      	ldr	r2, [pc, #88]	; (8002d18 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d004      	beq.n	8002cce <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a14      	ldr	r2, [pc, #80]	; (8002d1c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d115      	bne.n	8002cfa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	051b      	lsls	r3, r3, #20
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3714      	adds	r7, #20
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	40010000 	.word	0x40010000
 8002d1c:	40010400 	.word	0x40010400

08002d20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <__libc_init_array>:
 8002d5c:	b570      	push	{r4, r5, r6, lr}
 8002d5e:	4d0d      	ldr	r5, [pc, #52]	; (8002d94 <__libc_init_array+0x38>)
 8002d60:	4c0d      	ldr	r4, [pc, #52]	; (8002d98 <__libc_init_array+0x3c>)
 8002d62:	1b64      	subs	r4, r4, r5
 8002d64:	10a4      	asrs	r4, r4, #2
 8002d66:	2600      	movs	r6, #0
 8002d68:	42a6      	cmp	r6, r4
 8002d6a:	d109      	bne.n	8002d80 <__libc_init_array+0x24>
 8002d6c:	4d0b      	ldr	r5, [pc, #44]	; (8002d9c <__libc_init_array+0x40>)
 8002d6e:	4c0c      	ldr	r4, [pc, #48]	; (8002da0 <__libc_init_array+0x44>)
 8002d70:	f000 f820 	bl	8002db4 <_init>
 8002d74:	1b64      	subs	r4, r4, r5
 8002d76:	10a4      	asrs	r4, r4, #2
 8002d78:	2600      	movs	r6, #0
 8002d7a:	42a6      	cmp	r6, r4
 8002d7c:	d105      	bne.n	8002d8a <__libc_init_array+0x2e>
 8002d7e:	bd70      	pop	{r4, r5, r6, pc}
 8002d80:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d84:	4798      	blx	r3
 8002d86:	3601      	adds	r6, #1
 8002d88:	e7ee      	b.n	8002d68 <__libc_init_array+0xc>
 8002d8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d8e:	4798      	blx	r3
 8002d90:	3601      	adds	r6, #1
 8002d92:	e7f2      	b.n	8002d7a <__libc_init_array+0x1e>
 8002d94:	08002de4 	.word	0x08002de4
 8002d98:	08002de4 	.word	0x08002de4
 8002d9c:	08002de4 	.word	0x08002de4
 8002da0:	08002de8 	.word	0x08002de8

08002da4 <memset>:
 8002da4:	4402      	add	r2, r0
 8002da6:	4603      	mov	r3, r0
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d100      	bne.n	8002dae <memset+0xa>
 8002dac:	4770      	bx	lr
 8002dae:	f803 1b01 	strb.w	r1, [r3], #1
 8002db2:	e7f9      	b.n	8002da8 <memset+0x4>

08002db4 <_init>:
 8002db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002db6:	bf00      	nop
 8002db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dba:	bc08      	pop	{r3}
 8002dbc:	469e      	mov	lr, r3
 8002dbe:	4770      	bx	lr

08002dc0 <_fini>:
 8002dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dc2:	bf00      	nop
 8002dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dc6:	bc08      	pop	{r3}
 8002dc8:	469e      	mov	lr, r3
 8002dca:	4770      	bx	lr
