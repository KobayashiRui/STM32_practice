
STM32F746ZG_TMC2209_Test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051cc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  0800539c  0800539c  0001539c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056f4  080056f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080056f4  080056f4  000156f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056fc  080056fc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056fc  080056fc  000156fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005700  08005700  00015700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005704  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009d0  20000070  08005774  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a40  08005774  00020a40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f78c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002402  00000000  00000000  0002f82c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  00031c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b38  00000000  00000000  00032860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000271c9  00000000  00000000  00033398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f259  00000000  00000000  0005a561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec713  00000000  00000000  000697ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00155ecd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003954  00000000  00000000  00155f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005384 	.word	0x08005384

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08005384 	.word	0x08005384

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005c4:	f003 0301 	and.w	r3, r3, #1
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d013      	beq.n	80005f4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005d0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005d4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d00b      	beq.n	80005f4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005dc:	e000      	b.n	80005e0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005de:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d0f9      	beq.n	80005de <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ea:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	b2d2      	uxtb	r2, r2
 80005f2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005f4:	687b      	ldr	r3, [r7, #4]
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
	...

08000604 <tmc2209_readWriteArray>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void tmc2209_readWriteArray(uint8_t channel, uint8_t *data, size_t writeLength, size_t readLength)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	60b9      	str	r1, [r7, #8]
 800060c:	607a      	str	r2, [r7, #4]
 800060e:	603b      	str	r3, [r7, #0]
 8000610:	4603      	mov	r3, r0
 8000612:	73fb      	strb	r3, [r7, #15]
	//set your uart read write
	//UART_readWrite(channelToUART(channel), data, writeLength, readLength);
	HAL_HalfDuplex_EnableTransmitter(&huart2);
 8000614:	480e      	ldr	r0, [pc, #56]	; (8000650 <tmc2209_readWriteArray+0x4c>)
 8000616:	f002 fc20 	bl	8002e5a <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(&huart2, data, writeLength,3000);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	b29a      	uxth	r2, r3
 800061e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000622:	68b9      	ldr	r1, [r7, #8]
 8000624:	480a      	ldr	r0, [pc, #40]	; (8000650 <tmc2209_readWriteArray+0x4c>)
 8000626:	f002 fab5 	bl	8002b94 <HAL_UART_Transmit>

	if(readLength > 0){
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d00a      	beq.n	8000646 <tmc2209_readWriteArray+0x42>
		HAL_HalfDuplex_EnableReceiver(&huart2);
 8000630:	4807      	ldr	r0, [pc, #28]	; (8000650 <tmc2209_readWriteArray+0x4c>)
 8000632:	f002 fc64 	bl	8002efe <HAL_HalfDuplex_EnableReceiver>
		HAL_UART_Receive(&huart2, data, readLength, 3000);
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	b29a      	uxth	r2, r3
 800063a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800063e:	68b9      	ldr	r1, [r7, #8]
 8000640:	4803      	ldr	r0, [pc, #12]	; (8000650 <tmc2209_readWriteArray+0x4c>)
 8000642:	f002 fb3a 	bl	8002cba <HAL_UART_Receive>
	}
}
 8000646:	bf00      	nop
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	2000008c 	.word	0x2000008c

08000654 <tmc2209_CRC8>:

uint8_t tmc2209_CRC8(uint8_t *data, size_t length)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	6039      	str	r1, [r7, #0]
	return TMC2209_CRC(data, length);
 800065e:	2201      	movs	r2, #1
 8000660:	6839      	ldr	r1, [r7, #0]
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	f003 fc42 	bl	8003eec <tmc_CRC8>
 8000668:	4603      	mov	r3, r0
}
 800066a:	4618      	mov	r0, r3
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <periodicJob>:

static void periodicJob(uint32_t tick)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]

	tmc2209_periodicJob(&TMC2209, tick);
 800067c:	6879      	ldr	r1, [r7, #4]
 800067e:	4803      	ldr	r0, [pc, #12]	; (800068c <periodicJob+0x18>)
 8000680:	f003 fe5b 	bl	800433a <tmc2209_periodicJob>

	//StepDir_periodicJob(0);
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000598 	.word	0x20000598

08000690 <reset>:

static uint8_t reset()
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	//StepDir_init(STEPDIR_PRECISION);
	//StepDir_setPins(0, Pins.STEP, Pins.DIR, Pins.DIAG);

	return tmc2209_reset(&TMC2209);
 8000694:	4802      	ldr	r0, [pc, #8]	; (80006a0 <reset+0x10>)
 8000696:	f003 fe61 	bl	800435c <tmc2209_reset>
 800069a:	4603      	mov	r3, r0
}
 800069c:	4618      	mov	r0, r3
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20000598 	.word	0x20000598

080006a4 <restore>:

static uint8_t restore()
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	return tmc2209_restore(&TMC2209);
 80006a8:	4802      	ldr	r0, [pc, #8]	; (80006b4 <restore+0x10>)
 80006aa:	f003 fe91 	bl	80043d0 <tmc2209_restore>
 80006ae:	4603      	mov	r3, r0
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000598 	.word	0x20000598

080006b8 <TMC2209_INIT>:


void TMC2209_INIT()
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af02      	add	r7, sp, #8
	tmc_fillCRC8Table(0x07, true, 1);
 80006be:	2201      	movs	r2, #1
 80006c0:	2101      	movs	r1, #1
 80006c2:	2007      	movs	r0, #7
 80006c4:	f003 fb5a 	bl	8003d7c <tmc_fillCRC8Table>

	TMC2209_config->reset = reset;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <TMC2209_INIT+0x3c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a0a      	ldr	r2, [pc, #40]	; (80006f8 <TMC2209_INIT+0x40>)
 80006ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	TMC2209_config->restore = restore;
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <TMC2209_INIT+0x3c>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a09      	ldr	r2, [pc, #36]	; (80006fc <TMC2209_INIT+0x44>)
 80006d8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208

	tmc2209_init(&TMC2209, 0, 0, TMC2209_config, &tmc2209_defaultRegisterResetState[0]);
 80006dc:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <TMC2209_INIT+0x3c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a07      	ldr	r2, [pc, #28]	; (8000700 <TMC2209_INIT+0x48>)
 80006e2:	9200      	str	r2, [sp, #0]
 80006e4:	2200      	movs	r2, #0
 80006e6:	2100      	movs	r1, #0
 80006e8:	4806      	ldr	r0, [pc, #24]	; (8000704 <TMC2209_INIT+0x4c>)
 80006ea:	f003 fd53 	bl	8004194 <tmc2209_init>

	//restore();
}
 80006ee:	bf00      	nop
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000820 	.word	0x20000820
 80006f8:	08000691 	.word	0x08000691
 80006fc:	080006a5 	.word	0x080006a5
 8000700:	080053c4 	.word	0x080053c4
 8000704:	20000598 	.word	0x20000598

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800070e:	f000 fc5e 	bl	8000fce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000712:	f000 f831 	bl	8000778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000716:	f000 f925 	bl	8000964 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800071a:	f000 f8c5 	bl	80008a8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800071e:	f000 f8f3 	bl	8000908 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 8000722:	f000 f891 	bl	8000848 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  TMC2209_INIT();
 8000726:	f7ff ffc7 	bl	80006b8 <TMC2209_INIT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  periodicJob(HAL_GetTick());
 800072a:	f000 fca1 	bl	8001070 <HAL_GetTick>
 800072e:	4603      	mov	r3, r0
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff ff9f 	bl	8000674 <periodicJob>
	  //example read register value
	  uint32_t value = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
	  value = tmc2209_readInt(&TMC2209, TMC2209_FACTORY_CONF);
 800073a:	2107      	movs	r1, #7
 800073c:	480b      	ldr	r0, [pc, #44]	; (800076c <main+0x64>)
 800073e:	f003 fcc6 	bl	80040ce <tmc2209_readInt>
 8000742:	4603      	mov	r3, r0
 8000744:	607b      	str	r3, [r7, #4]
	  printf("FACTORY_CONF: %ld\r\n", value);
 8000746:	6879      	ldr	r1, [r7, #4]
 8000748:	4809      	ldr	r0, [pc, #36]	; (8000770 <main+0x68>)
 800074a:	f003 fe8d 	bl	8004468 <iprintf>
	  value = tmc2209_readInt(&TMC2209, TMC2209_SG_RESULT);
 800074e:	2141      	movs	r1, #65	; 0x41
 8000750:	4806      	ldr	r0, [pc, #24]	; (800076c <main+0x64>)
 8000752:	f003 fcbc 	bl	80040ce <tmc2209_readInt>
 8000756:	4603      	mov	r3, r0
 8000758:	607b      	str	r3, [r7, #4]
	  printf("SG_RESULT: %ld\r\n", value);
 800075a:	6879      	ldr	r1, [r7, #4]
 800075c:	4805      	ldr	r0, [pc, #20]	; (8000774 <main+0x6c>)
 800075e:	f003 fe83 	bl	8004468 <iprintf>
	  HAL_Delay(1000);
 8000762:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000766:	f000 fc8f 	bl	8001088 <HAL_Delay>
  {
 800076a:	e7de      	b.n	800072a <main+0x22>
 800076c:	20000598 	.word	0x20000598
 8000770:	0800539c 	.word	0x0800539c
 8000774:	080053b0 	.word	0x080053b0

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b094      	sub	sp, #80	; 0x50
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 0320 	add.w	r3, r7, #32
 8000782:	2230      	movs	r2, #48	; 0x30
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f003 fe66 	bl	8004458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800079c:	f001 f88c 	bl	80018b8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a0:	4b27      	ldr	r3, [pc, #156]	; (8000840 <SystemClock_Config+0xc8>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	4a26      	ldr	r2, [pc, #152]	; (8000840 <SystemClock_Config+0xc8>)
 80007a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007aa:	6413      	str	r3, [r2, #64]	; 0x40
 80007ac:	4b24      	ldr	r3, [pc, #144]	; (8000840 <SystemClock_Config+0xc8>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007b8:	4b22      	ldr	r3, [pc, #136]	; (8000844 <SystemClock_Config+0xcc>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007c0:	4a20      	ldr	r2, [pc, #128]	; (8000844 <SystemClock_Config+0xcc>)
 80007c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c6:	6013      	str	r3, [r2, #0]
 80007c8:	4b1e      	ldr	r3, [pc, #120]	; (8000844 <SystemClock_Config+0xcc>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d4:	2301      	movs	r3, #1
 80007d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007d8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007de:	2302      	movs	r3, #2
 80007e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007e8:	2304      	movs	r3, #4
 80007ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80007ec:	2348      	movs	r3, #72	; 0x48
 80007ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f0:	2302      	movs	r3, #2
 80007f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80007f4:	2303      	movs	r3, #3
 80007f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f8:	f107 0320 	add.w	r3, r7, #32
 80007fc:	4618      	mov	r0, r3
 80007fe:	f001 f86b 	bl	80018d8 <HAL_RCC_OscConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000808:	f000 f9ae 	bl	8000b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080c:	230f      	movs	r3, #15
 800080e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000810:	2302      	movs	r3, #2
 8000812:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000818:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000822:	f107 030c 	add.w	r3, r7, #12
 8000826:	2102      	movs	r1, #2
 8000828:	4618      	mov	r0, r3
 800082a:	f001 faf9 	bl	8001e20 <HAL_RCC_ClockConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000834:	f000 f998 	bl	8000b68 <Error_Handler>
  }
}
 8000838:	bf00      	nop
 800083a:	3750      	adds	r7, #80	; 0x50
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40023800 	.word	0x40023800
 8000844:	40007000 	.word	0x40007000

08000848 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800084c:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MX_USART2_UART_Init+0x58>)
 800084e:	4a15      	ldr	r2, [pc, #84]	; (80008a4 <MX_USART2_UART_Init+0x5c>)
 8000850:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000852:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <MX_USART2_UART_Init+0x58>)
 8000854:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000858:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_USART2_UART_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_USART2_UART_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_USART2_UART_Init+0x58>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_USART2_UART_Init+0x58>)
 800086e:	220c      	movs	r2, #12
 8000870:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000872:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <MX_USART2_UART_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000878:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_USART2_UART_Init+0x58>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <MX_USART2_UART_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <MX_USART2_UART_Init+0x58>)
 8000886:	2200      	movs	r2, #0
 8000888:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 800088a:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_USART2_UART_Init+0x58>)
 800088c:	f002 f92c 	bl	8002ae8 <HAL_HalfDuplex_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000896:	f000 f967 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	2000008c 	.word	0x2000008c
 80008a4:	40004400 	.word	0x40004400

080008a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_USART3_UART_Init+0x58>)
 80008ae:	4a15      	ldr	r2, [pc, #84]	; (8000904 <MX_USART3_UART_Init+0x5c>)
 80008b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008b2:	4b13      	ldr	r3, [pc, #76]	; (8000900 <MX_USART3_UART_Init+0x58>)
 80008b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_USART3_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_USART3_UART_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_USART3_UART_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_USART3_UART_Init+0x58>)
 80008ce:	220c      	movs	r2, #12
 80008d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <MX_USART3_UART_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_USART3_UART_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <MX_USART3_UART_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_USART3_UART_Init+0x58>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_USART3_UART_Init+0x58>)
 80008ec:	f002 f8ae 	bl	8002a4c <HAL_UART_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008f6:	f000 f937 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000110 	.word	0x20000110
 8000904:	40004800 	.word	0x40004800

08000908 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800090c:	4b14      	ldr	r3, [pc, #80]	; (8000960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000912:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000916:	2206      	movs	r2, #6
 8000918:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091c:	2202      	movs	r2, #2
 800091e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000920:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000928:	2202      	movs	r2, #2
 800092a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800092c:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092e:	2201      	movs	r2, #1
 8000930:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000934:	2200      	movs	r2, #0
 8000936:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093a:	2200      	movs	r2, #0
 800093c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000940:	2201      	movs	r2, #1
 8000942:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000946:	2200      	movs	r2, #0
 8000948:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800094a:	4805      	ldr	r0, [pc, #20]	; (8000960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094c:	f000 fe6b 	bl	8001626 <HAL_PCD_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000956:	f000 f907 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000194 	.word	0x20000194

08000964 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08c      	sub	sp, #48	; 0x30
 8000968:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
 8000978:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097a:	4b68      	ldr	r3, [pc, #416]	; (8000b1c <MX_GPIO_Init+0x1b8>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a67      	ldr	r2, [pc, #412]	; (8000b1c <MX_GPIO_Init+0x1b8>)
 8000980:	f043 0304 	orr.w	r3, r3, #4
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b65      	ldr	r3, [pc, #404]	; (8000b1c <MX_GPIO_Init+0x1b8>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0304 	and.w	r3, r3, #4
 800098e:	61bb      	str	r3, [r7, #24]
 8000990:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000992:	4b62      	ldr	r3, [pc, #392]	; (8000b1c <MX_GPIO_Init+0x1b8>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a61      	ldr	r2, [pc, #388]	; (8000b1c <MX_GPIO_Init+0x1b8>)
 8000998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b5f      	ldr	r3, [pc, #380]	; (8000b1c <MX_GPIO_Init+0x1b8>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009a6:	617b      	str	r3, [r7, #20]
 80009a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	4b5c      	ldr	r3, [pc, #368]	; (8000b1c <MX_GPIO_Init+0x1b8>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a5b      	ldr	r2, [pc, #364]	; (8000b1c <MX_GPIO_Init+0x1b8>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b59      	ldr	r3, [pc, #356]	; (8000b1c <MX_GPIO_Init+0x1b8>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c2:	4b56      	ldr	r3, [pc, #344]	; (8000b1c <MX_GPIO_Init+0x1b8>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a55      	ldr	r2, [pc, #340]	; (8000b1c <MX_GPIO_Init+0x1b8>)
 80009c8:	f043 0302 	orr.w	r3, r3, #2
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b53      	ldr	r3, [pc, #332]	; (8000b1c <MX_GPIO_Init+0x1b8>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009da:	4b50      	ldr	r3, [pc, #320]	; (8000b1c <MX_GPIO_Init+0x1b8>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a4f      	ldr	r2, [pc, #316]	; (8000b1c <MX_GPIO_Init+0x1b8>)
 80009e0:	f043 0308 	orr.w	r3, r3, #8
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b4d      	ldr	r3, [pc, #308]	; (8000b1c <MX_GPIO_Init+0x1b8>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0308 	and.w	r3, r3, #8
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009f2:	4b4a      	ldr	r3, [pc, #296]	; (8000b1c <MX_GPIO_Init+0x1b8>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a49      	ldr	r2, [pc, #292]	; (8000b1c <MX_GPIO_Init+0x1b8>)
 80009f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b47      	ldr	r3, [pc, #284]	; (8000b1c <MX_GPIO_Init+0x1b8>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a10:	4843      	ldr	r0, [pc, #268]	; (8000b20 <MX_GPIO_Init+0x1bc>)
 8000a12:	f000 fdef 	bl	80015f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2140      	movs	r1, #64	; 0x40
 8000a1a:	4842      	ldr	r0, [pc, #264]	; (8000b24 <MX_GPIO_Init+0x1c0>)
 8000a1c:	f000 fdea 	bl	80015f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a26:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	483c      	ldr	r0, [pc, #240]	; (8000b28 <MX_GPIO_Init+0x1c4>)
 8000a38:	f000 fc30 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a3c:	2332      	movs	r3, #50	; 0x32
 8000a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a40:	2302      	movs	r3, #2
 8000a42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a4c:	230b      	movs	r3, #11
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a50:	f107 031c 	add.w	r3, r7, #28
 8000a54:	4619      	mov	r1, r3
 8000a56:	4834      	ldr	r0, [pc, #208]	; (8000b28 <MX_GPIO_Init+0x1c4>)
 8000a58:	f000 fc20 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a5c:	2386      	movs	r3, #134	; 0x86
 8000a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a6c:	230b      	movs	r3, #11
 8000a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	4619      	mov	r1, r3
 8000a76:	482d      	ldr	r0, [pc, #180]	; (8000b2c <MX_GPIO_Init+0x1c8>)
 8000a78:	f000 fc10 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a7c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a82:	2301      	movs	r3, #1
 8000a84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4619      	mov	r1, r3
 8000a94:	4822      	ldr	r0, [pc, #136]	; (8000b20 <MX_GPIO_Init+0x1bc>)
 8000a96:	f000 fc01 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aac:	230b      	movs	r3, #11
 8000aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ab0:	f107 031c 	add.w	r3, r7, #28
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	481a      	ldr	r0, [pc, #104]	; (8000b20 <MX_GPIO_Init+0x1bc>)
 8000ab8:	f000 fbf0 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000abc:	2340      	movs	r3, #64	; 0x40
 8000abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000acc:	f107 031c 	add.w	r3, r7, #28
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4814      	ldr	r0, [pc, #80]	; (8000b24 <MX_GPIO_Init+0x1c0>)
 8000ad4:	f000 fbe2 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ad8:	2380      	movs	r3, #128	; 0x80
 8000ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000adc:	2300      	movs	r3, #0
 8000ade:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ae4:	f107 031c 	add.w	r3, r7, #28
 8000ae8:	4619      	mov	r1, r3
 8000aea:	480e      	ldr	r0, [pc, #56]	; (8000b24 <MX_GPIO_Init+0x1c0>)
 8000aec:	f000 fbd6 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000af0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af6:	2302      	movs	r3, #2
 8000af8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afe:	2303      	movs	r3, #3
 8000b00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b02:	230b      	movs	r3, #11
 8000b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b06:	f107 031c 	add.w	r3, r7, #28
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4805      	ldr	r0, [pc, #20]	; (8000b24 <MX_GPIO_Init+0x1c0>)
 8000b0e:	f000 fbc5 	bl	800129c <HAL_GPIO_Init>

}
 8000b12:	bf00      	nop
 8000b14:	3730      	adds	r7, #48	; 0x30
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020400 	.word	0x40020400
 8000b24:	40021800 	.word	0x40021800
 8000b28:	40020800 	.word	0x40020800
 8000b2c:	40020000 	.word	0x40020000

08000b30 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	e009      	b.n	8000b56 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	1c5a      	adds	r2, r3, #1
 8000b46:	60ba      	str	r2, [r7, #8]
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fd32 	bl	80005b4 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	3301      	adds	r3, #1
 8000b54:	617b      	str	r3, [r7, #20]
 8000b56:	697a      	ldr	r2, [r7, #20]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	dbf1      	blt.n	8000b42 <_write+0x12>
  }
  return len;
 8000b5e:	687b      	ldr	r3, [r7, #4]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3718      	adds	r7, #24
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6c:	b672      	cpsid	i
}
 8000b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <Error_Handler+0x8>
	...

08000b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <HAL_MspInit+0x44>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	4a0e      	ldr	r2, [pc, #56]	; (8000bb8 <HAL_MspInit+0x44>)
 8000b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b84:	6413      	str	r3, [r2, #64]	; 0x40
 8000b86:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <HAL_MspInit+0x44>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <HAL_MspInit+0x44>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	4a08      	ldr	r2, [pc, #32]	; (8000bb8 <HAL_MspInit+0x44>)
 8000b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_MspInit+0x44>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800

08000bbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b0ac      	sub	sp, #176	; 0xb0
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bd4:	f107 0318 	add.w	r3, r7, #24
 8000bd8:	2284      	movs	r2, #132	; 0x84
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f003 fc3b 	bl	8004458 <memset>
  if(huart->Instance==USART2)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a42      	ldr	r2, [pc, #264]	; (8000cf0 <HAL_UART_MspInit+0x134>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d13b      	bne.n	8000c64 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bec:	2380      	movs	r3, #128	; 0x80
 8000bee:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf4:	f107 0318 	add.w	r3, r7, #24
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f001 fb37 	bl	800226c <HAL_RCCEx_PeriphCLKConfig>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c04:	f7ff ffb0 	bl	8000b68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c08:	4b3a      	ldr	r3, [pc, #232]	; (8000cf4 <HAL_UART_MspInit+0x138>)
 8000c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0c:	4a39      	ldr	r2, [pc, #228]	; (8000cf4 <HAL_UART_MspInit+0x138>)
 8000c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c12:	6413      	str	r3, [r2, #64]	; 0x40
 8000c14:	4b37      	ldr	r3, [pc, #220]	; (8000cf4 <HAL_UART_MspInit+0x138>)
 8000c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1c:	617b      	str	r3, [r7, #20]
 8000c1e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c20:	4b34      	ldr	r3, [pc, #208]	; (8000cf4 <HAL_UART_MspInit+0x138>)
 8000c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c24:	4a33      	ldr	r2, [pc, #204]	; (8000cf4 <HAL_UART_MspInit+0x138>)
 8000c26:	f043 0308 	orr.w	r3, r3, #8
 8000c2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2c:	4b31      	ldr	r3, [pc, #196]	; (8000cf4 <HAL_UART_MspInit+0x138>)
 8000c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c30:	f003 0308 	and.w	r3, r3, #8
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c38:	2320      	movs	r3, #32
 8000c3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c3e:	2312      	movs	r3, #18
 8000c40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c50:	2307      	movs	r3, #7
 8000c52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c56:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4826      	ldr	r0, [pc, #152]	; (8000cf8 <HAL_UART_MspInit+0x13c>)
 8000c5e:	f000 fb1d 	bl	800129c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c62:	e041      	b.n	8000ce8 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART3)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a24      	ldr	r2, [pc, #144]	; (8000cfc <HAL_UART_MspInit+0x140>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d13c      	bne.n	8000ce8 <HAL_UART_MspInit+0x12c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c72:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c74:	2300      	movs	r3, #0
 8000c76:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c78:	f107 0318 	add.w	r3, r7, #24
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f001 faf5 	bl	800226c <HAL_RCCEx_PeriphCLKConfig>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8000c88:	f7ff ff6e 	bl	8000b68 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c8c:	4b19      	ldr	r3, [pc, #100]	; (8000cf4 <HAL_UART_MspInit+0x138>)
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c90:	4a18      	ldr	r2, [pc, #96]	; (8000cf4 <HAL_UART_MspInit+0x138>)
 8000c92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c96:	6413      	str	r3, [r2, #64]	; 0x40
 8000c98:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <HAL_UART_MspInit+0x138>)
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca4:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <HAL_UART_MspInit+0x138>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca8:	4a12      	ldr	r2, [pc, #72]	; (8000cf4 <HAL_UART_MspInit+0x138>)
 8000caa:	f043 0308 	orr.w	r3, r3, #8
 8000cae:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb0:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <HAL_UART_MspInit+0x138>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb4:	f003 0308 	and.w	r3, r3, #8
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cbc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cd6:	2307      	movs	r3, #7
 8000cd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cdc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <HAL_UART_MspInit+0x13c>)
 8000ce4:	f000 fada 	bl	800129c <HAL_GPIO_Init>
}
 8000ce8:	bf00      	nop
 8000cea:	37b0      	adds	r7, #176	; 0xb0
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40004400 	.word	0x40004400
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40020c00 	.word	0x40020c00
 8000cfc:	40004800 	.word	0x40004800

08000d00 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b0ac      	sub	sp, #176	; 0xb0
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d18:	f107 0318 	add.w	r3, r7, #24
 8000d1c:	2284      	movs	r2, #132	; 0x84
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f003 fb99 	bl	8004458 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d2e:	d159      	bne.n	8000de4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000d30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000d34:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d3c:	f107 0318 	add.w	r3, r7, #24
 8000d40:	4618      	mov	r0, r3
 8000d42:	f001 fa93 	bl	800226c <HAL_RCCEx_PeriphCLKConfig>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000d4c:	f7ff ff0c 	bl	8000b68 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d50:	4b26      	ldr	r3, [pc, #152]	; (8000dec <HAL_PCD_MspInit+0xec>)
 8000d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d54:	4a25      	ldr	r2, [pc, #148]	; (8000dec <HAL_PCD_MspInit+0xec>)
 8000d56:	f043 0301 	orr.w	r3, r3, #1
 8000d5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5c:	4b23      	ldr	r3, [pc, #140]	; (8000dec <HAL_PCD_MspInit+0xec>)
 8000d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	617b      	str	r3, [r7, #20]
 8000d66:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d68:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d82:	230a      	movs	r3, #10
 8000d84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d88:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4818      	ldr	r0, [pc, #96]	; (8000df0 <HAL_PCD_MspInit+0xf0>)
 8000d90:	f000 fa84 	bl	800129c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000da8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dac:	4619      	mov	r1, r3
 8000dae:	4810      	ldr	r0, [pc, #64]	; (8000df0 <HAL_PCD_MspInit+0xf0>)
 8000db0:	f000 fa74 	bl	800129c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000db4:	4b0d      	ldr	r3, [pc, #52]	; (8000dec <HAL_PCD_MspInit+0xec>)
 8000db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000db8:	4a0c      	ldr	r2, [pc, #48]	; (8000dec <HAL_PCD_MspInit+0xec>)
 8000dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dbe:	6353      	str	r3, [r2, #52]	; 0x34
 8000dc0:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <HAL_PCD_MspInit+0xec>)
 8000dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	4b07      	ldr	r3, [pc, #28]	; (8000dec <HAL_PCD_MspInit+0xec>)
 8000dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd0:	4a06      	ldr	r2, [pc, #24]	; (8000dec <HAL_PCD_MspInit+0xec>)
 8000dd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd6:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd8:	4b04      	ldr	r3, [pc, #16]	; (8000dec <HAL_PCD_MspInit+0xec>)
 8000dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ddc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000de4:	bf00      	nop
 8000de6:	37b0      	adds	r7, #176	; 0xb0
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40020000 	.word	0x40020000

08000df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <NMI_Handler+0x4>

08000dfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfe:	e7fe      	b.n	8000dfe <HardFault_Handler+0x4>

08000e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <MemManage_Handler+0x4>

08000e06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0a:	e7fe      	b.n	8000e0a <BusFault_Handler+0x4>

08000e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <UsageFault_Handler+0x4>

08000e12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e40:	f000 f902 	bl	8001048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	e00a      	b.n	8000e70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e5a:	f3af 8000 	nop.w
 8000e5e:	4601      	mov	r1, r0
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	1c5a      	adds	r2, r3, #1
 8000e64:	60ba      	str	r2, [r7, #8]
 8000e66:	b2ca      	uxtb	r2, r1
 8000e68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	617b      	str	r3, [r7, #20]
 8000e70:	697a      	ldr	r2, [r7, #20]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	dbf0      	blt.n	8000e5a <_read+0x12>
	}

return len;
 8000e78:	687b      	ldr	r3, [r7, #4]
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000e82:	b480      	push	{r7}
 8000e84:	b083      	sub	sp, #12
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
	return -1;
 8000e8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	b083      	sub	sp, #12
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
 8000ea2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eaa:	605a      	str	r2, [r3, #4]
	return 0;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <_isatty>:

int _isatty(int file)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b083      	sub	sp, #12
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
	return 1;
 8000ec2:	2301      	movs	r3, #1
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
	return 0;
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3714      	adds	r7, #20
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
	...

08000eec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ef4:	4a14      	ldr	r2, [pc, #80]	; (8000f48 <_sbrk+0x5c>)
 8000ef6:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <_sbrk+0x60>)
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f00:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <_sbrk+0x64>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d102      	bne.n	8000f0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <_sbrk+0x64>)
 8000f0a:	4a12      	ldr	r2, [pc, #72]	; (8000f54 <_sbrk+0x68>)
 8000f0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f0e:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <_sbrk+0x64>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4413      	add	r3, r2
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d207      	bcs.n	8000f2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f1c:	f003 fa72 	bl	8004404 <__errno>
 8000f20:	4603      	mov	r3, r0
 8000f22:	220c      	movs	r2, #12
 8000f24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f2a:	e009      	b.n	8000f40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f2c:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <_sbrk+0x64>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f32:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <_sbrk+0x64>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4413      	add	r3, r2
 8000f3a:	4a05      	ldr	r2, [pc, #20]	; (8000f50 <_sbrk+0x64>)
 8000f3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3718      	adds	r7, #24
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20050000 	.word	0x20050000
 8000f4c:	00000400 	.word	0x00000400
 8000f50:	20000824 	.word	0x20000824
 8000f54:	20000a40 	.word	0x20000a40

08000f58 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <SystemInit+0x20>)
 8000f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f62:	4a05      	ldr	r2, [pc, #20]	; (8000f78 <SystemInit+0x20>)
 8000f64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fb4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f80:	480d      	ldr	r0, [pc, #52]	; (8000fb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f82:	490e      	ldr	r1, [pc, #56]	; (8000fbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f84:	4a0e      	ldr	r2, [pc, #56]	; (8000fc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f88:	e002      	b.n	8000f90 <LoopCopyDataInit>

08000f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8e:	3304      	adds	r3, #4

08000f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f94:	d3f9      	bcc.n	8000f8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f96:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f98:	4c0b      	ldr	r4, [pc, #44]	; (8000fc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f9c:	e001      	b.n	8000fa2 <LoopFillZerobss>

08000f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa0:	3204      	adds	r2, #4

08000fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa4:	d3fb      	bcc.n	8000f9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fa6:	f7ff ffd7 	bl	8000f58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000faa:	f003 fa31 	bl	8004410 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fae:	f7ff fbab 	bl	8000708 <main>
  bx  lr    
 8000fb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fb4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000fb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fbc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000fc0:	08005704 	.word	0x08005704
  ldr r2, =_sbss
 8000fc4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000fc8:	20000a40 	.word	0x20000a40

08000fcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fcc:	e7fe      	b.n	8000fcc <ADC_IRQHandler>

08000fce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd2:	2003      	movs	r0, #3
 8000fd4:	f000 f92e 	bl	8001234 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd8:	2000      	movs	r0, #0
 8000fda:	f000 f805 	bl	8000fe8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fde:	f7ff fdc9 	bl	8000b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe2:	2300      	movs	r3, #0
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_InitTick+0x54>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <HAL_InitTick+0x58>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001002:	fbb2 f3f3 	udiv	r3, r2, r3
 8001006:	4618      	mov	r0, r3
 8001008:	f000 f93b 	bl	8001282 <HAL_SYSTICK_Config>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e00e      	b.n	8001034 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b0f      	cmp	r3, #15
 800101a:	d80a      	bhi.n	8001032 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800101c:	2200      	movs	r2, #0
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001024:	f000 f911 	bl	800124a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001028:	4a06      	ldr	r2, [pc, #24]	; (8001044 <HAL_InitTick+0x5c>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	e000      	b.n	8001034 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
}
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000000 	.word	0x20000000
 8001040:	20000008 	.word	0x20000008
 8001044:	20000004 	.word	0x20000004

08001048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_IncTick+0x20>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_IncTick+0x24>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4413      	add	r3, r2
 8001058:	4a04      	ldr	r2, [pc, #16]	; (800106c <HAL_IncTick+0x24>)
 800105a:	6013      	str	r3, [r2, #0]
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000008 	.word	0x20000008
 800106c:	20000828 	.word	0x20000828

08001070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return uwTick;
 8001074:	4b03      	ldr	r3, [pc, #12]	; (8001084 <HAL_GetTick+0x14>)
 8001076:	681b      	ldr	r3, [r3, #0]
}
 8001078:	4618      	mov	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20000828 	.word	0x20000828

08001088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001090:	f7ff ffee 	bl	8001070 <HAL_GetTick>
 8001094:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010a0:	d005      	beq.n	80010ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <HAL_Delay+0x44>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	461a      	mov	r2, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4413      	add	r3, r2
 80010ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ae:	bf00      	nop
 80010b0:	f7ff ffde 	bl	8001070 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d8f7      	bhi.n	80010b0 <HAL_Delay+0x28>
  {
  }
}
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000008 	.word	0x20000008

080010d0 <__NVIC_SetPriorityGrouping>:
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e0:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <__NVIC_SetPriorityGrouping+0x40>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e6:	68ba      	ldr	r2, [r7, #8]
 80010e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010ec:	4013      	ands	r3, r2
 80010ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <__NVIC_SetPriorityGrouping+0x44>)
 80010fa:	4313      	orrs	r3, r2
 80010fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fe:	4a04      	ldr	r2, [pc, #16]	; (8001110 <__NVIC_SetPriorityGrouping+0x40>)
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	60d3      	str	r3, [r2, #12]
}
 8001104:	bf00      	nop
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00
 8001114:	05fa0000 	.word	0x05fa0000

08001118 <__NVIC_GetPriorityGrouping>:
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800111c:	4b04      	ldr	r3, [pc, #16]	; (8001130 <__NVIC_GetPriorityGrouping+0x18>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	0a1b      	lsrs	r3, r3, #8
 8001122:	f003 0307 	and.w	r3, r3, #7
}
 8001126:	4618      	mov	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <__NVIC_SetPriority>:
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	2b00      	cmp	r3, #0
 8001146:	db0a      	blt.n	800115e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	490c      	ldr	r1, [pc, #48]	; (8001180 <__NVIC_SetPriority+0x4c>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	0112      	lsls	r2, r2, #4
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	440b      	add	r3, r1
 8001158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800115c:	e00a      	b.n	8001174 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4908      	ldr	r1, [pc, #32]	; (8001184 <__NVIC_SetPriority+0x50>)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	3b04      	subs	r3, #4
 800116c:	0112      	lsls	r2, r2, #4
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	440b      	add	r3, r1
 8001172:	761a      	strb	r2, [r3, #24]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000e100 	.word	0xe000e100
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <NVIC_EncodePriority>:
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f1c3 0307 	rsb	r3, r3, #7
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	bf28      	it	cs
 80011a6:	2304      	movcs	r3, #4
 80011a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3304      	adds	r3, #4
 80011ae:	2b06      	cmp	r3, #6
 80011b0:	d902      	bls.n	80011b8 <NVIC_EncodePriority+0x30>
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3b03      	subs	r3, #3
 80011b6:	e000      	b.n	80011ba <NVIC_EncodePriority+0x32>
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43da      	mvns	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	401a      	ands	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	43d9      	mvns	r1, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	4313      	orrs	r3, r2
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3724      	adds	r7, #36	; 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <SysTick_Config>:
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001200:	d301      	bcc.n	8001206 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001202:	2301      	movs	r3, #1
 8001204:	e00f      	b.n	8001226 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <SysTick_Config+0x40>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120e:	210f      	movs	r1, #15
 8001210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001214:	f7ff ff8e 	bl	8001134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <SysTick_Config+0x40>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121e:	4b04      	ldr	r3, [pc, #16]	; (8001230 <SysTick_Config+0x40>)
 8001220:	2207      	movs	r2, #7
 8001222:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	e000e010 	.word	0xe000e010

08001234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff47 	bl	80010d0 <__NVIC_SetPriorityGrouping>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800124a:	b580      	push	{r7, lr}
 800124c:	b086      	sub	sp, #24
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800125c:	f7ff ff5c 	bl	8001118 <__NVIC_GetPriorityGrouping>
 8001260:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	68b9      	ldr	r1, [r7, #8]
 8001266:	6978      	ldr	r0, [r7, #20]
 8001268:	f7ff ff8e 	bl	8001188 <NVIC_EncodePriority>
 800126c:	4602      	mov	r2, r0
 800126e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001272:	4611      	mov	r1, r2
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ff5d 	bl	8001134 <__NVIC_SetPriority>
}
 800127a:	bf00      	nop
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff ffb0 	bl	80011f0 <SysTick_Config>
 8001290:	4603      	mov	r3, r0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800129c:	b480      	push	{r7}
 800129e:	b089      	sub	sp, #36	; 0x24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
 80012ba:	e175      	b.n	80015a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80012bc:	2201      	movs	r2, #1
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	697a      	ldr	r2, [r7, #20]
 80012cc:	4013      	ands	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	f040 8164 	bne.w	80015a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f003 0303 	and.w	r3, r3, #3
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d005      	beq.n	80012f2 <HAL_GPIO_Init+0x56>
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f003 0303 	and.w	r3, r3, #3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d130      	bne.n	8001354 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	2203      	movs	r2, #3
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	68da      	ldr	r2, [r3, #12]
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4313      	orrs	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001328:	2201      	movs	r2, #1
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	091b      	lsrs	r3, r3, #4
 800133e:	f003 0201 	and.w	r2, r3, #1
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 0303 	and.w	r3, r3, #3
 800135c:	2b03      	cmp	r3, #3
 800135e:	d017      	beq.n	8001390 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	2203      	movs	r2, #3
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	689a      	ldr	r2, [r3, #8]
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4313      	orrs	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d123      	bne.n	80013e4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	08da      	lsrs	r2, r3, #3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3208      	adds	r2, #8
 80013a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	f003 0307 	and.w	r3, r3, #7
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	220f      	movs	r2, #15
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	691a      	ldr	r2, [r3, #16]
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	08da      	lsrs	r2, r3, #3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3208      	adds	r2, #8
 80013de:	69b9      	ldr	r1, [r7, #24]
 80013e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	2203      	movs	r2, #3
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 0203 	and.w	r2, r3, #3
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001420:	2b00      	cmp	r3, #0
 8001422:	f000 80be 	beq.w	80015a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001426:	4b66      	ldr	r3, [pc, #408]	; (80015c0 <HAL_GPIO_Init+0x324>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	4a65      	ldr	r2, [pc, #404]	; (80015c0 <HAL_GPIO_Init+0x324>)
 800142c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001430:	6453      	str	r3, [r2, #68]	; 0x44
 8001432:	4b63      	ldr	r3, [pc, #396]	; (80015c0 <HAL_GPIO_Init+0x324>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800143e:	4a61      	ldr	r2, [pc, #388]	; (80015c4 <HAL_GPIO_Init+0x328>)
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	089b      	lsrs	r3, r3, #2
 8001444:	3302      	adds	r3, #2
 8001446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800144a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	f003 0303 	and.w	r3, r3, #3
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	220f      	movs	r2, #15
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43db      	mvns	r3, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4013      	ands	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a58      	ldr	r2, [pc, #352]	; (80015c8 <HAL_GPIO_Init+0x32c>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d037      	beq.n	80014da <HAL_GPIO_Init+0x23e>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a57      	ldr	r2, [pc, #348]	; (80015cc <HAL_GPIO_Init+0x330>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d031      	beq.n	80014d6 <HAL_GPIO_Init+0x23a>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a56      	ldr	r2, [pc, #344]	; (80015d0 <HAL_GPIO_Init+0x334>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d02b      	beq.n	80014d2 <HAL_GPIO_Init+0x236>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a55      	ldr	r2, [pc, #340]	; (80015d4 <HAL_GPIO_Init+0x338>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d025      	beq.n	80014ce <HAL_GPIO_Init+0x232>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a54      	ldr	r2, [pc, #336]	; (80015d8 <HAL_GPIO_Init+0x33c>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d01f      	beq.n	80014ca <HAL_GPIO_Init+0x22e>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a53      	ldr	r2, [pc, #332]	; (80015dc <HAL_GPIO_Init+0x340>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d019      	beq.n	80014c6 <HAL_GPIO_Init+0x22a>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a52      	ldr	r2, [pc, #328]	; (80015e0 <HAL_GPIO_Init+0x344>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d013      	beq.n	80014c2 <HAL_GPIO_Init+0x226>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a51      	ldr	r2, [pc, #324]	; (80015e4 <HAL_GPIO_Init+0x348>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d00d      	beq.n	80014be <HAL_GPIO_Init+0x222>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a50      	ldr	r2, [pc, #320]	; (80015e8 <HAL_GPIO_Init+0x34c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d007      	beq.n	80014ba <HAL_GPIO_Init+0x21e>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a4f      	ldr	r2, [pc, #316]	; (80015ec <HAL_GPIO_Init+0x350>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d101      	bne.n	80014b6 <HAL_GPIO_Init+0x21a>
 80014b2:	2309      	movs	r3, #9
 80014b4:	e012      	b.n	80014dc <HAL_GPIO_Init+0x240>
 80014b6:	230a      	movs	r3, #10
 80014b8:	e010      	b.n	80014dc <HAL_GPIO_Init+0x240>
 80014ba:	2308      	movs	r3, #8
 80014bc:	e00e      	b.n	80014dc <HAL_GPIO_Init+0x240>
 80014be:	2307      	movs	r3, #7
 80014c0:	e00c      	b.n	80014dc <HAL_GPIO_Init+0x240>
 80014c2:	2306      	movs	r3, #6
 80014c4:	e00a      	b.n	80014dc <HAL_GPIO_Init+0x240>
 80014c6:	2305      	movs	r3, #5
 80014c8:	e008      	b.n	80014dc <HAL_GPIO_Init+0x240>
 80014ca:	2304      	movs	r3, #4
 80014cc:	e006      	b.n	80014dc <HAL_GPIO_Init+0x240>
 80014ce:	2303      	movs	r3, #3
 80014d0:	e004      	b.n	80014dc <HAL_GPIO_Init+0x240>
 80014d2:	2302      	movs	r3, #2
 80014d4:	e002      	b.n	80014dc <HAL_GPIO_Init+0x240>
 80014d6:	2301      	movs	r3, #1
 80014d8:	e000      	b.n	80014dc <HAL_GPIO_Init+0x240>
 80014da:	2300      	movs	r3, #0
 80014dc:	69fa      	ldr	r2, [r7, #28]
 80014de:	f002 0203 	and.w	r2, r2, #3
 80014e2:	0092      	lsls	r2, r2, #2
 80014e4:	4093      	lsls	r3, r2
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80014ec:	4935      	ldr	r1, [pc, #212]	; (80015c4 <HAL_GPIO_Init+0x328>)
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	089b      	lsrs	r3, r3, #2
 80014f2:	3302      	adds	r3, #2
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014fa:	4b3d      	ldr	r3, [pc, #244]	; (80015f0 <HAL_GPIO_Init+0x354>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	43db      	mvns	r3, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4013      	ands	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d003      	beq.n	800151e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	4313      	orrs	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800151e:	4a34      	ldr	r2, [pc, #208]	; (80015f0 <HAL_GPIO_Init+0x354>)
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001524:	4b32      	ldr	r3, [pc, #200]	; (80015f0 <HAL_GPIO_Init+0x354>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	43db      	mvns	r3, r3
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4013      	ands	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d003      	beq.n	8001548 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	4313      	orrs	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001548:	4a29      	ldr	r2, [pc, #164]	; (80015f0 <HAL_GPIO_Init+0x354>)
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800154e:	4b28      	ldr	r3, [pc, #160]	; (80015f0 <HAL_GPIO_Init+0x354>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	43db      	mvns	r3, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4013      	ands	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	4313      	orrs	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001572:	4a1f      	ldr	r2, [pc, #124]	; (80015f0 <HAL_GPIO_Init+0x354>)
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001578:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <HAL_GPIO_Init+0x354>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	43db      	mvns	r3, r3
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	4013      	ands	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	4313      	orrs	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800159c:	4a14      	ldr	r2, [pc, #80]	; (80015f0 <HAL_GPIO_Init+0x354>)
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	3301      	adds	r3, #1
 80015a6:	61fb      	str	r3, [r7, #28]
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	2b0f      	cmp	r3, #15
 80015ac:	f67f ae86 	bls.w	80012bc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80015b0:	bf00      	nop
 80015b2:	bf00      	nop
 80015b4:	3724      	adds	r7, #36	; 0x24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40013800 	.word	0x40013800
 80015c8:	40020000 	.word	0x40020000
 80015cc:	40020400 	.word	0x40020400
 80015d0:	40020800 	.word	0x40020800
 80015d4:	40020c00 	.word	0x40020c00
 80015d8:	40021000 	.word	0x40021000
 80015dc:	40021400 	.word	0x40021400
 80015e0:	40021800 	.word	0x40021800
 80015e4:	40021c00 	.word	0x40021c00
 80015e8:	40022000 	.word	0x40022000
 80015ec:	40022400 	.word	0x40022400
 80015f0:	40013c00 	.word	0x40013c00

080015f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	807b      	strh	r3, [r7, #2]
 8001600:	4613      	mov	r3, r2
 8001602:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001604:	787b      	ldrb	r3, [r7, #1]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800160a:	887a      	ldrh	r2, [r7, #2]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001610:	e003      	b.n	800161a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001612:	887b      	ldrh	r3, [r7, #2]
 8001614:	041a      	lsls	r2, r3, #16
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	619a      	str	r2, [r3, #24]
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001626:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001628:	b08f      	sub	sp, #60	; 0x3c
 800162a:	af0a      	add	r7, sp, #40	; 0x28
 800162c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d101      	bne.n	8001638 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e116      	b.n	8001866 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	d106      	bne.n	8001658 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff fb54 	bl	8000d00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2203      	movs	r2, #3
 800165c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001668:	2b00      	cmp	r3, #0
 800166a:	d102      	bne.n	8001672 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f002 f8ea 	bl	8003850 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	603b      	str	r3, [r7, #0]
 8001682:	687e      	ldr	r6, [r7, #4]
 8001684:	466d      	mov	r5, sp
 8001686:	f106 0410 	add.w	r4, r6, #16
 800168a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800168c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800168e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001690:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001692:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001696:	e885 0003 	stmia.w	r5, {r0, r1}
 800169a:	1d33      	adds	r3, r6, #4
 800169c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800169e:	6838      	ldr	r0, [r7, #0]
 80016a0:	f002 f87e 	bl	80037a0 <USB_CoreInit>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d005      	beq.n	80016b6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2202      	movs	r2, #2
 80016ae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e0d7      	b.n	8001866 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2100      	movs	r1, #0
 80016bc:	4618      	mov	r0, r3
 80016be:	f002 f8d8 	bl	8003872 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016c2:	2300      	movs	r3, #0
 80016c4:	73fb      	strb	r3, [r7, #15]
 80016c6:	e04a      	b.n	800175e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80016c8:	7bfa      	ldrb	r2, [r7, #15]
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	4613      	mov	r3, r2
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	1a9b      	subs	r3, r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	440b      	add	r3, r1
 80016d6:	333d      	adds	r3, #61	; 0x3d
 80016d8:	2201      	movs	r2, #1
 80016da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80016dc:	7bfa      	ldrb	r2, [r7, #15]
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	4613      	mov	r3, r2
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	1a9b      	subs	r3, r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	440b      	add	r3, r1
 80016ea:	333c      	adds	r3, #60	; 0x3c
 80016ec:	7bfa      	ldrb	r2, [r7, #15]
 80016ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80016f0:	7bfa      	ldrb	r2, [r7, #15]
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
 80016f4:	b298      	uxth	r0, r3
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	4613      	mov	r3, r2
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	1a9b      	subs	r3, r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	440b      	add	r3, r1
 8001702:	3342      	adds	r3, #66	; 0x42
 8001704:	4602      	mov	r2, r0
 8001706:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001708:	7bfa      	ldrb	r2, [r7, #15]
 800170a:	6879      	ldr	r1, [r7, #4]
 800170c:	4613      	mov	r3, r2
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	1a9b      	subs	r3, r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	440b      	add	r3, r1
 8001716:	333f      	adds	r3, #63	; 0x3f
 8001718:	2200      	movs	r2, #0
 800171a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800171c:	7bfa      	ldrb	r2, [r7, #15]
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	4613      	mov	r3, r2
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	1a9b      	subs	r3, r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	3344      	adds	r3, #68	; 0x44
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001730:	7bfa      	ldrb	r2, [r7, #15]
 8001732:	6879      	ldr	r1, [r7, #4]
 8001734:	4613      	mov	r3, r2
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	1a9b      	subs	r3, r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	440b      	add	r3, r1
 800173e:	3348      	adds	r3, #72	; 0x48
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001744:	7bfa      	ldrb	r2, [r7, #15]
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	4613      	mov	r3, r2
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	1a9b      	subs	r3, r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	440b      	add	r3, r1
 8001752:	3350      	adds	r3, #80	; 0x50
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001758:	7bfb      	ldrb	r3, [r7, #15]
 800175a:	3301      	adds	r3, #1
 800175c:	73fb      	strb	r3, [r7, #15]
 800175e:	7bfa      	ldrb	r2, [r7, #15]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	429a      	cmp	r2, r3
 8001766:	d3af      	bcc.n	80016c8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001768:	2300      	movs	r3, #0
 800176a:	73fb      	strb	r3, [r7, #15]
 800176c:	e044      	b.n	80017f8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800176e:	7bfa      	ldrb	r2, [r7, #15]
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	4613      	mov	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	1a9b      	subs	r3, r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	440b      	add	r3, r1
 800177c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001784:	7bfa      	ldrb	r2, [r7, #15]
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	4613      	mov	r3, r2
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	1a9b      	subs	r3, r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	440b      	add	r3, r1
 8001792:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001796:	7bfa      	ldrb	r2, [r7, #15]
 8001798:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800179a:	7bfa      	ldrb	r2, [r7, #15]
 800179c:	6879      	ldr	r1, [r7, #4]
 800179e:	4613      	mov	r3, r2
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	1a9b      	subs	r3, r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	440b      	add	r3, r1
 80017a8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80017ac:	2200      	movs	r2, #0
 80017ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80017b0:	7bfa      	ldrb	r2, [r7, #15]
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	4613      	mov	r3, r2
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	1a9b      	subs	r3, r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	440b      	add	r3, r1
 80017be:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80017c6:	7bfa      	ldrb	r2, [r7, #15]
 80017c8:	6879      	ldr	r1, [r7, #4]
 80017ca:	4613      	mov	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	1a9b      	subs	r3, r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	440b      	add	r3, r1
 80017d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80017dc:	7bfa      	ldrb	r2, [r7, #15]
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	1a9b      	subs	r3, r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	440b      	add	r3, r1
 80017ea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
 80017f4:	3301      	adds	r3, #1
 80017f6:	73fb      	strb	r3, [r7, #15]
 80017f8:	7bfa      	ldrb	r2, [r7, #15]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d3b5      	bcc.n	800176e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	603b      	str	r3, [r7, #0]
 8001808:	687e      	ldr	r6, [r7, #4]
 800180a:	466d      	mov	r5, sp
 800180c:	f106 0410 	add.w	r4, r6, #16
 8001810:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001812:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001814:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001816:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001818:	e894 0003 	ldmia.w	r4, {r0, r1}
 800181c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001820:	1d33      	adds	r3, r6, #4
 8001822:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001824:	6838      	ldr	r0, [r7, #0]
 8001826:	f002 f871 	bl	800390c <USB_DevInit>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d005      	beq.n	800183c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2202      	movs	r2, #2
 8001834:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e014      	b.n	8001866 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001850:	2b01      	cmp	r3, #1
 8001852:	d102      	bne.n	800185a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 f80b 	bl	8001870 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f002 fa2b 	bl	8003cba <USB_DevDisconnect>

  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001870 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2201      	movs	r2, #1
 8001882:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800189e:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <HAL_PCDEx_ActivateLPM+0x44>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	10000003 	.word	0x10000003

080018b8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018bc:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80018c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c6:	6013      	str	r3, [r2, #0]
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	40007000 	.word	0x40007000

080018d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80018e0:	2300      	movs	r3, #0
 80018e2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e291      	b.n	8001e12 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f000 8087 	beq.w	8001a0a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018fc:	4b96      	ldr	r3, [pc, #600]	; (8001b58 <HAL_RCC_OscConfig+0x280>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 030c 	and.w	r3, r3, #12
 8001904:	2b04      	cmp	r3, #4
 8001906:	d00c      	beq.n	8001922 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001908:	4b93      	ldr	r3, [pc, #588]	; (8001b58 <HAL_RCC_OscConfig+0x280>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 030c 	and.w	r3, r3, #12
 8001910:	2b08      	cmp	r3, #8
 8001912:	d112      	bne.n	800193a <HAL_RCC_OscConfig+0x62>
 8001914:	4b90      	ldr	r3, [pc, #576]	; (8001b58 <HAL_RCC_OscConfig+0x280>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800191c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001920:	d10b      	bne.n	800193a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001922:	4b8d      	ldr	r3, [pc, #564]	; (8001b58 <HAL_RCC_OscConfig+0x280>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d06c      	beq.n	8001a08 <HAL_RCC_OscConfig+0x130>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d168      	bne.n	8001a08 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e26b      	b.n	8001e12 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001942:	d106      	bne.n	8001952 <HAL_RCC_OscConfig+0x7a>
 8001944:	4b84      	ldr	r3, [pc, #528]	; (8001b58 <HAL_RCC_OscConfig+0x280>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a83      	ldr	r2, [pc, #524]	; (8001b58 <HAL_RCC_OscConfig+0x280>)
 800194a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	e02e      	b.n	80019b0 <HAL_RCC_OscConfig+0xd8>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10c      	bne.n	8001974 <HAL_RCC_OscConfig+0x9c>
 800195a:	4b7f      	ldr	r3, [pc, #508]	; (8001b58 <HAL_RCC_OscConfig+0x280>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a7e      	ldr	r2, [pc, #504]	; (8001b58 <HAL_RCC_OscConfig+0x280>)
 8001960:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001964:	6013      	str	r3, [r2, #0]
 8001966:	4b7c      	ldr	r3, [pc, #496]	; (8001b58 <HAL_RCC_OscConfig+0x280>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a7b      	ldr	r2, [pc, #492]	; (8001b58 <HAL_RCC_OscConfig+0x280>)
 800196c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001970:	6013      	str	r3, [r2, #0]
 8001972:	e01d      	b.n	80019b0 <HAL_RCC_OscConfig+0xd8>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800197c:	d10c      	bne.n	8001998 <HAL_RCC_OscConfig+0xc0>
 800197e:	4b76      	ldr	r3, [pc, #472]	; (8001b58 <HAL_RCC_OscConfig+0x280>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a75      	ldr	r2, [pc, #468]	; (8001b58 <HAL_RCC_OscConfig+0x280>)
 8001984:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001988:	6013      	str	r3, [r2, #0]
 800198a:	4b73      	ldr	r3, [pc, #460]	; (8001b58 <HAL_RCC_OscConfig+0x280>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a72      	ldr	r2, [pc, #456]	; (8001b58 <HAL_RCC_OscConfig+0x280>)
 8001990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001994:	6013      	str	r3, [r2, #0]
 8001996:	e00b      	b.n	80019b0 <HAL_RCC_OscConfig+0xd8>
 8001998:	4b6f      	ldr	r3, [pc, #444]	; (8001b58 <HAL_RCC_OscConfig+0x280>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a6e      	ldr	r2, [pc, #440]	; (8001b58 <HAL_RCC_OscConfig+0x280>)
 800199e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	4b6c      	ldr	r3, [pc, #432]	; (8001b58 <HAL_RCC_OscConfig+0x280>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a6b      	ldr	r2, [pc, #428]	; (8001b58 <HAL_RCC_OscConfig+0x280>)
 80019aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d013      	beq.n	80019e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b8:	f7ff fb5a 	bl	8001070 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c0:	f7ff fb56 	bl	8001070 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b64      	cmp	r3, #100	; 0x64
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e21f      	b.n	8001e12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d2:	4b61      	ldr	r3, [pc, #388]	; (8001b58 <HAL_RCC_OscConfig+0x280>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d0f0      	beq.n	80019c0 <HAL_RCC_OscConfig+0xe8>
 80019de:	e014      	b.n	8001a0a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e0:	f7ff fb46 	bl	8001070 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019e8:	f7ff fb42 	bl	8001070 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b64      	cmp	r3, #100	; 0x64
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e20b      	b.n	8001e12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019fa:	4b57      	ldr	r3, [pc, #348]	; (8001b58 <HAL_RCC_OscConfig+0x280>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f0      	bne.n	80019e8 <HAL_RCC_OscConfig+0x110>
 8001a06:	e000      	b.n	8001a0a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d069      	beq.n	8001aea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a16:	4b50      	ldr	r3, [pc, #320]	; (8001b58 <HAL_RCC_OscConfig+0x280>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 030c 	and.w	r3, r3, #12
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d00b      	beq.n	8001a3a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a22:	4b4d      	ldr	r3, [pc, #308]	; (8001b58 <HAL_RCC_OscConfig+0x280>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f003 030c 	and.w	r3, r3, #12
 8001a2a:	2b08      	cmp	r3, #8
 8001a2c:	d11c      	bne.n	8001a68 <HAL_RCC_OscConfig+0x190>
 8001a2e:	4b4a      	ldr	r3, [pc, #296]	; (8001b58 <HAL_RCC_OscConfig+0x280>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d116      	bne.n	8001a68 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a3a:	4b47      	ldr	r3, [pc, #284]	; (8001b58 <HAL_RCC_OscConfig+0x280>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d005      	beq.n	8001a52 <HAL_RCC_OscConfig+0x17a>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d001      	beq.n	8001a52 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e1df      	b.n	8001e12 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a52:	4b41      	ldr	r3, [pc, #260]	; (8001b58 <HAL_RCC_OscConfig+0x280>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	493d      	ldr	r1, [pc, #244]	; (8001b58 <HAL_RCC_OscConfig+0x280>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a66:	e040      	b.n	8001aea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d023      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a70:	4b39      	ldr	r3, [pc, #228]	; (8001b58 <HAL_RCC_OscConfig+0x280>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a38      	ldr	r2, [pc, #224]	; (8001b58 <HAL_RCC_OscConfig+0x280>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7c:	f7ff faf8 	bl	8001070 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a84:	f7ff faf4 	bl	8001070 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e1bd      	b.n	8001e12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a96:	4b30      	ldr	r3, [pc, #192]	; (8001b58 <HAL_RCC_OscConfig+0x280>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d0f0      	beq.n	8001a84 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa2:	4b2d      	ldr	r3, [pc, #180]	; (8001b58 <HAL_RCC_OscConfig+0x280>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	4929      	ldr	r1, [pc, #164]	; (8001b58 <HAL_RCC_OscConfig+0x280>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	600b      	str	r3, [r1, #0]
 8001ab6:	e018      	b.n	8001aea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ab8:	4b27      	ldr	r3, [pc, #156]	; (8001b58 <HAL_RCC_OscConfig+0x280>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a26      	ldr	r2, [pc, #152]	; (8001b58 <HAL_RCC_OscConfig+0x280>)
 8001abe:	f023 0301 	bic.w	r3, r3, #1
 8001ac2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac4:	f7ff fad4 	bl	8001070 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001acc:	f7ff fad0 	bl	8001070 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e199      	b.n	8001e12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ade:	4b1e      	ldr	r3, [pc, #120]	; (8001b58 <HAL_RCC_OscConfig+0x280>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f0      	bne.n	8001acc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0308 	and.w	r3, r3, #8
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d038      	beq.n	8001b68 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d019      	beq.n	8001b32 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001afe:	4b16      	ldr	r3, [pc, #88]	; (8001b58 <HAL_RCC_OscConfig+0x280>)
 8001b00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b02:	4a15      	ldr	r2, [pc, #84]	; (8001b58 <HAL_RCC_OscConfig+0x280>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0a:	f7ff fab1 	bl	8001070 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b12:	f7ff faad 	bl	8001070 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e176      	b.n	8001e12 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b24:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <HAL_RCC_OscConfig+0x280>)
 8001b26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0f0      	beq.n	8001b12 <HAL_RCC_OscConfig+0x23a>
 8001b30:	e01a      	b.n	8001b68 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b32:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <HAL_RCC_OscConfig+0x280>)
 8001b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b36:	4a08      	ldr	r2, [pc, #32]	; (8001b58 <HAL_RCC_OscConfig+0x280>)
 8001b38:	f023 0301 	bic.w	r3, r3, #1
 8001b3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b3e:	f7ff fa97 	bl	8001070 <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b44:	e00a      	b.n	8001b5c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b46:	f7ff fa93 	bl	8001070 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d903      	bls.n	8001b5c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e15c      	b.n	8001e12 <HAL_RCC_OscConfig+0x53a>
 8001b58:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b5c:	4b91      	ldr	r3, [pc, #580]	; (8001da4 <HAL_RCC_OscConfig+0x4cc>)
 8001b5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1ee      	bne.n	8001b46 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f000 80a4 	beq.w	8001cbe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b76:	4b8b      	ldr	r3, [pc, #556]	; (8001da4 <HAL_RCC_OscConfig+0x4cc>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10d      	bne.n	8001b9e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b82:	4b88      	ldr	r3, [pc, #544]	; (8001da4 <HAL_RCC_OscConfig+0x4cc>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	4a87      	ldr	r2, [pc, #540]	; (8001da4 <HAL_RCC_OscConfig+0x4cc>)
 8001b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b8e:	4b85      	ldr	r3, [pc, #532]	; (8001da4 <HAL_RCC_OscConfig+0x4cc>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b9e:	4b82      	ldr	r3, [pc, #520]	; (8001da8 <HAL_RCC_OscConfig+0x4d0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d118      	bne.n	8001bdc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001baa:	4b7f      	ldr	r3, [pc, #508]	; (8001da8 <HAL_RCC_OscConfig+0x4d0>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a7e      	ldr	r2, [pc, #504]	; (8001da8 <HAL_RCC_OscConfig+0x4d0>)
 8001bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bb6:	f7ff fa5b 	bl	8001070 <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bbe:	f7ff fa57 	bl	8001070 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b64      	cmp	r3, #100	; 0x64
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e120      	b.n	8001e12 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bd0:	4b75      	ldr	r3, [pc, #468]	; (8001da8 <HAL_RCC_OscConfig+0x4d0>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0f0      	beq.n	8001bbe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d106      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x31a>
 8001be4:	4b6f      	ldr	r3, [pc, #444]	; (8001da4 <HAL_RCC_OscConfig+0x4cc>)
 8001be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be8:	4a6e      	ldr	r2, [pc, #440]	; (8001da4 <HAL_RCC_OscConfig+0x4cc>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	6713      	str	r3, [r2, #112]	; 0x70
 8001bf0:	e02d      	b.n	8001c4e <HAL_RCC_OscConfig+0x376>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10c      	bne.n	8001c14 <HAL_RCC_OscConfig+0x33c>
 8001bfa:	4b6a      	ldr	r3, [pc, #424]	; (8001da4 <HAL_RCC_OscConfig+0x4cc>)
 8001bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bfe:	4a69      	ldr	r2, [pc, #420]	; (8001da4 <HAL_RCC_OscConfig+0x4cc>)
 8001c00:	f023 0301 	bic.w	r3, r3, #1
 8001c04:	6713      	str	r3, [r2, #112]	; 0x70
 8001c06:	4b67      	ldr	r3, [pc, #412]	; (8001da4 <HAL_RCC_OscConfig+0x4cc>)
 8001c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c0a:	4a66      	ldr	r2, [pc, #408]	; (8001da4 <HAL_RCC_OscConfig+0x4cc>)
 8001c0c:	f023 0304 	bic.w	r3, r3, #4
 8001c10:	6713      	str	r3, [r2, #112]	; 0x70
 8001c12:	e01c      	b.n	8001c4e <HAL_RCC_OscConfig+0x376>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	2b05      	cmp	r3, #5
 8001c1a:	d10c      	bne.n	8001c36 <HAL_RCC_OscConfig+0x35e>
 8001c1c:	4b61      	ldr	r3, [pc, #388]	; (8001da4 <HAL_RCC_OscConfig+0x4cc>)
 8001c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c20:	4a60      	ldr	r2, [pc, #384]	; (8001da4 <HAL_RCC_OscConfig+0x4cc>)
 8001c22:	f043 0304 	orr.w	r3, r3, #4
 8001c26:	6713      	str	r3, [r2, #112]	; 0x70
 8001c28:	4b5e      	ldr	r3, [pc, #376]	; (8001da4 <HAL_RCC_OscConfig+0x4cc>)
 8001c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c2c:	4a5d      	ldr	r2, [pc, #372]	; (8001da4 <HAL_RCC_OscConfig+0x4cc>)
 8001c2e:	f043 0301 	orr.w	r3, r3, #1
 8001c32:	6713      	str	r3, [r2, #112]	; 0x70
 8001c34:	e00b      	b.n	8001c4e <HAL_RCC_OscConfig+0x376>
 8001c36:	4b5b      	ldr	r3, [pc, #364]	; (8001da4 <HAL_RCC_OscConfig+0x4cc>)
 8001c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c3a:	4a5a      	ldr	r2, [pc, #360]	; (8001da4 <HAL_RCC_OscConfig+0x4cc>)
 8001c3c:	f023 0301 	bic.w	r3, r3, #1
 8001c40:	6713      	str	r3, [r2, #112]	; 0x70
 8001c42:	4b58      	ldr	r3, [pc, #352]	; (8001da4 <HAL_RCC_OscConfig+0x4cc>)
 8001c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c46:	4a57      	ldr	r2, [pc, #348]	; (8001da4 <HAL_RCC_OscConfig+0x4cc>)
 8001c48:	f023 0304 	bic.w	r3, r3, #4
 8001c4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d015      	beq.n	8001c82 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c56:	f7ff fa0b 	bl	8001070 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c5c:	e00a      	b.n	8001c74 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5e:	f7ff fa07 	bl	8001070 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e0ce      	b.n	8001e12 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c74:	4b4b      	ldr	r3, [pc, #300]	; (8001da4 <HAL_RCC_OscConfig+0x4cc>)
 8001c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0ee      	beq.n	8001c5e <HAL_RCC_OscConfig+0x386>
 8001c80:	e014      	b.n	8001cac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c82:	f7ff f9f5 	bl	8001070 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c88:	e00a      	b.n	8001ca0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c8a:	f7ff f9f1 	bl	8001070 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e0b8      	b.n	8001e12 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ca0:	4b40      	ldr	r3, [pc, #256]	; (8001da4 <HAL_RCC_OscConfig+0x4cc>)
 8001ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1ee      	bne.n	8001c8a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001cac:	7dfb      	ldrb	r3, [r7, #23]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d105      	bne.n	8001cbe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cb2:	4b3c      	ldr	r3, [pc, #240]	; (8001da4 <HAL_RCC_OscConfig+0x4cc>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	4a3b      	ldr	r2, [pc, #236]	; (8001da4 <HAL_RCC_OscConfig+0x4cc>)
 8001cb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cbc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f000 80a4 	beq.w	8001e10 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cc8:	4b36      	ldr	r3, [pc, #216]	; (8001da4 <HAL_RCC_OscConfig+0x4cc>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 030c 	and.w	r3, r3, #12
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	d06b      	beq.n	8001dac <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d149      	bne.n	8001d70 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cdc:	4b31      	ldr	r3, [pc, #196]	; (8001da4 <HAL_RCC_OscConfig+0x4cc>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a30      	ldr	r2, [pc, #192]	; (8001da4 <HAL_RCC_OscConfig+0x4cc>)
 8001ce2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ce6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce8:	f7ff f9c2 	bl	8001070 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf0:	f7ff f9be 	bl	8001070 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e087      	b.n	8001e12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d02:	4b28      	ldr	r3, [pc, #160]	; (8001da4 <HAL_RCC_OscConfig+0x4cc>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f0      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69da      	ldr	r2, [r3, #28]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1c:	019b      	lsls	r3, r3, #6
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d24:	085b      	lsrs	r3, r3, #1
 8001d26:	3b01      	subs	r3, #1
 8001d28:	041b      	lsls	r3, r3, #16
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d30:	061b      	lsls	r3, r3, #24
 8001d32:	4313      	orrs	r3, r2
 8001d34:	4a1b      	ldr	r2, [pc, #108]	; (8001da4 <HAL_RCC_OscConfig+0x4cc>)
 8001d36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001d3a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d3c:	4b19      	ldr	r3, [pc, #100]	; (8001da4 <HAL_RCC_OscConfig+0x4cc>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a18      	ldr	r2, [pc, #96]	; (8001da4 <HAL_RCC_OscConfig+0x4cc>)
 8001d42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d48:	f7ff f992 	bl	8001070 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d50:	f7ff f98e 	bl	8001070 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e057      	b.n	8001e12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d62:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <HAL_RCC_OscConfig+0x4cc>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0f0      	beq.n	8001d50 <HAL_RCC_OscConfig+0x478>
 8001d6e:	e04f      	b.n	8001e10 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d70:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <HAL_RCC_OscConfig+0x4cc>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a0b      	ldr	r2, [pc, #44]	; (8001da4 <HAL_RCC_OscConfig+0x4cc>)
 8001d76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7c:	f7ff f978 	bl	8001070 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d84:	f7ff f974 	bl	8001070 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e03d      	b.n	8001e12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d96:	4b03      	ldr	r3, [pc, #12]	; (8001da4 <HAL_RCC_OscConfig+0x4cc>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x4ac>
 8001da2:	e035      	b.n	8001e10 <HAL_RCC_OscConfig+0x538>
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001dac:	4b1b      	ldr	r3, [pc, #108]	; (8001e1c <HAL_RCC_OscConfig+0x544>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d028      	beq.n	8001e0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d121      	bne.n	8001e0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d11a      	bne.n	8001e0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ddc:	4013      	ands	r3, r2
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001de2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d111      	bne.n	8001e0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df2:	085b      	lsrs	r3, r3, #1
 8001df4:	3b01      	subs	r3, #1
 8001df6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d107      	bne.n	8001e0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e06:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d001      	beq.n	8001e10 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e000      	b.n	8001e12 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3718      	adds	r7, #24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40023800 	.word	0x40023800

08001e20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e0d0      	b.n	8001fda <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e38:	4b6a      	ldr	r3, [pc, #424]	; (8001fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 030f 	and.w	r3, r3, #15
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d910      	bls.n	8001e68 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e46:	4b67      	ldr	r3, [pc, #412]	; (8001fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f023 020f 	bic.w	r2, r3, #15
 8001e4e:	4965      	ldr	r1, [pc, #404]	; (8001fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e56:	4b63      	ldr	r3, [pc, #396]	; (8001fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 030f 	and.w	r3, r3, #15
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d001      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e0b8      	b.n	8001fda <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d020      	beq.n	8001eb6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d005      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e80:	4b59      	ldr	r3, [pc, #356]	; (8001fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	4a58      	ldr	r2, [pc, #352]	; (8001fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e8a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0308 	and.w	r3, r3, #8
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d005      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e98:	4b53      	ldr	r3, [pc, #332]	; (8001fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	4a52      	ldr	r2, [pc, #328]	; (8001fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ea2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ea4:	4b50      	ldr	r3, [pc, #320]	; (8001fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	494d      	ldr	r1, [pc, #308]	; (8001fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d040      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d107      	bne.n	8001eda <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eca:	4b47      	ldr	r3, [pc, #284]	; (8001fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d115      	bne.n	8001f02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e07f      	b.n	8001fda <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d107      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ee2:	4b41      	ldr	r3, [pc, #260]	; (8001fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d109      	bne.n	8001f02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e073      	b.n	8001fda <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef2:	4b3d      	ldr	r3, [pc, #244]	; (8001fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e06b      	b.n	8001fda <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f02:	4b39      	ldr	r3, [pc, #228]	; (8001fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f023 0203 	bic.w	r2, r3, #3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	4936      	ldr	r1, [pc, #216]	; (8001fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f14:	f7ff f8ac 	bl	8001070 <HAL_GetTick>
 8001f18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f1a:	e00a      	b.n	8001f32 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f1c:	f7ff f8a8 	bl	8001070 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e053      	b.n	8001fda <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f32:	4b2d      	ldr	r3, [pc, #180]	; (8001fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 020c 	and.w	r2, r3, #12
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d1eb      	bne.n	8001f1c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f44:	4b27      	ldr	r3, [pc, #156]	; (8001fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 030f 	and.w	r3, r3, #15
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d210      	bcs.n	8001f74 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f52:	4b24      	ldr	r3, [pc, #144]	; (8001fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f023 020f 	bic.w	r2, r3, #15
 8001f5a:	4922      	ldr	r1, [pc, #136]	; (8001fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f62:	4b20      	ldr	r3, [pc, #128]	; (8001fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d001      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e032      	b.n	8001fda <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d008      	beq.n	8001f92 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f80:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	4916      	ldr	r1, [pc, #88]	; (8001fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0308 	and.w	r3, r3, #8
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d009      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f9e:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	490e      	ldr	r1, [pc, #56]	; (8001fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fb2:	f000 f821 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	091b      	lsrs	r3, r3, #4
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	490a      	ldr	r1, [pc, #40]	; (8001fec <HAL_RCC_ClockConfig+0x1cc>)
 8001fc4:	5ccb      	ldrb	r3, [r1, r3]
 8001fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fca:	4a09      	ldr	r2, [pc, #36]	; (8001ff0 <HAL_RCC_ClockConfig+0x1d0>)
 8001fcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fce:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <HAL_RCC_ClockConfig+0x1d4>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff f808 	bl	8000fe8 <HAL_InitTick>

  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40023c00 	.word	0x40023c00
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	080055c4 	.word	0x080055c4
 8001ff0:	20000000 	.word	0x20000000
 8001ff4:	20000004 	.word	0x20000004

08001ff8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ff8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ffc:	b094      	sub	sp, #80	; 0x50
 8001ffe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002000:	2300      	movs	r3, #0
 8002002:	647b      	str	r3, [r7, #68]	; 0x44
 8002004:	2300      	movs	r3, #0
 8002006:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002008:	2300      	movs	r3, #0
 800200a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800200c:	2300      	movs	r3, #0
 800200e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002010:	4b79      	ldr	r3, [pc, #484]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f003 030c 	and.w	r3, r3, #12
 8002018:	2b08      	cmp	r3, #8
 800201a:	d00d      	beq.n	8002038 <HAL_RCC_GetSysClockFreq+0x40>
 800201c:	2b08      	cmp	r3, #8
 800201e:	f200 80e1 	bhi.w	80021e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002022:	2b00      	cmp	r3, #0
 8002024:	d002      	beq.n	800202c <HAL_RCC_GetSysClockFreq+0x34>
 8002026:	2b04      	cmp	r3, #4
 8002028:	d003      	beq.n	8002032 <HAL_RCC_GetSysClockFreq+0x3a>
 800202a:	e0db      	b.n	80021e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800202c:	4b73      	ldr	r3, [pc, #460]	; (80021fc <HAL_RCC_GetSysClockFreq+0x204>)
 800202e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002030:	e0db      	b.n	80021ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002032:	4b73      	ldr	r3, [pc, #460]	; (8002200 <HAL_RCC_GetSysClockFreq+0x208>)
 8002034:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002036:	e0d8      	b.n	80021ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002038:	4b6f      	ldr	r3, [pc, #444]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002040:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002042:	4b6d      	ldr	r3, [pc, #436]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d063      	beq.n	8002116 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800204e:	4b6a      	ldr	r3, [pc, #424]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	099b      	lsrs	r3, r3, #6
 8002054:	2200      	movs	r2, #0
 8002056:	63bb      	str	r3, [r7, #56]	; 0x38
 8002058:	63fa      	str	r2, [r7, #60]	; 0x3c
 800205a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800205c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002060:	633b      	str	r3, [r7, #48]	; 0x30
 8002062:	2300      	movs	r3, #0
 8002064:	637b      	str	r3, [r7, #52]	; 0x34
 8002066:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800206a:	4622      	mov	r2, r4
 800206c:	462b      	mov	r3, r5
 800206e:	f04f 0000 	mov.w	r0, #0
 8002072:	f04f 0100 	mov.w	r1, #0
 8002076:	0159      	lsls	r1, r3, #5
 8002078:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800207c:	0150      	lsls	r0, r2, #5
 800207e:	4602      	mov	r2, r0
 8002080:	460b      	mov	r3, r1
 8002082:	4621      	mov	r1, r4
 8002084:	1a51      	subs	r1, r2, r1
 8002086:	6139      	str	r1, [r7, #16]
 8002088:	4629      	mov	r1, r5
 800208a:	eb63 0301 	sbc.w	r3, r3, r1
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	f04f 0200 	mov.w	r2, #0
 8002094:	f04f 0300 	mov.w	r3, #0
 8002098:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800209c:	4659      	mov	r1, fp
 800209e:	018b      	lsls	r3, r1, #6
 80020a0:	4651      	mov	r1, sl
 80020a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020a6:	4651      	mov	r1, sl
 80020a8:	018a      	lsls	r2, r1, #6
 80020aa:	4651      	mov	r1, sl
 80020ac:	ebb2 0801 	subs.w	r8, r2, r1
 80020b0:	4659      	mov	r1, fp
 80020b2:	eb63 0901 	sbc.w	r9, r3, r1
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	f04f 0300 	mov.w	r3, #0
 80020be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020ca:	4690      	mov	r8, r2
 80020cc:	4699      	mov	r9, r3
 80020ce:	4623      	mov	r3, r4
 80020d0:	eb18 0303 	adds.w	r3, r8, r3
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	462b      	mov	r3, r5
 80020d8:	eb49 0303 	adc.w	r3, r9, r3
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	f04f 0300 	mov.w	r3, #0
 80020e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80020ea:	4629      	mov	r1, r5
 80020ec:	024b      	lsls	r3, r1, #9
 80020ee:	4621      	mov	r1, r4
 80020f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020f4:	4621      	mov	r1, r4
 80020f6:	024a      	lsls	r2, r1, #9
 80020f8:	4610      	mov	r0, r2
 80020fa:	4619      	mov	r1, r3
 80020fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020fe:	2200      	movs	r2, #0
 8002100:	62bb      	str	r3, [r7, #40]	; 0x28
 8002102:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002104:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002108:	f7fe f8d2 	bl	80002b0 <__aeabi_uldivmod>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	4613      	mov	r3, r2
 8002112:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002114:	e058      	b.n	80021c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002116:	4b38      	ldr	r3, [pc, #224]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	099b      	lsrs	r3, r3, #6
 800211c:	2200      	movs	r2, #0
 800211e:	4618      	mov	r0, r3
 8002120:	4611      	mov	r1, r2
 8002122:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002126:	623b      	str	r3, [r7, #32]
 8002128:	2300      	movs	r3, #0
 800212a:	627b      	str	r3, [r7, #36]	; 0x24
 800212c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002130:	4642      	mov	r2, r8
 8002132:	464b      	mov	r3, r9
 8002134:	f04f 0000 	mov.w	r0, #0
 8002138:	f04f 0100 	mov.w	r1, #0
 800213c:	0159      	lsls	r1, r3, #5
 800213e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002142:	0150      	lsls	r0, r2, #5
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4641      	mov	r1, r8
 800214a:	ebb2 0a01 	subs.w	sl, r2, r1
 800214e:	4649      	mov	r1, r9
 8002150:	eb63 0b01 	sbc.w	fp, r3, r1
 8002154:	f04f 0200 	mov.w	r2, #0
 8002158:	f04f 0300 	mov.w	r3, #0
 800215c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002160:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002164:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002168:	ebb2 040a 	subs.w	r4, r2, sl
 800216c:	eb63 050b 	sbc.w	r5, r3, fp
 8002170:	f04f 0200 	mov.w	r2, #0
 8002174:	f04f 0300 	mov.w	r3, #0
 8002178:	00eb      	lsls	r3, r5, #3
 800217a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800217e:	00e2      	lsls	r2, r4, #3
 8002180:	4614      	mov	r4, r2
 8002182:	461d      	mov	r5, r3
 8002184:	4643      	mov	r3, r8
 8002186:	18e3      	adds	r3, r4, r3
 8002188:	603b      	str	r3, [r7, #0]
 800218a:	464b      	mov	r3, r9
 800218c:	eb45 0303 	adc.w	r3, r5, r3
 8002190:	607b      	str	r3, [r7, #4]
 8002192:	f04f 0200 	mov.w	r2, #0
 8002196:	f04f 0300 	mov.w	r3, #0
 800219a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800219e:	4629      	mov	r1, r5
 80021a0:	028b      	lsls	r3, r1, #10
 80021a2:	4621      	mov	r1, r4
 80021a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021a8:	4621      	mov	r1, r4
 80021aa:	028a      	lsls	r2, r1, #10
 80021ac:	4610      	mov	r0, r2
 80021ae:	4619      	mov	r1, r3
 80021b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021b2:	2200      	movs	r2, #0
 80021b4:	61bb      	str	r3, [r7, #24]
 80021b6:	61fa      	str	r2, [r7, #28]
 80021b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021bc:	f7fe f878 	bl	80002b0 <__aeabi_uldivmod>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	4613      	mov	r3, r2
 80021c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80021c8:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	0c1b      	lsrs	r3, r3, #16
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	3301      	adds	r3, #1
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80021d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021e2:	e002      	b.n	80021ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021e4:	4b05      	ldr	r3, [pc, #20]	; (80021fc <HAL_RCC_GetSysClockFreq+0x204>)
 80021e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3750      	adds	r7, #80	; 0x50
 80021f0:	46bd      	mov	sp, r7
 80021f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021f6:	bf00      	nop
 80021f8:	40023800 	.word	0x40023800
 80021fc:	00f42400 	.word	0x00f42400
 8002200:	007a1200 	.word	0x007a1200

08002204 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002208:	4b03      	ldr	r3, [pc, #12]	; (8002218 <HAL_RCC_GetHCLKFreq+0x14>)
 800220a:	681b      	ldr	r3, [r3, #0]
}
 800220c:	4618      	mov	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	20000000 	.word	0x20000000

0800221c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002220:	f7ff fff0 	bl	8002204 <HAL_RCC_GetHCLKFreq>
 8002224:	4602      	mov	r2, r0
 8002226:	4b05      	ldr	r3, [pc, #20]	; (800223c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	0a9b      	lsrs	r3, r3, #10
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	4903      	ldr	r1, [pc, #12]	; (8002240 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002232:	5ccb      	ldrb	r3, [r1, r3]
 8002234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002238:	4618      	mov	r0, r3
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40023800 	.word	0x40023800
 8002240:	080055d4 	.word	0x080055d4

08002244 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002248:	f7ff ffdc 	bl	8002204 <HAL_RCC_GetHCLKFreq>
 800224c:	4602      	mov	r2, r0
 800224e:	4b05      	ldr	r3, [pc, #20]	; (8002264 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	0b5b      	lsrs	r3, r3, #13
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	4903      	ldr	r1, [pc, #12]	; (8002268 <HAL_RCC_GetPCLK2Freq+0x24>)
 800225a:	5ccb      	ldrb	r3, [r1, r3]
 800225c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002260:	4618      	mov	r0, r3
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40023800 	.word	0x40023800
 8002268:	080055d4 	.word	0x080055d4

0800226c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002278:	2300      	movs	r3, #0
 800227a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800227c:	2300      	movs	r3, #0
 800227e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002280:	2300      	movs	r3, #0
 8002282:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002284:	2300      	movs	r3, #0
 8002286:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d012      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002294:	4b69      	ldr	r3, [pc, #420]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	4a68      	ldr	r2, [pc, #416]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800229a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800229e:	6093      	str	r3, [r2, #8]
 80022a0:	4b66      	ldr	r3, [pc, #408]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a8:	4964      	ldr	r1, [pc, #400]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80022b6:	2301      	movs	r3, #1
 80022b8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d017      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022c6:	4b5d      	ldr	r3, [pc, #372]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d4:	4959      	ldr	r1, [pc, #356]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022e4:	d101      	bne.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80022e6:	2301      	movs	r3, #1
 80022e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80022f2:	2301      	movs	r3, #1
 80022f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d017      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002302:	4b4e      	ldr	r3, [pc, #312]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002304:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002308:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002310:	494a      	ldr	r1, [pc, #296]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002312:	4313      	orrs	r3, r2
 8002314:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002320:	d101      	bne.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002322:	2301      	movs	r3, #1
 8002324:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800232e:	2301      	movs	r3, #1
 8002330:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800233e:	2301      	movs	r3, #1
 8002340:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0320 	and.w	r3, r3, #32
 800234a:	2b00      	cmp	r3, #0
 800234c:	f000 808b 	beq.w	8002466 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002350:	4b3a      	ldr	r3, [pc, #232]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002354:	4a39      	ldr	r2, [pc, #228]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800235a:	6413      	str	r3, [r2, #64]	; 0x40
 800235c:	4b37      	ldr	r3, [pc, #220]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002364:	60bb      	str	r3, [r7, #8]
 8002366:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002368:	4b35      	ldr	r3, [pc, #212]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a34      	ldr	r2, [pc, #208]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800236e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002372:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002374:	f7fe fe7c 	bl	8001070 <HAL_GetTick>
 8002378:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800237a:	e008      	b.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800237c:	f7fe fe78 	bl	8001070 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b64      	cmp	r3, #100	; 0x64
 8002388:	d901      	bls.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e357      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800238e:	4b2c      	ldr	r3, [pc, #176]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0f0      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800239a:	4b28      	ldr	r3, [pc, #160]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800239c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023a2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d035      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d02e      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023b8:	4b20      	ldr	r3, [pc, #128]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023c0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023c2:	4b1e      	ldr	r3, [pc, #120]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c6:	4a1d      	ldr	r2, [pc, #116]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023cc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023ce:	4b1b      	ldr	r3, [pc, #108]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d2:	4a1a      	ldr	r2, [pc, #104]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80023da:	4a18      	ldr	r2, [pc, #96]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80023e0:	4b16      	ldr	r3, [pc, #88]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d114      	bne.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ec:	f7fe fe40 	bl	8001070 <HAL_GetTick>
 80023f0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f2:	e00a      	b.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023f4:	f7fe fe3c 	bl	8001070 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002402:	4293      	cmp	r3, r2
 8002404:	d901      	bls.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e319      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800240a:	4b0c      	ldr	r3, [pc, #48]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800240c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0ee      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800241e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002422:	d111      	bne.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002424:	4b05      	ldr	r3, [pc, #20]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002430:	4b04      	ldr	r3, [pc, #16]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002432:	400b      	ands	r3, r1
 8002434:	4901      	ldr	r1, [pc, #4]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002436:	4313      	orrs	r3, r2
 8002438:	608b      	str	r3, [r1, #8]
 800243a:	e00b      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800243c:	40023800 	.word	0x40023800
 8002440:	40007000 	.word	0x40007000
 8002444:	0ffffcff 	.word	0x0ffffcff
 8002448:	4baa      	ldr	r3, [pc, #680]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	4aa9      	ldr	r2, [pc, #676]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800244e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002452:	6093      	str	r3, [r2, #8]
 8002454:	4ba7      	ldr	r3, [pc, #668]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002456:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002460:	49a4      	ldr	r1, [pc, #656]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002462:	4313      	orrs	r3, r2
 8002464:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0310 	and.w	r3, r3, #16
 800246e:	2b00      	cmp	r3, #0
 8002470:	d010      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002472:	4ba0      	ldr	r3, [pc, #640]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002474:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002478:	4a9e      	ldr	r2, [pc, #632]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800247a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800247e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002482:	4b9c      	ldr	r3, [pc, #624]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002484:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248c:	4999      	ldr	r1, [pc, #612]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800248e:	4313      	orrs	r3, r2
 8002490:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00a      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024a0:	4b94      	ldr	r3, [pc, #592]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024ae:	4991      	ldr	r1, [pc, #580]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00a      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024c2:	4b8c      	ldr	r3, [pc, #560]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024d0:	4988      	ldr	r1, [pc, #544]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00a      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024e4:	4b83      	ldr	r3, [pc, #524]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024f2:	4980      	ldr	r1, [pc, #512]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00a      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002506:	4b7b      	ldr	r3, [pc, #492]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002514:	4977      	ldr	r1, [pc, #476]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002516:	4313      	orrs	r3, r2
 8002518:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00a      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002528:	4b72      	ldr	r3, [pc, #456]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800252a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252e:	f023 0203 	bic.w	r2, r3, #3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002536:	496f      	ldr	r1, [pc, #444]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002538:	4313      	orrs	r3, r2
 800253a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00a      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800254a:	4b6a      	ldr	r3, [pc, #424]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800254c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002550:	f023 020c 	bic.w	r2, r3, #12
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002558:	4966      	ldr	r1, [pc, #408]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800255a:	4313      	orrs	r3, r2
 800255c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00a      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800256c:	4b61      	ldr	r3, [pc, #388]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800256e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002572:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800257a:	495e      	ldr	r1, [pc, #376]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800257c:	4313      	orrs	r3, r2
 800257e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00a      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800258e:	4b59      	ldr	r3, [pc, #356]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002594:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800259c:	4955      	ldr	r1, [pc, #340]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00a      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025b0:	4b50      	ldr	r3, [pc, #320]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025be:	494d      	ldr	r1, [pc, #308]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00a      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80025d2:	4b48      	ldr	r3, [pc, #288]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e0:	4944      	ldr	r1, [pc, #272]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00a      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80025f4:	4b3f      	ldr	r3, [pc, #252]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002602:	493c      	ldr	r1, [pc, #240]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002604:	4313      	orrs	r3, r2
 8002606:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00a      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002616:	4b37      	ldr	r3, [pc, #220]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800261c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002624:	4933      	ldr	r1, [pc, #204]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002626:	4313      	orrs	r3, r2
 8002628:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00a      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002638:	4b2e      	ldr	r3, [pc, #184]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800263a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002646:	492b      	ldr	r1, [pc, #172]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002648:	4313      	orrs	r3, r2
 800264a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d011      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800265a:	4b26      	ldr	r3, [pc, #152]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800265c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002660:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002668:	4922      	ldr	r1, [pc, #136]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800266a:	4313      	orrs	r3, r2
 800266c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002674:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002678:	d101      	bne.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800267a:	2301      	movs	r3, #1
 800267c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800268a:	2301      	movs	r3, #1
 800268c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00a      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800269a:	4b16      	ldr	r3, [pc, #88]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800269c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026a8:	4912      	ldr	r1, [pc, #72]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00b      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026bc:	4b0d      	ldr	r3, [pc, #52]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026cc:	4909      	ldr	r1, [pc, #36]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d006      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 80d9 	beq.w	800289a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80026e8:	4b02      	ldr	r3, [pc, #8]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a01      	ldr	r2, [pc, #4]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80026f2:	e001      	b.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80026f4:	40023800 	.word	0x40023800
 80026f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026fa:	f7fe fcb9 	bl	8001070 <HAL_GetTick>
 80026fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002700:	e008      	b.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002702:	f7fe fcb5 	bl	8001070 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b64      	cmp	r3, #100	; 0x64
 800270e:	d901      	bls.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e194      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002714:	4b6c      	ldr	r3, [pc, #432]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1f0      	bne.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	d021      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002730:	2b00      	cmp	r3, #0
 8002732:	d11d      	bne.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002734:	4b64      	ldr	r3, [pc, #400]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002736:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800273a:	0c1b      	lsrs	r3, r3, #16
 800273c:	f003 0303 	and.w	r3, r3, #3
 8002740:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002742:	4b61      	ldr	r3, [pc, #388]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002744:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002748:	0e1b      	lsrs	r3, r3, #24
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	019a      	lsls	r2, r3, #6
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	041b      	lsls	r3, r3, #16
 800275a:	431a      	orrs	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	061b      	lsls	r3, r3, #24
 8002760:	431a      	orrs	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	071b      	lsls	r3, r3, #28
 8002768:	4957      	ldr	r1, [pc, #348]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800276a:	4313      	orrs	r3, r2
 800276c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d004      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002780:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002784:	d00a      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800278e:	2b00      	cmp	r3, #0
 8002790:	d02e      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800279a:	d129      	bne.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800279c:	4b4a      	ldr	r3, [pc, #296]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800279e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027a2:	0c1b      	lsrs	r3, r3, #16
 80027a4:	f003 0303 	and.w	r3, r3, #3
 80027a8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80027aa:	4b47      	ldr	r3, [pc, #284]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027b0:	0f1b      	lsrs	r3, r3, #28
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	019a      	lsls	r2, r3, #6
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	041b      	lsls	r3, r3, #16
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	061b      	lsls	r3, r3, #24
 80027ca:	431a      	orrs	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	071b      	lsls	r3, r3, #28
 80027d0:	493d      	ldr	r1, [pc, #244]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80027d8:	4b3b      	ldr	r3, [pc, #236]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027de:	f023 021f 	bic.w	r2, r3, #31
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e6:	3b01      	subs	r3, #1
 80027e8:	4937      	ldr	r1, [pc, #220]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d01d      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80027fc:	4b32      	ldr	r3, [pc, #200]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002802:	0e1b      	lsrs	r3, r3, #24
 8002804:	f003 030f 	and.w	r3, r3, #15
 8002808:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800280a:	4b2f      	ldr	r3, [pc, #188]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800280c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002810:	0f1b      	lsrs	r3, r3, #28
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	019a      	lsls	r2, r3, #6
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	041b      	lsls	r3, r3, #16
 8002824:	431a      	orrs	r2, r3
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	061b      	lsls	r3, r3, #24
 800282a:	431a      	orrs	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	071b      	lsls	r3, r3, #28
 8002830:	4925      	ldr	r1, [pc, #148]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002832:	4313      	orrs	r3, r2
 8002834:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d011      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	019a      	lsls	r2, r3, #6
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	041b      	lsls	r3, r3, #16
 8002850:	431a      	orrs	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	061b      	lsls	r3, r3, #24
 8002858:	431a      	orrs	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	071b      	lsls	r3, r3, #28
 8002860:	4919      	ldr	r1, [pc, #100]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002862:	4313      	orrs	r3, r2
 8002864:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002868:	4b17      	ldr	r3, [pc, #92]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a16      	ldr	r2, [pc, #88]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800286e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002872:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002874:	f7fe fbfc 	bl	8001070 <HAL_GetTick>
 8002878:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800287a:	e008      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800287c:	f7fe fbf8 	bl	8001070 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b64      	cmp	r3, #100	; 0x64
 8002888:	d901      	bls.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e0d7      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800288e:	4b0e      	ldr	r3, [pc, #56]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0f0      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	2b01      	cmp	r3, #1
 800289e:	f040 80cd 	bne.w	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80028a2:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a08      	ldr	r2, [pc, #32]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028ae:	f7fe fbdf 	bl	8001070 <HAL_GetTick>
 80028b2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80028b4:	e00a      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80028b6:	f7fe fbdb 	bl	8001070 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b64      	cmp	r3, #100	; 0x64
 80028c2:	d903      	bls.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e0ba      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80028c8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80028cc:	4b5e      	ldr	r3, [pc, #376]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028d8:	d0ed      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x682>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d009      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d02e      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d12a      	bne.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002902:	4b51      	ldr	r3, [pc, #324]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002908:	0c1b      	lsrs	r3, r3, #16
 800290a:	f003 0303 	and.w	r3, r3, #3
 800290e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002910:	4b4d      	ldr	r3, [pc, #308]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002916:	0f1b      	lsrs	r3, r3, #28
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	019a      	lsls	r2, r3, #6
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	041b      	lsls	r3, r3, #16
 8002928:	431a      	orrs	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	061b      	lsls	r3, r3, #24
 8002930:	431a      	orrs	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	071b      	lsls	r3, r3, #28
 8002936:	4944      	ldr	r1, [pc, #272]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002938:	4313      	orrs	r3, r2
 800293a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800293e:	4b42      	ldr	r3, [pc, #264]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002940:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002944:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294c:	3b01      	subs	r3, #1
 800294e:	021b      	lsls	r3, r3, #8
 8002950:	493d      	ldr	r1, [pc, #244]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002952:	4313      	orrs	r3, r2
 8002954:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d022      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002968:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800296c:	d11d      	bne.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800296e:	4b36      	ldr	r3, [pc, #216]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002974:	0e1b      	lsrs	r3, r3, #24
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800297c:	4b32      	ldr	r3, [pc, #200]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800297e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002982:	0f1b      	lsrs	r3, r3, #28
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	019a      	lsls	r2, r3, #6
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	041b      	lsls	r3, r3, #16
 8002996:	431a      	orrs	r2, r3
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	061b      	lsls	r3, r3, #24
 800299c:	431a      	orrs	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	071b      	lsls	r3, r3, #28
 80029a2:	4929      	ldr	r1, [pc, #164]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0308 	and.w	r3, r3, #8
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d028      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80029b6:	4b24      	ldr	r3, [pc, #144]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029bc:	0e1b      	lsrs	r3, r3, #24
 80029be:	f003 030f 	and.w	r3, r3, #15
 80029c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80029c4:	4b20      	ldr	r3, [pc, #128]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ca:	0c1b      	lsrs	r3, r3, #16
 80029cc:	f003 0303 	and.w	r3, r3, #3
 80029d0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	019a      	lsls	r2, r3, #6
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	041b      	lsls	r3, r3, #16
 80029dc:	431a      	orrs	r2, r3
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	061b      	lsls	r3, r3, #24
 80029e2:	431a      	orrs	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	69db      	ldr	r3, [r3, #28]
 80029e8:	071b      	lsls	r3, r3, #28
 80029ea:	4917      	ldr	r1, [pc, #92]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80029f2:	4b15      	ldr	r3, [pc, #84]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a00:	4911      	ldr	r1, [pc, #68]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002a08:	4b0f      	ldr	r3, [pc, #60]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a0e      	ldr	r2, [pc, #56]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a14:	f7fe fb2c 	bl	8001070 <HAL_GetTick>
 8002a18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a1c:	f7fe fb28 	bl	8001070 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b64      	cmp	r3, #100	; 0x64
 8002a28:	d901      	bls.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e007      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a2e:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a3a:	d1ef      	bne.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3720      	adds	r7, #32
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40023800 	.word	0x40023800

08002a4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e040      	b.n	8002ae0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d106      	bne.n	8002a74 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7fe f8a4 	bl	8000bbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2224      	movs	r2, #36	; 0x24
 8002a78:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 0201 	bic.w	r2, r2, #1
 8002a88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 fa8a 	bl	8002fa4 <UART_SetConfig>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d101      	bne.n	8002a9a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e022      	b.n	8002ae0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d002      	beq.n	8002aa8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 fce2 	bl	800346c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ab6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689a      	ldr	r2, [r3, #8]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ac6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0201 	orr.w	r2, r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 fd69 	bl	80035b0 <UART_CheckIdleState>
 8002ade:	4603      	mov	r3, r0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e048      	b.n	8002b8c <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d106      	bne.n	8002b10 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7fe f856 	bl	8000bbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2224      	movs	r2, #36	; 0x24
 8002b14:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 0201 	bic.w	r2, r2, #1
 8002b24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 fa3c 	bl	8002fa4 <UART_SetConfig>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d101      	bne.n	8002b36 <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e02a      	b.n	8002b8c <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d002      	beq.n	8002b44 <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 fc94 	bl	800346c <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8002b62:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689a      	ldr	r2, [r3, #8]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0208 	orr.w	r2, r2, #8
 8002b72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 0201 	orr.w	r2, r2, #1
 8002b82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 fd13 	bl	80035b0 <UART_CheckIdleState>
 8002b8a:	4603      	mov	r3, r0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b08a      	sub	sp, #40	; 0x28
 8002b98:	af02      	add	r7, sp, #8
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	603b      	str	r3, [r7, #0]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ba8:	2b20      	cmp	r3, #32
 8002baa:	f040 8081 	bne.w	8002cb0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d002      	beq.n	8002bba <HAL_UART_Transmit+0x26>
 8002bb4:	88fb      	ldrh	r3, [r7, #6]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e079      	b.n	8002cb2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <HAL_UART_Transmit+0x38>
 8002bc8:	2302      	movs	r3, #2
 8002bca:	e072      	b.n	8002cb2 <HAL_UART_Transmit+0x11e>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2221      	movs	r2, #33	; 0x21
 8002be0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002be2:	f7fe fa45 	bl	8001070 <HAL_GetTick>
 8002be6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	88fa      	ldrh	r2, [r7, #6]
 8002bec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	88fa      	ldrh	r2, [r7, #6]
 8002bf4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c00:	d108      	bne.n	8002c14 <HAL_UART_Transmit+0x80>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d104      	bne.n	8002c14 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	61bb      	str	r3, [r7, #24]
 8002c12:	e003      	b.n	8002c1c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002c24:	e02c      	b.n	8002c80 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	2180      	movs	r1, #128	; 0x80
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f000 fcf0 	bl	8003616 <UART_WaitOnFlagUntilTimeout>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e038      	b.n	8002cb2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10b      	bne.n	8002c5e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	881b      	ldrh	r3, [r3, #0]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c54:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	3302      	adds	r3, #2
 8002c5a:	61bb      	str	r3, [r7, #24]
 8002c5c:	e007      	b.n	8002c6e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	781a      	ldrb	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	3b01      	subs	r3, #1
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1cc      	bne.n	8002c26 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	2200      	movs	r2, #0
 8002c94:	2140      	movs	r1, #64	; 0x40
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 fcbd 	bl	8003616 <UART_WaitOnFlagUntilTimeout>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e005      	b.n	8002cb2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002cac:	2300      	movs	r3, #0
 8002cae:	e000      	b.n	8002cb2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002cb0:	2302      	movs	r3, #2
  }
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3720      	adds	r7, #32
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b08a      	sub	sp, #40	; 0x28
 8002cbe:	af02      	add	r7, sp, #8
 8002cc0:	60f8      	str	r0, [r7, #12]
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	603b      	str	r3, [r7, #0]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cce:	2b20      	cmp	r3, #32
 8002cd0:	f040 80be 	bne.w	8002e50 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d002      	beq.n	8002ce0 <HAL_UART_Receive+0x26>
 8002cda:	88fb      	ldrh	r3, [r7, #6]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e0b6      	b.n	8002e52 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d101      	bne.n	8002cf2 <HAL_UART_Receive+0x38>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e0af      	b.n	8002e52 <HAL_UART_Receive+0x198>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2222      	movs	r2, #34	; 0x22
 8002d06:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d0e:	f7fe f9af 	bl	8001070 <HAL_GetTick>
 8002d12:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	88fa      	ldrh	r2, [r7, #6]
 8002d18:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	88fa      	ldrh	r2, [r7, #6]
 8002d20:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d2c:	d10e      	bne.n	8002d4c <HAL_UART_Receive+0x92>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d105      	bne.n	8002d42 <HAL_UART_Receive+0x88>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002d3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d40:	e02d      	b.n	8002d9e <HAL_UART_Receive+0xe4>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	22ff      	movs	r2, #255	; 0xff
 8002d46:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d4a:	e028      	b.n	8002d9e <HAL_UART_Receive+0xe4>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10d      	bne.n	8002d70 <HAL_UART_Receive+0xb6>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d104      	bne.n	8002d66 <HAL_UART_Receive+0xac>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	22ff      	movs	r2, #255	; 0xff
 8002d60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d64:	e01b      	b.n	8002d9e <HAL_UART_Receive+0xe4>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	227f      	movs	r2, #127	; 0x7f
 8002d6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d6e:	e016      	b.n	8002d9e <HAL_UART_Receive+0xe4>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d78:	d10d      	bne.n	8002d96 <HAL_UART_Receive+0xdc>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d104      	bne.n	8002d8c <HAL_UART_Receive+0xd2>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	227f      	movs	r2, #127	; 0x7f
 8002d86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d8a:	e008      	b.n	8002d9e <HAL_UART_Receive+0xe4>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	223f      	movs	r2, #63	; 0x3f
 8002d90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d94:	e003      	b.n	8002d9e <HAL_UART_Receive+0xe4>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002da4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dae:	d108      	bne.n	8002dc2 <HAL_UART_Receive+0x108>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d104      	bne.n	8002dc2 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	61bb      	str	r3, [r7, #24]
 8002dc0:	e003      	b.n	8002dca <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002dd2:	e032      	b.n	8002e3a <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	2120      	movs	r1, #32
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 fc19 	bl	8003616 <UART_WaitOnFlagUntilTimeout>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e031      	b.n	8002e52 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d10c      	bne.n	8002e0e <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	8a7b      	ldrh	r3, [r7, #18]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	3302      	adds	r3, #2
 8002e0a:	61bb      	str	r3, [r7, #24]
 8002e0c:	e00c      	b.n	8002e28 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	8a7b      	ldrh	r3, [r7, #18]
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	3301      	adds	r3, #1
 8002e26:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	3b01      	subs	r3, #1
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1c6      	bne.n	8002dd4 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	e000      	b.n	8002e52 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8002e50:	2302      	movs	r3, #2
  }
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3720      	adds	r7, #32
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b08f      	sub	sp, #60	; 0x3c
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <HAL_HalfDuplex_EnableTransmitter+0x16>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	e040      	b.n	8002ef2 <HAL_HalfDuplex_EnableTransmitter+0x98>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2224      	movs	r2, #36	; 0x24
 8002e7c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	e853 3f00 	ldrex	r3, [r3]
 8002e8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	f023 030c 	bic.w	r3, r3, #12
 8002e92:	637b      	str	r3, [r7, #52]	; 0x34
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	461a      	mov	r2, r3
 8002e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e9e:	62ba      	str	r2, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ea2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ea4:	e841 2300 	strex	r3, r2, [r1]
 8002ea8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1e6      	bne.n	8002e7e <HAL_HalfDuplex_EnableTransmitter+0x24>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	e853 3f00 	ldrex	r3, [r3]
 8002ebc:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	f043 0308 	orr.w	r3, r3, #8
 8002ec4:	633b      	str	r3, [r7, #48]	; 0x30
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ece:	61bb      	str	r3, [r7, #24]
 8002ed0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed2:	6979      	ldr	r1, [r7, #20]
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	e841 2300 	strex	r3, r2, [r1]
 8002eda:	613b      	str	r3, [r7, #16]
   return(result);
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1e6      	bne.n	8002eb0 <HAL_HalfDuplex_EnableTransmitter+0x56>

  huart->gState = HAL_UART_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	373c      	adds	r7, #60	; 0x3c
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b08f      	sub	sp, #60	; 0x3c
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d101      	bne.n	8002f14 <HAL_HalfDuplex_EnableReceiver+0x16>
 8002f10:	2302      	movs	r3, #2
 8002f12:	e040      	b.n	8002f96 <HAL_HalfDuplex_EnableReceiver+0x98>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2224      	movs	r2, #36	; 0x24
 8002f20:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f28:	6a3b      	ldr	r3, [r7, #32]
 8002f2a:	e853 3f00 	ldrex	r3, [r3]
 8002f2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	f023 030c 	bic.w	r3, r3, #12
 8002f36:	637b      	str	r3, [r7, #52]	; 0x34
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f42:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f48:	e841 2300 	strex	r3, r2, [r1]
 8002f4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1e6      	bne.n	8002f22 <HAL_HalfDuplex_EnableReceiver+0x24>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	e853 3f00 	ldrex	r3, [r3]
 8002f60:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	f043 0304 	orr.w	r3, r3, #4
 8002f68:	633b      	str	r3, [r7, #48]	; 0x30
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f72:	61bb      	str	r3, [r7, #24]
 8002f74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f76:	6979      	ldr	r1, [r7, #20]
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	e841 2300 	strex	r3, r2, [r1]
 8002f7e:	613b      	str	r3, [r7, #16]
   return(result);
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1e6      	bne.n	8002f54 <HAL_HalfDuplex_EnableReceiver+0x56>

  huart->gState = HAL_UART_STATE_READY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	373c      	adds	r7, #60	; 0x3c
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
	...

08002fa4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b088      	sub	sp, #32
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fac:	2300      	movs	r3, #0
 8002fae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	69db      	ldr	r3, [r3, #28]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	4ba6      	ldr	r3, [pc, #664]	; (8003268 <UART_SetConfig+0x2c4>)
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6812      	ldr	r2, [r2, #0]
 8002fd6:	6979      	ldr	r1, [r7, #20]
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	430a      	orrs	r2, r1
 8003014:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a94      	ldr	r2, [pc, #592]	; (800326c <UART_SetConfig+0x2c8>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d120      	bne.n	8003062 <UART_SetConfig+0xbe>
 8003020:	4b93      	ldr	r3, [pc, #588]	; (8003270 <UART_SetConfig+0x2cc>)
 8003022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	2b03      	cmp	r3, #3
 800302c:	d816      	bhi.n	800305c <UART_SetConfig+0xb8>
 800302e:	a201      	add	r2, pc, #4	; (adr r2, 8003034 <UART_SetConfig+0x90>)
 8003030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003034:	08003045 	.word	0x08003045
 8003038:	08003051 	.word	0x08003051
 800303c:	0800304b 	.word	0x0800304b
 8003040:	08003057 	.word	0x08003057
 8003044:	2301      	movs	r3, #1
 8003046:	77fb      	strb	r3, [r7, #31]
 8003048:	e150      	b.n	80032ec <UART_SetConfig+0x348>
 800304a:	2302      	movs	r3, #2
 800304c:	77fb      	strb	r3, [r7, #31]
 800304e:	e14d      	b.n	80032ec <UART_SetConfig+0x348>
 8003050:	2304      	movs	r3, #4
 8003052:	77fb      	strb	r3, [r7, #31]
 8003054:	e14a      	b.n	80032ec <UART_SetConfig+0x348>
 8003056:	2308      	movs	r3, #8
 8003058:	77fb      	strb	r3, [r7, #31]
 800305a:	e147      	b.n	80032ec <UART_SetConfig+0x348>
 800305c:	2310      	movs	r3, #16
 800305e:	77fb      	strb	r3, [r7, #31]
 8003060:	e144      	b.n	80032ec <UART_SetConfig+0x348>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a83      	ldr	r2, [pc, #524]	; (8003274 <UART_SetConfig+0x2d0>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d132      	bne.n	80030d2 <UART_SetConfig+0x12e>
 800306c:	4b80      	ldr	r3, [pc, #512]	; (8003270 <UART_SetConfig+0x2cc>)
 800306e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003072:	f003 030c 	and.w	r3, r3, #12
 8003076:	2b0c      	cmp	r3, #12
 8003078:	d828      	bhi.n	80030cc <UART_SetConfig+0x128>
 800307a:	a201      	add	r2, pc, #4	; (adr r2, 8003080 <UART_SetConfig+0xdc>)
 800307c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003080:	080030b5 	.word	0x080030b5
 8003084:	080030cd 	.word	0x080030cd
 8003088:	080030cd 	.word	0x080030cd
 800308c:	080030cd 	.word	0x080030cd
 8003090:	080030c1 	.word	0x080030c1
 8003094:	080030cd 	.word	0x080030cd
 8003098:	080030cd 	.word	0x080030cd
 800309c:	080030cd 	.word	0x080030cd
 80030a0:	080030bb 	.word	0x080030bb
 80030a4:	080030cd 	.word	0x080030cd
 80030a8:	080030cd 	.word	0x080030cd
 80030ac:	080030cd 	.word	0x080030cd
 80030b0:	080030c7 	.word	0x080030c7
 80030b4:	2300      	movs	r3, #0
 80030b6:	77fb      	strb	r3, [r7, #31]
 80030b8:	e118      	b.n	80032ec <UART_SetConfig+0x348>
 80030ba:	2302      	movs	r3, #2
 80030bc:	77fb      	strb	r3, [r7, #31]
 80030be:	e115      	b.n	80032ec <UART_SetConfig+0x348>
 80030c0:	2304      	movs	r3, #4
 80030c2:	77fb      	strb	r3, [r7, #31]
 80030c4:	e112      	b.n	80032ec <UART_SetConfig+0x348>
 80030c6:	2308      	movs	r3, #8
 80030c8:	77fb      	strb	r3, [r7, #31]
 80030ca:	e10f      	b.n	80032ec <UART_SetConfig+0x348>
 80030cc:	2310      	movs	r3, #16
 80030ce:	77fb      	strb	r3, [r7, #31]
 80030d0:	e10c      	b.n	80032ec <UART_SetConfig+0x348>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a68      	ldr	r2, [pc, #416]	; (8003278 <UART_SetConfig+0x2d4>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d120      	bne.n	800311e <UART_SetConfig+0x17a>
 80030dc:	4b64      	ldr	r3, [pc, #400]	; (8003270 <UART_SetConfig+0x2cc>)
 80030de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80030e6:	2b30      	cmp	r3, #48	; 0x30
 80030e8:	d013      	beq.n	8003112 <UART_SetConfig+0x16e>
 80030ea:	2b30      	cmp	r3, #48	; 0x30
 80030ec:	d814      	bhi.n	8003118 <UART_SetConfig+0x174>
 80030ee:	2b20      	cmp	r3, #32
 80030f0:	d009      	beq.n	8003106 <UART_SetConfig+0x162>
 80030f2:	2b20      	cmp	r3, #32
 80030f4:	d810      	bhi.n	8003118 <UART_SetConfig+0x174>
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d002      	beq.n	8003100 <UART_SetConfig+0x15c>
 80030fa:	2b10      	cmp	r3, #16
 80030fc:	d006      	beq.n	800310c <UART_SetConfig+0x168>
 80030fe:	e00b      	b.n	8003118 <UART_SetConfig+0x174>
 8003100:	2300      	movs	r3, #0
 8003102:	77fb      	strb	r3, [r7, #31]
 8003104:	e0f2      	b.n	80032ec <UART_SetConfig+0x348>
 8003106:	2302      	movs	r3, #2
 8003108:	77fb      	strb	r3, [r7, #31]
 800310a:	e0ef      	b.n	80032ec <UART_SetConfig+0x348>
 800310c:	2304      	movs	r3, #4
 800310e:	77fb      	strb	r3, [r7, #31]
 8003110:	e0ec      	b.n	80032ec <UART_SetConfig+0x348>
 8003112:	2308      	movs	r3, #8
 8003114:	77fb      	strb	r3, [r7, #31]
 8003116:	e0e9      	b.n	80032ec <UART_SetConfig+0x348>
 8003118:	2310      	movs	r3, #16
 800311a:	77fb      	strb	r3, [r7, #31]
 800311c:	e0e6      	b.n	80032ec <UART_SetConfig+0x348>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a56      	ldr	r2, [pc, #344]	; (800327c <UART_SetConfig+0x2d8>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d120      	bne.n	800316a <UART_SetConfig+0x1c6>
 8003128:	4b51      	ldr	r3, [pc, #324]	; (8003270 <UART_SetConfig+0x2cc>)
 800312a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800312e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003132:	2bc0      	cmp	r3, #192	; 0xc0
 8003134:	d013      	beq.n	800315e <UART_SetConfig+0x1ba>
 8003136:	2bc0      	cmp	r3, #192	; 0xc0
 8003138:	d814      	bhi.n	8003164 <UART_SetConfig+0x1c0>
 800313a:	2b80      	cmp	r3, #128	; 0x80
 800313c:	d009      	beq.n	8003152 <UART_SetConfig+0x1ae>
 800313e:	2b80      	cmp	r3, #128	; 0x80
 8003140:	d810      	bhi.n	8003164 <UART_SetConfig+0x1c0>
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <UART_SetConfig+0x1a8>
 8003146:	2b40      	cmp	r3, #64	; 0x40
 8003148:	d006      	beq.n	8003158 <UART_SetConfig+0x1b4>
 800314a:	e00b      	b.n	8003164 <UART_SetConfig+0x1c0>
 800314c:	2300      	movs	r3, #0
 800314e:	77fb      	strb	r3, [r7, #31]
 8003150:	e0cc      	b.n	80032ec <UART_SetConfig+0x348>
 8003152:	2302      	movs	r3, #2
 8003154:	77fb      	strb	r3, [r7, #31]
 8003156:	e0c9      	b.n	80032ec <UART_SetConfig+0x348>
 8003158:	2304      	movs	r3, #4
 800315a:	77fb      	strb	r3, [r7, #31]
 800315c:	e0c6      	b.n	80032ec <UART_SetConfig+0x348>
 800315e:	2308      	movs	r3, #8
 8003160:	77fb      	strb	r3, [r7, #31]
 8003162:	e0c3      	b.n	80032ec <UART_SetConfig+0x348>
 8003164:	2310      	movs	r3, #16
 8003166:	77fb      	strb	r3, [r7, #31]
 8003168:	e0c0      	b.n	80032ec <UART_SetConfig+0x348>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a44      	ldr	r2, [pc, #272]	; (8003280 <UART_SetConfig+0x2dc>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d125      	bne.n	80031c0 <UART_SetConfig+0x21c>
 8003174:	4b3e      	ldr	r3, [pc, #248]	; (8003270 <UART_SetConfig+0x2cc>)
 8003176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800317e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003182:	d017      	beq.n	80031b4 <UART_SetConfig+0x210>
 8003184:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003188:	d817      	bhi.n	80031ba <UART_SetConfig+0x216>
 800318a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800318e:	d00b      	beq.n	80031a8 <UART_SetConfig+0x204>
 8003190:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003194:	d811      	bhi.n	80031ba <UART_SetConfig+0x216>
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <UART_SetConfig+0x1fe>
 800319a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800319e:	d006      	beq.n	80031ae <UART_SetConfig+0x20a>
 80031a0:	e00b      	b.n	80031ba <UART_SetConfig+0x216>
 80031a2:	2300      	movs	r3, #0
 80031a4:	77fb      	strb	r3, [r7, #31]
 80031a6:	e0a1      	b.n	80032ec <UART_SetConfig+0x348>
 80031a8:	2302      	movs	r3, #2
 80031aa:	77fb      	strb	r3, [r7, #31]
 80031ac:	e09e      	b.n	80032ec <UART_SetConfig+0x348>
 80031ae:	2304      	movs	r3, #4
 80031b0:	77fb      	strb	r3, [r7, #31]
 80031b2:	e09b      	b.n	80032ec <UART_SetConfig+0x348>
 80031b4:	2308      	movs	r3, #8
 80031b6:	77fb      	strb	r3, [r7, #31]
 80031b8:	e098      	b.n	80032ec <UART_SetConfig+0x348>
 80031ba:	2310      	movs	r3, #16
 80031bc:	77fb      	strb	r3, [r7, #31]
 80031be:	e095      	b.n	80032ec <UART_SetConfig+0x348>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a2f      	ldr	r2, [pc, #188]	; (8003284 <UART_SetConfig+0x2e0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d125      	bne.n	8003216 <UART_SetConfig+0x272>
 80031ca:	4b29      	ldr	r3, [pc, #164]	; (8003270 <UART_SetConfig+0x2cc>)
 80031cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80031d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031d8:	d017      	beq.n	800320a <UART_SetConfig+0x266>
 80031da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031de:	d817      	bhi.n	8003210 <UART_SetConfig+0x26c>
 80031e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031e4:	d00b      	beq.n	80031fe <UART_SetConfig+0x25a>
 80031e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031ea:	d811      	bhi.n	8003210 <UART_SetConfig+0x26c>
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <UART_SetConfig+0x254>
 80031f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031f4:	d006      	beq.n	8003204 <UART_SetConfig+0x260>
 80031f6:	e00b      	b.n	8003210 <UART_SetConfig+0x26c>
 80031f8:	2301      	movs	r3, #1
 80031fa:	77fb      	strb	r3, [r7, #31]
 80031fc:	e076      	b.n	80032ec <UART_SetConfig+0x348>
 80031fe:	2302      	movs	r3, #2
 8003200:	77fb      	strb	r3, [r7, #31]
 8003202:	e073      	b.n	80032ec <UART_SetConfig+0x348>
 8003204:	2304      	movs	r3, #4
 8003206:	77fb      	strb	r3, [r7, #31]
 8003208:	e070      	b.n	80032ec <UART_SetConfig+0x348>
 800320a:	2308      	movs	r3, #8
 800320c:	77fb      	strb	r3, [r7, #31]
 800320e:	e06d      	b.n	80032ec <UART_SetConfig+0x348>
 8003210:	2310      	movs	r3, #16
 8003212:	77fb      	strb	r3, [r7, #31]
 8003214:	e06a      	b.n	80032ec <UART_SetConfig+0x348>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a1b      	ldr	r2, [pc, #108]	; (8003288 <UART_SetConfig+0x2e4>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d138      	bne.n	8003292 <UART_SetConfig+0x2ee>
 8003220:	4b13      	ldr	r3, [pc, #76]	; (8003270 <UART_SetConfig+0x2cc>)
 8003222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003226:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800322a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800322e:	d017      	beq.n	8003260 <UART_SetConfig+0x2bc>
 8003230:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003234:	d82a      	bhi.n	800328c <UART_SetConfig+0x2e8>
 8003236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800323a:	d00b      	beq.n	8003254 <UART_SetConfig+0x2b0>
 800323c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003240:	d824      	bhi.n	800328c <UART_SetConfig+0x2e8>
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <UART_SetConfig+0x2aa>
 8003246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800324a:	d006      	beq.n	800325a <UART_SetConfig+0x2b6>
 800324c:	e01e      	b.n	800328c <UART_SetConfig+0x2e8>
 800324e:	2300      	movs	r3, #0
 8003250:	77fb      	strb	r3, [r7, #31]
 8003252:	e04b      	b.n	80032ec <UART_SetConfig+0x348>
 8003254:	2302      	movs	r3, #2
 8003256:	77fb      	strb	r3, [r7, #31]
 8003258:	e048      	b.n	80032ec <UART_SetConfig+0x348>
 800325a:	2304      	movs	r3, #4
 800325c:	77fb      	strb	r3, [r7, #31]
 800325e:	e045      	b.n	80032ec <UART_SetConfig+0x348>
 8003260:	2308      	movs	r3, #8
 8003262:	77fb      	strb	r3, [r7, #31]
 8003264:	e042      	b.n	80032ec <UART_SetConfig+0x348>
 8003266:	bf00      	nop
 8003268:	efff69f3 	.word	0xefff69f3
 800326c:	40011000 	.word	0x40011000
 8003270:	40023800 	.word	0x40023800
 8003274:	40004400 	.word	0x40004400
 8003278:	40004800 	.word	0x40004800
 800327c:	40004c00 	.word	0x40004c00
 8003280:	40005000 	.word	0x40005000
 8003284:	40011400 	.word	0x40011400
 8003288:	40007800 	.word	0x40007800
 800328c:	2310      	movs	r3, #16
 800328e:	77fb      	strb	r3, [r7, #31]
 8003290:	e02c      	b.n	80032ec <UART_SetConfig+0x348>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a72      	ldr	r2, [pc, #456]	; (8003460 <UART_SetConfig+0x4bc>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d125      	bne.n	80032e8 <UART_SetConfig+0x344>
 800329c:	4b71      	ldr	r3, [pc, #452]	; (8003464 <UART_SetConfig+0x4c0>)
 800329e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80032a6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80032aa:	d017      	beq.n	80032dc <UART_SetConfig+0x338>
 80032ac:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80032b0:	d817      	bhi.n	80032e2 <UART_SetConfig+0x33e>
 80032b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032b6:	d00b      	beq.n	80032d0 <UART_SetConfig+0x32c>
 80032b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032bc:	d811      	bhi.n	80032e2 <UART_SetConfig+0x33e>
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <UART_SetConfig+0x326>
 80032c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032c6:	d006      	beq.n	80032d6 <UART_SetConfig+0x332>
 80032c8:	e00b      	b.n	80032e2 <UART_SetConfig+0x33e>
 80032ca:	2300      	movs	r3, #0
 80032cc:	77fb      	strb	r3, [r7, #31]
 80032ce:	e00d      	b.n	80032ec <UART_SetConfig+0x348>
 80032d0:	2302      	movs	r3, #2
 80032d2:	77fb      	strb	r3, [r7, #31]
 80032d4:	e00a      	b.n	80032ec <UART_SetConfig+0x348>
 80032d6:	2304      	movs	r3, #4
 80032d8:	77fb      	strb	r3, [r7, #31]
 80032da:	e007      	b.n	80032ec <UART_SetConfig+0x348>
 80032dc:	2308      	movs	r3, #8
 80032de:	77fb      	strb	r3, [r7, #31]
 80032e0:	e004      	b.n	80032ec <UART_SetConfig+0x348>
 80032e2:	2310      	movs	r3, #16
 80032e4:	77fb      	strb	r3, [r7, #31]
 80032e6:	e001      	b.n	80032ec <UART_SetConfig+0x348>
 80032e8:	2310      	movs	r3, #16
 80032ea:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	69db      	ldr	r3, [r3, #28]
 80032f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032f4:	d15b      	bne.n	80033ae <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80032f6:	7ffb      	ldrb	r3, [r7, #31]
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	d828      	bhi.n	800334e <UART_SetConfig+0x3aa>
 80032fc:	a201      	add	r2, pc, #4	; (adr r2, 8003304 <UART_SetConfig+0x360>)
 80032fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003302:	bf00      	nop
 8003304:	08003329 	.word	0x08003329
 8003308:	08003331 	.word	0x08003331
 800330c:	08003339 	.word	0x08003339
 8003310:	0800334f 	.word	0x0800334f
 8003314:	0800333f 	.word	0x0800333f
 8003318:	0800334f 	.word	0x0800334f
 800331c:	0800334f 	.word	0x0800334f
 8003320:	0800334f 	.word	0x0800334f
 8003324:	08003347 	.word	0x08003347
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003328:	f7fe ff78 	bl	800221c <HAL_RCC_GetPCLK1Freq>
 800332c:	61b8      	str	r0, [r7, #24]
        break;
 800332e:	e013      	b.n	8003358 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003330:	f7fe ff88 	bl	8002244 <HAL_RCC_GetPCLK2Freq>
 8003334:	61b8      	str	r0, [r7, #24]
        break;
 8003336:	e00f      	b.n	8003358 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003338:	4b4b      	ldr	r3, [pc, #300]	; (8003468 <UART_SetConfig+0x4c4>)
 800333a:	61bb      	str	r3, [r7, #24]
        break;
 800333c:	e00c      	b.n	8003358 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800333e:	f7fe fe5b 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 8003342:	61b8      	str	r0, [r7, #24]
        break;
 8003344:	e008      	b.n	8003358 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003346:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800334a:	61bb      	str	r3, [r7, #24]
        break;
 800334c:	e004      	b.n	8003358 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800334e:	2300      	movs	r3, #0
 8003350:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	77bb      	strb	r3, [r7, #30]
        break;
 8003356:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d074      	beq.n	8003448 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	005a      	lsls	r2, r3, #1
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	085b      	lsrs	r3, r3, #1
 8003368:	441a      	add	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003372:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	2b0f      	cmp	r3, #15
 8003378:	d916      	bls.n	80033a8 <UART_SetConfig+0x404>
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003380:	d212      	bcs.n	80033a8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	b29b      	uxth	r3, r3
 8003386:	f023 030f 	bic.w	r3, r3, #15
 800338a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	085b      	lsrs	r3, r3, #1
 8003390:	b29b      	uxth	r3, r3
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	b29a      	uxth	r2, r3
 8003398:	89fb      	ldrh	r3, [r7, #14]
 800339a:	4313      	orrs	r3, r2
 800339c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	89fa      	ldrh	r2, [r7, #14]
 80033a4:	60da      	str	r2, [r3, #12]
 80033a6:	e04f      	b.n	8003448 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	77bb      	strb	r3, [r7, #30]
 80033ac:	e04c      	b.n	8003448 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033ae:	7ffb      	ldrb	r3, [r7, #31]
 80033b0:	2b08      	cmp	r3, #8
 80033b2:	d828      	bhi.n	8003406 <UART_SetConfig+0x462>
 80033b4:	a201      	add	r2, pc, #4	; (adr r2, 80033bc <UART_SetConfig+0x418>)
 80033b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ba:	bf00      	nop
 80033bc:	080033e1 	.word	0x080033e1
 80033c0:	080033e9 	.word	0x080033e9
 80033c4:	080033f1 	.word	0x080033f1
 80033c8:	08003407 	.word	0x08003407
 80033cc:	080033f7 	.word	0x080033f7
 80033d0:	08003407 	.word	0x08003407
 80033d4:	08003407 	.word	0x08003407
 80033d8:	08003407 	.word	0x08003407
 80033dc:	080033ff 	.word	0x080033ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033e0:	f7fe ff1c 	bl	800221c <HAL_RCC_GetPCLK1Freq>
 80033e4:	61b8      	str	r0, [r7, #24]
        break;
 80033e6:	e013      	b.n	8003410 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033e8:	f7fe ff2c 	bl	8002244 <HAL_RCC_GetPCLK2Freq>
 80033ec:	61b8      	str	r0, [r7, #24]
        break;
 80033ee:	e00f      	b.n	8003410 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033f0:	4b1d      	ldr	r3, [pc, #116]	; (8003468 <UART_SetConfig+0x4c4>)
 80033f2:	61bb      	str	r3, [r7, #24]
        break;
 80033f4:	e00c      	b.n	8003410 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033f6:	f7fe fdff 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 80033fa:	61b8      	str	r0, [r7, #24]
        break;
 80033fc:	e008      	b.n	8003410 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003402:	61bb      	str	r3, [r7, #24]
        break;
 8003404:	e004      	b.n	8003410 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003406:	2300      	movs	r3, #0
 8003408:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	77bb      	strb	r3, [r7, #30]
        break;
 800340e:	bf00      	nop
    }

    if (pclk != 0U)
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d018      	beq.n	8003448 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	085a      	lsrs	r2, r3, #1
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	441a      	add	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	fbb2 f3f3 	udiv	r3, r2, r3
 8003428:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	2b0f      	cmp	r3, #15
 800342e:	d909      	bls.n	8003444 <UART_SetConfig+0x4a0>
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003436:	d205      	bcs.n	8003444 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	b29a      	uxth	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	60da      	str	r2, [r3, #12]
 8003442:	e001      	b.n	8003448 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003454:	7fbb      	ldrb	r3, [r7, #30]
}
 8003456:	4618      	mov	r0, r3
 8003458:	3720      	adds	r7, #32
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	40007c00 	.word	0x40007c00
 8003464:	40023800 	.word	0x40023800
 8003468:	00f42400 	.word	0x00f42400

0800346c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00a      	beq.n	8003496 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	f003 0304 	and.w	r3, r3, #4
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00a      	beq.n	80034da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	f003 0310 	and.w	r3, r3, #16
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00a      	beq.n	800351e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	430a      	orrs	r2, r1
 800351c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	f003 0320 	and.w	r3, r3, #32
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00a      	beq.n	8003540 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	430a      	orrs	r2, r1
 800353e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003548:	2b00      	cmp	r3, #0
 800354a:	d01a      	beq.n	8003582 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800356a:	d10a      	bne.n	8003582 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00a      	beq.n	80035a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	430a      	orrs	r2, r1
 80035a2:	605a      	str	r2, [r3, #4]
  }
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af02      	add	r7, sp, #8
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035c0:	f7fd fd56 	bl	8001070 <HAL_GetTick>
 80035c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0308 	and.w	r3, r3, #8
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d10e      	bne.n	80035f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f817 	bl	8003616 <UART_WaitOnFlagUntilTimeout>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e00d      	b.n	800360e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2220      	movs	r2, #32
 80035f6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2220      	movs	r2, #32
 80035fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b09c      	sub	sp, #112	; 0x70
 800361a:	af00      	add	r7, sp, #0
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	603b      	str	r3, [r7, #0]
 8003622:	4613      	mov	r3, r2
 8003624:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003626:	e0a5      	b.n	8003774 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003628:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800362a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800362e:	f000 80a1 	beq.w	8003774 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003632:	f7fd fd1d 	bl	8001070 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800363e:	429a      	cmp	r2, r3
 8003640:	d302      	bcc.n	8003648 <UART_WaitOnFlagUntilTimeout+0x32>
 8003642:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003644:	2b00      	cmp	r3, #0
 8003646:	d13e      	bne.n	80036c6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003650:	e853 3f00 	ldrex	r3, [r3]
 8003654:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003658:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800365c:	667b      	str	r3, [r7, #100]	; 0x64
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	461a      	mov	r2, r3
 8003664:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003666:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003668:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800366a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800366c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800366e:	e841 2300 	strex	r3, r2, [r1]
 8003672:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1e6      	bne.n	8003648 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	3308      	adds	r3, #8
 8003680:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003684:	e853 3f00 	ldrex	r3, [r3]
 8003688:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800368a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800368c:	f023 0301 	bic.w	r3, r3, #1
 8003690:	663b      	str	r3, [r7, #96]	; 0x60
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	3308      	adds	r3, #8
 8003698:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800369a:	64ba      	str	r2, [r7, #72]	; 0x48
 800369c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80036a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036a2:	e841 2300 	strex	r3, r2, [r1]
 80036a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80036a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1e5      	bne.n	800367a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2220      	movs	r2, #32
 80036b2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2220      	movs	r2, #32
 80036b8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e067      	b.n	8003796 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d04f      	beq.n	8003774 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036e2:	d147      	bne.n	8003774 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036ec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f6:	e853 3f00 	ldrex	r3, [r3]
 80036fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003702:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	461a      	mov	r2, r3
 800370a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800370c:	637b      	str	r3, [r7, #52]	; 0x34
 800370e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003710:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003712:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003714:	e841 2300 	strex	r3, r2, [r1]
 8003718:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800371a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1e6      	bne.n	80036ee <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	3308      	adds	r3, #8
 8003726:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	e853 3f00 	ldrex	r3, [r3]
 800372e:	613b      	str	r3, [r7, #16]
   return(result);
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	f023 0301 	bic.w	r3, r3, #1
 8003736:	66bb      	str	r3, [r7, #104]	; 0x68
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	3308      	adds	r3, #8
 800373e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003740:	623a      	str	r2, [r7, #32]
 8003742:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003744:	69f9      	ldr	r1, [r7, #28]
 8003746:	6a3a      	ldr	r2, [r7, #32]
 8003748:	e841 2300 	strex	r3, r2, [r1]
 800374c:	61bb      	str	r3, [r7, #24]
   return(result);
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1e5      	bne.n	8003720 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2220      	movs	r2, #32
 8003758:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2220      	movs	r2, #32
 800375e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2220      	movs	r2, #32
 8003764:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e010      	b.n	8003796 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	69da      	ldr	r2, [r3, #28]
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	4013      	ands	r3, r2
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	429a      	cmp	r2, r3
 8003782:	bf0c      	ite	eq
 8003784:	2301      	moveq	r3, #1
 8003786:	2300      	movne	r3, #0
 8003788:	b2db      	uxtb	r3, r3
 800378a:	461a      	mov	r2, r3
 800378c:	79fb      	ldrb	r3, [r7, #7]
 800378e:	429a      	cmp	r2, r3
 8003790:	f43f af4a 	beq.w	8003628 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3770      	adds	r7, #112	; 0x70
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
	...

080037a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037a0:	b084      	sub	sp, #16
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b084      	sub	sp, #16
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
 80037aa:	f107 001c 	add.w	r0, r7, #28
 80037ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80037b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d120      	bne.n	80037fa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68da      	ldr	r2, [r3, #12]
 80037c8:	4b20      	ldr	r3, [pc, #128]	; (800384c <USB_CoreInit+0xac>)
 80037ca:	4013      	ands	r3, r2
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80037dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d105      	bne.n	80037ee <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 fa92 	bl	8003d18 <USB_CoreReset>
 80037f4:	4603      	mov	r3, r0
 80037f6:	73fb      	strb	r3, [r7, #15]
 80037f8:	e010      	b.n	800381c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 fa86 	bl	8003d18 <USB_CoreReset>
 800380c:	4603      	mov	r3, r0
 800380e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003814:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800381c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381e:	2b01      	cmp	r3, #1
 8003820:	d10b      	bne.n	800383a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f043 0206 	orr.w	r2, r3, #6
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f043 0220 	orr.w	r2, r3, #32
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800383a:	7bfb      	ldrb	r3, [r7, #15]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003846:	b004      	add	sp, #16
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	ffbdffbf 	.word	0xffbdffbf

08003850 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f023 0201 	bic.w	r2, r3, #1
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b084      	sub	sp, #16
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
 800387a:	460b      	mov	r3, r1
 800387c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800387e:	2300      	movs	r3, #0
 8003880:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800388e:	78fb      	ldrb	r3, [r7, #3]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d115      	bne.n	80038c0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80038a0:	2001      	movs	r0, #1
 80038a2:	f7fd fbf1 	bl	8001088 <HAL_Delay>
      ms++;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	3301      	adds	r3, #1
 80038aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 fa25 	bl	8003cfc <USB_GetMode>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d01e      	beq.n	80038f6 <USB_SetCurrentMode+0x84>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2b31      	cmp	r3, #49	; 0x31
 80038bc:	d9f0      	bls.n	80038a0 <USB_SetCurrentMode+0x2e>
 80038be:	e01a      	b.n	80038f6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80038c0:	78fb      	ldrb	r3, [r7, #3]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d115      	bne.n	80038f2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80038d2:	2001      	movs	r0, #1
 80038d4:	f7fd fbd8 	bl	8001088 <HAL_Delay>
      ms++;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	3301      	adds	r3, #1
 80038dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 fa0c 	bl	8003cfc <USB_GetMode>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d005      	beq.n	80038f6 <USB_SetCurrentMode+0x84>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2b31      	cmp	r3, #49	; 0x31
 80038ee:	d9f0      	bls.n	80038d2 <USB_SetCurrentMode+0x60>
 80038f0:	e001      	b.n	80038f6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e005      	b.n	8003902 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2b32      	cmp	r3, #50	; 0x32
 80038fa:	d101      	bne.n	8003900 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e000      	b.n	8003902 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
	...

0800390c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800390c:	b084      	sub	sp, #16
 800390e:	b580      	push	{r7, lr}
 8003910:	b086      	sub	sp, #24
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
 8003916:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800391a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800391e:	2300      	movs	r3, #0
 8003920:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003926:	2300      	movs	r3, #0
 8003928:	613b      	str	r3, [r7, #16]
 800392a:	e009      	b.n	8003940 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	3340      	adds	r3, #64	; 0x40
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	2200      	movs	r2, #0
 8003938:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	3301      	adds	r3, #1
 800393e:	613b      	str	r3, [r7, #16]
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	2b0e      	cmp	r3, #14
 8003944:	d9f2      	bls.n	800392c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003948:	2b00      	cmp	r3, #0
 800394a:	d11c      	bne.n	8003986 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800395a:	f043 0302 	orr.w	r3, r3, #2
 800395e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003964:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	e005      	b.n	8003992 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003998:	461a      	mov	r2, r3
 800399a:	2300      	movs	r3, #0
 800399c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039a4:	4619      	mov	r1, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ac:	461a      	mov	r2, r3
 80039ae:	680b      	ldr	r3, [r1, #0]
 80039b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80039b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d10c      	bne.n	80039d2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80039b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d104      	bne.n	80039c8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80039be:	2100      	movs	r1, #0
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 f961 	bl	8003c88 <USB_SetDevSpeed>
 80039c6:	e008      	b.n	80039da <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80039c8:	2101      	movs	r1, #1
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f95c 	bl	8003c88 <USB_SetDevSpeed>
 80039d0:	e003      	b.n	80039da <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80039d2:	2103      	movs	r1, #3
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 f957 	bl	8003c88 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80039da:	2110      	movs	r1, #16
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f8f3 	bl	8003bc8 <USB_FlushTxFifo>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 f91d 	bl	8003c2c <USB_FlushRxFifo>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a02:	461a      	mov	r2, r3
 8003a04:	2300      	movs	r3, #0
 8003a06:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a0e:	461a      	mov	r2, r3
 8003a10:	2300      	movs	r3, #0
 8003a12:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a20:	2300      	movs	r3, #0
 8003a22:	613b      	str	r3, [r7, #16]
 8003a24:	e043      	b.n	8003aae <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	015a      	lsls	r2, r3, #5
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a3c:	d118      	bne.n	8003a70 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10a      	bne.n	8003a5a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	015a      	lsls	r2, r3, #5
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a50:	461a      	mov	r2, r3
 8003a52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a56:	6013      	str	r3, [r2, #0]
 8003a58:	e013      	b.n	8003a82 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	015a      	lsls	r2, r3, #5
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	4413      	add	r3, r2
 8003a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a66:	461a      	mov	r2, r3
 8003a68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	e008      	b.n	8003a82 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	015a      	lsls	r2, r3, #5
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4413      	add	r3, r2
 8003a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	2300      	movs	r3, #0
 8003a80:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	015a      	lsls	r2, r3, #5
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a8e:	461a      	mov	r2, r3
 8003a90:	2300      	movs	r3, #0
 8003a92:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003aa6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	613b      	str	r3, [r7, #16]
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d3b7      	bcc.n	8003a26 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	613b      	str	r3, [r7, #16]
 8003aba:	e043      	b.n	8003b44 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	015a      	lsls	r2, r3, #5
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ace:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ad2:	d118      	bne.n	8003b06 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10a      	bne.n	8003af0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	015a      	lsls	r2, r3, #5
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003aec:	6013      	str	r3, [r2, #0]
 8003aee:	e013      	b.n	8003b18 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003afc:	461a      	mov	r2, r3
 8003afe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b02:	6013      	str	r3, [r2, #0]
 8003b04:	e008      	b.n	8003b18 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	015a      	lsls	r2, r3, #5
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b12:	461a      	mov	r2, r3
 8003b14:	2300      	movs	r3, #0
 8003b16:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	015a      	lsls	r2, r3, #5
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b24:	461a      	mov	r2, r3
 8003b26:	2300      	movs	r3, #0
 8003b28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	015a      	lsls	r2, r3, #5
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b36:	461a      	mov	r2, r3
 8003b38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	3301      	adds	r3, #1
 8003b42:	613b      	str	r3, [r7, #16]
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d3b7      	bcc.n	8003abc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b5e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003b6c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d105      	bne.n	8003b80 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	f043 0210 	orr.w	r2, r3, #16
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	699a      	ldr	r2, [r3, #24]
 8003b84:	4b0e      	ldr	r3, [pc, #56]	; (8003bc0 <USB_DevInit+0x2b4>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d005      	beq.n	8003b9e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	f043 0208 	orr.w	r2, r3, #8
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d105      	bne.n	8003bb0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	699a      	ldr	r2, [r3, #24]
 8003ba8:	4b06      	ldr	r3, [pc, #24]	; (8003bc4 <USB_DevInit+0x2b8>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3718      	adds	r7, #24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003bbc:	b004      	add	sp, #16
 8003bbe:	4770      	bx	lr
 8003bc0:	803c3800 	.word	0x803c3800
 8003bc4:	40000004 	.word	0x40000004

08003bc8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	60fb      	str	r3, [r7, #12]
 8003bdc:	4a12      	ldr	r2, [pc, #72]	; (8003c28 <USB_FlushTxFifo+0x60>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d901      	bls.n	8003be6 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e01a      	b.n	8003c1c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	daf3      	bge.n	8003bd6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	019b      	lsls	r3, r3, #6
 8003bf6:	f043 0220 	orr.w	r2, r3, #32
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	3301      	adds	r3, #1
 8003c02:	60fb      	str	r3, [r7, #12]
 8003c04:	4a08      	ldr	r2, [pc, #32]	; (8003c28 <USB_FlushTxFifo+0x60>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d901      	bls.n	8003c0e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e006      	b.n	8003c1c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	f003 0320 	and.w	r3, r3, #32
 8003c16:	2b20      	cmp	r3, #32
 8003c18:	d0f1      	beq.n	8003bfe <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3714      	adds	r7, #20
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr
 8003c28:	00030d40 	.word	0x00030d40

08003c2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	60fb      	str	r3, [r7, #12]
 8003c3e:	4a11      	ldr	r2, [pc, #68]	; (8003c84 <USB_FlushRxFifo+0x58>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d901      	bls.n	8003c48 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e017      	b.n	8003c78 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	daf3      	bge.n	8003c38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2210      	movs	r2, #16
 8003c58:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	4a08      	ldr	r2, [pc, #32]	; (8003c84 <USB_FlushRxFifo+0x58>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d901      	bls.n	8003c6a <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e006      	b.n	8003c78 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	f003 0310 	and.w	r3, r3, #16
 8003c72:	2b10      	cmp	r3, #16
 8003c74:	d0f1      	beq.n	8003c5a <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	00030d40 	.word	0x00030d40

08003c88 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	78fb      	ldrb	r3, [r7, #3]
 8003ca2:	68f9      	ldr	r1, [r7, #12]
 8003ca4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b085      	sub	sp, #20
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003cd4:	f023 0303 	bic.w	r3, r3, #3
 8003cd8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ce8:	f043 0302 	orr.w	r3, r3, #2
 8003cec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	f003 0301 	and.w	r3, r3, #1
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d20:	2300      	movs	r3, #0
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	3301      	adds	r3, #1
 8003d28:	60fb      	str	r3, [r7, #12]
 8003d2a:	4a13      	ldr	r2, [pc, #76]	; (8003d78 <USB_CoreReset+0x60>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d901      	bls.n	8003d34 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e01a      	b.n	8003d6a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	daf3      	bge.n	8003d24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	f043 0201 	orr.w	r2, r3, #1
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	60fb      	str	r3, [r7, #12]
 8003d52:	4a09      	ldr	r2, [pc, #36]	; (8003d78 <USB_CoreReset+0x60>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d901      	bls.n	8003d5c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e006      	b.n	8003d6a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d0f1      	beq.n	8003d4c <USB_CoreReset+0x34>

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3714      	adds	r7, #20
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	00030d40 	.word	0x00030d40

08003d7c <tmc_fillCRC8Table>:
 *     This allows us to simply store the lowest byte of the uint32_t,
 *     right-shift the uint32_t by 8 and increment the table pointer.
 *     After 4 iterations of that all 4 bytes of the uint32_t are stored in the table.
 */
uint8_t tmc_fillCRC8Table(uint8_t polynomial, bool isReflected, uint8_t index)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b088      	sub	sp, #32
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	4603      	mov	r3, r0
 8003d84:	71fb      	strb	r3, [r7, #7]
 8003d86:	460b      	mov	r3, r1
 8003d88:	71bb      	strb	r3, [r7, #6]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	717b      	strb	r3, [r7, #5]
	uint32_t CRCdata;
	// Helper pointer for traversing the result table
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 8003d8e:	797b      	ldrb	r3, [r7, #5]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d901      	bls.n	8003d98 <tmc_fillCRC8Table+0x1c>
		return 0;
 8003d94:	2300      	movs	r3, #0
 8003d96:	e09e      	b.n	8003ed6 <tmc_fillCRC8Table+0x15a>

	CRCTables[index].polynomial   = polynomial;
 8003d98:	797a      	ldrb	r2, [r7, #5]
 8003d9a:	4951      	ldr	r1, [pc, #324]	; (8003ee0 <tmc_fillCRC8Table+0x164>)
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	01db      	lsls	r3, r3, #7
 8003da0:	4413      	add	r3, r2
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	440b      	add	r3, r1
 8003da6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003daa:	79fa      	ldrb	r2, [r7, #7]
 8003dac:	701a      	strb	r2, [r3, #0]
	CRCTables[index].isReflected  = isReflected;
 8003dae:	797a      	ldrb	r2, [r7, #5]
 8003db0:	494b      	ldr	r1, [pc, #300]	; (8003ee0 <tmc_fillCRC8Table+0x164>)
 8003db2:	4613      	mov	r3, r2
 8003db4:	01db      	lsls	r3, r3, #7
 8003db6:	4413      	add	r3, r2
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	440b      	add	r3, r1
 8003dbc:	f203 1301 	addw	r3, r3, #257	; 0x101
 8003dc0:	79ba      	ldrb	r2, [r7, #6]
 8003dc2:	701a      	strb	r2, [r3, #0]
	table = &CRCTables[index].table[0];
 8003dc4:	797a      	ldrb	r2, [r7, #5]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	01db      	lsls	r3, r3, #7
 8003dca:	4413      	add	r3, r2
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	4a44      	ldr	r2, [pc, #272]	; (8003ee0 <tmc_fillCRC8Table+0x164>)
 8003dd0:	4413      	add	r3, r2
 8003dd2:	61bb      	str	r3, [r7, #24]

	// Extend the polynomial to correct byte MSBs shifting into next bytes
	uint32_t poly = (uint32_t) polynomial | 0x0100;
 8003dd4:	79fb      	ldrb	r3, [r7, #7]
 8003dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dda:	60fb      	str	r3, [r7, #12]

	// Iterate over all 256 possible uint8_t values, compressed into a uint32_t (see detailed explanation above)
	uint32_t i;
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 8003ddc:	4b41      	ldr	r3, [pc, #260]	; (8003ee4 <tmc_fillCRC8Table+0x168>)
 8003dde:	617b      	str	r3, [r7, #20]
 8003de0:	e074      	b.n	8003ecc <tmc_fillCRC8Table+0x150>
	{
		// For reflected table: Flip the bits of each input byte
		CRCdata = (isReflected)? flipBitsInBytes(i) : i;
 8003de2:	79bb      	ldrb	r3, [r7, #6]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d004      	beq.n	8003df2 <tmc_fillCRC8Table+0x76>
 8003de8:	6978      	ldr	r0, [r7, #20]
 8003dea:	f000 f8f7 	bl	8003fdc <flipBitsInBytes>
 8003dee:	4603      	mov	r3, r0
 8003df0:	e000      	b.n	8003df4 <tmc_fillCRC8Table+0x78>
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	61fb      	str	r3, [r7, #28]

		// Iterate over 8 Bits
		int j;
		for(j = 0; j < 8; j++)
 8003df6:	2300      	movs	r3, #0
 8003df8:	613b      	str	r3, [r7, #16]
 8003dfa:	e035      	b.n	8003e68 <tmc_fillCRC8Table+0xec>
		{
			// Store value of soon-to-be shifted out byte
			uint8_t isMSBSet = (CRCdata & 0x80000000)? 1:0;
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	0fdb      	lsrs	r3, r3, #31
 8003e00:	72fb      	strb	r3, [r7, #11]

			// CRC Shift
			CRCdata <<= 1;
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	61fb      	str	r3, [r7, #28]

			// XOR the bytes when required, lowest to highest
			CRCdata ^= (CRCdata & 0x00000100)? (poly      ) : 0;
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <tmc_fillCRC8Table+0x9a>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	e000      	b.n	8003e18 <tmc_fillCRC8Table+0x9c>
 8003e16:	2300      	movs	r3, #0
 8003e18:	69fa      	ldr	r2, [r7, #28]
 8003e1a:	4053      	eors	r3, r2
 8003e1c:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x00010000)? (poly << 8 ) : 0;
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d002      	beq.n	8003e2e <tmc_fillCRC8Table+0xb2>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	021b      	lsls	r3, r3, #8
 8003e2c:	e000      	b.n	8003e30 <tmc_fillCRC8Table+0xb4>
 8003e2e:	2300      	movs	r3, #0
 8003e30:	69fa      	ldr	r2, [r7, #28]
 8003e32:	4053      	eors	r3, r2
 8003e34:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x01000000)? (poly << 16) : 0;
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d002      	beq.n	8003e46 <tmc_fillCRC8Table+0xca>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	041b      	lsls	r3, r3, #16
 8003e44:	e000      	b.n	8003e48 <tmc_fillCRC8Table+0xcc>
 8003e46:	2300      	movs	r3, #0
 8003e48:	69fa      	ldr	r2, [r7, #28]
 8003e4a:	4053      	eors	r3, r2
 8003e4c:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (isMSBSet)?             (poly << 24) : 0;
 8003e4e:	7afb      	ldrb	r3, [r7, #11]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d002      	beq.n	8003e5a <tmc_fillCRC8Table+0xde>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	061b      	lsls	r3, r3, #24
 8003e58:	e000      	b.n	8003e5c <tmc_fillCRC8Table+0xe0>
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	69fa      	ldr	r2, [r7, #28]
 8003e5e:	4053      	eors	r3, r2
 8003e60:	61fb      	str	r3, [r7, #28]
		for(j = 0; j < 8; j++)
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	3301      	adds	r3, #1
 8003e66:	613b      	str	r3, [r7, #16]
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	2b07      	cmp	r3, #7
 8003e6c:	ddc6      	ble.n	8003dfc <tmc_fillCRC8Table+0x80>
		}

		// For reflected table: Flip the bits of each output byte
		CRCdata = (isReflected)? flipBitsInBytes(CRCdata) : CRCdata;
 8003e6e:	79bb      	ldrb	r3, [r7, #6]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d004      	beq.n	8003e7e <tmc_fillCRC8Table+0x102>
 8003e74:	69f8      	ldr	r0, [r7, #28]
 8003e76:	f000 f8b1 	bl	8003fdc <flipBitsInBytes>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	e000      	b.n	8003e80 <tmc_fillCRC8Table+0x104>
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	61fb      	str	r3, [r7, #28]
		// Store the CRC result bytes in the table array
		*table++ = (uint8_t) CRCdata;
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	1c5a      	adds	r2, r3, #1
 8003e86:	61ba      	str	r2, [r7, #24]
 8003e88:	69fa      	ldr	r2, [r7, #28]
 8003e8a:	b2d2      	uxtb	r2, r2
 8003e8c:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	0a1b      	lsrs	r3, r3, #8
 8003e92:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	1c5a      	adds	r2, r3, #1
 8003e98:	61ba      	str	r2, [r7, #24]
 8003e9a:	69fa      	ldr	r2, [r7, #28]
 8003e9c:	b2d2      	uxtb	r2, r2
 8003e9e:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	0a1b      	lsrs	r3, r3, #8
 8003ea4:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	61ba      	str	r2, [r7, #24]
 8003eac:	69fa      	ldr	r2, [r7, #28]
 8003eae:	b2d2      	uxtb	r2, r2
 8003eb0:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	0a1b      	lsrs	r3, r3, #8
 8003eb6:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	61ba      	str	r2, [r7, #24]
 8003ebe:	69fa      	ldr	r2, [r7, #28]
 8003ec0:	b2d2      	uxtb	r2, r2
 8003ec2:	701a      	strb	r2, [r3, #0]
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
 8003eca:	617b      	str	r3, [r7, #20]
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	4a06      	ldr	r2, [pc, #24]	; (8003ee8 <tmc_fillCRC8Table+0x16c>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d186      	bne.n	8003de2 <tmc_fillCRC8Table+0x66>
	}

	return 1;
 8003ed4:	2301      	movs	r3, #1
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3720      	adds	r7, #32
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	2000082c 	.word	0x2000082c
 8003ee4:	03020100 	.word	0x03020100
 8003ee8:	04030200 	.word	0x04030200

08003eec <tmc_CRC8>:
 *     uint8_t *data: A pointer to the data that will be CRC'd.
 *     uint32_t bytes: The length of the data buffer.
 *     uint8_t index: The index of the CRC table to be used.
 */
uint8_t tmc_CRC8(uint8_t *data, uint32_t bytes, uint8_t index)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 8003efa:	2300      	movs	r3, #0
 8003efc:	75fb      	strb	r3, [r7, #23]
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 8003efe:	79fb      	ldrb	r3, [r7, #7]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d901      	bls.n	8003f08 <tmc_CRC8+0x1c>
		return 0;
 8003f04:	2300      	movs	r3, #0
 8003f06:	e02c      	b.n	8003f62 <tmc_CRC8+0x76>

	table = &CRCTables[index].table[0];
 8003f08:	79fa      	ldrb	r2, [r7, #7]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	01db      	lsls	r3, r3, #7
 8003f0e:	4413      	add	r3, r2
 8003f10:	005b      	lsls	r3, r3, #1
 8003f12:	4a16      	ldr	r2, [pc, #88]	; (8003f6c <tmc_CRC8+0x80>)
 8003f14:	4413      	add	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]

	while(bytes--)
 8003f18:	e00b      	b.n	8003f32 <tmc_CRC8+0x46>
		result = table[result ^ *data++];
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	1c5a      	adds	r2, r3, #1
 8003f1e:	60fa      	str	r2, [r7, #12]
 8003f20:	781a      	ldrb	r2, [r3, #0]
 8003f22:	7dfb      	ldrb	r3, [r7, #23]
 8003f24:	4053      	eors	r3, r2
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	461a      	mov	r2, r3
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	75fb      	strb	r3, [r7, #23]
	while(bytes--)
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	1e5a      	subs	r2, r3, #1
 8003f36:	60ba      	str	r2, [r7, #8]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1ee      	bne.n	8003f1a <tmc_CRC8+0x2e>

	return (CRCTables[index].isReflected)? flipByte(result) : result;
 8003f3c:	79fa      	ldrb	r2, [r7, #7]
 8003f3e:	490b      	ldr	r1, [pc, #44]	; (8003f6c <tmc_CRC8+0x80>)
 8003f40:	4613      	mov	r3, r2
 8003f42:	01db      	lsls	r3, r3, #7
 8003f44:	4413      	add	r3, r2
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	440b      	add	r3, r1
 8003f4a:	f203 1301 	addw	r3, r3, #257	; 0x101
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d005      	beq.n	8003f60 <tmc_CRC8+0x74>
 8003f54:	7dfb      	ldrb	r3, [r7, #23]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 f80a 	bl	8003f70 <flipByte>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	e000      	b.n	8003f62 <tmc_CRC8+0x76>
 8003f60:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3718      	adds	r7, #24
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	2000082c 	.word	0x2000082c

08003f70 <flipByte>:
	return CRCTables[index].isReflected;
}

// Helper functions
static uint8_t flipByte(uint8_t value)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	4603      	mov	r3, r0
 8003f78:	71fb      	strb	r3, [r7, #7]
	// swap odd and even bits
	value = ((value >> 1) & 0x55) | ((value & 0x55) << 1);
 8003f7a:	79fb      	ldrb	r3, [r7, #7]
 8003f7c:	085b      	lsrs	r3, r3, #1
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	b25b      	sxtb	r3, r3
 8003f82:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8003f86:	b25a      	sxtb	r2, r3
 8003f88:	79fb      	ldrb	r3, [r7, #7]
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	b25b      	sxtb	r3, r3
 8003f8e:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 8003f92:	b25b      	sxtb	r3, r3
 8003f94:	4313      	orrs	r3, r2
 8003f96:	b25b      	sxtb	r3, r3
 8003f98:	71fb      	strb	r3, [r7, #7]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33) | ((value & 0x33) << 2);
 8003f9a:	79fb      	ldrb	r3, [r7, #7]
 8003f9c:	089b      	lsrs	r3, r3, #2
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	b25b      	sxtb	r3, r3
 8003fa2:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8003fa6:	b25a      	sxtb	r2, r3
 8003fa8:	79fb      	ldrb	r3, [r7, #7]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	b25b      	sxtb	r3, r3
 8003fae:	f023 0333 	bic.w	r3, r3, #51	; 0x33
 8003fb2:	b25b      	sxtb	r3, r3
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	b25b      	sxtb	r3, r3
 8003fb8:	71fb      	strb	r3, [r7, #7]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F) | ((value & 0x0F) << 4);
 8003fba:	79fb      	ldrb	r3, [r7, #7]
 8003fbc:	091b      	lsrs	r3, r3, #4
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	b25a      	sxtb	r2, r3
 8003fc2:	79fb      	ldrb	r3, [r7, #7]
 8003fc4:	011b      	lsls	r3, r3, #4
 8003fc6:	b25b      	sxtb	r3, r3
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	b25b      	sxtb	r3, r3
 8003fcc:	71fb      	strb	r3, [r7, #7]

	return value;
 8003fce:	79fb      	ldrb	r3, [r7, #7]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <flipBitsInBytes>:
 *                                 \||/
 *                                  \/
 * [b24 b25 b26 b27 b28 b29 b30 b31 .. b0 b1 b2 b3 b4 b5 b6 b7]
 */
static uint32_t flipBitsInBytes(uint32_t value)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
	// swap odd and even bits
	value = ((value >> 1) & 0x55555555) | ((value & 0x55555555) << 1);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	085b      	lsrs	r3, r3, #1
 8003fe8:	f003 3255 	and.w	r2, r3, #1431655765	; 0x55555555
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	607b      	str	r3, [r7, #4]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33333333) | ((value & 0x33333333) << 2);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	089b      	lsrs	r3, r3, #2
 8003ffc:	f003 3233 	and.w	r2, r3, #858993459	; 0x33333333
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	f003 33cc 	and.w	r3, r3, #3435973836	; 0xcccccccc
 8004008:	4313      	orrs	r3, r2
 800400a:	607b      	str	r3, [r7, #4]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F0F0F0F) | ((value & 0x0F0F0F0F) << 4);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	091b      	lsrs	r3, r3, #4
 8004010:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 800401c:	4313      	orrs	r3, r2
 800401e:	607b      	str	r3, [r7, #4]

	return value;
 8004020:	687b      	ldr	r3, [r7, #4]
}
 8004022:	4618      	mov	r0, r3
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <tmc2209_writeInt>:
// => CRC wrapper
extern uint8_t tmc2209_CRC8(uint8_t *data, size_t length);
// <= CRC wrapper

void tmc2209_writeInt(TMC2209TypeDef *tmc2209, uint8_t address, int32_t value)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b086      	sub	sp, #24
 8004032:	af00      	add	r7, sp, #0
 8004034:	60f8      	str	r0, [r7, #12]
 8004036:	460b      	mov	r3, r1
 8004038:	607a      	str	r2, [r7, #4]
 800403a:	72fb      	strb	r3, [r7, #11]
	uint8_t data[8];

	data[0] = 0x05;
 800403c:	2305      	movs	r3, #5
 800403e:	743b      	strb	r3, [r7, #16]
	data[1] = tmc2209->slaveAddress;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 8004046:	747b      	strb	r3, [r7, #17]
	data[2] = address | TMC_WRITE_BIT;
 8004048:	7afb      	ldrb	r3, [r7, #11]
 800404a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800404e:	b2db      	uxtb	r3, r3
 8004050:	74bb      	strb	r3, [r7, #18]
	data[3] = (value >> 24) & 0xFF;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	0e1b      	lsrs	r3, r3, #24
 8004056:	b2db      	uxtb	r3, r3
 8004058:	74fb      	strb	r3, [r7, #19]
	data[4] = (value >> 16) & 0xFF;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	141b      	asrs	r3, r3, #16
 800405e:	b2db      	uxtb	r3, r3
 8004060:	753b      	strb	r3, [r7, #20]
	data[5] = (value >> 8 ) & 0xFF;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	121b      	asrs	r3, r3, #8
 8004066:	b2db      	uxtb	r3, r3
 8004068:	757b      	strb	r3, [r7, #21]
	data[6] = (value      ) & 0xFF;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	b2db      	uxtb	r3, r3
 800406e:	75bb      	strb	r3, [r7, #22]
	data[7] = tmc2209_CRC8(data, 7);
 8004070:	f107 0310 	add.w	r3, r7, #16
 8004074:	2107      	movs	r1, #7
 8004076:	4618      	mov	r0, r3
 8004078:	f7fc faec 	bl	8000654 <tmc2209_CRC8>
 800407c:	4603      	mov	r3, r0
 800407e:	75fb      	strb	r3, [r7, #23]

	tmc2209_readWriteArray(tmc2209->config->channel, &data[0], 8, 0);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
 8004088:	f107 0110 	add.w	r1, r7, #16
 800408c:	2300      	movs	r3, #0
 800408e:	2208      	movs	r2, #8
 8004090:	f7fc fab8 	bl	8000604 <tmc2209_readWriteArray>

	// Write to the shadow register and mark the register dirty
	address = TMC_ADDRESS(address);
 8004094:	7afb      	ldrb	r3, [r7, #11]
 8004096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800409a:	72fb      	strb	r3, [r7, #11]
	tmc2209->config->shadowRegister[address] = value;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	7afb      	ldrb	r3, [r7, #11]
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	605a      	str	r2, [r3, #4]
	tmc2209->registerAccess[address] |= TMC_ACCESS_DIRTY;
 80040aa:	7afb      	ldrb	r3, [r7, #11]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	4413      	add	r3, r2
 80040b0:	f893 2204 	ldrb.w	r2, [r3, #516]	; 0x204
 80040b4:	7afb      	ldrb	r3, [r7, #11]
 80040b6:	f042 0208 	orr.w	r2, r2, #8
 80040ba:	b2d1      	uxtb	r1, r2
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	4413      	add	r3, r2
 80040c0:	460a      	mov	r2, r1
 80040c2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
}
 80040c6:	bf00      	nop
 80040c8:	3718      	adds	r7, #24
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <tmc2209_readInt>:

int32_t tmc2209_readInt(TMC2209TypeDef *tmc2209, uint8_t address)
{
 80040ce:	b590      	push	{r4, r7, lr}
 80040d0:	b085      	sub	sp, #20
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
 80040d6:	460b      	mov	r3, r1
 80040d8:	70fb      	strb	r3, [r7, #3]
	uint8_t data[8] = { 0 };
 80040da:	2300      	movs	r3, #0
 80040dc:	60bb      	str	r3, [r7, #8]
 80040de:	2300      	movs	r3, #0
 80040e0:	60fb      	str	r3, [r7, #12]

	address = TMC_ADDRESS(address);
 80040e2:	78fb      	ldrb	r3, [r7, #3]
 80040e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040e8:	70fb      	strb	r3, [r7, #3]

	if (!TMC_IS_READABLE(tmc2209->registerAccess[address]))
 80040ea:	78fb      	ldrb	r3, [r7, #3]
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	4413      	add	r3, r2
 80040f0:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d106      	bne.n	800410a <tmc2209_readInt+0x3c>
		return tmc2209->config->shadowRegister[address];
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	78fb      	ldrb	r3, [r7, #3]
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	e03f      	b.n	800418a <tmc2209_readInt+0xbc>

	data[0] = 0x05;
 800410a:	2305      	movs	r3, #5
 800410c:	723b      	strb	r3, [r7, #8]
	data[1] = tmc2209->slaveAddress;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 8004114:	727b      	strb	r3, [r7, #9]
	data[2] = address;
 8004116:	78fb      	ldrb	r3, [r7, #3]
 8004118:	72bb      	strb	r3, [r7, #10]
	data[3] = tmc2209_CRC8(data, 3);
 800411a:	f107 0308 	add.w	r3, r7, #8
 800411e:	2103      	movs	r1, #3
 8004120:	4618      	mov	r0, r3
 8004122:	f7fc fa97 	bl	8000654 <tmc2209_CRC8>
 8004126:	4603      	mov	r3, r0
 8004128:	72fb      	strb	r3, [r7, #11]

	tmc2209_readWriteArray(tmc2209->config->channel, data, 4, 8);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
 8004132:	f107 0108 	add.w	r1, r7, #8
 8004136:	2308      	movs	r3, #8
 8004138:	2204      	movs	r2, #4
 800413a:	f7fc fa63 	bl	8000604 <tmc2209_readWriteArray>

	// Byte 0: Sync nibble correct?
	if (data[0] != 0x05)
 800413e:	7a3b      	ldrb	r3, [r7, #8]
 8004140:	2b05      	cmp	r3, #5
 8004142:	d001      	beq.n	8004148 <tmc2209_readInt+0x7a>
		return 0;
 8004144:	2300      	movs	r3, #0
 8004146:	e020      	b.n	800418a <tmc2209_readInt+0xbc>

	// Byte 1: Master address correct?
	if (data[1] != 0xFF)
 8004148:	7a7b      	ldrb	r3, [r7, #9]
 800414a:	2bff      	cmp	r3, #255	; 0xff
 800414c:	d001      	beq.n	8004152 <tmc2209_readInt+0x84>
		return 0;
 800414e:	2300      	movs	r3, #0
 8004150:	e01b      	b.n	800418a <tmc2209_readInt+0xbc>

	// Byte 2: Address correct?
	if (data[2] != address)
 8004152:	7abb      	ldrb	r3, [r7, #10]
 8004154:	78fa      	ldrb	r2, [r7, #3]
 8004156:	429a      	cmp	r2, r3
 8004158:	d001      	beq.n	800415e <tmc2209_readInt+0x90>
		return 0;
 800415a:	2300      	movs	r3, #0
 800415c:	e015      	b.n	800418a <tmc2209_readInt+0xbc>

	// Byte 7: CRC correct?
	if (data[7] != tmc2209_CRC8(data, 7))
 800415e:	7bfc      	ldrb	r4, [r7, #15]
 8004160:	f107 0308 	add.w	r3, r7, #8
 8004164:	2107      	movs	r1, #7
 8004166:	4618      	mov	r0, r3
 8004168:	f7fc fa74 	bl	8000654 <tmc2209_CRC8>
 800416c:	4603      	mov	r3, r0
 800416e:	429c      	cmp	r4, r3
 8004170:	d001      	beq.n	8004176 <tmc2209_readInt+0xa8>
		return 0;
 8004172:	2300      	movs	r3, #0
 8004174:	e009      	b.n	800418a <tmc2209_readInt+0xbc>

	return ((uint32_t)data[3] << 24) | ((uint32_t)data[4] << 16) | (data[5] << 8) | data[6];
 8004176:	7afb      	ldrb	r3, [r7, #11]
 8004178:	061a      	lsls	r2, r3, #24
 800417a:	7b3b      	ldrb	r3, [r7, #12]
 800417c:	041b      	lsls	r3, r3, #16
 800417e:	4313      	orrs	r3, r2
 8004180:	7b7a      	ldrb	r2, [r7, #13]
 8004182:	0212      	lsls	r2, r2, #8
 8004184:	4313      	orrs	r3, r2
 8004186:	7bba      	ldrb	r2, [r7, #14]
 8004188:	4313      	orrs	r3, r2
}
 800418a:	4618      	mov	r0, r3
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	bd90      	pop	{r4, r7, pc}
	...

08004194 <tmc2209_init>:

void tmc2209_init(TMC2209TypeDef *tmc2209, uint8_t channel, uint8_t slaveAddress, ConfigurationTypeDef *tmc2209_config, const int32_t *registerResetState)
{
 8004194:	b480      	push	{r7}
 8004196:	b087      	sub	sp, #28
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	607b      	str	r3, [r7, #4]
 800419e:	460b      	mov	r3, r1
 80041a0:	72fb      	strb	r3, [r7, #11]
 80041a2:	4613      	mov	r3, r2
 80041a4:	72bb      	strb	r3, [r7, #10]
	tmc2209->slaveAddress = slaveAddress;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	7aba      	ldrb	r2, [r7, #10]
 80041aa:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284

	tmc2209->config               = tmc2209_config;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	601a      	str	r2, [r3, #0]
	tmc2209->config->callback     = NULL;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	tmc2209->config->channel      = channel;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	7afa      	ldrb	r2, [r7, #11]
 80041c4:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
	tmc2209->config->configIndex  = 0;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2200      	movs	r2, #0
 80041ce:	705a      	strb	r2, [r3, #1]
	tmc2209->config->state        = CONFIG_READY;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2200      	movs	r2, #0
 80041d6:	701a      	strb	r2, [r3, #0]

	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 80041d8:	2300      	movs	r3, #0
 80041da:	617b      	str	r3, [r7, #20]
 80041dc:	e017      	b.n	800420e <tmc2209_init+0x7a>
	{
		tmc2209->registerAccess[i]      = tmc2209_defaultRegisterAccess[i];
 80041de:	4a11      	ldr	r2, [pc, #68]	; (8004224 <tmc2209_init+0x90>)
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	4413      	add	r3, r2
 80041e4:	7819      	ldrb	r1, [r3, #0]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	4413      	add	r3, r2
 80041ec:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80041f0:	460a      	mov	r2, r1
 80041f2:	701a      	strb	r2, [r3, #0]
		tmc2209->registerResetState[i]  = registerResetState[i];
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	6a3a      	ldr	r2, [r7, #32]
 80041fa:	4413      	add	r3, r2
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	68f9      	ldr	r1, [r7, #12]
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	440b      	add	r3, r1
 8004206:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	3301      	adds	r3, #1
 800420c:	617b      	str	r3, [r7, #20]
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	2b7f      	cmp	r3, #127	; 0x7f
 8004212:	d9e4      	bls.n	80041de <tmc2209_init+0x4a>
	}
}
 8004214:	bf00      	nop
 8004216:	bf00      	nop
 8004218:	371c      	adds	r7, #28
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	080055dc 	.word	0x080055dc

08004228 <writeConfiguration>:

static void writeConfiguration(TMC2209TypeDef *tmc2209)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
	uint8_t *ptr = &tmc2209->config->configIndex;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	3301      	adds	r3, #1
 8004236:	60bb      	str	r3, [r7, #8]
	const int32_t *settings;

	if(tmc2209->config->state == CONFIG_RESTORE)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	2b02      	cmp	r3, #2
 8004240:	d131      	bne.n	80042a6 <writeConfiguration+0x7e>
	{
		settings = tmc2209->config->shadowRegister;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	3304      	adds	r3, #4
 8004248:	60fb      	str	r3, [r7, #12]
		// Find the next restorable register
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2209->registerAccess[*ptr]))
 800424a:	e005      	b.n	8004258 <writeConfiguration+0x30>
		{
			(*ptr)++;
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	3301      	adds	r3, #1
 8004252:	b2da      	uxtb	r2, r3
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	701a      	strb	r2, [r3, #0]
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2209->registerAccess[*ptr]))
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	b25b      	sxtb	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	db3b      	blt.n	80042da <writeConfiguration+0xb2>
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	461a      	mov	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4413      	add	r3, r2
 800426c:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d0e9      	beq.n	800424c <writeConfiguration+0x24>
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	461a      	mov	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4413      	add	r3, r2
 8004282:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8004286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428a:	2b00      	cmp	r3, #0
 800428c:	d025      	beq.n	80042da <writeConfiguration+0xb2>
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	461a      	mov	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4413      	add	r3, r2
 8004298:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800429c:	f003 0308 	and.w	r3, r3, #8
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d0d3      	beq.n	800424c <writeConfiguration+0x24>
 80042a4:	e019      	b.n	80042da <writeConfiguration+0xb2>
		}
	}
	else
	{
		settings = tmc2209->registerResetState;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	3304      	adds	r3, #4
 80042aa:	60fb      	str	r3, [r7, #12]
		// Find the next resettable register
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2209->registerAccess[*ptr]))
 80042ac:	e005      	b.n	80042ba <writeConfiguration+0x92>
		{
			(*ptr)++;
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	3301      	adds	r3, #1
 80042b4:	b2da      	uxtb	r2, r3
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	701a      	strb	r2, [r3, #0]
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2209->registerAccess[*ptr]))
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	b25b      	sxtb	r3, r3
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	db0a      	blt.n	80042da <writeConfiguration+0xb2>
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	461a      	mov	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4413      	add	r3, r2
 80042ce:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80042d2:	f003 0342 	and.w	r3, r3, #66	; 0x42
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d1e9      	bne.n	80042ae <writeConfiguration+0x86>
		}
	}

	if(*ptr < TMC2209_REGISTER_COUNT)
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	b25b      	sxtb	r3, r3
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	db12      	blt.n	800430a <writeConfiguration+0xe2>
	{
		tmc2209_writeInt(tmc2209, *ptr, settings[*ptr]);
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	7819      	ldrb	r1, [r3, #0]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	4413      	add	r3, r2
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	461a      	mov	r2, r3
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7ff fe99 	bl	800402e <tmc2209_writeInt>
		(*ptr)++;
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	3301      	adds	r3, #1
 8004302:	b2da      	uxtb	r2, r3
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	701a      	strb	r2, [r3, #0]
			((tmc2209_callback)tmc2209->config->callback)(tmc2209, tmc2209->config->state);
		}

		tmc2209->config->state = CONFIG_READY;
	}
}
 8004308:	e013      	b.n	8004332 <writeConfiguration+0x10a>
		if(tmc2209->config->callback)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004312:	2b00      	cmp	r3, #0
 8004314:	d009      	beq.n	800432a <writeConfiguration+0x102>
			((tmc2209_callback)tmc2209->config->callback)(tmc2209, tmc2209->config->state);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	6812      	ldr	r2, [r2, #0]
 8004322:	7812      	ldrb	r2, [r2, #0]
 8004324:	4611      	mov	r1, r2
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	4798      	blx	r3
		tmc2209->config->state = CONFIG_READY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2200      	movs	r2, #0
 8004330:	701a      	strb	r2, [r3, #0]
}
 8004332:	bf00      	nop
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <tmc2209_periodicJob>:

void tmc2209_periodicJob(TMC2209TypeDef *tmc2209, uint32_t tick)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b082      	sub	sp, #8
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
 8004342:	6039      	str	r1, [r7, #0]
	UNUSED(tick);

	if(tmc2209->config->state != CONFIG_READY)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d003      	beq.n	8004356 <tmc2209_periodicJob+0x1c>
	{
		writeConfiguration(tmc2209);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7ff ff6a 	bl	8004228 <writeConfiguration>
		return;
 8004354:	bf00      	nop
	}
}
 8004356:	3708      	adds	r7, #8
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <tmc2209_reset>:
{
	tmc2209->config->callback = (tmc_callback_config) callback;
}

uint8_t tmc2209_reset(TMC2209TypeDef *tmc2209)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <tmc2209_reset+0x16>
		return false;
 800436e:	2300      	movs	r3, #0
 8004370:	e028      	b.n	80043c4 <tmc2209_reset+0x68>

	// Reset the dirty bits and wipe the shadow registers
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8004372:	2300      	movs	r3, #0
 8004374:	60fb      	str	r3, [r7, #12]
 8004376:	e019      	b.n	80043ac <tmc2209_reset+0x50>
	{
		tmc2209->registerAccess[i] &= ~TMC_ACCESS_DIRTY;
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	4413      	add	r3, r2
 800437e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	f023 0308 	bic.w	r3, r3, #8
 8004388:	b2d9      	uxtb	r1, r3
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	4413      	add	r3, r2
 8004390:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004394:	460a      	mov	r2, r1
 8004396:	701a      	strb	r2, [r3, #0]
		tmc2209->config->shadowRegister[i] = 0;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4413      	add	r3, r2
 80043a2:	2200      	movs	r2, #0
 80043a4:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	3301      	adds	r3, #1
 80043aa:	60fb      	str	r3, [r7, #12]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2b7f      	cmp	r3, #127	; 0x7f
 80043b0:	d9e2      	bls.n	8004378 <tmc2209_reset+0x1c>
	}

	tmc2209->config->state        = CONFIG_RESET;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2201      	movs	r2, #1
 80043b8:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2200      	movs	r2, #0
 80043c0:	705a      	strb	r2, [r3, #1]

	return true;
 80043c2:	2301      	movs	r3, #1
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <tmc2209_restore>:

uint8_t tmc2209_restore(TMC2209TypeDef *tmc2209)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <tmc2209_restore+0x16>
		return false;
 80043e2:	2300      	movs	r3, #0
 80043e4:	e008      	b.n	80043f8 <tmc2209_restore+0x28>

	tmc2209->config->state        = CONFIG_RESTORE;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2202      	movs	r2, #2
 80043ec:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2200      	movs	r2, #0
 80043f4:	705a      	strb	r2, [r3, #1]

	return true;
 80043f6:	2301      	movs	r3, #1
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <__errno>:
 8004404:	4b01      	ldr	r3, [pc, #4]	; (800440c <__errno+0x8>)
 8004406:	6818      	ldr	r0, [r3, #0]
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	2000000c 	.word	0x2000000c

08004410 <__libc_init_array>:
 8004410:	b570      	push	{r4, r5, r6, lr}
 8004412:	4d0d      	ldr	r5, [pc, #52]	; (8004448 <__libc_init_array+0x38>)
 8004414:	4c0d      	ldr	r4, [pc, #52]	; (800444c <__libc_init_array+0x3c>)
 8004416:	1b64      	subs	r4, r4, r5
 8004418:	10a4      	asrs	r4, r4, #2
 800441a:	2600      	movs	r6, #0
 800441c:	42a6      	cmp	r6, r4
 800441e:	d109      	bne.n	8004434 <__libc_init_array+0x24>
 8004420:	4d0b      	ldr	r5, [pc, #44]	; (8004450 <__libc_init_array+0x40>)
 8004422:	4c0c      	ldr	r4, [pc, #48]	; (8004454 <__libc_init_array+0x44>)
 8004424:	f000 ffae 	bl	8005384 <_init>
 8004428:	1b64      	subs	r4, r4, r5
 800442a:	10a4      	asrs	r4, r4, #2
 800442c:	2600      	movs	r6, #0
 800442e:	42a6      	cmp	r6, r4
 8004430:	d105      	bne.n	800443e <__libc_init_array+0x2e>
 8004432:	bd70      	pop	{r4, r5, r6, pc}
 8004434:	f855 3b04 	ldr.w	r3, [r5], #4
 8004438:	4798      	blx	r3
 800443a:	3601      	adds	r6, #1
 800443c:	e7ee      	b.n	800441c <__libc_init_array+0xc>
 800443e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004442:	4798      	blx	r3
 8004444:	3601      	adds	r6, #1
 8004446:	e7f2      	b.n	800442e <__libc_init_array+0x1e>
 8004448:	080056fc 	.word	0x080056fc
 800444c:	080056fc 	.word	0x080056fc
 8004450:	080056fc 	.word	0x080056fc
 8004454:	08005700 	.word	0x08005700

08004458 <memset>:
 8004458:	4402      	add	r2, r0
 800445a:	4603      	mov	r3, r0
 800445c:	4293      	cmp	r3, r2
 800445e:	d100      	bne.n	8004462 <memset+0xa>
 8004460:	4770      	bx	lr
 8004462:	f803 1b01 	strb.w	r1, [r3], #1
 8004466:	e7f9      	b.n	800445c <memset+0x4>

08004468 <iprintf>:
 8004468:	b40f      	push	{r0, r1, r2, r3}
 800446a:	4b0a      	ldr	r3, [pc, #40]	; (8004494 <iprintf+0x2c>)
 800446c:	b513      	push	{r0, r1, r4, lr}
 800446e:	681c      	ldr	r4, [r3, #0]
 8004470:	b124      	cbz	r4, 800447c <iprintf+0x14>
 8004472:	69a3      	ldr	r3, [r4, #24]
 8004474:	b913      	cbnz	r3, 800447c <iprintf+0x14>
 8004476:	4620      	mov	r0, r4
 8004478:	f000 f866 	bl	8004548 <__sinit>
 800447c:	ab05      	add	r3, sp, #20
 800447e:	9a04      	ldr	r2, [sp, #16]
 8004480:	68a1      	ldr	r1, [r4, #8]
 8004482:	9301      	str	r3, [sp, #4]
 8004484:	4620      	mov	r0, r4
 8004486:	f000 f9bd 	bl	8004804 <_vfiprintf_r>
 800448a:	b002      	add	sp, #8
 800448c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004490:	b004      	add	sp, #16
 8004492:	4770      	bx	lr
 8004494:	2000000c 	.word	0x2000000c

08004498 <std>:
 8004498:	2300      	movs	r3, #0
 800449a:	b510      	push	{r4, lr}
 800449c:	4604      	mov	r4, r0
 800449e:	e9c0 3300 	strd	r3, r3, [r0]
 80044a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044a6:	6083      	str	r3, [r0, #8]
 80044a8:	8181      	strh	r1, [r0, #12]
 80044aa:	6643      	str	r3, [r0, #100]	; 0x64
 80044ac:	81c2      	strh	r2, [r0, #14]
 80044ae:	6183      	str	r3, [r0, #24]
 80044b0:	4619      	mov	r1, r3
 80044b2:	2208      	movs	r2, #8
 80044b4:	305c      	adds	r0, #92	; 0x5c
 80044b6:	f7ff ffcf 	bl	8004458 <memset>
 80044ba:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <std+0x38>)
 80044bc:	6263      	str	r3, [r4, #36]	; 0x24
 80044be:	4b05      	ldr	r3, [pc, #20]	; (80044d4 <std+0x3c>)
 80044c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80044c2:	4b05      	ldr	r3, [pc, #20]	; (80044d8 <std+0x40>)
 80044c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80044c6:	4b05      	ldr	r3, [pc, #20]	; (80044dc <std+0x44>)
 80044c8:	6224      	str	r4, [r4, #32]
 80044ca:	6323      	str	r3, [r4, #48]	; 0x30
 80044cc:	bd10      	pop	{r4, pc}
 80044ce:	bf00      	nop
 80044d0:	08004dad 	.word	0x08004dad
 80044d4:	08004dcf 	.word	0x08004dcf
 80044d8:	08004e07 	.word	0x08004e07
 80044dc:	08004e2b 	.word	0x08004e2b

080044e0 <_cleanup_r>:
 80044e0:	4901      	ldr	r1, [pc, #4]	; (80044e8 <_cleanup_r+0x8>)
 80044e2:	f000 b8af 	b.w	8004644 <_fwalk_reent>
 80044e6:	bf00      	nop
 80044e8:	08005105 	.word	0x08005105

080044ec <__sfmoreglue>:
 80044ec:	b570      	push	{r4, r5, r6, lr}
 80044ee:	2268      	movs	r2, #104	; 0x68
 80044f0:	1e4d      	subs	r5, r1, #1
 80044f2:	4355      	muls	r5, r2
 80044f4:	460e      	mov	r6, r1
 80044f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80044fa:	f000 f8e5 	bl	80046c8 <_malloc_r>
 80044fe:	4604      	mov	r4, r0
 8004500:	b140      	cbz	r0, 8004514 <__sfmoreglue+0x28>
 8004502:	2100      	movs	r1, #0
 8004504:	e9c0 1600 	strd	r1, r6, [r0]
 8004508:	300c      	adds	r0, #12
 800450a:	60a0      	str	r0, [r4, #8]
 800450c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004510:	f7ff ffa2 	bl	8004458 <memset>
 8004514:	4620      	mov	r0, r4
 8004516:	bd70      	pop	{r4, r5, r6, pc}

08004518 <__sfp_lock_acquire>:
 8004518:	4801      	ldr	r0, [pc, #4]	; (8004520 <__sfp_lock_acquire+0x8>)
 800451a:	f000 b8b3 	b.w	8004684 <__retarget_lock_acquire_recursive>
 800451e:	bf00      	nop
 8004520:	20000a31 	.word	0x20000a31

08004524 <__sfp_lock_release>:
 8004524:	4801      	ldr	r0, [pc, #4]	; (800452c <__sfp_lock_release+0x8>)
 8004526:	f000 b8ae 	b.w	8004686 <__retarget_lock_release_recursive>
 800452a:	bf00      	nop
 800452c:	20000a31 	.word	0x20000a31

08004530 <__sinit_lock_acquire>:
 8004530:	4801      	ldr	r0, [pc, #4]	; (8004538 <__sinit_lock_acquire+0x8>)
 8004532:	f000 b8a7 	b.w	8004684 <__retarget_lock_acquire_recursive>
 8004536:	bf00      	nop
 8004538:	20000a32 	.word	0x20000a32

0800453c <__sinit_lock_release>:
 800453c:	4801      	ldr	r0, [pc, #4]	; (8004544 <__sinit_lock_release+0x8>)
 800453e:	f000 b8a2 	b.w	8004686 <__retarget_lock_release_recursive>
 8004542:	bf00      	nop
 8004544:	20000a32 	.word	0x20000a32

08004548 <__sinit>:
 8004548:	b510      	push	{r4, lr}
 800454a:	4604      	mov	r4, r0
 800454c:	f7ff fff0 	bl	8004530 <__sinit_lock_acquire>
 8004550:	69a3      	ldr	r3, [r4, #24]
 8004552:	b11b      	cbz	r3, 800455c <__sinit+0x14>
 8004554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004558:	f7ff bff0 	b.w	800453c <__sinit_lock_release>
 800455c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004560:	6523      	str	r3, [r4, #80]	; 0x50
 8004562:	4b13      	ldr	r3, [pc, #76]	; (80045b0 <__sinit+0x68>)
 8004564:	4a13      	ldr	r2, [pc, #76]	; (80045b4 <__sinit+0x6c>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	62a2      	str	r2, [r4, #40]	; 0x28
 800456a:	42a3      	cmp	r3, r4
 800456c:	bf04      	itt	eq
 800456e:	2301      	moveq	r3, #1
 8004570:	61a3      	streq	r3, [r4, #24]
 8004572:	4620      	mov	r0, r4
 8004574:	f000 f820 	bl	80045b8 <__sfp>
 8004578:	6060      	str	r0, [r4, #4]
 800457a:	4620      	mov	r0, r4
 800457c:	f000 f81c 	bl	80045b8 <__sfp>
 8004580:	60a0      	str	r0, [r4, #8]
 8004582:	4620      	mov	r0, r4
 8004584:	f000 f818 	bl	80045b8 <__sfp>
 8004588:	2200      	movs	r2, #0
 800458a:	60e0      	str	r0, [r4, #12]
 800458c:	2104      	movs	r1, #4
 800458e:	6860      	ldr	r0, [r4, #4]
 8004590:	f7ff ff82 	bl	8004498 <std>
 8004594:	68a0      	ldr	r0, [r4, #8]
 8004596:	2201      	movs	r2, #1
 8004598:	2109      	movs	r1, #9
 800459a:	f7ff ff7d 	bl	8004498 <std>
 800459e:	68e0      	ldr	r0, [r4, #12]
 80045a0:	2202      	movs	r2, #2
 80045a2:	2112      	movs	r1, #18
 80045a4:	f7ff ff78 	bl	8004498 <std>
 80045a8:	2301      	movs	r3, #1
 80045aa:	61a3      	str	r3, [r4, #24]
 80045ac:	e7d2      	b.n	8004554 <__sinit+0xc>
 80045ae:	bf00      	nop
 80045b0:	0800565c 	.word	0x0800565c
 80045b4:	080044e1 	.word	0x080044e1

080045b8 <__sfp>:
 80045b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ba:	4607      	mov	r7, r0
 80045bc:	f7ff ffac 	bl	8004518 <__sfp_lock_acquire>
 80045c0:	4b1e      	ldr	r3, [pc, #120]	; (800463c <__sfp+0x84>)
 80045c2:	681e      	ldr	r6, [r3, #0]
 80045c4:	69b3      	ldr	r3, [r6, #24]
 80045c6:	b913      	cbnz	r3, 80045ce <__sfp+0x16>
 80045c8:	4630      	mov	r0, r6
 80045ca:	f7ff ffbd 	bl	8004548 <__sinit>
 80045ce:	3648      	adds	r6, #72	; 0x48
 80045d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80045d4:	3b01      	subs	r3, #1
 80045d6:	d503      	bpl.n	80045e0 <__sfp+0x28>
 80045d8:	6833      	ldr	r3, [r6, #0]
 80045da:	b30b      	cbz	r3, 8004620 <__sfp+0x68>
 80045dc:	6836      	ldr	r6, [r6, #0]
 80045de:	e7f7      	b.n	80045d0 <__sfp+0x18>
 80045e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80045e4:	b9d5      	cbnz	r5, 800461c <__sfp+0x64>
 80045e6:	4b16      	ldr	r3, [pc, #88]	; (8004640 <__sfp+0x88>)
 80045e8:	60e3      	str	r3, [r4, #12]
 80045ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80045ee:	6665      	str	r5, [r4, #100]	; 0x64
 80045f0:	f000 f847 	bl	8004682 <__retarget_lock_init_recursive>
 80045f4:	f7ff ff96 	bl	8004524 <__sfp_lock_release>
 80045f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80045fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004600:	6025      	str	r5, [r4, #0]
 8004602:	61a5      	str	r5, [r4, #24]
 8004604:	2208      	movs	r2, #8
 8004606:	4629      	mov	r1, r5
 8004608:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800460c:	f7ff ff24 	bl	8004458 <memset>
 8004610:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004614:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004618:	4620      	mov	r0, r4
 800461a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800461c:	3468      	adds	r4, #104	; 0x68
 800461e:	e7d9      	b.n	80045d4 <__sfp+0x1c>
 8004620:	2104      	movs	r1, #4
 8004622:	4638      	mov	r0, r7
 8004624:	f7ff ff62 	bl	80044ec <__sfmoreglue>
 8004628:	4604      	mov	r4, r0
 800462a:	6030      	str	r0, [r6, #0]
 800462c:	2800      	cmp	r0, #0
 800462e:	d1d5      	bne.n	80045dc <__sfp+0x24>
 8004630:	f7ff ff78 	bl	8004524 <__sfp_lock_release>
 8004634:	230c      	movs	r3, #12
 8004636:	603b      	str	r3, [r7, #0]
 8004638:	e7ee      	b.n	8004618 <__sfp+0x60>
 800463a:	bf00      	nop
 800463c:	0800565c 	.word	0x0800565c
 8004640:	ffff0001 	.word	0xffff0001

08004644 <_fwalk_reent>:
 8004644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004648:	4606      	mov	r6, r0
 800464a:	4688      	mov	r8, r1
 800464c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004650:	2700      	movs	r7, #0
 8004652:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004656:	f1b9 0901 	subs.w	r9, r9, #1
 800465a:	d505      	bpl.n	8004668 <_fwalk_reent+0x24>
 800465c:	6824      	ldr	r4, [r4, #0]
 800465e:	2c00      	cmp	r4, #0
 8004660:	d1f7      	bne.n	8004652 <_fwalk_reent+0xe>
 8004662:	4638      	mov	r0, r7
 8004664:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004668:	89ab      	ldrh	r3, [r5, #12]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d907      	bls.n	800467e <_fwalk_reent+0x3a>
 800466e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004672:	3301      	adds	r3, #1
 8004674:	d003      	beq.n	800467e <_fwalk_reent+0x3a>
 8004676:	4629      	mov	r1, r5
 8004678:	4630      	mov	r0, r6
 800467a:	47c0      	blx	r8
 800467c:	4307      	orrs	r7, r0
 800467e:	3568      	adds	r5, #104	; 0x68
 8004680:	e7e9      	b.n	8004656 <_fwalk_reent+0x12>

08004682 <__retarget_lock_init_recursive>:
 8004682:	4770      	bx	lr

08004684 <__retarget_lock_acquire_recursive>:
 8004684:	4770      	bx	lr

08004686 <__retarget_lock_release_recursive>:
 8004686:	4770      	bx	lr

08004688 <sbrk_aligned>:
 8004688:	b570      	push	{r4, r5, r6, lr}
 800468a:	4e0e      	ldr	r6, [pc, #56]	; (80046c4 <sbrk_aligned+0x3c>)
 800468c:	460c      	mov	r4, r1
 800468e:	6831      	ldr	r1, [r6, #0]
 8004690:	4605      	mov	r5, r0
 8004692:	b911      	cbnz	r1, 800469a <sbrk_aligned+0x12>
 8004694:	f000 fb7a 	bl	8004d8c <_sbrk_r>
 8004698:	6030      	str	r0, [r6, #0]
 800469a:	4621      	mov	r1, r4
 800469c:	4628      	mov	r0, r5
 800469e:	f000 fb75 	bl	8004d8c <_sbrk_r>
 80046a2:	1c43      	adds	r3, r0, #1
 80046a4:	d00a      	beq.n	80046bc <sbrk_aligned+0x34>
 80046a6:	1cc4      	adds	r4, r0, #3
 80046a8:	f024 0403 	bic.w	r4, r4, #3
 80046ac:	42a0      	cmp	r0, r4
 80046ae:	d007      	beq.n	80046c0 <sbrk_aligned+0x38>
 80046b0:	1a21      	subs	r1, r4, r0
 80046b2:	4628      	mov	r0, r5
 80046b4:	f000 fb6a 	bl	8004d8c <_sbrk_r>
 80046b8:	3001      	adds	r0, #1
 80046ba:	d101      	bne.n	80046c0 <sbrk_aligned+0x38>
 80046bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80046c0:	4620      	mov	r0, r4
 80046c2:	bd70      	pop	{r4, r5, r6, pc}
 80046c4:	20000a38 	.word	0x20000a38

080046c8 <_malloc_r>:
 80046c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046cc:	1ccd      	adds	r5, r1, #3
 80046ce:	f025 0503 	bic.w	r5, r5, #3
 80046d2:	3508      	adds	r5, #8
 80046d4:	2d0c      	cmp	r5, #12
 80046d6:	bf38      	it	cc
 80046d8:	250c      	movcc	r5, #12
 80046da:	2d00      	cmp	r5, #0
 80046dc:	4607      	mov	r7, r0
 80046de:	db01      	blt.n	80046e4 <_malloc_r+0x1c>
 80046e0:	42a9      	cmp	r1, r5
 80046e2:	d905      	bls.n	80046f0 <_malloc_r+0x28>
 80046e4:	230c      	movs	r3, #12
 80046e6:	603b      	str	r3, [r7, #0]
 80046e8:	2600      	movs	r6, #0
 80046ea:	4630      	mov	r0, r6
 80046ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046f0:	4e2e      	ldr	r6, [pc, #184]	; (80047ac <_malloc_r+0xe4>)
 80046f2:	f000 fdbb 	bl	800526c <__malloc_lock>
 80046f6:	6833      	ldr	r3, [r6, #0]
 80046f8:	461c      	mov	r4, r3
 80046fa:	bb34      	cbnz	r4, 800474a <_malloc_r+0x82>
 80046fc:	4629      	mov	r1, r5
 80046fe:	4638      	mov	r0, r7
 8004700:	f7ff ffc2 	bl	8004688 <sbrk_aligned>
 8004704:	1c43      	adds	r3, r0, #1
 8004706:	4604      	mov	r4, r0
 8004708:	d14d      	bne.n	80047a6 <_malloc_r+0xde>
 800470a:	6834      	ldr	r4, [r6, #0]
 800470c:	4626      	mov	r6, r4
 800470e:	2e00      	cmp	r6, #0
 8004710:	d140      	bne.n	8004794 <_malloc_r+0xcc>
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	4631      	mov	r1, r6
 8004716:	4638      	mov	r0, r7
 8004718:	eb04 0803 	add.w	r8, r4, r3
 800471c:	f000 fb36 	bl	8004d8c <_sbrk_r>
 8004720:	4580      	cmp	r8, r0
 8004722:	d13a      	bne.n	800479a <_malloc_r+0xd2>
 8004724:	6821      	ldr	r1, [r4, #0]
 8004726:	3503      	adds	r5, #3
 8004728:	1a6d      	subs	r5, r5, r1
 800472a:	f025 0503 	bic.w	r5, r5, #3
 800472e:	3508      	adds	r5, #8
 8004730:	2d0c      	cmp	r5, #12
 8004732:	bf38      	it	cc
 8004734:	250c      	movcc	r5, #12
 8004736:	4629      	mov	r1, r5
 8004738:	4638      	mov	r0, r7
 800473a:	f7ff ffa5 	bl	8004688 <sbrk_aligned>
 800473e:	3001      	adds	r0, #1
 8004740:	d02b      	beq.n	800479a <_malloc_r+0xd2>
 8004742:	6823      	ldr	r3, [r4, #0]
 8004744:	442b      	add	r3, r5
 8004746:	6023      	str	r3, [r4, #0]
 8004748:	e00e      	b.n	8004768 <_malloc_r+0xa0>
 800474a:	6822      	ldr	r2, [r4, #0]
 800474c:	1b52      	subs	r2, r2, r5
 800474e:	d41e      	bmi.n	800478e <_malloc_r+0xc6>
 8004750:	2a0b      	cmp	r2, #11
 8004752:	d916      	bls.n	8004782 <_malloc_r+0xba>
 8004754:	1961      	adds	r1, r4, r5
 8004756:	42a3      	cmp	r3, r4
 8004758:	6025      	str	r5, [r4, #0]
 800475a:	bf18      	it	ne
 800475c:	6059      	strne	r1, [r3, #4]
 800475e:	6863      	ldr	r3, [r4, #4]
 8004760:	bf08      	it	eq
 8004762:	6031      	streq	r1, [r6, #0]
 8004764:	5162      	str	r2, [r4, r5]
 8004766:	604b      	str	r3, [r1, #4]
 8004768:	4638      	mov	r0, r7
 800476a:	f104 060b 	add.w	r6, r4, #11
 800476e:	f000 fd83 	bl	8005278 <__malloc_unlock>
 8004772:	f026 0607 	bic.w	r6, r6, #7
 8004776:	1d23      	adds	r3, r4, #4
 8004778:	1af2      	subs	r2, r6, r3
 800477a:	d0b6      	beq.n	80046ea <_malloc_r+0x22>
 800477c:	1b9b      	subs	r3, r3, r6
 800477e:	50a3      	str	r3, [r4, r2]
 8004780:	e7b3      	b.n	80046ea <_malloc_r+0x22>
 8004782:	6862      	ldr	r2, [r4, #4]
 8004784:	42a3      	cmp	r3, r4
 8004786:	bf0c      	ite	eq
 8004788:	6032      	streq	r2, [r6, #0]
 800478a:	605a      	strne	r2, [r3, #4]
 800478c:	e7ec      	b.n	8004768 <_malloc_r+0xa0>
 800478e:	4623      	mov	r3, r4
 8004790:	6864      	ldr	r4, [r4, #4]
 8004792:	e7b2      	b.n	80046fa <_malloc_r+0x32>
 8004794:	4634      	mov	r4, r6
 8004796:	6876      	ldr	r6, [r6, #4]
 8004798:	e7b9      	b.n	800470e <_malloc_r+0x46>
 800479a:	230c      	movs	r3, #12
 800479c:	603b      	str	r3, [r7, #0]
 800479e:	4638      	mov	r0, r7
 80047a0:	f000 fd6a 	bl	8005278 <__malloc_unlock>
 80047a4:	e7a1      	b.n	80046ea <_malloc_r+0x22>
 80047a6:	6025      	str	r5, [r4, #0]
 80047a8:	e7de      	b.n	8004768 <_malloc_r+0xa0>
 80047aa:	bf00      	nop
 80047ac:	20000a34 	.word	0x20000a34

080047b0 <__sfputc_r>:
 80047b0:	6893      	ldr	r3, [r2, #8]
 80047b2:	3b01      	subs	r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	b410      	push	{r4}
 80047b8:	6093      	str	r3, [r2, #8]
 80047ba:	da08      	bge.n	80047ce <__sfputc_r+0x1e>
 80047bc:	6994      	ldr	r4, [r2, #24]
 80047be:	42a3      	cmp	r3, r4
 80047c0:	db01      	blt.n	80047c6 <__sfputc_r+0x16>
 80047c2:	290a      	cmp	r1, #10
 80047c4:	d103      	bne.n	80047ce <__sfputc_r+0x1e>
 80047c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047ca:	f000 bb33 	b.w	8004e34 <__swbuf_r>
 80047ce:	6813      	ldr	r3, [r2, #0]
 80047d0:	1c58      	adds	r0, r3, #1
 80047d2:	6010      	str	r0, [r2, #0]
 80047d4:	7019      	strb	r1, [r3, #0]
 80047d6:	4608      	mov	r0, r1
 80047d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047dc:	4770      	bx	lr

080047de <__sfputs_r>:
 80047de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047e0:	4606      	mov	r6, r0
 80047e2:	460f      	mov	r7, r1
 80047e4:	4614      	mov	r4, r2
 80047e6:	18d5      	adds	r5, r2, r3
 80047e8:	42ac      	cmp	r4, r5
 80047ea:	d101      	bne.n	80047f0 <__sfputs_r+0x12>
 80047ec:	2000      	movs	r0, #0
 80047ee:	e007      	b.n	8004800 <__sfputs_r+0x22>
 80047f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047f4:	463a      	mov	r2, r7
 80047f6:	4630      	mov	r0, r6
 80047f8:	f7ff ffda 	bl	80047b0 <__sfputc_r>
 80047fc:	1c43      	adds	r3, r0, #1
 80047fe:	d1f3      	bne.n	80047e8 <__sfputs_r+0xa>
 8004800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004804 <_vfiprintf_r>:
 8004804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004808:	460d      	mov	r5, r1
 800480a:	b09d      	sub	sp, #116	; 0x74
 800480c:	4614      	mov	r4, r2
 800480e:	4698      	mov	r8, r3
 8004810:	4606      	mov	r6, r0
 8004812:	b118      	cbz	r0, 800481c <_vfiprintf_r+0x18>
 8004814:	6983      	ldr	r3, [r0, #24]
 8004816:	b90b      	cbnz	r3, 800481c <_vfiprintf_r+0x18>
 8004818:	f7ff fe96 	bl	8004548 <__sinit>
 800481c:	4b89      	ldr	r3, [pc, #548]	; (8004a44 <_vfiprintf_r+0x240>)
 800481e:	429d      	cmp	r5, r3
 8004820:	d11b      	bne.n	800485a <_vfiprintf_r+0x56>
 8004822:	6875      	ldr	r5, [r6, #4]
 8004824:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004826:	07d9      	lsls	r1, r3, #31
 8004828:	d405      	bmi.n	8004836 <_vfiprintf_r+0x32>
 800482a:	89ab      	ldrh	r3, [r5, #12]
 800482c:	059a      	lsls	r2, r3, #22
 800482e:	d402      	bmi.n	8004836 <_vfiprintf_r+0x32>
 8004830:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004832:	f7ff ff27 	bl	8004684 <__retarget_lock_acquire_recursive>
 8004836:	89ab      	ldrh	r3, [r5, #12]
 8004838:	071b      	lsls	r3, r3, #28
 800483a:	d501      	bpl.n	8004840 <_vfiprintf_r+0x3c>
 800483c:	692b      	ldr	r3, [r5, #16]
 800483e:	b9eb      	cbnz	r3, 800487c <_vfiprintf_r+0x78>
 8004840:	4629      	mov	r1, r5
 8004842:	4630      	mov	r0, r6
 8004844:	f000 fb5a 	bl	8004efc <__swsetup_r>
 8004848:	b1c0      	cbz	r0, 800487c <_vfiprintf_r+0x78>
 800484a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800484c:	07dc      	lsls	r4, r3, #31
 800484e:	d50e      	bpl.n	800486e <_vfiprintf_r+0x6a>
 8004850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004854:	b01d      	add	sp, #116	; 0x74
 8004856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800485a:	4b7b      	ldr	r3, [pc, #492]	; (8004a48 <_vfiprintf_r+0x244>)
 800485c:	429d      	cmp	r5, r3
 800485e:	d101      	bne.n	8004864 <_vfiprintf_r+0x60>
 8004860:	68b5      	ldr	r5, [r6, #8]
 8004862:	e7df      	b.n	8004824 <_vfiprintf_r+0x20>
 8004864:	4b79      	ldr	r3, [pc, #484]	; (8004a4c <_vfiprintf_r+0x248>)
 8004866:	429d      	cmp	r5, r3
 8004868:	bf08      	it	eq
 800486a:	68f5      	ldreq	r5, [r6, #12]
 800486c:	e7da      	b.n	8004824 <_vfiprintf_r+0x20>
 800486e:	89ab      	ldrh	r3, [r5, #12]
 8004870:	0598      	lsls	r0, r3, #22
 8004872:	d4ed      	bmi.n	8004850 <_vfiprintf_r+0x4c>
 8004874:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004876:	f7ff ff06 	bl	8004686 <__retarget_lock_release_recursive>
 800487a:	e7e9      	b.n	8004850 <_vfiprintf_r+0x4c>
 800487c:	2300      	movs	r3, #0
 800487e:	9309      	str	r3, [sp, #36]	; 0x24
 8004880:	2320      	movs	r3, #32
 8004882:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004886:	f8cd 800c 	str.w	r8, [sp, #12]
 800488a:	2330      	movs	r3, #48	; 0x30
 800488c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004a50 <_vfiprintf_r+0x24c>
 8004890:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004894:	f04f 0901 	mov.w	r9, #1
 8004898:	4623      	mov	r3, r4
 800489a:	469a      	mov	sl, r3
 800489c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048a0:	b10a      	cbz	r2, 80048a6 <_vfiprintf_r+0xa2>
 80048a2:	2a25      	cmp	r2, #37	; 0x25
 80048a4:	d1f9      	bne.n	800489a <_vfiprintf_r+0x96>
 80048a6:	ebba 0b04 	subs.w	fp, sl, r4
 80048aa:	d00b      	beq.n	80048c4 <_vfiprintf_r+0xc0>
 80048ac:	465b      	mov	r3, fp
 80048ae:	4622      	mov	r2, r4
 80048b0:	4629      	mov	r1, r5
 80048b2:	4630      	mov	r0, r6
 80048b4:	f7ff ff93 	bl	80047de <__sfputs_r>
 80048b8:	3001      	adds	r0, #1
 80048ba:	f000 80aa 	beq.w	8004a12 <_vfiprintf_r+0x20e>
 80048be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048c0:	445a      	add	r2, fp
 80048c2:	9209      	str	r2, [sp, #36]	; 0x24
 80048c4:	f89a 3000 	ldrb.w	r3, [sl]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 80a2 	beq.w	8004a12 <_vfiprintf_r+0x20e>
 80048ce:	2300      	movs	r3, #0
 80048d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048d8:	f10a 0a01 	add.w	sl, sl, #1
 80048dc:	9304      	str	r3, [sp, #16]
 80048de:	9307      	str	r3, [sp, #28]
 80048e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048e4:	931a      	str	r3, [sp, #104]	; 0x68
 80048e6:	4654      	mov	r4, sl
 80048e8:	2205      	movs	r2, #5
 80048ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048ee:	4858      	ldr	r0, [pc, #352]	; (8004a50 <_vfiprintf_r+0x24c>)
 80048f0:	f7fb fc8e 	bl	8000210 <memchr>
 80048f4:	9a04      	ldr	r2, [sp, #16]
 80048f6:	b9d8      	cbnz	r0, 8004930 <_vfiprintf_r+0x12c>
 80048f8:	06d1      	lsls	r1, r2, #27
 80048fa:	bf44      	itt	mi
 80048fc:	2320      	movmi	r3, #32
 80048fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004902:	0713      	lsls	r3, r2, #28
 8004904:	bf44      	itt	mi
 8004906:	232b      	movmi	r3, #43	; 0x2b
 8004908:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800490c:	f89a 3000 	ldrb.w	r3, [sl]
 8004910:	2b2a      	cmp	r3, #42	; 0x2a
 8004912:	d015      	beq.n	8004940 <_vfiprintf_r+0x13c>
 8004914:	9a07      	ldr	r2, [sp, #28]
 8004916:	4654      	mov	r4, sl
 8004918:	2000      	movs	r0, #0
 800491a:	f04f 0c0a 	mov.w	ip, #10
 800491e:	4621      	mov	r1, r4
 8004920:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004924:	3b30      	subs	r3, #48	; 0x30
 8004926:	2b09      	cmp	r3, #9
 8004928:	d94e      	bls.n	80049c8 <_vfiprintf_r+0x1c4>
 800492a:	b1b0      	cbz	r0, 800495a <_vfiprintf_r+0x156>
 800492c:	9207      	str	r2, [sp, #28]
 800492e:	e014      	b.n	800495a <_vfiprintf_r+0x156>
 8004930:	eba0 0308 	sub.w	r3, r0, r8
 8004934:	fa09 f303 	lsl.w	r3, r9, r3
 8004938:	4313      	orrs	r3, r2
 800493a:	9304      	str	r3, [sp, #16]
 800493c:	46a2      	mov	sl, r4
 800493e:	e7d2      	b.n	80048e6 <_vfiprintf_r+0xe2>
 8004940:	9b03      	ldr	r3, [sp, #12]
 8004942:	1d19      	adds	r1, r3, #4
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	9103      	str	r1, [sp, #12]
 8004948:	2b00      	cmp	r3, #0
 800494a:	bfbb      	ittet	lt
 800494c:	425b      	neglt	r3, r3
 800494e:	f042 0202 	orrlt.w	r2, r2, #2
 8004952:	9307      	strge	r3, [sp, #28]
 8004954:	9307      	strlt	r3, [sp, #28]
 8004956:	bfb8      	it	lt
 8004958:	9204      	strlt	r2, [sp, #16]
 800495a:	7823      	ldrb	r3, [r4, #0]
 800495c:	2b2e      	cmp	r3, #46	; 0x2e
 800495e:	d10c      	bne.n	800497a <_vfiprintf_r+0x176>
 8004960:	7863      	ldrb	r3, [r4, #1]
 8004962:	2b2a      	cmp	r3, #42	; 0x2a
 8004964:	d135      	bne.n	80049d2 <_vfiprintf_r+0x1ce>
 8004966:	9b03      	ldr	r3, [sp, #12]
 8004968:	1d1a      	adds	r2, r3, #4
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	9203      	str	r2, [sp, #12]
 800496e:	2b00      	cmp	r3, #0
 8004970:	bfb8      	it	lt
 8004972:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004976:	3402      	adds	r4, #2
 8004978:	9305      	str	r3, [sp, #20]
 800497a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004a60 <_vfiprintf_r+0x25c>
 800497e:	7821      	ldrb	r1, [r4, #0]
 8004980:	2203      	movs	r2, #3
 8004982:	4650      	mov	r0, sl
 8004984:	f7fb fc44 	bl	8000210 <memchr>
 8004988:	b140      	cbz	r0, 800499c <_vfiprintf_r+0x198>
 800498a:	2340      	movs	r3, #64	; 0x40
 800498c:	eba0 000a 	sub.w	r0, r0, sl
 8004990:	fa03 f000 	lsl.w	r0, r3, r0
 8004994:	9b04      	ldr	r3, [sp, #16]
 8004996:	4303      	orrs	r3, r0
 8004998:	3401      	adds	r4, #1
 800499a:	9304      	str	r3, [sp, #16]
 800499c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049a0:	482c      	ldr	r0, [pc, #176]	; (8004a54 <_vfiprintf_r+0x250>)
 80049a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049a6:	2206      	movs	r2, #6
 80049a8:	f7fb fc32 	bl	8000210 <memchr>
 80049ac:	2800      	cmp	r0, #0
 80049ae:	d03f      	beq.n	8004a30 <_vfiprintf_r+0x22c>
 80049b0:	4b29      	ldr	r3, [pc, #164]	; (8004a58 <_vfiprintf_r+0x254>)
 80049b2:	bb1b      	cbnz	r3, 80049fc <_vfiprintf_r+0x1f8>
 80049b4:	9b03      	ldr	r3, [sp, #12]
 80049b6:	3307      	adds	r3, #7
 80049b8:	f023 0307 	bic.w	r3, r3, #7
 80049bc:	3308      	adds	r3, #8
 80049be:	9303      	str	r3, [sp, #12]
 80049c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049c2:	443b      	add	r3, r7
 80049c4:	9309      	str	r3, [sp, #36]	; 0x24
 80049c6:	e767      	b.n	8004898 <_vfiprintf_r+0x94>
 80049c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80049cc:	460c      	mov	r4, r1
 80049ce:	2001      	movs	r0, #1
 80049d0:	e7a5      	b.n	800491e <_vfiprintf_r+0x11a>
 80049d2:	2300      	movs	r3, #0
 80049d4:	3401      	adds	r4, #1
 80049d6:	9305      	str	r3, [sp, #20]
 80049d8:	4619      	mov	r1, r3
 80049da:	f04f 0c0a 	mov.w	ip, #10
 80049de:	4620      	mov	r0, r4
 80049e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049e4:	3a30      	subs	r2, #48	; 0x30
 80049e6:	2a09      	cmp	r2, #9
 80049e8:	d903      	bls.n	80049f2 <_vfiprintf_r+0x1ee>
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d0c5      	beq.n	800497a <_vfiprintf_r+0x176>
 80049ee:	9105      	str	r1, [sp, #20]
 80049f0:	e7c3      	b.n	800497a <_vfiprintf_r+0x176>
 80049f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80049f6:	4604      	mov	r4, r0
 80049f8:	2301      	movs	r3, #1
 80049fa:	e7f0      	b.n	80049de <_vfiprintf_r+0x1da>
 80049fc:	ab03      	add	r3, sp, #12
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	462a      	mov	r2, r5
 8004a02:	4b16      	ldr	r3, [pc, #88]	; (8004a5c <_vfiprintf_r+0x258>)
 8004a04:	a904      	add	r1, sp, #16
 8004a06:	4630      	mov	r0, r6
 8004a08:	f3af 8000 	nop.w
 8004a0c:	4607      	mov	r7, r0
 8004a0e:	1c78      	adds	r0, r7, #1
 8004a10:	d1d6      	bne.n	80049c0 <_vfiprintf_r+0x1bc>
 8004a12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a14:	07d9      	lsls	r1, r3, #31
 8004a16:	d405      	bmi.n	8004a24 <_vfiprintf_r+0x220>
 8004a18:	89ab      	ldrh	r3, [r5, #12]
 8004a1a:	059a      	lsls	r2, r3, #22
 8004a1c:	d402      	bmi.n	8004a24 <_vfiprintf_r+0x220>
 8004a1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a20:	f7ff fe31 	bl	8004686 <__retarget_lock_release_recursive>
 8004a24:	89ab      	ldrh	r3, [r5, #12]
 8004a26:	065b      	lsls	r3, r3, #25
 8004a28:	f53f af12 	bmi.w	8004850 <_vfiprintf_r+0x4c>
 8004a2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a2e:	e711      	b.n	8004854 <_vfiprintf_r+0x50>
 8004a30:	ab03      	add	r3, sp, #12
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	462a      	mov	r2, r5
 8004a36:	4b09      	ldr	r3, [pc, #36]	; (8004a5c <_vfiprintf_r+0x258>)
 8004a38:	a904      	add	r1, sp, #16
 8004a3a:	4630      	mov	r0, r6
 8004a3c:	f000 f880 	bl	8004b40 <_printf_i>
 8004a40:	e7e4      	b.n	8004a0c <_vfiprintf_r+0x208>
 8004a42:	bf00      	nop
 8004a44:	08005680 	.word	0x08005680
 8004a48:	080056a0 	.word	0x080056a0
 8004a4c:	08005660 	.word	0x08005660
 8004a50:	080056c0 	.word	0x080056c0
 8004a54:	080056ca 	.word	0x080056ca
 8004a58:	00000000 	.word	0x00000000
 8004a5c:	080047df 	.word	0x080047df
 8004a60:	080056c6 	.word	0x080056c6

08004a64 <_printf_common>:
 8004a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a68:	4616      	mov	r6, r2
 8004a6a:	4699      	mov	r9, r3
 8004a6c:	688a      	ldr	r2, [r1, #8]
 8004a6e:	690b      	ldr	r3, [r1, #16]
 8004a70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a74:	4293      	cmp	r3, r2
 8004a76:	bfb8      	it	lt
 8004a78:	4613      	movlt	r3, r2
 8004a7a:	6033      	str	r3, [r6, #0]
 8004a7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a80:	4607      	mov	r7, r0
 8004a82:	460c      	mov	r4, r1
 8004a84:	b10a      	cbz	r2, 8004a8a <_printf_common+0x26>
 8004a86:	3301      	adds	r3, #1
 8004a88:	6033      	str	r3, [r6, #0]
 8004a8a:	6823      	ldr	r3, [r4, #0]
 8004a8c:	0699      	lsls	r1, r3, #26
 8004a8e:	bf42      	ittt	mi
 8004a90:	6833      	ldrmi	r3, [r6, #0]
 8004a92:	3302      	addmi	r3, #2
 8004a94:	6033      	strmi	r3, [r6, #0]
 8004a96:	6825      	ldr	r5, [r4, #0]
 8004a98:	f015 0506 	ands.w	r5, r5, #6
 8004a9c:	d106      	bne.n	8004aac <_printf_common+0x48>
 8004a9e:	f104 0a19 	add.w	sl, r4, #25
 8004aa2:	68e3      	ldr	r3, [r4, #12]
 8004aa4:	6832      	ldr	r2, [r6, #0]
 8004aa6:	1a9b      	subs	r3, r3, r2
 8004aa8:	42ab      	cmp	r3, r5
 8004aaa:	dc26      	bgt.n	8004afa <_printf_common+0x96>
 8004aac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ab0:	1e13      	subs	r3, r2, #0
 8004ab2:	6822      	ldr	r2, [r4, #0]
 8004ab4:	bf18      	it	ne
 8004ab6:	2301      	movne	r3, #1
 8004ab8:	0692      	lsls	r2, r2, #26
 8004aba:	d42b      	bmi.n	8004b14 <_printf_common+0xb0>
 8004abc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ac0:	4649      	mov	r1, r9
 8004ac2:	4638      	mov	r0, r7
 8004ac4:	47c0      	blx	r8
 8004ac6:	3001      	adds	r0, #1
 8004ac8:	d01e      	beq.n	8004b08 <_printf_common+0xa4>
 8004aca:	6823      	ldr	r3, [r4, #0]
 8004acc:	68e5      	ldr	r5, [r4, #12]
 8004ace:	6832      	ldr	r2, [r6, #0]
 8004ad0:	f003 0306 	and.w	r3, r3, #6
 8004ad4:	2b04      	cmp	r3, #4
 8004ad6:	bf08      	it	eq
 8004ad8:	1aad      	subeq	r5, r5, r2
 8004ada:	68a3      	ldr	r3, [r4, #8]
 8004adc:	6922      	ldr	r2, [r4, #16]
 8004ade:	bf0c      	ite	eq
 8004ae0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ae4:	2500      	movne	r5, #0
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	bfc4      	itt	gt
 8004aea:	1a9b      	subgt	r3, r3, r2
 8004aec:	18ed      	addgt	r5, r5, r3
 8004aee:	2600      	movs	r6, #0
 8004af0:	341a      	adds	r4, #26
 8004af2:	42b5      	cmp	r5, r6
 8004af4:	d11a      	bne.n	8004b2c <_printf_common+0xc8>
 8004af6:	2000      	movs	r0, #0
 8004af8:	e008      	b.n	8004b0c <_printf_common+0xa8>
 8004afa:	2301      	movs	r3, #1
 8004afc:	4652      	mov	r2, sl
 8004afe:	4649      	mov	r1, r9
 8004b00:	4638      	mov	r0, r7
 8004b02:	47c0      	blx	r8
 8004b04:	3001      	adds	r0, #1
 8004b06:	d103      	bne.n	8004b10 <_printf_common+0xac>
 8004b08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b10:	3501      	adds	r5, #1
 8004b12:	e7c6      	b.n	8004aa2 <_printf_common+0x3e>
 8004b14:	18e1      	adds	r1, r4, r3
 8004b16:	1c5a      	adds	r2, r3, #1
 8004b18:	2030      	movs	r0, #48	; 0x30
 8004b1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b1e:	4422      	add	r2, r4
 8004b20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b28:	3302      	adds	r3, #2
 8004b2a:	e7c7      	b.n	8004abc <_printf_common+0x58>
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	4622      	mov	r2, r4
 8004b30:	4649      	mov	r1, r9
 8004b32:	4638      	mov	r0, r7
 8004b34:	47c0      	blx	r8
 8004b36:	3001      	adds	r0, #1
 8004b38:	d0e6      	beq.n	8004b08 <_printf_common+0xa4>
 8004b3a:	3601      	adds	r6, #1
 8004b3c:	e7d9      	b.n	8004af2 <_printf_common+0x8e>
	...

08004b40 <_printf_i>:
 8004b40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b44:	7e0f      	ldrb	r7, [r1, #24]
 8004b46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b48:	2f78      	cmp	r7, #120	; 0x78
 8004b4a:	4691      	mov	r9, r2
 8004b4c:	4680      	mov	r8, r0
 8004b4e:	460c      	mov	r4, r1
 8004b50:	469a      	mov	sl, r3
 8004b52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b56:	d807      	bhi.n	8004b68 <_printf_i+0x28>
 8004b58:	2f62      	cmp	r7, #98	; 0x62
 8004b5a:	d80a      	bhi.n	8004b72 <_printf_i+0x32>
 8004b5c:	2f00      	cmp	r7, #0
 8004b5e:	f000 80d8 	beq.w	8004d12 <_printf_i+0x1d2>
 8004b62:	2f58      	cmp	r7, #88	; 0x58
 8004b64:	f000 80a3 	beq.w	8004cae <_printf_i+0x16e>
 8004b68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b70:	e03a      	b.n	8004be8 <_printf_i+0xa8>
 8004b72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b76:	2b15      	cmp	r3, #21
 8004b78:	d8f6      	bhi.n	8004b68 <_printf_i+0x28>
 8004b7a:	a101      	add	r1, pc, #4	; (adr r1, 8004b80 <_printf_i+0x40>)
 8004b7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b80:	08004bd9 	.word	0x08004bd9
 8004b84:	08004bed 	.word	0x08004bed
 8004b88:	08004b69 	.word	0x08004b69
 8004b8c:	08004b69 	.word	0x08004b69
 8004b90:	08004b69 	.word	0x08004b69
 8004b94:	08004b69 	.word	0x08004b69
 8004b98:	08004bed 	.word	0x08004bed
 8004b9c:	08004b69 	.word	0x08004b69
 8004ba0:	08004b69 	.word	0x08004b69
 8004ba4:	08004b69 	.word	0x08004b69
 8004ba8:	08004b69 	.word	0x08004b69
 8004bac:	08004cf9 	.word	0x08004cf9
 8004bb0:	08004c1d 	.word	0x08004c1d
 8004bb4:	08004cdb 	.word	0x08004cdb
 8004bb8:	08004b69 	.word	0x08004b69
 8004bbc:	08004b69 	.word	0x08004b69
 8004bc0:	08004d1b 	.word	0x08004d1b
 8004bc4:	08004b69 	.word	0x08004b69
 8004bc8:	08004c1d 	.word	0x08004c1d
 8004bcc:	08004b69 	.word	0x08004b69
 8004bd0:	08004b69 	.word	0x08004b69
 8004bd4:	08004ce3 	.word	0x08004ce3
 8004bd8:	682b      	ldr	r3, [r5, #0]
 8004bda:	1d1a      	adds	r2, r3, #4
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	602a      	str	r2, [r5, #0]
 8004be0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004be4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004be8:	2301      	movs	r3, #1
 8004bea:	e0a3      	b.n	8004d34 <_printf_i+0x1f4>
 8004bec:	6820      	ldr	r0, [r4, #0]
 8004bee:	6829      	ldr	r1, [r5, #0]
 8004bf0:	0606      	lsls	r6, r0, #24
 8004bf2:	f101 0304 	add.w	r3, r1, #4
 8004bf6:	d50a      	bpl.n	8004c0e <_printf_i+0xce>
 8004bf8:	680e      	ldr	r6, [r1, #0]
 8004bfa:	602b      	str	r3, [r5, #0]
 8004bfc:	2e00      	cmp	r6, #0
 8004bfe:	da03      	bge.n	8004c08 <_printf_i+0xc8>
 8004c00:	232d      	movs	r3, #45	; 0x2d
 8004c02:	4276      	negs	r6, r6
 8004c04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c08:	485e      	ldr	r0, [pc, #376]	; (8004d84 <_printf_i+0x244>)
 8004c0a:	230a      	movs	r3, #10
 8004c0c:	e019      	b.n	8004c42 <_printf_i+0x102>
 8004c0e:	680e      	ldr	r6, [r1, #0]
 8004c10:	602b      	str	r3, [r5, #0]
 8004c12:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c16:	bf18      	it	ne
 8004c18:	b236      	sxthne	r6, r6
 8004c1a:	e7ef      	b.n	8004bfc <_printf_i+0xbc>
 8004c1c:	682b      	ldr	r3, [r5, #0]
 8004c1e:	6820      	ldr	r0, [r4, #0]
 8004c20:	1d19      	adds	r1, r3, #4
 8004c22:	6029      	str	r1, [r5, #0]
 8004c24:	0601      	lsls	r1, r0, #24
 8004c26:	d501      	bpl.n	8004c2c <_printf_i+0xec>
 8004c28:	681e      	ldr	r6, [r3, #0]
 8004c2a:	e002      	b.n	8004c32 <_printf_i+0xf2>
 8004c2c:	0646      	lsls	r6, r0, #25
 8004c2e:	d5fb      	bpl.n	8004c28 <_printf_i+0xe8>
 8004c30:	881e      	ldrh	r6, [r3, #0]
 8004c32:	4854      	ldr	r0, [pc, #336]	; (8004d84 <_printf_i+0x244>)
 8004c34:	2f6f      	cmp	r7, #111	; 0x6f
 8004c36:	bf0c      	ite	eq
 8004c38:	2308      	moveq	r3, #8
 8004c3a:	230a      	movne	r3, #10
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c42:	6865      	ldr	r5, [r4, #4]
 8004c44:	60a5      	str	r5, [r4, #8]
 8004c46:	2d00      	cmp	r5, #0
 8004c48:	bfa2      	ittt	ge
 8004c4a:	6821      	ldrge	r1, [r4, #0]
 8004c4c:	f021 0104 	bicge.w	r1, r1, #4
 8004c50:	6021      	strge	r1, [r4, #0]
 8004c52:	b90e      	cbnz	r6, 8004c58 <_printf_i+0x118>
 8004c54:	2d00      	cmp	r5, #0
 8004c56:	d04d      	beq.n	8004cf4 <_printf_i+0x1b4>
 8004c58:	4615      	mov	r5, r2
 8004c5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c5e:	fb03 6711 	mls	r7, r3, r1, r6
 8004c62:	5dc7      	ldrb	r7, [r0, r7]
 8004c64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c68:	4637      	mov	r7, r6
 8004c6a:	42bb      	cmp	r3, r7
 8004c6c:	460e      	mov	r6, r1
 8004c6e:	d9f4      	bls.n	8004c5a <_printf_i+0x11a>
 8004c70:	2b08      	cmp	r3, #8
 8004c72:	d10b      	bne.n	8004c8c <_printf_i+0x14c>
 8004c74:	6823      	ldr	r3, [r4, #0]
 8004c76:	07de      	lsls	r6, r3, #31
 8004c78:	d508      	bpl.n	8004c8c <_printf_i+0x14c>
 8004c7a:	6923      	ldr	r3, [r4, #16]
 8004c7c:	6861      	ldr	r1, [r4, #4]
 8004c7e:	4299      	cmp	r1, r3
 8004c80:	bfde      	ittt	le
 8004c82:	2330      	movle	r3, #48	; 0x30
 8004c84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c88:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004c8c:	1b52      	subs	r2, r2, r5
 8004c8e:	6122      	str	r2, [r4, #16]
 8004c90:	f8cd a000 	str.w	sl, [sp]
 8004c94:	464b      	mov	r3, r9
 8004c96:	aa03      	add	r2, sp, #12
 8004c98:	4621      	mov	r1, r4
 8004c9a:	4640      	mov	r0, r8
 8004c9c:	f7ff fee2 	bl	8004a64 <_printf_common>
 8004ca0:	3001      	adds	r0, #1
 8004ca2:	d14c      	bne.n	8004d3e <_printf_i+0x1fe>
 8004ca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ca8:	b004      	add	sp, #16
 8004caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cae:	4835      	ldr	r0, [pc, #212]	; (8004d84 <_printf_i+0x244>)
 8004cb0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004cb4:	6829      	ldr	r1, [r5, #0]
 8004cb6:	6823      	ldr	r3, [r4, #0]
 8004cb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8004cbc:	6029      	str	r1, [r5, #0]
 8004cbe:	061d      	lsls	r5, r3, #24
 8004cc0:	d514      	bpl.n	8004cec <_printf_i+0x1ac>
 8004cc2:	07df      	lsls	r7, r3, #31
 8004cc4:	bf44      	itt	mi
 8004cc6:	f043 0320 	orrmi.w	r3, r3, #32
 8004cca:	6023      	strmi	r3, [r4, #0]
 8004ccc:	b91e      	cbnz	r6, 8004cd6 <_printf_i+0x196>
 8004cce:	6823      	ldr	r3, [r4, #0]
 8004cd0:	f023 0320 	bic.w	r3, r3, #32
 8004cd4:	6023      	str	r3, [r4, #0]
 8004cd6:	2310      	movs	r3, #16
 8004cd8:	e7b0      	b.n	8004c3c <_printf_i+0xfc>
 8004cda:	6823      	ldr	r3, [r4, #0]
 8004cdc:	f043 0320 	orr.w	r3, r3, #32
 8004ce0:	6023      	str	r3, [r4, #0]
 8004ce2:	2378      	movs	r3, #120	; 0x78
 8004ce4:	4828      	ldr	r0, [pc, #160]	; (8004d88 <_printf_i+0x248>)
 8004ce6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004cea:	e7e3      	b.n	8004cb4 <_printf_i+0x174>
 8004cec:	0659      	lsls	r1, r3, #25
 8004cee:	bf48      	it	mi
 8004cf0:	b2b6      	uxthmi	r6, r6
 8004cf2:	e7e6      	b.n	8004cc2 <_printf_i+0x182>
 8004cf4:	4615      	mov	r5, r2
 8004cf6:	e7bb      	b.n	8004c70 <_printf_i+0x130>
 8004cf8:	682b      	ldr	r3, [r5, #0]
 8004cfa:	6826      	ldr	r6, [r4, #0]
 8004cfc:	6961      	ldr	r1, [r4, #20]
 8004cfe:	1d18      	adds	r0, r3, #4
 8004d00:	6028      	str	r0, [r5, #0]
 8004d02:	0635      	lsls	r5, r6, #24
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	d501      	bpl.n	8004d0c <_printf_i+0x1cc>
 8004d08:	6019      	str	r1, [r3, #0]
 8004d0a:	e002      	b.n	8004d12 <_printf_i+0x1d2>
 8004d0c:	0670      	lsls	r0, r6, #25
 8004d0e:	d5fb      	bpl.n	8004d08 <_printf_i+0x1c8>
 8004d10:	8019      	strh	r1, [r3, #0]
 8004d12:	2300      	movs	r3, #0
 8004d14:	6123      	str	r3, [r4, #16]
 8004d16:	4615      	mov	r5, r2
 8004d18:	e7ba      	b.n	8004c90 <_printf_i+0x150>
 8004d1a:	682b      	ldr	r3, [r5, #0]
 8004d1c:	1d1a      	adds	r2, r3, #4
 8004d1e:	602a      	str	r2, [r5, #0]
 8004d20:	681d      	ldr	r5, [r3, #0]
 8004d22:	6862      	ldr	r2, [r4, #4]
 8004d24:	2100      	movs	r1, #0
 8004d26:	4628      	mov	r0, r5
 8004d28:	f7fb fa72 	bl	8000210 <memchr>
 8004d2c:	b108      	cbz	r0, 8004d32 <_printf_i+0x1f2>
 8004d2e:	1b40      	subs	r0, r0, r5
 8004d30:	6060      	str	r0, [r4, #4]
 8004d32:	6863      	ldr	r3, [r4, #4]
 8004d34:	6123      	str	r3, [r4, #16]
 8004d36:	2300      	movs	r3, #0
 8004d38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d3c:	e7a8      	b.n	8004c90 <_printf_i+0x150>
 8004d3e:	6923      	ldr	r3, [r4, #16]
 8004d40:	462a      	mov	r2, r5
 8004d42:	4649      	mov	r1, r9
 8004d44:	4640      	mov	r0, r8
 8004d46:	47d0      	blx	sl
 8004d48:	3001      	adds	r0, #1
 8004d4a:	d0ab      	beq.n	8004ca4 <_printf_i+0x164>
 8004d4c:	6823      	ldr	r3, [r4, #0]
 8004d4e:	079b      	lsls	r3, r3, #30
 8004d50:	d413      	bmi.n	8004d7a <_printf_i+0x23a>
 8004d52:	68e0      	ldr	r0, [r4, #12]
 8004d54:	9b03      	ldr	r3, [sp, #12]
 8004d56:	4298      	cmp	r0, r3
 8004d58:	bfb8      	it	lt
 8004d5a:	4618      	movlt	r0, r3
 8004d5c:	e7a4      	b.n	8004ca8 <_printf_i+0x168>
 8004d5e:	2301      	movs	r3, #1
 8004d60:	4632      	mov	r2, r6
 8004d62:	4649      	mov	r1, r9
 8004d64:	4640      	mov	r0, r8
 8004d66:	47d0      	blx	sl
 8004d68:	3001      	adds	r0, #1
 8004d6a:	d09b      	beq.n	8004ca4 <_printf_i+0x164>
 8004d6c:	3501      	adds	r5, #1
 8004d6e:	68e3      	ldr	r3, [r4, #12]
 8004d70:	9903      	ldr	r1, [sp, #12]
 8004d72:	1a5b      	subs	r3, r3, r1
 8004d74:	42ab      	cmp	r3, r5
 8004d76:	dcf2      	bgt.n	8004d5e <_printf_i+0x21e>
 8004d78:	e7eb      	b.n	8004d52 <_printf_i+0x212>
 8004d7a:	2500      	movs	r5, #0
 8004d7c:	f104 0619 	add.w	r6, r4, #25
 8004d80:	e7f5      	b.n	8004d6e <_printf_i+0x22e>
 8004d82:	bf00      	nop
 8004d84:	080056d1 	.word	0x080056d1
 8004d88:	080056e2 	.word	0x080056e2

08004d8c <_sbrk_r>:
 8004d8c:	b538      	push	{r3, r4, r5, lr}
 8004d8e:	4d06      	ldr	r5, [pc, #24]	; (8004da8 <_sbrk_r+0x1c>)
 8004d90:	2300      	movs	r3, #0
 8004d92:	4604      	mov	r4, r0
 8004d94:	4608      	mov	r0, r1
 8004d96:	602b      	str	r3, [r5, #0]
 8004d98:	f7fc f8a8 	bl	8000eec <_sbrk>
 8004d9c:	1c43      	adds	r3, r0, #1
 8004d9e:	d102      	bne.n	8004da6 <_sbrk_r+0x1a>
 8004da0:	682b      	ldr	r3, [r5, #0]
 8004da2:	b103      	cbz	r3, 8004da6 <_sbrk_r+0x1a>
 8004da4:	6023      	str	r3, [r4, #0]
 8004da6:	bd38      	pop	{r3, r4, r5, pc}
 8004da8:	20000a3c 	.word	0x20000a3c

08004dac <__sread>:
 8004dac:	b510      	push	{r4, lr}
 8004dae:	460c      	mov	r4, r1
 8004db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004db4:	f000 fab2 	bl	800531c <_read_r>
 8004db8:	2800      	cmp	r0, #0
 8004dba:	bfab      	itete	ge
 8004dbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004dbe:	89a3      	ldrhlt	r3, [r4, #12]
 8004dc0:	181b      	addge	r3, r3, r0
 8004dc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004dc6:	bfac      	ite	ge
 8004dc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8004dca:	81a3      	strhlt	r3, [r4, #12]
 8004dcc:	bd10      	pop	{r4, pc}

08004dce <__swrite>:
 8004dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dd2:	461f      	mov	r7, r3
 8004dd4:	898b      	ldrh	r3, [r1, #12]
 8004dd6:	05db      	lsls	r3, r3, #23
 8004dd8:	4605      	mov	r5, r0
 8004dda:	460c      	mov	r4, r1
 8004ddc:	4616      	mov	r6, r2
 8004dde:	d505      	bpl.n	8004dec <__swrite+0x1e>
 8004de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004de4:	2302      	movs	r3, #2
 8004de6:	2200      	movs	r2, #0
 8004de8:	f000 f9c8 	bl	800517c <_lseek_r>
 8004dec:	89a3      	ldrh	r3, [r4, #12]
 8004dee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004df2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004df6:	81a3      	strh	r3, [r4, #12]
 8004df8:	4632      	mov	r2, r6
 8004dfa:	463b      	mov	r3, r7
 8004dfc:	4628      	mov	r0, r5
 8004dfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e02:	f000 b869 	b.w	8004ed8 <_write_r>

08004e06 <__sseek>:
 8004e06:	b510      	push	{r4, lr}
 8004e08:	460c      	mov	r4, r1
 8004e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e0e:	f000 f9b5 	bl	800517c <_lseek_r>
 8004e12:	1c43      	adds	r3, r0, #1
 8004e14:	89a3      	ldrh	r3, [r4, #12]
 8004e16:	bf15      	itete	ne
 8004e18:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e22:	81a3      	strheq	r3, [r4, #12]
 8004e24:	bf18      	it	ne
 8004e26:	81a3      	strhne	r3, [r4, #12]
 8004e28:	bd10      	pop	{r4, pc}

08004e2a <__sclose>:
 8004e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e2e:	f000 b8d3 	b.w	8004fd8 <_close_r>
	...

08004e34 <__swbuf_r>:
 8004e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e36:	460e      	mov	r6, r1
 8004e38:	4614      	mov	r4, r2
 8004e3a:	4605      	mov	r5, r0
 8004e3c:	b118      	cbz	r0, 8004e46 <__swbuf_r+0x12>
 8004e3e:	6983      	ldr	r3, [r0, #24]
 8004e40:	b90b      	cbnz	r3, 8004e46 <__swbuf_r+0x12>
 8004e42:	f7ff fb81 	bl	8004548 <__sinit>
 8004e46:	4b21      	ldr	r3, [pc, #132]	; (8004ecc <__swbuf_r+0x98>)
 8004e48:	429c      	cmp	r4, r3
 8004e4a:	d12b      	bne.n	8004ea4 <__swbuf_r+0x70>
 8004e4c:	686c      	ldr	r4, [r5, #4]
 8004e4e:	69a3      	ldr	r3, [r4, #24]
 8004e50:	60a3      	str	r3, [r4, #8]
 8004e52:	89a3      	ldrh	r3, [r4, #12]
 8004e54:	071a      	lsls	r2, r3, #28
 8004e56:	d52f      	bpl.n	8004eb8 <__swbuf_r+0x84>
 8004e58:	6923      	ldr	r3, [r4, #16]
 8004e5a:	b36b      	cbz	r3, 8004eb8 <__swbuf_r+0x84>
 8004e5c:	6923      	ldr	r3, [r4, #16]
 8004e5e:	6820      	ldr	r0, [r4, #0]
 8004e60:	1ac0      	subs	r0, r0, r3
 8004e62:	6963      	ldr	r3, [r4, #20]
 8004e64:	b2f6      	uxtb	r6, r6
 8004e66:	4283      	cmp	r3, r0
 8004e68:	4637      	mov	r7, r6
 8004e6a:	dc04      	bgt.n	8004e76 <__swbuf_r+0x42>
 8004e6c:	4621      	mov	r1, r4
 8004e6e:	4628      	mov	r0, r5
 8004e70:	f000 f948 	bl	8005104 <_fflush_r>
 8004e74:	bb30      	cbnz	r0, 8004ec4 <__swbuf_r+0x90>
 8004e76:	68a3      	ldr	r3, [r4, #8]
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	60a3      	str	r3, [r4, #8]
 8004e7c:	6823      	ldr	r3, [r4, #0]
 8004e7e:	1c5a      	adds	r2, r3, #1
 8004e80:	6022      	str	r2, [r4, #0]
 8004e82:	701e      	strb	r6, [r3, #0]
 8004e84:	6963      	ldr	r3, [r4, #20]
 8004e86:	3001      	adds	r0, #1
 8004e88:	4283      	cmp	r3, r0
 8004e8a:	d004      	beq.n	8004e96 <__swbuf_r+0x62>
 8004e8c:	89a3      	ldrh	r3, [r4, #12]
 8004e8e:	07db      	lsls	r3, r3, #31
 8004e90:	d506      	bpl.n	8004ea0 <__swbuf_r+0x6c>
 8004e92:	2e0a      	cmp	r6, #10
 8004e94:	d104      	bne.n	8004ea0 <__swbuf_r+0x6c>
 8004e96:	4621      	mov	r1, r4
 8004e98:	4628      	mov	r0, r5
 8004e9a:	f000 f933 	bl	8005104 <_fflush_r>
 8004e9e:	b988      	cbnz	r0, 8004ec4 <__swbuf_r+0x90>
 8004ea0:	4638      	mov	r0, r7
 8004ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ea4:	4b0a      	ldr	r3, [pc, #40]	; (8004ed0 <__swbuf_r+0x9c>)
 8004ea6:	429c      	cmp	r4, r3
 8004ea8:	d101      	bne.n	8004eae <__swbuf_r+0x7a>
 8004eaa:	68ac      	ldr	r4, [r5, #8]
 8004eac:	e7cf      	b.n	8004e4e <__swbuf_r+0x1a>
 8004eae:	4b09      	ldr	r3, [pc, #36]	; (8004ed4 <__swbuf_r+0xa0>)
 8004eb0:	429c      	cmp	r4, r3
 8004eb2:	bf08      	it	eq
 8004eb4:	68ec      	ldreq	r4, [r5, #12]
 8004eb6:	e7ca      	b.n	8004e4e <__swbuf_r+0x1a>
 8004eb8:	4621      	mov	r1, r4
 8004eba:	4628      	mov	r0, r5
 8004ebc:	f000 f81e 	bl	8004efc <__swsetup_r>
 8004ec0:	2800      	cmp	r0, #0
 8004ec2:	d0cb      	beq.n	8004e5c <__swbuf_r+0x28>
 8004ec4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004ec8:	e7ea      	b.n	8004ea0 <__swbuf_r+0x6c>
 8004eca:	bf00      	nop
 8004ecc:	08005680 	.word	0x08005680
 8004ed0:	080056a0 	.word	0x080056a0
 8004ed4:	08005660 	.word	0x08005660

08004ed8 <_write_r>:
 8004ed8:	b538      	push	{r3, r4, r5, lr}
 8004eda:	4d07      	ldr	r5, [pc, #28]	; (8004ef8 <_write_r+0x20>)
 8004edc:	4604      	mov	r4, r0
 8004ede:	4608      	mov	r0, r1
 8004ee0:	4611      	mov	r1, r2
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	602a      	str	r2, [r5, #0]
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	f7fb fe22 	bl	8000b30 <_write>
 8004eec:	1c43      	adds	r3, r0, #1
 8004eee:	d102      	bne.n	8004ef6 <_write_r+0x1e>
 8004ef0:	682b      	ldr	r3, [r5, #0]
 8004ef2:	b103      	cbz	r3, 8004ef6 <_write_r+0x1e>
 8004ef4:	6023      	str	r3, [r4, #0]
 8004ef6:	bd38      	pop	{r3, r4, r5, pc}
 8004ef8:	20000a3c 	.word	0x20000a3c

08004efc <__swsetup_r>:
 8004efc:	4b32      	ldr	r3, [pc, #200]	; (8004fc8 <__swsetup_r+0xcc>)
 8004efe:	b570      	push	{r4, r5, r6, lr}
 8004f00:	681d      	ldr	r5, [r3, #0]
 8004f02:	4606      	mov	r6, r0
 8004f04:	460c      	mov	r4, r1
 8004f06:	b125      	cbz	r5, 8004f12 <__swsetup_r+0x16>
 8004f08:	69ab      	ldr	r3, [r5, #24]
 8004f0a:	b913      	cbnz	r3, 8004f12 <__swsetup_r+0x16>
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	f7ff fb1b 	bl	8004548 <__sinit>
 8004f12:	4b2e      	ldr	r3, [pc, #184]	; (8004fcc <__swsetup_r+0xd0>)
 8004f14:	429c      	cmp	r4, r3
 8004f16:	d10f      	bne.n	8004f38 <__swsetup_r+0x3c>
 8004f18:	686c      	ldr	r4, [r5, #4]
 8004f1a:	89a3      	ldrh	r3, [r4, #12]
 8004f1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f20:	0719      	lsls	r1, r3, #28
 8004f22:	d42c      	bmi.n	8004f7e <__swsetup_r+0x82>
 8004f24:	06dd      	lsls	r5, r3, #27
 8004f26:	d411      	bmi.n	8004f4c <__swsetup_r+0x50>
 8004f28:	2309      	movs	r3, #9
 8004f2a:	6033      	str	r3, [r6, #0]
 8004f2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004f30:	81a3      	strh	r3, [r4, #12]
 8004f32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f36:	e03e      	b.n	8004fb6 <__swsetup_r+0xba>
 8004f38:	4b25      	ldr	r3, [pc, #148]	; (8004fd0 <__swsetup_r+0xd4>)
 8004f3a:	429c      	cmp	r4, r3
 8004f3c:	d101      	bne.n	8004f42 <__swsetup_r+0x46>
 8004f3e:	68ac      	ldr	r4, [r5, #8]
 8004f40:	e7eb      	b.n	8004f1a <__swsetup_r+0x1e>
 8004f42:	4b24      	ldr	r3, [pc, #144]	; (8004fd4 <__swsetup_r+0xd8>)
 8004f44:	429c      	cmp	r4, r3
 8004f46:	bf08      	it	eq
 8004f48:	68ec      	ldreq	r4, [r5, #12]
 8004f4a:	e7e6      	b.n	8004f1a <__swsetup_r+0x1e>
 8004f4c:	0758      	lsls	r0, r3, #29
 8004f4e:	d512      	bpl.n	8004f76 <__swsetup_r+0x7a>
 8004f50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f52:	b141      	cbz	r1, 8004f66 <__swsetup_r+0x6a>
 8004f54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f58:	4299      	cmp	r1, r3
 8004f5a:	d002      	beq.n	8004f62 <__swsetup_r+0x66>
 8004f5c:	4630      	mov	r0, r6
 8004f5e:	f000 f991 	bl	8005284 <_free_r>
 8004f62:	2300      	movs	r3, #0
 8004f64:	6363      	str	r3, [r4, #52]	; 0x34
 8004f66:	89a3      	ldrh	r3, [r4, #12]
 8004f68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f6c:	81a3      	strh	r3, [r4, #12]
 8004f6e:	2300      	movs	r3, #0
 8004f70:	6063      	str	r3, [r4, #4]
 8004f72:	6923      	ldr	r3, [r4, #16]
 8004f74:	6023      	str	r3, [r4, #0]
 8004f76:	89a3      	ldrh	r3, [r4, #12]
 8004f78:	f043 0308 	orr.w	r3, r3, #8
 8004f7c:	81a3      	strh	r3, [r4, #12]
 8004f7e:	6923      	ldr	r3, [r4, #16]
 8004f80:	b94b      	cbnz	r3, 8004f96 <__swsetup_r+0x9a>
 8004f82:	89a3      	ldrh	r3, [r4, #12]
 8004f84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f8c:	d003      	beq.n	8004f96 <__swsetup_r+0x9a>
 8004f8e:	4621      	mov	r1, r4
 8004f90:	4630      	mov	r0, r6
 8004f92:	f000 f92b 	bl	80051ec <__smakebuf_r>
 8004f96:	89a0      	ldrh	r0, [r4, #12]
 8004f98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f9c:	f010 0301 	ands.w	r3, r0, #1
 8004fa0:	d00a      	beq.n	8004fb8 <__swsetup_r+0xbc>
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	60a3      	str	r3, [r4, #8]
 8004fa6:	6963      	ldr	r3, [r4, #20]
 8004fa8:	425b      	negs	r3, r3
 8004faa:	61a3      	str	r3, [r4, #24]
 8004fac:	6923      	ldr	r3, [r4, #16]
 8004fae:	b943      	cbnz	r3, 8004fc2 <__swsetup_r+0xc6>
 8004fb0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004fb4:	d1ba      	bne.n	8004f2c <__swsetup_r+0x30>
 8004fb6:	bd70      	pop	{r4, r5, r6, pc}
 8004fb8:	0781      	lsls	r1, r0, #30
 8004fba:	bf58      	it	pl
 8004fbc:	6963      	ldrpl	r3, [r4, #20]
 8004fbe:	60a3      	str	r3, [r4, #8]
 8004fc0:	e7f4      	b.n	8004fac <__swsetup_r+0xb0>
 8004fc2:	2000      	movs	r0, #0
 8004fc4:	e7f7      	b.n	8004fb6 <__swsetup_r+0xba>
 8004fc6:	bf00      	nop
 8004fc8:	2000000c 	.word	0x2000000c
 8004fcc:	08005680 	.word	0x08005680
 8004fd0:	080056a0 	.word	0x080056a0
 8004fd4:	08005660 	.word	0x08005660

08004fd8 <_close_r>:
 8004fd8:	b538      	push	{r3, r4, r5, lr}
 8004fda:	4d06      	ldr	r5, [pc, #24]	; (8004ff4 <_close_r+0x1c>)
 8004fdc:	2300      	movs	r3, #0
 8004fde:	4604      	mov	r4, r0
 8004fe0:	4608      	mov	r0, r1
 8004fe2:	602b      	str	r3, [r5, #0]
 8004fe4:	f7fb ff4d 	bl	8000e82 <_close>
 8004fe8:	1c43      	adds	r3, r0, #1
 8004fea:	d102      	bne.n	8004ff2 <_close_r+0x1a>
 8004fec:	682b      	ldr	r3, [r5, #0]
 8004fee:	b103      	cbz	r3, 8004ff2 <_close_r+0x1a>
 8004ff0:	6023      	str	r3, [r4, #0]
 8004ff2:	bd38      	pop	{r3, r4, r5, pc}
 8004ff4:	20000a3c 	.word	0x20000a3c

08004ff8 <__sflush_r>:
 8004ff8:	898a      	ldrh	r2, [r1, #12]
 8004ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ffe:	4605      	mov	r5, r0
 8005000:	0710      	lsls	r0, r2, #28
 8005002:	460c      	mov	r4, r1
 8005004:	d458      	bmi.n	80050b8 <__sflush_r+0xc0>
 8005006:	684b      	ldr	r3, [r1, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	dc05      	bgt.n	8005018 <__sflush_r+0x20>
 800500c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800500e:	2b00      	cmp	r3, #0
 8005010:	dc02      	bgt.n	8005018 <__sflush_r+0x20>
 8005012:	2000      	movs	r0, #0
 8005014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005018:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800501a:	2e00      	cmp	r6, #0
 800501c:	d0f9      	beq.n	8005012 <__sflush_r+0x1a>
 800501e:	2300      	movs	r3, #0
 8005020:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005024:	682f      	ldr	r7, [r5, #0]
 8005026:	602b      	str	r3, [r5, #0]
 8005028:	d032      	beq.n	8005090 <__sflush_r+0x98>
 800502a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800502c:	89a3      	ldrh	r3, [r4, #12]
 800502e:	075a      	lsls	r2, r3, #29
 8005030:	d505      	bpl.n	800503e <__sflush_r+0x46>
 8005032:	6863      	ldr	r3, [r4, #4]
 8005034:	1ac0      	subs	r0, r0, r3
 8005036:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005038:	b10b      	cbz	r3, 800503e <__sflush_r+0x46>
 800503a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800503c:	1ac0      	subs	r0, r0, r3
 800503e:	2300      	movs	r3, #0
 8005040:	4602      	mov	r2, r0
 8005042:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005044:	6a21      	ldr	r1, [r4, #32]
 8005046:	4628      	mov	r0, r5
 8005048:	47b0      	blx	r6
 800504a:	1c43      	adds	r3, r0, #1
 800504c:	89a3      	ldrh	r3, [r4, #12]
 800504e:	d106      	bne.n	800505e <__sflush_r+0x66>
 8005050:	6829      	ldr	r1, [r5, #0]
 8005052:	291d      	cmp	r1, #29
 8005054:	d82c      	bhi.n	80050b0 <__sflush_r+0xb8>
 8005056:	4a2a      	ldr	r2, [pc, #168]	; (8005100 <__sflush_r+0x108>)
 8005058:	40ca      	lsrs	r2, r1
 800505a:	07d6      	lsls	r6, r2, #31
 800505c:	d528      	bpl.n	80050b0 <__sflush_r+0xb8>
 800505e:	2200      	movs	r2, #0
 8005060:	6062      	str	r2, [r4, #4]
 8005062:	04d9      	lsls	r1, r3, #19
 8005064:	6922      	ldr	r2, [r4, #16]
 8005066:	6022      	str	r2, [r4, #0]
 8005068:	d504      	bpl.n	8005074 <__sflush_r+0x7c>
 800506a:	1c42      	adds	r2, r0, #1
 800506c:	d101      	bne.n	8005072 <__sflush_r+0x7a>
 800506e:	682b      	ldr	r3, [r5, #0]
 8005070:	b903      	cbnz	r3, 8005074 <__sflush_r+0x7c>
 8005072:	6560      	str	r0, [r4, #84]	; 0x54
 8005074:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005076:	602f      	str	r7, [r5, #0]
 8005078:	2900      	cmp	r1, #0
 800507a:	d0ca      	beq.n	8005012 <__sflush_r+0x1a>
 800507c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005080:	4299      	cmp	r1, r3
 8005082:	d002      	beq.n	800508a <__sflush_r+0x92>
 8005084:	4628      	mov	r0, r5
 8005086:	f000 f8fd 	bl	8005284 <_free_r>
 800508a:	2000      	movs	r0, #0
 800508c:	6360      	str	r0, [r4, #52]	; 0x34
 800508e:	e7c1      	b.n	8005014 <__sflush_r+0x1c>
 8005090:	6a21      	ldr	r1, [r4, #32]
 8005092:	2301      	movs	r3, #1
 8005094:	4628      	mov	r0, r5
 8005096:	47b0      	blx	r6
 8005098:	1c41      	adds	r1, r0, #1
 800509a:	d1c7      	bne.n	800502c <__sflush_r+0x34>
 800509c:	682b      	ldr	r3, [r5, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d0c4      	beq.n	800502c <__sflush_r+0x34>
 80050a2:	2b1d      	cmp	r3, #29
 80050a4:	d001      	beq.n	80050aa <__sflush_r+0xb2>
 80050a6:	2b16      	cmp	r3, #22
 80050a8:	d101      	bne.n	80050ae <__sflush_r+0xb6>
 80050aa:	602f      	str	r7, [r5, #0]
 80050ac:	e7b1      	b.n	8005012 <__sflush_r+0x1a>
 80050ae:	89a3      	ldrh	r3, [r4, #12]
 80050b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050b4:	81a3      	strh	r3, [r4, #12]
 80050b6:	e7ad      	b.n	8005014 <__sflush_r+0x1c>
 80050b8:	690f      	ldr	r7, [r1, #16]
 80050ba:	2f00      	cmp	r7, #0
 80050bc:	d0a9      	beq.n	8005012 <__sflush_r+0x1a>
 80050be:	0793      	lsls	r3, r2, #30
 80050c0:	680e      	ldr	r6, [r1, #0]
 80050c2:	bf08      	it	eq
 80050c4:	694b      	ldreq	r3, [r1, #20]
 80050c6:	600f      	str	r7, [r1, #0]
 80050c8:	bf18      	it	ne
 80050ca:	2300      	movne	r3, #0
 80050cc:	eba6 0807 	sub.w	r8, r6, r7
 80050d0:	608b      	str	r3, [r1, #8]
 80050d2:	f1b8 0f00 	cmp.w	r8, #0
 80050d6:	dd9c      	ble.n	8005012 <__sflush_r+0x1a>
 80050d8:	6a21      	ldr	r1, [r4, #32]
 80050da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80050dc:	4643      	mov	r3, r8
 80050de:	463a      	mov	r2, r7
 80050e0:	4628      	mov	r0, r5
 80050e2:	47b0      	blx	r6
 80050e4:	2800      	cmp	r0, #0
 80050e6:	dc06      	bgt.n	80050f6 <__sflush_r+0xfe>
 80050e8:	89a3      	ldrh	r3, [r4, #12]
 80050ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050ee:	81a3      	strh	r3, [r4, #12]
 80050f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050f4:	e78e      	b.n	8005014 <__sflush_r+0x1c>
 80050f6:	4407      	add	r7, r0
 80050f8:	eba8 0800 	sub.w	r8, r8, r0
 80050fc:	e7e9      	b.n	80050d2 <__sflush_r+0xda>
 80050fe:	bf00      	nop
 8005100:	20400001 	.word	0x20400001

08005104 <_fflush_r>:
 8005104:	b538      	push	{r3, r4, r5, lr}
 8005106:	690b      	ldr	r3, [r1, #16]
 8005108:	4605      	mov	r5, r0
 800510a:	460c      	mov	r4, r1
 800510c:	b913      	cbnz	r3, 8005114 <_fflush_r+0x10>
 800510e:	2500      	movs	r5, #0
 8005110:	4628      	mov	r0, r5
 8005112:	bd38      	pop	{r3, r4, r5, pc}
 8005114:	b118      	cbz	r0, 800511e <_fflush_r+0x1a>
 8005116:	6983      	ldr	r3, [r0, #24]
 8005118:	b90b      	cbnz	r3, 800511e <_fflush_r+0x1a>
 800511a:	f7ff fa15 	bl	8004548 <__sinit>
 800511e:	4b14      	ldr	r3, [pc, #80]	; (8005170 <_fflush_r+0x6c>)
 8005120:	429c      	cmp	r4, r3
 8005122:	d11b      	bne.n	800515c <_fflush_r+0x58>
 8005124:	686c      	ldr	r4, [r5, #4]
 8005126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d0ef      	beq.n	800510e <_fflush_r+0xa>
 800512e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005130:	07d0      	lsls	r0, r2, #31
 8005132:	d404      	bmi.n	800513e <_fflush_r+0x3a>
 8005134:	0599      	lsls	r1, r3, #22
 8005136:	d402      	bmi.n	800513e <_fflush_r+0x3a>
 8005138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800513a:	f7ff faa3 	bl	8004684 <__retarget_lock_acquire_recursive>
 800513e:	4628      	mov	r0, r5
 8005140:	4621      	mov	r1, r4
 8005142:	f7ff ff59 	bl	8004ff8 <__sflush_r>
 8005146:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005148:	07da      	lsls	r2, r3, #31
 800514a:	4605      	mov	r5, r0
 800514c:	d4e0      	bmi.n	8005110 <_fflush_r+0xc>
 800514e:	89a3      	ldrh	r3, [r4, #12]
 8005150:	059b      	lsls	r3, r3, #22
 8005152:	d4dd      	bmi.n	8005110 <_fflush_r+0xc>
 8005154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005156:	f7ff fa96 	bl	8004686 <__retarget_lock_release_recursive>
 800515a:	e7d9      	b.n	8005110 <_fflush_r+0xc>
 800515c:	4b05      	ldr	r3, [pc, #20]	; (8005174 <_fflush_r+0x70>)
 800515e:	429c      	cmp	r4, r3
 8005160:	d101      	bne.n	8005166 <_fflush_r+0x62>
 8005162:	68ac      	ldr	r4, [r5, #8]
 8005164:	e7df      	b.n	8005126 <_fflush_r+0x22>
 8005166:	4b04      	ldr	r3, [pc, #16]	; (8005178 <_fflush_r+0x74>)
 8005168:	429c      	cmp	r4, r3
 800516a:	bf08      	it	eq
 800516c:	68ec      	ldreq	r4, [r5, #12]
 800516e:	e7da      	b.n	8005126 <_fflush_r+0x22>
 8005170:	08005680 	.word	0x08005680
 8005174:	080056a0 	.word	0x080056a0
 8005178:	08005660 	.word	0x08005660

0800517c <_lseek_r>:
 800517c:	b538      	push	{r3, r4, r5, lr}
 800517e:	4d07      	ldr	r5, [pc, #28]	; (800519c <_lseek_r+0x20>)
 8005180:	4604      	mov	r4, r0
 8005182:	4608      	mov	r0, r1
 8005184:	4611      	mov	r1, r2
 8005186:	2200      	movs	r2, #0
 8005188:	602a      	str	r2, [r5, #0]
 800518a:	461a      	mov	r2, r3
 800518c:	f7fb fea0 	bl	8000ed0 <_lseek>
 8005190:	1c43      	adds	r3, r0, #1
 8005192:	d102      	bne.n	800519a <_lseek_r+0x1e>
 8005194:	682b      	ldr	r3, [r5, #0]
 8005196:	b103      	cbz	r3, 800519a <_lseek_r+0x1e>
 8005198:	6023      	str	r3, [r4, #0]
 800519a:	bd38      	pop	{r3, r4, r5, pc}
 800519c:	20000a3c 	.word	0x20000a3c

080051a0 <__swhatbuf_r>:
 80051a0:	b570      	push	{r4, r5, r6, lr}
 80051a2:	460e      	mov	r6, r1
 80051a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051a8:	2900      	cmp	r1, #0
 80051aa:	b096      	sub	sp, #88	; 0x58
 80051ac:	4614      	mov	r4, r2
 80051ae:	461d      	mov	r5, r3
 80051b0:	da08      	bge.n	80051c4 <__swhatbuf_r+0x24>
 80051b2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	602a      	str	r2, [r5, #0]
 80051ba:	061a      	lsls	r2, r3, #24
 80051bc:	d410      	bmi.n	80051e0 <__swhatbuf_r+0x40>
 80051be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051c2:	e00e      	b.n	80051e2 <__swhatbuf_r+0x42>
 80051c4:	466a      	mov	r2, sp
 80051c6:	f000 f8bb 	bl	8005340 <_fstat_r>
 80051ca:	2800      	cmp	r0, #0
 80051cc:	dbf1      	blt.n	80051b2 <__swhatbuf_r+0x12>
 80051ce:	9a01      	ldr	r2, [sp, #4]
 80051d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80051d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80051d8:	425a      	negs	r2, r3
 80051da:	415a      	adcs	r2, r3
 80051dc:	602a      	str	r2, [r5, #0]
 80051de:	e7ee      	b.n	80051be <__swhatbuf_r+0x1e>
 80051e0:	2340      	movs	r3, #64	; 0x40
 80051e2:	2000      	movs	r0, #0
 80051e4:	6023      	str	r3, [r4, #0]
 80051e6:	b016      	add	sp, #88	; 0x58
 80051e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080051ec <__smakebuf_r>:
 80051ec:	898b      	ldrh	r3, [r1, #12]
 80051ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80051f0:	079d      	lsls	r5, r3, #30
 80051f2:	4606      	mov	r6, r0
 80051f4:	460c      	mov	r4, r1
 80051f6:	d507      	bpl.n	8005208 <__smakebuf_r+0x1c>
 80051f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80051fc:	6023      	str	r3, [r4, #0]
 80051fe:	6123      	str	r3, [r4, #16]
 8005200:	2301      	movs	r3, #1
 8005202:	6163      	str	r3, [r4, #20]
 8005204:	b002      	add	sp, #8
 8005206:	bd70      	pop	{r4, r5, r6, pc}
 8005208:	ab01      	add	r3, sp, #4
 800520a:	466a      	mov	r2, sp
 800520c:	f7ff ffc8 	bl	80051a0 <__swhatbuf_r>
 8005210:	9900      	ldr	r1, [sp, #0]
 8005212:	4605      	mov	r5, r0
 8005214:	4630      	mov	r0, r6
 8005216:	f7ff fa57 	bl	80046c8 <_malloc_r>
 800521a:	b948      	cbnz	r0, 8005230 <__smakebuf_r+0x44>
 800521c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005220:	059a      	lsls	r2, r3, #22
 8005222:	d4ef      	bmi.n	8005204 <__smakebuf_r+0x18>
 8005224:	f023 0303 	bic.w	r3, r3, #3
 8005228:	f043 0302 	orr.w	r3, r3, #2
 800522c:	81a3      	strh	r3, [r4, #12]
 800522e:	e7e3      	b.n	80051f8 <__smakebuf_r+0xc>
 8005230:	4b0d      	ldr	r3, [pc, #52]	; (8005268 <__smakebuf_r+0x7c>)
 8005232:	62b3      	str	r3, [r6, #40]	; 0x28
 8005234:	89a3      	ldrh	r3, [r4, #12]
 8005236:	6020      	str	r0, [r4, #0]
 8005238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800523c:	81a3      	strh	r3, [r4, #12]
 800523e:	9b00      	ldr	r3, [sp, #0]
 8005240:	6163      	str	r3, [r4, #20]
 8005242:	9b01      	ldr	r3, [sp, #4]
 8005244:	6120      	str	r0, [r4, #16]
 8005246:	b15b      	cbz	r3, 8005260 <__smakebuf_r+0x74>
 8005248:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800524c:	4630      	mov	r0, r6
 800524e:	f000 f889 	bl	8005364 <_isatty_r>
 8005252:	b128      	cbz	r0, 8005260 <__smakebuf_r+0x74>
 8005254:	89a3      	ldrh	r3, [r4, #12]
 8005256:	f023 0303 	bic.w	r3, r3, #3
 800525a:	f043 0301 	orr.w	r3, r3, #1
 800525e:	81a3      	strh	r3, [r4, #12]
 8005260:	89a0      	ldrh	r0, [r4, #12]
 8005262:	4305      	orrs	r5, r0
 8005264:	81a5      	strh	r5, [r4, #12]
 8005266:	e7cd      	b.n	8005204 <__smakebuf_r+0x18>
 8005268:	080044e1 	.word	0x080044e1

0800526c <__malloc_lock>:
 800526c:	4801      	ldr	r0, [pc, #4]	; (8005274 <__malloc_lock+0x8>)
 800526e:	f7ff ba09 	b.w	8004684 <__retarget_lock_acquire_recursive>
 8005272:	bf00      	nop
 8005274:	20000a30 	.word	0x20000a30

08005278 <__malloc_unlock>:
 8005278:	4801      	ldr	r0, [pc, #4]	; (8005280 <__malloc_unlock+0x8>)
 800527a:	f7ff ba04 	b.w	8004686 <__retarget_lock_release_recursive>
 800527e:	bf00      	nop
 8005280:	20000a30 	.word	0x20000a30

08005284 <_free_r>:
 8005284:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005286:	2900      	cmp	r1, #0
 8005288:	d044      	beq.n	8005314 <_free_r+0x90>
 800528a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800528e:	9001      	str	r0, [sp, #4]
 8005290:	2b00      	cmp	r3, #0
 8005292:	f1a1 0404 	sub.w	r4, r1, #4
 8005296:	bfb8      	it	lt
 8005298:	18e4      	addlt	r4, r4, r3
 800529a:	f7ff ffe7 	bl	800526c <__malloc_lock>
 800529e:	4a1e      	ldr	r2, [pc, #120]	; (8005318 <_free_r+0x94>)
 80052a0:	9801      	ldr	r0, [sp, #4]
 80052a2:	6813      	ldr	r3, [r2, #0]
 80052a4:	b933      	cbnz	r3, 80052b4 <_free_r+0x30>
 80052a6:	6063      	str	r3, [r4, #4]
 80052a8:	6014      	str	r4, [r2, #0]
 80052aa:	b003      	add	sp, #12
 80052ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052b0:	f7ff bfe2 	b.w	8005278 <__malloc_unlock>
 80052b4:	42a3      	cmp	r3, r4
 80052b6:	d908      	bls.n	80052ca <_free_r+0x46>
 80052b8:	6825      	ldr	r5, [r4, #0]
 80052ba:	1961      	adds	r1, r4, r5
 80052bc:	428b      	cmp	r3, r1
 80052be:	bf01      	itttt	eq
 80052c0:	6819      	ldreq	r1, [r3, #0]
 80052c2:	685b      	ldreq	r3, [r3, #4]
 80052c4:	1949      	addeq	r1, r1, r5
 80052c6:	6021      	streq	r1, [r4, #0]
 80052c8:	e7ed      	b.n	80052a6 <_free_r+0x22>
 80052ca:	461a      	mov	r2, r3
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	b10b      	cbz	r3, 80052d4 <_free_r+0x50>
 80052d0:	42a3      	cmp	r3, r4
 80052d2:	d9fa      	bls.n	80052ca <_free_r+0x46>
 80052d4:	6811      	ldr	r1, [r2, #0]
 80052d6:	1855      	adds	r5, r2, r1
 80052d8:	42a5      	cmp	r5, r4
 80052da:	d10b      	bne.n	80052f4 <_free_r+0x70>
 80052dc:	6824      	ldr	r4, [r4, #0]
 80052de:	4421      	add	r1, r4
 80052e0:	1854      	adds	r4, r2, r1
 80052e2:	42a3      	cmp	r3, r4
 80052e4:	6011      	str	r1, [r2, #0]
 80052e6:	d1e0      	bne.n	80052aa <_free_r+0x26>
 80052e8:	681c      	ldr	r4, [r3, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	6053      	str	r3, [r2, #4]
 80052ee:	4421      	add	r1, r4
 80052f0:	6011      	str	r1, [r2, #0]
 80052f2:	e7da      	b.n	80052aa <_free_r+0x26>
 80052f4:	d902      	bls.n	80052fc <_free_r+0x78>
 80052f6:	230c      	movs	r3, #12
 80052f8:	6003      	str	r3, [r0, #0]
 80052fa:	e7d6      	b.n	80052aa <_free_r+0x26>
 80052fc:	6825      	ldr	r5, [r4, #0]
 80052fe:	1961      	adds	r1, r4, r5
 8005300:	428b      	cmp	r3, r1
 8005302:	bf04      	itt	eq
 8005304:	6819      	ldreq	r1, [r3, #0]
 8005306:	685b      	ldreq	r3, [r3, #4]
 8005308:	6063      	str	r3, [r4, #4]
 800530a:	bf04      	itt	eq
 800530c:	1949      	addeq	r1, r1, r5
 800530e:	6021      	streq	r1, [r4, #0]
 8005310:	6054      	str	r4, [r2, #4]
 8005312:	e7ca      	b.n	80052aa <_free_r+0x26>
 8005314:	b003      	add	sp, #12
 8005316:	bd30      	pop	{r4, r5, pc}
 8005318:	20000a34 	.word	0x20000a34

0800531c <_read_r>:
 800531c:	b538      	push	{r3, r4, r5, lr}
 800531e:	4d07      	ldr	r5, [pc, #28]	; (800533c <_read_r+0x20>)
 8005320:	4604      	mov	r4, r0
 8005322:	4608      	mov	r0, r1
 8005324:	4611      	mov	r1, r2
 8005326:	2200      	movs	r2, #0
 8005328:	602a      	str	r2, [r5, #0]
 800532a:	461a      	mov	r2, r3
 800532c:	f7fb fd8c 	bl	8000e48 <_read>
 8005330:	1c43      	adds	r3, r0, #1
 8005332:	d102      	bne.n	800533a <_read_r+0x1e>
 8005334:	682b      	ldr	r3, [r5, #0]
 8005336:	b103      	cbz	r3, 800533a <_read_r+0x1e>
 8005338:	6023      	str	r3, [r4, #0]
 800533a:	bd38      	pop	{r3, r4, r5, pc}
 800533c:	20000a3c 	.word	0x20000a3c

08005340 <_fstat_r>:
 8005340:	b538      	push	{r3, r4, r5, lr}
 8005342:	4d07      	ldr	r5, [pc, #28]	; (8005360 <_fstat_r+0x20>)
 8005344:	2300      	movs	r3, #0
 8005346:	4604      	mov	r4, r0
 8005348:	4608      	mov	r0, r1
 800534a:	4611      	mov	r1, r2
 800534c:	602b      	str	r3, [r5, #0]
 800534e:	f7fb fda4 	bl	8000e9a <_fstat>
 8005352:	1c43      	adds	r3, r0, #1
 8005354:	d102      	bne.n	800535c <_fstat_r+0x1c>
 8005356:	682b      	ldr	r3, [r5, #0]
 8005358:	b103      	cbz	r3, 800535c <_fstat_r+0x1c>
 800535a:	6023      	str	r3, [r4, #0]
 800535c:	bd38      	pop	{r3, r4, r5, pc}
 800535e:	bf00      	nop
 8005360:	20000a3c 	.word	0x20000a3c

08005364 <_isatty_r>:
 8005364:	b538      	push	{r3, r4, r5, lr}
 8005366:	4d06      	ldr	r5, [pc, #24]	; (8005380 <_isatty_r+0x1c>)
 8005368:	2300      	movs	r3, #0
 800536a:	4604      	mov	r4, r0
 800536c:	4608      	mov	r0, r1
 800536e:	602b      	str	r3, [r5, #0]
 8005370:	f7fb fda3 	bl	8000eba <_isatty>
 8005374:	1c43      	adds	r3, r0, #1
 8005376:	d102      	bne.n	800537e <_isatty_r+0x1a>
 8005378:	682b      	ldr	r3, [r5, #0]
 800537a:	b103      	cbz	r3, 800537e <_isatty_r+0x1a>
 800537c:	6023      	str	r3, [r4, #0]
 800537e:	bd38      	pop	{r3, r4, r5, pc}
 8005380:	20000a3c 	.word	0x20000a3c

08005384 <_init>:
 8005384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005386:	bf00      	nop
 8005388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800538a:	bc08      	pop	{r3}
 800538c:	469e      	mov	lr, r3
 800538e:	4770      	bx	lr

08005390 <_fini>:
 8005390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005392:	bf00      	nop
 8005394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005396:	bc08      	pop	{r3}
 8005398:	469e      	mov	lr, r3
 800539a:	4770      	bx	lr
