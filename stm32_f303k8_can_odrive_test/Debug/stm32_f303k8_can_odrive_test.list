
stm32_f303k8_can_odrive_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08006548  08006548  00016548  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067e8  080067e8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080067e8  080067e8  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080067e8  080067e8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067e8  080067e8  000167e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067ec  080067ec  000167ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080067f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  200001e0  080069d0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  080069d0  00020348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010048  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001fcf  00000000  00000000  00030258  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000840  00000000  00000000  00032228  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000768  00000000  00000000  00032a68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000182cd  00000000  00000000  000331d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008a33  00000000  00000000  0004b49d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00081c2f  00000000  00000000  00053ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d5aff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002aa0  00000000  00000000  000d5b7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006530 	.word	0x08006530

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08006530 	.word	0x08006530

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <HAL_Init+0x28>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a07      	ldr	r2, [pc, #28]	; (8000bd0 <HAL_Init+0x28>)
 8000bb2:	f043 0310 	orr.w	r3, r3, #16
 8000bb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb8:	2003      	movs	r0, #3
 8000bba:	f000 ff8f 	bl	8001adc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f000 f808 	bl	8000bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc4:	f003 fa84 	bl	80040d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40022000 	.word	0x40022000

08000bd4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <HAL_InitTick+0x54>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <HAL_InitTick+0x58>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	4619      	mov	r1, r3
 8000be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 ffa7 	bl	8001b46 <HAL_SYSTICK_Config>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e00e      	b.n	8000c20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b0f      	cmp	r3, #15
 8000c06:	d80a      	bhi.n	8000c1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	f000 ff6f 	bl	8001af2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c14:	4a06      	ldr	r2, [pc, #24]	; (8000c30 <HAL_InitTick+0x5c>)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e000      	b.n	8000c20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	2000000c 	.word	0x2000000c
 8000c2c:	20000004 	.word	0x20000004
 8000c30:	20000000 	.word	0x20000000

08000c34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_IncTick+0x20>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_IncTick+0x24>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <HAL_IncTick+0x24>)
 8000c46:	6013      	str	r3, [r2, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	20000004 	.word	0x20000004
 8000c58:	2000020c 	.word	0x2000020c

08000c5c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c60:	4b03      	ldr	r3, [pc, #12]	; (8000c70 <HAL_GetTick+0x14>)
 8000c62:	681b      	ldr	r3, [r3, #0]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	2000020c 	.word	0x2000020c

08000c74 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c7c:	f7ff ffee 	bl	8000c5c <HAL_GetTick>
 8000c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c8c:	d005      	beq.n	8000c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <HAL_Delay+0x40>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	461a      	mov	r2, r3
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4413      	add	r3, r2
 8000c98:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c9a:	bf00      	nop
 8000c9c:	f7ff ffde 	bl	8000c5c <HAL_GetTick>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d8f7      	bhi.n	8000c9c <HAL_Delay+0x28>
  {
  }
}
 8000cac:	bf00      	nop
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000004 	.word	0x20000004

08000cb8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d101      	bne.n	8000cca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e0ed      	b.n	8000ea6 <HAL_CAN_Init+0x1ee>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d102      	bne.n	8000cdc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f003 fa1e 	bl	8004118 <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f022 0202 	bic.w	r2, r2, #2
 8000cea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cec:	f7ff ffb6 	bl	8000c5c <HAL_GetTick>
 8000cf0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cf2:	e012      	b.n	8000d1a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cf4:	f7ff ffb2 	bl	8000c5c <HAL_GetTick>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	2b0a      	cmp	r3, #10
 8000d00:	d90b      	bls.n	8000d1a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2205      	movs	r2, #5
 8000d12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e0c5      	b.n	8000ea6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 0302 	and.w	r3, r3, #2
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d1e5      	bne.n	8000cf4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f042 0201 	orr.w	r2, r2, #1
 8000d36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d38:	f7ff ff90 	bl	8000c5c <HAL_GetTick>
 8000d3c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d3e:	e012      	b.n	8000d66 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d40:	f7ff ff8c 	bl	8000c5c <HAL_GetTick>
 8000d44:	4602      	mov	r2, r0
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	2b0a      	cmp	r3, #10
 8000d4c:	d90b      	bls.n	8000d66 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2205      	movs	r2, #5
 8000d5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e09f      	b.n	8000ea6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d0e5      	beq.n	8000d40 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	7e1b      	ldrb	r3, [r3, #24]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d108      	bne.n	8000d8e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	e007      	b.n	8000d9e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	7e5b      	ldrb	r3, [r3, #25]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d108      	bne.n	8000db8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	e007      	b.n	8000dc8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000dc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	7e9b      	ldrb	r3, [r3, #26]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d108      	bne.n	8000de2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f042 0220 	orr.w	r2, r2, #32
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	e007      	b.n	8000df2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f022 0220 	bic.w	r2, r2, #32
 8000df0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	7edb      	ldrb	r3, [r3, #27]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d108      	bne.n	8000e0c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f022 0210 	bic.w	r2, r2, #16
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	e007      	b.n	8000e1c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f042 0210 	orr.w	r2, r2, #16
 8000e1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	7f1b      	ldrb	r3, [r3, #28]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d108      	bne.n	8000e36 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f042 0208 	orr.w	r2, r2, #8
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	e007      	b.n	8000e46 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f022 0208 	bic.w	r2, r2, #8
 8000e44:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	7f5b      	ldrb	r3, [r3, #29]
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d108      	bne.n	8000e60 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f042 0204 	orr.w	r2, r2, #4
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	e007      	b.n	8000e70 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f022 0204 	bic.w	r2, r2, #4
 8000e6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	689a      	ldr	r2, [r3, #8]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	431a      	orrs	r2, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	691b      	ldr	r3, [r3, #16]
 8000e7e:	431a      	orrs	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	695b      	ldr	r3, [r3, #20]
 8000e84:	ea42 0103 	orr.w	r1, r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	1e5a      	subs	r2, r3, #1
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	430a      	orrs	r2, r1
 8000e94:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b087      	sub	sp, #28
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ec4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000ec6:	7cfb      	ldrb	r3, [r7, #19]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d003      	beq.n	8000ed4 <HAL_CAN_ConfigFilter+0x26>
 8000ecc:	7cfb      	ldrb	r3, [r7, #19]
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	f040 80aa 	bne.w	8001028 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000eda:	f043 0201 	orr.w	r2, r3, #1
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	695b      	ldr	r3, [r3, #20]
 8000ee8:	f003 031f 	and.w	r3, r3, #31
 8000eec:	2201      	movs	r2, #1
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	43db      	mvns	r3, r3
 8000efe:	401a      	ands	r2, r3
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d123      	bne.n	8000f56 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	401a      	ands	r2, r3
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f2c:	683a      	ldr	r2, [r7, #0]
 8000f2e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f30:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	3248      	adds	r2, #72	; 0x48
 8000f36:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f4a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f4c:	6979      	ldr	r1, [r7, #20]
 8000f4e:	3348      	adds	r3, #72	; 0x48
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	440b      	add	r3, r1
 8000f54:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d122      	bne.n	8000fa4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	431a      	orrs	r2, r3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f7a:	683a      	ldr	r2, [r7, #0]
 8000f7c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f7e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	3248      	adds	r2, #72	; 0x48
 8000f84:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f98:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f9a:	6979      	ldr	r1, [r7, #20]
 8000f9c:	3348      	adds	r3, #72	; 0x48
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	440b      	add	r3, r1
 8000fa2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d109      	bne.n	8000fc0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	401a      	ands	r2, r3
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000fbe:	e007      	b.n	8000fd0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	431a      	orrs	r2, r3
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	691b      	ldr	r3, [r3, #16]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d109      	bne.n	8000fec <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000fea:	e007      	b.n	8000ffc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	431a      	orrs	r2, r3
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	6a1b      	ldr	r3, [r3, #32]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d107      	bne.n	8001014 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	431a      	orrs	r2, r3
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800101a:	f023 0201 	bic.w	r2, r3, #1
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001024:	2300      	movs	r3, #0
 8001026:	e006      	b.n	8001036 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
  }
}
 8001036:	4618      	mov	r0, r3
 8001038:	371c      	adds	r7, #28
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b084      	sub	sp, #16
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b01      	cmp	r3, #1
 8001054:	d12e      	bne.n	80010b4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2202      	movs	r2, #2
 800105a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f022 0201 	bic.w	r2, r2, #1
 800106c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800106e:	f7ff fdf5 	bl	8000c5c <HAL_GetTick>
 8001072:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001074:	e012      	b.n	800109c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001076:	f7ff fdf1 	bl	8000c5c <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	2b0a      	cmp	r3, #10
 8001082:	d90b      	bls.n	800109c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001088:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2205      	movs	r2, #5
 8001094:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e012      	b.n	80010c2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d1e5      	bne.n	8001076 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80010b0:	2300      	movs	r3, #0
 80010b2:	e006      	b.n	80010c2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
  }
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80010ca:	b480      	push	{r7}
 80010cc:	b089      	sub	sp, #36	; 0x24
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	60f8      	str	r0, [r7, #12]
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
 80010d6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010de:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80010e8:	7ffb      	ldrb	r3, [r7, #31]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d003      	beq.n	80010f6 <HAL_CAN_AddTxMessage+0x2c>
 80010ee:	7ffb      	ldrb	r3, [r7, #31]
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	f040 80b8 	bne.w	8001266 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d10a      	bne.n	8001116 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001106:	2b00      	cmp	r3, #0
 8001108:	d105      	bne.n	8001116 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001110:	2b00      	cmp	r3, #0
 8001112:	f000 80a0 	beq.w	8001256 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	0e1b      	lsrs	r3, r3, #24
 800111a:	f003 0303 	and.w	r3, r3, #3
 800111e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	2b02      	cmp	r3, #2
 8001124:	d907      	bls.n	8001136 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e09e      	b.n	8001274 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001136:	2201      	movs	r2, #1
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	409a      	lsls	r2, r3
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d10d      	bne.n	8001164 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001152:	68f9      	ldr	r1, [r7, #12]
 8001154:	6809      	ldr	r1, [r1, #0]
 8001156:	431a      	orrs	r2, r3
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	3318      	adds	r3, #24
 800115c:	011b      	lsls	r3, r3, #4
 800115e:	440b      	add	r3, r1
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	e00f      	b.n	8001184 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800116e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001174:	68f9      	ldr	r1, [r7, #12]
 8001176:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001178:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	3318      	adds	r3, #24
 800117e:	011b      	lsls	r3, r3, #4
 8001180:	440b      	add	r3, r1
 8001182:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	6819      	ldr	r1, [r3, #0]
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	691a      	ldr	r2, [r3, #16]
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	3318      	adds	r3, #24
 8001190:	011b      	lsls	r3, r3, #4
 8001192:	440b      	add	r3, r1
 8001194:	3304      	adds	r3, #4
 8001196:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	7d1b      	ldrb	r3, [r3, #20]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d111      	bne.n	80011c4 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	3318      	adds	r3, #24
 80011a8:	011b      	lsls	r3, r3, #4
 80011aa:	4413      	add	r3, r2
 80011ac:	3304      	adds	r3, #4
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	6811      	ldr	r1, [r2, #0]
 80011b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	3318      	adds	r3, #24
 80011bc:	011b      	lsls	r3, r3, #4
 80011be:	440b      	add	r3, r1
 80011c0:	3304      	adds	r3, #4
 80011c2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3307      	adds	r3, #7
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	061a      	lsls	r2, r3, #24
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3306      	adds	r3, #6
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	041b      	lsls	r3, r3, #16
 80011d4:	431a      	orrs	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3305      	adds	r3, #5
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	021b      	lsls	r3, r3, #8
 80011de:	4313      	orrs	r3, r2
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	3204      	adds	r2, #4
 80011e4:	7812      	ldrb	r2, [r2, #0]
 80011e6:	4610      	mov	r0, r2
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	6811      	ldr	r1, [r2, #0]
 80011ec:	ea43 0200 	orr.w	r2, r3, r0
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	011b      	lsls	r3, r3, #4
 80011f4:	440b      	add	r3, r1
 80011f6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80011fa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3303      	adds	r3, #3
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	061a      	lsls	r2, r3, #24
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3302      	adds	r3, #2
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	041b      	lsls	r3, r3, #16
 800120c:	431a      	orrs	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3301      	adds	r3, #1
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	4313      	orrs	r3, r2
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	7812      	ldrb	r2, [r2, #0]
 800121c:	4610      	mov	r0, r2
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	6811      	ldr	r1, [r2, #0]
 8001222:	ea43 0200 	orr.w	r2, r3, r0
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	011b      	lsls	r3, r3, #4
 800122a:	440b      	add	r3, r1
 800122c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001230:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	3318      	adds	r3, #24
 800123a:	011b      	lsls	r3, r3, #4
 800123c:	4413      	add	r3, r2
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	68fa      	ldr	r2, [r7, #12]
 8001242:	6811      	ldr	r1, [r2, #0]
 8001244:	f043 0201 	orr.w	r2, r3, #1
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	3318      	adds	r3, #24
 800124c:	011b      	lsls	r3, r3, #4
 800124e:	440b      	add	r3, r1
 8001250:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001252:	2300      	movs	r3, #0
 8001254:	e00e      	b.n	8001274 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e006      	b.n	8001274 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
  }
}
 8001274:	4618      	mov	r0, r3
 8001276:	3724      	adds	r7, #36	; 0x24
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001280:	b480      	push	{r7}
 8001282:	b087      	sub	sp, #28
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
 800128c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001294:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001296:	7dfb      	ldrb	r3, [r7, #23]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d003      	beq.n	80012a4 <HAL_CAN_GetRxMessage+0x24>
 800129c:	7dfb      	ldrb	r3, [r7, #23]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	f040 80f4 	bne.w	800148c <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d10e      	bne.n	80012c8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d116      	bne.n	80012e6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e0e8      	b.n	800149a <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	f003 0303 	and.w	r3, r3, #3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d107      	bne.n	80012e6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e0d9      	b.n	800149a <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	331b      	adds	r3, #27
 80012ee:	011b      	lsls	r3, r3, #4
 80012f0:	4413      	add	r3, r2
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0204 	and.w	r2, r3, #4
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d10c      	bne.n	800131e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	331b      	adds	r3, #27
 800130c:	011b      	lsls	r3, r3, #4
 800130e:	4413      	add	r3, r2
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	0d5b      	lsrs	r3, r3, #21
 8001314:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	e00b      	b.n	8001336 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	331b      	adds	r3, #27
 8001326:	011b      	lsls	r3, r3, #4
 8001328:	4413      	add	r3, r2
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	08db      	lsrs	r3, r3, #3
 800132e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	331b      	adds	r3, #27
 800133e:	011b      	lsls	r3, r3, #4
 8001340:	4413      	add	r3, r2
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	085b      	lsrs	r3, r3, #1
 8001346:	f003 0201 	and.w	r2, r3, #1
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	331b      	adds	r3, #27
 8001356:	011b      	lsls	r3, r3, #4
 8001358:	4413      	add	r3, r2
 800135a:	3304      	adds	r3, #4
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 020f 	and.w	r2, r3, #15
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	331b      	adds	r3, #27
 800136e:	011b      	lsls	r3, r3, #4
 8001370:	4413      	add	r3, r2
 8001372:	3304      	adds	r3, #4
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	0a1b      	lsrs	r3, r3, #8
 8001378:	b2da      	uxtb	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	331b      	adds	r3, #27
 8001386:	011b      	lsls	r3, r3, #4
 8001388:	4413      	add	r3, r2
 800138a:	3304      	adds	r3, #4
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	0c1b      	lsrs	r3, r3, #16
 8001390:	b29a      	uxth	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	011b      	lsls	r3, r3, #4
 800139e:	4413      	add	r3, r2
 80013a0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	011b      	lsls	r3, r3, #4
 80013b4:	4413      	add	r3, r2
 80013b6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	0a1a      	lsrs	r2, r3, #8
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	3301      	adds	r3, #1
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	011b      	lsls	r3, r3, #4
 80013ce:	4413      	add	r3, r2
 80013d0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	0c1a      	lsrs	r2, r3, #16
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	3302      	adds	r3, #2
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	011b      	lsls	r3, r3, #4
 80013e8:	4413      	add	r3, r2
 80013ea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	0e1a      	lsrs	r2, r3, #24
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	3303      	adds	r3, #3
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	011b      	lsls	r3, r3, #4
 8001402:	4413      	add	r3, r2
 8001404:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	3304      	adds	r3, #4
 800140e:	b2d2      	uxtb	r2, r2
 8001410:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	011b      	lsls	r3, r3, #4
 800141a:	4413      	add	r3, r2
 800141c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	0a1a      	lsrs	r2, r3, #8
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	3305      	adds	r3, #5
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	011b      	lsls	r3, r3, #4
 8001434:	4413      	add	r3, r2
 8001436:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	0c1a      	lsrs	r2, r3, #16
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	3306      	adds	r3, #6
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	011b      	lsls	r3, r3, #4
 800144e:	4413      	add	r3, r2
 8001450:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	0e1a      	lsrs	r2, r3, #24
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	3307      	adds	r3, #7
 800145c:	b2d2      	uxtb	r2, r2
 800145e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d108      	bne.n	8001478 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	68da      	ldr	r2, [r3, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f042 0220 	orr.w	r2, r2, #32
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	e007      	b.n	8001488 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	691a      	ldr	r2, [r3, #16]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f042 0220 	orr.w	r2, r2, #32
 8001486:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001488:	2300      	movs	r3, #0
 800148a:	e006      	b.n	800149a <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001490:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
  }
}
 800149a:	4618      	mov	r0, r3
 800149c:	371c      	adds	r7, #28
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b085      	sub	sp, #20
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014b6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d002      	beq.n	80014c4 <HAL_CAN_ActivateNotification+0x1e>
 80014be:	7bfb      	ldrb	r3, [r7, #15]
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d109      	bne.n	80014d8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6959      	ldr	r1, [r3, #20]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	683a      	ldr	r2, [r7, #0]
 80014d0:	430a      	orrs	r2, r1
 80014d2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80014d4:	2300      	movs	r3, #0
 80014d6:	e006      	b.n	80014e6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
  }
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b08a      	sub	sp, #40	; 0x28
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800152e:	6a3b      	ldr	r3, [r7, #32]
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	2b00      	cmp	r3, #0
 8001536:	d07c      	beq.n	8001632 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b00      	cmp	r3, #0
 8001540:	d023      	beq.n	800158a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2201      	movs	r2, #1
 8001548:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <HAL_CAN_IRQHandler+0x6a>
      {
        /* Transmission Mailbox 0 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f000 f97d 	bl	8001854 <HAL_CAN_TxMailbox0CompleteCallback>
 800155a:	e016      	b.n	800158a <HAL_CAN_IRQHandler+0x98>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	2b00      	cmp	r3, #0
 8001564:	d004      	beq.n	8001570 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
 800156e:	e00c      	b.n	800158a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	f003 0308 	and.w	r3, r3, #8
 8001576:	2b00      	cmp	r3, #0
 8001578:	d004      	beq.n	8001584 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
 8001582:	e002      	b.n	800158a <HAL_CAN_IRQHandler+0x98>
        }
        else
        {
          /* Transmission Mailbox 0 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f000 f983 	bl	8001890 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001590:	2b00      	cmp	r3, #0
 8001592:	d024      	beq.n	80015de <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f44f 7280 	mov.w	r2, #256	; 0x100
 800159c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d003      	beq.n	80015b0 <HAL_CAN_IRQHandler+0xbe>
      {
        /* Transmission Mailbox 1 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f000 f95d 	bl	8001868 <HAL_CAN_TxMailbox1CompleteCallback>
 80015ae:	e016      	b.n	80015de <HAL_CAN_IRQHandler+0xec>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d004      	beq.n	80015c4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
 80015c2:	e00c      	b.n	80015de <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d004      	beq.n	80015d8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80015ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
 80015d6:	e002      	b.n	80015de <HAL_CAN_IRQHandler+0xec>
        }
        else
        {
          /* Transmission Mailbox 1 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 f963 	bl	80018a4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d024      	beq.n	8001632 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015f0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <HAL_CAN_IRQHandler+0x112>
      {
        /* Transmission Mailbox 2 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 f93d 	bl	800187c <HAL_CAN_TxMailbox2CompleteCallback>
 8001602:	e016      	b.n	8001632 <HAL_CAN_IRQHandler+0x140>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d004      	beq.n	8001618 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
 8001616:	e00c      	b.n	8001632 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d004      	beq.n	800162c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
 800162a:	e002      	b.n	8001632 <HAL_CAN_IRQHandler+0x140>
        }
        else
        {
          /* Transmission Mailbox 2 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f000 f943 	bl	80018b8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001632:	6a3b      	ldr	r3, [r7, #32]
 8001634:	f003 0308 	and.w	r3, r3, #8
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00c      	beq.n	8001656 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	f003 0310 	and.w	r3, r3, #16
 8001642:	2b00      	cmp	r3, #0
 8001644:	d007      	beq.n	8001656 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800164c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2210      	movs	r2, #16
 8001654:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001656:	6a3b      	ldr	r3, [r7, #32]
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	2b00      	cmp	r3, #0
 800165e:	d00b      	beq.n	8001678 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	f003 0308 	and.w	r3, r3, #8
 8001666:	2b00      	cmp	r3, #0
 8001668:	d006      	beq.n	8001678 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2208      	movs	r2, #8
 8001670:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 f92a 	bl	80018cc <HAL_CAN_RxFifo0FullCallback>
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001678:	6a3b      	ldr	r3, [r7, #32]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d009      	beq.n	8001696 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	f003 0303 	and.w	r3, r3, #3
 800168c:	2b00      	cmp	r3, #0
 800168e:	d002      	beq.n	8001696 <HAL_CAN_IRQHandler+0x1a4>
    {
      /* Receive FIFO 0 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f002 fcc1 	bl	8004018 <HAL_CAN_RxFifo0MsgPendingCallback>
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001696:	6a3b      	ldr	r3, [r7, #32]
 8001698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800169c:	2b00      	cmp	r3, #0
 800169e:	d00c      	beq.n	80016ba <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	f003 0310 	and.w	r3, r3, #16
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d007      	beq.n	80016ba <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80016aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2210      	movs	r2, #16
 80016b8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80016ba:	6a3b      	ldr	r3, [r7, #32]
 80016bc:	f003 0320 	and.w	r3, r3, #32
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d00b      	beq.n	80016dc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	f003 0308 	and.w	r3, r3, #8
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d006      	beq.n	80016dc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2208      	movs	r2, #8
 80016d4:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 f90c 	bl	80018f4 <HAL_CAN_RxFifo1FullCallback>
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80016dc:	6a3b      	ldr	r3, [r7, #32]
 80016de:	f003 0310 	and.w	r3, r3, #16
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d009      	beq.n	80016fa <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	f003 0303 	and.w	r3, r3, #3
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d002      	beq.n	80016fa <HAL_CAN_IRQHandler+0x208>
    {
      /* Receive FIFO 1 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f000 f8f3 	bl	80018e0 <HAL_CAN_RxFifo1MsgPendingCallback>
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80016fa:	6a3b      	ldr	r3, [r7, #32]
 80016fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d00b      	beq.n	800171c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	f003 0310 	and.w	r3, r3, #16
 800170a:	2b00      	cmp	r3, #0
 800170c:	d006      	beq.n	800171c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2210      	movs	r2, #16
 8001714:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 f8f6 	bl	8001908 <HAL_CAN_SleepCallback>
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800171c:	6a3b      	ldr	r3, [r7, #32]
 800171e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d00b      	beq.n	800173e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	f003 0308 	and.w	r3, r3, #8
 800172c:	2b00      	cmp	r3, #0
 800172e:	d006      	beq.n	800173e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2208      	movs	r2, #8
 8001736:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f000 f8ef 	bl	800191c <HAL_CAN_WakeUpFromRxMsgCallback>
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800173e:	6a3b      	ldr	r3, [r7, #32]
 8001740:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d075      	beq.n	8001834 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f003 0304 	and.w	r3, r3, #4
 800174e:	2b00      	cmp	r3, #0
 8001750:	d06c      	beq.n	800182c <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001752:	6a3b      	ldr	r3, [r7, #32]
 8001754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001758:	2b00      	cmp	r3, #0
 800175a:	d008      	beq.n	800176e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800176e:	6a3b      	ldr	r3, [r7, #32]
 8001770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001774:	2b00      	cmp	r3, #0
 8001776:	d008      	beq.n	800178a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	f043 0302 	orr.w	r3, r3, #2
 8001788:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800178a:	6a3b      	ldr	r3, [r7, #32]
 800178c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001790:	2b00      	cmp	r3, #0
 8001792:	d008      	beq.n	80017a6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	f043 0304 	orr.w	r3, r3, #4
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80017a6:	6a3b      	ldr	r3, [r7, #32]
 80017a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d03d      	beq.n	800182c <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d038      	beq.n	800182c <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80017c0:	2b30      	cmp	r3, #48	; 0x30
 80017c2:	d017      	beq.n	80017f4 <HAL_CAN_IRQHandler+0x302>
 80017c4:	2b30      	cmp	r3, #48	; 0x30
 80017c6:	d804      	bhi.n	80017d2 <HAL_CAN_IRQHandler+0x2e0>
 80017c8:	2b10      	cmp	r3, #16
 80017ca:	d009      	beq.n	80017e0 <HAL_CAN_IRQHandler+0x2ee>
 80017cc:	2b20      	cmp	r3, #32
 80017ce:	d00c      	beq.n	80017ea <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80017d0:	e024      	b.n	800181c <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80017d2:	2b50      	cmp	r3, #80	; 0x50
 80017d4:	d018      	beq.n	8001808 <HAL_CAN_IRQHandler+0x316>
 80017d6:	2b60      	cmp	r3, #96	; 0x60
 80017d8:	d01b      	beq.n	8001812 <HAL_CAN_IRQHandler+0x320>
 80017da:	2b40      	cmp	r3, #64	; 0x40
 80017dc:	d00f      	beq.n	80017fe <HAL_CAN_IRQHandler+0x30c>
            break;
 80017de:	e01d      	b.n	800181c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80017e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e2:	f043 0308 	orr.w	r3, r3, #8
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017e8:	e018      	b.n	800181c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	f043 0310 	orr.w	r3, r3, #16
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017f2:	e013      	b.n	800181c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80017f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f6:	f043 0320 	orr.w	r3, r3, #32
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017fc:	e00e      	b.n	800181c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80017fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001806:	e009      	b.n	800181c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800180e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001810:	e004      	b.n	800181c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800181a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	699a      	ldr	r2, [r3, #24]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800182a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2204      	movs	r2, #4
 8001832:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001836:	2b00      	cmp	r3, #0
 8001838:	d008      	beq.n	800184c <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	431a      	orrs	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 f872 	bl	8001930 <HAL_CAN_ErrorCallback>
  }
}
 800184c:	bf00      	nop
 800184e:	3728      	adds	r7, #40	; 0x28
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001954:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <NVIC_SetPriorityGrouping+0x44>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001960:	4013      	ands	r3, r2
 8001962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800196c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001976:	4a04      	ldr	r2, [pc, #16]	; (8001988 <NVIC_SetPriorityGrouping+0x44>)
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	60d3      	str	r3, [r2, #12]
}
 800197c:	bf00      	nop
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001990:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <NVIC_GetPriorityGrouping+0x18>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	0a1b      	lsrs	r3, r3, #8
 8001996:	f003 0307 	and.w	r3, r3, #7
}
 800199a:	4618      	mov	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	f003 021f 	and.w	r2, r3, #31
 80019b8:	4907      	ldr	r1, [pc, #28]	; (80019d8 <NVIC_EnableIRQ+0x30>)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	095b      	lsrs	r3, r3, #5
 80019c0:	2001      	movs	r0, #1
 80019c2:	fa00 f202 	lsl.w	r2, r0, r2
 80019c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	e000e100 	.word	0xe000e100

080019dc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	6039      	str	r1, [r7, #0]
 80019e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80019e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	da0b      	bge.n	8001a08 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	490c      	ldr	r1, [pc, #48]	; (8001a28 <NVIC_SetPriority+0x4c>)
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	f003 030f 	and.w	r3, r3, #15
 80019fc:	3b04      	subs	r3, #4
 80019fe:	0112      	lsls	r2, r2, #4
 8001a00:	b2d2      	uxtb	r2, r2
 8001a02:	440b      	add	r3, r1
 8001a04:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a06:	e009      	b.n	8001a1c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	4907      	ldr	r1, [pc, #28]	; (8001a2c <NVIC_SetPriority+0x50>)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	0112      	lsls	r2, r2, #4
 8001a14:	b2d2      	uxtb	r2, r2
 8001a16:	440b      	add	r3, r1
 8001a18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000ed00 	.word	0xe000ed00
 8001a2c:	e000e100 	.word	0xe000e100

08001a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b089      	sub	sp, #36	; 0x24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f1c3 0307 	rsb	r3, r3, #7
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	bf28      	it	cs
 8001a4e:	2304      	movcs	r3, #4
 8001a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	3304      	adds	r3, #4
 8001a56:	2b06      	cmp	r3, #6
 8001a58:	d902      	bls.n	8001a60 <NVIC_EncodePriority+0x30>
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3b03      	subs	r3, #3
 8001a5e:	e000      	b.n	8001a62 <NVIC_EncodePriority+0x32>
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a64:	f04f 32ff 	mov.w	r2, #4294967295
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43da      	mvns	r2, r3
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	401a      	ands	r2, r3
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a78:	f04f 31ff 	mov.w	r1, #4294967295
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a82:	43d9      	mvns	r1, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a88:	4313      	orrs	r3, r2
         );
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3724      	adds	r7, #36	; 0x24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
	...

08001a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aa8:	d301      	bcc.n	8001aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e00f      	b.n	8001ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aae:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <SysTick_Config+0x40>)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ab6:	210f      	movs	r1, #15
 8001ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8001abc:	f7ff ff8e 	bl	80019dc <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <SysTick_Config+0x40>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ac6:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <SysTick_Config+0x40>)
 8001ac8:	2207      	movs	r2, #7
 8001aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	e000e010 	.word	0xe000e010

08001adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff ff2d 	bl	8001944 <NVIC_SetPriorityGrouping>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	4603      	mov	r3, r0
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
 8001afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b04:	f7ff ff42 	bl	800198c <NVIC_GetPriorityGrouping>
 8001b08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	68b9      	ldr	r1, [r7, #8]
 8001b0e:	6978      	ldr	r0, [r7, #20]
 8001b10:	f7ff ff8e 	bl	8001a30 <NVIC_EncodePriority>
 8001b14:	4602      	mov	r2, r0
 8001b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff ff5d 	bl	80019dc <NVIC_SetPriority>
}
 8001b22:	bf00      	nop
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	4603      	mov	r3, r0
 8001b32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff ff35 	bl	80019a8 <NVIC_EnableIRQ>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff ffa2 	bl	8001a98 <SysTick_Config>
 8001b54:	4603      	mov	r3, r0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b084      	sub	sp, #16
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b66:	2300      	movs	r3, #0
 8001b68:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d005      	beq.n	8001b80 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2204      	movs	r2, #4
 8001b78:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	73fb      	strb	r3, [r7, #15]
 8001b7e:	e027      	b.n	8001bd0 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f022 020e 	bic.w	r2, r2, #14
 8001b8e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 0201 	bic.w	r2, r2, #1
 8001b9e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba8:	2101      	movs	r1, #1
 8001baa:	fa01 f202 	lsl.w	r2, r1, r2
 8001bae:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d003      	beq.n	8001bd0 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	4798      	blx	r3
    } 
  }
  return status;
 8001bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
	...

08001bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b087      	sub	sp, #28
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001bf2:	e14e      	b.n	8001e92 <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001c00:	4013      	ands	r3, r2
 8001c02:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f000 8140 	beq.w	8001e8c <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d003      	beq.n	8001c1c <HAL_GPIO_Init+0x40>
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b12      	cmp	r3, #18
 8001c1a:	d123      	bne.n	8001c64 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	08da      	lsrs	r2, r3, #3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3208      	adds	r2, #8
 8001c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c28:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	220f      	movs	r2, #15
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	691a      	ldr	r2, [r3, #16]
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	08da      	lsrs	r2, r3, #3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	3208      	adds	r2, #8
 8001c5e:	6939      	ldr	r1, [r7, #16]
 8001c60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	2203      	movs	r2, #3
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 0203 	and.w	r2, r3, #3
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d00b      	beq.n	8001cb8 <HAL_GPIO_Init+0xdc>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d007      	beq.n	8001cb8 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cac:	2b11      	cmp	r3, #17
 8001cae:	d003      	beq.n	8001cb8 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b12      	cmp	r3, #18
 8001cb6:	d130      	bne.n	8001d1a <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	2203      	movs	r2, #3
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	68da      	ldr	r2, [r3, #12]
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cee:	2201      	movs	r2, #1
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	091b      	lsrs	r3, r3, #4
 8001d04:	f003 0201 	and.w	r2, r3, #1
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	2203      	movs	r2, #3
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	689a      	ldr	r2, [r3, #8]
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 809a 	beq.w	8001e8c <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d58:	4b55      	ldr	r3, [pc, #340]	; (8001eb0 <HAL_GPIO_Init+0x2d4>)
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	4a54      	ldr	r2, [pc, #336]	; (8001eb0 <HAL_GPIO_Init+0x2d4>)
 8001d5e:	f043 0301 	orr.w	r3, r3, #1
 8001d62:	6193      	str	r3, [r2, #24]
 8001d64:	4b52      	ldr	r3, [pc, #328]	; (8001eb0 <HAL_GPIO_Init+0x2d4>)
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d70:	4a50      	ldr	r2, [pc, #320]	; (8001eb4 <HAL_GPIO_Init+0x2d8>)
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	089b      	lsrs	r3, r3, #2
 8001d76:	3302      	adds	r3, #2
 8001d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d7c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f003 0303 	and.w	r3, r3, #3
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	220f      	movs	r2, #15
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4013      	ands	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d9a:	d013      	beq.n	8001dc4 <HAL_GPIO_Init+0x1e8>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a46      	ldr	r2, [pc, #280]	; (8001eb8 <HAL_GPIO_Init+0x2dc>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d00d      	beq.n	8001dc0 <HAL_GPIO_Init+0x1e4>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a45      	ldr	r2, [pc, #276]	; (8001ebc <HAL_GPIO_Init+0x2e0>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d007      	beq.n	8001dbc <HAL_GPIO_Init+0x1e0>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a44      	ldr	r2, [pc, #272]	; (8001ec0 <HAL_GPIO_Init+0x2e4>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d101      	bne.n	8001db8 <HAL_GPIO_Init+0x1dc>
 8001db4:	2303      	movs	r3, #3
 8001db6:	e006      	b.n	8001dc6 <HAL_GPIO_Init+0x1ea>
 8001db8:	2305      	movs	r3, #5
 8001dba:	e004      	b.n	8001dc6 <HAL_GPIO_Init+0x1ea>
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	e002      	b.n	8001dc6 <HAL_GPIO_Init+0x1ea>
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e000      	b.n	8001dc6 <HAL_GPIO_Init+0x1ea>
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	f002 0203 	and.w	r2, r2, #3
 8001dcc:	0092      	lsls	r2, r2, #2
 8001dce:	4093      	lsls	r3, r2
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001dd6:	4937      	ldr	r1, [pc, #220]	; (8001eb4 <HAL_GPIO_Init+0x2d8>)
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	089b      	lsrs	r3, r3, #2
 8001ddc:	3302      	adds	r3, #2
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001de4:	4b37      	ldr	r3, [pc, #220]	; (8001ec4 <HAL_GPIO_Init+0x2e8>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	43db      	mvns	r3, r3
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	4013      	ands	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d003      	beq.n	8001e08 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e08:	4a2e      	ldr	r2, [pc, #184]	; (8001ec4 <HAL_GPIO_Init+0x2e8>)
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e0e:	4b2d      	ldr	r3, [pc, #180]	; (8001ec4 <HAL_GPIO_Init+0x2e8>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	43db      	mvns	r3, r3
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e32:	4a24      	ldr	r2, [pc, #144]	; (8001ec4 <HAL_GPIO_Init+0x2e8>)
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e38:	4b22      	ldr	r3, [pc, #136]	; (8001ec4 <HAL_GPIO_Init+0x2e8>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	43db      	mvns	r3, r3
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	4013      	ands	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e5c:	4a19      	ldr	r2, [pc, #100]	; (8001ec4 <HAL_GPIO_Init+0x2e8>)
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e62:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_GPIO_Init+0x2e8>)
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e86:	4a0f      	ldr	r2, [pc, #60]	; (8001ec4 <HAL_GPIO_Init+0x2e8>)
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	fa22 f303 	lsr.w	r3, r2, r3
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f47f aea9 	bne.w	8001bf4 <HAL_GPIO_Init+0x18>
  }
}
 8001ea2:	bf00      	nop
 8001ea4:	371c      	adds	r7, #28
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40010000 	.word	0x40010000
 8001eb8:	48000400 	.word	0x48000400
 8001ebc:	48000800 	.word	0x48000800
 8001ec0:	48000c00 	.word	0x48000c00
 8001ec4:	40010400 	.word	0x40010400

08001ec8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	807b      	strh	r3, [r7, #2]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ed8:	787b      	ldrb	r3, [r7, #1]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ede:	887a      	ldrh	r2, [r7, #2]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ee4:	e002      	b.n	8001eec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ee6:	887a      	ldrh	r2, [r7, #2]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f04:	1d3b      	adds	r3, r7, #4
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d102      	bne.n	8001f12 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	f000 beda 	b.w	8002cc6 <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f12:	1d3b      	adds	r3, r7, #4
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 816e 	beq.w	80021fe <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f22:	4bb5      	ldr	r3, [pc, #724]	; (80021f8 <HAL_RCC_OscConfig+0x300>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f003 030c 	and.w	r3, r3, #12
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	d00c      	beq.n	8001f48 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f2e:	4bb2      	ldr	r3, [pc, #712]	; (80021f8 <HAL_RCC_OscConfig+0x300>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 030c 	and.w	r3, r3, #12
 8001f36:	2b08      	cmp	r3, #8
 8001f38:	d15a      	bne.n	8001ff0 <HAL_RCC_OscConfig+0xf8>
 8001f3a:	4baf      	ldr	r3, [pc, #700]	; (80021f8 <HAL_RCC_OscConfig+0x300>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f46:	d153      	bne.n	8001ff0 <HAL_RCC_OscConfig+0xf8>
 8001f48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f4c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f50:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f54:	fa93 f3a3 	rbit	r3, r3
 8001f58:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001f5c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f60:	fab3 f383 	clz	r3, r3
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	095b      	lsrs	r3, r3, #5
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	f043 0301 	orr.w	r3, r3, #1
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d102      	bne.n	8001f7a <HAL_RCC_OscConfig+0x82>
 8001f74:	4ba0      	ldr	r3, [pc, #640]	; (80021f8 <HAL_RCC_OscConfig+0x300>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	e015      	b.n	8001fa6 <HAL_RCC_OscConfig+0xae>
 8001f7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f7e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f82:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001f86:	fa93 f3a3 	rbit	r3, r3
 8001f8a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001f8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f92:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001f96:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001f9a:	fa93 f3a3 	rbit	r3, r3
 8001f9e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001fa2:	4b95      	ldr	r3, [pc, #596]	; (80021f8 <HAL_RCC_OscConfig+0x300>)
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001faa:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001fae:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001fb2:	fa92 f2a2 	rbit	r2, r2
 8001fb6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 8001fba:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001fbe:	fab2 f282 	clz	r2, r2
 8001fc2:	b252      	sxtb	r2, r2
 8001fc4:	f042 0220 	orr.w	r2, r2, #32
 8001fc8:	b252      	sxtb	r2, r2
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	f002 021f 	and.w	r2, r2, #31
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 810f 	beq.w	80021fc <HAL_RCC_OscConfig+0x304>
 8001fde:	1d3b      	adds	r3, r7, #4
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f040 8109 	bne.w	80021fc <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	f000 be6b 	b.w	8002cc6 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ff0:	1d3b      	adds	r3, r7, #4
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ffa:	d106      	bne.n	800200a <HAL_RCC_OscConfig+0x112>
 8001ffc:	4b7e      	ldr	r3, [pc, #504]	; (80021f8 <HAL_RCC_OscConfig+0x300>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a7d      	ldr	r2, [pc, #500]	; (80021f8 <HAL_RCC_OscConfig+0x300>)
 8002002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	e030      	b.n	800206c <HAL_RCC_OscConfig+0x174>
 800200a:	1d3b      	adds	r3, r7, #4
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d10c      	bne.n	800202e <HAL_RCC_OscConfig+0x136>
 8002014:	4b78      	ldr	r3, [pc, #480]	; (80021f8 <HAL_RCC_OscConfig+0x300>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a77      	ldr	r2, [pc, #476]	; (80021f8 <HAL_RCC_OscConfig+0x300>)
 800201a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800201e:	6013      	str	r3, [r2, #0]
 8002020:	4b75      	ldr	r3, [pc, #468]	; (80021f8 <HAL_RCC_OscConfig+0x300>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a74      	ldr	r2, [pc, #464]	; (80021f8 <HAL_RCC_OscConfig+0x300>)
 8002026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800202a:	6013      	str	r3, [r2, #0]
 800202c:	e01e      	b.n	800206c <HAL_RCC_OscConfig+0x174>
 800202e:	1d3b      	adds	r3, r7, #4
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002038:	d10c      	bne.n	8002054 <HAL_RCC_OscConfig+0x15c>
 800203a:	4b6f      	ldr	r3, [pc, #444]	; (80021f8 <HAL_RCC_OscConfig+0x300>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a6e      	ldr	r2, [pc, #440]	; (80021f8 <HAL_RCC_OscConfig+0x300>)
 8002040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002044:	6013      	str	r3, [r2, #0]
 8002046:	4b6c      	ldr	r3, [pc, #432]	; (80021f8 <HAL_RCC_OscConfig+0x300>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a6b      	ldr	r2, [pc, #428]	; (80021f8 <HAL_RCC_OscConfig+0x300>)
 800204c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002050:	6013      	str	r3, [r2, #0]
 8002052:	e00b      	b.n	800206c <HAL_RCC_OscConfig+0x174>
 8002054:	4b68      	ldr	r3, [pc, #416]	; (80021f8 <HAL_RCC_OscConfig+0x300>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a67      	ldr	r2, [pc, #412]	; (80021f8 <HAL_RCC_OscConfig+0x300>)
 800205a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800205e:	6013      	str	r3, [r2, #0]
 8002060:	4b65      	ldr	r3, [pc, #404]	; (80021f8 <HAL_RCC_OscConfig+0x300>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a64      	ldr	r2, [pc, #400]	; (80021f8 <HAL_RCC_OscConfig+0x300>)
 8002066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800206a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800206c:	4b62      	ldr	r3, [pc, #392]	; (80021f8 <HAL_RCC_OscConfig+0x300>)
 800206e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002070:	f023 020f 	bic.w	r2, r3, #15
 8002074:	1d3b      	adds	r3, r7, #4
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	495f      	ldr	r1, [pc, #380]	; (80021f8 <HAL_RCC_OscConfig+0x300>)
 800207c:	4313      	orrs	r3, r2
 800207e:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002080:	1d3b      	adds	r3, r7, #4
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d05a      	beq.n	8002140 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208a:	f7fe fde7 	bl	8000c5c <HAL_GetTick>
 800208e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002092:	e00a      	b.n	80020aa <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002094:	f7fe fde2 	bl	8000c5c <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b64      	cmp	r3, #100	; 0x64
 80020a2:	d902      	bls.n	80020aa <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	f000 be0e 	b.w	8002cc6 <HAL_RCC_OscConfig+0xdce>
 80020aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020ae:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b2:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80020b6:	fa93 f3a3 	rbit	r3, r3
 80020ba:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 80020be:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c2:	fab3 f383 	clz	r3, r3
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	095b      	lsrs	r3, r3, #5
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d102      	bne.n	80020dc <HAL_RCC_OscConfig+0x1e4>
 80020d6:	4b48      	ldr	r3, [pc, #288]	; (80021f8 <HAL_RCC_OscConfig+0x300>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	e015      	b.n	8002108 <HAL_RCC_OscConfig+0x210>
 80020dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020e0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80020e8:	fa93 f3a3 	rbit	r3, r3
 80020ec:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80020f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020f4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80020f8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80020fc:	fa93 f3a3 	rbit	r3, r3
 8002100:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002104:	4b3c      	ldr	r3, [pc, #240]	; (80021f8 <HAL_RCC_OscConfig+0x300>)
 8002106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002108:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800210c:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002110:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002114:	fa92 f2a2 	rbit	r2, r2
 8002118:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 800211c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002120:	fab2 f282 	clz	r2, r2
 8002124:	b252      	sxtb	r2, r2
 8002126:	f042 0220 	orr.w	r2, r2, #32
 800212a:	b252      	sxtb	r2, r2
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	f002 021f 	and.w	r2, r2, #31
 8002132:	2101      	movs	r1, #1
 8002134:	fa01 f202 	lsl.w	r2, r1, r2
 8002138:	4013      	ands	r3, r2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d0aa      	beq.n	8002094 <HAL_RCC_OscConfig+0x19c>
 800213e:	e05e      	b.n	80021fe <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002140:	f7fe fd8c 	bl	8000c5c <HAL_GetTick>
 8002144:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002148:	e00a      	b.n	8002160 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800214a:	f7fe fd87 	bl	8000c5c <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b64      	cmp	r3, #100	; 0x64
 8002158:	d902      	bls.n	8002160 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	f000 bdb3 	b.w	8002cc6 <HAL_RCC_OscConfig+0xdce>
 8002160:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002164:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002168:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800216c:	fa93 f3a3 	rbit	r3, r3
 8002170:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8002174:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002178:	fab3 f383 	clz	r3, r3
 800217c:	b2db      	uxtb	r3, r3
 800217e:	095b      	lsrs	r3, r3, #5
 8002180:	b2db      	uxtb	r3, r3
 8002182:	f043 0301 	orr.w	r3, r3, #1
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b01      	cmp	r3, #1
 800218a:	d102      	bne.n	8002192 <HAL_RCC_OscConfig+0x29a>
 800218c:	4b1a      	ldr	r3, [pc, #104]	; (80021f8 <HAL_RCC_OscConfig+0x300>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	e015      	b.n	80021be <HAL_RCC_OscConfig+0x2c6>
 8002192:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002196:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800219e:	fa93 f3a3 	rbit	r3, r3
 80021a2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80021a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021aa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80021ae:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80021b2:	fa93 f3a3 	rbit	r3, r3
 80021b6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80021ba:	4b0f      	ldr	r3, [pc, #60]	; (80021f8 <HAL_RCC_OscConfig+0x300>)
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021c2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80021c6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80021ca:	fa92 f2a2 	rbit	r2, r2
 80021ce:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 80021d2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80021d6:	fab2 f282 	clz	r2, r2
 80021da:	b252      	sxtb	r2, r2
 80021dc:	f042 0220 	orr.w	r2, r2, #32
 80021e0:	b252      	sxtb	r2, r2
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	f002 021f 	and.w	r2, r2, #31
 80021e8:	2101      	movs	r1, #1
 80021ea:	fa01 f202 	lsl.w	r2, r1, r2
 80021ee:	4013      	ands	r3, r2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1aa      	bne.n	800214a <HAL_RCC_OscConfig+0x252>
 80021f4:	e003      	b.n	80021fe <HAL_RCC_OscConfig+0x306>
 80021f6:	bf00      	nop
 80021f8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021fe:	1d3b      	adds	r3, r7, #4
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 8170 	beq.w	80024ee <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800220e:	4bd0      	ldr	r3, [pc, #832]	; (8002550 <HAL_RCC_OscConfig+0x658>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f003 030c 	and.w	r3, r3, #12
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00b      	beq.n	8002232 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800221a:	4bcd      	ldr	r3, [pc, #820]	; (8002550 <HAL_RCC_OscConfig+0x658>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 030c 	and.w	r3, r3, #12
 8002222:	2b08      	cmp	r3, #8
 8002224:	d16d      	bne.n	8002302 <HAL_RCC_OscConfig+0x40a>
 8002226:	4bca      	ldr	r3, [pc, #808]	; (8002550 <HAL_RCC_OscConfig+0x658>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d167      	bne.n	8002302 <HAL_RCC_OscConfig+0x40a>
 8002232:	2302      	movs	r3, #2
 8002234:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002238:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800223c:	fa93 f3a3 	rbit	r3, r3
 8002240:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8002244:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002248:	fab3 f383 	clz	r3, r3
 800224c:	b2db      	uxtb	r3, r3
 800224e:	095b      	lsrs	r3, r3, #5
 8002250:	b2db      	uxtb	r3, r3
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b01      	cmp	r3, #1
 800225a:	d102      	bne.n	8002262 <HAL_RCC_OscConfig+0x36a>
 800225c:	4bbc      	ldr	r3, [pc, #752]	; (8002550 <HAL_RCC_OscConfig+0x658>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	e013      	b.n	800228a <HAL_RCC_OscConfig+0x392>
 8002262:	2302      	movs	r3, #2
 8002264:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002268:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800226c:	fa93 f3a3 	rbit	r3, r3
 8002270:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002274:	2302      	movs	r3, #2
 8002276:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800227a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800227e:	fa93 f3a3 	rbit	r3, r3
 8002282:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002286:	4bb2      	ldr	r3, [pc, #712]	; (8002550 <HAL_RCC_OscConfig+0x658>)
 8002288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228a:	2202      	movs	r2, #2
 800228c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002290:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002294:	fa92 f2a2 	rbit	r2, r2
 8002298:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 800229c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80022a0:	fab2 f282 	clz	r2, r2
 80022a4:	b252      	sxtb	r2, r2
 80022a6:	f042 0220 	orr.w	r2, r2, #32
 80022aa:	b252      	sxtb	r2, r2
 80022ac:	b2d2      	uxtb	r2, r2
 80022ae:	f002 021f 	and.w	r2, r2, #31
 80022b2:	2101      	movs	r1, #1
 80022b4:	fa01 f202 	lsl.w	r2, r1, r2
 80022b8:	4013      	ands	r3, r2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d007      	beq.n	80022ce <HAL_RCC_OscConfig+0x3d6>
 80022be:	1d3b      	adds	r3, r7, #4
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d002      	beq.n	80022ce <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	f000 bcfc 	b.w	8002cc6 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ce:	4ba0      	ldr	r3, [pc, #640]	; (8002550 <HAL_RCC_OscConfig+0x658>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022d6:	1d3b      	adds	r3, r7, #4
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6959      	ldr	r1, [r3, #20]
 80022dc:	23f8      	movs	r3, #248	; 0xf8
 80022de:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80022e6:	fa93 f3a3 	rbit	r3, r3
 80022ea:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 80022ee:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80022f2:	fab3 f383 	clz	r3, r3
 80022f6:	fa01 f303 	lsl.w	r3, r1, r3
 80022fa:	4995      	ldr	r1, [pc, #596]	; (8002550 <HAL_RCC_OscConfig+0x658>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002300:	e0f5      	b.n	80024ee <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002302:	1d3b      	adds	r3, r7, #4
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 8085 	beq.w	8002418 <HAL_RCC_OscConfig+0x520>
 800230e:	2301      	movs	r3, #1
 8002310:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002314:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002318:	fa93 f3a3 	rbit	r3, r3
 800231c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8002320:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002324:	fab3 f383 	clz	r3, r3
 8002328:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800232c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	461a      	mov	r2, r3
 8002334:	2301      	movs	r3, #1
 8002336:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002338:	f7fe fc90 	bl	8000c5c <HAL_GetTick>
 800233c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002340:	e00a      	b.n	8002358 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002342:	f7fe fc8b 	bl	8000c5c <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d902      	bls.n	8002358 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	f000 bcb7 	b.w	8002cc6 <HAL_RCC_OscConfig+0xdce>
 8002358:	2302      	movs	r3, #2
 800235a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002362:	fa93 f3a3 	rbit	r3, r3
 8002366:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 800236a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236e:	fab3 f383 	clz	r3, r3
 8002372:	b2db      	uxtb	r3, r3
 8002374:	095b      	lsrs	r3, r3, #5
 8002376:	b2db      	uxtb	r3, r3
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b01      	cmp	r3, #1
 8002380:	d102      	bne.n	8002388 <HAL_RCC_OscConfig+0x490>
 8002382:	4b73      	ldr	r3, [pc, #460]	; (8002550 <HAL_RCC_OscConfig+0x658>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	e013      	b.n	80023b0 <HAL_RCC_OscConfig+0x4b8>
 8002388:	2302      	movs	r3, #2
 800238a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002392:	fa93 f3a3 	rbit	r3, r3
 8002396:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800239a:	2302      	movs	r3, #2
 800239c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80023a0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80023a4:	fa93 f3a3 	rbit	r3, r3
 80023a8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80023ac:	4b68      	ldr	r3, [pc, #416]	; (8002550 <HAL_RCC_OscConfig+0x658>)
 80023ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b0:	2202      	movs	r2, #2
 80023b2:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80023b6:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80023ba:	fa92 f2a2 	rbit	r2, r2
 80023be:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 80023c2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80023c6:	fab2 f282 	clz	r2, r2
 80023ca:	b252      	sxtb	r2, r2
 80023cc:	f042 0220 	orr.w	r2, r2, #32
 80023d0:	b252      	sxtb	r2, r2
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	f002 021f 	and.w	r2, r2, #31
 80023d8:	2101      	movs	r1, #1
 80023da:	fa01 f202 	lsl.w	r2, r1, r2
 80023de:	4013      	ands	r3, r2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d0ae      	beq.n	8002342 <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e4:	4b5a      	ldr	r3, [pc, #360]	; (8002550 <HAL_RCC_OscConfig+0x658>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ec:	1d3b      	adds	r3, r7, #4
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6959      	ldr	r1, [r3, #20]
 80023f2:	23f8      	movs	r3, #248	; 0xf8
 80023f4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80023fc:	fa93 f3a3 	rbit	r3, r3
 8002400:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8002404:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002408:	fab3 f383 	clz	r3, r3
 800240c:	fa01 f303 	lsl.w	r3, r1, r3
 8002410:	494f      	ldr	r1, [pc, #316]	; (8002550 <HAL_RCC_OscConfig+0x658>)
 8002412:	4313      	orrs	r3, r2
 8002414:	600b      	str	r3, [r1, #0]
 8002416:	e06a      	b.n	80024ee <HAL_RCC_OscConfig+0x5f6>
 8002418:	2301      	movs	r3, #1
 800241a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002422:	fa93 f3a3 	rbit	r3, r3
 8002426:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 800242a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800242e:	fab3 f383 	clz	r3, r3
 8002432:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002436:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	461a      	mov	r2, r3
 800243e:	2300      	movs	r3, #0
 8002440:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002442:	f7fe fc0b 	bl	8000c5c <HAL_GetTick>
 8002446:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800244a:	e00a      	b.n	8002462 <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800244c:	f7fe fc06 	bl	8000c5c <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d902      	bls.n	8002462 <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	f000 bc32 	b.w	8002cc6 <HAL_RCC_OscConfig+0xdce>
 8002462:	2302      	movs	r3, #2
 8002464:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002468:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800246c:	fa93 f3a3 	rbit	r3, r3
 8002470:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8002474:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002478:	fab3 f383 	clz	r3, r3
 800247c:	b2db      	uxtb	r3, r3
 800247e:	095b      	lsrs	r3, r3, #5
 8002480:	b2db      	uxtb	r3, r3
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b01      	cmp	r3, #1
 800248a:	d102      	bne.n	8002492 <HAL_RCC_OscConfig+0x59a>
 800248c:	4b30      	ldr	r3, [pc, #192]	; (8002550 <HAL_RCC_OscConfig+0x658>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	e013      	b.n	80024ba <HAL_RCC_OscConfig+0x5c2>
 8002492:	2302      	movs	r3, #2
 8002494:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002498:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800249c:	fa93 f3a3 	rbit	r3, r3
 80024a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80024a4:	2302      	movs	r3, #2
 80024a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80024aa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80024ae:	fa93 f3a3 	rbit	r3, r3
 80024b2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80024b6:	4b26      	ldr	r3, [pc, #152]	; (8002550 <HAL_RCC_OscConfig+0x658>)
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	2202      	movs	r2, #2
 80024bc:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80024c0:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80024c4:	fa92 f2a2 	rbit	r2, r2
 80024c8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 80024cc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80024d0:	fab2 f282 	clz	r2, r2
 80024d4:	b252      	sxtb	r2, r2
 80024d6:	f042 0220 	orr.w	r2, r2, #32
 80024da:	b252      	sxtb	r2, r2
 80024dc:	b2d2      	uxtb	r2, r2
 80024de:	f002 021f 	and.w	r2, r2, #31
 80024e2:	2101      	movs	r1, #1
 80024e4:	fa01 f202 	lsl.w	r2, r1, r2
 80024e8:	4013      	ands	r3, r2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1ae      	bne.n	800244c <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ee:	1d3b      	adds	r3, r7, #4
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0308 	and.w	r3, r3, #8
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 80d8 	beq.w	80026ae <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024fe:	1d3b      	adds	r3, r7, #4
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d067      	beq.n	80025d8 <HAL_RCC_OscConfig+0x6e0>
 8002508:	2301      	movs	r3, #1
 800250a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002512:	fa93 f3a3 	rbit	r3, r3
 8002516:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 800251a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800251e:	fab3 f383 	clz	r3, r3
 8002522:	461a      	mov	r2, r3
 8002524:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <HAL_RCC_OscConfig+0x65c>)
 8002526:	4413      	add	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	461a      	mov	r2, r3
 800252c:	2301      	movs	r3, #1
 800252e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002530:	f7fe fb94 	bl	8000c5c <HAL_GetTick>
 8002534:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002538:	e00e      	b.n	8002558 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800253a:	f7fe fb8f 	bl	8000c5c <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d906      	bls.n	8002558 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e3bb      	b.n	8002cc6 <HAL_RCC_OscConfig+0xdce>
 800254e:	bf00      	nop
 8002550:	40021000 	.word	0x40021000
 8002554:	10908120 	.word	0x10908120
 8002558:	2302      	movs	r3, #2
 800255a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002562:	fa93 f3a3 	rbit	r3, r3
 8002566:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800256a:	2302      	movs	r3, #2
 800256c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002570:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002574:	fa93 f2a3 	rbit	r2, r3
 8002578:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002582:	2202      	movs	r2, #2
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	fa93 f2a3 	rbit	r2, r3
 8002590:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002594:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002596:	4ba5      	ldr	r3, [pc, #660]	; (800282c <HAL_RCC_OscConfig+0x934>)
 8002598:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800259a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800259e:	2102      	movs	r1, #2
 80025a0:	6019      	str	r1, [r3, #0]
 80025a2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	fa93 f1a3 	rbit	r1, r3
 80025ac:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80025b0:	6019      	str	r1, [r3, #0]
  return(result);
 80025b2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	fab3 f383 	clz	r3, r3
 80025bc:	b25b      	sxtb	r3, r3
 80025be:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80025c2:	b25b      	sxtb	r3, r3
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	f003 031f 	and.w	r3, r3, #31
 80025ca:	2101      	movs	r1, #1
 80025cc:	fa01 f303 	lsl.w	r3, r1, r3
 80025d0:	4013      	ands	r3, r2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0b1      	beq.n	800253a <HAL_RCC_OscConfig+0x642>
 80025d6:	e06a      	b.n	80026ae <HAL_RCC_OscConfig+0x7b6>
 80025d8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80025dc:	2201      	movs	r2, #1
 80025de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	fa93 f2a3 	rbit	r2, r3
 80025ea:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80025ee:	601a      	str	r2, [r3, #0]
  return(result);
 80025f0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80025f4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025f6:	fab3 f383 	clz	r3, r3
 80025fa:	461a      	mov	r2, r3
 80025fc:	4b8c      	ldr	r3, [pc, #560]	; (8002830 <HAL_RCC_OscConfig+0x938>)
 80025fe:	4413      	add	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	461a      	mov	r2, r3
 8002604:	2300      	movs	r3, #0
 8002606:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002608:	f7fe fb28 	bl	8000c5c <HAL_GetTick>
 800260c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002610:	e009      	b.n	8002626 <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002612:	f7fe fb23 	bl	8000c5c <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e34f      	b.n	8002cc6 <HAL_RCC_OscConfig+0xdce>
 8002626:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800262a:	2202      	movs	r2, #2
 800262c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	fa93 f2a3 	rbit	r2, r3
 8002638:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002642:	2202      	movs	r2, #2
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	fa93 f2a3 	rbit	r2, r3
 8002650:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800265a:	2202      	movs	r2, #2
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	fa93 f2a3 	rbit	r2, r3
 8002668:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800266c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800266e:	4b6f      	ldr	r3, [pc, #444]	; (800282c <HAL_RCC_OscConfig+0x934>)
 8002670:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002672:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002676:	2102      	movs	r1, #2
 8002678:	6019      	str	r1, [r3, #0]
 800267a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	fa93 f1a3 	rbit	r1, r3
 8002684:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002688:	6019      	str	r1, [r3, #0]
  return(result);
 800268a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	fab3 f383 	clz	r3, r3
 8002694:	b25b      	sxtb	r3, r3
 8002696:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800269a:	b25b      	sxtb	r3, r3
 800269c:	b2db      	uxtb	r3, r3
 800269e:	f003 031f 	and.w	r3, r3, #31
 80026a2:	2101      	movs	r1, #1
 80026a4:	fa01 f303 	lsl.w	r3, r1, r3
 80026a8:	4013      	ands	r3, r2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1b1      	bne.n	8002612 <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ae:	1d3b      	adds	r3, r7, #4
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 8159 	beq.w	8002970 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026be:	2300      	movs	r3, #0
 80026c0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026c4:	4b59      	ldr	r3, [pc, #356]	; (800282c <HAL_RCC_OscConfig+0x934>)
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d112      	bne.n	80026f6 <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026d0:	4b56      	ldr	r3, [pc, #344]	; (800282c <HAL_RCC_OscConfig+0x934>)
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	4a55      	ldr	r2, [pc, #340]	; (800282c <HAL_RCC_OscConfig+0x934>)
 80026d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026da:	61d3      	str	r3, [r2, #28]
 80026dc:	4b53      	ldr	r3, [pc, #332]	; (800282c <HAL_RCC_OscConfig+0x934>)
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80026e4:	f107 030c 	add.w	r3, r7, #12
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	f107 030c 	add.w	r3, r7, #12
 80026ee:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80026f0:	2301      	movs	r3, #1
 80026f2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f6:	4b4f      	ldr	r3, [pc, #316]	; (8002834 <HAL_RCC_OscConfig+0x93c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d11a      	bne.n	8002738 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002702:	4b4c      	ldr	r3, [pc, #304]	; (8002834 <HAL_RCC_OscConfig+0x93c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a4b      	ldr	r2, [pc, #300]	; (8002834 <HAL_RCC_OscConfig+0x93c>)
 8002708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800270c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800270e:	f7fe faa5 	bl	8000c5c <HAL_GetTick>
 8002712:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002716:	e009      	b.n	800272c <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002718:	f7fe faa0 	bl	8000c5c <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b64      	cmp	r3, #100	; 0x64
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e2cc      	b.n	8002cc6 <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800272c:	4b41      	ldr	r3, [pc, #260]	; (8002834 <HAL_RCC_OscConfig+0x93c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0ef      	beq.n	8002718 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002738:	1d3b      	adds	r3, r7, #4
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d106      	bne.n	8002750 <HAL_RCC_OscConfig+0x858>
 8002742:	4b3a      	ldr	r3, [pc, #232]	; (800282c <HAL_RCC_OscConfig+0x934>)
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	4a39      	ldr	r2, [pc, #228]	; (800282c <HAL_RCC_OscConfig+0x934>)
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	6213      	str	r3, [r2, #32]
 800274e:	e02f      	b.n	80027b0 <HAL_RCC_OscConfig+0x8b8>
 8002750:	1d3b      	adds	r3, r7, #4
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10c      	bne.n	8002774 <HAL_RCC_OscConfig+0x87c>
 800275a:	4b34      	ldr	r3, [pc, #208]	; (800282c <HAL_RCC_OscConfig+0x934>)
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	4a33      	ldr	r2, [pc, #204]	; (800282c <HAL_RCC_OscConfig+0x934>)
 8002760:	f023 0301 	bic.w	r3, r3, #1
 8002764:	6213      	str	r3, [r2, #32]
 8002766:	4b31      	ldr	r3, [pc, #196]	; (800282c <HAL_RCC_OscConfig+0x934>)
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	4a30      	ldr	r2, [pc, #192]	; (800282c <HAL_RCC_OscConfig+0x934>)
 800276c:	f023 0304 	bic.w	r3, r3, #4
 8002770:	6213      	str	r3, [r2, #32]
 8002772:	e01d      	b.n	80027b0 <HAL_RCC_OscConfig+0x8b8>
 8002774:	1d3b      	adds	r3, r7, #4
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	2b05      	cmp	r3, #5
 800277c:	d10c      	bne.n	8002798 <HAL_RCC_OscConfig+0x8a0>
 800277e:	4b2b      	ldr	r3, [pc, #172]	; (800282c <HAL_RCC_OscConfig+0x934>)
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	4a2a      	ldr	r2, [pc, #168]	; (800282c <HAL_RCC_OscConfig+0x934>)
 8002784:	f043 0304 	orr.w	r3, r3, #4
 8002788:	6213      	str	r3, [r2, #32]
 800278a:	4b28      	ldr	r3, [pc, #160]	; (800282c <HAL_RCC_OscConfig+0x934>)
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	4a27      	ldr	r2, [pc, #156]	; (800282c <HAL_RCC_OscConfig+0x934>)
 8002790:	f043 0301 	orr.w	r3, r3, #1
 8002794:	6213      	str	r3, [r2, #32]
 8002796:	e00b      	b.n	80027b0 <HAL_RCC_OscConfig+0x8b8>
 8002798:	4b24      	ldr	r3, [pc, #144]	; (800282c <HAL_RCC_OscConfig+0x934>)
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	4a23      	ldr	r2, [pc, #140]	; (800282c <HAL_RCC_OscConfig+0x934>)
 800279e:	f023 0301 	bic.w	r3, r3, #1
 80027a2:	6213      	str	r3, [r2, #32]
 80027a4:	4b21      	ldr	r3, [pc, #132]	; (800282c <HAL_RCC_OscConfig+0x934>)
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	4a20      	ldr	r2, [pc, #128]	; (800282c <HAL_RCC_OscConfig+0x934>)
 80027aa:	f023 0304 	bic.w	r3, r3, #4
 80027ae:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027b0:	1d3b      	adds	r3, r7, #4
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d06b      	beq.n	8002892 <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ba:	f7fe fa4f 	bl	8000c5c <HAL_GetTick>
 80027be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c2:	e00b      	b.n	80027dc <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027c4:	f7fe fa4a 	bl	8000c5c <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e274      	b.n	8002cc6 <HAL_RCC_OscConfig+0xdce>
 80027dc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80027e0:	2202      	movs	r2, #2
 80027e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	fa93 f2a3 	rbit	r2, r3
 80027ee:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80027f8:	2202      	movs	r2, #2
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	fa93 f2a3 	rbit	r2, r3
 8002806:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800280a:	601a      	str	r2, [r3, #0]
  return(result);
 800280c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002810:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002812:	fab3 f383 	clz	r3, r3
 8002816:	b2db      	uxtb	r3, r3
 8002818:	095b      	lsrs	r3, r3, #5
 800281a:	b2db      	uxtb	r3, r3
 800281c:	f043 0302 	orr.w	r3, r3, #2
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d108      	bne.n	8002838 <HAL_RCC_OscConfig+0x940>
 8002826:	4b01      	ldr	r3, [pc, #4]	; (800282c <HAL_RCC_OscConfig+0x934>)
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	e013      	b.n	8002854 <HAL_RCC_OscConfig+0x95c>
 800282c:	40021000 	.word	0x40021000
 8002830:	10908120 	.word	0x10908120
 8002834:	40007000 	.word	0x40007000
 8002838:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800283c:	2202      	movs	r2, #2
 800283e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002840:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	fa93 f2a3 	rbit	r2, r3
 800284a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	4bbb      	ldr	r3, [pc, #748]	; (8002b40 <HAL_RCC_OscConfig+0xc48>)
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002858:	2102      	movs	r1, #2
 800285a:	6011      	str	r1, [r2, #0]
 800285c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002860:	6812      	ldr	r2, [r2, #0]
 8002862:	fa92 f1a2 	rbit	r1, r2
 8002866:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800286a:	6011      	str	r1, [r2, #0]
  return(result);
 800286c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002870:	6812      	ldr	r2, [r2, #0]
 8002872:	fab2 f282 	clz	r2, r2
 8002876:	b252      	sxtb	r2, r2
 8002878:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800287c:	b252      	sxtb	r2, r2
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	f002 021f 	and.w	r2, r2, #31
 8002884:	2101      	movs	r1, #1
 8002886:	fa01 f202 	lsl.w	r2, r1, r2
 800288a:	4013      	ands	r3, r2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d099      	beq.n	80027c4 <HAL_RCC_OscConfig+0x8cc>
 8002890:	e064      	b.n	800295c <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002892:	f7fe f9e3 	bl	8000c5c <HAL_GetTick>
 8002896:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800289a:	e00b      	b.n	80028b4 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800289c:	f7fe f9de 	bl	8000c5c <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e208      	b.n	8002cc6 <HAL_RCC_OscConfig+0xdce>
 80028b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80028b8:	2202      	movs	r2, #2
 80028ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	fa93 f2a3 	rbit	r2, r3
 80028c6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80028d0:	2202      	movs	r2, #2
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	fa93 f2a3 	rbit	r2, r3
 80028de:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80028e2:	601a      	str	r2, [r3, #0]
  return(result);
 80028e4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80028e8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ea:	fab3 f383 	clz	r3, r3
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	095b      	lsrs	r3, r3, #5
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	f043 0302 	orr.w	r3, r3, #2
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d102      	bne.n	8002904 <HAL_RCC_OscConfig+0xa0c>
 80028fe:	4b90      	ldr	r3, [pc, #576]	; (8002b40 <HAL_RCC_OscConfig+0xc48>)
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	e00d      	b.n	8002920 <HAL_RCC_OscConfig+0xa28>
 8002904:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002908:	2202      	movs	r2, #2
 800290a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	fa93 f2a3 	rbit	r2, r3
 8002916:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	4b88      	ldr	r3, [pc, #544]	; (8002b40 <HAL_RCC_OscConfig+0xc48>)
 800291e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002920:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002924:	2102      	movs	r1, #2
 8002926:	6011      	str	r1, [r2, #0]
 8002928:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800292c:	6812      	ldr	r2, [r2, #0]
 800292e:	fa92 f1a2 	rbit	r1, r2
 8002932:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002936:	6011      	str	r1, [r2, #0]
  return(result);
 8002938:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800293c:	6812      	ldr	r2, [r2, #0]
 800293e:	fab2 f282 	clz	r2, r2
 8002942:	b252      	sxtb	r2, r2
 8002944:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002948:	b252      	sxtb	r2, r2
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	f002 021f 	and.w	r2, r2, #31
 8002950:	2101      	movs	r1, #1
 8002952:	fa01 f202 	lsl.w	r2, r1, r2
 8002956:	4013      	ands	r3, r2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d19f      	bne.n	800289c <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800295c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002960:	2b01      	cmp	r3, #1
 8002962:	d105      	bne.n	8002970 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002964:	4b76      	ldr	r3, [pc, #472]	; (8002b40 <HAL_RCC_OscConfig+0xc48>)
 8002966:	69db      	ldr	r3, [r3, #28]
 8002968:	4a75      	ldr	r2, [pc, #468]	; (8002b40 <HAL_RCC_OscConfig+0xc48>)
 800296a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800296e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002970:	1d3b      	adds	r3, r7, #4
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 81a4 	beq.w	8002cc4 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800297c:	4b70      	ldr	r3, [pc, #448]	; (8002b40 <HAL_RCC_OscConfig+0xc48>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f003 030c 	and.w	r3, r3, #12
 8002984:	2b08      	cmp	r3, #8
 8002986:	f000 819b 	beq.w	8002cc0 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800298a:	1d3b      	adds	r3, r7, #4
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	69db      	ldr	r3, [r3, #28]
 8002990:	2b02      	cmp	r3, #2
 8002992:	f040 8113 	bne.w	8002bbc <HAL_RCC_OscConfig+0xcc4>
 8002996:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800299a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800299e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	fa93 f2a3 	rbit	r2, r3
 80029aa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80029ae:	601a      	str	r2, [r3, #0]
  return(result);
 80029b0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80029b4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b6:	fab3 f383 	clz	r3, r3
 80029ba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029be:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	461a      	mov	r2, r3
 80029c6:	2300      	movs	r3, #0
 80029c8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ca:	f7fe f947 	bl	8000c5c <HAL_GetTick>
 80029ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029d2:	e009      	b.n	80029e8 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d4:	f7fe f942 	bl	8000c5c <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e16e      	b.n	8002cc6 <HAL_RCC_OscConfig+0xdce>
 80029e8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80029ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	fa93 f2a3 	rbit	r2, r3
 80029fc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002a00:	601a      	str	r2, [r3, #0]
  return(result);
 8002a02:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002a06:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a08:	fab3 f383 	clz	r3, r3
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	095b      	lsrs	r3, r3, #5
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	f043 0301 	orr.w	r3, r3, #1
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d102      	bne.n	8002a22 <HAL_RCC_OscConfig+0xb2a>
 8002a1c:	4b48      	ldr	r3, [pc, #288]	; (8002b40 <HAL_RCC_OscConfig+0xc48>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	e01b      	b.n	8002a5a <HAL_RCC_OscConfig+0xb62>
 8002a22:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002a26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	fa93 f2a3 	rbit	r2, r3
 8002a36:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002a40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	fa93 f2a3 	rbit	r2, r3
 8002a50:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	4b3a      	ldr	r3, [pc, #232]	; (8002b40 <HAL_RCC_OscConfig+0xc48>)
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002a5e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a62:	6011      	str	r1, [r2, #0]
 8002a64:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002a68:	6812      	ldr	r2, [r2, #0]
 8002a6a:	fa92 f1a2 	rbit	r1, r2
 8002a6e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002a72:	6011      	str	r1, [r2, #0]
  return(result);
 8002a74:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002a78:	6812      	ldr	r2, [r2, #0]
 8002a7a:	fab2 f282 	clz	r2, r2
 8002a7e:	b252      	sxtb	r2, r2
 8002a80:	f042 0220 	orr.w	r2, r2, #32
 8002a84:	b252      	sxtb	r2, r2
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	f002 021f 	and.w	r2, r2, #31
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a92:	4013      	ands	r3, r2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d19d      	bne.n	80029d4 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a98:	4b29      	ldr	r3, [pc, #164]	; (8002b40 <HAL_RCC_OscConfig+0xc48>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002aa0:	1d3b      	adds	r3, r7, #4
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002aa6:	1d3b      	adds	r3, r7, #4
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	430b      	orrs	r3, r1
 8002aae:	4924      	ldr	r1, [pc, #144]	; (8002b40 <HAL_RCC_OscConfig+0xc48>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	604b      	str	r3, [r1, #4]
 8002ab4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002ab8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002abc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	fa93 f2a3 	rbit	r2, r3
 8002ac8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002acc:	601a      	str	r2, [r3, #0]
  return(result);
 8002ace:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002ad2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ad4:	fab3 f383 	clz	r3, r3
 8002ad8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002adc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae8:	f7fe f8b8 	bl	8000c5c <HAL_GetTick>
 8002aec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002af0:	e009      	b.n	8002b06 <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af2:	f7fe f8b3 	bl	8000c5c <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e0df      	b.n	8002cc6 <HAL_RCC_OscConfig+0xdce>
 8002b06:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002b0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b10:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	fa93 f2a3 	rbit	r2, r3
 8002b1a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002b1e:	601a      	str	r2, [r3, #0]
  return(result);
 8002b20:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002b24:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b26:	fab3 f383 	clz	r3, r3
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	095b      	lsrs	r3, r3, #5
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	f043 0301 	orr.w	r3, r3, #1
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d104      	bne.n	8002b44 <HAL_RCC_OscConfig+0xc4c>
 8002b3a:	4b01      	ldr	r3, [pc, #4]	; (8002b40 <HAL_RCC_OscConfig+0xc48>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	e01d      	b.n	8002b7c <HAL_RCC_OscConfig+0xc84>
 8002b40:	40021000 	.word	0x40021000
 8002b44:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	fa93 f2a3 	rbit	r2, r3
 8002b58:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002b62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	fa93 f2a3 	rbit	r2, r3
 8002b72:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	4b55      	ldr	r3, [pc, #340]	; (8002cd0 <HAL_RCC_OscConfig+0xdd8>)
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002b80:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b84:	6011      	str	r1, [r2, #0]
 8002b86:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002b8a:	6812      	ldr	r2, [r2, #0]
 8002b8c:	fa92 f1a2 	rbit	r1, r2
 8002b90:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002b94:	6011      	str	r1, [r2, #0]
  return(result);
 8002b96:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002b9a:	6812      	ldr	r2, [r2, #0]
 8002b9c:	fab2 f282 	clz	r2, r2
 8002ba0:	b252      	sxtb	r2, r2
 8002ba2:	f042 0220 	orr.w	r2, r2, #32
 8002ba6:	b252      	sxtb	r2, r2
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	f002 021f 	and.w	r2, r2, #31
 8002bae:	2101      	movs	r1, #1
 8002bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d09b      	beq.n	8002af2 <HAL_RCC_OscConfig+0xbfa>
 8002bba:	e083      	b.n	8002cc4 <HAL_RCC_OscConfig+0xdcc>
 8002bbc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002bc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002bc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	fa93 f2a3 	rbit	r2, r3
 8002bd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002bd4:	601a      	str	r2, [r3, #0]
  return(result);
 8002bd6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002bda:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bdc:	fab3 f383 	clz	r3, r3
 8002be0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002be4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	461a      	mov	r2, r3
 8002bec:	2300      	movs	r3, #0
 8002bee:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf0:	f7fe f834 	bl	8000c5c <HAL_GetTick>
 8002bf4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bf8:	e009      	b.n	8002c0e <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bfa:	f7fe f82f 	bl	8000c5c <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e05b      	b.n	8002cc6 <HAL_RCC_OscConfig+0xdce>
 8002c0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	fa93 f2a3 	rbit	r2, r3
 8002c22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c26:	601a      	str	r2, [r3, #0]
  return(result);
 8002c28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c2c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c2e:	fab3 f383 	clz	r3, r3
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	095b      	lsrs	r3, r3, #5
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d102      	bne.n	8002c48 <HAL_RCC_OscConfig+0xd50>
 8002c42:	4b23      	ldr	r3, [pc, #140]	; (8002cd0 <HAL_RCC_OscConfig+0xdd8>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	e01b      	b.n	8002c80 <HAL_RCC_OscConfig+0xd88>
 8002c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	fa93 f2a3 	rbit	r2, r3
 8002c5c:	f107 0320 	add.w	r3, r7, #32
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	f107 031c 	add.w	r3, r7, #28
 8002c66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	f107 031c 	add.w	r3, r7, #28
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	fa93 f2a3 	rbit	r2, r3
 8002c76:	f107 0318 	add.w	r3, r7, #24
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	4b14      	ldr	r3, [pc, #80]	; (8002cd0 <HAL_RCC_OscConfig+0xdd8>)
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	f107 0214 	add.w	r2, r7, #20
 8002c84:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c88:	6011      	str	r1, [r2, #0]
 8002c8a:	f107 0214 	add.w	r2, r7, #20
 8002c8e:	6812      	ldr	r2, [r2, #0]
 8002c90:	fa92 f1a2 	rbit	r1, r2
 8002c94:	f107 0210 	add.w	r2, r7, #16
 8002c98:	6011      	str	r1, [r2, #0]
  return(result);
 8002c9a:	f107 0210 	add.w	r2, r7, #16
 8002c9e:	6812      	ldr	r2, [r2, #0]
 8002ca0:	fab2 f282 	clz	r2, r2
 8002ca4:	b252      	sxtb	r2, r2
 8002ca6:	f042 0220 	orr.w	r2, r2, #32
 8002caa:	b252      	sxtb	r2, r2
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	f002 021f 	and.w	r2, r2, #31
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb8:	4013      	ands	r3, r2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d19d      	bne.n	8002bfa <HAL_RCC_OscConfig+0xd02>
 8002cbe:	e001      	b.n	8002cc4 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e000      	b.n	8002cc6 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40021000 	.word	0x40021000

08002cd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b09e      	sub	sp, #120	; 0x78
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e164      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cec:	4b92      	ldr	r3, [pc, #584]	; (8002f38 <HAL_RCC_ClockConfig+0x264>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d910      	bls.n	8002d1c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfa:	4b8f      	ldr	r3, [pc, #572]	; (8002f38 <HAL_RCC_ClockConfig+0x264>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f023 0207 	bic.w	r2, r3, #7
 8002d02:	498d      	ldr	r1, [pc, #564]	; (8002f38 <HAL_RCC_ClockConfig+0x264>)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0a:	4b8b      	ldr	r3, [pc, #556]	; (8002f38 <HAL_RCC_ClockConfig+0x264>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d001      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e14c      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d008      	beq.n	8002d3a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d28:	4b84      	ldr	r3, [pc, #528]	; (8002f3c <HAL_RCC_ClockConfig+0x268>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	4981      	ldr	r1, [pc, #516]	; (8002f3c <HAL_RCC_ClockConfig+0x268>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 80df 	beq.w	8002f06 <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d13d      	bne.n	8002dcc <HAL_RCC_ClockConfig+0xf8>
 8002d50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d54:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d58:	fa93 f3a3 	rbit	r3, r3
 8002d5c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8002d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d60:	fab3 f383 	clz	r3, r3
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	095b      	lsrs	r3, r3, #5
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	f043 0301 	orr.w	r3, r3, #1
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d102      	bne.n	8002d7a <HAL_RCC_ClockConfig+0xa6>
 8002d74:	4b71      	ldr	r3, [pc, #452]	; (8002f3c <HAL_RCC_ClockConfig+0x268>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	e00f      	b.n	8002d9a <HAL_RCC_ClockConfig+0xc6>
 8002d7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d7e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d82:	fa93 f3a3 	rbit	r3, r3
 8002d86:	667b      	str	r3, [r7, #100]	; 0x64
 8002d88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d8c:	663b      	str	r3, [r7, #96]	; 0x60
 8002d8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d90:	fa93 f3a3 	rbit	r3, r3
 8002d94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d96:	4b69      	ldr	r3, [pc, #420]	; (8002f3c <HAL_RCC_ClockConfig+0x268>)
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d9e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002da0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002da2:	fa92 f2a2 	rbit	r2, r2
 8002da6:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8002da8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002daa:	fab2 f282 	clz	r2, r2
 8002dae:	b252      	sxtb	r2, r2
 8002db0:	f042 0220 	orr.w	r2, r2, #32
 8002db4:	b252      	sxtb	r2, r2
 8002db6:	b2d2      	uxtb	r2, r2
 8002db8:	f002 021f 	and.w	r2, r2, #31
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	fa01 f202 	lsl.w	r2, r1, r2
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d17d      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e0f4      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d13d      	bne.n	8002e50 <HAL_RCC_ClockConfig+0x17c>
 8002dd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dd8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ddc:	fa93 f3a3 	rbit	r3, r3
 8002de0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8002de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de4:	fab3 f383 	clz	r3, r3
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	095b      	lsrs	r3, r3, #5
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	f043 0301 	orr.w	r3, r3, #1
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d102      	bne.n	8002dfe <HAL_RCC_ClockConfig+0x12a>
 8002df8:	4b50      	ldr	r3, [pc, #320]	; (8002f3c <HAL_RCC_ClockConfig+0x268>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	e00f      	b.n	8002e1e <HAL_RCC_ClockConfig+0x14a>
 8002dfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e02:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e06:	fa93 f3a3 	rbit	r3, r3
 8002e0a:	647b      	str	r3, [r7, #68]	; 0x44
 8002e0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e10:	643b      	str	r3, [r7, #64]	; 0x40
 8002e12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e14:	fa93 f3a3 	rbit	r3, r3
 8002e18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e1a:	4b48      	ldr	r3, [pc, #288]	; (8002f3c <HAL_RCC_ClockConfig+0x268>)
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e22:	63ba      	str	r2, [r7, #56]	; 0x38
 8002e24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e26:	fa92 f2a2 	rbit	r2, r2
 8002e2a:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 8002e2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e2e:	fab2 f282 	clz	r2, r2
 8002e32:	b252      	sxtb	r2, r2
 8002e34:	f042 0220 	orr.w	r2, r2, #32
 8002e38:	b252      	sxtb	r2, r2
 8002e3a:	b2d2      	uxtb	r2, r2
 8002e3c:	f002 021f 	and.w	r2, r2, #31
 8002e40:	2101      	movs	r1, #1
 8002e42:	fa01 f202 	lsl.w	r2, r1, r2
 8002e46:	4013      	ands	r3, r2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d13b      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e0b2      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x2e2>
 8002e50:	2302      	movs	r3, #2
 8002e52:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e56:	fa93 f3a3 	rbit	r3, r3
 8002e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e5e:	fab3 f383 	clz	r3, r3
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	095b      	lsrs	r3, r3, #5
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d102      	bne.n	8002e78 <HAL_RCC_ClockConfig+0x1a4>
 8002e72:	4b32      	ldr	r3, [pc, #200]	; (8002f3c <HAL_RCC_ClockConfig+0x268>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	e00d      	b.n	8002e94 <HAL_RCC_ClockConfig+0x1c0>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7e:	fa93 f3a3 	rbit	r3, r3
 8002e82:	627b      	str	r3, [r7, #36]	; 0x24
 8002e84:	2302      	movs	r3, #2
 8002e86:	623b      	str	r3, [r7, #32]
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	fa93 f3a3 	rbit	r3, r3
 8002e8e:	61fb      	str	r3, [r7, #28]
 8002e90:	4b2a      	ldr	r3, [pc, #168]	; (8002f3c <HAL_RCC_ClockConfig+0x268>)
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	2202      	movs	r2, #2
 8002e96:	61ba      	str	r2, [r7, #24]
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	fa92 f2a2 	rbit	r2, r2
 8002e9e:	617a      	str	r2, [r7, #20]
  return(result);
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	fab2 f282 	clz	r2, r2
 8002ea6:	b252      	sxtb	r2, r2
 8002ea8:	f042 0220 	orr.w	r2, r2, #32
 8002eac:	b252      	sxtb	r2, r2
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	f002 021f 	and.w	r2, r2, #31
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8002eba:	4013      	ands	r3, r2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e078      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ec4:	4b1d      	ldr	r3, [pc, #116]	; (8002f3c <HAL_RCC_ClockConfig+0x268>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f023 0203 	bic.w	r2, r3, #3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	491a      	ldr	r1, [pc, #104]	; (8002f3c <HAL_RCC_ClockConfig+0x268>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ed6:	f7fd fec1 	bl	8000c5c <HAL_GetTick>
 8002eda:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002edc:	e00a      	b.n	8002ef4 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ede:	f7fd febd 	bl	8000c5c <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e060      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ef4:	4b11      	ldr	r3, [pc, #68]	; (8002f3c <HAL_RCC_ClockConfig+0x268>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f003 020c 	and.w	r2, r3, #12
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d1eb      	bne.n	8002ede <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f06:	4b0c      	ldr	r3, [pc, #48]	; (8002f38 <HAL_RCC_ClockConfig+0x264>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d215      	bcs.n	8002f40 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f14:	4b08      	ldr	r3, [pc, #32]	; (8002f38 <HAL_RCC_ClockConfig+0x264>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f023 0207 	bic.w	r2, r3, #7
 8002f1c:	4906      	ldr	r1, [pc, #24]	; (8002f38 <HAL_RCC_ClockConfig+0x264>)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f24:	4b04      	ldr	r3, [pc, #16]	; (8002f38 <HAL_RCC_ClockConfig+0x264>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d006      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e03f      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x2e2>
 8002f36:	bf00      	nop
 8002f38:	40022000 	.word	0x40022000
 8002f3c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d008      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f4c:	4b1c      	ldr	r3, [pc, #112]	; (8002fc0 <HAL_RCC_ClockConfig+0x2ec>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	4919      	ldr	r1, [pc, #100]	; (8002fc0 <HAL_RCC_ClockConfig+0x2ec>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d009      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f6a:	4b15      	ldr	r3, [pc, #84]	; (8002fc0 <HAL_RCC_ClockConfig+0x2ec>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	4911      	ldr	r1, [pc, #68]	; (8002fc0 <HAL_RCC_ClockConfig+0x2ec>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f7e:	f000 f825 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 8002f82:	4601      	mov	r1, r0
 8002f84:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <HAL_RCC_ClockConfig+0x2ec>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f8c:	23f0      	movs	r3, #240	; 0xf0
 8002f8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	fa93 f3a3 	rbit	r3, r3
 8002f96:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	fab3 f383 	clz	r3, r3
 8002f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa2:	4a08      	ldr	r2, [pc, #32]	; (8002fc4 <HAL_RCC_ClockConfig+0x2f0>)
 8002fa4:	5cd3      	ldrb	r3, [r2, r3]
 8002fa6:	fa21 f303 	lsr.w	r3, r1, r3
 8002faa:	4a07      	ldr	r2, [pc, #28]	; (8002fc8 <HAL_RCC_ClockConfig+0x2f4>)
 8002fac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002fae:	2000      	movs	r0, #0
 8002fb0:	f7fd fe10 	bl	8000bd4 <HAL_InitTick>
  
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3778      	adds	r7, #120	; 0x78
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	08006570 	.word	0x08006570
 8002fc8:	2000000c 	.word	0x2000000c

08002fcc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b08b      	sub	sp, #44	; 0x2c
 8002fd0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61fb      	str	r3, [r7, #28]
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61bb      	str	r3, [r7, #24]
 8002fda:	2300      	movs	r3, #0
 8002fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8002fde:	2300      	movs	r3, #0
 8002fe0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002fe6:	4b29      	ldr	r3, [pc, #164]	; (800308c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	f003 030c 	and.w	r3, r3, #12
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d002      	beq.n	8002ffc <HAL_RCC_GetSysClockFreq+0x30>
 8002ff6:	2b08      	cmp	r3, #8
 8002ff8:	d003      	beq.n	8003002 <HAL_RCC_GetSysClockFreq+0x36>
 8002ffa:	e03c      	b.n	8003076 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ffc:	4b24      	ldr	r3, [pc, #144]	; (8003090 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ffe:	623b      	str	r3, [r7, #32]
      break;
 8003000:	e03c      	b.n	800307c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003008:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800300c:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	fa93 f3a3 	rbit	r3, r3
 8003014:	607b      	str	r3, [r7, #4]
  return(result);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	fab3 f383 	clz	r3, r3
 800301c:	fa22 f303 	lsr.w	r3, r2, r3
 8003020:	4a1c      	ldr	r2, [pc, #112]	; (8003094 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003022:	5cd3      	ldrb	r3, [r2, r3]
 8003024:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003026:	4b19      	ldr	r3, [pc, #100]	; (800308c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302a:	f003 020f 	and.w	r2, r3, #15
 800302e:	230f      	movs	r3, #15
 8003030:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	fa93 f3a3 	rbit	r3, r3
 8003038:	60fb      	str	r3, [r7, #12]
  return(result);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	fab3 f383 	clz	r3, r3
 8003040:	fa22 f303 	lsr.w	r3, r2, r3
 8003044:	4a14      	ldr	r2, [pc, #80]	; (8003098 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003046:	5cd3      	ldrb	r3, [r2, r3]
 8003048:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d008      	beq.n	8003066 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8003054:	4a0e      	ldr	r2, [pc, #56]	; (8003090 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	fbb2 f2f3 	udiv	r2, r2, r3
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	fb02 f303 	mul.w	r3, r2, r3
 8003062:	627b      	str	r3, [r7, #36]	; 0x24
 8003064:	e004      	b.n	8003070 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	4a0c      	ldr	r2, [pc, #48]	; (800309c <HAL_RCC_GetSysClockFreq+0xd0>)
 800306a:	fb02 f303 	mul.w	r3, r2, r3
 800306e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003072:	623b      	str	r3, [r7, #32]
      break;
 8003074:	e002      	b.n	800307c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003076:	4b06      	ldr	r3, [pc, #24]	; (8003090 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003078:	623b      	str	r3, [r7, #32]
      break;
 800307a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800307c:	6a3b      	ldr	r3, [r7, #32]
}
 800307e:	4618      	mov	r0, r3
 8003080:	372c      	adds	r7, #44	; 0x2c
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	40021000 	.word	0x40021000
 8003090:	007a1200 	.word	0x007a1200
 8003094:	08006550 	.word	0x08006550
 8003098:	08006560 	.word	0x08006560
 800309c:	003d0900 	.word	0x003d0900

080030a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030a4:	4b03      	ldr	r3, [pc, #12]	; (80030b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80030a6:	681b      	ldr	r3, [r3, #0]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	2000000c 	.word	0x2000000c

080030b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80030be:	f7ff ffef 	bl	80030a0 <HAL_RCC_GetHCLKFreq>
 80030c2:	4601      	mov	r1, r0
 80030c4:	4b0b      	ldr	r3, [pc, #44]	; (80030f4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80030cc:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80030d0:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	fa93 f3a3 	rbit	r3, r3
 80030d8:	603b      	str	r3, [r7, #0]
  return(result);
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	fab3 f383 	clz	r3, r3
 80030e0:	fa22 f303 	lsr.w	r3, r2, r3
 80030e4:	4a04      	ldr	r2, [pc, #16]	; (80030f8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80030e6:	5cd3      	ldrb	r3, [r2, r3]
 80030e8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80030ec:	4618      	mov	r0, r3
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40021000 	.word	0x40021000
 80030f8:	08006580 	.word	0x08006580

080030fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003102:	f7ff ffcd 	bl	80030a0 <HAL_RCC_GetHCLKFreq>
 8003106:	4601      	mov	r1, r0
 8003108:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8003110:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003114:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	fa93 f3a3 	rbit	r3, r3
 800311c:	603b      	str	r3, [r7, #0]
  return(result);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	fab3 f383 	clz	r3, r3
 8003124:	fa22 f303 	lsr.w	r3, r2, r3
 8003128:	4a04      	ldr	r2, [pc, #16]	; (800313c <HAL_RCC_GetPCLK2Freq+0x40>)
 800312a:	5cd3      	ldrb	r3, [r2, r3]
 800312c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003130:	4618      	mov	r0, r3
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	40021000 	.word	0x40021000
 800313c:	08006580 	.word	0x08006580

08003140 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e043      	b.n	80031da <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d106      	bne.n	800316c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f001 f83c 	bl	80041e4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2224      	movs	r2, #36	; 0x24
 8003170:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 0201 	bic.w	r2, r2, #1
 8003182:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 f9f9 	bl	800357c <UART_SetConfig>
 800318a:	4603      	mov	r3, r0
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e022      	b.n	80031da <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	2b00      	cmp	r3, #0
 800319a:	d002      	beq.n	80031a2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 fb53 	bl	8003848 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031c0:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f042 0201 	orr.w	r2, r2, #1
 80031d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 fbda 	bl	800398c <UART_CheckIdleState>
 80031d8:	4603      	mov	r3, r0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b088      	sub	sp, #32
 80031e6:	af02      	add	r7, sp, #8
 80031e8:	60f8      	str	r0, [r7, #12]
 80031ea:	60b9      	str	r1, [r7, #8]
 80031ec:	603b      	str	r3, [r7, #0]
 80031ee:	4613      	mov	r3, r2
 80031f0:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b20      	cmp	r3, #32
 8003200:	d177      	bne.n	80032f2 <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d002      	beq.n	800320e <HAL_UART_Transmit+0x2c>
 8003208:	88fb      	ldrh	r3, [r7, #6]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e070      	b.n	80032f4 <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8003218:	2b01      	cmp	r3, #1
 800321a:	d101      	bne.n	8003220 <HAL_UART_Transmit+0x3e>
 800321c:	2302      	movs	r3, #2
 800321e:	e069      	b.n	80032f4 <HAL_UART_Transmit+0x112>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2221      	movs	r2, #33	; 0x21
 8003232:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003236:	f7fd fd11 	bl	8000c5c <HAL_GetTick>
 800323a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	88fa      	ldrh	r2, [r7, #6]
 8003240:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	88fa      	ldrh	r2, [r7, #6]
 8003248:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 800324c:	e034      	b.n	80032b8 <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003254:	b29b      	uxth	r3, r3
 8003256:	3b01      	subs	r3, #1
 8003258:	b29a      	uxth	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	2200      	movs	r2, #0
 8003268:	2180      	movs	r1, #128	; 0x80
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 fbd7 	bl	8003a1e <UART_WaitOnFlagUntilTimeout>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e03c      	b.n	80032f4 <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003282:	d111      	bne.n	80032a8 <HAL_UART_Transmit+0xc6>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10d      	bne.n	80032a8 <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	881a      	ldrh	r2, [r3, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800329c:	b292      	uxth	r2, r2
 800329e:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	3302      	adds	r3, #2
 80032a4:	60bb      	str	r3, [r7, #8]
 80032a6:	e007      	b.n	80032b8 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	1c5a      	adds	r2, r3, #1
 80032ac:	60ba      	str	r2, [r7, #8]
 80032ae:	781a      	ldrb	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	b292      	uxth	r2, r2
 80032b6:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80032be:	b29b      	uxth	r3, r3
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1c4      	bne.n	800324e <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	2200      	movs	r2, #0
 80032cc:	2140      	movs	r1, #64	; 0x40
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 fba5 	bl	8003a1e <UART_WaitOnFlagUntilTimeout>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e00a      	b.n	80032f4 <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2220      	movs	r2, #32
 80032e2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 80032ee:	2300      	movs	r3, #0
 80032f0:	e000      	b.n	80032f4 <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 80032f2:	2302      	movs	r3, #2
  }
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3718      	adds	r7, #24
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	617b      	str	r3, [r7, #20]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	613b      	str	r3, [r7, #16]
  uint32_t cr3its;
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f003 030f 	and.w	r3, r3, #15
 800331a:	60fb      	str	r3, [r7, #12]
  if (errorflags == RESET)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10d      	bne.n	800333e <HAL_UART_IRQHandler+0x42>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f003 0320 	and.w	r3, r3, #32
 8003328:	2b00      	cmp	r3, #0
 800332a:	d008      	beq.n	800333e <HAL_UART_IRQHandler+0x42>
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	f003 0320 	and.w	r3, r3, #32
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <HAL_UART_IRQHandler+0x42>
    {
      UART_Receive_IT(huart);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 fc5f 	bl	8003bfa <UART_Receive_IT>
      return;
 800333c:	e0fa      	b.n	8003534 <HAL_UART_IRQHandler+0x238>
    }
  }  

  /* If some errors occur */
  cr3its = READ_REG(huart->Instance->CR3);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	60bb      	str	r3, [r7, #8]
  if(   (errorflags != RESET)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 80ba 	beq.w	80034c2 <HAL_UART_IRQHandler+0x1c6>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	2b00      	cmp	r3, #0
 8003356:	d105      	bne.n	8003364 <HAL_UART_IRQHandler+0x68>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 80af 	beq.w	80034c2 <HAL_UART_IRQHandler+0x1c6>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00e      	beq.n	800338c <HAL_UART_IRQHandler+0x90>
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003374:	2b00      	cmp	r3, #0
 8003376:	d009      	beq.n	800338c <HAL_UART_IRQHandler+0x90>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2201      	movs	r2, #1
 800337e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003384:	f043 0201 	orr.w	r2, r3, #1
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00e      	beq.n	80033b4 <HAL_UART_IRQHandler+0xb8>
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b00      	cmp	r3, #0
 800339e:	d009      	beq.n	80033b4 <HAL_UART_IRQHandler+0xb8>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2202      	movs	r2, #2
 80033a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033ac:	f043 0204 	orr.w	r2, r3, #4
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f003 0304 	and.w	r3, r3, #4
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00e      	beq.n	80033dc <HAL_UART_IRQHandler+0xe0>
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d009      	beq.n	80033dc <HAL_UART_IRQHandler+0xe0>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2204      	movs	r2, #4
 80033ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033d4:	f043 0202 	orr.w	r2, r3, #2
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    
    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f003 0308 	and.w	r3, r3, #8
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d013      	beq.n	800340e <HAL_UART_IRQHandler+0x112>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	f003 0320 	and.w	r3, r3, #32
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d104      	bne.n	80033fa <HAL_UART_IRQHandler+0xfe>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d009      	beq.n	800340e <HAL_UART_IRQHandler+0x112>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2208      	movs	r2, #8
 8003400:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003406:	f043 0208 	orr.w	r2, r3, #8
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003412:	2b00      	cmp	r3, #0
 8003414:	f000 808d 	beq.w	8003532 <HAL_UART_IRQHandler+0x236>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f003 0320 	and.w	r3, r3, #32
 800341e:	2b00      	cmp	r3, #0
 8003420:	d007      	beq.n	8003432 <HAL_UART_IRQHandler+0x136>
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f003 0320 	and.w	r3, r3, #32
 8003428:	2b00      	cmp	r3, #0
 800342a:	d002      	beq.n	8003432 <HAL_UART_IRQHandler+0x136>
      {
        UART_Receive_IT(huart);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 fbe4 	bl	8003bfa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003436:	f003 0308 	and.w	r3, r3, #8
 800343a:	2b00      	cmp	r3, #0
 800343c:	d106      	bne.n	800344c <HAL_UART_IRQHandler+0x150>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003448:	2b40      	cmp	r3, #64	; 0x40
 800344a:	d131      	bne.n	80034b0 <HAL_UART_IRQHandler+0x1b4>
      {  
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 fb30 	bl	8003ab2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345c:	2b40      	cmp	r3, #64	; 0x40
 800345e:	d123      	bne.n	80034a8 <HAL_UART_IRQHandler+0x1ac>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689a      	ldr	r2, [r3, #8]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800346e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003474:	2b00      	cmp	r3, #0
 8003476:	d013      	beq.n	80034a0 <HAL_UART_IRQHandler+0x1a4>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800347c:	4a2f      	ldr	r2, [pc, #188]	; (800353c <HAL_UART_IRQHandler+0x240>)
 800347e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003484:	4618      	mov	r0, r3
 8003486:	f7fe fb6a 	bl	8001b5e <HAL_DMA_Abort_IT>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d016      	beq.n	80034be <HAL_UART_IRQHandler+0x1c2>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800349a:	4610      	mov	r0, r2
 800349c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800349e:	e00e      	b.n	80034be <HAL_UART_IRQHandler+0x1c2>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f861 	bl	8003568 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034a6:	e00a      	b.n	80034be <HAL_UART_IRQHandler+0x1c2>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f85d 	bl	8003568 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034ae:	e006      	b.n	80034be <HAL_UART_IRQHandler+0x1c2>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f859 	bl	8003568 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	66da      	str	r2, [r3, #108]	; 0x6c
      }
    }
    return;
 80034bc:	e039      	b.n	8003532 <HAL_UART_IRQHandler+0x236>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034be:	bf00      	nop
    return;
 80034c0:	e037      	b.n	8003532 <HAL_UART_IRQHandler+0x236>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d015      	beq.n	80034f8 <HAL_UART_IRQHandler+0x1fc>
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d010      	beq.n	80034f8 <HAL_UART_IRQHandler+0x1fc>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80034de:	621a      	str	r2, [r3, #32]
    /* Set the UART state ready to be able to start again the process */
    huart->gState  = HAL_UART_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2220      	movs	r2, #32
 80034e4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2220      	movs	r2, #32
 80034ec:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    HAL_UARTEx_WakeupCallback(huart);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 fbec 	bl	8003cce <HAL_UARTEx_WakeupCallback>
    return;
 80034f6:	e01d      	b.n	8003534 <HAL_UART_IRQHandler+0x238>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d008      	beq.n	8003514 <HAL_UART_IRQHandler+0x218>
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <HAL_UART_IRQHandler+0x218>
  {
    UART_Transmit_IT(huart);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 fb04 	bl	8003b1a <UART_Transmit_IT>
    return;
 8003512:	e00f      	b.n	8003534 <HAL_UART_IRQHandler+0x238>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00a      	beq.n	8003534 <HAL_UART_IRQHandler+0x238>
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003524:	2b00      	cmp	r3, #0
 8003526:	d005      	beq.n	8003534 <HAL_UART_IRQHandler+0x238>
  {
    UART_EndTransmit_IT(huart);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 fb4e 	bl	8003bca <UART_EndTransmit_IT>
    return;
 800352e:	bf00      	nop
 8003530:	e000      	b.n	8003534 <HAL_UART_IRQHandler+0x238>
    return;
 8003532:	bf00      	nop
  }

}
 8003534:	3718      	adds	r7, #24
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	08003aef 	.word	0x08003aef

08003540 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_UART_RxCpltCallback>:
  * @brief Rx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <HAL_UART_ErrorCallback>:
  * @brief UART error callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8003584:	2300      	movs	r3, #0
 8003586:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003588:	2310      	movs	r3, #16
 800358a:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 800358c:	2300      	movs	r3, #0
 800358e:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8003590:	2300      	movs	r3, #0
 8003592:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003594:	2300      	movs	r3, #0
 8003596:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	431a      	orrs	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	4b9f      	ldr	r3, [pc, #636]	; (8003834 <UART_SetConfig+0x2b8>)
 80035b8:	4013      	ands	r3, r2
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6812      	ldr	r2, [r2, #0]
 80035be:	68f9      	ldr	r1, [r7, #12]
 80035c0:	430b      	orrs	r3, r1
 80035c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68da      	ldr	r2, [r3, #12]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	699a      	ldr	r2, [r3, #24]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a8e      	ldr	r2, [pc, #568]	; (8003838 <UART_SetConfig+0x2bc>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d121      	bne.n	8003648 <UART_SetConfig+0xcc>
 8003604:	4b8d      	ldr	r3, [pc, #564]	; (800383c <UART_SetConfig+0x2c0>)
 8003606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003608:	f003 0303 	and.w	r3, r3, #3
 800360c:	2b03      	cmp	r3, #3
 800360e:	d817      	bhi.n	8003640 <UART_SetConfig+0xc4>
 8003610:	a201      	add	r2, pc, #4	; (adr r2, 8003618 <UART_SetConfig+0x9c>)
 8003612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003616:	bf00      	nop
 8003618:	08003629 	.word	0x08003629
 800361c:	08003635 	.word	0x08003635
 8003620:	0800363b 	.word	0x0800363b
 8003624:	0800362f 	.word	0x0800362f
 8003628:	2300      	movs	r3, #0
 800362a:	75fb      	strb	r3, [r7, #23]
 800362c:	e01e      	b.n	800366c <UART_SetConfig+0xf0>
 800362e:	2302      	movs	r3, #2
 8003630:	75fb      	strb	r3, [r7, #23]
 8003632:	e01b      	b.n	800366c <UART_SetConfig+0xf0>
 8003634:	2304      	movs	r3, #4
 8003636:	75fb      	strb	r3, [r7, #23]
 8003638:	e018      	b.n	800366c <UART_SetConfig+0xf0>
 800363a:	2308      	movs	r3, #8
 800363c:	75fb      	strb	r3, [r7, #23]
 800363e:	e015      	b.n	800366c <UART_SetConfig+0xf0>
 8003640:	2310      	movs	r3, #16
 8003642:	75fb      	strb	r3, [r7, #23]
 8003644:	bf00      	nop
 8003646:	e011      	b.n	800366c <UART_SetConfig+0xf0>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a7c      	ldr	r2, [pc, #496]	; (8003840 <UART_SetConfig+0x2c4>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d102      	bne.n	8003658 <UART_SetConfig+0xdc>
 8003652:	2300      	movs	r3, #0
 8003654:	75fb      	strb	r3, [r7, #23]
 8003656:	e009      	b.n	800366c <UART_SetConfig+0xf0>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a79      	ldr	r2, [pc, #484]	; (8003844 <UART_SetConfig+0x2c8>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d102      	bne.n	8003668 <UART_SetConfig+0xec>
 8003662:	2300      	movs	r3, #0
 8003664:	75fb      	strb	r3, [r7, #23]
 8003666:	e001      	b.n	800366c <UART_SetConfig+0xf0>
 8003668:	2310      	movs	r3, #16
 800366a:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003674:	d16f      	bne.n	8003756 <UART_SetConfig+0x1da>
  {
    switch (clocksource)
 8003676:	7dfb      	ldrb	r3, [r7, #23]
 8003678:	2b08      	cmp	r3, #8
 800367a:	d857      	bhi.n	800372c <UART_SetConfig+0x1b0>
 800367c:	a201      	add	r2, pc, #4	; (adr r2, 8003684 <UART_SetConfig+0x108>)
 800367e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003682:	bf00      	nop
 8003684:	080036a9 	.word	0x080036a9
 8003688:	080036c5 	.word	0x080036c5
 800368c:	080036e1 	.word	0x080036e1
 8003690:	0800372d 	.word	0x0800372d
 8003694:	080036fb 	.word	0x080036fb
 8003698:	0800372d 	.word	0x0800372d
 800369c:	0800372d 	.word	0x0800372d
 80036a0:	0800372d 	.word	0x0800372d
 80036a4:	08003717 	.word	0x08003717
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80036a8:	f7ff fd06 	bl	80030b8 <HAL_RCC_GetPCLK1Freq>
 80036ac:	4603      	mov	r3, r0
 80036ae:	005a      	lsls	r2, r3, #1
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	085b      	lsrs	r3, r3, #1
 80036b6:	441a      	add	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c0:	82bb      	strh	r3, [r7, #20]
        break;
 80036c2:	e036      	b.n	8003732 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80036c4:	f7ff fd1a 	bl	80030fc <HAL_RCC_GetPCLK2Freq>
 80036c8:	4603      	mov	r3, r0
 80036ca:	005a      	lsls	r2, r3, #1
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	085b      	lsrs	r3, r3, #1
 80036d2:	441a      	add	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036dc:	82bb      	strh	r3, [r7, #20]
        break;
 80036de:	e028      	b.n	8003732 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	085b      	lsrs	r3, r3, #1
 80036e6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80036ea:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6852      	ldr	r2, [r2, #4]
 80036f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80036f6:	82bb      	strh	r3, [r7, #20]
        break;
 80036f8:	e01b      	b.n	8003732 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80036fa:	f7ff fc67 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 80036fe:	4603      	mov	r3, r0
 8003700:	005a      	lsls	r2, r3, #1
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	085b      	lsrs	r3, r3, #1
 8003708:	441a      	add	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003712:	82bb      	strh	r3, [r7, #20]
        break;
 8003714:	e00d      	b.n	8003732 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	085b      	lsrs	r3, r3, #1
 800371c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	fbb2 f3f3 	udiv	r3, r2, r3
 8003728:	82bb      	strh	r3, [r7, #20]
        break;
 800372a:	e002      	b.n	8003732 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	74fb      	strb	r3, [r7, #19]
        break;
 8003730:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8003732:	8abb      	ldrh	r3, [r7, #20]
 8003734:	f023 030f 	bic.w	r3, r3, #15
 8003738:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800373a:	8abb      	ldrh	r3, [r7, #20]
 800373c:	105b      	asrs	r3, r3, #1
 800373e:	b29b      	uxth	r3, r3
 8003740:	f003 0307 	and.w	r3, r3, #7
 8003744:	b29a      	uxth	r2, r3
 8003746:	897b      	ldrh	r3, [r7, #10]
 8003748:	4313      	orrs	r3, r2
 800374a:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	897a      	ldrh	r2, [r7, #10]
 8003752:	60da      	str	r2, [r3, #12]
 8003754:	e069      	b.n	800382a <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 8003756:	7dfb      	ldrb	r3, [r7, #23]
 8003758:	2b08      	cmp	r3, #8
 800375a:	d863      	bhi.n	8003824 <UART_SetConfig+0x2a8>
 800375c:	a201      	add	r2, pc, #4	; (adr r2, 8003764 <UART_SetConfig+0x1e8>)
 800375e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003762:	bf00      	nop
 8003764:	08003789 	.word	0x08003789
 8003768:	080037a9 	.word	0x080037a9
 800376c:	080037c9 	.word	0x080037c9
 8003770:	08003825 	.word	0x08003825
 8003774:	080037e9 	.word	0x080037e9
 8003778:	08003825 	.word	0x08003825
 800377c:	08003825 	.word	0x08003825
 8003780:	08003825 	.word	0x08003825
 8003784:	08003809 	.word	0x08003809
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003788:	f7ff fc96 	bl	80030b8 <HAL_RCC_GetPCLK1Freq>
 800378c:	4602      	mov	r2, r0
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	085b      	lsrs	r3, r3, #1
 8003794:	441a      	add	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	fbb2 f3f3 	udiv	r3, r2, r3
 800379e:	b29a      	uxth	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	60da      	str	r2, [r3, #12]
        break;
 80037a6:	e040      	b.n	800382a <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80037a8:	f7ff fca8 	bl	80030fc <HAL_RCC_GetPCLK2Freq>
 80037ac:	4602      	mov	r2, r0
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	085b      	lsrs	r3, r3, #1
 80037b4:	441a      	add	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80037be:	b29a      	uxth	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	60da      	str	r2, [r3, #12]
        break;
 80037c6:	e030      	b.n	800382a <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	085b      	lsrs	r3, r3, #1
 80037ce:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80037d2:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	6852      	ldr	r2, [r2, #4]
 80037da:	fbb3 f3f2 	udiv	r3, r3, r2
 80037de:	b29a      	uxth	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	60da      	str	r2, [r3, #12]
        break;
 80037e6:	e020      	b.n	800382a <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80037e8:	f7ff fbf0 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 80037ec:	4602      	mov	r2, r0
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	085b      	lsrs	r3, r3, #1
 80037f4:	441a      	add	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fe:	b29a      	uxth	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	60da      	str	r2, [r3, #12]
        break;
 8003806:	e010      	b.n	800382a <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	085b      	lsrs	r3, r3, #1
 800380e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	fbb2 f3f3 	udiv	r3, r2, r3
 800381a:	b29a      	uxth	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	60da      	str	r2, [r3, #12]
        break;
 8003822:	e002      	b.n	800382a <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	74fb      	strb	r3, [r7, #19]
        break;
 8003828:	bf00      	nop
    }
  }

  return ret;
 800382a:	7cfb      	ldrb	r3, [r7, #19]

}
 800382c:	4618      	mov	r0, r3
 800382e:	3718      	adds	r7, #24
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	efff69f3 	.word	0xefff69f3
 8003838:	40013800 	.word	0x40013800
 800383c:	40021000 	.word	0x40021000
 8003840:	40004400 	.word	0x40004400
 8003844:	40004800 	.word	0x40004800

08003848 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00a      	beq.n	8003872 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00a      	beq.n	8003894 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00a      	beq.n	80038b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	f003 0308 	and.w	r3, r3, #8
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00a      	beq.n	80038d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	430a      	orrs	r2, r1
 80038d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	f003 0310 	and.w	r3, r3, #16
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00a      	beq.n	80038fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fe:	f003 0320 	and.w	r3, r3, #32
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00a      	beq.n	800391c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	430a      	orrs	r2, r1
 800391a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003924:	2b00      	cmp	r3, #0
 8003926:	d01a      	beq.n	800395e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	430a      	orrs	r2, r1
 800393c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003946:	d10a      	bne.n	800395e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	430a      	orrs	r2, r1
 800395c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00a      	beq.n	8003980 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	605a      	str	r2, [r3, #4]
  }
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af02      	add	r7, sp, #8
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003994:	2300      	movs	r3, #0
 8003996:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800399e:	f7fd f95d 	bl	8000c5c <HAL_GetTick>
 80039a2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b08      	cmp	r3, #8
 80039b0:	d10e      	bne.n	80039d0 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039b6:	9300      	str	r3, [sp, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 f82c 	bl	8003a1e <UART_WaitOnFlagUntilTimeout>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e022      	b.n	8003a16 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0304 	and.w	r3, r3, #4
 80039da:	2b04      	cmp	r3, #4
 80039dc:	d10e      	bne.n	80039fc <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039e2:	9300      	str	r3, [sp, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 f816 	bl	8003a1e <UART_WaitOnFlagUntilTimeout>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e00c      	b.n	8003a16 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2220      	movs	r2, #32
 8003a00:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2220      	movs	r2, #32
 8003a08:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b084      	sub	sp, #16
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	60f8      	str	r0, [r7, #12]
 8003a26:	60b9      	str	r1, [r7, #8]
 8003a28:	603b      	str	r3, [r7, #0]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a2e:	e02c      	b.n	8003a8a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a36:	d028      	beq.n	8003a8a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d007      	beq.n	8003a4e <UART_WaitOnFlagUntilTimeout+0x30>
 8003a3e:	f7fd f90d 	bl	8000c5c <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d21d      	bcs.n	8003a8a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a5c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689a      	ldr	r2, [r3, #8]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0201 	bic.w	r2, r2, #1
 8003a6c:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2220      	movs	r2, #32
 8003a72:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e00f      	b.n	8003aaa <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	69da      	ldr	r2, [r3, #28]
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	4013      	ands	r3, r2
 8003a94:	68ba      	ldr	r2, [r7, #8]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	bf0c      	ite	eq
 8003a9a:	2301      	moveq	r3, #1
 8003a9c:	2300      	movne	r3, #0
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	79fb      	ldrb	r3, [r7, #7]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d0c3      	beq.n	8003a30 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b083      	sub	sp, #12
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ac8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0201 	bic.w	r2, r2, #1
 8003ad8:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2220      	movs	r2, #32
 8003ade:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
}
 8003ae2:	bf00      	nop
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b084      	sub	sp, #16
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f7ff fd2b 	bl	8003568 <HAL_UART_ErrorCallback>
}
 8003b12:	bf00      	nop
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <UART_Transmit_IT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b085      	sub	sp, #20
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b21      	cmp	r3, #33	; 0x21
 8003b2c:	d146      	bne.n	8003bbc <UART_Transmit_IT+0xa2>
  {
    if(huart->TxXferCount == 0U)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d111      	bne.n	8003b5e <UART_Transmit_IT+0x44>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b48:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b58:	601a      	str	r2, [r3, #0]

      return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	e02f      	b.n	8003bbe <UART_Transmit_IT+0xa4>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b66:	d114      	bne.n	8003b92 <UART_Transmit_IT+0x78>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d110      	bne.n	8003b92 <UART_Transmit_IT+0x78>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b74:	60fb      	str	r3, [r7, #12]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	881a      	ldrh	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b82:	b292      	uxth	r2, r2
 8003b84:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b8a:	1c9a      	adds	r2, r3, #2
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003b90:	e009      	b.n	8003ba6 <UART_Transmit_IT+0x8c>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b96:	1c59      	adds	r1, r3, #1
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	64d1      	str	r1, [r2, #76]	; 0x4c
 8003b9c:	781a      	ldrb	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	b292      	uxth	r2, r2
 8003ba4:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      huart->TxXferCount--;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	e000      	b.n	8003bbe <UART_Transmit_IT+0xa4>
    }
  }
  else
  {
    return HAL_BUSY;
 8003bbc:	2302      	movs	r3, #2
  }
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b082      	sub	sp, #8
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003be0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2220      	movs	r2, #32
 8003be6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7ff fca8 	bl	8003540 <HAL_UART_TxCpltCallback>

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003bfa:	b590      	push	{r4, r7, lr}
 8003bfc:	b085      	sub	sp, #20
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003c08:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b22      	cmp	r3, #34	; 0x22
 8003c14:	d14e      	bne.n	8003cb4 <UART_Receive_IT+0xba>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003c1c:	81bb      	strh	r3, [r7, #12]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c26:	d112      	bne.n	8003c4e <UART_Receive_IT+0x54>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10e      	bne.n	8003c4e <UART_Receive_IT+0x54>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c34:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(uhdata & uhMask);
 8003c36:	89ba      	ldrh	r2, [r7, #12]
 8003c38:	89fb      	ldrh	r3, [r7, #14]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2U;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c46:	1c9a      	adds	r2, r3, #2
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	655a      	str	r2, [r3, #84]	; 0x54
 8003c4c:	e00b      	b.n	8003c66 <UART_Receive_IT+0x6c>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003c4e:	89bb      	ldrh	r3, [r7, #12]
 8003c50:	b2d9      	uxtb	r1, r3
 8003c52:	89fb      	ldrh	r3, [r7, #14]
 8003c54:	b2da      	uxtb	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5a:	1c5c      	adds	r4, r3, #1
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	6544      	str	r4, [r0, #84]	; 0x54
 8003c60:	400a      	ands	r2, r1
 8003c62:	b2d2      	uxtb	r2, r2
 8003c64:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0U)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	4619      	mov	r1, r3
 8003c76:	f8a2 105a 	strh.w	r1, [r2, #90]	; 0x5a
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d118      	bne.n	8003cb0 <UART_Receive_IT+0xb6>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c8c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 0201 	bic.w	r2, r2, #1
 8003c9c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7ff fc54 	bl	8003554 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8003cac:	2300      	movs	r3, #0
 8003cae:	e00a      	b.n	8003cc6 <UART_Receive_IT+0xcc>
    }

    return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	e008      	b.n	8003cc6 <UART_Receive_IT+0xcc>
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	699a      	ldr	r2, [r3, #24]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f042 0208 	orr.w	r2, r2, #8
 8003cc2:	619a      	str	r2, [r3, #24]

    return HAL_BUSY;
 8003cc4:	2302      	movs	r3, #2
  }
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3714      	adds	r7, #20
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd90      	pop	{r4, r7, pc}

08003cce <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
	...

08003ce4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ce4:	b598      	push	{r3, r4, r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ce8:	f7fc ff5e 	bl	8000ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003cec:	f000 f8a4 	bl	8003e38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003cf0:	f000 f948 	bl	8003f84 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003cf4:	f000 f916 	bl	8003f24 <MX_USART2_UART_Init>
  MX_CAN_Init();
 8003cf8:	f000 f8de 	bl	8003eb8 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  sFilterConfig.FilterBank = 0;
 8003cfc:	4b43      	ldr	r3, [pc, #268]	; (8003e0c <main+0x128>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8003d02:	4b42      	ldr	r3, [pc, #264]	; (8003e0c <main+0x128>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8003d08:	4b40      	ldr	r3, [pc, #256]	; (8003e0c <main+0x128>)
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8003d0e:	4b3f      	ldr	r3, [pc, #252]	; (8003e0c <main+0x128>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8003d14:	4b3d      	ldr	r3, [pc, #244]	; (8003e0c <main+0x128>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8003d1a:	4b3c      	ldr	r3, [pc, #240]	; (8003e0c <main+0x128>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8003d20:	4b3a      	ldr	r3, [pc, #232]	; (8003e0c <main+0x128>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8003d26:	4b39      	ldr	r3, [pc, #228]	; (8003e0c <main+0x128>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation=ENABLE;
 8003d2c:	4b37      	ldr	r3, [pc, #220]	; (8003e0c <main+0x128>)
 8003d2e:	2201      	movs	r2, #1
 8003d30:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank=14;
 8003d32:	4b36      	ldr	r3, [pc, #216]	; (8003e0c <main+0x128>)
 8003d34:	220e      	movs	r2, #14
 8003d36:	625a      	str	r2, [r3, #36]	; 0x24

  if(HAL_CAN_ConfigFilter(&hcan,&sFilterConfig) != HAL_OK)
 8003d38:	4934      	ldr	r1, [pc, #208]	; (8003e0c <main+0x128>)
 8003d3a:	4835      	ldr	r0, [pc, #212]	; (8003e10 <main+0x12c>)
 8003d3c:	f7fd f8b7 	bl	8000eae <HAL_CAN_ConfigFilter>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <main+0x66>
  {
    Error_Handler();
 8003d46:	f000 f9bc 	bl	80040c2 <Error_Handler>
  }
  if(HAL_CAN_Start(&hcan)!=HAL_OK)
 8003d4a:	4831      	ldr	r0, [pc, #196]	; (8003e10 <main+0x12c>)
 8003d4c:	f7fd f979 	bl	8001042 <HAL_CAN_Start>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <main+0x76>
  {
    Error_Handler();
 8003d56:	f000 f9b4 	bl	80040c2 <Error_Handler>
  }

  if(HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8003d5a:	2103      	movs	r1, #3
 8003d5c:	482c      	ldr	r0, [pc, #176]	; (8003e10 <main+0x12c>)
 8003d5e:	f7fd fba2 	bl	80014a6 <HAL_CAN_ActivateNotification>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <main+0x88>
  {
	Error_Handler();
 8003d68:	f000 f9ab 	bl	80040c2 <Error_Handler>
  }
  TxHeader.StdId=(motor_num << 5) + (control_mode);
 8003d6c:	4b29      	ldr	r3, [pc, #164]	; (8003e14 <main+0x130>)
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	015b      	lsls	r3, r3, #5
 8003d72:	4a29      	ldr	r2, [pc, #164]	; (8003e18 <main+0x134>)
 8003d74:	7812      	ldrb	r2, [r2, #0]
 8003d76:	4413      	add	r3, r2
 8003d78:	461a      	mov	r2, r3
 8003d7a:	4b28      	ldr	r3, [pc, #160]	; (8003e1c <main+0x138>)
 8003d7c:	601a      	str	r2, [r3, #0]
  //TxHeader.ExtId=0;
  TxHeader.RTR = 2;//CAN_RTR_DATA;
 8003d7e:	4b27      	ldr	r3, [pc, #156]	; (8003e1c <main+0x138>)
 8003d80:	2202      	movs	r2, #2
 8003d82:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 8003d84:	4b25      	ldr	r3, [pc, #148]	; (8003e1c <main+0x138>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 0x08;
 8003d8a:	4b24      	ldr	r3, [pc, #144]	; (8003e1c <main+0x138>)
 8003d8c:	2208      	movs	r2, #8
 8003d8e:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8003d90:	4b22      	ldr	r3, [pc, #136]	; (8003e1c <main+0x138>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	751a      	strb	r2, [r3, #20]
  TxData[4] = 0;
  TxData[5] = 0;
  TxData[6] = 0;
  TxData[7] = 0;
  */
  TxData[0] = 0;
 8003d96:	4b22      	ldr	r3, [pc, #136]	; (8003e20 <main+0x13c>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0;
 8003d9c:	4b20      	ldr	r3, [pc, #128]	; (8003e20 <main+0x13c>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	705a      	strb	r2, [r3, #1]
  TxData[2] = 0;
 8003da2:	4b1f      	ldr	r3, [pc, #124]	; (8003e20 <main+0x13c>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	709a      	strb	r2, [r3, #2]
  TxData[3] = 0;
 8003da8:	4b1d      	ldr	r3, [pc, #116]	; (8003e20 <main+0x13c>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	70da      	strb	r2, [r3, #3]
  TxData[4] = 0;
 8003dae:	4b1c      	ldr	r3, [pc, #112]	; (8003e20 <main+0x13c>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	711a      	strb	r2, [r3, #4]
  TxData[5] = 0;
 8003db4:	4b1a      	ldr	r3, [pc, #104]	; (8003e20 <main+0x13c>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	715a      	strb	r2, [r3, #5]
  TxData[6] = 0;
 8003dba:	4b19      	ldr	r3, [pc, #100]	; (8003e20 <main+0x13c>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	719a      	strb	r2, [r3, #6]
  TxData[7] = 0;
 8003dc0:	4b17      	ldr	r3, [pc, #92]	; (8003e20 <main+0x13c>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	71da      	strb	r2, [r3, #7]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData,&TxMailbox);
 8003dc6:	4b17      	ldr	r3, [pc, #92]	; (8003e24 <main+0x140>)
 8003dc8:	4a15      	ldr	r2, [pc, #84]	; (8003e20 <main+0x13c>)
 8003dca:	4914      	ldr	r1, [pc, #80]	; (8003e1c <main+0x138>)
 8003dcc:	4810      	ldr	r0, [pc, #64]	; (8003e10 <main+0x12c>)
 8003dce:	f7fd f97c 	bl	80010ca <HAL_CAN_AddTxMessage>
	HAL_Delay(100);
 8003dd2:	2064      	movs	r0, #100	; 0x64
 8003dd4:	f7fc ff4e 	bl	8000c74 <HAL_Delay>
	sprintf(get_pos_data_str,"%f\r\n",bintofloat(get_pos_data));
 8003dd8:	4b13      	ldr	r3, [pc, #76]	; (8003e28 <main+0x144>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f000 f95d 	bl	800409c <bintofloat>
 8003de2:	ee10 3a10 	vmov	r3, s0
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7fc fbae 	bl	8000548 <__aeabi_f2d>
 8003dec:	4603      	mov	r3, r0
 8003dee:	460c      	mov	r4, r1
 8003df0:	461a      	mov	r2, r3
 8003df2:	4623      	mov	r3, r4
 8003df4:	490d      	ldr	r1, [pc, #52]	; (8003e2c <main+0x148>)
 8003df6:	480e      	ldr	r0, [pc, #56]	; (8003e30 <main+0x14c>)
 8003df8:	f000 ffba 	bl	8004d70 <siprintf>
	HAL_UART_Transmit(&huart2,get_pos_data_str,sizeof(get_pos_data_str),0xFFFF);
 8003dfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e00:	2228      	movs	r2, #40	; 0x28
 8003e02:	490b      	ldr	r1, [pc, #44]	; (8003e30 <main+0x14c>)
 8003e04:	480b      	ldr	r0, [pc, #44]	; (8003e34 <main+0x150>)
 8003e06:	f7ff f9ec 	bl	80031e2 <HAL_UART_Transmit>
	HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData,&TxMailbox);
 8003e0a:	e7dc      	b.n	8003dc6 <main+0xe2>
 8003e0c:	20000210 	.word	0x20000210
 8003e10:	20000238 	.word	0x20000238
 8003e14:	20000005 	.word	0x20000005
 8003e18:	20000006 	.word	0x20000006
 8003e1c:	20000310 	.word	0x20000310
 8003e20:	2000028c 	.word	0x2000028c
 8003e24:	20000294 	.word	0x20000294
 8003e28:	200001fc 	.word	0x200001fc
 8003e2c:	08006548 	.word	0x08006548
 8003e30:	20000264 	.word	0x20000264
 8003e34:	200002a0 	.word	0x200002a0

08003e38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b090      	sub	sp, #64	; 0x40
 8003e3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e3e:	f107 0318 	add.w	r3, r7, #24
 8003e42:	2228      	movs	r2, #40	; 0x28
 8003e44:	2100      	movs	r1, #0
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 fb2e 	bl	80044a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e4c:	1d3b      	adds	r3, r7, #4
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	605a      	str	r2, [r3, #4]
 8003e54:	609a      	str	r2, [r3, #8]
 8003e56:	60da      	str	r2, [r3, #12]
 8003e58:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003e62:	2310      	movs	r3, #16
 8003e64:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e66:	2302      	movs	r3, #2
 8003e68:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003e6e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003e72:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e74:	f107 0318 	add.w	r3, r7, #24
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7fe f83d 	bl	8001ef8 <HAL_RCC_OscConfig>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d001      	beq.n	8003e88 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8003e84:	f000 f91d 	bl	80040c2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e88:	230f      	movs	r3, #15
 8003e8a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e90:	2300      	movs	r3, #0
 8003e92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003e94:	2300      	movs	r3, #0
 8003e96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003e9c:	1d3b      	adds	r3, r7, #4
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7fe ff17 	bl	8002cd4 <HAL_RCC_ClockConfig>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8003eac:	f000 f909 	bl	80040c2 <Error_Handler>
  }
}
 8003eb0:	bf00      	nop
 8003eb2:	3740      	adds	r7, #64	; 0x40
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8003ebc:	4b17      	ldr	r3, [pc, #92]	; (8003f1c <MX_CAN_Init+0x64>)
 8003ebe:	4a18      	ldr	r2, [pc, #96]	; (8003f20 <MX_CAN_Init+0x68>)
 8003ec0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;
 8003ec2:	4b16      	ldr	r3, [pc, #88]	; (8003f1c <MX_CAN_Init+0x64>)
 8003ec4:	2206      	movs	r2, #6
 8003ec6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8003ec8:	4b14      	ldr	r3, [pc, #80]	; (8003f1c <MX_CAN_Init+0x64>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003ece:	4b13      	ldr	r3, [pc, #76]	; (8003f1c <MX_CAN_Init+0x64>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_10TQ;
 8003ed4:	4b11      	ldr	r3, [pc, #68]	; (8003f1c <MX_CAN_Init+0x64>)
 8003ed6:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8003eda:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003edc:	4b0f      	ldr	r3, [pc, #60]	; (8003f1c <MX_CAN_Init+0x64>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8003ee2:	4b0e      	ldr	r3, [pc, #56]	; (8003f1c <MX_CAN_Init+0x64>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8003ee8:	4b0c      	ldr	r3, [pc, #48]	; (8003f1c <MX_CAN_Init+0x64>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8003eee:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <MX_CAN_Init+0x64>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8003ef4:	4b09      	ldr	r3, [pc, #36]	; (8003f1c <MX_CAN_Init+0x64>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8003efa:	4b08      	ldr	r3, [pc, #32]	; (8003f1c <MX_CAN_Init+0x64>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8003f00:	4b06      	ldr	r3, [pc, #24]	; (8003f1c <MX_CAN_Init+0x64>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8003f06:	4805      	ldr	r0, [pc, #20]	; (8003f1c <MX_CAN_Init+0x64>)
 8003f08:	f7fc fed6 	bl	8000cb8 <HAL_CAN_Init>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8003f12:	f000 f8d6 	bl	80040c2 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8003f16:	bf00      	nop
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20000238 	.word	0x20000238
 8003f20:	40006400 	.word	0x40006400

08003f24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003f28:	4b14      	ldr	r3, [pc, #80]	; (8003f7c <MX_USART2_UART_Init+0x58>)
 8003f2a:	4a15      	ldr	r2, [pc, #84]	; (8003f80 <MX_USART2_UART_Init+0x5c>)
 8003f2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003f2e:	4b13      	ldr	r3, [pc, #76]	; (8003f7c <MX_USART2_UART_Init+0x58>)
 8003f30:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003f34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003f36:	4b11      	ldr	r3, [pc, #68]	; (8003f7c <MX_USART2_UART_Init+0x58>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003f3c:	4b0f      	ldr	r3, [pc, #60]	; (8003f7c <MX_USART2_UART_Init+0x58>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003f42:	4b0e      	ldr	r3, [pc, #56]	; (8003f7c <MX_USART2_UART_Init+0x58>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003f48:	4b0c      	ldr	r3, [pc, #48]	; (8003f7c <MX_USART2_UART_Init+0x58>)
 8003f4a:	220c      	movs	r2, #12
 8003f4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f4e:	4b0b      	ldr	r3, [pc, #44]	; (8003f7c <MX_USART2_UART_Init+0x58>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f54:	4b09      	ldr	r3, [pc, #36]	; (8003f7c <MX_USART2_UART_Init+0x58>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f5a:	4b08      	ldr	r3, [pc, #32]	; (8003f7c <MX_USART2_UART_Init+0x58>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f60:	4b06      	ldr	r3, [pc, #24]	; (8003f7c <MX_USART2_UART_Init+0x58>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003f66:	4805      	ldr	r0, [pc, #20]	; (8003f7c <MX_USART2_UART_Init+0x58>)
 8003f68:	f7ff f8ea 	bl	8003140 <HAL_UART_Init>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003f72:	f000 f8a6 	bl	80040c2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003f76:	bf00      	nop
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	200002a0 	.word	0x200002a0
 8003f80:	40004400 	.word	0x40004400

08003f84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b088      	sub	sp, #32
 8003f88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f8a:	f107 030c 	add.w	r3, r7, #12
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	605a      	str	r2, [r3, #4]
 8003f94:	609a      	str	r2, [r3, #8]
 8003f96:	60da      	str	r2, [r3, #12]
 8003f98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f9a:	4b1d      	ldr	r3, [pc, #116]	; (8004010 <MX_GPIO_Init+0x8c>)
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	4a1c      	ldr	r2, [pc, #112]	; (8004010 <MX_GPIO_Init+0x8c>)
 8003fa0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003fa4:	6153      	str	r3, [r2, #20]
 8003fa6:	4b1a      	ldr	r3, [pc, #104]	; (8004010 <MX_GPIO_Init+0x8c>)
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fae:	60bb      	str	r3, [r7, #8]
 8003fb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fb2:	4b17      	ldr	r3, [pc, #92]	; (8004010 <MX_GPIO_Init+0x8c>)
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	4a16      	ldr	r2, [pc, #88]	; (8004010 <MX_GPIO_Init+0x8c>)
 8003fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fbc:	6153      	str	r3, [r2, #20]
 8003fbe:	4b14      	ldr	r3, [pc, #80]	; (8004010 <MX_GPIO_Init+0x8c>)
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc6:	607b      	str	r3, [r7, #4]
 8003fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fca:	4b11      	ldr	r3, [pc, #68]	; (8004010 <MX_GPIO_Init+0x8c>)
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	4a10      	ldr	r2, [pc, #64]	; (8004010 <MX_GPIO_Init+0x8c>)
 8003fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fd4:	6153      	str	r3, [r2, #20]
 8003fd6:	4b0e      	ldr	r3, [pc, #56]	; (8004010 <MX_GPIO_Init+0x8c>)
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fde:	603b      	str	r3, [r7, #0]
 8003fe0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	2108      	movs	r1, #8
 8003fe6:	480b      	ldr	r0, [pc, #44]	; (8004014 <MX_GPIO_Init+0x90>)
 8003fe8:	f7fd ff6e 	bl	8001ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8003fec:	2308      	movs	r3, #8
 8003fee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8003ffc:	f107 030c 	add.w	r3, r7, #12
 8004000:	4619      	mov	r1, r3
 8004002:	4804      	ldr	r0, [pc, #16]	; (8004014 <MX_GPIO_Init+0x90>)
 8004004:	f7fd fdea 	bl	8001bdc <HAL_GPIO_Init>

}
 8004008:	bf00      	nop
 800400a:	3720      	adds	r7, #32
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	40021000 	.word	0x40021000
 8004014:	48000400 	.word	0x48000400

08004018 <HAL_CAN_RxFifo0MsgPendingCallback>:
{
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,1);
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan_)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  HAL_CAN_GetRxMessage(&hcan,CAN_RX_FIFO0,&RxHeader,RxData);
 8004020:	4b18      	ldr	r3, [pc, #96]	; (8004084 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8004022:	4a19      	ldr	r2, [pc, #100]	; (8004088 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8004024:	2100      	movs	r1, #0
 8004026:	4819      	ldr	r0, [pc, #100]	; (800408c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8004028:	f7fd f92a 	bl	8001280 <HAL_CAN_GetRxMessage>
  get_pos_data =(
		  ((RxData[3] << 24) & 0xFF000000)
 800402c:	4b15      	ldr	r3, [pc, #84]	; (8004084 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 800402e:	78db      	ldrb	r3, [r3, #3]
 8004030:	061b      	lsls	r3, r3, #24
 8004032:	461a      	mov	r2, r3
		| ((RxData[2] << 16) & 0x00FF0000)
 8004034:	4b13      	ldr	r3, [pc, #76]	; (8004084 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8004036:	789b      	ldrb	r3, [r3, #2]
 8004038:	041b      	lsls	r3, r3, #16
 800403a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800403e:	431a      	orrs	r2, r3
		| ((RxData[1] << 8)  & 0x0000FF00)
 8004040:	4b10      	ldr	r3, [pc, #64]	; (8004084 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8004042:	785b      	ldrb	r3, [r3, #1]
 8004044:	021b      	lsls	r3, r3, #8
 8004046:	b29b      	uxth	r3, r3
 8004048:	4313      	orrs	r3, r2
		| ((RxData[0] << 0)  & 0x000000FF)
 800404a:	4a0e      	ldr	r2, [pc, #56]	; (8004084 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 800404c:	7812      	ldrb	r2, [r2, #0]
 800404e:	4313      	orrs	r3, r2
  get_pos_data =(
 8004050:	4a0f      	ldr	r2, [pc, #60]	; (8004090 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8004052:	6013      	str	r3, [r2, #0]
  }
*/
  //HAL_UART_Transmit(&huart2,RxData,4,0xFFFF);


  flag *= -1;
 8004054:	4b0f      	ldr	r3, [pc, #60]	; (8004094 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	425b      	negs	r3, r3
 800405a:	4a0e      	ldr	r2, [pc, #56]	; (8004094 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 800405c:	6013      	str	r3, [r2, #0]
  if(flag >0){
 800405e:	4b0d      	ldr	r3, [pc, #52]	; (8004094 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	dd05      	ble.n	8004072 <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,1);
 8004066:	2201      	movs	r2, #1
 8004068:	2108      	movs	r1, #8
 800406a:	480b      	ldr	r0, [pc, #44]	; (8004098 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 800406c:	f7fd ff2c 	bl	8001ec8 <HAL_GPIO_WritePin>
  }else{
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,0);
  }

}
 8004070:	e004      	b.n	800407c <HAL_CAN_RxFifo0MsgPendingCallback+0x64>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,0);
 8004072:	2200      	movs	r2, #0
 8004074:	2108      	movs	r1, #8
 8004076:	4808      	ldr	r0, [pc, #32]	; (8004098 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8004078:	f7fd ff26 	bl	8001ec8 <HAL_GPIO_WritePin>
}
 800407c:	bf00      	nop
 800407e:	3708      	adds	r7, #8
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	20000298 	.word	0x20000298
 8004088:	20000328 	.word	0x20000328
 800408c:	20000238 	.word	0x20000238
 8004090:	200001fc 	.word	0x200001fc
 8004094:	20000008 	.word	0x20000008
 8004098:	48000400 	.word	0x48000400

0800409c <bintofloat>:

float bintofloat(uint32_t x){
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
	float f = 0.0f;
 80040a4:	f04f 0300 	mov.w	r3, #0
 80040a8:	60fb      	str	r3, [r7, #12]
	memcpy(&f, &x, sizeof(f) < sizeof(x) ? sizeof(f): sizeof(x));
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	60fb      	str	r3, [r7, #12]
	return f;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	ee07 3a90 	vmov	s15, r3
}
 80040b4:	eeb0 0a67 	vmov.f32	s0, s15
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80040c2:	b480      	push	{r7}
 80040c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80040c6:	bf00      	nop
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040d6:	4b0f      	ldr	r3, [pc, #60]	; (8004114 <HAL_MspInit+0x44>)
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	4a0e      	ldr	r2, [pc, #56]	; (8004114 <HAL_MspInit+0x44>)
 80040dc:	f043 0301 	orr.w	r3, r3, #1
 80040e0:	6193      	str	r3, [r2, #24]
 80040e2:	4b0c      	ldr	r3, [pc, #48]	; (8004114 <HAL_MspInit+0x44>)
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	607b      	str	r3, [r7, #4]
 80040ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80040ee:	4b09      	ldr	r3, [pc, #36]	; (8004114 <HAL_MspInit+0x44>)
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	4a08      	ldr	r2, [pc, #32]	; (8004114 <HAL_MspInit+0x44>)
 80040f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040f8:	61d3      	str	r3, [r2, #28]
 80040fa:	4b06      	ldr	r3, [pc, #24]	; (8004114 <HAL_MspInit+0x44>)
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004102:	603b      	str	r3, [r7, #0]
 8004104:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	40021000 	.word	0x40021000

08004118 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b08a      	sub	sp, #40	; 0x28
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004120:	f107 0314 	add.w	r3, r7, #20
 8004124:	2200      	movs	r2, #0
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	605a      	str	r2, [r3, #4]
 800412a:	609a      	str	r2, [r3, #8]
 800412c:	60da      	str	r2, [r3, #12]
 800412e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a29      	ldr	r2, [pc, #164]	; (80041dc <HAL_CAN_MspInit+0xc4>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d14b      	bne.n	80041d2 <HAL_CAN_MspInit+0xba>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800413a:	4b29      	ldr	r3, [pc, #164]	; (80041e0 <HAL_CAN_MspInit+0xc8>)
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	4a28      	ldr	r2, [pc, #160]	; (80041e0 <HAL_CAN_MspInit+0xc8>)
 8004140:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004144:	61d3      	str	r3, [r2, #28]
 8004146:	4b26      	ldr	r3, [pc, #152]	; (80041e0 <HAL_CAN_MspInit+0xc8>)
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800414e:	613b      	str	r3, [r7, #16]
 8004150:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004152:	4b23      	ldr	r3, [pc, #140]	; (80041e0 <HAL_CAN_MspInit+0xc8>)
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	4a22      	ldr	r2, [pc, #136]	; (80041e0 <HAL_CAN_MspInit+0xc8>)
 8004158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800415c:	6153      	str	r3, [r2, #20]
 800415e:	4b20      	ldr	r3, [pc, #128]	; (80041e0 <HAL_CAN_MspInit+0xc8>)
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800416a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800416e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004170:	2302      	movs	r3, #2
 8004172:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004174:	2300      	movs	r3, #0
 8004176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004178:	2303      	movs	r3, #3
 800417a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800417c:	2309      	movs	r3, #9
 800417e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004180:	f107 0314 	add.w	r3, r7, #20
 8004184:	4619      	mov	r1, r3
 8004186:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800418a:	f7fd fd27 	bl	8001bdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800418e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004194:	2302      	movs	r3, #2
 8004196:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004198:	2301      	movs	r3, #1
 800419a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800419c:	2303      	movs	r3, #3
 800419e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80041a0:	2309      	movs	r3, #9
 80041a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041a4:	f107 0314 	add.w	r3, r7, #20
 80041a8:	4619      	mov	r1, r3
 80041aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041ae:	f7fd fd15 	bl	8001bdc <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_TX_IRQn, 0, 0);
 80041b2:	2200      	movs	r2, #0
 80041b4:	2100      	movs	r1, #0
 80041b6:	2013      	movs	r0, #19
 80041b8:	f7fd fc9b 	bl	8001af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_TX_IRQn);
 80041bc:	2013      	movs	r0, #19
 80041be:	f7fd fcb4 	bl	8001b2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 80041c2:	2200      	movs	r2, #0
 80041c4:	2100      	movs	r1, #0
 80041c6:	2014      	movs	r0, #20
 80041c8:	f7fd fc93 	bl	8001af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 80041cc:	2014      	movs	r0, #20
 80041ce:	f7fd fcac 	bl	8001b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80041d2:	bf00      	nop
 80041d4:	3728      	adds	r7, #40	; 0x28
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	40006400 	.word	0x40006400
 80041e0:	40021000 	.word	0x40021000

080041e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b08a      	sub	sp, #40	; 0x28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041ec:	f107 0314 	add.w	r3, r7, #20
 80041f0:	2200      	movs	r2, #0
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	605a      	str	r2, [r3, #4]
 80041f6:	609a      	str	r2, [r3, #8]
 80041f8:	60da      	str	r2, [r3, #12]
 80041fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a1c      	ldr	r2, [pc, #112]	; (8004274 <HAL_UART_MspInit+0x90>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d131      	bne.n	800426a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004206:	4b1c      	ldr	r3, [pc, #112]	; (8004278 <HAL_UART_MspInit+0x94>)
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	4a1b      	ldr	r2, [pc, #108]	; (8004278 <HAL_UART_MspInit+0x94>)
 800420c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004210:	61d3      	str	r3, [r2, #28]
 8004212:	4b19      	ldr	r3, [pc, #100]	; (8004278 <HAL_UART_MspInit+0x94>)
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421a:	613b      	str	r3, [r7, #16]
 800421c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800421e:	4b16      	ldr	r3, [pc, #88]	; (8004278 <HAL_UART_MspInit+0x94>)
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	4a15      	ldr	r2, [pc, #84]	; (8004278 <HAL_UART_MspInit+0x94>)
 8004224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004228:	6153      	str	r3, [r2, #20]
 800422a:	4b13      	ldr	r3, [pc, #76]	; (8004278 <HAL_UART_MspInit+0x94>)
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8004236:	f248 0304 	movw	r3, #32772	; 0x8004
 800423a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800423c:	2302      	movs	r3, #2
 800423e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004240:	2300      	movs	r3, #0
 8004242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004244:	2303      	movs	r3, #3
 8004246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004248:	2307      	movs	r3, #7
 800424a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800424c:	f107 0314 	add.w	r3, r7, #20
 8004250:	4619      	mov	r1, r3
 8004252:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004256:	f7fd fcc1 	bl	8001bdc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800425a:	2200      	movs	r2, #0
 800425c:	2100      	movs	r1, #0
 800425e:	2026      	movs	r0, #38	; 0x26
 8004260:	f7fd fc47 	bl	8001af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004264:	2026      	movs	r0, #38	; 0x26
 8004266:	f7fd fc60 	bl	8001b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800426a:	bf00      	nop
 800426c:	3728      	adds	r7, #40	; 0x28
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	40004400 	.word	0x40004400
 8004278:	40021000 	.word	0x40021000

0800427c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004280:	bf00      	nop
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr

0800428a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800428a:	b480      	push	{r7}
 800428c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800428e:	e7fe      	b.n	800428e <HardFault_Handler+0x4>

08004290 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004294:	e7fe      	b.n	8004294 <MemManage_Handler+0x4>

08004296 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004296:	b480      	push	{r7}
 8004298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800429a:	e7fe      	b.n	800429a <BusFault_Handler+0x4>

0800429c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80042a0:	e7fe      	b.n	80042a0 <UsageFault_Handler+0x4>

080042a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042a2:	b480      	push	{r7}
 80042a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80042a6:	bf00      	nop
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042b4:	bf00      	nop
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042be:	b480      	push	{r7}
 80042c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042c2:	bf00      	nop
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042d0:	f7fc fcb0 	bl	8000c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042d4:	bf00      	nop
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <CAN_TX_IRQHandler>:

/**
  * @brief This function handles CAN TX interrupt.
  */
void CAN_TX_IRQHandler(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_TX_IRQn 0 */

  /* USER CODE END CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80042dc:	4802      	ldr	r0, [pc, #8]	; (80042e8 <CAN_TX_IRQHandler+0x10>)
 80042de:	f7fd f908 	bl	80014f2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_TX_IRQn 1 */

  /* USER CODE END CAN_TX_IRQn 1 */
}
 80042e2:	bf00      	nop
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	20000238 	.word	0x20000238

080042ec <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80042f0:	4802      	ldr	r0, [pc, #8]	; (80042fc <CAN_RX0_IRQHandler+0x10>)
 80042f2:	f7fd f8fe 	bl	80014f2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 80042f6:	bf00      	nop
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	20000238 	.word	0x20000238

08004300 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004304:	4802      	ldr	r0, [pc, #8]	; (8004310 <USART2_IRQHandler+0x10>)
 8004306:	f7fe fff9 	bl	80032fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800430a:	bf00      	nop
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	200002a0 	.word	0x200002a0

08004314 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800431c:	4b11      	ldr	r3, [pc, #68]	; (8004364 <_sbrk+0x50>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d102      	bne.n	800432a <_sbrk+0x16>
		heap_end = &end;
 8004324:	4b0f      	ldr	r3, [pc, #60]	; (8004364 <_sbrk+0x50>)
 8004326:	4a10      	ldr	r2, [pc, #64]	; (8004368 <_sbrk+0x54>)
 8004328:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800432a:	4b0e      	ldr	r3, [pc, #56]	; (8004364 <_sbrk+0x50>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004330:	4b0c      	ldr	r3, [pc, #48]	; (8004364 <_sbrk+0x50>)
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4413      	add	r3, r2
 8004338:	466a      	mov	r2, sp
 800433a:	4293      	cmp	r3, r2
 800433c:	d907      	bls.n	800434e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800433e:	f000 f889 	bl	8004454 <__errno>
 8004342:	4602      	mov	r2, r0
 8004344:	230c      	movs	r3, #12
 8004346:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004348:	f04f 33ff 	mov.w	r3, #4294967295
 800434c:	e006      	b.n	800435c <_sbrk+0x48>
	}

	heap_end += incr;
 800434e:	4b05      	ldr	r3, [pc, #20]	; (8004364 <_sbrk+0x50>)
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4413      	add	r3, r2
 8004356:	4a03      	ldr	r2, [pc, #12]	; (8004364 <_sbrk+0x50>)
 8004358:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800435a:	68fb      	ldr	r3, [r7, #12]
}
 800435c:	4618      	mov	r0, r3
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	20000200 	.word	0x20000200
 8004368:	20000348 	.word	0x20000348

0800436c <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004370:	4b1f      	ldr	r3, [pc, #124]	; (80043f0 <SystemInit+0x84>)
 8004372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004376:	4a1e      	ldr	r2, [pc, #120]	; (80043f0 <SystemInit+0x84>)
 8004378:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800437c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004380:	4b1c      	ldr	r3, [pc, #112]	; (80043f4 <SystemInit+0x88>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a1b      	ldr	r2, [pc, #108]	; (80043f4 <SystemInit+0x88>)
 8004386:	f043 0301 	orr.w	r3, r3, #1
 800438a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 800438c:	4b19      	ldr	r3, [pc, #100]	; (80043f4 <SystemInit+0x88>)
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	4918      	ldr	r1, [pc, #96]	; (80043f4 <SystemInit+0x88>)
 8004392:	4b19      	ldr	r3, [pc, #100]	; (80043f8 <SystemInit+0x8c>)
 8004394:	4013      	ands	r3, r2
 8004396:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004398:	4b16      	ldr	r3, [pc, #88]	; (80043f4 <SystemInit+0x88>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a15      	ldr	r2, [pc, #84]	; (80043f4 <SystemInit+0x88>)
 800439e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80043a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043a6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80043a8:	4b12      	ldr	r3, [pc, #72]	; (80043f4 <SystemInit+0x88>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a11      	ldr	r2, [pc, #68]	; (80043f4 <SystemInit+0x88>)
 80043ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043b2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80043b4:	4b0f      	ldr	r3, [pc, #60]	; (80043f4 <SystemInit+0x88>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	4a0e      	ldr	r2, [pc, #56]	; (80043f4 <SystemInit+0x88>)
 80043ba:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80043be:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80043c0:	4b0c      	ldr	r3, [pc, #48]	; (80043f4 <SystemInit+0x88>)
 80043c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c4:	4a0b      	ldr	r2, [pc, #44]	; (80043f4 <SystemInit+0x88>)
 80043c6:	f023 030f 	bic.w	r3, r3, #15
 80043ca:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80043cc:	4b09      	ldr	r3, [pc, #36]	; (80043f4 <SystemInit+0x88>)
 80043ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043d0:	4908      	ldr	r1, [pc, #32]	; (80043f4 <SystemInit+0x88>)
 80043d2:	4b0a      	ldr	r3, [pc, #40]	; (80043fc <SystemInit+0x90>)
 80043d4:	4013      	ands	r3, r2
 80043d6:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80043d8:	4b06      	ldr	r3, [pc, #24]	; (80043f4 <SystemInit+0x88>)
 80043da:	2200      	movs	r2, #0
 80043dc:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80043de:	4b04      	ldr	r3, [pc, #16]	; (80043f0 <SystemInit+0x84>)
 80043e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80043e4:	609a      	str	r2, [r3, #8]
#endif
}
 80043e6:	bf00      	nop
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr
 80043f0:	e000ed00 	.word	0xe000ed00
 80043f4:	40021000 	.word	0x40021000
 80043f8:	f87fc00c 	.word	0xf87fc00c
 80043fc:	ff00fccc 	.word	0xff00fccc

08004400 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004400:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004438 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004404:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004406:	e003      	b.n	8004410 <LoopCopyDataInit>

08004408 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004408:	4b0c      	ldr	r3, [pc, #48]	; (800443c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800440a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800440c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800440e:	3104      	adds	r1, #4

08004410 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004410:	480b      	ldr	r0, [pc, #44]	; (8004440 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004412:	4b0c      	ldr	r3, [pc, #48]	; (8004444 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004414:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004416:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004418:	d3f6      	bcc.n	8004408 <CopyDataInit>
	ldr	r2, =_sbss
 800441a:	4a0b      	ldr	r2, [pc, #44]	; (8004448 <LoopForever+0x12>)
	b	LoopFillZerobss
 800441c:	e002      	b.n	8004424 <LoopFillZerobss>

0800441e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800441e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004420:	f842 3b04 	str.w	r3, [r2], #4

08004424 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004424:	4b09      	ldr	r3, [pc, #36]	; (800444c <LoopForever+0x16>)
	cmp	r2, r3
 8004426:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004428:	d3f9      	bcc.n	800441e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800442a:	f7ff ff9f 	bl	800436c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800442e:	f000 f817 	bl	8004460 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004432:	f7ff fc57 	bl	8003ce4 <main>

08004436 <LoopForever>:

LoopForever:
    b LoopForever
 8004436:	e7fe      	b.n	8004436 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004438:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 800443c:	080067f0 	.word	0x080067f0
	ldr	r0, =_sdata
 8004440:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004444:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 8004448:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 800444c:	20000348 	.word	0x20000348

08004450 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004450:	e7fe      	b.n	8004450 <ADC1_2_IRQHandler>
	...

08004454 <__errno>:
 8004454:	4b01      	ldr	r3, [pc, #4]	; (800445c <__errno+0x8>)
 8004456:	6818      	ldr	r0, [r3, #0]
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	20000010 	.word	0x20000010

08004460 <__libc_init_array>:
 8004460:	b570      	push	{r4, r5, r6, lr}
 8004462:	4e0d      	ldr	r6, [pc, #52]	; (8004498 <__libc_init_array+0x38>)
 8004464:	4c0d      	ldr	r4, [pc, #52]	; (800449c <__libc_init_array+0x3c>)
 8004466:	1ba4      	subs	r4, r4, r6
 8004468:	10a4      	asrs	r4, r4, #2
 800446a:	2500      	movs	r5, #0
 800446c:	42a5      	cmp	r5, r4
 800446e:	d109      	bne.n	8004484 <__libc_init_array+0x24>
 8004470:	4e0b      	ldr	r6, [pc, #44]	; (80044a0 <__libc_init_array+0x40>)
 8004472:	4c0c      	ldr	r4, [pc, #48]	; (80044a4 <__libc_init_array+0x44>)
 8004474:	f002 f85c 	bl	8006530 <_init>
 8004478:	1ba4      	subs	r4, r4, r6
 800447a:	10a4      	asrs	r4, r4, #2
 800447c:	2500      	movs	r5, #0
 800447e:	42a5      	cmp	r5, r4
 8004480:	d105      	bne.n	800448e <__libc_init_array+0x2e>
 8004482:	bd70      	pop	{r4, r5, r6, pc}
 8004484:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004488:	4798      	blx	r3
 800448a:	3501      	adds	r5, #1
 800448c:	e7ee      	b.n	800446c <__libc_init_array+0xc>
 800448e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004492:	4798      	blx	r3
 8004494:	3501      	adds	r5, #1
 8004496:	e7f2      	b.n	800447e <__libc_init_array+0x1e>
 8004498:	080067e8 	.word	0x080067e8
 800449c:	080067e8 	.word	0x080067e8
 80044a0:	080067e8 	.word	0x080067e8
 80044a4:	080067ec 	.word	0x080067ec

080044a8 <memset>:
 80044a8:	4402      	add	r2, r0
 80044aa:	4603      	mov	r3, r0
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d100      	bne.n	80044b2 <memset+0xa>
 80044b0:	4770      	bx	lr
 80044b2:	f803 1b01 	strb.w	r1, [r3], #1
 80044b6:	e7f9      	b.n	80044ac <memset+0x4>

080044b8 <__cvt>:
 80044b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044bc:	ec55 4b10 	vmov	r4, r5, d0
 80044c0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80044c2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80044c6:	2d00      	cmp	r5, #0
 80044c8:	460e      	mov	r6, r1
 80044ca:	4691      	mov	r9, r2
 80044cc:	4619      	mov	r1, r3
 80044ce:	bfb8      	it	lt
 80044d0:	4622      	movlt	r2, r4
 80044d2:	462b      	mov	r3, r5
 80044d4:	f027 0720 	bic.w	r7, r7, #32
 80044d8:	bfbb      	ittet	lt
 80044da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80044de:	461d      	movlt	r5, r3
 80044e0:	2300      	movge	r3, #0
 80044e2:	232d      	movlt	r3, #45	; 0x2d
 80044e4:	bfb8      	it	lt
 80044e6:	4614      	movlt	r4, r2
 80044e8:	2f46      	cmp	r7, #70	; 0x46
 80044ea:	700b      	strb	r3, [r1, #0]
 80044ec:	d004      	beq.n	80044f8 <__cvt+0x40>
 80044ee:	2f45      	cmp	r7, #69	; 0x45
 80044f0:	d100      	bne.n	80044f4 <__cvt+0x3c>
 80044f2:	3601      	adds	r6, #1
 80044f4:	2102      	movs	r1, #2
 80044f6:	e000      	b.n	80044fa <__cvt+0x42>
 80044f8:	2103      	movs	r1, #3
 80044fa:	ab03      	add	r3, sp, #12
 80044fc:	9301      	str	r3, [sp, #4]
 80044fe:	ab02      	add	r3, sp, #8
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	4632      	mov	r2, r6
 8004504:	4653      	mov	r3, sl
 8004506:	ec45 4b10 	vmov	d0, r4, r5
 800450a:	f000 fcdd 	bl	8004ec8 <_dtoa_r>
 800450e:	2f47      	cmp	r7, #71	; 0x47
 8004510:	4680      	mov	r8, r0
 8004512:	d102      	bne.n	800451a <__cvt+0x62>
 8004514:	f019 0f01 	tst.w	r9, #1
 8004518:	d026      	beq.n	8004568 <__cvt+0xb0>
 800451a:	2f46      	cmp	r7, #70	; 0x46
 800451c:	eb08 0906 	add.w	r9, r8, r6
 8004520:	d111      	bne.n	8004546 <__cvt+0x8e>
 8004522:	f898 3000 	ldrb.w	r3, [r8]
 8004526:	2b30      	cmp	r3, #48	; 0x30
 8004528:	d10a      	bne.n	8004540 <__cvt+0x88>
 800452a:	2200      	movs	r2, #0
 800452c:	2300      	movs	r3, #0
 800452e:	4620      	mov	r0, r4
 8004530:	4629      	mov	r1, r5
 8004532:	f7fc fac9 	bl	8000ac8 <__aeabi_dcmpeq>
 8004536:	b918      	cbnz	r0, 8004540 <__cvt+0x88>
 8004538:	f1c6 0601 	rsb	r6, r6, #1
 800453c:	f8ca 6000 	str.w	r6, [sl]
 8004540:	f8da 3000 	ldr.w	r3, [sl]
 8004544:	4499      	add	r9, r3
 8004546:	2200      	movs	r2, #0
 8004548:	2300      	movs	r3, #0
 800454a:	4620      	mov	r0, r4
 800454c:	4629      	mov	r1, r5
 800454e:	f7fc fabb 	bl	8000ac8 <__aeabi_dcmpeq>
 8004552:	b938      	cbnz	r0, 8004564 <__cvt+0xac>
 8004554:	2230      	movs	r2, #48	; 0x30
 8004556:	9b03      	ldr	r3, [sp, #12]
 8004558:	454b      	cmp	r3, r9
 800455a:	d205      	bcs.n	8004568 <__cvt+0xb0>
 800455c:	1c59      	adds	r1, r3, #1
 800455e:	9103      	str	r1, [sp, #12]
 8004560:	701a      	strb	r2, [r3, #0]
 8004562:	e7f8      	b.n	8004556 <__cvt+0x9e>
 8004564:	f8cd 900c 	str.w	r9, [sp, #12]
 8004568:	9b03      	ldr	r3, [sp, #12]
 800456a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800456c:	eba3 0308 	sub.w	r3, r3, r8
 8004570:	4640      	mov	r0, r8
 8004572:	6013      	str	r3, [r2, #0]
 8004574:	b004      	add	sp, #16
 8004576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800457a <__exponent>:
 800457a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800457c:	2900      	cmp	r1, #0
 800457e:	4604      	mov	r4, r0
 8004580:	bfba      	itte	lt
 8004582:	4249      	neglt	r1, r1
 8004584:	232d      	movlt	r3, #45	; 0x2d
 8004586:	232b      	movge	r3, #43	; 0x2b
 8004588:	2909      	cmp	r1, #9
 800458a:	f804 2b02 	strb.w	r2, [r4], #2
 800458e:	7043      	strb	r3, [r0, #1]
 8004590:	dd20      	ble.n	80045d4 <__exponent+0x5a>
 8004592:	f10d 0307 	add.w	r3, sp, #7
 8004596:	461f      	mov	r7, r3
 8004598:	260a      	movs	r6, #10
 800459a:	fb91 f5f6 	sdiv	r5, r1, r6
 800459e:	fb06 1115 	mls	r1, r6, r5, r1
 80045a2:	3130      	adds	r1, #48	; 0x30
 80045a4:	2d09      	cmp	r5, #9
 80045a6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80045aa:	f103 32ff 	add.w	r2, r3, #4294967295
 80045ae:	4629      	mov	r1, r5
 80045b0:	dc09      	bgt.n	80045c6 <__exponent+0x4c>
 80045b2:	3130      	adds	r1, #48	; 0x30
 80045b4:	3b02      	subs	r3, #2
 80045b6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80045ba:	42bb      	cmp	r3, r7
 80045bc:	4622      	mov	r2, r4
 80045be:	d304      	bcc.n	80045ca <__exponent+0x50>
 80045c0:	1a10      	subs	r0, r2, r0
 80045c2:	b003      	add	sp, #12
 80045c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045c6:	4613      	mov	r3, r2
 80045c8:	e7e7      	b.n	800459a <__exponent+0x20>
 80045ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045ce:	f804 2b01 	strb.w	r2, [r4], #1
 80045d2:	e7f2      	b.n	80045ba <__exponent+0x40>
 80045d4:	2330      	movs	r3, #48	; 0x30
 80045d6:	4419      	add	r1, r3
 80045d8:	7083      	strb	r3, [r0, #2]
 80045da:	1d02      	adds	r2, r0, #4
 80045dc:	70c1      	strb	r1, [r0, #3]
 80045de:	e7ef      	b.n	80045c0 <__exponent+0x46>

080045e0 <_printf_float>:
 80045e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045e4:	b08d      	sub	sp, #52	; 0x34
 80045e6:	460c      	mov	r4, r1
 80045e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80045ec:	4616      	mov	r6, r2
 80045ee:	461f      	mov	r7, r3
 80045f0:	4605      	mov	r5, r0
 80045f2:	f001 fa21 	bl	8005a38 <_localeconv_r>
 80045f6:	6803      	ldr	r3, [r0, #0]
 80045f8:	9304      	str	r3, [sp, #16]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fb fde8 	bl	80001d0 <strlen>
 8004600:	2300      	movs	r3, #0
 8004602:	930a      	str	r3, [sp, #40]	; 0x28
 8004604:	f8d8 3000 	ldr.w	r3, [r8]
 8004608:	9005      	str	r0, [sp, #20]
 800460a:	3307      	adds	r3, #7
 800460c:	f023 0307 	bic.w	r3, r3, #7
 8004610:	f103 0208 	add.w	r2, r3, #8
 8004614:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004618:	f8d4 b000 	ldr.w	fp, [r4]
 800461c:	f8c8 2000 	str.w	r2, [r8]
 8004620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004624:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004628:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800462c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004630:	9307      	str	r3, [sp, #28]
 8004632:	f8cd 8018 	str.w	r8, [sp, #24]
 8004636:	f04f 32ff 	mov.w	r2, #4294967295
 800463a:	4ba7      	ldr	r3, [pc, #668]	; (80048d8 <_printf_float+0x2f8>)
 800463c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004640:	f7fc fa74 	bl	8000b2c <__aeabi_dcmpun>
 8004644:	bb70      	cbnz	r0, 80046a4 <_printf_float+0xc4>
 8004646:	f04f 32ff 	mov.w	r2, #4294967295
 800464a:	4ba3      	ldr	r3, [pc, #652]	; (80048d8 <_printf_float+0x2f8>)
 800464c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004650:	f7fc fa4e 	bl	8000af0 <__aeabi_dcmple>
 8004654:	bb30      	cbnz	r0, 80046a4 <_printf_float+0xc4>
 8004656:	2200      	movs	r2, #0
 8004658:	2300      	movs	r3, #0
 800465a:	4640      	mov	r0, r8
 800465c:	4649      	mov	r1, r9
 800465e:	f7fc fa3d 	bl	8000adc <__aeabi_dcmplt>
 8004662:	b110      	cbz	r0, 800466a <_printf_float+0x8a>
 8004664:	232d      	movs	r3, #45	; 0x2d
 8004666:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800466a:	4a9c      	ldr	r2, [pc, #624]	; (80048dc <_printf_float+0x2fc>)
 800466c:	4b9c      	ldr	r3, [pc, #624]	; (80048e0 <_printf_float+0x300>)
 800466e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004672:	bf8c      	ite	hi
 8004674:	4690      	movhi	r8, r2
 8004676:	4698      	movls	r8, r3
 8004678:	2303      	movs	r3, #3
 800467a:	f02b 0204 	bic.w	r2, fp, #4
 800467e:	6123      	str	r3, [r4, #16]
 8004680:	6022      	str	r2, [r4, #0]
 8004682:	f04f 0900 	mov.w	r9, #0
 8004686:	9700      	str	r7, [sp, #0]
 8004688:	4633      	mov	r3, r6
 800468a:	aa0b      	add	r2, sp, #44	; 0x2c
 800468c:	4621      	mov	r1, r4
 800468e:	4628      	mov	r0, r5
 8004690:	f000 f9e6 	bl	8004a60 <_printf_common>
 8004694:	3001      	adds	r0, #1
 8004696:	f040 808d 	bne.w	80047b4 <_printf_float+0x1d4>
 800469a:	f04f 30ff 	mov.w	r0, #4294967295
 800469e:	b00d      	add	sp, #52	; 0x34
 80046a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046a4:	4642      	mov	r2, r8
 80046a6:	464b      	mov	r3, r9
 80046a8:	4640      	mov	r0, r8
 80046aa:	4649      	mov	r1, r9
 80046ac:	f7fc fa3e 	bl	8000b2c <__aeabi_dcmpun>
 80046b0:	b110      	cbz	r0, 80046b8 <_printf_float+0xd8>
 80046b2:	4a8c      	ldr	r2, [pc, #560]	; (80048e4 <_printf_float+0x304>)
 80046b4:	4b8c      	ldr	r3, [pc, #560]	; (80048e8 <_printf_float+0x308>)
 80046b6:	e7da      	b.n	800466e <_printf_float+0x8e>
 80046b8:	6861      	ldr	r1, [r4, #4]
 80046ba:	1c4b      	adds	r3, r1, #1
 80046bc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80046c0:	a80a      	add	r0, sp, #40	; 0x28
 80046c2:	d13e      	bne.n	8004742 <_printf_float+0x162>
 80046c4:	2306      	movs	r3, #6
 80046c6:	6063      	str	r3, [r4, #4]
 80046c8:	2300      	movs	r3, #0
 80046ca:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80046ce:	ab09      	add	r3, sp, #36	; 0x24
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	ec49 8b10 	vmov	d0, r8, r9
 80046d6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80046da:	6022      	str	r2, [r4, #0]
 80046dc:	f8cd a004 	str.w	sl, [sp, #4]
 80046e0:	6861      	ldr	r1, [r4, #4]
 80046e2:	4628      	mov	r0, r5
 80046e4:	f7ff fee8 	bl	80044b8 <__cvt>
 80046e8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80046ec:	2b47      	cmp	r3, #71	; 0x47
 80046ee:	4680      	mov	r8, r0
 80046f0:	d109      	bne.n	8004706 <_printf_float+0x126>
 80046f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046f4:	1cd8      	adds	r0, r3, #3
 80046f6:	db02      	blt.n	80046fe <_printf_float+0x11e>
 80046f8:	6862      	ldr	r2, [r4, #4]
 80046fa:	4293      	cmp	r3, r2
 80046fc:	dd47      	ble.n	800478e <_printf_float+0x1ae>
 80046fe:	f1aa 0a02 	sub.w	sl, sl, #2
 8004702:	fa5f fa8a 	uxtb.w	sl, sl
 8004706:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800470a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800470c:	d824      	bhi.n	8004758 <_printf_float+0x178>
 800470e:	3901      	subs	r1, #1
 8004710:	4652      	mov	r2, sl
 8004712:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004716:	9109      	str	r1, [sp, #36]	; 0x24
 8004718:	f7ff ff2f 	bl	800457a <__exponent>
 800471c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800471e:	1813      	adds	r3, r2, r0
 8004720:	2a01      	cmp	r2, #1
 8004722:	4681      	mov	r9, r0
 8004724:	6123      	str	r3, [r4, #16]
 8004726:	dc02      	bgt.n	800472e <_printf_float+0x14e>
 8004728:	6822      	ldr	r2, [r4, #0]
 800472a:	07d1      	lsls	r1, r2, #31
 800472c:	d501      	bpl.n	8004732 <_printf_float+0x152>
 800472e:	3301      	adds	r3, #1
 8004730:	6123      	str	r3, [r4, #16]
 8004732:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004736:	2b00      	cmp	r3, #0
 8004738:	d0a5      	beq.n	8004686 <_printf_float+0xa6>
 800473a:	232d      	movs	r3, #45	; 0x2d
 800473c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004740:	e7a1      	b.n	8004686 <_printf_float+0xa6>
 8004742:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004746:	f000 8177 	beq.w	8004a38 <_printf_float+0x458>
 800474a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800474e:	d1bb      	bne.n	80046c8 <_printf_float+0xe8>
 8004750:	2900      	cmp	r1, #0
 8004752:	d1b9      	bne.n	80046c8 <_printf_float+0xe8>
 8004754:	2301      	movs	r3, #1
 8004756:	e7b6      	b.n	80046c6 <_printf_float+0xe6>
 8004758:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800475c:	d119      	bne.n	8004792 <_printf_float+0x1b2>
 800475e:	2900      	cmp	r1, #0
 8004760:	6863      	ldr	r3, [r4, #4]
 8004762:	dd0c      	ble.n	800477e <_printf_float+0x19e>
 8004764:	6121      	str	r1, [r4, #16]
 8004766:	b913      	cbnz	r3, 800476e <_printf_float+0x18e>
 8004768:	6822      	ldr	r2, [r4, #0]
 800476a:	07d2      	lsls	r2, r2, #31
 800476c:	d502      	bpl.n	8004774 <_printf_float+0x194>
 800476e:	3301      	adds	r3, #1
 8004770:	440b      	add	r3, r1
 8004772:	6123      	str	r3, [r4, #16]
 8004774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004776:	65a3      	str	r3, [r4, #88]	; 0x58
 8004778:	f04f 0900 	mov.w	r9, #0
 800477c:	e7d9      	b.n	8004732 <_printf_float+0x152>
 800477e:	b913      	cbnz	r3, 8004786 <_printf_float+0x1a6>
 8004780:	6822      	ldr	r2, [r4, #0]
 8004782:	07d0      	lsls	r0, r2, #31
 8004784:	d501      	bpl.n	800478a <_printf_float+0x1aa>
 8004786:	3302      	adds	r3, #2
 8004788:	e7f3      	b.n	8004772 <_printf_float+0x192>
 800478a:	2301      	movs	r3, #1
 800478c:	e7f1      	b.n	8004772 <_printf_float+0x192>
 800478e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004792:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004796:	4293      	cmp	r3, r2
 8004798:	db05      	blt.n	80047a6 <_printf_float+0x1c6>
 800479a:	6822      	ldr	r2, [r4, #0]
 800479c:	6123      	str	r3, [r4, #16]
 800479e:	07d1      	lsls	r1, r2, #31
 80047a0:	d5e8      	bpl.n	8004774 <_printf_float+0x194>
 80047a2:	3301      	adds	r3, #1
 80047a4:	e7e5      	b.n	8004772 <_printf_float+0x192>
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	bfd4      	ite	le
 80047aa:	f1c3 0302 	rsble	r3, r3, #2
 80047ae:	2301      	movgt	r3, #1
 80047b0:	4413      	add	r3, r2
 80047b2:	e7de      	b.n	8004772 <_printf_float+0x192>
 80047b4:	6823      	ldr	r3, [r4, #0]
 80047b6:	055a      	lsls	r2, r3, #21
 80047b8:	d407      	bmi.n	80047ca <_printf_float+0x1ea>
 80047ba:	6923      	ldr	r3, [r4, #16]
 80047bc:	4642      	mov	r2, r8
 80047be:	4631      	mov	r1, r6
 80047c0:	4628      	mov	r0, r5
 80047c2:	47b8      	blx	r7
 80047c4:	3001      	adds	r0, #1
 80047c6:	d12b      	bne.n	8004820 <_printf_float+0x240>
 80047c8:	e767      	b.n	800469a <_printf_float+0xba>
 80047ca:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80047ce:	f240 80dc 	bls.w	800498a <_printf_float+0x3aa>
 80047d2:	2200      	movs	r2, #0
 80047d4:	2300      	movs	r3, #0
 80047d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80047da:	f7fc f975 	bl	8000ac8 <__aeabi_dcmpeq>
 80047de:	2800      	cmp	r0, #0
 80047e0:	d033      	beq.n	800484a <_printf_float+0x26a>
 80047e2:	2301      	movs	r3, #1
 80047e4:	4a41      	ldr	r2, [pc, #260]	; (80048ec <_printf_float+0x30c>)
 80047e6:	4631      	mov	r1, r6
 80047e8:	4628      	mov	r0, r5
 80047ea:	47b8      	blx	r7
 80047ec:	3001      	adds	r0, #1
 80047ee:	f43f af54 	beq.w	800469a <_printf_float+0xba>
 80047f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047f6:	429a      	cmp	r2, r3
 80047f8:	db02      	blt.n	8004800 <_printf_float+0x220>
 80047fa:	6823      	ldr	r3, [r4, #0]
 80047fc:	07d8      	lsls	r0, r3, #31
 80047fe:	d50f      	bpl.n	8004820 <_printf_float+0x240>
 8004800:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004804:	4631      	mov	r1, r6
 8004806:	4628      	mov	r0, r5
 8004808:	47b8      	blx	r7
 800480a:	3001      	adds	r0, #1
 800480c:	f43f af45 	beq.w	800469a <_printf_float+0xba>
 8004810:	f04f 0800 	mov.w	r8, #0
 8004814:	f104 091a 	add.w	r9, r4, #26
 8004818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800481a:	3b01      	subs	r3, #1
 800481c:	4543      	cmp	r3, r8
 800481e:	dc09      	bgt.n	8004834 <_printf_float+0x254>
 8004820:	6823      	ldr	r3, [r4, #0]
 8004822:	079b      	lsls	r3, r3, #30
 8004824:	f100 8103 	bmi.w	8004a2e <_printf_float+0x44e>
 8004828:	68e0      	ldr	r0, [r4, #12]
 800482a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800482c:	4298      	cmp	r0, r3
 800482e:	bfb8      	it	lt
 8004830:	4618      	movlt	r0, r3
 8004832:	e734      	b.n	800469e <_printf_float+0xbe>
 8004834:	2301      	movs	r3, #1
 8004836:	464a      	mov	r2, r9
 8004838:	4631      	mov	r1, r6
 800483a:	4628      	mov	r0, r5
 800483c:	47b8      	blx	r7
 800483e:	3001      	adds	r0, #1
 8004840:	f43f af2b 	beq.w	800469a <_printf_float+0xba>
 8004844:	f108 0801 	add.w	r8, r8, #1
 8004848:	e7e6      	b.n	8004818 <_printf_float+0x238>
 800484a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800484c:	2b00      	cmp	r3, #0
 800484e:	dc2b      	bgt.n	80048a8 <_printf_float+0x2c8>
 8004850:	2301      	movs	r3, #1
 8004852:	4a26      	ldr	r2, [pc, #152]	; (80048ec <_printf_float+0x30c>)
 8004854:	4631      	mov	r1, r6
 8004856:	4628      	mov	r0, r5
 8004858:	47b8      	blx	r7
 800485a:	3001      	adds	r0, #1
 800485c:	f43f af1d 	beq.w	800469a <_printf_float+0xba>
 8004860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004862:	b923      	cbnz	r3, 800486e <_printf_float+0x28e>
 8004864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004866:	b913      	cbnz	r3, 800486e <_printf_float+0x28e>
 8004868:	6823      	ldr	r3, [r4, #0]
 800486a:	07d9      	lsls	r1, r3, #31
 800486c:	d5d8      	bpl.n	8004820 <_printf_float+0x240>
 800486e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004872:	4631      	mov	r1, r6
 8004874:	4628      	mov	r0, r5
 8004876:	47b8      	blx	r7
 8004878:	3001      	adds	r0, #1
 800487a:	f43f af0e 	beq.w	800469a <_printf_float+0xba>
 800487e:	f04f 0900 	mov.w	r9, #0
 8004882:	f104 0a1a 	add.w	sl, r4, #26
 8004886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004888:	425b      	negs	r3, r3
 800488a:	454b      	cmp	r3, r9
 800488c:	dc01      	bgt.n	8004892 <_printf_float+0x2b2>
 800488e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004890:	e794      	b.n	80047bc <_printf_float+0x1dc>
 8004892:	2301      	movs	r3, #1
 8004894:	4652      	mov	r2, sl
 8004896:	4631      	mov	r1, r6
 8004898:	4628      	mov	r0, r5
 800489a:	47b8      	blx	r7
 800489c:	3001      	adds	r0, #1
 800489e:	f43f aefc 	beq.w	800469a <_printf_float+0xba>
 80048a2:	f109 0901 	add.w	r9, r9, #1
 80048a6:	e7ee      	b.n	8004886 <_printf_float+0x2a6>
 80048a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80048aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048ac:	429a      	cmp	r2, r3
 80048ae:	bfa8      	it	ge
 80048b0:	461a      	movge	r2, r3
 80048b2:	2a00      	cmp	r2, #0
 80048b4:	4691      	mov	r9, r2
 80048b6:	dd07      	ble.n	80048c8 <_printf_float+0x2e8>
 80048b8:	4613      	mov	r3, r2
 80048ba:	4631      	mov	r1, r6
 80048bc:	4642      	mov	r2, r8
 80048be:	4628      	mov	r0, r5
 80048c0:	47b8      	blx	r7
 80048c2:	3001      	adds	r0, #1
 80048c4:	f43f aee9 	beq.w	800469a <_printf_float+0xba>
 80048c8:	f104 031a 	add.w	r3, r4, #26
 80048cc:	f04f 0b00 	mov.w	fp, #0
 80048d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80048d4:	9306      	str	r3, [sp, #24]
 80048d6:	e015      	b.n	8004904 <_printf_float+0x324>
 80048d8:	7fefffff 	.word	0x7fefffff
 80048dc:	0800658c 	.word	0x0800658c
 80048e0:	08006588 	.word	0x08006588
 80048e4:	08006594 	.word	0x08006594
 80048e8:	08006590 	.word	0x08006590
 80048ec:	08006598 	.word	0x08006598
 80048f0:	2301      	movs	r3, #1
 80048f2:	9a06      	ldr	r2, [sp, #24]
 80048f4:	4631      	mov	r1, r6
 80048f6:	4628      	mov	r0, r5
 80048f8:	47b8      	blx	r7
 80048fa:	3001      	adds	r0, #1
 80048fc:	f43f aecd 	beq.w	800469a <_printf_float+0xba>
 8004900:	f10b 0b01 	add.w	fp, fp, #1
 8004904:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004908:	ebaa 0309 	sub.w	r3, sl, r9
 800490c:	455b      	cmp	r3, fp
 800490e:	dcef      	bgt.n	80048f0 <_printf_float+0x310>
 8004910:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004914:	429a      	cmp	r2, r3
 8004916:	44d0      	add	r8, sl
 8004918:	db15      	blt.n	8004946 <_printf_float+0x366>
 800491a:	6823      	ldr	r3, [r4, #0]
 800491c:	07da      	lsls	r2, r3, #31
 800491e:	d412      	bmi.n	8004946 <_printf_float+0x366>
 8004920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004922:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004924:	eba3 020a 	sub.w	r2, r3, sl
 8004928:	eba3 0a01 	sub.w	sl, r3, r1
 800492c:	4592      	cmp	sl, r2
 800492e:	bfa8      	it	ge
 8004930:	4692      	movge	sl, r2
 8004932:	f1ba 0f00 	cmp.w	sl, #0
 8004936:	dc0e      	bgt.n	8004956 <_printf_float+0x376>
 8004938:	f04f 0800 	mov.w	r8, #0
 800493c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004940:	f104 091a 	add.w	r9, r4, #26
 8004944:	e019      	b.n	800497a <_printf_float+0x39a>
 8004946:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800494a:	4631      	mov	r1, r6
 800494c:	4628      	mov	r0, r5
 800494e:	47b8      	blx	r7
 8004950:	3001      	adds	r0, #1
 8004952:	d1e5      	bne.n	8004920 <_printf_float+0x340>
 8004954:	e6a1      	b.n	800469a <_printf_float+0xba>
 8004956:	4653      	mov	r3, sl
 8004958:	4642      	mov	r2, r8
 800495a:	4631      	mov	r1, r6
 800495c:	4628      	mov	r0, r5
 800495e:	47b8      	blx	r7
 8004960:	3001      	adds	r0, #1
 8004962:	d1e9      	bne.n	8004938 <_printf_float+0x358>
 8004964:	e699      	b.n	800469a <_printf_float+0xba>
 8004966:	2301      	movs	r3, #1
 8004968:	464a      	mov	r2, r9
 800496a:	4631      	mov	r1, r6
 800496c:	4628      	mov	r0, r5
 800496e:	47b8      	blx	r7
 8004970:	3001      	adds	r0, #1
 8004972:	f43f ae92 	beq.w	800469a <_printf_float+0xba>
 8004976:	f108 0801 	add.w	r8, r8, #1
 800497a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800497e:	1a9b      	subs	r3, r3, r2
 8004980:	eba3 030a 	sub.w	r3, r3, sl
 8004984:	4543      	cmp	r3, r8
 8004986:	dcee      	bgt.n	8004966 <_printf_float+0x386>
 8004988:	e74a      	b.n	8004820 <_printf_float+0x240>
 800498a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800498c:	2a01      	cmp	r2, #1
 800498e:	dc01      	bgt.n	8004994 <_printf_float+0x3b4>
 8004990:	07db      	lsls	r3, r3, #31
 8004992:	d53a      	bpl.n	8004a0a <_printf_float+0x42a>
 8004994:	2301      	movs	r3, #1
 8004996:	4642      	mov	r2, r8
 8004998:	4631      	mov	r1, r6
 800499a:	4628      	mov	r0, r5
 800499c:	47b8      	blx	r7
 800499e:	3001      	adds	r0, #1
 80049a0:	f43f ae7b 	beq.w	800469a <_printf_float+0xba>
 80049a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049a8:	4631      	mov	r1, r6
 80049aa:	4628      	mov	r0, r5
 80049ac:	47b8      	blx	r7
 80049ae:	3001      	adds	r0, #1
 80049b0:	f108 0801 	add.w	r8, r8, #1
 80049b4:	f43f ae71 	beq.w	800469a <_printf_float+0xba>
 80049b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049ba:	2200      	movs	r2, #0
 80049bc:	f103 3aff 	add.w	sl, r3, #4294967295
 80049c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80049c4:	2300      	movs	r3, #0
 80049c6:	f7fc f87f 	bl	8000ac8 <__aeabi_dcmpeq>
 80049ca:	b9c8      	cbnz	r0, 8004a00 <_printf_float+0x420>
 80049cc:	4653      	mov	r3, sl
 80049ce:	4642      	mov	r2, r8
 80049d0:	4631      	mov	r1, r6
 80049d2:	4628      	mov	r0, r5
 80049d4:	47b8      	blx	r7
 80049d6:	3001      	adds	r0, #1
 80049d8:	d10e      	bne.n	80049f8 <_printf_float+0x418>
 80049da:	e65e      	b.n	800469a <_printf_float+0xba>
 80049dc:	2301      	movs	r3, #1
 80049de:	4652      	mov	r2, sl
 80049e0:	4631      	mov	r1, r6
 80049e2:	4628      	mov	r0, r5
 80049e4:	47b8      	blx	r7
 80049e6:	3001      	adds	r0, #1
 80049e8:	f43f ae57 	beq.w	800469a <_printf_float+0xba>
 80049ec:	f108 0801 	add.w	r8, r8, #1
 80049f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049f2:	3b01      	subs	r3, #1
 80049f4:	4543      	cmp	r3, r8
 80049f6:	dcf1      	bgt.n	80049dc <_printf_float+0x3fc>
 80049f8:	464b      	mov	r3, r9
 80049fa:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80049fe:	e6de      	b.n	80047be <_printf_float+0x1de>
 8004a00:	f04f 0800 	mov.w	r8, #0
 8004a04:	f104 0a1a 	add.w	sl, r4, #26
 8004a08:	e7f2      	b.n	80049f0 <_printf_float+0x410>
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e7df      	b.n	80049ce <_printf_float+0x3ee>
 8004a0e:	2301      	movs	r3, #1
 8004a10:	464a      	mov	r2, r9
 8004a12:	4631      	mov	r1, r6
 8004a14:	4628      	mov	r0, r5
 8004a16:	47b8      	blx	r7
 8004a18:	3001      	adds	r0, #1
 8004a1a:	f43f ae3e 	beq.w	800469a <_printf_float+0xba>
 8004a1e:	f108 0801 	add.w	r8, r8, #1
 8004a22:	68e3      	ldr	r3, [r4, #12]
 8004a24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004a26:	1a9b      	subs	r3, r3, r2
 8004a28:	4543      	cmp	r3, r8
 8004a2a:	dcf0      	bgt.n	8004a0e <_printf_float+0x42e>
 8004a2c:	e6fc      	b.n	8004828 <_printf_float+0x248>
 8004a2e:	f04f 0800 	mov.w	r8, #0
 8004a32:	f104 0919 	add.w	r9, r4, #25
 8004a36:	e7f4      	b.n	8004a22 <_printf_float+0x442>
 8004a38:	2900      	cmp	r1, #0
 8004a3a:	f43f ae8b 	beq.w	8004754 <_printf_float+0x174>
 8004a3e:	2300      	movs	r3, #0
 8004a40:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004a44:	ab09      	add	r3, sp, #36	; 0x24
 8004a46:	9300      	str	r3, [sp, #0]
 8004a48:	ec49 8b10 	vmov	d0, r8, r9
 8004a4c:	6022      	str	r2, [r4, #0]
 8004a4e:	f8cd a004 	str.w	sl, [sp, #4]
 8004a52:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004a56:	4628      	mov	r0, r5
 8004a58:	f7ff fd2e 	bl	80044b8 <__cvt>
 8004a5c:	4680      	mov	r8, r0
 8004a5e:	e648      	b.n	80046f2 <_printf_float+0x112>

08004a60 <_printf_common>:
 8004a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a64:	4691      	mov	r9, r2
 8004a66:	461f      	mov	r7, r3
 8004a68:	688a      	ldr	r2, [r1, #8]
 8004a6a:	690b      	ldr	r3, [r1, #16]
 8004a6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a70:	4293      	cmp	r3, r2
 8004a72:	bfb8      	it	lt
 8004a74:	4613      	movlt	r3, r2
 8004a76:	f8c9 3000 	str.w	r3, [r9]
 8004a7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a7e:	4606      	mov	r6, r0
 8004a80:	460c      	mov	r4, r1
 8004a82:	b112      	cbz	r2, 8004a8a <_printf_common+0x2a>
 8004a84:	3301      	adds	r3, #1
 8004a86:	f8c9 3000 	str.w	r3, [r9]
 8004a8a:	6823      	ldr	r3, [r4, #0]
 8004a8c:	0699      	lsls	r1, r3, #26
 8004a8e:	bf42      	ittt	mi
 8004a90:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004a94:	3302      	addmi	r3, #2
 8004a96:	f8c9 3000 	strmi.w	r3, [r9]
 8004a9a:	6825      	ldr	r5, [r4, #0]
 8004a9c:	f015 0506 	ands.w	r5, r5, #6
 8004aa0:	d107      	bne.n	8004ab2 <_printf_common+0x52>
 8004aa2:	f104 0a19 	add.w	sl, r4, #25
 8004aa6:	68e3      	ldr	r3, [r4, #12]
 8004aa8:	f8d9 2000 	ldr.w	r2, [r9]
 8004aac:	1a9b      	subs	r3, r3, r2
 8004aae:	42ab      	cmp	r3, r5
 8004ab0:	dc28      	bgt.n	8004b04 <_printf_common+0xa4>
 8004ab2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004ab6:	6822      	ldr	r2, [r4, #0]
 8004ab8:	3300      	adds	r3, #0
 8004aba:	bf18      	it	ne
 8004abc:	2301      	movne	r3, #1
 8004abe:	0692      	lsls	r2, r2, #26
 8004ac0:	d42d      	bmi.n	8004b1e <_printf_common+0xbe>
 8004ac2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ac6:	4639      	mov	r1, r7
 8004ac8:	4630      	mov	r0, r6
 8004aca:	47c0      	blx	r8
 8004acc:	3001      	adds	r0, #1
 8004ace:	d020      	beq.n	8004b12 <_printf_common+0xb2>
 8004ad0:	6823      	ldr	r3, [r4, #0]
 8004ad2:	68e5      	ldr	r5, [r4, #12]
 8004ad4:	f8d9 2000 	ldr.w	r2, [r9]
 8004ad8:	f003 0306 	and.w	r3, r3, #6
 8004adc:	2b04      	cmp	r3, #4
 8004ade:	bf08      	it	eq
 8004ae0:	1aad      	subeq	r5, r5, r2
 8004ae2:	68a3      	ldr	r3, [r4, #8]
 8004ae4:	6922      	ldr	r2, [r4, #16]
 8004ae6:	bf0c      	ite	eq
 8004ae8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004aec:	2500      	movne	r5, #0
 8004aee:	4293      	cmp	r3, r2
 8004af0:	bfc4      	itt	gt
 8004af2:	1a9b      	subgt	r3, r3, r2
 8004af4:	18ed      	addgt	r5, r5, r3
 8004af6:	f04f 0900 	mov.w	r9, #0
 8004afa:	341a      	adds	r4, #26
 8004afc:	454d      	cmp	r5, r9
 8004afe:	d11a      	bne.n	8004b36 <_printf_common+0xd6>
 8004b00:	2000      	movs	r0, #0
 8004b02:	e008      	b.n	8004b16 <_printf_common+0xb6>
 8004b04:	2301      	movs	r3, #1
 8004b06:	4652      	mov	r2, sl
 8004b08:	4639      	mov	r1, r7
 8004b0a:	4630      	mov	r0, r6
 8004b0c:	47c0      	blx	r8
 8004b0e:	3001      	adds	r0, #1
 8004b10:	d103      	bne.n	8004b1a <_printf_common+0xba>
 8004b12:	f04f 30ff 	mov.w	r0, #4294967295
 8004b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b1a:	3501      	adds	r5, #1
 8004b1c:	e7c3      	b.n	8004aa6 <_printf_common+0x46>
 8004b1e:	18e1      	adds	r1, r4, r3
 8004b20:	1c5a      	adds	r2, r3, #1
 8004b22:	2030      	movs	r0, #48	; 0x30
 8004b24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b28:	4422      	add	r2, r4
 8004b2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b32:	3302      	adds	r3, #2
 8004b34:	e7c5      	b.n	8004ac2 <_printf_common+0x62>
 8004b36:	2301      	movs	r3, #1
 8004b38:	4622      	mov	r2, r4
 8004b3a:	4639      	mov	r1, r7
 8004b3c:	4630      	mov	r0, r6
 8004b3e:	47c0      	blx	r8
 8004b40:	3001      	adds	r0, #1
 8004b42:	d0e6      	beq.n	8004b12 <_printf_common+0xb2>
 8004b44:	f109 0901 	add.w	r9, r9, #1
 8004b48:	e7d8      	b.n	8004afc <_printf_common+0x9c>
	...

08004b4c <_printf_i>:
 8004b4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004b50:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004b54:	460c      	mov	r4, r1
 8004b56:	7e09      	ldrb	r1, [r1, #24]
 8004b58:	b085      	sub	sp, #20
 8004b5a:	296e      	cmp	r1, #110	; 0x6e
 8004b5c:	4617      	mov	r7, r2
 8004b5e:	4606      	mov	r6, r0
 8004b60:	4698      	mov	r8, r3
 8004b62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b64:	f000 80b3 	beq.w	8004cce <_printf_i+0x182>
 8004b68:	d822      	bhi.n	8004bb0 <_printf_i+0x64>
 8004b6a:	2963      	cmp	r1, #99	; 0x63
 8004b6c:	d036      	beq.n	8004bdc <_printf_i+0x90>
 8004b6e:	d80a      	bhi.n	8004b86 <_printf_i+0x3a>
 8004b70:	2900      	cmp	r1, #0
 8004b72:	f000 80b9 	beq.w	8004ce8 <_printf_i+0x19c>
 8004b76:	2958      	cmp	r1, #88	; 0x58
 8004b78:	f000 8083 	beq.w	8004c82 <_printf_i+0x136>
 8004b7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b80:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004b84:	e032      	b.n	8004bec <_printf_i+0xa0>
 8004b86:	2964      	cmp	r1, #100	; 0x64
 8004b88:	d001      	beq.n	8004b8e <_printf_i+0x42>
 8004b8a:	2969      	cmp	r1, #105	; 0x69
 8004b8c:	d1f6      	bne.n	8004b7c <_printf_i+0x30>
 8004b8e:	6820      	ldr	r0, [r4, #0]
 8004b90:	6813      	ldr	r3, [r2, #0]
 8004b92:	0605      	lsls	r5, r0, #24
 8004b94:	f103 0104 	add.w	r1, r3, #4
 8004b98:	d52a      	bpl.n	8004bf0 <_printf_i+0xa4>
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6011      	str	r1, [r2, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	da03      	bge.n	8004baa <_printf_i+0x5e>
 8004ba2:	222d      	movs	r2, #45	; 0x2d
 8004ba4:	425b      	negs	r3, r3
 8004ba6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004baa:	486f      	ldr	r0, [pc, #444]	; (8004d68 <_printf_i+0x21c>)
 8004bac:	220a      	movs	r2, #10
 8004bae:	e039      	b.n	8004c24 <_printf_i+0xd8>
 8004bb0:	2973      	cmp	r1, #115	; 0x73
 8004bb2:	f000 809d 	beq.w	8004cf0 <_printf_i+0x1a4>
 8004bb6:	d808      	bhi.n	8004bca <_printf_i+0x7e>
 8004bb8:	296f      	cmp	r1, #111	; 0x6f
 8004bba:	d020      	beq.n	8004bfe <_printf_i+0xb2>
 8004bbc:	2970      	cmp	r1, #112	; 0x70
 8004bbe:	d1dd      	bne.n	8004b7c <_printf_i+0x30>
 8004bc0:	6823      	ldr	r3, [r4, #0]
 8004bc2:	f043 0320 	orr.w	r3, r3, #32
 8004bc6:	6023      	str	r3, [r4, #0]
 8004bc8:	e003      	b.n	8004bd2 <_printf_i+0x86>
 8004bca:	2975      	cmp	r1, #117	; 0x75
 8004bcc:	d017      	beq.n	8004bfe <_printf_i+0xb2>
 8004bce:	2978      	cmp	r1, #120	; 0x78
 8004bd0:	d1d4      	bne.n	8004b7c <_printf_i+0x30>
 8004bd2:	2378      	movs	r3, #120	; 0x78
 8004bd4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004bd8:	4864      	ldr	r0, [pc, #400]	; (8004d6c <_printf_i+0x220>)
 8004bda:	e055      	b.n	8004c88 <_printf_i+0x13c>
 8004bdc:	6813      	ldr	r3, [r2, #0]
 8004bde:	1d19      	adds	r1, r3, #4
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	6011      	str	r1, [r2, #0]
 8004be4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004be8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bec:	2301      	movs	r3, #1
 8004bee:	e08c      	b.n	8004d0a <_printf_i+0x1be>
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	6011      	str	r1, [r2, #0]
 8004bf4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004bf8:	bf18      	it	ne
 8004bfa:	b21b      	sxthne	r3, r3
 8004bfc:	e7cf      	b.n	8004b9e <_printf_i+0x52>
 8004bfe:	6813      	ldr	r3, [r2, #0]
 8004c00:	6825      	ldr	r5, [r4, #0]
 8004c02:	1d18      	adds	r0, r3, #4
 8004c04:	6010      	str	r0, [r2, #0]
 8004c06:	0628      	lsls	r0, r5, #24
 8004c08:	d501      	bpl.n	8004c0e <_printf_i+0xc2>
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	e002      	b.n	8004c14 <_printf_i+0xc8>
 8004c0e:	0668      	lsls	r0, r5, #25
 8004c10:	d5fb      	bpl.n	8004c0a <_printf_i+0xbe>
 8004c12:	881b      	ldrh	r3, [r3, #0]
 8004c14:	4854      	ldr	r0, [pc, #336]	; (8004d68 <_printf_i+0x21c>)
 8004c16:	296f      	cmp	r1, #111	; 0x6f
 8004c18:	bf14      	ite	ne
 8004c1a:	220a      	movne	r2, #10
 8004c1c:	2208      	moveq	r2, #8
 8004c1e:	2100      	movs	r1, #0
 8004c20:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c24:	6865      	ldr	r5, [r4, #4]
 8004c26:	60a5      	str	r5, [r4, #8]
 8004c28:	2d00      	cmp	r5, #0
 8004c2a:	f2c0 8095 	blt.w	8004d58 <_printf_i+0x20c>
 8004c2e:	6821      	ldr	r1, [r4, #0]
 8004c30:	f021 0104 	bic.w	r1, r1, #4
 8004c34:	6021      	str	r1, [r4, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d13d      	bne.n	8004cb6 <_printf_i+0x16a>
 8004c3a:	2d00      	cmp	r5, #0
 8004c3c:	f040 808e 	bne.w	8004d5c <_printf_i+0x210>
 8004c40:	4665      	mov	r5, ip
 8004c42:	2a08      	cmp	r2, #8
 8004c44:	d10b      	bne.n	8004c5e <_printf_i+0x112>
 8004c46:	6823      	ldr	r3, [r4, #0]
 8004c48:	07db      	lsls	r3, r3, #31
 8004c4a:	d508      	bpl.n	8004c5e <_printf_i+0x112>
 8004c4c:	6923      	ldr	r3, [r4, #16]
 8004c4e:	6862      	ldr	r2, [r4, #4]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	bfde      	ittt	le
 8004c54:	2330      	movle	r3, #48	; 0x30
 8004c56:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c5a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c5e:	ebac 0305 	sub.w	r3, ip, r5
 8004c62:	6123      	str	r3, [r4, #16]
 8004c64:	f8cd 8000 	str.w	r8, [sp]
 8004c68:	463b      	mov	r3, r7
 8004c6a:	aa03      	add	r2, sp, #12
 8004c6c:	4621      	mov	r1, r4
 8004c6e:	4630      	mov	r0, r6
 8004c70:	f7ff fef6 	bl	8004a60 <_printf_common>
 8004c74:	3001      	adds	r0, #1
 8004c76:	d14d      	bne.n	8004d14 <_printf_i+0x1c8>
 8004c78:	f04f 30ff 	mov.w	r0, #4294967295
 8004c7c:	b005      	add	sp, #20
 8004c7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c82:	4839      	ldr	r0, [pc, #228]	; (8004d68 <_printf_i+0x21c>)
 8004c84:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004c88:	6813      	ldr	r3, [r2, #0]
 8004c8a:	6821      	ldr	r1, [r4, #0]
 8004c8c:	1d1d      	adds	r5, r3, #4
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6015      	str	r5, [r2, #0]
 8004c92:	060a      	lsls	r2, r1, #24
 8004c94:	d50b      	bpl.n	8004cae <_printf_i+0x162>
 8004c96:	07ca      	lsls	r2, r1, #31
 8004c98:	bf44      	itt	mi
 8004c9a:	f041 0120 	orrmi.w	r1, r1, #32
 8004c9e:	6021      	strmi	r1, [r4, #0]
 8004ca0:	b91b      	cbnz	r3, 8004caa <_printf_i+0x15e>
 8004ca2:	6822      	ldr	r2, [r4, #0]
 8004ca4:	f022 0220 	bic.w	r2, r2, #32
 8004ca8:	6022      	str	r2, [r4, #0]
 8004caa:	2210      	movs	r2, #16
 8004cac:	e7b7      	b.n	8004c1e <_printf_i+0xd2>
 8004cae:	064d      	lsls	r5, r1, #25
 8004cb0:	bf48      	it	mi
 8004cb2:	b29b      	uxthmi	r3, r3
 8004cb4:	e7ef      	b.n	8004c96 <_printf_i+0x14a>
 8004cb6:	4665      	mov	r5, ip
 8004cb8:	fbb3 f1f2 	udiv	r1, r3, r2
 8004cbc:	fb02 3311 	mls	r3, r2, r1, r3
 8004cc0:	5cc3      	ldrb	r3, [r0, r3]
 8004cc2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	2900      	cmp	r1, #0
 8004cca:	d1f5      	bne.n	8004cb8 <_printf_i+0x16c>
 8004ccc:	e7b9      	b.n	8004c42 <_printf_i+0xf6>
 8004cce:	6813      	ldr	r3, [r2, #0]
 8004cd0:	6825      	ldr	r5, [r4, #0]
 8004cd2:	6961      	ldr	r1, [r4, #20]
 8004cd4:	1d18      	adds	r0, r3, #4
 8004cd6:	6010      	str	r0, [r2, #0]
 8004cd8:	0628      	lsls	r0, r5, #24
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	d501      	bpl.n	8004ce2 <_printf_i+0x196>
 8004cde:	6019      	str	r1, [r3, #0]
 8004ce0:	e002      	b.n	8004ce8 <_printf_i+0x19c>
 8004ce2:	066a      	lsls	r2, r5, #25
 8004ce4:	d5fb      	bpl.n	8004cde <_printf_i+0x192>
 8004ce6:	8019      	strh	r1, [r3, #0]
 8004ce8:	2300      	movs	r3, #0
 8004cea:	6123      	str	r3, [r4, #16]
 8004cec:	4665      	mov	r5, ip
 8004cee:	e7b9      	b.n	8004c64 <_printf_i+0x118>
 8004cf0:	6813      	ldr	r3, [r2, #0]
 8004cf2:	1d19      	adds	r1, r3, #4
 8004cf4:	6011      	str	r1, [r2, #0]
 8004cf6:	681d      	ldr	r5, [r3, #0]
 8004cf8:	6862      	ldr	r2, [r4, #4]
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	4628      	mov	r0, r5
 8004cfe:	f7fb fa6f 	bl	80001e0 <memchr>
 8004d02:	b108      	cbz	r0, 8004d08 <_printf_i+0x1bc>
 8004d04:	1b40      	subs	r0, r0, r5
 8004d06:	6060      	str	r0, [r4, #4]
 8004d08:	6863      	ldr	r3, [r4, #4]
 8004d0a:	6123      	str	r3, [r4, #16]
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d12:	e7a7      	b.n	8004c64 <_printf_i+0x118>
 8004d14:	6923      	ldr	r3, [r4, #16]
 8004d16:	462a      	mov	r2, r5
 8004d18:	4639      	mov	r1, r7
 8004d1a:	4630      	mov	r0, r6
 8004d1c:	47c0      	blx	r8
 8004d1e:	3001      	adds	r0, #1
 8004d20:	d0aa      	beq.n	8004c78 <_printf_i+0x12c>
 8004d22:	6823      	ldr	r3, [r4, #0]
 8004d24:	079b      	lsls	r3, r3, #30
 8004d26:	d413      	bmi.n	8004d50 <_printf_i+0x204>
 8004d28:	68e0      	ldr	r0, [r4, #12]
 8004d2a:	9b03      	ldr	r3, [sp, #12]
 8004d2c:	4298      	cmp	r0, r3
 8004d2e:	bfb8      	it	lt
 8004d30:	4618      	movlt	r0, r3
 8004d32:	e7a3      	b.n	8004c7c <_printf_i+0x130>
 8004d34:	2301      	movs	r3, #1
 8004d36:	464a      	mov	r2, r9
 8004d38:	4639      	mov	r1, r7
 8004d3a:	4630      	mov	r0, r6
 8004d3c:	47c0      	blx	r8
 8004d3e:	3001      	adds	r0, #1
 8004d40:	d09a      	beq.n	8004c78 <_printf_i+0x12c>
 8004d42:	3501      	adds	r5, #1
 8004d44:	68e3      	ldr	r3, [r4, #12]
 8004d46:	9a03      	ldr	r2, [sp, #12]
 8004d48:	1a9b      	subs	r3, r3, r2
 8004d4a:	42ab      	cmp	r3, r5
 8004d4c:	dcf2      	bgt.n	8004d34 <_printf_i+0x1e8>
 8004d4e:	e7eb      	b.n	8004d28 <_printf_i+0x1dc>
 8004d50:	2500      	movs	r5, #0
 8004d52:	f104 0919 	add.w	r9, r4, #25
 8004d56:	e7f5      	b.n	8004d44 <_printf_i+0x1f8>
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1ac      	bne.n	8004cb6 <_printf_i+0x16a>
 8004d5c:	7803      	ldrb	r3, [r0, #0]
 8004d5e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d62:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d66:	e76c      	b.n	8004c42 <_printf_i+0xf6>
 8004d68:	0800659a 	.word	0x0800659a
 8004d6c:	080065ab 	.word	0x080065ab

08004d70 <siprintf>:
 8004d70:	b40e      	push	{r1, r2, r3}
 8004d72:	b500      	push	{lr}
 8004d74:	b09c      	sub	sp, #112	; 0x70
 8004d76:	ab1d      	add	r3, sp, #116	; 0x74
 8004d78:	9002      	str	r0, [sp, #8]
 8004d7a:	9006      	str	r0, [sp, #24]
 8004d7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d80:	4809      	ldr	r0, [pc, #36]	; (8004da8 <siprintf+0x38>)
 8004d82:	9107      	str	r1, [sp, #28]
 8004d84:	9104      	str	r1, [sp, #16]
 8004d86:	4909      	ldr	r1, [pc, #36]	; (8004dac <siprintf+0x3c>)
 8004d88:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d8c:	9105      	str	r1, [sp, #20]
 8004d8e:	6800      	ldr	r0, [r0, #0]
 8004d90:	9301      	str	r3, [sp, #4]
 8004d92:	a902      	add	r1, sp, #8
 8004d94:	f001 fa5c 	bl	8006250 <_svfiprintf_r>
 8004d98:	9b02      	ldr	r3, [sp, #8]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	701a      	strb	r2, [r3, #0]
 8004d9e:	b01c      	add	sp, #112	; 0x70
 8004da0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004da4:	b003      	add	sp, #12
 8004da6:	4770      	bx	lr
 8004da8:	20000010 	.word	0x20000010
 8004dac:	ffff0208 	.word	0xffff0208

08004db0 <quorem>:
 8004db0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004db4:	6903      	ldr	r3, [r0, #16]
 8004db6:	690c      	ldr	r4, [r1, #16]
 8004db8:	42a3      	cmp	r3, r4
 8004dba:	4680      	mov	r8, r0
 8004dbc:	f2c0 8082 	blt.w	8004ec4 <quorem+0x114>
 8004dc0:	3c01      	subs	r4, #1
 8004dc2:	f101 0714 	add.w	r7, r1, #20
 8004dc6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004dca:	f100 0614 	add.w	r6, r0, #20
 8004dce:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004dd2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004dd6:	eb06 030c 	add.w	r3, r6, ip
 8004dda:	3501      	adds	r5, #1
 8004ddc:	eb07 090c 	add.w	r9, r7, ip
 8004de0:	9301      	str	r3, [sp, #4]
 8004de2:	fbb0 f5f5 	udiv	r5, r0, r5
 8004de6:	b395      	cbz	r5, 8004e4e <quorem+0x9e>
 8004de8:	f04f 0a00 	mov.w	sl, #0
 8004dec:	4638      	mov	r0, r7
 8004dee:	46b6      	mov	lr, r6
 8004df0:	46d3      	mov	fp, sl
 8004df2:	f850 2b04 	ldr.w	r2, [r0], #4
 8004df6:	b293      	uxth	r3, r2
 8004df8:	fb05 a303 	mla	r3, r5, r3, sl
 8004dfc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	ebab 0303 	sub.w	r3, fp, r3
 8004e06:	0c12      	lsrs	r2, r2, #16
 8004e08:	f8de b000 	ldr.w	fp, [lr]
 8004e0c:	fb05 a202 	mla	r2, r5, r2, sl
 8004e10:	fa13 f38b 	uxtah	r3, r3, fp
 8004e14:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004e18:	fa1f fb82 	uxth.w	fp, r2
 8004e1c:	f8de 2000 	ldr.w	r2, [lr]
 8004e20:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004e24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e2e:	4581      	cmp	r9, r0
 8004e30:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004e34:	f84e 3b04 	str.w	r3, [lr], #4
 8004e38:	d2db      	bcs.n	8004df2 <quorem+0x42>
 8004e3a:	f856 300c 	ldr.w	r3, [r6, ip]
 8004e3e:	b933      	cbnz	r3, 8004e4e <quorem+0x9e>
 8004e40:	9b01      	ldr	r3, [sp, #4]
 8004e42:	3b04      	subs	r3, #4
 8004e44:	429e      	cmp	r6, r3
 8004e46:	461a      	mov	r2, r3
 8004e48:	d330      	bcc.n	8004eac <quorem+0xfc>
 8004e4a:	f8c8 4010 	str.w	r4, [r8, #16]
 8004e4e:	4640      	mov	r0, r8
 8004e50:	f001 f828 	bl	8005ea4 <__mcmp>
 8004e54:	2800      	cmp	r0, #0
 8004e56:	db25      	blt.n	8004ea4 <quorem+0xf4>
 8004e58:	3501      	adds	r5, #1
 8004e5a:	4630      	mov	r0, r6
 8004e5c:	f04f 0c00 	mov.w	ip, #0
 8004e60:	f857 2b04 	ldr.w	r2, [r7], #4
 8004e64:	f8d0 e000 	ldr.w	lr, [r0]
 8004e68:	b293      	uxth	r3, r2
 8004e6a:	ebac 0303 	sub.w	r3, ip, r3
 8004e6e:	0c12      	lsrs	r2, r2, #16
 8004e70:	fa13 f38e 	uxtah	r3, r3, lr
 8004e74:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004e78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e82:	45b9      	cmp	r9, r7
 8004e84:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004e88:	f840 3b04 	str.w	r3, [r0], #4
 8004e8c:	d2e8      	bcs.n	8004e60 <quorem+0xb0>
 8004e8e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004e92:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004e96:	b92a      	cbnz	r2, 8004ea4 <quorem+0xf4>
 8004e98:	3b04      	subs	r3, #4
 8004e9a:	429e      	cmp	r6, r3
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	d30b      	bcc.n	8004eb8 <quorem+0x108>
 8004ea0:	f8c8 4010 	str.w	r4, [r8, #16]
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	b003      	add	sp, #12
 8004ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eac:	6812      	ldr	r2, [r2, #0]
 8004eae:	3b04      	subs	r3, #4
 8004eb0:	2a00      	cmp	r2, #0
 8004eb2:	d1ca      	bne.n	8004e4a <quorem+0x9a>
 8004eb4:	3c01      	subs	r4, #1
 8004eb6:	e7c5      	b.n	8004e44 <quorem+0x94>
 8004eb8:	6812      	ldr	r2, [r2, #0]
 8004eba:	3b04      	subs	r3, #4
 8004ebc:	2a00      	cmp	r2, #0
 8004ebe:	d1ef      	bne.n	8004ea0 <quorem+0xf0>
 8004ec0:	3c01      	subs	r4, #1
 8004ec2:	e7ea      	b.n	8004e9a <quorem+0xea>
 8004ec4:	2000      	movs	r0, #0
 8004ec6:	e7ee      	b.n	8004ea6 <quorem+0xf6>

08004ec8 <_dtoa_r>:
 8004ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ecc:	ec57 6b10 	vmov	r6, r7, d0
 8004ed0:	b097      	sub	sp, #92	; 0x5c
 8004ed2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004ed4:	9106      	str	r1, [sp, #24]
 8004ed6:	4604      	mov	r4, r0
 8004ed8:	920b      	str	r2, [sp, #44]	; 0x2c
 8004eda:	9312      	str	r3, [sp, #72]	; 0x48
 8004edc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004ee0:	e9cd 6700 	strd	r6, r7, [sp]
 8004ee4:	b93d      	cbnz	r5, 8004ef6 <_dtoa_r+0x2e>
 8004ee6:	2010      	movs	r0, #16
 8004ee8:	f000 fdb4 	bl	8005a54 <malloc>
 8004eec:	6260      	str	r0, [r4, #36]	; 0x24
 8004eee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004ef2:	6005      	str	r5, [r0, #0]
 8004ef4:	60c5      	str	r5, [r0, #12]
 8004ef6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ef8:	6819      	ldr	r1, [r3, #0]
 8004efa:	b151      	cbz	r1, 8004f12 <_dtoa_r+0x4a>
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	604a      	str	r2, [r1, #4]
 8004f00:	2301      	movs	r3, #1
 8004f02:	4093      	lsls	r3, r2
 8004f04:	608b      	str	r3, [r1, #8]
 8004f06:	4620      	mov	r0, r4
 8004f08:	f000 fdeb 	bl	8005ae2 <_Bfree>
 8004f0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f0e:	2200      	movs	r2, #0
 8004f10:	601a      	str	r2, [r3, #0]
 8004f12:	1e3b      	subs	r3, r7, #0
 8004f14:	bfbb      	ittet	lt
 8004f16:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004f1a:	9301      	strlt	r3, [sp, #4]
 8004f1c:	2300      	movge	r3, #0
 8004f1e:	2201      	movlt	r2, #1
 8004f20:	bfac      	ite	ge
 8004f22:	f8c8 3000 	strge.w	r3, [r8]
 8004f26:	f8c8 2000 	strlt.w	r2, [r8]
 8004f2a:	4baf      	ldr	r3, [pc, #700]	; (80051e8 <_dtoa_r+0x320>)
 8004f2c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004f30:	ea33 0308 	bics.w	r3, r3, r8
 8004f34:	d114      	bne.n	8004f60 <_dtoa_r+0x98>
 8004f36:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004f38:	f242 730f 	movw	r3, #9999	; 0x270f
 8004f3c:	6013      	str	r3, [r2, #0]
 8004f3e:	9b00      	ldr	r3, [sp, #0]
 8004f40:	b923      	cbnz	r3, 8004f4c <_dtoa_r+0x84>
 8004f42:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004f46:	2800      	cmp	r0, #0
 8004f48:	f000 8542 	beq.w	80059d0 <_dtoa_r+0xb08>
 8004f4c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f4e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80051fc <_dtoa_r+0x334>
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	f000 8544 	beq.w	80059e0 <_dtoa_r+0xb18>
 8004f58:	f10b 0303 	add.w	r3, fp, #3
 8004f5c:	f000 bd3e 	b.w	80059dc <_dtoa_r+0xb14>
 8004f60:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004f64:	2200      	movs	r2, #0
 8004f66:	2300      	movs	r3, #0
 8004f68:	4630      	mov	r0, r6
 8004f6a:	4639      	mov	r1, r7
 8004f6c:	f7fb fdac 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f70:	4681      	mov	r9, r0
 8004f72:	b168      	cbz	r0, 8004f90 <_dtoa_r+0xc8>
 8004f74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004f76:	2301      	movs	r3, #1
 8004f78:	6013      	str	r3, [r2, #0]
 8004f7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 8524 	beq.w	80059ca <_dtoa_r+0xb02>
 8004f82:	4b9a      	ldr	r3, [pc, #616]	; (80051ec <_dtoa_r+0x324>)
 8004f84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004f86:	f103 3bff 	add.w	fp, r3, #4294967295
 8004f8a:	6013      	str	r3, [r2, #0]
 8004f8c:	f000 bd28 	b.w	80059e0 <_dtoa_r+0xb18>
 8004f90:	aa14      	add	r2, sp, #80	; 0x50
 8004f92:	a915      	add	r1, sp, #84	; 0x54
 8004f94:	ec47 6b10 	vmov	d0, r6, r7
 8004f98:	4620      	mov	r0, r4
 8004f9a:	f000 fffa 	bl	8005f92 <__d2b>
 8004f9e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004fa2:	9004      	str	r0, [sp, #16]
 8004fa4:	2d00      	cmp	r5, #0
 8004fa6:	d07c      	beq.n	80050a2 <_dtoa_r+0x1da>
 8004fa8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004fac:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8004fb0:	46b2      	mov	sl, r6
 8004fb2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8004fb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004fba:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	4b8b      	ldr	r3, [pc, #556]	; (80051f0 <_dtoa_r+0x328>)
 8004fc2:	4650      	mov	r0, sl
 8004fc4:	4659      	mov	r1, fp
 8004fc6:	f7fb f95f 	bl	8000288 <__aeabi_dsub>
 8004fca:	a381      	add	r3, pc, #516	; (adr r3, 80051d0 <_dtoa_r+0x308>)
 8004fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd0:	f7fb fb12 	bl	80005f8 <__aeabi_dmul>
 8004fd4:	a380      	add	r3, pc, #512	; (adr r3, 80051d8 <_dtoa_r+0x310>)
 8004fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fda:	f7fb f957 	bl	800028c <__adddf3>
 8004fde:	4606      	mov	r6, r0
 8004fe0:	4628      	mov	r0, r5
 8004fe2:	460f      	mov	r7, r1
 8004fe4:	f7fb fa9e 	bl	8000524 <__aeabi_i2d>
 8004fe8:	a37d      	add	r3, pc, #500	; (adr r3, 80051e0 <_dtoa_r+0x318>)
 8004fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fee:	f7fb fb03 	bl	80005f8 <__aeabi_dmul>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	4630      	mov	r0, r6
 8004ff8:	4639      	mov	r1, r7
 8004ffa:	f7fb f947 	bl	800028c <__adddf3>
 8004ffe:	4606      	mov	r6, r0
 8005000:	460f      	mov	r7, r1
 8005002:	f7fb fda9 	bl	8000b58 <__aeabi_d2iz>
 8005006:	2200      	movs	r2, #0
 8005008:	4682      	mov	sl, r0
 800500a:	2300      	movs	r3, #0
 800500c:	4630      	mov	r0, r6
 800500e:	4639      	mov	r1, r7
 8005010:	f7fb fd64 	bl	8000adc <__aeabi_dcmplt>
 8005014:	b148      	cbz	r0, 800502a <_dtoa_r+0x162>
 8005016:	4650      	mov	r0, sl
 8005018:	f7fb fa84 	bl	8000524 <__aeabi_i2d>
 800501c:	4632      	mov	r2, r6
 800501e:	463b      	mov	r3, r7
 8005020:	f7fb fd52 	bl	8000ac8 <__aeabi_dcmpeq>
 8005024:	b908      	cbnz	r0, 800502a <_dtoa_r+0x162>
 8005026:	f10a 3aff 	add.w	sl, sl, #4294967295
 800502a:	f1ba 0f16 	cmp.w	sl, #22
 800502e:	d859      	bhi.n	80050e4 <_dtoa_r+0x21c>
 8005030:	4970      	ldr	r1, [pc, #448]	; (80051f4 <_dtoa_r+0x32c>)
 8005032:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005036:	e9dd 2300 	ldrd	r2, r3, [sp]
 800503a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800503e:	f7fb fd6b 	bl	8000b18 <__aeabi_dcmpgt>
 8005042:	2800      	cmp	r0, #0
 8005044:	d050      	beq.n	80050e8 <_dtoa_r+0x220>
 8005046:	f10a 3aff 	add.w	sl, sl, #4294967295
 800504a:	2300      	movs	r3, #0
 800504c:	930f      	str	r3, [sp, #60]	; 0x3c
 800504e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005050:	1b5d      	subs	r5, r3, r5
 8005052:	f1b5 0801 	subs.w	r8, r5, #1
 8005056:	bf49      	itett	mi
 8005058:	f1c5 0301 	rsbmi	r3, r5, #1
 800505c:	2300      	movpl	r3, #0
 800505e:	9305      	strmi	r3, [sp, #20]
 8005060:	f04f 0800 	movmi.w	r8, #0
 8005064:	bf58      	it	pl
 8005066:	9305      	strpl	r3, [sp, #20]
 8005068:	f1ba 0f00 	cmp.w	sl, #0
 800506c:	db3e      	blt.n	80050ec <_dtoa_r+0x224>
 800506e:	2300      	movs	r3, #0
 8005070:	44d0      	add	r8, sl
 8005072:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005076:	9307      	str	r3, [sp, #28]
 8005078:	9b06      	ldr	r3, [sp, #24]
 800507a:	2b09      	cmp	r3, #9
 800507c:	f200 8090 	bhi.w	80051a0 <_dtoa_r+0x2d8>
 8005080:	2b05      	cmp	r3, #5
 8005082:	bfc4      	itt	gt
 8005084:	3b04      	subgt	r3, #4
 8005086:	9306      	strgt	r3, [sp, #24]
 8005088:	9b06      	ldr	r3, [sp, #24]
 800508a:	f1a3 0302 	sub.w	r3, r3, #2
 800508e:	bfcc      	ite	gt
 8005090:	2500      	movgt	r5, #0
 8005092:	2501      	movle	r5, #1
 8005094:	2b03      	cmp	r3, #3
 8005096:	f200 808f 	bhi.w	80051b8 <_dtoa_r+0x2f0>
 800509a:	e8df f003 	tbb	[pc, r3]
 800509e:	7f7d      	.short	0x7f7d
 80050a0:	7131      	.short	0x7131
 80050a2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80050a6:	441d      	add	r5, r3
 80050a8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80050ac:	2820      	cmp	r0, #32
 80050ae:	dd13      	ble.n	80050d8 <_dtoa_r+0x210>
 80050b0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80050b4:	9b00      	ldr	r3, [sp, #0]
 80050b6:	fa08 f800 	lsl.w	r8, r8, r0
 80050ba:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80050be:	fa23 f000 	lsr.w	r0, r3, r0
 80050c2:	ea48 0000 	orr.w	r0, r8, r0
 80050c6:	f7fb fa1d 	bl	8000504 <__aeabi_ui2d>
 80050ca:	2301      	movs	r3, #1
 80050cc:	4682      	mov	sl, r0
 80050ce:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80050d2:	3d01      	subs	r5, #1
 80050d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80050d6:	e772      	b.n	8004fbe <_dtoa_r+0xf6>
 80050d8:	9b00      	ldr	r3, [sp, #0]
 80050da:	f1c0 0020 	rsb	r0, r0, #32
 80050de:	fa03 f000 	lsl.w	r0, r3, r0
 80050e2:	e7f0      	b.n	80050c6 <_dtoa_r+0x1fe>
 80050e4:	2301      	movs	r3, #1
 80050e6:	e7b1      	b.n	800504c <_dtoa_r+0x184>
 80050e8:	900f      	str	r0, [sp, #60]	; 0x3c
 80050ea:	e7b0      	b.n	800504e <_dtoa_r+0x186>
 80050ec:	9b05      	ldr	r3, [sp, #20]
 80050ee:	eba3 030a 	sub.w	r3, r3, sl
 80050f2:	9305      	str	r3, [sp, #20]
 80050f4:	f1ca 0300 	rsb	r3, sl, #0
 80050f8:	9307      	str	r3, [sp, #28]
 80050fa:	2300      	movs	r3, #0
 80050fc:	930e      	str	r3, [sp, #56]	; 0x38
 80050fe:	e7bb      	b.n	8005078 <_dtoa_r+0x1b0>
 8005100:	2301      	movs	r3, #1
 8005102:	930a      	str	r3, [sp, #40]	; 0x28
 8005104:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005106:	2b00      	cmp	r3, #0
 8005108:	dd59      	ble.n	80051be <_dtoa_r+0x2f6>
 800510a:	9302      	str	r3, [sp, #8]
 800510c:	4699      	mov	r9, r3
 800510e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005110:	2200      	movs	r2, #0
 8005112:	6072      	str	r2, [r6, #4]
 8005114:	2204      	movs	r2, #4
 8005116:	f102 0014 	add.w	r0, r2, #20
 800511a:	4298      	cmp	r0, r3
 800511c:	6871      	ldr	r1, [r6, #4]
 800511e:	d953      	bls.n	80051c8 <_dtoa_r+0x300>
 8005120:	4620      	mov	r0, r4
 8005122:	f000 fcaa 	bl	8005a7a <_Balloc>
 8005126:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005128:	6030      	str	r0, [r6, #0]
 800512a:	f1b9 0f0e 	cmp.w	r9, #14
 800512e:	f8d3 b000 	ldr.w	fp, [r3]
 8005132:	f200 80e6 	bhi.w	8005302 <_dtoa_r+0x43a>
 8005136:	2d00      	cmp	r5, #0
 8005138:	f000 80e3 	beq.w	8005302 <_dtoa_r+0x43a>
 800513c:	ed9d 7b00 	vldr	d7, [sp]
 8005140:	f1ba 0f00 	cmp.w	sl, #0
 8005144:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005148:	dd74      	ble.n	8005234 <_dtoa_r+0x36c>
 800514a:	4a2a      	ldr	r2, [pc, #168]	; (80051f4 <_dtoa_r+0x32c>)
 800514c:	f00a 030f 	and.w	r3, sl, #15
 8005150:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005154:	ed93 7b00 	vldr	d7, [r3]
 8005158:	ea4f 162a 	mov.w	r6, sl, asr #4
 800515c:	06f0      	lsls	r0, r6, #27
 800515e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005162:	d565      	bpl.n	8005230 <_dtoa_r+0x368>
 8005164:	4b24      	ldr	r3, [pc, #144]	; (80051f8 <_dtoa_r+0x330>)
 8005166:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800516a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800516e:	f7fb fb6d 	bl	800084c <__aeabi_ddiv>
 8005172:	e9cd 0100 	strd	r0, r1, [sp]
 8005176:	f006 060f 	and.w	r6, r6, #15
 800517a:	2503      	movs	r5, #3
 800517c:	4f1e      	ldr	r7, [pc, #120]	; (80051f8 <_dtoa_r+0x330>)
 800517e:	e04c      	b.n	800521a <_dtoa_r+0x352>
 8005180:	2301      	movs	r3, #1
 8005182:	930a      	str	r3, [sp, #40]	; 0x28
 8005184:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005186:	4453      	add	r3, sl
 8005188:	f103 0901 	add.w	r9, r3, #1
 800518c:	9302      	str	r3, [sp, #8]
 800518e:	464b      	mov	r3, r9
 8005190:	2b01      	cmp	r3, #1
 8005192:	bfb8      	it	lt
 8005194:	2301      	movlt	r3, #1
 8005196:	e7ba      	b.n	800510e <_dtoa_r+0x246>
 8005198:	2300      	movs	r3, #0
 800519a:	e7b2      	b.n	8005102 <_dtoa_r+0x23a>
 800519c:	2300      	movs	r3, #0
 800519e:	e7f0      	b.n	8005182 <_dtoa_r+0x2ba>
 80051a0:	2501      	movs	r5, #1
 80051a2:	2300      	movs	r3, #0
 80051a4:	9306      	str	r3, [sp, #24]
 80051a6:	950a      	str	r5, [sp, #40]	; 0x28
 80051a8:	f04f 33ff 	mov.w	r3, #4294967295
 80051ac:	9302      	str	r3, [sp, #8]
 80051ae:	4699      	mov	r9, r3
 80051b0:	2200      	movs	r2, #0
 80051b2:	2312      	movs	r3, #18
 80051b4:	920b      	str	r2, [sp, #44]	; 0x2c
 80051b6:	e7aa      	b.n	800510e <_dtoa_r+0x246>
 80051b8:	2301      	movs	r3, #1
 80051ba:	930a      	str	r3, [sp, #40]	; 0x28
 80051bc:	e7f4      	b.n	80051a8 <_dtoa_r+0x2e0>
 80051be:	2301      	movs	r3, #1
 80051c0:	9302      	str	r3, [sp, #8]
 80051c2:	4699      	mov	r9, r3
 80051c4:	461a      	mov	r2, r3
 80051c6:	e7f5      	b.n	80051b4 <_dtoa_r+0x2ec>
 80051c8:	3101      	adds	r1, #1
 80051ca:	6071      	str	r1, [r6, #4]
 80051cc:	0052      	lsls	r2, r2, #1
 80051ce:	e7a2      	b.n	8005116 <_dtoa_r+0x24e>
 80051d0:	636f4361 	.word	0x636f4361
 80051d4:	3fd287a7 	.word	0x3fd287a7
 80051d8:	8b60c8b3 	.word	0x8b60c8b3
 80051dc:	3fc68a28 	.word	0x3fc68a28
 80051e0:	509f79fb 	.word	0x509f79fb
 80051e4:	3fd34413 	.word	0x3fd34413
 80051e8:	7ff00000 	.word	0x7ff00000
 80051ec:	08006599 	.word	0x08006599
 80051f0:	3ff80000 	.word	0x3ff80000
 80051f4:	080065f8 	.word	0x080065f8
 80051f8:	080065d0 	.word	0x080065d0
 80051fc:	080065c5 	.word	0x080065c5
 8005200:	07f1      	lsls	r1, r6, #31
 8005202:	d508      	bpl.n	8005216 <_dtoa_r+0x34e>
 8005204:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005208:	e9d7 2300 	ldrd	r2, r3, [r7]
 800520c:	f7fb f9f4 	bl	80005f8 <__aeabi_dmul>
 8005210:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005214:	3501      	adds	r5, #1
 8005216:	1076      	asrs	r6, r6, #1
 8005218:	3708      	adds	r7, #8
 800521a:	2e00      	cmp	r6, #0
 800521c:	d1f0      	bne.n	8005200 <_dtoa_r+0x338>
 800521e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005222:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005226:	f7fb fb11 	bl	800084c <__aeabi_ddiv>
 800522a:	e9cd 0100 	strd	r0, r1, [sp]
 800522e:	e01a      	b.n	8005266 <_dtoa_r+0x39e>
 8005230:	2502      	movs	r5, #2
 8005232:	e7a3      	b.n	800517c <_dtoa_r+0x2b4>
 8005234:	f000 80a0 	beq.w	8005378 <_dtoa_r+0x4b0>
 8005238:	f1ca 0600 	rsb	r6, sl, #0
 800523c:	4b9f      	ldr	r3, [pc, #636]	; (80054bc <_dtoa_r+0x5f4>)
 800523e:	4fa0      	ldr	r7, [pc, #640]	; (80054c0 <_dtoa_r+0x5f8>)
 8005240:	f006 020f 	and.w	r2, r6, #15
 8005244:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005250:	f7fb f9d2 	bl	80005f8 <__aeabi_dmul>
 8005254:	e9cd 0100 	strd	r0, r1, [sp]
 8005258:	1136      	asrs	r6, r6, #4
 800525a:	2300      	movs	r3, #0
 800525c:	2502      	movs	r5, #2
 800525e:	2e00      	cmp	r6, #0
 8005260:	d17f      	bne.n	8005362 <_dtoa_r+0x49a>
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1e1      	bne.n	800522a <_dtoa_r+0x362>
 8005266:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005268:	2b00      	cmp	r3, #0
 800526a:	f000 8087 	beq.w	800537c <_dtoa_r+0x4b4>
 800526e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005272:	2200      	movs	r2, #0
 8005274:	4b93      	ldr	r3, [pc, #588]	; (80054c4 <_dtoa_r+0x5fc>)
 8005276:	4630      	mov	r0, r6
 8005278:	4639      	mov	r1, r7
 800527a:	f7fb fc2f 	bl	8000adc <__aeabi_dcmplt>
 800527e:	2800      	cmp	r0, #0
 8005280:	d07c      	beq.n	800537c <_dtoa_r+0x4b4>
 8005282:	f1b9 0f00 	cmp.w	r9, #0
 8005286:	d079      	beq.n	800537c <_dtoa_r+0x4b4>
 8005288:	9b02      	ldr	r3, [sp, #8]
 800528a:	2b00      	cmp	r3, #0
 800528c:	dd35      	ble.n	80052fa <_dtoa_r+0x432>
 800528e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005292:	9308      	str	r3, [sp, #32]
 8005294:	4639      	mov	r1, r7
 8005296:	2200      	movs	r2, #0
 8005298:	4b8b      	ldr	r3, [pc, #556]	; (80054c8 <_dtoa_r+0x600>)
 800529a:	4630      	mov	r0, r6
 800529c:	f7fb f9ac 	bl	80005f8 <__aeabi_dmul>
 80052a0:	e9cd 0100 	strd	r0, r1, [sp]
 80052a4:	9f02      	ldr	r7, [sp, #8]
 80052a6:	3501      	adds	r5, #1
 80052a8:	4628      	mov	r0, r5
 80052aa:	f7fb f93b 	bl	8000524 <__aeabi_i2d>
 80052ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80052b2:	f7fb f9a1 	bl	80005f8 <__aeabi_dmul>
 80052b6:	2200      	movs	r2, #0
 80052b8:	4b84      	ldr	r3, [pc, #528]	; (80054cc <_dtoa_r+0x604>)
 80052ba:	f7fa ffe7 	bl	800028c <__adddf3>
 80052be:	4605      	mov	r5, r0
 80052c0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80052c4:	2f00      	cmp	r7, #0
 80052c6:	d15d      	bne.n	8005384 <_dtoa_r+0x4bc>
 80052c8:	2200      	movs	r2, #0
 80052ca:	4b81      	ldr	r3, [pc, #516]	; (80054d0 <_dtoa_r+0x608>)
 80052cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80052d0:	f7fa ffda 	bl	8000288 <__aeabi_dsub>
 80052d4:	462a      	mov	r2, r5
 80052d6:	4633      	mov	r3, r6
 80052d8:	e9cd 0100 	strd	r0, r1, [sp]
 80052dc:	f7fb fc1c 	bl	8000b18 <__aeabi_dcmpgt>
 80052e0:	2800      	cmp	r0, #0
 80052e2:	f040 8288 	bne.w	80057f6 <_dtoa_r+0x92e>
 80052e6:	462a      	mov	r2, r5
 80052e8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80052ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80052f0:	f7fb fbf4 	bl	8000adc <__aeabi_dcmplt>
 80052f4:	2800      	cmp	r0, #0
 80052f6:	f040 827c 	bne.w	80057f2 <_dtoa_r+0x92a>
 80052fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80052fe:	e9cd 2300 	strd	r2, r3, [sp]
 8005302:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005304:	2b00      	cmp	r3, #0
 8005306:	f2c0 8150 	blt.w	80055aa <_dtoa_r+0x6e2>
 800530a:	f1ba 0f0e 	cmp.w	sl, #14
 800530e:	f300 814c 	bgt.w	80055aa <_dtoa_r+0x6e2>
 8005312:	4b6a      	ldr	r3, [pc, #424]	; (80054bc <_dtoa_r+0x5f4>)
 8005314:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005318:	ed93 7b00 	vldr	d7, [r3]
 800531c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800531e:	2b00      	cmp	r3, #0
 8005320:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005324:	f280 80d8 	bge.w	80054d8 <_dtoa_r+0x610>
 8005328:	f1b9 0f00 	cmp.w	r9, #0
 800532c:	f300 80d4 	bgt.w	80054d8 <_dtoa_r+0x610>
 8005330:	f040 825e 	bne.w	80057f0 <_dtoa_r+0x928>
 8005334:	2200      	movs	r2, #0
 8005336:	4b66      	ldr	r3, [pc, #408]	; (80054d0 <_dtoa_r+0x608>)
 8005338:	ec51 0b17 	vmov	r0, r1, d7
 800533c:	f7fb f95c 	bl	80005f8 <__aeabi_dmul>
 8005340:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005344:	f7fb fbde 	bl	8000b04 <__aeabi_dcmpge>
 8005348:	464f      	mov	r7, r9
 800534a:	464e      	mov	r6, r9
 800534c:	2800      	cmp	r0, #0
 800534e:	f040 8234 	bne.w	80057ba <_dtoa_r+0x8f2>
 8005352:	2331      	movs	r3, #49	; 0x31
 8005354:	f10b 0501 	add.w	r5, fp, #1
 8005358:	f88b 3000 	strb.w	r3, [fp]
 800535c:	f10a 0a01 	add.w	sl, sl, #1
 8005360:	e22f      	b.n	80057c2 <_dtoa_r+0x8fa>
 8005362:	07f2      	lsls	r2, r6, #31
 8005364:	d505      	bpl.n	8005372 <_dtoa_r+0x4aa>
 8005366:	e9d7 2300 	ldrd	r2, r3, [r7]
 800536a:	f7fb f945 	bl	80005f8 <__aeabi_dmul>
 800536e:	3501      	adds	r5, #1
 8005370:	2301      	movs	r3, #1
 8005372:	1076      	asrs	r6, r6, #1
 8005374:	3708      	adds	r7, #8
 8005376:	e772      	b.n	800525e <_dtoa_r+0x396>
 8005378:	2502      	movs	r5, #2
 800537a:	e774      	b.n	8005266 <_dtoa_r+0x39e>
 800537c:	f8cd a020 	str.w	sl, [sp, #32]
 8005380:	464f      	mov	r7, r9
 8005382:	e791      	b.n	80052a8 <_dtoa_r+0x3e0>
 8005384:	4b4d      	ldr	r3, [pc, #308]	; (80054bc <_dtoa_r+0x5f4>)
 8005386:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800538a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800538e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005390:	2b00      	cmp	r3, #0
 8005392:	d047      	beq.n	8005424 <_dtoa_r+0x55c>
 8005394:	4602      	mov	r2, r0
 8005396:	460b      	mov	r3, r1
 8005398:	2000      	movs	r0, #0
 800539a:	494e      	ldr	r1, [pc, #312]	; (80054d4 <_dtoa_r+0x60c>)
 800539c:	f7fb fa56 	bl	800084c <__aeabi_ddiv>
 80053a0:	462a      	mov	r2, r5
 80053a2:	4633      	mov	r3, r6
 80053a4:	f7fa ff70 	bl	8000288 <__aeabi_dsub>
 80053a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80053ac:	465d      	mov	r5, fp
 80053ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80053b2:	f7fb fbd1 	bl	8000b58 <__aeabi_d2iz>
 80053b6:	4606      	mov	r6, r0
 80053b8:	f7fb f8b4 	bl	8000524 <__aeabi_i2d>
 80053bc:	4602      	mov	r2, r0
 80053be:	460b      	mov	r3, r1
 80053c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80053c4:	f7fa ff60 	bl	8000288 <__aeabi_dsub>
 80053c8:	3630      	adds	r6, #48	; 0x30
 80053ca:	f805 6b01 	strb.w	r6, [r5], #1
 80053ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80053d2:	e9cd 0100 	strd	r0, r1, [sp]
 80053d6:	f7fb fb81 	bl	8000adc <__aeabi_dcmplt>
 80053da:	2800      	cmp	r0, #0
 80053dc:	d163      	bne.n	80054a6 <_dtoa_r+0x5de>
 80053de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80053e2:	2000      	movs	r0, #0
 80053e4:	4937      	ldr	r1, [pc, #220]	; (80054c4 <_dtoa_r+0x5fc>)
 80053e6:	f7fa ff4f 	bl	8000288 <__aeabi_dsub>
 80053ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80053ee:	f7fb fb75 	bl	8000adc <__aeabi_dcmplt>
 80053f2:	2800      	cmp	r0, #0
 80053f4:	f040 80b7 	bne.w	8005566 <_dtoa_r+0x69e>
 80053f8:	eba5 030b 	sub.w	r3, r5, fp
 80053fc:	429f      	cmp	r7, r3
 80053fe:	f77f af7c 	ble.w	80052fa <_dtoa_r+0x432>
 8005402:	2200      	movs	r2, #0
 8005404:	4b30      	ldr	r3, [pc, #192]	; (80054c8 <_dtoa_r+0x600>)
 8005406:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800540a:	f7fb f8f5 	bl	80005f8 <__aeabi_dmul>
 800540e:	2200      	movs	r2, #0
 8005410:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005414:	4b2c      	ldr	r3, [pc, #176]	; (80054c8 <_dtoa_r+0x600>)
 8005416:	e9dd 0100 	ldrd	r0, r1, [sp]
 800541a:	f7fb f8ed 	bl	80005f8 <__aeabi_dmul>
 800541e:	e9cd 0100 	strd	r0, r1, [sp]
 8005422:	e7c4      	b.n	80053ae <_dtoa_r+0x4e6>
 8005424:	462a      	mov	r2, r5
 8005426:	4633      	mov	r3, r6
 8005428:	f7fb f8e6 	bl	80005f8 <__aeabi_dmul>
 800542c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005430:	eb0b 0507 	add.w	r5, fp, r7
 8005434:	465e      	mov	r6, fp
 8005436:	e9dd 0100 	ldrd	r0, r1, [sp]
 800543a:	f7fb fb8d 	bl	8000b58 <__aeabi_d2iz>
 800543e:	4607      	mov	r7, r0
 8005440:	f7fb f870 	bl	8000524 <__aeabi_i2d>
 8005444:	3730      	adds	r7, #48	; 0x30
 8005446:	4602      	mov	r2, r0
 8005448:	460b      	mov	r3, r1
 800544a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800544e:	f7fa ff1b 	bl	8000288 <__aeabi_dsub>
 8005452:	f806 7b01 	strb.w	r7, [r6], #1
 8005456:	42ae      	cmp	r6, r5
 8005458:	e9cd 0100 	strd	r0, r1, [sp]
 800545c:	f04f 0200 	mov.w	r2, #0
 8005460:	d126      	bne.n	80054b0 <_dtoa_r+0x5e8>
 8005462:	4b1c      	ldr	r3, [pc, #112]	; (80054d4 <_dtoa_r+0x60c>)
 8005464:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005468:	f7fa ff10 	bl	800028c <__adddf3>
 800546c:	4602      	mov	r2, r0
 800546e:	460b      	mov	r3, r1
 8005470:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005474:	f7fb fb50 	bl	8000b18 <__aeabi_dcmpgt>
 8005478:	2800      	cmp	r0, #0
 800547a:	d174      	bne.n	8005566 <_dtoa_r+0x69e>
 800547c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005480:	2000      	movs	r0, #0
 8005482:	4914      	ldr	r1, [pc, #80]	; (80054d4 <_dtoa_r+0x60c>)
 8005484:	f7fa ff00 	bl	8000288 <__aeabi_dsub>
 8005488:	4602      	mov	r2, r0
 800548a:	460b      	mov	r3, r1
 800548c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005490:	f7fb fb24 	bl	8000adc <__aeabi_dcmplt>
 8005494:	2800      	cmp	r0, #0
 8005496:	f43f af30 	beq.w	80052fa <_dtoa_r+0x432>
 800549a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800549e:	2b30      	cmp	r3, #48	; 0x30
 80054a0:	f105 32ff 	add.w	r2, r5, #4294967295
 80054a4:	d002      	beq.n	80054ac <_dtoa_r+0x5e4>
 80054a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80054aa:	e04a      	b.n	8005542 <_dtoa_r+0x67a>
 80054ac:	4615      	mov	r5, r2
 80054ae:	e7f4      	b.n	800549a <_dtoa_r+0x5d2>
 80054b0:	4b05      	ldr	r3, [pc, #20]	; (80054c8 <_dtoa_r+0x600>)
 80054b2:	f7fb f8a1 	bl	80005f8 <__aeabi_dmul>
 80054b6:	e9cd 0100 	strd	r0, r1, [sp]
 80054ba:	e7bc      	b.n	8005436 <_dtoa_r+0x56e>
 80054bc:	080065f8 	.word	0x080065f8
 80054c0:	080065d0 	.word	0x080065d0
 80054c4:	3ff00000 	.word	0x3ff00000
 80054c8:	40240000 	.word	0x40240000
 80054cc:	401c0000 	.word	0x401c0000
 80054d0:	40140000 	.word	0x40140000
 80054d4:	3fe00000 	.word	0x3fe00000
 80054d8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80054dc:	465d      	mov	r5, fp
 80054de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80054e2:	4630      	mov	r0, r6
 80054e4:	4639      	mov	r1, r7
 80054e6:	f7fb f9b1 	bl	800084c <__aeabi_ddiv>
 80054ea:	f7fb fb35 	bl	8000b58 <__aeabi_d2iz>
 80054ee:	4680      	mov	r8, r0
 80054f0:	f7fb f818 	bl	8000524 <__aeabi_i2d>
 80054f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80054f8:	f7fb f87e 	bl	80005f8 <__aeabi_dmul>
 80054fc:	4602      	mov	r2, r0
 80054fe:	460b      	mov	r3, r1
 8005500:	4630      	mov	r0, r6
 8005502:	4639      	mov	r1, r7
 8005504:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005508:	f7fa febe 	bl	8000288 <__aeabi_dsub>
 800550c:	f805 6b01 	strb.w	r6, [r5], #1
 8005510:	eba5 060b 	sub.w	r6, r5, fp
 8005514:	45b1      	cmp	r9, r6
 8005516:	4602      	mov	r2, r0
 8005518:	460b      	mov	r3, r1
 800551a:	d139      	bne.n	8005590 <_dtoa_r+0x6c8>
 800551c:	f7fa feb6 	bl	800028c <__adddf3>
 8005520:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005524:	4606      	mov	r6, r0
 8005526:	460f      	mov	r7, r1
 8005528:	f7fb faf6 	bl	8000b18 <__aeabi_dcmpgt>
 800552c:	b9c8      	cbnz	r0, 8005562 <_dtoa_r+0x69a>
 800552e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005532:	4630      	mov	r0, r6
 8005534:	4639      	mov	r1, r7
 8005536:	f7fb fac7 	bl	8000ac8 <__aeabi_dcmpeq>
 800553a:	b110      	cbz	r0, 8005542 <_dtoa_r+0x67a>
 800553c:	f018 0f01 	tst.w	r8, #1
 8005540:	d10f      	bne.n	8005562 <_dtoa_r+0x69a>
 8005542:	9904      	ldr	r1, [sp, #16]
 8005544:	4620      	mov	r0, r4
 8005546:	f000 facc 	bl	8005ae2 <_Bfree>
 800554a:	2300      	movs	r3, #0
 800554c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800554e:	702b      	strb	r3, [r5, #0]
 8005550:	f10a 0301 	add.w	r3, sl, #1
 8005554:	6013      	str	r3, [r2, #0]
 8005556:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 8241 	beq.w	80059e0 <_dtoa_r+0xb18>
 800555e:	601d      	str	r5, [r3, #0]
 8005560:	e23e      	b.n	80059e0 <_dtoa_r+0xb18>
 8005562:	f8cd a020 	str.w	sl, [sp, #32]
 8005566:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800556a:	2a39      	cmp	r2, #57	; 0x39
 800556c:	f105 33ff 	add.w	r3, r5, #4294967295
 8005570:	d108      	bne.n	8005584 <_dtoa_r+0x6bc>
 8005572:	459b      	cmp	fp, r3
 8005574:	d10a      	bne.n	800558c <_dtoa_r+0x6c4>
 8005576:	9b08      	ldr	r3, [sp, #32]
 8005578:	3301      	adds	r3, #1
 800557a:	9308      	str	r3, [sp, #32]
 800557c:	2330      	movs	r3, #48	; 0x30
 800557e:	f88b 3000 	strb.w	r3, [fp]
 8005582:	465b      	mov	r3, fp
 8005584:	781a      	ldrb	r2, [r3, #0]
 8005586:	3201      	adds	r2, #1
 8005588:	701a      	strb	r2, [r3, #0]
 800558a:	e78c      	b.n	80054a6 <_dtoa_r+0x5de>
 800558c:	461d      	mov	r5, r3
 800558e:	e7ea      	b.n	8005566 <_dtoa_r+0x69e>
 8005590:	2200      	movs	r2, #0
 8005592:	4b9b      	ldr	r3, [pc, #620]	; (8005800 <_dtoa_r+0x938>)
 8005594:	f7fb f830 	bl	80005f8 <__aeabi_dmul>
 8005598:	2200      	movs	r2, #0
 800559a:	2300      	movs	r3, #0
 800559c:	4606      	mov	r6, r0
 800559e:	460f      	mov	r7, r1
 80055a0:	f7fb fa92 	bl	8000ac8 <__aeabi_dcmpeq>
 80055a4:	2800      	cmp	r0, #0
 80055a6:	d09a      	beq.n	80054de <_dtoa_r+0x616>
 80055a8:	e7cb      	b.n	8005542 <_dtoa_r+0x67a>
 80055aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055ac:	2a00      	cmp	r2, #0
 80055ae:	f000 808b 	beq.w	80056c8 <_dtoa_r+0x800>
 80055b2:	9a06      	ldr	r2, [sp, #24]
 80055b4:	2a01      	cmp	r2, #1
 80055b6:	dc6e      	bgt.n	8005696 <_dtoa_r+0x7ce>
 80055b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80055ba:	2a00      	cmp	r2, #0
 80055bc:	d067      	beq.n	800568e <_dtoa_r+0x7c6>
 80055be:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80055c2:	9f07      	ldr	r7, [sp, #28]
 80055c4:	9d05      	ldr	r5, [sp, #20]
 80055c6:	9a05      	ldr	r2, [sp, #20]
 80055c8:	2101      	movs	r1, #1
 80055ca:	441a      	add	r2, r3
 80055cc:	4620      	mov	r0, r4
 80055ce:	9205      	str	r2, [sp, #20]
 80055d0:	4498      	add	r8, r3
 80055d2:	f000 fb26 	bl	8005c22 <__i2b>
 80055d6:	4606      	mov	r6, r0
 80055d8:	2d00      	cmp	r5, #0
 80055da:	dd0c      	ble.n	80055f6 <_dtoa_r+0x72e>
 80055dc:	f1b8 0f00 	cmp.w	r8, #0
 80055e0:	dd09      	ble.n	80055f6 <_dtoa_r+0x72e>
 80055e2:	4545      	cmp	r5, r8
 80055e4:	9a05      	ldr	r2, [sp, #20]
 80055e6:	462b      	mov	r3, r5
 80055e8:	bfa8      	it	ge
 80055ea:	4643      	movge	r3, r8
 80055ec:	1ad2      	subs	r2, r2, r3
 80055ee:	9205      	str	r2, [sp, #20]
 80055f0:	1aed      	subs	r5, r5, r3
 80055f2:	eba8 0803 	sub.w	r8, r8, r3
 80055f6:	9b07      	ldr	r3, [sp, #28]
 80055f8:	b1eb      	cbz	r3, 8005636 <_dtoa_r+0x76e>
 80055fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d067      	beq.n	80056d0 <_dtoa_r+0x808>
 8005600:	b18f      	cbz	r7, 8005626 <_dtoa_r+0x75e>
 8005602:	4631      	mov	r1, r6
 8005604:	463a      	mov	r2, r7
 8005606:	4620      	mov	r0, r4
 8005608:	f000 fbaa 	bl	8005d60 <__pow5mult>
 800560c:	9a04      	ldr	r2, [sp, #16]
 800560e:	4601      	mov	r1, r0
 8005610:	4606      	mov	r6, r0
 8005612:	4620      	mov	r0, r4
 8005614:	f000 fb0e 	bl	8005c34 <__multiply>
 8005618:	9904      	ldr	r1, [sp, #16]
 800561a:	9008      	str	r0, [sp, #32]
 800561c:	4620      	mov	r0, r4
 800561e:	f000 fa60 	bl	8005ae2 <_Bfree>
 8005622:	9b08      	ldr	r3, [sp, #32]
 8005624:	9304      	str	r3, [sp, #16]
 8005626:	9b07      	ldr	r3, [sp, #28]
 8005628:	1bda      	subs	r2, r3, r7
 800562a:	d004      	beq.n	8005636 <_dtoa_r+0x76e>
 800562c:	9904      	ldr	r1, [sp, #16]
 800562e:	4620      	mov	r0, r4
 8005630:	f000 fb96 	bl	8005d60 <__pow5mult>
 8005634:	9004      	str	r0, [sp, #16]
 8005636:	2101      	movs	r1, #1
 8005638:	4620      	mov	r0, r4
 800563a:	f000 faf2 	bl	8005c22 <__i2b>
 800563e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005640:	4607      	mov	r7, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	f000 81d0 	beq.w	80059e8 <_dtoa_r+0xb20>
 8005648:	461a      	mov	r2, r3
 800564a:	4601      	mov	r1, r0
 800564c:	4620      	mov	r0, r4
 800564e:	f000 fb87 	bl	8005d60 <__pow5mult>
 8005652:	9b06      	ldr	r3, [sp, #24]
 8005654:	2b01      	cmp	r3, #1
 8005656:	4607      	mov	r7, r0
 8005658:	dc40      	bgt.n	80056dc <_dtoa_r+0x814>
 800565a:	9b00      	ldr	r3, [sp, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d139      	bne.n	80056d4 <_dtoa_r+0x80c>
 8005660:	9b01      	ldr	r3, [sp, #4]
 8005662:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005666:	2b00      	cmp	r3, #0
 8005668:	d136      	bne.n	80056d8 <_dtoa_r+0x810>
 800566a:	9b01      	ldr	r3, [sp, #4]
 800566c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005670:	0d1b      	lsrs	r3, r3, #20
 8005672:	051b      	lsls	r3, r3, #20
 8005674:	b12b      	cbz	r3, 8005682 <_dtoa_r+0x7ba>
 8005676:	9b05      	ldr	r3, [sp, #20]
 8005678:	3301      	adds	r3, #1
 800567a:	9305      	str	r3, [sp, #20]
 800567c:	f108 0801 	add.w	r8, r8, #1
 8005680:	2301      	movs	r3, #1
 8005682:	9307      	str	r3, [sp, #28]
 8005684:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005686:	2b00      	cmp	r3, #0
 8005688:	d12a      	bne.n	80056e0 <_dtoa_r+0x818>
 800568a:	2001      	movs	r0, #1
 800568c:	e030      	b.n	80056f0 <_dtoa_r+0x828>
 800568e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005690:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005694:	e795      	b.n	80055c2 <_dtoa_r+0x6fa>
 8005696:	9b07      	ldr	r3, [sp, #28]
 8005698:	f109 37ff 	add.w	r7, r9, #4294967295
 800569c:	42bb      	cmp	r3, r7
 800569e:	bfbf      	itttt	lt
 80056a0:	9b07      	ldrlt	r3, [sp, #28]
 80056a2:	9707      	strlt	r7, [sp, #28]
 80056a4:	1afa      	sublt	r2, r7, r3
 80056a6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80056a8:	bfbb      	ittet	lt
 80056aa:	189b      	addlt	r3, r3, r2
 80056ac:	930e      	strlt	r3, [sp, #56]	; 0x38
 80056ae:	1bdf      	subge	r7, r3, r7
 80056b0:	2700      	movlt	r7, #0
 80056b2:	f1b9 0f00 	cmp.w	r9, #0
 80056b6:	bfb5      	itete	lt
 80056b8:	9b05      	ldrlt	r3, [sp, #20]
 80056ba:	9d05      	ldrge	r5, [sp, #20]
 80056bc:	eba3 0509 	sublt.w	r5, r3, r9
 80056c0:	464b      	movge	r3, r9
 80056c2:	bfb8      	it	lt
 80056c4:	2300      	movlt	r3, #0
 80056c6:	e77e      	b.n	80055c6 <_dtoa_r+0x6fe>
 80056c8:	9f07      	ldr	r7, [sp, #28]
 80056ca:	9d05      	ldr	r5, [sp, #20]
 80056cc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80056ce:	e783      	b.n	80055d8 <_dtoa_r+0x710>
 80056d0:	9a07      	ldr	r2, [sp, #28]
 80056d2:	e7ab      	b.n	800562c <_dtoa_r+0x764>
 80056d4:	2300      	movs	r3, #0
 80056d6:	e7d4      	b.n	8005682 <_dtoa_r+0x7ba>
 80056d8:	9b00      	ldr	r3, [sp, #0]
 80056da:	e7d2      	b.n	8005682 <_dtoa_r+0x7ba>
 80056dc:	2300      	movs	r3, #0
 80056de:	9307      	str	r3, [sp, #28]
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80056e6:	6918      	ldr	r0, [r3, #16]
 80056e8:	f000 fa4d 	bl	8005b86 <__hi0bits>
 80056ec:	f1c0 0020 	rsb	r0, r0, #32
 80056f0:	4440      	add	r0, r8
 80056f2:	f010 001f 	ands.w	r0, r0, #31
 80056f6:	d047      	beq.n	8005788 <_dtoa_r+0x8c0>
 80056f8:	f1c0 0320 	rsb	r3, r0, #32
 80056fc:	2b04      	cmp	r3, #4
 80056fe:	dd3b      	ble.n	8005778 <_dtoa_r+0x8b0>
 8005700:	9b05      	ldr	r3, [sp, #20]
 8005702:	f1c0 001c 	rsb	r0, r0, #28
 8005706:	4403      	add	r3, r0
 8005708:	9305      	str	r3, [sp, #20]
 800570a:	4405      	add	r5, r0
 800570c:	4480      	add	r8, r0
 800570e:	9b05      	ldr	r3, [sp, #20]
 8005710:	2b00      	cmp	r3, #0
 8005712:	dd05      	ble.n	8005720 <_dtoa_r+0x858>
 8005714:	461a      	mov	r2, r3
 8005716:	9904      	ldr	r1, [sp, #16]
 8005718:	4620      	mov	r0, r4
 800571a:	f000 fb6f 	bl	8005dfc <__lshift>
 800571e:	9004      	str	r0, [sp, #16]
 8005720:	f1b8 0f00 	cmp.w	r8, #0
 8005724:	dd05      	ble.n	8005732 <_dtoa_r+0x86a>
 8005726:	4639      	mov	r1, r7
 8005728:	4642      	mov	r2, r8
 800572a:	4620      	mov	r0, r4
 800572c:	f000 fb66 	bl	8005dfc <__lshift>
 8005730:	4607      	mov	r7, r0
 8005732:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005734:	b353      	cbz	r3, 800578c <_dtoa_r+0x8c4>
 8005736:	4639      	mov	r1, r7
 8005738:	9804      	ldr	r0, [sp, #16]
 800573a:	f000 fbb3 	bl	8005ea4 <__mcmp>
 800573e:	2800      	cmp	r0, #0
 8005740:	da24      	bge.n	800578c <_dtoa_r+0x8c4>
 8005742:	2300      	movs	r3, #0
 8005744:	220a      	movs	r2, #10
 8005746:	9904      	ldr	r1, [sp, #16]
 8005748:	4620      	mov	r0, r4
 800574a:	f000 f9e1 	bl	8005b10 <__multadd>
 800574e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005750:	9004      	str	r0, [sp, #16]
 8005752:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005756:	2b00      	cmp	r3, #0
 8005758:	f000 814d 	beq.w	80059f6 <_dtoa_r+0xb2e>
 800575c:	2300      	movs	r3, #0
 800575e:	4631      	mov	r1, r6
 8005760:	220a      	movs	r2, #10
 8005762:	4620      	mov	r0, r4
 8005764:	f000 f9d4 	bl	8005b10 <__multadd>
 8005768:	9b02      	ldr	r3, [sp, #8]
 800576a:	2b00      	cmp	r3, #0
 800576c:	4606      	mov	r6, r0
 800576e:	dc4f      	bgt.n	8005810 <_dtoa_r+0x948>
 8005770:	9b06      	ldr	r3, [sp, #24]
 8005772:	2b02      	cmp	r3, #2
 8005774:	dd4c      	ble.n	8005810 <_dtoa_r+0x948>
 8005776:	e011      	b.n	800579c <_dtoa_r+0x8d4>
 8005778:	d0c9      	beq.n	800570e <_dtoa_r+0x846>
 800577a:	9a05      	ldr	r2, [sp, #20]
 800577c:	331c      	adds	r3, #28
 800577e:	441a      	add	r2, r3
 8005780:	9205      	str	r2, [sp, #20]
 8005782:	441d      	add	r5, r3
 8005784:	4498      	add	r8, r3
 8005786:	e7c2      	b.n	800570e <_dtoa_r+0x846>
 8005788:	4603      	mov	r3, r0
 800578a:	e7f6      	b.n	800577a <_dtoa_r+0x8b2>
 800578c:	f1b9 0f00 	cmp.w	r9, #0
 8005790:	dc38      	bgt.n	8005804 <_dtoa_r+0x93c>
 8005792:	9b06      	ldr	r3, [sp, #24]
 8005794:	2b02      	cmp	r3, #2
 8005796:	dd35      	ble.n	8005804 <_dtoa_r+0x93c>
 8005798:	f8cd 9008 	str.w	r9, [sp, #8]
 800579c:	9b02      	ldr	r3, [sp, #8]
 800579e:	b963      	cbnz	r3, 80057ba <_dtoa_r+0x8f2>
 80057a0:	4639      	mov	r1, r7
 80057a2:	2205      	movs	r2, #5
 80057a4:	4620      	mov	r0, r4
 80057a6:	f000 f9b3 	bl	8005b10 <__multadd>
 80057aa:	4601      	mov	r1, r0
 80057ac:	4607      	mov	r7, r0
 80057ae:	9804      	ldr	r0, [sp, #16]
 80057b0:	f000 fb78 	bl	8005ea4 <__mcmp>
 80057b4:	2800      	cmp	r0, #0
 80057b6:	f73f adcc 	bgt.w	8005352 <_dtoa_r+0x48a>
 80057ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057bc:	465d      	mov	r5, fp
 80057be:	ea6f 0a03 	mvn.w	sl, r3
 80057c2:	f04f 0900 	mov.w	r9, #0
 80057c6:	4639      	mov	r1, r7
 80057c8:	4620      	mov	r0, r4
 80057ca:	f000 f98a 	bl	8005ae2 <_Bfree>
 80057ce:	2e00      	cmp	r6, #0
 80057d0:	f43f aeb7 	beq.w	8005542 <_dtoa_r+0x67a>
 80057d4:	f1b9 0f00 	cmp.w	r9, #0
 80057d8:	d005      	beq.n	80057e6 <_dtoa_r+0x91e>
 80057da:	45b1      	cmp	r9, r6
 80057dc:	d003      	beq.n	80057e6 <_dtoa_r+0x91e>
 80057de:	4649      	mov	r1, r9
 80057e0:	4620      	mov	r0, r4
 80057e2:	f000 f97e 	bl	8005ae2 <_Bfree>
 80057e6:	4631      	mov	r1, r6
 80057e8:	4620      	mov	r0, r4
 80057ea:	f000 f97a 	bl	8005ae2 <_Bfree>
 80057ee:	e6a8      	b.n	8005542 <_dtoa_r+0x67a>
 80057f0:	2700      	movs	r7, #0
 80057f2:	463e      	mov	r6, r7
 80057f4:	e7e1      	b.n	80057ba <_dtoa_r+0x8f2>
 80057f6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80057fa:	463e      	mov	r6, r7
 80057fc:	e5a9      	b.n	8005352 <_dtoa_r+0x48a>
 80057fe:	bf00      	nop
 8005800:	40240000 	.word	0x40240000
 8005804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005806:	f8cd 9008 	str.w	r9, [sp, #8]
 800580a:	2b00      	cmp	r3, #0
 800580c:	f000 80fa 	beq.w	8005a04 <_dtoa_r+0xb3c>
 8005810:	2d00      	cmp	r5, #0
 8005812:	dd05      	ble.n	8005820 <_dtoa_r+0x958>
 8005814:	4631      	mov	r1, r6
 8005816:	462a      	mov	r2, r5
 8005818:	4620      	mov	r0, r4
 800581a:	f000 faef 	bl	8005dfc <__lshift>
 800581e:	4606      	mov	r6, r0
 8005820:	9b07      	ldr	r3, [sp, #28]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d04c      	beq.n	80058c0 <_dtoa_r+0x9f8>
 8005826:	6871      	ldr	r1, [r6, #4]
 8005828:	4620      	mov	r0, r4
 800582a:	f000 f926 	bl	8005a7a <_Balloc>
 800582e:	6932      	ldr	r2, [r6, #16]
 8005830:	3202      	adds	r2, #2
 8005832:	4605      	mov	r5, r0
 8005834:	0092      	lsls	r2, r2, #2
 8005836:	f106 010c 	add.w	r1, r6, #12
 800583a:	300c      	adds	r0, #12
 800583c:	f000 f912 	bl	8005a64 <memcpy>
 8005840:	2201      	movs	r2, #1
 8005842:	4629      	mov	r1, r5
 8005844:	4620      	mov	r0, r4
 8005846:	f000 fad9 	bl	8005dfc <__lshift>
 800584a:	9b00      	ldr	r3, [sp, #0]
 800584c:	f8cd b014 	str.w	fp, [sp, #20]
 8005850:	f003 0301 	and.w	r3, r3, #1
 8005854:	46b1      	mov	r9, r6
 8005856:	9307      	str	r3, [sp, #28]
 8005858:	4606      	mov	r6, r0
 800585a:	4639      	mov	r1, r7
 800585c:	9804      	ldr	r0, [sp, #16]
 800585e:	f7ff faa7 	bl	8004db0 <quorem>
 8005862:	4649      	mov	r1, r9
 8005864:	4605      	mov	r5, r0
 8005866:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800586a:	9804      	ldr	r0, [sp, #16]
 800586c:	f000 fb1a 	bl	8005ea4 <__mcmp>
 8005870:	4632      	mov	r2, r6
 8005872:	9000      	str	r0, [sp, #0]
 8005874:	4639      	mov	r1, r7
 8005876:	4620      	mov	r0, r4
 8005878:	f000 fb2e 	bl	8005ed8 <__mdiff>
 800587c:	68c3      	ldr	r3, [r0, #12]
 800587e:	4602      	mov	r2, r0
 8005880:	bb03      	cbnz	r3, 80058c4 <_dtoa_r+0x9fc>
 8005882:	4601      	mov	r1, r0
 8005884:	9008      	str	r0, [sp, #32]
 8005886:	9804      	ldr	r0, [sp, #16]
 8005888:	f000 fb0c 	bl	8005ea4 <__mcmp>
 800588c:	9a08      	ldr	r2, [sp, #32]
 800588e:	4603      	mov	r3, r0
 8005890:	4611      	mov	r1, r2
 8005892:	4620      	mov	r0, r4
 8005894:	9308      	str	r3, [sp, #32]
 8005896:	f000 f924 	bl	8005ae2 <_Bfree>
 800589a:	9b08      	ldr	r3, [sp, #32]
 800589c:	b9a3      	cbnz	r3, 80058c8 <_dtoa_r+0xa00>
 800589e:	9a06      	ldr	r2, [sp, #24]
 80058a0:	b992      	cbnz	r2, 80058c8 <_dtoa_r+0xa00>
 80058a2:	9a07      	ldr	r2, [sp, #28]
 80058a4:	b982      	cbnz	r2, 80058c8 <_dtoa_r+0xa00>
 80058a6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80058aa:	d029      	beq.n	8005900 <_dtoa_r+0xa38>
 80058ac:	9b00      	ldr	r3, [sp, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	dd01      	ble.n	80058b6 <_dtoa_r+0x9ee>
 80058b2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80058b6:	9b05      	ldr	r3, [sp, #20]
 80058b8:	1c5d      	adds	r5, r3, #1
 80058ba:	f883 8000 	strb.w	r8, [r3]
 80058be:	e782      	b.n	80057c6 <_dtoa_r+0x8fe>
 80058c0:	4630      	mov	r0, r6
 80058c2:	e7c2      	b.n	800584a <_dtoa_r+0x982>
 80058c4:	2301      	movs	r3, #1
 80058c6:	e7e3      	b.n	8005890 <_dtoa_r+0x9c8>
 80058c8:	9a00      	ldr	r2, [sp, #0]
 80058ca:	2a00      	cmp	r2, #0
 80058cc:	db04      	blt.n	80058d8 <_dtoa_r+0xa10>
 80058ce:	d125      	bne.n	800591c <_dtoa_r+0xa54>
 80058d0:	9a06      	ldr	r2, [sp, #24]
 80058d2:	bb1a      	cbnz	r2, 800591c <_dtoa_r+0xa54>
 80058d4:	9a07      	ldr	r2, [sp, #28]
 80058d6:	bb0a      	cbnz	r2, 800591c <_dtoa_r+0xa54>
 80058d8:	2b00      	cmp	r3, #0
 80058da:	ddec      	ble.n	80058b6 <_dtoa_r+0x9ee>
 80058dc:	2201      	movs	r2, #1
 80058de:	9904      	ldr	r1, [sp, #16]
 80058e0:	4620      	mov	r0, r4
 80058e2:	f000 fa8b 	bl	8005dfc <__lshift>
 80058e6:	4639      	mov	r1, r7
 80058e8:	9004      	str	r0, [sp, #16]
 80058ea:	f000 fadb 	bl	8005ea4 <__mcmp>
 80058ee:	2800      	cmp	r0, #0
 80058f0:	dc03      	bgt.n	80058fa <_dtoa_r+0xa32>
 80058f2:	d1e0      	bne.n	80058b6 <_dtoa_r+0x9ee>
 80058f4:	f018 0f01 	tst.w	r8, #1
 80058f8:	d0dd      	beq.n	80058b6 <_dtoa_r+0x9ee>
 80058fa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80058fe:	d1d8      	bne.n	80058b2 <_dtoa_r+0x9ea>
 8005900:	9b05      	ldr	r3, [sp, #20]
 8005902:	9a05      	ldr	r2, [sp, #20]
 8005904:	1c5d      	adds	r5, r3, #1
 8005906:	2339      	movs	r3, #57	; 0x39
 8005908:	7013      	strb	r3, [r2, #0]
 800590a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800590e:	2b39      	cmp	r3, #57	; 0x39
 8005910:	f105 32ff 	add.w	r2, r5, #4294967295
 8005914:	d04f      	beq.n	80059b6 <_dtoa_r+0xaee>
 8005916:	3301      	adds	r3, #1
 8005918:	7013      	strb	r3, [r2, #0]
 800591a:	e754      	b.n	80057c6 <_dtoa_r+0x8fe>
 800591c:	9a05      	ldr	r2, [sp, #20]
 800591e:	2b00      	cmp	r3, #0
 8005920:	f102 0501 	add.w	r5, r2, #1
 8005924:	dd06      	ble.n	8005934 <_dtoa_r+0xa6c>
 8005926:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800592a:	d0e9      	beq.n	8005900 <_dtoa_r+0xa38>
 800592c:	f108 0801 	add.w	r8, r8, #1
 8005930:	9b05      	ldr	r3, [sp, #20]
 8005932:	e7c2      	b.n	80058ba <_dtoa_r+0x9f2>
 8005934:	9a02      	ldr	r2, [sp, #8]
 8005936:	f805 8c01 	strb.w	r8, [r5, #-1]
 800593a:	eba5 030b 	sub.w	r3, r5, fp
 800593e:	4293      	cmp	r3, r2
 8005940:	d021      	beq.n	8005986 <_dtoa_r+0xabe>
 8005942:	2300      	movs	r3, #0
 8005944:	220a      	movs	r2, #10
 8005946:	9904      	ldr	r1, [sp, #16]
 8005948:	4620      	mov	r0, r4
 800594a:	f000 f8e1 	bl	8005b10 <__multadd>
 800594e:	45b1      	cmp	r9, r6
 8005950:	9004      	str	r0, [sp, #16]
 8005952:	f04f 0300 	mov.w	r3, #0
 8005956:	f04f 020a 	mov.w	r2, #10
 800595a:	4649      	mov	r1, r9
 800595c:	4620      	mov	r0, r4
 800595e:	d105      	bne.n	800596c <_dtoa_r+0xaa4>
 8005960:	f000 f8d6 	bl	8005b10 <__multadd>
 8005964:	4681      	mov	r9, r0
 8005966:	4606      	mov	r6, r0
 8005968:	9505      	str	r5, [sp, #20]
 800596a:	e776      	b.n	800585a <_dtoa_r+0x992>
 800596c:	f000 f8d0 	bl	8005b10 <__multadd>
 8005970:	4631      	mov	r1, r6
 8005972:	4681      	mov	r9, r0
 8005974:	2300      	movs	r3, #0
 8005976:	220a      	movs	r2, #10
 8005978:	4620      	mov	r0, r4
 800597a:	f000 f8c9 	bl	8005b10 <__multadd>
 800597e:	4606      	mov	r6, r0
 8005980:	e7f2      	b.n	8005968 <_dtoa_r+0xaa0>
 8005982:	f04f 0900 	mov.w	r9, #0
 8005986:	2201      	movs	r2, #1
 8005988:	9904      	ldr	r1, [sp, #16]
 800598a:	4620      	mov	r0, r4
 800598c:	f000 fa36 	bl	8005dfc <__lshift>
 8005990:	4639      	mov	r1, r7
 8005992:	9004      	str	r0, [sp, #16]
 8005994:	f000 fa86 	bl	8005ea4 <__mcmp>
 8005998:	2800      	cmp	r0, #0
 800599a:	dcb6      	bgt.n	800590a <_dtoa_r+0xa42>
 800599c:	d102      	bne.n	80059a4 <_dtoa_r+0xadc>
 800599e:	f018 0f01 	tst.w	r8, #1
 80059a2:	d1b2      	bne.n	800590a <_dtoa_r+0xa42>
 80059a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80059a8:	2b30      	cmp	r3, #48	; 0x30
 80059aa:	f105 32ff 	add.w	r2, r5, #4294967295
 80059ae:	f47f af0a 	bne.w	80057c6 <_dtoa_r+0x8fe>
 80059b2:	4615      	mov	r5, r2
 80059b4:	e7f6      	b.n	80059a4 <_dtoa_r+0xadc>
 80059b6:	4593      	cmp	fp, r2
 80059b8:	d105      	bne.n	80059c6 <_dtoa_r+0xafe>
 80059ba:	2331      	movs	r3, #49	; 0x31
 80059bc:	f10a 0a01 	add.w	sl, sl, #1
 80059c0:	f88b 3000 	strb.w	r3, [fp]
 80059c4:	e6ff      	b.n	80057c6 <_dtoa_r+0x8fe>
 80059c6:	4615      	mov	r5, r2
 80059c8:	e79f      	b.n	800590a <_dtoa_r+0xa42>
 80059ca:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005a30 <_dtoa_r+0xb68>
 80059ce:	e007      	b.n	80059e0 <_dtoa_r+0xb18>
 80059d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059d2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005a34 <_dtoa_r+0xb6c>
 80059d6:	b11b      	cbz	r3, 80059e0 <_dtoa_r+0xb18>
 80059d8:	f10b 0308 	add.w	r3, fp, #8
 80059dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80059de:	6013      	str	r3, [r2, #0]
 80059e0:	4658      	mov	r0, fp
 80059e2:	b017      	add	sp, #92	; 0x5c
 80059e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059e8:	9b06      	ldr	r3, [sp, #24]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	f77f ae35 	ble.w	800565a <_dtoa_r+0x792>
 80059f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059f2:	9307      	str	r3, [sp, #28]
 80059f4:	e649      	b.n	800568a <_dtoa_r+0x7c2>
 80059f6:	9b02      	ldr	r3, [sp, #8]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	dc03      	bgt.n	8005a04 <_dtoa_r+0xb3c>
 80059fc:	9b06      	ldr	r3, [sp, #24]
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	f73f aecc 	bgt.w	800579c <_dtoa_r+0x8d4>
 8005a04:	465d      	mov	r5, fp
 8005a06:	4639      	mov	r1, r7
 8005a08:	9804      	ldr	r0, [sp, #16]
 8005a0a:	f7ff f9d1 	bl	8004db0 <quorem>
 8005a0e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005a12:	f805 8b01 	strb.w	r8, [r5], #1
 8005a16:	9a02      	ldr	r2, [sp, #8]
 8005a18:	eba5 030b 	sub.w	r3, r5, fp
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	ddb0      	ble.n	8005982 <_dtoa_r+0xaba>
 8005a20:	2300      	movs	r3, #0
 8005a22:	220a      	movs	r2, #10
 8005a24:	9904      	ldr	r1, [sp, #16]
 8005a26:	4620      	mov	r0, r4
 8005a28:	f000 f872 	bl	8005b10 <__multadd>
 8005a2c:	9004      	str	r0, [sp, #16]
 8005a2e:	e7ea      	b.n	8005a06 <_dtoa_r+0xb3e>
 8005a30:	08006598 	.word	0x08006598
 8005a34:	080065bc 	.word	0x080065bc

08005a38 <_localeconv_r>:
 8005a38:	4b04      	ldr	r3, [pc, #16]	; (8005a4c <_localeconv_r+0x14>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	6a18      	ldr	r0, [r3, #32]
 8005a3e:	4b04      	ldr	r3, [pc, #16]	; (8005a50 <_localeconv_r+0x18>)
 8005a40:	2800      	cmp	r0, #0
 8005a42:	bf08      	it	eq
 8005a44:	4618      	moveq	r0, r3
 8005a46:	30f0      	adds	r0, #240	; 0xf0
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	20000010 	.word	0x20000010
 8005a50:	20000074 	.word	0x20000074

08005a54 <malloc>:
 8005a54:	4b02      	ldr	r3, [pc, #8]	; (8005a60 <malloc+0xc>)
 8005a56:	4601      	mov	r1, r0
 8005a58:	6818      	ldr	r0, [r3, #0]
 8005a5a:	f000 bb45 	b.w	80060e8 <_malloc_r>
 8005a5e:	bf00      	nop
 8005a60:	20000010 	.word	0x20000010

08005a64 <memcpy>:
 8005a64:	b510      	push	{r4, lr}
 8005a66:	1e43      	subs	r3, r0, #1
 8005a68:	440a      	add	r2, r1
 8005a6a:	4291      	cmp	r1, r2
 8005a6c:	d100      	bne.n	8005a70 <memcpy+0xc>
 8005a6e:	bd10      	pop	{r4, pc}
 8005a70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a78:	e7f7      	b.n	8005a6a <memcpy+0x6>

08005a7a <_Balloc>:
 8005a7a:	b570      	push	{r4, r5, r6, lr}
 8005a7c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005a7e:	4604      	mov	r4, r0
 8005a80:	460e      	mov	r6, r1
 8005a82:	b93d      	cbnz	r5, 8005a94 <_Balloc+0x1a>
 8005a84:	2010      	movs	r0, #16
 8005a86:	f7ff ffe5 	bl	8005a54 <malloc>
 8005a8a:	6260      	str	r0, [r4, #36]	; 0x24
 8005a8c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005a90:	6005      	str	r5, [r0, #0]
 8005a92:	60c5      	str	r5, [r0, #12]
 8005a94:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005a96:	68eb      	ldr	r3, [r5, #12]
 8005a98:	b183      	cbz	r3, 8005abc <_Balloc+0x42>
 8005a9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005aa2:	b9b8      	cbnz	r0, 8005ad4 <_Balloc+0x5a>
 8005aa4:	2101      	movs	r1, #1
 8005aa6:	fa01 f506 	lsl.w	r5, r1, r6
 8005aaa:	1d6a      	adds	r2, r5, #5
 8005aac:	0092      	lsls	r2, r2, #2
 8005aae:	4620      	mov	r0, r4
 8005ab0:	f000 fabe 	bl	8006030 <_calloc_r>
 8005ab4:	b160      	cbz	r0, 8005ad0 <_Balloc+0x56>
 8005ab6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005aba:	e00e      	b.n	8005ada <_Balloc+0x60>
 8005abc:	2221      	movs	r2, #33	; 0x21
 8005abe:	2104      	movs	r1, #4
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	f000 fab5 	bl	8006030 <_calloc_r>
 8005ac6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ac8:	60e8      	str	r0, [r5, #12]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1e4      	bne.n	8005a9a <_Balloc+0x20>
 8005ad0:	2000      	movs	r0, #0
 8005ad2:	bd70      	pop	{r4, r5, r6, pc}
 8005ad4:	6802      	ldr	r2, [r0, #0]
 8005ad6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005ada:	2300      	movs	r3, #0
 8005adc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005ae0:	e7f7      	b.n	8005ad2 <_Balloc+0x58>

08005ae2 <_Bfree>:
 8005ae2:	b570      	push	{r4, r5, r6, lr}
 8005ae4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005ae6:	4606      	mov	r6, r0
 8005ae8:	460d      	mov	r5, r1
 8005aea:	b93c      	cbnz	r4, 8005afc <_Bfree+0x1a>
 8005aec:	2010      	movs	r0, #16
 8005aee:	f7ff ffb1 	bl	8005a54 <malloc>
 8005af2:	6270      	str	r0, [r6, #36]	; 0x24
 8005af4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005af8:	6004      	str	r4, [r0, #0]
 8005afa:	60c4      	str	r4, [r0, #12]
 8005afc:	b13d      	cbz	r5, 8005b0e <_Bfree+0x2c>
 8005afe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005b00:	686a      	ldr	r2, [r5, #4]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b08:	6029      	str	r1, [r5, #0]
 8005b0a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005b0e:	bd70      	pop	{r4, r5, r6, pc}

08005b10 <__multadd>:
 8005b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b14:	690d      	ldr	r5, [r1, #16]
 8005b16:	461f      	mov	r7, r3
 8005b18:	4606      	mov	r6, r0
 8005b1a:	460c      	mov	r4, r1
 8005b1c:	f101 0c14 	add.w	ip, r1, #20
 8005b20:	2300      	movs	r3, #0
 8005b22:	f8dc 0000 	ldr.w	r0, [ip]
 8005b26:	b281      	uxth	r1, r0
 8005b28:	fb02 7101 	mla	r1, r2, r1, r7
 8005b2c:	0c0f      	lsrs	r7, r1, #16
 8005b2e:	0c00      	lsrs	r0, r0, #16
 8005b30:	fb02 7000 	mla	r0, r2, r0, r7
 8005b34:	b289      	uxth	r1, r1
 8005b36:	3301      	adds	r3, #1
 8005b38:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005b3c:	429d      	cmp	r5, r3
 8005b3e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005b42:	f84c 1b04 	str.w	r1, [ip], #4
 8005b46:	dcec      	bgt.n	8005b22 <__multadd+0x12>
 8005b48:	b1d7      	cbz	r7, 8005b80 <__multadd+0x70>
 8005b4a:	68a3      	ldr	r3, [r4, #8]
 8005b4c:	42ab      	cmp	r3, r5
 8005b4e:	dc12      	bgt.n	8005b76 <__multadd+0x66>
 8005b50:	6861      	ldr	r1, [r4, #4]
 8005b52:	4630      	mov	r0, r6
 8005b54:	3101      	adds	r1, #1
 8005b56:	f7ff ff90 	bl	8005a7a <_Balloc>
 8005b5a:	6922      	ldr	r2, [r4, #16]
 8005b5c:	3202      	adds	r2, #2
 8005b5e:	f104 010c 	add.w	r1, r4, #12
 8005b62:	4680      	mov	r8, r0
 8005b64:	0092      	lsls	r2, r2, #2
 8005b66:	300c      	adds	r0, #12
 8005b68:	f7ff ff7c 	bl	8005a64 <memcpy>
 8005b6c:	4621      	mov	r1, r4
 8005b6e:	4630      	mov	r0, r6
 8005b70:	f7ff ffb7 	bl	8005ae2 <_Bfree>
 8005b74:	4644      	mov	r4, r8
 8005b76:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005b7a:	3501      	adds	r5, #1
 8005b7c:	615f      	str	r7, [r3, #20]
 8005b7e:	6125      	str	r5, [r4, #16]
 8005b80:	4620      	mov	r0, r4
 8005b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005b86 <__hi0bits>:
 8005b86:	0c02      	lsrs	r2, r0, #16
 8005b88:	0412      	lsls	r2, r2, #16
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	b9b2      	cbnz	r2, 8005bbc <__hi0bits+0x36>
 8005b8e:	0403      	lsls	r3, r0, #16
 8005b90:	2010      	movs	r0, #16
 8005b92:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005b96:	bf04      	itt	eq
 8005b98:	021b      	lsleq	r3, r3, #8
 8005b9a:	3008      	addeq	r0, #8
 8005b9c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005ba0:	bf04      	itt	eq
 8005ba2:	011b      	lsleq	r3, r3, #4
 8005ba4:	3004      	addeq	r0, #4
 8005ba6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005baa:	bf04      	itt	eq
 8005bac:	009b      	lsleq	r3, r3, #2
 8005bae:	3002      	addeq	r0, #2
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	db06      	blt.n	8005bc2 <__hi0bits+0x3c>
 8005bb4:	005b      	lsls	r3, r3, #1
 8005bb6:	d503      	bpl.n	8005bc0 <__hi0bits+0x3a>
 8005bb8:	3001      	adds	r0, #1
 8005bba:	4770      	bx	lr
 8005bbc:	2000      	movs	r0, #0
 8005bbe:	e7e8      	b.n	8005b92 <__hi0bits+0xc>
 8005bc0:	2020      	movs	r0, #32
 8005bc2:	4770      	bx	lr

08005bc4 <__lo0bits>:
 8005bc4:	6803      	ldr	r3, [r0, #0]
 8005bc6:	f013 0207 	ands.w	r2, r3, #7
 8005bca:	4601      	mov	r1, r0
 8005bcc:	d00b      	beq.n	8005be6 <__lo0bits+0x22>
 8005bce:	07da      	lsls	r2, r3, #31
 8005bd0:	d423      	bmi.n	8005c1a <__lo0bits+0x56>
 8005bd2:	0798      	lsls	r0, r3, #30
 8005bd4:	bf49      	itett	mi
 8005bd6:	085b      	lsrmi	r3, r3, #1
 8005bd8:	089b      	lsrpl	r3, r3, #2
 8005bda:	2001      	movmi	r0, #1
 8005bdc:	600b      	strmi	r3, [r1, #0]
 8005bde:	bf5c      	itt	pl
 8005be0:	600b      	strpl	r3, [r1, #0]
 8005be2:	2002      	movpl	r0, #2
 8005be4:	4770      	bx	lr
 8005be6:	b298      	uxth	r0, r3
 8005be8:	b9a8      	cbnz	r0, 8005c16 <__lo0bits+0x52>
 8005bea:	0c1b      	lsrs	r3, r3, #16
 8005bec:	2010      	movs	r0, #16
 8005bee:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005bf2:	bf04      	itt	eq
 8005bf4:	0a1b      	lsreq	r3, r3, #8
 8005bf6:	3008      	addeq	r0, #8
 8005bf8:	071a      	lsls	r2, r3, #28
 8005bfa:	bf04      	itt	eq
 8005bfc:	091b      	lsreq	r3, r3, #4
 8005bfe:	3004      	addeq	r0, #4
 8005c00:	079a      	lsls	r2, r3, #30
 8005c02:	bf04      	itt	eq
 8005c04:	089b      	lsreq	r3, r3, #2
 8005c06:	3002      	addeq	r0, #2
 8005c08:	07da      	lsls	r2, r3, #31
 8005c0a:	d402      	bmi.n	8005c12 <__lo0bits+0x4e>
 8005c0c:	085b      	lsrs	r3, r3, #1
 8005c0e:	d006      	beq.n	8005c1e <__lo0bits+0x5a>
 8005c10:	3001      	adds	r0, #1
 8005c12:	600b      	str	r3, [r1, #0]
 8005c14:	4770      	bx	lr
 8005c16:	4610      	mov	r0, r2
 8005c18:	e7e9      	b.n	8005bee <__lo0bits+0x2a>
 8005c1a:	2000      	movs	r0, #0
 8005c1c:	4770      	bx	lr
 8005c1e:	2020      	movs	r0, #32
 8005c20:	4770      	bx	lr

08005c22 <__i2b>:
 8005c22:	b510      	push	{r4, lr}
 8005c24:	460c      	mov	r4, r1
 8005c26:	2101      	movs	r1, #1
 8005c28:	f7ff ff27 	bl	8005a7a <_Balloc>
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	6144      	str	r4, [r0, #20]
 8005c30:	6102      	str	r2, [r0, #16]
 8005c32:	bd10      	pop	{r4, pc}

08005c34 <__multiply>:
 8005c34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c38:	4614      	mov	r4, r2
 8005c3a:	690a      	ldr	r2, [r1, #16]
 8005c3c:	6923      	ldr	r3, [r4, #16]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	bfb8      	it	lt
 8005c42:	460b      	movlt	r3, r1
 8005c44:	4688      	mov	r8, r1
 8005c46:	bfbc      	itt	lt
 8005c48:	46a0      	movlt	r8, r4
 8005c4a:	461c      	movlt	r4, r3
 8005c4c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005c50:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005c54:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005c58:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005c5c:	eb07 0609 	add.w	r6, r7, r9
 8005c60:	42b3      	cmp	r3, r6
 8005c62:	bfb8      	it	lt
 8005c64:	3101      	addlt	r1, #1
 8005c66:	f7ff ff08 	bl	8005a7a <_Balloc>
 8005c6a:	f100 0514 	add.w	r5, r0, #20
 8005c6e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005c72:	462b      	mov	r3, r5
 8005c74:	2200      	movs	r2, #0
 8005c76:	4573      	cmp	r3, lr
 8005c78:	d316      	bcc.n	8005ca8 <__multiply+0x74>
 8005c7a:	f104 0214 	add.w	r2, r4, #20
 8005c7e:	f108 0114 	add.w	r1, r8, #20
 8005c82:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005c86:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	9b00      	ldr	r3, [sp, #0]
 8005c8e:	9201      	str	r2, [sp, #4]
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d80c      	bhi.n	8005cae <__multiply+0x7a>
 8005c94:	2e00      	cmp	r6, #0
 8005c96:	dd03      	ble.n	8005ca0 <__multiply+0x6c>
 8005c98:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d05d      	beq.n	8005d5c <__multiply+0x128>
 8005ca0:	6106      	str	r6, [r0, #16]
 8005ca2:	b003      	add	sp, #12
 8005ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ca8:	f843 2b04 	str.w	r2, [r3], #4
 8005cac:	e7e3      	b.n	8005c76 <__multiply+0x42>
 8005cae:	f8b2 b000 	ldrh.w	fp, [r2]
 8005cb2:	f1bb 0f00 	cmp.w	fp, #0
 8005cb6:	d023      	beq.n	8005d00 <__multiply+0xcc>
 8005cb8:	4689      	mov	r9, r1
 8005cba:	46ac      	mov	ip, r5
 8005cbc:	f04f 0800 	mov.w	r8, #0
 8005cc0:	f859 4b04 	ldr.w	r4, [r9], #4
 8005cc4:	f8dc a000 	ldr.w	sl, [ip]
 8005cc8:	b2a3      	uxth	r3, r4
 8005cca:	fa1f fa8a 	uxth.w	sl, sl
 8005cce:	fb0b a303 	mla	r3, fp, r3, sl
 8005cd2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005cd6:	f8dc 4000 	ldr.w	r4, [ip]
 8005cda:	4443      	add	r3, r8
 8005cdc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005ce0:	fb0b 840a 	mla	r4, fp, sl, r8
 8005ce4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005ce8:	46e2      	mov	sl, ip
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005cf0:	454f      	cmp	r7, r9
 8005cf2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005cf6:	f84a 3b04 	str.w	r3, [sl], #4
 8005cfa:	d82b      	bhi.n	8005d54 <__multiply+0x120>
 8005cfc:	f8cc 8004 	str.w	r8, [ip, #4]
 8005d00:	9b01      	ldr	r3, [sp, #4]
 8005d02:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005d06:	3204      	adds	r2, #4
 8005d08:	f1ba 0f00 	cmp.w	sl, #0
 8005d0c:	d020      	beq.n	8005d50 <__multiply+0x11c>
 8005d0e:	682b      	ldr	r3, [r5, #0]
 8005d10:	4689      	mov	r9, r1
 8005d12:	46a8      	mov	r8, r5
 8005d14:	f04f 0b00 	mov.w	fp, #0
 8005d18:	f8b9 c000 	ldrh.w	ip, [r9]
 8005d1c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005d20:	fb0a 440c 	mla	r4, sl, ip, r4
 8005d24:	445c      	add	r4, fp
 8005d26:	46c4      	mov	ip, r8
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005d2e:	f84c 3b04 	str.w	r3, [ip], #4
 8005d32:	f859 3b04 	ldr.w	r3, [r9], #4
 8005d36:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005d3a:	0c1b      	lsrs	r3, r3, #16
 8005d3c:	fb0a b303 	mla	r3, sl, r3, fp
 8005d40:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005d44:	454f      	cmp	r7, r9
 8005d46:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005d4a:	d805      	bhi.n	8005d58 <__multiply+0x124>
 8005d4c:	f8c8 3004 	str.w	r3, [r8, #4]
 8005d50:	3504      	adds	r5, #4
 8005d52:	e79b      	b.n	8005c8c <__multiply+0x58>
 8005d54:	46d4      	mov	ip, sl
 8005d56:	e7b3      	b.n	8005cc0 <__multiply+0x8c>
 8005d58:	46e0      	mov	r8, ip
 8005d5a:	e7dd      	b.n	8005d18 <__multiply+0xe4>
 8005d5c:	3e01      	subs	r6, #1
 8005d5e:	e799      	b.n	8005c94 <__multiply+0x60>

08005d60 <__pow5mult>:
 8005d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d64:	4615      	mov	r5, r2
 8005d66:	f012 0203 	ands.w	r2, r2, #3
 8005d6a:	4606      	mov	r6, r0
 8005d6c:	460f      	mov	r7, r1
 8005d6e:	d007      	beq.n	8005d80 <__pow5mult+0x20>
 8005d70:	3a01      	subs	r2, #1
 8005d72:	4c21      	ldr	r4, [pc, #132]	; (8005df8 <__pow5mult+0x98>)
 8005d74:	2300      	movs	r3, #0
 8005d76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005d7a:	f7ff fec9 	bl	8005b10 <__multadd>
 8005d7e:	4607      	mov	r7, r0
 8005d80:	10ad      	asrs	r5, r5, #2
 8005d82:	d035      	beq.n	8005df0 <__pow5mult+0x90>
 8005d84:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005d86:	b93c      	cbnz	r4, 8005d98 <__pow5mult+0x38>
 8005d88:	2010      	movs	r0, #16
 8005d8a:	f7ff fe63 	bl	8005a54 <malloc>
 8005d8e:	6270      	str	r0, [r6, #36]	; 0x24
 8005d90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005d94:	6004      	str	r4, [r0, #0]
 8005d96:	60c4      	str	r4, [r0, #12]
 8005d98:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005d9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005da0:	b94c      	cbnz	r4, 8005db6 <__pow5mult+0x56>
 8005da2:	f240 2171 	movw	r1, #625	; 0x271
 8005da6:	4630      	mov	r0, r6
 8005da8:	f7ff ff3b 	bl	8005c22 <__i2b>
 8005dac:	2300      	movs	r3, #0
 8005dae:	f8c8 0008 	str.w	r0, [r8, #8]
 8005db2:	4604      	mov	r4, r0
 8005db4:	6003      	str	r3, [r0, #0]
 8005db6:	f04f 0800 	mov.w	r8, #0
 8005dba:	07eb      	lsls	r3, r5, #31
 8005dbc:	d50a      	bpl.n	8005dd4 <__pow5mult+0x74>
 8005dbe:	4639      	mov	r1, r7
 8005dc0:	4622      	mov	r2, r4
 8005dc2:	4630      	mov	r0, r6
 8005dc4:	f7ff ff36 	bl	8005c34 <__multiply>
 8005dc8:	4639      	mov	r1, r7
 8005dca:	4681      	mov	r9, r0
 8005dcc:	4630      	mov	r0, r6
 8005dce:	f7ff fe88 	bl	8005ae2 <_Bfree>
 8005dd2:	464f      	mov	r7, r9
 8005dd4:	106d      	asrs	r5, r5, #1
 8005dd6:	d00b      	beq.n	8005df0 <__pow5mult+0x90>
 8005dd8:	6820      	ldr	r0, [r4, #0]
 8005dda:	b938      	cbnz	r0, 8005dec <__pow5mult+0x8c>
 8005ddc:	4622      	mov	r2, r4
 8005dde:	4621      	mov	r1, r4
 8005de0:	4630      	mov	r0, r6
 8005de2:	f7ff ff27 	bl	8005c34 <__multiply>
 8005de6:	6020      	str	r0, [r4, #0]
 8005de8:	f8c0 8000 	str.w	r8, [r0]
 8005dec:	4604      	mov	r4, r0
 8005dee:	e7e4      	b.n	8005dba <__pow5mult+0x5a>
 8005df0:	4638      	mov	r0, r7
 8005df2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005df6:	bf00      	nop
 8005df8:	080066c0 	.word	0x080066c0

08005dfc <__lshift>:
 8005dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e00:	460c      	mov	r4, r1
 8005e02:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005e06:	6923      	ldr	r3, [r4, #16]
 8005e08:	6849      	ldr	r1, [r1, #4]
 8005e0a:	eb0a 0903 	add.w	r9, sl, r3
 8005e0e:	68a3      	ldr	r3, [r4, #8]
 8005e10:	4607      	mov	r7, r0
 8005e12:	4616      	mov	r6, r2
 8005e14:	f109 0501 	add.w	r5, r9, #1
 8005e18:	42ab      	cmp	r3, r5
 8005e1a:	db32      	blt.n	8005e82 <__lshift+0x86>
 8005e1c:	4638      	mov	r0, r7
 8005e1e:	f7ff fe2c 	bl	8005a7a <_Balloc>
 8005e22:	2300      	movs	r3, #0
 8005e24:	4680      	mov	r8, r0
 8005e26:	f100 0114 	add.w	r1, r0, #20
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	4553      	cmp	r3, sl
 8005e2e:	db2b      	blt.n	8005e88 <__lshift+0x8c>
 8005e30:	6920      	ldr	r0, [r4, #16]
 8005e32:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005e36:	f104 0314 	add.w	r3, r4, #20
 8005e3a:	f016 021f 	ands.w	r2, r6, #31
 8005e3e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005e42:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005e46:	d025      	beq.n	8005e94 <__lshift+0x98>
 8005e48:	f1c2 0e20 	rsb	lr, r2, #32
 8005e4c:	2000      	movs	r0, #0
 8005e4e:	681e      	ldr	r6, [r3, #0]
 8005e50:	468a      	mov	sl, r1
 8005e52:	4096      	lsls	r6, r2
 8005e54:	4330      	orrs	r0, r6
 8005e56:	f84a 0b04 	str.w	r0, [sl], #4
 8005e5a:	f853 0b04 	ldr.w	r0, [r3], #4
 8005e5e:	459c      	cmp	ip, r3
 8005e60:	fa20 f00e 	lsr.w	r0, r0, lr
 8005e64:	d814      	bhi.n	8005e90 <__lshift+0x94>
 8005e66:	6048      	str	r0, [r1, #4]
 8005e68:	b108      	cbz	r0, 8005e6e <__lshift+0x72>
 8005e6a:	f109 0502 	add.w	r5, r9, #2
 8005e6e:	3d01      	subs	r5, #1
 8005e70:	4638      	mov	r0, r7
 8005e72:	f8c8 5010 	str.w	r5, [r8, #16]
 8005e76:	4621      	mov	r1, r4
 8005e78:	f7ff fe33 	bl	8005ae2 <_Bfree>
 8005e7c:	4640      	mov	r0, r8
 8005e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e82:	3101      	adds	r1, #1
 8005e84:	005b      	lsls	r3, r3, #1
 8005e86:	e7c7      	b.n	8005e18 <__lshift+0x1c>
 8005e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	e7cd      	b.n	8005e2c <__lshift+0x30>
 8005e90:	4651      	mov	r1, sl
 8005e92:	e7dc      	b.n	8005e4e <__lshift+0x52>
 8005e94:	3904      	subs	r1, #4
 8005e96:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e9a:	f841 2f04 	str.w	r2, [r1, #4]!
 8005e9e:	459c      	cmp	ip, r3
 8005ea0:	d8f9      	bhi.n	8005e96 <__lshift+0x9a>
 8005ea2:	e7e4      	b.n	8005e6e <__lshift+0x72>

08005ea4 <__mcmp>:
 8005ea4:	6903      	ldr	r3, [r0, #16]
 8005ea6:	690a      	ldr	r2, [r1, #16]
 8005ea8:	1a9b      	subs	r3, r3, r2
 8005eaa:	b530      	push	{r4, r5, lr}
 8005eac:	d10c      	bne.n	8005ec8 <__mcmp+0x24>
 8005eae:	0092      	lsls	r2, r2, #2
 8005eb0:	3014      	adds	r0, #20
 8005eb2:	3114      	adds	r1, #20
 8005eb4:	1884      	adds	r4, r0, r2
 8005eb6:	4411      	add	r1, r2
 8005eb8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005ebc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005ec0:	4295      	cmp	r5, r2
 8005ec2:	d003      	beq.n	8005ecc <__mcmp+0x28>
 8005ec4:	d305      	bcc.n	8005ed2 <__mcmp+0x2e>
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	4618      	mov	r0, r3
 8005eca:	bd30      	pop	{r4, r5, pc}
 8005ecc:	42a0      	cmp	r0, r4
 8005ece:	d3f3      	bcc.n	8005eb8 <__mcmp+0x14>
 8005ed0:	e7fa      	b.n	8005ec8 <__mcmp+0x24>
 8005ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ed6:	e7f7      	b.n	8005ec8 <__mcmp+0x24>

08005ed8 <__mdiff>:
 8005ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005edc:	460d      	mov	r5, r1
 8005ede:	4607      	mov	r7, r0
 8005ee0:	4611      	mov	r1, r2
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	4614      	mov	r4, r2
 8005ee6:	f7ff ffdd 	bl	8005ea4 <__mcmp>
 8005eea:	1e06      	subs	r6, r0, #0
 8005eec:	d108      	bne.n	8005f00 <__mdiff+0x28>
 8005eee:	4631      	mov	r1, r6
 8005ef0:	4638      	mov	r0, r7
 8005ef2:	f7ff fdc2 	bl	8005a7a <_Balloc>
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f00:	bfa4      	itt	ge
 8005f02:	4623      	movge	r3, r4
 8005f04:	462c      	movge	r4, r5
 8005f06:	4638      	mov	r0, r7
 8005f08:	6861      	ldr	r1, [r4, #4]
 8005f0a:	bfa6      	itte	ge
 8005f0c:	461d      	movge	r5, r3
 8005f0e:	2600      	movge	r6, #0
 8005f10:	2601      	movlt	r6, #1
 8005f12:	f7ff fdb2 	bl	8005a7a <_Balloc>
 8005f16:	692b      	ldr	r3, [r5, #16]
 8005f18:	60c6      	str	r6, [r0, #12]
 8005f1a:	6926      	ldr	r6, [r4, #16]
 8005f1c:	f105 0914 	add.w	r9, r5, #20
 8005f20:	f104 0214 	add.w	r2, r4, #20
 8005f24:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005f28:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005f2c:	f100 0514 	add.w	r5, r0, #20
 8005f30:	f04f 0e00 	mov.w	lr, #0
 8005f34:	f852 ab04 	ldr.w	sl, [r2], #4
 8005f38:	f859 4b04 	ldr.w	r4, [r9], #4
 8005f3c:	fa1e f18a 	uxtah	r1, lr, sl
 8005f40:	b2a3      	uxth	r3, r4
 8005f42:	1ac9      	subs	r1, r1, r3
 8005f44:	0c23      	lsrs	r3, r4, #16
 8005f46:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8005f4a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005f4e:	b289      	uxth	r1, r1
 8005f50:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005f54:	45c8      	cmp	r8, r9
 8005f56:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005f5a:	4694      	mov	ip, r2
 8005f5c:	f845 3b04 	str.w	r3, [r5], #4
 8005f60:	d8e8      	bhi.n	8005f34 <__mdiff+0x5c>
 8005f62:	45bc      	cmp	ip, r7
 8005f64:	d304      	bcc.n	8005f70 <__mdiff+0x98>
 8005f66:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005f6a:	b183      	cbz	r3, 8005f8e <__mdiff+0xb6>
 8005f6c:	6106      	str	r6, [r0, #16]
 8005f6e:	e7c5      	b.n	8005efc <__mdiff+0x24>
 8005f70:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005f74:	fa1e f381 	uxtah	r3, lr, r1
 8005f78:	141a      	asrs	r2, r3, #16
 8005f7a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f84:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005f88:	f845 3b04 	str.w	r3, [r5], #4
 8005f8c:	e7e9      	b.n	8005f62 <__mdiff+0x8a>
 8005f8e:	3e01      	subs	r6, #1
 8005f90:	e7e9      	b.n	8005f66 <__mdiff+0x8e>

08005f92 <__d2b>:
 8005f92:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005f96:	460e      	mov	r6, r1
 8005f98:	2101      	movs	r1, #1
 8005f9a:	ec59 8b10 	vmov	r8, r9, d0
 8005f9e:	4615      	mov	r5, r2
 8005fa0:	f7ff fd6b 	bl	8005a7a <_Balloc>
 8005fa4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005fa8:	4607      	mov	r7, r0
 8005faa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005fae:	bb34      	cbnz	r4, 8005ffe <__d2b+0x6c>
 8005fb0:	9301      	str	r3, [sp, #4]
 8005fb2:	f1b8 0300 	subs.w	r3, r8, #0
 8005fb6:	d027      	beq.n	8006008 <__d2b+0x76>
 8005fb8:	a802      	add	r0, sp, #8
 8005fba:	f840 3d08 	str.w	r3, [r0, #-8]!
 8005fbe:	f7ff fe01 	bl	8005bc4 <__lo0bits>
 8005fc2:	9900      	ldr	r1, [sp, #0]
 8005fc4:	b1f0      	cbz	r0, 8006004 <__d2b+0x72>
 8005fc6:	9a01      	ldr	r2, [sp, #4]
 8005fc8:	f1c0 0320 	rsb	r3, r0, #32
 8005fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd0:	430b      	orrs	r3, r1
 8005fd2:	40c2      	lsrs	r2, r0
 8005fd4:	617b      	str	r3, [r7, #20]
 8005fd6:	9201      	str	r2, [sp, #4]
 8005fd8:	9b01      	ldr	r3, [sp, #4]
 8005fda:	61bb      	str	r3, [r7, #24]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	bf14      	ite	ne
 8005fe0:	2102      	movne	r1, #2
 8005fe2:	2101      	moveq	r1, #1
 8005fe4:	6139      	str	r1, [r7, #16]
 8005fe6:	b1c4      	cbz	r4, 800601a <__d2b+0x88>
 8005fe8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005fec:	4404      	add	r4, r0
 8005fee:	6034      	str	r4, [r6, #0]
 8005ff0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005ff4:	6028      	str	r0, [r5, #0]
 8005ff6:	4638      	mov	r0, r7
 8005ff8:	b003      	add	sp, #12
 8005ffa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005ffe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006002:	e7d5      	b.n	8005fb0 <__d2b+0x1e>
 8006004:	6179      	str	r1, [r7, #20]
 8006006:	e7e7      	b.n	8005fd8 <__d2b+0x46>
 8006008:	a801      	add	r0, sp, #4
 800600a:	f7ff fddb 	bl	8005bc4 <__lo0bits>
 800600e:	9b01      	ldr	r3, [sp, #4]
 8006010:	617b      	str	r3, [r7, #20]
 8006012:	2101      	movs	r1, #1
 8006014:	6139      	str	r1, [r7, #16]
 8006016:	3020      	adds	r0, #32
 8006018:	e7e5      	b.n	8005fe6 <__d2b+0x54>
 800601a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800601e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006022:	6030      	str	r0, [r6, #0]
 8006024:	6918      	ldr	r0, [r3, #16]
 8006026:	f7ff fdae 	bl	8005b86 <__hi0bits>
 800602a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800602e:	e7e1      	b.n	8005ff4 <__d2b+0x62>

08006030 <_calloc_r>:
 8006030:	b538      	push	{r3, r4, r5, lr}
 8006032:	fb02 f401 	mul.w	r4, r2, r1
 8006036:	4621      	mov	r1, r4
 8006038:	f000 f856 	bl	80060e8 <_malloc_r>
 800603c:	4605      	mov	r5, r0
 800603e:	b118      	cbz	r0, 8006048 <_calloc_r+0x18>
 8006040:	4622      	mov	r2, r4
 8006042:	2100      	movs	r1, #0
 8006044:	f7fe fa30 	bl	80044a8 <memset>
 8006048:	4628      	mov	r0, r5
 800604a:	bd38      	pop	{r3, r4, r5, pc}

0800604c <_free_r>:
 800604c:	b538      	push	{r3, r4, r5, lr}
 800604e:	4605      	mov	r5, r0
 8006050:	2900      	cmp	r1, #0
 8006052:	d045      	beq.n	80060e0 <_free_r+0x94>
 8006054:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006058:	1f0c      	subs	r4, r1, #4
 800605a:	2b00      	cmp	r3, #0
 800605c:	bfb8      	it	lt
 800605e:	18e4      	addlt	r4, r4, r3
 8006060:	f000 fa29 	bl	80064b6 <__malloc_lock>
 8006064:	4a1f      	ldr	r2, [pc, #124]	; (80060e4 <_free_r+0x98>)
 8006066:	6813      	ldr	r3, [r2, #0]
 8006068:	4610      	mov	r0, r2
 800606a:	b933      	cbnz	r3, 800607a <_free_r+0x2e>
 800606c:	6063      	str	r3, [r4, #4]
 800606e:	6014      	str	r4, [r2, #0]
 8006070:	4628      	mov	r0, r5
 8006072:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006076:	f000 ba1f 	b.w	80064b8 <__malloc_unlock>
 800607a:	42a3      	cmp	r3, r4
 800607c:	d90c      	bls.n	8006098 <_free_r+0x4c>
 800607e:	6821      	ldr	r1, [r4, #0]
 8006080:	1862      	adds	r2, r4, r1
 8006082:	4293      	cmp	r3, r2
 8006084:	bf04      	itt	eq
 8006086:	681a      	ldreq	r2, [r3, #0]
 8006088:	685b      	ldreq	r3, [r3, #4]
 800608a:	6063      	str	r3, [r4, #4]
 800608c:	bf04      	itt	eq
 800608e:	1852      	addeq	r2, r2, r1
 8006090:	6022      	streq	r2, [r4, #0]
 8006092:	6004      	str	r4, [r0, #0]
 8006094:	e7ec      	b.n	8006070 <_free_r+0x24>
 8006096:	4613      	mov	r3, r2
 8006098:	685a      	ldr	r2, [r3, #4]
 800609a:	b10a      	cbz	r2, 80060a0 <_free_r+0x54>
 800609c:	42a2      	cmp	r2, r4
 800609e:	d9fa      	bls.n	8006096 <_free_r+0x4a>
 80060a0:	6819      	ldr	r1, [r3, #0]
 80060a2:	1858      	adds	r0, r3, r1
 80060a4:	42a0      	cmp	r0, r4
 80060a6:	d10b      	bne.n	80060c0 <_free_r+0x74>
 80060a8:	6820      	ldr	r0, [r4, #0]
 80060aa:	4401      	add	r1, r0
 80060ac:	1858      	adds	r0, r3, r1
 80060ae:	4282      	cmp	r2, r0
 80060b0:	6019      	str	r1, [r3, #0]
 80060b2:	d1dd      	bne.n	8006070 <_free_r+0x24>
 80060b4:	6810      	ldr	r0, [r2, #0]
 80060b6:	6852      	ldr	r2, [r2, #4]
 80060b8:	605a      	str	r2, [r3, #4]
 80060ba:	4401      	add	r1, r0
 80060bc:	6019      	str	r1, [r3, #0]
 80060be:	e7d7      	b.n	8006070 <_free_r+0x24>
 80060c0:	d902      	bls.n	80060c8 <_free_r+0x7c>
 80060c2:	230c      	movs	r3, #12
 80060c4:	602b      	str	r3, [r5, #0]
 80060c6:	e7d3      	b.n	8006070 <_free_r+0x24>
 80060c8:	6820      	ldr	r0, [r4, #0]
 80060ca:	1821      	adds	r1, r4, r0
 80060cc:	428a      	cmp	r2, r1
 80060ce:	bf04      	itt	eq
 80060d0:	6811      	ldreq	r1, [r2, #0]
 80060d2:	6852      	ldreq	r2, [r2, #4]
 80060d4:	6062      	str	r2, [r4, #4]
 80060d6:	bf04      	itt	eq
 80060d8:	1809      	addeq	r1, r1, r0
 80060da:	6021      	streq	r1, [r4, #0]
 80060dc:	605c      	str	r4, [r3, #4]
 80060de:	e7c7      	b.n	8006070 <_free_r+0x24>
 80060e0:	bd38      	pop	{r3, r4, r5, pc}
 80060e2:	bf00      	nop
 80060e4:	20000204 	.word	0x20000204

080060e8 <_malloc_r>:
 80060e8:	b570      	push	{r4, r5, r6, lr}
 80060ea:	1ccd      	adds	r5, r1, #3
 80060ec:	f025 0503 	bic.w	r5, r5, #3
 80060f0:	3508      	adds	r5, #8
 80060f2:	2d0c      	cmp	r5, #12
 80060f4:	bf38      	it	cc
 80060f6:	250c      	movcc	r5, #12
 80060f8:	2d00      	cmp	r5, #0
 80060fa:	4606      	mov	r6, r0
 80060fc:	db01      	blt.n	8006102 <_malloc_r+0x1a>
 80060fe:	42a9      	cmp	r1, r5
 8006100:	d903      	bls.n	800610a <_malloc_r+0x22>
 8006102:	230c      	movs	r3, #12
 8006104:	6033      	str	r3, [r6, #0]
 8006106:	2000      	movs	r0, #0
 8006108:	bd70      	pop	{r4, r5, r6, pc}
 800610a:	f000 f9d4 	bl	80064b6 <__malloc_lock>
 800610e:	4a21      	ldr	r2, [pc, #132]	; (8006194 <_malloc_r+0xac>)
 8006110:	6814      	ldr	r4, [r2, #0]
 8006112:	4621      	mov	r1, r4
 8006114:	b991      	cbnz	r1, 800613c <_malloc_r+0x54>
 8006116:	4c20      	ldr	r4, [pc, #128]	; (8006198 <_malloc_r+0xb0>)
 8006118:	6823      	ldr	r3, [r4, #0]
 800611a:	b91b      	cbnz	r3, 8006124 <_malloc_r+0x3c>
 800611c:	4630      	mov	r0, r6
 800611e:	f000 f98f 	bl	8006440 <_sbrk_r>
 8006122:	6020      	str	r0, [r4, #0]
 8006124:	4629      	mov	r1, r5
 8006126:	4630      	mov	r0, r6
 8006128:	f000 f98a 	bl	8006440 <_sbrk_r>
 800612c:	1c43      	adds	r3, r0, #1
 800612e:	d124      	bne.n	800617a <_malloc_r+0x92>
 8006130:	230c      	movs	r3, #12
 8006132:	6033      	str	r3, [r6, #0]
 8006134:	4630      	mov	r0, r6
 8006136:	f000 f9bf 	bl	80064b8 <__malloc_unlock>
 800613a:	e7e4      	b.n	8006106 <_malloc_r+0x1e>
 800613c:	680b      	ldr	r3, [r1, #0]
 800613e:	1b5b      	subs	r3, r3, r5
 8006140:	d418      	bmi.n	8006174 <_malloc_r+0x8c>
 8006142:	2b0b      	cmp	r3, #11
 8006144:	d90f      	bls.n	8006166 <_malloc_r+0x7e>
 8006146:	600b      	str	r3, [r1, #0]
 8006148:	50cd      	str	r5, [r1, r3]
 800614a:	18cc      	adds	r4, r1, r3
 800614c:	4630      	mov	r0, r6
 800614e:	f000 f9b3 	bl	80064b8 <__malloc_unlock>
 8006152:	f104 000b 	add.w	r0, r4, #11
 8006156:	1d23      	adds	r3, r4, #4
 8006158:	f020 0007 	bic.w	r0, r0, #7
 800615c:	1ac3      	subs	r3, r0, r3
 800615e:	d0d3      	beq.n	8006108 <_malloc_r+0x20>
 8006160:	425a      	negs	r2, r3
 8006162:	50e2      	str	r2, [r4, r3]
 8006164:	e7d0      	b.n	8006108 <_malloc_r+0x20>
 8006166:	428c      	cmp	r4, r1
 8006168:	684b      	ldr	r3, [r1, #4]
 800616a:	bf16      	itet	ne
 800616c:	6063      	strne	r3, [r4, #4]
 800616e:	6013      	streq	r3, [r2, #0]
 8006170:	460c      	movne	r4, r1
 8006172:	e7eb      	b.n	800614c <_malloc_r+0x64>
 8006174:	460c      	mov	r4, r1
 8006176:	6849      	ldr	r1, [r1, #4]
 8006178:	e7cc      	b.n	8006114 <_malloc_r+0x2c>
 800617a:	1cc4      	adds	r4, r0, #3
 800617c:	f024 0403 	bic.w	r4, r4, #3
 8006180:	42a0      	cmp	r0, r4
 8006182:	d005      	beq.n	8006190 <_malloc_r+0xa8>
 8006184:	1a21      	subs	r1, r4, r0
 8006186:	4630      	mov	r0, r6
 8006188:	f000 f95a 	bl	8006440 <_sbrk_r>
 800618c:	3001      	adds	r0, #1
 800618e:	d0cf      	beq.n	8006130 <_malloc_r+0x48>
 8006190:	6025      	str	r5, [r4, #0]
 8006192:	e7db      	b.n	800614c <_malloc_r+0x64>
 8006194:	20000204 	.word	0x20000204
 8006198:	20000208 	.word	0x20000208

0800619c <__ssputs_r>:
 800619c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061a0:	688e      	ldr	r6, [r1, #8]
 80061a2:	429e      	cmp	r6, r3
 80061a4:	4682      	mov	sl, r0
 80061a6:	460c      	mov	r4, r1
 80061a8:	4690      	mov	r8, r2
 80061aa:	4699      	mov	r9, r3
 80061ac:	d837      	bhi.n	800621e <__ssputs_r+0x82>
 80061ae:	898a      	ldrh	r2, [r1, #12]
 80061b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80061b4:	d031      	beq.n	800621a <__ssputs_r+0x7e>
 80061b6:	6825      	ldr	r5, [r4, #0]
 80061b8:	6909      	ldr	r1, [r1, #16]
 80061ba:	1a6f      	subs	r7, r5, r1
 80061bc:	6965      	ldr	r5, [r4, #20]
 80061be:	2302      	movs	r3, #2
 80061c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061c4:	fb95 f5f3 	sdiv	r5, r5, r3
 80061c8:	f109 0301 	add.w	r3, r9, #1
 80061cc:	443b      	add	r3, r7
 80061ce:	429d      	cmp	r5, r3
 80061d0:	bf38      	it	cc
 80061d2:	461d      	movcc	r5, r3
 80061d4:	0553      	lsls	r3, r2, #21
 80061d6:	d530      	bpl.n	800623a <__ssputs_r+0x9e>
 80061d8:	4629      	mov	r1, r5
 80061da:	f7ff ff85 	bl	80060e8 <_malloc_r>
 80061de:	4606      	mov	r6, r0
 80061e0:	b950      	cbnz	r0, 80061f8 <__ssputs_r+0x5c>
 80061e2:	230c      	movs	r3, #12
 80061e4:	f8ca 3000 	str.w	r3, [sl]
 80061e8:	89a3      	ldrh	r3, [r4, #12]
 80061ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061ee:	81a3      	strh	r3, [r4, #12]
 80061f0:	f04f 30ff 	mov.w	r0, #4294967295
 80061f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061f8:	463a      	mov	r2, r7
 80061fa:	6921      	ldr	r1, [r4, #16]
 80061fc:	f7ff fc32 	bl	8005a64 <memcpy>
 8006200:	89a3      	ldrh	r3, [r4, #12]
 8006202:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800620a:	81a3      	strh	r3, [r4, #12]
 800620c:	6126      	str	r6, [r4, #16]
 800620e:	6165      	str	r5, [r4, #20]
 8006210:	443e      	add	r6, r7
 8006212:	1bed      	subs	r5, r5, r7
 8006214:	6026      	str	r6, [r4, #0]
 8006216:	60a5      	str	r5, [r4, #8]
 8006218:	464e      	mov	r6, r9
 800621a:	454e      	cmp	r6, r9
 800621c:	d900      	bls.n	8006220 <__ssputs_r+0x84>
 800621e:	464e      	mov	r6, r9
 8006220:	4632      	mov	r2, r6
 8006222:	4641      	mov	r1, r8
 8006224:	6820      	ldr	r0, [r4, #0]
 8006226:	f000 f92d 	bl	8006484 <memmove>
 800622a:	68a3      	ldr	r3, [r4, #8]
 800622c:	1b9b      	subs	r3, r3, r6
 800622e:	60a3      	str	r3, [r4, #8]
 8006230:	6823      	ldr	r3, [r4, #0]
 8006232:	441e      	add	r6, r3
 8006234:	6026      	str	r6, [r4, #0]
 8006236:	2000      	movs	r0, #0
 8006238:	e7dc      	b.n	80061f4 <__ssputs_r+0x58>
 800623a:	462a      	mov	r2, r5
 800623c:	f000 f93d 	bl	80064ba <_realloc_r>
 8006240:	4606      	mov	r6, r0
 8006242:	2800      	cmp	r0, #0
 8006244:	d1e2      	bne.n	800620c <__ssputs_r+0x70>
 8006246:	6921      	ldr	r1, [r4, #16]
 8006248:	4650      	mov	r0, sl
 800624a:	f7ff feff 	bl	800604c <_free_r>
 800624e:	e7c8      	b.n	80061e2 <__ssputs_r+0x46>

08006250 <_svfiprintf_r>:
 8006250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006254:	461d      	mov	r5, r3
 8006256:	898b      	ldrh	r3, [r1, #12]
 8006258:	061f      	lsls	r7, r3, #24
 800625a:	b09d      	sub	sp, #116	; 0x74
 800625c:	4680      	mov	r8, r0
 800625e:	460c      	mov	r4, r1
 8006260:	4616      	mov	r6, r2
 8006262:	d50f      	bpl.n	8006284 <_svfiprintf_r+0x34>
 8006264:	690b      	ldr	r3, [r1, #16]
 8006266:	b96b      	cbnz	r3, 8006284 <_svfiprintf_r+0x34>
 8006268:	2140      	movs	r1, #64	; 0x40
 800626a:	f7ff ff3d 	bl	80060e8 <_malloc_r>
 800626e:	6020      	str	r0, [r4, #0]
 8006270:	6120      	str	r0, [r4, #16]
 8006272:	b928      	cbnz	r0, 8006280 <_svfiprintf_r+0x30>
 8006274:	230c      	movs	r3, #12
 8006276:	f8c8 3000 	str.w	r3, [r8]
 800627a:	f04f 30ff 	mov.w	r0, #4294967295
 800627e:	e0c8      	b.n	8006412 <_svfiprintf_r+0x1c2>
 8006280:	2340      	movs	r3, #64	; 0x40
 8006282:	6163      	str	r3, [r4, #20]
 8006284:	2300      	movs	r3, #0
 8006286:	9309      	str	r3, [sp, #36]	; 0x24
 8006288:	2320      	movs	r3, #32
 800628a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800628e:	2330      	movs	r3, #48	; 0x30
 8006290:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006294:	9503      	str	r5, [sp, #12]
 8006296:	f04f 0b01 	mov.w	fp, #1
 800629a:	4637      	mov	r7, r6
 800629c:	463d      	mov	r5, r7
 800629e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80062a2:	b10b      	cbz	r3, 80062a8 <_svfiprintf_r+0x58>
 80062a4:	2b25      	cmp	r3, #37	; 0x25
 80062a6:	d13e      	bne.n	8006326 <_svfiprintf_r+0xd6>
 80062a8:	ebb7 0a06 	subs.w	sl, r7, r6
 80062ac:	d00b      	beq.n	80062c6 <_svfiprintf_r+0x76>
 80062ae:	4653      	mov	r3, sl
 80062b0:	4632      	mov	r2, r6
 80062b2:	4621      	mov	r1, r4
 80062b4:	4640      	mov	r0, r8
 80062b6:	f7ff ff71 	bl	800619c <__ssputs_r>
 80062ba:	3001      	adds	r0, #1
 80062bc:	f000 80a4 	beq.w	8006408 <_svfiprintf_r+0x1b8>
 80062c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062c2:	4453      	add	r3, sl
 80062c4:	9309      	str	r3, [sp, #36]	; 0x24
 80062c6:	783b      	ldrb	r3, [r7, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f000 809d 	beq.w	8006408 <_svfiprintf_r+0x1b8>
 80062ce:	2300      	movs	r3, #0
 80062d0:	f04f 32ff 	mov.w	r2, #4294967295
 80062d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062d8:	9304      	str	r3, [sp, #16]
 80062da:	9307      	str	r3, [sp, #28]
 80062dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062e0:	931a      	str	r3, [sp, #104]	; 0x68
 80062e2:	462f      	mov	r7, r5
 80062e4:	2205      	movs	r2, #5
 80062e6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80062ea:	4850      	ldr	r0, [pc, #320]	; (800642c <_svfiprintf_r+0x1dc>)
 80062ec:	f7f9 ff78 	bl	80001e0 <memchr>
 80062f0:	9b04      	ldr	r3, [sp, #16]
 80062f2:	b9d0      	cbnz	r0, 800632a <_svfiprintf_r+0xda>
 80062f4:	06d9      	lsls	r1, r3, #27
 80062f6:	bf44      	itt	mi
 80062f8:	2220      	movmi	r2, #32
 80062fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80062fe:	071a      	lsls	r2, r3, #28
 8006300:	bf44      	itt	mi
 8006302:	222b      	movmi	r2, #43	; 0x2b
 8006304:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006308:	782a      	ldrb	r2, [r5, #0]
 800630a:	2a2a      	cmp	r2, #42	; 0x2a
 800630c:	d015      	beq.n	800633a <_svfiprintf_r+0xea>
 800630e:	9a07      	ldr	r2, [sp, #28]
 8006310:	462f      	mov	r7, r5
 8006312:	2000      	movs	r0, #0
 8006314:	250a      	movs	r5, #10
 8006316:	4639      	mov	r1, r7
 8006318:	f811 3b01 	ldrb.w	r3, [r1], #1
 800631c:	3b30      	subs	r3, #48	; 0x30
 800631e:	2b09      	cmp	r3, #9
 8006320:	d94d      	bls.n	80063be <_svfiprintf_r+0x16e>
 8006322:	b1b8      	cbz	r0, 8006354 <_svfiprintf_r+0x104>
 8006324:	e00f      	b.n	8006346 <_svfiprintf_r+0xf6>
 8006326:	462f      	mov	r7, r5
 8006328:	e7b8      	b.n	800629c <_svfiprintf_r+0x4c>
 800632a:	4a40      	ldr	r2, [pc, #256]	; (800642c <_svfiprintf_r+0x1dc>)
 800632c:	1a80      	subs	r0, r0, r2
 800632e:	fa0b f000 	lsl.w	r0, fp, r0
 8006332:	4318      	orrs	r0, r3
 8006334:	9004      	str	r0, [sp, #16]
 8006336:	463d      	mov	r5, r7
 8006338:	e7d3      	b.n	80062e2 <_svfiprintf_r+0x92>
 800633a:	9a03      	ldr	r2, [sp, #12]
 800633c:	1d11      	adds	r1, r2, #4
 800633e:	6812      	ldr	r2, [r2, #0]
 8006340:	9103      	str	r1, [sp, #12]
 8006342:	2a00      	cmp	r2, #0
 8006344:	db01      	blt.n	800634a <_svfiprintf_r+0xfa>
 8006346:	9207      	str	r2, [sp, #28]
 8006348:	e004      	b.n	8006354 <_svfiprintf_r+0x104>
 800634a:	4252      	negs	r2, r2
 800634c:	f043 0302 	orr.w	r3, r3, #2
 8006350:	9207      	str	r2, [sp, #28]
 8006352:	9304      	str	r3, [sp, #16]
 8006354:	783b      	ldrb	r3, [r7, #0]
 8006356:	2b2e      	cmp	r3, #46	; 0x2e
 8006358:	d10c      	bne.n	8006374 <_svfiprintf_r+0x124>
 800635a:	787b      	ldrb	r3, [r7, #1]
 800635c:	2b2a      	cmp	r3, #42	; 0x2a
 800635e:	d133      	bne.n	80063c8 <_svfiprintf_r+0x178>
 8006360:	9b03      	ldr	r3, [sp, #12]
 8006362:	1d1a      	adds	r2, r3, #4
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	9203      	str	r2, [sp, #12]
 8006368:	2b00      	cmp	r3, #0
 800636a:	bfb8      	it	lt
 800636c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006370:	3702      	adds	r7, #2
 8006372:	9305      	str	r3, [sp, #20]
 8006374:	4d2e      	ldr	r5, [pc, #184]	; (8006430 <_svfiprintf_r+0x1e0>)
 8006376:	7839      	ldrb	r1, [r7, #0]
 8006378:	2203      	movs	r2, #3
 800637a:	4628      	mov	r0, r5
 800637c:	f7f9 ff30 	bl	80001e0 <memchr>
 8006380:	b138      	cbz	r0, 8006392 <_svfiprintf_r+0x142>
 8006382:	2340      	movs	r3, #64	; 0x40
 8006384:	1b40      	subs	r0, r0, r5
 8006386:	fa03 f000 	lsl.w	r0, r3, r0
 800638a:	9b04      	ldr	r3, [sp, #16]
 800638c:	4303      	orrs	r3, r0
 800638e:	3701      	adds	r7, #1
 8006390:	9304      	str	r3, [sp, #16]
 8006392:	7839      	ldrb	r1, [r7, #0]
 8006394:	4827      	ldr	r0, [pc, #156]	; (8006434 <_svfiprintf_r+0x1e4>)
 8006396:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800639a:	2206      	movs	r2, #6
 800639c:	1c7e      	adds	r6, r7, #1
 800639e:	f7f9 ff1f 	bl	80001e0 <memchr>
 80063a2:	2800      	cmp	r0, #0
 80063a4:	d038      	beq.n	8006418 <_svfiprintf_r+0x1c8>
 80063a6:	4b24      	ldr	r3, [pc, #144]	; (8006438 <_svfiprintf_r+0x1e8>)
 80063a8:	bb13      	cbnz	r3, 80063f0 <_svfiprintf_r+0x1a0>
 80063aa:	9b03      	ldr	r3, [sp, #12]
 80063ac:	3307      	adds	r3, #7
 80063ae:	f023 0307 	bic.w	r3, r3, #7
 80063b2:	3308      	adds	r3, #8
 80063b4:	9303      	str	r3, [sp, #12]
 80063b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063b8:	444b      	add	r3, r9
 80063ba:	9309      	str	r3, [sp, #36]	; 0x24
 80063bc:	e76d      	b.n	800629a <_svfiprintf_r+0x4a>
 80063be:	fb05 3202 	mla	r2, r5, r2, r3
 80063c2:	2001      	movs	r0, #1
 80063c4:	460f      	mov	r7, r1
 80063c6:	e7a6      	b.n	8006316 <_svfiprintf_r+0xc6>
 80063c8:	2300      	movs	r3, #0
 80063ca:	3701      	adds	r7, #1
 80063cc:	9305      	str	r3, [sp, #20]
 80063ce:	4619      	mov	r1, r3
 80063d0:	250a      	movs	r5, #10
 80063d2:	4638      	mov	r0, r7
 80063d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063d8:	3a30      	subs	r2, #48	; 0x30
 80063da:	2a09      	cmp	r2, #9
 80063dc:	d903      	bls.n	80063e6 <_svfiprintf_r+0x196>
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d0c8      	beq.n	8006374 <_svfiprintf_r+0x124>
 80063e2:	9105      	str	r1, [sp, #20]
 80063e4:	e7c6      	b.n	8006374 <_svfiprintf_r+0x124>
 80063e6:	fb05 2101 	mla	r1, r5, r1, r2
 80063ea:	2301      	movs	r3, #1
 80063ec:	4607      	mov	r7, r0
 80063ee:	e7f0      	b.n	80063d2 <_svfiprintf_r+0x182>
 80063f0:	ab03      	add	r3, sp, #12
 80063f2:	9300      	str	r3, [sp, #0]
 80063f4:	4622      	mov	r2, r4
 80063f6:	4b11      	ldr	r3, [pc, #68]	; (800643c <_svfiprintf_r+0x1ec>)
 80063f8:	a904      	add	r1, sp, #16
 80063fa:	4640      	mov	r0, r8
 80063fc:	f7fe f8f0 	bl	80045e0 <_printf_float>
 8006400:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006404:	4681      	mov	r9, r0
 8006406:	d1d6      	bne.n	80063b6 <_svfiprintf_r+0x166>
 8006408:	89a3      	ldrh	r3, [r4, #12]
 800640a:	065b      	lsls	r3, r3, #25
 800640c:	f53f af35 	bmi.w	800627a <_svfiprintf_r+0x2a>
 8006410:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006412:	b01d      	add	sp, #116	; 0x74
 8006414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006418:	ab03      	add	r3, sp, #12
 800641a:	9300      	str	r3, [sp, #0]
 800641c:	4622      	mov	r2, r4
 800641e:	4b07      	ldr	r3, [pc, #28]	; (800643c <_svfiprintf_r+0x1ec>)
 8006420:	a904      	add	r1, sp, #16
 8006422:	4640      	mov	r0, r8
 8006424:	f7fe fb92 	bl	8004b4c <_printf_i>
 8006428:	e7ea      	b.n	8006400 <_svfiprintf_r+0x1b0>
 800642a:	bf00      	nop
 800642c:	080066cc 	.word	0x080066cc
 8006430:	080066d2 	.word	0x080066d2
 8006434:	080066d6 	.word	0x080066d6
 8006438:	080045e1 	.word	0x080045e1
 800643c:	0800619d 	.word	0x0800619d

08006440 <_sbrk_r>:
 8006440:	b538      	push	{r3, r4, r5, lr}
 8006442:	4c06      	ldr	r4, [pc, #24]	; (800645c <_sbrk_r+0x1c>)
 8006444:	2300      	movs	r3, #0
 8006446:	4605      	mov	r5, r0
 8006448:	4608      	mov	r0, r1
 800644a:	6023      	str	r3, [r4, #0]
 800644c:	f7fd ff62 	bl	8004314 <_sbrk>
 8006450:	1c43      	adds	r3, r0, #1
 8006452:	d102      	bne.n	800645a <_sbrk_r+0x1a>
 8006454:	6823      	ldr	r3, [r4, #0]
 8006456:	b103      	cbz	r3, 800645a <_sbrk_r+0x1a>
 8006458:	602b      	str	r3, [r5, #0]
 800645a:	bd38      	pop	{r3, r4, r5, pc}
 800645c:	20000344 	.word	0x20000344

08006460 <__ascii_mbtowc>:
 8006460:	b082      	sub	sp, #8
 8006462:	b901      	cbnz	r1, 8006466 <__ascii_mbtowc+0x6>
 8006464:	a901      	add	r1, sp, #4
 8006466:	b142      	cbz	r2, 800647a <__ascii_mbtowc+0x1a>
 8006468:	b14b      	cbz	r3, 800647e <__ascii_mbtowc+0x1e>
 800646a:	7813      	ldrb	r3, [r2, #0]
 800646c:	600b      	str	r3, [r1, #0]
 800646e:	7812      	ldrb	r2, [r2, #0]
 8006470:	1c10      	adds	r0, r2, #0
 8006472:	bf18      	it	ne
 8006474:	2001      	movne	r0, #1
 8006476:	b002      	add	sp, #8
 8006478:	4770      	bx	lr
 800647a:	4610      	mov	r0, r2
 800647c:	e7fb      	b.n	8006476 <__ascii_mbtowc+0x16>
 800647e:	f06f 0001 	mvn.w	r0, #1
 8006482:	e7f8      	b.n	8006476 <__ascii_mbtowc+0x16>

08006484 <memmove>:
 8006484:	4288      	cmp	r0, r1
 8006486:	b510      	push	{r4, lr}
 8006488:	eb01 0302 	add.w	r3, r1, r2
 800648c:	d807      	bhi.n	800649e <memmove+0x1a>
 800648e:	1e42      	subs	r2, r0, #1
 8006490:	4299      	cmp	r1, r3
 8006492:	d00a      	beq.n	80064aa <memmove+0x26>
 8006494:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006498:	f802 4f01 	strb.w	r4, [r2, #1]!
 800649c:	e7f8      	b.n	8006490 <memmove+0xc>
 800649e:	4283      	cmp	r3, r0
 80064a0:	d9f5      	bls.n	800648e <memmove+0xa>
 80064a2:	1881      	adds	r1, r0, r2
 80064a4:	1ad2      	subs	r2, r2, r3
 80064a6:	42d3      	cmn	r3, r2
 80064a8:	d100      	bne.n	80064ac <memmove+0x28>
 80064aa:	bd10      	pop	{r4, pc}
 80064ac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80064b0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80064b4:	e7f7      	b.n	80064a6 <memmove+0x22>

080064b6 <__malloc_lock>:
 80064b6:	4770      	bx	lr

080064b8 <__malloc_unlock>:
 80064b8:	4770      	bx	lr

080064ba <_realloc_r>:
 80064ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064bc:	4607      	mov	r7, r0
 80064be:	4614      	mov	r4, r2
 80064c0:	460e      	mov	r6, r1
 80064c2:	b921      	cbnz	r1, 80064ce <_realloc_r+0x14>
 80064c4:	4611      	mov	r1, r2
 80064c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80064ca:	f7ff be0d 	b.w	80060e8 <_malloc_r>
 80064ce:	b922      	cbnz	r2, 80064da <_realloc_r+0x20>
 80064d0:	f7ff fdbc 	bl	800604c <_free_r>
 80064d4:	4625      	mov	r5, r4
 80064d6:	4628      	mov	r0, r5
 80064d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064da:	f000 f821 	bl	8006520 <_malloc_usable_size_r>
 80064de:	42a0      	cmp	r0, r4
 80064e0:	d20f      	bcs.n	8006502 <_realloc_r+0x48>
 80064e2:	4621      	mov	r1, r4
 80064e4:	4638      	mov	r0, r7
 80064e6:	f7ff fdff 	bl	80060e8 <_malloc_r>
 80064ea:	4605      	mov	r5, r0
 80064ec:	2800      	cmp	r0, #0
 80064ee:	d0f2      	beq.n	80064d6 <_realloc_r+0x1c>
 80064f0:	4631      	mov	r1, r6
 80064f2:	4622      	mov	r2, r4
 80064f4:	f7ff fab6 	bl	8005a64 <memcpy>
 80064f8:	4631      	mov	r1, r6
 80064fa:	4638      	mov	r0, r7
 80064fc:	f7ff fda6 	bl	800604c <_free_r>
 8006500:	e7e9      	b.n	80064d6 <_realloc_r+0x1c>
 8006502:	4635      	mov	r5, r6
 8006504:	e7e7      	b.n	80064d6 <_realloc_r+0x1c>

08006506 <__ascii_wctomb>:
 8006506:	b149      	cbz	r1, 800651c <__ascii_wctomb+0x16>
 8006508:	2aff      	cmp	r2, #255	; 0xff
 800650a:	bf85      	ittet	hi
 800650c:	238a      	movhi	r3, #138	; 0x8a
 800650e:	6003      	strhi	r3, [r0, #0]
 8006510:	700a      	strbls	r2, [r1, #0]
 8006512:	f04f 30ff 	movhi.w	r0, #4294967295
 8006516:	bf98      	it	ls
 8006518:	2001      	movls	r0, #1
 800651a:	4770      	bx	lr
 800651c:	4608      	mov	r0, r1
 800651e:	4770      	bx	lr

08006520 <_malloc_usable_size_r>:
 8006520:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006524:	1f18      	subs	r0, r3, #4
 8006526:	2b00      	cmp	r3, #0
 8006528:	bfbc      	itt	lt
 800652a:	580b      	ldrlt	r3, [r1, r0]
 800652c:	18c0      	addlt	r0, r0, r3
 800652e:	4770      	bx	lr

08006530 <_init>:
 8006530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006532:	bf00      	nop
 8006534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006536:	bc08      	pop	{r3}
 8006538:	469e      	mov	lr, r3
 800653a:	4770      	bx	lr

0800653c <_fini>:
 800653c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800653e:	bf00      	nop
 8006540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006542:	bc08      	pop	{r3}
 8006544:	469e      	mov	lr, r3
 8006546:	4770      	bx	lr
