
UART_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003200  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080033c8  080033c8  000133c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033e0  080033e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080033e0  080033e0  000133e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033e8  080033e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033e8  080033e8  000133e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033ec  080033ec  000133ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080033f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  080033fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  080033fc  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008639  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001689  00000000  00000000  00028675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000740  00000000  00000000  00029d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b8  00000000  00000000  0002a440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023ffd  00000000  00000000  0002aaf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000089a7  00000000  00000000  0004eaf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e15e0  00000000  00000000  0005749c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00138a7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c88  00000000  00000000  00138ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080033b0 	.word	0x080033b0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080033b0 	.word	0x080033b0

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b96e 	b.w	80004fc <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468c      	mov	ip, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	f040 8083 	bne.w	800034e <__udivmoddi4+0x116>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d947      	bls.n	80002de <__udivmoddi4+0xa6>
 800024e:	fab2 f282 	clz	r2, r2
 8000252:	b142      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000254:	f1c2 0020 	rsb	r0, r2, #32
 8000258:	fa24 f000 	lsr.w	r0, r4, r0
 800025c:	4091      	lsls	r1, r2
 800025e:	4097      	lsls	r7, r2
 8000260:	ea40 0c01 	orr.w	ip, r0, r1
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbbc f6f8 	udiv	r6, ip, r8
 8000270:	fa1f fe87 	uxth.w	lr, r7
 8000274:	fb08 c116 	mls	r1, r8, r6, ip
 8000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027c:	fb06 f10e 	mul.w	r1, r6, lr
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 8119 	bcs.w	80004c0 <__udivmoddi4+0x288>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8116 	bls.w	80004c0 <__udivmoddi4+0x288>
 8000294:	3e02      	subs	r6, #2
 8000296:	443b      	add	r3, r7
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ac:	45a6      	cmp	lr, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	193c      	adds	r4, r7, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b6:	f080 8105 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	f240 8102 	bls.w	80004c4 <__udivmoddi4+0x28c>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c8:	eba4 040e 	sub.w	r4, r4, lr
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xaa>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d150      	bne.n	800038c <__udivmoddi4+0x154>
 80002ea:	1bcb      	subs	r3, r1, r7
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	fa1f f887 	uxth.w	r8, r7
 80002f4:	2601      	movs	r6, #1
 80002f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002fa:	0c21      	lsrs	r1, r4, #16
 80002fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000304:	fb08 f30c 	mul.w	r3, r8, ip
 8000308:	428b      	cmp	r3, r1
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0xe4>
 800030c:	1879      	adds	r1, r7, r1
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0xe2>
 8000314:	428b      	cmp	r3, r1
 8000316:	f200 80e9 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 800031a:	4684      	mov	ip, r0
 800031c:	1ac9      	subs	r1, r1, r3
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x10c>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x10a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80d9 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e7bf      	b.n	80002ce <__udivmoddi4+0x96>
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x12e>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80b1 	beq.w	80004ba <__udivmoddi4+0x282>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x1cc>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0x140>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80b8 	bhi.w	80004e8 <__udivmoddi4+0x2b0>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0103 	sbc.w	r1, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	468c      	mov	ip, r1
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0a8      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000386:	e9c5 4c00 	strd	r4, ip, [r5]
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0xa0>
 800038c:	f1c2 0320 	rsb	r3, r2, #32
 8000390:	fa20 f603 	lsr.w	r6, r0, r3
 8000394:	4097      	lsls	r7, r2
 8000396:	fa01 f002 	lsl.w	r0, r1, r2
 800039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039e:	40d9      	lsrs	r1, r3
 80003a0:	4330      	orrs	r0, r6
 80003a2:	0c03      	lsrs	r3, r0, #16
 80003a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f108 	mul.w	r1, r6, r8
 80003b8:	4299      	cmp	r1, r3
 80003ba:	fa04 f402 	lsl.w	r4, r4, r2
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x19c>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003c6:	f080 808d 	bcs.w	80004e4 <__udivmoddi4+0x2ac>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 808a 	bls.w	80004e4 <__udivmoddi4+0x2ac>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	443b      	add	r3, r7
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b281      	uxth	r1, r0
 80003d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb00 f308 	mul.w	r3, r0, r8
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x1c4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003f2:	d273      	bcs.n	80004dc <__udivmoddi4+0x2a4>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d971      	bls.n	80004dc <__udivmoddi4+0x2a4>
 80003f8:	3802      	subs	r0, #2
 80003fa:	4439      	add	r1, r7
 80003fc:	1acb      	subs	r3, r1, r3
 80003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000402:	e778      	b.n	80002f6 <__udivmoddi4+0xbe>
 8000404:	f1c6 0c20 	rsb	ip, r6, #32
 8000408:	fa03 f406 	lsl.w	r4, r3, r6
 800040c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000410:	431c      	orrs	r4, r3
 8000412:	fa20 f70c 	lsr.w	r7, r0, ip
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000422:	431f      	orrs	r7, r3
 8000424:	0c3b      	lsrs	r3, r7, #16
 8000426:	fbb1 f9fe 	udiv	r9, r1, lr
 800042a:	fa1f f884 	uxth.w	r8, r4
 800042e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000436:	fb09 fa08 	mul.w	sl, r9, r8
 800043a:	458a      	cmp	sl, r1
 800043c:	fa02 f206 	lsl.w	r2, r2, r6
 8000440:	fa00 f306 	lsl.w	r3, r0, r6
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x220>
 8000446:	1861      	adds	r1, r4, r1
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800044c:	d248      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 800044e:	458a      	cmp	sl, r1
 8000450:	d946      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	4421      	add	r1, r4
 8000458:	eba1 010a 	sub.w	r1, r1, sl
 800045c:	b2bf      	uxth	r7, r7
 800045e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000462:	fb0e 1110 	mls	r1, lr, r0, r1
 8000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45b8      	cmp	r8, r7
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x24a>
 8000472:	19e7      	adds	r7, r4, r7
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000478:	d22e      	bcs.n	80004d8 <__udivmoddi4+0x2a0>
 800047a:	45b8      	cmp	r8, r7
 800047c:	d92c      	bls.n	80004d8 <__udivmoddi4+0x2a0>
 800047e:	3802      	subs	r0, #2
 8000480:	4427      	add	r7, r4
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba7 0708 	sub.w	r7, r7, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454f      	cmp	r7, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	4649      	mov	r1, r9
 8000494:	d31a      	bcc.n	80004cc <__udivmoddi4+0x294>
 8000496:	d017      	beq.n	80004c8 <__udivmoddi4+0x290>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x27a>
 800049a:	ebb3 020e 	subs.w	r2, r3, lr
 800049e:	eb67 0701 	sbc.w	r7, r7, r1
 80004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a6:	40f2      	lsrs	r2, r6
 80004a8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ac:	40f7      	lsrs	r7, r6
 80004ae:	e9c5 2700 	strd	r2, r7, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e70b      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fd      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004c8:	4543      	cmp	r3, r8
 80004ca:	d2e5      	bcs.n	8000498 <__udivmoddi4+0x260>
 80004cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d0:	eb69 0104 	sbc.w	r1, r9, r4
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7df      	b.n	8000498 <__udivmoddi4+0x260>
 80004d8:	4608      	mov	r0, r1
 80004da:	e7d2      	b.n	8000482 <__udivmoddi4+0x24a>
 80004dc:	4660      	mov	r0, ip
 80004de:	e78d      	b.n	80003fc <__udivmoddi4+0x1c4>
 80004e0:	4681      	mov	r9, r0
 80004e2:	e7b9      	b.n	8000458 <__udivmoddi4+0x220>
 80004e4:	4666      	mov	r6, ip
 80004e6:	e775      	b.n	80003d4 <__udivmoddi4+0x19c>
 80004e8:	4630      	mov	r0, r6
 80004ea:	e74a      	b.n	8000382 <__udivmoddi4+0x14a>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	4439      	add	r1, r7
 80004f2:	e713      	b.n	800031c <__udivmoddi4+0xe4>
 80004f4:	3802      	subs	r0, #2
 80004f6:	443c      	add	r4, r7
 80004f8:	e724      	b.n	8000344 <__udivmoddi4+0x10c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <HAL_UART_ErrorCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000508:	2180      	movs	r1, #128	; 0x80
 800050a:	4803      	ldr	r0, [pc, #12]	; (8000518 <HAL_UART_ErrorCallback+0x18>)
 800050c:	f000 fdd9 	bl	80010c2 <HAL_GPIO_TogglePin>
}
 8000510:	bf00      	nop
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	40020400 	.word	0x40020400

0800051c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart3, aRxBuffer, 8);
 8000524:	2208      	movs	r2, #8
 8000526:	4908      	ldr	r1, [pc, #32]	; (8000548 <HAL_UART_RxCpltCallback+0x2c>)
 8000528:	4808      	ldr	r0, [pc, #32]	; (800054c <HAL_UART_RxCpltCallback+0x30>)
 800052a:	f001 fef9 	bl	8002320 <HAL_UART_Receive_IT>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800052e:	2180      	movs	r1, #128	; 0x80
 8000530:	4807      	ldr	r0, [pc, #28]	; (8000550 <HAL_UART_RxCpltCallback+0x34>)
 8000532:	f000 fdc6 	bl	80010c2 <HAL_GPIO_TogglePin>
	HAL_UART_Transmit_IT(&huart3, aTxBuffer, 8);
 8000536:	2208      	movs	r2, #8
 8000538:	4906      	ldr	r1, [pc, #24]	; (8000554 <HAL_UART_RxCpltCallback+0x38>)
 800053a:	4804      	ldr	r0, [pc, #16]	; (800054c <HAL_UART_RxCpltCallback+0x30>)
 800053c:	f001 fe94 	bl	8002268 <HAL_UART_Transmit_IT>
}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	20000028 	.word	0x20000028
 800054c:	20000038 	.word	0x20000038
 8000550:	40020400 	.word	0x40020400
 8000554:	20000030 	.word	0x20000030

08000558 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_IT(&huart3, aRxBuffer, 8);
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000560:	2180      	movs	r1, #128	; 0x80
 8000562:	4803      	ldr	r0, [pc, #12]	; (8000570 <HAL_UART_TxCpltCallback+0x18>)
 8000564:	f000 fdad 	bl	80010c2 <HAL_GPIO_TogglePin>
}
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40020400 	.word	0x40020400

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 f9dd 	bl	8000936 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f80e 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 f8b6 	bl	80006f0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000584:	f000 f884 	bl	8000690 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, aRxBuffer, 8);
 8000588:	2208      	movs	r2, #8
 800058a:	4902      	ldr	r1, [pc, #8]	; (8000594 <main+0x20>)
 800058c:	4802      	ldr	r0, [pc, #8]	; (8000598 <main+0x24>)
 800058e:	f001 fec7 	bl	8002320 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000592:	e7fe      	b.n	8000592 <main+0x1e>
 8000594:	20000028 	.word	0x20000028
 8000598:	20000038 	.word	0x20000038

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b0b4      	sub	sp, #208	; 0xd0
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80005a6:	2230      	movs	r2, #48	; 0x30
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f002 fef8 	bl	80033a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005c0:	f107 0308 	add.w	r3, r7, #8
 80005c4:	2284      	movs	r2, #132	; 0x84
 80005c6:	2100      	movs	r1, #0
 80005c8:	4618      	mov	r0, r3
 80005ca:	f002 fee9 	bl	80033a0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ce:	4b2e      	ldr	r3, [pc, #184]	; (8000688 <SystemClock_Config+0xec>)
 80005d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d2:	4a2d      	ldr	r2, [pc, #180]	; (8000688 <SystemClock_Config+0xec>)
 80005d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d8:	6413      	str	r3, [r2, #64]	; 0x40
 80005da:	4b2b      	ldr	r3, [pc, #172]	; (8000688 <SystemClock_Config+0xec>)
 80005dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005e6:	4b29      	ldr	r3, [pc, #164]	; (800068c <SystemClock_Config+0xf0>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005ee:	4a27      	ldr	r2, [pc, #156]	; (800068c <SystemClock_Config+0xf0>)
 80005f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f4:	6013      	str	r3, [r2, #0]
 80005f6:	4b25      	ldr	r3, [pc, #148]	; (800068c <SystemClock_Config+0xf0>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000602:	2302      	movs	r3, #2
 8000604:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000608:	2301      	movs	r3, #1
 800060a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060e:	2310      	movs	r3, #16
 8000610:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000614:	2300      	movs	r3, #0
 8000616:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800061e:	4618      	mov	r0, r3
 8000620:	f000 fd6a 	bl	80010f8 <HAL_RCC_OscConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800062a:	f000 f89f 	bl	800076c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062e:	230f      	movs	r3, #15
 8000630:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000634:	2300      	movs	r3, #0
 8000636:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800064c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fff4 	bl	8001640 <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800065e:	f000 f885 	bl	800076c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000662:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000666:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000668:	2300      	movs	r3, #0
 800066a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	4618      	mov	r0, r3
 8000672:	f001 f9bb 	bl	80019ec <HAL_RCCEx_PeriphCLKConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800067c:	f000 f876 	bl	800076c <Error_Handler>
  }
}
 8000680:	bf00      	nop
 8000682:	37d0      	adds	r7, #208	; 0xd0
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000694:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <MX_USART3_UART_Init+0x58>)
 8000696:	4a15      	ldr	r2, [pc, #84]	; (80006ec <MX_USART3_UART_Init+0x5c>)
 8000698:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800069a:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <MX_USART3_UART_Init+0x58>)
 800069c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006a2:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_USART3_UART_Init+0x58>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_USART3_UART_Init+0x58>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_USART3_UART_Init+0x58>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_USART3_UART_Init+0x58>)
 80006b6:	220c      	movs	r2, #12
 80006b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <MX_USART3_UART_Init+0x58>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_USART3_UART_Init+0x58>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <MX_USART3_UART_Init+0x58>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_USART3_UART_Init+0x58>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <MX_USART3_UART_Init+0x58>)
 80006d4:	f001 fd7a 	bl	80021cc <HAL_UART_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80006de:	f000 f845 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000038 	.word	0x20000038
 80006ec:	40004800 	.word	0x40004800

080006f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000706:	4b17      	ldr	r3, [pc, #92]	; (8000764 <MX_GPIO_Init+0x74>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a16      	ldr	r2, [pc, #88]	; (8000764 <MX_GPIO_Init+0x74>)
 800070c:	f043 0308 	orr.w	r3, r3, #8
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_GPIO_Init+0x74>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0308 	and.w	r3, r3, #8
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_GPIO_Init+0x74>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a10      	ldr	r2, [pc, #64]	; (8000764 <MX_GPIO_Init+0x74>)
 8000724:	f043 0302 	orr.w	r3, r3, #2
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_GPIO_Init+0x74>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0302 	and.w	r3, r3, #2
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	2180      	movs	r1, #128	; 0x80
 800073a:	480b      	ldr	r0, [pc, #44]	; (8000768 <MX_GPIO_Init+0x78>)
 800073c:	f000 fca8 	bl	8001090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000740:	2380      	movs	r3, #128	; 0x80
 8000742:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000744:	2301      	movs	r3, #1
 8000746:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074c:	2300      	movs	r3, #0
 800074e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	4619      	mov	r1, r3
 8000756:	4804      	ldr	r0, [pc, #16]	; (8000768 <MX_GPIO_Init+0x78>)
 8000758:	f000 faee 	bl	8000d38 <HAL_GPIO_Init>

}
 800075c:	bf00      	nop
 800075e:	3720      	adds	r7, #32
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40023800 	.word	0x40023800
 8000768:	40020400 	.word	0x40020400

0800076c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000770:	b672      	cpsid	i
}
 8000772:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000774:	e7fe      	b.n	8000774 <Error_Handler+0x8>
	...

08000778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <HAL_MspInit+0x44>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000782:	4a0e      	ldr	r2, [pc, #56]	; (80007bc <HAL_MspInit+0x44>)
 8000784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000788:	6413      	str	r3, [r2, #64]	; 0x40
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <HAL_MspInit+0x44>)
 800078c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <HAL_MspInit+0x44>)
 8000798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079a:	4a08      	ldr	r2, [pc, #32]	; (80007bc <HAL_MspInit+0x44>)
 800079c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a0:	6453      	str	r3, [r2, #68]	; 0x44
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <HAL_MspInit+0x44>)
 80007a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800

080007c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08a      	sub	sp, #40	; 0x28
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a1b      	ldr	r2, [pc, #108]	; (800084c <HAL_UART_MspInit+0x8c>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d130      	bne.n	8000844 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80007e2:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <HAL_UART_MspInit+0x90>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e6:	4a1a      	ldr	r2, [pc, #104]	; (8000850 <HAL_UART_MspInit+0x90>)
 80007e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007ec:	6413      	str	r3, [r2, #64]	; 0x40
 80007ee:	4b18      	ldr	r3, [pc, #96]	; (8000850 <HAL_UART_MspInit+0x90>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fa:	4b15      	ldr	r3, [pc, #84]	; (8000850 <HAL_UART_MspInit+0x90>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a14      	ldr	r2, [pc, #80]	; (8000850 <HAL_UART_MspInit+0x90>)
 8000800:	f043 0308 	orr.w	r3, r3, #8
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b12      	ldr	r3, [pc, #72]	; (8000850 <HAL_UART_MspInit+0x90>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0308 	and.w	r3, r3, #8
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000812:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000818:	2302      	movs	r3, #2
 800081a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000820:	2303      	movs	r3, #3
 8000822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000824:	2307      	movs	r3, #7
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4619      	mov	r1, r3
 800082e:	4809      	ldr	r0, [pc, #36]	; (8000854 <HAL_UART_MspInit+0x94>)
 8000830:	f000 fa82 	bl	8000d38 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000834:	2200      	movs	r2, #0
 8000836:	2100      	movs	r1, #0
 8000838:	2027      	movs	r0, #39	; 0x27
 800083a:	f000 f9b4 	bl	8000ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800083e:	2027      	movs	r0, #39	; 0x27
 8000840:	f000 f9cd 	bl	8000bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000844:	bf00      	nop
 8000846:	3728      	adds	r7, #40	; 0x28
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40004800 	.word	0x40004800
 8000850:	40023800 	.word	0x40023800
 8000854:	40020c00 	.word	0x40020c00

08000858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800085c:	e7fe      	b.n	800085c <NMI_Handler+0x4>

0800085e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <HardFault_Handler+0x4>

08000864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <MemManage_Handler+0x4>

0800086a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086e:	e7fe      	b.n	800086e <BusFault_Handler+0x4>

08000870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <UsageFault_Handler+0x4>

08000876 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a4:	f000 f884 	bl	80009b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}

080008ac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80008b0:	4802      	ldr	r0, [pc, #8]	; (80008bc <USART3_IRQHandler+0x10>)
 80008b2:	f001 fd73 	bl	800239c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000038 	.word	0x20000038

080008c0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <SystemInit+0x20>)
 80008c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ca:	4a05      	ldr	r2, [pc, #20]	; (80008e0 <SystemInit+0x20>)
 80008cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800091c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008e8:	480d      	ldr	r0, [pc, #52]	; (8000920 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008ea:	490e      	ldr	r1, [pc, #56]	; (8000924 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008ec:	4a0e      	ldr	r2, [pc, #56]	; (8000928 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f0:	e002      	b.n	80008f8 <LoopCopyDataInit>

080008f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008f6:	3304      	adds	r3, #4

080008f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008fc:	d3f9      	bcc.n	80008f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008fe:	4a0b      	ldr	r2, [pc, #44]	; (800092c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000900:	4c0b      	ldr	r4, [pc, #44]	; (8000930 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000904:	e001      	b.n	800090a <LoopFillZerobss>

08000906 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000906:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000908:	3204      	adds	r2, #4

0800090a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800090a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800090c:	d3fb      	bcc.n	8000906 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800090e:	f7ff ffd7 	bl	80008c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000912:	f002 fd21 	bl	8003358 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000916:	f7ff fe2d 	bl	8000574 <main>
  bx  lr    
 800091a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800091c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000920:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000924:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000928:	080033f0 	.word	0x080033f0
  ldr r2, =_sbss
 800092c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000930:	200000c0 	.word	0x200000c0

08000934 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000934:	e7fe      	b.n	8000934 <ADC_IRQHandler>

08000936 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800093a:	2003      	movs	r0, #3
 800093c:	f000 f928 	bl	8000b90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000940:	2000      	movs	r0, #0
 8000942:	f000 f805 	bl	8000950 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000946:	f7ff ff17 	bl	8000778 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800094a:	2300      	movs	r3, #0
}
 800094c:	4618      	mov	r0, r3
 800094e:	bd80      	pop	{r7, pc}

08000950 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <HAL_InitTick+0x54>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <HAL_InitTick+0x58>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	4619      	mov	r1, r3
 8000962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000966:	fbb3 f3f1 	udiv	r3, r3, r1
 800096a:	fbb2 f3f3 	udiv	r3, r2, r3
 800096e:	4618      	mov	r0, r3
 8000970:	f000 f943 	bl	8000bfa <HAL_SYSTICK_Config>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800097a:	2301      	movs	r3, #1
 800097c:	e00e      	b.n	800099c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2b0f      	cmp	r3, #15
 8000982:	d80a      	bhi.n	800099a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000984:	2200      	movs	r2, #0
 8000986:	6879      	ldr	r1, [r7, #4]
 8000988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800098c:	f000 f90b 	bl	8000ba6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000990:	4a06      	ldr	r2, [pc, #24]	; (80009ac <HAL_InitTick+0x5c>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000996:	2300      	movs	r3, #0
 8000998:	e000      	b.n	800099c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800099a:	2301      	movs	r3, #1
}
 800099c:	4618      	mov	r0, r3
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000000 	.word	0x20000000
 80009a8:	20000008 	.word	0x20000008
 80009ac:	20000004 	.word	0x20000004

080009b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_IncTick+0x20>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	461a      	mov	r2, r3
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <HAL_IncTick+0x24>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4413      	add	r3, r2
 80009c0:	4a04      	ldr	r2, [pc, #16]	; (80009d4 <HAL_IncTick+0x24>)
 80009c2:	6013      	str	r3, [r2, #0]
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	20000008 	.word	0x20000008
 80009d4:	200000bc 	.word	0x200000bc

080009d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  return uwTick;
 80009dc:	4b03      	ldr	r3, [pc, #12]	; (80009ec <HAL_GetTick+0x14>)
 80009de:	681b      	ldr	r3, [r3, #0]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	200000bc 	.word	0x200000bc

080009f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f003 0307 	and.w	r3, r3, #7
 80009fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a00:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <__NVIC_SetPriorityGrouping+0x40>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a06:	68ba      	ldr	r2, [r7, #8]
 8000a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <__NVIC_SetPriorityGrouping+0x44>)
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a1e:	4a04      	ldr	r2, [pc, #16]	; (8000a30 <__NVIC_SetPriorityGrouping+0x40>)
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	60d3      	str	r3, [r2, #12]
}
 8000a24:	bf00      	nop
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	e000ed00 	.word	0xe000ed00
 8000a34:	05fa0000 	.word	0x05fa0000

08000a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a3c:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <__NVIC_GetPriorityGrouping+0x18>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	0a1b      	lsrs	r3, r3, #8
 8000a42:	f003 0307 	and.w	r3, r3, #7
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	db0b      	blt.n	8000a7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	f003 021f 	and.w	r2, r3, #31
 8000a6c:	4907      	ldr	r1, [pc, #28]	; (8000a8c <__NVIC_EnableIRQ+0x38>)
 8000a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a72:	095b      	lsrs	r3, r3, #5
 8000a74:	2001      	movs	r0, #1
 8000a76:	fa00 f202 	lsl.w	r2, r0, r2
 8000a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000e100 	.word	0xe000e100

08000a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	6039      	str	r1, [r7, #0]
 8000a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	db0a      	blt.n	8000aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	490c      	ldr	r1, [pc, #48]	; (8000adc <__NVIC_SetPriority+0x4c>)
 8000aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aae:	0112      	lsls	r2, r2, #4
 8000ab0:	b2d2      	uxtb	r2, r2
 8000ab2:	440b      	add	r3, r1
 8000ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ab8:	e00a      	b.n	8000ad0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4908      	ldr	r1, [pc, #32]	; (8000ae0 <__NVIC_SetPriority+0x50>)
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	f003 030f 	and.w	r3, r3, #15
 8000ac6:	3b04      	subs	r3, #4
 8000ac8:	0112      	lsls	r2, r2, #4
 8000aca:	b2d2      	uxtb	r2, r2
 8000acc:	440b      	add	r3, r1
 8000ace:	761a      	strb	r2, [r3, #24]
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000e100 	.word	0xe000e100
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b089      	sub	sp, #36	; 0x24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	f1c3 0307 	rsb	r3, r3, #7
 8000afe:	2b04      	cmp	r3, #4
 8000b00:	bf28      	it	cs
 8000b02:	2304      	movcs	r3, #4
 8000b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	3304      	adds	r3, #4
 8000b0a:	2b06      	cmp	r3, #6
 8000b0c:	d902      	bls.n	8000b14 <NVIC_EncodePriority+0x30>
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	3b03      	subs	r3, #3
 8000b12:	e000      	b.n	8000b16 <NVIC_EncodePriority+0x32>
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	43da      	mvns	r2, r3
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	401a      	ands	r2, r3
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	fa01 f303 	lsl.w	r3, r1, r3
 8000b36:	43d9      	mvns	r1, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b3c:	4313      	orrs	r3, r2
         );
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3724      	adds	r7, #36	; 0x24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
	...

08000b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b5c:	d301      	bcc.n	8000b62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e00f      	b.n	8000b82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b62:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <SysTick_Config+0x40>)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	3b01      	subs	r3, #1
 8000b68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b6a:	210f      	movs	r1, #15
 8000b6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b70:	f7ff ff8e 	bl	8000a90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <SysTick_Config+0x40>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b7a:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <SysTick_Config+0x40>)
 8000b7c:	2207      	movs	r2, #7
 8000b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	e000e010 	.word	0xe000e010

08000b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff ff29 	bl	80009f0 <__NVIC_SetPriorityGrouping>
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b086      	sub	sp, #24
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	4603      	mov	r3, r0
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	607a      	str	r2, [r7, #4]
 8000bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb8:	f7ff ff3e 	bl	8000a38 <__NVIC_GetPriorityGrouping>
 8000bbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	68b9      	ldr	r1, [r7, #8]
 8000bc2:	6978      	ldr	r0, [r7, #20]
 8000bc4:	f7ff ff8e 	bl	8000ae4 <NVIC_EncodePriority>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bce:	4611      	mov	r1, r2
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ff5d 	bl	8000a90 <__NVIC_SetPriority>
}
 8000bd6:	bf00      	nop
 8000bd8:	3718      	adds	r7, #24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	4603      	mov	r3, r0
 8000be6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff31 	bl	8000a54 <__NVIC_EnableIRQ>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f7ff ffa2 	bl	8000b4c <SysTick_Config>
 8000c08:	4603      	mov	r3, r0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b084      	sub	sp, #16
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000c20:	f7ff feda 	bl	80009d8 <HAL_GetTick>
 8000c24:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	2b02      	cmp	r3, #2
 8000c30:	d008      	beq.n	8000c44 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2280      	movs	r2, #128	; 0x80
 8000c36:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000c40:	2301      	movs	r3, #1
 8000c42:	e052      	b.n	8000cea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f022 0216 	bic.w	r2, r2, #22
 8000c52:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	695a      	ldr	r2, [r3, #20]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c62:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d103      	bne.n	8000c74 <HAL_DMA_Abort+0x62>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d007      	beq.n	8000c84 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f022 0208 	bic.w	r2, r2, #8
 8000c82:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f022 0201 	bic.w	r2, r2, #1
 8000c92:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c94:	e013      	b.n	8000cbe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000c96:	f7ff fe9f 	bl	80009d8 <HAL_GetTick>
 8000c9a:	4602      	mov	r2, r0
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	1ad3      	subs	r3, r2, r3
 8000ca0:	2b05      	cmp	r3, #5
 8000ca2:	d90c      	bls.n	8000cbe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2220      	movs	r2, #32
 8000ca8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2200      	movs	r2, #0
 8000cae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2203      	movs	r2, #3
 8000cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	e015      	b.n	8000cea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f003 0301 	and.w	r3, r3, #1
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d1e4      	bne.n	8000c96 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cd0:	223f      	movs	r2, #63	; 0x3f
 8000cd2:	409a      	lsls	r2, r3
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	b083      	sub	sp, #12
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	d004      	beq.n	8000d10 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2280      	movs	r2, #128	; 0x80
 8000d0a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	e00c      	b.n	8000d2a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2205      	movs	r2, #5
 8000d14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f022 0201 	bic.w	r2, r2, #1
 8000d26:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
	...

08000d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b089      	sub	sp, #36	; 0x24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
 8000d56:	e175      	b.n	8001044 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000d58:	2201      	movs	r2, #1
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	697a      	ldr	r2, [r7, #20]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	f040 8164 	bne.w	800103e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d00b      	beq.n	8000d96 <HAL_GPIO_Init+0x5e>
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d007      	beq.n	8000d96 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d8a:	2b11      	cmp	r3, #17
 8000d8c:	d003      	beq.n	8000d96 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	2b12      	cmp	r3, #18
 8000d94:	d130      	bne.n	8000df8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	2203      	movs	r2, #3
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43db      	mvns	r3, r3
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	4013      	ands	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	68da      	ldr	r2, [r3, #12]
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dcc:	2201      	movs	r2, #1
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	091b      	lsrs	r3, r3, #4
 8000de2:	f003 0201 	and.w	r2, r3, #1
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	2203      	movs	r2, #3
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	689a      	ldr	r2, [r3, #8]
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d003      	beq.n	8000e38 <HAL_GPIO_Init+0x100>
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	2b12      	cmp	r3, #18
 8000e36:	d123      	bne.n	8000e80 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	08da      	lsrs	r2, r3, #3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3208      	adds	r2, #8
 8000e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	f003 0307 	and.w	r3, r3, #7
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	220f      	movs	r2, #15
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	691a      	ldr	r2, [r3, #16]
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	08da      	lsrs	r2, r3, #3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	3208      	adds	r2, #8
 8000e7a:	69b9      	ldr	r1, [r7, #24]
 8000e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 0203 	and.w	r2, r3, #3
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	f000 80be 	beq.w	800103e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec2:	4b66      	ldr	r3, [pc, #408]	; (800105c <HAL_GPIO_Init+0x324>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec6:	4a65      	ldr	r2, [pc, #404]	; (800105c <HAL_GPIO_Init+0x324>)
 8000ec8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ece:	4b63      	ldr	r3, [pc, #396]	; (800105c <HAL_GPIO_Init+0x324>)
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000eda:	4a61      	ldr	r2, [pc, #388]	; (8001060 <HAL_GPIO_Init+0x328>)
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	089b      	lsrs	r3, r3, #2
 8000ee0:	3302      	adds	r3, #2
 8000ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	f003 0303 	and.w	r3, r3, #3
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	220f      	movs	r2, #15
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4013      	ands	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a58      	ldr	r2, [pc, #352]	; (8001064 <HAL_GPIO_Init+0x32c>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d037      	beq.n	8000f76 <HAL_GPIO_Init+0x23e>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a57      	ldr	r2, [pc, #348]	; (8001068 <HAL_GPIO_Init+0x330>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d031      	beq.n	8000f72 <HAL_GPIO_Init+0x23a>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a56      	ldr	r2, [pc, #344]	; (800106c <HAL_GPIO_Init+0x334>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d02b      	beq.n	8000f6e <HAL_GPIO_Init+0x236>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a55      	ldr	r2, [pc, #340]	; (8001070 <HAL_GPIO_Init+0x338>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d025      	beq.n	8000f6a <HAL_GPIO_Init+0x232>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a54      	ldr	r2, [pc, #336]	; (8001074 <HAL_GPIO_Init+0x33c>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d01f      	beq.n	8000f66 <HAL_GPIO_Init+0x22e>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a53      	ldr	r2, [pc, #332]	; (8001078 <HAL_GPIO_Init+0x340>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d019      	beq.n	8000f62 <HAL_GPIO_Init+0x22a>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a52      	ldr	r2, [pc, #328]	; (800107c <HAL_GPIO_Init+0x344>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d013      	beq.n	8000f5e <HAL_GPIO_Init+0x226>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a51      	ldr	r2, [pc, #324]	; (8001080 <HAL_GPIO_Init+0x348>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d00d      	beq.n	8000f5a <HAL_GPIO_Init+0x222>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a50      	ldr	r2, [pc, #320]	; (8001084 <HAL_GPIO_Init+0x34c>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d007      	beq.n	8000f56 <HAL_GPIO_Init+0x21e>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a4f      	ldr	r2, [pc, #316]	; (8001088 <HAL_GPIO_Init+0x350>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d101      	bne.n	8000f52 <HAL_GPIO_Init+0x21a>
 8000f4e:	2309      	movs	r3, #9
 8000f50:	e012      	b.n	8000f78 <HAL_GPIO_Init+0x240>
 8000f52:	230a      	movs	r3, #10
 8000f54:	e010      	b.n	8000f78 <HAL_GPIO_Init+0x240>
 8000f56:	2308      	movs	r3, #8
 8000f58:	e00e      	b.n	8000f78 <HAL_GPIO_Init+0x240>
 8000f5a:	2307      	movs	r3, #7
 8000f5c:	e00c      	b.n	8000f78 <HAL_GPIO_Init+0x240>
 8000f5e:	2306      	movs	r3, #6
 8000f60:	e00a      	b.n	8000f78 <HAL_GPIO_Init+0x240>
 8000f62:	2305      	movs	r3, #5
 8000f64:	e008      	b.n	8000f78 <HAL_GPIO_Init+0x240>
 8000f66:	2304      	movs	r3, #4
 8000f68:	e006      	b.n	8000f78 <HAL_GPIO_Init+0x240>
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e004      	b.n	8000f78 <HAL_GPIO_Init+0x240>
 8000f6e:	2302      	movs	r3, #2
 8000f70:	e002      	b.n	8000f78 <HAL_GPIO_Init+0x240>
 8000f72:	2301      	movs	r3, #1
 8000f74:	e000      	b.n	8000f78 <HAL_GPIO_Init+0x240>
 8000f76:	2300      	movs	r3, #0
 8000f78:	69fa      	ldr	r2, [r7, #28]
 8000f7a:	f002 0203 	and.w	r2, r2, #3
 8000f7e:	0092      	lsls	r2, r2, #2
 8000f80:	4093      	lsls	r3, r2
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f88:	4935      	ldr	r1, [pc, #212]	; (8001060 <HAL_GPIO_Init+0x328>)
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	089b      	lsrs	r3, r3, #2
 8000f8e:	3302      	adds	r3, #2
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f96:	4b3d      	ldr	r3, [pc, #244]	; (800108c <HAL_GPIO_Init+0x354>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d003      	beq.n	8000fba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fba:	4a34      	ldr	r2, [pc, #208]	; (800108c <HAL_GPIO_Init+0x354>)
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fc0:	4b32      	ldr	r3, [pc, #200]	; (800108c <HAL_GPIO_Init+0x354>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d003      	beq.n	8000fe4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fe4:	4a29      	ldr	r2, [pc, #164]	; (800108c <HAL_GPIO_Init+0x354>)
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fea:	4b28      	ldr	r3, [pc, #160]	; (800108c <HAL_GPIO_Init+0x354>)
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800100e:	4a1f      	ldr	r2, [pc, #124]	; (800108c <HAL_GPIO_Init+0x354>)
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001014:	4b1d      	ldr	r3, [pc, #116]	; (800108c <HAL_GPIO_Init+0x354>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d003      	beq.n	8001038 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	4313      	orrs	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001038:	4a14      	ldr	r2, [pc, #80]	; (800108c <HAL_GPIO_Init+0x354>)
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3301      	adds	r3, #1
 8001042:	61fb      	str	r3, [r7, #28]
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	2b0f      	cmp	r3, #15
 8001048:	f67f ae86 	bls.w	8000d58 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800104c:	bf00      	nop
 800104e:	bf00      	nop
 8001050:	3724      	adds	r7, #36	; 0x24
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	40023800 	.word	0x40023800
 8001060:	40013800 	.word	0x40013800
 8001064:	40020000 	.word	0x40020000
 8001068:	40020400 	.word	0x40020400
 800106c:	40020800 	.word	0x40020800
 8001070:	40020c00 	.word	0x40020c00
 8001074:	40021000 	.word	0x40021000
 8001078:	40021400 	.word	0x40021400
 800107c:	40021800 	.word	0x40021800
 8001080:	40021c00 	.word	0x40021c00
 8001084:	40022000 	.word	0x40022000
 8001088:	40022400 	.word	0x40022400
 800108c:	40013c00 	.word	0x40013c00

08001090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	807b      	strh	r3, [r7, #2]
 800109c:	4613      	mov	r3, r2
 800109e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010a0:	787b      	ldrb	r3, [r7, #1]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010a6:	887a      	ldrh	r2, [r7, #2]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80010ac:	e003      	b.n	80010b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80010ae:	887b      	ldrh	r3, [r7, #2]
 80010b0:	041a      	lsls	r2, r3, #16
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	619a      	str	r2, [r3, #24]
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b085      	sub	sp, #20
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
 80010ca:	460b      	mov	r3, r1
 80010cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010d4:	887a      	ldrh	r2, [r7, #2]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	4013      	ands	r3, r2
 80010da:	041a      	lsls	r2, r3, #16
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	43d9      	mvns	r1, r3
 80010e0:	887b      	ldrh	r3, [r7, #2]
 80010e2:	400b      	ands	r3, r1
 80010e4:	431a      	orrs	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	619a      	str	r2, [r3, #24]
}
 80010ea:	bf00      	nop
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
	...

080010f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001100:	2300      	movs	r3, #0
 8001102:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e291      	b.n	8001632 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	2b00      	cmp	r3, #0
 8001118:	f000 8087 	beq.w	800122a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800111c:	4b96      	ldr	r3, [pc, #600]	; (8001378 <HAL_RCC_OscConfig+0x280>)
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	f003 030c 	and.w	r3, r3, #12
 8001124:	2b04      	cmp	r3, #4
 8001126:	d00c      	beq.n	8001142 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001128:	4b93      	ldr	r3, [pc, #588]	; (8001378 <HAL_RCC_OscConfig+0x280>)
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	f003 030c 	and.w	r3, r3, #12
 8001130:	2b08      	cmp	r3, #8
 8001132:	d112      	bne.n	800115a <HAL_RCC_OscConfig+0x62>
 8001134:	4b90      	ldr	r3, [pc, #576]	; (8001378 <HAL_RCC_OscConfig+0x280>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800113c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001140:	d10b      	bne.n	800115a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001142:	4b8d      	ldr	r3, [pc, #564]	; (8001378 <HAL_RCC_OscConfig+0x280>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d06c      	beq.n	8001228 <HAL_RCC_OscConfig+0x130>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d168      	bne.n	8001228 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e26b      	b.n	8001632 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001162:	d106      	bne.n	8001172 <HAL_RCC_OscConfig+0x7a>
 8001164:	4b84      	ldr	r3, [pc, #528]	; (8001378 <HAL_RCC_OscConfig+0x280>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a83      	ldr	r2, [pc, #524]	; (8001378 <HAL_RCC_OscConfig+0x280>)
 800116a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800116e:	6013      	str	r3, [r2, #0]
 8001170:	e02e      	b.n	80011d0 <HAL_RCC_OscConfig+0xd8>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d10c      	bne.n	8001194 <HAL_RCC_OscConfig+0x9c>
 800117a:	4b7f      	ldr	r3, [pc, #508]	; (8001378 <HAL_RCC_OscConfig+0x280>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a7e      	ldr	r2, [pc, #504]	; (8001378 <HAL_RCC_OscConfig+0x280>)
 8001180:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	4b7c      	ldr	r3, [pc, #496]	; (8001378 <HAL_RCC_OscConfig+0x280>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a7b      	ldr	r2, [pc, #492]	; (8001378 <HAL_RCC_OscConfig+0x280>)
 800118c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	e01d      	b.n	80011d0 <HAL_RCC_OscConfig+0xd8>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800119c:	d10c      	bne.n	80011b8 <HAL_RCC_OscConfig+0xc0>
 800119e:	4b76      	ldr	r3, [pc, #472]	; (8001378 <HAL_RCC_OscConfig+0x280>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a75      	ldr	r2, [pc, #468]	; (8001378 <HAL_RCC_OscConfig+0x280>)
 80011a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a8:	6013      	str	r3, [r2, #0]
 80011aa:	4b73      	ldr	r3, [pc, #460]	; (8001378 <HAL_RCC_OscConfig+0x280>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a72      	ldr	r2, [pc, #456]	; (8001378 <HAL_RCC_OscConfig+0x280>)
 80011b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	e00b      	b.n	80011d0 <HAL_RCC_OscConfig+0xd8>
 80011b8:	4b6f      	ldr	r3, [pc, #444]	; (8001378 <HAL_RCC_OscConfig+0x280>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a6e      	ldr	r2, [pc, #440]	; (8001378 <HAL_RCC_OscConfig+0x280>)
 80011be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011c2:	6013      	str	r3, [r2, #0]
 80011c4:	4b6c      	ldr	r3, [pc, #432]	; (8001378 <HAL_RCC_OscConfig+0x280>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a6b      	ldr	r2, [pc, #428]	; (8001378 <HAL_RCC_OscConfig+0x280>)
 80011ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d013      	beq.n	8001200 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d8:	f7ff fbfe 	bl	80009d8 <HAL_GetTick>
 80011dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011de:	e008      	b.n	80011f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011e0:	f7ff fbfa 	bl	80009d8 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b64      	cmp	r3, #100	; 0x64
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e21f      	b.n	8001632 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f2:	4b61      	ldr	r3, [pc, #388]	; (8001378 <HAL_RCC_OscConfig+0x280>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d0f0      	beq.n	80011e0 <HAL_RCC_OscConfig+0xe8>
 80011fe:	e014      	b.n	800122a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001200:	f7ff fbea 	bl	80009d8 <HAL_GetTick>
 8001204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001206:	e008      	b.n	800121a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001208:	f7ff fbe6 	bl	80009d8 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b64      	cmp	r3, #100	; 0x64
 8001214:	d901      	bls.n	800121a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e20b      	b.n	8001632 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800121a:	4b57      	ldr	r3, [pc, #348]	; (8001378 <HAL_RCC_OscConfig+0x280>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d1f0      	bne.n	8001208 <HAL_RCC_OscConfig+0x110>
 8001226:	e000      	b.n	800122a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001228:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d069      	beq.n	800130a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001236:	4b50      	ldr	r3, [pc, #320]	; (8001378 <HAL_RCC_OscConfig+0x280>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f003 030c 	and.w	r3, r3, #12
 800123e:	2b00      	cmp	r3, #0
 8001240:	d00b      	beq.n	800125a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001242:	4b4d      	ldr	r3, [pc, #308]	; (8001378 <HAL_RCC_OscConfig+0x280>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f003 030c 	and.w	r3, r3, #12
 800124a:	2b08      	cmp	r3, #8
 800124c:	d11c      	bne.n	8001288 <HAL_RCC_OscConfig+0x190>
 800124e:	4b4a      	ldr	r3, [pc, #296]	; (8001378 <HAL_RCC_OscConfig+0x280>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d116      	bne.n	8001288 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800125a:	4b47      	ldr	r3, [pc, #284]	; (8001378 <HAL_RCC_OscConfig+0x280>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d005      	beq.n	8001272 <HAL_RCC_OscConfig+0x17a>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d001      	beq.n	8001272 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e1df      	b.n	8001632 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001272:	4b41      	ldr	r3, [pc, #260]	; (8001378 <HAL_RCC_OscConfig+0x280>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	691b      	ldr	r3, [r3, #16]
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	493d      	ldr	r1, [pc, #244]	; (8001378 <HAL_RCC_OscConfig+0x280>)
 8001282:	4313      	orrs	r3, r2
 8001284:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001286:	e040      	b.n	800130a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d023      	beq.n	80012d8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001290:	4b39      	ldr	r3, [pc, #228]	; (8001378 <HAL_RCC_OscConfig+0x280>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a38      	ldr	r2, [pc, #224]	; (8001378 <HAL_RCC_OscConfig+0x280>)
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800129c:	f7ff fb9c 	bl	80009d8 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012a4:	f7ff fb98 	bl	80009d8 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e1bd      	b.n	8001632 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b6:	4b30      	ldr	r3, [pc, #192]	; (8001378 <HAL_RCC_OscConfig+0x280>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0f0      	beq.n	80012a4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c2:	4b2d      	ldr	r3, [pc, #180]	; (8001378 <HAL_RCC_OscConfig+0x280>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	4929      	ldr	r1, [pc, #164]	; (8001378 <HAL_RCC_OscConfig+0x280>)
 80012d2:	4313      	orrs	r3, r2
 80012d4:	600b      	str	r3, [r1, #0]
 80012d6:	e018      	b.n	800130a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012d8:	4b27      	ldr	r3, [pc, #156]	; (8001378 <HAL_RCC_OscConfig+0x280>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a26      	ldr	r2, [pc, #152]	; (8001378 <HAL_RCC_OscConfig+0x280>)
 80012de:	f023 0301 	bic.w	r3, r3, #1
 80012e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e4:	f7ff fb78 	bl	80009d8 <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ec:	f7ff fb74 	bl	80009d8 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e199      	b.n	8001632 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012fe:	4b1e      	ldr	r3, [pc, #120]	; (8001378 <HAL_RCC_OscConfig+0x280>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1f0      	bne.n	80012ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0308 	and.w	r3, r3, #8
 8001312:	2b00      	cmp	r3, #0
 8001314:	d038      	beq.n	8001388 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d019      	beq.n	8001352 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800131e:	4b16      	ldr	r3, [pc, #88]	; (8001378 <HAL_RCC_OscConfig+0x280>)
 8001320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001322:	4a15      	ldr	r2, [pc, #84]	; (8001378 <HAL_RCC_OscConfig+0x280>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800132a:	f7ff fb55 	bl	80009d8 <HAL_GetTick>
 800132e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001330:	e008      	b.n	8001344 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001332:	f7ff fb51 	bl	80009d8 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e176      	b.n	8001632 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <HAL_RCC_OscConfig+0x280>)
 8001346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	2b00      	cmp	r3, #0
 800134e:	d0f0      	beq.n	8001332 <HAL_RCC_OscConfig+0x23a>
 8001350:	e01a      	b.n	8001388 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <HAL_RCC_OscConfig+0x280>)
 8001354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001356:	4a08      	ldr	r2, [pc, #32]	; (8001378 <HAL_RCC_OscConfig+0x280>)
 8001358:	f023 0301 	bic.w	r3, r3, #1
 800135c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800135e:	f7ff fb3b 	bl	80009d8 <HAL_GetTick>
 8001362:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001364:	e00a      	b.n	800137c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001366:	f7ff fb37 	bl	80009d8 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d903      	bls.n	800137c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e15c      	b.n	8001632 <HAL_RCC_OscConfig+0x53a>
 8001378:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800137c:	4b91      	ldr	r3, [pc, #580]	; (80015c4 <HAL_RCC_OscConfig+0x4cc>)
 800137e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d1ee      	bne.n	8001366 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0304 	and.w	r3, r3, #4
 8001390:	2b00      	cmp	r3, #0
 8001392:	f000 80a4 	beq.w	80014de <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001396:	4b8b      	ldr	r3, [pc, #556]	; (80015c4 <HAL_RCC_OscConfig+0x4cc>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d10d      	bne.n	80013be <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80013a2:	4b88      	ldr	r3, [pc, #544]	; (80015c4 <HAL_RCC_OscConfig+0x4cc>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	4a87      	ldr	r2, [pc, #540]	; (80015c4 <HAL_RCC_OscConfig+0x4cc>)
 80013a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ac:	6413      	str	r3, [r2, #64]	; 0x40
 80013ae:	4b85      	ldr	r3, [pc, #532]	; (80015c4 <HAL_RCC_OscConfig+0x4cc>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013ba:	2301      	movs	r3, #1
 80013bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013be:	4b82      	ldr	r3, [pc, #520]	; (80015c8 <HAL_RCC_OscConfig+0x4d0>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d118      	bne.n	80013fc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80013ca:	4b7f      	ldr	r3, [pc, #508]	; (80015c8 <HAL_RCC_OscConfig+0x4d0>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a7e      	ldr	r2, [pc, #504]	; (80015c8 <HAL_RCC_OscConfig+0x4d0>)
 80013d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013d6:	f7ff faff 	bl	80009d8 <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013de:	f7ff fafb 	bl	80009d8 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b64      	cmp	r3, #100	; 0x64
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e120      	b.n	8001632 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013f0:	4b75      	ldr	r3, [pc, #468]	; (80015c8 <HAL_RCC_OscConfig+0x4d0>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d0f0      	beq.n	80013de <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d106      	bne.n	8001412 <HAL_RCC_OscConfig+0x31a>
 8001404:	4b6f      	ldr	r3, [pc, #444]	; (80015c4 <HAL_RCC_OscConfig+0x4cc>)
 8001406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001408:	4a6e      	ldr	r2, [pc, #440]	; (80015c4 <HAL_RCC_OscConfig+0x4cc>)
 800140a:	f043 0301 	orr.w	r3, r3, #1
 800140e:	6713      	str	r3, [r2, #112]	; 0x70
 8001410:	e02d      	b.n	800146e <HAL_RCC_OscConfig+0x376>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d10c      	bne.n	8001434 <HAL_RCC_OscConfig+0x33c>
 800141a:	4b6a      	ldr	r3, [pc, #424]	; (80015c4 <HAL_RCC_OscConfig+0x4cc>)
 800141c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800141e:	4a69      	ldr	r2, [pc, #420]	; (80015c4 <HAL_RCC_OscConfig+0x4cc>)
 8001420:	f023 0301 	bic.w	r3, r3, #1
 8001424:	6713      	str	r3, [r2, #112]	; 0x70
 8001426:	4b67      	ldr	r3, [pc, #412]	; (80015c4 <HAL_RCC_OscConfig+0x4cc>)
 8001428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800142a:	4a66      	ldr	r2, [pc, #408]	; (80015c4 <HAL_RCC_OscConfig+0x4cc>)
 800142c:	f023 0304 	bic.w	r3, r3, #4
 8001430:	6713      	str	r3, [r2, #112]	; 0x70
 8001432:	e01c      	b.n	800146e <HAL_RCC_OscConfig+0x376>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	2b05      	cmp	r3, #5
 800143a:	d10c      	bne.n	8001456 <HAL_RCC_OscConfig+0x35e>
 800143c:	4b61      	ldr	r3, [pc, #388]	; (80015c4 <HAL_RCC_OscConfig+0x4cc>)
 800143e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001440:	4a60      	ldr	r2, [pc, #384]	; (80015c4 <HAL_RCC_OscConfig+0x4cc>)
 8001442:	f043 0304 	orr.w	r3, r3, #4
 8001446:	6713      	str	r3, [r2, #112]	; 0x70
 8001448:	4b5e      	ldr	r3, [pc, #376]	; (80015c4 <HAL_RCC_OscConfig+0x4cc>)
 800144a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800144c:	4a5d      	ldr	r2, [pc, #372]	; (80015c4 <HAL_RCC_OscConfig+0x4cc>)
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	6713      	str	r3, [r2, #112]	; 0x70
 8001454:	e00b      	b.n	800146e <HAL_RCC_OscConfig+0x376>
 8001456:	4b5b      	ldr	r3, [pc, #364]	; (80015c4 <HAL_RCC_OscConfig+0x4cc>)
 8001458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800145a:	4a5a      	ldr	r2, [pc, #360]	; (80015c4 <HAL_RCC_OscConfig+0x4cc>)
 800145c:	f023 0301 	bic.w	r3, r3, #1
 8001460:	6713      	str	r3, [r2, #112]	; 0x70
 8001462:	4b58      	ldr	r3, [pc, #352]	; (80015c4 <HAL_RCC_OscConfig+0x4cc>)
 8001464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001466:	4a57      	ldr	r2, [pc, #348]	; (80015c4 <HAL_RCC_OscConfig+0x4cc>)
 8001468:	f023 0304 	bic.w	r3, r3, #4
 800146c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d015      	beq.n	80014a2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001476:	f7ff faaf 	bl	80009d8 <HAL_GetTick>
 800147a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800147c:	e00a      	b.n	8001494 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800147e:	f7ff faab 	bl	80009d8 <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	f241 3288 	movw	r2, #5000	; 0x1388
 800148c:	4293      	cmp	r3, r2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e0ce      	b.n	8001632 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001494:	4b4b      	ldr	r3, [pc, #300]	; (80015c4 <HAL_RCC_OscConfig+0x4cc>)
 8001496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0ee      	beq.n	800147e <HAL_RCC_OscConfig+0x386>
 80014a0:	e014      	b.n	80014cc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a2:	f7ff fa99 	bl	80009d8 <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014a8:	e00a      	b.n	80014c0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014aa:	f7ff fa95 	bl	80009d8 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e0b8      	b.n	8001632 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014c0:	4b40      	ldr	r3, [pc, #256]	; (80015c4 <HAL_RCC_OscConfig+0x4cc>)
 80014c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1ee      	bne.n	80014aa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80014cc:	7dfb      	ldrb	r3, [r7, #23]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d105      	bne.n	80014de <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014d2:	4b3c      	ldr	r3, [pc, #240]	; (80015c4 <HAL_RCC_OscConfig+0x4cc>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	4a3b      	ldr	r2, [pc, #236]	; (80015c4 <HAL_RCC_OscConfig+0x4cc>)
 80014d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f000 80a4 	beq.w	8001630 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014e8:	4b36      	ldr	r3, [pc, #216]	; (80015c4 <HAL_RCC_OscConfig+0x4cc>)
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f003 030c 	and.w	r3, r3, #12
 80014f0:	2b08      	cmp	r3, #8
 80014f2:	d06b      	beq.n	80015cc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d149      	bne.n	8001590 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014fc:	4b31      	ldr	r3, [pc, #196]	; (80015c4 <HAL_RCC_OscConfig+0x4cc>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a30      	ldr	r2, [pc, #192]	; (80015c4 <HAL_RCC_OscConfig+0x4cc>)
 8001502:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001506:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001508:	f7ff fa66 	bl	80009d8 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001510:	f7ff fa62 	bl	80009d8 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e087      	b.n	8001632 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001522:	4b28      	ldr	r3, [pc, #160]	; (80015c4 <HAL_RCC_OscConfig+0x4cc>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1f0      	bne.n	8001510 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69da      	ldr	r2, [r3, #28]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a1b      	ldr	r3, [r3, #32]
 8001536:	431a      	orrs	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153c:	019b      	lsls	r3, r3, #6
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001544:	085b      	lsrs	r3, r3, #1
 8001546:	3b01      	subs	r3, #1
 8001548:	041b      	lsls	r3, r3, #16
 800154a:	431a      	orrs	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001550:	061b      	lsls	r3, r3, #24
 8001552:	4313      	orrs	r3, r2
 8001554:	4a1b      	ldr	r2, [pc, #108]	; (80015c4 <HAL_RCC_OscConfig+0x4cc>)
 8001556:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800155a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800155c:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <HAL_RCC_OscConfig+0x4cc>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a18      	ldr	r2, [pc, #96]	; (80015c4 <HAL_RCC_OscConfig+0x4cc>)
 8001562:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001566:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001568:	f7ff fa36 	bl	80009d8 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001570:	f7ff fa32 	bl	80009d8 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e057      	b.n	8001632 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001582:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <HAL_RCC_OscConfig+0x4cc>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d0f0      	beq.n	8001570 <HAL_RCC_OscConfig+0x478>
 800158e:	e04f      	b.n	8001630 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001590:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <HAL_RCC_OscConfig+0x4cc>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a0b      	ldr	r2, [pc, #44]	; (80015c4 <HAL_RCC_OscConfig+0x4cc>)
 8001596:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800159a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159c:	f7ff fa1c 	bl	80009d8 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015a4:	f7ff fa18 	bl	80009d8 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e03d      	b.n	8001632 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b6:	4b03      	ldr	r3, [pc, #12]	; (80015c4 <HAL_RCC_OscConfig+0x4cc>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1f0      	bne.n	80015a4 <HAL_RCC_OscConfig+0x4ac>
 80015c2:	e035      	b.n	8001630 <HAL_RCC_OscConfig+0x538>
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80015cc:	4b1b      	ldr	r3, [pc, #108]	; (800163c <HAL_RCC_OscConfig+0x544>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d028      	beq.n	800162c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d121      	bne.n	800162c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d11a      	bne.n	800162c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015fc:	4013      	ands	r3, r2
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001602:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001604:	4293      	cmp	r3, r2
 8001606:	d111      	bne.n	800162c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001612:	085b      	lsrs	r3, r3, #1
 8001614:	3b01      	subs	r3, #1
 8001616:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001618:	429a      	cmp	r2, r3
 800161a:	d107      	bne.n	800162c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001626:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001628:	429a      	cmp	r2, r3
 800162a:	d001      	beq.n	8001630 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e000      	b.n	8001632 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40023800 	.word	0x40023800

08001640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e0d0      	b.n	80017fa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001658:	4b6a      	ldr	r3, [pc, #424]	; (8001804 <HAL_RCC_ClockConfig+0x1c4>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 030f 	and.w	r3, r3, #15
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	429a      	cmp	r2, r3
 8001664:	d910      	bls.n	8001688 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001666:	4b67      	ldr	r3, [pc, #412]	; (8001804 <HAL_RCC_ClockConfig+0x1c4>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f023 020f 	bic.w	r2, r3, #15
 800166e:	4965      	ldr	r1, [pc, #404]	; (8001804 <HAL_RCC_ClockConfig+0x1c4>)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	4313      	orrs	r3, r2
 8001674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001676:	4b63      	ldr	r3, [pc, #396]	; (8001804 <HAL_RCC_ClockConfig+0x1c4>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 030f 	and.w	r3, r3, #15
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	429a      	cmp	r2, r3
 8001682:	d001      	beq.n	8001688 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e0b8      	b.n	80017fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d020      	beq.n	80016d6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	2b00      	cmp	r3, #0
 800169e:	d005      	beq.n	80016ac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016a0:	4b59      	ldr	r3, [pc, #356]	; (8001808 <HAL_RCC_ClockConfig+0x1c8>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	4a58      	ldr	r2, [pc, #352]	; (8001808 <HAL_RCC_ClockConfig+0x1c8>)
 80016a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0308 	and.w	r3, r3, #8
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d005      	beq.n	80016c4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016b8:	4b53      	ldr	r3, [pc, #332]	; (8001808 <HAL_RCC_ClockConfig+0x1c8>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	4a52      	ldr	r2, [pc, #328]	; (8001808 <HAL_RCC_ClockConfig+0x1c8>)
 80016be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016c4:	4b50      	ldr	r3, [pc, #320]	; (8001808 <HAL_RCC_ClockConfig+0x1c8>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	494d      	ldr	r1, [pc, #308]	; (8001808 <HAL_RCC_ClockConfig+0x1c8>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d040      	beq.n	8001764 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d107      	bne.n	80016fa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ea:	4b47      	ldr	r3, [pc, #284]	; (8001808 <HAL_RCC_ClockConfig+0x1c8>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d115      	bne.n	8001722 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e07f      	b.n	80017fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d107      	bne.n	8001712 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001702:	4b41      	ldr	r3, [pc, #260]	; (8001808 <HAL_RCC_ClockConfig+0x1c8>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d109      	bne.n	8001722 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e073      	b.n	80017fa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001712:	4b3d      	ldr	r3, [pc, #244]	; (8001808 <HAL_RCC_ClockConfig+0x1c8>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e06b      	b.n	80017fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001722:	4b39      	ldr	r3, [pc, #228]	; (8001808 <HAL_RCC_ClockConfig+0x1c8>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f023 0203 	bic.w	r2, r3, #3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	4936      	ldr	r1, [pc, #216]	; (8001808 <HAL_RCC_ClockConfig+0x1c8>)
 8001730:	4313      	orrs	r3, r2
 8001732:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001734:	f7ff f950 	bl	80009d8 <HAL_GetTick>
 8001738:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800173a:	e00a      	b.n	8001752 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800173c:	f7ff f94c 	bl	80009d8 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	f241 3288 	movw	r2, #5000	; 0x1388
 800174a:	4293      	cmp	r3, r2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e053      	b.n	80017fa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001752:	4b2d      	ldr	r3, [pc, #180]	; (8001808 <HAL_RCC_ClockConfig+0x1c8>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 020c 	and.w	r2, r3, #12
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	429a      	cmp	r2, r3
 8001762:	d1eb      	bne.n	800173c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001764:	4b27      	ldr	r3, [pc, #156]	; (8001804 <HAL_RCC_ClockConfig+0x1c4>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 030f 	and.w	r3, r3, #15
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	429a      	cmp	r2, r3
 8001770:	d210      	bcs.n	8001794 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001772:	4b24      	ldr	r3, [pc, #144]	; (8001804 <HAL_RCC_ClockConfig+0x1c4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f023 020f 	bic.w	r2, r3, #15
 800177a:	4922      	ldr	r1, [pc, #136]	; (8001804 <HAL_RCC_ClockConfig+0x1c4>)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	4313      	orrs	r3, r2
 8001780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001782:	4b20      	ldr	r3, [pc, #128]	; (8001804 <HAL_RCC_ClockConfig+0x1c4>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	683a      	ldr	r2, [r7, #0]
 800178c:	429a      	cmp	r2, r3
 800178e:	d001      	beq.n	8001794 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e032      	b.n	80017fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	2b00      	cmp	r3, #0
 800179e:	d008      	beq.n	80017b2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017a0:	4b19      	ldr	r3, [pc, #100]	; (8001808 <HAL_RCC_ClockConfig+0x1c8>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	4916      	ldr	r1, [pc, #88]	; (8001808 <HAL_RCC_ClockConfig+0x1c8>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0308 	and.w	r3, r3, #8
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d009      	beq.n	80017d2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017be:	4b12      	ldr	r3, [pc, #72]	; (8001808 <HAL_RCC_ClockConfig+0x1c8>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	490e      	ldr	r1, [pc, #56]	; (8001808 <HAL_RCC_ClockConfig+0x1c8>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017d2:	f000 f821 	bl	8001818 <HAL_RCC_GetSysClockFreq>
 80017d6:	4602      	mov	r2, r0
 80017d8:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <HAL_RCC_ClockConfig+0x1c8>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	091b      	lsrs	r3, r3, #4
 80017de:	f003 030f 	and.w	r3, r3, #15
 80017e2:	490a      	ldr	r1, [pc, #40]	; (800180c <HAL_RCC_ClockConfig+0x1cc>)
 80017e4:	5ccb      	ldrb	r3, [r1, r3]
 80017e6:	fa22 f303 	lsr.w	r3, r2, r3
 80017ea:	4a09      	ldr	r2, [pc, #36]	; (8001810 <HAL_RCC_ClockConfig+0x1d0>)
 80017ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017ee:	4b09      	ldr	r3, [pc, #36]	; (8001814 <HAL_RCC_ClockConfig+0x1d4>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff f8ac 	bl	8000950 <HAL_InitTick>

  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40023c00 	.word	0x40023c00
 8001808:	40023800 	.word	0x40023800
 800180c:	080033c8 	.word	0x080033c8
 8001810:	20000000 	.word	0x20000000
 8001814:	20000004 	.word	0x20000004

08001818 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001818:	b5b0      	push	{r4, r5, r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800181e:	2100      	movs	r1, #0
 8001820:	6079      	str	r1, [r7, #4]
 8001822:	2100      	movs	r1, #0
 8001824:	60f9      	str	r1, [r7, #12]
 8001826:	2100      	movs	r1, #0
 8001828:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800182a:	2100      	movs	r1, #0
 800182c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800182e:	4952      	ldr	r1, [pc, #328]	; (8001978 <HAL_RCC_GetSysClockFreq+0x160>)
 8001830:	6889      	ldr	r1, [r1, #8]
 8001832:	f001 010c 	and.w	r1, r1, #12
 8001836:	2908      	cmp	r1, #8
 8001838:	d00d      	beq.n	8001856 <HAL_RCC_GetSysClockFreq+0x3e>
 800183a:	2908      	cmp	r1, #8
 800183c:	f200 8094 	bhi.w	8001968 <HAL_RCC_GetSysClockFreq+0x150>
 8001840:	2900      	cmp	r1, #0
 8001842:	d002      	beq.n	800184a <HAL_RCC_GetSysClockFreq+0x32>
 8001844:	2904      	cmp	r1, #4
 8001846:	d003      	beq.n	8001850 <HAL_RCC_GetSysClockFreq+0x38>
 8001848:	e08e      	b.n	8001968 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800184a:	4b4c      	ldr	r3, [pc, #304]	; (800197c <HAL_RCC_GetSysClockFreq+0x164>)
 800184c:	60bb      	str	r3, [r7, #8]
      break;
 800184e:	e08e      	b.n	800196e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001850:	4b4b      	ldr	r3, [pc, #300]	; (8001980 <HAL_RCC_GetSysClockFreq+0x168>)
 8001852:	60bb      	str	r3, [r7, #8]
      break;
 8001854:	e08b      	b.n	800196e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001856:	4948      	ldr	r1, [pc, #288]	; (8001978 <HAL_RCC_GetSysClockFreq+0x160>)
 8001858:	6849      	ldr	r1, [r1, #4]
 800185a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800185e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001860:	4945      	ldr	r1, [pc, #276]	; (8001978 <HAL_RCC_GetSysClockFreq+0x160>)
 8001862:	6849      	ldr	r1, [r1, #4]
 8001864:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001868:	2900      	cmp	r1, #0
 800186a:	d024      	beq.n	80018b6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800186c:	4942      	ldr	r1, [pc, #264]	; (8001978 <HAL_RCC_GetSysClockFreq+0x160>)
 800186e:	6849      	ldr	r1, [r1, #4]
 8001870:	0989      	lsrs	r1, r1, #6
 8001872:	4608      	mov	r0, r1
 8001874:	f04f 0100 	mov.w	r1, #0
 8001878:	f240 14ff 	movw	r4, #511	; 0x1ff
 800187c:	f04f 0500 	mov.w	r5, #0
 8001880:	ea00 0204 	and.w	r2, r0, r4
 8001884:	ea01 0305 	and.w	r3, r1, r5
 8001888:	493d      	ldr	r1, [pc, #244]	; (8001980 <HAL_RCC_GetSysClockFreq+0x168>)
 800188a:	fb01 f003 	mul.w	r0, r1, r3
 800188e:	2100      	movs	r1, #0
 8001890:	fb01 f102 	mul.w	r1, r1, r2
 8001894:	1844      	adds	r4, r0, r1
 8001896:	493a      	ldr	r1, [pc, #232]	; (8001980 <HAL_RCC_GetSysClockFreq+0x168>)
 8001898:	fba2 0101 	umull	r0, r1, r2, r1
 800189c:	1863      	adds	r3, r4, r1
 800189e:	4619      	mov	r1, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	461a      	mov	r2, r3
 80018a4:	f04f 0300 	mov.w	r3, #0
 80018a8:	f7fe fcae 	bl	8000208 <__aeabi_uldivmod>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4613      	mov	r3, r2
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	e04a      	b.n	800194c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018b6:	4b30      	ldr	r3, [pc, #192]	; (8001978 <HAL_RCC_GetSysClockFreq+0x160>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	099b      	lsrs	r3, r3, #6
 80018bc:	461a      	mov	r2, r3
 80018be:	f04f 0300 	mov.w	r3, #0
 80018c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80018c6:	f04f 0100 	mov.w	r1, #0
 80018ca:	ea02 0400 	and.w	r4, r2, r0
 80018ce:	ea03 0501 	and.w	r5, r3, r1
 80018d2:	4620      	mov	r0, r4
 80018d4:	4629      	mov	r1, r5
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	f04f 0300 	mov.w	r3, #0
 80018de:	014b      	lsls	r3, r1, #5
 80018e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80018e4:	0142      	lsls	r2, r0, #5
 80018e6:	4610      	mov	r0, r2
 80018e8:	4619      	mov	r1, r3
 80018ea:	1b00      	subs	r0, r0, r4
 80018ec:	eb61 0105 	sbc.w	r1, r1, r5
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	f04f 0300 	mov.w	r3, #0
 80018f8:	018b      	lsls	r3, r1, #6
 80018fa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80018fe:	0182      	lsls	r2, r0, #6
 8001900:	1a12      	subs	r2, r2, r0
 8001902:	eb63 0301 	sbc.w	r3, r3, r1
 8001906:	f04f 0000 	mov.w	r0, #0
 800190a:	f04f 0100 	mov.w	r1, #0
 800190e:	00d9      	lsls	r1, r3, #3
 8001910:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001914:	00d0      	lsls	r0, r2, #3
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	1912      	adds	r2, r2, r4
 800191c:	eb45 0303 	adc.w	r3, r5, r3
 8001920:	f04f 0000 	mov.w	r0, #0
 8001924:	f04f 0100 	mov.w	r1, #0
 8001928:	0299      	lsls	r1, r3, #10
 800192a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800192e:	0290      	lsls	r0, r2, #10
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4610      	mov	r0, r2
 8001936:	4619      	mov	r1, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	461a      	mov	r2, r3
 800193c:	f04f 0300 	mov.w	r3, #0
 8001940:	f7fe fc62 	bl	8000208 <__aeabi_uldivmod>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	4613      	mov	r3, r2
 800194a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800194c:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <HAL_RCC_GetSysClockFreq+0x160>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	0c1b      	lsrs	r3, r3, #16
 8001952:	f003 0303 	and.w	r3, r3, #3
 8001956:	3301      	adds	r3, #1
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800195c:	68fa      	ldr	r2, [r7, #12]
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	fbb2 f3f3 	udiv	r3, r2, r3
 8001964:	60bb      	str	r3, [r7, #8]
      break;
 8001966:	e002      	b.n	800196e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001968:	4b04      	ldr	r3, [pc, #16]	; (800197c <HAL_RCC_GetSysClockFreq+0x164>)
 800196a:	60bb      	str	r3, [r7, #8]
      break;
 800196c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800196e:	68bb      	ldr	r3, [r7, #8]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bdb0      	pop	{r4, r5, r7, pc}
 8001978:	40023800 	.word	0x40023800
 800197c:	00f42400 	.word	0x00f42400
 8001980:	017d7840 	.word	0x017d7840

08001984 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001988:	4b03      	ldr	r3, [pc, #12]	; (8001998 <HAL_RCC_GetHCLKFreq+0x14>)
 800198a:	681b      	ldr	r3, [r3, #0]
}
 800198c:	4618      	mov	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	20000000 	.word	0x20000000

0800199c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019a0:	f7ff fff0 	bl	8001984 <HAL_RCC_GetHCLKFreq>
 80019a4:	4602      	mov	r2, r0
 80019a6:	4b05      	ldr	r3, [pc, #20]	; (80019bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	0a9b      	lsrs	r3, r3, #10
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	4903      	ldr	r1, [pc, #12]	; (80019c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019b2:	5ccb      	ldrb	r3, [r1, r3]
 80019b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40023800 	.word	0x40023800
 80019c0:	080033d8 	.word	0x080033d8

080019c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019c8:	f7ff ffdc 	bl	8001984 <HAL_RCC_GetHCLKFreq>
 80019cc:	4602      	mov	r2, r0
 80019ce:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	0b5b      	lsrs	r3, r3, #13
 80019d4:	f003 0307 	and.w	r3, r3, #7
 80019d8:	4903      	ldr	r1, [pc, #12]	; (80019e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019da:	5ccb      	ldrb	r3, [r1, r3]
 80019dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40023800 	.word	0x40023800
 80019e8:	080033d8 	.word	0x080033d8

080019ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b088      	sub	sp, #32
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d012      	beq.n	8001a3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001a14:	4b69      	ldr	r3, [pc, #420]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	4a68      	ldr	r2, [pc, #416]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a1a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a1e:	6093      	str	r3, [r2, #8]
 8001a20:	4b66      	ldr	r3, [pc, #408]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a28:	4964      	ldr	r1, [pc, #400]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001a36:	2301      	movs	r3, #1
 8001a38:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d017      	beq.n	8001a76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001a46:	4b5d      	ldr	r3, [pc, #372]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a54:	4959      	ldr	r1, [pc, #356]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a64:	d101      	bne.n	8001a6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001a66:	2301      	movs	r3, #1
 8001a68:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001a72:	2301      	movs	r3, #1
 8001a74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d017      	beq.n	8001ab2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001a82:	4b4e      	ldr	r3, [pc, #312]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a88:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a90:	494a      	ldr	r1, [pc, #296]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001aa0:	d101      	bne.n	8001aa6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0320 	and.w	r3, r3, #32
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f000 808b 	beq.w	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ad0:	4b3a      	ldr	r3, [pc, #232]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad4:	4a39      	ldr	r2, [pc, #228]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ada:	6413      	str	r3, [r2, #64]	; 0x40
 8001adc:	4b37      	ldr	r3, [pc, #220]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ae8:	4b35      	ldr	r3, [pc, #212]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a34      	ldr	r2, [pc, #208]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001af4:	f7fe ff70 	bl	80009d8 <HAL_GetTick>
 8001af8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001afa:	e008      	b.n	8001b0e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001afc:	f7fe ff6c 	bl	80009d8 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b64      	cmp	r3, #100	; 0x64
 8001b08:	d901      	bls.n	8001b0e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e357      	b.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001b0e:	4b2c      	ldr	r3, [pc, #176]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b1a:	4b28      	ldr	r3, [pc, #160]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b22:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d035      	beq.n	8001b96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d02e      	beq.n	8001b96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b38:	4b20      	ldr	r3, [pc, #128]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b40:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b42:	4b1e      	ldr	r3, [pc, #120]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b46:	4a1d      	ldr	r2, [pc, #116]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b4c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b4e:	4b1b      	ldr	r3, [pc, #108]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b52:	4a1a      	ldr	r2, [pc, #104]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b58:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001b5a:	4a18      	ldr	r2, [pc, #96]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001b60:	4b16      	ldr	r3, [pc, #88]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d114      	bne.n	8001b96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6c:	f7fe ff34 	bl	80009d8 <HAL_GetTick>
 8001b70:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b72:	e00a      	b.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b74:	f7fe ff30 	bl	80009d8 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e319      	b.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b8a:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0ee      	beq.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001ba2:	d111      	bne.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001ba4:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bb0:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001bb2:	400b      	ands	r3, r1
 8001bb4:	4901      	ldr	r1, [pc, #4]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	608b      	str	r3, [r1, #8]
 8001bba:	e00b      	b.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40007000 	.word	0x40007000
 8001bc4:	0ffffcff 	.word	0x0ffffcff
 8001bc8:	4bb1      	ldr	r3, [pc, #708]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	4ab0      	ldr	r2, [pc, #704]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001bce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001bd2:	6093      	str	r3, [r2, #8]
 8001bd4:	4bae      	ldr	r3, [pc, #696]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001bd6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001be0:	49ab      	ldr	r1, [pc, #684]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0310 	and.w	r3, r3, #16
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d010      	beq.n	8001c14 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001bf2:	4ba7      	ldr	r3, [pc, #668]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bf8:	4aa5      	ldr	r2, [pc, #660]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001bfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bfe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001c02:	4ba3      	ldr	r3, [pc, #652]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001c04:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c0c:	49a0      	ldr	r1, [pc, #640]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d00a      	beq.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c20:	4b9b      	ldr	r3, [pc, #620]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c2e:	4998      	ldr	r1, [pc, #608]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00a      	beq.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001c42:	4b93      	ldr	r3, [pc, #588]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c50:	498f      	ldr	r1, [pc, #572]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00a      	beq.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001c64:	4b8a      	ldr	r3, [pc, #552]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c72:	4987      	ldr	r1, [pc, #540]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00a      	beq.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001c86:	4b82      	ldr	r3, [pc, #520]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c94:	497e      	ldr	r1, [pc, #504]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d00a      	beq.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ca8:	4b79      	ldr	r3, [pc, #484]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cae:	f023 0203 	bic.w	r2, r3, #3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	4976      	ldr	r1, [pc, #472]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00a      	beq.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001cca:	4b71      	ldr	r3, [pc, #452]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd0:	f023 020c 	bic.w	r2, r3, #12
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cd8:	496d      	ldr	r1, [pc, #436]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00a      	beq.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001cec:	4b68      	ldr	r3, [pc, #416]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfa:	4965      	ldr	r1, [pc, #404]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00a      	beq.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001d0e:	4b60      	ldr	r3, [pc, #384]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d14:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d1c:	495c      	ldr	r1, [pc, #368]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00a      	beq.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001d30:	4b57      	ldr	r3, [pc, #348]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3e:	4954      	ldr	r1, [pc, #336]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00a      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001d52:	4b4f      	ldr	r3, [pc, #316]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d58:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d60:	494b      	ldr	r1, [pc, #300]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00a      	beq.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001d74:	4b46      	ldr	r3, [pc, #280]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d7a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d82:	4943      	ldr	r1, [pc, #268]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00a      	beq.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001d96:	4b3e      	ldr	r3, [pc, #248]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d9c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da4:	493a      	ldr	r1, [pc, #232]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00a      	beq.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001db8:	4b35      	ldr	r3, [pc, #212]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dbe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001dc6:	4932      	ldr	r1, [pc, #200]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d011      	beq.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001dda:	4b2d      	ldr	r3, [pc, #180]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001de8:	4929      	ldr	r1, [pc, #164]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001df4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001df8:	d101      	bne.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0308 	and.w	r3, r3, #8
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00a      	beq.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e1a:	4b1d      	ldr	r3, [pc, #116]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e20:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e28:	4919      	ldr	r1, [pc, #100]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00b      	beq.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001e3c:	4b14      	ldr	r3, [pc, #80]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e42:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e4c:	4910      	ldr	r1, [pc, #64]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d006      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 80d9 	beq.w	800201a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001e68:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a08      	ldr	r2, [pc, #32]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001e72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e74:	f7fe fdb0 	bl	80009d8 <HAL_GetTick>
 8001e78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e7a:	e00b      	b.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001e7c:	f7fe fdac 	bl	80009d8 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b64      	cmp	r3, #100	; 0x64
 8001e88:	d904      	bls.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e197      	b.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8001e8e:	bf00      	nop
 8001e90:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e94:	4b6c      	ldr	r3, [pc, #432]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1ed      	bne.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d021      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d11d      	bne.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001eb4:	4b64      	ldr	r3, [pc, #400]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001eb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001eba:	0c1b      	lsrs	r3, r3, #16
 8001ebc:	f003 0303 	and.w	r3, r3, #3
 8001ec0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001ec2:	4b61      	ldr	r3, [pc, #388]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001ec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ec8:	0e1b      	lsrs	r3, r3, #24
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	019a      	lsls	r2, r3, #6
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	041b      	lsls	r3, r3, #16
 8001eda:	431a      	orrs	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	061b      	lsls	r3, r3, #24
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	071b      	lsls	r3, r3, #28
 8001ee8:	4957      	ldr	r1, [pc, #348]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d004      	beq.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f04:	d00a      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d02e      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f1a:	d129      	bne.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001f1c:	4b4a      	ldr	r3, [pc, #296]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001f1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f22:	0c1b      	lsrs	r3, r3, #16
 8001f24:	f003 0303 	and.w	r3, r3, #3
 8001f28:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001f2a:	4b47      	ldr	r3, [pc, #284]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001f2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f30:	0f1b      	lsrs	r3, r3, #28
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	019a      	lsls	r2, r3, #6
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	041b      	lsls	r3, r3, #16
 8001f42:	431a      	orrs	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	061b      	lsls	r3, r3, #24
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	071b      	lsls	r3, r3, #28
 8001f50:	493d      	ldr	r1, [pc, #244]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001f58:	4b3b      	ldr	r3, [pc, #236]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001f5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f5e:	f023 021f 	bic.w	r2, r3, #31
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f66:	3b01      	subs	r3, #1
 8001f68:	4937      	ldr	r1, [pc, #220]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d01d      	beq.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001f7c:	4b32      	ldr	r3, [pc, #200]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001f7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f82:	0e1b      	lsrs	r3, r3, #24
 8001f84:	f003 030f 	and.w	r3, r3, #15
 8001f88:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001f8a:	4b2f      	ldr	r3, [pc, #188]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001f8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f90:	0f1b      	lsrs	r3, r3, #28
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	019a      	lsls	r2, r3, #6
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	041b      	lsls	r3, r3, #16
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	061b      	lsls	r3, r3, #24
 8001faa:	431a      	orrs	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	071b      	lsls	r3, r3, #28
 8001fb0:	4925      	ldr	r1, [pc, #148]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d011      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	019a      	lsls	r2, r3, #6
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	041b      	lsls	r3, r3, #16
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	061b      	lsls	r3, r3, #24
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	071b      	lsls	r3, r3, #28
 8001fe0:	4919      	ldr	r1, [pc, #100]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001fe8:	4b17      	ldr	r3, [pc, #92]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a16      	ldr	r2, [pc, #88]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001fee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ff2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ff4:	f7fe fcf0 	bl	80009d8 <HAL_GetTick>
 8001ff8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001ffc:	f7fe fcec 	bl	80009d8 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b64      	cmp	r3, #100	; 0x64
 8002008:	d901      	bls.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e0d7      	b.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800200e:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0f0      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	2b01      	cmp	r3, #1
 800201e:	f040 80cd 	bne.w	80021bc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002022:	4b09      	ldr	r3, [pc, #36]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a08      	ldr	r2, [pc, #32]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002028:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800202c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800202e:	f7fe fcd3 	bl	80009d8 <HAL_GetTick>
 8002032:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002034:	e00a      	b.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002036:	f7fe fccf 	bl	80009d8 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b64      	cmp	r3, #100	; 0x64
 8002042:	d903      	bls.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e0ba      	b.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002048:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800204c:	4b5e      	ldr	r3, [pc, #376]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002054:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002058:	d0ed      	beq.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206a:	2b00      	cmp	r3, #0
 800206c:	d009      	beq.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002076:	2b00      	cmp	r3, #0
 8002078:	d02e      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	2b00      	cmp	r3, #0
 8002080:	d12a      	bne.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002082:	4b51      	ldr	r3, [pc, #324]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002088:	0c1b      	lsrs	r3, r3, #16
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002090:	4b4d      	ldr	r3, [pc, #308]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002096:	0f1b      	lsrs	r3, r3, #28
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	019a      	lsls	r2, r3, #6
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	041b      	lsls	r3, r3, #16
 80020a8:	431a      	orrs	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	061b      	lsls	r3, r3, #24
 80020b0:	431a      	orrs	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	071b      	lsls	r3, r3, #28
 80020b6:	4944      	ldr	r1, [pc, #272]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80020be:	4b42      	ldr	r3, [pc, #264]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80020c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020c4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020cc:	3b01      	subs	r3, #1
 80020ce:	021b      	lsls	r3, r3, #8
 80020d0:	493d      	ldr	r1, [pc, #244]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d022      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020ec:	d11d      	bne.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80020ee:	4b36      	ldr	r3, [pc, #216]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80020f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f4:	0e1b      	lsrs	r3, r3, #24
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80020fc:	4b32      	ldr	r3, [pc, #200]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80020fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002102:	0f1b      	lsrs	r3, r3, #28
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	019a      	lsls	r2, r3, #6
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	041b      	lsls	r3, r3, #16
 8002116:	431a      	orrs	r2, r3
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	061b      	lsls	r3, r3, #24
 800211c:	431a      	orrs	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	071b      	lsls	r3, r3, #28
 8002122:	4929      	ldr	r1, [pc, #164]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002124:	4313      	orrs	r3, r2
 8002126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	2b00      	cmp	r3, #0
 8002134:	d028      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002136:	4b24      	ldr	r3, [pc, #144]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213c:	0e1b      	lsrs	r3, r3, #24
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002144:	4b20      	ldr	r3, [pc, #128]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214a:	0c1b      	lsrs	r3, r3, #16
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	019a      	lsls	r2, r3, #6
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	041b      	lsls	r3, r3, #16
 800215c:	431a      	orrs	r2, r3
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	061b      	lsls	r3, r3, #24
 8002162:	431a      	orrs	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	69db      	ldr	r3, [r3, #28]
 8002168:	071b      	lsls	r3, r3, #28
 800216a:	4917      	ldr	r1, [pc, #92]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800216c:	4313      	orrs	r3, r2
 800216e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002172:	4b15      	ldr	r3, [pc, #84]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002174:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002178:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002180:	4911      	ldr	r1, [pc, #68]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002182:	4313      	orrs	r3, r2
 8002184:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002188:	4b0f      	ldr	r3, [pc, #60]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a0e      	ldr	r2, [pc, #56]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800218e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002192:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002194:	f7fe fc20 	bl	80009d8 <HAL_GetTick>
 8002198:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800219c:	f7fe fc1c 	bl	80009d8 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b64      	cmp	r3, #100	; 0x64
 80021a8:	d901      	bls.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e007      	b.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80021ae:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021ba:	d1ef      	bne.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3720      	adds	r7, #32
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40023800 	.word	0x40023800

080021cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e040      	b.n	8002260 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d106      	bne.n	80021f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7fe fae6 	bl	80007c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2224      	movs	r2, #36	; 0x24
 80021f8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0201 	bic.w	r2, r2, #1
 8002208:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 fabe 	bl	800278c <UART_SetConfig>
 8002210:	4603      	mov	r3, r0
 8002212:	2b01      	cmp	r3, #1
 8002214:	d101      	bne.n	800221a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e022      	b.n	8002260 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	2b00      	cmp	r3, #0
 8002220:	d002      	beq.n	8002228 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 fd14 	bl	8002c50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002236:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689a      	ldr	r2, [r3, #8]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002246:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f042 0201 	orr.w	r2, r2, #1
 8002256:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 fd9b 	bl	8002d94 <UART_CheckIdleState>
 800225e:	4603      	mov	r3, r0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	4613      	mov	r3, r2
 8002274:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800227a:	2b20      	cmp	r3, #32
 800227c:	d145      	bne.n	800230a <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d002      	beq.n	800228a <HAL_UART_Transmit_IT+0x22>
 8002284:	88fb      	ldrh	r3, [r7, #6]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e03e      	b.n	800230c <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002294:	2b01      	cmp	r3, #1
 8002296:	d101      	bne.n	800229c <HAL_UART_Transmit_IT+0x34>
 8002298:	2302      	movs	r3, #2
 800229a:	e037      	b.n	800230c <HAL_UART_Transmit_IT+0xa4>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	88fa      	ldrh	r2, [r7, #6]
 80022ae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	88fa      	ldrh	r2, [r7, #6]
 80022b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2221      	movs	r2, #33	; 0x21
 80022cc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022d6:	d107      	bne.n	80022e8 <HAL_UART_Transmit_IT+0x80>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d103      	bne.n	80022e8 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4a0d      	ldr	r2, [pc, #52]	; (8002318 <HAL_UART_Transmit_IT+0xb0>)
 80022e4:	669a      	str	r2, [r3, #104]	; 0x68
 80022e6:	e002      	b.n	80022ee <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4a0c      	ldr	r2, [pc, #48]	; (800231c <HAL_UART_Transmit_IT+0xb4>)
 80022ec:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002304:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002306:	2300      	movs	r3, #0
 8002308:	e000      	b.n	800230c <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 800230a:	2302      	movs	r3, #2
  }
}
 800230c:	4618      	mov	r0, r3
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	08003101 	.word	0x08003101
 800231c:	0800308f 	.word	0x0800308f

08002320 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	4613      	mov	r3, r2
 800232c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002332:	2b20      	cmp	r3, #32
 8002334:	d12c      	bne.n	8002390 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d002      	beq.n	8002342 <HAL_UART_Receive_IT+0x22>
 800233c:	88fb      	ldrh	r3, [r7, #6]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e025      	b.n	8002392 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800234c:	2b01      	cmp	r3, #1
 800234e:	d101      	bne.n	8002354 <HAL_UART_Receive_IT+0x34>
 8002350:	2302      	movs	r3, #2
 8002352:	e01e      	b.n	8002392 <HAL_UART_Receive_IT+0x72>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d007      	beq.n	8002380 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800237e:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002380:	88fb      	ldrh	r3, [r7, #6]
 8002382:	461a      	mov	r2, r3
 8002384:	68b9      	ldr	r1, [r7, #8]
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 fdb4 	bl	8002ef4 <UART_Start_Receive_IT>
 800238c:	4603      	mov	r3, r0
 800238e:	e000      	b.n	8002392 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002390:	2302      	movs	r3, #2
  }
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
	...

0800239c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b088      	sub	sp, #32
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80023bc:	69fa      	ldr	r2, [r7, #28]
 80023be:	f640 030f 	movw	r3, #2063	; 0x80f
 80023c2:	4013      	ands	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d113      	bne.n	80023f4 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	f003 0320 	and.w	r3, r3, #32
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00e      	beq.n	80023f4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	f003 0320 	and.w	r3, r3, #32
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d009      	beq.n	80023f4 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 81b9 	beq.w	800275c <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	4798      	blx	r3
      }
      return;
 80023f2:	e1b3      	b.n	800275c <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f000 80e3 	beq.w	80025c2 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d105      	bne.n	8002412 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4ba5      	ldr	r3, [pc, #660]	; (80026a0 <HAL_UART_IRQHandler+0x304>)
 800240a:	4013      	ands	r3, r2
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 80d8 	beq.w	80025c2 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b00      	cmp	r3, #0
 800241a:	d010      	beq.n	800243e <HAL_UART_IRQHandler+0xa2>
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00b      	beq.n	800243e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2201      	movs	r2, #1
 800242c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002434:	f043 0201 	orr.w	r2, r3, #1
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d010      	beq.n	800246a <HAL_UART_IRQHandler+0xce>
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00b      	beq.n	800246a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2202      	movs	r2, #2
 8002458:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002460:	f043 0204 	orr.w	r2, r3, #4
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b00      	cmp	r3, #0
 8002472:	d010      	beq.n	8002496 <HAL_UART_IRQHandler+0xfa>
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00b      	beq.n	8002496 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2204      	movs	r2, #4
 8002484:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800248c:	f043 0202 	orr.w	r2, r3, #2
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	f003 0308 	and.w	r3, r3, #8
 800249c:	2b00      	cmp	r3, #0
 800249e:	d015      	beq.n	80024cc <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	f003 0320 	and.w	r3, r3, #32
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d104      	bne.n	80024b4 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00b      	beq.n	80024cc <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2208      	movs	r2, #8
 80024ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024c2:	f043 0208 	orr.w	r2, r3, #8
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d011      	beq.n	80024fa <HAL_UART_IRQHandler+0x15e>
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00c      	beq.n	80024fa <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024f0:	f043 0220 	orr.w	r2, r3, #32
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 812d 	beq.w	8002760 <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	f003 0320 	and.w	r3, r3, #32
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00c      	beq.n	800252a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	f003 0320 	and.w	r3, r3, #32
 8002516:	2b00      	cmp	r3, #0
 8002518:	d007      	beq.n	800252a <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002530:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800253c:	2b40      	cmp	r3, #64	; 0x40
 800253e:	d004      	beq.n	800254a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002546:	2b00      	cmp	r3, #0
 8002548:	d031      	beq.n	80025ae <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 fd5a 	bl	8003004 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800255a:	2b40      	cmp	r3, #64	; 0x40
 800255c:	d123      	bne.n	80025a6 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800256c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002572:	2b00      	cmp	r3, #0
 8002574:	d013      	beq.n	800259e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257a:	4a4a      	ldr	r2, [pc, #296]	; (80026a4 <HAL_UART_IRQHandler+0x308>)
 800257c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002582:	4618      	mov	r0, r3
 8002584:	f7fe fbb5 	bl	8000cf2 <HAL_DMA_Abort_IT>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d017      	beq.n	80025be <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002598:	4610      	mov	r0, r2
 800259a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800259c:	e00f      	b.n	80025be <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7fd ffae 	bl	8000500 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025a4:	e00b      	b.n	80025be <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7fd ffaa 	bl	8000500 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025ac:	e007      	b.n	80025be <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7fd ffa6 	bl	8000500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80025bc:	e0d0      	b.n	8002760 <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025be:	bf00      	nop
    return;
 80025c0:	e0ce      	b.n	8002760 <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	f040 80a7 	bne.w	800271a <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f003 0310 	and.w	r3, r3, #16
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 80a1 	beq.w	800271a <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	f003 0310 	and.w	r3, r3, #16
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 809b 	beq.w	800271a <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2210      	movs	r2, #16
 80025ea:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f6:	2b40      	cmp	r3, #64	; 0x40
 80025f8:	d156      	bne.n	80026a8 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8002604:	893b      	ldrh	r3, [r7, #8]
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 80ac 	beq.w	8002764 <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002612:	893a      	ldrh	r2, [r7, #8]
 8002614:	429a      	cmp	r2, r3
 8002616:	f080 80a5 	bcs.w	8002764 <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	893a      	ldrh	r2, [r7, #8]
 800261e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800262c:	d02a      	beq.n	8002684 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800263c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0201 	bic.w	r2, r2, #1
 800264c:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800265c:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2220      	movs	r2, #32
 8002662:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 0210 	bic.w	r2, r2, #16
 8002678:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267e:	4618      	mov	r0, r3
 8002680:	f7fe fac7 	bl	8000c12 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002690:	b29b      	uxth	r3, r3
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	b29b      	uxth	r3, r3
 8002696:	4619      	mov	r1, r3
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 f86b 	bl	8002774 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800269e:	e061      	b.n	8002764 <HAL_UART_IRQHandler+0x3c8>
 80026a0:	04000120 	.word	0x04000120
 80026a4:	08003063 	.word	0x08003063
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d050      	beq.n	8002768 <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 80026c6:	897b      	ldrh	r3, [r7, #10]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d04d      	beq.n	8002768 <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80026da:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0201 	bic.w	r2, r2, #1
 80026ea:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2220      	movs	r2, #32
 80026f0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 0210 	bic.w	r2, r2, #16
 800270c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800270e:	897b      	ldrh	r3, [r7, #10]
 8002710:	4619      	mov	r1, r3
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f82e 	bl	8002774 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002718:	e026      	b.n	8002768 <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00d      	beq.n	8002740 <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800272a:	2b00      	cmp	r3, #0
 800272c:	d008      	beq.n	8002740 <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002732:	2b00      	cmp	r3, #0
 8002734:	d01a      	beq.n	800276c <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	4798      	blx	r3
    }
    return;
 800273e:	e015      	b.n	800276c <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002746:	2b00      	cmp	r3, #0
 8002748:	d011      	beq.n	800276e <HAL_UART_IRQHandler+0x3d2>
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00c      	beq.n	800276e <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 fd11 	bl	800317c <UART_EndTransmit_IT>
    return;
 800275a:	e008      	b.n	800276e <HAL_UART_IRQHandler+0x3d2>
      return;
 800275c:	bf00      	nop
 800275e:	e006      	b.n	800276e <HAL_UART_IRQHandler+0x3d2>
    return;
 8002760:	bf00      	nop
 8002762:	e004      	b.n	800276e <HAL_UART_IRQHandler+0x3d2>
      return;
 8002764:	bf00      	nop
 8002766:	e002      	b.n	800276e <HAL_UART_IRQHandler+0x3d2>
      return;
 8002768:	bf00      	nop
 800276a:	e000      	b.n	800276e <HAL_UART_IRQHandler+0x3d2>
    return;
 800276c:	bf00      	nop
  }

}
 800276e:	3720      	adds	r7, #32
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b088      	sub	sp, #32
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002794:	2300      	movs	r3, #0
 8002796:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	431a      	orrs	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	69db      	ldr	r3, [r3, #28]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	4ba7      	ldr	r3, [pc, #668]	; (8002a54 <UART_SetConfig+0x2c8>)
 80027b8:	4013      	ands	r3, r2
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6812      	ldr	r2, [r2, #0]
 80027be:	6979      	ldr	r1, [r7, #20]
 80027c0:	430b      	orrs	r3, r1
 80027c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a95      	ldr	r2, [pc, #596]	; (8002a58 <UART_SetConfig+0x2cc>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d120      	bne.n	800284a <UART_SetConfig+0xbe>
 8002808:	4b94      	ldr	r3, [pc, #592]	; (8002a5c <UART_SetConfig+0x2d0>)
 800280a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	2b03      	cmp	r3, #3
 8002814:	d816      	bhi.n	8002844 <UART_SetConfig+0xb8>
 8002816:	a201      	add	r2, pc, #4	; (adr r2, 800281c <UART_SetConfig+0x90>)
 8002818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800281c:	0800282d 	.word	0x0800282d
 8002820:	08002839 	.word	0x08002839
 8002824:	08002833 	.word	0x08002833
 8002828:	0800283f 	.word	0x0800283f
 800282c:	2301      	movs	r3, #1
 800282e:	77fb      	strb	r3, [r7, #31]
 8002830:	e14f      	b.n	8002ad2 <UART_SetConfig+0x346>
 8002832:	2302      	movs	r3, #2
 8002834:	77fb      	strb	r3, [r7, #31]
 8002836:	e14c      	b.n	8002ad2 <UART_SetConfig+0x346>
 8002838:	2304      	movs	r3, #4
 800283a:	77fb      	strb	r3, [r7, #31]
 800283c:	e149      	b.n	8002ad2 <UART_SetConfig+0x346>
 800283e:	2308      	movs	r3, #8
 8002840:	77fb      	strb	r3, [r7, #31]
 8002842:	e146      	b.n	8002ad2 <UART_SetConfig+0x346>
 8002844:	2310      	movs	r3, #16
 8002846:	77fb      	strb	r3, [r7, #31]
 8002848:	e143      	b.n	8002ad2 <UART_SetConfig+0x346>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a84      	ldr	r2, [pc, #528]	; (8002a60 <UART_SetConfig+0x2d4>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d132      	bne.n	80028ba <UART_SetConfig+0x12e>
 8002854:	4b81      	ldr	r3, [pc, #516]	; (8002a5c <UART_SetConfig+0x2d0>)
 8002856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800285a:	f003 030c 	and.w	r3, r3, #12
 800285e:	2b0c      	cmp	r3, #12
 8002860:	d828      	bhi.n	80028b4 <UART_SetConfig+0x128>
 8002862:	a201      	add	r2, pc, #4	; (adr r2, 8002868 <UART_SetConfig+0xdc>)
 8002864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002868:	0800289d 	.word	0x0800289d
 800286c:	080028b5 	.word	0x080028b5
 8002870:	080028b5 	.word	0x080028b5
 8002874:	080028b5 	.word	0x080028b5
 8002878:	080028a9 	.word	0x080028a9
 800287c:	080028b5 	.word	0x080028b5
 8002880:	080028b5 	.word	0x080028b5
 8002884:	080028b5 	.word	0x080028b5
 8002888:	080028a3 	.word	0x080028a3
 800288c:	080028b5 	.word	0x080028b5
 8002890:	080028b5 	.word	0x080028b5
 8002894:	080028b5 	.word	0x080028b5
 8002898:	080028af 	.word	0x080028af
 800289c:	2300      	movs	r3, #0
 800289e:	77fb      	strb	r3, [r7, #31]
 80028a0:	e117      	b.n	8002ad2 <UART_SetConfig+0x346>
 80028a2:	2302      	movs	r3, #2
 80028a4:	77fb      	strb	r3, [r7, #31]
 80028a6:	e114      	b.n	8002ad2 <UART_SetConfig+0x346>
 80028a8:	2304      	movs	r3, #4
 80028aa:	77fb      	strb	r3, [r7, #31]
 80028ac:	e111      	b.n	8002ad2 <UART_SetConfig+0x346>
 80028ae:	2308      	movs	r3, #8
 80028b0:	77fb      	strb	r3, [r7, #31]
 80028b2:	e10e      	b.n	8002ad2 <UART_SetConfig+0x346>
 80028b4:	2310      	movs	r3, #16
 80028b6:	77fb      	strb	r3, [r7, #31]
 80028b8:	e10b      	b.n	8002ad2 <UART_SetConfig+0x346>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a69      	ldr	r2, [pc, #420]	; (8002a64 <UART_SetConfig+0x2d8>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d120      	bne.n	8002906 <UART_SetConfig+0x17a>
 80028c4:	4b65      	ldr	r3, [pc, #404]	; (8002a5c <UART_SetConfig+0x2d0>)
 80028c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80028ce:	2b30      	cmp	r3, #48	; 0x30
 80028d0:	d013      	beq.n	80028fa <UART_SetConfig+0x16e>
 80028d2:	2b30      	cmp	r3, #48	; 0x30
 80028d4:	d814      	bhi.n	8002900 <UART_SetConfig+0x174>
 80028d6:	2b20      	cmp	r3, #32
 80028d8:	d009      	beq.n	80028ee <UART_SetConfig+0x162>
 80028da:	2b20      	cmp	r3, #32
 80028dc:	d810      	bhi.n	8002900 <UART_SetConfig+0x174>
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d002      	beq.n	80028e8 <UART_SetConfig+0x15c>
 80028e2:	2b10      	cmp	r3, #16
 80028e4:	d006      	beq.n	80028f4 <UART_SetConfig+0x168>
 80028e6:	e00b      	b.n	8002900 <UART_SetConfig+0x174>
 80028e8:	2300      	movs	r3, #0
 80028ea:	77fb      	strb	r3, [r7, #31]
 80028ec:	e0f1      	b.n	8002ad2 <UART_SetConfig+0x346>
 80028ee:	2302      	movs	r3, #2
 80028f0:	77fb      	strb	r3, [r7, #31]
 80028f2:	e0ee      	b.n	8002ad2 <UART_SetConfig+0x346>
 80028f4:	2304      	movs	r3, #4
 80028f6:	77fb      	strb	r3, [r7, #31]
 80028f8:	e0eb      	b.n	8002ad2 <UART_SetConfig+0x346>
 80028fa:	2308      	movs	r3, #8
 80028fc:	77fb      	strb	r3, [r7, #31]
 80028fe:	e0e8      	b.n	8002ad2 <UART_SetConfig+0x346>
 8002900:	2310      	movs	r3, #16
 8002902:	77fb      	strb	r3, [r7, #31]
 8002904:	e0e5      	b.n	8002ad2 <UART_SetConfig+0x346>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a57      	ldr	r2, [pc, #348]	; (8002a68 <UART_SetConfig+0x2dc>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d120      	bne.n	8002952 <UART_SetConfig+0x1c6>
 8002910:	4b52      	ldr	r3, [pc, #328]	; (8002a5c <UART_SetConfig+0x2d0>)
 8002912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002916:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800291a:	2bc0      	cmp	r3, #192	; 0xc0
 800291c:	d013      	beq.n	8002946 <UART_SetConfig+0x1ba>
 800291e:	2bc0      	cmp	r3, #192	; 0xc0
 8002920:	d814      	bhi.n	800294c <UART_SetConfig+0x1c0>
 8002922:	2b80      	cmp	r3, #128	; 0x80
 8002924:	d009      	beq.n	800293a <UART_SetConfig+0x1ae>
 8002926:	2b80      	cmp	r3, #128	; 0x80
 8002928:	d810      	bhi.n	800294c <UART_SetConfig+0x1c0>
 800292a:	2b00      	cmp	r3, #0
 800292c:	d002      	beq.n	8002934 <UART_SetConfig+0x1a8>
 800292e:	2b40      	cmp	r3, #64	; 0x40
 8002930:	d006      	beq.n	8002940 <UART_SetConfig+0x1b4>
 8002932:	e00b      	b.n	800294c <UART_SetConfig+0x1c0>
 8002934:	2300      	movs	r3, #0
 8002936:	77fb      	strb	r3, [r7, #31]
 8002938:	e0cb      	b.n	8002ad2 <UART_SetConfig+0x346>
 800293a:	2302      	movs	r3, #2
 800293c:	77fb      	strb	r3, [r7, #31]
 800293e:	e0c8      	b.n	8002ad2 <UART_SetConfig+0x346>
 8002940:	2304      	movs	r3, #4
 8002942:	77fb      	strb	r3, [r7, #31]
 8002944:	e0c5      	b.n	8002ad2 <UART_SetConfig+0x346>
 8002946:	2308      	movs	r3, #8
 8002948:	77fb      	strb	r3, [r7, #31]
 800294a:	e0c2      	b.n	8002ad2 <UART_SetConfig+0x346>
 800294c:	2310      	movs	r3, #16
 800294e:	77fb      	strb	r3, [r7, #31]
 8002950:	e0bf      	b.n	8002ad2 <UART_SetConfig+0x346>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a45      	ldr	r2, [pc, #276]	; (8002a6c <UART_SetConfig+0x2e0>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d125      	bne.n	80029a8 <UART_SetConfig+0x21c>
 800295c:	4b3f      	ldr	r3, [pc, #252]	; (8002a5c <UART_SetConfig+0x2d0>)
 800295e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002966:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800296a:	d017      	beq.n	800299c <UART_SetConfig+0x210>
 800296c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002970:	d817      	bhi.n	80029a2 <UART_SetConfig+0x216>
 8002972:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002976:	d00b      	beq.n	8002990 <UART_SetConfig+0x204>
 8002978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800297c:	d811      	bhi.n	80029a2 <UART_SetConfig+0x216>
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <UART_SetConfig+0x1fe>
 8002982:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002986:	d006      	beq.n	8002996 <UART_SetConfig+0x20a>
 8002988:	e00b      	b.n	80029a2 <UART_SetConfig+0x216>
 800298a:	2300      	movs	r3, #0
 800298c:	77fb      	strb	r3, [r7, #31]
 800298e:	e0a0      	b.n	8002ad2 <UART_SetConfig+0x346>
 8002990:	2302      	movs	r3, #2
 8002992:	77fb      	strb	r3, [r7, #31]
 8002994:	e09d      	b.n	8002ad2 <UART_SetConfig+0x346>
 8002996:	2304      	movs	r3, #4
 8002998:	77fb      	strb	r3, [r7, #31]
 800299a:	e09a      	b.n	8002ad2 <UART_SetConfig+0x346>
 800299c:	2308      	movs	r3, #8
 800299e:	77fb      	strb	r3, [r7, #31]
 80029a0:	e097      	b.n	8002ad2 <UART_SetConfig+0x346>
 80029a2:	2310      	movs	r3, #16
 80029a4:	77fb      	strb	r3, [r7, #31]
 80029a6:	e094      	b.n	8002ad2 <UART_SetConfig+0x346>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a30      	ldr	r2, [pc, #192]	; (8002a70 <UART_SetConfig+0x2e4>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d125      	bne.n	80029fe <UART_SetConfig+0x272>
 80029b2:	4b2a      	ldr	r3, [pc, #168]	; (8002a5c <UART_SetConfig+0x2d0>)
 80029b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80029c0:	d017      	beq.n	80029f2 <UART_SetConfig+0x266>
 80029c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80029c6:	d817      	bhi.n	80029f8 <UART_SetConfig+0x26c>
 80029c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029cc:	d00b      	beq.n	80029e6 <UART_SetConfig+0x25a>
 80029ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029d2:	d811      	bhi.n	80029f8 <UART_SetConfig+0x26c>
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <UART_SetConfig+0x254>
 80029d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029dc:	d006      	beq.n	80029ec <UART_SetConfig+0x260>
 80029de:	e00b      	b.n	80029f8 <UART_SetConfig+0x26c>
 80029e0:	2301      	movs	r3, #1
 80029e2:	77fb      	strb	r3, [r7, #31]
 80029e4:	e075      	b.n	8002ad2 <UART_SetConfig+0x346>
 80029e6:	2302      	movs	r3, #2
 80029e8:	77fb      	strb	r3, [r7, #31]
 80029ea:	e072      	b.n	8002ad2 <UART_SetConfig+0x346>
 80029ec:	2304      	movs	r3, #4
 80029ee:	77fb      	strb	r3, [r7, #31]
 80029f0:	e06f      	b.n	8002ad2 <UART_SetConfig+0x346>
 80029f2:	2308      	movs	r3, #8
 80029f4:	77fb      	strb	r3, [r7, #31]
 80029f6:	e06c      	b.n	8002ad2 <UART_SetConfig+0x346>
 80029f8:	2310      	movs	r3, #16
 80029fa:	77fb      	strb	r3, [r7, #31]
 80029fc:	e069      	b.n	8002ad2 <UART_SetConfig+0x346>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a1c      	ldr	r2, [pc, #112]	; (8002a74 <UART_SetConfig+0x2e8>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d137      	bne.n	8002a78 <UART_SetConfig+0x2ec>
 8002a08:	4b14      	ldr	r3, [pc, #80]	; (8002a5c <UART_SetConfig+0x2d0>)
 8002a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002a12:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a16:	d017      	beq.n	8002a48 <UART_SetConfig+0x2bc>
 8002a18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a1c:	d817      	bhi.n	8002a4e <UART_SetConfig+0x2c2>
 8002a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a22:	d00b      	beq.n	8002a3c <UART_SetConfig+0x2b0>
 8002a24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a28:	d811      	bhi.n	8002a4e <UART_SetConfig+0x2c2>
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <UART_SetConfig+0x2aa>
 8002a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a32:	d006      	beq.n	8002a42 <UART_SetConfig+0x2b6>
 8002a34:	e00b      	b.n	8002a4e <UART_SetConfig+0x2c2>
 8002a36:	2300      	movs	r3, #0
 8002a38:	77fb      	strb	r3, [r7, #31]
 8002a3a:	e04a      	b.n	8002ad2 <UART_SetConfig+0x346>
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	77fb      	strb	r3, [r7, #31]
 8002a40:	e047      	b.n	8002ad2 <UART_SetConfig+0x346>
 8002a42:	2304      	movs	r3, #4
 8002a44:	77fb      	strb	r3, [r7, #31]
 8002a46:	e044      	b.n	8002ad2 <UART_SetConfig+0x346>
 8002a48:	2308      	movs	r3, #8
 8002a4a:	77fb      	strb	r3, [r7, #31]
 8002a4c:	e041      	b.n	8002ad2 <UART_SetConfig+0x346>
 8002a4e:	2310      	movs	r3, #16
 8002a50:	77fb      	strb	r3, [r7, #31]
 8002a52:	e03e      	b.n	8002ad2 <UART_SetConfig+0x346>
 8002a54:	efff69f3 	.word	0xefff69f3
 8002a58:	40011000 	.word	0x40011000
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	40004400 	.word	0x40004400
 8002a64:	40004800 	.word	0x40004800
 8002a68:	40004c00 	.word	0x40004c00
 8002a6c:	40005000 	.word	0x40005000
 8002a70:	40011400 	.word	0x40011400
 8002a74:	40007800 	.word	0x40007800
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a71      	ldr	r2, [pc, #452]	; (8002c44 <UART_SetConfig+0x4b8>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d125      	bne.n	8002ace <UART_SetConfig+0x342>
 8002a82:	4b71      	ldr	r3, [pc, #452]	; (8002c48 <UART_SetConfig+0x4bc>)
 8002a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a8c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002a90:	d017      	beq.n	8002ac2 <UART_SetConfig+0x336>
 8002a92:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002a96:	d817      	bhi.n	8002ac8 <UART_SetConfig+0x33c>
 8002a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a9c:	d00b      	beq.n	8002ab6 <UART_SetConfig+0x32a>
 8002a9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aa2:	d811      	bhi.n	8002ac8 <UART_SetConfig+0x33c>
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <UART_SetConfig+0x324>
 8002aa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002aac:	d006      	beq.n	8002abc <UART_SetConfig+0x330>
 8002aae:	e00b      	b.n	8002ac8 <UART_SetConfig+0x33c>
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	77fb      	strb	r3, [r7, #31]
 8002ab4:	e00d      	b.n	8002ad2 <UART_SetConfig+0x346>
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	77fb      	strb	r3, [r7, #31]
 8002aba:	e00a      	b.n	8002ad2 <UART_SetConfig+0x346>
 8002abc:	2304      	movs	r3, #4
 8002abe:	77fb      	strb	r3, [r7, #31]
 8002ac0:	e007      	b.n	8002ad2 <UART_SetConfig+0x346>
 8002ac2:	2308      	movs	r3, #8
 8002ac4:	77fb      	strb	r3, [r7, #31]
 8002ac6:	e004      	b.n	8002ad2 <UART_SetConfig+0x346>
 8002ac8:	2310      	movs	r3, #16
 8002aca:	77fb      	strb	r3, [r7, #31]
 8002acc:	e001      	b.n	8002ad2 <UART_SetConfig+0x346>
 8002ace:	2310      	movs	r3, #16
 8002ad0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ada:	d15b      	bne.n	8002b94 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8002adc:	7ffb      	ldrb	r3, [r7, #31]
 8002ade:	2b08      	cmp	r3, #8
 8002ae0:	d827      	bhi.n	8002b32 <UART_SetConfig+0x3a6>
 8002ae2:	a201      	add	r2, pc, #4	; (adr r2, 8002ae8 <UART_SetConfig+0x35c>)
 8002ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae8:	08002b0d 	.word	0x08002b0d
 8002aec:	08002b15 	.word	0x08002b15
 8002af0:	08002b1d 	.word	0x08002b1d
 8002af4:	08002b33 	.word	0x08002b33
 8002af8:	08002b23 	.word	0x08002b23
 8002afc:	08002b33 	.word	0x08002b33
 8002b00:	08002b33 	.word	0x08002b33
 8002b04:	08002b33 	.word	0x08002b33
 8002b08:	08002b2b 	.word	0x08002b2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b0c:	f7fe ff46 	bl	800199c <HAL_RCC_GetPCLK1Freq>
 8002b10:	61b8      	str	r0, [r7, #24]
        break;
 8002b12:	e013      	b.n	8002b3c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b14:	f7fe ff56 	bl	80019c4 <HAL_RCC_GetPCLK2Freq>
 8002b18:	61b8      	str	r0, [r7, #24]
        break;
 8002b1a:	e00f      	b.n	8002b3c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b1c:	4b4b      	ldr	r3, [pc, #300]	; (8002c4c <UART_SetConfig+0x4c0>)
 8002b1e:	61bb      	str	r3, [r7, #24]
        break;
 8002b20:	e00c      	b.n	8002b3c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b22:	f7fe fe79 	bl	8001818 <HAL_RCC_GetSysClockFreq>
 8002b26:	61b8      	str	r0, [r7, #24]
        break;
 8002b28:	e008      	b.n	8002b3c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b2e:	61bb      	str	r3, [r7, #24]
        break;
 8002b30:	e004      	b.n	8002b3c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8002b32:	2300      	movs	r3, #0
 8002b34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	77bb      	strb	r3, [r7, #30]
        break;
 8002b3a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d074      	beq.n	8002c2c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	005a      	lsls	r2, r3, #1
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	085b      	lsrs	r3, r3, #1
 8002b4c:	441a      	add	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	2b0f      	cmp	r3, #15
 8002b5e:	d916      	bls.n	8002b8e <UART_SetConfig+0x402>
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b66:	d212      	bcs.n	8002b8e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	f023 030f 	bic.w	r3, r3, #15
 8002b70:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	085b      	lsrs	r3, r3, #1
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	89fb      	ldrh	r3, [r7, #14]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	89fa      	ldrh	r2, [r7, #14]
 8002b8a:	60da      	str	r2, [r3, #12]
 8002b8c:	e04e      	b.n	8002c2c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	77bb      	strb	r3, [r7, #30]
 8002b92:	e04b      	b.n	8002c2c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b94:	7ffb      	ldrb	r3, [r7, #31]
 8002b96:	2b08      	cmp	r3, #8
 8002b98:	d827      	bhi.n	8002bea <UART_SetConfig+0x45e>
 8002b9a:	a201      	add	r2, pc, #4	; (adr r2, 8002ba0 <UART_SetConfig+0x414>)
 8002b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba0:	08002bc5 	.word	0x08002bc5
 8002ba4:	08002bcd 	.word	0x08002bcd
 8002ba8:	08002bd5 	.word	0x08002bd5
 8002bac:	08002beb 	.word	0x08002beb
 8002bb0:	08002bdb 	.word	0x08002bdb
 8002bb4:	08002beb 	.word	0x08002beb
 8002bb8:	08002beb 	.word	0x08002beb
 8002bbc:	08002beb 	.word	0x08002beb
 8002bc0:	08002be3 	.word	0x08002be3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bc4:	f7fe feea 	bl	800199c <HAL_RCC_GetPCLK1Freq>
 8002bc8:	61b8      	str	r0, [r7, #24]
        break;
 8002bca:	e013      	b.n	8002bf4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002bcc:	f7fe fefa 	bl	80019c4 <HAL_RCC_GetPCLK2Freq>
 8002bd0:	61b8      	str	r0, [r7, #24]
        break;
 8002bd2:	e00f      	b.n	8002bf4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bd4:	4b1d      	ldr	r3, [pc, #116]	; (8002c4c <UART_SetConfig+0x4c0>)
 8002bd6:	61bb      	str	r3, [r7, #24]
        break;
 8002bd8:	e00c      	b.n	8002bf4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bda:	f7fe fe1d 	bl	8001818 <HAL_RCC_GetSysClockFreq>
 8002bde:	61b8      	str	r0, [r7, #24]
        break;
 8002be0:	e008      	b.n	8002bf4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002be2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002be6:	61bb      	str	r3, [r7, #24]
        break;
 8002be8:	e004      	b.n	8002bf4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8002bea:	2300      	movs	r3, #0
 8002bec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	77bb      	strb	r3, [r7, #30]
        break;
 8002bf2:	bf00      	nop
    }

    if (pclk != 0U)
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d018      	beq.n	8002c2c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	085a      	lsrs	r2, r3, #1
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	441a      	add	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	2b0f      	cmp	r3, #15
 8002c14:	d908      	bls.n	8002c28 <UART_SetConfig+0x49c>
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c1c:	d204      	bcs.n	8002c28 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	60da      	str	r2, [r3, #12]
 8002c26:	e001      	b.n	8002c2c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002c38:	7fbb      	ldrb	r3, [r7, #30]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3720      	adds	r7, #32
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40007c00 	.word	0x40007c00
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	00f42400 	.word	0x00f42400

08002c50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00a      	beq.n	8002c7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00a      	beq.n	8002c9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00a      	beq.n	8002cbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	f003 0308 	and.w	r3, r3, #8
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00a      	beq.n	8002ce0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	f003 0310 	and.w	r3, r3, #16
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00a      	beq.n	8002d02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	f003 0320 	and.w	r3, r3, #32
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00a      	beq.n	8002d24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d01a      	beq.n	8002d66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d4e:	d10a      	bne.n	8002d66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00a      	beq.n	8002d88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	605a      	str	r2, [r3, #4]
  }
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af02      	add	r7, sp, #8
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002da4:	f7fd fe18 	bl	80009d8 <HAL_GetTick>
 8002da8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0308 	and.w	r3, r3, #8
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	d10e      	bne.n	8002dd6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002db8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f817 	bl	8002dfa <UART_WaitOnFlagUntilTimeout>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e00d      	b.n	8002df2 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2220      	movs	r2, #32
 8002dda:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2220      	movs	r2, #32
 8002de0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b084      	sub	sp, #16
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	60f8      	str	r0, [r7, #12]
 8002e02:	60b9      	str	r1, [r7, #8]
 8002e04:	603b      	str	r3, [r7, #0]
 8002e06:	4613      	mov	r3, r2
 8002e08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e0a:	e05e      	b.n	8002eca <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e12:	d05a      	beq.n	8002eca <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e14:	f7fd fde0 	bl	80009d8 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d302      	bcc.n	8002e2a <UART_WaitOnFlagUntilTimeout+0x30>
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d11b      	bne.n	8002e62 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e38:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 0201 	bic.w	r2, r2, #1
 8002e48:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2220      	movs	r2, #32
 8002e54:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e043      	b.n	8002eea <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d02c      	beq.n	8002eca <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e7e:	d124      	bne.n	8002eca <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e88:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e98:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 0201 	bic.w	r2, r2, #1
 8002ea8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2220      	movs	r2, #32
 8002eae:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e00f      	b.n	8002eea <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	69da      	ldr	r2, [r3, #28]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	68ba      	ldr	r2, [r7, #8]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	bf0c      	ite	eq
 8002eda:	2301      	moveq	r3, #1
 8002edc:	2300      	movne	r3, #0
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	79fb      	ldrb	r3, [r7, #7]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d091      	beq.n	8002e0c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
	...

08002ef4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	4613      	mov	r3, r2
 8002f00:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	88fa      	ldrh	r2, [r7, #6]
 8002f0c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	88fa      	ldrh	r2, [r7, #6]
 8002f14:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f26:	d10e      	bne.n	8002f46 <UART_Start_Receive_IT+0x52>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d105      	bne.n	8002f3c <UART_Start_Receive_IT+0x48>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002f36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002f3a:	e02d      	b.n	8002f98 <UART_Start_Receive_IT+0xa4>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	22ff      	movs	r2, #255	; 0xff
 8002f40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002f44:	e028      	b.n	8002f98 <UART_Start_Receive_IT+0xa4>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10d      	bne.n	8002f6a <UART_Start_Receive_IT+0x76>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d104      	bne.n	8002f60 <UART_Start_Receive_IT+0x6c>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	22ff      	movs	r2, #255	; 0xff
 8002f5a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002f5e:	e01b      	b.n	8002f98 <UART_Start_Receive_IT+0xa4>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	227f      	movs	r2, #127	; 0x7f
 8002f64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002f68:	e016      	b.n	8002f98 <UART_Start_Receive_IT+0xa4>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f72:	d10d      	bne.n	8002f90 <UART_Start_Receive_IT+0x9c>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d104      	bne.n	8002f86 <UART_Start_Receive_IT+0x92>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	227f      	movs	r2, #127	; 0x7f
 8002f80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002f84:	e008      	b.n	8002f98 <UART_Start_Receive_IT+0xa4>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	223f      	movs	r2, #63	; 0x3f
 8002f8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002f8e:	e003      	b.n	8002f98 <UART_Start_Receive_IT+0xa4>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2222      	movs	r2, #34	; 0x22
 8002fa4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f042 0201 	orr.w	r2, r2, #1
 8002fb4:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fbe:	d107      	bne.n	8002fd0 <UART_Start_Receive_IT+0xdc>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d103      	bne.n	8002fd0 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4a0c      	ldr	r2, [pc, #48]	; (8002ffc <UART_Start_Receive_IT+0x108>)
 8002fcc:	665a      	str	r2, [r3, #100]	; 0x64
 8002fce:	e002      	b.n	8002fd6 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4a0b      	ldr	r2, [pc, #44]	; (8003000 <UART_Start_Receive_IT+0x10c>)
 8002fd4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8002fec:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3714      	adds	r7, #20
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	08003283 	.word	0x08003283
 8003000:	080031af 	.word	0x080031af

08003004 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800301a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 0201 	bic.w	r2, r2, #1
 800302a:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003030:	2b01      	cmp	r3, #1
 8003032:	d107      	bne.n	8003044 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0210 	bic.w	r2, r2, #16
 8003042:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2220      	movs	r2, #32
 8003048:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b084      	sub	sp, #16
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f7fd fa3d 	bl	8000500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003086:	bf00      	nop
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800308e:	b480      	push	{r7}
 8003090:	b083      	sub	sp, #12
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800309a:	2b21      	cmp	r3, #33	; 0x21
 800309c:	d12a      	bne.n	80030f4 <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d110      	bne.n	80030cc <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030b8:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030c8:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80030ca:	e013      	b.n	80030f4 <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d0:	781a      	ldrb	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030dc:	1c5a      	adds	r2, r3, #1
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	3b01      	subs	r3, #1
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800310c:	2b21      	cmp	r3, #33	; 0x21
 800310e:	d12f      	bne.n	8003170 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003116:	b29b      	uxth	r3, r3
 8003118:	2b00      	cmp	r3, #0
 800311a:	d110      	bne.n	800313e <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800312a:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800313a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800313c:	e018      	b.n	8003170 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003142:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	881b      	ldrh	r3, [r3, #0]
 8003148:	461a      	mov	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003152:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003158:	1c9a      	adds	r2, r3, #2
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003164:	b29b      	uxth	r3, r3
 8003166:	3b01      	subs	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003170:	bf00      	nop
 8003172:	3714      	adds	r7, #20
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003192:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2220      	movs	r2, #32
 8003198:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f7fd f9d9 	bl	8000558 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031a6:	bf00      	nop
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b084      	sub	sp, #16
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80031bc:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031c2:	2b22      	cmp	r3, #34	; 0x22
 80031c4:	d151      	bne.n	800326a <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80031ce:	89bb      	ldrh	r3, [r7, #12]
 80031d0:	b2d9      	uxtb	r1, r3
 80031d2:	89fb      	ldrh	r3, [r7, #14]
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031da:	400a      	ands	r2, r1
 80031dc:	b2d2      	uxtb	r2, r2
 80031de:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e4:	1c5a      	adds	r2, r3, #1
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	3b01      	subs	r3, #1
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003202:	b29b      	uxth	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d138      	bne.n	800327a <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003216:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689a      	ldr	r2, [r3, #8]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0201 	bic.w	r2, r2, #1
 8003226:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2220      	movs	r2, #32
 800322c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003238:	2b01      	cmp	r3, #1
 800323a:	d10f      	bne.n	800325c <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 0210 	bic.w	r2, r2, #16
 800324a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003252:	4619      	mov	r1, r3
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7ff fa8d 	bl	8002774 <HAL_UARTEx_RxEventCallback>
 800325a:	e002      	b.n	8003262 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f7fd f95d 	bl	800051c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003268:	e007      	b.n	800327a <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	699a      	ldr	r2, [r3, #24]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f042 0208 	orr.w	r2, r2, #8
 8003278:	619a      	str	r2, [r3, #24]
}
 800327a:	bf00      	nop
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b084      	sub	sp, #16
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003290:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003296:	2b22      	cmp	r3, #34	; 0x22
 8003298:	d151      	bne.n	800333e <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a6:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80032a8:	89ba      	ldrh	r2, [r7, #12]
 80032aa:	89fb      	ldrh	r3, [r7, #14]
 80032ac:	4013      	ands	r3, r2
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b8:	1c9a      	adds	r2, r3, #2
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	3b01      	subs	r3, #1
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d138      	bne.n	800334e <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80032ea:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0201 	bic.w	r2, r2, #1
 80032fa:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2220      	movs	r2, #32
 8003300:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800330c:	2b01      	cmp	r3, #1
 800330e:	d10f      	bne.n	8003330 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0210 	bic.w	r2, r2, #16
 800331e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003326:	4619      	mov	r1, r3
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f7ff fa23 	bl	8002774 <HAL_UARTEx_RxEventCallback>
 800332e:	e002      	b.n	8003336 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f7fd f8f3 	bl	800051c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800333c:	e007      	b.n	800334e <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	699a      	ldr	r2, [r3, #24]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f042 0208 	orr.w	r2, r2, #8
 800334c:	619a      	str	r2, [r3, #24]
}
 800334e:	bf00      	nop
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
	...

08003358 <__libc_init_array>:
 8003358:	b570      	push	{r4, r5, r6, lr}
 800335a:	4d0d      	ldr	r5, [pc, #52]	; (8003390 <__libc_init_array+0x38>)
 800335c:	4c0d      	ldr	r4, [pc, #52]	; (8003394 <__libc_init_array+0x3c>)
 800335e:	1b64      	subs	r4, r4, r5
 8003360:	10a4      	asrs	r4, r4, #2
 8003362:	2600      	movs	r6, #0
 8003364:	42a6      	cmp	r6, r4
 8003366:	d109      	bne.n	800337c <__libc_init_array+0x24>
 8003368:	4d0b      	ldr	r5, [pc, #44]	; (8003398 <__libc_init_array+0x40>)
 800336a:	4c0c      	ldr	r4, [pc, #48]	; (800339c <__libc_init_array+0x44>)
 800336c:	f000 f820 	bl	80033b0 <_init>
 8003370:	1b64      	subs	r4, r4, r5
 8003372:	10a4      	asrs	r4, r4, #2
 8003374:	2600      	movs	r6, #0
 8003376:	42a6      	cmp	r6, r4
 8003378:	d105      	bne.n	8003386 <__libc_init_array+0x2e>
 800337a:	bd70      	pop	{r4, r5, r6, pc}
 800337c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003380:	4798      	blx	r3
 8003382:	3601      	adds	r6, #1
 8003384:	e7ee      	b.n	8003364 <__libc_init_array+0xc>
 8003386:	f855 3b04 	ldr.w	r3, [r5], #4
 800338a:	4798      	blx	r3
 800338c:	3601      	adds	r6, #1
 800338e:	e7f2      	b.n	8003376 <__libc_init_array+0x1e>
 8003390:	080033e8 	.word	0x080033e8
 8003394:	080033e8 	.word	0x080033e8
 8003398:	080033e8 	.word	0x080033e8
 800339c:	080033ec 	.word	0x080033ec

080033a0 <memset>:
 80033a0:	4402      	add	r2, r0
 80033a2:	4603      	mov	r3, r0
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d100      	bne.n	80033aa <memset+0xa>
 80033a8:	4770      	bx	lr
 80033aa:	f803 1b01 	strb.w	r1, [r3], #1
 80033ae:	e7f9      	b.n	80033a4 <memset+0x4>

080033b0 <_init>:
 80033b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033b2:	bf00      	nop
 80033b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033b6:	bc08      	pop	{r3}
 80033b8:	469e      	mov	lr, r3
 80033ba:	4770      	bx	lr

080033bc <_fini>:
 80033bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033be:	bf00      	nop
 80033c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033c2:	bc08      	pop	{r3}
 80033c4:	469e      	mov	lr, r3
 80033c6:	4770      	bx	lr
