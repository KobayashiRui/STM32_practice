
UART_Interrupt_and_Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000478c  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004954  08004954  00014954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800496c  0800496c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800496c  0800496c  0001496c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004974  08004974  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004974  08004974  00014974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004978  08004978  00014978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800497c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  08004988  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08004988  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df5d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d8d  00000000  00000000  0002df99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  0002fd28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c88  00000000  00000000  00030a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002515a  00000000  00000000  000316f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed06  00000000  00000000  0005684a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb657  00000000  00000000  00065550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00150ba7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000379c  00000000  00000000  00150bfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800493c 	.word	0x0800493c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	0800493c 	.word	0x0800493c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b96e 	b.w	80004fc <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468c      	mov	ip, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	f040 8083 	bne.w	800034e <__udivmoddi4+0x116>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d947      	bls.n	80002de <__udivmoddi4+0xa6>
 800024e:	fab2 f282 	clz	r2, r2
 8000252:	b142      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000254:	f1c2 0020 	rsb	r0, r2, #32
 8000258:	fa24 f000 	lsr.w	r0, r4, r0
 800025c:	4091      	lsls	r1, r2
 800025e:	4097      	lsls	r7, r2
 8000260:	ea40 0c01 	orr.w	ip, r0, r1
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbbc f6f8 	udiv	r6, ip, r8
 8000270:	fa1f fe87 	uxth.w	lr, r7
 8000274:	fb08 c116 	mls	r1, r8, r6, ip
 8000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027c:	fb06 f10e 	mul.w	r1, r6, lr
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 8119 	bcs.w	80004c0 <__udivmoddi4+0x288>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8116 	bls.w	80004c0 <__udivmoddi4+0x288>
 8000294:	3e02      	subs	r6, #2
 8000296:	443b      	add	r3, r7
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ac:	45a6      	cmp	lr, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	193c      	adds	r4, r7, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b6:	f080 8105 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	f240 8102 	bls.w	80004c4 <__udivmoddi4+0x28c>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c8:	eba4 040e 	sub.w	r4, r4, lr
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xaa>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d150      	bne.n	800038c <__udivmoddi4+0x154>
 80002ea:	1bcb      	subs	r3, r1, r7
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	fa1f f887 	uxth.w	r8, r7
 80002f4:	2601      	movs	r6, #1
 80002f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002fa:	0c21      	lsrs	r1, r4, #16
 80002fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000304:	fb08 f30c 	mul.w	r3, r8, ip
 8000308:	428b      	cmp	r3, r1
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0xe4>
 800030c:	1879      	adds	r1, r7, r1
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0xe2>
 8000314:	428b      	cmp	r3, r1
 8000316:	f200 80e9 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 800031a:	4684      	mov	ip, r0
 800031c:	1ac9      	subs	r1, r1, r3
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x10c>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x10a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80d9 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e7bf      	b.n	80002ce <__udivmoddi4+0x96>
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x12e>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80b1 	beq.w	80004ba <__udivmoddi4+0x282>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x1cc>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0x140>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80b8 	bhi.w	80004e8 <__udivmoddi4+0x2b0>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0103 	sbc.w	r1, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	468c      	mov	ip, r1
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0a8      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000386:	e9c5 4c00 	strd	r4, ip, [r5]
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0xa0>
 800038c:	f1c2 0320 	rsb	r3, r2, #32
 8000390:	fa20 f603 	lsr.w	r6, r0, r3
 8000394:	4097      	lsls	r7, r2
 8000396:	fa01 f002 	lsl.w	r0, r1, r2
 800039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039e:	40d9      	lsrs	r1, r3
 80003a0:	4330      	orrs	r0, r6
 80003a2:	0c03      	lsrs	r3, r0, #16
 80003a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f108 	mul.w	r1, r6, r8
 80003b8:	4299      	cmp	r1, r3
 80003ba:	fa04 f402 	lsl.w	r4, r4, r2
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x19c>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003c6:	f080 808d 	bcs.w	80004e4 <__udivmoddi4+0x2ac>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 808a 	bls.w	80004e4 <__udivmoddi4+0x2ac>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	443b      	add	r3, r7
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b281      	uxth	r1, r0
 80003d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb00 f308 	mul.w	r3, r0, r8
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x1c4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003f2:	d273      	bcs.n	80004dc <__udivmoddi4+0x2a4>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d971      	bls.n	80004dc <__udivmoddi4+0x2a4>
 80003f8:	3802      	subs	r0, #2
 80003fa:	4439      	add	r1, r7
 80003fc:	1acb      	subs	r3, r1, r3
 80003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000402:	e778      	b.n	80002f6 <__udivmoddi4+0xbe>
 8000404:	f1c6 0c20 	rsb	ip, r6, #32
 8000408:	fa03 f406 	lsl.w	r4, r3, r6
 800040c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000410:	431c      	orrs	r4, r3
 8000412:	fa20 f70c 	lsr.w	r7, r0, ip
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000422:	431f      	orrs	r7, r3
 8000424:	0c3b      	lsrs	r3, r7, #16
 8000426:	fbb1 f9fe 	udiv	r9, r1, lr
 800042a:	fa1f f884 	uxth.w	r8, r4
 800042e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000436:	fb09 fa08 	mul.w	sl, r9, r8
 800043a:	458a      	cmp	sl, r1
 800043c:	fa02 f206 	lsl.w	r2, r2, r6
 8000440:	fa00 f306 	lsl.w	r3, r0, r6
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x220>
 8000446:	1861      	adds	r1, r4, r1
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800044c:	d248      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 800044e:	458a      	cmp	sl, r1
 8000450:	d946      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	4421      	add	r1, r4
 8000458:	eba1 010a 	sub.w	r1, r1, sl
 800045c:	b2bf      	uxth	r7, r7
 800045e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000462:	fb0e 1110 	mls	r1, lr, r0, r1
 8000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45b8      	cmp	r8, r7
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x24a>
 8000472:	19e7      	adds	r7, r4, r7
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000478:	d22e      	bcs.n	80004d8 <__udivmoddi4+0x2a0>
 800047a:	45b8      	cmp	r8, r7
 800047c:	d92c      	bls.n	80004d8 <__udivmoddi4+0x2a0>
 800047e:	3802      	subs	r0, #2
 8000480:	4427      	add	r7, r4
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba7 0708 	sub.w	r7, r7, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454f      	cmp	r7, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	4649      	mov	r1, r9
 8000494:	d31a      	bcc.n	80004cc <__udivmoddi4+0x294>
 8000496:	d017      	beq.n	80004c8 <__udivmoddi4+0x290>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x27a>
 800049a:	ebb3 020e 	subs.w	r2, r3, lr
 800049e:	eb67 0701 	sbc.w	r7, r7, r1
 80004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a6:	40f2      	lsrs	r2, r6
 80004a8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ac:	40f7      	lsrs	r7, r6
 80004ae:	e9c5 2700 	strd	r2, r7, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e70b      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fd      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004c8:	4543      	cmp	r3, r8
 80004ca:	d2e5      	bcs.n	8000498 <__udivmoddi4+0x260>
 80004cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d0:	eb69 0104 	sbc.w	r1, r9, r4
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7df      	b.n	8000498 <__udivmoddi4+0x260>
 80004d8:	4608      	mov	r0, r1
 80004da:	e7d2      	b.n	8000482 <__udivmoddi4+0x24a>
 80004dc:	4660      	mov	r0, ip
 80004de:	e78d      	b.n	80003fc <__udivmoddi4+0x1c4>
 80004e0:	4681      	mov	r9, r0
 80004e2:	e7b9      	b.n	8000458 <__udivmoddi4+0x220>
 80004e4:	4666      	mov	r6, ip
 80004e6:	e775      	b.n	80003d4 <__udivmoddi4+0x19c>
 80004e8:	4630      	mov	r0, r6
 80004ea:	e74a      	b.n	8000382 <__udivmoddi4+0x14a>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	4439      	add	r1, r7
 80004f2:	e713      	b.n	800031c <__udivmoddi4+0xe4>
 80004f4:	3802      	subs	r0, #2
 80004f6:	443c      	add	r4, r7
 80004f8:	e724      	b.n	8000344 <__udivmoddi4+0x10c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <HAL_UART_ErrorCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000508:	2180      	movs	r1, #128	; 0x80
 800050a:	4803      	ldr	r0, [pc, #12]	; (8000518 <HAL_UART_ErrorCallback+0x18>)
 800050c:	f000 feeb 	bl	80012e6 <HAL_GPIO_TogglePin>
}
 8000510:	bf00      	nop
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	40020400 	.word	0x40020400

0800051c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart3, aRxBuffer, 8);
 8000524:	2208      	movs	r2, #8
 8000526:	4908      	ldr	r1, [pc, #32]	; (8000548 <HAL_UART_RxCpltCallback+0x2c>)
 8000528:	4808      	ldr	r0, [pc, #32]	; (800054c <HAL_UART_RxCpltCallback+0x30>)
 800052a:	f003 f9bf 	bl	80038ac <HAL_UART_Receive_IT>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800052e:	2180      	movs	r1, #128	; 0x80
 8000530:	4807      	ldr	r0, [pc, #28]	; (8000550 <HAL_UART_RxCpltCallback+0x34>)
 8000532:	f000 fed8 	bl	80012e6 <HAL_GPIO_TogglePin>
	HAL_UART_Transmit_IT(&huart3, aTxBuffer, 8);
 8000536:	2208      	movs	r2, #8
 8000538:	4906      	ldr	r1, [pc, #24]	; (8000554 <HAL_UART_RxCpltCallback+0x38>)
 800053a:	4804      	ldr	r0, [pc, #16]	; (800054c <HAL_UART_RxCpltCallback+0x30>)
 800053c:	f003 f95a 	bl	80037f4 <HAL_UART_Transmit_IT>
}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	20000028 	.word	0x20000028
 800054c:	20000038 	.word	0x20000038
 8000550:	40020400 	.word	0x40020400
 8000554:	20000030 	.word	0x20000030

08000558 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_IT(&huart3, aRxBuffer, 8);
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000560:	2180      	movs	r1, #128	; 0x80
 8000562:	4803      	ldr	r0, [pc, #12]	; (8000570 <HAL_UART_TxCpltCallback+0x18>)
 8000564:	f000 febf 	bl	80012e6 <HAL_GPIO_TogglePin>
}
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40020400 	.word	0x40020400

08000574 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef * htim){
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800057c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000580:	4805      	ldr	r0, [pc, #20]	; (8000598 <HAL_TIM_OC_DelayElapsedCallback+0x24>)
 8000582:	f000 feb0 	bl	80012e6 <HAL_GPIO_TogglePin>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000586:	4b05      	ldr	r3, [pc, #20]	; (800059c <HAL_TIM_OC_DelayElapsedCallback+0x28>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2200      	movs	r2, #0
 800058c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40020400 	.word	0x40020400
 800059c:	200000bc 	.word	0x200000bc

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a4:	f000 fad9 	bl	8000b5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a8:	f000 f816 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ac:	f000 f980 	bl	80008b0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005b0:	f000 f94e 	bl	8000850 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80005b4:	f000 f8a2 	bl	80006fc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, aRxBuffer, 8);
 80005b8:	2208      	movs	r2, #8
 80005ba:	4904      	ldr	r1, [pc, #16]	; (80005cc <main+0x2c>)
 80005bc:	4804      	ldr	r0, [pc, #16]	; (80005d0 <main+0x30>)
 80005be:	f003 f975 	bl	80038ac <HAL_UART_Receive_IT>
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80005c2:	2100      	movs	r1, #0
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <main+0x34>)
 80005c6:	f002 f81b 	bl	8002600 <HAL_TIM_OC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ca:	e7fe      	b.n	80005ca <main+0x2a>
 80005cc:	20000028 	.word	0x20000028
 80005d0:	20000038 	.word	0x20000038
 80005d4:	200000bc 	.word	0x200000bc

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b0b4      	sub	sp, #208	; 0xd0
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80005e2:	2230      	movs	r2, #48	; 0x30
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f004 f9a0 	bl	800492c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005fc:	f107 0308 	add.w	r3, r7, #8
 8000600:	2284      	movs	r2, #132	; 0x84
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f004 f991 	bl	800492c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060a:	4b3a      	ldr	r3, [pc, #232]	; (80006f4 <SystemClock_Config+0x11c>)
 800060c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060e:	4a39      	ldr	r2, [pc, #228]	; (80006f4 <SystemClock_Config+0x11c>)
 8000610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000614:	6413      	str	r3, [r2, #64]	; 0x40
 8000616:	4b37      	ldr	r3, [pc, #220]	; (80006f4 <SystemClock_Config+0x11c>)
 8000618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000622:	4b35      	ldr	r3, [pc, #212]	; (80006f8 <SystemClock_Config+0x120>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800062a:	4a33      	ldr	r2, [pc, #204]	; (80006f8 <SystemClock_Config+0x120>)
 800062c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000630:	6013      	str	r3, [r2, #0]
 8000632:	4b31      	ldr	r3, [pc, #196]	; (80006f8 <SystemClock_Config+0x120>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800063a:	603b      	str	r3, [r7, #0]
 800063c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800063e:	2302      	movs	r3, #2
 8000640:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000644:	2301      	movs	r3, #1
 8000646:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064a:	2310      	movs	r3, #16
 800064c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000650:	2302      	movs	r3, #2
 8000652:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000656:	2300      	movs	r3, #0
 8000658:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 16;
 800065c:	2310      	movs	r3, #16
 800065e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000662:	23c0      	movs	r3, #192	; 0xc0
 8000664:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000668:	2302      	movs	r3, #2
 800066a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800066e:	2302      	movs	r3, #2
 8000670:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000678:	4618      	mov	r0, r3
 800067a:	f000 fe9f 	bl	80013bc <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000684:	f000 f954 	bl	8000930 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000688:	f000 fe48 	bl	800131c <HAL_PWREx_EnableOverDrive>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000692:	f000 f94d 	bl	8000930 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000696:	230f      	movs	r3, #15
 8000698:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069c:	2302      	movs	r3, #2
 800069e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006b6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80006ba:	2103      	movs	r1, #3
 80006bc:	4618      	mov	r0, r3
 80006be:	f001 f921 	bl	8001904 <HAL_RCC_ClockConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80006c8:	f000 f932 	bl	8000930 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80006cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006d0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006d6:	f107 0308 	add.w	r3, r7, #8
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 fae8 	bl	8001cb0 <HAL_RCCEx_PeriphCLKConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x112>
  {
    Error_Handler();
 80006e6:	f000 f923 	bl	8000930 <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	37d0      	adds	r7, #208	; 0xd0
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b09a      	sub	sp, #104	; 0x68
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000702:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000710:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800071c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
 800072c:	615a      	str	r2, [r3, #20]
 800072e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	222c      	movs	r2, #44	; 0x2c
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f004 f8f8 	bl	800492c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800073c:	4b42      	ldr	r3, [pc, #264]	; (8000848 <MX_TIM1_Init+0x14c>)
 800073e:	4a43      	ldr	r2, [pc, #268]	; (800084c <MX_TIM1_Init+0x150>)
 8000740:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8000742:	4b41      	ldr	r3, [pc, #260]	; (8000848 <MX_TIM1_Init+0x14c>)
 8000744:	220f      	movs	r2, #15
 8000746:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000748:	4b3f      	ldr	r3, [pc, #252]	; (8000848 <MX_TIM1_Init+0x14c>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800074e:	4b3e      	ldr	r3, [pc, #248]	; (8000848 <MX_TIM1_Init+0x14c>)
 8000750:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000754:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000756:	4b3c      	ldr	r3, [pc, #240]	; (8000848 <MX_TIM1_Init+0x14c>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800075c:	4b3a      	ldr	r3, [pc, #232]	; (8000848 <MX_TIM1_Init+0x14c>)
 800075e:	2200      	movs	r2, #0
 8000760:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000762:	4b39      	ldr	r3, [pc, #228]	; (8000848 <MX_TIM1_Init+0x14c>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000768:	4837      	ldr	r0, [pc, #220]	; (8000848 <MX_TIM1_Init+0x14c>)
 800076a:	f001 fe91 	bl	8002490 <HAL_TIM_Base_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000774:	f000 f8dc 	bl	8000930 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800077e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000782:	4619      	mov	r1, r3
 8000784:	4830      	ldr	r0, [pc, #192]	; (8000848 <MX_TIM1_Init+0x14c>)
 8000786:	f002 fa11 	bl	8002bac <HAL_TIM_ConfigClockSource>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000790:	f000 f8ce 	bl	8000930 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000794:	482c      	ldr	r0, [pc, #176]	; (8000848 <MX_TIM1_Init+0x14c>)
 8000796:	f001 fed2 	bl	800253e <HAL_TIM_OC_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80007a0:	f000 f8c6 	bl	8000930 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007a4:	2300      	movs	r3, #0
 80007a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007a8:	2300      	movs	r3, #0
 80007aa:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ac:	2300      	movs	r3, #0
 80007ae:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007b4:	4619      	mov	r1, r3
 80007b6:	4824      	ldr	r0, [pc, #144]	; (8000848 <MX_TIM1_Init+0x14c>)
 80007b8:	f002 fea4 	bl	8003504 <HAL_TIMEx_MasterConfigSynchronization>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80007c2:	f000 f8b5 	bl	8000930 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80007c6:	2300      	movs	r3, #0
 80007c8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1;
 80007ca:	2301      	movs	r3, #1
 80007cc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ce:	2300      	movs	r3, #0
 80007d0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007d2:	2300      	movs	r3, #0
 80007d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007da:	2300      	movs	r3, #0
 80007dc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007de:	2300      	movs	r3, #0
 80007e0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007e6:	2200      	movs	r2, #0
 80007e8:	4619      	mov	r1, r3
 80007ea:	4817      	ldr	r0, [pc, #92]	; (8000848 <MX_TIM1_Init+0x14c>)
 80007ec:	f002 f968 	bl	8002ac0 <HAL_TIM_OC_ConfigChannel>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80007f6:	f000 f89b 	bl	8000930 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007fe:	2300      	movs	r3, #0
 8000800:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800080e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000812:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000818:	2300      	movs	r3, #0
 800081a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800081c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000826:	2300      	movs	r3, #0
 8000828:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	4619      	mov	r1, r3
 800082e:	4806      	ldr	r0, [pc, #24]	; (8000848 <MX_TIM1_Init+0x14c>)
 8000830:	f002 fef6 	bl	8003620 <HAL_TIMEx_ConfigBreakDeadTime>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800083a:	f000 f879 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	3768      	adds	r7, #104	; 0x68
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200000bc 	.word	0x200000bc
 800084c:	40010000 	.word	0x40010000

08000850 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000854:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_USART3_UART_Init+0x58>)
 8000856:	4a15      	ldr	r2, [pc, #84]	; (80008ac <MX_USART3_UART_Init+0x5c>)
 8000858:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800085a:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <MX_USART3_UART_Init+0x58>)
 800085c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000860:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_USART3_UART_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_USART3_UART_Init+0x58>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_USART3_UART_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_USART3_UART_Init+0x58>)
 8000876:	220c      	movs	r2, #12
 8000878:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087a:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <MX_USART3_UART_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000880:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_USART3_UART_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <MX_USART3_UART_Init+0x58>)
 8000888:	2200      	movs	r2, #0
 800088a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <MX_USART3_UART_Init+0x58>)
 800088e:	2200      	movs	r2, #0
 8000890:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000892:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_USART3_UART_Init+0x58>)
 8000894:	f002 ff60 	bl	8003758 <HAL_UART_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800089e:	f000 f847 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000038 	.word	0x20000038
 80008ac:	40004800 	.word	0x40004800

080008b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	f107 030c 	add.w	r3, r7, #12
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c6:	4b18      	ldr	r3, [pc, #96]	; (8000928 <MX_GPIO_Init+0x78>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a17      	ldr	r2, [pc, #92]	; (8000928 <MX_GPIO_Init+0x78>)
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <MX_GPIO_Init+0x78>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008de:	4b12      	ldr	r3, [pc, #72]	; (8000928 <MX_GPIO_Init+0x78>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a11      	ldr	r2, [pc, #68]	; (8000928 <MX_GPIO_Init+0x78>)
 80008e4:	f043 0308 	orr.w	r3, r3, #8
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_GPIO_Init+0x78>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0308 	and.w	r3, r3, #8
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80008fc:	480b      	ldr	r0, [pc, #44]	; (800092c <MX_GPIO_Init+0x7c>)
 80008fe:	f000 fcd9 	bl	80012b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 8000902:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000906:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000908:	2301      	movs	r3, #1
 800090a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000914:	f107 030c 	add.w	r3, r7, #12
 8000918:	4619      	mov	r1, r3
 800091a:	4804      	ldr	r0, [pc, #16]	; (800092c <MX_GPIO_Init+0x7c>)
 800091c:	f000 fb1e 	bl	8000f5c <HAL_GPIO_Init>

}
 8000920:	bf00      	nop
 8000922:	3720      	adds	r7, #32
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40023800 	.word	0x40023800
 800092c:	40020400 	.word	0x40020400

08000930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000934:	b672      	cpsid	i
}
 8000936:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000938:	e7fe      	b.n	8000938 <Error_Handler+0x8>
	...

0800093c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000942:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <HAL_MspInit+0x44>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	4a0e      	ldr	r2, [pc, #56]	; (8000980 <HAL_MspInit+0x44>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094c:	6413      	str	r3, [r2, #64]	; 0x40
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <HAL_MspInit+0x44>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <HAL_MspInit+0x44>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	4a08      	ldr	r2, [pc, #32]	; (8000980 <HAL_MspInit+0x44>)
 8000960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000964:	6453      	str	r3, [r2, #68]	; 0x44
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <HAL_MspInit+0x44>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000972:	bf00      	nop
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	40023800 	.word	0x40023800

08000984 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a0d      	ldr	r2, [pc, #52]	; (80009c8 <HAL_TIM_Base_MspInit+0x44>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d113      	bne.n	80009be <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000996:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <HAL_TIM_Base_MspInit+0x48>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	4a0c      	ldr	r2, [pc, #48]	; (80009cc <HAL_TIM_Base_MspInit+0x48>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	6453      	str	r3, [r2, #68]	; 0x44
 80009a2:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <HAL_TIM_Base_MspInit+0x48>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2101      	movs	r1, #1
 80009b2:	201b      	movs	r0, #27
 80009b4:	f000 fa09 	bl	8000dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80009b8:	201b      	movs	r0, #27
 80009ba:	f000 fa22 	bl	8000e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40010000 	.word	0x40010000
 80009cc:	40023800 	.word	0x40023800

080009d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	; 0x28
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a1b      	ldr	r2, [pc, #108]	; (8000a5c <HAL_UART_MspInit+0x8c>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d130      	bne.n	8000a54 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009f2:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <HAL_UART_MspInit+0x90>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	4a1a      	ldr	r2, [pc, #104]	; (8000a60 <HAL_UART_MspInit+0x90>)
 80009f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009fc:	6413      	str	r3, [r2, #64]	; 0x40
 80009fe:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <HAL_UART_MspInit+0x90>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0a:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <HAL_UART_MspInit+0x90>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a14      	ldr	r2, [pc, #80]	; (8000a60 <HAL_UART_MspInit+0x90>)
 8000a10:	f043 0308 	orr.w	r3, r3, #8
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <HAL_UART_MspInit+0x90>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0308 	and.w	r3, r3, #8
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a30:	2303      	movs	r3, #3
 8000a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a34:	2307      	movs	r3, #7
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4809      	ldr	r0, [pc, #36]	; (8000a64 <HAL_UART_MspInit+0x94>)
 8000a40:	f000 fa8c 	bl	8000f5c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2100      	movs	r1, #0
 8000a48:	2027      	movs	r0, #39	; 0x27
 8000a4a:	f000 f9be 	bl	8000dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000a4e:	2027      	movs	r0, #39	; 0x27
 8000a50:	f000 f9d7 	bl	8000e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a54:	bf00      	nop
 8000a56:	3728      	adds	r7, #40	; 0x28
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40004800 	.word	0x40004800
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40020c00 	.word	0x40020c00

08000a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <NMI_Handler+0x4>

08000a6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <HardFault_Handler+0x4>

08000a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <MemManage_Handler+0x4>

08000a7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7e:	e7fe      	b.n	8000a7e <BusFault_Handler+0x4>

08000a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <UsageFault_Handler+0x4>

08000a86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab4:	f000 f88e 	bl	8000bd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}

08000abc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ac0:	4802      	ldr	r0, [pc, #8]	; (8000acc <TIM1_CC_IRQHandler+0x10>)
 8000ac2:	f001 fedd 	bl	8002880 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200000bc 	.word	0x200000bc

08000ad0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ad4:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <USART3_IRQHandler+0x10>)
 8000ad6:	f002 ff27 	bl	8003928 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000038 	.word	0x20000038

08000ae4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <SystemInit+0x20>)
 8000aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aee:	4a05      	ldr	r2, [pc, #20]	; (8000b04 <SystemInit+0x20>)
 8000af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b0c:	480d      	ldr	r0, [pc, #52]	; (8000b44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b0e:	490e      	ldr	r1, [pc, #56]	; (8000b48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b10:	4a0e      	ldr	r2, [pc, #56]	; (8000b4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b14:	e002      	b.n	8000b1c <LoopCopyDataInit>

08000b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1a:	3304      	adds	r3, #4

08000b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b20:	d3f9      	bcc.n	8000b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b22:	4a0b      	ldr	r2, [pc, #44]	; (8000b50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b24:	4c0b      	ldr	r4, [pc, #44]	; (8000b54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b28:	e001      	b.n	8000b2e <LoopFillZerobss>

08000b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b2c:	3204      	adds	r2, #4

08000b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b30:	d3fb      	bcc.n	8000b2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b32:	f7ff ffd7 	bl	8000ae4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b36:	f003 fed5 	bl	80048e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b3a:	f7ff fd31 	bl	80005a0 <main>
  bx  lr    
 8000b3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b40:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b48:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b4c:	0800497c 	.word	0x0800497c
  ldr r2, =_sbss
 8000b50:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b54:	2000010c 	.word	0x2000010c

08000b58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b58:	e7fe      	b.n	8000b58 <ADC_IRQHandler>

08000b5a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b5e:	2003      	movs	r0, #3
 8000b60:	f000 f928 	bl	8000db4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b64:	2000      	movs	r0, #0
 8000b66:	f000 f805 	bl	8000b74 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000b6a:	f7ff fee7 	bl	800093c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000b6e:	2300      	movs	r3, #0
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <HAL_InitTick+0x54>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <HAL_InitTick+0x58>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	4619      	mov	r1, r3
 8000b86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b92:	4618      	mov	r0, r3
 8000b94:	f000 f943 	bl	8000e1e <HAL_SYSTICK_Config>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e00e      	b.n	8000bc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2b0f      	cmp	r3, #15
 8000ba6:	d80a      	bhi.n	8000bbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	6879      	ldr	r1, [r7, #4]
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bb0:	f000 f90b 	bl	8000dca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bb4:	4a06      	ldr	r2, [pc, #24]	; (8000bd0 <HAL_InitTick+0x5c>)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e000      	b.n	8000bc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000000 	.word	0x20000000
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	20000004 	.word	0x20000004

08000bd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_IncTick+0x20>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_IncTick+0x24>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4413      	add	r3, r2
 8000be4:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <HAL_IncTick+0x24>)
 8000be6:	6013      	str	r3, [r2, #0]
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	20000008 	.word	0x20000008
 8000bf8:	20000108 	.word	0x20000108

08000bfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000c00:	4b03      	ldr	r3, [pc, #12]	; (8000c10 <HAL_GetTick+0x14>)
 8000c02:	681b      	ldr	r3, [r3, #0]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000108 	.word	0x20000108

08000c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c24:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <__NVIC_SetPriorityGrouping+0x40>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2a:	68ba      	ldr	r2, [r7, #8]
 8000c2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c30:	4013      	ands	r3, r2
 8000c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <__NVIC_SetPriorityGrouping+0x44>)
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c42:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <__NVIC_SetPriorityGrouping+0x40>)
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	60d3      	str	r3, [r2, #12]
}
 8000c48:	bf00      	nop
 8000c4a:	3714      	adds	r7, #20
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000ed00 	.word	0xe000ed00
 8000c58:	05fa0000 	.word	0x05fa0000

08000c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c60:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <__NVIC_GetPriorityGrouping+0x18>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	0a1b      	lsrs	r3, r3, #8
 8000c66:	f003 0307 	and.w	r3, r3, #7
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db0b      	blt.n	8000ca2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	f003 021f 	and.w	r2, r3, #31
 8000c90:	4907      	ldr	r1, [pc, #28]	; (8000cb0 <__NVIC_EnableIRQ+0x38>)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	095b      	lsrs	r3, r3, #5
 8000c98:	2001      	movs	r0, #1
 8000c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000e100 	.word	0xe000e100

08000cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	6039      	str	r1, [r7, #0]
 8000cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	db0a      	blt.n	8000cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	490c      	ldr	r1, [pc, #48]	; (8000d00 <__NVIC_SetPriority+0x4c>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	0112      	lsls	r2, r2, #4
 8000cd4:	b2d2      	uxtb	r2, r2
 8000cd6:	440b      	add	r3, r1
 8000cd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cdc:	e00a      	b.n	8000cf4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4908      	ldr	r1, [pc, #32]	; (8000d04 <__NVIC_SetPriority+0x50>)
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	f003 030f 	and.w	r3, r3, #15
 8000cea:	3b04      	subs	r3, #4
 8000cec:	0112      	lsls	r2, r2, #4
 8000cee:	b2d2      	uxtb	r2, r2
 8000cf0:	440b      	add	r3, r1
 8000cf2:	761a      	strb	r2, [r3, #24]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000e100 	.word	0xe000e100
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b089      	sub	sp, #36	; 0x24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	f1c3 0307 	rsb	r3, r3, #7
 8000d22:	2b04      	cmp	r3, #4
 8000d24:	bf28      	it	cs
 8000d26:	2304      	movcs	r3, #4
 8000d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	2b06      	cmp	r3, #6
 8000d30:	d902      	bls.n	8000d38 <NVIC_EncodePriority+0x30>
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3b03      	subs	r3, #3
 8000d36:	e000      	b.n	8000d3a <NVIC_EncodePriority+0x32>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43da      	mvns	r2, r3
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	401a      	ands	r2, r3
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5a:	43d9      	mvns	r1, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	4313      	orrs	r3, r2
         );
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3724      	adds	r7, #36	; 0x24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
	...

08000d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d80:	d301      	bcc.n	8000d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00f      	b.n	8000da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d86:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <SysTick_Config+0x40>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d8e:	210f      	movs	r1, #15
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d94:	f7ff ff8e 	bl	8000cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <SysTick_Config+0x40>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d9e:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <SysTick_Config+0x40>)
 8000da0:	2207      	movs	r2, #7
 8000da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	e000e010 	.word	0xe000e010

08000db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff ff29 	bl	8000c14 <__NVIC_SetPriorityGrouping>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b086      	sub	sp, #24
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	60b9      	str	r1, [r7, #8]
 8000dd4:	607a      	str	r2, [r7, #4]
 8000dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ddc:	f7ff ff3e 	bl	8000c5c <__NVIC_GetPriorityGrouping>
 8000de0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	68b9      	ldr	r1, [r7, #8]
 8000de6:	6978      	ldr	r0, [r7, #20]
 8000de8:	f7ff ff8e 	bl	8000d08 <NVIC_EncodePriority>
 8000dec:	4602      	mov	r2, r0
 8000dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df2:	4611      	mov	r1, r2
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff5d 	bl	8000cb4 <__NVIC_SetPriority>
}
 8000dfa:	bf00      	nop
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	4603      	mov	r3, r0
 8000e0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff31 	bl	8000c78 <__NVIC_EnableIRQ>
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff ffa2 	bl	8000d70 <SysTick_Config>
 8000e2c:	4603      	mov	r3, r0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b084      	sub	sp, #16
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e42:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e44:	f7ff feda 	bl	8000bfc <HAL_GetTick>
 8000e48:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d008      	beq.n	8000e68 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2280      	movs	r2, #128	; 0x80
 8000e5a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	e052      	b.n	8000f0e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f022 0216 	bic.w	r2, r2, #22
 8000e76:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	695a      	ldr	r2, [r3, #20]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e86:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d103      	bne.n	8000e98 <HAL_DMA_Abort+0x62>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d007      	beq.n	8000ea8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f022 0208 	bic.w	r2, r2, #8
 8000ea6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f022 0201 	bic.w	r2, r2, #1
 8000eb6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000eb8:	e013      	b.n	8000ee2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000eba:	f7ff fe9f 	bl	8000bfc <HAL_GetTick>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	2b05      	cmp	r3, #5
 8000ec6:	d90c      	bls.n	8000ee2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2220      	movs	r2, #32
 8000ecc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2203      	movs	r2, #3
 8000eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e015      	b.n	8000f0e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d1e4      	bne.n	8000eba <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ef4:	223f      	movs	r2, #63	; 0x3f
 8000ef6:	409a      	lsls	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2200      	movs	r2, #0
 8000f00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2201      	movs	r2, #1
 8000f08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f16:	b480      	push	{r7}
 8000f18:	b083      	sub	sp, #12
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d004      	beq.n	8000f34 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2280      	movs	r2, #128	; 0x80
 8000f2e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e00c      	b.n	8000f4e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2205      	movs	r2, #5
 8000f38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f022 0201 	bic.w	r2, r2, #1
 8000f4a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
	...

08000f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b089      	sub	sp, #36	; 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
 8000f7a:	e175      	b.n	8001268 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	697a      	ldr	r2, [r7, #20]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	f040 8164 	bne.w	8001262 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d00b      	beq.n	8000fba <HAL_GPIO_Init+0x5e>
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d007      	beq.n	8000fba <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fae:	2b11      	cmp	r3, #17
 8000fb0:	d003      	beq.n	8000fba <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2b12      	cmp	r3, #18
 8000fb8:	d130      	bne.n	800101c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	68da      	ldr	r2, [r3, #12]
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	091b      	lsrs	r3, r3, #4
 8001006:	f003 0201 	and.w	r2, r3, #1
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	2203      	movs	r2, #3
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	689a      	ldr	r2, [r3, #8]
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	2b02      	cmp	r3, #2
 8001052:	d003      	beq.n	800105c <HAL_GPIO_Init+0x100>
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	2b12      	cmp	r3, #18
 800105a:	d123      	bne.n	80010a4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	08da      	lsrs	r2, r3, #3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3208      	adds	r2, #8
 8001064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	f003 0307 	and.w	r3, r3, #7
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	220f      	movs	r2, #15
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	691a      	ldr	r2, [r3, #16]
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	08da      	lsrs	r2, r3, #3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3208      	adds	r2, #8
 800109e:	69b9      	ldr	r1, [r7, #24]
 80010a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	2203      	movs	r2, #3
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 0203 	and.w	r2, r3, #3
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	f000 80be 	beq.w	8001262 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e6:	4b66      	ldr	r3, [pc, #408]	; (8001280 <HAL_GPIO_Init+0x324>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	4a65      	ldr	r2, [pc, #404]	; (8001280 <HAL_GPIO_Init+0x324>)
 80010ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f0:	6453      	str	r3, [r2, #68]	; 0x44
 80010f2:	4b63      	ldr	r3, [pc, #396]	; (8001280 <HAL_GPIO_Init+0x324>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80010fe:	4a61      	ldr	r2, [pc, #388]	; (8001284 <HAL_GPIO_Init+0x328>)
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	089b      	lsrs	r3, r3, #2
 8001104:	3302      	adds	r3, #2
 8001106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	f003 0303 	and.w	r3, r3, #3
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	220f      	movs	r2, #15
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4013      	ands	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a58      	ldr	r2, [pc, #352]	; (8001288 <HAL_GPIO_Init+0x32c>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d037      	beq.n	800119a <HAL_GPIO_Init+0x23e>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a57      	ldr	r2, [pc, #348]	; (800128c <HAL_GPIO_Init+0x330>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d031      	beq.n	8001196 <HAL_GPIO_Init+0x23a>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a56      	ldr	r2, [pc, #344]	; (8001290 <HAL_GPIO_Init+0x334>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d02b      	beq.n	8001192 <HAL_GPIO_Init+0x236>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a55      	ldr	r2, [pc, #340]	; (8001294 <HAL_GPIO_Init+0x338>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d025      	beq.n	800118e <HAL_GPIO_Init+0x232>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a54      	ldr	r2, [pc, #336]	; (8001298 <HAL_GPIO_Init+0x33c>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d01f      	beq.n	800118a <HAL_GPIO_Init+0x22e>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a53      	ldr	r2, [pc, #332]	; (800129c <HAL_GPIO_Init+0x340>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d019      	beq.n	8001186 <HAL_GPIO_Init+0x22a>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a52      	ldr	r2, [pc, #328]	; (80012a0 <HAL_GPIO_Init+0x344>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d013      	beq.n	8001182 <HAL_GPIO_Init+0x226>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a51      	ldr	r2, [pc, #324]	; (80012a4 <HAL_GPIO_Init+0x348>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d00d      	beq.n	800117e <HAL_GPIO_Init+0x222>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a50      	ldr	r2, [pc, #320]	; (80012a8 <HAL_GPIO_Init+0x34c>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d007      	beq.n	800117a <HAL_GPIO_Init+0x21e>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a4f      	ldr	r2, [pc, #316]	; (80012ac <HAL_GPIO_Init+0x350>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d101      	bne.n	8001176 <HAL_GPIO_Init+0x21a>
 8001172:	2309      	movs	r3, #9
 8001174:	e012      	b.n	800119c <HAL_GPIO_Init+0x240>
 8001176:	230a      	movs	r3, #10
 8001178:	e010      	b.n	800119c <HAL_GPIO_Init+0x240>
 800117a:	2308      	movs	r3, #8
 800117c:	e00e      	b.n	800119c <HAL_GPIO_Init+0x240>
 800117e:	2307      	movs	r3, #7
 8001180:	e00c      	b.n	800119c <HAL_GPIO_Init+0x240>
 8001182:	2306      	movs	r3, #6
 8001184:	e00a      	b.n	800119c <HAL_GPIO_Init+0x240>
 8001186:	2305      	movs	r3, #5
 8001188:	e008      	b.n	800119c <HAL_GPIO_Init+0x240>
 800118a:	2304      	movs	r3, #4
 800118c:	e006      	b.n	800119c <HAL_GPIO_Init+0x240>
 800118e:	2303      	movs	r3, #3
 8001190:	e004      	b.n	800119c <HAL_GPIO_Init+0x240>
 8001192:	2302      	movs	r3, #2
 8001194:	e002      	b.n	800119c <HAL_GPIO_Init+0x240>
 8001196:	2301      	movs	r3, #1
 8001198:	e000      	b.n	800119c <HAL_GPIO_Init+0x240>
 800119a:	2300      	movs	r3, #0
 800119c:	69fa      	ldr	r2, [r7, #28]
 800119e:	f002 0203 	and.w	r2, r2, #3
 80011a2:	0092      	lsls	r2, r2, #2
 80011a4:	4093      	lsls	r3, r2
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80011ac:	4935      	ldr	r1, [pc, #212]	; (8001284 <HAL_GPIO_Init+0x328>)
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	089b      	lsrs	r3, r3, #2
 80011b2:	3302      	adds	r3, #2
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011ba:	4b3d      	ldr	r3, [pc, #244]	; (80012b0 <HAL_GPIO_Init+0x354>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	43db      	mvns	r3, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4013      	ands	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011de:	4a34      	ldr	r2, [pc, #208]	; (80012b0 <HAL_GPIO_Init+0x354>)
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011e4:	4b32      	ldr	r3, [pc, #200]	; (80012b0 <HAL_GPIO_Init+0x354>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d003      	beq.n	8001208 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001208:	4a29      	ldr	r2, [pc, #164]	; (80012b0 <HAL_GPIO_Init+0x354>)
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800120e:	4b28      	ldr	r3, [pc, #160]	; (80012b0 <HAL_GPIO_Init+0x354>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	43db      	mvns	r3, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4013      	ands	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001232:	4a1f      	ldr	r2, [pc, #124]	; (80012b0 <HAL_GPIO_Init+0x354>)
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001238:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <HAL_GPIO_Init+0x354>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	43db      	mvns	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d003      	beq.n	800125c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	4313      	orrs	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800125c:	4a14      	ldr	r2, [pc, #80]	; (80012b0 <HAL_GPIO_Init+0x354>)
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3301      	adds	r3, #1
 8001266:	61fb      	str	r3, [r7, #28]
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	2b0f      	cmp	r3, #15
 800126c:	f67f ae86 	bls.w	8000f7c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001270:	bf00      	nop
 8001272:	bf00      	nop
 8001274:	3724      	adds	r7, #36	; 0x24
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	40023800 	.word	0x40023800
 8001284:	40013800 	.word	0x40013800
 8001288:	40020000 	.word	0x40020000
 800128c:	40020400 	.word	0x40020400
 8001290:	40020800 	.word	0x40020800
 8001294:	40020c00 	.word	0x40020c00
 8001298:	40021000 	.word	0x40021000
 800129c:	40021400 	.word	0x40021400
 80012a0:	40021800 	.word	0x40021800
 80012a4:	40021c00 	.word	0x40021c00
 80012a8:	40022000 	.word	0x40022000
 80012ac:	40022400 	.word	0x40022400
 80012b0:	40013c00 	.word	0x40013c00

080012b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	807b      	strh	r3, [r7, #2]
 80012c0:	4613      	mov	r3, r2
 80012c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012c4:	787b      	ldrb	r3, [r7, #1]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ca:	887a      	ldrh	r2, [r7, #2]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80012d0:	e003      	b.n	80012da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80012d2:	887b      	ldrh	r3, [r7, #2]
 80012d4:	041a      	lsls	r2, r3, #16
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	619a      	str	r2, [r3, #24]
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b085      	sub	sp, #20
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
 80012ee:	460b      	mov	r3, r1
 80012f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012f8:	887a      	ldrh	r2, [r7, #2]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	4013      	ands	r3, r2
 80012fe:	041a      	lsls	r2, r3, #16
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	43d9      	mvns	r1, r3
 8001304:	887b      	ldrh	r3, [r7, #2]
 8001306:	400b      	ands	r3, r1
 8001308:	431a      	orrs	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	619a      	str	r2, [r3, #24]
}
 800130e:	bf00      	nop
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001326:	4b23      	ldr	r3, [pc, #140]	; (80013b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	4a22      	ldr	r2, [pc, #136]	; (80013b4 <HAL_PWREx_EnableOverDrive+0x98>)
 800132c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001330:	6413      	str	r3, [r2, #64]	; 0x40
 8001332:	4b20      	ldr	r3, [pc, #128]	; (80013b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800133e:	4b1e      	ldr	r3, [pc, #120]	; (80013b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a1d      	ldr	r2, [pc, #116]	; (80013b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001348:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800134a:	f7ff fc57 	bl	8000bfc <HAL_GetTick>
 800134e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001350:	e009      	b.n	8001366 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001352:	f7ff fc53 	bl	8000bfc <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001360:	d901      	bls.n	8001366 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e022      	b.n	80013ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001366:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800136e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001372:	d1ee      	bne.n	8001352 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001374:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a0f      	ldr	r2, [pc, #60]	; (80013b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800137a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800137e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001380:	f7ff fc3c 	bl	8000bfc <HAL_GetTick>
 8001384:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001386:	e009      	b.n	800139c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001388:	f7ff fc38 	bl	8000bfc <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001396:	d901      	bls.n	800139c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e007      	b.n	80013ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80013a8:	d1ee      	bne.n	8001388 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40007000 	.word	0x40007000

080013bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80013c4:	2300      	movs	r3, #0
 80013c6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e291      	b.n	80018f6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f000 8087 	beq.w	80014ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013e0:	4b96      	ldr	r3, [pc, #600]	; (800163c <HAL_RCC_OscConfig+0x280>)
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f003 030c 	and.w	r3, r3, #12
 80013e8:	2b04      	cmp	r3, #4
 80013ea:	d00c      	beq.n	8001406 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ec:	4b93      	ldr	r3, [pc, #588]	; (800163c <HAL_RCC_OscConfig+0x280>)
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	f003 030c 	and.w	r3, r3, #12
 80013f4:	2b08      	cmp	r3, #8
 80013f6:	d112      	bne.n	800141e <HAL_RCC_OscConfig+0x62>
 80013f8:	4b90      	ldr	r3, [pc, #576]	; (800163c <HAL_RCC_OscConfig+0x280>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001400:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001404:	d10b      	bne.n	800141e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001406:	4b8d      	ldr	r3, [pc, #564]	; (800163c <HAL_RCC_OscConfig+0x280>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d06c      	beq.n	80014ec <HAL_RCC_OscConfig+0x130>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d168      	bne.n	80014ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e26b      	b.n	80018f6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001426:	d106      	bne.n	8001436 <HAL_RCC_OscConfig+0x7a>
 8001428:	4b84      	ldr	r3, [pc, #528]	; (800163c <HAL_RCC_OscConfig+0x280>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a83      	ldr	r2, [pc, #524]	; (800163c <HAL_RCC_OscConfig+0x280>)
 800142e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001432:	6013      	str	r3, [r2, #0]
 8001434:	e02e      	b.n	8001494 <HAL_RCC_OscConfig+0xd8>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d10c      	bne.n	8001458 <HAL_RCC_OscConfig+0x9c>
 800143e:	4b7f      	ldr	r3, [pc, #508]	; (800163c <HAL_RCC_OscConfig+0x280>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a7e      	ldr	r2, [pc, #504]	; (800163c <HAL_RCC_OscConfig+0x280>)
 8001444:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	4b7c      	ldr	r3, [pc, #496]	; (800163c <HAL_RCC_OscConfig+0x280>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a7b      	ldr	r2, [pc, #492]	; (800163c <HAL_RCC_OscConfig+0x280>)
 8001450:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001454:	6013      	str	r3, [r2, #0]
 8001456:	e01d      	b.n	8001494 <HAL_RCC_OscConfig+0xd8>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001460:	d10c      	bne.n	800147c <HAL_RCC_OscConfig+0xc0>
 8001462:	4b76      	ldr	r3, [pc, #472]	; (800163c <HAL_RCC_OscConfig+0x280>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a75      	ldr	r2, [pc, #468]	; (800163c <HAL_RCC_OscConfig+0x280>)
 8001468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	4b73      	ldr	r3, [pc, #460]	; (800163c <HAL_RCC_OscConfig+0x280>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a72      	ldr	r2, [pc, #456]	; (800163c <HAL_RCC_OscConfig+0x280>)
 8001474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	e00b      	b.n	8001494 <HAL_RCC_OscConfig+0xd8>
 800147c:	4b6f      	ldr	r3, [pc, #444]	; (800163c <HAL_RCC_OscConfig+0x280>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a6e      	ldr	r2, [pc, #440]	; (800163c <HAL_RCC_OscConfig+0x280>)
 8001482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	4b6c      	ldr	r3, [pc, #432]	; (800163c <HAL_RCC_OscConfig+0x280>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a6b      	ldr	r2, [pc, #428]	; (800163c <HAL_RCC_OscConfig+0x280>)
 800148e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001492:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d013      	beq.n	80014c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800149c:	f7ff fbae 	bl	8000bfc <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a4:	f7ff fbaa 	bl	8000bfc <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b64      	cmp	r3, #100	; 0x64
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e21f      	b.n	80018f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b6:	4b61      	ldr	r3, [pc, #388]	; (800163c <HAL_RCC_OscConfig+0x280>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0f0      	beq.n	80014a4 <HAL_RCC_OscConfig+0xe8>
 80014c2:	e014      	b.n	80014ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c4:	f7ff fb9a 	bl	8000bfc <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014cc:	f7ff fb96 	bl	8000bfc <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b64      	cmp	r3, #100	; 0x64
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e20b      	b.n	80018f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014de:	4b57      	ldr	r3, [pc, #348]	; (800163c <HAL_RCC_OscConfig+0x280>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1f0      	bne.n	80014cc <HAL_RCC_OscConfig+0x110>
 80014ea:	e000      	b.n	80014ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d069      	beq.n	80015ce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014fa:	4b50      	ldr	r3, [pc, #320]	; (800163c <HAL_RCC_OscConfig+0x280>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f003 030c 	and.w	r3, r3, #12
 8001502:	2b00      	cmp	r3, #0
 8001504:	d00b      	beq.n	800151e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001506:	4b4d      	ldr	r3, [pc, #308]	; (800163c <HAL_RCC_OscConfig+0x280>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f003 030c 	and.w	r3, r3, #12
 800150e:	2b08      	cmp	r3, #8
 8001510:	d11c      	bne.n	800154c <HAL_RCC_OscConfig+0x190>
 8001512:	4b4a      	ldr	r3, [pc, #296]	; (800163c <HAL_RCC_OscConfig+0x280>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d116      	bne.n	800154c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800151e:	4b47      	ldr	r3, [pc, #284]	; (800163c <HAL_RCC_OscConfig+0x280>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d005      	beq.n	8001536 <HAL_RCC_OscConfig+0x17a>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d001      	beq.n	8001536 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e1df      	b.n	80018f6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001536:	4b41      	ldr	r3, [pc, #260]	; (800163c <HAL_RCC_OscConfig+0x280>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	493d      	ldr	r1, [pc, #244]	; (800163c <HAL_RCC_OscConfig+0x280>)
 8001546:	4313      	orrs	r3, r2
 8001548:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800154a:	e040      	b.n	80015ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d023      	beq.n	800159c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001554:	4b39      	ldr	r3, [pc, #228]	; (800163c <HAL_RCC_OscConfig+0x280>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a38      	ldr	r2, [pc, #224]	; (800163c <HAL_RCC_OscConfig+0x280>)
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001560:	f7ff fb4c 	bl	8000bfc <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001568:	f7ff fb48 	bl	8000bfc <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e1bd      	b.n	80018f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800157a:	4b30      	ldr	r3, [pc, #192]	; (800163c <HAL_RCC_OscConfig+0x280>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0f0      	beq.n	8001568 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001586:	4b2d      	ldr	r3, [pc, #180]	; (800163c <HAL_RCC_OscConfig+0x280>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	4929      	ldr	r1, [pc, #164]	; (800163c <HAL_RCC_OscConfig+0x280>)
 8001596:	4313      	orrs	r3, r2
 8001598:	600b      	str	r3, [r1, #0]
 800159a:	e018      	b.n	80015ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800159c:	4b27      	ldr	r3, [pc, #156]	; (800163c <HAL_RCC_OscConfig+0x280>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a26      	ldr	r2, [pc, #152]	; (800163c <HAL_RCC_OscConfig+0x280>)
 80015a2:	f023 0301 	bic.w	r3, r3, #1
 80015a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a8:	f7ff fb28 	bl	8000bfc <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015b0:	f7ff fb24 	bl	8000bfc <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e199      	b.n	80018f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015c2:	4b1e      	ldr	r3, [pc, #120]	; (800163c <HAL_RCC_OscConfig+0x280>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f0      	bne.n	80015b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0308 	and.w	r3, r3, #8
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d038      	beq.n	800164c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d019      	beq.n	8001616 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015e2:	4b16      	ldr	r3, [pc, #88]	; (800163c <HAL_RCC_OscConfig+0x280>)
 80015e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015e6:	4a15      	ldr	r2, [pc, #84]	; (800163c <HAL_RCC_OscConfig+0x280>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ee:	f7ff fb05 	bl	8000bfc <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015f6:	f7ff fb01 	bl	8000bfc <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e176      	b.n	80018f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <HAL_RCC_OscConfig+0x280>)
 800160a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0f0      	beq.n	80015f6 <HAL_RCC_OscConfig+0x23a>
 8001614:	e01a      	b.n	800164c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <HAL_RCC_OscConfig+0x280>)
 8001618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800161a:	4a08      	ldr	r2, [pc, #32]	; (800163c <HAL_RCC_OscConfig+0x280>)
 800161c:	f023 0301 	bic.w	r3, r3, #1
 8001620:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001622:	f7ff faeb 	bl	8000bfc <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001628:	e00a      	b.n	8001640 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800162a:	f7ff fae7 	bl	8000bfc <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d903      	bls.n	8001640 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e15c      	b.n	80018f6 <HAL_RCC_OscConfig+0x53a>
 800163c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001640:	4b91      	ldr	r3, [pc, #580]	; (8001888 <HAL_RCC_OscConfig+0x4cc>)
 8001642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1ee      	bne.n	800162a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 80a4 	beq.w	80017a2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800165a:	4b8b      	ldr	r3, [pc, #556]	; (8001888 <HAL_RCC_OscConfig+0x4cc>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d10d      	bne.n	8001682 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001666:	4b88      	ldr	r3, [pc, #544]	; (8001888 <HAL_RCC_OscConfig+0x4cc>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	4a87      	ldr	r2, [pc, #540]	; (8001888 <HAL_RCC_OscConfig+0x4cc>)
 800166c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001670:	6413      	str	r3, [r2, #64]	; 0x40
 8001672:	4b85      	ldr	r3, [pc, #532]	; (8001888 <HAL_RCC_OscConfig+0x4cc>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800167e:	2301      	movs	r3, #1
 8001680:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001682:	4b82      	ldr	r3, [pc, #520]	; (800188c <HAL_RCC_OscConfig+0x4d0>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168a:	2b00      	cmp	r3, #0
 800168c:	d118      	bne.n	80016c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800168e:	4b7f      	ldr	r3, [pc, #508]	; (800188c <HAL_RCC_OscConfig+0x4d0>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a7e      	ldr	r2, [pc, #504]	; (800188c <HAL_RCC_OscConfig+0x4d0>)
 8001694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001698:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800169a:	f7ff faaf 	bl	8000bfc <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016a2:	f7ff faab 	bl	8000bfc <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b64      	cmp	r3, #100	; 0x64
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e120      	b.n	80018f6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016b4:	4b75      	ldr	r3, [pc, #468]	; (800188c <HAL_RCC_OscConfig+0x4d0>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d0f0      	beq.n	80016a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d106      	bne.n	80016d6 <HAL_RCC_OscConfig+0x31a>
 80016c8:	4b6f      	ldr	r3, [pc, #444]	; (8001888 <HAL_RCC_OscConfig+0x4cc>)
 80016ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016cc:	4a6e      	ldr	r2, [pc, #440]	; (8001888 <HAL_RCC_OscConfig+0x4cc>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	6713      	str	r3, [r2, #112]	; 0x70
 80016d4:	e02d      	b.n	8001732 <HAL_RCC_OscConfig+0x376>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d10c      	bne.n	80016f8 <HAL_RCC_OscConfig+0x33c>
 80016de:	4b6a      	ldr	r3, [pc, #424]	; (8001888 <HAL_RCC_OscConfig+0x4cc>)
 80016e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e2:	4a69      	ldr	r2, [pc, #420]	; (8001888 <HAL_RCC_OscConfig+0x4cc>)
 80016e4:	f023 0301 	bic.w	r3, r3, #1
 80016e8:	6713      	str	r3, [r2, #112]	; 0x70
 80016ea:	4b67      	ldr	r3, [pc, #412]	; (8001888 <HAL_RCC_OscConfig+0x4cc>)
 80016ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ee:	4a66      	ldr	r2, [pc, #408]	; (8001888 <HAL_RCC_OscConfig+0x4cc>)
 80016f0:	f023 0304 	bic.w	r3, r3, #4
 80016f4:	6713      	str	r3, [r2, #112]	; 0x70
 80016f6:	e01c      	b.n	8001732 <HAL_RCC_OscConfig+0x376>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	2b05      	cmp	r3, #5
 80016fe:	d10c      	bne.n	800171a <HAL_RCC_OscConfig+0x35e>
 8001700:	4b61      	ldr	r3, [pc, #388]	; (8001888 <HAL_RCC_OscConfig+0x4cc>)
 8001702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001704:	4a60      	ldr	r2, [pc, #384]	; (8001888 <HAL_RCC_OscConfig+0x4cc>)
 8001706:	f043 0304 	orr.w	r3, r3, #4
 800170a:	6713      	str	r3, [r2, #112]	; 0x70
 800170c:	4b5e      	ldr	r3, [pc, #376]	; (8001888 <HAL_RCC_OscConfig+0x4cc>)
 800170e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001710:	4a5d      	ldr	r2, [pc, #372]	; (8001888 <HAL_RCC_OscConfig+0x4cc>)
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	6713      	str	r3, [r2, #112]	; 0x70
 8001718:	e00b      	b.n	8001732 <HAL_RCC_OscConfig+0x376>
 800171a:	4b5b      	ldr	r3, [pc, #364]	; (8001888 <HAL_RCC_OscConfig+0x4cc>)
 800171c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171e:	4a5a      	ldr	r2, [pc, #360]	; (8001888 <HAL_RCC_OscConfig+0x4cc>)
 8001720:	f023 0301 	bic.w	r3, r3, #1
 8001724:	6713      	str	r3, [r2, #112]	; 0x70
 8001726:	4b58      	ldr	r3, [pc, #352]	; (8001888 <HAL_RCC_OscConfig+0x4cc>)
 8001728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172a:	4a57      	ldr	r2, [pc, #348]	; (8001888 <HAL_RCC_OscConfig+0x4cc>)
 800172c:	f023 0304 	bic.w	r3, r3, #4
 8001730:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d015      	beq.n	8001766 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800173a:	f7ff fa5f 	bl	8000bfc <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001740:	e00a      	b.n	8001758 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001742:	f7ff fa5b 	bl	8000bfc <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001750:	4293      	cmp	r3, r2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e0ce      	b.n	80018f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001758:	4b4b      	ldr	r3, [pc, #300]	; (8001888 <HAL_RCC_OscConfig+0x4cc>)
 800175a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0ee      	beq.n	8001742 <HAL_RCC_OscConfig+0x386>
 8001764:	e014      	b.n	8001790 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001766:	f7ff fa49 	bl	8000bfc <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800176c:	e00a      	b.n	8001784 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800176e:	f7ff fa45 	bl	8000bfc <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	f241 3288 	movw	r2, #5000	; 0x1388
 800177c:	4293      	cmp	r3, r2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e0b8      	b.n	80018f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001784:	4b40      	ldr	r3, [pc, #256]	; (8001888 <HAL_RCC_OscConfig+0x4cc>)
 8001786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1ee      	bne.n	800176e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001790:	7dfb      	ldrb	r3, [r7, #23]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d105      	bne.n	80017a2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001796:	4b3c      	ldr	r3, [pc, #240]	; (8001888 <HAL_RCC_OscConfig+0x4cc>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	4a3b      	ldr	r2, [pc, #236]	; (8001888 <HAL_RCC_OscConfig+0x4cc>)
 800179c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 80a4 	beq.w	80018f4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017ac:	4b36      	ldr	r3, [pc, #216]	; (8001888 <HAL_RCC_OscConfig+0x4cc>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 030c 	and.w	r3, r3, #12
 80017b4:	2b08      	cmp	r3, #8
 80017b6:	d06b      	beq.n	8001890 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d149      	bne.n	8001854 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c0:	4b31      	ldr	r3, [pc, #196]	; (8001888 <HAL_RCC_OscConfig+0x4cc>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a30      	ldr	r2, [pc, #192]	; (8001888 <HAL_RCC_OscConfig+0x4cc>)
 80017c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017cc:	f7ff fa16 	bl	8000bfc <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d4:	f7ff fa12 	bl	8000bfc <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e087      	b.n	80018f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e6:	4b28      	ldr	r3, [pc, #160]	; (8001888 <HAL_RCC_OscConfig+0x4cc>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f0      	bne.n	80017d4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69da      	ldr	r2, [r3, #28]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a1b      	ldr	r3, [r3, #32]
 80017fa:	431a      	orrs	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001800:	019b      	lsls	r3, r3, #6
 8001802:	431a      	orrs	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001808:	085b      	lsrs	r3, r3, #1
 800180a:	3b01      	subs	r3, #1
 800180c:	041b      	lsls	r3, r3, #16
 800180e:	431a      	orrs	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001814:	061b      	lsls	r3, r3, #24
 8001816:	4313      	orrs	r3, r2
 8001818:	4a1b      	ldr	r2, [pc, #108]	; (8001888 <HAL_RCC_OscConfig+0x4cc>)
 800181a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800181e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001820:	4b19      	ldr	r3, [pc, #100]	; (8001888 <HAL_RCC_OscConfig+0x4cc>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a18      	ldr	r2, [pc, #96]	; (8001888 <HAL_RCC_OscConfig+0x4cc>)
 8001826:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800182a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800182c:	f7ff f9e6 	bl	8000bfc <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001834:	f7ff f9e2 	bl	8000bfc <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e057      	b.n	80018f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001846:	4b10      	ldr	r3, [pc, #64]	; (8001888 <HAL_RCC_OscConfig+0x4cc>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d0f0      	beq.n	8001834 <HAL_RCC_OscConfig+0x478>
 8001852:	e04f      	b.n	80018f4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <HAL_RCC_OscConfig+0x4cc>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a0b      	ldr	r2, [pc, #44]	; (8001888 <HAL_RCC_OscConfig+0x4cc>)
 800185a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800185e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001860:	f7ff f9cc 	bl	8000bfc <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001868:	f7ff f9c8 	bl	8000bfc <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e03d      	b.n	80018f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800187a:	4b03      	ldr	r3, [pc, #12]	; (8001888 <HAL_RCC_OscConfig+0x4cc>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x4ac>
 8001886:	e035      	b.n	80018f4 <HAL_RCC_OscConfig+0x538>
 8001888:	40023800 	.word	0x40023800
 800188c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001890:	4b1b      	ldr	r3, [pc, #108]	; (8001900 <HAL_RCC_OscConfig+0x544>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d028      	beq.n	80018f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d121      	bne.n	80018f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d11a      	bne.n	80018f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018c0:	4013      	ands	r3, r2
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018c6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d111      	bne.n	80018f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d6:	085b      	lsrs	r3, r3, #1
 80018d8:	3b01      	subs	r3, #1
 80018da:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018dc:	429a      	cmp	r2, r3
 80018de:	d107      	bne.n	80018f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d001      	beq.n	80018f4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e000      	b.n	80018f6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3718      	adds	r7, #24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40023800 	.word	0x40023800

08001904 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d101      	bne.n	800191c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e0d0      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800191c:	4b6a      	ldr	r3, [pc, #424]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 030f 	and.w	r3, r3, #15
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	429a      	cmp	r2, r3
 8001928:	d910      	bls.n	800194c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800192a:	4b67      	ldr	r3, [pc, #412]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f023 020f 	bic.w	r2, r3, #15
 8001932:	4965      	ldr	r1, [pc, #404]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	4313      	orrs	r3, r2
 8001938:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800193a:	4b63      	ldr	r3, [pc, #396]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	429a      	cmp	r2, r3
 8001946:	d001      	beq.n	800194c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e0b8      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d020      	beq.n	800199a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	2b00      	cmp	r3, #0
 8001962:	d005      	beq.n	8001970 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001964:	4b59      	ldr	r3, [pc, #356]	; (8001acc <HAL_RCC_ClockConfig+0x1c8>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	4a58      	ldr	r2, [pc, #352]	; (8001acc <HAL_RCC_ClockConfig+0x1c8>)
 800196a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800196e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0308 	and.w	r3, r3, #8
 8001978:	2b00      	cmp	r3, #0
 800197a:	d005      	beq.n	8001988 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800197c:	4b53      	ldr	r3, [pc, #332]	; (8001acc <HAL_RCC_ClockConfig+0x1c8>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	4a52      	ldr	r2, [pc, #328]	; (8001acc <HAL_RCC_ClockConfig+0x1c8>)
 8001982:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001986:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001988:	4b50      	ldr	r3, [pc, #320]	; (8001acc <HAL_RCC_ClockConfig+0x1c8>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	494d      	ldr	r1, [pc, #308]	; (8001acc <HAL_RCC_ClockConfig+0x1c8>)
 8001996:	4313      	orrs	r3, r2
 8001998:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d040      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d107      	bne.n	80019be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ae:	4b47      	ldr	r3, [pc, #284]	; (8001acc <HAL_RCC_ClockConfig+0x1c8>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d115      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e07f      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d107      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c6:	4b41      	ldr	r3, [pc, #260]	; (8001acc <HAL_RCC_ClockConfig+0x1c8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d109      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e073      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d6:	4b3d      	ldr	r3, [pc, #244]	; (8001acc <HAL_RCC_ClockConfig+0x1c8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e06b      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019e6:	4b39      	ldr	r3, [pc, #228]	; (8001acc <HAL_RCC_ClockConfig+0x1c8>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f023 0203 	bic.w	r2, r3, #3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	4936      	ldr	r1, [pc, #216]	; (8001acc <HAL_RCC_ClockConfig+0x1c8>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019f8:	f7ff f900 	bl	8000bfc <HAL_GetTick>
 80019fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019fe:	e00a      	b.n	8001a16 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a00:	f7ff f8fc 	bl	8000bfc <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e053      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a16:	4b2d      	ldr	r3, [pc, #180]	; (8001acc <HAL_RCC_ClockConfig+0x1c8>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 020c 	and.w	r2, r3, #12
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d1eb      	bne.n	8001a00 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a28:	4b27      	ldr	r3, [pc, #156]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 030f 	and.w	r3, r3, #15
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d210      	bcs.n	8001a58 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a36:	4b24      	ldr	r3, [pc, #144]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f023 020f 	bic.w	r2, r3, #15
 8001a3e:	4922      	ldr	r1, [pc, #136]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a46:	4b20      	ldr	r3, [pc, #128]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d001      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e032      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d008      	beq.n	8001a76 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a64:	4b19      	ldr	r3, [pc, #100]	; (8001acc <HAL_RCC_ClockConfig+0x1c8>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	4916      	ldr	r1, [pc, #88]	; (8001acc <HAL_RCC_ClockConfig+0x1c8>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d009      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a82:	4b12      	ldr	r3, [pc, #72]	; (8001acc <HAL_RCC_ClockConfig+0x1c8>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	490e      	ldr	r1, [pc, #56]	; (8001acc <HAL_RCC_ClockConfig+0x1c8>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a96:	f000 f821 	bl	8001adc <HAL_RCC_GetSysClockFreq>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <HAL_RCC_ClockConfig+0x1c8>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	091b      	lsrs	r3, r3, #4
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	490a      	ldr	r1, [pc, #40]	; (8001ad0 <HAL_RCC_ClockConfig+0x1cc>)
 8001aa8:	5ccb      	ldrb	r3, [r1, r3]
 8001aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8001aae:	4a09      	ldr	r2, [pc, #36]	; (8001ad4 <HAL_RCC_ClockConfig+0x1d0>)
 8001ab0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <HAL_RCC_ClockConfig+0x1d4>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff f85c 	bl	8000b74 <HAL_InitTick>

  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40023c00 	.word	0x40023c00
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	08004954 	.word	0x08004954
 8001ad4:	20000000 	.word	0x20000000
 8001ad8:	20000004 	.word	0x20000004

08001adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001adc:	b5b0      	push	{r4, r5, r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	6079      	str	r1, [r7, #4]
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	60f9      	str	r1, [r7, #12]
 8001aea:	2100      	movs	r1, #0
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001aee:	2100      	movs	r1, #0
 8001af0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001af2:	4952      	ldr	r1, [pc, #328]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x160>)
 8001af4:	6889      	ldr	r1, [r1, #8]
 8001af6:	f001 010c 	and.w	r1, r1, #12
 8001afa:	2908      	cmp	r1, #8
 8001afc:	d00d      	beq.n	8001b1a <HAL_RCC_GetSysClockFreq+0x3e>
 8001afe:	2908      	cmp	r1, #8
 8001b00:	f200 8094 	bhi.w	8001c2c <HAL_RCC_GetSysClockFreq+0x150>
 8001b04:	2900      	cmp	r1, #0
 8001b06:	d002      	beq.n	8001b0e <HAL_RCC_GetSysClockFreq+0x32>
 8001b08:	2904      	cmp	r1, #4
 8001b0a:	d003      	beq.n	8001b14 <HAL_RCC_GetSysClockFreq+0x38>
 8001b0c:	e08e      	b.n	8001c2c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b0e:	4b4c      	ldr	r3, [pc, #304]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x164>)
 8001b10:	60bb      	str	r3, [r7, #8]
      break;
 8001b12:	e08e      	b.n	8001c32 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b14:	4b4b      	ldr	r3, [pc, #300]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x168>)
 8001b16:	60bb      	str	r3, [r7, #8]
      break;
 8001b18:	e08b      	b.n	8001c32 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b1a:	4948      	ldr	r1, [pc, #288]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x160>)
 8001b1c:	6849      	ldr	r1, [r1, #4]
 8001b1e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001b22:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001b24:	4945      	ldr	r1, [pc, #276]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x160>)
 8001b26:	6849      	ldr	r1, [r1, #4]
 8001b28:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001b2c:	2900      	cmp	r1, #0
 8001b2e:	d024      	beq.n	8001b7a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b30:	4942      	ldr	r1, [pc, #264]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x160>)
 8001b32:	6849      	ldr	r1, [r1, #4]
 8001b34:	0989      	lsrs	r1, r1, #6
 8001b36:	4608      	mov	r0, r1
 8001b38:	f04f 0100 	mov.w	r1, #0
 8001b3c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001b40:	f04f 0500 	mov.w	r5, #0
 8001b44:	ea00 0204 	and.w	r2, r0, r4
 8001b48:	ea01 0305 	and.w	r3, r1, r5
 8001b4c:	493d      	ldr	r1, [pc, #244]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x168>)
 8001b4e:	fb01 f003 	mul.w	r0, r1, r3
 8001b52:	2100      	movs	r1, #0
 8001b54:	fb01 f102 	mul.w	r1, r1, r2
 8001b58:	1844      	adds	r4, r0, r1
 8001b5a:	493a      	ldr	r1, [pc, #232]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x168>)
 8001b5c:	fba2 0101 	umull	r0, r1, r2, r1
 8001b60:	1863      	adds	r3, r4, r1
 8001b62:	4619      	mov	r1, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	461a      	mov	r2, r3
 8001b68:	f04f 0300 	mov.w	r3, #0
 8001b6c:	f7fe fb4c 	bl	8000208 <__aeabi_uldivmod>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4613      	mov	r3, r2
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	e04a      	b.n	8001c10 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b7a:	4b30      	ldr	r3, [pc, #192]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x160>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	099b      	lsrs	r3, r3, #6
 8001b80:	461a      	mov	r2, r3
 8001b82:	f04f 0300 	mov.w	r3, #0
 8001b86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b8a:	f04f 0100 	mov.w	r1, #0
 8001b8e:	ea02 0400 	and.w	r4, r2, r0
 8001b92:	ea03 0501 	and.w	r5, r3, r1
 8001b96:	4620      	mov	r0, r4
 8001b98:	4629      	mov	r1, r5
 8001b9a:	f04f 0200 	mov.w	r2, #0
 8001b9e:	f04f 0300 	mov.w	r3, #0
 8001ba2:	014b      	lsls	r3, r1, #5
 8001ba4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ba8:	0142      	lsls	r2, r0, #5
 8001baa:	4610      	mov	r0, r2
 8001bac:	4619      	mov	r1, r3
 8001bae:	1b00      	subs	r0, r0, r4
 8001bb0:	eb61 0105 	sbc.w	r1, r1, r5
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	f04f 0300 	mov.w	r3, #0
 8001bbc:	018b      	lsls	r3, r1, #6
 8001bbe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001bc2:	0182      	lsls	r2, r0, #6
 8001bc4:	1a12      	subs	r2, r2, r0
 8001bc6:	eb63 0301 	sbc.w	r3, r3, r1
 8001bca:	f04f 0000 	mov.w	r0, #0
 8001bce:	f04f 0100 	mov.w	r1, #0
 8001bd2:	00d9      	lsls	r1, r3, #3
 8001bd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001bd8:	00d0      	lsls	r0, r2, #3
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	1912      	adds	r2, r2, r4
 8001be0:	eb45 0303 	adc.w	r3, r5, r3
 8001be4:	f04f 0000 	mov.w	r0, #0
 8001be8:	f04f 0100 	mov.w	r1, #0
 8001bec:	0299      	lsls	r1, r3, #10
 8001bee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001bf2:	0290      	lsls	r0, r2, #10
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	4610      	mov	r0, r2
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	f04f 0300 	mov.w	r3, #0
 8001c04:	f7fe fb00 	bl	8000208 <__aeabi_uldivmod>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001c10:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x160>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	0c1b      	lsrs	r3, r3, #16
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c28:	60bb      	str	r3, [r7, #8]
      break;
 8001c2a:	e002      	b.n	8001c32 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c2c:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x164>)
 8001c2e:	60bb      	str	r3, [r7, #8]
      break;
 8001c30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c32:	68bb      	ldr	r3, [r7, #8]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	00f42400 	.word	0x00f42400
 8001c44:	017d7840 	.word	0x017d7840

08001c48 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c4c:	4b03      	ldr	r3, [pc, #12]	; (8001c5c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	20000000 	.word	0x20000000

08001c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c64:	f7ff fff0 	bl	8001c48 <HAL_RCC_GetHCLKFreq>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	0a9b      	lsrs	r3, r3, #10
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	4903      	ldr	r1, [pc, #12]	; (8001c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c76:	5ccb      	ldrb	r3, [r1, r3]
 8001c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40023800 	.word	0x40023800
 8001c84:	08004964 	.word	0x08004964

08001c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c8c:	f7ff ffdc 	bl	8001c48 <HAL_RCC_GetHCLKFreq>
 8001c90:	4602      	mov	r2, r0
 8001c92:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	0b5b      	lsrs	r3, r3, #13
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	4903      	ldr	r1, [pc, #12]	; (8001cac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	08004964 	.word	0x08004964

08001cb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b088      	sub	sp, #32
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d012      	beq.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001cd8:	4b69      	ldr	r3, [pc, #420]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	4a68      	ldr	r2, [pc, #416]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cde:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ce2:	6093      	str	r3, [r2, #8]
 8001ce4:	4b66      	ldr	r3, [pc, #408]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cec:	4964      	ldr	r1, [pc, #400]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d017      	beq.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d0a:	4b5d      	ldr	r3, [pc, #372]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d18:	4959      	ldr	r1, [pc, #356]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d28:	d101      	bne.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001d36:	2301      	movs	r3, #1
 8001d38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d017      	beq.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d46:	4b4e      	ldr	r3, [pc, #312]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d4c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	494a      	ldr	r1, [pc, #296]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d64:	d101      	bne.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001d66:	2301      	movs	r3, #1
 8001d68:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001d72:	2301      	movs	r3, #1
 8001d74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001d82:	2301      	movs	r3, #1
 8001d84:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0320 	and.w	r3, r3, #32
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f000 808b 	beq.w	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d94:	4b3a      	ldr	r3, [pc, #232]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d98:	4a39      	ldr	r2, [pc, #228]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001da0:	4b37      	ldr	r3, [pc, #220]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da8:	60bb      	str	r3, [r7, #8]
 8001daa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001dac:	4b35      	ldr	r3, [pc, #212]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a34      	ldr	r2, [pc, #208]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001db8:	f7fe ff20 	bl	8000bfc <HAL_GetTick>
 8001dbc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc0:	f7fe ff1c 	bl	8000bfc <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b64      	cmp	r3, #100	; 0x64
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e357      	b.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001dd2:	4b2c      	ldr	r3, [pc, #176]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001dde:	4b28      	ldr	r3, [pc, #160]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001de6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d035      	beq.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d02e      	beq.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001dfc:	4b20      	ldr	r3, [pc, #128]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e04:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e06:	4b1e      	ldr	r3, [pc, #120]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0a:	4a1d      	ldr	r2, [pc, #116]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e10:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e12:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e16:	4a1a      	ldr	r2, [pc, #104]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e1c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001e1e:	4a18      	ldr	r2, [pc, #96]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e24:	4b16      	ldr	r3, [pc, #88]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d114      	bne.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e30:	f7fe fee4 	bl	8000bfc <HAL_GetTick>
 8001e34:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e36:	e00a      	b.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e38:	f7fe fee0 	bl	8000bfc <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e319      	b.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e4e:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0ee      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001e66:	d111      	bne.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001e68:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e74:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001e76:	400b      	ands	r3, r1
 8001e78:	4901      	ldr	r1, [pc, #4]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	608b      	str	r3, [r1, #8]
 8001e7e:	e00b      	b.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40007000 	.word	0x40007000
 8001e88:	0ffffcff 	.word	0x0ffffcff
 8001e8c:	4bb1      	ldr	r3, [pc, #708]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	4ab0      	ldr	r2, [pc, #704]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e92:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001e96:	6093      	str	r3, [r2, #8]
 8001e98:	4bae      	ldr	r3, [pc, #696]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ea4:	49ab      	ldr	r1, [pc, #684]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0310 	and.w	r3, r3, #16
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d010      	beq.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001eb6:	4ba7      	ldr	r3, [pc, #668]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001eb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ebc:	4aa5      	ldr	r2, [pc, #660]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001ebe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ec2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001ec6:	4ba3      	ldr	r3, [pc, #652]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001ec8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed0:	49a0      	ldr	r1, [pc, #640]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00a      	beq.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ee4:	4b9b      	ldr	r3, [pc, #620]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ef2:	4998      	ldr	r1, [pc, #608]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00a      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f06:	4b93      	ldr	r3, [pc, #588]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f14:	498f      	ldr	r1, [pc, #572]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00a      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f28:	4b8a      	ldr	r3, [pc, #552]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f36:	4987      	ldr	r1, [pc, #540]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00a      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001f4a:	4b82      	ldr	r3, [pc, #520]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f50:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f58:	497e      	ldr	r1, [pc, #504]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00a      	beq.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f6c:	4b79      	ldr	r3, [pc, #484]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f72:	f023 0203 	bic.w	r2, r3, #3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7a:	4976      	ldr	r1, [pc, #472]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00a      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f8e:	4b71      	ldr	r3, [pc, #452]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f94:	f023 020c 	bic.w	r2, r3, #12
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f9c:	496d      	ldr	r1, [pc, #436]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d00a      	beq.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001fb0:	4b68      	ldr	r3, [pc, #416]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbe:	4965      	ldr	r1, [pc, #404]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00a      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001fd2:	4b60      	ldr	r3, [pc, #384]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fe0:	495c      	ldr	r1, [pc, #368]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00a      	beq.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001ff4:	4b57      	ldr	r3, [pc, #348]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ffa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002002:	4954      	ldr	r1, [pc, #336]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002004:	4313      	orrs	r3, r2
 8002006:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00a      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002016:	4b4f      	ldr	r3, [pc, #316]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800201c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002024:	494b      	ldr	r1, [pc, #300]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002026:	4313      	orrs	r3, r2
 8002028:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00a      	beq.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002038:	4b46      	ldr	r3, [pc, #280]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800203a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002046:	4943      	ldr	r1, [pc, #268]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002048:	4313      	orrs	r3, r2
 800204a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00a      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800205a:	4b3e      	ldr	r3, [pc, #248]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800205c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002060:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002068:	493a      	ldr	r1, [pc, #232]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800206a:	4313      	orrs	r3, r2
 800206c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00a      	beq.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800207c:	4b35      	ldr	r3, [pc, #212]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800207e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002082:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800208a:	4932      	ldr	r1, [pc, #200]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800208c:	4313      	orrs	r3, r2
 800208e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d011      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800209e:	4b2d      	ldr	r3, [pc, #180]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80020a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020ac:	4929      	ldr	r1, [pc, #164]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020bc:	d101      	bne.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80020be:	2301      	movs	r3, #1
 80020c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80020ce:	2301      	movs	r3, #1
 80020d0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00a      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020de:	4b1d      	ldr	r3, [pc, #116]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80020e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ec:	4919      	ldr	r1, [pc, #100]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00b      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002100:	4b14      	ldr	r3, [pc, #80]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002106:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002110:	4910      	ldr	r1, [pc, #64]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002112:	4313      	orrs	r3, r2
 8002114:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d006      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 80d9 	beq.w	80022de <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800212c:	4b09      	ldr	r3, [pc, #36]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a08      	ldr	r2, [pc, #32]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002132:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002136:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002138:	f7fe fd60 	bl	8000bfc <HAL_GetTick>
 800213c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800213e:	e00b      	b.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002140:	f7fe fd5c 	bl	8000bfc <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b64      	cmp	r3, #100	; 0x64
 800214c:	d904      	bls.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e197      	b.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002152:	bf00      	nop
 8002154:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002158:	4b6c      	ldr	r3, [pc, #432]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1ed      	bne.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b00      	cmp	r3, #0
 800216e:	d021      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002174:	2b00      	cmp	r3, #0
 8002176:	d11d      	bne.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002178:	4b64      	ldr	r3, [pc, #400]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800217a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800217e:	0c1b      	lsrs	r3, r3, #16
 8002180:	f003 0303 	and.w	r3, r3, #3
 8002184:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002186:	4b61      	ldr	r3, [pc, #388]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002188:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800218c:	0e1b      	lsrs	r3, r3, #24
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	019a      	lsls	r2, r3, #6
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	041b      	lsls	r3, r3, #16
 800219e:	431a      	orrs	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	061b      	lsls	r3, r3, #24
 80021a4:	431a      	orrs	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	071b      	lsls	r3, r3, #28
 80021ac:	4957      	ldr	r1, [pc, #348]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d004      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021c8:	d00a      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d02e      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021de:	d129      	bne.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80021e0:	4b4a      	ldr	r3, [pc, #296]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021e6:	0c1b      	lsrs	r3, r3, #16
 80021e8:	f003 0303 	and.w	r3, r3, #3
 80021ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80021ee:	4b47      	ldr	r3, [pc, #284]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021f4:	0f1b      	lsrs	r3, r3, #28
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	019a      	lsls	r2, r3, #6
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	041b      	lsls	r3, r3, #16
 8002206:	431a      	orrs	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	061b      	lsls	r3, r3, #24
 800220e:	431a      	orrs	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	071b      	lsls	r3, r3, #28
 8002214:	493d      	ldr	r1, [pc, #244]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002216:	4313      	orrs	r3, r2
 8002218:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800221c:	4b3b      	ldr	r3, [pc, #236]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800221e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002222:	f023 021f 	bic.w	r2, r3, #31
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222a:	3b01      	subs	r3, #1
 800222c:	4937      	ldr	r1, [pc, #220]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800222e:	4313      	orrs	r3, r2
 8002230:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d01d      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002240:	4b32      	ldr	r3, [pc, #200]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002242:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002246:	0e1b      	lsrs	r3, r3, #24
 8002248:	f003 030f 	and.w	r3, r3, #15
 800224c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800224e:	4b2f      	ldr	r3, [pc, #188]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002250:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002254:	0f1b      	lsrs	r3, r3, #28
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	019a      	lsls	r2, r3, #6
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	041b      	lsls	r3, r3, #16
 8002268:	431a      	orrs	r2, r3
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	061b      	lsls	r3, r3, #24
 800226e:	431a      	orrs	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	071b      	lsls	r3, r3, #28
 8002274:	4925      	ldr	r1, [pc, #148]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002276:	4313      	orrs	r3, r2
 8002278:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d011      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	019a      	lsls	r2, r3, #6
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	041b      	lsls	r3, r3, #16
 8002294:	431a      	orrs	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	061b      	lsls	r3, r3, #24
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	071b      	lsls	r3, r3, #28
 80022a4:	4919      	ldr	r1, [pc, #100]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80022ac:	4b17      	ldr	r3, [pc, #92]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a16      	ldr	r2, [pc, #88]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80022b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022b8:	f7fe fca0 	bl	8000bfc <HAL_GetTick>
 80022bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80022c0:	f7fe fc9c 	bl	8000bfc <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b64      	cmp	r3, #100	; 0x64
 80022cc:	d901      	bls.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e0d7      	b.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80022d2:	4b0e      	ldr	r3, [pc, #56]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d0f0      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	f040 80cd 	bne.w	8002480 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80022e6:	4b09      	ldr	r3, [pc, #36]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a08      	ldr	r2, [pc, #32]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022f2:	f7fe fc83 	bl	8000bfc <HAL_GetTick>
 80022f6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80022f8:	e00a      	b.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80022fa:	f7fe fc7f 	bl	8000bfc <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b64      	cmp	r3, #100	; 0x64
 8002306:	d903      	bls.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e0ba      	b.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800230c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002310:	4b5e      	ldr	r3, [pc, #376]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002318:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800231c:	d0ed      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800232e:	2b00      	cmp	r3, #0
 8002330:	d009      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800233a:	2b00      	cmp	r3, #0
 800233c:	d02e      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	2b00      	cmp	r3, #0
 8002344:	d12a      	bne.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002346:	4b51      	ldr	r3, [pc, #324]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234c:	0c1b      	lsrs	r3, r3, #16
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002354:	4b4d      	ldr	r3, [pc, #308]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235a:	0f1b      	lsrs	r3, r3, #28
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	019a      	lsls	r2, r3, #6
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	041b      	lsls	r3, r3, #16
 800236c:	431a      	orrs	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	061b      	lsls	r3, r3, #24
 8002374:	431a      	orrs	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	071b      	lsls	r3, r3, #28
 800237a:	4944      	ldr	r1, [pc, #272]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800237c:	4313      	orrs	r3, r2
 800237e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002382:	4b42      	ldr	r3, [pc, #264]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002388:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002390:	3b01      	subs	r3, #1
 8002392:	021b      	lsls	r3, r3, #8
 8002394:	493d      	ldr	r1, [pc, #244]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002396:	4313      	orrs	r3, r2
 8002398:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d022      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023b0:	d11d      	bne.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80023b2:	4b36      	ldr	r3, [pc, #216]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b8:	0e1b      	lsrs	r3, r3, #24
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80023c0:	4b32      	ldr	r3, [pc, #200]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c6:	0f1b      	lsrs	r3, r3, #28
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	019a      	lsls	r2, r3, #6
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	041b      	lsls	r3, r3, #16
 80023da:	431a      	orrs	r2, r3
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	061b      	lsls	r3, r3, #24
 80023e0:	431a      	orrs	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	071b      	lsls	r3, r3, #28
 80023e6:	4929      	ldr	r1, [pc, #164]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d028      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80023fa:	4b24      	ldr	r3, [pc, #144]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002400:	0e1b      	lsrs	r3, r3, #24
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002408:	4b20      	ldr	r3, [pc, #128]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800240a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240e:	0c1b      	lsrs	r3, r3, #16
 8002410:	f003 0303 	and.w	r3, r3, #3
 8002414:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	019a      	lsls	r2, r3, #6
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	041b      	lsls	r3, r3, #16
 8002420:	431a      	orrs	r2, r3
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	061b      	lsls	r3, r3, #24
 8002426:	431a      	orrs	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	69db      	ldr	r3, [r3, #28]
 800242c:	071b      	lsls	r3, r3, #28
 800242e:	4917      	ldr	r1, [pc, #92]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002430:	4313      	orrs	r3, r2
 8002432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002436:	4b15      	ldr	r3, [pc, #84]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002438:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800243c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002444:	4911      	ldr	r1, [pc, #68]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002446:	4313      	orrs	r3, r2
 8002448:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800244c:	4b0f      	ldr	r3, [pc, #60]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a0e      	ldr	r2, [pc, #56]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002456:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002458:	f7fe fbd0 	bl	8000bfc <HAL_GetTick>
 800245c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800245e:	e008      	b.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002460:	f7fe fbcc 	bl	8000bfc <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b64      	cmp	r3, #100	; 0x64
 800246c:	d901      	bls.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e007      	b.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002472:	4b06      	ldr	r3, [pc, #24]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800247a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800247e:	d1ef      	bne.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3720      	adds	r7, #32
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40023800 	.word	0x40023800

08002490 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e049      	b.n	8002536 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d106      	bne.n	80024bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7fe fa64 	bl	8000984 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2202      	movs	r2, #2
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3304      	adds	r3, #4
 80024cc:	4619      	mov	r1, r3
 80024ce:	4610      	mov	r0, r2
 80024d0:	f000 fc5a 	bl	8002d88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b082      	sub	sp, #8
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e049      	b.n	80025e4 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	d106      	bne.n	800256a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 f841 	bl	80025ec <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2202      	movs	r2, #2
 800256e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3304      	adds	r3, #4
 800257a:	4619      	mov	r1, r3
 800257c:	4610      	mov	r0, r2
 800257e:	f000 fc03 	bl	8002d88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d109      	bne.n	8002624 <HAL_TIM_OC_Start_IT+0x24>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b01      	cmp	r3, #1
 800261a:	bf14      	ite	ne
 800261c:	2301      	movne	r3, #1
 800261e:	2300      	moveq	r3, #0
 8002620:	b2db      	uxtb	r3, r3
 8002622:	e03c      	b.n	800269e <HAL_TIM_OC_Start_IT+0x9e>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	2b04      	cmp	r3, #4
 8002628:	d109      	bne.n	800263e <HAL_TIM_OC_Start_IT+0x3e>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b01      	cmp	r3, #1
 8002634:	bf14      	ite	ne
 8002636:	2301      	movne	r3, #1
 8002638:	2300      	moveq	r3, #0
 800263a:	b2db      	uxtb	r3, r3
 800263c:	e02f      	b.n	800269e <HAL_TIM_OC_Start_IT+0x9e>
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	2b08      	cmp	r3, #8
 8002642:	d109      	bne.n	8002658 <HAL_TIM_OC_Start_IT+0x58>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b01      	cmp	r3, #1
 800264e:	bf14      	ite	ne
 8002650:	2301      	movne	r3, #1
 8002652:	2300      	moveq	r3, #0
 8002654:	b2db      	uxtb	r3, r3
 8002656:	e022      	b.n	800269e <HAL_TIM_OC_Start_IT+0x9e>
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	2b0c      	cmp	r3, #12
 800265c:	d109      	bne.n	8002672 <HAL_TIM_OC_Start_IT+0x72>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b01      	cmp	r3, #1
 8002668:	bf14      	ite	ne
 800266a:	2301      	movne	r3, #1
 800266c:	2300      	moveq	r3, #0
 800266e:	b2db      	uxtb	r3, r3
 8002670:	e015      	b.n	800269e <HAL_TIM_OC_Start_IT+0x9e>
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	2b10      	cmp	r3, #16
 8002676:	d109      	bne.n	800268c <HAL_TIM_OC_Start_IT+0x8c>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b01      	cmp	r3, #1
 8002682:	bf14      	ite	ne
 8002684:	2301      	movne	r3, #1
 8002686:	2300      	moveq	r3, #0
 8002688:	b2db      	uxtb	r3, r3
 800268a:	e008      	b.n	800269e <HAL_TIM_OC_Start_IT+0x9e>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b01      	cmp	r3, #1
 8002696:	bf14      	ite	ne
 8002698:	2301      	movne	r3, #1
 800269a:	2300      	moveq	r3, #0
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_TIM_OC_Start_IT+0xa6>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e0d8      	b.n	8002858 <HAL_TIM_OC_Start_IT+0x258>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d104      	bne.n	80026b6 <HAL_TIM_OC_Start_IT+0xb6>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2202      	movs	r2, #2
 80026b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026b4:	e023      	b.n	80026fe <HAL_TIM_OC_Start_IT+0xfe>
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	2b04      	cmp	r3, #4
 80026ba:	d104      	bne.n	80026c6 <HAL_TIM_OC_Start_IT+0xc6>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2202      	movs	r2, #2
 80026c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026c4:	e01b      	b.n	80026fe <HAL_TIM_OC_Start_IT+0xfe>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	d104      	bne.n	80026d6 <HAL_TIM_OC_Start_IT+0xd6>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2202      	movs	r2, #2
 80026d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026d4:	e013      	b.n	80026fe <HAL_TIM_OC_Start_IT+0xfe>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	2b0c      	cmp	r3, #12
 80026da:	d104      	bne.n	80026e6 <HAL_TIM_OC_Start_IT+0xe6>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026e4:	e00b      	b.n	80026fe <HAL_TIM_OC_Start_IT+0xfe>
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	2b10      	cmp	r3, #16
 80026ea:	d104      	bne.n	80026f6 <HAL_TIM_OC_Start_IT+0xf6>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2202      	movs	r2, #2
 80026f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026f4:	e003      	b.n	80026fe <HAL_TIM_OC_Start_IT+0xfe>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2202      	movs	r2, #2
 80026fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	2b0c      	cmp	r3, #12
 8002702:	d841      	bhi.n	8002788 <HAL_TIM_OC_Start_IT+0x188>
 8002704:	a201      	add	r2, pc, #4	; (adr r2, 800270c <HAL_TIM_OC_Start_IT+0x10c>)
 8002706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800270a:	bf00      	nop
 800270c:	08002741 	.word	0x08002741
 8002710:	08002789 	.word	0x08002789
 8002714:	08002789 	.word	0x08002789
 8002718:	08002789 	.word	0x08002789
 800271c:	08002753 	.word	0x08002753
 8002720:	08002789 	.word	0x08002789
 8002724:	08002789 	.word	0x08002789
 8002728:	08002789 	.word	0x08002789
 800272c:	08002765 	.word	0x08002765
 8002730:	08002789 	.word	0x08002789
 8002734:	08002789 	.word	0x08002789
 8002738:	08002789 	.word	0x08002789
 800273c:	08002777 	.word	0x08002777
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 0202 	orr.w	r2, r2, #2
 800274e:	60da      	str	r2, [r3, #12]
      break;
 8002750:	e01b      	b.n	800278a <HAL_TIM_OC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68da      	ldr	r2, [r3, #12]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f042 0204 	orr.w	r2, r2, #4
 8002760:	60da      	str	r2, [r3, #12]
      break;
 8002762:	e012      	b.n	800278a <HAL_TIM_OC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0208 	orr.w	r2, r2, #8
 8002772:	60da      	str	r2, [r3, #12]
      break;
 8002774:	e009      	b.n	800278a <HAL_TIM_OC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68da      	ldr	r2, [r3, #12]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f042 0210 	orr.w	r2, r2, #16
 8002784:	60da      	str	r2, [r3, #12]
      break;
 8002786:	e000      	b.n	800278a <HAL_TIM_OC_Start_IT+0x18a>
    }

    default:
      break;
 8002788:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2201      	movs	r2, #1
 8002790:	6839      	ldr	r1, [r7, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f000 fe90 	bl	80034b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a30      	ldr	r2, [pc, #192]	; (8002860 <HAL_TIM_OC_Start_IT+0x260>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d004      	beq.n	80027ac <HAL_TIM_OC_Start_IT+0x1ac>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a2f      	ldr	r2, [pc, #188]	; (8002864 <HAL_TIM_OC_Start_IT+0x264>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d101      	bne.n	80027b0 <HAL_TIM_OC_Start_IT+0x1b0>
 80027ac:	2301      	movs	r3, #1
 80027ae:	e000      	b.n	80027b2 <HAL_TIM_OC_Start_IT+0x1b2>
 80027b0:	2300      	movs	r3, #0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d007      	beq.n	80027c6 <HAL_TIM_OC_Start_IT+0x1c6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a25      	ldr	r2, [pc, #148]	; (8002860 <HAL_TIM_OC_Start_IT+0x260>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d022      	beq.n	8002816 <HAL_TIM_OC_Start_IT+0x216>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d8:	d01d      	beq.n	8002816 <HAL_TIM_OC_Start_IT+0x216>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a22      	ldr	r2, [pc, #136]	; (8002868 <HAL_TIM_OC_Start_IT+0x268>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d018      	beq.n	8002816 <HAL_TIM_OC_Start_IT+0x216>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a20      	ldr	r2, [pc, #128]	; (800286c <HAL_TIM_OC_Start_IT+0x26c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d013      	beq.n	8002816 <HAL_TIM_OC_Start_IT+0x216>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a1f      	ldr	r2, [pc, #124]	; (8002870 <HAL_TIM_OC_Start_IT+0x270>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d00e      	beq.n	8002816 <HAL_TIM_OC_Start_IT+0x216>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a19      	ldr	r2, [pc, #100]	; (8002864 <HAL_TIM_OC_Start_IT+0x264>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d009      	beq.n	8002816 <HAL_TIM_OC_Start_IT+0x216>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a1b      	ldr	r2, [pc, #108]	; (8002874 <HAL_TIM_OC_Start_IT+0x274>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d004      	beq.n	8002816 <HAL_TIM_OC_Start_IT+0x216>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a19      	ldr	r2, [pc, #100]	; (8002878 <HAL_TIM_OC_Start_IT+0x278>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d115      	bne.n	8002842 <HAL_TIM_OC_Start_IT+0x242>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	4b17      	ldr	r3, [pc, #92]	; (800287c <HAL_TIM_OC_Start_IT+0x27c>)
 800281e:	4013      	ands	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2b06      	cmp	r3, #6
 8002826:	d015      	beq.n	8002854 <HAL_TIM_OC_Start_IT+0x254>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800282e:	d011      	beq.n	8002854 <HAL_TIM_OC_Start_IT+0x254>
    {
      __HAL_TIM_ENABLE(htim);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 0201 	orr.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002840:	e008      	b.n	8002854 <HAL_TIM_OC_Start_IT+0x254>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f042 0201 	orr.w	r2, r2, #1
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	e000      	b.n	8002856 <HAL_TIM_OC_Start_IT+0x256>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002854:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40010000 	.word	0x40010000
 8002864:	40010400 	.word	0x40010400
 8002868:	40000400 	.word	0x40000400
 800286c:	40000800 	.word	0x40000800
 8002870:	40000c00 	.word	0x40000c00
 8002874:	40014000 	.word	0x40014000
 8002878:	40001800 	.word	0x40001800
 800287c:	00010007 	.word	0x00010007

08002880 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b02      	cmp	r3, #2
 8002894:	d122      	bne.n	80028dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d11b      	bne.n	80028dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f06f 0202 	mvn.w	r2, #2
 80028ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 fa42 	bl	8002d4c <HAL_TIM_IC_CaptureCallback>
 80028c8:	e005      	b.n	80028d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7fd fe52 	bl	8000574 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 fa45 	bl	8002d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	f003 0304 	and.w	r3, r3, #4
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	d122      	bne.n	8002930 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b04      	cmp	r3, #4
 80028f6:	d11b      	bne.n	8002930 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f06f 0204 	mvn.w	r2, #4
 8002900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2202      	movs	r2, #2
 8002906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 fa18 	bl	8002d4c <HAL_TIM_IC_CaptureCallback>
 800291c:	e005      	b.n	800292a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7fd fe28 	bl	8000574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 fa1b 	bl	8002d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	f003 0308 	and.w	r3, r3, #8
 800293a:	2b08      	cmp	r3, #8
 800293c:	d122      	bne.n	8002984 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	f003 0308 	and.w	r3, r3, #8
 8002948:	2b08      	cmp	r3, #8
 800294a:	d11b      	bne.n	8002984 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f06f 0208 	mvn.w	r2, #8
 8002954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2204      	movs	r2, #4
 800295a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f9ee 	bl	8002d4c <HAL_TIM_IC_CaptureCallback>
 8002970:	e005      	b.n	800297e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7fd fdfe 	bl	8000574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 f9f1 	bl	8002d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	f003 0310 	and.w	r3, r3, #16
 800298e:	2b10      	cmp	r3, #16
 8002990:	d122      	bne.n	80029d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	f003 0310 	and.w	r3, r3, #16
 800299c:	2b10      	cmp	r3, #16
 800299e:	d11b      	bne.n	80029d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f06f 0210 	mvn.w	r2, #16
 80029a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2208      	movs	r2, #8
 80029ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f9c4 	bl	8002d4c <HAL_TIM_IC_CaptureCallback>
 80029c4:	e005      	b.n	80029d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7fd fdd4 	bl	8000574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 f9c7 	bl	8002d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d10e      	bne.n	8002a04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d107      	bne.n	8002a04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f06f 0201 	mvn.w	r2, #1
 80029fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f99a 	bl	8002d38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a0e:	2b80      	cmp	r3, #128	; 0x80
 8002a10:	d10e      	bne.n	8002a30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a1c:	2b80      	cmp	r3, #128	; 0x80
 8002a1e:	d107      	bne.n	8002a30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 fe80 	bl	8003730 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a3e:	d10e      	bne.n	8002a5e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a4a:	2b80      	cmp	r3, #128	; 0x80
 8002a4c:	d107      	bne.n	8002a5e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002a56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 fe73 	bl	8003744 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a68:	2b40      	cmp	r3, #64	; 0x40
 8002a6a:	d10e      	bne.n	8002a8a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a76:	2b40      	cmp	r3, #64	; 0x40
 8002a78:	d107      	bne.n	8002a8a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f975 	bl	8002d74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	f003 0320 	and.w	r3, r3, #32
 8002a94:	2b20      	cmp	r3, #32
 8002a96:	d10e      	bne.n	8002ab6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	f003 0320 	and.w	r3, r3, #32
 8002aa2:	2b20      	cmp	r3, #32
 8002aa4:	d107      	bne.n	8002ab6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f06f 0220 	mvn.w	r2, #32
 8002aae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 fe33 	bl	800371c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ab6:	bf00      	nop
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d101      	bne.n	8002ada <HAL_TIM_OC_ConfigChannel+0x1a>
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	e064      	b.n	8002ba4 <HAL_TIM_OC_ConfigChannel+0xe4>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b14      	cmp	r3, #20
 8002ae6:	d857      	bhi.n	8002b98 <HAL_TIM_OC_ConfigChannel+0xd8>
 8002ae8:	a201      	add	r2, pc, #4	; (adr r2, 8002af0 <HAL_TIM_OC_ConfigChannel+0x30>)
 8002aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aee:	bf00      	nop
 8002af0:	08002b45 	.word	0x08002b45
 8002af4:	08002b99 	.word	0x08002b99
 8002af8:	08002b99 	.word	0x08002b99
 8002afc:	08002b99 	.word	0x08002b99
 8002b00:	08002b53 	.word	0x08002b53
 8002b04:	08002b99 	.word	0x08002b99
 8002b08:	08002b99 	.word	0x08002b99
 8002b0c:	08002b99 	.word	0x08002b99
 8002b10:	08002b61 	.word	0x08002b61
 8002b14:	08002b99 	.word	0x08002b99
 8002b18:	08002b99 	.word	0x08002b99
 8002b1c:	08002b99 	.word	0x08002b99
 8002b20:	08002b6f 	.word	0x08002b6f
 8002b24:	08002b99 	.word	0x08002b99
 8002b28:	08002b99 	.word	0x08002b99
 8002b2c:	08002b99 	.word	0x08002b99
 8002b30:	08002b7d 	.word	0x08002b7d
 8002b34:	08002b99 	.word	0x08002b99
 8002b38:	08002b99 	.word	0x08002b99
 8002b3c:	08002b99 	.word	0x08002b99
 8002b40:	08002b8b 	.word	0x08002b8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68b9      	ldr	r1, [r7, #8]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 f9bc 	bl	8002ec8 <TIM_OC1_SetConfig>
      break;
 8002b50:	e023      	b.n	8002b9a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68b9      	ldr	r1, [r7, #8]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f000 fa27 	bl	8002fac <TIM_OC2_SetConfig>
      break;
 8002b5e:	e01c      	b.n	8002b9a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68b9      	ldr	r1, [r7, #8]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 fa98 	bl	800309c <TIM_OC3_SetConfig>
      break;
 8002b6c:	e015      	b.n	8002b9a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68b9      	ldr	r1, [r7, #8]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f000 fb07 	bl	8003188 <TIM_OC4_SetConfig>
      break;
 8002b7a:	e00e      	b.n	8002b9a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68b9      	ldr	r1, [r7, #8]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 fb58 	bl	8003238 <TIM_OC5_SetConfig>
      break;
 8002b88:	e007      	b.n	8002b9a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68b9      	ldr	r1, [r7, #8]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 fba3 	bl	80032dc <TIM_OC6_SetConfig>
      break;
 8002b96:	e000      	b.n	8002b9a <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 8002b98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d101      	bne.n	8002bc4 <HAL_TIM_ConfigClockSource+0x18>
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	e0b3      	b.n	8002d2c <HAL_TIM_ConfigClockSource+0x180>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2202      	movs	r2, #2
 8002bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	4b55      	ldr	r3, [pc, #340]	; (8002d34 <HAL_TIM_ConfigClockSource+0x188>)
 8002be0:	4013      	ands	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bfc:	d03e      	beq.n	8002c7c <HAL_TIM_ConfigClockSource+0xd0>
 8002bfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c02:	f200 8087 	bhi.w	8002d14 <HAL_TIM_ConfigClockSource+0x168>
 8002c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c0a:	f000 8085 	beq.w	8002d18 <HAL_TIM_ConfigClockSource+0x16c>
 8002c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c12:	d87f      	bhi.n	8002d14 <HAL_TIM_ConfigClockSource+0x168>
 8002c14:	2b70      	cmp	r3, #112	; 0x70
 8002c16:	d01a      	beq.n	8002c4e <HAL_TIM_ConfigClockSource+0xa2>
 8002c18:	2b70      	cmp	r3, #112	; 0x70
 8002c1a:	d87b      	bhi.n	8002d14 <HAL_TIM_ConfigClockSource+0x168>
 8002c1c:	2b60      	cmp	r3, #96	; 0x60
 8002c1e:	d050      	beq.n	8002cc2 <HAL_TIM_ConfigClockSource+0x116>
 8002c20:	2b60      	cmp	r3, #96	; 0x60
 8002c22:	d877      	bhi.n	8002d14 <HAL_TIM_ConfigClockSource+0x168>
 8002c24:	2b50      	cmp	r3, #80	; 0x50
 8002c26:	d03c      	beq.n	8002ca2 <HAL_TIM_ConfigClockSource+0xf6>
 8002c28:	2b50      	cmp	r3, #80	; 0x50
 8002c2a:	d873      	bhi.n	8002d14 <HAL_TIM_ConfigClockSource+0x168>
 8002c2c:	2b40      	cmp	r3, #64	; 0x40
 8002c2e:	d058      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0x136>
 8002c30:	2b40      	cmp	r3, #64	; 0x40
 8002c32:	d86f      	bhi.n	8002d14 <HAL_TIM_ConfigClockSource+0x168>
 8002c34:	2b30      	cmp	r3, #48	; 0x30
 8002c36:	d064      	beq.n	8002d02 <HAL_TIM_ConfigClockSource+0x156>
 8002c38:	2b30      	cmp	r3, #48	; 0x30
 8002c3a:	d86b      	bhi.n	8002d14 <HAL_TIM_ConfigClockSource+0x168>
 8002c3c:	2b20      	cmp	r3, #32
 8002c3e:	d060      	beq.n	8002d02 <HAL_TIM_ConfigClockSource+0x156>
 8002c40:	2b20      	cmp	r3, #32
 8002c42:	d867      	bhi.n	8002d14 <HAL_TIM_ConfigClockSource+0x168>
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d05c      	beq.n	8002d02 <HAL_TIM_ConfigClockSource+0x156>
 8002c48:	2b10      	cmp	r3, #16
 8002c4a:	d05a      	beq.n	8002d02 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002c4c:	e062      	b.n	8002d14 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6818      	ldr	r0, [r3, #0]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	6899      	ldr	r1, [r3, #8]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	f000 fc0b 	bl	8003478 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c70:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	609a      	str	r2, [r3, #8]
      break;
 8002c7a:	e04e      	b.n	8002d1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6818      	ldr	r0, [r3, #0]
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	6899      	ldr	r1, [r3, #8]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f000 fbf4 	bl	8003478 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c9e:	609a      	str	r2, [r3, #8]
      break;
 8002ca0:	e03b      	b.n	8002d1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6818      	ldr	r0, [r3, #0]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	6859      	ldr	r1, [r3, #4]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	f000 fb68 	bl	8003384 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2150      	movs	r1, #80	; 0x50
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 fbc1 	bl	8003442 <TIM_ITRx_SetConfig>
      break;
 8002cc0:	e02b      	b.n	8002d1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6818      	ldr	r0, [r3, #0]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	6859      	ldr	r1, [r3, #4]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	f000 fb87 	bl	80033e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2160      	movs	r1, #96	; 0x60
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 fbb1 	bl	8003442 <TIM_ITRx_SetConfig>
      break;
 8002ce0:	e01b      	b.n	8002d1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6818      	ldr	r0, [r3, #0]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	6859      	ldr	r1, [r3, #4]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	f000 fb48 	bl	8003384 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2140      	movs	r1, #64	; 0x40
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f000 fba1 	bl	8003442 <TIM_ITRx_SetConfig>
      break;
 8002d00:	e00b      	b.n	8002d1a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	4610      	mov	r0, r2
 8002d0e:	f000 fb98 	bl	8003442 <TIM_ITRx_SetConfig>
        break;
 8002d12:	e002      	b.n	8002d1a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002d14:	bf00      	nop
 8002d16:	e000      	b.n	8002d1a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002d18:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	fffeff88 	.word	0xfffeff88

08002d38 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a40      	ldr	r2, [pc, #256]	; (8002e9c <TIM_Base_SetConfig+0x114>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d013      	beq.n	8002dc8 <TIM_Base_SetConfig+0x40>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da6:	d00f      	beq.n	8002dc8 <TIM_Base_SetConfig+0x40>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a3d      	ldr	r2, [pc, #244]	; (8002ea0 <TIM_Base_SetConfig+0x118>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d00b      	beq.n	8002dc8 <TIM_Base_SetConfig+0x40>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a3c      	ldr	r2, [pc, #240]	; (8002ea4 <TIM_Base_SetConfig+0x11c>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d007      	beq.n	8002dc8 <TIM_Base_SetConfig+0x40>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a3b      	ldr	r2, [pc, #236]	; (8002ea8 <TIM_Base_SetConfig+0x120>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d003      	beq.n	8002dc8 <TIM_Base_SetConfig+0x40>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a3a      	ldr	r2, [pc, #232]	; (8002eac <TIM_Base_SetConfig+0x124>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d108      	bne.n	8002dda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a2f      	ldr	r2, [pc, #188]	; (8002e9c <TIM_Base_SetConfig+0x114>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d02b      	beq.n	8002e3a <TIM_Base_SetConfig+0xb2>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002de8:	d027      	beq.n	8002e3a <TIM_Base_SetConfig+0xb2>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a2c      	ldr	r2, [pc, #176]	; (8002ea0 <TIM_Base_SetConfig+0x118>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d023      	beq.n	8002e3a <TIM_Base_SetConfig+0xb2>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a2b      	ldr	r2, [pc, #172]	; (8002ea4 <TIM_Base_SetConfig+0x11c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d01f      	beq.n	8002e3a <TIM_Base_SetConfig+0xb2>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a2a      	ldr	r2, [pc, #168]	; (8002ea8 <TIM_Base_SetConfig+0x120>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d01b      	beq.n	8002e3a <TIM_Base_SetConfig+0xb2>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a29      	ldr	r2, [pc, #164]	; (8002eac <TIM_Base_SetConfig+0x124>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d017      	beq.n	8002e3a <TIM_Base_SetConfig+0xb2>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a28      	ldr	r2, [pc, #160]	; (8002eb0 <TIM_Base_SetConfig+0x128>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d013      	beq.n	8002e3a <TIM_Base_SetConfig+0xb2>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a27      	ldr	r2, [pc, #156]	; (8002eb4 <TIM_Base_SetConfig+0x12c>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d00f      	beq.n	8002e3a <TIM_Base_SetConfig+0xb2>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a26      	ldr	r2, [pc, #152]	; (8002eb8 <TIM_Base_SetConfig+0x130>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d00b      	beq.n	8002e3a <TIM_Base_SetConfig+0xb2>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a25      	ldr	r2, [pc, #148]	; (8002ebc <TIM_Base_SetConfig+0x134>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d007      	beq.n	8002e3a <TIM_Base_SetConfig+0xb2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a24      	ldr	r2, [pc, #144]	; (8002ec0 <TIM_Base_SetConfig+0x138>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d003      	beq.n	8002e3a <TIM_Base_SetConfig+0xb2>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a23      	ldr	r2, [pc, #140]	; (8002ec4 <TIM_Base_SetConfig+0x13c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d108      	bne.n	8002e4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a0a      	ldr	r2, [pc, #40]	; (8002e9c <TIM_Base_SetConfig+0x114>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d003      	beq.n	8002e80 <TIM_Base_SetConfig+0xf8>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a0c      	ldr	r2, [pc, #48]	; (8002eac <TIM_Base_SetConfig+0x124>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d103      	bne.n	8002e88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	691a      	ldr	r2, [r3, #16]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	615a      	str	r2, [r3, #20]
}
 8002e8e:	bf00      	nop
 8002e90:	3714      	adds	r7, #20
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	40010000 	.word	0x40010000
 8002ea0:	40000400 	.word	0x40000400
 8002ea4:	40000800 	.word	0x40000800
 8002ea8:	40000c00 	.word	0x40000c00
 8002eac:	40010400 	.word	0x40010400
 8002eb0:	40014000 	.word	0x40014000
 8002eb4:	40014400 	.word	0x40014400
 8002eb8:	40014800 	.word	0x40014800
 8002ebc:	40001800 	.word	0x40001800
 8002ec0:	40001c00 	.word	0x40001c00
 8002ec4:	40002000 	.word	0x40002000

08002ec8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b087      	sub	sp, #28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	f023 0201 	bic.w	r2, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	4b2b      	ldr	r3, [pc, #172]	; (8002fa0 <TIM_OC1_SetConfig+0xd8>)
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f023 0303 	bic.w	r3, r3, #3
 8002efe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	f023 0302 	bic.w	r3, r3, #2
 8002f10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a21      	ldr	r2, [pc, #132]	; (8002fa4 <TIM_OC1_SetConfig+0xdc>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d003      	beq.n	8002f2c <TIM_OC1_SetConfig+0x64>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a20      	ldr	r2, [pc, #128]	; (8002fa8 <TIM_OC1_SetConfig+0xe0>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d10c      	bne.n	8002f46 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f023 0308 	bic.w	r3, r3, #8
 8002f32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f023 0304 	bic.w	r3, r3, #4
 8002f44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a16      	ldr	r2, [pc, #88]	; (8002fa4 <TIM_OC1_SetConfig+0xdc>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d003      	beq.n	8002f56 <TIM_OC1_SetConfig+0x8e>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a15      	ldr	r2, [pc, #84]	; (8002fa8 <TIM_OC1_SetConfig+0xe0>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d111      	bne.n	8002f7a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685a      	ldr	r2, [r3, #4]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	621a      	str	r2, [r3, #32]
}
 8002f94:	bf00      	nop
 8002f96:	371c      	adds	r7, #28
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	fffeff8f 	.word	0xfffeff8f
 8002fa4:	40010000 	.word	0x40010000
 8002fa8:	40010400 	.word	0x40010400

08002fac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b087      	sub	sp, #28
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	f023 0210 	bic.w	r2, r3, #16
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	4b2e      	ldr	r3, [pc, #184]	; (8003090 <TIM_OC2_SetConfig+0xe4>)
 8002fd8:	4013      	ands	r3, r2
 8002fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	021b      	lsls	r3, r3, #8
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	f023 0320 	bic.w	r3, r3, #32
 8002ff6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	4313      	orrs	r3, r2
 8003002:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a23      	ldr	r2, [pc, #140]	; (8003094 <TIM_OC2_SetConfig+0xe8>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d003      	beq.n	8003014 <TIM_OC2_SetConfig+0x68>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a22      	ldr	r2, [pc, #136]	; (8003098 <TIM_OC2_SetConfig+0xec>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d10d      	bne.n	8003030 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800301a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	011b      	lsls	r3, r3, #4
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	4313      	orrs	r3, r2
 8003026:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800302e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a18      	ldr	r2, [pc, #96]	; (8003094 <TIM_OC2_SetConfig+0xe8>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d003      	beq.n	8003040 <TIM_OC2_SetConfig+0x94>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a17      	ldr	r2, [pc, #92]	; (8003098 <TIM_OC2_SetConfig+0xec>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d113      	bne.n	8003068 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003046:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800304e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	4313      	orrs	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	4313      	orrs	r3, r2
 8003066:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	621a      	str	r2, [r3, #32]
}
 8003082:	bf00      	nop
 8003084:	371c      	adds	r7, #28
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	feff8fff 	.word	0xfeff8fff
 8003094:	40010000 	.word	0x40010000
 8003098:	40010400 	.word	0x40010400

0800309c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800309c:	b480      	push	{r7}
 800309e:	b087      	sub	sp, #28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	4b2d      	ldr	r3, [pc, #180]	; (800317c <TIM_OC3_SetConfig+0xe0>)
 80030c8:	4013      	ands	r3, r2
 80030ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f023 0303 	bic.w	r3, r3, #3
 80030d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	4313      	orrs	r3, r2
 80030dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	021b      	lsls	r3, r3, #8
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a22      	ldr	r2, [pc, #136]	; (8003180 <TIM_OC3_SetConfig+0xe4>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d003      	beq.n	8003102 <TIM_OC3_SetConfig+0x66>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a21      	ldr	r2, [pc, #132]	; (8003184 <TIM_OC3_SetConfig+0xe8>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d10d      	bne.n	800311e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003108:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	021b      	lsls	r3, r3, #8
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	4313      	orrs	r3, r2
 8003114:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800311c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a17      	ldr	r2, [pc, #92]	; (8003180 <TIM_OC3_SetConfig+0xe4>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d003      	beq.n	800312e <TIM_OC3_SetConfig+0x92>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a16      	ldr	r2, [pc, #88]	; (8003184 <TIM_OC3_SetConfig+0xe8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d113      	bne.n	8003156 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003134:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800313c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	011b      	lsls	r3, r3, #4
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	4313      	orrs	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	011b      	lsls	r3, r3, #4
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	4313      	orrs	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	621a      	str	r2, [r3, #32]
}
 8003170:	bf00      	nop
 8003172:	371c      	adds	r7, #28
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	fffeff8f 	.word	0xfffeff8f
 8003180:	40010000 	.word	0x40010000
 8003184:	40010400 	.word	0x40010400

08003188 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003188:	b480      	push	{r7}
 800318a:	b087      	sub	sp, #28
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	4b1e      	ldr	r3, [pc, #120]	; (800322c <TIM_OC4_SetConfig+0xa4>)
 80031b4:	4013      	ands	r3, r2
 80031b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	021b      	lsls	r3, r3, #8
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	031b      	lsls	r3, r3, #12
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	4313      	orrs	r3, r2
 80031de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a13      	ldr	r2, [pc, #76]	; (8003230 <TIM_OC4_SetConfig+0xa8>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d003      	beq.n	80031f0 <TIM_OC4_SetConfig+0x68>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a12      	ldr	r2, [pc, #72]	; (8003234 <TIM_OC4_SetConfig+0xac>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d109      	bne.n	8003204 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	019b      	lsls	r3, r3, #6
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	4313      	orrs	r3, r2
 8003202:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	621a      	str	r2, [r3, #32]
}
 800321e:	bf00      	nop
 8003220:	371c      	adds	r7, #28
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	feff8fff 	.word	0xfeff8fff
 8003230:	40010000 	.word	0x40010000
 8003234:	40010400 	.word	0x40010400

08003238 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003238:	b480      	push	{r7}
 800323a:	b087      	sub	sp, #28
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	4b1b      	ldr	r3, [pc, #108]	; (80032d0 <TIM_OC5_SetConfig+0x98>)
 8003264:	4013      	ands	r3, r2
 8003266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	4313      	orrs	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003278:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	041b      	lsls	r3, r3, #16
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	4313      	orrs	r3, r2
 8003284:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a12      	ldr	r2, [pc, #72]	; (80032d4 <TIM_OC5_SetConfig+0x9c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d003      	beq.n	8003296 <TIM_OC5_SetConfig+0x5e>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a11      	ldr	r2, [pc, #68]	; (80032d8 <TIM_OC5_SetConfig+0xa0>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d109      	bne.n	80032aa <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800329c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	021b      	lsls	r3, r3, #8
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	621a      	str	r2, [r3, #32]
}
 80032c4:	bf00      	nop
 80032c6:	371c      	adds	r7, #28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	fffeff8f 	.word	0xfffeff8f
 80032d4:	40010000 	.word	0x40010000
 80032d8:	40010400 	.word	0x40010400

080032dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80032dc:	b480      	push	{r7}
 80032de:	b087      	sub	sp, #28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	4b1c      	ldr	r3, [pc, #112]	; (8003378 <TIM_OC6_SetConfig+0x9c>)
 8003308:	4013      	ands	r3, r2
 800330a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	021b      	lsls	r3, r3, #8
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	4313      	orrs	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800331e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	051b      	lsls	r3, r3, #20
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	4313      	orrs	r3, r2
 800332a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a13      	ldr	r2, [pc, #76]	; (800337c <TIM_OC6_SetConfig+0xa0>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d003      	beq.n	800333c <TIM_OC6_SetConfig+0x60>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a12      	ldr	r2, [pc, #72]	; (8003380 <TIM_OC6_SetConfig+0xa4>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d109      	bne.n	8003350 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003342:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	029b      	lsls	r3, r3, #10
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	4313      	orrs	r3, r2
 800334e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	621a      	str	r2, [r3, #32]
}
 800336a:	bf00      	nop
 800336c:	371c      	adds	r7, #28
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	feff8fff 	.word	0xfeff8fff
 800337c:	40010000 	.word	0x40010000
 8003380:	40010400 	.word	0x40010400

08003384 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003384:	b480      	push	{r7}
 8003386:	b087      	sub	sp, #28
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	f023 0201 	bic.w	r2, r3, #1
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	011b      	lsls	r3, r3, #4
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f023 030a 	bic.w	r3, r3, #10
 80033c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	621a      	str	r2, [r3, #32]
}
 80033d6:	bf00      	nop
 80033d8:	371c      	adds	r7, #28
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b087      	sub	sp, #28
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	60f8      	str	r0, [r7, #12]
 80033ea:	60b9      	str	r1, [r7, #8]
 80033ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	f023 0210 	bic.w	r2, r3, #16
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800340c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	031b      	lsls	r3, r3, #12
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	4313      	orrs	r3, r2
 8003416:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800341e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	011b      	lsls	r3, r3, #4
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	621a      	str	r2, [r3, #32]
}
 8003436:	bf00      	nop
 8003438:	371c      	adds	r7, #28
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003442:	b480      	push	{r7}
 8003444:	b085      	sub	sp, #20
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
 800344a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003458:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	4313      	orrs	r3, r2
 8003460:	f043 0307 	orr.w	r3, r3, #7
 8003464:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	609a      	str	r2, [r3, #8]
}
 800346c:	bf00      	nop
 800346e:	3714      	adds	r7, #20
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003478:	b480      	push	{r7}
 800347a:	b087      	sub	sp, #28
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
 8003484:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003492:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	021a      	lsls	r2, r3, #8
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	431a      	orrs	r2, r3
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	4313      	orrs	r3, r2
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	609a      	str	r2, [r3, #8]
}
 80034ac:	bf00      	nop
 80034ae:	371c      	adds	r7, #28
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b087      	sub	sp, #28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	f003 031f 	and.w	r3, r3, #31
 80034ca:	2201      	movs	r2, #1
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6a1a      	ldr	r2, [r3, #32]
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	43db      	mvns	r3, r3
 80034da:	401a      	ands	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6a1a      	ldr	r2, [r3, #32]
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	f003 031f 	and.w	r3, r3, #31
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	fa01 f303 	lsl.w	r3, r1, r3
 80034f0:	431a      	orrs	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	621a      	str	r2, [r3, #32]
}
 80034f6:	bf00      	nop
 80034f8:	371c      	adds	r7, #28
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
	...

08003504 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003514:	2b01      	cmp	r3, #1
 8003516:	d101      	bne.n	800351c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003518:	2302      	movs	r3, #2
 800351a:	e06d      	b.n	80035f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2202      	movs	r2, #2
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a30      	ldr	r2, [pc, #192]	; (8003604 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d004      	beq.n	8003550 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a2f      	ldr	r2, [pc, #188]	; (8003608 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d108      	bne.n	8003562 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003556:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	4313      	orrs	r3, r2
 8003560:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003568:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	4313      	orrs	r3, r2
 8003572:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a20      	ldr	r2, [pc, #128]	; (8003604 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d022      	beq.n	80035cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800358e:	d01d      	beq.n	80035cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a1d      	ldr	r2, [pc, #116]	; (800360c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d018      	beq.n	80035cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a1c      	ldr	r2, [pc, #112]	; (8003610 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d013      	beq.n	80035cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a1a      	ldr	r2, [pc, #104]	; (8003614 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d00e      	beq.n	80035cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a15      	ldr	r2, [pc, #84]	; (8003608 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d009      	beq.n	80035cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a16      	ldr	r2, [pc, #88]	; (8003618 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d004      	beq.n	80035cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a15      	ldr	r2, [pc, #84]	; (800361c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d10c      	bne.n	80035e6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	4313      	orrs	r3, r2
 80035dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3714      	adds	r7, #20
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr
 8003604:	40010000 	.word	0x40010000
 8003608:	40010400 	.word	0x40010400
 800360c:	40000400 	.word	0x40000400
 8003610:	40000800 	.word	0x40000800
 8003614:	40000c00 	.word	0x40000c00
 8003618:	40014000 	.word	0x40014000
 800361c:	40001800 	.word	0x40001800

08003620 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800362a:	2300      	movs	r3, #0
 800362c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003634:	2b01      	cmp	r3, #1
 8003636:	d101      	bne.n	800363c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003638:	2302      	movs	r3, #2
 800363a:	e065      	b.n	8003708 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	4313      	orrs	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	4313      	orrs	r3, r2
 800365e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	4313      	orrs	r3, r2
 800366c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4313      	orrs	r3, r2
 800367a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	4313      	orrs	r3, r2
 8003688:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	4313      	orrs	r3, r2
 8003696:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a2:	4313      	orrs	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	041b      	lsls	r3, r3, #16
 80036b2:	4313      	orrs	r3, r2
 80036b4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a16      	ldr	r2, [pc, #88]	; (8003714 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d004      	beq.n	80036ca <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a14      	ldr	r2, [pc, #80]	; (8003718 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d115      	bne.n	80036f6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d4:	051b      	lsls	r3, r3, #20
 80036d6:	4313      	orrs	r3, r2
 80036d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	40010000 	.word	0x40010000
 8003718:	40010400 	.word	0x40010400

0800371c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e040      	b.n	80037ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800376e:	2b00      	cmp	r3, #0
 8003770:	d106      	bne.n	8003780 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7fd f928 	bl	80009d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2224      	movs	r2, #36	; 0x24
 8003784:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0201 	bic.w	r2, r2, #1
 8003794:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 fabe 	bl	8003d18 <UART_SetConfig>
 800379c:	4603      	mov	r3, r0
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d101      	bne.n	80037a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e022      	b.n	80037ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d002      	beq.n	80037b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 fd14 	bl	80041dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689a      	ldr	r2, [r3, #8]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f042 0201 	orr.w	r2, r2, #1
 80037e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 fd9b 	bl	8004320 <UART_CheckIdleState>
 80037ea:	4603      	mov	r3, r0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	4613      	mov	r3, r2
 8003800:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003806:	2b20      	cmp	r3, #32
 8003808:	d145      	bne.n	8003896 <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d002      	beq.n	8003816 <HAL_UART_Transmit_IT+0x22>
 8003810:	88fb      	ldrh	r3, [r7, #6]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e03e      	b.n	8003898 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003820:	2b01      	cmp	r3, #1
 8003822:	d101      	bne.n	8003828 <HAL_UART_Transmit_IT+0x34>
 8003824:	2302      	movs	r3, #2
 8003826:	e037      	b.n	8003898 <HAL_UART_Transmit_IT+0xa4>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	88fa      	ldrh	r2, [r7, #6]
 800383a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	88fa      	ldrh	r2, [r7, #6]
 8003842:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2221      	movs	r2, #33	; 0x21
 8003858:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003862:	d107      	bne.n	8003874 <HAL_UART_Transmit_IT+0x80>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d103      	bne.n	8003874 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4a0d      	ldr	r2, [pc, #52]	; (80038a4 <HAL_UART_Transmit_IT+0xb0>)
 8003870:	669a      	str	r2, [r3, #104]	; 0x68
 8003872:	e002      	b.n	800387a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	4a0c      	ldr	r2, [pc, #48]	; (80038a8 <HAL_UART_Transmit_IT+0xb4>)
 8003878:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003890:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003892:	2300      	movs	r3, #0
 8003894:	e000      	b.n	8003898 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 8003896:	2302      	movs	r3, #2
  }
}
 8003898:	4618      	mov	r0, r3
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	0800468d 	.word	0x0800468d
 80038a8:	0800461b 	.word	0x0800461b

080038ac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	4613      	mov	r3, r2
 80038b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038be:	2b20      	cmp	r3, #32
 80038c0:	d12c      	bne.n	800391c <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d002      	beq.n	80038ce <HAL_UART_Receive_IT+0x22>
 80038c8:	88fb      	ldrh	r3, [r7, #6]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e025      	b.n	800391e <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d101      	bne.n	80038e0 <HAL_UART_Receive_IT+0x34>
 80038dc:	2302      	movs	r3, #2
 80038de:	e01e      	b.n	800391e <HAL_UART_Receive_IT+0x72>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d007      	beq.n	800390c <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800390a:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800390c:	88fb      	ldrh	r3, [r7, #6]
 800390e:	461a      	mov	r2, r3
 8003910:	68b9      	ldr	r1, [r7, #8]
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 fdb4 	bl	8004480 <UART_Start_Receive_IT>
 8003918:	4603      	mov	r3, r0
 800391a:	e000      	b.n	800391e <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 800391c:	2302      	movs	r3, #2
  }
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
	...

08003928 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b088      	sub	sp, #32
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003948:	69fa      	ldr	r2, [r7, #28]
 800394a:	f640 030f 	movw	r3, #2063	; 0x80f
 800394e:	4013      	ands	r3, r2
 8003950:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d113      	bne.n	8003980 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	f003 0320 	and.w	r3, r3, #32
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00e      	beq.n	8003980 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	f003 0320 	and.w	r3, r3, #32
 8003968:	2b00      	cmp	r3, #0
 800396a:	d009      	beq.n	8003980 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 81b9 	beq.w	8003ce8 <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	4798      	blx	r3
      }
      return;
 800397e:	e1b3      	b.n	8003ce8 <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 80e3 	beq.w	8003b4e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	d105      	bne.n	800399e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	4ba5      	ldr	r3, [pc, #660]	; (8003c2c <HAL_UART_IRQHandler+0x304>)
 8003996:	4013      	ands	r3, r2
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 80d8 	beq.w	8003b4e <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d010      	beq.n	80039ca <HAL_UART_IRQHandler+0xa2>
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00b      	beq.n	80039ca <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2201      	movs	r2, #1
 80039b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039c0:	f043 0201 	orr.w	r2, r3, #1
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d010      	beq.n	80039f6 <HAL_UART_IRQHandler+0xce>
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00b      	beq.n	80039f6 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2202      	movs	r2, #2
 80039e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039ec:	f043 0204 	orr.w	r2, r3, #4
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d010      	beq.n	8003a22 <HAL_UART_IRQHandler+0xfa>
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00b      	beq.n	8003a22 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2204      	movs	r2, #4
 8003a10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a18:	f043 0202 	orr.w	r2, r3, #2
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	f003 0308 	and.w	r3, r3, #8
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d015      	beq.n	8003a58 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	f003 0320 	and.w	r3, r3, #32
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d104      	bne.n	8003a40 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d00b      	beq.n	8003a58 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2208      	movs	r2, #8
 8003a46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a4e:	f043 0208 	orr.w	r2, r3, #8
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d011      	beq.n	8003a86 <HAL_UART_IRQHandler+0x15e>
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00c      	beq.n	8003a86 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a7c:	f043 0220 	orr.w	r2, r3, #32
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f000 812d 	beq.w	8003cec <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	f003 0320 	and.w	r3, r3, #32
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00c      	beq.n	8003ab6 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	f003 0320 	and.w	r3, r3, #32
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d007      	beq.n	8003ab6 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003abc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac8:	2b40      	cmp	r3, #64	; 0x40
 8003aca:	d004      	beq.n	8003ad6 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d031      	beq.n	8003b3a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 fd5a 	bl	8004590 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae6:	2b40      	cmp	r3, #64	; 0x40
 8003ae8:	d123      	bne.n	8003b32 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003af8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d013      	beq.n	8003b2a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b06:	4a4a      	ldr	r2, [pc, #296]	; (8003c30 <HAL_UART_IRQHandler+0x308>)
 8003b08:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fd fa01 	bl	8000f16 <HAL_DMA_Abort_IT>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d017      	beq.n	8003b4a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003b24:	4610      	mov	r0, r2
 8003b26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b28:	e00f      	b.n	8003b4a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7fc fce8 	bl	8000500 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b30:	e00b      	b.n	8003b4a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7fc fce4 	bl	8000500 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b38:	e007      	b.n	8003b4a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7fc fce0 	bl	8000500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003b48:	e0d0      	b.n	8003cec <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b4a:	bf00      	nop
    return;
 8003b4c:	e0ce      	b.n	8003cec <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	f040 80a7 	bne.w	8003ca6 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	f003 0310 	and.w	r3, r3, #16
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f000 80a1 	beq.w	8003ca6 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	f003 0310 	and.w	r3, r3, #16
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 809b 	beq.w	8003ca6 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2210      	movs	r2, #16
 8003b76:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b82:	2b40      	cmp	r3, #64	; 0x40
 8003b84:	d156      	bne.n	8003c34 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8003b90:	893b      	ldrh	r3, [r7, #8]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 80ac 	beq.w	8003cf0 <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003b9e:	893a      	ldrh	r2, [r7, #8]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	f080 80a5 	bcs.w	8003cf0 <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	893a      	ldrh	r2, [r7, #8]
 8003baa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bb8:	d02a      	beq.n	8003c10 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bc8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 0201 	bic.w	r2, r2, #1
 8003bd8:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003be8:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2220      	movs	r2, #32
 8003bee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 0210 	bic.w	r2, r2, #16
 8003c04:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7fd f913 	bl	8000e36 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	4619      	mov	r1, r3
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 f86b 	bl	8003d00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c2a:	e061      	b.n	8003cf0 <HAL_UART_IRQHandler+0x3c8>
 8003c2c:	04000120 	.word	0x04000120
 8003c30:	080045ef 	.word	0x080045ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d050      	beq.n	8003cf4 <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 8003c52:	897b      	ldrh	r3, [r7, #10]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d04d      	beq.n	8003cf4 <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c66:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689a      	ldr	r2, [r3, #8]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 0201 	bic.w	r2, r2, #1
 8003c76:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0210 	bic.w	r2, r2, #16
 8003c98:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c9a:	897b      	ldrh	r3, [r7, #10]
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f82e 	bl	8003d00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ca4:	e026      	b.n	8003cf4 <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00d      	beq.n	8003ccc <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d008      	beq.n	8003ccc <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d01a      	beq.n	8003cf8 <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	4798      	blx	r3
    }
    return;
 8003cca:	e015      	b.n	8003cf8 <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d011      	beq.n	8003cfa <HAL_UART_IRQHandler+0x3d2>
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00c      	beq.n	8003cfa <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 fd11 	bl	8004708 <UART_EndTransmit_IT>
    return;
 8003ce6:	e008      	b.n	8003cfa <HAL_UART_IRQHandler+0x3d2>
      return;
 8003ce8:	bf00      	nop
 8003cea:	e006      	b.n	8003cfa <HAL_UART_IRQHandler+0x3d2>
    return;
 8003cec:	bf00      	nop
 8003cee:	e004      	b.n	8003cfa <HAL_UART_IRQHandler+0x3d2>
      return;
 8003cf0:	bf00      	nop
 8003cf2:	e002      	b.n	8003cfa <HAL_UART_IRQHandler+0x3d2>
      return;
 8003cf4:	bf00      	nop
 8003cf6:	e000      	b.n	8003cfa <HAL_UART_IRQHandler+0x3d2>
    return;
 8003cf8:	bf00      	nop
  }

}
 8003cfa:	3720      	adds	r7, #32
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	460b      	mov	r3, r1
 8003d0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b088      	sub	sp, #32
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d20:	2300      	movs	r3, #0
 8003d22:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	431a      	orrs	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	69db      	ldr	r3, [r3, #28]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	4ba7      	ldr	r3, [pc, #668]	; (8003fe0 <UART_SetConfig+0x2c8>)
 8003d44:	4013      	ands	r3, r2
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	6812      	ldr	r2, [r2, #0]
 8003d4a:	6979      	ldr	r1, [r7, #20]
 8003d4c:	430b      	orrs	r3, r1
 8003d4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68da      	ldr	r2, [r3, #12]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a1b      	ldr	r3, [r3, #32]
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a95      	ldr	r2, [pc, #596]	; (8003fe4 <UART_SetConfig+0x2cc>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d120      	bne.n	8003dd6 <UART_SetConfig+0xbe>
 8003d94:	4b94      	ldr	r3, [pc, #592]	; (8003fe8 <UART_SetConfig+0x2d0>)
 8003d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9a:	f003 0303 	and.w	r3, r3, #3
 8003d9e:	2b03      	cmp	r3, #3
 8003da0:	d816      	bhi.n	8003dd0 <UART_SetConfig+0xb8>
 8003da2:	a201      	add	r2, pc, #4	; (adr r2, 8003da8 <UART_SetConfig+0x90>)
 8003da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da8:	08003db9 	.word	0x08003db9
 8003dac:	08003dc5 	.word	0x08003dc5
 8003db0:	08003dbf 	.word	0x08003dbf
 8003db4:	08003dcb 	.word	0x08003dcb
 8003db8:	2301      	movs	r3, #1
 8003dba:	77fb      	strb	r3, [r7, #31]
 8003dbc:	e14f      	b.n	800405e <UART_SetConfig+0x346>
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	77fb      	strb	r3, [r7, #31]
 8003dc2:	e14c      	b.n	800405e <UART_SetConfig+0x346>
 8003dc4:	2304      	movs	r3, #4
 8003dc6:	77fb      	strb	r3, [r7, #31]
 8003dc8:	e149      	b.n	800405e <UART_SetConfig+0x346>
 8003dca:	2308      	movs	r3, #8
 8003dcc:	77fb      	strb	r3, [r7, #31]
 8003dce:	e146      	b.n	800405e <UART_SetConfig+0x346>
 8003dd0:	2310      	movs	r3, #16
 8003dd2:	77fb      	strb	r3, [r7, #31]
 8003dd4:	e143      	b.n	800405e <UART_SetConfig+0x346>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a84      	ldr	r2, [pc, #528]	; (8003fec <UART_SetConfig+0x2d4>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d132      	bne.n	8003e46 <UART_SetConfig+0x12e>
 8003de0:	4b81      	ldr	r3, [pc, #516]	; (8003fe8 <UART_SetConfig+0x2d0>)
 8003de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de6:	f003 030c 	and.w	r3, r3, #12
 8003dea:	2b0c      	cmp	r3, #12
 8003dec:	d828      	bhi.n	8003e40 <UART_SetConfig+0x128>
 8003dee:	a201      	add	r2, pc, #4	; (adr r2, 8003df4 <UART_SetConfig+0xdc>)
 8003df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df4:	08003e29 	.word	0x08003e29
 8003df8:	08003e41 	.word	0x08003e41
 8003dfc:	08003e41 	.word	0x08003e41
 8003e00:	08003e41 	.word	0x08003e41
 8003e04:	08003e35 	.word	0x08003e35
 8003e08:	08003e41 	.word	0x08003e41
 8003e0c:	08003e41 	.word	0x08003e41
 8003e10:	08003e41 	.word	0x08003e41
 8003e14:	08003e2f 	.word	0x08003e2f
 8003e18:	08003e41 	.word	0x08003e41
 8003e1c:	08003e41 	.word	0x08003e41
 8003e20:	08003e41 	.word	0x08003e41
 8003e24:	08003e3b 	.word	0x08003e3b
 8003e28:	2300      	movs	r3, #0
 8003e2a:	77fb      	strb	r3, [r7, #31]
 8003e2c:	e117      	b.n	800405e <UART_SetConfig+0x346>
 8003e2e:	2302      	movs	r3, #2
 8003e30:	77fb      	strb	r3, [r7, #31]
 8003e32:	e114      	b.n	800405e <UART_SetConfig+0x346>
 8003e34:	2304      	movs	r3, #4
 8003e36:	77fb      	strb	r3, [r7, #31]
 8003e38:	e111      	b.n	800405e <UART_SetConfig+0x346>
 8003e3a:	2308      	movs	r3, #8
 8003e3c:	77fb      	strb	r3, [r7, #31]
 8003e3e:	e10e      	b.n	800405e <UART_SetConfig+0x346>
 8003e40:	2310      	movs	r3, #16
 8003e42:	77fb      	strb	r3, [r7, #31]
 8003e44:	e10b      	b.n	800405e <UART_SetConfig+0x346>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a69      	ldr	r2, [pc, #420]	; (8003ff0 <UART_SetConfig+0x2d8>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d120      	bne.n	8003e92 <UART_SetConfig+0x17a>
 8003e50:	4b65      	ldr	r3, [pc, #404]	; (8003fe8 <UART_SetConfig+0x2d0>)
 8003e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e56:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e5a:	2b30      	cmp	r3, #48	; 0x30
 8003e5c:	d013      	beq.n	8003e86 <UART_SetConfig+0x16e>
 8003e5e:	2b30      	cmp	r3, #48	; 0x30
 8003e60:	d814      	bhi.n	8003e8c <UART_SetConfig+0x174>
 8003e62:	2b20      	cmp	r3, #32
 8003e64:	d009      	beq.n	8003e7a <UART_SetConfig+0x162>
 8003e66:	2b20      	cmp	r3, #32
 8003e68:	d810      	bhi.n	8003e8c <UART_SetConfig+0x174>
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <UART_SetConfig+0x15c>
 8003e6e:	2b10      	cmp	r3, #16
 8003e70:	d006      	beq.n	8003e80 <UART_SetConfig+0x168>
 8003e72:	e00b      	b.n	8003e8c <UART_SetConfig+0x174>
 8003e74:	2300      	movs	r3, #0
 8003e76:	77fb      	strb	r3, [r7, #31]
 8003e78:	e0f1      	b.n	800405e <UART_SetConfig+0x346>
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	77fb      	strb	r3, [r7, #31]
 8003e7e:	e0ee      	b.n	800405e <UART_SetConfig+0x346>
 8003e80:	2304      	movs	r3, #4
 8003e82:	77fb      	strb	r3, [r7, #31]
 8003e84:	e0eb      	b.n	800405e <UART_SetConfig+0x346>
 8003e86:	2308      	movs	r3, #8
 8003e88:	77fb      	strb	r3, [r7, #31]
 8003e8a:	e0e8      	b.n	800405e <UART_SetConfig+0x346>
 8003e8c:	2310      	movs	r3, #16
 8003e8e:	77fb      	strb	r3, [r7, #31]
 8003e90:	e0e5      	b.n	800405e <UART_SetConfig+0x346>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a57      	ldr	r2, [pc, #348]	; (8003ff4 <UART_SetConfig+0x2dc>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d120      	bne.n	8003ede <UART_SetConfig+0x1c6>
 8003e9c:	4b52      	ldr	r3, [pc, #328]	; (8003fe8 <UART_SetConfig+0x2d0>)
 8003e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ea6:	2bc0      	cmp	r3, #192	; 0xc0
 8003ea8:	d013      	beq.n	8003ed2 <UART_SetConfig+0x1ba>
 8003eaa:	2bc0      	cmp	r3, #192	; 0xc0
 8003eac:	d814      	bhi.n	8003ed8 <UART_SetConfig+0x1c0>
 8003eae:	2b80      	cmp	r3, #128	; 0x80
 8003eb0:	d009      	beq.n	8003ec6 <UART_SetConfig+0x1ae>
 8003eb2:	2b80      	cmp	r3, #128	; 0x80
 8003eb4:	d810      	bhi.n	8003ed8 <UART_SetConfig+0x1c0>
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d002      	beq.n	8003ec0 <UART_SetConfig+0x1a8>
 8003eba:	2b40      	cmp	r3, #64	; 0x40
 8003ebc:	d006      	beq.n	8003ecc <UART_SetConfig+0x1b4>
 8003ebe:	e00b      	b.n	8003ed8 <UART_SetConfig+0x1c0>
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	77fb      	strb	r3, [r7, #31]
 8003ec4:	e0cb      	b.n	800405e <UART_SetConfig+0x346>
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	77fb      	strb	r3, [r7, #31]
 8003eca:	e0c8      	b.n	800405e <UART_SetConfig+0x346>
 8003ecc:	2304      	movs	r3, #4
 8003ece:	77fb      	strb	r3, [r7, #31]
 8003ed0:	e0c5      	b.n	800405e <UART_SetConfig+0x346>
 8003ed2:	2308      	movs	r3, #8
 8003ed4:	77fb      	strb	r3, [r7, #31]
 8003ed6:	e0c2      	b.n	800405e <UART_SetConfig+0x346>
 8003ed8:	2310      	movs	r3, #16
 8003eda:	77fb      	strb	r3, [r7, #31]
 8003edc:	e0bf      	b.n	800405e <UART_SetConfig+0x346>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a45      	ldr	r2, [pc, #276]	; (8003ff8 <UART_SetConfig+0x2e0>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d125      	bne.n	8003f34 <UART_SetConfig+0x21c>
 8003ee8:	4b3f      	ldr	r3, [pc, #252]	; (8003fe8 <UART_SetConfig+0x2d0>)
 8003eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ef2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ef6:	d017      	beq.n	8003f28 <UART_SetConfig+0x210>
 8003ef8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003efc:	d817      	bhi.n	8003f2e <UART_SetConfig+0x216>
 8003efe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f02:	d00b      	beq.n	8003f1c <UART_SetConfig+0x204>
 8003f04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f08:	d811      	bhi.n	8003f2e <UART_SetConfig+0x216>
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <UART_SetConfig+0x1fe>
 8003f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f12:	d006      	beq.n	8003f22 <UART_SetConfig+0x20a>
 8003f14:	e00b      	b.n	8003f2e <UART_SetConfig+0x216>
 8003f16:	2300      	movs	r3, #0
 8003f18:	77fb      	strb	r3, [r7, #31]
 8003f1a:	e0a0      	b.n	800405e <UART_SetConfig+0x346>
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	77fb      	strb	r3, [r7, #31]
 8003f20:	e09d      	b.n	800405e <UART_SetConfig+0x346>
 8003f22:	2304      	movs	r3, #4
 8003f24:	77fb      	strb	r3, [r7, #31]
 8003f26:	e09a      	b.n	800405e <UART_SetConfig+0x346>
 8003f28:	2308      	movs	r3, #8
 8003f2a:	77fb      	strb	r3, [r7, #31]
 8003f2c:	e097      	b.n	800405e <UART_SetConfig+0x346>
 8003f2e:	2310      	movs	r3, #16
 8003f30:	77fb      	strb	r3, [r7, #31]
 8003f32:	e094      	b.n	800405e <UART_SetConfig+0x346>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a30      	ldr	r2, [pc, #192]	; (8003ffc <UART_SetConfig+0x2e4>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d125      	bne.n	8003f8a <UART_SetConfig+0x272>
 8003f3e:	4b2a      	ldr	r3, [pc, #168]	; (8003fe8 <UART_SetConfig+0x2d0>)
 8003f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f4c:	d017      	beq.n	8003f7e <UART_SetConfig+0x266>
 8003f4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f52:	d817      	bhi.n	8003f84 <UART_SetConfig+0x26c>
 8003f54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f58:	d00b      	beq.n	8003f72 <UART_SetConfig+0x25a>
 8003f5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f5e:	d811      	bhi.n	8003f84 <UART_SetConfig+0x26c>
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d003      	beq.n	8003f6c <UART_SetConfig+0x254>
 8003f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f68:	d006      	beq.n	8003f78 <UART_SetConfig+0x260>
 8003f6a:	e00b      	b.n	8003f84 <UART_SetConfig+0x26c>
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	77fb      	strb	r3, [r7, #31]
 8003f70:	e075      	b.n	800405e <UART_SetConfig+0x346>
 8003f72:	2302      	movs	r3, #2
 8003f74:	77fb      	strb	r3, [r7, #31]
 8003f76:	e072      	b.n	800405e <UART_SetConfig+0x346>
 8003f78:	2304      	movs	r3, #4
 8003f7a:	77fb      	strb	r3, [r7, #31]
 8003f7c:	e06f      	b.n	800405e <UART_SetConfig+0x346>
 8003f7e:	2308      	movs	r3, #8
 8003f80:	77fb      	strb	r3, [r7, #31]
 8003f82:	e06c      	b.n	800405e <UART_SetConfig+0x346>
 8003f84:	2310      	movs	r3, #16
 8003f86:	77fb      	strb	r3, [r7, #31]
 8003f88:	e069      	b.n	800405e <UART_SetConfig+0x346>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a1c      	ldr	r2, [pc, #112]	; (8004000 <UART_SetConfig+0x2e8>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d137      	bne.n	8004004 <UART_SetConfig+0x2ec>
 8003f94:	4b14      	ldr	r3, [pc, #80]	; (8003fe8 <UART_SetConfig+0x2d0>)
 8003f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003f9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fa2:	d017      	beq.n	8003fd4 <UART_SetConfig+0x2bc>
 8003fa4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fa8:	d817      	bhi.n	8003fda <UART_SetConfig+0x2c2>
 8003faa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fae:	d00b      	beq.n	8003fc8 <UART_SetConfig+0x2b0>
 8003fb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fb4:	d811      	bhi.n	8003fda <UART_SetConfig+0x2c2>
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <UART_SetConfig+0x2aa>
 8003fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fbe:	d006      	beq.n	8003fce <UART_SetConfig+0x2b6>
 8003fc0:	e00b      	b.n	8003fda <UART_SetConfig+0x2c2>
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	77fb      	strb	r3, [r7, #31]
 8003fc6:	e04a      	b.n	800405e <UART_SetConfig+0x346>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	77fb      	strb	r3, [r7, #31]
 8003fcc:	e047      	b.n	800405e <UART_SetConfig+0x346>
 8003fce:	2304      	movs	r3, #4
 8003fd0:	77fb      	strb	r3, [r7, #31]
 8003fd2:	e044      	b.n	800405e <UART_SetConfig+0x346>
 8003fd4:	2308      	movs	r3, #8
 8003fd6:	77fb      	strb	r3, [r7, #31]
 8003fd8:	e041      	b.n	800405e <UART_SetConfig+0x346>
 8003fda:	2310      	movs	r3, #16
 8003fdc:	77fb      	strb	r3, [r7, #31]
 8003fde:	e03e      	b.n	800405e <UART_SetConfig+0x346>
 8003fe0:	efff69f3 	.word	0xefff69f3
 8003fe4:	40011000 	.word	0x40011000
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	40004400 	.word	0x40004400
 8003ff0:	40004800 	.word	0x40004800
 8003ff4:	40004c00 	.word	0x40004c00
 8003ff8:	40005000 	.word	0x40005000
 8003ffc:	40011400 	.word	0x40011400
 8004000:	40007800 	.word	0x40007800
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a71      	ldr	r2, [pc, #452]	; (80041d0 <UART_SetConfig+0x4b8>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d125      	bne.n	800405a <UART_SetConfig+0x342>
 800400e:	4b71      	ldr	r3, [pc, #452]	; (80041d4 <UART_SetConfig+0x4bc>)
 8004010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004014:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004018:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800401c:	d017      	beq.n	800404e <UART_SetConfig+0x336>
 800401e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004022:	d817      	bhi.n	8004054 <UART_SetConfig+0x33c>
 8004024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004028:	d00b      	beq.n	8004042 <UART_SetConfig+0x32a>
 800402a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800402e:	d811      	bhi.n	8004054 <UART_SetConfig+0x33c>
 8004030:	2b00      	cmp	r3, #0
 8004032:	d003      	beq.n	800403c <UART_SetConfig+0x324>
 8004034:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004038:	d006      	beq.n	8004048 <UART_SetConfig+0x330>
 800403a:	e00b      	b.n	8004054 <UART_SetConfig+0x33c>
 800403c:	2300      	movs	r3, #0
 800403e:	77fb      	strb	r3, [r7, #31]
 8004040:	e00d      	b.n	800405e <UART_SetConfig+0x346>
 8004042:	2302      	movs	r3, #2
 8004044:	77fb      	strb	r3, [r7, #31]
 8004046:	e00a      	b.n	800405e <UART_SetConfig+0x346>
 8004048:	2304      	movs	r3, #4
 800404a:	77fb      	strb	r3, [r7, #31]
 800404c:	e007      	b.n	800405e <UART_SetConfig+0x346>
 800404e:	2308      	movs	r3, #8
 8004050:	77fb      	strb	r3, [r7, #31]
 8004052:	e004      	b.n	800405e <UART_SetConfig+0x346>
 8004054:	2310      	movs	r3, #16
 8004056:	77fb      	strb	r3, [r7, #31]
 8004058:	e001      	b.n	800405e <UART_SetConfig+0x346>
 800405a:	2310      	movs	r3, #16
 800405c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004066:	d15b      	bne.n	8004120 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004068:	7ffb      	ldrb	r3, [r7, #31]
 800406a:	2b08      	cmp	r3, #8
 800406c:	d827      	bhi.n	80040be <UART_SetConfig+0x3a6>
 800406e:	a201      	add	r2, pc, #4	; (adr r2, 8004074 <UART_SetConfig+0x35c>)
 8004070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004074:	08004099 	.word	0x08004099
 8004078:	080040a1 	.word	0x080040a1
 800407c:	080040a9 	.word	0x080040a9
 8004080:	080040bf 	.word	0x080040bf
 8004084:	080040af 	.word	0x080040af
 8004088:	080040bf 	.word	0x080040bf
 800408c:	080040bf 	.word	0x080040bf
 8004090:	080040bf 	.word	0x080040bf
 8004094:	080040b7 	.word	0x080040b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004098:	f7fd fde2 	bl	8001c60 <HAL_RCC_GetPCLK1Freq>
 800409c:	61b8      	str	r0, [r7, #24]
        break;
 800409e:	e013      	b.n	80040c8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040a0:	f7fd fdf2 	bl	8001c88 <HAL_RCC_GetPCLK2Freq>
 80040a4:	61b8      	str	r0, [r7, #24]
        break;
 80040a6:	e00f      	b.n	80040c8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040a8:	4b4b      	ldr	r3, [pc, #300]	; (80041d8 <UART_SetConfig+0x4c0>)
 80040aa:	61bb      	str	r3, [r7, #24]
        break;
 80040ac:	e00c      	b.n	80040c8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040ae:	f7fd fd15 	bl	8001adc <HAL_RCC_GetSysClockFreq>
 80040b2:	61b8      	str	r0, [r7, #24]
        break;
 80040b4:	e008      	b.n	80040c8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040ba:	61bb      	str	r3, [r7, #24]
        break;
 80040bc:	e004      	b.n	80040c8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80040be:	2300      	movs	r3, #0
 80040c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	77bb      	strb	r3, [r7, #30]
        break;
 80040c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d074      	beq.n	80041b8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	005a      	lsls	r2, r3, #1
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	085b      	lsrs	r3, r3, #1
 80040d8:	441a      	add	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	2b0f      	cmp	r3, #15
 80040ea:	d916      	bls.n	800411a <UART_SetConfig+0x402>
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f2:	d212      	bcs.n	800411a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	f023 030f 	bic.w	r3, r3, #15
 80040fc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	085b      	lsrs	r3, r3, #1
 8004102:	b29b      	uxth	r3, r3
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	b29a      	uxth	r2, r3
 800410a:	89fb      	ldrh	r3, [r7, #14]
 800410c:	4313      	orrs	r3, r2
 800410e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	89fa      	ldrh	r2, [r7, #14]
 8004116:	60da      	str	r2, [r3, #12]
 8004118:	e04e      	b.n	80041b8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	77bb      	strb	r3, [r7, #30]
 800411e:	e04b      	b.n	80041b8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004120:	7ffb      	ldrb	r3, [r7, #31]
 8004122:	2b08      	cmp	r3, #8
 8004124:	d827      	bhi.n	8004176 <UART_SetConfig+0x45e>
 8004126:	a201      	add	r2, pc, #4	; (adr r2, 800412c <UART_SetConfig+0x414>)
 8004128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800412c:	08004151 	.word	0x08004151
 8004130:	08004159 	.word	0x08004159
 8004134:	08004161 	.word	0x08004161
 8004138:	08004177 	.word	0x08004177
 800413c:	08004167 	.word	0x08004167
 8004140:	08004177 	.word	0x08004177
 8004144:	08004177 	.word	0x08004177
 8004148:	08004177 	.word	0x08004177
 800414c:	0800416f 	.word	0x0800416f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004150:	f7fd fd86 	bl	8001c60 <HAL_RCC_GetPCLK1Freq>
 8004154:	61b8      	str	r0, [r7, #24]
        break;
 8004156:	e013      	b.n	8004180 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004158:	f7fd fd96 	bl	8001c88 <HAL_RCC_GetPCLK2Freq>
 800415c:	61b8      	str	r0, [r7, #24]
        break;
 800415e:	e00f      	b.n	8004180 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004160:	4b1d      	ldr	r3, [pc, #116]	; (80041d8 <UART_SetConfig+0x4c0>)
 8004162:	61bb      	str	r3, [r7, #24]
        break;
 8004164:	e00c      	b.n	8004180 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004166:	f7fd fcb9 	bl	8001adc <HAL_RCC_GetSysClockFreq>
 800416a:	61b8      	str	r0, [r7, #24]
        break;
 800416c:	e008      	b.n	8004180 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800416e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004172:	61bb      	str	r3, [r7, #24]
        break;
 8004174:	e004      	b.n	8004180 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004176:	2300      	movs	r3, #0
 8004178:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	77bb      	strb	r3, [r7, #30]
        break;
 800417e:	bf00      	nop
    }

    if (pclk != 0U)
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d018      	beq.n	80041b8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	085a      	lsrs	r2, r3, #1
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	441a      	add	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	fbb2 f3f3 	udiv	r3, r2, r3
 8004198:	b29b      	uxth	r3, r3
 800419a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	2b0f      	cmp	r3, #15
 80041a0:	d908      	bls.n	80041b4 <UART_SetConfig+0x49c>
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041a8:	d204      	bcs.n	80041b4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	60da      	str	r2, [r3, #12]
 80041b2:	e001      	b.n	80041b8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80041c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3720      	adds	r7, #32
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	40007c00 	.word	0x40007c00
 80041d4:	40023800 	.word	0x40023800
 80041d8:	00f42400 	.word	0x00f42400

080041dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00a      	beq.n	8004206 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00a      	beq.n	8004228 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	430a      	orrs	r2, r1
 8004226:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	f003 0304 	and.w	r3, r3, #4
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00a      	beq.n	800424a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	430a      	orrs	r2, r1
 8004248:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424e:	f003 0308 	and.w	r3, r3, #8
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00a      	beq.n	800426c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	430a      	orrs	r2, r1
 800426a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004270:	f003 0310 	and.w	r3, r3, #16
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00a      	beq.n	800428e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004292:	f003 0320 	and.w	r3, r3, #32
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00a      	beq.n	80042b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	430a      	orrs	r2, r1
 80042ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d01a      	beq.n	80042f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042da:	d10a      	bne.n	80042f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00a      	beq.n	8004314 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	430a      	orrs	r2, r1
 8004312:	605a      	str	r2, [r3, #4]
  }
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af02      	add	r7, sp, #8
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004330:	f7fc fc64 	bl	8000bfc <HAL_GetTick>
 8004334:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0308 	and.w	r3, r3, #8
 8004340:	2b08      	cmp	r3, #8
 8004342:	d10e      	bne.n	8004362 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004344:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f817 	bl	8004386 <UART_WaitOnFlagUntilTimeout>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e00d      	b.n	800437e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2220      	movs	r2, #32
 8004366:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2220      	movs	r2, #32
 800436c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b084      	sub	sp, #16
 800438a:	af00      	add	r7, sp, #0
 800438c:	60f8      	str	r0, [r7, #12]
 800438e:	60b9      	str	r1, [r7, #8]
 8004390:	603b      	str	r3, [r7, #0]
 8004392:	4613      	mov	r3, r2
 8004394:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004396:	e05e      	b.n	8004456 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800439e:	d05a      	beq.n	8004456 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043a0:	f7fc fc2c 	bl	8000bfc <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d302      	bcc.n	80043b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d11b      	bne.n	80043ee <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80043c4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f022 0201 	bic.w	r2, r2, #1
 80043d4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2220      	movs	r2, #32
 80043da:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2220      	movs	r2, #32
 80043e0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e043      	b.n	8004476 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0304 	and.w	r3, r3, #4
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d02c      	beq.n	8004456 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	69db      	ldr	r3, [r3, #28]
 8004402:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004406:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800440a:	d124      	bne.n	8004456 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004414:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004424:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0201 	bic.w	r2, r2, #1
 8004434:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2220      	movs	r2, #32
 800443a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2220      	movs	r2, #32
 8004440:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2220      	movs	r2, #32
 8004446:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e00f      	b.n	8004476 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	69da      	ldr	r2, [r3, #28]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	4013      	ands	r3, r2
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	429a      	cmp	r2, r3
 8004464:	bf0c      	ite	eq
 8004466:	2301      	moveq	r3, #1
 8004468:	2300      	movne	r3, #0
 800446a:	b2db      	uxtb	r3, r3
 800446c:	461a      	mov	r2, r3
 800446e:	79fb      	ldrb	r3, [r7, #7]
 8004470:	429a      	cmp	r2, r3
 8004472:	d091      	beq.n	8004398 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
	...

08004480 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	4613      	mov	r3, r2
 800448c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	68ba      	ldr	r2, [r7, #8]
 8004492:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	88fa      	ldrh	r2, [r7, #6]
 8004498:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	88fa      	ldrh	r2, [r7, #6]
 80044a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044b2:	d10e      	bne.n	80044d2 <UART_Start_Receive_IT+0x52>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d105      	bne.n	80044c8 <UART_Start_Receive_IT+0x48>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f240 12ff 	movw	r2, #511	; 0x1ff
 80044c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044c6:	e02d      	b.n	8004524 <UART_Start_Receive_IT+0xa4>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	22ff      	movs	r2, #255	; 0xff
 80044cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044d0:	e028      	b.n	8004524 <UART_Start_Receive_IT+0xa4>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10d      	bne.n	80044f6 <UART_Start_Receive_IT+0x76>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d104      	bne.n	80044ec <UART_Start_Receive_IT+0x6c>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	22ff      	movs	r2, #255	; 0xff
 80044e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044ea:	e01b      	b.n	8004524 <UART_Start_Receive_IT+0xa4>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	227f      	movs	r2, #127	; 0x7f
 80044f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044f4:	e016      	b.n	8004524 <UART_Start_Receive_IT+0xa4>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044fe:	d10d      	bne.n	800451c <UART_Start_Receive_IT+0x9c>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d104      	bne.n	8004512 <UART_Start_Receive_IT+0x92>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	227f      	movs	r2, #127	; 0x7f
 800450c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004510:	e008      	b.n	8004524 <UART_Start_Receive_IT+0xa4>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	223f      	movs	r2, #63	; 0x3f
 8004516:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800451a:	e003      	b.n	8004524 <UART_Start_Receive_IT+0xa4>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2222      	movs	r2, #34	; 0x22
 8004530:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	689a      	ldr	r2, [r3, #8]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f042 0201 	orr.w	r2, r2, #1
 8004540:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800454a:	d107      	bne.n	800455c <UART_Start_Receive_IT+0xdc>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d103      	bne.n	800455c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	4a0c      	ldr	r2, [pc, #48]	; (8004588 <UART_Start_Receive_IT+0x108>)
 8004558:	665a      	str	r2, [r3, #100]	; 0x64
 800455a:	e002      	b.n	8004562 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4a0b      	ldr	r2, [pc, #44]	; (800458c <UART_Start_Receive_IT+0x10c>)
 8004560:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004578:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3714      	adds	r7, #20
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr
 8004588:	0800480f 	.word	0x0800480f
 800458c:	0800473b 	.word	0x0800473b

08004590 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80045a6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689a      	ldr	r2, [r3, #8]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 0201 	bic.w	r2, r2, #1
 80045b6:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d107      	bne.n	80045d0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0210 	bic.w	r2, r2, #16
 80045ce:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2220      	movs	r2, #32
 80045d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80045e2:	bf00      	nop
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b084      	sub	sp, #16
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f7fb ff77 	bl	8000500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004612:	bf00      	nop
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800461a:	b480      	push	{r7}
 800461c:	b083      	sub	sp, #12
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004626:	2b21      	cmp	r3, #33	; 0x21
 8004628:	d12a      	bne.n	8004680 <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004630:	b29b      	uxth	r3, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d110      	bne.n	8004658 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004644:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004654:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004656:	e013      	b.n	8004680 <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800465c:	781a      	ldrb	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004674:	b29b      	uxth	r3, r3
 8004676:	3b01      	subs	r3, #1
 8004678:	b29a      	uxth	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004698:	2b21      	cmp	r3, #33	; 0x21
 800469a:	d12f      	bne.n	80046fc <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d110      	bne.n	80046ca <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046b6:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046c6:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80046c8:	e018      	b.n	80046fc <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ce:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	881b      	ldrh	r3, [r3, #0]
 80046d4:	461a      	mov	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046de:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046e4:	1c9a      	adds	r2, r3, #2
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80046fc:	bf00      	nop
 80046fe:	3714      	adds	r7, #20
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800471e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2220      	movs	r2, #32
 8004724:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f7fb ff13 	bl	8000558 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004732:	bf00      	nop
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b084      	sub	sp, #16
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004748:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800474e:	2b22      	cmp	r3, #34	; 0x22
 8004750:	d151      	bne.n	80047f6 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004758:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800475a:	89bb      	ldrh	r3, [r7, #12]
 800475c:	b2d9      	uxtb	r1, r3
 800475e:	89fb      	ldrh	r3, [r7, #14]
 8004760:	b2da      	uxtb	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004766:	400a      	ands	r2, r1
 8004768:	b2d2      	uxtb	r2, r2
 800476a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004770:	1c5a      	adds	r2, r3, #1
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800477c:	b29b      	uxth	r3, r3
 800477e:	3b01      	subs	r3, #1
 8004780:	b29a      	uxth	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800478e:	b29b      	uxth	r3, r3
 8004790:	2b00      	cmp	r3, #0
 8004792:	d138      	bne.n	8004806 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80047a2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689a      	ldr	r2, [r3, #8]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f022 0201 	bic.w	r2, r2, #1
 80047b2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2220      	movs	r2, #32
 80047b8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d10f      	bne.n	80047e8 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 0210 	bic.w	r2, r2, #16
 80047d6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80047de:	4619      	mov	r1, r3
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f7ff fa8d 	bl	8003d00 <HAL_UARTEx_RxEventCallback>
 80047e6:	e002      	b.n	80047ee <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f7fb fe97 	bl	800051c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80047f4:	e007      	b.n	8004806 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	699a      	ldr	r2, [r3, #24]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f042 0208 	orr.w	r2, r2, #8
 8004804:	619a      	str	r2, [r3, #24]
}
 8004806:	bf00      	nop
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b084      	sub	sp, #16
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800481c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004822:	2b22      	cmp	r3, #34	; 0x22
 8004824:	d151      	bne.n	80048ca <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482c:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004832:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004834:	89ba      	ldrh	r2, [r7, #12]
 8004836:	89fb      	ldrh	r3, [r7, #14]
 8004838:	4013      	ands	r3, r2
 800483a:	b29a      	uxth	r2, r3
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004844:	1c9a      	adds	r2, r3, #2
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004850:	b29b      	uxth	r3, r3
 8004852:	3b01      	subs	r3, #1
 8004854:	b29a      	uxth	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004862:	b29b      	uxth	r3, r3
 8004864:	2b00      	cmp	r3, #0
 8004866:	d138      	bne.n	80048da <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004876:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689a      	ldr	r2, [r3, #8]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f022 0201 	bic.w	r2, r2, #1
 8004886:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2220      	movs	r2, #32
 800488c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004898:	2b01      	cmp	r3, #1
 800489a:	d10f      	bne.n	80048bc <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 0210 	bic.w	r2, r2, #16
 80048aa:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80048b2:	4619      	mov	r1, r3
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f7ff fa23 	bl	8003d00 <HAL_UARTEx_RxEventCallback>
 80048ba:	e002      	b.n	80048c2 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f7fb fe2d 	bl	800051c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80048c8:	e007      	b.n	80048da <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	699a      	ldr	r2, [r3, #24]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f042 0208 	orr.w	r2, r2, #8
 80048d8:	619a      	str	r2, [r3, #24]
}
 80048da:	bf00      	nop
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
	...

080048e4 <__libc_init_array>:
 80048e4:	b570      	push	{r4, r5, r6, lr}
 80048e6:	4d0d      	ldr	r5, [pc, #52]	; (800491c <__libc_init_array+0x38>)
 80048e8:	4c0d      	ldr	r4, [pc, #52]	; (8004920 <__libc_init_array+0x3c>)
 80048ea:	1b64      	subs	r4, r4, r5
 80048ec:	10a4      	asrs	r4, r4, #2
 80048ee:	2600      	movs	r6, #0
 80048f0:	42a6      	cmp	r6, r4
 80048f2:	d109      	bne.n	8004908 <__libc_init_array+0x24>
 80048f4:	4d0b      	ldr	r5, [pc, #44]	; (8004924 <__libc_init_array+0x40>)
 80048f6:	4c0c      	ldr	r4, [pc, #48]	; (8004928 <__libc_init_array+0x44>)
 80048f8:	f000 f820 	bl	800493c <_init>
 80048fc:	1b64      	subs	r4, r4, r5
 80048fe:	10a4      	asrs	r4, r4, #2
 8004900:	2600      	movs	r6, #0
 8004902:	42a6      	cmp	r6, r4
 8004904:	d105      	bne.n	8004912 <__libc_init_array+0x2e>
 8004906:	bd70      	pop	{r4, r5, r6, pc}
 8004908:	f855 3b04 	ldr.w	r3, [r5], #4
 800490c:	4798      	blx	r3
 800490e:	3601      	adds	r6, #1
 8004910:	e7ee      	b.n	80048f0 <__libc_init_array+0xc>
 8004912:	f855 3b04 	ldr.w	r3, [r5], #4
 8004916:	4798      	blx	r3
 8004918:	3601      	adds	r6, #1
 800491a:	e7f2      	b.n	8004902 <__libc_init_array+0x1e>
 800491c:	08004974 	.word	0x08004974
 8004920:	08004974 	.word	0x08004974
 8004924:	08004974 	.word	0x08004974
 8004928:	08004978 	.word	0x08004978

0800492c <memset>:
 800492c:	4402      	add	r2, r0
 800492e:	4603      	mov	r3, r0
 8004930:	4293      	cmp	r3, r2
 8004932:	d100      	bne.n	8004936 <memset+0xa>
 8004934:	4770      	bx	lr
 8004936:	f803 1b01 	strb.w	r1, [r3], #1
 800493a:	e7f9      	b.n	8004930 <memset+0x4>

0800493c <_init>:
 800493c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800493e:	bf00      	nop
 8004940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004942:	bc08      	pop	{r3}
 8004944:	469e      	mov	lr, r3
 8004946:	4770      	bx	lr

08004948 <_fini>:
 8004948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800494a:	bf00      	nop
 800494c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800494e:	bc08      	pop	{r3}
 8004950:	469e      	mov	lr, r3
 8004952:	4770      	bx	lr
