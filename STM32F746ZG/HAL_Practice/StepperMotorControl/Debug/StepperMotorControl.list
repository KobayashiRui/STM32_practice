
StepperMotorControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fa4  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800316c  0800316c  0001316c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800317c  0800317c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800317c  0800317c  0001317c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003184  08003184  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003184  08003184  00013184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003188  08003188  00013188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800318c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  08003198  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08003198  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b25d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000182c  00000000  00000000  0002b299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  0002cac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a0  00000000  00000000  0002d520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024ee1  00000000  00000000  0002dec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b455  00000000  00000000  00052da1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9a35  00000000  00000000  0005e1f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00147c2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002aec  00000000  00000000  00147c80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003154 	.word	0x08003154

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08003154 	.word	0x08003154

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b96e 	b.w	80004fc <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468c      	mov	ip, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	f040 8083 	bne.w	800034e <__udivmoddi4+0x116>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d947      	bls.n	80002de <__udivmoddi4+0xa6>
 800024e:	fab2 f282 	clz	r2, r2
 8000252:	b142      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000254:	f1c2 0020 	rsb	r0, r2, #32
 8000258:	fa24 f000 	lsr.w	r0, r4, r0
 800025c:	4091      	lsls	r1, r2
 800025e:	4097      	lsls	r7, r2
 8000260:	ea40 0c01 	orr.w	ip, r0, r1
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbbc f6f8 	udiv	r6, ip, r8
 8000270:	fa1f fe87 	uxth.w	lr, r7
 8000274:	fb08 c116 	mls	r1, r8, r6, ip
 8000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027c:	fb06 f10e 	mul.w	r1, r6, lr
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 8119 	bcs.w	80004c0 <__udivmoddi4+0x288>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8116 	bls.w	80004c0 <__udivmoddi4+0x288>
 8000294:	3e02      	subs	r6, #2
 8000296:	443b      	add	r3, r7
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ac:	45a6      	cmp	lr, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	193c      	adds	r4, r7, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b6:	f080 8105 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	f240 8102 	bls.w	80004c4 <__udivmoddi4+0x28c>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c8:	eba4 040e 	sub.w	r4, r4, lr
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xaa>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d150      	bne.n	800038c <__udivmoddi4+0x154>
 80002ea:	1bcb      	subs	r3, r1, r7
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	fa1f f887 	uxth.w	r8, r7
 80002f4:	2601      	movs	r6, #1
 80002f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002fa:	0c21      	lsrs	r1, r4, #16
 80002fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000304:	fb08 f30c 	mul.w	r3, r8, ip
 8000308:	428b      	cmp	r3, r1
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0xe4>
 800030c:	1879      	adds	r1, r7, r1
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0xe2>
 8000314:	428b      	cmp	r3, r1
 8000316:	f200 80e9 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 800031a:	4684      	mov	ip, r0
 800031c:	1ac9      	subs	r1, r1, r3
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x10c>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x10a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80d9 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e7bf      	b.n	80002ce <__udivmoddi4+0x96>
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x12e>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80b1 	beq.w	80004ba <__udivmoddi4+0x282>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x1cc>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0x140>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80b8 	bhi.w	80004e8 <__udivmoddi4+0x2b0>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0103 	sbc.w	r1, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	468c      	mov	ip, r1
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0a8      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000386:	e9c5 4c00 	strd	r4, ip, [r5]
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0xa0>
 800038c:	f1c2 0320 	rsb	r3, r2, #32
 8000390:	fa20 f603 	lsr.w	r6, r0, r3
 8000394:	4097      	lsls	r7, r2
 8000396:	fa01 f002 	lsl.w	r0, r1, r2
 800039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039e:	40d9      	lsrs	r1, r3
 80003a0:	4330      	orrs	r0, r6
 80003a2:	0c03      	lsrs	r3, r0, #16
 80003a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f108 	mul.w	r1, r6, r8
 80003b8:	4299      	cmp	r1, r3
 80003ba:	fa04 f402 	lsl.w	r4, r4, r2
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x19c>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003c6:	f080 808d 	bcs.w	80004e4 <__udivmoddi4+0x2ac>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 808a 	bls.w	80004e4 <__udivmoddi4+0x2ac>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	443b      	add	r3, r7
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b281      	uxth	r1, r0
 80003d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb00 f308 	mul.w	r3, r0, r8
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x1c4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003f2:	d273      	bcs.n	80004dc <__udivmoddi4+0x2a4>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d971      	bls.n	80004dc <__udivmoddi4+0x2a4>
 80003f8:	3802      	subs	r0, #2
 80003fa:	4439      	add	r1, r7
 80003fc:	1acb      	subs	r3, r1, r3
 80003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000402:	e778      	b.n	80002f6 <__udivmoddi4+0xbe>
 8000404:	f1c6 0c20 	rsb	ip, r6, #32
 8000408:	fa03 f406 	lsl.w	r4, r3, r6
 800040c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000410:	431c      	orrs	r4, r3
 8000412:	fa20 f70c 	lsr.w	r7, r0, ip
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000422:	431f      	orrs	r7, r3
 8000424:	0c3b      	lsrs	r3, r7, #16
 8000426:	fbb1 f9fe 	udiv	r9, r1, lr
 800042a:	fa1f f884 	uxth.w	r8, r4
 800042e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000436:	fb09 fa08 	mul.w	sl, r9, r8
 800043a:	458a      	cmp	sl, r1
 800043c:	fa02 f206 	lsl.w	r2, r2, r6
 8000440:	fa00 f306 	lsl.w	r3, r0, r6
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x220>
 8000446:	1861      	adds	r1, r4, r1
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800044c:	d248      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 800044e:	458a      	cmp	sl, r1
 8000450:	d946      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	4421      	add	r1, r4
 8000458:	eba1 010a 	sub.w	r1, r1, sl
 800045c:	b2bf      	uxth	r7, r7
 800045e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000462:	fb0e 1110 	mls	r1, lr, r0, r1
 8000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45b8      	cmp	r8, r7
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x24a>
 8000472:	19e7      	adds	r7, r4, r7
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000478:	d22e      	bcs.n	80004d8 <__udivmoddi4+0x2a0>
 800047a:	45b8      	cmp	r8, r7
 800047c:	d92c      	bls.n	80004d8 <__udivmoddi4+0x2a0>
 800047e:	3802      	subs	r0, #2
 8000480:	4427      	add	r7, r4
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba7 0708 	sub.w	r7, r7, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454f      	cmp	r7, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	4649      	mov	r1, r9
 8000494:	d31a      	bcc.n	80004cc <__udivmoddi4+0x294>
 8000496:	d017      	beq.n	80004c8 <__udivmoddi4+0x290>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x27a>
 800049a:	ebb3 020e 	subs.w	r2, r3, lr
 800049e:	eb67 0701 	sbc.w	r7, r7, r1
 80004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a6:	40f2      	lsrs	r2, r6
 80004a8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ac:	40f7      	lsrs	r7, r6
 80004ae:	e9c5 2700 	strd	r2, r7, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e70b      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fd      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004c8:	4543      	cmp	r3, r8
 80004ca:	d2e5      	bcs.n	8000498 <__udivmoddi4+0x260>
 80004cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d0:	eb69 0104 	sbc.w	r1, r9, r4
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7df      	b.n	8000498 <__udivmoddi4+0x260>
 80004d8:	4608      	mov	r0, r1
 80004da:	e7d2      	b.n	8000482 <__udivmoddi4+0x24a>
 80004dc:	4660      	mov	r0, ip
 80004de:	e78d      	b.n	80003fc <__udivmoddi4+0x1c4>
 80004e0:	4681      	mov	r9, r0
 80004e2:	e7b9      	b.n	8000458 <__udivmoddi4+0x220>
 80004e4:	4666      	mov	r6, ip
 80004e6:	e775      	b.n	80003d4 <__udivmoddi4+0x19c>
 80004e8:	4630      	mov	r0, r6
 80004ea:	e74a      	b.n	8000382 <__udivmoddi4+0x14a>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	4439      	add	r1, r7
 80004f2:	e713      	b.n	800031c <__udivmoddi4+0xe4>
 80004f4:	3802      	subs	r0, #2
 80004f6:	443c      	add	r4, r7
 80004f8:	e724      	b.n	8000344 <__udivmoddi4+0x10c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <Step0>:
			end_stop_state &= ~1;
		}
	}
}

void Step0(){
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	//pull+
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800050a:	4805      	ldr	r0, [pc, #20]	; (8000520 <Step0+0x20>)
 800050c:	f000 ffe2 	bl	80014d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8000510:	2201      	movs	r2, #1
 8000512:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000516:	4802      	ldr	r0, [pc, #8]	; (8000520 <Step0+0x20>)
 8000518:	f000 ffdc 	bl	80014d4 <HAL_GPIO_WritePin>
	/*
	 * pull-
	 * HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
	 * HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
	 */
}
 800051c:	bf00      	nop
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40020800 	.word	0x40020800

08000524 <Dir0>:
void Dir0(int dir){
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, dir);
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	b2db      	uxtb	r3, r3
 8000530:	461a      	mov	r2, r3
 8000532:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000536:	4803      	ldr	r0, [pc, #12]	; (8000544 <Dir0+0x20>)
 8000538:	f000 ffcc 	bl	80014d4 <HAL_GPIO_WritePin>
}
 800053c:	bf00      	nop
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40020800 	.word	0x40020800

08000548 <resetStepper>:
	si->stepPosition = 0;
	si->movementDone = 0;
}


void resetStepper(volatile stepperInfo* si){
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	si->c0 = si->acceleration;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	edd3 7a00 	vldr	s15, [r3]
 8000556:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800055a:	ee17 2a90 	vmov	r2, s15
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	615a      	str	r2, [r3, #20]
	si->d = si->c0;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	ee07 3a90 	vmov	s15, r3
 800056a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	si->di = si->d;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800057a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800057e:	ee17 2a90 	vmov	r2, s15
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	645a      	str	r2, [r3, #68]	; 0x44
	si->stepCount = 0;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2200      	movs	r2, #0
 800058a:	649a      	str	r2, [r3, #72]	; 0x48
	si->n = 0;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2200      	movs	r2, #0
 8000590:	63da      	str	r2, [r3, #60]	; 0x3c
	si->rampUpStepCount = 0;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	2200      	movs	r2, #0
 8000596:	639a      	str	r2, [r3, #56]	; 0x38
	si->movementDone = 0;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2200      	movs	r2, #0
 800059c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 80005a0:	bf00      	nop
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <prepareAbsoluteMovement>:
	si->totalSteps = abs(steps);
	resetStepper(si);
	remainingSteppersFlag |= (1 << whichMotor);
}

void prepareAbsoluteMovement(int whichMotor, int absolute_steps){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
	volatile stepperInfo* si = &steppers[whichMotor];
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	224c      	movs	r2, #76	; 0x4c
 80005ba:	fb02 f303 	mul.w	r3, r2, r3
 80005be:	4a1b      	ldr	r2, [pc, #108]	; (800062c <prepareAbsoluteMovement+0x80>)
 80005c0:	4413      	add	r3, r2
 80005c2:	60fb      	str	r3, [r7, #12]
	int steps = absolute_steps - si->stepPosition;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	683a      	ldr	r2, [r7, #0]
 80005ca:	1ad3      	subs	r3, r2, r3
 80005cc:	60bb      	str	r3, [r7, #8]
	if(steps == 0){
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d027      	beq.n	8000624 <prepareAbsoluteMovement+0x78>
		return;
	}
	si->dirFunc( steps < 0 ? 1 : 0);
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	68ba      	ldr	r2, [r7, #8]
 80005da:	0fd2      	lsrs	r2, r2, #31
 80005dc:	4610      	mov	r0, r2
 80005de:	4798      	blx	r3
	si->dir = steps > 0 ? 1:-1;
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	dd01      	ble.n	80005ea <prepareAbsoluteMovement+0x3e>
 80005e6:	2201      	movs	r2, #1
 80005e8:	e001      	b.n	80005ee <prepareAbsoluteMovement+0x42>
 80005ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	61da      	str	r2, [r3, #28]
	si->totalSteps = abs(steps);
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	bfb8      	it	lt
 80005f8:	425b      	neglt	r3, r3
 80005fa:	461a      	mov	r2, r3
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	631a      	str	r2, [r3, #48]	; 0x30
	resetStepper(si);
 8000600:	68f8      	ldr	r0, [r7, #12]
 8000602:	f7ff ffa1 	bl	8000548 <resetStepper>
	remainingSteppersFlag |= (1 << whichMotor);
 8000606:	2201      	movs	r2, #1
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	fa02 f303 	lsl.w	r3, r2, r3
 800060e:	b25a      	sxtb	r2, r3
 8000610:	4b07      	ldr	r3, [pc, #28]	; (8000630 <prepareAbsoluteMovement+0x84>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	b25b      	sxtb	r3, r3
 8000618:	4313      	orrs	r3, r2
 800061a:	b25b      	sxtb	r3, r3
 800061c:	b2da      	uxtb	r2, r3
 800061e:	4b04      	ldr	r3, [pc, #16]	; (8000630 <prepareAbsoluteMovement+0x84>)
 8000620:	701a      	strb	r2, [r3, #0]
 8000622:	e000      	b.n	8000626 <prepareAbsoluteMovement+0x7a>
		return;
 8000624:	bf00      	nop
}
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	2000002c 	.word	0x2000002c
 8000630:	2000002a 	.word	0x2000002a

08000634 <setNextInterruptInterval>:

volatile uint8_t nextStepperFlag = 0;

void setNextInterruptInterval(){
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0

	unsigned int mind = 999999;
 800063a:	4b37      	ldr	r3, [pc, #220]	; (8000718 <setNextInterruptInterval+0xe4>)
 800063c:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < NUM_STEPPERS; i++){
 800063e:	2300      	movs	r3, #0
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	e021      	b.n	8000688 <setNextInterruptInterval+0x54>
		if( ((1 << i) & remainingSteppersFlag) && steppers[i].di < mind ){
 8000644:	4b35      	ldr	r3, [pc, #212]	; (800071c <setNextInterruptInterval+0xe8>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	b2db      	uxtb	r3, r3
 800064a:	461a      	mov	r2, r3
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	fa42 f303 	asr.w	r3, r2, r3
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	2b00      	cmp	r3, #0
 8000658:	d013      	beq.n	8000682 <setNextInterruptInterval+0x4e>
 800065a:	4a31      	ldr	r2, [pc, #196]	; (8000720 <setNextInterruptInterval+0xec>)
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	214c      	movs	r1, #76	; 0x4c
 8000660:	fb01 f303 	mul.w	r3, r1, r3
 8000664:	4413      	add	r3, r2
 8000666:	3344      	adds	r3, #68	; 0x44
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	68fa      	ldr	r2, [r7, #12]
 800066c:	429a      	cmp	r2, r3
 800066e:	d908      	bls.n	8000682 <setNextInterruptInterval+0x4e>
			mind = steppers[i].di;
 8000670:	4a2b      	ldr	r2, [pc, #172]	; (8000720 <setNextInterruptInterval+0xec>)
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	214c      	movs	r1, #76	; 0x4c
 8000676:	fb01 f303 	mul.w	r3, r1, r3
 800067a:	4413      	add	r3, r2
 800067c:	3344      	adds	r3, #68	; 0x44
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < NUM_STEPPERS; i++){
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	3301      	adds	r3, #1
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	2b00      	cmp	r3, #0
 800068c:	ddda      	ble.n	8000644 <setNextInterruptInterval+0x10>
		}
	}

	nextStepperFlag = 0;
 800068e:	4b25      	ldr	r3, [pc, #148]	; (8000724 <setNextInterruptInterval+0xf0>)
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_STEPPERS; i ++){
 8000694:	2300      	movs	r3, #0
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	e026      	b.n	80006e8 <setNextInterruptInterval+0xb4>
		if( ((1 << i) & remainingSteppersFlag) && steppers[i].di == mind )
 800069a:	4b20      	ldr	r3, [pc, #128]	; (800071c <setNextInterruptInterval+0xe8>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	461a      	mov	r2, r3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	fa42 f303 	asr.w	r3, r2, r3
 80006a8:	f003 0301 	and.w	r3, r3, #1
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d018      	beq.n	80006e2 <setNextInterruptInterval+0xae>
 80006b0:	4a1b      	ldr	r2, [pc, #108]	; (8000720 <setNextInterruptInterval+0xec>)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	214c      	movs	r1, #76	; 0x4c
 80006b6:	fb01 f303 	mul.w	r3, r1, r3
 80006ba:	4413      	add	r3, r2
 80006bc:	3344      	adds	r3, #68	; 0x44
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	68fa      	ldr	r2, [r7, #12]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d10d      	bne.n	80006e2 <setNextInterruptInterval+0xae>
			nextStepperFlag |= (1 << i);
 80006c6:	2201      	movs	r2, #1
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	fa02 f303 	lsl.w	r3, r2, r3
 80006ce:	b25a      	sxtb	r2, r3
 80006d0:	4b14      	ldr	r3, [pc, #80]	; (8000724 <setNextInterruptInterval+0xf0>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	b25b      	sxtb	r3, r3
 80006d8:	4313      	orrs	r3, r2
 80006da:	b25b      	sxtb	r3, r3
 80006dc:	b2da      	uxtb	r2, r3
 80006de:	4b11      	ldr	r3, [pc, #68]	; (8000724 <setNextInterruptInterval+0xf0>)
 80006e0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_STEPPERS; i ++){
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	3301      	adds	r3, #1
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	ddd5      	ble.n	800069a <setNextInterruptInterval+0x66>
	}

	if (remainingSteppersFlag == 0){
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <setNextInterruptInterval+0xe8>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d104      	bne.n	8000702 <setNextInterruptInterval+0xce>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 65500);
 80006f8:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <setNextInterruptInterval+0xf4>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 8000700:	635a      	str	r2, [r3, #52]	; 0x34
	}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, mind);
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <setNextInterruptInterval+0xf4>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	68fa      	ldr	r2, [r7, #12]
 8000708:	635a      	str	r2, [r3, #52]	; 0x34

}
 800070a:	bf00      	nop
 800070c:	3714      	adds	r7, #20
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	000f423f 	.word	0x000f423f
 800071c:	2000002a 	.word	0x2000002a
 8000720:	2000002c 	.word	0x2000002c
 8000724:	2000002b 	.word	0x2000002b
 8000728:	20000078 	.word	0x20000078

0800072c <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
	//HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
	unsigned int tmpCtr = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1);
 8000734:	4b8d      	ldr	r3, [pc, #564]	; (800096c <HAL_TIM_OC_DelayElapsedCallback+0x240>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800073a:	613b      	str	r3, [r7, #16]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 65500);
 800073c:	4b8b      	ldr	r3, [pc, #556]	; (800096c <HAL_TIM_OC_DelayElapsedCallback+0x240>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 8000744:	635a      	str	r2, [r3, #52]	; 0x34


	for (int i = 0; i < NUM_STEPPERS; i++){
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]
 800074a:	e101      	b.n	8000950 <HAL_TIM_OC_DelayElapsedCallback+0x224>
		if ( ! ( (1 << i) & remainingSteppersFlag )){
 800074c:	4b88      	ldr	r3, [pc, #544]	; (8000970 <HAL_TIM_OC_DelayElapsedCallback+0x244>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	b2db      	uxtb	r3, r3
 8000752:	461a      	mov	r2, r3
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	fa42 f303 	asr.w	r3, r2, r3
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	2b00      	cmp	r3, #0
 8000760:	f000 80f2 	beq.w	8000948 <HAL_TIM_OC_DelayElapsedCallback+0x21c>
			continue;
		}

		if( homing_flag & (1 << i)){
 8000764:	4b83      	ldr	r3, [pc, #524]	; (8000974 <HAL_TIM_OC_DelayElapsedCallback+0x248>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	461a      	mov	r2, r3
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	fa42 f303 	asr.w	r3, r2, r3
 8000770:	f003 0301 	and.w	r3, r3, #1
 8000774:	2b00      	cmp	r3, #0
 8000776:	d01a      	beq.n	80007ae <HAL_TIM_OC_DelayElapsedCallback+0x82>
			if(end_stop_state & (1 << i)){
 8000778:	4b7f      	ldr	r3, [pc, #508]	; (8000978 <HAL_TIM_OC_DelayElapsedCallback+0x24c>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	461a      	mov	r2, r3
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	fa42 f303 	asr.w	r3, r2, r3
 8000784:	f003 0301 	and.w	r3, r3, #1
 8000788:	2b00      	cmp	r3, #0
 800078a:	d010      	beq.n	80007ae <HAL_TIM_OC_DelayElapsedCallback+0x82>
				remainingSteppersFlag &= ~(1 << i);
 800078c:	2201      	movs	r2, #1
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	fa02 f303 	lsl.w	r3, r2, r3
 8000794:	b25b      	sxtb	r3, r3
 8000796:	43db      	mvns	r3, r3
 8000798:	b25a      	sxtb	r2, r3
 800079a:	4b75      	ldr	r3, [pc, #468]	; (8000970 <HAL_TIM_OC_DelayElapsedCallback+0x244>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	b25b      	sxtb	r3, r3
 80007a2:	4013      	ands	r3, r2
 80007a4:	b25b      	sxtb	r3, r3
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	4b71      	ldr	r3, [pc, #452]	; (8000970 <HAL_TIM_OC_DelayElapsedCallback+0x244>)
 80007aa:	701a      	strb	r2, [r3, #0]
				continue;
 80007ac:	e0cd      	b.n	800094a <HAL_TIM_OC_DelayElapsedCallback+0x21e>
			}
		}

		if ( ! (nextStepperFlag & (1 << i)) ){
 80007ae:	4b73      	ldr	r3, [pc, #460]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0x250>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	461a      	mov	r2, r3
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	fa42 f303 	asr.w	r3, r2, r3
 80007bc:	f003 0301 	and.w	r3, r3, #1
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d112      	bne.n	80007ea <HAL_TIM_OC_DelayElapsedCallback+0xbe>
			steppers[i].di -= tmpCtr;
 80007c4:	4a6e      	ldr	r2, [pc, #440]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x254>)
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	214c      	movs	r1, #76	; 0x4c
 80007ca:	fb01 f303 	mul.w	r3, r1, r3
 80007ce:	4413      	add	r3, r2
 80007d0:	3344      	adds	r3, #68	; 0x44
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	693b      	ldr	r3, [r7, #16]
 80007d6:	1ad2      	subs	r2, r2, r3
 80007d8:	4969      	ldr	r1, [pc, #420]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x254>)
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	204c      	movs	r0, #76	; 0x4c
 80007de:	fb00 f303 	mul.w	r3, r0, r3
 80007e2:	440b      	add	r3, r1
 80007e4:	3344      	adds	r3, #68	; 0x44
 80007e6:	601a      	str	r2, [r3, #0]
			continue;
 80007e8:	e0af      	b.n	800094a <HAL_TIM_OC_DelayElapsedCallback+0x21e>
		}

		volatile stepperInfo* s = &steppers[i];
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	224c      	movs	r2, #76	; 0x4c
 80007ee:	fb02 f303 	mul.w	r3, r2, r3
 80007f2:	4a63      	ldr	r2, [pc, #396]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x254>)
 80007f4:	4413      	add	r3, r2
 80007f6:	60fb      	str	r3, [r7, #12]



		if( (s->stepCount) < (s->totalSteps) ){
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000800:	429a      	cmp	r2, r3
 8000802:	d228      	bcs.n	8000856 <HAL_TIM_OC_DelayElapsedCallback+0x12a>
			s->stepFunc();
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	68db      	ldr	r3, [r3, #12]
 8000808:	4798      	blx	r3
			s->stepCount++;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800080e:	1c5a      	adds	r2, r3, #1
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	649a      	str	r2, [r3, #72]	; 0x48
			s->stepPosition += s->dir;
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	69da      	ldr	r2, [r3, #28]
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	441a      	add	r2, r3
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	619a      	str	r2, [r3, #24]
			if ( (s->stepCount) >= (s->totalSteps) ){
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	429a      	cmp	r2, r3
 800082c:	d313      	bcc.n	8000856 <HAL_TIM_OC_DelayElapsedCallback+0x12a>
				s->movementDone = 1;
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	2201      	movs	r2, #1
 8000832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				remainingSteppersFlag &= ~(1 << i);
 8000836:	2201      	movs	r2, #1
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	fa02 f303 	lsl.w	r3, r2, r3
 800083e:	b25b      	sxtb	r3, r3
 8000840:	43db      	mvns	r3, r3
 8000842:	b25a      	sxtb	r2, r3
 8000844:	4b4a      	ldr	r3, [pc, #296]	; (8000970 <HAL_TIM_OC_DelayElapsedCallback+0x244>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	b2db      	uxtb	r3, r3
 800084a:	b25b      	sxtb	r3, r3
 800084c:	4013      	ands	r3, r2
 800084e:	b25b      	sxtb	r3, r3
 8000850:	b2da      	uxtb	r2, r3
 8000852:	4b47      	ldr	r3, [pc, #284]	; (8000970 <HAL_TIM_OC_DelayElapsedCallback+0x244>)
 8000854:	701a      	strb	r2, [r3, #0]
			}
		}

		if (s->rampUpStepCount == 0){
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800085a:	2b00      	cmp	r3, #0
 800085c:	d142      	bne.n	80008e4 <HAL_TIM_OC_DelayElapsedCallback+0x1b8>
			s->n++;
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000862:	1c5a      	adds	r2, r3, #1
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	63da      	str	r2, [r3, #60]	; 0x3c
			s->d = s->d - (2*s->d) / (4*s->n +1);
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8000874:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	3301      	adds	r3, #1
 8000880:	ee07 3a90 	vmov	s15, r3
 8000884:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000888:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800088c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			if (s->d <= s->minStepInterval ){
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	ee07 3a90 	vmov	s15, r3
 80008a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008b0:	d80c      	bhi.n	80008cc <HAL_TIM_OC_DelayElapsedCallback+0x1a0>
				s->d = s->minStepInterval;
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	ee07 3a90 	vmov	s15, r3
 80008ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
				s->rampUpStepCount = s->stepCount;
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	639a      	str	r2, [r3, #56]	; 0x38
			}
			if (s->stepCount >= (s->totalSteps / 2) ){
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	429a      	cmp	r2, r3
 80008d8:	d32c      	bcc.n	8000934 <HAL_TIM_OC_DelayElapsedCallback+0x208>
				s->rampUpStepCount = s->stepCount;
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	639a      	str	r2, [r3, #56]	; 0x38
 80008e2:	e027      	b.n	8000934 <HAL_TIM_OC_DelayElapsedCallback+0x208>
			}
		} else if ( s->stepCount >= s->totalSteps - s->rampUpStepCount) {
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008f0:	1acb      	subs	r3, r1, r3
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d31e      	bcc.n	8000934 <HAL_TIM_OC_DelayElapsedCallback+0x208>
			s->d = (s->d * (4 * s->n + 1)) / (4 * s->n + 1 -2);
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	3301      	adds	r3, #1
 8000904:	ee07 3a90 	vmov	s15, r3
 8000908:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800090c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	3b01      	subs	r3, #1
 8000918:	ee07 3a90 	vmov	s15, r3
 800091c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000920:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			s->n--;
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800092e:	1e5a      	subs	r2, r3, #1
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		s->di = s->d;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800093a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800093e:	ee17 2a90 	vmov	r2, s15
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	645a      	str	r2, [r3, #68]	; 0x44
 8000946:	e000      	b.n	800094a <HAL_TIM_OC_DelayElapsedCallback+0x21e>
			continue;
 8000948:	bf00      	nop
	for (int i = 0; i < NUM_STEPPERS; i++){
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	3301      	adds	r3, #1
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	2b00      	cmp	r3, #0
 8000954:	f77f aefa 	ble.w	800074c <HAL_TIM_OC_DelayElapsedCallback+0x20>
	}

	setNextInterruptInterval();
 8000958:	f7ff fe6c 	bl	8000634 <setNextInterruptInterval>

	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800095c:	4b03      	ldr	r3, [pc, #12]	; (800096c <HAL_TIM_OC_DelayElapsedCallback+0x240>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2200      	movs	r2, #0
 8000962:	625a      	str	r2, [r3, #36]	; 0x24


}
 8000964:	bf00      	nop
 8000966:	3718      	adds	r7, #24
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000078 	.word	0x20000078
 8000970:	2000002a 	.word	0x2000002a
 8000974:	20000029 	.word	0x20000029
 8000978:	20000028 	.word	0x20000028
 800097c:	2000002b 	.word	0x2000002b
 8000980:	2000002c 	.word	0x2000002c

08000984 <runAndWait>:
	if( ! HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9)){
		end_stop_state |= 1;
	}
}

void runAndWait(){
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
	setNextInterruptInterval();
 8000988:	f7ff fe54 	bl	8000634 <setNextInterruptInterval>
	while(remainingSteppersFlag);
 800098c:	bf00      	nop
 800098e:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <runAndWait+0x1c>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	b2db      	uxtb	r3, r3
 8000994:	2b00      	cmp	r3, #0
 8000996:	d1fa      	bne.n	800098e <runAndWait+0xa>
}
 8000998:	bf00      	nop
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	2000002a 	.word	0x2000002a

080009a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a8:	f000 fa55 	bl	8000e56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ac:	f000 f84c 	bl	8000a48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b0:	f000 f960 	bl	8000c74 <MX_GPIO_Init>
  MX_TIM1_Init();
 80009b4:	f000 f8b4 	bl	8000b20 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  steppers[0].dirFunc = Dir0;
 80009b8:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <main+0x88>)
 80009ba:	4a1d      	ldr	r2, [pc, #116]	; (8000a30 <main+0x8c>)
 80009bc:	609a      	str	r2, [r3, #8]
  steppers[0].stepFunc = Step0;
 80009be:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <main+0x88>)
 80009c0:	4a1c      	ldr	r2, [pc, #112]	; (8000a34 <main+0x90>)
 80009c2:	60da      	str	r2, [r3, #12]
  steppers[0].acceleration = 5000;
 80009c4:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <main+0x88>)
 80009c6:	4a1c      	ldr	r2, [pc, #112]	; (8000a38 <main+0x94>)
 80009c8:	601a      	str	r2, [r3, #0]
  steppers[0].minStepInterval = 100;
 80009ca:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <main+0x88>)
 80009cc:	2264      	movs	r2, #100	; 0x64
 80009ce:	605a      	str	r2, [r3, #4]
  steppers[0].homing = 0;
 80009d0:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <main+0x88>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	741a      	strb	r2, [r3, #16]
  steppers[0].dir_inv = 1;
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <main+0x88>)
 80009d8:	2201      	movs	r2, #1
 80009da:	621a      	str	r2, [r3, #32]
  steppers[0].seeking_vel = 100;
 80009dc:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <main+0x88>)
 80009de:	2264      	movs	r2, #100	; 0x64
 80009e0:	629a      	str	r2, [r3, #40]	; 0x28
  steppers[0].homing_vel = 200;
 80009e2:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <main+0x88>)
 80009e4:	22c8      	movs	r2, #200	; 0xc8
 80009e6:	62da      	str	r2, [r3, #44]	; 0x2c
  steppers[0].pull_off = 500;
 80009e8:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <main+0x88>)
 80009ea:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80009ee:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 80009f0:	2201      	movs	r2, #1
 80009f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009f6:	4811      	ldr	r0, [pc, #68]	; (8000a3c <main+0x98>)
 80009f8:	f000 fd6c 	bl	80014d4 <HAL_GPIO_WritePin>

  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80009fc:	2100      	movs	r1, #0
 80009fe:	4810      	ldr	r0, [pc, #64]	; (8000a40 <main+0x9c>)
 8000a00:	f001 fad0 	bl	8001fa4 <HAL_TIM_OC_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  prepareAbsoluteMovement(0, 10000);
 8000a04:	f242 7110 	movw	r1, #10000	; 0x2710
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f7ff fdcf 	bl	80005ac <prepareAbsoluteMovement>
	  runAndWait();
 8000a0e:	f7ff ffb9 	bl	8000984 <runAndWait>
	  HAL_Delay(100);
 8000a12:	2064      	movs	r0, #100	; 0x64
 8000a14:	f000 fa7c 	bl	8000f10 <HAL_Delay>
	  prepareAbsoluteMovement(0, -10000);
 8000a18:	490a      	ldr	r1, [pc, #40]	; (8000a44 <main+0xa0>)
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f7ff fdc6 	bl	80005ac <prepareAbsoluteMovement>
	  runAndWait();
 8000a20:	f7ff ffb0 	bl	8000984 <runAndWait>
	  HAL_Delay(100);
 8000a24:	2064      	movs	r0, #100	; 0x64
 8000a26:	f000 fa73 	bl	8000f10 <HAL_Delay>
	  prepareAbsoluteMovement(0, 10000);
 8000a2a:	e7eb      	b.n	8000a04 <main+0x60>
 8000a2c:	2000002c 	.word	0x2000002c
 8000a30:	08000525 	.word	0x08000525
 8000a34:	08000501 	.word	0x08000501
 8000a38:	459c4000 	.word	0x459c4000
 8000a3c:	40020800 	.word	0x40020800
 8000a40:	20000078 	.word	0x20000078
 8000a44:	ffffd8f0 	.word	0xffffd8f0

08000a48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b094      	sub	sp, #80	; 0x50
 8000a4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a4e:	f107 0320 	add.w	r3, r7, #32
 8000a52:	2230      	movs	r2, #48	; 0x30
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f002 fb74 	bl	8003144 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a5c:	f107 030c 	add.w	r3, r7, #12
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6c:	4b2a      	ldr	r3, [pc, #168]	; (8000b18 <SystemClock_Config+0xd0>)
 8000a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a70:	4a29      	ldr	r2, [pc, #164]	; (8000b18 <SystemClock_Config+0xd0>)
 8000a72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a76:	6413      	str	r3, [r2, #64]	; 0x40
 8000a78:	4b27      	ldr	r3, [pc, #156]	; (8000b18 <SystemClock_Config+0xd0>)
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a84:	4b25      	ldr	r3, [pc, #148]	; (8000b1c <SystemClock_Config+0xd4>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a24      	ldr	r2, [pc, #144]	; (8000b1c <SystemClock_Config+0xd4>)
 8000a8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a8e:	6013      	str	r3, [r2, #0]
 8000a90:	4b22      	ldr	r3, [pc, #136]	; (8000b1c <SystemClock_Config+0xd4>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa4:	2310      	movs	r3, #16
 8000aa6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aac:	2300      	movs	r3, #0
 8000aae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ab0:	2308      	movs	r3, #8
 8000ab2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000ab4:	23c0      	movs	r3, #192	; 0xc0
 8000ab6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000abc:	2302      	movs	r3, #2
 8000abe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac0:	f107 0320 	add.w	r3, r7, #32
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f000 fd6f 	bl	80015a8 <HAL_RCC_OscConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000ad0:	f000 f902 	bl	8000cd8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ad4:	f000 fd18 	bl	8001508 <HAL_PWREx_EnableOverDrive>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ade:	f000 f8fb 	bl	8000cd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae2:	230f      	movs	r3, #15
 8000ae4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aea:	2300      	movs	r3, #0
 8000aec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000aee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000af2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000afa:	f107 030c 	add.w	r3, r7, #12
 8000afe:	2106      	movs	r1, #6
 8000b00:	4618      	mov	r0, r3
 8000b02:	f000 fff5 	bl	8001af0 <HAL_RCC_ClockConfig>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000b0c:	f000 f8e4 	bl	8000cd8 <Error_Handler>
  }
}
 8000b10:	bf00      	nop
 8000b12:	3750      	adds	r7, #80	; 0x50
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40007000 	.word	0x40007000

08000b20 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b09a      	sub	sp, #104	; 0x68
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b26:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b34:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b40:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
 8000b50:	615a      	str	r2, [r3, #20]
 8000b52:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	222c      	movs	r2, #44	; 0x2c
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f002 faf2 	bl	8003144 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b60:	4b42      	ldr	r3, [pc, #264]	; (8000c6c <MX_TIM1_Init+0x14c>)
 8000b62:	4a43      	ldr	r2, [pc, #268]	; (8000c70 <MX_TIM1_Init+0x150>)
 8000b64:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 192-1;
 8000b66:	4b41      	ldr	r3, [pc, #260]	; (8000c6c <MX_TIM1_Init+0x14c>)
 8000b68:	22bf      	movs	r2, #191	; 0xbf
 8000b6a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b6c:	4b3f      	ldr	r3, [pc, #252]	; (8000c6c <MX_TIM1_Init+0x14c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b72:	4b3e      	ldr	r3, [pc, #248]	; (8000c6c <MX_TIM1_Init+0x14c>)
 8000b74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b78:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b7a:	4b3c      	ldr	r3, [pc, #240]	; (8000c6c <MX_TIM1_Init+0x14c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b80:	4b3a      	ldr	r3, [pc, #232]	; (8000c6c <MX_TIM1_Init+0x14c>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b86:	4b39      	ldr	r3, [pc, #228]	; (8000c6c <MX_TIM1_Init+0x14c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b8c:	4837      	ldr	r0, [pc, #220]	; (8000c6c <MX_TIM1_Init+0x14c>)
 8000b8e:	f001 f951 	bl	8001e34 <HAL_TIM_Base_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000b98:	f000 f89e 	bl	8000cd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ba2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4830      	ldr	r0, [pc, #192]	; (8000c6c <MX_TIM1_Init+0x14c>)
 8000baa:	f001 fcd1 	bl	8002550 <HAL_TIM_ConfigClockSource>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000bb4:	f000 f890 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000bb8:	482c      	ldr	r0, [pc, #176]	; (8000c6c <MX_TIM1_Init+0x14c>)
 8000bba:	f001 f992 	bl	8001ee2 <HAL_TIM_OC_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000bc4:	f000 f888 	bl	8000cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bd4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4824      	ldr	r0, [pc, #144]	; (8000c6c <MX_TIM1_Init+0x14c>)
 8000bdc:	f002 f964 	bl	8002ea8 <HAL_TIMEx_MasterConfigSynchronization>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000be6:	f000 f877 	bl	8000cd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000bea:	2300      	movs	r3, #0
 8000bec:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 100;
 8000bee:	2364      	movs	r3, #100	; 0x64
 8000bf0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c02:	2300      	movs	r3, #0
 8000c04:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4817      	ldr	r0, [pc, #92]	; (8000c6c <MX_TIM1_Init+0x14c>)
 8000c10:	f001 fc28 	bl	8002464 <HAL_TIM_OC_ConfigChannel>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000c1a:	f000 f85d 	bl	8000cd8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c22:	2300      	movs	r3, #0
 8000c24:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c36:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	4619      	mov	r1, r3
 8000c52:	4806      	ldr	r0, [pc, #24]	; (8000c6c <MX_TIM1_Init+0x14c>)
 8000c54:	f002 f9b6 	bl	8002fc4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000c5e:	f000 f83b 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c62:	bf00      	nop
 8000c64:	3768      	adds	r7, #104	; 0x68
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000078 	.word	0x20000078
 8000c70:	40010000 	.word	0x40010000

08000c74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <MX_GPIO_Init+0x5c>)
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8c:	4a10      	ldr	r2, [pc, #64]	; (8000cd0 <MX_GPIO_Init+0x5c>)
 8000c8e:	f043 0304 	orr.w	r3, r3, #4
 8000c92:	6313      	str	r3, [r2, #48]	; 0x30
 8000c94:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <MX_GPIO_Init+0x5c>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c98:	f003 0304 	and.w	r3, r3, #4
 8000c9c:	603b      	str	r3, [r7, #0]
 8000c9e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000ca6:	480b      	ldr	r0, [pc, #44]	; (8000cd4 <MX_GPIO_Init+0x60>)
 8000ca8:	f000 fc14 	bl	80014d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000cac:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000cb0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4804      	ldr	r0, [pc, #16]	; (8000cd4 <MX_GPIO_Init+0x60>)
 8000cc4:	f000 fa5a 	bl	800117c <HAL_GPIO_Init>

}
 8000cc8:	bf00      	nop
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40020800 	.word	0x40020800

08000cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cdc:	b672      	cpsid	i
}
 8000cde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <Error_Handler+0x8>
	...

08000ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000cea:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <HAL_MspInit+0x44>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	4a0e      	ldr	r2, [pc, #56]	; (8000d28 <HAL_MspInit+0x44>)
 8000cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <HAL_MspInit+0x44>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <HAL_MspInit+0x44>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	4a08      	ldr	r2, [pc, #32]	; (8000d28 <HAL_MspInit+0x44>)
 8000d08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_MspInit+0x44>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	40023800 	.word	0x40023800

08000d2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a0d      	ldr	r2, [pc, #52]	; (8000d70 <HAL_TIM_Base_MspInit+0x44>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d113      	bne.n	8000d66 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d3e:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <HAL_TIM_Base_MspInit+0x48>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d42:	4a0c      	ldr	r2, [pc, #48]	; (8000d74 <HAL_TIM_Base_MspInit+0x48>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <HAL_TIM_Base_MspInit+0x48>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2100      	movs	r1, #0
 8000d5a:	201b      	movs	r0, #27
 8000d5c:	f000 f9d7 	bl	800110e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000d60:	201b      	movs	r0, #27
 8000d62:	f000 f9f0 	bl	8001146 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d66:	bf00      	nop
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40010000 	.word	0x40010000
 8000d74:	40023800 	.word	0x40023800

08000d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <NMI_Handler+0x4>

08000d7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <HardFault_Handler+0x4>

08000d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <MemManage_Handler+0x4>

08000d8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <BusFault_Handler+0x4>

08000d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <UsageFault_Handler+0x4>

08000d96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc4:	f000 f884 	bl	8000ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <TIM1_CC_IRQHandler+0x10>)
 8000dd2:	f001 fa27 	bl	8002224 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000078 	.word	0x20000078

08000de0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <SystemInit+0x20>)
 8000de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dea:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <SystemInit+0x20>)
 8000dec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e08:	480d      	ldr	r0, [pc, #52]	; (8000e40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e0a:	490e      	ldr	r1, [pc, #56]	; (8000e44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e0c:	4a0e      	ldr	r2, [pc, #56]	; (8000e48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e10:	e002      	b.n	8000e18 <LoopCopyDataInit>

08000e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e16:	3304      	adds	r3, #4

08000e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e1c:	d3f9      	bcc.n	8000e12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1e:	4a0b      	ldr	r2, [pc, #44]	; (8000e4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e20:	4c0b      	ldr	r4, [pc, #44]	; (8000e50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e24:	e001      	b.n	8000e2a <LoopFillZerobss>

08000e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e28:	3204      	adds	r2, #4

08000e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e2c:	d3fb      	bcc.n	8000e26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e2e:	f7ff ffd7 	bl	8000de0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e32:	f002 f963 	bl	80030fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e36:	f7ff fdb5 	bl	80009a4 <main>
  bx  lr    
 8000e3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e3c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e44:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e48:	0800318c 	.word	0x0800318c
  ldr r2, =_sbss
 8000e4c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e50:	200000c8 	.word	0x200000c8

08000e54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e54:	e7fe      	b.n	8000e54 <ADC_IRQHandler>

08000e56 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e5a:	2003      	movs	r0, #3
 8000e5c:	f000 f94c 	bl	80010f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e60:	2000      	movs	r0, #0
 8000e62:	f000 f805 	bl	8000e70 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000e66:	f7ff ff3d 	bl	8000ce4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000e6a:	2300      	movs	r3, #0
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <HAL_InitTick+0x54>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <HAL_InitTick+0x58>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	4619      	mov	r1, r3
 8000e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 f967 	bl	8001162 <HAL_SYSTICK_Config>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e00e      	b.n	8000ebc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b0f      	cmp	r3, #15
 8000ea2:	d80a      	bhi.n	8000eba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000eac:	f000 f92f 	bl	800110e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb0:	4a06      	ldr	r2, [pc, #24]	; (8000ecc <HAL_InitTick+0x5c>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	e000      	b.n	8000ebc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000000 	.word	0x20000000
 8000ec8:	20000008 	.word	0x20000008
 8000ecc:	20000004 	.word	0x20000004

08000ed0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_IncTick+0x20>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_IncTick+0x24>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4413      	add	r3, r2
 8000ee0:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <HAL_IncTick+0x24>)
 8000ee2:	6013      	str	r3, [r2, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	200000c4 	.word	0x200000c4

08000ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return uwTick;
 8000efc:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <HAL_GetTick+0x14>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	200000c4 	.word	0x200000c4

08000f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f18:	f7ff ffee 	bl	8000ef8 <HAL_GetTick>
 8000f1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f28:	d005      	beq.n	8000f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <HAL_Delay+0x44>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	4413      	add	r3, r2
 8000f34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f36:	bf00      	nop
 8000f38:	f7ff ffde 	bl	8000ef8 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d8f7      	bhi.n	8000f38 <HAL_Delay+0x28>
  {
  }
}
 8000f48:	bf00      	nop
 8000f4a:	bf00      	nop
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000008 	.word	0x20000008

08000f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f68:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <__NVIC_SetPriorityGrouping+0x40>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f74:	4013      	ands	r3, r2
 8000f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f82:	4313      	orrs	r3, r2
 8000f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f86:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <__NVIC_SetPriorityGrouping+0x40>)
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	60d3      	str	r3, [r2, #12]
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000ed00 	.word	0xe000ed00
 8000f9c:	05fa0000 	.word	0x05fa0000

08000fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	0a1b      	lsrs	r3, r3, #8
 8000faa:	f003 0307 	and.w	r3, r3, #7
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	db0b      	blt.n	8000fe6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	f003 021f 	and.w	r2, r3, #31
 8000fd4:	4907      	ldr	r1, [pc, #28]	; (8000ff4 <__NVIC_EnableIRQ+0x38>)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	095b      	lsrs	r3, r3, #5
 8000fdc:	2001      	movs	r0, #1
 8000fde:	fa00 f202 	lsl.w	r2, r0, r2
 8000fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000e100 	.word	0xe000e100

08000ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	6039      	str	r1, [r7, #0]
 8001002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001008:	2b00      	cmp	r3, #0
 800100a:	db0a      	blt.n	8001022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	b2da      	uxtb	r2, r3
 8001010:	490c      	ldr	r1, [pc, #48]	; (8001044 <__NVIC_SetPriority+0x4c>)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	0112      	lsls	r2, r2, #4
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	440b      	add	r3, r1
 800101c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001020:	e00a      	b.n	8001038 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4908      	ldr	r1, [pc, #32]	; (8001048 <__NVIC_SetPriority+0x50>)
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	f003 030f 	and.w	r3, r3, #15
 800102e:	3b04      	subs	r3, #4
 8001030:	0112      	lsls	r2, r2, #4
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	440b      	add	r3, r1
 8001036:	761a      	strb	r2, [r3, #24]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000e100 	.word	0xe000e100
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800104c:	b480      	push	{r7}
 800104e:	b089      	sub	sp, #36	; 0x24
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	f1c3 0307 	rsb	r3, r3, #7
 8001066:	2b04      	cmp	r3, #4
 8001068:	bf28      	it	cs
 800106a:	2304      	movcs	r3, #4
 800106c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3304      	adds	r3, #4
 8001072:	2b06      	cmp	r3, #6
 8001074:	d902      	bls.n	800107c <NVIC_EncodePriority+0x30>
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3b03      	subs	r3, #3
 800107a:	e000      	b.n	800107e <NVIC_EncodePriority+0x32>
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43da      	mvns	r2, r3
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	401a      	ands	r2, r3
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001094:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	fa01 f303 	lsl.w	r3, r1, r3
 800109e:	43d9      	mvns	r1, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	4313      	orrs	r3, r2
         );
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3724      	adds	r7, #36	; 0x24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
	...

080010b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3b01      	subs	r3, #1
 80010c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010c4:	d301      	bcc.n	80010ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010c6:	2301      	movs	r3, #1
 80010c8:	e00f      	b.n	80010ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ca:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <SysTick_Config+0x40>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010d2:	210f      	movs	r1, #15
 80010d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010d8:	f7ff ff8e 	bl	8000ff8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <SysTick_Config+0x40>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010e2:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <SysTick_Config+0x40>)
 80010e4:	2207      	movs	r2, #7
 80010e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	e000e010 	.word	0xe000e010

080010f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff ff29 	bl	8000f58 <__NVIC_SetPriorityGrouping>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800110e:	b580      	push	{r7, lr}
 8001110:	b086      	sub	sp, #24
 8001112:	af00      	add	r7, sp, #0
 8001114:	4603      	mov	r3, r0
 8001116:	60b9      	str	r1, [r7, #8]
 8001118:	607a      	str	r2, [r7, #4]
 800111a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001120:	f7ff ff3e 	bl	8000fa0 <__NVIC_GetPriorityGrouping>
 8001124:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	68b9      	ldr	r1, [r7, #8]
 800112a:	6978      	ldr	r0, [r7, #20]
 800112c:	f7ff ff8e 	bl	800104c <NVIC_EncodePriority>
 8001130:	4602      	mov	r2, r0
 8001132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001136:	4611      	mov	r1, r2
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff5d 	bl	8000ff8 <__NVIC_SetPriority>
}
 800113e:	bf00      	nop
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	4603      	mov	r3, r0
 800114e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff31 	bl	8000fbc <__NVIC_EnableIRQ>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff ffa2 	bl	80010b4 <SysTick_Config>
 8001170:	4603      	mov	r3, r0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800117c:	b480      	push	{r7}
 800117e:	b089      	sub	sp, #36	; 0x24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001192:	2300      	movs	r3, #0
 8001194:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
 800119a:	e175      	b.n	8001488 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800119c:	2201      	movs	r2, #1
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	697a      	ldr	r2, [r7, #20]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	f040 8164 	bne.w	8001482 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d00b      	beq.n	80011da <HAL_GPIO_Init+0x5e>
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d007      	beq.n	80011da <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011ce:	2b11      	cmp	r3, #17
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b12      	cmp	r3, #18
 80011d8:	d130      	bne.n	800123c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	2203      	movs	r2, #3
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43db      	mvns	r3, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4013      	ands	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	68da      	ldr	r2, [r3, #12]
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001210:	2201      	movs	r2, #1
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	091b      	lsrs	r3, r3, #4
 8001226:	f003 0201 	and.w	r2, r3, #1
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	2203      	movs	r2, #3
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	2b02      	cmp	r3, #2
 8001272:	d003      	beq.n	800127c <HAL_GPIO_Init+0x100>
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	2b12      	cmp	r3, #18
 800127a:	d123      	bne.n	80012c4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	08da      	lsrs	r2, r3, #3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3208      	adds	r2, #8
 8001284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	f003 0307 	and.w	r3, r3, #7
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	220f      	movs	r2, #15
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	691a      	ldr	r2, [r3, #16]
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	08da      	lsrs	r2, r3, #3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3208      	adds	r2, #8
 80012be:	69b9      	ldr	r1, [r7, #24]
 80012c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	2203      	movs	r2, #3
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 0203 	and.w	r2, r3, #3
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001300:	2b00      	cmp	r3, #0
 8001302:	f000 80be 	beq.w	8001482 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001306:	4b66      	ldr	r3, [pc, #408]	; (80014a0 <HAL_GPIO_Init+0x324>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	4a65      	ldr	r2, [pc, #404]	; (80014a0 <HAL_GPIO_Init+0x324>)
 800130c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001310:	6453      	str	r3, [r2, #68]	; 0x44
 8001312:	4b63      	ldr	r3, [pc, #396]	; (80014a0 <HAL_GPIO_Init+0x324>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800131e:	4a61      	ldr	r2, [pc, #388]	; (80014a4 <HAL_GPIO_Init+0x328>)
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	089b      	lsrs	r3, r3, #2
 8001324:	3302      	adds	r3, #2
 8001326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800132a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	220f      	movs	r2, #15
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a58      	ldr	r2, [pc, #352]	; (80014a8 <HAL_GPIO_Init+0x32c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d037      	beq.n	80013ba <HAL_GPIO_Init+0x23e>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a57      	ldr	r2, [pc, #348]	; (80014ac <HAL_GPIO_Init+0x330>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d031      	beq.n	80013b6 <HAL_GPIO_Init+0x23a>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a56      	ldr	r2, [pc, #344]	; (80014b0 <HAL_GPIO_Init+0x334>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d02b      	beq.n	80013b2 <HAL_GPIO_Init+0x236>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a55      	ldr	r2, [pc, #340]	; (80014b4 <HAL_GPIO_Init+0x338>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d025      	beq.n	80013ae <HAL_GPIO_Init+0x232>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a54      	ldr	r2, [pc, #336]	; (80014b8 <HAL_GPIO_Init+0x33c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d01f      	beq.n	80013aa <HAL_GPIO_Init+0x22e>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a53      	ldr	r2, [pc, #332]	; (80014bc <HAL_GPIO_Init+0x340>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d019      	beq.n	80013a6 <HAL_GPIO_Init+0x22a>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a52      	ldr	r2, [pc, #328]	; (80014c0 <HAL_GPIO_Init+0x344>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d013      	beq.n	80013a2 <HAL_GPIO_Init+0x226>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a51      	ldr	r2, [pc, #324]	; (80014c4 <HAL_GPIO_Init+0x348>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d00d      	beq.n	800139e <HAL_GPIO_Init+0x222>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a50      	ldr	r2, [pc, #320]	; (80014c8 <HAL_GPIO_Init+0x34c>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d007      	beq.n	800139a <HAL_GPIO_Init+0x21e>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a4f      	ldr	r2, [pc, #316]	; (80014cc <HAL_GPIO_Init+0x350>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d101      	bne.n	8001396 <HAL_GPIO_Init+0x21a>
 8001392:	2309      	movs	r3, #9
 8001394:	e012      	b.n	80013bc <HAL_GPIO_Init+0x240>
 8001396:	230a      	movs	r3, #10
 8001398:	e010      	b.n	80013bc <HAL_GPIO_Init+0x240>
 800139a:	2308      	movs	r3, #8
 800139c:	e00e      	b.n	80013bc <HAL_GPIO_Init+0x240>
 800139e:	2307      	movs	r3, #7
 80013a0:	e00c      	b.n	80013bc <HAL_GPIO_Init+0x240>
 80013a2:	2306      	movs	r3, #6
 80013a4:	e00a      	b.n	80013bc <HAL_GPIO_Init+0x240>
 80013a6:	2305      	movs	r3, #5
 80013a8:	e008      	b.n	80013bc <HAL_GPIO_Init+0x240>
 80013aa:	2304      	movs	r3, #4
 80013ac:	e006      	b.n	80013bc <HAL_GPIO_Init+0x240>
 80013ae:	2303      	movs	r3, #3
 80013b0:	e004      	b.n	80013bc <HAL_GPIO_Init+0x240>
 80013b2:	2302      	movs	r3, #2
 80013b4:	e002      	b.n	80013bc <HAL_GPIO_Init+0x240>
 80013b6:	2301      	movs	r3, #1
 80013b8:	e000      	b.n	80013bc <HAL_GPIO_Init+0x240>
 80013ba:	2300      	movs	r3, #0
 80013bc:	69fa      	ldr	r2, [r7, #28]
 80013be:	f002 0203 	and.w	r2, r2, #3
 80013c2:	0092      	lsls	r2, r2, #2
 80013c4:	4093      	lsls	r3, r2
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80013cc:	4935      	ldr	r1, [pc, #212]	; (80014a4 <HAL_GPIO_Init+0x328>)
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	089b      	lsrs	r3, r3, #2
 80013d2:	3302      	adds	r3, #2
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013da:	4b3d      	ldr	r3, [pc, #244]	; (80014d0 <HAL_GPIO_Init+0x354>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	43db      	mvns	r3, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4013      	ands	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013fe:	4a34      	ldr	r2, [pc, #208]	; (80014d0 <HAL_GPIO_Init+0x354>)
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001404:	4b32      	ldr	r3, [pc, #200]	; (80014d0 <HAL_GPIO_Init+0x354>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	4313      	orrs	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001428:	4a29      	ldr	r2, [pc, #164]	; (80014d0 <HAL_GPIO_Init+0x354>)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800142e:	4b28      	ldr	r3, [pc, #160]	; (80014d0 <HAL_GPIO_Init+0x354>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	43db      	mvns	r3, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4013      	ands	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001452:	4a1f      	ldr	r2, [pc, #124]	; (80014d0 <HAL_GPIO_Init+0x354>)
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001458:	4b1d      	ldr	r3, [pc, #116]	; (80014d0 <HAL_GPIO_Init+0x354>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	4313      	orrs	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800147c:	4a14      	ldr	r2, [pc, #80]	; (80014d0 <HAL_GPIO_Init+0x354>)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3301      	adds	r3, #1
 8001486:	61fb      	str	r3, [r7, #28]
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	2b0f      	cmp	r3, #15
 800148c:	f67f ae86 	bls.w	800119c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001490:	bf00      	nop
 8001492:	bf00      	nop
 8001494:	3724      	adds	r7, #36	; 0x24
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40013800 	.word	0x40013800
 80014a8:	40020000 	.word	0x40020000
 80014ac:	40020400 	.word	0x40020400
 80014b0:	40020800 	.word	0x40020800
 80014b4:	40020c00 	.word	0x40020c00
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40021400 	.word	0x40021400
 80014c0:	40021800 	.word	0x40021800
 80014c4:	40021c00 	.word	0x40021c00
 80014c8:	40022000 	.word	0x40022000
 80014cc:	40022400 	.word	0x40022400
 80014d0:	40013c00 	.word	0x40013c00

080014d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	460b      	mov	r3, r1
 80014de:	807b      	strh	r3, [r7, #2]
 80014e0:	4613      	mov	r3, r2
 80014e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014e4:	787b      	ldrb	r3, [r7, #1]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ea:	887a      	ldrh	r2, [r7, #2]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80014f0:	e003      	b.n	80014fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80014f2:	887b      	ldrh	r3, [r7, #2]
 80014f4:	041a      	lsls	r2, r3, #16
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	619a      	str	r2, [r3, #24]
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
	...

08001508 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001512:	4b23      	ldr	r3, [pc, #140]	; (80015a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	4a22      	ldr	r2, [pc, #136]	; (80015a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800151c:	6413      	str	r3, [r2, #64]	; 0x40
 800151e:	4b20      	ldr	r3, [pc, #128]	; (80015a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800152a:	4b1e      	ldr	r3, [pc, #120]	; (80015a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a1d      	ldr	r2, [pc, #116]	; (80015a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001534:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001536:	f7ff fcdf 	bl	8000ef8 <HAL_GetTick>
 800153a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800153c:	e009      	b.n	8001552 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800153e:	f7ff fcdb 	bl	8000ef8 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800154c:	d901      	bls.n	8001552 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e022      	b.n	8001598 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001552:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800155a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800155e:	d1ee      	bne.n	800153e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001560:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a0f      	ldr	r2, [pc, #60]	; (80015a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800156a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800156c:	f7ff fcc4 	bl	8000ef8 <HAL_GetTick>
 8001570:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001572:	e009      	b.n	8001588 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001574:	f7ff fcc0 	bl	8000ef8 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001582:	d901      	bls.n	8001588 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e007      	b.n	8001598 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001590:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001594:	d1ee      	bne.n	8001574 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40007000 	.word	0x40007000

080015a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80015b0:	2300      	movs	r3, #0
 80015b2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e291      	b.n	8001ae2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f000 8087 	beq.w	80016da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015cc:	4b96      	ldr	r3, [pc, #600]	; (8001828 <HAL_RCC_OscConfig+0x280>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f003 030c 	and.w	r3, r3, #12
 80015d4:	2b04      	cmp	r3, #4
 80015d6:	d00c      	beq.n	80015f2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015d8:	4b93      	ldr	r3, [pc, #588]	; (8001828 <HAL_RCC_OscConfig+0x280>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f003 030c 	and.w	r3, r3, #12
 80015e0:	2b08      	cmp	r3, #8
 80015e2:	d112      	bne.n	800160a <HAL_RCC_OscConfig+0x62>
 80015e4:	4b90      	ldr	r3, [pc, #576]	; (8001828 <HAL_RCC_OscConfig+0x280>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015f0:	d10b      	bne.n	800160a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f2:	4b8d      	ldr	r3, [pc, #564]	; (8001828 <HAL_RCC_OscConfig+0x280>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d06c      	beq.n	80016d8 <HAL_RCC_OscConfig+0x130>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d168      	bne.n	80016d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e26b      	b.n	8001ae2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001612:	d106      	bne.n	8001622 <HAL_RCC_OscConfig+0x7a>
 8001614:	4b84      	ldr	r3, [pc, #528]	; (8001828 <HAL_RCC_OscConfig+0x280>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a83      	ldr	r2, [pc, #524]	; (8001828 <HAL_RCC_OscConfig+0x280>)
 800161a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	e02e      	b.n	8001680 <HAL_RCC_OscConfig+0xd8>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10c      	bne.n	8001644 <HAL_RCC_OscConfig+0x9c>
 800162a:	4b7f      	ldr	r3, [pc, #508]	; (8001828 <HAL_RCC_OscConfig+0x280>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a7e      	ldr	r2, [pc, #504]	; (8001828 <HAL_RCC_OscConfig+0x280>)
 8001630:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	4b7c      	ldr	r3, [pc, #496]	; (8001828 <HAL_RCC_OscConfig+0x280>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a7b      	ldr	r2, [pc, #492]	; (8001828 <HAL_RCC_OscConfig+0x280>)
 800163c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001640:	6013      	str	r3, [r2, #0]
 8001642:	e01d      	b.n	8001680 <HAL_RCC_OscConfig+0xd8>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800164c:	d10c      	bne.n	8001668 <HAL_RCC_OscConfig+0xc0>
 800164e:	4b76      	ldr	r3, [pc, #472]	; (8001828 <HAL_RCC_OscConfig+0x280>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a75      	ldr	r2, [pc, #468]	; (8001828 <HAL_RCC_OscConfig+0x280>)
 8001654:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	4b73      	ldr	r3, [pc, #460]	; (8001828 <HAL_RCC_OscConfig+0x280>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a72      	ldr	r2, [pc, #456]	; (8001828 <HAL_RCC_OscConfig+0x280>)
 8001660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	e00b      	b.n	8001680 <HAL_RCC_OscConfig+0xd8>
 8001668:	4b6f      	ldr	r3, [pc, #444]	; (8001828 <HAL_RCC_OscConfig+0x280>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a6e      	ldr	r2, [pc, #440]	; (8001828 <HAL_RCC_OscConfig+0x280>)
 800166e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	4b6c      	ldr	r3, [pc, #432]	; (8001828 <HAL_RCC_OscConfig+0x280>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a6b      	ldr	r2, [pc, #428]	; (8001828 <HAL_RCC_OscConfig+0x280>)
 800167a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800167e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d013      	beq.n	80016b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001688:	f7ff fc36 	bl	8000ef8 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001690:	f7ff fc32 	bl	8000ef8 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b64      	cmp	r3, #100	; 0x64
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e21f      	b.n	8001ae2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a2:	4b61      	ldr	r3, [pc, #388]	; (8001828 <HAL_RCC_OscConfig+0x280>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0f0      	beq.n	8001690 <HAL_RCC_OscConfig+0xe8>
 80016ae:	e014      	b.n	80016da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b0:	f7ff fc22 	bl	8000ef8 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016b8:	f7ff fc1e 	bl	8000ef8 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b64      	cmp	r3, #100	; 0x64
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e20b      	b.n	8001ae2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ca:	4b57      	ldr	r3, [pc, #348]	; (8001828 <HAL_RCC_OscConfig+0x280>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1f0      	bne.n	80016b8 <HAL_RCC_OscConfig+0x110>
 80016d6:	e000      	b.n	80016da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d069      	beq.n	80017ba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016e6:	4b50      	ldr	r3, [pc, #320]	; (8001828 <HAL_RCC_OscConfig+0x280>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f003 030c 	and.w	r3, r3, #12
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d00b      	beq.n	800170a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016f2:	4b4d      	ldr	r3, [pc, #308]	; (8001828 <HAL_RCC_OscConfig+0x280>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 030c 	and.w	r3, r3, #12
 80016fa:	2b08      	cmp	r3, #8
 80016fc:	d11c      	bne.n	8001738 <HAL_RCC_OscConfig+0x190>
 80016fe:	4b4a      	ldr	r3, [pc, #296]	; (8001828 <HAL_RCC_OscConfig+0x280>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d116      	bne.n	8001738 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800170a:	4b47      	ldr	r3, [pc, #284]	; (8001828 <HAL_RCC_OscConfig+0x280>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d005      	beq.n	8001722 <HAL_RCC_OscConfig+0x17a>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d001      	beq.n	8001722 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e1df      	b.n	8001ae2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001722:	4b41      	ldr	r3, [pc, #260]	; (8001828 <HAL_RCC_OscConfig+0x280>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	493d      	ldr	r1, [pc, #244]	; (8001828 <HAL_RCC_OscConfig+0x280>)
 8001732:	4313      	orrs	r3, r2
 8001734:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001736:	e040      	b.n	80017ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d023      	beq.n	8001788 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001740:	4b39      	ldr	r3, [pc, #228]	; (8001828 <HAL_RCC_OscConfig+0x280>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a38      	ldr	r2, [pc, #224]	; (8001828 <HAL_RCC_OscConfig+0x280>)
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174c:	f7ff fbd4 	bl	8000ef8 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001754:	f7ff fbd0 	bl	8000ef8 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e1bd      	b.n	8001ae2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001766:	4b30      	ldr	r3, [pc, #192]	; (8001828 <HAL_RCC_OscConfig+0x280>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0f0      	beq.n	8001754 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001772:	4b2d      	ldr	r3, [pc, #180]	; (8001828 <HAL_RCC_OscConfig+0x280>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	4929      	ldr	r1, [pc, #164]	; (8001828 <HAL_RCC_OscConfig+0x280>)
 8001782:	4313      	orrs	r3, r2
 8001784:	600b      	str	r3, [r1, #0]
 8001786:	e018      	b.n	80017ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001788:	4b27      	ldr	r3, [pc, #156]	; (8001828 <HAL_RCC_OscConfig+0x280>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a26      	ldr	r2, [pc, #152]	; (8001828 <HAL_RCC_OscConfig+0x280>)
 800178e:	f023 0301 	bic.w	r3, r3, #1
 8001792:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001794:	f7ff fbb0 	bl	8000ef8 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800179c:	f7ff fbac 	bl	8000ef8 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e199      	b.n	8001ae2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ae:	4b1e      	ldr	r3, [pc, #120]	; (8001828 <HAL_RCC_OscConfig+0x280>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f0      	bne.n	800179c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0308 	and.w	r3, r3, #8
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d038      	beq.n	8001838 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d019      	beq.n	8001802 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ce:	4b16      	ldr	r3, [pc, #88]	; (8001828 <HAL_RCC_OscConfig+0x280>)
 80017d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017d2:	4a15      	ldr	r2, [pc, #84]	; (8001828 <HAL_RCC_OscConfig+0x280>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017da:	f7ff fb8d 	bl	8000ef8 <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017e2:	f7ff fb89 	bl	8000ef8 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e176      	b.n	8001ae2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <HAL_RCC_OscConfig+0x280>)
 80017f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0f0      	beq.n	80017e2 <HAL_RCC_OscConfig+0x23a>
 8001800:	e01a      	b.n	8001838 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001802:	4b09      	ldr	r3, [pc, #36]	; (8001828 <HAL_RCC_OscConfig+0x280>)
 8001804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001806:	4a08      	ldr	r2, [pc, #32]	; (8001828 <HAL_RCC_OscConfig+0x280>)
 8001808:	f023 0301 	bic.w	r3, r3, #1
 800180c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180e:	f7ff fb73 	bl	8000ef8 <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001814:	e00a      	b.n	800182c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001816:	f7ff fb6f 	bl	8000ef8 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d903      	bls.n	800182c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e15c      	b.n	8001ae2 <HAL_RCC_OscConfig+0x53a>
 8001828:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800182c:	4b91      	ldr	r3, [pc, #580]	; (8001a74 <HAL_RCC_OscConfig+0x4cc>)
 800182e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1ee      	bne.n	8001816 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 80a4 	beq.w	800198e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001846:	4b8b      	ldr	r3, [pc, #556]	; (8001a74 <HAL_RCC_OscConfig+0x4cc>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10d      	bne.n	800186e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001852:	4b88      	ldr	r3, [pc, #544]	; (8001a74 <HAL_RCC_OscConfig+0x4cc>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	4a87      	ldr	r2, [pc, #540]	; (8001a74 <HAL_RCC_OscConfig+0x4cc>)
 8001858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800185c:	6413      	str	r3, [r2, #64]	; 0x40
 800185e:	4b85      	ldr	r3, [pc, #532]	; (8001a74 <HAL_RCC_OscConfig+0x4cc>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800186a:	2301      	movs	r3, #1
 800186c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800186e:	4b82      	ldr	r3, [pc, #520]	; (8001a78 <HAL_RCC_OscConfig+0x4d0>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001876:	2b00      	cmp	r3, #0
 8001878:	d118      	bne.n	80018ac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800187a:	4b7f      	ldr	r3, [pc, #508]	; (8001a78 <HAL_RCC_OscConfig+0x4d0>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a7e      	ldr	r2, [pc, #504]	; (8001a78 <HAL_RCC_OscConfig+0x4d0>)
 8001880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001884:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001886:	f7ff fb37 	bl	8000ef8 <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800188e:	f7ff fb33 	bl	8000ef8 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b64      	cmp	r3, #100	; 0x64
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e120      	b.n	8001ae2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018a0:	4b75      	ldr	r3, [pc, #468]	; (8001a78 <HAL_RCC_OscConfig+0x4d0>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0f0      	beq.n	800188e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d106      	bne.n	80018c2 <HAL_RCC_OscConfig+0x31a>
 80018b4:	4b6f      	ldr	r3, [pc, #444]	; (8001a74 <HAL_RCC_OscConfig+0x4cc>)
 80018b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b8:	4a6e      	ldr	r2, [pc, #440]	; (8001a74 <HAL_RCC_OscConfig+0x4cc>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	6713      	str	r3, [r2, #112]	; 0x70
 80018c0:	e02d      	b.n	800191e <HAL_RCC_OscConfig+0x376>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d10c      	bne.n	80018e4 <HAL_RCC_OscConfig+0x33c>
 80018ca:	4b6a      	ldr	r3, [pc, #424]	; (8001a74 <HAL_RCC_OscConfig+0x4cc>)
 80018cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ce:	4a69      	ldr	r2, [pc, #420]	; (8001a74 <HAL_RCC_OscConfig+0x4cc>)
 80018d0:	f023 0301 	bic.w	r3, r3, #1
 80018d4:	6713      	str	r3, [r2, #112]	; 0x70
 80018d6:	4b67      	ldr	r3, [pc, #412]	; (8001a74 <HAL_RCC_OscConfig+0x4cc>)
 80018d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018da:	4a66      	ldr	r2, [pc, #408]	; (8001a74 <HAL_RCC_OscConfig+0x4cc>)
 80018dc:	f023 0304 	bic.w	r3, r3, #4
 80018e0:	6713      	str	r3, [r2, #112]	; 0x70
 80018e2:	e01c      	b.n	800191e <HAL_RCC_OscConfig+0x376>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	2b05      	cmp	r3, #5
 80018ea:	d10c      	bne.n	8001906 <HAL_RCC_OscConfig+0x35e>
 80018ec:	4b61      	ldr	r3, [pc, #388]	; (8001a74 <HAL_RCC_OscConfig+0x4cc>)
 80018ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f0:	4a60      	ldr	r2, [pc, #384]	; (8001a74 <HAL_RCC_OscConfig+0x4cc>)
 80018f2:	f043 0304 	orr.w	r3, r3, #4
 80018f6:	6713      	str	r3, [r2, #112]	; 0x70
 80018f8:	4b5e      	ldr	r3, [pc, #376]	; (8001a74 <HAL_RCC_OscConfig+0x4cc>)
 80018fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018fc:	4a5d      	ldr	r2, [pc, #372]	; (8001a74 <HAL_RCC_OscConfig+0x4cc>)
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	6713      	str	r3, [r2, #112]	; 0x70
 8001904:	e00b      	b.n	800191e <HAL_RCC_OscConfig+0x376>
 8001906:	4b5b      	ldr	r3, [pc, #364]	; (8001a74 <HAL_RCC_OscConfig+0x4cc>)
 8001908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800190a:	4a5a      	ldr	r2, [pc, #360]	; (8001a74 <HAL_RCC_OscConfig+0x4cc>)
 800190c:	f023 0301 	bic.w	r3, r3, #1
 8001910:	6713      	str	r3, [r2, #112]	; 0x70
 8001912:	4b58      	ldr	r3, [pc, #352]	; (8001a74 <HAL_RCC_OscConfig+0x4cc>)
 8001914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001916:	4a57      	ldr	r2, [pc, #348]	; (8001a74 <HAL_RCC_OscConfig+0x4cc>)
 8001918:	f023 0304 	bic.w	r3, r3, #4
 800191c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d015      	beq.n	8001952 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001926:	f7ff fae7 	bl	8000ef8 <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800192c:	e00a      	b.n	8001944 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800192e:	f7ff fae3 	bl	8000ef8 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	f241 3288 	movw	r2, #5000	; 0x1388
 800193c:	4293      	cmp	r3, r2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e0ce      	b.n	8001ae2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001944:	4b4b      	ldr	r3, [pc, #300]	; (8001a74 <HAL_RCC_OscConfig+0x4cc>)
 8001946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0ee      	beq.n	800192e <HAL_RCC_OscConfig+0x386>
 8001950:	e014      	b.n	800197c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001952:	f7ff fad1 	bl	8000ef8 <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001958:	e00a      	b.n	8001970 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800195a:	f7ff facd 	bl	8000ef8 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	f241 3288 	movw	r2, #5000	; 0x1388
 8001968:	4293      	cmp	r3, r2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e0b8      	b.n	8001ae2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001970:	4b40      	ldr	r3, [pc, #256]	; (8001a74 <HAL_RCC_OscConfig+0x4cc>)
 8001972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1ee      	bne.n	800195a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800197c:	7dfb      	ldrb	r3, [r7, #23]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d105      	bne.n	800198e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001982:	4b3c      	ldr	r3, [pc, #240]	; (8001a74 <HAL_RCC_OscConfig+0x4cc>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	4a3b      	ldr	r2, [pc, #236]	; (8001a74 <HAL_RCC_OscConfig+0x4cc>)
 8001988:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800198c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	2b00      	cmp	r3, #0
 8001994:	f000 80a4 	beq.w	8001ae0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001998:	4b36      	ldr	r3, [pc, #216]	; (8001a74 <HAL_RCC_OscConfig+0x4cc>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 030c 	and.w	r3, r3, #12
 80019a0:	2b08      	cmp	r3, #8
 80019a2:	d06b      	beq.n	8001a7c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d149      	bne.n	8001a40 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ac:	4b31      	ldr	r3, [pc, #196]	; (8001a74 <HAL_RCC_OscConfig+0x4cc>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a30      	ldr	r2, [pc, #192]	; (8001a74 <HAL_RCC_OscConfig+0x4cc>)
 80019b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b8:	f7ff fa9e 	bl	8000ef8 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c0:	f7ff fa9a 	bl	8000ef8 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e087      	b.n	8001ae2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019d2:	4b28      	ldr	r3, [pc, #160]	; (8001a74 <HAL_RCC_OscConfig+0x4cc>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f0      	bne.n	80019c0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69da      	ldr	r2, [r3, #28]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a1b      	ldr	r3, [r3, #32]
 80019e6:	431a      	orrs	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ec:	019b      	lsls	r3, r3, #6
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f4:	085b      	lsrs	r3, r3, #1
 80019f6:	3b01      	subs	r3, #1
 80019f8:	041b      	lsls	r3, r3, #16
 80019fa:	431a      	orrs	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a00:	061b      	lsls	r3, r3, #24
 8001a02:	4313      	orrs	r3, r2
 8001a04:	4a1b      	ldr	r2, [pc, #108]	; (8001a74 <HAL_RCC_OscConfig+0x4cc>)
 8001a06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001a0a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a0c:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <HAL_RCC_OscConfig+0x4cc>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a18      	ldr	r2, [pc, #96]	; (8001a74 <HAL_RCC_OscConfig+0x4cc>)
 8001a12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a18:	f7ff fa6e 	bl	8000ef8 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a20:	f7ff fa6a 	bl	8000ef8 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e057      	b.n	8001ae2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a32:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <HAL_RCC_OscConfig+0x4cc>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0f0      	beq.n	8001a20 <HAL_RCC_OscConfig+0x478>
 8001a3e:	e04f      	b.n	8001ae0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <HAL_RCC_OscConfig+0x4cc>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a0b      	ldr	r2, [pc, #44]	; (8001a74 <HAL_RCC_OscConfig+0x4cc>)
 8001a46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4c:	f7ff fa54 	bl	8000ef8 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a54:	f7ff fa50 	bl	8000ef8 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e03d      	b.n	8001ae2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a66:	4b03      	ldr	r3, [pc, #12]	; (8001a74 <HAL_RCC_OscConfig+0x4cc>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_OscConfig+0x4ac>
 8001a72:	e035      	b.n	8001ae0 <HAL_RCC_OscConfig+0x538>
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <HAL_RCC_OscConfig+0x544>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d028      	beq.n	8001adc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d121      	bne.n	8001adc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d11a      	bne.n	8001adc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001aac:	4013      	ands	r3, r2
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ab2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d111      	bne.n	8001adc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac2:	085b      	lsrs	r3, r3, #1
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d107      	bne.n	8001adc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d001      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e000      	b.n	8001ae2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800

08001af0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e0d0      	b.n	8001caa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b08:	4b6a      	ldr	r3, [pc, #424]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 030f 	and.w	r3, r3, #15
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d910      	bls.n	8001b38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b16:	4b67      	ldr	r3, [pc, #412]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f023 020f 	bic.w	r2, r3, #15
 8001b1e:	4965      	ldr	r1, [pc, #404]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b26:	4b63      	ldr	r3, [pc, #396]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d001      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e0b8      	b.n	8001caa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d020      	beq.n	8001b86 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d005      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b50:	4b59      	ldr	r3, [pc, #356]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	4a58      	ldr	r2, [pc, #352]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0308 	and.w	r3, r3, #8
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d005      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b68:	4b53      	ldr	r3, [pc, #332]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	4a52      	ldr	r2, [pc, #328]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b72:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b74:	4b50      	ldr	r3, [pc, #320]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	494d      	ldr	r1, [pc, #308]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d040      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d107      	bne.n	8001baa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9a:	4b47      	ldr	r3, [pc, #284]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d115      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e07f      	b.n	8001caa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d107      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bb2:	4b41      	ldr	r3, [pc, #260]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d109      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e073      	b.n	8001caa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc2:	4b3d      	ldr	r3, [pc, #244]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e06b      	b.n	8001caa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bd2:	4b39      	ldr	r3, [pc, #228]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f023 0203 	bic.w	r2, r3, #3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	4936      	ldr	r1, [pc, #216]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001be4:	f7ff f988 	bl	8000ef8 <HAL_GetTick>
 8001be8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bea:	e00a      	b.n	8001c02 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bec:	f7ff f984 	bl	8000ef8 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e053      	b.n	8001caa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c02:	4b2d      	ldr	r3, [pc, #180]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 020c 	and.w	r2, r3, #12
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d1eb      	bne.n	8001bec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c14:	4b27      	ldr	r3, [pc, #156]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 030f 	and.w	r3, r3, #15
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d210      	bcs.n	8001c44 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c22:	4b24      	ldr	r3, [pc, #144]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f023 020f 	bic.w	r2, r3, #15
 8001c2a:	4922      	ldr	r1, [pc, #136]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c32:	4b20      	ldr	r3, [pc, #128]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d001      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e032      	b.n	8001caa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d008      	beq.n	8001c62 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c50:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	4916      	ldr	r1, [pc, #88]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d009      	beq.n	8001c82 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c6e:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	490e      	ldr	r1, [pc, #56]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c82:	f000 f821 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 8001c86:	4602      	mov	r2, r0
 8001c88:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	091b      	lsrs	r3, r3, #4
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	490a      	ldr	r1, [pc, #40]	; (8001cbc <HAL_RCC_ClockConfig+0x1cc>)
 8001c94:	5ccb      	ldrb	r3, [r1, r3]
 8001c96:	fa22 f303 	lsr.w	r3, r2, r3
 8001c9a:	4a09      	ldr	r2, [pc, #36]	; (8001cc0 <HAL_RCC_ClockConfig+0x1d0>)
 8001c9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c9e:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <HAL_RCC_ClockConfig+0x1d4>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff f8e4 	bl	8000e70 <HAL_InitTick>

  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40023c00 	.word	0x40023c00
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	0800316c 	.word	0x0800316c
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	20000004 	.word	0x20000004

08001cc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cc8:	b5b0      	push	{r4, r5, r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001cce:	2100      	movs	r1, #0
 8001cd0:	6079      	str	r1, [r7, #4]
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	60f9      	str	r1, [r7, #12]
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001cda:	2100      	movs	r1, #0
 8001cdc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cde:	4952      	ldr	r1, [pc, #328]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ce0:	6889      	ldr	r1, [r1, #8]
 8001ce2:	f001 010c 	and.w	r1, r1, #12
 8001ce6:	2908      	cmp	r1, #8
 8001ce8:	d00d      	beq.n	8001d06 <HAL_RCC_GetSysClockFreq+0x3e>
 8001cea:	2908      	cmp	r1, #8
 8001cec:	f200 8094 	bhi.w	8001e18 <HAL_RCC_GetSysClockFreq+0x150>
 8001cf0:	2900      	cmp	r1, #0
 8001cf2:	d002      	beq.n	8001cfa <HAL_RCC_GetSysClockFreq+0x32>
 8001cf4:	2904      	cmp	r1, #4
 8001cf6:	d003      	beq.n	8001d00 <HAL_RCC_GetSysClockFreq+0x38>
 8001cf8:	e08e      	b.n	8001e18 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cfa:	4b4c      	ldr	r3, [pc, #304]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x164>)
 8001cfc:	60bb      	str	r3, [r7, #8]
      break;
 8001cfe:	e08e      	b.n	8001e1e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d00:	4b4b      	ldr	r3, [pc, #300]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x168>)
 8001d02:	60bb      	str	r3, [r7, #8]
      break;
 8001d04:	e08b      	b.n	8001e1e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d06:	4948      	ldr	r1, [pc, #288]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d08:	6849      	ldr	r1, [r1, #4]
 8001d0a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001d0e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001d10:	4945      	ldr	r1, [pc, #276]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d12:	6849      	ldr	r1, [r1, #4]
 8001d14:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001d18:	2900      	cmp	r1, #0
 8001d1a:	d024      	beq.n	8001d66 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d1c:	4942      	ldr	r1, [pc, #264]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d1e:	6849      	ldr	r1, [r1, #4]
 8001d20:	0989      	lsrs	r1, r1, #6
 8001d22:	4608      	mov	r0, r1
 8001d24:	f04f 0100 	mov.w	r1, #0
 8001d28:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001d2c:	f04f 0500 	mov.w	r5, #0
 8001d30:	ea00 0204 	and.w	r2, r0, r4
 8001d34:	ea01 0305 	and.w	r3, r1, r5
 8001d38:	493d      	ldr	r1, [pc, #244]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x168>)
 8001d3a:	fb01 f003 	mul.w	r0, r1, r3
 8001d3e:	2100      	movs	r1, #0
 8001d40:	fb01 f102 	mul.w	r1, r1, r2
 8001d44:	1844      	adds	r4, r0, r1
 8001d46:	493a      	ldr	r1, [pc, #232]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x168>)
 8001d48:	fba2 0101 	umull	r0, r1, r2, r1
 8001d4c:	1863      	adds	r3, r4, r1
 8001d4e:	4619      	mov	r1, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	461a      	mov	r2, r3
 8001d54:	f04f 0300 	mov.w	r3, #0
 8001d58:	f7fe fa56 	bl	8000208 <__aeabi_uldivmod>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4613      	mov	r3, r2
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	e04a      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d66:	4b30      	ldr	r3, [pc, #192]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	099b      	lsrs	r3, r3, #6
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	f04f 0300 	mov.w	r3, #0
 8001d72:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d76:	f04f 0100 	mov.w	r1, #0
 8001d7a:	ea02 0400 	and.w	r4, r2, r0
 8001d7e:	ea03 0501 	and.w	r5, r3, r1
 8001d82:	4620      	mov	r0, r4
 8001d84:	4629      	mov	r1, r5
 8001d86:	f04f 0200 	mov.w	r2, #0
 8001d8a:	f04f 0300 	mov.w	r3, #0
 8001d8e:	014b      	lsls	r3, r1, #5
 8001d90:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d94:	0142      	lsls	r2, r0, #5
 8001d96:	4610      	mov	r0, r2
 8001d98:	4619      	mov	r1, r3
 8001d9a:	1b00      	subs	r0, r0, r4
 8001d9c:	eb61 0105 	sbc.w	r1, r1, r5
 8001da0:	f04f 0200 	mov.w	r2, #0
 8001da4:	f04f 0300 	mov.w	r3, #0
 8001da8:	018b      	lsls	r3, r1, #6
 8001daa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001dae:	0182      	lsls	r2, r0, #6
 8001db0:	1a12      	subs	r2, r2, r0
 8001db2:	eb63 0301 	sbc.w	r3, r3, r1
 8001db6:	f04f 0000 	mov.w	r0, #0
 8001dba:	f04f 0100 	mov.w	r1, #0
 8001dbe:	00d9      	lsls	r1, r3, #3
 8001dc0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001dc4:	00d0      	lsls	r0, r2, #3
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	1912      	adds	r2, r2, r4
 8001dcc:	eb45 0303 	adc.w	r3, r5, r3
 8001dd0:	f04f 0000 	mov.w	r0, #0
 8001dd4:	f04f 0100 	mov.w	r1, #0
 8001dd8:	0299      	lsls	r1, r3, #10
 8001dda:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001dde:	0290      	lsls	r0, r2, #10
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4610      	mov	r0, r2
 8001de6:	4619      	mov	r1, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	461a      	mov	r2, r3
 8001dec:	f04f 0300 	mov.w	r3, #0
 8001df0:	f7fe fa0a 	bl	8000208 <__aeabi_uldivmod>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4613      	mov	r3, r2
 8001dfa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001dfc:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x160>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	0c1b      	lsrs	r3, r3, #16
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	3301      	adds	r3, #1
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e14:	60bb      	str	r3, [r7, #8]
      break;
 8001e16:	e002      	b.n	8001e1e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e18:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x164>)
 8001e1a:	60bb      	str	r3, [r7, #8]
      break;
 8001e1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e1e:	68bb      	ldr	r3, [r7, #8]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bdb0      	pop	{r4, r5, r7, pc}
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	00f42400 	.word	0x00f42400
 8001e30:	017d7840 	.word	0x017d7840

08001e34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e049      	b.n	8001eda <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d106      	bne.n	8001e60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7fe ff66 	bl	8000d2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2202      	movs	r2, #2
 8001e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3304      	adds	r3, #4
 8001e70:	4619      	mov	r1, r3
 8001e72:	4610      	mov	r0, r2
 8001e74:	f000 fc5a 	bl	800272c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e049      	b.n	8001f88 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d106      	bne.n	8001f0e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 f841 	bl	8001f90 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2202      	movs	r2, #2
 8001f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4610      	mov	r0, r2
 8001f22:	f000 fc03 	bl	800272c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2201      	movs	r2, #1
 8001f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d109      	bne.n	8001fc8 <HAL_TIM_OC_Start_IT+0x24>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	bf14      	ite	ne
 8001fc0:	2301      	movne	r3, #1
 8001fc2:	2300      	moveq	r3, #0
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	e03c      	b.n	8002042 <HAL_TIM_OC_Start_IT+0x9e>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	d109      	bne.n	8001fe2 <HAL_TIM_OC_Start_IT+0x3e>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	bf14      	ite	ne
 8001fda:	2301      	movne	r3, #1
 8001fdc:	2300      	moveq	r3, #0
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	e02f      	b.n	8002042 <HAL_TIM_OC_Start_IT+0x9e>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	2b08      	cmp	r3, #8
 8001fe6:	d109      	bne.n	8001ffc <HAL_TIM_OC_Start_IT+0x58>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	bf14      	ite	ne
 8001ff4:	2301      	movne	r3, #1
 8001ff6:	2300      	moveq	r3, #0
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	e022      	b.n	8002042 <HAL_TIM_OC_Start_IT+0x9e>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	2b0c      	cmp	r3, #12
 8002000:	d109      	bne.n	8002016 <HAL_TIM_OC_Start_IT+0x72>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b01      	cmp	r3, #1
 800200c:	bf14      	ite	ne
 800200e:	2301      	movne	r3, #1
 8002010:	2300      	moveq	r3, #0
 8002012:	b2db      	uxtb	r3, r3
 8002014:	e015      	b.n	8002042 <HAL_TIM_OC_Start_IT+0x9e>
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	2b10      	cmp	r3, #16
 800201a:	d109      	bne.n	8002030 <HAL_TIM_OC_Start_IT+0x8c>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b01      	cmp	r3, #1
 8002026:	bf14      	ite	ne
 8002028:	2301      	movne	r3, #1
 800202a:	2300      	moveq	r3, #0
 800202c:	b2db      	uxtb	r3, r3
 800202e:	e008      	b.n	8002042 <HAL_TIM_OC_Start_IT+0x9e>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b01      	cmp	r3, #1
 800203a:	bf14      	ite	ne
 800203c:	2301      	movne	r3, #1
 800203e:	2300      	moveq	r3, #0
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <HAL_TIM_OC_Start_IT+0xa6>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e0d8      	b.n	80021fc <HAL_TIM_OC_Start_IT+0x258>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d104      	bne.n	800205a <HAL_TIM_OC_Start_IT+0xb6>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2202      	movs	r2, #2
 8002054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002058:	e023      	b.n	80020a2 <HAL_TIM_OC_Start_IT+0xfe>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	2b04      	cmp	r3, #4
 800205e:	d104      	bne.n	800206a <HAL_TIM_OC_Start_IT+0xc6>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2202      	movs	r2, #2
 8002064:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002068:	e01b      	b.n	80020a2 <HAL_TIM_OC_Start_IT+0xfe>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	2b08      	cmp	r3, #8
 800206e:	d104      	bne.n	800207a <HAL_TIM_OC_Start_IT+0xd6>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2202      	movs	r2, #2
 8002074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002078:	e013      	b.n	80020a2 <HAL_TIM_OC_Start_IT+0xfe>
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	2b0c      	cmp	r3, #12
 800207e:	d104      	bne.n	800208a <HAL_TIM_OC_Start_IT+0xe6>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2202      	movs	r2, #2
 8002084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002088:	e00b      	b.n	80020a2 <HAL_TIM_OC_Start_IT+0xfe>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	2b10      	cmp	r3, #16
 800208e:	d104      	bne.n	800209a <HAL_TIM_OC_Start_IT+0xf6>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2202      	movs	r2, #2
 8002094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002098:	e003      	b.n	80020a2 <HAL_TIM_OC_Start_IT+0xfe>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2202      	movs	r2, #2
 800209e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	2b0c      	cmp	r3, #12
 80020a6:	d841      	bhi.n	800212c <HAL_TIM_OC_Start_IT+0x188>
 80020a8:	a201      	add	r2, pc, #4	; (adr r2, 80020b0 <HAL_TIM_OC_Start_IT+0x10c>)
 80020aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ae:	bf00      	nop
 80020b0:	080020e5 	.word	0x080020e5
 80020b4:	0800212d 	.word	0x0800212d
 80020b8:	0800212d 	.word	0x0800212d
 80020bc:	0800212d 	.word	0x0800212d
 80020c0:	080020f7 	.word	0x080020f7
 80020c4:	0800212d 	.word	0x0800212d
 80020c8:	0800212d 	.word	0x0800212d
 80020cc:	0800212d 	.word	0x0800212d
 80020d0:	08002109 	.word	0x08002109
 80020d4:	0800212d 	.word	0x0800212d
 80020d8:	0800212d 	.word	0x0800212d
 80020dc:	0800212d 	.word	0x0800212d
 80020e0:	0800211b 	.word	0x0800211b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68da      	ldr	r2, [r3, #12]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0202 	orr.w	r2, r2, #2
 80020f2:	60da      	str	r2, [r3, #12]
      break;
 80020f4:	e01b      	b.n	800212e <HAL_TIM_OC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68da      	ldr	r2, [r3, #12]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f042 0204 	orr.w	r2, r2, #4
 8002104:	60da      	str	r2, [r3, #12]
      break;
 8002106:	e012      	b.n	800212e <HAL_TIM_OC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68da      	ldr	r2, [r3, #12]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f042 0208 	orr.w	r2, r2, #8
 8002116:	60da      	str	r2, [r3, #12]
      break;
 8002118:	e009      	b.n	800212e <HAL_TIM_OC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68da      	ldr	r2, [r3, #12]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f042 0210 	orr.w	r2, r2, #16
 8002128:	60da      	str	r2, [r3, #12]
      break;
 800212a:	e000      	b.n	800212e <HAL_TIM_OC_Start_IT+0x18a>
    }

    default:
      break;
 800212c:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2201      	movs	r2, #1
 8002134:	6839      	ldr	r1, [r7, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f000 fe90 	bl	8002e5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a30      	ldr	r2, [pc, #192]	; (8002204 <HAL_TIM_OC_Start_IT+0x260>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d004      	beq.n	8002150 <HAL_TIM_OC_Start_IT+0x1ac>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a2f      	ldr	r2, [pc, #188]	; (8002208 <HAL_TIM_OC_Start_IT+0x264>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d101      	bne.n	8002154 <HAL_TIM_OC_Start_IT+0x1b0>
 8002150:	2301      	movs	r3, #1
 8002152:	e000      	b.n	8002156 <HAL_TIM_OC_Start_IT+0x1b2>
 8002154:	2300      	movs	r3, #0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d007      	beq.n	800216a <HAL_TIM_OC_Start_IT+0x1c6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002168:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a25      	ldr	r2, [pc, #148]	; (8002204 <HAL_TIM_OC_Start_IT+0x260>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d022      	beq.n	80021ba <HAL_TIM_OC_Start_IT+0x216>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800217c:	d01d      	beq.n	80021ba <HAL_TIM_OC_Start_IT+0x216>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a22      	ldr	r2, [pc, #136]	; (800220c <HAL_TIM_OC_Start_IT+0x268>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d018      	beq.n	80021ba <HAL_TIM_OC_Start_IT+0x216>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a20      	ldr	r2, [pc, #128]	; (8002210 <HAL_TIM_OC_Start_IT+0x26c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d013      	beq.n	80021ba <HAL_TIM_OC_Start_IT+0x216>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a1f      	ldr	r2, [pc, #124]	; (8002214 <HAL_TIM_OC_Start_IT+0x270>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d00e      	beq.n	80021ba <HAL_TIM_OC_Start_IT+0x216>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a19      	ldr	r2, [pc, #100]	; (8002208 <HAL_TIM_OC_Start_IT+0x264>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d009      	beq.n	80021ba <HAL_TIM_OC_Start_IT+0x216>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a1b      	ldr	r2, [pc, #108]	; (8002218 <HAL_TIM_OC_Start_IT+0x274>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d004      	beq.n	80021ba <HAL_TIM_OC_Start_IT+0x216>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a19      	ldr	r2, [pc, #100]	; (800221c <HAL_TIM_OC_Start_IT+0x278>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d115      	bne.n	80021e6 <HAL_TIM_OC_Start_IT+0x242>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	4b17      	ldr	r3, [pc, #92]	; (8002220 <HAL_TIM_OC_Start_IT+0x27c>)
 80021c2:	4013      	ands	r3, r2
 80021c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2b06      	cmp	r3, #6
 80021ca:	d015      	beq.n	80021f8 <HAL_TIM_OC_Start_IT+0x254>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021d2:	d011      	beq.n	80021f8 <HAL_TIM_OC_Start_IT+0x254>
    {
      __HAL_TIM_ENABLE(htim);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f042 0201 	orr.w	r2, r2, #1
 80021e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021e4:	e008      	b.n	80021f8 <HAL_TIM_OC_Start_IT+0x254>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f042 0201 	orr.w	r2, r2, #1
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	e000      	b.n	80021fa <HAL_TIM_OC_Start_IT+0x256>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40010000 	.word	0x40010000
 8002208:	40010400 	.word	0x40010400
 800220c:	40000400 	.word	0x40000400
 8002210:	40000800 	.word	0x40000800
 8002214:	40000c00 	.word	0x40000c00
 8002218:	40014000 	.word	0x40014000
 800221c:	40001800 	.word	0x40001800
 8002220:	00010007 	.word	0x00010007

08002224 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b02      	cmp	r3, #2
 8002238:	d122      	bne.n	8002280 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b02      	cmp	r3, #2
 8002246:	d11b      	bne.n	8002280 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f06f 0202 	mvn.w	r2, #2
 8002250:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 fa42 	bl	80026f0 <HAL_TIM_IC_CaptureCallback>
 800226c:	e005      	b.n	800227a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7fe fa5c 	bl	800072c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 fa45 	bl	8002704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	f003 0304 	and.w	r3, r3, #4
 800228a:	2b04      	cmp	r3, #4
 800228c:	d122      	bne.n	80022d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b04      	cmp	r3, #4
 800229a:	d11b      	bne.n	80022d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f06f 0204 	mvn.w	r2, #4
 80022a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2202      	movs	r2, #2
 80022aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 fa18 	bl	80026f0 <HAL_TIM_IC_CaptureCallback>
 80022c0:	e005      	b.n	80022ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7fe fa32 	bl	800072c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 fa1b 	bl	8002704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	f003 0308 	and.w	r3, r3, #8
 80022de:	2b08      	cmp	r3, #8
 80022e0:	d122      	bne.n	8002328 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	2b08      	cmp	r3, #8
 80022ee:	d11b      	bne.n	8002328 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f06f 0208 	mvn.w	r2, #8
 80022f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2204      	movs	r2, #4
 80022fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	f003 0303 	and.w	r3, r3, #3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f9ee 	bl	80026f0 <HAL_TIM_IC_CaptureCallback>
 8002314:	e005      	b.n	8002322 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7fe fa08 	bl	800072c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 f9f1 	bl	8002704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	f003 0310 	and.w	r3, r3, #16
 8002332:	2b10      	cmp	r3, #16
 8002334:	d122      	bne.n	800237c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	f003 0310 	and.w	r3, r3, #16
 8002340:	2b10      	cmp	r3, #16
 8002342:	d11b      	bne.n	800237c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f06f 0210 	mvn.w	r2, #16
 800234c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2208      	movs	r2, #8
 8002352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f9c4 	bl	80026f0 <HAL_TIM_IC_CaptureCallback>
 8002368:	e005      	b.n	8002376 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7fe f9de 	bl	800072c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f9c7 	bl	8002704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b01      	cmp	r3, #1
 8002388:	d10e      	bne.n	80023a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b01      	cmp	r3, #1
 8002396:	d107      	bne.n	80023a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f06f 0201 	mvn.w	r2, #1
 80023a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 f99a 	bl	80026dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b2:	2b80      	cmp	r3, #128	; 0x80
 80023b4:	d10e      	bne.n	80023d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c0:	2b80      	cmp	r3, #128	; 0x80
 80023c2:	d107      	bne.n	80023d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 fe80 	bl	80030d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023e2:	d10e      	bne.n	8002402 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ee:	2b80      	cmp	r3, #128	; 0x80
 80023f0:	d107      	bne.n	8002402 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80023fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 fe73 	bl	80030e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800240c:	2b40      	cmp	r3, #64	; 0x40
 800240e:	d10e      	bne.n	800242e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800241a:	2b40      	cmp	r3, #64	; 0x40
 800241c:	d107      	bne.n	800242e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 f975 	bl	8002718 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	f003 0320 	and.w	r3, r3, #32
 8002438:	2b20      	cmp	r3, #32
 800243a:	d10e      	bne.n	800245a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	f003 0320 	and.w	r3, r3, #32
 8002446:	2b20      	cmp	r3, #32
 8002448:	d107      	bne.n	800245a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f06f 0220 	mvn.w	r2, #32
 8002452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 fe33 	bl	80030c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800245a:	bf00      	nop
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
	...

08002464 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002476:	2b01      	cmp	r3, #1
 8002478:	d101      	bne.n	800247e <HAL_TIM_OC_ConfigChannel+0x1a>
 800247a:	2302      	movs	r3, #2
 800247c:	e064      	b.n	8002548 <HAL_TIM_OC_ConfigChannel+0xe4>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b14      	cmp	r3, #20
 800248a:	d857      	bhi.n	800253c <HAL_TIM_OC_ConfigChannel+0xd8>
 800248c:	a201      	add	r2, pc, #4	; (adr r2, 8002494 <HAL_TIM_OC_ConfigChannel+0x30>)
 800248e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002492:	bf00      	nop
 8002494:	080024e9 	.word	0x080024e9
 8002498:	0800253d 	.word	0x0800253d
 800249c:	0800253d 	.word	0x0800253d
 80024a0:	0800253d 	.word	0x0800253d
 80024a4:	080024f7 	.word	0x080024f7
 80024a8:	0800253d 	.word	0x0800253d
 80024ac:	0800253d 	.word	0x0800253d
 80024b0:	0800253d 	.word	0x0800253d
 80024b4:	08002505 	.word	0x08002505
 80024b8:	0800253d 	.word	0x0800253d
 80024bc:	0800253d 	.word	0x0800253d
 80024c0:	0800253d 	.word	0x0800253d
 80024c4:	08002513 	.word	0x08002513
 80024c8:	0800253d 	.word	0x0800253d
 80024cc:	0800253d 	.word	0x0800253d
 80024d0:	0800253d 	.word	0x0800253d
 80024d4:	08002521 	.word	0x08002521
 80024d8:	0800253d 	.word	0x0800253d
 80024dc:	0800253d 	.word	0x0800253d
 80024e0:	0800253d 	.word	0x0800253d
 80024e4:	0800252f 	.word	0x0800252f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68b9      	ldr	r1, [r7, #8]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 f9bc 	bl	800286c <TIM_OC1_SetConfig>
      break;
 80024f4:	e023      	b.n	800253e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68b9      	ldr	r1, [r7, #8]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f000 fa27 	bl	8002950 <TIM_OC2_SetConfig>
      break;
 8002502:	e01c      	b.n	800253e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68b9      	ldr	r1, [r7, #8]
 800250a:	4618      	mov	r0, r3
 800250c:	f000 fa98 	bl	8002a40 <TIM_OC3_SetConfig>
      break;
 8002510:	e015      	b.n	800253e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68b9      	ldr	r1, [r7, #8]
 8002518:	4618      	mov	r0, r3
 800251a:	f000 fb07 	bl	8002b2c <TIM_OC4_SetConfig>
      break;
 800251e:	e00e      	b.n	800253e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68b9      	ldr	r1, [r7, #8]
 8002526:	4618      	mov	r0, r3
 8002528:	f000 fb58 	bl	8002bdc <TIM_OC5_SetConfig>
      break;
 800252c:	e007      	b.n	800253e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68b9      	ldr	r1, [r7, #8]
 8002534:	4618      	mov	r0, r3
 8002536:	f000 fba3 	bl	8002c80 <TIM_OC6_SetConfig>
      break;
 800253a:	e000      	b.n	800253e <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 800253c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002560:	2b01      	cmp	r3, #1
 8002562:	d101      	bne.n	8002568 <HAL_TIM_ConfigClockSource+0x18>
 8002564:	2302      	movs	r3, #2
 8002566:	e0b3      	b.n	80026d0 <HAL_TIM_ConfigClockSource+0x180>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2202      	movs	r2, #2
 8002574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	4b55      	ldr	r3, [pc, #340]	; (80026d8 <HAL_TIM_ConfigClockSource+0x188>)
 8002584:	4013      	ands	r3, r2
 8002586:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800258e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025a0:	d03e      	beq.n	8002620 <HAL_TIM_ConfigClockSource+0xd0>
 80025a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025a6:	f200 8087 	bhi.w	80026b8 <HAL_TIM_ConfigClockSource+0x168>
 80025aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ae:	f000 8085 	beq.w	80026bc <HAL_TIM_ConfigClockSource+0x16c>
 80025b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025b6:	d87f      	bhi.n	80026b8 <HAL_TIM_ConfigClockSource+0x168>
 80025b8:	2b70      	cmp	r3, #112	; 0x70
 80025ba:	d01a      	beq.n	80025f2 <HAL_TIM_ConfigClockSource+0xa2>
 80025bc:	2b70      	cmp	r3, #112	; 0x70
 80025be:	d87b      	bhi.n	80026b8 <HAL_TIM_ConfigClockSource+0x168>
 80025c0:	2b60      	cmp	r3, #96	; 0x60
 80025c2:	d050      	beq.n	8002666 <HAL_TIM_ConfigClockSource+0x116>
 80025c4:	2b60      	cmp	r3, #96	; 0x60
 80025c6:	d877      	bhi.n	80026b8 <HAL_TIM_ConfigClockSource+0x168>
 80025c8:	2b50      	cmp	r3, #80	; 0x50
 80025ca:	d03c      	beq.n	8002646 <HAL_TIM_ConfigClockSource+0xf6>
 80025cc:	2b50      	cmp	r3, #80	; 0x50
 80025ce:	d873      	bhi.n	80026b8 <HAL_TIM_ConfigClockSource+0x168>
 80025d0:	2b40      	cmp	r3, #64	; 0x40
 80025d2:	d058      	beq.n	8002686 <HAL_TIM_ConfigClockSource+0x136>
 80025d4:	2b40      	cmp	r3, #64	; 0x40
 80025d6:	d86f      	bhi.n	80026b8 <HAL_TIM_ConfigClockSource+0x168>
 80025d8:	2b30      	cmp	r3, #48	; 0x30
 80025da:	d064      	beq.n	80026a6 <HAL_TIM_ConfigClockSource+0x156>
 80025dc:	2b30      	cmp	r3, #48	; 0x30
 80025de:	d86b      	bhi.n	80026b8 <HAL_TIM_ConfigClockSource+0x168>
 80025e0:	2b20      	cmp	r3, #32
 80025e2:	d060      	beq.n	80026a6 <HAL_TIM_ConfigClockSource+0x156>
 80025e4:	2b20      	cmp	r3, #32
 80025e6:	d867      	bhi.n	80026b8 <HAL_TIM_ConfigClockSource+0x168>
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d05c      	beq.n	80026a6 <HAL_TIM_ConfigClockSource+0x156>
 80025ec:	2b10      	cmp	r3, #16
 80025ee:	d05a      	beq.n	80026a6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80025f0:	e062      	b.n	80026b8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	6899      	ldr	r1, [r3, #8]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	f000 fc0b 	bl	8002e1c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002614:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	609a      	str	r2, [r3, #8]
      break;
 800261e:	e04e      	b.n	80026be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6818      	ldr	r0, [r3, #0]
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	6899      	ldr	r1, [r3, #8]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f000 fbf4 	bl	8002e1c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002642:	609a      	str	r2, [r3, #8]
      break;
 8002644:	e03b      	b.n	80026be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6818      	ldr	r0, [r3, #0]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	6859      	ldr	r1, [r3, #4]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	461a      	mov	r2, r3
 8002654:	f000 fb68 	bl	8002d28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2150      	movs	r1, #80	; 0x50
 800265e:	4618      	mov	r0, r3
 8002660:	f000 fbc1 	bl	8002de6 <TIM_ITRx_SetConfig>
      break;
 8002664:	e02b      	b.n	80026be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6818      	ldr	r0, [r3, #0]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	6859      	ldr	r1, [r3, #4]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	461a      	mov	r2, r3
 8002674:	f000 fb87 	bl	8002d86 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2160      	movs	r1, #96	; 0x60
 800267e:	4618      	mov	r0, r3
 8002680:	f000 fbb1 	bl	8002de6 <TIM_ITRx_SetConfig>
      break;
 8002684:	e01b      	b.n	80026be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6818      	ldr	r0, [r3, #0]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	6859      	ldr	r1, [r3, #4]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	461a      	mov	r2, r3
 8002694:	f000 fb48 	bl	8002d28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2140      	movs	r1, #64	; 0x40
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 fba1 	bl	8002de6 <TIM_ITRx_SetConfig>
      break;
 80026a4:	e00b      	b.n	80026be <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4619      	mov	r1, r3
 80026b0:	4610      	mov	r0, r2
 80026b2:	f000 fb98 	bl	8002de6 <TIM_ITRx_SetConfig>
        break;
 80026b6:	e002      	b.n	80026be <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80026b8:	bf00      	nop
 80026ba:	e000      	b.n	80026be <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80026bc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	fffeff88 	.word	0xfffeff88

080026dc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a40      	ldr	r2, [pc, #256]	; (8002840 <TIM_Base_SetConfig+0x114>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d013      	beq.n	800276c <TIM_Base_SetConfig+0x40>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800274a:	d00f      	beq.n	800276c <TIM_Base_SetConfig+0x40>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a3d      	ldr	r2, [pc, #244]	; (8002844 <TIM_Base_SetConfig+0x118>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d00b      	beq.n	800276c <TIM_Base_SetConfig+0x40>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a3c      	ldr	r2, [pc, #240]	; (8002848 <TIM_Base_SetConfig+0x11c>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d007      	beq.n	800276c <TIM_Base_SetConfig+0x40>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a3b      	ldr	r2, [pc, #236]	; (800284c <TIM_Base_SetConfig+0x120>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d003      	beq.n	800276c <TIM_Base_SetConfig+0x40>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a3a      	ldr	r2, [pc, #232]	; (8002850 <TIM_Base_SetConfig+0x124>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d108      	bne.n	800277e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002772:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	4313      	orrs	r3, r2
 800277c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a2f      	ldr	r2, [pc, #188]	; (8002840 <TIM_Base_SetConfig+0x114>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d02b      	beq.n	80027de <TIM_Base_SetConfig+0xb2>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800278c:	d027      	beq.n	80027de <TIM_Base_SetConfig+0xb2>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a2c      	ldr	r2, [pc, #176]	; (8002844 <TIM_Base_SetConfig+0x118>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d023      	beq.n	80027de <TIM_Base_SetConfig+0xb2>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a2b      	ldr	r2, [pc, #172]	; (8002848 <TIM_Base_SetConfig+0x11c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d01f      	beq.n	80027de <TIM_Base_SetConfig+0xb2>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a2a      	ldr	r2, [pc, #168]	; (800284c <TIM_Base_SetConfig+0x120>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d01b      	beq.n	80027de <TIM_Base_SetConfig+0xb2>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a29      	ldr	r2, [pc, #164]	; (8002850 <TIM_Base_SetConfig+0x124>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d017      	beq.n	80027de <TIM_Base_SetConfig+0xb2>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a28      	ldr	r2, [pc, #160]	; (8002854 <TIM_Base_SetConfig+0x128>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d013      	beq.n	80027de <TIM_Base_SetConfig+0xb2>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a27      	ldr	r2, [pc, #156]	; (8002858 <TIM_Base_SetConfig+0x12c>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d00f      	beq.n	80027de <TIM_Base_SetConfig+0xb2>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a26      	ldr	r2, [pc, #152]	; (800285c <TIM_Base_SetConfig+0x130>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d00b      	beq.n	80027de <TIM_Base_SetConfig+0xb2>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a25      	ldr	r2, [pc, #148]	; (8002860 <TIM_Base_SetConfig+0x134>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d007      	beq.n	80027de <TIM_Base_SetConfig+0xb2>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a24      	ldr	r2, [pc, #144]	; (8002864 <TIM_Base_SetConfig+0x138>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d003      	beq.n	80027de <TIM_Base_SetConfig+0xb2>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a23      	ldr	r2, [pc, #140]	; (8002868 <TIM_Base_SetConfig+0x13c>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d108      	bne.n	80027f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a0a      	ldr	r2, [pc, #40]	; (8002840 <TIM_Base_SetConfig+0x114>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d003      	beq.n	8002824 <TIM_Base_SetConfig+0xf8>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a0c      	ldr	r2, [pc, #48]	; (8002850 <TIM_Base_SetConfig+0x124>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d103      	bne.n	800282c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	691a      	ldr	r2, [r3, #16]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	615a      	str	r2, [r3, #20]
}
 8002832:	bf00      	nop
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	40010000 	.word	0x40010000
 8002844:	40000400 	.word	0x40000400
 8002848:	40000800 	.word	0x40000800
 800284c:	40000c00 	.word	0x40000c00
 8002850:	40010400 	.word	0x40010400
 8002854:	40014000 	.word	0x40014000
 8002858:	40014400 	.word	0x40014400
 800285c:	40014800 	.word	0x40014800
 8002860:	40001800 	.word	0x40001800
 8002864:	40001c00 	.word	0x40001c00
 8002868:	40002000 	.word	0x40002000

0800286c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800286c:	b480      	push	{r7}
 800286e:	b087      	sub	sp, #28
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	f023 0201 	bic.w	r2, r3, #1
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	4b2b      	ldr	r3, [pc, #172]	; (8002944 <TIM_OC1_SetConfig+0xd8>)
 8002898:	4013      	ands	r3, r2
 800289a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f023 0303 	bic.w	r3, r3, #3
 80028a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f023 0302 	bic.w	r3, r3, #2
 80028b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	4313      	orrs	r3, r2
 80028be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a21      	ldr	r2, [pc, #132]	; (8002948 <TIM_OC1_SetConfig+0xdc>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d003      	beq.n	80028d0 <TIM_OC1_SetConfig+0x64>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a20      	ldr	r2, [pc, #128]	; (800294c <TIM_OC1_SetConfig+0xe0>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d10c      	bne.n	80028ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f023 0308 	bic.w	r3, r3, #8
 80028d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	4313      	orrs	r3, r2
 80028e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f023 0304 	bic.w	r3, r3, #4
 80028e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a16      	ldr	r2, [pc, #88]	; (8002948 <TIM_OC1_SetConfig+0xdc>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d003      	beq.n	80028fa <TIM_OC1_SetConfig+0x8e>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a15      	ldr	r2, [pc, #84]	; (800294c <TIM_OC1_SetConfig+0xe0>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d111      	bne.n	800291e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002900:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002908:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	4313      	orrs	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	4313      	orrs	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	621a      	str	r2, [r3, #32]
}
 8002938:	bf00      	nop
 800293a:	371c      	adds	r7, #28
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	fffeff8f 	.word	0xfffeff8f
 8002948:	40010000 	.word	0x40010000
 800294c:	40010400 	.word	0x40010400

08002950 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002950:	b480      	push	{r7}
 8002952:	b087      	sub	sp, #28
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	f023 0210 	bic.w	r2, r3, #16
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	4b2e      	ldr	r3, [pc, #184]	; (8002a34 <TIM_OC2_SetConfig+0xe4>)
 800297c:	4013      	ands	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002986:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	021b      	lsls	r3, r3, #8
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	4313      	orrs	r3, r2
 8002992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	f023 0320 	bic.w	r3, r3, #32
 800299a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	011b      	lsls	r3, r3, #4
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a23      	ldr	r2, [pc, #140]	; (8002a38 <TIM_OC2_SetConfig+0xe8>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d003      	beq.n	80029b8 <TIM_OC2_SetConfig+0x68>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a22      	ldr	r2, [pc, #136]	; (8002a3c <TIM_OC2_SetConfig+0xec>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d10d      	bne.n	80029d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a18      	ldr	r2, [pc, #96]	; (8002a38 <TIM_OC2_SetConfig+0xe8>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d003      	beq.n	80029e4 <TIM_OC2_SetConfig+0x94>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a17      	ldr	r2, [pc, #92]	; (8002a3c <TIM_OC2_SetConfig+0xec>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d113      	bne.n	8002a0c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	621a      	str	r2, [r3, #32]
}
 8002a26:	bf00      	nop
 8002a28:	371c      	adds	r7, #28
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	feff8fff 	.word	0xfeff8fff
 8002a38:	40010000 	.word	0x40010000
 8002a3c:	40010400 	.word	0x40010400

08002a40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b087      	sub	sp, #28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	4b2d      	ldr	r3, [pc, #180]	; (8002b20 <TIM_OC3_SetConfig+0xe0>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f023 0303 	bic.w	r3, r3, #3
 8002a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	021b      	lsls	r3, r3, #8
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a22      	ldr	r2, [pc, #136]	; (8002b24 <TIM_OC3_SetConfig+0xe4>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d003      	beq.n	8002aa6 <TIM_OC3_SetConfig+0x66>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a21      	ldr	r2, [pc, #132]	; (8002b28 <TIM_OC3_SetConfig+0xe8>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d10d      	bne.n	8002ac2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002aac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	021b      	lsls	r3, r3, #8
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ac0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a17      	ldr	r2, [pc, #92]	; (8002b24 <TIM_OC3_SetConfig+0xe4>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d003      	beq.n	8002ad2 <TIM_OC3_SetConfig+0x92>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a16      	ldr	r2, [pc, #88]	; (8002b28 <TIM_OC3_SetConfig+0xe8>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d113      	bne.n	8002afa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ad8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	011b      	lsls	r3, r3, #4
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	011b      	lsls	r3, r3, #4
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	621a      	str	r2, [r3, #32]
}
 8002b14:	bf00      	nop
 8002b16:	371c      	adds	r7, #28
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	fffeff8f 	.word	0xfffeff8f
 8002b24:	40010000 	.word	0x40010000
 8002b28:	40010400 	.word	0x40010400

08002b2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b087      	sub	sp, #28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	4b1e      	ldr	r3, [pc, #120]	; (8002bd0 <TIM_OC4_SetConfig+0xa4>)
 8002b58:	4013      	ands	r3, r2
 8002b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	021b      	lsls	r3, r3, #8
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	031b      	lsls	r3, r3, #12
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a13      	ldr	r2, [pc, #76]	; (8002bd4 <TIM_OC4_SetConfig+0xa8>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d003      	beq.n	8002b94 <TIM_OC4_SetConfig+0x68>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a12      	ldr	r2, [pc, #72]	; (8002bd8 <TIM_OC4_SetConfig+0xac>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d109      	bne.n	8002ba8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	019b      	lsls	r3, r3, #6
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	621a      	str	r2, [r3, #32]
}
 8002bc2:	bf00      	nop
 8002bc4:	371c      	adds	r7, #28
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	feff8fff 	.word	0xfeff8fff
 8002bd4:	40010000 	.word	0x40010000
 8002bd8:	40010400 	.word	0x40010400

08002bdc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b087      	sub	sp, #28
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	4b1b      	ldr	r3, [pc, #108]	; (8002c74 <TIM_OC5_SetConfig+0x98>)
 8002c08:	4013      	ands	r3, r2
 8002c0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002c1c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	041b      	lsls	r3, r3, #16
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a12      	ldr	r2, [pc, #72]	; (8002c78 <TIM_OC5_SetConfig+0x9c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d003      	beq.n	8002c3a <TIM_OC5_SetConfig+0x5e>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a11      	ldr	r2, [pc, #68]	; (8002c7c <TIM_OC5_SetConfig+0xa0>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d109      	bne.n	8002c4e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c40:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	021b      	lsls	r3, r3, #8
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	621a      	str	r2, [r3, #32]
}
 8002c68:	bf00      	nop
 8002c6a:	371c      	adds	r7, #28
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	fffeff8f 	.word	0xfffeff8f
 8002c78:	40010000 	.word	0x40010000
 8002c7c:	40010400 	.word	0x40010400

08002c80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b087      	sub	sp, #28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	4b1c      	ldr	r3, [pc, #112]	; (8002d1c <TIM_OC6_SetConfig+0x9c>)
 8002cac:	4013      	ands	r3, r2
 8002cae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	021b      	lsls	r3, r3, #8
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002cc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	051b      	lsls	r3, r3, #20
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a13      	ldr	r2, [pc, #76]	; (8002d20 <TIM_OC6_SetConfig+0xa0>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d003      	beq.n	8002ce0 <TIM_OC6_SetConfig+0x60>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a12      	ldr	r2, [pc, #72]	; (8002d24 <TIM_OC6_SetConfig+0xa4>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d109      	bne.n	8002cf4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ce6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	029b      	lsls	r3, r3, #10
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	621a      	str	r2, [r3, #32]
}
 8002d0e:	bf00      	nop
 8002d10:	371c      	adds	r7, #28
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	feff8fff 	.word	0xfeff8fff
 8002d20:	40010000 	.word	0x40010000
 8002d24:	40010400 	.word	0x40010400

08002d28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b087      	sub	sp, #28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	f023 0201 	bic.w	r2, r3, #1
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	011b      	lsls	r3, r3, #4
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	f023 030a 	bic.w	r3, r3, #10
 8002d64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	621a      	str	r2, [r3, #32]
}
 8002d7a:	bf00      	nop
 8002d7c:	371c      	adds	r7, #28
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b087      	sub	sp, #28
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	60f8      	str	r0, [r7, #12]
 8002d8e:	60b9      	str	r1, [r7, #8]
 8002d90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	f023 0210 	bic.w	r2, r3, #16
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002db0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	031b      	lsls	r3, r3, #12
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002dc2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	011b      	lsls	r3, r3, #4
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	621a      	str	r2, [r3, #32]
}
 8002dda:	bf00      	nop
 8002ddc:	371c      	adds	r7, #28
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b085      	sub	sp, #20
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
 8002dee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	f043 0307 	orr.w	r3, r3, #7
 8002e08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	609a      	str	r2, [r3, #8]
}
 8002e10:	bf00      	nop
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b087      	sub	sp, #28
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
 8002e28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	021a      	lsls	r2, r3, #8
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	609a      	str	r2, [r3, #8]
}
 8002e50:	bf00      	nop
 8002e52:	371c      	adds	r7, #28
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b087      	sub	sp, #28
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	f003 031f 	and.w	r3, r3, #31
 8002e6e:	2201      	movs	r2, #1
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6a1a      	ldr	r2, [r3, #32]
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	401a      	ands	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6a1a      	ldr	r2, [r3, #32]
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	f003 031f 	and.w	r3, r3, #31
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	fa01 f303 	lsl.w	r3, r1, r3
 8002e94:	431a      	orrs	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	621a      	str	r2, [r3, #32]
}
 8002e9a:	bf00      	nop
 8002e9c:	371c      	adds	r7, #28
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
	...

08002ea8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e06d      	b.n	8002f9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2202      	movs	r2, #2
 8002ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a30      	ldr	r2, [pc, #192]	; (8002fa8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d004      	beq.n	8002ef4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a2f      	ldr	r2, [pc, #188]	; (8002fac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d108      	bne.n	8002f06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002efa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a20      	ldr	r2, [pc, #128]	; (8002fa8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d022      	beq.n	8002f70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f32:	d01d      	beq.n	8002f70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a1d      	ldr	r2, [pc, #116]	; (8002fb0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d018      	beq.n	8002f70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a1c      	ldr	r2, [pc, #112]	; (8002fb4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d013      	beq.n	8002f70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a1a      	ldr	r2, [pc, #104]	; (8002fb8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d00e      	beq.n	8002f70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a15      	ldr	r2, [pc, #84]	; (8002fac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d009      	beq.n	8002f70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a16      	ldr	r2, [pc, #88]	; (8002fbc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d004      	beq.n	8002f70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a15      	ldr	r2, [pc, #84]	; (8002fc0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d10c      	bne.n	8002f8a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3714      	adds	r7, #20
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	40010000 	.word	0x40010000
 8002fac:	40010400 	.word	0x40010400
 8002fb0:	40000400 	.word	0x40000400
 8002fb4:	40000800 	.word	0x40000800
 8002fb8:	40000c00 	.word	0x40000c00
 8002fbc:	40014000 	.word	0x40014000
 8002fc0:	40001800 	.word	0x40001800

08002fc4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d101      	bne.n	8002fe0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002fdc:	2302      	movs	r3, #2
 8002fde:	e065      	b.n	80030ac <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	4313      	orrs	r3, r2
 8003002:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	4313      	orrs	r3, r2
 8003010:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4313      	orrs	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	4313      	orrs	r3, r2
 800302c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	4313      	orrs	r3, r2
 800303a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003046:	4313      	orrs	r3, r2
 8003048:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	041b      	lsls	r3, r3, #16
 8003056:	4313      	orrs	r3, r2
 8003058:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a16      	ldr	r2, [pc, #88]	; (80030b8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d004      	beq.n	800306e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a14      	ldr	r2, [pc, #80]	; (80030bc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d115      	bne.n	800309a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	051b      	lsls	r3, r3, #20
 800307a:	4313      	orrs	r3, r2
 800307c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	69db      	ldr	r3, [r3, #28]
 8003088:	4313      	orrs	r3, r2
 800308a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	4313      	orrs	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	40010000 	.word	0x40010000
 80030bc:	40010400 	.word	0x40010400

080030c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <__libc_init_array>:
 80030fc:	b570      	push	{r4, r5, r6, lr}
 80030fe:	4d0d      	ldr	r5, [pc, #52]	; (8003134 <__libc_init_array+0x38>)
 8003100:	4c0d      	ldr	r4, [pc, #52]	; (8003138 <__libc_init_array+0x3c>)
 8003102:	1b64      	subs	r4, r4, r5
 8003104:	10a4      	asrs	r4, r4, #2
 8003106:	2600      	movs	r6, #0
 8003108:	42a6      	cmp	r6, r4
 800310a:	d109      	bne.n	8003120 <__libc_init_array+0x24>
 800310c:	4d0b      	ldr	r5, [pc, #44]	; (800313c <__libc_init_array+0x40>)
 800310e:	4c0c      	ldr	r4, [pc, #48]	; (8003140 <__libc_init_array+0x44>)
 8003110:	f000 f820 	bl	8003154 <_init>
 8003114:	1b64      	subs	r4, r4, r5
 8003116:	10a4      	asrs	r4, r4, #2
 8003118:	2600      	movs	r6, #0
 800311a:	42a6      	cmp	r6, r4
 800311c:	d105      	bne.n	800312a <__libc_init_array+0x2e>
 800311e:	bd70      	pop	{r4, r5, r6, pc}
 8003120:	f855 3b04 	ldr.w	r3, [r5], #4
 8003124:	4798      	blx	r3
 8003126:	3601      	adds	r6, #1
 8003128:	e7ee      	b.n	8003108 <__libc_init_array+0xc>
 800312a:	f855 3b04 	ldr.w	r3, [r5], #4
 800312e:	4798      	blx	r3
 8003130:	3601      	adds	r6, #1
 8003132:	e7f2      	b.n	800311a <__libc_init_array+0x1e>
 8003134:	08003184 	.word	0x08003184
 8003138:	08003184 	.word	0x08003184
 800313c:	08003184 	.word	0x08003184
 8003140:	08003188 	.word	0x08003188

08003144 <memset>:
 8003144:	4402      	add	r2, r0
 8003146:	4603      	mov	r3, r0
 8003148:	4293      	cmp	r3, r2
 800314a:	d100      	bne.n	800314e <memset+0xa>
 800314c:	4770      	bx	lr
 800314e:	f803 1b01 	strb.w	r1, [r3], #1
 8003152:	e7f9      	b.n	8003148 <memset+0x4>

08003154 <_init>:
 8003154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003156:	bf00      	nop
 8003158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800315a:	bc08      	pop	{r3}
 800315c:	469e      	mov	lr, r3
 800315e:	4770      	bx	lr

08003160 <_fini>:
 8003160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003162:	bf00      	nop
 8003164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003166:	bc08      	pop	{r3}
 8003168:	469e      	mov	lr, r3
 800316a:	4770      	bx	lr
