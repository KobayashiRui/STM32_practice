
SPI_Duplex_Slave_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016e0  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080018a8  080018a8  000118a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018b8  080018b8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080018b8  080018b8  000118b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080018c0  080018c0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018c0  080018c0  000118c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080018c4  080018c4  000118c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080018c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  2000000c  080018d4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  080018d4  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c17  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ba0  00000000  00000000  00029c53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000043ee  00000000  00000000  0002b7f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000620  00000000  00000000  0002fbe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bd8  00000000  00000000  00030208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023d6d  00000000  00000000  00030de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000aa47  00000000  00000000  00054b4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de6db  00000000  00000000  0005f594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013dc6f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001220  00000000  00000000  0013dcc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08001890 	.word	0x08001890

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08001890 	.word	0x08001890

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b96e 	b.w	80004fc <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468c      	mov	ip, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	f040 8083 	bne.w	800034e <__udivmoddi4+0x116>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d947      	bls.n	80002de <__udivmoddi4+0xa6>
 800024e:	fab2 f282 	clz	r2, r2
 8000252:	b142      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000254:	f1c2 0020 	rsb	r0, r2, #32
 8000258:	fa24 f000 	lsr.w	r0, r4, r0
 800025c:	4091      	lsls	r1, r2
 800025e:	4097      	lsls	r7, r2
 8000260:	ea40 0c01 	orr.w	ip, r0, r1
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbbc f6f8 	udiv	r6, ip, r8
 8000270:	fa1f fe87 	uxth.w	lr, r7
 8000274:	fb08 c116 	mls	r1, r8, r6, ip
 8000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027c:	fb06 f10e 	mul.w	r1, r6, lr
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 8119 	bcs.w	80004c0 <__udivmoddi4+0x288>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8116 	bls.w	80004c0 <__udivmoddi4+0x288>
 8000294:	3e02      	subs	r6, #2
 8000296:	443b      	add	r3, r7
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ac:	45a6      	cmp	lr, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	193c      	adds	r4, r7, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b6:	f080 8105 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	f240 8102 	bls.w	80004c4 <__udivmoddi4+0x28c>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c8:	eba4 040e 	sub.w	r4, r4, lr
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xaa>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d150      	bne.n	800038c <__udivmoddi4+0x154>
 80002ea:	1bcb      	subs	r3, r1, r7
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	fa1f f887 	uxth.w	r8, r7
 80002f4:	2601      	movs	r6, #1
 80002f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002fa:	0c21      	lsrs	r1, r4, #16
 80002fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000304:	fb08 f30c 	mul.w	r3, r8, ip
 8000308:	428b      	cmp	r3, r1
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0xe4>
 800030c:	1879      	adds	r1, r7, r1
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0xe2>
 8000314:	428b      	cmp	r3, r1
 8000316:	f200 80e9 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 800031a:	4684      	mov	ip, r0
 800031c:	1ac9      	subs	r1, r1, r3
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x10c>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x10a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80d9 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e7bf      	b.n	80002ce <__udivmoddi4+0x96>
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x12e>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80b1 	beq.w	80004ba <__udivmoddi4+0x282>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x1cc>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0x140>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80b8 	bhi.w	80004e8 <__udivmoddi4+0x2b0>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0103 	sbc.w	r1, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	468c      	mov	ip, r1
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0a8      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000386:	e9c5 4c00 	strd	r4, ip, [r5]
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0xa0>
 800038c:	f1c2 0320 	rsb	r3, r2, #32
 8000390:	fa20 f603 	lsr.w	r6, r0, r3
 8000394:	4097      	lsls	r7, r2
 8000396:	fa01 f002 	lsl.w	r0, r1, r2
 800039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039e:	40d9      	lsrs	r1, r3
 80003a0:	4330      	orrs	r0, r6
 80003a2:	0c03      	lsrs	r3, r0, #16
 80003a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f108 	mul.w	r1, r6, r8
 80003b8:	4299      	cmp	r1, r3
 80003ba:	fa04 f402 	lsl.w	r4, r4, r2
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x19c>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003c6:	f080 808d 	bcs.w	80004e4 <__udivmoddi4+0x2ac>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 808a 	bls.w	80004e4 <__udivmoddi4+0x2ac>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	443b      	add	r3, r7
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b281      	uxth	r1, r0
 80003d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb00 f308 	mul.w	r3, r0, r8
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x1c4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003f2:	d273      	bcs.n	80004dc <__udivmoddi4+0x2a4>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d971      	bls.n	80004dc <__udivmoddi4+0x2a4>
 80003f8:	3802      	subs	r0, #2
 80003fa:	4439      	add	r1, r7
 80003fc:	1acb      	subs	r3, r1, r3
 80003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000402:	e778      	b.n	80002f6 <__udivmoddi4+0xbe>
 8000404:	f1c6 0c20 	rsb	ip, r6, #32
 8000408:	fa03 f406 	lsl.w	r4, r3, r6
 800040c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000410:	431c      	orrs	r4, r3
 8000412:	fa20 f70c 	lsr.w	r7, r0, ip
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000422:	431f      	orrs	r7, r3
 8000424:	0c3b      	lsrs	r3, r7, #16
 8000426:	fbb1 f9fe 	udiv	r9, r1, lr
 800042a:	fa1f f884 	uxth.w	r8, r4
 800042e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000436:	fb09 fa08 	mul.w	sl, r9, r8
 800043a:	458a      	cmp	sl, r1
 800043c:	fa02 f206 	lsl.w	r2, r2, r6
 8000440:	fa00 f306 	lsl.w	r3, r0, r6
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x220>
 8000446:	1861      	adds	r1, r4, r1
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800044c:	d248      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 800044e:	458a      	cmp	sl, r1
 8000450:	d946      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	4421      	add	r1, r4
 8000458:	eba1 010a 	sub.w	r1, r1, sl
 800045c:	b2bf      	uxth	r7, r7
 800045e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000462:	fb0e 1110 	mls	r1, lr, r0, r1
 8000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45b8      	cmp	r8, r7
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x24a>
 8000472:	19e7      	adds	r7, r4, r7
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000478:	d22e      	bcs.n	80004d8 <__udivmoddi4+0x2a0>
 800047a:	45b8      	cmp	r8, r7
 800047c:	d92c      	bls.n	80004d8 <__udivmoddi4+0x2a0>
 800047e:	3802      	subs	r0, #2
 8000480:	4427      	add	r7, r4
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba7 0708 	sub.w	r7, r7, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454f      	cmp	r7, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	4649      	mov	r1, r9
 8000494:	d31a      	bcc.n	80004cc <__udivmoddi4+0x294>
 8000496:	d017      	beq.n	80004c8 <__udivmoddi4+0x290>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x27a>
 800049a:	ebb3 020e 	subs.w	r2, r3, lr
 800049e:	eb67 0701 	sbc.w	r7, r7, r1
 80004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a6:	40f2      	lsrs	r2, r6
 80004a8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ac:	40f7      	lsrs	r7, r6
 80004ae:	e9c5 2700 	strd	r2, r7, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e70b      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fd      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004c8:	4543      	cmp	r3, r8
 80004ca:	d2e5      	bcs.n	8000498 <__udivmoddi4+0x260>
 80004cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d0:	eb69 0104 	sbc.w	r1, r9, r4
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7df      	b.n	8000498 <__udivmoddi4+0x260>
 80004d8:	4608      	mov	r0, r1
 80004da:	e7d2      	b.n	8000482 <__udivmoddi4+0x24a>
 80004dc:	4660      	mov	r0, ip
 80004de:	e78d      	b.n	80003fc <__udivmoddi4+0x1c4>
 80004e0:	4681      	mov	r9, r0
 80004e2:	e7b9      	b.n	8000458 <__udivmoddi4+0x220>
 80004e4:	4666      	mov	r6, ip
 80004e6:	e775      	b.n	80003d4 <__udivmoddi4+0x19c>
 80004e8:	4630      	mov	r0, r6
 80004ea:	e74a      	b.n	8000382 <__udivmoddi4+0x14a>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	4439      	add	r1, r7
 80004f2:	e713      	b.n	800031c <__udivmoddi4+0xe4>
 80004f4:	3802      	subs	r0, #2
 80004f6:	443c      	add	r4, r7
 80004f8:	e724      	b.n	8000344 <__udivmoddi4+0x10c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <HAL_SPI_TxRxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi){
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000500:	2180      	movs	r1, #128	; 0x80
 8000502:	4806      	ldr	r0, [pc, #24]	; (800051c <HAL_SPI_TxRxCpltCallback+0x1c>)
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi){
 8000504:	b510      	push	{r4, lr}
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000506:	f000 fb57 	bl	8000bb8 <HAL_GPIO_TogglePin>
	HAL_SPI_TransmitReceive_IT(&hspi1, tx_buf, rx_buf, 7);
 800050a:	2307      	movs	r3, #7
 800050c:	4a04      	ldr	r2, [pc, #16]	; (8000520 <HAL_SPI_TxRxCpltCallback+0x20>)
 800050e:	4905      	ldr	r1, [pc, #20]	; (8000524 <HAL_SPI_TxRxCpltCallback+0x24>)
 8000510:	4805      	ldr	r0, [pc, #20]	; (8000528 <HAL_SPI_TxRxCpltCallback+0x28>)
}
 8000512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_SPI_TransmitReceive_IT(&hspi1, tx_buf, rx_buf, 7);
 8000516:	f000 bfbd 	b.w	8001494 <HAL_SPI_TransmitReceive_IT>
 800051a:	bf00      	nop
 800051c:	40020400 	.word	0x40020400
 8000520:	20000028 	.word	0x20000028
 8000524:	20000030 	.word	0x20000030
 8000528:	20000038 	.word	0x20000038

0800052c <HAL_SPI_ErrorCallback>:
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 800052c:	2201      	movs	r2, #1
 800052e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000532:	4801      	ldr	r0, [pc, #4]	; (8000538 <HAL_SPI_ErrorCallback+0xc>)
 8000534:	f000 bb3c 	b.w	8000bb0 <HAL_GPIO_WritePin>
 8000538:	40020400 	.word	0x40020400

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	2300      	movs	r3, #0
{
 8000540:	b094      	sub	sp, #80	; 0x50
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000542:	4a26      	ldr	r2, [pc, #152]	; (80005dc <SystemClock_Config+0xa0>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000544:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000548:	2601      	movs	r6, #1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800054c:	2510      	movs	r5, #16
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 192;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000550:	a808      	add	r0, sp, #32
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000552:	9307      	str	r3, [sp, #28]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000554:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800055c:	e9cd 3305 	strd	r3, r3, [sp, #20]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000560:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000562:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000566:	6411      	str	r1, [r2, #64]	; 0x40
 8000568:	6c11      	ldr	r1, [r2, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056a:	f5a2 32e4 	sub.w	r2, r2, #116736	; 0x1c800
  __HAL_RCC_PWR_CLK_ENABLE();
 800056e:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000576:	6811      	ldr	r1, [r2, #0]
 8000578:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800057c:	6011      	str	r1, [r2, #0]
  RCC_OscInitStruct.PLL.PLLM = 8;
 800057e:	2108      	movs	r1, #8
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000580:	6812      	ldr	r2, [r2, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000582:	930f      	str	r3, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000584:	f402 4340 	and.w	r3, r2, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000588:	22c0      	movs	r2, #192	; 0xc0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058a:	9408      	str	r4, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800058c:	9302      	str	r3, [sp, #8]
 800058e:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000590:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000592:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000596:	e9cd 650b 	strd	r6, r5, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 192;
 800059a:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059e:	f000 fb51 	bl	8000c44 <HAL_RCC_OscConfig>
 80005a2:	b108      	cbz	r0, 80005a8 <SystemClock_Config+0x6c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a6:	e7fe      	b.n	80005a6 <SystemClock_Config+0x6a>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005a8:	f000 fb10 	bl	8000bcc <HAL_PWREx_EnableOverDrive>
 80005ac:	4603      	mov	r3, r0
 80005ae:	b108      	cbz	r0, 80005b4 <SystemClock_Config+0x78>
 80005b0:	b672      	cpsid	i
  while (1)
 80005b2:	e7fe      	b.n	80005b2 <SystemClock_Config+0x76>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b4:	260f      	movs	r6, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005b6:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80005be:	a803      	add	r0, sp, #12
 80005c0:	2106      	movs	r1, #6
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c2:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c4:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c6:	9603      	str	r6, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c8:	e9cd 5206 	strd	r5, r2, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80005cc:	f000 fd68 	bl	80010a0 <HAL_RCC_ClockConfig>
 80005d0:	b108      	cbz	r0, 80005d6 <SystemClock_Config+0x9a>
 80005d2:	b672      	cpsid	i
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <SystemClock_Config+0x98>
}
 80005d6:	b014      	add	sp, #80	; 0x50
 80005d8:	bd70      	pop	{r4, r5, r6, pc}
 80005da:	bf00      	nop
 80005dc:	40023800 	.word	0x40023800

080005e0 <main>:
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e4:	2400      	movs	r4, #0
  HAL_Init();
 80005e6:	f000 f91d 	bl	8000824 <HAL_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ea:	2601      	movs	r6, #1
  SystemClock_Config();
 80005ec:	f7ff ffa6 	bl	800053c <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f0:	4b23      	ldr	r3, [pc, #140]	; (8000680 <main+0xa0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	9404      	str	r4, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 80005f4:	4622      	mov	r2, r4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f6:	9403      	str	r4, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 80005f8:	f44f 4181 	mov.w	r1, #16512	; 0x4080
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fc:	9407      	str	r4, [sp, #28]
  hspi1.Init.CRCPolynomial = 7;
 80005fe:	2707      	movs	r7, #7
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000600:	e9cd 4405 	strd	r4, r4, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000604:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000606:	4330      	orrs	r0, r6
 8000608:	6318      	str	r0, [r3, #48]	; 0x30
 800060a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800060c:	4030      	ands	r0, r6
 800060e:	9001      	str	r0, [sp, #4]
 8000610:	9801      	ldr	r0, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000612:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000614:	f040 0002 	orr.w	r0, r0, #2
 8000618:	6318      	str	r0, [r3, #48]	; 0x30
 800061a:	6b1d      	ldr	r5, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 800061c:	4819      	ldr	r0, [pc, #100]	; (8000684 <main+0xa4>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	f005 0502 	and.w	r5, r5, #2
 8000622:	9502      	str	r5, [sp, #8]
 8000624:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000626:	f000 fac3 	bl	8000bb0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 800062a:	f44f 4381 	mov.w	r3, #16512	; 0x4080
  hspi1.Instance = SPI1;
 800062e:	4d16      	ldr	r5, [pc, #88]	; (8000688 <main+0xa8>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000630:	4814      	ldr	r0, [pc, #80]	; (8000684 <main+0xa4>)
 8000632:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 8000634:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000636:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000638:	e9cd 4405 	strd	r4, r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800063c:	f000 f998 	bl	8000970 <HAL_GPIO_Init>
  hspi1.Instance = SPI1;
 8000640:	4a12      	ldr	r2, [pc, #72]	; (800068c <main+0xac>)
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000642:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000646:	4628      	mov	r0, r5
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000648:	616e      	str	r6, [r5, #20]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800064a:	612c      	str	r4, [r5, #16]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800064c:	61ac      	str	r4, [r5, #24]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800064e:	62ac      	str	r4, [r5, #40]	; 0x28
  hspi1.Instance = SPI1;
 8000650:	602a      	str	r2, [r5, #0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000652:	60eb      	str	r3, [r5, #12]
  hspi1.Init.CRCPolynomial = 7;
 8000654:	62ef      	str	r7, [r5, #44]	; 0x2c
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000656:	e9c5 4401 	strd	r4, r4, [r5, #4]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800065a:	e9c5 4408 	strd	r4, r4, [r5, #32]
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800065e:	e9c5 440c 	strd	r4, r4, [r5, #48]	; 0x30
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000662:	f000 fe9d 	bl	80013a0 <HAL_SPI_Init>
 8000666:	b108      	cbz	r0, 800066c <main+0x8c>
 8000668:	b672      	cpsid	i
  while (1)
 800066a:	e7fe      	b.n	800066a <main+0x8a>
  tx_buf[0] = 0x68;
 800066c:	4908      	ldr	r1, [pc, #32]	; (8000690 <main+0xb0>)
 800066e:	f646 1468 	movw	r4, #26984	; 0x6968
  HAL_SPI_TransmitReceive_IT(&hspi1, tx_buf, rx_buf, 7);
 8000672:	463b      	mov	r3, r7
 8000674:	4628      	mov	r0, r5
 8000676:	4a07      	ldr	r2, [pc, #28]	; (8000694 <main+0xb4>)
  tx_buf[0] = 0x68;
 8000678:	800c      	strh	r4, [r1, #0]
  HAL_SPI_TransmitReceive_IT(&hspi1, tx_buf, rx_buf, 7);
 800067a:	f000 ff0b 	bl	8001494 <HAL_SPI_TransmitReceive_IT>
  while (1)
 800067e:	e7fe      	b.n	800067e <main+0x9e>
 8000680:	40023800 	.word	0x40023800
 8000684:	40020400 	.word	0x40020400
 8000688:	20000038 	.word	0x20000038
 800068c:	40013000 	.word	0x40013000
 8000690:	20000030 	.word	0x20000030
 8000694:	20000028 	.word	0x20000028

08000698 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000698:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <HAL_MspInit+0x2c>)
{
 800069a:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 800069c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800069e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80006a2:	641a      	str	r2, [r3, #64]	; 0x40
 80006a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006a6:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80006aa:	9200      	str	r2, [sp, #0]
 80006ac:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80006b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80006b4:	645a      	str	r2, [r3, #68]	; 0x44
 80006b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006bc:	9301      	str	r3, [sp, #4]
 80006be:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006c0:	b002      	add	sp, #8
 80006c2:	4770      	bx	lr
 80006c4:	40023800 	.word	0x40023800

080006c8 <HAL_SPI_MspInit>:
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI1)
 80006c8:	4b1c      	ldr	r3, [pc, #112]	; (800073c <HAL_SPI_MspInit+0x74>)
 80006ca:	6802      	ldr	r2, [r0, #0]
{
 80006cc:	b570      	push	{r4, r5, r6, lr}
  if(hspi->Instance==SPI1)
 80006ce:	429a      	cmp	r2, r3
{
 80006d0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f04f 0400 	mov.w	r4, #0
 80006d6:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80006da:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80006de:	9407      	str	r4, [sp, #28]
  if(hspi->Instance==SPI1)
 80006e0:	d001      	beq.n	80006e6 <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80006e2:	b008      	add	sp, #32
 80006e4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006e6:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80006ea:	26f0      	movs	r6, #240	; 0xf0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ec:	2002      	movs	r0, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ee:	2503      	movs	r5, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f2:	a903      	add	r1, sp, #12
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80006f8:	645a      	str	r2, [r3, #68]	; 0x44
 80006fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80006fc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000700:	9201      	str	r2, [sp, #4]
 8000702:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000706:	f042 0201 	orr.w	r2, r2, #1
 800070a:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800070c:	2205      	movs	r2, #5
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000716:	e9cd 6003 	strd	r6, r0, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071c:	4808      	ldr	r0, [pc, #32]	; (8000740 <HAL_SPI_MspInit+0x78>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000720:	e9cd 5206 	strd	r5, r2, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000724:	f000 f924 	bl	8000970 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000728:	4622      	mov	r2, r4
 800072a:	4621      	mov	r1, r4
 800072c:	2023      	movs	r0, #35	; 0x23
 800072e:	f000 f8ab 	bl	8000888 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000732:	2023      	movs	r0, #35	; 0x23
 8000734:	f000 f8e2 	bl	80008fc <HAL_NVIC_EnableIRQ>
}
 8000738:	b008      	add	sp, #32
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	40013000 	.word	0x40013000
 8000740:	40020000 	.word	0x40020000

08000744 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000744:	e7fe      	b.n	8000744 <NMI_Handler>
 8000746:	bf00      	nop

08000748 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000748:	e7fe      	b.n	8000748 <HardFault_Handler>
 800074a:	bf00      	nop

0800074c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800074c:	e7fe      	b.n	800074c <MemManage_Handler>
 800074e:	bf00      	nop

08000750 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000750:	e7fe      	b.n	8000750 <BusFault_Handler>
 8000752:	bf00      	nop

08000754 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000754:	e7fe      	b.n	8000754 <UsageFault_Handler>
 8000756:	bf00      	nop

08000758 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop

0800075c <DebugMon_Handler>:
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop

08000760 <PendSV_Handler>:
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop

08000764 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000764:	f000 b86a 	b.w	800083c <HAL_IncTick>

08000768 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000768:	4801      	ldr	r0, [pc, #4]	; (8000770 <SPI1_IRQHandler+0x8>)
 800076a:	f000 bfc7 	b.w	80016fc <HAL_SPI_IRQHandler>
 800076e:	bf00      	nop
 8000770:	20000038 	.word	0x20000038

08000774 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000774:	4a03      	ldr	r2, [pc, #12]	; (8000784 <SystemInit+0x10>)
 8000776:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800077a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800077e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000782:	4770      	bx	lr
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000788:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800078c:	480d      	ldr	r0, [pc, #52]	; (80007c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800078e:	490e      	ldr	r1, [pc, #56]	; (80007c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000790:	4a0e      	ldr	r2, [pc, #56]	; (80007cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000794:	e002      	b.n	800079c <LoopCopyDataInit>

08000796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800079a:	3304      	adds	r3, #4

0800079c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800079c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800079e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007a0:	d3f9      	bcc.n	8000796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007a2:	4a0b      	ldr	r2, [pc, #44]	; (80007d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80007a4:	4c0b      	ldr	r4, [pc, #44]	; (80007d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80007a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a8:	e001      	b.n	80007ae <LoopFillZerobss>

080007aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007ac:	3204      	adds	r2, #4

080007ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007b0:	d3fb      	bcc.n	80007aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80007b2:	f7ff ffdf 	bl	8000774 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007b6:	f001 f847 	bl	8001848 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007ba:	f7ff ff11 	bl	80005e0 <main>
  bx  lr    
 80007be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80007c0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80007c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007cc:	080018c8 	.word	0x080018c8
  ldr r2, =_sbss
 80007d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007d4:	200000a0 	.word	0x200000a0

080007d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007d8:	e7fe      	b.n	80007d8 <ADC_IRQHandler>
	...

080007dc <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007dc:	490e      	ldr	r1, [pc, #56]	; (8000818 <HAL_InitTick+0x3c>)
 80007de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007e2:	4a0e      	ldr	r2, [pc, #56]	; (800081c <HAL_InitTick+0x40>)
{
 80007e4:	b510      	push	{r4, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007e6:	7809      	ldrb	r1, [r1, #0]
{
 80007e8:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007ea:	6812      	ldr	r2, [r2, #0]
 80007ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80007f0:	fbb2 f0f3 	udiv	r0, r2, r3
 80007f4:	f000 f890 	bl	8000918 <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007f8:	b908      	cbnz	r0, 80007fe <HAL_InitTick+0x22>
 80007fa:	2c0f      	cmp	r4, #15
 80007fc:	d901      	bls.n	8000802 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80007fe:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8000800:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000802:	2200      	movs	r2, #0
 8000804:	4621      	mov	r1, r4
 8000806:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800080a:	f000 f83d 	bl	8000888 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800080e:	4b04      	ldr	r3, [pc, #16]	; (8000820 <HAL_InitTick+0x44>)
 8000810:	2000      	movs	r0, #0
 8000812:	601c      	str	r4, [r3, #0]
}
 8000814:	bd10      	pop	{r4, pc}
 8000816:	bf00      	nop
 8000818:	20000004 	.word	0x20000004
 800081c:	20000000 	.word	0x20000000
 8000820:	20000008 	.word	0x20000008

08000824 <HAL_Init>:
{
 8000824:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000826:	2003      	movs	r0, #3
 8000828:	f000 f81a 	bl	8000860 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800082c:	2000      	movs	r0, #0
 800082e:	f7ff ffd5 	bl	80007dc <HAL_InitTick>
  HAL_MspInit();
 8000832:	f7ff ff31 	bl	8000698 <HAL_MspInit>
}
 8000836:	2000      	movs	r0, #0
 8000838:	bd08      	pop	{r3, pc}
 800083a:	bf00      	nop

0800083c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800083c:	4a03      	ldr	r2, [pc, #12]	; (800084c <HAL_IncTick+0x10>)
 800083e:	4b04      	ldr	r3, [pc, #16]	; (8000850 <HAL_IncTick+0x14>)
 8000840:	6811      	ldr	r1, [r2, #0]
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	440b      	add	r3, r1
 8000846:	6013      	str	r3, [r2, #0]
}
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	2000009c 	.word	0x2000009c
 8000850:	20000004 	.word	0x20000004

08000854 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000854:	4b01      	ldr	r3, [pc, #4]	; (800085c <HAL_GetTick+0x8>)
 8000856:	6818      	ldr	r0, [r3, #0]
}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	2000009c 	.word	0x2000009c

08000860 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000860:	4907      	ldr	r1, [pc, #28]	; (8000880 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000862:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8000864:	4b07      	ldr	r3, [pc, #28]	; (8000884 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000866:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000868:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800086c:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800086e:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8000872:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000874:	f85d 4b04 	ldr.w	r4, [sp], #4
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000878:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 800087a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800087c:	60cb      	str	r3, [r1, #12]
 800087e:	4770      	bx	lr
 8000880:	e000ed00 	.word	0xe000ed00
 8000884:	05fa0000 	.word	0x05fa0000

08000888 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000888:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <HAL_NVIC_SetPriority+0x68>)
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000890:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000892:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000896:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000898:	2d04      	cmp	r5, #4
 800089a:	bf28      	it	cs
 800089c:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800089e:	2c06      	cmp	r4, #6
 80008a0:	d919      	bls.n	80008d6 <HAL_NVIC_SetPriority+0x4e>
 80008a2:	3b03      	subs	r3, #3
 80008a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80008a8:	409c      	lsls	r4, r3
 80008aa:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ae:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 80008b2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b4:	fa04 f405 	lsl.w	r4, r4, r5
 80008b8:	ea21 0104 	bic.w	r1, r1, r4
 80008bc:	fa01 f103 	lsl.w	r1, r1, r3
 80008c0:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80008c4:	db0a      	blt.n	80008dc <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c6:	0109      	lsls	r1, r1, #4
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <HAL_NVIC_SetPriority+0x6c>)
 80008ca:	b2c9      	uxtb	r1, r1
 80008cc:	4403      	add	r3, r0
 80008ce:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80008d2:	bc30      	pop	{r4, r5}
 80008d4:	4770      	bx	lr
 80008d6:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008d8:	4613      	mov	r3, r2
 80008da:	e7e8      	b.n	80008ae <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008dc:	f000 000f 	and.w	r0, r0, #15
 80008e0:	0109      	lsls	r1, r1, #4
 80008e2:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <HAL_NVIC_SetPriority+0x70>)
 80008e4:	b2c9      	uxtb	r1, r1
 80008e6:	4403      	add	r3, r0
 80008e8:	7619      	strb	r1, [r3, #24]
 80008ea:	bc30      	pop	{r4, r5}
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	e000ed00 	.word	0xe000ed00
 80008f4:	e000e100 	.word	0xe000e100
 80008f8:	e000ecfc 	.word	0xe000ecfc

080008fc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80008fc:	2800      	cmp	r0, #0
 80008fe:	db07      	blt.n	8000910 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000900:	f000 011f 	and.w	r1, r0, #31
 8000904:	2301      	movs	r3, #1
 8000906:	0940      	lsrs	r0, r0, #5
 8000908:	4a02      	ldr	r2, [pc, #8]	; (8000914 <HAL_NVIC_EnableIRQ+0x18>)
 800090a:	408b      	lsls	r3, r1
 800090c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	e000e100 	.word	0xe000e100

08000918 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000918:	3801      	subs	r0, #1
 800091a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800091e:	d20d      	bcs.n	800093c <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000922:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000924:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000926:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000928:	25f0      	movs	r5, #240	; 0xf0
 800092a:	4c06      	ldr	r4, [pc, #24]	; (8000944 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800092c:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800092e:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000930:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000936:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8000938:	bc30      	pop	{r4, r5}
 800093a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800093c:	2001      	movs	r0, #1
 800093e:	4770      	bx	lr
 8000940:	e000e010 	.word	0xe000e010
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000948:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
{
 800094c:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800094e:	2a02      	cmp	r2, #2
 8000950:	d003      	beq.n	800095a <HAL_DMA_Abort_IT+0x12>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000952:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8000954:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000956:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000958:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800095a:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800095c:	2105      	movs	r1, #5
  }

  return HAL_OK;
 800095e:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_ABORT;
 8000960:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000964:	6813      	ldr	r3, [r2, #0]
 8000966:	f023 0301 	bic.w	r3, r3, #1
 800096a:	6013      	str	r3, [r2, #0]
}
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop

08000970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000974:	2300      	movs	r3, #0
{
 8000976:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000978:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8000ba8 <HAL_GPIO_Init+0x238>
 800097c:	680d      	ldr	r5, [r1, #0]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800097e:	f8df e22c 	ldr.w	lr, [pc, #556]	; 8000bac <HAL_GPIO_Init+0x23c>
 8000982:	e002      	b.n	800098a <HAL_GPIO_Init+0x1a>
  for(position = 0; position < GPIO_NUMBER; position++)
 8000984:	3301      	adds	r3, #1
 8000986:	2b10      	cmp	r3, #16
 8000988:	d057      	beq.n	8000a3a <HAL_GPIO_Init+0xca>
    ioposition = ((uint32_t)0x01) << position;
 800098a:	2201      	movs	r2, #1
 800098c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800098e:	ea02 0a05 	and.w	sl, r2, r5
    if(iocurrent == ioposition)
 8000992:	43aa      	bics	r2, r5
 8000994:	d1f6      	bne.n	8000984 <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000996:	684a      	ldr	r2, [r1, #4]
 8000998:	005f      	lsls	r7, r3, #1
 800099a:	f022 0c10 	bic.w	ip, r2, #16
 800099e:	f10c 34ff 	add.w	r4, ip, #4294967295	; 0xffffffff
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009a2:	2c01      	cmp	r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80009a4:	f04f 0403 	mov.w	r4, #3
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009a8:	f200 80c0 	bhi.w	8000b2c <HAL_GPIO_Init+0x1bc>
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80009ac:	f3c2 1600 	ubfx	r6, r2, #4, #1
        temp = GPIOx->OSPEEDR; 
 80009b0:	f8d0 8008 	ldr.w	r8, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80009b4:	40bc      	lsls	r4, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80009b6:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80009b8:	ea28 0804 	bic.w	r8, r8, r4
 80009bc:	43e4      	mvns	r4, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80009be:	9601      	str	r6, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2));
 80009c0:	68ce      	ldr	r6, [r1, #12]
 80009c2:	fa06 f907 	lsl.w	r9, r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80009c6:	9e01      	ldr	r6, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2));
 80009c8:	ea49 0808 	orr.w	r8, r9, r8
        GPIOx->OSPEEDR = temp;
 80009cc:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 80009d0:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009d4:	ea28 080a 	bic.w	r8, r8, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80009d8:	ea46 0608 	orr.w	r6, r6, r8
        GPIOx->OTYPER = temp;
 80009dc:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 80009de:	68c6      	ldr	r6, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009e0:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80009e4:	ea06 0804 	and.w	r8, r6, r4
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80009e8:	688e      	ldr	r6, [r1, #8]
 80009ea:	fa06 f607 	lsl.w	r6, r6, r7
 80009ee:	ea46 0608 	orr.w	r6, r6, r8
      GPIOx->PUPDR = temp;
 80009f2:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009f4:	d124      	bne.n	8000a40 <HAL_GPIO_Init+0xd0>
        temp = GPIOx->AFR[position >> 3];
 80009f6:	08de      	lsrs	r6, r3, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80009f8:	f003 0c07 	and.w	ip, r3, #7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80009fc:	f002 0203 	and.w	r2, r2, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000a00:	f04f 080f 	mov.w	r8, #15
 8000a04:	eb00 0686 	add.w	r6, r0, r6, lsl #2
  for(position = 0; position < GPIO_NUMBER; position++)
 8000a08:	3301      	adds	r3, #1
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000a0a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000a0e:	fa02 f707 	lsl.w	r7, r2, r7
        temp = GPIOx->AFR[position >> 3];
 8000a12:	f8d6 9020 	ldr.w	r9, [r6, #32]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000a16:	2b10      	cmp	r3, #16
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000a18:	690a      	ldr	r2, [r1, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000a1a:	fa08 f80c 	lsl.w	r8, r8, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000a1e:	fa02 fc0c 	lsl.w	ip, r2, ip
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000a22:	ea29 0208 	bic.w	r2, r9, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000a26:	ea4c 0202 	orr.w	r2, ip, r2
        GPIOx->AFR[position >> 3] = temp;
 8000a2a:	6232      	str	r2, [r6, #32]
      temp = GPIOx->MODER;
 8000a2c:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000a2e:	ea04 0402 	and.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000a32:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 8000a36:	6004      	str	r4, [r0, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000a38:	d1a7      	bne.n	800098a <HAL_GPIO_Init+0x1a>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8000a3a:	b005      	add	sp, #20
 8000a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      temp = GPIOx->MODER;
 8000a40:	f8d0 c000 	ldr.w	ip, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000a44:	f002 0603 	and.w	r6, r2, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000a48:	ea0c 0c04 	and.w	ip, ip, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000a4c:	fa06 f707 	lsl.w	r7, r6, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a50:	00d4      	lsls	r4, r2, #3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000a52:	ea47 070c 	orr.w	r7, r7, ip
      GPIOx->MODER = temp;
 8000a56:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a58:	d594      	bpl.n	8000984 <HAL_GPIO_Init+0x14>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5a:	f8db 7044 	ldr.w	r7, [fp, #68]	; 0x44
 8000a5e:	f023 0c03 	bic.w	ip, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000a62:	f003 0403 	and.w	r4, r3, #3
 8000a66:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a68:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000a6c:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000a70:	00a4      	lsls	r4, r4, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a72:	f8cb 7044 	str.w	r7, [fp, #68]	; 0x44
 8000a76:	f50c 3c9c 	add.w	ip, ip, #79872	; 0x13800
 8000a7a:	f8db 7044 	ldr.w	r7, [fp, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000a7e:	fa06 f804 	lsl.w	r8, r6, r4
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a82:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000a86:	9703      	str	r7, [sp, #12]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000a88:	4f3e      	ldr	r7, [pc, #248]	; (8000b84 <HAL_GPIO_Init+0x214>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8a:	9e03      	ldr	r6, [sp, #12]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000a8c:	42b8      	cmp	r0, r7
        temp = SYSCFG->EXTICR[position >> 2];
 8000a8e:	f8dc 6008 	ldr.w	r6, [ip, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000a92:	ea26 0608 	bic.w	r6, r6, r8
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000a96:	d020      	beq.n	8000ada <HAL_GPIO_Init+0x16a>
 8000a98:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000a9c:	42b8      	cmp	r0, r7
 8000a9e:	d048      	beq.n	8000b32 <HAL_GPIO_Init+0x1c2>
 8000aa0:	4f39      	ldr	r7, [pc, #228]	; (8000b88 <HAL_GPIO_Init+0x218>)
 8000aa2:	42b8      	cmp	r0, r7
 8000aa4:	d04a      	beq.n	8000b3c <HAL_GPIO_Init+0x1cc>
 8000aa6:	4f39      	ldr	r7, [pc, #228]	; (8000b8c <HAL_GPIO_Init+0x21c>)
 8000aa8:	42b8      	cmp	r0, r7
 8000aaa:	d04c      	beq.n	8000b46 <HAL_GPIO_Init+0x1d6>
 8000aac:	4f38      	ldr	r7, [pc, #224]	; (8000b90 <HAL_GPIO_Init+0x220>)
 8000aae:	42b8      	cmp	r0, r7
 8000ab0:	d04e      	beq.n	8000b50 <HAL_GPIO_Init+0x1e0>
 8000ab2:	4f38      	ldr	r7, [pc, #224]	; (8000b94 <HAL_GPIO_Init+0x224>)
 8000ab4:	42b8      	cmp	r0, r7
 8000ab6:	d055      	beq.n	8000b64 <HAL_GPIO_Init+0x1f4>
 8000ab8:	4f37      	ldr	r7, [pc, #220]	; (8000b98 <HAL_GPIO_Init+0x228>)
 8000aba:	42b8      	cmp	r0, r7
 8000abc:	d057      	beq.n	8000b6e <HAL_GPIO_Init+0x1fe>
 8000abe:	4f37      	ldr	r7, [pc, #220]	; (8000b9c <HAL_GPIO_Init+0x22c>)
 8000ac0:	42b8      	cmp	r0, r7
 8000ac2:	d04a      	beq.n	8000b5a <HAL_GPIO_Init+0x1ea>
 8000ac4:	4f36      	ldr	r7, [pc, #216]	; (8000ba0 <HAL_GPIO_Init+0x230>)
 8000ac6:	42b8      	cmp	r0, r7
 8000ac8:	d056      	beq.n	8000b78 <HAL_GPIO_Init+0x208>
 8000aca:	4f36      	ldr	r7, [pc, #216]	; (8000ba4 <HAL_GPIO_Init+0x234>)
 8000acc:	42b8      	cmp	r0, r7
 8000ace:	bf0c      	ite	eq
 8000ad0:	2709      	moveq	r7, #9
 8000ad2:	270a      	movne	r7, #10
 8000ad4:	fa07 f404 	lsl.w	r4, r7, r4
 8000ad8:	4326      	orrs	r6, r4
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ada:	f8cc 6008 	str.w	r6, [ip, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ade:	03d7      	lsls	r7, r2, #15
        temp = EXTI->IMR;
 8000ae0:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~((uint32_t)iocurrent);
 8000ae4:	ea6f 060a 	mvn.w	r6, sl
          temp |= iocurrent;
 8000ae8:	bf4c      	ite	mi
 8000aea:	ea4a 0404 	orrmi.w	r4, sl, r4
        temp &= ~((uint32_t)iocurrent);
 8000aee:	4034      	andpl	r4, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000af0:	0397      	lsls	r7, r2, #14
        EXTI->IMR = temp;
 8000af2:	f8ce 4000 	str.w	r4, [lr]
        temp = EXTI->EMR;
 8000af6:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
 8000afa:	bf54      	ite	pl
 8000afc:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000afe:	ea4a 0404 	orrmi.w	r4, sl, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b02:	02d7      	lsls	r7, r2, #11
        EXTI->EMR = temp;
 8000b04:	f8ce 4004 	str.w	r4, [lr, #4]
        temp = EXTI->RTSR;
 8000b08:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
 8000b0c:	bf54      	ite	pl
 8000b0e:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000b10:	ea4a 0404 	orrmi.w	r4, sl, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b14:	0292      	lsls	r2, r2, #10
        EXTI->RTSR = temp;
 8000b16:	f8ce 4008 	str.w	r4, [lr, #8]
        temp = EXTI->FTSR;
 8000b1a:	f8de 400c 	ldr.w	r4, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
 8000b1e:	bf54      	ite	pl
 8000b20:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000b22:	ea4a 0404 	orrmi.w	r4, sl, r4
        EXTI->FTSR = temp;
 8000b26:	f8ce 400c 	str.w	r4, [lr, #12]
 8000b2a:	e72b      	b.n	8000984 <HAL_GPIO_Init+0x14>
 8000b2c:	40bc      	lsls	r4, r7
 8000b2e:	43e4      	mvns	r4, r4
 8000b30:	e755      	b.n	80009de <HAL_GPIO_Init+0x6e>
 8000b32:	2701      	movs	r7, #1
 8000b34:	fa07 f404 	lsl.w	r4, r7, r4
 8000b38:	4326      	orrs	r6, r4
 8000b3a:	e7ce      	b.n	8000ada <HAL_GPIO_Init+0x16a>
 8000b3c:	2702      	movs	r7, #2
 8000b3e:	fa07 f404 	lsl.w	r4, r7, r4
 8000b42:	4326      	orrs	r6, r4
 8000b44:	e7c9      	b.n	8000ada <HAL_GPIO_Init+0x16a>
 8000b46:	2703      	movs	r7, #3
 8000b48:	fa07 f404 	lsl.w	r4, r7, r4
 8000b4c:	4326      	orrs	r6, r4
 8000b4e:	e7c4      	b.n	8000ada <HAL_GPIO_Init+0x16a>
 8000b50:	2704      	movs	r7, #4
 8000b52:	fa07 f404 	lsl.w	r4, r7, r4
 8000b56:	4326      	orrs	r6, r4
 8000b58:	e7bf      	b.n	8000ada <HAL_GPIO_Init+0x16a>
 8000b5a:	2707      	movs	r7, #7
 8000b5c:	fa07 f404 	lsl.w	r4, r7, r4
 8000b60:	4326      	orrs	r6, r4
 8000b62:	e7ba      	b.n	8000ada <HAL_GPIO_Init+0x16a>
 8000b64:	2705      	movs	r7, #5
 8000b66:	fa07 f404 	lsl.w	r4, r7, r4
 8000b6a:	4326      	orrs	r6, r4
 8000b6c:	e7b5      	b.n	8000ada <HAL_GPIO_Init+0x16a>
 8000b6e:	2706      	movs	r7, #6
 8000b70:	fa07 f404 	lsl.w	r4, r7, r4
 8000b74:	4326      	orrs	r6, r4
 8000b76:	e7b0      	b.n	8000ada <HAL_GPIO_Init+0x16a>
 8000b78:	2708      	movs	r7, #8
 8000b7a:	fa07 f404 	lsl.w	r4, r7, r4
 8000b7e:	4326      	orrs	r6, r4
 8000b80:	e7ab      	b.n	8000ada <HAL_GPIO_Init+0x16a>
 8000b82:	bf00      	nop
 8000b84:	40020000 	.word	0x40020000
 8000b88:	40020800 	.word	0x40020800
 8000b8c:	40020c00 	.word	0x40020c00
 8000b90:	40021000 	.word	0x40021000
 8000b94:	40021400 	.word	0x40021400
 8000b98:	40021800 	.word	0x40021800
 8000b9c:	40021c00 	.word	0x40021c00
 8000ba0:	40022000 	.word	0x40022000
 8000ba4:	40022400 	.word	0x40022400
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40013c00 	.word	0x40013c00

08000bb0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bb0:	b902      	cbnz	r2, 8000bb4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000bb2:	0409      	lsls	r1, r1, #16
 8000bb4:	6181      	str	r1, [r0, #24]
  }
}
 8000bb6:	4770      	bx	lr

08000bb8 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000bb8:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000bba:	ea01 0203 	and.w	r2, r1, r3
 8000bbe:	ea21 0103 	bic.w	r1, r1, r3
 8000bc2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000bc6:	6181      	str	r1, [r0, #24]
}
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bcc:	4a1b      	ldr	r2, [pc, #108]	; (8000c3c <HAL_PWREx_EnableOverDrive+0x70>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000bce:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd0:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000bd2:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
 8000bd6:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd8:	6411      	str	r1, [r2, #64]	; 0x40
{
 8000bda:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bdc:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000bde:	461d      	mov	r5, r3
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be0:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000be4:	9201      	str	r2, [sp, #4]
 8000be6:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000bee:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000bf0:	f7ff fe30 	bl	8000854 <HAL_GetTick>
 8000bf4:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000bf6:	e005      	b.n	8000c04 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000bf8:	f7ff fe2c 	bl	8000854 <HAL_GetTick>
 8000bfc:	1b00      	subs	r0, r0, r4
 8000bfe:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000c02:	d817      	bhi.n	8000c34 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000c04:	686b      	ldr	r3, [r5, #4]
 8000c06:	03da      	lsls	r2, r3, #15
 8000c08:	d5f6      	bpl.n	8000bf8 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000c0a:	682b      	ldr	r3, [r5, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000c0c:	4e0c      	ldr	r6, [pc, #48]	; (8000c40 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c12:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8000c14:	f7ff fe1e 	bl	8000854 <HAL_GetTick>
 8000c18:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000c1a:	e005      	b.n	8000c28 <HAL_PWREx_EnableOverDrive+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000c1c:	f7ff fe1a 	bl	8000854 <HAL_GetTick>
 8000c20:	1b00      	subs	r0, r0, r4
 8000c22:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000c26:	d805      	bhi.n	8000c34 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000c28:	6873      	ldr	r3, [r6, #4]
 8000c2a:	039b      	lsls	r3, r3, #14
 8000c2c:	d5f6      	bpl.n	8000c1c <HAL_PWREx_EnableOverDrive+0x50>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000c2e:	2000      	movs	r0, #0
}
 8000c30:	b002      	add	sp, #8
 8000c32:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 8000c34:	2003      	movs	r0, #3
}
 8000c36:	b002      	add	sp, #8
 8000c38:	bd70      	pop	{r4, r5, r6, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40007000 	.word	0x40007000

08000c44 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c44:	2800      	cmp	r0, #0
 8000c46:	f000 81c1 	beq.w	8000fcc <HAL_RCC_OscConfig+0x388>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c4a:	6803      	ldr	r3, [r0, #0]
{
 8000c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c50:	07dd      	lsls	r5, r3, #31
{
 8000c52:	b082      	sub	sp, #8
 8000c54:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c56:	d535      	bpl.n	8000cc4 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c58:	49ac      	ldr	r1, [pc, #688]	; (8000f0c <HAL_RCC_OscConfig+0x2c8>)
 8000c5a:	688a      	ldr	r2, [r1, #8]
 8000c5c:	f002 020c 	and.w	r2, r2, #12
 8000c60:	2a04      	cmp	r2, #4
 8000c62:	f000 80e6 	beq.w	8000e32 <HAL_RCC_OscConfig+0x1ee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c66:	688a      	ldr	r2, [r1, #8]
 8000c68:	f002 020c 	and.w	r2, r2, #12
 8000c6c:	2a08      	cmp	r2, #8
 8000c6e:	f000 80dc 	beq.w	8000e2a <HAL_RCC_OscConfig+0x1e6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c72:	6863      	ldr	r3, [r4, #4]
 8000c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c78:	d010      	beq.n	8000c9c <HAL_RCC_OscConfig+0x58>
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	f000 8104 	beq.w	8000e88 <HAL_RCC_OscConfig+0x244>
 8000c80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c84:	4ba1      	ldr	r3, [pc, #644]	; (8000f0c <HAL_RCC_OscConfig+0x2c8>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	f000 8190 	beq.w	8000fac <HAL_RCC_OscConfig+0x368>
 8000c8c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	e004      	b.n	8000ca6 <HAL_RCC_OscConfig+0x62>
 8000c9c:	4a9b      	ldr	r2, [pc, #620]	; (8000f0c <HAL_RCC_OscConfig+0x2c8>)
 8000c9e:	6813      	ldr	r3, [r2, #0]
 8000ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ca4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ca6:	f7ff fdd5 	bl	8000854 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000caa:	4e98      	ldr	r6, [pc, #608]	; (8000f0c <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000cac:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cae:	e005      	b.n	8000cbc <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cb0:	f7ff fdd0 	bl	8000854 <HAL_GetTick>
 8000cb4:	1b40      	subs	r0, r0, r5
 8000cb6:	2864      	cmp	r0, #100	; 0x64
 8000cb8:	f200 80e2 	bhi.w	8000e80 <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cbc:	6833      	ldr	r3, [r6, #0]
 8000cbe:	039a      	lsls	r2, r3, #14
 8000cc0:	d5f6      	bpl.n	8000cb0 <HAL_RCC_OscConfig+0x6c>
 8000cc2:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cc4:	079f      	lsls	r7, r3, #30
 8000cc6:	d529      	bpl.n	8000d1c <HAL_RCC_OscConfig+0xd8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cc8:	4a90      	ldr	r2, [pc, #576]	; (8000f0c <HAL_RCC_OscConfig+0x2c8>)
 8000cca:	6891      	ldr	r1, [r2, #8]
 8000ccc:	f011 0f0c 	tst.w	r1, #12
 8000cd0:	f000 8082 	beq.w	8000dd8 <HAL_RCC_OscConfig+0x194>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cd4:	6891      	ldr	r1, [r2, #8]
 8000cd6:	f001 010c 	and.w	r1, r1, #12
 8000cda:	2908      	cmp	r1, #8
 8000cdc:	d079      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x18e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000cde:	68e3      	ldr	r3, [r4, #12]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	f000 8109 	beq.w	8000ef8 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ce6:	4b89      	ldr	r3, [pc, #548]	; (8000f0c <HAL_RCC_OscConfig+0x2c8>)
 8000ce8:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cea:	461e      	mov	r6, r3
        __HAL_RCC_HSI_ENABLE();
 8000cec:	f042 0201 	orr.w	r2, r2, #1
 8000cf0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000cf2:	f7ff fdaf 	bl	8000854 <HAL_GetTick>
 8000cf6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cf8:	e005      	b.n	8000d06 <HAL_RCC_OscConfig+0xc2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cfa:	f7ff fdab 	bl	8000854 <HAL_GetTick>
 8000cfe:	1b40      	subs	r0, r0, r5
 8000d00:	2802      	cmp	r0, #2
 8000d02:	f200 80bd 	bhi.w	8000e80 <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d06:	6833      	ldr	r3, [r6, #0]
 8000d08:	0798      	lsls	r0, r3, #30
 8000d0a:	d5f6      	bpl.n	8000cfa <HAL_RCC_OscConfig+0xb6>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d0c:	6833      	ldr	r3, [r6, #0]
 8000d0e:	6922      	ldr	r2, [r4, #16]
 8000d10:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d14:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000d18:	6033      	str	r3, [r6, #0]
 8000d1a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d1c:	071a      	lsls	r2, r3, #28
 8000d1e:	d41f      	bmi.n	8000d60 <HAL_RCC_OscConfig+0x11c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d20:	075d      	lsls	r5, r3, #29
 8000d22:	d535      	bpl.n	8000d90 <HAL_RCC_OscConfig+0x14c>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d24:	4b79      	ldr	r3, [pc, #484]	; (8000f0c <HAL_RCC_OscConfig+0x2c8>)
 8000d26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d28:	00d0      	lsls	r0, r2, #3
 8000d2a:	d573      	bpl.n	8000e14 <HAL_RCC_OscConfig+0x1d0>
  FlagStatus pwrclkchanged = RESET;
 8000d2c:	2500      	movs	r5, #0
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000d2e:	4b78      	ldr	r3, [pc, #480]	; (8000f10 <HAL_RCC_OscConfig+0x2cc>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	05d1      	lsls	r1, r2, #23
 8000d34:	f140 8093 	bpl.w	8000e5e <HAL_RCC_OscConfig+0x21a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d38:	68a3      	ldr	r3, [r4, #8]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	f000 80f4 	beq.w	8000f28 <HAL_RCC_OscConfig+0x2e4>
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	f000 80b8 	beq.w	8000eb6 <HAL_RCC_OscConfig+0x272>
 8000d46:	2b05      	cmp	r3, #5
 8000d48:	4b70      	ldr	r3, [pc, #448]	; (8000f0c <HAL_RCC_OscConfig+0x2c8>)
 8000d4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000d4c:	f000 8136 	beq.w	8000fbc <HAL_RCC_OscConfig+0x378>
 8000d50:	f022 0201 	bic.w	r2, r2, #1
 8000d54:	671a      	str	r2, [r3, #112]	; 0x70
 8000d56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000d58:	f022 0204 	bic.w	r2, r2, #4
 8000d5c:	671a      	str	r2, [r3, #112]	; 0x70
 8000d5e:	e0e8      	b.n	8000f32 <HAL_RCC_OscConfig+0x2ee>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000d60:	6963      	ldr	r3, [r4, #20]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d043      	beq.n	8000dee <HAL_RCC_OscConfig+0x1aa>
      __HAL_RCC_LSI_ENABLE();
 8000d66:	4b69      	ldr	r3, [pc, #420]	; (8000f0c <HAL_RCC_OscConfig+0x2c8>)
 8000d68:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d6a:	461e      	mov	r6, r3
      __HAL_RCC_LSI_ENABLE();
 8000d6c:	f042 0201 	orr.w	r2, r2, #1
 8000d70:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000d72:	f7ff fd6f 	bl	8000854 <HAL_GetTick>
 8000d76:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d78:	e004      	b.n	8000d84 <HAL_RCC_OscConfig+0x140>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d7a:	f7ff fd6b 	bl	8000854 <HAL_GetTick>
 8000d7e:	1b40      	subs	r0, r0, r5
 8000d80:	2802      	cmp	r0, #2
 8000d82:	d87d      	bhi.n	8000e80 <HAL_RCC_OscConfig+0x23c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d84:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000d86:	079b      	lsls	r3, r3, #30
 8000d88:	d5f7      	bpl.n	8000d7a <HAL_RCC_OscConfig+0x136>
 8000d8a:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d8c:	075d      	lsls	r5, r3, #29
 8000d8e:	d4c9      	bmi.n	8000d24 <HAL_RCC_OscConfig+0xe0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d90:	69a0      	ldr	r0, [r4, #24]
 8000d92:	b1d0      	cbz	r0, 8000dca <HAL_RCC_OscConfig+0x186>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d94:	4b5d      	ldr	r3, [pc, #372]	; (8000f0c <HAL_RCC_OscConfig+0x2c8>)
 8000d96:	689a      	ldr	r2, [r3, #8]
 8000d98:	f002 020c 	and.w	r2, r2, #12
 8000d9c:	2a08      	cmp	r2, #8
 8000d9e:	f000 80db 	beq.w	8000f58 <HAL_RCC_OscConfig+0x314>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000da2:	681a      	ldr	r2, [r3, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000da4:	2802      	cmp	r0, #2

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000da6:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8000da8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8000dac:	601a      	str	r2, [r3, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000dae:	f000 810f 	beq.w	8000fd0 <HAL_RCC_OscConfig+0x38c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000db2:	f7ff fd4f 	bl	8000854 <HAL_GetTick>
 8000db6:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000db8:	e004      	b.n	8000dc4 <HAL_RCC_OscConfig+0x180>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000dba:	f7ff fd4b 	bl	8000854 <HAL_GetTick>
 8000dbe:	1b00      	subs	r0, r0, r4
 8000dc0:	2802      	cmp	r0, #2
 8000dc2:	d85d      	bhi.n	8000e80 <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000dc4:	682b      	ldr	r3, [r5, #0]
 8000dc6:	019b      	lsls	r3, r3, #6
 8000dc8:	d4f7      	bmi.n	8000dba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8000dca:	2000      	movs	r0, #0
}
 8000dcc:	b002      	add	sp, #8
 8000dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000dd2:	6852      	ldr	r2, [r2, #4]
 8000dd4:	0256      	lsls	r6, r2, #9
 8000dd6:	d482      	bmi.n	8000cde <HAL_RCC_OscConfig+0x9a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dd8:	4a4c      	ldr	r2, [pc, #304]	; (8000f0c <HAL_RCC_OscConfig+0x2c8>)
 8000dda:	6812      	ldr	r2, [r2, #0]
 8000ddc:	0795      	lsls	r5, r2, #30
 8000dde:	d532      	bpl.n	8000e46 <HAL_RCC_OscConfig+0x202>
 8000de0:	68e2      	ldr	r2, [r4, #12]
 8000de2:	2a01      	cmp	r2, #1
 8000de4:	d02f      	beq.n	8000e46 <HAL_RCC_OscConfig+0x202>
        return HAL_ERROR;
 8000de6:	2001      	movs	r0, #1
}
 8000de8:	b002      	add	sp, #8
 8000dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8000dee:	4b47      	ldr	r3, [pc, #284]	; (8000f0c <HAL_RCC_OscConfig+0x2c8>)
 8000df0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000df2:	461e      	mov	r6, r3
      __HAL_RCC_LSI_DISABLE();
 8000df4:	f022 0201 	bic.w	r2, r2, #1
 8000df8:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000dfa:	f7ff fd2b 	bl	8000854 <HAL_GetTick>
 8000dfe:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e00:	e004      	b.n	8000e0c <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e02:	f7ff fd27 	bl	8000854 <HAL_GetTick>
 8000e06:	1b40      	subs	r0, r0, r5
 8000e08:	2802      	cmp	r0, #2
 8000e0a:	d839      	bhi.n	8000e80 <HAL_RCC_OscConfig+0x23c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e0c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000e0e:	079f      	lsls	r7, r3, #30
 8000e10:	d4f7      	bmi.n	8000e02 <HAL_RCC_OscConfig+0x1be>
 8000e12:	e7ba      	b.n	8000d8a <HAL_RCC_OscConfig+0x146>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8000e16:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e18:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e1c:	641a      	str	r2, [r3, #64]	; 0x40
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e24:	9301      	str	r3, [sp, #4]
 8000e26:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000e28:	e781      	b.n	8000d2e <HAL_RCC_OscConfig+0xea>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e2a:	684a      	ldr	r2, [r1, #4]
 8000e2c:	0250      	lsls	r0, r2, #9
 8000e2e:	f57f af20 	bpl.w	8000c72 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e32:	4a36      	ldr	r2, [pc, #216]	; (8000f0c <HAL_RCC_OscConfig+0x2c8>)
 8000e34:	6812      	ldr	r2, [r2, #0]
 8000e36:	0391      	lsls	r1, r2, #14
 8000e38:	f57f af44 	bpl.w	8000cc4 <HAL_RCC_OscConfig+0x80>
 8000e3c:	6862      	ldr	r2, [r4, #4]
 8000e3e:	2a00      	cmp	r2, #0
 8000e40:	f47f af40 	bne.w	8000cc4 <HAL_RCC_OscConfig+0x80>
 8000e44:	e7cf      	b.n	8000de6 <HAL_RCC_OscConfig+0x1a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e46:	4931      	ldr	r1, [pc, #196]	; (8000f0c <HAL_RCC_OscConfig+0x2c8>)
 8000e48:	6920      	ldr	r0, [r4, #16]
 8000e4a:	680a      	ldr	r2, [r1, #0]
 8000e4c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000e50:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8000e54:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e56:	071a      	lsls	r2, r3, #28
 8000e58:	f57f af62 	bpl.w	8000d20 <HAL_RCC_OscConfig+0xdc>
 8000e5c:	e780      	b.n	8000d60 <HAL_RCC_OscConfig+0x11c>
      PWR->CR1 |= PWR_CR1_DBP;
 8000e5e:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e60:	461f      	mov	r7, r3
      PWR->CR1 |= PWR_CR1_DBP;
 8000e62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e66:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e68:	f7ff fcf4 	bl	8000854 <HAL_GetTick>
 8000e6c:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	05da      	lsls	r2, r3, #23
 8000e72:	f53f af61 	bmi.w	8000d38 <HAL_RCC_OscConfig+0xf4>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e76:	f7ff fced 	bl	8000854 <HAL_GetTick>
 8000e7a:	1b80      	subs	r0, r0, r6
 8000e7c:	2864      	cmp	r0, #100	; 0x64
 8000e7e:	d9f6      	bls.n	8000e6e <HAL_RCC_OscConfig+0x22a>
            return HAL_TIMEOUT;
 8000e80:	2003      	movs	r0, #3
}
 8000e82:	b002      	add	sp, #8
 8000e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e88:	4b20      	ldr	r3, [pc, #128]	; (8000f0c <HAL_RCC_OscConfig+0x2c8>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e8c:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e8e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e9a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e9c:	f7ff fcda 	bl	8000854 <HAL_GetTick>
 8000ea0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ea2:	e004      	b.n	8000eae <HAL_RCC_OscConfig+0x26a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ea4:	f7ff fcd6 	bl	8000854 <HAL_GetTick>
 8000ea8:	1b40      	subs	r0, r0, r5
 8000eaa:	2864      	cmp	r0, #100	; 0x64
 8000eac:	d8e8      	bhi.n	8000e80 <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eae:	6833      	ldr	r3, [r6, #0]
 8000eb0:	039b      	lsls	r3, r3, #14
 8000eb2:	d4f7      	bmi.n	8000ea4 <HAL_RCC_OscConfig+0x260>
 8000eb4:	e705      	b.n	8000cc2 <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eb6:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <HAL_RCC_OscConfig+0x2c8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eb8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ebc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ebe:	461f      	mov	r7, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ec0:	f022 0201 	bic.w	r2, r2, #1
 8000ec4:	671a      	str	r2, [r3, #112]	; 0x70
 8000ec6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000ec8:	f022 0204 	bic.w	r2, r2, #4
 8000ecc:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000ece:	f7ff fcc1 	bl	8000854 <HAL_GetTick>
 8000ed2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ed4:	e004      	b.n	8000ee0 <HAL_RCC_OscConfig+0x29c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ed6:	f7ff fcbd 	bl	8000854 <HAL_GetTick>
 8000eda:	1b80      	subs	r0, r0, r6
 8000edc:	4540      	cmp	r0, r8
 8000ede:	d8cf      	bhi.n	8000e80 <HAL_RCC_OscConfig+0x23c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ee0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ee2:	0798      	lsls	r0, r3, #30
 8000ee4:	d4f7      	bmi.n	8000ed6 <HAL_RCC_OscConfig+0x292>
    if (pwrclkchanged == SET)
 8000ee6:	2d00      	cmp	r5, #0
 8000ee8:	f43f af52 	beq.w	8000d90 <HAL_RCC_OscConfig+0x14c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000eec:	4a07      	ldr	r2, [pc, #28]	; (8000f0c <HAL_RCC_OscConfig+0x2c8>)
 8000eee:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000ef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef6:	e74b      	b.n	8000d90 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_DISABLE();
 8000ef8:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <HAL_RCC_OscConfig+0x2c8>)
 8000efa:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000efc:	461e      	mov	r6, r3
        __HAL_RCC_HSI_DISABLE();
 8000efe:	f022 0201 	bic.w	r2, r2, #1
 8000f02:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f04:	f7ff fca6 	bl	8000854 <HAL_GetTick>
 8000f08:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f0a:	e008      	b.n	8000f1e <HAL_RCC_OscConfig+0x2da>
 8000f0c:	40023800 	.word	0x40023800
 8000f10:	40007000 	.word	0x40007000
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f14:	f7ff fc9e 	bl	8000854 <HAL_GetTick>
 8000f18:	1b40      	subs	r0, r0, r5
 8000f1a:	2802      	cmp	r0, #2
 8000f1c:	d8b0      	bhi.n	8000e80 <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f1e:	6833      	ldr	r3, [r6, #0]
 8000f20:	0799      	lsls	r1, r3, #30
 8000f22:	d4f7      	bmi.n	8000f14 <HAL_RCC_OscConfig+0x2d0>
 8000f24:	6823      	ldr	r3, [r4, #0]
 8000f26:	e6f9      	b.n	8000d1c <HAL_RCC_OscConfig+0xd8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f28:	4a42      	ldr	r2, [pc, #264]	; (8001034 <HAL_RCC_OscConfig+0x3f0>)
 8000f2a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000f32:	f7ff fc8f 	bl	8000854 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f36:	4f3f      	ldr	r7, [pc, #252]	; (8001034 <HAL_RCC_OscConfig+0x3f0>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f38:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000f3c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f3e:	e004      	b.n	8000f4a <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f40:	f7ff fc88 	bl	8000854 <HAL_GetTick>
 8000f44:	1b80      	subs	r0, r0, r6
 8000f46:	4540      	cmp	r0, r8
 8000f48:	d89a      	bhi.n	8000e80 <HAL_RCC_OscConfig+0x23c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f4c:	079b      	lsls	r3, r3, #30
 8000f4e:	d5f7      	bpl.n	8000f40 <HAL_RCC_OscConfig+0x2fc>
    if (pwrclkchanged == SET)
 8000f50:	2d00      	cmp	r5, #0
 8000f52:	f43f af1d 	beq.w	8000d90 <HAL_RCC_OscConfig+0x14c>
 8000f56:	e7c9      	b.n	8000eec <HAL_RCC_OscConfig+0x2a8>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f58:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 8000f5a:	685a      	ldr	r2, [r3, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f5c:	f43f af36 	beq.w	8000dcc <HAL_RCC_OscConfig+0x188>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f60:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f64:	69e1      	ldr	r1, [r4, #28]
 8000f66:	428b      	cmp	r3, r1
 8000f68:	f47f af3d 	bne.w	8000de6 <HAL_RCC_OscConfig+0x1a2>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000f6c:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f70:	6a21      	ldr	r1, [r4, #32]
 8000f72:	428b      	cmp	r3, r1
 8000f74:	f47f af37 	bne.w	8000de6 <HAL_RCC_OscConfig+0x1a2>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000f78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000f7c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000f7e:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000f80:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8000f84:	f47f af2f 	bne.w	8000de6 <HAL_RCC_OscConfig+0x1a2>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8000f88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f8a:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 8000f8e:	085b      	lsrs	r3, r3, #1
 8000f90:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000f92:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8000f96:	f47f af26 	bne.w	8000de6 <HAL_RCC_OscConfig+0x1a2>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000f9a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000f9c:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8000fa0:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
  return HAL_OK;
 8000fa4:	bf14      	ite	ne
 8000fa6:	2001      	movne	r0, #1
 8000fa8:	2000      	moveq	r0, #0
 8000faa:	e70f      	b.n	8000dcc <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fac:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	e674      	b.n	8000ca6 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fbc:	f042 0204 	orr.w	r2, r2, #4
 8000fc0:	671a      	str	r2, [r3, #112]	; 0x70
 8000fc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000fc4:	f042 0201 	orr.w	r2, r2, #1
 8000fc8:	671a      	str	r2, [r3, #112]	; 0x70
 8000fca:	e7b2      	b.n	8000f32 <HAL_RCC_OscConfig+0x2ee>
    return HAL_ERROR;
 8000fcc:	2001      	movs	r0, #1
}
 8000fce:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8000fd0:	f7ff fc40 	bl	8000854 <HAL_GetTick>
 8000fd4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fd6:	e005      	b.n	8000fe4 <HAL_RCC_OscConfig+0x3a0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fd8:	f7ff fc3c 	bl	8000854 <HAL_GetTick>
 8000fdc:	1b80      	subs	r0, r0, r6
 8000fde:	2802      	cmp	r0, #2
 8000fe0:	f63f af4e 	bhi.w	8000e80 <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fe4:	682b      	ldr	r3, [r5, #0]
 8000fe6:	0199      	lsls	r1, r3, #6
 8000fe8:	d4f6      	bmi.n	8000fd8 <HAL_RCC_OscConfig+0x394>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000fec:	69e3      	ldr	r3, [r4, #28]
 8000fee:	0852      	lsrs	r2, r2, #1
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ff0:	4e10      	ldr	r6, [pc, #64]	; (8001034 <HAL_RCC_OscConfig+0x3f0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ff2:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 8000ff6:	3a01      	subs	r2, #1
 8000ff8:	430b      	orrs	r3, r1
 8000ffa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000ffc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001000:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001004:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001008:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800100c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800100e:	682b      	ldr	r3, [r5, #0]
 8001010:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001014:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001016:	f7ff fc1d 	bl	8000854 <HAL_GetTick>
 800101a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800101c:	e005      	b.n	800102a <HAL_RCC_OscConfig+0x3e6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800101e:	f7ff fc19 	bl	8000854 <HAL_GetTick>
 8001022:	1b00      	subs	r0, r0, r4
 8001024:	2802      	cmp	r0, #2
 8001026:	f63f af2b 	bhi.w	8000e80 <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800102a:	6833      	ldr	r3, [r6, #0]
 800102c:	019a      	lsls	r2, r3, #6
 800102e:	d5f6      	bpl.n	800101e <HAL_RCC_OscConfig+0x3da>
 8001030:	e6cb      	b.n	8000dca <HAL_RCC_OscConfig+0x186>
 8001032:	bf00      	nop
 8001034:	40023800 	.word	0x40023800

08001038 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001038:	4916      	ldr	r1, [pc, #88]	; (8001094 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 800103a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800103c:	688b      	ldr	r3, [r1, #8]
 800103e:	f003 030c 	and.w	r3, r3, #12
 8001042:	2b04      	cmp	r3, #4
 8001044:	d01b      	beq.n	800107e <HAL_RCC_GetSysClockFreq+0x46>
 8001046:	2b08      	cmp	r3, #8
 8001048:	d117      	bne.n	800107a <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800104a:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800104c:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800104e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001052:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001054:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8001058:	d113      	bne.n	8001082 <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800105a:	480f      	ldr	r0, [pc, #60]	; (8001098 <HAL_RCC_GetSysClockFreq+0x60>)
 800105c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001060:	fba1 0100 	umull	r0, r1, r1, r0
 8001064:	f7ff f8d0 	bl	8000208 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001068:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <HAL_RCC_GetSysClockFreq+0x5c>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001070:	3301      	adds	r3, #1
 8001072:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8001074:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001078:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 800107a:	4807      	ldr	r0, [pc, #28]	; (8001098 <HAL_RCC_GetSysClockFreq+0x60>)
}
 800107c:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800107e:	4807      	ldr	r0, [pc, #28]	; (800109c <HAL_RCC_GetSysClockFreq+0x64>)
}
 8001080:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001082:	4806      	ldr	r0, [pc, #24]	; (800109c <HAL_RCC_GetSysClockFreq+0x64>)
 8001084:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001088:	2300      	movs	r3, #0
 800108a:	fba1 0100 	umull	r0, r1, r1, r0
 800108e:	f7ff f8bb 	bl	8000208 <__aeabi_uldivmod>
 8001092:	e7e9      	b.n	8001068 <HAL_RCC_GetSysClockFreq+0x30>
 8001094:	40023800 	.word	0x40023800
 8001098:	00f42400 	.word	0x00f42400
 800109c:	017d7840 	.word	0x017d7840

080010a0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80010a0:	2800      	cmp	r0, #0
 80010a2:	f000 808d 	beq.w	80011c0 <HAL_RCC_ClockConfig+0x120>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010a6:	4a4a      	ldr	r2, [pc, #296]	; (80011d0 <HAL_RCC_ClockConfig+0x130>)
 80010a8:	6813      	ldr	r3, [r2, #0]
 80010aa:	f003 030f 	and.w	r3, r3, #15
 80010ae:	428b      	cmp	r3, r1
{
 80010b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010b4:	4604      	mov	r4, r0
 80010b6:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010b8:	d20c      	bcs.n	80010d4 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ba:	6813      	ldr	r3, [r2, #0]
 80010bc:	f023 030f 	bic.w	r3, r3, #15
 80010c0:	430b      	orrs	r3, r1
 80010c2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010c4:	6813      	ldr	r3, [r2, #0]
 80010c6:	f003 030f 	and.w	r3, r3, #15
 80010ca:	428b      	cmp	r3, r1
 80010cc:	d002      	beq.n	80010d4 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80010ce:	2001      	movs	r0, #1
}
 80010d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010d4:	6823      	ldr	r3, [r4, #0]
 80010d6:	0798      	lsls	r0, r3, #30
 80010d8:	d514      	bpl.n	8001104 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010da:	0759      	lsls	r1, r3, #29
 80010dc:	d504      	bpl.n	80010e8 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010de:	493d      	ldr	r1, [pc, #244]	; (80011d4 <HAL_RCC_ClockConfig+0x134>)
 80010e0:	688a      	ldr	r2, [r1, #8]
 80010e2:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80010e6:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010e8:	071a      	lsls	r2, r3, #28
 80010ea:	d504      	bpl.n	80010f6 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010ec:	4939      	ldr	r1, [pc, #228]	; (80011d4 <HAL_RCC_ClockConfig+0x134>)
 80010ee:	688a      	ldr	r2, [r1, #8]
 80010f0:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80010f4:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010f6:	4937      	ldr	r1, [pc, #220]	; (80011d4 <HAL_RCC_ClockConfig+0x134>)
 80010f8:	68a0      	ldr	r0, [r4, #8]
 80010fa:	688a      	ldr	r2, [r1, #8]
 80010fc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001100:	4302      	orrs	r2, r0
 8001102:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001104:	07df      	lsls	r7, r3, #31
 8001106:	d521      	bpl.n	800114c <HAL_RCC_ClockConfig+0xac>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001108:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110a:	4b32      	ldr	r3, [pc, #200]	; (80011d4 <HAL_RCC_ClockConfig+0x134>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800110c:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110e:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001110:	d058      	beq.n	80011c4 <HAL_RCC_ClockConfig+0x124>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001112:	2a02      	cmp	r2, #2
 8001114:	d051      	beq.n	80011ba <HAL_RCC_ClockConfig+0x11a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001116:	0799      	lsls	r1, r3, #30
 8001118:	d5d9      	bpl.n	80010ce <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800111a:	492e      	ldr	r1, [pc, #184]	; (80011d4 <HAL_RCC_ClockConfig+0x134>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800111c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001120:	688b      	ldr	r3, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001122:	460f      	mov	r7, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001124:	f023 0303 	bic.w	r3, r3, #3
 8001128:	4313      	orrs	r3, r2
 800112a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800112c:	f7ff fb92 	bl	8000854 <HAL_GetTick>
 8001130:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001132:	e004      	b.n	800113e <HAL_RCC_ClockConfig+0x9e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001134:	f7ff fb8e 	bl	8000854 <HAL_GetTick>
 8001138:	1b80      	subs	r0, r0, r6
 800113a:	4540      	cmp	r0, r8
 800113c:	d845      	bhi.n	80011ca <HAL_RCC_ClockConfig+0x12a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	6862      	ldr	r2, [r4, #4]
 8001142:	f003 030c 	and.w	r3, r3, #12
 8001146:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800114a:	d1f3      	bne.n	8001134 <HAL_RCC_ClockConfig+0x94>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800114c:	4a20      	ldr	r2, [pc, #128]	; (80011d0 <HAL_RCC_ClockConfig+0x130>)
 800114e:	6813      	ldr	r3, [r2, #0]
 8001150:	f003 030f 	and.w	r3, r3, #15
 8001154:	42ab      	cmp	r3, r5
 8001156:	d909      	bls.n	800116c <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001158:	6813      	ldr	r3, [r2, #0]
 800115a:	f023 030f 	bic.w	r3, r3, #15
 800115e:	432b      	orrs	r3, r5
 8001160:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001162:	6813      	ldr	r3, [r2, #0]
 8001164:	f003 030f 	and.w	r3, r3, #15
 8001168:	42ab      	cmp	r3, r5
 800116a:	d1b0      	bne.n	80010ce <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800116c:	6823      	ldr	r3, [r4, #0]
 800116e:	075a      	lsls	r2, r3, #29
 8001170:	d506      	bpl.n	8001180 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001172:	4918      	ldr	r1, [pc, #96]	; (80011d4 <HAL_RCC_ClockConfig+0x134>)
 8001174:	68e0      	ldr	r0, [r4, #12]
 8001176:	688a      	ldr	r2, [r1, #8]
 8001178:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800117c:	4302      	orrs	r2, r0
 800117e:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001180:	071b      	lsls	r3, r3, #28
 8001182:	d507      	bpl.n	8001194 <HAL_RCC_ClockConfig+0xf4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001184:	4a13      	ldr	r2, [pc, #76]	; (80011d4 <HAL_RCC_ClockConfig+0x134>)
 8001186:	6921      	ldr	r1, [r4, #16]
 8001188:	6893      	ldr	r3, [r2, #8]
 800118a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800118e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001192:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001194:	f7ff ff50 	bl	8001038 <HAL_RCC_GetSysClockFreq>
 8001198:	4a0e      	ldr	r2, [pc, #56]	; (80011d4 <HAL_RCC_ClockConfig+0x134>)
 800119a:	4c0f      	ldr	r4, [pc, #60]	; (80011d8 <HAL_RCC_ClockConfig+0x138>)
 800119c:	4603      	mov	r3, r0
 800119e:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 80011a0:	480e      	ldr	r0, [pc, #56]	; (80011dc <HAL_RCC_ClockConfig+0x13c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80011a2:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80011a6:	490e      	ldr	r1, [pc, #56]	; (80011e0 <HAL_RCC_ClockConfig+0x140>)
  HAL_InitTick(uwTickPrio);
 80011a8:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80011aa:	5ca2      	ldrb	r2, [r4, r2]
 80011ac:	40d3      	lsrs	r3, r2
 80011ae:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 80011b0:	f7ff fb14 	bl	80007dc <HAL_InitTick>
  return HAL_OK;
 80011b4:	2000      	movs	r0, #0
}
 80011b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011ba:	0198      	lsls	r0, r3, #6
 80011bc:	d4ad      	bmi.n	800111a <HAL_RCC_ClockConfig+0x7a>
 80011be:	e786      	b.n	80010ce <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80011c0:	2001      	movs	r0, #1
}
 80011c2:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c4:	039e      	lsls	r6, r3, #14
 80011c6:	d4a8      	bmi.n	800111a <HAL_RCC_ClockConfig+0x7a>
 80011c8:	e781      	b.n	80010ce <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 80011ca:	2003      	movs	r0, #3
 80011cc:	e780      	b.n	80010d0 <HAL_RCC_ClockConfig+0x30>
 80011ce:	bf00      	nop
 80011d0:	40023c00 	.word	0x40023c00
 80011d4:	40023800 	.word	0x40023800
 80011d8:	080018a8 	.word	0x080018a8
 80011dc:	20000008 	.word	0x20000008
 80011e0:	20000000 	.word	0x20000000

080011e4 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80011e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011e6:	460c      	mov	r4, r1
 80011e8:	4617      	mov	r7, r2
 80011ea:	b083      	sub	sp, #12
 80011ec:	4606      	mov	r6, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80011ee:	4427      	add	r7, r4
 80011f0:	f7ff fb30 	bl	8000854 <HAL_GetTick>
 80011f4:	1a3d      	subs	r5, r7, r0
  tmp_tickstart = HAL_GetTick();
 80011f6:	f7ff fb2d 	bl	8000854 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80011fa:	4b25      	ldr	r3, [pc, #148]	; (8001290 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xac>)
  tmp_tickstart = HAL_GetTick();
 80011fc:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8001204:	fb05 f303 	mul.w	r3, r5, r3
 8001208:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800120a:	6832      	ldr	r2, [r6, #0]
 800120c:	e001      	b.n	8001212 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
  {
    if (Timeout != HAL_MAX_DELAY)
 800120e:	1c63      	adds	r3, r4, #1
 8001210:	d106      	bne.n	8001220 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001212:	6893      	ldr	r3, [r2, #8]
 8001214:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8001218:	d1f9      	bne.n	800120e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
      }
      count--;
    }
  }

  return HAL_OK;
 800121a:	4618      	mov	r0, r3
}
 800121c:	b003      	add	sp, #12
 800121e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001220:	f7ff fb18 	bl	8000854 <HAL_GetTick>
 8001224:	1bc0      	subs	r0, r0, r7
 8001226:	42a8      	cmp	r0, r5
 8001228:	d208      	bcs.n	800123c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x58>
      if(count == 0U)
 800122a:	9a01      	ldr	r2, [sp, #4]
      count--;
 800122c:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800122e:	2a00      	cmp	r2, #0
      count--;
 8001230:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
        tmp_timeout = 0U;
 8001234:	bf08      	it	eq
 8001236:	2500      	moveq	r5, #0
      count--;
 8001238:	9301      	str	r3, [sp, #4]
 800123a:	e7e6      	b.n	800120a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800123c:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001240:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001242:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001246:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800124a:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800124c:	d014      	beq.n	8001278 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800124e:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8001250:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001254:	d007      	beq.n	8001266 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x82>
        hspi->State = HAL_SPI_STATE_READY;
 8001256:	2101      	movs	r1, #1
        __HAL_UNLOCK(hspi);
 8001258:	2200      	movs	r2, #0
 800125a:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800125c:	f886 105d 	strb.w	r1, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8001260:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 8001264:	e7da      	b.n	800121c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x38>
          SPI_RESET_CRC(hspi);
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	e7ee      	b.n	8001256 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001278:	68b2      	ldr	r2, [r6, #8]
 800127a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800127e:	d002      	beq.n	8001286 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa2>
 8001280:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001284:	d1e3      	bne.n	800124e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
          __HAL_SPI_DISABLE(hspi);
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	e7de      	b.n	800124e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
 8001290:	20000000 	.word	0x20000000

08001294 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8001294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001298:	4698      	mov	r8, r3
 800129a:	4616      	mov	r6, r2
 800129c:	b082      	sub	sp, #8
 800129e:	460c      	mov	r4, r1
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80012a0:	44b0      	add	r8, r6
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80012a2:	4605      	mov	r5, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80012a4:	f7ff fad6 	bl	8000854 <HAL_GetTick>
 80012a8:	eba8 0700 	sub.w	r7, r8, r0
  tmp_tickstart = HAL_GetTick();
 80012ac:	f7ff fad2 	bl	8000854 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80012b0:	4b2a      	ldr	r3, [pc, #168]	; (800135c <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc8>)
  tmp_tickstart = HAL_GetTick();
 80012b2:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80012ba:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80012be:	0d1b      	lsrs	r3, r3, #20
 80012c0:	fb07 f303 	mul.w	r3, r7, r3
 80012c4:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 80012c6:	6829      	ldr	r1, [r5, #0]
 80012c8:	e008      	b.n	80012dc <SPI_WaitFifoStateUntilTimeout.constprop.0+0x48>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80012ca:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 80012ce:	d103      	bne.n	80012d8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x44>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80012d0:	7b0b      	ldrb	r3, [r1, #12]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	9300      	str	r3, [sp, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80012d6:	9b00      	ldr	r3, [sp, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80012d8:	1c73      	adds	r3, r6, #1
 80012da:	d106      	bne.n	80012ea <SPI_WaitFifoStateUntilTimeout.constprop.0+0x56>
  while ((hspi->Instance->SR & Fifo) != State)
 80012dc:	688b      	ldr	r3, [r1, #8]
 80012de:	4023      	ands	r3, r4
 80012e0:	d1f3      	bne.n	80012ca <SPI_WaitFifoStateUntilTimeout.constprop.0+0x36>
      }      
      count--;
    }
  }

  return HAL_OK;
 80012e2:	4618      	mov	r0, r3
}
 80012e4:	b002      	add	sp, #8
 80012e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80012ea:	f7ff fab3 	bl	8000854 <HAL_GetTick>
 80012ee:	eba0 0008 	sub.w	r0, r0, r8
 80012f2:	42b8      	cmp	r0, r7
 80012f4:	d208      	bcs.n	8001308 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x74>
      if(count == 0U)
 80012f6:	9a01      	ldr	r2, [sp, #4]
      count--;
 80012f8:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80012fa:	2a00      	cmp	r2, #0
      count--;
 80012fc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
        tmp_timeout = 0U;
 8001300:	bf08      	it	eq
 8001302:	2700      	moveq	r7, #0
      count--;
 8001304:	9301      	str	r3, [sp, #4]
 8001306:	e7de      	b.n	80012c6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x32>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001308:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800130c:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800130e:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001312:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001316:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001318:	d014      	beq.n	8001344 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb0>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800131a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800131c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001320:	d007      	beq.n	8001332 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x9e>
        hspi->State = HAL_SPI_STATE_READY;
 8001322:	2101      	movs	r1, #1
        __HAL_UNLOCK(hspi);
 8001324:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 8001326:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 8001328:	f885 105d 	strb.w	r1, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800132c:	f885 205c 	strb.w	r2, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 8001330:	e7d8      	b.n	80012e4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x50>
          SPI_RESET_CRC(hspi);
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	e7ee      	b.n	8001322 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001344:	68aa      	ldr	r2, [r5, #8]
 8001346:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800134a:	d002      	beq.n	8001352 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
 800134c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001350:	d1e3      	bne.n	800131a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
          __HAL_SPI_DISABLE(hspi);
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	e7de      	b.n	800131a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
 800135c:	20000000 	.word	0x20000000

08001360 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001360:	b570      	push	{r4, r5, r6, lr}
 8001362:	460d      	mov	r5, r1
 8001364:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001366:	4613      	mov	r3, r2
 8001368:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800136c:	462a      	mov	r2, r5
{
 800136e:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001370:	f7ff ff90 	bl	8001294 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8001374:	b970      	cbnz	r0, 8001394 <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001376:	4632      	mov	r2, r6
 8001378:	4629      	mov	r1, r5
 800137a:	4620      	mov	r0, r4
 800137c:	f7ff ff32 	bl	80011e4 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8001380:	b940      	cbnz	r0, 8001394 <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001382:	4633      	mov	r3, r6
 8001384:	462a      	mov	r2, r5
 8001386:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800138a:	4620      	mov	r0, r4
 800138c:	f7ff ff82 	bl	8001294 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8001390:	b900      	cbnz	r0, 8001394 <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8001392:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001394:	6e23      	ldr	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8001396:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001398:	f043 0320 	orr.w	r3, r3, #32
 800139c:	6623      	str	r3, [r4, #96]	; 0x60
}
 800139e:	bd70      	pop	{r4, r5, r6, pc}

080013a0 <HAL_SPI_Init>:
  if (hspi == NULL)
 80013a0:	2800      	cmp	r0, #0
 80013a2:	d075      	beq.n	8001490 <HAL_SPI_Init+0xf0>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80013a4:	6a42      	ldr	r2, [r0, #36]	; 0x24
{
 80013a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013aa:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80013ac:	2a00      	cmp	r2, #0
 80013ae:	d05e      	beq.n	800146e <HAL_SPI_Init+0xce>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80013b0:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80013b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013b6:	2100      	movs	r1, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 80013b8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013bc:	62a1      	str	r1, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80013be:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d05d      	beq.n	8001482 <HAL_SPI_Init+0xe2>
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80013c6:	68e6      	ldr	r6, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80013c8:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80013ca:	6821      	ldr	r1, [r4, #0]
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80013cc:	f5b6 6fe0 	cmp.w	r6, #1792	; 0x700
  hspi->State = HAL_SPI_STATE_BUSY;
 80013d0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80013d4:	f426 6000 	bic.w	r0, r6, #2048	; 0x800
  __HAL_SPI_DISABLE(hspi);
 80013d8:	680b      	ldr	r3, [r1, #0]
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80013da:	bf8c      	ite	hi
 80013dc:	2700      	movhi	r7, #0
 80013de:	f44f 5780 	movls.w	r7, #4096	; 0x1000
  __HAL_SPI_DISABLE(hspi);
 80013e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80013e6:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80013ea:	600b      	str	r3, [r1, #0]
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80013ec:	d145      	bne.n	800147a <HAL_SPI_Init+0xda>
 80013ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80013f0:	f403 5500 	and.w	r5, r3, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80013f4:	68a0      	ldr	r0, [r4, #8]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80013f6:	f002 0c10 	and.w	ip, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80013fa:	6863      	ldr	r3, [r4, #4]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80013fc:	f406 6670 	and.w	r6, r6, #3840	; 0xf00
 8001400:	6b62      	ldr	r2, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001402:	f400 4804 	and.w	r8, r0, #33792	; 0x8400
 8001406:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800140a:	6920      	ldr	r0, [r4, #16]
 800140c:	f8d4 e018 	ldr.w	lr, [r4, #24]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001410:	f002 0208 	and.w	r2, r2, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001414:	ea43 0308 	orr.w	r3, r3, r8
 8001418:	f000 0002 	and.w	r0, r0, #2
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800141c:	4332      	orrs	r2, r6
 800141e:	ea4f 461e 	mov.w	r6, lr, lsr #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001422:	4303      	orrs	r3, r0
 8001424:	6960      	ldr	r0, [r4, #20]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001426:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800142a:	f40e 7e00 	and.w	lr, lr, #512	; 0x200
 800142e:	f000 0001 	and.w	r0, r0, #1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001432:	4332      	orrs	r2, r6
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001434:	69e6      	ldr	r6, [r4, #28]
 8001436:	4303      	orrs	r3, r0
 8001438:	6a20      	ldr	r0, [r4, #32]
 800143a:	f006 0638 	and.w	r6, r6, #56	; 0x38
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800143e:	ea42 020c 	orr.w	r2, r2, ip
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001442:	ea43 030e 	orr.w	r3, r3, lr
 8001446:	f000 0080 	and.w	r0, r0, #128	; 0x80
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800144a:	433a      	orrs	r2, r7
  hspi->State     = HAL_SPI_STATE_READY;
 800144c:	2701      	movs	r7, #1
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800144e:	4333      	orrs	r3, r6
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001450:	2600      	movs	r6, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001452:	4303      	orrs	r3, r0
  return HAL_OK;
 8001454:	4630      	mov	r0, r6
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001456:	432b      	orrs	r3, r5
 8001458:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800145a:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800145c:	69cb      	ldr	r3, [r1, #28]
 800145e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001462:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001464:	6626      	str	r6, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001466:	f884 705d 	strb.w	r7, [r4, #93]	; 0x5d
}
 800146a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800146e:	6843      	ldr	r3, [r0, #4]
 8001470:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001474:	d09f      	beq.n	80013b6 <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001476:	61c2      	str	r2, [r0, #28]
 8001478:	e79d      	b.n	80013b6 <HAL_SPI_Init+0x16>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800147a:	2300      	movs	r3, #0
 800147c:	461d      	mov	r5, r3
 800147e:	62a3      	str	r3, [r4, #40]	; 0x28
 8001480:	e7b8      	b.n	80013f4 <HAL_SPI_Init+0x54>
    HAL_SPI_MspInit(hspi);
 8001482:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8001484:	f884 105c 	strb.w	r1, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8001488:	f7ff f91e 	bl	80006c8 <HAL_SPI_MspInit>
 800148c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800148e:	e79a      	b.n	80013c6 <HAL_SPI_Init+0x26>
    return HAL_ERROR;
 8001490:	2001      	movs	r0, #1
}
 8001492:	4770      	bx	lr

08001494 <HAL_SPI_TransmitReceive_IT>:
{
 8001494:	b430      	push	{r4, r5}
 8001496:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8001498:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 800149c:	2801      	cmp	r0, #1
 800149e:	d048      	beq.n	8001532 <HAL_SPI_TransmitReceive_IT+0x9e>
  tmp_state           = hspi->State;
 80014a0:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
  __HAL_LOCK(hspi);
 80014a4:	2501      	movs	r5, #1
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80014a6:	2801      	cmp	r0, #1
  __HAL_LOCK(hspi);
 80014a8:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
  tmp_state           = hspi->State;
 80014ac:	b2c5      	uxtb	r5, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80014ae:	d00e      	beq.n	80014ce <HAL_SPI_TransmitReceive_IT+0x3a>
 80014b0:	6860      	ldr	r0, [r4, #4]
 80014b2:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 80014b6:	d005      	beq.n	80014c4 <HAL_SPI_TransmitReceive_IT+0x30>
    errorcode = HAL_BUSY;
 80014b8:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 80014ba:	2300      	movs	r3, #0
 80014bc:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80014c0:	bc30      	pop	{r4, r5}
 80014c2:	4770      	bx	lr
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80014c4:	68a0      	ldr	r0, [r4, #8]
 80014c6:	2800      	cmp	r0, #0
 80014c8:	d1f6      	bne.n	80014b8 <HAL_SPI_TransmitReceive_IT+0x24>
 80014ca:	2d04      	cmp	r5, #4
 80014cc:	d1f4      	bne.n	80014b8 <HAL_SPI_TransmitReceive_IT+0x24>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	bf18      	it	ne
 80014d2:	2a00      	cmpne	r2, #0
 80014d4:	d02b      	beq.n	800152e <HAL_SPI_TransmitReceive_IT+0x9a>
 80014d6:	b351      	cbz	r1, 800152e <HAL_SPI_TransmitReceive_IT+0x9a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80014d8:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 80014dc:	2804      	cmp	r0, #4
 80014de:	d002      	beq.n	80014e6 <HAL_SPI_TransmitReceive_IT+0x52>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80014e0:	2005      	movs	r0, #5
 80014e2:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80014e6:	68e0      	ldr	r0, [r4, #12]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80014e8:	2500      	movs	r5, #0
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80014ea:	63a1      	str	r1, [r4, #56]	; 0x38
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80014ec:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80014f0:	6625      	str	r5, [r4, #96]	; 0x60
  hspi->TxXferSize  = Size;
 80014f2:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80014f4:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80014f6:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80014f8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 80014fc:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001500:	d91c      	bls.n	800153c <HAL_SPI_TransmitReceive_IT+0xa8>
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8001502:	4a14      	ldr	r2, [pc, #80]	; (8001554 <HAL_SPI_TransmitReceive_IT+0xc0>)
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8001504:	4b14      	ldr	r3, [pc, #80]	; (8001558 <HAL_SPI_TransmitReceive_IT+0xc4>)
 8001506:	e9c4 2313 	strd	r2, r3, [r4, #76]	; 0x4c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800150a:	6823      	ldr	r3, [r4, #0]
 800150c:	685a      	ldr	r2, [r3, #4]
 800150e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001512:	605a      	str	r2, [r3, #4]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001514:	685a      	ldr	r2, [r3, #4]
 8001516:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800151a:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800151c:	6818      	ldr	r0, [r3, #0]
 800151e:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8001522:	d109      	bne.n	8001538 <HAL_SPI_TransmitReceive_IT+0xa4>
    __HAL_SPI_ENABLE(hspi);
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	e7c5      	b.n	80014ba <HAL_SPI_TransmitReceive_IT+0x26>
    errorcode = HAL_ERROR;
 800152e:	2001      	movs	r0, #1
 8001530:	e7c3      	b.n	80014ba <HAL_SPI_TransmitReceive_IT+0x26>
  __HAL_LOCK(hspi);
 8001532:	2002      	movs	r0, #2
}
 8001534:	bc30      	pop	{r4, r5}
 8001536:	4770      	bx	lr
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001538:	2000      	movs	r0, #0
 800153a:	e7be      	b.n	80014ba <HAL_SPI_TransmitReceive_IT+0x26>
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800153c:	4907      	ldr	r1, [pc, #28]	; (800155c <HAL_SPI_TransmitReceive_IT+0xc8>)
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800153e:	2b01      	cmp	r3, #1
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8001540:	4a07      	ldr	r2, [pc, #28]	; (8001560 <HAL_SPI_TransmitReceive_IT+0xcc>)
 8001542:	e9c4 1213 	strd	r1, r2, [r4, #76]	; 0x4c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8001546:	d8e0      	bhi.n	800150a <HAL_SPI_TransmitReceive_IT+0x76>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001548:	6823      	ldr	r3, [r4, #0]
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	e7df      	b.n	8001514 <HAL_SPI_TransmitReceive_IT+0x80>
 8001554:	080016bd 	.word	0x080016bd
 8001558:	08001681 	.word	0x08001681
 800155c:	08001611 	.word	0x08001611
 8001560:	080015c1 	.word	0x080015c1

08001564 <HAL_SPI_RxCpltCallback>:
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop

08001568 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8001568:	b538      	push	{r3, r4, r5, lr}
 800156a:	4604      	mov	r4, r0
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800156c:	f7ff f972 	bl	8000854 <HAL_GetTick>

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8001570:	2164      	movs	r1, #100	; 0x64
  tickstart = HAL_GetTick();
 8001572:	4602      	mov	r2, r0
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8001574:	6825      	ldr	r5, [r4, #0]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8001576:	4620      	mov	r0, r4
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8001578:	686b      	ldr	r3, [r5, #4]
 800157a:	f023 0320 	bic.w	r3, r3, #32
 800157e:	606b      	str	r3, [r5, #4]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8001580:	f7ff feee 	bl	8001360 <SPI_EndRxTxTransaction>
 8001584:	b118      	cbz	r0, 800158e <SPI_CloseRxTx_ISR+0x26>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001586:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001588:	f043 0320 	orr.w	r3, r3, #32
 800158c:	6623      	str	r3, [r4, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800158e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001590:	b973      	cbnz	r3, 80015b0 <SPI_CloseRxTx_ISR+0x48>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8001592:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
        hspi->State = HAL_SPI_STATE_READY;
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8001596:	4620      	mov	r0, r4
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8001598:	2b04      	cmp	r3, #4
        hspi->State = HAL_SPI_STATE_READY;
 800159a:	f04f 0301 	mov.w	r3, #1
 800159e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80015a2:	d002      	beq.n	80015aa <SPI_CloseRxTx_ISR+0x42>
        hspi->State = HAL_SPI_STATE_READY;
        /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->TxRxCpltCallback(hspi);
#else
        HAL_SPI_TxRxCpltCallback(hspi);
 80015a4:	f7fe ffac 	bl	8000500 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80015a8:	bd38      	pop	{r3, r4, r5, pc}
        HAL_SPI_RxCpltCallback(hspi);
 80015aa:	f7ff ffdb 	bl	8001564 <HAL_SPI_RxCpltCallback>
}
 80015ae:	bd38      	pop	{r3, r4, r5, pc}
      hspi->State = HAL_SPI_STATE_READY;
 80015b0:	2301      	movs	r3, #1
      HAL_SPI_ErrorCallback(hspi);
 80015b2:	4620      	mov	r0, r4
      hspi->State = HAL_SPI_STATE_READY;
 80015b4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80015b8:	f7fe ffb8 	bl	800052c <HAL_SPI_ErrorCallback>
}
 80015bc:	bd38      	pop	{r3, r4, r5, pc}
 80015be:	bf00      	nop

080015c0 <SPI_2linesTxISR_8BIT>:
  if (hspi->TxXferCount >= 2U)
 80015c0:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80015c2:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if (hspi->TxXferCount >= 2U)
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	2b01      	cmp	r3, #1
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80015c8:	6803      	ldr	r3, [r0, #0]
  if (hspi->TxXferCount >= 2U)
 80015ca:	d914      	bls.n	80015f6 <SPI_2linesTxISR_8BIT+0x36>
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80015cc:	f832 1b02 	ldrh.w	r1, [r2], #2
 80015d0:	60d9      	str	r1, [r3, #12]
    hspi->TxXferCount -= 2U;
 80015d2:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80015d4:	6382      	str	r2, [r0, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 80015d6:	3b02      	subs	r3, #2
 80015d8:	b29b      	uxth	r3, r3
 80015da:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 80015dc:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80015de:	b29b      	uxth	r3, r3
 80015e0:	b943      	cbnz	r3, 80015f4 <SPI_2linesTxISR_8BIT+0x34>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80015e2:	6802      	ldr	r2, [r0, #0]
 80015e4:	6853      	ldr	r3, [r2, #4]
 80015e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015ea:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 80015ec:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	b153      	cbz	r3, 800160a <SPI_2linesTxISR_8BIT+0x4a>
}
 80015f4:	4770      	bx	lr
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80015f6:	7812      	ldrb	r2, [r2, #0]
 80015f8:	731a      	strb	r2, [r3, #12]
    hspi->TxXferCount--;
 80015fa:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
    hspi->pTxBuffPtr++;
 80015fc:	6b82      	ldr	r2, [r0, #56]	; 0x38
    hspi->TxXferCount--;
 80015fe:	3b01      	subs	r3, #1
    hspi->pTxBuffPtr++;
 8001600:	3201      	adds	r2, #1
    hspi->TxXferCount--;
 8001602:	b29b      	uxth	r3, r3
    hspi->pTxBuffPtr++;
 8001604:	6382      	str	r2, [r0, #56]	; 0x38
    hspi->TxXferCount--;
 8001606:	87c3      	strh	r3, [r0, #62]	; 0x3e
 8001608:	e7e8      	b.n	80015dc <SPI_2linesTxISR_8BIT+0x1c>
      SPI_CloseRxTx_ISR(hspi);
 800160a:	f7ff bfad 	b.w	8001568 <SPI_CloseRxTx_ISR>
 800160e:	bf00      	nop

08001610 <SPI_2linesRxISR_8BIT>:
  if (hspi->RxXferCount > 1U)
 8001610:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8001614:	b29b      	uxth	r3, r3
 8001616:	2b01      	cmp	r3, #1
 8001618:	d922      	bls.n	8001660 <SPI_2linesRxISR_8BIT+0x50>
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800161a:	6801      	ldr	r1, [r0, #0]
 800161c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800161e:	68cb      	ldr	r3, [r1, #12]
 8001620:	f822 3b02 	strh.w	r3, [r2], #2
    hspi->RxXferCount -= 2U;
 8001624:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8001628:	6402      	str	r2, [r0, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800162a:	3b02      	subs	r3, #2
 800162c:	b29b      	uxth	r3, r3
 800162e:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8001632:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8001636:	b29b      	uxth	r3, r3
 8001638:	2b01      	cmp	r3, #1
 800163a:	d00c      	beq.n	8001656 <SPI_2linesRxISR_8BIT+0x46>
  if (hspi->RxXferCount == 0U)
 800163c:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8001640:	b29b      	uxth	r3, r3
 8001642:	b93b      	cbnz	r3, 8001654 <SPI_2linesRxISR_8BIT+0x44>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8001644:	6802      	ldr	r2, [r0, #0]
 8001646:	6853      	ldr	r3, [r2, #4]
 8001648:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800164c:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 800164e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8001650:	b29b      	uxth	r3, r3
 8001652:	b19b      	cbz	r3, 800167c <SPI_2linesRxISR_8BIT+0x6c>
}
 8001654:	4770      	bx	lr
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001656:	684b      	ldr	r3, [r1, #4]
 8001658:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800165c:	604b      	str	r3, [r1, #4]
 800165e:	e7ed      	b.n	800163c <SPI_2linesRxISR_8BIT+0x2c>
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8001660:	6802      	ldr	r2, [r0, #0]
 8001662:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001664:	7b12      	ldrb	r2, [r2, #12]
 8001666:	701a      	strb	r2, [r3, #0]
    hspi->RxXferCount--;
 8001668:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    hspi->pRxBuffPtr++;
 800166c:	6c02      	ldr	r2, [r0, #64]	; 0x40
    hspi->RxXferCount--;
 800166e:	3b01      	subs	r3, #1
    hspi->pRxBuffPtr++;
 8001670:	3201      	adds	r2, #1
    hspi->RxXferCount--;
 8001672:	b29b      	uxth	r3, r3
    hspi->pRxBuffPtr++;
 8001674:	6402      	str	r2, [r0, #64]	; 0x40
    hspi->RxXferCount--;
 8001676:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
 800167a:	e7df      	b.n	800163c <SPI_2linesRxISR_8BIT+0x2c>
      SPI_CloseRxTx_ISR(hspi);
 800167c:	f7ff bf74 	b.w	8001568 <SPI_CloseRxTx_ISR>

08001680 <SPI_2linesTxISR_16BIT>:
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001680:	6b81      	ldr	r1, [r0, #56]	; 0x38
{
 8001682:	b410      	push	{r4}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001684:	f831 2b02 	ldrh.w	r2, [r1], #2
 8001688:	6804      	ldr	r4, [r0, #0]
 800168a:	60e2      	str	r2, [r4, #12]
  hspi->TxXferCount--;
 800168c:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800168e:	6381      	str	r1, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 8001690:	3a01      	subs	r2, #1
 8001692:	b292      	uxth	r2, r2
 8001694:	87c2      	strh	r2, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8001696:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
 8001698:	b292      	uxth	r2, r2
 800169a:	b93a      	cbnz	r2, 80016ac <SPI_2linesTxISR_16BIT+0x2c>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800169c:	6862      	ldr	r2, [r4, #4]
 800169e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016a2:	6062      	str	r2, [r4, #4]
    if (hspi->RxXferCount == 0U)
 80016a4:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	b113      	cbz	r3, 80016b2 <SPI_2linesTxISR_16BIT+0x32>
}
 80016ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	f85d 4b04 	ldr.w	r4, [sp], #4
      SPI_CloseRxTx_ISR(hspi);
 80016b6:	f7ff bf57 	b.w	8001568 <SPI_CloseRxTx_ISR>
 80016ba:	bf00      	nop

080016bc <SPI_2linesRxISR_16BIT>:
{
 80016bc:	b410      	push	{r4}
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80016be:	6804      	ldr	r4, [r0, #0]
 80016c0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80016c2:	68e2      	ldr	r2, [r4, #12]
 80016c4:	f821 2b02 	strh.w	r2, [r1], #2
  hspi->RxXferCount--;
 80016c8:	f8b0 2046 	ldrh.w	r2, [r0, #70]	; 0x46
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80016cc:	6401      	str	r1, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 80016ce:	3a01      	subs	r2, #1
 80016d0:	b292      	uxth	r2, r2
 80016d2:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 80016d6:	f8b0 2046 	ldrh.w	r2, [r0, #70]	; 0x46
 80016da:	b292      	uxth	r2, r2
 80016dc:	b932      	cbnz	r2, 80016ec <SPI_2linesRxISR_16BIT+0x30>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80016de:	6862      	ldr	r2, [r4, #4]
 80016e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016e4:	6062      	str	r2, [r4, #4]
    if (hspi->TxXferCount == 0U)
 80016e6:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	b113      	cbz	r3, 80016f2 <SPI_2linesRxISR_16BIT+0x36>
}
 80016ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	f85d 4b04 	ldr.w	r4, [sp], #4
      SPI_CloseRxTx_ISR(hspi);
 80016f6:	f7ff bf37 	b.w	8001568 <SPI_CloseRxTx_ISR>
 80016fa:	bf00      	nop

080016fc <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 80016fc:	6802      	ldr	r2, [r0, #0]
 80016fe:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8001700:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001702:	f013 0f40 	tst.w	r3, #64	; 0x40
{
 8001706:	b530      	push	{r4, r5, lr}
 8001708:	4604      	mov	r4, r0
 800170a:	b085      	sub	sp, #20
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800170c:	f3c3 1580 	ubfx	r5, r3, #6, #1
 8001710:	d105      	bne.n	800171e <HAL_SPI_IRQHandler+0x22>
 8001712:	f013 0f01 	tst.w	r3, #1
 8001716:	d002      	beq.n	800171e <HAL_SPI_IRQHandler+0x22>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001718:	f011 0f40 	tst.w	r1, #64	; 0x40
 800171c:	d17a      	bne.n	8001814 <HAL_SPI_IRQHandler+0x118>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800171e:	0798      	lsls	r0, r3, #30
 8001720:	d501      	bpl.n	8001726 <HAL_SPI_IRQHandler+0x2a>
 8001722:	0608      	lsls	r0, r1, #24
 8001724:	d470      	bmi.n	8001808 <HAL_SPI_IRQHandler+0x10c>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001726:	f013 0f20 	tst.w	r3, #32
 800172a:	f3c3 1040 	ubfx	r0, r3, #5, #1
 800172e:	d049      	beq.n	80017c4 <HAL_SPI_IRQHandler+0xc8>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001730:	0688      	lsls	r0, r1, #26
 8001732:	d545      	bpl.n	80017c0 <HAL_SPI_IRQHandler+0xc4>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001734:	b175      	cbz	r5, 8001754 <HAL_SPI_IRQHandler+0x58>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001736:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 800173a:	2803      	cmp	r0, #3
 800173c:	d06c      	beq.n	8001818 <HAL_SPI_IRQHandler+0x11c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800173e:	6e20      	ldr	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001740:	2500      	movs	r5, #0
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001742:	f040 0004 	orr.w	r0, r0, #4
 8001746:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001748:	9500      	str	r5, [sp, #0]
 800174a:	68d0      	ldr	r0, [r2, #12]
 800174c:	9000      	str	r0, [sp, #0]
 800174e:	6890      	ldr	r0, [r2, #8]
 8001750:	9000      	str	r0, [sp, #0]
 8001752:	9800      	ldr	r0, [sp, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001754:	6e20      	ldr	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001756:	2500      	movs	r5, #0
 8001758:	f3c3 2300 	ubfx	r3, r3, #8, #1
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800175c:	f040 0001 	orr.w	r0, r0, #1
 8001760:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001762:	9502      	str	r5, [sp, #8]
 8001764:	6890      	ldr	r0, [r2, #8]
 8001766:	9002      	str	r0, [sp, #8]
 8001768:	6810      	ldr	r0, [r2, #0]
 800176a:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 800176e:	6010      	str	r0, [r2, #0]
 8001770:	9802      	ldr	r0, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8001772:	2b00      	cmp	r3, #0
 8001774:	d13e      	bne.n	80017f4 <HAL_SPI_IRQHandler+0xf8>
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001776:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001778:	b313      	cbz	r3, 80017c0 <HAL_SPI_IRQHandler+0xc4>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800177a:	6853      	ldr	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800177c:	2001      	movs	r0, #1
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800177e:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8001782:	6053      	str	r3, [r2, #4]
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001784:	078b      	lsls	r3, r1, #30
      hspi->State = HAL_SPI_STATE_READY;
 8001786:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800178a:	d04d      	beq.n	8001828 <HAL_SPI_IRQHandler+0x12c>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800178c:	6853      	ldr	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 800178e:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001790:	f023 0303 	bic.w	r3, r3, #3
 8001794:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8001796:	b140      	cbz	r0, 80017aa <HAL_SPI_IRQHandler+0xae>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001798:	4b25      	ldr	r3, [pc, #148]	; (8001830 <HAL_SPI_IRQHandler+0x134>)
 800179a:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800179c:	f7ff f8d4 	bl	8000948 <HAL_DMA_Abort_IT>
 80017a0:	b118      	cbz	r0, 80017aa <HAL_SPI_IRQHandler+0xae>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80017a2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80017a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017a8:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80017aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80017ac:	b140      	cbz	r0, 80017c0 <HAL_SPI_IRQHandler+0xc4>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80017ae:	4b20      	ldr	r3, [pc, #128]	; (8001830 <HAL_SPI_IRQHandler+0x134>)
 80017b0:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80017b2:	f7ff f8c9 	bl	8000948 <HAL_DMA_Abort_IT>
 80017b6:	b118      	cbz	r0, 80017c0 <HAL_SPI_IRQHandler+0xc4>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80017b8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80017ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017be:	6623      	str	r3, [r4, #96]	; 0x60
}
 80017c0:	b005      	add	sp, #20
 80017c2:	bd30      	pop	{r4, r5, pc}
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80017c4:	b195      	cbz	r5, 80017ec <HAL_SPI_IRQHandler+0xf0>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80017c6:	068d      	lsls	r5, r1, #26
 80017c8:	d5fa      	bpl.n	80017c0 <HAL_SPI_IRQHandler+0xc4>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80017ca:	f894 505d 	ldrb.w	r5, [r4, #93]	; 0x5d
 80017ce:	2d03      	cmp	r5, #3
 80017d0:	d022      	beq.n	8001818 <HAL_SPI_IRQHandler+0x11c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80017d2:	6e25      	ldr	r5, [r4, #96]	; 0x60
 80017d4:	f3c3 2300 	ubfx	r3, r3, #8, #1
 80017d8:	f045 0504 	orr.w	r5, r5, #4
 80017dc:	6625      	str	r5, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80017de:	9000      	str	r0, [sp, #0]
 80017e0:	68d0      	ldr	r0, [r2, #12]
 80017e2:	9000      	str	r0, [sp, #0]
 80017e4:	6890      	ldr	r0, [r2, #8]
 80017e6:	9000      	str	r0, [sp, #0]
 80017e8:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80017ea:	e7c2      	b.n	8001772 <HAL_SPI_IRQHandler+0x76>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80017ec:	05dd      	lsls	r5, r3, #23
 80017ee:	d5e7      	bpl.n	80017c0 <HAL_SPI_IRQHandler+0xc4>
 80017f0:	068b      	lsls	r3, r1, #26
 80017f2:	d5e5      	bpl.n	80017c0 <HAL_SPI_IRQHandler+0xc4>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80017f4:	6e23      	ldr	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80017f6:	2000      	movs	r0, #0
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80017f8:	f043 0308 	orr.w	r3, r3, #8
 80017fc:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80017fe:	9003      	str	r0, [sp, #12]
 8001800:	6893      	ldr	r3, [r2, #8]
 8001802:	9303      	str	r3, [sp, #12]
 8001804:	9b03      	ldr	r3, [sp, #12]
 8001806:	e7b6      	b.n	8001776 <HAL_SPI_IRQHandler+0x7a>
    hspi->TxISR(hspi);
 8001808:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800180a:	4620      	mov	r0, r4
}
 800180c:	b005      	add	sp, #20
 800180e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    hspi->TxISR(hspi);
 8001812:	4718      	bx	r3
    hspi->RxISR(hspi);
 8001814:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001816:	e7f9      	b.n	800180c <HAL_SPI_IRQHandler+0x110>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001818:	2300      	movs	r3, #0
 800181a:	9301      	str	r3, [sp, #4]
 800181c:	68d3      	ldr	r3, [r2, #12]
 800181e:	9301      	str	r3, [sp, #4]
 8001820:	6893      	ldr	r3, [r2, #8]
 8001822:	9301      	str	r3, [sp, #4]
 8001824:	9b01      	ldr	r3, [sp, #4]
        return;
 8001826:	e7cb      	b.n	80017c0 <HAL_SPI_IRQHandler+0xc4>
        HAL_SPI_ErrorCallback(hspi);
 8001828:	4620      	mov	r0, r4
 800182a:	f7fe fe7f 	bl	800052c <HAL_SPI_ErrorCallback>
 800182e:	e7c7      	b.n	80017c0 <HAL_SPI_IRQHandler+0xc4>
 8001830:	08001835 	.word	0x08001835

08001834 <SPI_DMAAbortOnError>:
{
 8001834:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001836:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 8001838:	2300      	movs	r3, #0
 800183a:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800183e:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8001840:	f7fe fe74 	bl	800052c <HAL_SPI_ErrorCallback>
}
 8001844:	bd08      	pop	{r3, pc}
 8001846:	bf00      	nop

08001848 <__libc_init_array>:
 8001848:	b570      	push	{r4, r5, r6, lr}
 800184a:	4d0d      	ldr	r5, [pc, #52]	; (8001880 <__libc_init_array+0x38>)
 800184c:	4c0d      	ldr	r4, [pc, #52]	; (8001884 <__libc_init_array+0x3c>)
 800184e:	1b64      	subs	r4, r4, r5
 8001850:	10a4      	asrs	r4, r4, #2
 8001852:	2600      	movs	r6, #0
 8001854:	42a6      	cmp	r6, r4
 8001856:	d109      	bne.n	800186c <__libc_init_array+0x24>
 8001858:	4d0b      	ldr	r5, [pc, #44]	; (8001888 <__libc_init_array+0x40>)
 800185a:	4c0c      	ldr	r4, [pc, #48]	; (800188c <__libc_init_array+0x44>)
 800185c:	f000 f818 	bl	8001890 <_init>
 8001860:	1b64      	subs	r4, r4, r5
 8001862:	10a4      	asrs	r4, r4, #2
 8001864:	2600      	movs	r6, #0
 8001866:	42a6      	cmp	r6, r4
 8001868:	d105      	bne.n	8001876 <__libc_init_array+0x2e>
 800186a:	bd70      	pop	{r4, r5, r6, pc}
 800186c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001870:	4798      	blx	r3
 8001872:	3601      	adds	r6, #1
 8001874:	e7ee      	b.n	8001854 <__libc_init_array+0xc>
 8001876:	f855 3b04 	ldr.w	r3, [r5], #4
 800187a:	4798      	blx	r3
 800187c:	3601      	adds	r6, #1
 800187e:	e7f2      	b.n	8001866 <__libc_init_array+0x1e>
 8001880:	080018c0 	.word	0x080018c0
 8001884:	080018c0 	.word	0x080018c0
 8001888:	080018c0 	.word	0x080018c0
 800188c:	080018c4 	.word	0x080018c4

08001890 <_init>:
 8001890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001892:	bf00      	nop
 8001894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001896:	bc08      	pop	{r3}
 8001898:	469e      	mov	lr, r3
 800189a:	4770      	bx	lr

0800189c <_fini>:
 800189c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800189e:	bf00      	nop
 80018a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018a2:	bc08      	pop	{r3}
 80018a4:	469e      	mov	lr, r3
 80018a6:	4770      	bx	lr
