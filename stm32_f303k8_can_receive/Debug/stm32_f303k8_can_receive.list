
stm32_f303k8_can_receive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003648  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080037d0  080037d0  000137d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003808  08003808  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003808  08003808  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003808  08003808  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003808  08003808  00013808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800380c  0800380c  0001380c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003810  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000010  08003820  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08003820  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f636  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001dac  00000000  00000000  0002f676  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000818  00000000  00000000  00031428  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000750  00000000  00000000  00031c40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017ee4  00000000  00000000  00032390  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008763  00000000  00000000  0004a274  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008170b  00000000  00000000  000529d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d40e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002030  00000000  00000000  000d4160  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080037b8 	.word	0x080037b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080037b8 	.word	0x080037b8

080001c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001cc:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <HAL_Init+0x28>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a07      	ldr	r2, [pc, #28]	; (80001f0 <HAL_Init+0x28>)
 80001d2:	f043 0310 	orr.w	r3, r3, #16
 80001d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d8:	2003      	movs	r0, #3
 80001da:	f000 fe93 	bl	8000f04 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001de:	2000      	movs	r0, #0
 80001e0:	f000 f808 	bl	80001f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001e4:	f003 f926 	bl	8003434 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001e8:	2300      	movs	r3, #0
}
 80001ea:	4618      	mov	r0, r3
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	40022000 	.word	0x40022000

080001f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001fc:	4b12      	ldr	r3, [pc, #72]	; (8000248 <HAL_InitTick+0x54>)
 80001fe:	681a      	ldr	r2, [r3, #0]
 8000200:	4b12      	ldr	r3, [pc, #72]	; (800024c <HAL_InitTick+0x58>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	4619      	mov	r1, r3
 8000206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800020a:	fbb3 f3f1 	udiv	r3, r3, r1
 800020e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000212:	4618      	mov	r0, r3
 8000214:	f000 feab 	bl	8000f6e <HAL_SYSTICK_Config>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800021e:	2301      	movs	r3, #1
 8000220:	e00e      	b.n	8000240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	2b0f      	cmp	r3, #15
 8000226:	d80a      	bhi.n	800023e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000228:	2200      	movs	r2, #0
 800022a:	6879      	ldr	r1, [r7, #4]
 800022c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000230:	f000 fe73 	bl	8000f1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000234:	4a06      	ldr	r2, [pc, #24]	; (8000250 <HAL_InitTick+0x5c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
 800023c:	e000      	b.n	8000240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800023e:	2301      	movs	r3, #1
}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	2000000c 	.word	0x2000000c
 800024c:	20000004 	.word	0x20000004
 8000250:	20000000 	.word	0x20000000

08000254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <HAL_IncTick+0x20>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	461a      	mov	r2, r3
 800025e:	4b06      	ldr	r3, [pc, #24]	; (8000278 <HAL_IncTick+0x24>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4413      	add	r3, r2
 8000264:	4a04      	ldr	r2, [pc, #16]	; (8000278 <HAL_IncTick+0x24>)
 8000266:	6013      	str	r3, [r2, #0]
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	20000004 	.word	0x20000004
 8000278:	2000002c 	.word	0x2000002c

0800027c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000280:	4b03      	ldr	r3, [pc, #12]	; (8000290 <HAL_GetTick+0x14>)
 8000282:	681b      	ldr	r3, [r3, #0]
}
 8000284:	4618      	mov	r0, r3
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	2000002c 	.word	0x2000002c

08000294 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d101      	bne.n	80002a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80002a2:	2301      	movs	r3, #1
 80002a4:	e0ed      	b.n	8000482 <HAL_CAN_Init+0x1ee>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d102      	bne.n	80002b8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80002b2:	6878      	ldr	r0, [r7, #4]
 80002b4:	f003 f8e2 	bl	800347c <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	681a      	ldr	r2, [r3, #0]
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f022 0202 	bic.w	r2, r2, #2
 80002c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80002c8:	f7ff ffd8 	bl	800027c <HAL_GetTick>
 80002cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80002ce:	e012      	b.n	80002f6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80002d0:	f7ff ffd4 	bl	800027c <HAL_GetTick>
 80002d4:	4602      	mov	r2, r0
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	1ad3      	subs	r3, r2, r3
 80002da:	2b0a      	cmp	r3, #10
 80002dc:	d90b      	bls.n	80002f6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	2205      	movs	r2, #5
 80002ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80002f2:	2301      	movs	r3, #1
 80002f4:	e0c5      	b.n	8000482 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	685b      	ldr	r3, [r3, #4]
 80002fc:	f003 0302 	and.w	r3, r3, #2
 8000300:	2b00      	cmp	r3, #0
 8000302:	d1e5      	bne.n	80002d0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	681a      	ldr	r2, [r3, #0]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	f042 0201 	orr.w	r2, r2, #1
 8000312:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000314:	f7ff ffb2 	bl	800027c <HAL_GetTick>
 8000318:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800031a:	e012      	b.n	8000342 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800031c:	f7ff ffae 	bl	800027c <HAL_GetTick>
 8000320:	4602      	mov	r2, r0
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	1ad3      	subs	r3, r2, r3
 8000326:	2b0a      	cmp	r3, #10
 8000328:	d90b      	bls.n	8000342 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800032e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	2205      	movs	r2, #5
 800033a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800033e:	2301      	movs	r3, #1
 8000340:	e09f      	b.n	8000482 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	685b      	ldr	r3, [r3, #4]
 8000348:	f003 0301 	and.w	r3, r3, #1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d0e5      	beq.n	800031c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	7e1b      	ldrb	r3, [r3, #24]
 8000354:	2b01      	cmp	r3, #1
 8000356:	d108      	bne.n	800036a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	681a      	ldr	r2, [r3, #0]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000366:	601a      	str	r2, [r3, #0]
 8000368:	e007      	b.n	800037a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	681a      	ldr	r2, [r3, #0]
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000378:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	7e5b      	ldrb	r3, [r3, #25]
 800037e:	2b01      	cmp	r3, #1
 8000380:	d108      	bne.n	8000394 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	681a      	ldr	r2, [r3, #0]
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	e007      	b.n	80003a4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	681a      	ldr	r2, [r3, #0]
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80003a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	7e9b      	ldrb	r3, [r3, #26]
 80003a8:	2b01      	cmp	r3, #1
 80003aa:	d108      	bne.n	80003be <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	f042 0220 	orr.w	r2, r2, #32
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	e007      	b.n	80003ce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	681a      	ldr	r2, [r3, #0]
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	f022 0220 	bic.w	r2, r2, #32
 80003cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	7edb      	ldrb	r3, [r3, #27]
 80003d2:	2b01      	cmp	r3, #1
 80003d4:	d108      	bne.n	80003e8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	681a      	ldr	r2, [r3, #0]
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	f022 0210 	bic.w	r2, r2, #16
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	e007      	b.n	80003f8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	681a      	ldr	r2, [r3, #0]
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	f042 0210 	orr.w	r2, r2, #16
 80003f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	7f1b      	ldrb	r3, [r3, #28]
 80003fc:	2b01      	cmp	r3, #1
 80003fe:	d108      	bne.n	8000412 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	681a      	ldr	r2, [r3, #0]
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	f042 0208 	orr.w	r2, r2, #8
 800040e:	601a      	str	r2, [r3, #0]
 8000410:	e007      	b.n	8000422 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	681a      	ldr	r2, [r3, #0]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	f022 0208 	bic.w	r2, r2, #8
 8000420:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	7f5b      	ldrb	r3, [r3, #29]
 8000426:	2b01      	cmp	r3, #1
 8000428:	d108      	bne.n	800043c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	681a      	ldr	r2, [r3, #0]
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	f042 0204 	orr.w	r2, r2, #4
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	e007      	b.n	800044c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	681a      	ldr	r2, [r3, #0]
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	f022 0204 	bic.w	r2, r2, #4
 800044a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	689a      	ldr	r2, [r3, #8]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	68db      	ldr	r3, [r3, #12]
 8000454:	431a      	orrs	r2, r3
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	691b      	ldr	r3, [r3, #16]
 800045a:	431a      	orrs	r2, r3
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	695b      	ldr	r3, [r3, #20]
 8000460:	ea42 0103 	orr.w	r1, r2, r3
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	685b      	ldr	r3, [r3, #4]
 8000468:	1e5a      	subs	r2, r3, #1
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	430a      	orrs	r2, r1
 8000470:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	2200      	movs	r2, #0
 8000476:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	2201      	movs	r2, #1
 800047c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000480:	2300      	movs	r3, #0
}
 8000482:	4618      	mov	r0, r3
 8000484:	3710      	adds	r7, #16
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}

0800048a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800048a:	b480      	push	{r7}
 800048c:	b087      	sub	sp, #28
 800048e:	af00      	add	r7, sp, #0
 8000490:	6078      	str	r0, [r7, #4]
 8000492:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80004a0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80004a2:	7cfb      	ldrb	r3, [r7, #19]
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	d003      	beq.n	80004b0 <HAL_CAN_ConfigFilter+0x26>
 80004a8:	7cfb      	ldrb	r3, [r7, #19]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	f040 80aa 	bne.w	8000604 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80004b6:	f043 0201 	orr.w	r2, r3, #1
 80004ba:	697b      	ldr	r3, [r7, #20]
 80004bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	695b      	ldr	r3, [r3, #20]
 80004c4:	f003 031f 	and.w	r3, r3, #31
 80004c8:	2201      	movs	r2, #1
 80004ca:	fa02 f303 	lsl.w	r3, r2, r3
 80004ce:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80004d0:	697b      	ldr	r3, [r7, #20]
 80004d2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	43db      	mvns	r3, r3
 80004da:	401a      	ands	r2, r3
 80004dc:	697b      	ldr	r3, [r7, #20]
 80004de:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d123      	bne.n	8000532 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	43db      	mvns	r3, r3
 80004f4:	401a      	ands	r2, r3
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	68db      	ldr	r3, [r3, #12]
 8000500:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	685b      	ldr	r3, [r3, #4]
 8000506:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000508:	683a      	ldr	r2, [r7, #0]
 800050a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800050c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	3248      	adds	r2, #72	; 0x48
 8000512:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	689b      	ldr	r3, [r3, #8]
 800051a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000526:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000528:	6979      	ldr	r1, [r7, #20]
 800052a:	3348      	adds	r3, #72	; 0x48
 800052c:	00db      	lsls	r3, r3, #3
 800052e:	440b      	add	r3, r1
 8000530:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	69db      	ldr	r3, [r3, #28]
 8000536:	2b01      	cmp	r3, #1
 8000538:	d122      	bne.n	8000580 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800053a:	697b      	ldr	r3, [r7, #20]
 800053c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	431a      	orrs	r2, r3
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000556:	683a      	ldr	r2, [r7, #0]
 8000558:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800055a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	3248      	adds	r2, #72	; 0x48
 8000560:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	689b      	ldr	r3, [r3, #8]
 8000568:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	68db      	ldr	r3, [r3, #12]
 800056e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000574:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000576:	6979      	ldr	r1, [r7, #20]
 8000578:	3348      	adds	r3, #72	; 0x48
 800057a:	00db      	lsls	r3, r3, #3
 800057c:	440b      	add	r3, r1
 800057e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d109      	bne.n	800059c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	43db      	mvns	r3, r3
 8000592:	401a      	ands	r2, r3
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800059a:	e007      	b.n	80005ac <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	431a      	orrs	r2, r3
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	691b      	ldr	r3, [r3, #16]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d109      	bne.n	80005c8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	43db      	mvns	r3, r3
 80005be:	401a      	ands	r2, r3
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80005c6:	e007      	b.n	80005d8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	431a      	orrs	r2, r3
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	6a1b      	ldr	r3, [r3, #32]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d107      	bne.n	80005f0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	431a      	orrs	r2, r3
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80005f6:	f023 0201 	bic.w	r2, r3, #1
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000600:	2300      	movs	r3, #0
 8000602:	e006      	b.n	8000612 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000608:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000610:	2301      	movs	r3, #1
  }
}
 8000612:	4618      	mov	r0, r3
 8000614:	371c      	adds	r7, #28
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800061e:	b580      	push	{r7, lr}
 8000620:	b084      	sub	sp, #16
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	f893 3020 	ldrb.w	r3, [r3, #32]
 800062c:	b2db      	uxtb	r3, r3
 800062e:	2b01      	cmp	r3, #1
 8000630:	d12e      	bne.n	8000690 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2202      	movs	r2, #2
 8000636:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f022 0201 	bic.w	r2, r2, #1
 8000648:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800064a:	f7ff fe17 	bl	800027c <HAL_GetTick>
 800064e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000650:	e012      	b.n	8000678 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000652:	f7ff fe13 	bl	800027c <HAL_GetTick>
 8000656:	4602      	mov	r2, r0
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	1ad3      	subs	r3, r2, r3
 800065c:	2b0a      	cmp	r3, #10
 800065e:	d90b      	bls.n	8000678 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000664:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2205      	movs	r2, #5
 8000670:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000674:	2301      	movs	r3, #1
 8000676:	e012      	b.n	800069e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	685b      	ldr	r3, [r3, #4]
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	2b00      	cmp	r3, #0
 8000684:	d1e5      	bne.n	8000652 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2200      	movs	r2, #0
 800068a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800068c:	2300      	movs	r3, #0
 800068e:	e006      	b.n	800069e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000694:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800069c:	2301      	movs	r3, #1
  }
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80006a6:	b480      	push	{r7}
 80006a8:	b087      	sub	sp, #28
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	60f8      	str	r0, [r7, #12]
 80006ae:	60b9      	str	r1, [r7, #8]
 80006b0:	607a      	str	r2, [r7, #4]
 80006b2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80006ba:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80006bc:	7dfb      	ldrb	r3, [r7, #23]
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d003      	beq.n	80006ca <HAL_CAN_GetRxMessage+0x24>
 80006c2:	7dfb      	ldrb	r3, [r7, #23]
 80006c4:	2b02      	cmp	r3, #2
 80006c6:	f040 80f4 	bne.w	80008b2 <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d10e      	bne.n	80006ee <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	68db      	ldr	r3, [r3, #12]
 80006d6:	f003 0303 	and.w	r3, r3, #3
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d116      	bne.n	800070c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006e2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80006ea:	2301      	movs	r3, #1
 80006ec:	e0e8      	b.n	80008c0 <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	691b      	ldr	r3, [r3, #16]
 80006f4:	f003 0303 	and.w	r3, r3, #3
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d107      	bne.n	800070c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000700:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000708:	2301      	movs	r3, #1
 800070a:	e0d9      	b.n	80008c0 <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	331b      	adds	r3, #27
 8000714:	011b      	lsls	r3, r3, #4
 8000716:	4413      	add	r3, r2
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f003 0204 	and.w	r2, r3, #4
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	689b      	ldr	r3, [r3, #8]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d10c      	bne.n	8000744 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	331b      	adds	r3, #27
 8000732:	011b      	lsls	r3, r3, #4
 8000734:	4413      	add	r3, r2
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	0d5b      	lsrs	r3, r3, #21
 800073a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	e00b      	b.n	800075c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	331b      	adds	r3, #27
 800074c:	011b      	lsls	r3, r3, #4
 800074e:	4413      	add	r3, r2
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	08db      	lsrs	r3, r3, #3
 8000754:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	331b      	adds	r3, #27
 8000764:	011b      	lsls	r3, r3, #4
 8000766:	4413      	add	r3, r2
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	085b      	lsrs	r3, r3, #1
 800076c:	f003 0201 	and.w	r2, r3, #1
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	331b      	adds	r3, #27
 800077c:	011b      	lsls	r3, r3, #4
 800077e:	4413      	add	r3, r2
 8000780:	3304      	adds	r3, #4
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f003 020f 	and.w	r2, r3, #15
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	331b      	adds	r3, #27
 8000794:	011b      	lsls	r3, r3, #4
 8000796:	4413      	add	r3, r2
 8000798:	3304      	adds	r3, #4
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	0a1b      	lsrs	r3, r3, #8
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	331b      	adds	r3, #27
 80007ac:	011b      	lsls	r3, r3, #4
 80007ae:	4413      	add	r3, r2
 80007b0:	3304      	adds	r3, #4
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	0c1b      	lsrs	r3, r3, #16
 80007b6:	b29a      	uxth	r2, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	011b      	lsls	r3, r3, #4
 80007c4:	4413      	add	r3, r2
 80007c6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	011b      	lsls	r3, r3, #4
 80007da:	4413      	add	r3, r2
 80007dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	0a1a      	lsrs	r2, r3, #8
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	3301      	adds	r3, #1
 80007e8:	b2d2      	uxtb	r2, r2
 80007ea:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	011b      	lsls	r3, r3, #4
 80007f4:	4413      	add	r3, r2
 80007f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	0c1a      	lsrs	r2, r3, #16
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	3302      	adds	r3, #2
 8000802:	b2d2      	uxtb	r2, r2
 8000804:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	011b      	lsls	r3, r3, #4
 800080e:	4413      	add	r3, r2
 8000810:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	0e1a      	lsrs	r2, r3, #24
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	3303      	adds	r3, #3
 800081c:	b2d2      	uxtb	r2, r2
 800081e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	011b      	lsls	r3, r3, #4
 8000828:	4413      	add	r3, r2
 800082a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	3304      	adds	r3, #4
 8000834:	b2d2      	uxtb	r2, r2
 8000836:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	011b      	lsls	r3, r3, #4
 8000840:	4413      	add	r3, r2
 8000842:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	0a1a      	lsrs	r2, r3, #8
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	3305      	adds	r3, #5
 800084e:	b2d2      	uxtb	r2, r2
 8000850:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	011b      	lsls	r3, r3, #4
 800085a:	4413      	add	r3, r2
 800085c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	0c1a      	lsrs	r2, r3, #16
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	3306      	adds	r3, #6
 8000868:	b2d2      	uxtb	r2, r2
 800086a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	011b      	lsls	r3, r3, #4
 8000874:	4413      	add	r3, r2
 8000876:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	0e1a      	lsrs	r2, r3, #24
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	3307      	adds	r3, #7
 8000882:	b2d2      	uxtb	r2, r2
 8000884:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d108      	bne.n	800089e <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	68da      	ldr	r2, [r3, #12]
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f042 0220 	orr.w	r2, r2, #32
 800089a:	60da      	str	r2, [r3, #12]
 800089c:	e007      	b.n	80008ae <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	691a      	ldr	r2, [r3, #16]
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f042 0220 	orr.w	r2, r2, #32
 80008ac:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80008ae:	2300      	movs	r3, #0
 80008b0:	e006      	b.n	80008c0 <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008b6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80008be:	2301      	movs	r3, #1
  }
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	371c      	adds	r7, #28
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80008dc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80008de:	7bfb      	ldrb	r3, [r7, #15]
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d002      	beq.n	80008ea <HAL_CAN_ActivateNotification+0x1e>
 80008e4:	7bfb      	ldrb	r3, [r7, #15]
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d109      	bne.n	80008fe <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	6959      	ldr	r1, [r3, #20]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	683a      	ldr	r2, [r7, #0]
 80008f6:	430a      	orrs	r2, r1
 80008f8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80008fa:	2300      	movs	r3, #0
 80008fc:	e006      	b.n	800090c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000902:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800090a:	2301      	movs	r3, #1
  }
}
 800090c:	4618      	mov	r0, r3
 800090e:	3714      	adds	r7, #20
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08a      	sub	sp, #40	; 0x28
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	689b      	ldr	r3, [r3, #8]
 800093a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	68db      	ldr	r3, [r3, #12]
 8000942:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	691b      	ldr	r3, [r3, #16]
 800094a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000954:	6a3b      	ldr	r3, [r7, #32]
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	2b00      	cmp	r3, #0
 800095c:	d07c      	beq.n	8000a58 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800095e:	69bb      	ldr	r3, [r7, #24]
 8000960:	f003 0301 	and.w	r3, r3, #1
 8000964:	2b00      	cmp	r3, #0
 8000966:	d023      	beq.n	80009b0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2201      	movs	r2, #1
 800096e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000970:	69bb      	ldr	r3, [r7, #24]
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	2b00      	cmp	r3, #0
 8000978:	d003      	beq.n	8000982 <HAL_CAN_IRQHandler+0x6a>
      {
        /* Transmission Mailbox 0 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f000 f97d 	bl	8000c7a <HAL_CAN_TxMailbox0CompleteCallback>
 8000980:	e016      	b.n	80009b0 <HAL_CAN_IRQHandler+0x98>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000982:	69bb      	ldr	r3, [r7, #24]
 8000984:	f003 0304 	and.w	r3, r3, #4
 8000988:	2b00      	cmp	r3, #0
 800098a:	d004      	beq.n	8000996 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800098c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800098e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
 8000994:	e00c      	b.n	80009b0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000996:	69bb      	ldr	r3, [r7, #24]
 8000998:	f003 0308 	and.w	r3, r3, #8
 800099c:	2b00      	cmp	r3, #0
 800099e:	d004      	beq.n	80009aa <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80009a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
 80009a8:	e002      	b.n	80009b0 <HAL_CAN_IRQHandler+0x98>
        }
        else
        {
          /* Transmission Mailbox 0 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f000 f983 	bl	8000cb6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80009b0:	69bb      	ldr	r3, [r7, #24]
 80009b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d024      	beq.n	8000a04 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009c2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d003      	beq.n	80009d6 <HAL_CAN_IRQHandler+0xbe>
      {
        /* Transmission Mailbox 1 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80009ce:	6878      	ldr	r0, [r7, #4]
 80009d0:	f000 f95d 	bl	8000c8e <HAL_CAN_TxMailbox1CompleteCallback>
 80009d4:	e016      	b.n	8000a04 <HAL_CAN_IRQHandler+0xec>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80009d6:	69bb      	ldr	r3, [r7, #24]
 80009d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d004      	beq.n	80009ea <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80009e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
 80009e8:	e00c      	b.n	8000a04 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80009ea:	69bb      	ldr	r3, [r7, #24]
 80009ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d004      	beq.n	80009fe <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80009f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
 80009fc:	e002      	b.n	8000a04 <HAL_CAN_IRQHandler+0xec>
        }
        else
        {
          /* Transmission Mailbox 1 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f000 f963 	bl	8000cca <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000a04:	69bb      	ldr	r3, [r7, #24]
 8000a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d024      	beq.n	8000a58 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a16:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d003      	beq.n	8000a2a <HAL_CAN_IRQHandler+0x112>
      {
        /* Transmission Mailbox 2 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f000 f93d 	bl	8000ca2 <HAL_CAN_TxMailbox2CompleteCallback>
 8000a28:	e016      	b.n	8000a58 <HAL_CAN_IRQHandler+0x140>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000a2a:	69bb      	ldr	r3, [r7, #24]
 8000a2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d004      	beq.n	8000a3e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a3c:	e00c      	b.n	8000a58 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000a3e:	69bb      	ldr	r3, [r7, #24]
 8000a40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d004      	beq.n	8000a52 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8000a50:	e002      	b.n	8000a58 <HAL_CAN_IRQHandler+0x140>
        }
        else
        {
          /* Transmission Mailbox 2 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f000 f943 	bl	8000cde <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000a58:	6a3b      	ldr	r3, [r7, #32]
 8000a5a:	f003 0308 	and.w	r3, r3, #8
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d00c      	beq.n	8000a7c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	f003 0310 	and.w	r3, r3, #16
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d007      	beq.n	8000a7c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2210      	movs	r2, #16
 8000a7a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000a7c:	6a3b      	ldr	r3, [r7, #32]
 8000a7e:	f003 0304 	and.w	r3, r3, #4
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d00b      	beq.n	8000a9e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	f003 0308 	and.w	r3, r3, #8
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d006      	beq.n	8000a9e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2208      	movs	r2, #8
 8000a96:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f000 f92a 	bl	8000cf2 <HAL_CAN_RxFifo0FullCallback>
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000a9e:	6a3b      	ldr	r3, [r7, #32]
 8000aa0:	f003 0302 	and.w	r3, r3, #2
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d009      	beq.n	8000abc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	68db      	ldr	r3, [r3, #12]
 8000aae:	f003 0303 	and.w	r3, r3, #3
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d002      	beq.n	8000abc <HAL_CAN_IRQHandler+0x1a4>
    {
      /* Receive FIFO 0 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f002 fc7e 	bl	80033b8 <HAL_CAN_RxFifo0MsgPendingCallback>
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000abc:	6a3b      	ldr	r3, [r7, #32]
 8000abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d00c      	beq.n	8000ae0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	f003 0310 	and.w	r3, r3, #16
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d007      	beq.n	8000ae0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2210      	movs	r2, #16
 8000ade:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000ae0:	6a3b      	ldr	r3, [r7, #32]
 8000ae2:	f003 0320 	and.w	r3, r3, #32
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d00b      	beq.n	8000b02 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	f003 0308 	and.w	r3, r3, #8
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d006      	beq.n	8000b02 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2208      	movs	r2, #8
 8000afa:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f000 f90c 	bl	8000d1a <HAL_CAN_RxFifo1FullCallback>
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000b02:	6a3b      	ldr	r3, [r7, #32]
 8000b04:	f003 0310 	and.w	r3, r3, #16
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d009      	beq.n	8000b20 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	691b      	ldr	r3, [r3, #16]
 8000b12:	f003 0303 	and.w	r3, r3, #3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d002      	beq.n	8000b20 <HAL_CAN_IRQHandler+0x208>
    {
      /* Receive FIFO 1 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f000 f8f3 	bl	8000d06 <HAL_CAN_RxFifo1MsgPendingCallback>
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000b20:	6a3b      	ldr	r3, [r7, #32]
 8000b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d00b      	beq.n	8000b42 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	f003 0310 	and.w	r3, r3, #16
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d006      	beq.n	8000b42 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2210      	movs	r2, #16
 8000b3a:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f000 f8f6 	bl	8000d2e <HAL_CAN_SleepCallback>
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000b42:	6a3b      	ldr	r3, [r7, #32]
 8000b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d00b      	beq.n	8000b64 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	f003 0308 	and.w	r3, r3, #8
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d006      	beq.n	8000b64 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2208      	movs	r2, #8
 8000b5c:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f000 f8ef 	bl	8000d42 <HAL_CAN_WakeUpFromRxMsgCallback>
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000b64:	6a3b      	ldr	r3, [r7, #32]
 8000b66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d075      	beq.n	8000c5a <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	f003 0304 	and.w	r3, r3, #4
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d06c      	beq.n	8000c52 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000b78:	6a3b      	ldr	r3, [r7, #32]
 8000b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d008      	beq.n	8000b94 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d003      	beq.n	8000b94 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000b94:	6a3b      	ldr	r3, [r7, #32]
 8000b96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d008      	beq.n	8000bb0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d003      	beq.n	8000bb0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000baa:	f043 0302 	orr.w	r3, r3, #2
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000bb0:	6a3b      	ldr	r3, [r7, #32]
 8000bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d008      	beq.n	8000bcc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d003      	beq.n	8000bcc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc6:	f043 0304 	orr.w	r3, r3, #4
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000bcc:	6a3b      	ldr	r3, [r7, #32]
 8000bce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d03d      	beq.n	8000c52 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d038      	beq.n	8000c52 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000be6:	2b30      	cmp	r3, #48	; 0x30
 8000be8:	d017      	beq.n	8000c1a <HAL_CAN_IRQHandler+0x302>
 8000bea:	2b30      	cmp	r3, #48	; 0x30
 8000bec:	d804      	bhi.n	8000bf8 <HAL_CAN_IRQHandler+0x2e0>
 8000bee:	2b10      	cmp	r3, #16
 8000bf0:	d009      	beq.n	8000c06 <HAL_CAN_IRQHandler+0x2ee>
 8000bf2:	2b20      	cmp	r3, #32
 8000bf4:	d00c      	beq.n	8000c10 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000bf6:	e024      	b.n	8000c42 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8000bf8:	2b50      	cmp	r3, #80	; 0x50
 8000bfa:	d018      	beq.n	8000c2e <HAL_CAN_IRQHandler+0x316>
 8000bfc:	2b60      	cmp	r3, #96	; 0x60
 8000bfe:	d01b      	beq.n	8000c38 <HAL_CAN_IRQHandler+0x320>
 8000c00:	2b40      	cmp	r3, #64	; 0x40
 8000c02:	d00f      	beq.n	8000c24 <HAL_CAN_IRQHandler+0x30c>
            break;
 8000c04:	e01d      	b.n	8000c42 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8000c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c08:	f043 0308 	orr.w	r3, r3, #8
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000c0e:	e018      	b.n	8000c42 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c12:	f043 0310 	orr.w	r3, r3, #16
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000c18:	e013      	b.n	8000c42 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1c:	f043 0320 	orr.w	r3, r3, #32
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000c22:	e00e      	b.n	8000c42 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8000c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000c2c:	e009      	b.n	8000c42 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8000c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000c36:	e004      	b.n	8000c42 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000c40:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	699a      	ldr	r2, [r3, #24]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000c50:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2204      	movs	r2, #4
 8000c58:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d008      	beq.n	8000c72 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c66:	431a      	orrs	r2, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f000 f872 	bl	8000d56 <HAL_CAN_ErrorCallback>
  }
}
 8000c72:	bf00      	nop
 8000c74:	3728      	adds	r7, #40	; 0x28
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	b083      	sub	sp, #12
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	b083      	sub	sp, #12
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	b083      	sub	sp, #12
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	b083      	sub	sp, #12
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	b083      	sub	sp, #12
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8000d42:	b480      	push	{r7}
 8000d44:	b083      	sub	sp, #12
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b083      	sub	sp, #12
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
	...

08000d6c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <NVIC_SetPriorityGrouping+0x44>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d88:	4013      	ands	r3, r2
 8000d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d9e:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <NVIC_SetPriorityGrouping+0x44>)
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	60d3      	str	r3, [r2, #12]
}
 8000da4:	bf00      	nop
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db8:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <NVIC_GetPriorityGrouping+0x18>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	0a1b      	lsrs	r3, r3, #8
 8000dbe:	f003 0307 	and.w	r3, r3, #7
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	f003 021f 	and.w	r2, r3, #31
 8000de0:	4907      	ldr	r1, [pc, #28]	; (8000e00 <NVIC_EnableIRQ+0x30>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	095b      	lsrs	r3, r3, #5
 8000de8:	2001      	movs	r0, #1
 8000dea:	fa00 f202 	lsl.w	r2, r0, r2
 8000dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000e100 	.word	0xe000e100

08000e04 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	6039      	str	r1, [r7, #0]
 8000e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	da0b      	bge.n	8000e30 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	490c      	ldr	r1, [pc, #48]	; (8000e50 <NVIC_SetPriority+0x4c>)
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	f003 030f 	and.w	r3, r3, #15
 8000e24:	3b04      	subs	r3, #4
 8000e26:	0112      	lsls	r2, r2, #4
 8000e28:	b2d2      	uxtb	r2, r2
 8000e2a:	440b      	add	r3, r1
 8000e2c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e2e:	e009      	b.n	8000e44 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	4907      	ldr	r1, [pc, #28]	; (8000e54 <NVIC_SetPriority+0x50>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	0112      	lsls	r2, r2, #4
 8000e3c:	b2d2      	uxtb	r2, r2
 8000e3e:	440b      	add	r3, r1
 8000e40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00
 8000e54:	e000e100 	.word	0xe000e100

08000e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b089      	sub	sp, #36	; 0x24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	f1c3 0307 	rsb	r3, r3, #7
 8000e72:	2b04      	cmp	r3, #4
 8000e74:	bf28      	it	cs
 8000e76:	2304      	movcs	r3, #4
 8000e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3304      	adds	r3, #4
 8000e7e:	2b06      	cmp	r3, #6
 8000e80:	d902      	bls.n	8000e88 <NVIC_EncodePriority+0x30>
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	3b03      	subs	r3, #3
 8000e86:	e000      	b.n	8000e8a <NVIC_EncodePriority+0x32>
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43da      	mvns	r2, r3
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	401a      	ands	r2, r3
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eaa:	43d9      	mvns	r1, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	4313      	orrs	r3, r2
         );
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3724      	adds	r7, #36	; 0x24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
	...

08000ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ed0:	d301      	bcc.n	8000ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e00f      	b.n	8000ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed6:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <SysTick_Config+0x40>)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ede:	210f      	movs	r1, #15
 8000ee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ee4:	f7ff ff8e 	bl	8000e04 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee8:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <SysTick_Config+0x40>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eee:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <SysTick_Config+0x40>)
 8000ef0:	2207      	movs	r2, #7
 8000ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	e000e010 	.word	0xe000e010

08000f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f7ff ff2d 	bl	8000d6c <NVIC_SetPriorityGrouping>
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b086      	sub	sp, #24
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	4603      	mov	r3, r0
 8000f22:	60b9      	str	r1, [r7, #8]
 8000f24:	607a      	str	r2, [r7, #4]
 8000f26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f2c:	f7ff ff42 	bl	8000db4 <NVIC_GetPriorityGrouping>
 8000f30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	68b9      	ldr	r1, [r7, #8]
 8000f36:	6978      	ldr	r0, [r7, #20]
 8000f38:	f7ff ff8e 	bl	8000e58 <NVIC_EncodePriority>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f42:	4611      	mov	r1, r2
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ff5d 	bl	8000e04 <NVIC_SetPriority>
}
 8000f4a:	bf00      	nop
 8000f4c:	3718      	adds	r7, #24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	4603      	mov	r3, r0
 8000f5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff ff35 	bl	8000dd0 <NVIC_EnableIRQ>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff ffa2 	bl	8000ec0 <SysTick_Config>
 8000f7c:	4603      	mov	r3, r0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b084      	sub	sp, #16
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d005      	beq.n	8000fa8 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2204      	movs	r2, #4
 8000fa0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	73fb      	strb	r3, [r7, #15]
 8000fa6:	e027      	b.n	8000ff8 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f022 020e 	bic.w	r2, r2, #14
 8000fb6:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f022 0201 	bic.w	r2, r2, #1
 8000fc6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd6:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d003      	beq.n	8000ff8 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	4798      	blx	r3
    } 
  }
  return status;
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001004:	b480      	push	{r7}
 8001006:	b087      	sub	sp, #28
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800101a:	e14e      	b.n	80012ba <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	2101      	movs	r1, #1
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	fa01 f303 	lsl.w	r3, r1, r3
 8001028:	4013      	ands	r3, r2
 800102a:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2b00      	cmp	r3, #0
 8001030:	f000 8140 	beq.w	80012b4 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	2b02      	cmp	r3, #2
 800103a:	d003      	beq.n	8001044 <HAL_GPIO_Init+0x40>
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	2b12      	cmp	r3, #18
 8001042:	d123      	bne.n	800108c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	08da      	lsrs	r2, r3, #3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3208      	adds	r2, #8
 800104c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	f003 0307 	and.w	r3, r3, #7
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	220f      	movs	r2, #15
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4013      	ands	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	691a      	ldr	r2, [r3, #16]
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	08da      	lsrs	r2, r3, #3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3208      	adds	r2, #8
 8001086:	6939      	ldr	r1, [r7, #16]
 8001088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	2203      	movs	r2, #3
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4013      	ands	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 0203 	and.w	r2, r3, #3
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d00b      	beq.n	80010e0 <HAL_GPIO_Init+0xdc>
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d007      	beq.n	80010e0 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010d4:	2b11      	cmp	r3, #17
 80010d6:	d003      	beq.n	80010e0 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	2b12      	cmp	r3, #18
 80010de:	d130      	bne.n	8001142 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	2203      	movs	r2, #3
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4013      	ands	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	68da      	ldr	r2, [r3, #12]
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4313      	orrs	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001116:	2201      	movs	r2, #1
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4013      	ands	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	091b      	lsrs	r3, r3, #4
 800112c:	f003 0201 	and.w	r2, r3, #1
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	2203      	movs	r2, #3
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43db      	mvns	r3, r3
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	4013      	ands	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	689a      	ldr	r2, [r3, #8]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117a:	2b00      	cmp	r3, #0
 800117c:	f000 809a 	beq.w	80012b4 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001180:	4b55      	ldr	r3, [pc, #340]	; (80012d8 <HAL_GPIO_Init+0x2d4>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	4a54      	ldr	r2, [pc, #336]	; (80012d8 <HAL_GPIO_Init+0x2d4>)
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	6193      	str	r3, [r2, #24]
 800118c:	4b52      	ldr	r3, [pc, #328]	; (80012d8 <HAL_GPIO_Init+0x2d4>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001198:	4a50      	ldr	r2, [pc, #320]	; (80012dc <HAL_GPIO_Init+0x2d8>)
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	089b      	lsrs	r3, r3, #2
 800119e:	3302      	adds	r3, #2
 80011a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a4:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	f003 0303 	and.w	r3, r3, #3
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	220f      	movs	r2, #15
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011c2:	d013      	beq.n	80011ec <HAL_GPIO_Init+0x1e8>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a46      	ldr	r2, [pc, #280]	; (80012e0 <HAL_GPIO_Init+0x2dc>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d00d      	beq.n	80011e8 <HAL_GPIO_Init+0x1e4>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a45      	ldr	r2, [pc, #276]	; (80012e4 <HAL_GPIO_Init+0x2e0>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d007      	beq.n	80011e4 <HAL_GPIO_Init+0x1e0>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a44      	ldr	r2, [pc, #272]	; (80012e8 <HAL_GPIO_Init+0x2e4>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d101      	bne.n	80011e0 <HAL_GPIO_Init+0x1dc>
 80011dc:	2303      	movs	r3, #3
 80011de:	e006      	b.n	80011ee <HAL_GPIO_Init+0x1ea>
 80011e0:	2305      	movs	r3, #5
 80011e2:	e004      	b.n	80011ee <HAL_GPIO_Init+0x1ea>
 80011e4:	2302      	movs	r3, #2
 80011e6:	e002      	b.n	80011ee <HAL_GPIO_Init+0x1ea>
 80011e8:	2301      	movs	r3, #1
 80011ea:	e000      	b.n	80011ee <HAL_GPIO_Init+0x1ea>
 80011ec:	2300      	movs	r3, #0
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	f002 0203 	and.w	r2, r2, #3
 80011f4:	0092      	lsls	r2, r2, #2
 80011f6:	4093      	lsls	r3, r2
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80011fe:	4937      	ldr	r1, [pc, #220]	; (80012dc <HAL_GPIO_Init+0x2d8>)
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	089b      	lsrs	r3, r3, #2
 8001204:	3302      	adds	r3, #2
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800120c:	4b37      	ldr	r3, [pc, #220]	; (80012ec <HAL_GPIO_Init+0x2e8>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	43db      	mvns	r3, r3
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d003      	beq.n	8001230 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001230:	4a2e      	ldr	r2, [pc, #184]	; (80012ec <HAL_GPIO_Init+0x2e8>)
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001236:	4b2d      	ldr	r3, [pc, #180]	; (80012ec <HAL_GPIO_Init+0x2e8>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	43db      	mvns	r3, r3
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4013      	ands	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4313      	orrs	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800125a:	4a24      	ldr	r2, [pc, #144]	; (80012ec <HAL_GPIO_Init+0x2e8>)
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001260:	4b22      	ldr	r3, [pc, #136]	; (80012ec <HAL_GPIO_Init+0x2e8>)
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	43db      	mvns	r3, r3
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001284:	4a19      	ldr	r2, [pc, #100]	; (80012ec <HAL_GPIO_Init+0x2e8>)
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800128a:	4b18      	ldr	r3, [pc, #96]	; (80012ec <HAL_GPIO_Init+0x2e8>)
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	43db      	mvns	r3, r3
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4013      	ands	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012ae:	4a0f      	ldr	r2, [pc, #60]	; (80012ec <HAL_GPIO_Init+0x2e8>)
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	3301      	adds	r3, #1
 80012b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	fa22 f303 	lsr.w	r3, r2, r3
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f47f aea9 	bne.w	800101c <HAL_GPIO_Init+0x18>
  }
}
 80012ca:	bf00      	nop
 80012cc:	371c      	adds	r7, #28
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40010000 	.word	0x40010000
 80012e0:	48000400 	.word	0x48000400
 80012e4:	48000800 	.word	0x48000800
 80012e8:	48000c00 	.word	0x48000c00
 80012ec:	40010400 	.word	0x40010400

080012f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	460b      	mov	r3, r1
 80012fa:	807b      	strh	r3, [r7, #2]
 80012fc:	4613      	mov	r3, r2
 80012fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001300:	787b      	ldrb	r3, [r7, #1]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001306:	887a      	ldrh	r2, [r7, #2]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800130c:	e002      	b.n	8001314 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800130e:	887a      	ldrh	r2, [r7, #2]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001326:	af00      	add	r7, sp, #0
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d102      	bne.n	800133a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	f000 beda 	b.w	80020ee <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	2b00      	cmp	r3, #0
 8001346:	f000 816e 	beq.w	8001626 <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800134a:	4bb5      	ldr	r3, [pc, #724]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f003 030c 	and.w	r3, r3, #12
 8001352:	2b04      	cmp	r3, #4
 8001354:	d00c      	beq.n	8001370 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001356:	4bb2      	ldr	r3, [pc, #712]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f003 030c 	and.w	r3, r3, #12
 800135e:	2b08      	cmp	r3, #8
 8001360:	d15a      	bne.n	8001418 <HAL_RCC_OscConfig+0xf8>
 8001362:	4baf      	ldr	r3, [pc, #700]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800136a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800136e:	d153      	bne.n	8001418 <HAL_RCC_OscConfig+0xf8>
 8001370:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001374:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001378:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800137c:	fa93 f3a3 	rbit	r3, r3
 8001380:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001384:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001388:	fab3 f383 	clz	r3, r3
 800138c:	b2db      	uxtb	r3, r3
 800138e:	095b      	lsrs	r3, r3, #5
 8001390:	b2db      	uxtb	r3, r3
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b01      	cmp	r3, #1
 800139a:	d102      	bne.n	80013a2 <HAL_RCC_OscConfig+0x82>
 800139c:	4ba0      	ldr	r3, [pc, #640]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	e015      	b.n	80013ce <HAL_RCC_OscConfig+0xae>
 80013a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013a6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013aa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80013ae:	fa93 f3a3 	rbit	r3, r3
 80013b2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80013b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013ba:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80013be:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80013c2:	fa93 f3a3 	rbit	r3, r3
 80013c6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80013ca:	4b95      	ldr	r3, [pc, #596]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 80013cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013d2:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80013d6:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80013da:	fa92 f2a2 	rbit	r2, r2
 80013de:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 80013e2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80013e6:	fab2 f282 	clz	r2, r2
 80013ea:	b252      	sxtb	r2, r2
 80013ec:	f042 0220 	orr.w	r2, r2, #32
 80013f0:	b252      	sxtb	r2, r2
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	f002 021f 	and.w	r2, r2, #31
 80013f8:	2101      	movs	r1, #1
 80013fa:	fa01 f202 	lsl.w	r2, r1, r2
 80013fe:	4013      	ands	r3, r2
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 810f 	beq.w	8001624 <HAL_RCC_OscConfig+0x304>
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	f040 8109 	bne.w	8001624 <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	f000 be6b 	b.w	80020ee <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001422:	d106      	bne.n	8001432 <HAL_RCC_OscConfig+0x112>
 8001424:	4b7e      	ldr	r3, [pc, #504]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a7d      	ldr	r2, [pc, #500]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 800142a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800142e:	6013      	str	r3, [r2, #0]
 8001430:	e030      	b.n	8001494 <HAL_RCC_OscConfig+0x174>
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d10c      	bne.n	8001456 <HAL_RCC_OscConfig+0x136>
 800143c:	4b78      	ldr	r3, [pc, #480]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a77      	ldr	r2, [pc, #476]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 8001442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	4b75      	ldr	r3, [pc, #468]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a74      	ldr	r2, [pc, #464]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 800144e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001452:	6013      	str	r3, [r2, #0]
 8001454:	e01e      	b.n	8001494 <HAL_RCC_OscConfig+0x174>
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001460:	d10c      	bne.n	800147c <HAL_RCC_OscConfig+0x15c>
 8001462:	4b6f      	ldr	r3, [pc, #444]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a6e      	ldr	r2, [pc, #440]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 8001468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	4b6c      	ldr	r3, [pc, #432]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a6b      	ldr	r2, [pc, #428]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 8001474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	e00b      	b.n	8001494 <HAL_RCC_OscConfig+0x174>
 800147c:	4b68      	ldr	r3, [pc, #416]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a67      	ldr	r2, [pc, #412]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 8001482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	4b65      	ldr	r3, [pc, #404]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a64      	ldr	r2, [pc, #400]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 800148e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001492:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001494:	4b62      	ldr	r3, [pc, #392]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 8001496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001498:	f023 020f 	bic.w	r2, r3, #15
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	495f      	ldr	r1, [pc, #380]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 80014a4:	4313      	orrs	r3, r2
 80014a6:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d05a      	beq.n	8001568 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b2:	f7fe fee3 	bl	800027c <HAL_GetTick>
 80014b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ba:	e00a      	b.n	80014d2 <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014bc:	f7fe fede 	bl	800027c <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b64      	cmp	r3, #100	; 0x64
 80014ca:	d902      	bls.n	80014d2 <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	f000 be0e 	b.w	80020ee <HAL_RCC_OscConfig+0xdce>
 80014d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014d6:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014da:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80014de:	fa93 f3a3 	rbit	r3, r3
 80014e2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 80014e6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ea:	fab3 f383 	clz	r3, r3
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	095b      	lsrs	r3, r3, #5
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d102      	bne.n	8001504 <HAL_RCC_OscConfig+0x1e4>
 80014fe:	4b48      	ldr	r3, [pc, #288]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	e015      	b.n	8001530 <HAL_RCC_OscConfig+0x210>
 8001504:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001508:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001510:	fa93 f3a3 	rbit	r3, r3
 8001514:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001518:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800151c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001520:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001524:	fa93 f3a3 	rbit	r3, r3
 8001528:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800152c:	4b3c      	ldr	r3, [pc, #240]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 800152e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001530:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001534:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001538:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800153c:	fa92 f2a2 	rbit	r2, r2
 8001540:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8001544:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001548:	fab2 f282 	clz	r2, r2
 800154c:	b252      	sxtb	r2, r2
 800154e:	f042 0220 	orr.w	r2, r2, #32
 8001552:	b252      	sxtb	r2, r2
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	f002 021f 	and.w	r2, r2, #31
 800155a:	2101      	movs	r1, #1
 800155c:	fa01 f202 	lsl.w	r2, r1, r2
 8001560:	4013      	ands	r3, r2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0aa      	beq.n	80014bc <HAL_RCC_OscConfig+0x19c>
 8001566:	e05e      	b.n	8001626 <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001568:	f7fe fe88 	bl	800027c <HAL_GetTick>
 800156c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001570:	e00a      	b.n	8001588 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001572:	f7fe fe83 	bl	800027c <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b64      	cmp	r3, #100	; 0x64
 8001580:	d902      	bls.n	8001588 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	f000 bdb3 	b.w	80020ee <HAL_RCC_OscConfig+0xdce>
 8001588:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800158c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001590:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001594:	fa93 f3a3 	rbit	r3, r3
 8001598:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 800159c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015a0:	fab3 f383 	clz	r3, r3
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	095b      	lsrs	r3, r3, #5
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d102      	bne.n	80015ba <HAL_RCC_OscConfig+0x29a>
 80015b4:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	e015      	b.n	80015e6 <HAL_RCC_OscConfig+0x2c6>
 80015ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015be:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80015c6:	fa93 f3a3 	rbit	r3, r3
 80015ca:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80015ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015d2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80015d6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80015da:	fa93 f3a3 	rbit	r3, r3
 80015de:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80015e2:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 80015e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015ea:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80015ee:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80015f2:	fa92 f2a2 	rbit	r2, r2
 80015f6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 80015fa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80015fe:	fab2 f282 	clz	r2, r2
 8001602:	b252      	sxtb	r2, r2
 8001604:	f042 0220 	orr.w	r2, r2, #32
 8001608:	b252      	sxtb	r2, r2
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	f002 021f 	and.w	r2, r2, #31
 8001610:	2101      	movs	r1, #1
 8001612:	fa01 f202 	lsl.w	r2, r1, r2
 8001616:	4013      	ands	r3, r2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1aa      	bne.n	8001572 <HAL_RCC_OscConfig+0x252>
 800161c:	e003      	b.n	8001626 <HAL_RCC_OscConfig+0x306>
 800161e:	bf00      	nop
 8001620:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001624:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	f000 8170 	beq.w	8001916 <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001636:	4bd0      	ldr	r3, [pc, #832]	; (8001978 <HAL_RCC_OscConfig+0x658>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f003 030c 	and.w	r3, r3, #12
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00b      	beq.n	800165a <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001642:	4bcd      	ldr	r3, [pc, #820]	; (8001978 <HAL_RCC_OscConfig+0x658>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f003 030c 	and.w	r3, r3, #12
 800164a:	2b08      	cmp	r3, #8
 800164c:	d16d      	bne.n	800172a <HAL_RCC_OscConfig+0x40a>
 800164e:	4bca      	ldr	r3, [pc, #808]	; (8001978 <HAL_RCC_OscConfig+0x658>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d167      	bne.n	800172a <HAL_RCC_OscConfig+0x40a>
 800165a:	2302      	movs	r3, #2
 800165c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001660:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001664:	fa93 f3a3 	rbit	r3, r3
 8001668:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 800166c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001670:	fab3 f383 	clz	r3, r3
 8001674:	b2db      	uxtb	r3, r3
 8001676:	095b      	lsrs	r3, r3, #5
 8001678:	b2db      	uxtb	r3, r3
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b01      	cmp	r3, #1
 8001682:	d102      	bne.n	800168a <HAL_RCC_OscConfig+0x36a>
 8001684:	4bbc      	ldr	r3, [pc, #752]	; (8001978 <HAL_RCC_OscConfig+0x658>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	e013      	b.n	80016b2 <HAL_RCC_OscConfig+0x392>
 800168a:	2302      	movs	r3, #2
 800168c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001690:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001694:	fa93 f3a3 	rbit	r3, r3
 8001698:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800169c:	2302      	movs	r3, #2
 800169e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80016a2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80016a6:	fa93 f3a3 	rbit	r3, r3
 80016aa:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80016ae:	4bb2      	ldr	r3, [pc, #712]	; (8001978 <HAL_RCC_OscConfig+0x658>)
 80016b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b2:	2202      	movs	r2, #2
 80016b4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80016b8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80016bc:	fa92 f2a2 	rbit	r2, r2
 80016c0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 80016c4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80016c8:	fab2 f282 	clz	r2, r2
 80016cc:	b252      	sxtb	r2, r2
 80016ce:	f042 0220 	orr.w	r2, r2, #32
 80016d2:	b252      	sxtb	r2, r2
 80016d4:	b2d2      	uxtb	r2, r2
 80016d6:	f002 021f 	and.w	r2, r2, #31
 80016da:	2101      	movs	r1, #1
 80016dc:	fa01 f202 	lsl.w	r2, r1, r2
 80016e0:	4013      	ands	r3, r2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d007      	beq.n	80016f6 <HAL_RCC_OscConfig+0x3d6>
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d002      	beq.n	80016f6 <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	f000 bcfc 	b.w	80020ee <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f6:	4ba0      	ldr	r3, [pc, #640]	; (8001978 <HAL_RCC_OscConfig+0x658>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6959      	ldr	r1, [r3, #20]
 8001704:	23f8      	movs	r3, #248	; 0xf8
 8001706:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800170e:	fa93 f3a3 	rbit	r3, r3
 8001712:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8001716:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800171a:	fab3 f383 	clz	r3, r3
 800171e:	fa01 f303 	lsl.w	r3, r1, r3
 8001722:	4995      	ldr	r1, [pc, #596]	; (8001978 <HAL_RCC_OscConfig+0x658>)
 8001724:	4313      	orrs	r3, r2
 8001726:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001728:	e0f5      	b.n	8001916 <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	2b00      	cmp	r3, #0
 8001732:	f000 8085 	beq.w	8001840 <HAL_RCC_OscConfig+0x520>
 8001736:	2301      	movs	r3, #1
 8001738:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001740:	fa93 f3a3 	rbit	r3, r3
 8001744:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8001748:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800174c:	fab3 f383 	clz	r3, r3
 8001750:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001754:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	461a      	mov	r2, r3
 800175c:	2301      	movs	r3, #1
 800175e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001760:	f7fe fd8c 	bl	800027c <HAL_GetTick>
 8001764:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001768:	e00a      	b.n	8001780 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800176a:	f7fe fd87 	bl	800027c <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d902      	bls.n	8001780 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	f000 bcb7 	b.w	80020ee <HAL_RCC_OscConfig+0xdce>
 8001780:	2302      	movs	r3, #2
 8001782:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001786:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800178a:	fa93 f3a3 	rbit	r3, r3
 800178e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8001792:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001796:	fab3 f383 	clz	r3, r3
 800179a:	b2db      	uxtb	r3, r3
 800179c:	095b      	lsrs	r3, r3, #5
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d102      	bne.n	80017b0 <HAL_RCC_OscConfig+0x490>
 80017aa:	4b73      	ldr	r3, [pc, #460]	; (8001978 <HAL_RCC_OscConfig+0x658>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	e013      	b.n	80017d8 <HAL_RCC_OscConfig+0x4b8>
 80017b0:	2302      	movs	r3, #2
 80017b2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80017ba:	fa93 f3a3 	rbit	r3, r3
 80017be:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80017c2:	2302      	movs	r3, #2
 80017c4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80017c8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80017cc:	fa93 f3a3 	rbit	r3, r3
 80017d0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80017d4:	4b68      	ldr	r3, [pc, #416]	; (8001978 <HAL_RCC_OscConfig+0x658>)
 80017d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d8:	2202      	movs	r2, #2
 80017da:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80017de:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80017e2:	fa92 f2a2 	rbit	r2, r2
 80017e6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 80017ea:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80017ee:	fab2 f282 	clz	r2, r2
 80017f2:	b252      	sxtb	r2, r2
 80017f4:	f042 0220 	orr.w	r2, r2, #32
 80017f8:	b252      	sxtb	r2, r2
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	f002 021f 	and.w	r2, r2, #31
 8001800:	2101      	movs	r1, #1
 8001802:	fa01 f202 	lsl.w	r2, r1, r2
 8001806:	4013      	ands	r3, r2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0ae      	beq.n	800176a <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180c:	4b5a      	ldr	r3, [pc, #360]	; (8001978 <HAL_RCC_OscConfig+0x658>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001814:	1d3b      	adds	r3, r7, #4
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6959      	ldr	r1, [r3, #20]
 800181a:	23f8      	movs	r3, #248	; 0xf8
 800181c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001820:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001824:	fa93 f3a3 	rbit	r3, r3
 8001828:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 800182c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001830:	fab3 f383 	clz	r3, r3
 8001834:	fa01 f303 	lsl.w	r3, r1, r3
 8001838:	494f      	ldr	r1, [pc, #316]	; (8001978 <HAL_RCC_OscConfig+0x658>)
 800183a:	4313      	orrs	r3, r2
 800183c:	600b      	str	r3, [r1, #0]
 800183e:	e06a      	b.n	8001916 <HAL_RCC_OscConfig+0x5f6>
 8001840:	2301      	movs	r3, #1
 8001842:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001846:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800184a:	fa93 f3a3 	rbit	r3, r3
 800184e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8001852:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001856:	fab3 f383 	clz	r3, r3
 800185a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800185e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	461a      	mov	r2, r3
 8001866:	2300      	movs	r3, #0
 8001868:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186a:	f7fe fd07 	bl	800027c <HAL_GetTick>
 800186e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001872:	e00a      	b.n	800188a <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001874:	f7fe fd02 	bl	800027c <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d902      	bls.n	800188a <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	f000 bc32 	b.w	80020ee <HAL_RCC_OscConfig+0xdce>
 800188a:	2302      	movs	r3, #2
 800188c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001890:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001894:	fa93 f3a3 	rbit	r3, r3
 8001898:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 800189c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018a0:	fab3 f383 	clz	r3, r3
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	095b      	lsrs	r3, r3, #5
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d102      	bne.n	80018ba <HAL_RCC_OscConfig+0x59a>
 80018b4:	4b30      	ldr	r3, [pc, #192]	; (8001978 <HAL_RCC_OscConfig+0x658>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	e013      	b.n	80018e2 <HAL_RCC_OscConfig+0x5c2>
 80018ba:	2302      	movs	r3, #2
 80018bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80018c4:	fa93 f3a3 	rbit	r3, r3
 80018c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80018cc:	2302      	movs	r3, #2
 80018ce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80018d2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80018d6:	fa93 f3a3 	rbit	r3, r3
 80018da:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80018de:	4b26      	ldr	r3, [pc, #152]	; (8001978 <HAL_RCC_OscConfig+0x658>)
 80018e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e2:	2202      	movs	r2, #2
 80018e4:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80018e8:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80018ec:	fa92 f2a2 	rbit	r2, r2
 80018f0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 80018f4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80018f8:	fab2 f282 	clz	r2, r2
 80018fc:	b252      	sxtb	r2, r2
 80018fe:	f042 0220 	orr.w	r2, r2, #32
 8001902:	b252      	sxtb	r2, r2
 8001904:	b2d2      	uxtb	r2, r2
 8001906:	f002 021f 	and.w	r2, r2, #31
 800190a:	2101      	movs	r1, #1
 800190c:	fa01 f202 	lsl.w	r2, r1, r2
 8001910:	4013      	ands	r3, r2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1ae      	bne.n	8001874 <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0308 	and.w	r3, r3, #8
 8001920:	2b00      	cmp	r3, #0
 8001922:	f000 80d8 	beq.w	8001ad6 <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d067      	beq.n	8001a00 <HAL_RCC_OscConfig+0x6e0>
 8001930:	2301      	movs	r3, #1
 8001932:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800193a:	fa93 f3a3 	rbit	r3, r3
 800193e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8001942:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001946:	fab3 f383 	clz	r3, r3
 800194a:	461a      	mov	r2, r3
 800194c:	4b0b      	ldr	r3, [pc, #44]	; (800197c <HAL_RCC_OscConfig+0x65c>)
 800194e:	4413      	add	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	461a      	mov	r2, r3
 8001954:	2301      	movs	r3, #1
 8001956:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001958:	f7fe fc90 	bl	800027c <HAL_GetTick>
 800195c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001960:	e00e      	b.n	8001980 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001962:	f7fe fc8b 	bl	800027c <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d906      	bls.n	8001980 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e3bb      	b.n	80020ee <HAL_RCC_OscConfig+0xdce>
 8001976:	bf00      	nop
 8001978:	40021000 	.word	0x40021000
 800197c:	10908120 	.word	0x10908120
 8001980:	2302      	movs	r3, #2
 8001982:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001986:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800198a:	fa93 f3a3 	rbit	r3, r3
 800198e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001992:	2302      	movs	r3, #2
 8001994:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001998:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800199c:	fa93 f2a3 	rbit	r2, r3
 80019a0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80019aa:	2202      	movs	r2, #2
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	fa93 f2a3 	rbit	r2, r3
 80019b8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80019bc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019be:	4ba5      	ldr	r3, [pc, #660]	; (8001c54 <HAL_RCC_OscConfig+0x934>)
 80019c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019c2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80019c6:	2102      	movs	r1, #2
 80019c8:	6019      	str	r1, [r3, #0]
 80019ca:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	fa93 f1a3 	rbit	r1, r3
 80019d4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80019d8:	6019      	str	r1, [r3, #0]
  return(result);
 80019da:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	fab3 f383 	clz	r3, r3
 80019e4:	b25b      	sxtb	r3, r3
 80019e6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80019ea:	b25b      	sxtb	r3, r3
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	f003 031f 	and.w	r3, r3, #31
 80019f2:	2101      	movs	r1, #1
 80019f4:	fa01 f303 	lsl.w	r3, r1, r3
 80019f8:	4013      	ands	r3, r2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0b1      	beq.n	8001962 <HAL_RCC_OscConfig+0x642>
 80019fe:	e06a      	b.n	8001ad6 <HAL_RCC_OscConfig+0x7b6>
 8001a00:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a04:	2201      	movs	r2, #1
 8001a06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a08:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	fa93 f2a3 	rbit	r2, r3
 8001a12:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001a16:	601a      	str	r2, [r3, #0]
  return(result);
 8001a18:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001a1c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a1e:	fab3 f383 	clz	r3, r3
 8001a22:	461a      	mov	r2, r3
 8001a24:	4b8c      	ldr	r3, [pc, #560]	; (8001c58 <HAL_RCC_OscConfig+0x938>)
 8001a26:	4413      	add	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a30:	f7fe fc24 	bl	800027c <HAL_GetTick>
 8001a34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a38:	e009      	b.n	8001a4e <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a3a:	f7fe fc1f 	bl	800027c <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e34f      	b.n	80020ee <HAL_RCC_OscConfig+0xdce>
 8001a4e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a52:	2202      	movs	r2, #2
 8001a54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a56:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	fa93 f2a3 	rbit	r2, r3
 8001a60:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	fa93 f2a3 	rbit	r2, r3
 8001a78:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a82:	2202      	movs	r2, #2
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	fa93 f2a3 	rbit	r2, r3
 8001a90:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001a94:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a96:	4b6f      	ldr	r3, [pc, #444]	; (8001c54 <HAL_RCC_OscConfig+0x934>)
 8001a98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a9a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a9e:	2102      	movs	r1, #2
 8001aa0:	6019      	str	r1, [r3, #0]
 8001aa2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	fa93 f1a3 	rbit	r1, r3
 8001aac:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001ab0:	6019      	str	r1, [r3, #0]
  return(result);
 8001ab2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	fab3 f383 	clz	r3, r3
 8001abc:	b25b      	sxtb	r3, r3
 8001abe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001ac2:	b25b      	sxtb	r3, r3
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	f003 031f 	and.w	r3, r3, #31
 8001aca:	2101      	movs	r1, #1
 8001acc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1b1      	bne.n	8001a3a <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ad6:	1d3b      	adds	r3, r7, #4
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 8159 	beq.w	8001d98 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aec:	4b59      	ldr	r3, [pc, #356]	; (8001c54 <HAL_RCC_OscConfig+0x934>)
 8001aee:	69db      	ldr	r3, [r3, #28]
 8001af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d112      	bne.n	8001b1e <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001af8:	4b56      	ldr	r3, [pc, #344]	; (8001c54 <HAL_RCC_OscConfig+0x934>)
 8001afa:	69db      	ldr	r3, [r3, #28]
 8001afc:	4a55      	ldr	r2, [pc, #340]	; (8001c54 <HAL_RCC_OscConfig+0x934>)
 8001afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b02:	61d3      	str	r3, [r2, #28]
 8001b04:	4b53      	ldr	r3, [pc, #332]	; (8001c54 <HAL_RCC_OscConfig+0x934>)
 8001b06:	69db      	ldr	r3, [r3, #28]
 8001b08:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001b0c:	f107 030c 	add.w	r3, r7, #12
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	f107 030c 	add.w	r3, r7, #12
 8001b16:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1e:	4b4f      	ldr	r3, [pc, #316]	; (8001c5c <HAL_RCC_OscConfig+0x93c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d11a      	bne.n	8001b60 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b2a:	4b4c      	ldr	r3, [pc, #304]	; (8001c5c <HAL_RCC_OscConfig+0x93c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a4b      	ldr	r2, [pc, #300]	; (8001c5c <HAL_RCC_OscConfig+0x93c>)
 8001b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b34:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b36:	f7fe fba1 	bl	800027c <HAL_GetTick>
 8001b3a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b3e:	e009      	b.n	8001b54 <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b40:	f7fe fb9c 	bl	800027c <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b64      	cmp	r3, #100	; 0x64
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e2cc      	b.n	80020ee <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b54:	4b41      	ldr	r3, [pc, #260]	; (8001c5c <HAL_RCC_OscConfig+0x93c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0ef      	beq.n	8001b40 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b60:	1d3b      	adds	r3, r7, #4
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d106      	bne.n	8001b78 <HAL_RCC_OscConfig+0x858>
 8001b6a:	4b3a      	ldr	r3, [pc, #232]	; (8001c54 <HAL_RCC_OscConfig+0x934>)
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	4a39      	ldr	r2, [pc, #228]	; (8001c54 <HAL_RCC_OscConfig+0x934>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6213      	str	r3, [r2, #32]
 8001b76:	e02f      	b.n	8001bd8 <HAL_RCC_OscConfig+0x8b8>
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10c      	bne.n	8001b9c <HAL_RCC_OscConfig+0x87c>
 8001b82:	4b34      	ldr	r3, [pc, #208]	; (8001c54 <HAL_RCC_OscConfig+0x934>)
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	4a33      	ldr	r2, [pc, #204]	; (8001c54 <HAL_RCC_OscConfig+0x934>)
 8001b88:	f023 0301 	bic.w	r3, r3, #1
 8001b8c:	6213      	str	r3, [r2, #32]
 8001b8e:	4b31      	ldr	r3, [pc, #196]	; (8001c54 <HAL_RCC_OscConfig+0x934>)
 8001b90:	6a1b      	ldr	r3, [r3, #32]
 8001b92:	4a30      	ldr	r2, [pc, #192]	; (8001c54 <HAL_RCC_OscConfig+0x934>)
 8001b94:	f023 0304 	bic.w	r3, r3, #4
 8001b98:	6213      	str	r3, [r2, #32]
 8001b9a:	e01d      	b.n	8001bd8 <HAL_RCC_OscConfig+0x8b8>
 8001b9c:	1d3b      	adds	r3, r7, #4
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	2b05      	cmp	r3, #5
 8001ba4:	d10c      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x8a0>
 8001ba6:	4b2b      	ldr	r3, [pc, #172]	; (8001c54 <HAL_RCC_OscConfig+0x934>)
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
 8001baa:	4a2a      	ldr	r2, [pc, #168]	; (8001c54 <HAL_RCC_OscConfig+0x934>)
 8001bac:	f043 0304 	orr.w	r3, r3, #4
 8001bb0:	6213      	str	r3, [r2, #32]
 8001bb2:	4b28      	ldr	r3, [pc, #160]	; (8001c54 <HAL_RCC_OscConfig+0x934>)
 8001bb4:	6a1b      	ldr	r3, [r3, #32]
 8001bb6:	4a27      	ldr	r2, [pc, #156]	; (8001c54 <HAL_RCC_OscConfig+0x934>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6213      	str	r3, [r2, #32]
 8001bbe:	e00b      	b.n	8001bd8 <HAL_RCC_OscConfig+0x8b8>
 8001bc0:	4b24      	ldr	r3, [pc, #144]	; (8001c54 <HAL_RCC_OscConfig+0x934>)
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	4a23      	ldr	r2, [pc, #140]	; (8001c54 <HAL_RCC_OscConfig+0x934>)
 8001bc6:	f023 0301 	bic.w	r3, r3, #1
 8001bca:	6213      	str	r3, [r2, #32]
 8001bcc:	4b21      	ldr	r3, [pc, #132]	; (8001c54 <HAL_RCC_OscConfig+0x934>)
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	4a20      	ldr	r2, [pc, #128]	; (8001c54 <HAL_RCC_OscConfig+0x934>)
 8001bd2:	f023 0304 	bic.w	r3, r3, #4
 8001bd6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bd8:	1d3b      	adds	r3, r7, #4
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d06b      	beq.n	8001cba <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be2:	f7fe fb4b 	bl	800027c <HAL_GetTick>
 8001be6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bea:	e00b      	b.n	8001c04 <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bec:	f7fe fb46 	bl	800027c <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e274      	b.n	80020ee <HAL_RCC_OscConfig+0xdce>
 8001c04:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001c08:	2202      	movs	r2, #2
 8001c0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	fa93 f2a3 	rbit	r2, r3
 8001c16:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001c20:	2202      	movs	r2, #2
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	fa93 f2a3 	rbit	r2, r3
 8001c2e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001c32:	601a      	str	r2, [r3, #0]
  return(result);
 8001c34:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001c38:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c3a:	fab3 f383 	clz	r3, r3
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	095b      	lsrs	r3, r3, #5
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	f043 0302 	orr.w	r3, r3, #2
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d108      	bne.n	8001c60 <HAL_RCC_OscConfig+0x940>
 8001c4e:	4b01      	ldr	r3, [pc, #4]	; (8001c54 <HAL_RCC_OscConfig+0x934>)
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	e013      	b.n	8001c7c <HAL_RCC_OscConfig+0x95c>
 8001c54:	40021000 	.word	0x40021000
 8001c58:	10908120 	.word	0x10908120
 8001c5c:	40007000 	.word	0x40007000
 8001c60:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c64:	2202      	movs	r2, #2
 8001c66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c68:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	fa93 f2a3 	rbit	r2, r3
 8001c72:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	4bbb      	ldr	r3, [pc, #748]	; (8001f68 <HAL_RCC_OscConfig+0xc48>)
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001c80:	2102      	movs	r1, #2
 8001c82:	6011      	str	r1, [r2, #0]
 8001c84:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	fa92 f1a2 	rbit	r1, r2
 8001c8e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001c92:	6011      	str	r1, [r2, #0]
  return(result);
 8001c94:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001c98:	6812      	ldr	r2, [r2, #0]
 8001c9a:	fab2 f282 	clz	r2, r2
 8001c9e:	b252      	sxtb	r2, r2
 8001ca0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ca4:	b252      	sxtb	r2, r2
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	f002 021f 	and.w	r2, r2, #31
 8001cac:	2101      	movs	r1, #1
 8001cae:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d099      	beq.n	8001bec <HAL_RCC_OscConfig+0x8cc>
 8001cb8:	e064      	b.n	8001d84 <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cba:	f7fe fadf 	bl	800027c <HAL_GetTick>
 8001cbe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc2:	e00b      	b.n	8001cdc <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cc4:	f7fe fada 	bl	800027c <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e208      	b.n	80020ee <HAL_RCC_OscConfig+0xdce>
 8001cdc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	fa93 f2a3 	rbit	r2, r3
 8001cee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	fa93 f2a3 	rbit	r2, r3
 8001d06:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d0a:	601a      	str	r2, [r3, #0]
  return(result);
 8001d0c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d10:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d12:	fab3 f383 	clz	r3, r3
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	095b      	lsrs	r3, r3, #5
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	f043 0302 	orr.w	r3, r3, #2
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d102      	bne.n	8001d2c <HAL_RCC_OscConfig+0xa0c>
 8001d26:	4b90      	ldr	r3, [pc, #576]	; (8001f68 <HAL_RCC_OscConfig+0xc48>)
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	e00d      	b.n	8001d48 <HAL_RCC_OscConfig+0xa28>
 8001d2c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d30:	2202      	movs	r2, #2
 8001d32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d34:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	fa93 f2a3 	rbit	r2, r3
 8001d3e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	4b88      	ldr	r3, [pc, #544]	; (8001f68 <HAL_RCC_OscConfig+0xc48>)
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001d4c:	2102      	movs	r1, #2
 8001d4e:	6011      	str	r1, [r2, #0]
 8001d50:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001d54:	6812      	ldr	r2, [r2, #0]
 8001d56:	fa92 f1a2 	rbit	r1, r2
 8001d5a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001d5e:	6011      	str	r1, [r2, #0]
  return(result);
 8001d60:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001d64:	6812      	ldr	r2, [r2, #0]
 8001d66:	fab2 f282 	clz	r2, r2
 8001d6a:	b252      	sxtb	r2, r2
 8001d6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d70:	b252      	sxtb	r2, r2
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	f002 021f 	and.w	r2, r2, #31
 8001d78:	2101      	movs	r1, #1
 8001d7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d19f      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d84:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d105      	bne.n	8001d98 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d8c:	4b76      	ldr	r3, [pc, #472]	; (8001f68 <HAL_RCC_OscConfig+0xc48>)
 8001d8e:	69db      	ldr	r3, [r3, #28]
 8001d90:	4a75      	ldr	r2, [pc, #468]	; (8001f68 <HAL_RCC_OscConfig+0xc48>)
 8001d92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d96:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d98:	1d3b      	adds	r3, r7, #4
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 81a4 	beq.w	80020ec <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001da4:	4b70      	ldr	r3, [pc, #448]	; (8001f68 <HAL_RCC_OscConfig+0xc48>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 030c 	and.w	r3, r3, #12
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	f000 819b 	beq.w	80020e8 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001db2:	1d3b      	adds	r3, r7, #4
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	69db      	ldr	r3, [r3, #28]
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	f040 8113 	bne.w	8001fe4 <HAL_RCC_OscConfig+0xcc4>
 8001dbe:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001dc2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001dc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	fa93 f2a3 	rbit	r2, r3
 8001dd2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001dd6:	601a      	str	r2, [r3, #0]
  return(result);
 8001dd8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001ddc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dde:	fab3 f383 	clz	r3, r3
 8001de2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001de6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	461a      	mov	r2, r3
 8001dee:	2300      	movs	r3, #0
 8001df0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df2:	f7fe fa43 	bl	800027c <HAL_GetTick>
 8001df6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dfa:	e009      	b.n	8001e10 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dfc:	f7fe fa3e 	bl	800027c <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e16e      	b.n	80020ee <HAL_RCC_OscConfig+0xdce>
 8001e10:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	fa93 f2a3 	rbit	r2, r3
 8001e24:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001e28:	601a      	str	r2, [r3, #0]
  return(result);
 8001e2a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001e2e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e30:	fab3 f383 	clz	r3, r3
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	095b      	lsrs	r3, r3, #5
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d102      	bne.n	8001e4a <HAL_RCC_OscConfig+0xb2a>
 8001e44:	4b48      	ldr	r3, [pc, #288]	; (8001f68 <HAL_RCC_OscConfig+0xc48>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	e01b      	b.n	8001e82 <HAL_RCC_OscConfig+0xb62>
 8001e4a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e54:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	fa93 f2a3 	rbit	r2, r3
 8001e5e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	fa93 f2a3 	rbit	r2, r3
 8001e78:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	4b3a      	ldr	r3, [pc, #232]	; (8001f68 <HAL_RCC_OscConfig+0xc48>)
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e82:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001e86:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e8a:	6011      	str	r1, [r2, #0]
 8001e8c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001e90:	6812      	ldr	r2, [r2, #0]
 8001e92:	fa92 f1a2 	rbit	r1, r2
 8001e96:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e9a:	6011      	str	r1, [r2, #0]
  return(result);
 8001e9c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ea0:	6812      	ldr	r2, [r2, #0]
 8001ea2:	fab2 f282 	clz	r2, r2
 8001ea6:	b252      	sxtb	r2, r2
 8001ea8:	f042 0220 	orr.w	r2, r2, #32
 8001eac:	b252      	sxtb	r2, r2
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	f002 021f 	and.w	r2, r2, #31
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eba:	4013      	ands	r3, r2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d19d      	bne.n	8001dfc <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ec0:	4b29      	ldr	r3, [pc, #164]	; (8001f68 <HAL_RCC_OscConfig+0xc48>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ec8:	1d3b      	adds	r3, r7, #4
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001ece:	1d3b      	adds	r3, r7, #4
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	430b      	orrs	r3, r1
 8001ed6:	4924      	ldr	r1, [pc, #144]	; (8001f68 <HAL_RCC_OscConfig+0xc48>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	604b      	str	r3, [r1, #4]
 8001edc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ee0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ee4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	fa93 f2a3 	rbit	r2, r3
 8001ef0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ef4:	601a      	str	r2, [r3, #0]
  return(result);
 8001ef6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001efa:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001efc:	fab3 f383 	clz	r3, r3
 8001f00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f10:	f7fe f9b4 	bl	800027c <HAL_GetTick>
 8001f14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f18:	e009      	b.n	8001f2e <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f1a:	f7fe f9af 	bl	800027c <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e0df      	b.n	80020ee <HAL_RCC_OscConfig+0xdce>
 8001f2e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f38:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	fa93 f2a3 	rbit	r2, r3
 8001f42:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f46:	601a      	str	r2, [r3, #0]
  return(result);
 8001f48:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f4c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f4e:	fab3 f383 	clz	r3, r3
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	095b      	lsrs	r3, r3, #5
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d104      	bne.n	8001f6c <HAL_RCC_OscConfig+0xc4c>
 8001f62:	4b01      	ldr	r3, [pc, #4]	; (8001f68 <HAL_RCC_OscConfig+0xc48>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	e01d      	b.n	8001fa4 <HAL_RCC_OscConfig+0xc84>
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f76:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	fa93 f2a3 	rbit	r2, r3
 8001f80:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	fa93 f2a3 	rbit	r2, r3
 8001f9a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	4b55      	ldr	r3, [pc, #340]	; (80020f8 <HAL_RCC_OscConfig+0xdd8>)
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001fa8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fac:	6011      	str	r1, [r2, #0]
 8001fae:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001fb2:	6812      	ldr	r2, [r2, #0]
 8001fb4:	fa92 f1a2 	rbit	r1, r2
 8001fb8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001fbc:	6011      	str	r1, [r2, #0]
  return(result);
 8001fbe:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001fc2:	6812      	ldr	r2, [r2, #0]
 8001fc4:	fab2 f282 	clz	r2, r2
 8001fc8:	b252      	sxtb	r2, r2
 8001fca:	f042 0220 	orr.w	r2, r2, #32
 8001fce:	b252      	sxtb	r2, r2
 8001fd0:	b2d2      	uxtb	r2, r2
 8001fd2:	f002 021f 	and.w	r2, r2, #31
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fdc:	4013      	ands	r3, r2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d09b      	beq.n	8001f1a <HAL_RCC_OscConfig+0xbfa>
 8001fe2:	e083      	b.n	80020ec <HAL_RCC_OscConfig+0xdcc>
 8001fe4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fe8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001fec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	fa93 f2a3 	rbit	r2, r3
 8001ff8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ffc:	601a      	str	r2, [r3, #0]
  return(result);
 8001ffe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002002:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002004:	fab3 f383 	clz	r3, r3
 8002008:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800200c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	461a      	mov	r2, r3
 8002014:	2300      	movs	r3, #0
 8002016:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002018:	f7fe f930 	bl	800027c <HAL_GetTick>
 800201c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002020:	e009      	b.n	8002036 <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002022:	f7fe f92b 	bl	800027c <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e05b      	b.n	80020ee <HAL_RCC_OscConfig+0xdce>
 8002036:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800203a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800203e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002040:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	fa93 f2a3 	rbit	r2, r3
 800204a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800204e:	601a      	str	r2, [r3, #0]
  return(result);
 8002050:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002054:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002056:	fab3 f383 	clz	r3, r3
 800205a:	b2db      	uxtb	r3, r3
 800205c:	095b      	lsrs	r3, r3, #5
 800205e:	b2db      	uxtb	r3, r3
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b01      	cmp	r3, #1
 8002068:	d102      	bne.n	8002070 <HAL_RCC_OscConfig+0xd50>
 800206a:	4b23      	ldr	r3, [pc, #140]	; (80020f8 <HAL_RCC_OscConfig+0xdd8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	e01b      	b.n	80020a8 <HAL_RCC_OscConfig+0xd88>
 8002070:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002074:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002078:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	fa93 f2a3 	rbit	r2, r3
 8002084:	f107 0320 	add.w	r3, r7, #32
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	f107 031c 	add.w	r3, r7, #28
 800208e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	f107 031c 	add.w	r3, r7, #28
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	fa93 f2a3 	rbit	r2, r3
 800209e:	f107 0318 	add.w	r3, r7, #24
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	4b14      	ldr	r3, [pc, #80]	; (80020f8 <HAL_RCC_OscConfig+0xdd8>)
 80020a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a8:	f107 0214 	add.w	r2, r7, #20
 80020ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80020b0:	6011      	str	r1, [r2, #0]
 80020b2:	f107 0214 	add.w	r2, r7, #20
 80020b6:	6812      	ldr	r2, [r2, #0]
 80020b8:	fa92 f1a2 	rbit	r1, r2
 80020bc:	f107 0210 	add.w	r2, r7, #16
 80020c0:	6011      	str	r1, [r2, #0]
  return(result);
 80020c2:	f107 0210 	add.w	r2, r7, #16
 80020c6:	6812      	ldr	r2, [r2, #0]
 80020c8:	fab2 f282 	clz	r2, r2
 80020cc:	b252      	sxtb	r2, r2
 80020ce:	f042 0220 	orr.w	r2, r2, #32
 80020d2:	b252      	sxtb	r2, r2
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	f002 021f 	and.w	r2, r2, #31
 80020da:	2101      	movs	r1, #1
 80020dc:	fa01 f202 	lsl.w	r2, r1, r2
 80020e0:	4013      	ands	r3, r2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d19d      	bne.n	8002022 <HAL_RCC_OscConfig+0xd02>
 80020e6:	e001      	b.n	80020ec <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e000      	b.n	80020ee <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40021000 	.word	0x40021000

080020fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b09e      	sub	sp, #120	; 0x78
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002106:	2300      	movs	r3, #0
 8002108:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e164      	b.n	80023de <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002114:	4b92      	ldr	r3, [pc, #584]	; (8002360 <HAL_RCC_ClockConfig+0x264>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	429a      	cmp	r2, r3
 8002120:	d910      	bls.n	8002144 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002122:	4b8f      	ldr	r3, [pc, #572]	; (8002360 <HAL_RCC_ClockConfig+0x264>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f023 0207 	bic.w	r2, r3, #7
 800212a:	498d      	ldr	r1, [pc, #564]	; (8002360 <HAL_RCC_ClockConfig+0x264>)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	4313      	orrs	r3, r2
 8002130:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002132:	4b8b      	ldr	r3, [pc, #556]	; (8002360 <HAL_RCC_ClockConfig+0x264>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	429a      	cmp	r2, r3
 800213e:	d001      	beq.n	8002144 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e14c      	b.n	80023de <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d008      	beq.n	8002162 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002150:	4b84      	ldr	r3, [pc, #528]	; (8002364 <HAL_RCC_ClockConfig+0x268>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	4981      	ldr	r1, [pc, #516]	; (8002364 <HAL_RCC_ClockConfig+0x268>)
 800215e:	4313      	orrs	r3, r2
 8002160:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 80df 	beq.w	800232e <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d13d      	bne.n	80021f4 <HAL_RCC_ClockConfig+0xf8>
 8002178:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800217c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002180:	fa93 f3a3 	rbit	r3, r3
 8002184:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8002186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002188:	fab3 f383 	clz	r3, r3
 800218c:	b2db      	uxtb	r3, r3
 800218e:	095b      	lsrs	r3, r3, #5
 8002190:	b2db      	uxtb	r3, r3
 8002192:	f043 0301 	orr.w	r3, r3, #1
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b01      	cmp	r3, #1
 800219a:	d102      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xa6>
 800219c:	4b71      	ldr	r3, [pc, #452]	; (8002364 <HAL_RCC_ClockConfig+0x268>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	e00f      	b.n	80021c2 <HAL_RCC_ClockConfig+0xc6>
 80021a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021aa:	fa93 f3a3 	rbit	r3, r3
 80021ae:	667b      	str	r3, [r7, #100]	; 0x64
 80021b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021b4:	663b      	str	r3, [r7, #96]	; 0x60
 80021b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021b8:	fa93 f3a3 	rbit	r3, r3
 80021bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021be:	4b69      	ldr	r3, [pc, #420]	; (8002364 <HAL_RCC_ClockConfig+0x268>)
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021c6:	65ba      	str	r2, [r7, #88]	; 0x58
 80021c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80021ca:	fa92 f2a2 	rbit	r2, r2
 80021ce:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 80021d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80021d2:	fab2 f282 	clz	r2, r2
 80021d6:	b252      	sxtb	r2, r2
 80021d8:	f042 0220 	orr.w	r2, r2, #32
 80021dc:	b252      	sxtb	r2, r2
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	f002 021f 	and.w	r2, r2, #31
 80021e4:	2101      	movs	r1, #1
 80021e6:	fa01 f202 	lsl.w	r2, r1, r2
 80021ea:	4013      	ands	r3, r2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d17d      	bne.n	80022ec <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e0f4      	b.n	80023de <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d13d      	bne.n	8002278 <HAL_RCC_ClockConfig+0x17c>
 80021fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002200:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002204:	fa93 f3a3 	rbit	r3, r3
 8002208:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 800220a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800220c:	fab3 f383 	clz	r3, r3
 8002210:	b2db      	uxtb	r3, r3
 8002212:	095b      	lsrs	r3, r3, #5
 8002214:	b2db      	uxtb	r3, r3
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b01      	cmp	r3, #1
 800221e:	d102      	bne.n	8002226 <HAL_RCC_ClockConfig+0x12a>
 8002220:	4b50      	ldr	r3, [pc, #320]	; (8002364 <HAL_RCC_ClockConfig+0x268>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	e00f      	b.n	8002246 <HAL_RCC_ClockConfig+0x14a>
 8002226:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800222a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800222e:	fa93 f3a3 	rbit	r3, r3
 8002232:	647b      	str	r3, [r7, #68]	; 0x44
 8002234:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002238:	643b      	str	r3, [r7, #64]	; 0x40
 800223a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800223c:	fa93 f3a3 	rbit	r3, r3
 8002240:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002242:	4b48      	ldr	r3, [pc, #288]	; (8002364 <HAL_RCC_ClockConfig+0x268>)
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800224a:	63ba      	str	r2, [r7, #56]	; 0x38
 800224c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800224e:	fa92 f2a2 	rbit	r2, r2
 8002252:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 8002254:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002256:	fab2 f282 	clz	r2, r2
 800225a:	b252      	sxtb	r2, r2
 800225c:	f042 0220 	orr.w	r2, r2, #32
 8002260:	b252      	sxtb	r2, r2
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	f002 021f 	and.w	r2, r2, #31
 8002268:	2101      	movs	r1, #1
 800226a:	fa01 f202 	lsl.w	r2, r1, r2
 800226e:	4013      	ands	r3, r2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d13b      	bne.n	80022ec <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e0b2      	b.n	80023de <HAL_RCC_ClockConfig+0x2e2>
 8002278:	2302      	movs	r3, #2
 800227a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227e:	fa93 f3a3 	rbit	r3, r3
 8002282:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002286:	fab3 f383 	clz	r3, r3
 800228a:	b2db      	uxtb	r3, r3
 800228c:	095b      	lsrs	r3, r3, #5
 800228e:	b2db      	uxtb	r3, r3
 8002290:	f043 0301 	orr.w	r3, r3, #1
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b01      	cmp	r3, #1
 8002298:	d102      	bne.n	80022a0 <HAL_RCC_ClockConfig+0x1a4>
 800229a:	4b32      	ldr	r3, [pc, #200]	; (8002364 <HAL_RCC_ClockConfig+0x268>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	e00d      	b.n	80022bc <HAL_RCC_ClockConfig+0x1c0>
 80022a0:	2302      	movs	r3, #2
 80022a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a6:	fa93 f3a3 	rbit	r3, r3
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24
 80022ac:	2302      	movs	r3, #2
 80022ae:	623b      	str	r3, [r7, #32]
 80022b0:	6a3b      	ldr	r3, [r7, #32]
 80022b2:	fa93 f3a3 	rbit	r3, r3
 80022b6:	61fb      	str	r3, [r7, #28]
 80022b8:	4b2a      	ldr	r3, [pc, #168]	; (8002364 <HAL_RCC_ClockConfig+0x268>)
 80022ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022bc:	2202      	movs	r2, #2
 80022be:	61ba      	str	r2, [r7, #24]
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	fa92 f2a2 	rbit	r2, r2
 80022c6:	617a      	str	r2, [r7, #20]
  return(result);
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	fab2 f282 	clz	r2, r2
 80022ce:	b252      	sxtb	r2, r2
 80022d0:	f042 0220 	orr.w	r2, r2, #32
 80022d4:	b252      	sxtb	r2, r2
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	f002 021f 	and.w	r2, r2, #31
 80022dc:	2101      	movs	r1, #1
 80022de:	fa01 f202 	lsl.w	r2, r1, r2
 80022e2:	4013      	ands	r3, r2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e078      	b.n	80023de <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ec:	4b1d      	ldr	r3, [pc, #116]	; (8002364 <HAL_RCC_ClockConfig+0x268>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f023 0203 	bic.w	r2, r3, #3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	491a      	ldr	r1, [pc, #104]	; (8002364 <HAL_RCC_ClockConfig+0x268>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022fe:	f7fd ffbd 	bl	800027c <HAL_GetTick>
 8002302:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002304:	e00a      	b.n	800231c <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002306:	f7fd ffb9 	bl	800027c <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	f241 3288 	movw	r2, #5000	; 0x1388
 8002314:	4293      	cmp	r3, r2
 8002316:	d901      	bls.n	800231c <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e060      	b.n	80023de <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231c:	4b11      	ldr	r3, [pc, #68]	; (8002364 <HAL_RCC_ClockConfig+0x268>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 020c 	and.w	r2, r3, #12
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	429a      	cmp	r2, r3
 800232c:	d1eb      	bne.n	8002306 <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800232e:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <HAL_RCC_ClockConfig+0x264>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d215      	bcs.n	8002368 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233c:	4b08      	ldr	r3, [pc, #32]	; (8002360 <HAL_RCC_ClockConfig+0x264>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f023 0207 	bic.w	r2, r3, #7
 8002344:	4906      	ldr	r1, [pc, #24]	; (8002360 <HAL_RCC_ClockConfig+0x264>)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	4313      	orrs	r3, r2
 800234a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800234c:	4b04      	ldr	r3, [pc, #16]	; (8002360 <HAL_RCC_ClockConfig+0x264>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d006      	beq.n	8002368 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e03f      	b.n	80023de <HAL_RCC_ClockConfig+0x2e2>
 800235e:	bf00      	nop
 8002360:	40022000 	.word	0x40022000
 8002364:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b00      	cmp	r3, #0
 8002372:	d008      	beq.n	8002386 <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002374:	4b1c      	ldr	r3, [pc, #112]	; (80023e8 <HAL_RCC_ClockConfig+0x2ec>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	4919      	ldr	r1, [pc, #100]	; (80023e8 <HAL_RCC_ClockConfig+0x2ec>)
 8002382:	4313      	orrs	r3, r2
 8002384:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	2b00      	cmp	r3, #0
 8002390:	d009      	beq.n	80023a6 <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002392:	4b15      	ldr	r3, [pc, #84]	; (80023e8 <HAL_RCC_ClockConfig+0x2ec>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	4911      	ldr	r1, [pc, #68]	; (80023e8 <HAL_RCC_ClockConfig+0x2ec>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80023a6:	f000 f825 	bl	80023f4 <HAL_RCC_GetSysClockFreq>
 80023aa:	4601      	mov	r1, r0
 80023ac:	4b0e      	ldr	r3, [pc, #56]	; (80023e8 <HAL_RCC_ClockConfig+0x2ec>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023b4:	23f0      	movs	r3, #240	; 0xf0
 80023b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	fa93 f3a3 	rbit	r3, r3
 80023be:	60fb      	str	r3, [r7, #12]
  return(result);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	fab3 f383 	clz	r3, r3
 80023c6:	fa22 f303 	lsr.w	r3, r2, r3
 80023ca:	4a08      	ldr	r2, [pc, #32]	; (80023ec <HAL_RCC_ClockConfig+0x2f0>)
 80023cc:	5cd3      	ldrb	r3, [r2, r3]
 80023ce:	fa21 f303 	lsr.w	r3, r1, r3
 80023d2:	4a07      	ldr	r2, [pc, #28]	; (80023f0 <HAL_RCC_ClockConfig+0x2f4>)
 80023d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80023d6:	2000      	movs	r0, #0
 80023d8:	f7fd ff0c 	bl	80001f4 <HAL_InitTick>
  
  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3778      	adds	r7, #120	; 0x78
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40021000 	.word	0x40021000
 80023ec:	080037f0 	.word	0x080037f0
 80023f0:	2000000c 	.word	0x2000000c

080023f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b08b      	sub	sp, #44	; 0x2c
 80023f8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
 80023fe:	2300      	movs	r3, #0
 8002400:	61bb      	str	r3, [r7, #24]
 8002402:	2300      	movs	r3, #0
 8002404:	627b      	str	r3, [r7, #36]	; 0x24
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800240a:	2300      	movs	r3, #0
 800240c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800240e:	4b29      	ldr	r3, [pc, #164]	; (80024b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	f003 030c 	and.w	r3, r3, #12
 800241a:	2b04      	cmp	r3, #4
 800241c:	d002      	beq.n	8002424 <HAL_RCC_GetSysClockFreq+0x30>
 800241e:	2b08      	cmp	r3, #8
 8002420:	d003      	beq.n	800242a <HAL_RCC_GetSysClockFreq+0x36>
 8002422:	e03c      	b.n	800249e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002424:	4b24      	ldr	r3, [pc, #144]	; (80024b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002426:	623b      	str	r3, [r7, #32]
      break;
 8002428:	e03c      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002430:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8002434:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	fa93 f3a3 	rbit	r3, r3
 800243c:	607b      	str	r3, [r7, #4]
  return(result);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	fab3 f383 	clz	r3, r3
 8002444:	fa22 f303 	lsr.w	r3, r2, r3
 8002448:	4a1c      	ldr	r2, [pc, #112]	; (80024bc <HAL_RCC_GetSysClockFreq+0xc8>)
 800244a:	5cd3      	ldrb	r3, [r2, r3]
 800244c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800244e:	4b19      	ldr	r3, [pc, #100]	; (80024b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002452:	f003 020f 	and.w	r2, r3, #15
 8002456:	230f      	movs	r3, #15
 8002458:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	fa93 f3a3 	rbit	r3, r3
 8002460:	60fb      	str	r3, [r7, #12]
  return(result);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	fab3 f383 	clz	r3, r3
 8002468:	fa22 f303 	lsr.w	r3, r2, r3
 800246c:	4a14      	ldr	r2, [pc, #80]	; (80024c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800246e:	5cd3      	ldrb	r3, [r2, r3]
 8002470:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d008      	beq.n	800248e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800247c:	4a0e      	ldr	r2, [pc, #56]	; (80024b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	fbb2 f2f3 	udiv	r2, r2, r3
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	fb02 f303 	mul.w	r3, r2, r3
 800248a:	627b      	str	r3, [r7, #36]	; 0x24
 800248c:	e004      	b.n	8002498 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	4a0c      	ldr	r2, [pc, #48]	; (80024c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002492:	fb02 f303 	mul.w	r3, r2, r3
 8002496:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	623b      	str	r3, [r7, #32]
      break;
 800249c:	e002      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800249e:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024a0:	623b      	str	r3, [r7, #32]
      break;
 80024a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024a4:	6a3b      	ldr	r3, [r7, #32]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	372c      	adds	r7, #44	; 0x2c
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	40021000 	.word	0x40021000
 80024b8:	007a1200 	.word	0x007a1200
 80024bc:	080037d0 	.word	0x080037d0
 80024c0:	080037e0 	.word	0x080037e0
 80024c4:	003d0900 	.word	0x003d0900

080024c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024cc:	4b03      	ldr	r3, [pc, #12]	; (80024dc <HAL_RCC_GetHCLKFreq+0x14>)
 80024ce:	681b      	ldr	r3, [r3, #0]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	2000000c 	.word	0x2000000c

080024e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80024e6:	f7ff ffef 	bl	80024c8 <HAL_RCC_GetHCLKFreq>
 80024ea:	4601      	mov	r1, r0
 80024ec:	4b0b      	ldr	r3, [pc, #44]	; (800251c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80024f4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80024f8:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	fa93 f3a3 	rbit	r3, r3
 8002500:	603b      	str	r3, [r7, #0]
  return(result);
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	fab3 f383 	clz	r3, r3
 8002508:	fa22 f303 	lsr.w	r3, r2, r3
 800250c:	4a04      	ldr	r2, [pc, #16]	; (8002520 <HAL_RCC_GetPCLK1Freq+0x40>)
 800250e:	5cd3      	ldrb	r3, [r2, r3]
 8002510:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002514:	4618      	mov	r0, r3
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40021000 	.word	0x40021000
 8002520:	08003800 	.word	0x08003800

08002524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800252a:	f7ff ffcd 	bl	80024c8 <HAL_RCC_GetHCLKFreq>
 800252e:	4601      	mov	r1, r0
 8002530:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8002538:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800253c:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	fa93 f3a3 	rbit	r3, r3
 8002544:	603b      	str	r3, [r7, #0]
  return(result);
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	fab3 f383 	clz	r3, r3
 800254c:	fa22 f303 	lsr.w	r3, r2, r3
 8002550:	4a04      	ldr	r2, [pc, #16]	; (8002564 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002552:	5cd3      	ldrb	r3, [r2, r3]
 8002554:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002558:	4618      	mov	r0, r3
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40021000 	.word	0x40021000
 8002564:	08003800 	.word	0x08003800

08002568 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e043      	b.n	8002602 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d106      	bne.n	8002594 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 ffda 	bl	8003548 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2224      	movs	r2, #36	; 0x24
 8002598:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0201 	bic.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 f9f9 	bl	80029a4 <UART_SetConfig>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d101      	bne.n	80025bc <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e022      	b.n	8002602 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d002      	beq.n	80025ca <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 fb53 	bl	8002c70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025e8:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f042 0201 	orr.w	r2, r2, #1
 80025f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 fbda 	bl	8002db4 <UART_CheckIdleState>
 8002600:	4603      	mov	r3, r0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b088      	sub	sp, #32
 800260e:	af02      	add	r7, sp, #8
 8002610:	60f8      	str	r0, [r7, #12]
 8002612:	60b9      	str	r1, [r7, #8]
 8002614:	603b      	str	r3, [r7, #0]
 8002616:	4613      	mov	r3, r2
 8002618:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b20      	cmp	r3, #32
 8002628:	d177      	bne.n	800271a <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d002      	beq.n	8002636 <HAL_UART_Transmit+0x2c>
 8002630:	88fb      	ldrh	r3, [r7, #6]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e070      	b.n	800271c <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8002640:	2b01      	cmp	r3, #1
 8002642:	d101      	bne.n	8002648 <HAL_UART_Transmit+0x3e>
 8002644:	2302      	movs	r3, #2
 8002646:	e069      	b.n	800271c <HAL_UART_Transmit+0x112>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2221      	movs	r2, #33	; 0x21
 800265a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800265e:	f7fd fe0d 	bl	800027c <HAL_GetTick>
 8002662:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	88fa      	ldrh	r2, [r7, #6]
 8002668:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	88fa      	ldrh	r2, [r7, #6]
 8002670:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8002674:	e034      	b.n	80026e0 <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800267c:	b29b      	uxth	r3, r3
 800267e:	3b01      	subs	r3, #1
 8002680:	b29a      	uxth	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	2200      	movs	r2, #0
 8002690:	2180      	movs	r1, #128	; 0x80
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f000 fbd7 	bl	8002e46 <UART_WaitOnFlagUntilTimeout>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e03c      	b.n	800271c <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026aa:	d111      	bne.n	80026d0 <HAL_UART_Transmit+0xc6>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10d      	bne.n	80026d0 <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	881a      	ldrh	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026c4:	b292      	uxth	r2, r2
 80026c6:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	3302      	adds	r3, #2
 80026cc:	60bb      	str	r3, [r7, #8]
 80026ce:	e007      	b.n	80026e0 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	1c5a      	adds	r2, r3, #1
 80026d4:	60ba      	str	r2, [r7, #8]
 80026d6:	781a      	ldrb	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	b292      	uxth	r2, r2
 80026de:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1c4      	bne.n	8002676 <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	2200      	movs	r2, #0
 80026f4:	2140      	movs	r1, #64	; 0x40
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 fba5 	bl	8002e46 <UART_WaitOnFlagUntilTimeout>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e00a      	b.n	800271c <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2220      	movs	r2, #32
 800270a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	e000      	b.n	800271c <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 800271a:	2302      	movs	r3, #2
  }
}
 800271c:	4618      	mov	r0, r3
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	617b      	str	r3, [r7, #20]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	613b      	str	r3, [r7, #16]
  uint32_t cr3its;
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	60fb      	str	r3, [r7, #12]
  if (errorflags == RESET)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10d      	bne.n	8002766 <HAL_UART_IRQHandler+0x42>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f003 0320 	and.w	r3, r3, #32
 8002750:	2b00      	cmp	r3, #0
 8002752:	d008      	beq.n	8002766 <HAL_UART_IRQHandler+0x42>
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	f003 0320 	and.w	r3, r3, #32
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_UART_IRQHandler+0x42>
    {
      UART_Receive_IT(huart);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 fc5f 	bl	8003022 <UART_Receive_IT>
      return;
 8002764:	e0fa      	b.n	800295c <HAL_UART_IRQHandler+0x238>
    }
  }  

  /* If some errors occur */
  cr3its = READ_REG(huart->Instance->CR3);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	60bb      	str	r3, [r7, #8]
  if(   (errorflags != RESET)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 80ba 	beq.w	80028ea <HAL_UART_IRQHandler+0x1c6>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b00      	cmp	r3, #0
 800277e:	d105      	bne.n	800278c <HAL_UART_IRQHandler+0x68>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 80af 	beq.w	80028ea <HAL_UART_IRQHandler+0x1c6>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00e      	beq.n	80027b4 <HAL_UART_IRQHandler+0x90>
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279c:	2b00      	cmp	r3, #0
 800279e:	d009      	beq.n	80027b4 <HAL_UART_IRQHandler+0x90>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2201      	movs	r2, #1
 80027a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027ac:	f043 0201 	orr.w	r2, r3, #1
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00e      	beq.n	80027dc <HAL_UART_IRQHandler+0xb8>
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d009      	beq.n	80027dc <HAL_UART_IRQHandler+0xb8>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2202      	movs	r2, #2
 80027ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027d4:	f043 0204 	orr.w	r2, r3, #4
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00e      	beq.n	8002804 <HAL_UART_IRQHandler+0xe0>
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d009      	beq.n	8002804 <HAL_UART_IRQHandler+0xe0>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2204      	movs	r2, #4
 80027f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027fc:	f043 0202 	orr.w	r2, r3, #2
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    
    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	f003 0308 	and.w	r3, r3, #8
 800280a:	2b00      	cmp	r3, #0
 800280c:	d013      	beq.n	8002836 <HAL_UART_IRQHandler+0x112>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	f003 0320 	and.w	r3, r3, #32
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8002814:	2b00      	cmp	r3, #0
 8002816:	d104      	bne.n	8002822 <HAL_UART_IRQHandler+0xfe>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d009      	beq.n	8002836 <HAL_UART_IRQHandler+0x112>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2208      	movs	r2, #8
 8002828:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800282e:	f043 0208 	orr.w	r2, r3, #8
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 808d 	beq.w	800295a <HAL_UART_IRQHandler+0x236>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	f003 0320 	and.w	r3, r3, #32
 8002846:	2b00      	cmp	r3, #0
 8002848:	d007      	beq.n	800285a <HAL_UART_IRQHandler+0x136>
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	f003 0320 	and.w	r3, r3, #32
 8002850:	2b00      	cmp	r3, #0
 8002852:	d002      	beq.n	800285a <HAL_UART_IRQHandler+0x136>
      {
        UART_Receive_IT(huart);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 fbe4 	bl	8003022 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800285e:	f003 0308 	and.w	r3, r3, #8
 8002862:	2b00      	cmp	r3, #0
 8002864:	d106      	bne.n	8002874 <HAL_UART_IRQHandler+0x150>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002870:	2b40      	cmp	r3, #64	; 0x40
 8002872:	d131      	bne.n	80028d8 <HAL_UART_IRQHandler+0x1b4>
      {  
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 fb30 	bl	8002eda <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002884:	2b40      	cmp	r3, #64	; 0x40
 8002886:	d123      	bne.n	80028d0 <HAL_UART_IRQHandler+0x1ac>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002896:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800289c:	2b00      	cmp	r3, #0
 800289e:	d013      	beq.n	80028c8 <HAL_UART_IRQHandler+0x1a4>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028a4:	4a2f      	ldr	r2, [pc, #188]	; (8002964 <HAL_UART_IRQHandler+0x240>)
 80028a6:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7fe fb6a 	bl	8000f86 <HAL_DMA_Abort_IT>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d016      	beq.n	80028e6 <HAL_UART_IRQHandler+0x1c2>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80028c2:	4610      	mov	r0, r2
 80028c4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028c6:	e00e      	b.n	80028e6 <HAL_UART_IRQHandler+0x1c2>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 f861 	bl	8002990 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028ce:	e00a      	b.n	80028e6 <HAL_UART_IRQHandler+0x1c2>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 f85d 	bl	8002990 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028d6:	e006      	b.n	80028e6 <HAL_UART_IRQHandler+0x1c2>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 f859 	bl	8002990 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
    }
    return;
 80028e4:	e039      	b.n	800295a <HAL_UART_IRQHandler+0x236>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028e6:	bf00      	nop
    return;
 80028e8:	e037      	b.n	800295a <HAL_UART_IRQHandler+0x236>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d015      	beq.n	8002920 <HAL_UART_IRQHandler+0x1fc>
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d010      	beq.n	8002920 <HAL_UART_IRQHandler+0x1fc>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002906:	621a      	str	r2, [r3, #32]
    /* Set the UART state ready to be able to start again the process */
    huart->gState  = HAL_UART_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2220      	movs	r2, #32
 800290c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2220      	movs	r2, #32
 8002914:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    HAL_UARTEx_WakeupCallback(huart);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f000 fbec 	bl	80030f6 <HAL_UARTEx_WakeupCallback>
    return;
 800291e:	e01d      	b.n	800295c <HAL_UART_IRQHandler+0x238>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002926:	2b00      	cmp	r3, #0
 8002928:	d008      	beq.n	800293c <HAL_UART_IRQHandler+0x218>
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <HAL_UART_IRQHandler+0x218>
  {
    UART_Transmit_IT(huart);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 fb04 	bl	8002f42 <UART_Transmit_IT>
    return;
 800293a:	e00f      	b.n	800295c <HAL_UART_IRQHandler+0x238>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00a      	beq.n	800295c <HAL_UART_IRQHandler+0x238>
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294c:	2b00      	cmp	r3, #0
 800294e:	d005      	beq.n	800295c <HAL_UART_IRQHandler+0x238>
  {
    UART_EndTransmit_IT(huart);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 fb4e 	bl	8002ff2 <UART_EndTransmit_IT>
    return;
 8002956:	bf00      	nop
 8002958:	e000      	b.n	800295c <HAL_UART_IRQHandler+0x238>
    return;
 800295a:	bf00      	nop
  }

}
 800295c:	3718      	adds	r7, #24
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	08002f17 	.word	0x08002f17

08002968 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_UART_RxCpltCallback>:
  * @brief Rx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <HAL_UART_ErrorCallback>:
  * @brief UART error callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 80029ac:	2300      	movs	r3, #0
 80029ae:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80029b0:	2310      	movs	r3, #16
 80029b2:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80029bc:	2300      	movs	r3, #0
 80029be:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	431a      	orrs	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	4b9f      	ldr	r3, [pc, #636]	; (8002c5c <UART_SetConfig+0x2b8>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6812      	ldr	r2, [r2, #0]
 80029e6:	68f9      	ldr	r1, [r7, #12]
 80029e8:	430b      	orrs	r3, r1
 80029ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	430a      	orrs	r2, r1
 8002a00:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	699a      	ldr	r2, [r3, #24]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a8e      	ldr	r2, [pc, #568]	; (8002c60 <UART_SetConfig+0x2bc>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d121      	bne.n	8002a70 <UART_SetConfig+0xcc>
 8002a2c:	4b8d      	ldr	r3, [pc, #564]	; (8002c64 <UART_SetConfig+0x2c0>)
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a30:	f003 0303 	and.w	r3, r3, #3
 8002a34:	2b03      	cmp	r3, #3
 8002a36:	d817      	bhi.n	8002a68 <UART_SetConfig+0xc4>
 8002a38:	a201      	add	r2, pc, #4	; (adr r2, 8002a40 <UART_SetConfig+0x9c>)
 8002a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a3e:	bf00      	nop
 8002a40:	08002a51 	.word	0x08002a51
 8002a44:	08002a5d 	.word	0x08002a5d
 8002a48:	08002a63 	.word	0x08002a63
 8002a4c:	08002a57 	.word	0x08002a57
 8002a50:	2300      	movs	r3, #0
 8002a52:	75fb      	strb	r3, [r7, #23]
 8002a54:	e01e      	b.n	8002a94 <UART_SetConfig+0xf0>
 8002a56:	2302      	movs	r3, #2
 8002a58:	75fb      	strb	r3, [r7, #23]
 8002a5a:	e01b      	b.n	8002a94 <UART_SetConfig+0xf0>
 8002a5c:	2304      	movs	r3, #4
 8002a5e:	75fb      	strb	r3, [r7, #23]
 8002a60:	e018      	b.n	8002a94 <UART_SetConfig+0xf0>
 8002a62:	2308      	movs	r3, #8
 8002a64:	75fb      	strb	r3, [r7, #23]
 8002a66:	e015      	b.n	8002a94 <UART_SetConfig+0xf0>
 8002a68:	2310      	movs	r3, #16
 8002a6a:	75fb      	strb	r3, [r7, #23]
 8002a6c:	bf00      	nop
 8002a6e:	e011      	b.n	8002a94 <UART_SetConfig+0xf0>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a7c      	ldr	r2, [pc, #496]	; (8002c68 <UART_SetConfig+0x2c4>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d102      	bne.n	8002a80 <UART_SetConfig+0xdc>
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	75fb      	strb	r3, [r7, #23]
 8002a7e:	e009      	b.n	8002a94 <UART_SetConfig+0xf0>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a79      	ldr	r2, [pc, #484]	; (8002c6c <UART_SetConfig+0x2c8>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d102      	bne.n	8002a90 <UART_SetConfig+0xec>
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	75fb      	strb	r3, [r7, #23]
 8002a8e:	e001      	b.n	8002a94 <UART_SetConfig+0xf0>
 8002a90:	2310      	movs	r3, #16
 8002a92:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	69db      	ldr	r3, [r3, #28]
 8002a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a9c:	d16f      	bne.n	8002b7e <UART_SetConfig+0x1da>
  {
    switch (clocksource)
 8002a9e:	7dfb      	ldrb	r3, [r7, #23]
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d857      	bhi.n	8002b54 <UART_SetConfig+0x1b0>
 8002aa4:	a201      	add	r2, pc, #4	; (adr r2, 8002aac <UART_SetConfig+0x108>)
 8002aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aaa:	bf00      	nop
 8002aac:	08002ad1 	.word	0x08002ad1
 8002ab0:	08002aed 	.word	0x08002aed
 8002ab4:	08002b09 	.word	0x08002b09
 8002ab8:	08002b55 	.word	0x08002b55
 8002abc:	08002b23 	.word	0x08002b23
 8002ac0:	08002b55 	.word	0x08002b55
 8002ac4:	08002b55 	.word	0x08002b55
 8002ac8:	08002b55 	.word	0x08002b55
 8002acc:	08002b3f 	.word	0x08002b3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002ad0:	f7ff fd06 	bl	80024e0 <HAL_RCC_GetPCLK1Freq>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	005a      	lsls	r2, r3, #1
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	085b      	lsrs	r3, r3, #1
 8002ade:	441a      	add	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae8:	82bb      	strh	r3, [r7, #20]
        break;
 8002aea:	e036      	b.n	8002b5a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002aec:	f7ff fd1a 	bl	8002524 <HAL_RCC_GetPCLK2Freq>
 8002af0:	4603      	mov	r3, r0
 8002af2:	005a      	lsls	r2, r3, #1
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	085b      	lsrs	r3, r3, #1
 8002afa:	441a      	add	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b04:	82bb      	strh	r3, [r7, #20]
        break;
 8002b06:	e028      	b.n	8002b5a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	085b      	lsrs	r3, r3, #1
 8002b0e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002b12:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	6852      	ldr	r2, [r2, #4]
 8002b1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b1e:	82bb      	strh	r3, [r7, #20]
        break;
 8002b20:	e01b      	b.n	8002b5a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002b22:	f7ff fc67 	bl	80023f4 <HAL_RCC_GetSysClockFreq>
 8002b26:	4603      	mov	r3, r0
 8002b28:	005a      	lsls	r2, r3, #1
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	085b      	lsrs	r3, r3, #1
 8002b30:	441a      	add	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3a:	82bb      	strh	r3, [r7, #20]
        break;
 8002b3c:	e00d      	b.n	8002b5a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	085b      	lsrs	r3, r3, #1
 8002b44:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b50:	82bb      	strh	r3, [r7, #20]
        break;
 8002b52:	e002      	b.n	8002b5a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	74fb      	strb	r3, [r7, #19]
        break;
 8002b58:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8002b5a:	8abb      	ldrh	r3, [r7, #20]
 8002b5c:	f023 030f 	bic.w	r3, r3, #15
 8002b60:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b62:	8abb      	ldrh	r3, [r7, #20]
 8002b64:	105b      	asrs	r3, r3, #1
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	897b      	ldrh	r3, [r7, #10]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	897a      	ldrh	r2, [r7, #10]
 8002b7a:	60da      	str	r2, [r3, #12]
 8002b7c:	e069      	b.n	8002c52 <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 8002b7e:	7dfb      	ldrb	r3, [r7, #23]
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d863      	bhi.n	8002c4c <UART_SetConfig+0x2a8>
 8002b84:	a201      	add	r2, pc, #4	; (adr r2, 8002b8c <UART_SetConfig+0x1e8>)
 8002b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b8a:	bf00      	nop
 8002b8c:	08002bb1 	.word	0x08002bb1
 8002b90:	08002bd1 	.word	0x08002bd1
 8002b94:	08002bf1 	.word	0x08002bf1
 8002b98:	08002c4d 	.word	0x08002c4d
 8002b9c:	08002c11 	.word	0x08002c11
 8002ba0:	08002c4d 	.word	0x08002c4d
 8002ba4:	08002c4d 	.word	0x08002c4d
 8002ba8:	08002c4d 	.word	0x08002c4d
 8002bac:	08002c31 	.word	0x08002c31
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002bb0:	f7ff fc96 	bl	80024e0 <HAL_RCC_GetPCLK1Freq>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	085b      	lsrs	r3, r3, #1
 8002bbc:	441a      	add	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	60da      	str	r2, [r3, #12]
        break;
 8002bce:	e040      	b.n	8002c52 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002bd0:	f7ff fca8 	bl	8002524 <HAL_RCC_GetPCLK2Freq>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	085b      	lsrs	r3, r3, #1
 8002bdc:	441a      	add	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	60da      	str	r2, [r3, #12]
        break;
 8002bee:	e030      	b.n	8002c52 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	085b      	lsrs	r3, r3, #1
 8002bf6:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002bfa:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	6852      	ldr	r2, [r2, #4]
 8002c02:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	60da      	str	r2, [r3, #12]
        break;
 8002c0e:	e020      	b.n	8002c52 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002c10:	f7ff fbf0 	bl	80023f4 <HAL_RCC_GetSysClockFreq>
 8002c14:	4602      	mov	r2, r0
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	085b      	lsrs	r3, r3, #1
 8002c1c:	441a      	add	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	60da      	str	r2, [r3, #12]
        break;
 8002c2e:	e010      	b.n	8002c52 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	085b      	lsrs	r3, r3, #1
 8002c36:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	60da      	str	r2, [r3, #12]
        break;
 8002c4a:	e002      	b.n	8002c52 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	74fb      	strb	r3, [r7, #19]
        break;
 8002c50:	bf00      	nop
    }
  }

  return ret;
 8002c52:	7cfb      	ldrb	r3, [r7, #19]

}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3718      	adds	r7, #24
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	efff69f3 	.word	0xefff69f3
 8002c60:	40013800 	.word	0x40013800
 8002c64:	40021000 	.word	0x40021000
 8002c68:	40004400 	.word	0x40004400
 8002c6c:	40004800 	.word	0x40004800

08002c70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00a      	beq.n	8002c9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00a      	beq.n	8002cbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00a      	beq.n	8002cde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	f003 0308 	and.w	r3, r3, #8
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00a      	beq.n	8002d00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	f003 0310 	and.w	r3, r3, #16
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00a      	beq.n	8002d22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d26:	f003 0320 	and.w	r3, r3, #32
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00a      	beq.n	8002d44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	430a      	orrs	r2, r1
 8002d42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d01a      	beq.n	8002d86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d6e:	d10a      	bne.n	8002d86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00a      	beq.n	8002da8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	605a      	str	r2, [r3, #4]
  }
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af02      	add	r7, sp, #8
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002dc6:	f7fd fa59 	bl	800027c <HAL_GetTick>
 8002dca:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0308 	and.w	r3, r3, #8
 8002dd6:	2b08      	cmp	r3, #8
 8002dd8:	d10e      	bne.n	8002df8 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dda:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f82c 	bl	8002e46 <UART_WaitOnFlagUntilTimeout>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e022      	b.n	8002e3e <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0304 	and.w	r3, r3, #4
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d10e      	bne.n	8002e24 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e06:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 f816 	bl	8002e46 <UART_WaitOnFlagUntilTimeout>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e00c      	b.n	8002e3e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2220      	movs	r2, #32
 8002e28:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b084      	sub	sp, #16
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	60f8      	str	r0, [r7, #12]
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	603b      	str	r3, [r7, #0]
 8002e52:	4613      	mov	r3, r2
 8002e54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e56:	e02c      	b.n	8002eb2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e5e:	d028      	beq.n	8002eb2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d007      	beq.n	8002e76 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e66:	f7fd fa09 	bl	800027c <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d21d      	bcs.n	8002eb2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e84:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 0201 	bic.w	r2, r2, #1
 8002e94:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2220      	movs	r2, #32
 8002ea2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e00f      	b.n	8002ed2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	69da      	ldr	r2, [r3, #28]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	68ba      	ldr	r2, [r7, #8]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	bf0c      	ite	eq
 8002ec2:	2301      	moveq	r3, #1
 8002ec4:	2300      	movne	r3, #0
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	461a      	mov	r2, r3
 8002eca:	79fb      	ldrb	r3, [r7, #7]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d0c3      	beq.n	8002e58 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002ef0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 0201 	bic.w	r2, r2, #1
 8002f00:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2220      	movs	r2, #32
 8002f06:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b084      	sub	sp, #16
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f7ff fd2b 	bl	8002990 <HAL_UART_ErrorCallback>
}
 8002f3a:	bf00      	nop
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <UART_Transmit_IT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b085      	sub	sp, #20
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b21      	cmp	r3, #33	; 0x21
 8002f54:	d146      	bne.n	8002fe4 <UART_Transmit_IT+0xa2>
  {
    if(huart->TxXferCount == 0U)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d111      	bne.n	8002f86 <UART_Transmit_IT+0x44>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f70:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f80:	601a      	str	r2, [r3, #0]

      return HAL_OK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	e02f      	b.n	8002fe6 <UART_Transmit_IT+0xa4>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f8e:	d114      	bne.n	8002fba <UART_Transmit_IT+0x78>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d110      	bne.n	8002fba <UART_Transmit_IT+0x78>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f9c:	60fb      	str	r3, [r7, #12]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	881a      	ldrh	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002faa:	b292      	uxth	r2, r2
 8002fac:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb2:	1c9a      	adds	r2, r3, #2
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	64da      	str	r2, [r3, #76]	; 0x4c
 8002fb8:	e009      	b.n	8002fce <UART_Transmit_IT+0x8c>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fbe:	1c59      	adds	r1, r3, #1
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	64d1      	str	r1, [r2, #76]	; 0x4c
 8002fc4:	781a      	ldrb	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	b292      	uxth	r2, r2
 8002fcc:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      huart->TxXferCount--;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	e000      	b.n	8002fe6 <UART_Transmit_IT+0xa4>
    }
  }
  else
  {
    return HAL_BUSY;
 8002fe4:	2302      	movs	r3, #2
  }
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b082      	sub	sp, #8
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003008:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2220      	movs	r2, #32
 800300e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7ff fca8 	bl	8002968 <HAL_UART_TxCpltCallback>

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003022:	b590      	push	{r4, r7, lr}
 8003024:	b085      	sub	sp, #20
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003030:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b22      	cmp	r3, #34	; 0x22
 800303c:	d14e      	bne.n	80030dc <UART_Receive_IT+0xba>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003044:	81bb      	strh	r3, [r7, #12]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800304e:	d112      	bne.n	8003076 <UART_Receive_IT+0x54>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10e      	bne.n	8003076 <UART_Receive_IT+0x54>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305c:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(uhdata & uhMask);
 800305e:	89ba      	ldrh	r2, [r7, #12]
 8003060:	89fb      	ldrh	r3, [r7, #14]
 8003062:	4013      	ands	r3, r2
 8003064:	b29a      	uxth	r2, r3
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2U;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306e:	1c9a      	adds	r2, r3, #2
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	655a      	str	r2, [r3, #84]	; 0x54
 8003074:	e00b      	b.n	800308e <UART_Receive_IT+0x6c>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003076:	89bb      	ldrh	r3, [r7, #12]
 8003078:	b2d9      	uxtb	r1, r3
 800307a:	89fb      	ldrh	r3, [r7, #14]
 800307c:	b2da      	uxtb	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003082:	1c5c      	adds	r4, r3, #1
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	6544      	str	r4, [r0, #84]	; 0x54
 8003088:	400a      	ands	r2, r1
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0U)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003094:	b29b      	uxth	r3, r3
 8003096:	3b01      	subs	r3, #1
 8003098:	b29b      	uxth	r3, r3
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	4619      	mov	r1, r3
 800309e:	f8a2 105a 	strh.w	r1, [r2, #90]	; 0x5a
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d118      	bne.n	80030d8 <UART_Receive_IT+0xb6>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80030b4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0201 	bic.w	r2, r2, #1
 80030c4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2220      	movs	r2, #32
 80030ca:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7ff fc54 	bl	800297c <HAL_UART_RxCpltCallback>

      return HAL_OK;
 80030d4:	2300      	movs	r3, #0
 80030d6:	e00a      	b.n	80030ee <UART_Receive_IT+0xcc>
    }

    return HAL_OK;
 80030d8:	2300      	movs	r3, #0
 80030da:	e008      	b.n	80030ee <UART_Receive_IT+0xcc>
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	699a      	ldr	r2, [r3, #24]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f042 0208 	orr.w	r2, r2, #8
 80030ea:	619a      	str	r2, [r3, #24]

    return HAL_BUSY;
 80030ec:	2302      	movs	r3, #2
  }
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd90      	pop	{r4, r7, pc}

080030f6 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
	...

0800310c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003110:	f7fd f85a 	bl	80001c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003114:	f000 f860 	bl	80031d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003118:	f000 f904 	bl	8003324 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800311c:	f000 f8d2 	bl	80032c4 <MX_USART2_UART_Init>
  MX_CAN_Init();
 8003120:	f000 f89a 	bl	8003258 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  sFilterConfig.FilterBank = 0;
 8003124:	4b28      	ldr	r3, [pc, #160]	; (80031c8 <main+0xbc>)
 8003126:	2200      	movs	r2, #0
 8003128:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800312a:	4b27      	ldr	r3, [pc, #156]	; (80031c8 <main+0xbc>)
 800312c:	2200      	movs	r2, #0
 800312e:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8003130:	4b25      	ldr	r3, [pc, #148]	; (80031c8 <main+0xbc>)
 8003132:	2201      	movs	r2, #1
 8003134:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8003136:	4b24      	ldr	r3, [pc, #144]	; (80031c8 <main+0xbc>)
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 800313c:	4b22      	ldr	r3, [pc, #136]	; (80031c8 <main+0xbc>)
 800313e:	2200      	movs	r2, #0
 8003140:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8003142:	4b21      	ldr	r3, [pc, #132]	; (80031c8 <main+0xbc>)
 8003144:	2200      	movs	r2, #0
 8003146:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8003148:	4b1f      	ldr	r3, [pc, #124]	; (80031c8 <main+0xbc>)
 800314a:	2200      	movs	r2, #0
 800314c:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800314e:	4b1e      	ldr	r3, [pc, #120]	; (80031c8 <main+0xbc>)
 8003150:	2200      	movs	r2, #0
 8003152:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation=ENABLE;
 8003154:	4b1c      	ldr	r3, [pc, #112]	; (80031c8 <main+0xbc>)
 8003156:	2201      	movs	r2, #1
 8003158:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank=14;
 800315a:	4b1b      	ldr	r3, [pc, #108]	; (80031c8 <main+0xbc>)
 800315c:	220e      	movs	r2, #14
 800315e:	625a      	str	r2, [r3, #36]	; 0x24
  if(HAL_CAN_ConfigFilter(&hcan,&sFilterConfig) != HAL_OK)
 8003160:	4919      	ldr	r1, [pc, #100]	; (80031c8 <main+0xbc>)
 8003162:	481a      	ldr	r0, [pc, #104]	; (80031cc <main+0xc0>)
 8003164:	f7fd f991 	bl	800048a <HAL_CAN_ConfigFilter>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <main+0x66>
  {
    Error_Handler();
 800316e:	f000 f959 	bl	8003424 <Error_Handler>
  }
  if(HAL_CAN_Start(&hcan)!=HAL_OK)
 8003172:	4816      	ldr	r0, [pc, #88]	; (80031cc <main+0xc0>)
 8003174:	f7fd fa53 	bl	800061e <HAL_CAN_Start>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <main+0x76>
  {
    Error_Handler();
 800317e:	f000 f951 	bl	8003424 <Error_Handler>
  }

  if(HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8003182:	2103      	movs	r1, #3
 8003184:	4811      	ldr	r0, [pc, #68]	; (80031cc <main+0xc0>)
 8003186:	f7fd fba1 	bl	80008cc <HAL_CAN_ActivateNotification>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <main+0x88>
  {
	Error_Handler();
 8003190:	f000 f948 	bl	8003424 <Error_Handler>
  }
  TxHeader.StdId=0x323;
 8003194:	4b0e      	ldr	r3, [pc, #56]	; (80031d0 <main+0xc4>)
 8003196:	f240 3223 	movw	r2, #803	; 0x323
 800319a:	601a      	str	r2, [r3, #0]
  TxHeader.ExtId=0x01;
 800319c:	4b0c      	ldr	r3, [pc, #48]	; (80031d0 <main+0xc4>)
 800319e:	2201      	movs	r2, #1
 80031a0:	605a      	str	r2, [r3, #4]
  TxHeader.RTR = CAN_RTR_DATA;
 80031a2:	4b0b      	ldr	r3, [pc, #44]	; (80031d0 <main+0xc4>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 80031a8:	4b09      	ldr	r3, [pc, #36]	; (80031d0 <main+0xc4>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 2;
 80031ae:	4b08      	ldr	r3, [pc, #32]	; (80031d0 <main+0xc4>)
 80031b0:	2202      	movs	r2, #2
 80031b2:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 80031b4:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <main+0xc4>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	751a      	strb	r2, [r3, #20]
  TxData[0] = 'A';
 80031ba:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <main+0xc8>)
 80031bc:	2241      	movs	r2, #65	; 0x41
 80031be:	701a      	strb	r2, [r3, #0]
  TxData[1] = 'B';
 80031c0:	4b04      	ldr	r3, [pc, #16]	; (80031d4 <main+0xc8>)
 80031c2:	2242      	movs	r2, #66	; 0x42
 80031c4:	705a      	strb	r2, [r3, #1]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80031c6:	e7fe      	b.n	80031c6 <main+0xba>
 80031c8:	20000030 	.word	0x20000030
 80031cc:	20000058 	.word	0x20000058
 80031d0:	20000108 	.word	0x20000108
 80031d4:	20000084 	.word	0x20000084

080031d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b090      	sub	sp, #64	; 0x40
 80031dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031de:	f107 0318 	add.w	r3, r7, #24
 80031e2:	2228      	movs	r2, #40	; 0x28
 80031e4:	2100      	movs	r1, #0
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 fade 	bl	80037a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031ec:	1d3b      	adds	r3, r7, #4
 80031ee:	2200      	movs	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	605a      	str	r2, [r3, #4]
 80031f4:	609a      	str	r2, [r3, #8]
 80031f6:	60da      	str	r2, [r3, #12]
 80031f8:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80031fa:	2302      	movs	r3, #2
 80031fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80031fe:	2301      	movs	r3, #1
 8003200:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003202:	2310      	movs	r3, #16
 8003204:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003206:	2302      	movs	r3, #2
 8003208:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800320a:	2300      	movs	r3, #0
 800320c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800320e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003212:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003214:	f107 0318 	add.w	r3, r7, #24
 8003218:	4618      	mov	r0, r3
 800321a:	f7fe f881 	bl	8001320 <HAL_RCC_OscConfig>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8003224:	f000 f8fe 	bl	8003424 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003228:	230f      	movs	r3, #15
 800322a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800322c:	2302      	movs	r3, #2
 800322e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003230:	2300      	movs	r3, #0
 8003232:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003234:	2300      	movs	r3, #0
 8003236:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003238:	2300      	movs	r3, #0
 800323a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800323c:	1d3b      	adds	r3, r7, #4
 800323e:	2101      	movs	r1, #1
 8003240:	4618      	mov	r0, r3
 8003242:	f7fe ff5b 	bl	80020fc <HAL_RCC_ClockConfig>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800324c:	f000 f8ea 	bl	8003424 <Error_Handler>
  }
}
 8003250:	bf00      	nop
 8003252:	3740      	adds	r7, #64	; 0x40
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800325c:	4b17      	ldr	r3, [pc, #92]	; (80032bc <MX_CAN_Init+0x64>)
 800325e:	4a18      	ldr	r2, [pc, #96]	; (80032c0 <MX_CAN_Init+0x68>)
 8003260:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;
 8003262:	4b16      	ldr	r3, [pc, #88]	; (80032bc <MX_CAN_Init+0x64>)
 8003264:	2206      	movs	r2, #6
 8003266:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8003268:	4b14      	ldr	r3, [pc, #80]	; (80032bc <MX_CAN_Init+0x64>)
 800326a:	2200      	movs	r2, #0
 800326c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800326e:	4b13      	ldr	r3, [pc, #76]	; (80032bc <MX_CAN_Init+0x64>)
 8003270:	2200      	movs	r2, #0
 8003272:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_10TQ;
 8003274:	4b11      	ldr	r3, [pc, #68]	; (80032bc <MX_CAN_Init+0x64>)
 8003276:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800327a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800327c:	4b0f      	ldr	r3, [pc, #60]	; (80032bc <MX_CAN_Init+0x64>)
 800327e:	2200      	movs	r2, #0
 8003280:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8003282:	4b0e      	ldr	r3, [pc, #56]	; (80032bc <MX_CAN_Init+0x64>)
 8003284:	2200      	movs	r2, #0
 8003286:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8003288:	4b0c      	ldr	r3, [pc, #48]	; (80032bc <MX_CAN_Init+0x64>)
 800328a:	2200      	movs	r2, #0
 800328c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800328e:	4b0b      	ldr	r3, [pc, #44]	; (80032bc <MX_CAN_Init+0x64>)
 8003290:	2200      	movs	r2, #0
 8003292:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8003294:	4b09      	ldr	r3, [pc, #36]	; (80032bc <MX_CAN_Init+0x64>)
 8003296:	2200      	movs	r2, #0
 8003298:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800329a:	4b08      	ldr	r3, [pc, #32]	; (80032bc <MX_CAN_Init+0x64>)
 800329c:	2200      	movs	r2, #0
 800329e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80032a0:	4b06      	ldr	r3, [pc, #24]	; (80032bc <MX_CAN_Init+0x64>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80032a6:	4805      	ldr	r0, [pc, #20]	; (80032bc <MX_CAN_Init+0x64>)
 80032a8:	f7fc fff4 	bl	8000294 <HAL_CAN_Init>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 80032b2:	f000 f8b7 	bl	8003424 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80032b6:	bf00      	nop
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	20000058 	.word	0x20000058
 80032c0:	40006400 	.word	0x40006400

080032c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80032c8:	4b14      	ldr	r3, [pc, #80]	; (800331c <MX_USART2_UART_Init+0x58>)
 80032ca:	4a15      	ldr	r2, [pc, #84]	; (8003320 <MX_USART2_UART_Init+0x5c>)
 80032cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80032ce:	4b13      	ldr	r3, [pc, #76]	; (800331c <MX_USART2_UART_Init+0x58>)
 80032d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80032d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80032d6:	4b11      	ldr	r3, [pc, #68]	; (800331c <MX_USART2_UART_Init+0x58>)
 80032d8:	2200      	movs	r2, #0
 80032da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80032dc:	4b0f      	ldr	r3, [pc, #60]	; (800331c <MX_USART2_UART_Init+0x58>)
 80032de:	2200      	movs	r2, #0
 80032e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80032e2:	4b0e      	ldr	r3, [pc, #56]	; (800331c <MX_USART2_UART_Init+0x58>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80032e8:	4b0c      	ldr	r3, [pc, #48]	; (800331c <MX_USART2_UART_Init+0x58>)
 80032ea:	220c      	movs	r2, #12
 80032ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032ee:	4b0b      	ldr	r3, [pc, #44]	; (800331c <MX_USART2_UART_Init+0x58>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80032f4:	4b09      	ldr	r3, [pc, #36]	; (800331c <MX_USART2_UART_Init+0x58>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80032fa:	4b08      	ldr	r3, [pc, #32]	; (800331c <MX_USART2_UART_Init+0x58>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003300:	4b06      	ldr	r3, [pc, #24]	; (800331c <MX_USART2_UART_Init+0x58>)
 8003302:	2200      	movs	r2, #0
 8003304:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003306:	4805      	ldr	r0, [pc, #20]	; (800331c <MX_USART2_UART_Init+0x58>)
 8003308:	f7ff f92e 	bl	8002568 <HAL_UART_Init>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003312:	f000 f887 	bl	8003424 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003316:	bf00      	nop
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	20000098 	.word	0x20000098
 8003320:	40004400 	.word	0x40004400

08003324 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b088      	sub	sp, #32
 8003328:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800332a:	f107 030c 	add.w	r3, r7, #12
 800332e:	2200      	movs	r2, #0
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	605a      	str	r2, [r3, #4]
 8003334:	609a      	str	r2, [r3, #8]
 8003336:	60da      	str	r2, [r3, #12]
 8003338:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800333a:	4b1d      	ldr	r3, [pc, #116]	; (80033b0 <MX_GPIO_Init+0x8c>)
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	4a1c      	ldr	r2, [pc, #112]	; (80033b0 <MX_GPIO_Init+0x8c>)
 8003340:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003344:	6153      	str	r3, [r2, #20]
 8003346:	4b1a      	ldr	r3, [pc, #104]	; (80033b0 <MX_GPIO_Init+0x8c>)
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800334e:	60bb      	str	r3, [r7, #8]
 8003350:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003352:	4b17      	ldr	r3, [pc, #92]	; (80033b0 <MX_GPIO_Init+0x8c>)
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	4a16      	ldr	r2, [pc, #88]	; (80033b0 <MX_GPIO_Init+0x8c>)
 8003358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800335c:	6153      	str	r3, [r2, #20]
 800335e:	4b14      	ldr	r3, [pc, #80]	; (80033b0 <MX_GPIO_Init+0x8c>)
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003366:	607b      	str	r3, [r7, #4]
 8003368:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800336a:	4b11      	ldr	r3, [pc, #68]	; (80033b0 <MX_GPIO_Init+0x8c>)
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	4a10      	ldr	r2, [pc, #64]	; (80033b0 <MX_GPIO_Init+0x8c>)
 8003370:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003374:	6153      	str	r3, [r2, #20]
 8003376:	4b0e      	ldr	r3, [pc, #56]	; (80033b0 <MX_GPIO_Init+0x8c>)
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800337e:	603b      	str	r3, [r7, #0]
 8003380:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8003382:	2200      	movs	r2, #0
 8003384:	2108      	movs	r1, #8
 8003386:	480b      	ldr	r0, [pc, #44]	; (80033b4 <MX_GPIO_Init+0x90>)
 8003388:	f7fd ffb2 	bl	80012f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800338c:	2308      	movs	r3, #8
 800338e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003390:	2301      	movs	r3, #1
 8003392:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003394:	2300      	movs	r3, #0
 8003396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003398:	2300      	movs	r3, #0
 800339a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800339c:	f107 030c 	add.w	r3, r7, #12
 80033a0:	4619      	mov	r1, r3
 80033a2:	4804      	ldr	r0, [pc, #16]	; (80033b4 <MX_GPIO_Init+0x90>)
 80033a4:	f7fd fe2e 	bl	8001004 <HAL_GPIO_Init>

}
 80033a8:	bf00      	nop
 80033aa:	3720      	adds	r7, #32
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	40021000 	.word	0x40021000
 80033b4:	48000400 	.word	0x48000400

080033b8 <HAL_CAN_RxFifo0MsgPendingCallback>:
{
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,1);
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan_)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  HAL_CAN_GetRxMessage(&hcan,CAN_RX_FIFO0,&RxHeader,RxData);
 80033c0:	4b12      	ldr	r3, [pc, #72]	; (800340c <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80033c2:	4a13      	ldr	r2, [pc, #76]	; (8003410 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80033c4:	2100      	movs	r1, #0
 80033c6:	4813      	ldr	r0, [pc, #76]	; (8003414 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80033c8:	f7fd f96d 	bl	80006a6 <HAL_CAN_GetRxMessage>
  HAL_UART_Transmit(&huart2,RxData,2,0xFFFF);
 80033cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033d0:	2202      	movs	r2, #2
 80033d2:	490e      	ldr	r1, [pc, #56]	; (800340c <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80033d4:	4810      	ldr	r0, [pc, #64]	; (8003418 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80033d6:	f7ff f918 	bl	800260a <HAL_UART_Transmit>
  flag *= -1;
 80033da:	4b10      	ldr	r3, [pc, #64]	; (800341c <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	425b      	negs	r3, r3
 80033e0:	4a0e      	ldr	r2, [pc, #56]	; (800341c <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80033e2:	6013      	str	r3, [r2, #0]
  if(flag >0){
 80033e4:	4b0d      	ldr	r3, [pc, #52]	; (800341c <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	dd05      	ble.n	80033f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,1);
 80033ec:	2201      	movs	r2, #1
 80033ee:	2108      	movs	r1, #8
 80033f0:	480b      	ldr	r0, [pc, #44]	; (8003420 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80033f2:	f7fd ff7d 	bl	80012f0 <HAL_GPIO_WritePin>
  }else{
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,0);
  }

}
 80033f6:	e004      	b.n	8003402 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,0);
 80033f8:	2200      	movs	r2, #0
 80033fa:	2108      	movs	r1, #8
 80033fc:	4808      	ldr	r0, [pc, #32]	; (8003420 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80033fe:	f7fd ff77 	bl	80012f0 <HAL_GPIO_WritePin>
}
 8003402:	bf00      	nop
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	20000090 	.word	0x20000090
 8003410:	20000120 	.word	0x20000120
 8003414:	20000058 	.word	0x20000058
 8003418:	20000098 	.word	0x20000098
 800341c:	20000008 	.word	0x20000008
 8003420:	48000400 	.word	0x48000400

08003424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003428:	bf00      	nop
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
	...

08003434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800343a:	4b0f      	ldr	r3, [pc, #60]	; (8003478 <HAL_MspInit+0x44>)
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	4a0e      	ldr	r2, [pc, #56]	; (8003478 <HAL_MspInit+0x44>)
 8003440:	f043 0301 	orr.w	r3, r3, #1
 8003444:	6193      	str	r3, [r2, #24]
 8003446:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <HAL_MspInit+0x44>)
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	607b      	str	r3, [r7, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003452:	4b09      	ldr	r3, [pc, #36]	; (8003478 <HAL_MspInit+0x44>)
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	4a08      	ldr	r2, [pc, #32]	; (8003478 <HAL_MspInit+0x44>)
 8003458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800345c:	61d3      	str	r3, [r2, #28]
 800345e:	4b06      	ldr	r3, [pc, #24]	; (8003478 <HAL_MspInit+0x44>)
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003466:	603b      	str	r3, [r7, #0]
 8003468:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	40021000 	.word	0x40021000

0800347c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b08a      	sub	sp, #40	; 0x28
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003484:	f107 0314 	add.w	r3, r7, #20
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	605a      	str	r2, [r3, #4]
 800348e:	609a      	str	r2, [r3, #8]
 8003490:	60da      	str	r2, [r3, #12]
 8003492:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a29      	ldr	r2, [pc, #164]	; (8003540 <HAL_CAN_MspInit+0xc4>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d14b      	bne.n	8003536 <HAL_CAN_MspInit+0xba>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800349e:	4b29      	ldr	r3, [pc, #164]	; (8003544 <HAL_CAN_MspInit+0xc8>)
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	4a28      	ldr	r2, [pc, #160]	; (8003544 <HAL_CAN_MspInit+0xc8>)
 80034a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034a8:	61d3      	str	r3, [r2, #28]
 80034aa:	4b26      	ldr	r3, [pc, #152]	; (8003544 <HAL_CAN_MspInit+0xc8>)
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b2:	613b      	str	r3, [r7, #16]
 80034b4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034b6:	4b23      	ldr	r3, [pc, #140]	; (8003544 <HAL_CAN_MspInit+0xc8>)
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	4a22      	ldr	r2, [pc, #136]	; (8003544 <HAL_CAN_MspInit+0xc8>)
 80034bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034c0:	6153      	str	r3, [r2, #20]
 80034c2:	4b20      	ldr	r3, [pc, #128]	; (8003544 <HAL_CAN_MspInit+0xc8>)
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80034ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d4:	2302      	movs	r3, #2
 80034d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d8:	2300      	movs	r3, #0
 80034da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034dc:	2303      	movs	r3, #3
 80034de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80034e0:	2309      	movs	r3, #9
 80034e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e4:	f107 0314 	add.w	r3, r7, #20
 80034e8:	4619      	mov	r1, r3
 80034ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034ee:	f7fd fd89 	bl	8001004 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80034f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f8:	2302      	movs	r3, #2
 80034fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034fc:	2301      	movs	r3, #1
 80034fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003500:	2303      	movs	r3, #3
 8003502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8003504:	2309      	movs	r3, #9
 8003506:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003508:	f107 0314 	add.w	r3, r7, #20
 800350c:	4619      	mov	r1, r3
 800350e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003512:	f7fd fd77 	bl	8001004 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_TX_IRQn, 0, 0);
 8003516:	2200      	movs	r2, #0
 8003518:	2100      	movs	r1, #0
 800351a:	2013      	movs	r0, #19
 800351c:	f7fd fcfd 	bl	8000f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_TX_IRQn);
 8003520:	2013      	movs	r0, #19
 8003522:	f7fd fd16 	bl	8000f52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8003526:	2200      	movs	r2, #0
 8003528:	2100      	movs	r1, #0
 800352a:	2014      	movs	r0, #20
 800352c:	f7fd fcf5 	bl	8000f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8003530:	2014      	movs	r0, #20
 8003532:	f7fd fd0e 	bl	8000f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8003536:	bf00      	nop
 8003538:	3728      	adds	r7, #40	; 0x28
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40006400 	.word	0x40006400
 8003544:	40021000 	.word	0x40021000

08003548 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b08a      	sub	sp, #40	; 0x28
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003550:	f107 0314 	add.w	r3, r7, #20
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	605a      	str	r2, [r3, #4]
 800355a:	609a      	str	r2, [r3, #8]
 800355c:	60da      	str	r2, [r3, #12]
 800355e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a1c      	ldr	r2, [pc, #112]	; (80035d8 <HAL_UART_MspInit+0x90>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d131      	bne.n	80035ce <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800356a:	4b1c      	ldr	r3, [pc, #112]	; (80035dc <HAL_UART_MspInit+0x94>)
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	4a1b      	ldr	r2, [pc, #108]	; (80035dc <HAL_UART_MspInit+0x94>)
 8003570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003574:	61d3      	str	r3, [r2, #28]
 8003576:	4b19      	ldr	r3, [pc, #100]	; (80035dc <HAL_UART_MspInit+0x94>)
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357e:	613b      	str	r3, [r7, #16]
 8003580:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003582:	4b16      	ldr	r3, [pc, #88]	; (80035dc <HAL_UART_MspInit+0x94>)
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	4a15      	ldr	r2, [pc, #84]	; (80035dc <HAL_UART_MspInit+0x94>)
 8003588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800358c:	6153      	str	r3, [r2, #20]
 800358e:	4b13      	ldr	r3, [pc, #76]	; (80035dc <HAL_UART_MspInit+0x94>)
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800359a:	f248 0304 	movw	r3, #32772	; 0x8004
 800359e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a0:	2302      	movs	r3, #2
 80035a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a4:	2300      	movs	r3, #0
 80035a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035a8:	2303      	movs	r3, #3
 80035aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80035ac:	2307      	movs	r3, #7
 80035ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035b0:	f107 0314 	add.w	r3, r7, #20
 80035b4:	4619      	mov	r1, r3
 80035b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035ba:	f7fd fd23 	bl	8001004 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80035be:	2200      	movs	r2, #0
 80035c0:	2100      	movs	r1, #0
 80035c2:	2026      	movs	r0, #38	; 0x26
 80035c4:	f7fd fca9 	bl	8000f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80035c8:	2026      	movs	r0, #38	; 0x26
 80035ca:	f7fd fcc2 	bl	8000f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80035ce:	bf00      	nop
 80035d0:	3728      	adds	r7, #40	; 0x28
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	40004400 	.word	0x40004400
 80035dc:	40021000 	.word	0x40021000

080035e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80035e4:	bf00      	nop
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035ee:	b480      	push	{r7}
 80035f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035f2:	e7fe      	b.n	80035f2 <HardFault_Handler+0x4>

080035f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035f8:	e7fe      	b.n	80035f8 <MemManage_Handler+0x4>

080035fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035fa:	b480      	push	{r7}
 80035fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035fe:	e7fe      	b.n	80035fe <BusFault_Handler+0x4>

08003600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003604:	e7fe      	b.n	8003604 <UsageFault_Handler+0x4>

08003606 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003606:	b480      	push	{r7}
 8003608:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800360a:	bf00      	nop
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003618:	bf00      	nop
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003622:	b480      	push	{r7}
 8003624:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003626:	bf00      	nop
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003634:	f7fc fe0e 	bl	8000254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003638:	bf00      	nop
 800363a:	bd80      	pop	{r7, pc}

0800363c <CAN_TX_IRQHandler>:

/**
  * @brief This function handles CAN TX interrupt.
  */
void CAN_TX_IRQHandler(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_TX_IRQn 0 */

  /* USER CODE END CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003640:	4802      	ldr	r0, [pc, #8]	; (800364c <CAN_TX_IRQHandler+0x10>)
 8003642:	f7fd f969 	bl	8000918 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_TX_IRQn 1 */

  /* USER CODE END CAN_TX_IRQn 1 */
}
 8003646:	bf00      	nop
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	20000058 	.word	0x20000058

08003650 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003654:	4802      	ldr	r0, [pc, #8]	; (8003660 <CAN_RX0_IRQHandler+0x10>)
 8003656:	f7fd f95f 	bl	8000918 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 800365a:	bf00      	nop
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	20000058 	.word	0x20000058

08003664 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003668:	4802      	ldr	r0, [pc, #8]	; (8003674 <USART2_IRQHandler+0x10>)
 800366a:	f7ff f85b 	bl	8002724 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800366e:	bf00      	nop
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	20000098 	.word	0x20000098

08003678 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800367c:	4b1f      	ldr	r3, [pc, #124]	; (80036fc <SystemInit+0x84>)
 800367e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003682:	4a1e      	ldr	r2, [pc, #120]	; (80036fc <SystemInit+0x84>)
 8003684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800368c:	4b1c      	ldr	r3, [pc, #112]	; (8003700 <SystemInit+0x88>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a1b      	ldr	r2, [pc, #108]	; (8003700 <SystemInit+0x88>)
 8003692:	f043 0301 	orr.w	r3, r3, #1
 8003696:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8003698:	4b19      	ldr	r3, [pc, #100]	; (8003700 <SystemInit+0x88>)
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	4918      	ldr	r1, [pc, #96]	; (8003700 <SystemInit+0x88>)
 800369e:	4b19      	ldr	r3, [pc, #100]	; (8003704 <SystemInit+0x8c>)
 80036a0:	4013      	ands	r3, r2
 80036a2:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80036a4:	4b16      	ldr	r3, [pc, #88]	; (8003700 <SystemInit+0x88>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a15      	ldr	r2, [pc, #84]	; (8003700 <SystemInit+0x88>)
 80036aa:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80036ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036b2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80036b4:	4b12      	ldr	r3, [pc, #72]	; (8003700 <SystemInit+0x88>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a11      	ldr	r2, [pc, #68]	; (8003700 <SystemInit+0x88>)
 80036ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036be:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80036c0:	4b0f      	ldr	r3, [pc, #60]	; (8003700 <SystemInit+0x88>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	4a0e      	ldr	r2, [pc, #56]	; (8003700 <SystemInit+0x88>)
 80036c6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80036ca:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80036cc:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <SystemInit+0x88>)
 80036ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d0:	4a0b      	ldr	r2, [pc, #44]	; (8003700 <SystemInit+0x88>)
 80036d2:	f023 030f 	bic.w	r3, r3, #15
 80036d6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80036d8:	4b09      	ldr	r3, [pc, #36]	; (8003700 <SystemInit+0x88>)
 80036da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036dc:	4908      	ldr	r1, [pc, #32]	; (8003700 <SystemInit+0x88>)
 80036de:	4b0a      	ldr	r3, [pc, #40]	; (8003708 <SystemInit+0x90>)
 80036e0:	4013      	ands	r3, r2
 80036e2:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80036e4:	4b06      	ldr	r3, [pc, #24]	; (8003700 <SystemInit+0x88>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80036ea:	4b04      	ldr	r3, [pc, #16]	; (80036fc <SystemInit+0x84>)
 80036ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80036f0:	609a      	str	r2, [r3, #8]
#endif
}
 80036f2:	bf00      	nop
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr
 80036fc:	e000ed00 	.word	0xe000ed00
 8003700:	40021000 	.word	0x40021000
 8003704:	f87fc00c 	.word	0xf87fc00c
 8003708:	ff00fccc 	.word	0xff00fccc

0800370c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800370c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003744 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003710:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003712:	e003      	b.n	800371c <LoopCopyDataInit>

08003714 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003714:	4b0c      	ldr	r3, [pc, #48]	; (8003748 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003716:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003718:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800371a:	3104      	adds	r1, #4

0800371c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800371c:	480b      	ldr	r0, [pc, #44]	; (800374c <LoopForever+0xa>)
	ldr	r3, =_edata
 800371e:	4b0c      	ldr	r3, [pc, #48]	; (8003750 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003720:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003722:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003724:	d3f6      	bcc.n	8003714 <CopyDataInit>
	ldr	r2, =_sbss
 8003726:	4a0b      	ldr	r2, [pc, #44]	; (8003754 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003728:	e002      	b.n	8003730 <LoopFillZerobss>

0800372a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800372a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800372c:	f842 3b04 	str.w	r3, [r2], #4

08003730 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003730:	4b09      	ldr	r3, [pc, #36]	; (8003758 <LoopForever+0x16>)
	cmp	r2, r3
 8003732:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003734:	d3f9      	bcc.n	800372a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003736:	f7ff ff9f 	bl	8003678 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800373a:	f000 f811 	bl	8003760 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800373e:	f7ff fce5 	bl	800310c <main>

08003742 <LoopForever>:

LoopForever:
    b LoopForever
 8003742:	e7fe      	b.n	8003742 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003744:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8003748:	08003810 	.word	0x08003810
	ldr	r0, =_sdata
 800374c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003750:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8003754:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8003758:	2000013c 	.word	0x2000013c

0800375c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800375c:	e7fe      	b.n	800375c <ADC1_2_IRQHandler>
	...

08003760 <__libc_init_array>:
 8003760:	b570      	push	{r4, r5, r6, lr}
 8003762:	4e0d      	ldr	r6, [pc, #52]	; (8003798 <__libc_init_array+0x38>)
 8003764:	4c0d      	ldr	r4, [pc, #52]	; (800379c <__libc_init_array+0x3c>)
 8003766:	1ba4      	subs	r4, r4, r6
 8003768:	10a4      	asrs	r4, r4, #2
 800376a:	2500      	movs	r5, #0
 800376c:	42a5      	cmp	r5, r4
 800376e:	d109      	bne.n	8003784 <__libc_init_array+0x24>
 8003770:	4e0b      	ldr	r6, [pc, #44]	; (80037a0 <__libc_init_array+0x40>)
 8003772:	4c0c      	ldr	r4, [pc, #48]	; (80037a4 <__libc_init_array+0x44>)
 8003774:	f000 f820 	bl	80037b8 <_init>
 8003778:	1ba4      	subs	r4, r4, r6
 800377a:	10a4      	asrs	r4, r4, #2
 800377c:	2500      	movs	r5, #0
 800377e:	42a5      	cmp	r5, r4
 8003780:	d105      	bne.n	800378e <__libc_init_array+0x2e>
 8003782:	bd70      	pop	{r4, r5, r6, pc}
 8003784:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003788:	4798      	blx	r3
 800378a:	3501      	adds	r5, #1
 800378c:	e7ee      	b.n	800376c <__libc_init_array+0xc>
 800378e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003792:	4798      	blx	r3
 8003794:	3501      	adds	r5, #1
 8003796:	e7f2      	b.n	800377e <__libc_init_array+0x1e>
 8003798:	08003808 	.word	0x08003808
 800379c:	08003808 	.word	0x08003808
 80037a0:	08003808 	.word	0x08003808
 80037a4:	0800380c 	.word	0x0800380c

080037a8 <memset>:
 80037a8:	4402      	add	r2, r0
 80037aa:	4603      	mov	r3, r0
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d100      	bne.n	80037b2 <memset+0xa>
 80037b0:	4770      	bx	lr
 80037b2:	f803 1b01 	strb.w	r1, [r3], #1
 80037b6:	e7f9      	b.n	80037ac <memset+0x4>

080037b8 <_init>:
 80037b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ba:	bf00      	nop
 80037bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037be:	bc08      	pop	{r3}
 80037c0:	469e      	mov	lr, r3
 80037c2:	4770      	bx	lr

080037c4 <_fini>:
 80037c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037c6:	bf00      	nop
 80037c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ca:	bc08      	pop	{r3}
 80037cc:	469e      	mov	lr, r3
 80037ce:	4770      	bx	lr
