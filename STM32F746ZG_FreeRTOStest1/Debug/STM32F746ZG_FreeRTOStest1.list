
STM32F746ZG_FreeRTOStest1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e98  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08006068  08006068  00016068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006128  08006128  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006128  08006128  00016128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006130  08006130  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006130  08006130  00016130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006134  08006134  00016134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006138  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e48  20000010  08006148  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004e58  08006148  00024e58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ce17  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003887  00000000  00000000  0003ce57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001770  00000000  00000000  000406e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001618  00000000  00000000  00041e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003831  00000000  00000000  00043468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a66f  00000000  00000000  00046c99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb559  00000000  00000000  00061308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015c861  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006384  00000000  00000000  0015c8b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006050 	.word	0x08006050

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08006050 	.word	0x08006050

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fbdf 	bl	8000cda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f836 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f8fa 	bl	8000718 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000524:	f000 f89a 	bl	800065c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000528:	f000 f8c8 	bl	80006bc <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800052c:	f003 fb4e 	bl	8003bcc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000530:	4a0d      	ldr	r2, [pc, #52]	; (8000568 <main+0x54>)
 8000532:	2100      	movs	r1, #0
 8000534:	480d      	ldr	r0, [pc, #52]	; (800056c <main+0x58>)
 8000536:	f003 fbb3 	bl	8003ca0 <osThreadNew>
 800053a:	4603      	mov	r3, r0
 800053c:	4a0c      	ldr	r2, [pc, #48]	; (8000570 <main+0x5c>)
 800053e:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000540:	4a0c      	ldr	r2, [pc, #48]	; (8000574 <main+0x60>)
 8000542:	2100      	movs	r1, #0
 8000544:	480c      	ldr	r0, [pc, #48]	; (8000578 <main+0x64>)
 8000546:	f003 fbab 	bl	8003ca0 <osThreadNew>
 800054a:	4603      	mov	r3, r0
 800054c:	4a0b      	ldr	r2, [pc, #44]	; (800057c <main+0x68>)
 800054e:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8000550:	4a0b      	ldr	r2, [pc, #44]	; (8000580 <main+0x6c>)
 8000552:	2100      	movs	r1, #0
 8000554:	480b      	ldr	r0, [pc, #44]	; (8000584 <main+0x70>)
 8000556:	f003 fba3 	bl	8003ca0 <osThreadNew>
 800055a:	4603      	mov	r3, r0
 800055c:	4a0a      	ldr	r2, [pc, #40]	; (8000588 <main+0x74>)
 800055e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000560:	f003 fb68 	bl	8003c34 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000564:	e7fe      	b.n	8000564 <main+0x50>
 8000566:	bf00      	nop
 8000568:	080060a4 	.word	0x080060a4
 800056c:	080008e5 	.word	0x080008e5
 8000570:	200004b4 	.word	0x200004b4
 8000574:	080060c8 	.word	0x080060c8
 8000578:	080008f5 	.word	0x080008f5
 800057c:	200004b8 	.word	0x200004b8
 8000580:	080060ec 	.word	0x080060ec
 8000584:	08000915 	.word	0x08000915
 8000588:	200004bc 	.word	0x200004bc

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b094      	sub	sp, #80	; 0x50
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 0320 	add.w	r3, r7, #32
 8000596:	2230      	movs	r2, #48	; 0x30
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f005 fd50 	bl	8006040 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005b0:	f000 ffee 	bl	8001590 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b4:	4b27      	ldr	r3, [pc, #156]	; (8000654 <SystemClock_Config+0xc8>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b8:	4a26      	ldr	r2, [pc, #152]	; (8000654 <SystemClock_Config+0xc8>)
 80005ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005be:	6413      	str	r3, [r2, #64]	; 0x40
 80005c0:	4b24      	ldr	r3, [pc, #144]	; (8000654 <SystemClock_Config+0xc8>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005cc:	4b22      	ldr	r3, [pc, #136]	; (8000658 <SystemClock_Config+0xcc>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005d4:	4a20      	ldr	r2, [pc, #128]	; (8000658 <SystemClock_Config+0xcc>)
 80005d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <SystemClock_Config+0xcc>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e8:	2301      	movs	r3, #1
 80005ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005ec:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f2:	2302      	movs	r3, #2
 80005f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005fc:	2304      	movs	r3, #4
 80005fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000600:	2348      	movs	r3, #72	; 0x48
 8000602:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000604:	2302      	movs	r3, #2
 8000606:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000608:	2303      	movs	r3, #3
 800060a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060c:	f107 0320 	add.w	r3, r7, #32
 8000610:	4618      	mov	r0, r3
 8000612:	f000 ffcd 	bl	80015b0 <HAL_RCC_OscConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800061c:	f000 f99a 	bl	8000954 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000620:	230f      	movs	r3, #15
 8000622:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000624:	2302      	movs	r3, #2
 8000626:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800062c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000630:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	2102      	movs	r1, #2
 800063c:	4618      	mov	r0, r3
 800063e:	f001 fa5b 	bl	8001af8 <HAL_RCC_ClockConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000648:	f000 f984 	bl	8000954 <Error_Handler>
  }
}
 800064c:	bf00      	nop
 800064e:	3750      	adds	r7, #80	; 0x50
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40023800 	.word	0x40023800
 8000658:	40007000 	.word	0x40007000

0800065c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000660:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <MX_USART3_UART_Init+0x58>)
 8000662:	4a15      	ldr	r2, [pc, #84]	; (80006b8 <MX_USART3_UART_Init+0x5c>)
 8000664:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000666:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <MX_USART3_UART_Init+0x58>)
 8000668:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800066c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_USART3_UART_Init+0x58>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <MX_USART3_UART_Init+0x58>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_USART3_UART_Init+0x58>)
 800067c:	2200      	movs	r2, #0
 800067e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_USART3_UART_Init+0x58>)
 8000682:	220c      	movs	r2, #12
 8000684:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <MX_USART3_UART_Init+0x58>)
 8000688:	2200      	movs	r2, #0
 800068a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_USART3_UART_Init+0x58>)
 800068e:	2200      	movs	r2, #0
 8000690:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <MX_USART3_UART_Init+0x58>)
 8000694:	2200      	movs	r2, #0
 8000696:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_USART3_UART_Init+0x58>)
 800069a:	2200      	movs	r2, #0
 800069c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <MX_USART3_UART_Init+0x58>)
 80006a0:	f002 fb52 	bl	8002d48 <HAL_UART_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80006aa:	f000 f953 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	2000002c 	.word	0x2000002c
 80006b8:	40004800 	.word	0x40004800

080006bc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80006c0:	4b14      	ldr	r3, [pc, #80]	; (8000714 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006c6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80006c8:	4b12      	ldr	r3, [pc, #72]	; (8000714 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006ca:	2206      	movs	r2, #6
 80006cc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006d0:	2202      	movs	r2, #2
 80006d2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006dc:	2202      	movs	r2, #2
 80006de:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80006fe:	4805      	ldr	r0, [pc, #20]	; (8000714 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000700:	f000 fdfd 	bl	80012fe <HAL_PCD_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800070a:	f000 f923 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	200000b0 	.word	0x200000b0

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08c      	sub	sp, #48	; 0x30
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072e:	4b68      	ldr	r3, [pc, #416]	; (80008d0 <MX_GPIO_Init+0x1b8>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a67      	ldr	r2, [pc, #412]	; (80008d0 <MX_GPIO_Init+0x1b8>)
 8000734:	f043 0304 	orr.w	r3, r3, #4
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b65      	ldr	r3, [pc, #404]	; (80008d0 <MX_GPIO_Init+0x1b8>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0304 	and.w	r3, r3, #4
 8000742:	61bb      	str	r3, [r7, #24]
 8000744:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000746:	4b62      	ldr	r3, [pc, #392]	; (80008d0 <MX_GPIO_Init+0x1b8>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a61      	ldr	r2, [pc, #388]	; (80008d0 <MX_GPIO_Init+0x1b8>)
 800074c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b5f      	ldr	r3, [pc, #380]	; (80008d0 <MX_GPIO_Init+0x1b8>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800075a:	617b      	str	r3, [r7, #20]
 800075c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	4b5c      	ldr	r3, [pc, #368]	; (80008d0 <MX_GPIO_Init+0x1b8>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a5b      	ldr	r2, [pc, #364]	; (80008d0 <MX_GPIO_Init+0x1b8>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b59      	ldr	r3, [pc, #356]	; (80008d0 <MX_GPIO_Init+0x1b8>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000776:	4b56      	ldr	r3, [pc, #344]	; (80008d0 <MX_GPIO_Init+0x1b8>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a55      	ldr	r2, [pc, #340]	; (80008d0 <MX_GPIO_Init+0x1b8>)
 800077c:	f043 0302 	orr.w	r3, r3, #2
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b53      	ldr	r3, [pc, #332]	; (80008d0 <MX_GPIO_Init+0x1b8>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0302 	and.w	r3, r3, #2
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800078e:	4b50      	ldr	r3, [pc, #320]	; (80008d0 <MX_GPIO_Init+0x1b8>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a4f      	ldr	r2, [pc, #316]	; (80008d0 <MX_GPIO_Init+0x1b8>)
 8000794:	f043 0308 	orr.w	r3, r3, #8
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b4d      	ldr	r3, [pc, #308]	; (80008d0 <MX_GPIO_Init+0x1b8>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0308 	and.w	r3, r3, #8
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007a6:	4b4a      	ldr	r3, [pc, #296]	; (80008d0 <MX_GPIO_Init+0x1b8>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a49      	ldr	r2, [pc, #292]	; (80008d0 <MX_GPIO_Init+0x1b8>)
 80007ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b47      	ldr	r3, [pc, #284]	; (80008d0 <MX_GPIO_Init+0x1b8>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	f244 0181 	movw	r1, #16513	; 0x4081
 80007c4:	4843      	ldr	r0, [pc, #268]	; (80008d4 <MX_GPIO_Init+0x1bc>)
 80007c6:	f000 fd67 	bl	8001298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2140      	movs	r1, #64	; 0x40
 80007ce:	4842      	ldr	r0, [pc, #264]	; (80008d8 <MX_GPIO_Init+0x1c0>)
 80007d0:	f000 fd62 	bl	8001298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007e4:	f107 031c 	add.w	r3, r7, #28
 80007e8:	4619      	mov	r1, r3
 80007ea:	483c      	ldr	r0, [pc, #240]	; (80008dc <MX_GPIO_Init+0x1c4>)
 80007ec:	f000 fba8 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80007f0:	2332      	movs	r3, #50	; 0x32
 80007f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f4:	2302      	movs	r3, #2
 80007f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fc:	2303      	movs	r3, #3
 80007fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000800:	230b      	movs	r3, #11
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000804:	f107 031c 	add.w	r3, r7, #28
 8000808:	4619      	mov	r1, r3
 800080a:	4834      	ldr	r0, [pc, #208]	; (80008dc <MX_GPIO_Init+0x1c4>)
 800080c:	f000 fb98 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000810:	2386      	movs	r3, #134	; 0x86
 8000812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000814:	2302      	movs	r3, #2
 8000816:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081c:	2303      	movs	r3, #3
 800081e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000820:	230b      	movs	r3, #11
 8000822:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	482d      	ldr	r0, [pc, #180]	; (80008e0 <MX_GPIO_Init+0x1c8>)
 800082c:	f000 fb88 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000830:	f244 0381 	movw	r3, #16513	; 0x4081
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000836:	2301      	movs	r3, #1
 8000838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	4822      	ldr	r0, [pc, #136]	; (80008d4 <MX_GPIO_Init+0x1bc>)
 800084a:	f000 fb79 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800084e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000854:	2302      	movs	r3, #2
 8000856:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800085c:	2303      	movs	r3, #3
 800085e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000860:	230b      	movs	r3, #11
 8000862:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	481a      	ldr	r0, [pc, #104]	; (80008d4 <MX_GPIO_Init+0x1bc>)
 800086c:	f000 fb68 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000870:	2340      	movs	r3, #64	; 0x40
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	4814      	ldr	r0, [pc, #80]	; (80008d8 <MX_GPIO_Init+0x1c0>)
 8000888:	f000 fb5a 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800088c:	2380      	movs	r3, #128	; 0x80
 800088e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000890:	2300      	movs	r3, #0
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	480e      	ldr	r0, [pc, #56]	; (80008d8 <MX_GPIO_Init+0x1c0>)
 80008a0:	f000 fb4e 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80008a4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b2:	2303      	movs	r3, #3
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008b6:	230b      	movs	r3, #11
 80008b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_GPIO_Init+0x1c0>)
 80008c2:	f000 fb3d 	bl	8000f40 <HAL_GPIO_Init>

}
 80008c6:	bf00      	nop
 80008c8:	3730      	adds	r7, #48	; 0x30
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40020400 	.word	0x40020400
 80008d8:	40021800 	.word	0x40021800
 80008dc:	40020800 	.word	0x40020800
 80008e0:	40020000 	.word	0x40020000

080008e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 80008ec:	2064      	movs	r0, #100	; 0x64
 80008ee:	f003 fa7d 	bl	8003dec <osDelay>
 80008f2:	e7fb      	b.n	80008ec <StartDefaultTask+0x8>

080008f4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80008fc:	2101      	movs	r1, #1
 80008fe:	4804      	ldr	r0, [pc, #16]	; (8000910 <StartTask02+0x1c>)
 8000900:	f000 fce3 	bl	80012ca <HAL_GPIO_TogglePin>
    osDelay(500);
 8000904:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000908:	f003 fa70 	bl	8003dec <osDelay>
    HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800090c:	e7f6      	b.n	80008fc <StartTask02+0x8>
 800090e:	bf00      	nop
 8000910:	40020400 	.word	0x40020400

08000914 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800091c:	2180      	movs	r1, #128	; 0x80
 800091e:	4803      	ldr	r0, [pc, #12]	; (800092c <StartTask03+0x18>)
 8000920:	f000 fcd3 	bl	80012ca <HAL_GPIO_TogglePin>
	  osDelay(100);
 8000924:	2064      	movs	r0, #100	; 0x64
 8000926:	f003 fa61 	bl	8003dec <osDelay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800092a:	e7f7      	b.n	800091c <StartTask03+0x8>
 800092c:	40020400 	.word	0x40020400

08000930 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a04      	ldr	r2, [pc, #16]	; (8000950 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d101      	bne.n	8000946 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000942:	f000 f9d7 	bl	8000cf4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40000400 	.word	0x40000400

08000954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000958:	b672      	cpsid	i
}
 800095a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800095c:	2201      	movs	r2, #1
 800095e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000962:	4802      	ldr	r0, [pc, #8]	; (800096c <Error_Handler+0x18>)
 8000964:	f000 fc98 	bl	8001298 <HAL_GPIO_WritePin>
  while (1)
 8000968:	e7fe      	b.n	8000968 <Error_Handler+0x14>
 800096a:	bf00      	nop
 800096c:	40020400 	.word	0x40020400

08000970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000976:	4b11      	ldr	r3, [pc, #68]	; (80009bc <HAL_MspInit+0x4c>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	4a10      	ldr	r2, [pc, #64]	; (80009bc <HAL_MspInit+0x4c>)
 800097c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000980:	6413      	str	r3, [r2, #64]	; 0x40
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <HAL_MspInit+0x4c>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <HAL_MspInit+0x4c>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <HAL_MspInit+0x4c>)
 8000994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000998:	6453      	str	r3, [r2, #68]	; 0x44
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <HAL_MspInit+0x4c>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	210f      	movs	r1, #15
 80009aa:	f06f 0001 	mvn.w	r0, #1
 80009ae:	f000 fa9d 	bl	8000eec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800

080009c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b0aa      	sub	sp, #168	; 0xa8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009d8:	f107 0310 	add.w	r3, r7, #16
 80009dc:	2284      	movs	r2, #132	; 0x84
 80009de:	2100      	movs	r1, #0
 80009e0:	4618      	mov	r0, r3
 80009e2:	f005 fb2d 	bl	8006040 <memset>
  if(huart->Instance==USART3)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a22      	ldr	r2, [pc, #136]	; (8000a74 <HAL_UART_MspInit+0xb4>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d13c      	bne.n	8000a6a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80009f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009f4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009f6:	2300      	movs	r3, #0
 80009f8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009fa:	f107 0310 	add.w	r3, r7, #16
 80009fe:	4618      	mov	r0, r3
 8000a00:	f001 fad2 	bl	8001fa8 <HAL_RCCEx_PeriphCLKConfig>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a0a:	f7ff ffa3 	bl	8000954 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a0e:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <HAL_UART_MspInit+0xb8>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	4a19      	ldr	r2, [pc, #100]	; (8000a78 <HAL_UART_MspInit+0xb8>)
 8000a14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a18:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1a:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <HAL_UART_MspInit+0xb8>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a26:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <HAL_UART_MspInit+0xb8>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a13      	ldr	r2, [pc, #76]	; (8000a78 <HAL_UART_MspInit+0xb8>)
 8000a2c:	f043 0308 	orr.w	r3, r3, #8
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <HAL_UART_MspInit+0xb8>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0308 	and.w	r3, r3, #8
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2302      	movs	r3, #2
 8000a48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a52:	2303      	movs	r3, #3
 8000a54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a58:	2307      	movs	r3, #7
 8000a5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a5e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000a62:	4619      	mov	r1, r3
 8000a64:	4805      	ldr	r0, [pc, #20]	; (8000a7c <HAL_UART_MspInit+0xbc>)
 8000a66:	f000 fa6b 	bl	8000f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a6a:	bf00      	nop
 8000a6c:	37a8      	adds	r7, #168	; 0xa8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40004800 	.word	0x40004800
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40020c00 	.word	0x40020c00

08000a80 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b0ac      	sub	sp, #176	; 0xb0
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a98:	f107 0318 	add.w	r3, r7, #24
 8000a9c:	2284      	movs	r2, #132	; 0x84
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f005 facd 	bl	8006040 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000aae:	d159      	bne.n	8000b64 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000ab0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000ab4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000abc:	f107 0318 	add.w	r3, r7, #24
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f001 fa71 	bl	8001fa8 <HAL_RCCEx_PeriphCLKConfig>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000acc:	f7ff ff42 	bl	8000954 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad0:	4b26      	ldr	r3, [pc, #152]	; (8000b6c <HAL_PCD_MspInit+0xec>)
 8000ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad4:	4a25      	ldr	r2, [pc, #148]	; (8000b6c <HAL_PCD_MspInit+0xec>)
 8000ad6:	f043 0301 	orr.w	r3, r3, #1
 8000ada:	6313      	str	r3, [r2, #48]	; 0x30
 8000adc:	4b23      	ldr	r3, [pc, #140]	; (8000b6c <HAL_PCD_MspInit+0xec>)
 8000ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	617b      	str	r3, [r7, #20]
 8000ae6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ae8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000aec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afc:	2303      	movs	r3, #3
 8000afe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b02:	230a      	movs	r3, #10
 8000b04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b08:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4818      	ldr	r0, [pc, #96]	; (8000b70 <HAL_PCD_MspInit+0xf0>)
 8000b10:	f000 fa16 	bl	8000f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b28:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4810      	ldr	r0, [pc, #64]	; (8000b70 <HAL_PCD_MspInit+0xf0>)
 8000b30:	f000 fa06 	bl	8000f40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b34:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <HAL_PCD_MspInit+0xec>)
 8000b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b38:	4a0c      	ldr	r2, [pc, #48]	; (8000b6c <HAL_PCD_MspInit+0xec>)
 8000b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b3e:	6353      	str	r3, [r2, #52]	; 0x34
 8000b40:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <HAL_PCD_MspInit+0xec>)
 8000b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <HAL_PCD_MspInit+0xec>)
 8000b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b50:	4a06      	ldr	r2, [pc, #24]	; (8000b6c <HAL_PCD_MspInit+0xec>)
 8000b52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b56:	6453      	str	r3, [r2, #68]	; 0x44
 8000b58:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <HAL_PCD_MspInit+0xec>)
 8000b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000b64:	bf00      	nop
 8000b66:	37b0      	adds	r7, #176	; 0xb0
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40020000 	.word	0x40020000

08000b74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08c      	sub	sp, #48	; 0x30
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8000b84:	2200      	movs	r2, #0
 8000b86:	6879      	ldr	r1, [r7, #4]
 8000b88:	201d      	movs	r0, #29
 8000b8a:	f000 f9af 	bl	8000eec <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b8e:	201d      	movs	r0, #29
 8000b90:	f000 f9c8 	bl	8000f24 <HAL_NVIC_EnableIRQ>

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000b94:	4b1f      	ldr	r3, [pc, #124]	; (8000c14 <HAL_InitTick+0xa0>)
 8000b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b98:	4a1e      	ldr	r2, [pc, #120]	; (8000c14 <HAL_InitTick+0xa0>)
 8000b9a:	f043 0302 	orr.w	r3, r3, #2
 8000b9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba0:	4b1c      	ldr	r3, [pc, #112]	; (8000c14 <HAL_InitTick+0xa0>)
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba4:	f003 0302 	and.w	r3, r3, #2
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bac:	f107 0210 	add.w	r2, r7, #16
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	4611      	mov	r1, r2
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f001 f9c4 	bl	8001f44 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000bbc:	f001 f99a 	bl	8001ef4 <HAL_RCC_GetPCLK1Freq>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bc8:	4a13      	ldr	r2, [pc, #76]	; (8000c18 <HAL_InitTick+0xa4>)
 8000bca:	fba2 2303 	umull	r2, r3, r2, r3
 8000bce:	0c9b      	lsrs	r3, r3, #18
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <HAL_InitTick+0xa8>)
 8000bd6:	4a12      	ldr	r2, [pc, #72]	; (8000c20 <HAL_InitTick+0xac>)
 8000bd8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <HAL_InitTick+0xa8>)
 8000bdc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000be0:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000be2:	4a0e      	ldr	r2, [pc, #56]	; (8000c1c <HAL_InitTick+0xa8>)
 8000be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000be6:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000be8:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <HAL_InitTick+0xa8>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bee:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <HAL_InitTick+0xa8>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8000bf4:	4809      	ldr	r0, [pc, #36]	; (8000c1c <HAL_InitTick+0xa8>)
 8000bf6:	f001 fdc7 	bl	8002788 <HAL_TIM_Base_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d104      	bne.n	8000c0a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8000c00:	4806      	ldr	r0, [pc, #24]	; (8000c1c <HAL_InitTick+0xa8>)
 8000c02:	f001 fe23 	bl	800284c <HAL_TIM_Base_Start_IT>
 8000c06:	4603      	mov	r3, r0
 8000c08:	e000      	b.n	8000c0c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3730      	adds	r7, #48	; 0x30
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40023800 	.word	0x40023800
 8000c18:	431bde83 	.word	0x431bde83
 8000c1c:	200004c0 	.word	0x200004c0
 8000c20:	40000400 	.word	0x40000400

08000c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <NMI_Handler+0x4>

08000c2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <HardFault_Handler+0x4>

08000c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <MemManage_Handler+0x4>

08000c36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c3a:	e7fe      	b.n	8000c3a <BusFault_Handler+0x4>

08000c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <UsageFault_Handler+0x4>

08000c42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c54:	4802      	ldr	r0, [pc, #8]	; (8000c60 <TIM3_IRQHandler+0x10>)
 8000c56:	f001 fe71 	bl	800293c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	200004c0 	.word	0x200004c0

08000c64 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <SystemInit+0x20>)
 8000c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c6e:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <SystemInit+0x20>)
 8000c70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c8c:	480d      	ldr	r0, [pc, #52]	; (8000cc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c8e:	490e      	ldr	r1, [pc, #56]	; (8000cc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c90:	4a0e      	ldr	r2, [pc, #56]	; (8000ccc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c94:	e002      	b.n	8000c9c <LoopCopyDataInit>

08000c96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9a:	3304      	adds	r3, #4

08000c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca0:	d3f9      	bcc.n	8000c96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca2:	4a0b      	ldr	r2, [pc, #44]	; (8000cd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ca4:	4c0b      	ldr	r4, [pc, #44]	; (8000cd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca8:	e001      	b.n	8000cae <LoopFillZerobss>

08000caa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000caa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cac:	3204      	adds	r2, #4

08000cae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb0:	d3fb      	bcc.n	8000caa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cb2:	f7ff ffd7 	bl	8000c64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cb6:	f005 f991 	bl	8005fdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cba:	f7ff fc2b 	bl	8000514 <main>
  bx  lr    
 8000cbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cc0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ccc:	08006138 	.word	0x08006138
  ldr r2, =_sbss
 8000cd0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000cd4:	20004e58 	.word	0x20004e58

08000cd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd8:	e7fe      	b.n	8000cd8 <ADC_IRQHandler>

08000cda <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cde:	2003      	movs	r0, #3
 8000ce0:	f000 f8f9 	bl	8000ed6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce4:	200f      	movs	r0, #15
 8000ce6:	f7ff ff45 	bl	8000b74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cea:	f7ff fe41 	bl	8000970 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cee:	2300      	movs	r3, #0
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_IncTick+0x20>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_IncTick+0x24>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4413      	add	r3, r2
 8000d04:	4a04      	ldr	r2, [pc, #16]	; (8000d18 <HAL_IncTick+0x24>)
 8000d06:	6013      	str	r3, [r2, #0]
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	20000008 	.word	0x20000008
 8000d18:	2000050c 	.word	0x2000050c

08000d1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d20:	4b03      	ldr	r3, [pc, #12]	; (8000d30 <HAL_GetTick+0x14>)
 8000d22:	681b      	ldr	r3, [r3, #0]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	2000050c 	.word	0x2000050c

08000d34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d3c:	f7ff ffee 	bl	8000d1c <HAL_GetTick>
 8000d40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d4c:	d005      	beq.n	8000d5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <HAL_Delay+0x44>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	461a      	mov	r2, r3
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	4413      	add	r3, r2
 8000d58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d5a:	bf00      	nop
 8000d5c:	f7ff ffde 	bl	8000d1c <HAL_GetTick>
 8000d60:	4602      	mov	r2, r0
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d8f7      	bhi.n	8000d5c <HAL_Delay+0x28>
  {
  }
}
 8000d6c:	bf00      	nop
 8000d6e:	bf00      	nop
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000008 	.word	0x20000008

08000d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <__NVIC_SetPriorityGrouping+0x40>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000da6:	4313      	orrs	r3, r2
 8000da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000daa:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <__NVIC_SetPriorityGrouping+0x40>)
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	60d3      	str	r3, [r2, #12]
}
 8000db0:	bf00      	nop
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00
 8000dc0:	05fa0000 	.word	0x05fa0000

08000dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc8:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <__NVIC_GetPriorityGrouping+0x18>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	0a1b      	lsrs	r3, r3, #8
 8000dce:	f003 0307 	and.w	r3, r3, #7
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	db0b      	blt.n	8000e0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	f003 021f 	and.w	r2, r3, #31
 8000df8:	4907      	ldr	r1, [pc, #28]	; (8000e18 <__NVIC_EnableIRQ+0x38>)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	095b      	lsrs	r3, r3, #5
 8000e00:	2001      	movs	r0, #1
 8000e02:	fa00 f202 	lsl.w	r2, r0, r2
 8000e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000e100 	.word	0xe000e100

08000e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	6039      	str	r1, [r7, #0]
 8000e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	db0a      	blt.n	8000e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	490c      	ldr	r1, [pc, #48]	; (8000e68 <__NVIC_SetPriority+0x4c>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	0112      	lsls	r2, r2, #4
 8000e3c:	b2d2      	uxtb	r2, r2
 8000e3e:	440b      	add	r3, r1
 8000e40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e44:	e00a      	b.n	8000e5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	4908      	ldr	r1, [pc, #32]	; (8000e6c <__NVIC_SetPriority+0x50>)
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	f003 030f 	and.w	r3, r3, #15
 8000e52:	3b04      	subs	r3, #4
 8000e54:	0112      	lsls	r2, r2, #4
 8000e56:	b2d2      	uxtb	r2, r2
 8000e58:	440b      	add	r3, r1
 8000e5a:	761a      	strb	r2, [r3, #24]
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000e100 	.word	0xe000e100
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b089      	sub	sp, #36	; 0x24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	f1c3 0307 	rsb	r3, r3, #7
 8000e8a:	2b04      	cmp	r3, #4
 8000e8c:	bf28      	it	cs
 8000e8e:	2304      	movcs	r3, #4
 8000e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3304      	adds	r3, #4
 8000e96:	2b06      	cmp	r3, #6
 8000e98:	d902      	bls.n	8000ea0 <NVIC_EncodePriority+0x30>
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3b03      	subs	r3, #3
 8000e9e:	e000      	b.n	8000ea2 <NVIC_EncodePriority+0x32>
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43da      	mvns	r2, r3
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec2:	43d9      	mvns	r1, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	4313      	orrs	r3, r2
         );
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3724      	adds	r7, #36	; 0x24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff ff4c 	bl	8000d7c <__NVIC_SetPriorityGrouping>
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
 8000ef8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000efe:	f7ff ff61 	bl	8000dc4 <__NVIC_GetPriorityGrouping>
 8000f02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	68b9      	ldr	r1, [r7, #8]
 8000f08:	6978      	ldr	r0, [r7, #20]
 8000f0a:	f7ff ffb1 	bl	8000e70 <NVIC_EncodePriority>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f14:	4611      	mov	r1, r2
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff ff80 	bl	8000e1c <__NVIC_SetPriority>
}
 8000f1c:	bf00      	nop
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff ff54 	bl	8000de0 <__NVIC_EnableIRQ>
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b089      	sub	sp, #36	; 0x24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
 8000f5e:	e175      	b.n	800124c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000f60:	2201      	movs	r2, #1
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	697a      	ldr	r2, [r7, #20]
 8000f70:	4013      	ands	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	f040 8164 	bne.w	8001246 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f003 0303 	and.w	r3, r3, #3
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d005      	beq.n	8000f96 <HAL_GPIO_Init+0x56>
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f003 0303 	and.w	r3, r3, #3
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d130      	bne.n	8000ff8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4013      	ands	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	68da      	ldr	r2, [r3, #12]
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fcc:	2201      	movs	r2, #1
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	091b      	lsrs	r3, r3, #4
 8000fe2:	f003 0201 	and.w	r2, r3, #1
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f003 0303 	and.w	r3, r3, #3
 8001000:	2b03      	cmp	r3, #3
 8001002:	d017      	beq.n	8001034 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	2203      	movs	r2, #3
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 0303 	and.w	r3, r3, #3
 800103c:	2b02      	cmp	r3, #2
 800103e:	d123      	bne.n	8001088 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	08da      	lsrs	r2, r3, #3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3208      	adds	r2, #8
 8001048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800104c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	f003 0307 	and.w	r3, r3, #7
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	220f      	movs	r2, #15
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	691a      	ldr	r2, [r3, #16]
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	08da      	lsrs	r2, r3, #3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	3208      	adds	r2, #8
 8001082:	69b9      	ldr	r1, [r7, #24]
 8001084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	2203      	movs	r2, #3
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 0203 	and.w	r2, r3, #3
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f000 80be 	beq.w	8001246 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ca:	4b66      	ldr	r3, [pc, #408]	; (8001264 <HAL_GPIO_Init+0x324>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	4a65      	ldr	r2, [pc, #404]	; (8001264 <HAL_GPIO_Init+0x324>)
 80010d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d4:	6453      	str	r3, [r2, #68]	; 0x44
 80010d6:	4b63      	ldr	r3, [pc, #396]	; (8001264 <HAL_GPIO_Init+0x324>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80010e2:	4a61      	ldr	r2, [pc, #388]	; (8001268 <HAL_GPIO_Init+0x328>)
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	089b      	lsrs	r3, r3, #2
 80010e8:	3302      	adds	r3, #2
 80010ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f003 0303 	and.w	r3, r3, #3
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	220f      	movs	r2, #15
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43db      	mvns	r3, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4013      	ands	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a58      	ldr	r2, [pc, #352]	; (800126c <HAL_GPIO_Init+0x32c>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d037      	beq.n	800117e <HAL_GPIO_Init+0x23e>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a57      	ldr	r2, [pc, #348]	; (8001270 <HAL_GPIO_Init+0x330>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d031      	beq.n	800117a <HAL_GPIO_Init+0x23a>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a56      	ldr	r2, [pc, #344]	; (8001274 <HAL_GPIO_Init+0x334>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d02b      	beq.n	8001176 <HAL_GPIO_Init+0x236>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a55      	ldr	r2, [pc, #340]	; (8001278 <HAL_GPIO_Init+0x338>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d025      	beq.n	8001172 <HAL_GPIO_Init+0x232>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a54      	ldr	r2, [pc, #336]	; (800127c <HAL_GPIO_Init+0x33c>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d01f      	beq.n	800116e <HAL_GPIO_Init+0x22e>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a53      	ldr	r2, [pc, #332]	; (8001280 <HAL_GPIO_Init+0x340>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d019      	beq.n	800116a <HAL_GPIO_Init+0x22a>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a52      	ldr	r2, [pc, #328]	; (8001284 <HAL_GPIO_Init+0x344>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d013      	beq.n	8001166 <HAL_GPIO_Init+0x226>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a51      	ldr	r2, [pc, #324]	; (8001288 <HAL_GPIO_Init+0x348>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d00d      	beq.n	8001162 <HAL_GPIO_Init+0x222>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a50      	ldr	r2, [pc, #320]	; (800128c <HAL_GPIO_Init+0x34c>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d007      	beq.n	800115e <HAL_GPIO_Init+0x21e>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a4f      	ldr	r2, [pc, #316]	; (8001290 <HAL_GPIO_Init+0x350>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d101      	bne.n	800115a <HAL_GPIO_Init+0x21a>
 8001156:	2309      	movs	r3, #9
 8001158:	e012      	b.n	8001180 <HAL_GPIO_Init+0x240>
 800115a:	230a      	movs	r3, #10
 800115c:	e010      	b.n	8001180 <HAL_GPIO_Init+0x240>
 800115e:	2308      	movs	r3, #8
 8001160:	e00e      	b.n	8001180 <HAL_GPIO_Init+0x240>
 8001162:	2307      	movs	r3, #7
 8001164:	e00c      	b.n	8001180 <HAL_GPIO_Init+0x240>
 8001166:	2306      	movs	r3, #6
 8001168:	e00a      	b.n	8001180 <HAL_GPIO_Init+0x240>
 800116a:	2305      	movs	r3, #5
 800116c:	e008      	b.n	8001180 <HAL_GPIO_Init+0x240>
 800116e:	2304      	movs	r3, #4
 8001170:	e006      	b.n	8001180 <HAL_GPIO_Init+0x240>
 8001172:	2303      	movs	r3, #3
 8001174:	e004      	b.n	8001180 <HAL_GPIO_Init+0x240>
 8001176:	2302      	movs	r3, #2
 8001178:	e002      	b.n	8001180 <HAL_GPIO_Init+0x240>
 800117a:	2301      	movs	r3, #1
 800117c:	e000      	b.n	8001180 <HAL_GPIO_Init+0x240>
 800117e:	2300      	movs	r3, #0
 8001180:	69fa      	ldr	r2, [r7, #28]
 8001182:	f002 0203 	and.w	r2, r2, #3
 8001186:	0092      	lsls	r2, r2, #2
 8001188:	4093      	lsls	r3, r2
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001190:	4935      	ldr	r1, [pc, #212]	; (8001268 <HAL_GPIO_Init+0x328>)
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	089b      	lsrs	r3, r3, #2
 8001196:	3302      	adds	r3, #2
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800119e:	4b3d      	ldr	r3, [pc, #244]	; (8001294 <HAL_GPIO_Init+0x354>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	43db      	mvns	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011c2:	4a34      	ldr	r2, [pc, #208]	; (8001294 <HAL_GPIO_Init+0x354>)
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011c8:	4b32      	ldr	r3, [pc, #200]	; (8001294 <HAL_GPIO_Init+0x354>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011ec:	4a29      	ldr	r2, [pc, #164]	; (8001294 <HAL_GPIO_Init+0x354>)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011f2:	4b28      	ldr	r3, [pc, #160]	; (8001294 <HAL_GPIO_Init+0x354>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001216:	4a1f      	ldr	r2, [pc, #124]	; (8001294 <HAL_GPIO_Init+0x354>)
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800121c:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <HAL_GPIO_Init+0x354>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d003      	beq.n	8001240 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001240:	4a14      	ldr	r2, [pc, #80]	; (8001294 <HAL_GPIO_Init+0x354>)
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3301      	adds	r3, #1
 800124a:	61fb      	str	r3, [r7, #28]
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	2b0f      	cmp	r3, #15
 8001250:	f67f ae86 	bls.w	8000f60 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001254:	bf00      	nop
 8001256:	bf00      	nop
 8001258:	3724      	adds	r7, #36	; 0x24
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40023800 	.word	0x40023800
 8001268:	40013800 	.word	0x40013800
 800126c:	40020000 	.word	0x40020000
 8001270:	40020400 	.word	0x40020400
 8001274:	40020800 	.word	0x40020800
 8001278:	40020c00 	.word	0x40020c00
 800127c:	40021000 	.word	0x40021000
 8001280:	40021400 	.word	0x40021400
 8001284:	40021800 	.word	0x40021800
 8001288:	40021c00 	.word	0x40021c00
 800128c:	40022000 	.word	0x40022000
 8001290:	40022400 	.word	0x40022400
 8001294:	40013c00 	.word	0x40013c00

08001298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	460b      	mov	r3, r1
 80012a2:	807b      	strh	r3, [r7, #2]
 80012a4:	4613      	mov	r3, r2
 80012a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012a8:	787b      	ldrb	r3, [r7, #1]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ae:	887a      	ldrh	r2, [r7, #2]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80012b4:	e003      	b.n	80012be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80012b6:	887b      	ldrh	r3, [r7, #2]
 80012b8:	041a      	lsls	r2, r3, #16
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	619a      	str	r2, [r3, #24]
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012ca:	b480      	push	{r7}
 80012cc:	b085      	sub	sp, #20
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
 80012d2:	460b      	mov	r3, r1
 80012d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012dc:	887a      	ldrh	r2, [r7, #2]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	4013      	ands	r3, r2
 80012e2:	041a      	lsls	r2, r3, #16
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	43d9      	mvns	r1, r3
 80012e8:	887b      	ldrh	r3, [r7, #2]
 80012ea:	400b      	ands	r3, r1
 80012ec:	431a      	orrs	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	619a      	str	r2, [r3, #24]
}
 80012f2:	bf00      	nop
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80012fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001300:	b08f      	sub	sp, #60	; 0x3c
 8001302:	af0a      	add	r7, sp, #40	; 0x28
 8001304:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d101      	bne.n	8001310 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e116      	b.n	800153e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d106      	bne.n	8001330 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff fba8 	bl	8000a80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2203      	movs	r2, #3
 8001334:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800133c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001340:	2b00      	cmp	r3, #0
 8001342:	d102      	bne.n	800134a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f002 f99e 	bl	8003690 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	603b      	str	r3, [r7, #0]
 800135a:	687e      	ldr	r6, [r7, #4]
 800135c:	466d      	mov	r5, sp
 800135e:	f106 0410 	add.w	r4, r6, #16
 8001362:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001364:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001366:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001368:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800136a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800136e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001372:	1d33      	adds	r3, r6, #4
 8001374:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001376:	6838      	ldr	r0, [r7, #0]
 8001378:	f002 f932 	bl	80035e0 <USB_CoreInit>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d005      	beq.n	800138e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2202      	movs	r2, #2
 8001386:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e0d7      	b.n	800153e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2100      	movs	r1, #0
 8001394:	4618      	mov	r0, r3
 8001396:	f002 f98c 	bl	80036b2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800139a:	2300      	movs	r3, #0
 800139c:	73fb      	strb	r3, [r7, #15]
 800139e:	e04a      	b.n	8001436 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013a0:	7bfa      	ldrb	r2, [r7, #15]
 80013a2:	6879      	ldr	r1, [r7, #4]
 80013a4:	4613      	mov	r3, r2
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	1a9b      	subs	r3, r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	440b      	add	r3, r1
 80013ae:	333d      	adds	r3, #61	; 0x3d
 80013b0:	2201      	movs	r2, #1
 80013b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013b4:	7bfa      	ldrb	r2, [r7, #15]
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	4613      	mov	r3, r2
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	1a9b      	subs	r3, r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	440b      	add	r3, r1
 80013c2:	333c      	adds	r3, #60	; 0x3c
 80013c4:	7bfa      	ldrb	r2, [r7, #15]
 80013c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013c8:	7bfa      	ldrb	r2, [r7, #15]
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	b298      	uxth	r0, r3
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	1a9b      	subs	r3, r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	440b      	add	r3, r1
 80013da:	3342      	adds	r3, #66	; 0x42
 80013dc:	4602      	mov	r2, r0
 80013de:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013e0:	7bfa      	ldrb	r2, [r7, #15]
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	4613      	mov	r3, r2
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	1a9b      	subs	r3, r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	440b      	add	r3, r1
 80013ee:	333f      	adds	r3, #63	; 0x3f
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013f4:	7bfa      	ldrb	r2, [r7, #15]
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	4613      	mov	r3, r2
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	1a9b      	subs	r3, r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	440b      	add	r3, r1
 8001402:	3344      	adds	r3, #68	; 0x44
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001408:	7bfa      	ldrb	r2, [r7, #15]
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	4613      	mov	r3, r2
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	1a9b      	subs	r3, r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	440b      	add	r3, r1
 8001416:	3348      	adds	r3, #72	; 0x48
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800141c:	7bfa      	ldrb	r2, [r7, #15]
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	4613      	mov	r3, r2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	1a9b      	subs	r3, r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	440b      	add	r3, r1
 800142a:	3350      	adds	r3, #80	; 0x50
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	3301      	adds	r3, #1
 8001434:	73fb      	strb	r3, [r7, #15]
 8001436:	7bfa      	ldrb	r2, [r7, #15]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	429a      	cmp	r2, r3
 800143e:	d3af      	bcc.n	80013a0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001440:	2300      	movs	r3, #0
 8001442:	73fb      	strb	r3, [r7, #15]
 8001444:	e044      	b.n	80014d0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001446:	7bfa      	ldrb	r2, [r7, #15]
 8001448:	6879      	ldr	r1, [r7, #4]
 800144a:	4613      	mov	r3, r2
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	1a9b      	subs	r3, r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	440b      	add	r3, r1
 8001454:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800145c:	7bfa      	ldrb	r2, [r7, #15]
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	4613      	mov	r3, r2
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	1a9b      	subs	r3, r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	440b      	add	r3, r1
 800146a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800146e:	7bfa      	ldrb	r2, [r7, #15]
 8001470:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001472:	7bfa      	ldrb	r2, [r7, #15]
 8001474:	6879      	ldr	r1, [r7, #4]
 8001476:	4613      	mov	r3, r2
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	1a9b      	subs	r3, r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	440b      	add	r3, r1
 8001480:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001484:	2200      	movs	r2, #0
 8001486:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001488:	7bfa      	ldrb	r2, [r7, #15]
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	4613      	mov	r3, r2
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	1a9b      	subs	r3, r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	440b      	add	r3, r1
 8001496:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800149e:	7bfa      	ldrb	r2, [r7, #15]
 80014a0:	6879      	ldr	r1, [r7, #4]
 80014a2:	4613      	mov	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	1a9b      	subs	r3, r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	440b      	add	r3, r1
 80014ac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014b4:	7bfa      	ldrb	r2, [r7, #15]
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	4613      	mov	r3, r2
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	1a9b      	subs	r3, r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
 80014cc:	3301      	adds	r3, #1
 80014ce:	73fb      	strb	r3, [r7, #15]
 80014d0:	7bfa      	ldrb	r2, [r7, #15]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d3b5      	bcc.n	8001446 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	687e      	ldr	r6, [r7, #4]
 80014e2:	466d      	mov	r5, sp
 80014e4:	f106 0410 	add.w	r4, r6, #16
 80014e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80014f8:	1d33      	adds	r3, r6, #4
 80014fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014fc:	6838      	ldr	r0, [r7, #0]
 80014fe:	f002 f925 	bl	800374c <USB_DevInit>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d005      	beq.n	8001514 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2202      	movs	r2, #2
 800150c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e014      	b.n	800153e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2201      	movs	r2, #1
 8001520:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001528:	2b01      	cmp	r3, #1
 800152a:	d102      	bne.n	8001532 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f000 f80b 	bl	8001548 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f002 fadf 	bl	8003afa <USB_DevDisconnect>

  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001548 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2201      	movs	r2, #1
 800155a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001576:	4b05      	ldr	r3, [pc, #20]	; (800158c <HAL_PCDEx_ActivateLPM+0x44>)
 8001578:	4313      	orrs	r3, r2
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800157e:	2300      	movs	r3, #0
}
 8001580:	4618      	mov	r0, r3
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	10000003 	.word	0x10000003

08001590 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a04      	ldr	r2, [pc, #16]	; (80015ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 800159a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800159e:	6013      	str	r3, [r2, #0]
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40007000 	.word	0x40007000

080015b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80015b8:	2300      	movs	r3, #0
 80015ba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e291      	b.n	8001aea <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f000 8087 	beq.w	80016e2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015d4:	4b96      	ldr	r3, [pc, #600]	; (8001830 <HAL_RCC_OscConfig+0x280>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f003 030c 	and.w	r3, r3, #12
 80015dc:	2b04      	cmp	r3, #4
 80015de:	d00c      	beq.n	80015fa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015e0:	4b93      	ldr	r3, [pc, #588]	; (8001830 <HAL_RCC_OscConfig+0x280>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f003 030c 	and.w	r3, r3, #12
 80015e8:	2b08      	cmp	r3, #8
 80015ea:	d112      	bne.n	8001612 <HAL_RCC_OscConfig+0x62>
 80015ec:	4b90      	ldr	r3, [pc, #576]	; (8001830 <HAL_RCC_OscConfig+0x280>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015f8:	d10b      	bne.n	8001612 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015fa:	4b8d      	ldr	r3, [pc, #564]	; (8001830 <HAL_RCC_OscConfig+0x280>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d06c      	beq.n	80016e0 <HAL_RCC_OscConfig+0x130>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d168      	bne.n	80016e0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e26b      	b.n	8001aea <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800161a:	d106      	bne.n	800162a <HAL_RCC_OscConfig+0x7a>
 800161c:	4b84      	ldr	r3, [pc, #528]	; (8001830 <HAL_RCC_OscConfig+0x280>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a83      	ldr	r2, [pc, #524]	; (8001830 <HAL_RCC_OscConfig+0x280>)
 8001622:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	e02e      	b.n	8001688 <HAL_RCC_OscConfig+0xd8>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10c      	bne.n	800164c <HAL_RCC_OscConfig+0x9c>
 8001632:	4b7f      	ldr	r3, [pc, #508]	; (8001830 <HAL_RCC_OscConfig+0x280>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a7e      	ldr	r2, [pc, #504]	; (8001830 <HAL_RCC_OscConfig+0x280>)
 8001638:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	4b7c      	ldr	r3, [pc, #496]	; (8001830 <HAL_RCC_OscConfig+0x280>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a7b      	ldr	r2, [pc, #492]	; (8001830 <HAL_RCC_OscConfig+0x280>)
 8001644:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	e01d      	b.n	8001688 <HAL_RCC_OscConfig+0xd8>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001654:	d10c      	bne.n	8001670 <HAL_RCC_OscConfig+0xc0>
 8001656:	4b76      	ldr	r3, [pc, #472]	; (8001830 <HAL_RCC_OscConfig+0x280>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a75      	ldr	r2, [pc, #468]	; (8001830 <HAL_RCC_OscConfig+0x280>)
 800165c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	4b73      	ldr	r3, [pc, #460]	; (8001830 <HAL_RCC_OscConfig+0x280>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a72      	ldr	r2, [pc, #456]	; (8001830 <HAL_RCC_OscConfig+0x280>)
 8001668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	e00b      	b.n	8001688 <HAL_RCC_OscConfig+0xd8>
 8001670:	4b6f      	ldr	r3, [pc, #444]	; (8001830 <HAL_RCC_OscConfig+0x280>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a6e      	ldr	r2, [pc, #440]	; (8001830 <HAL_RCC_OscConfig+0x280>)
 8001676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	4b6c      	ldr	r3, [pc, #432]	; (8001830 <HAL_RCC_OscConfig+0x280>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a6b      	ldr	r2, [pc, #428]	; (8001830 <HAL_RCC_OscConfig+0x280>)
 8001682:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001686:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d013      	beq.n	80016b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001690:	f7ff fb44 	bl	8000d1c <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001698:	f7ff fb40 	bl	8000d1c <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b64      	cmp	r3, #100	; 0x64
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e21f      	b.n	8001aea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016aa:	4b61      	ldr	r3, [pc, #388]	; (8001830 <HAL_RCC_OscConfig+0x280>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d0f0      	beq.n	8001698 <HAL_RCC_OscConfig+0xe8>
 80016b6:	e014      	b.n	80016e2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b8:	f7ff fb30 	bl	8000d1c <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c0:	f7ff fb2c 	bl	8000d1c <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b64      	cmp	r3, #100	; 0x64
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e20b      	b.n	8001aea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d2:	4b57      	ldr	r3, [pc, #348]	; (8001830 <HAL_RCC_OscConfig+0x280>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f0      	bne.n	80016c0 <HAL_RCC_OscConfig+0x110>
 80016de:	e000      	b.n	80016e2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d069      	beq.n	80017c2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016ee:	4b50      	ldr	r3, [pc, #320]	; (8001830 <HAL_RCC_OscConfig+0x280>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 030c 	and.w	r3, r3, #12
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00b      	beq.n	8001712 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016fa:	4b4d      	ldr	r3, [pc, #308]	; (8001830 <HAL_RCC_OscConfig+0x280>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 030c 	and.w	r3, r3, #12
 8001702:	2b08      	cmp	r3, #8
 8001704:	d11c      	bne.n	8001740 <HAL_RCC_OscConfig+0x190>
 8001706:	4b4a      	ldr	r3, [pc, #296]	; (8001830 <HAL_RCC_OscConfig+0x280>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d116      	bne.n	8001740 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001712:	4b47      	ldr	r3, [pc, #284]	; (8001830 <HAL_RCC_OscConfig+0x280>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d005      	beq.n	800172a <HAL_RCC_OscConfig+0x17a>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d001      	beq.n	800172a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e1df      	b.n	8001aea <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172a:	4b41      	ldr	r3, [pc, #260]	; (8001830 <HAL_RCC_OscConfig+0x280>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	493d      	ldr	r1, [pc, #244]	; (8001830 <HAL_RCC_OscConfig+0x280>)
 800173a:	4313      	orrs	r3, r2
 800173c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800173e:	e040      	b.n	80017c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d023      	beq.n	8001790 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001748:	4b39      	ldr	r3, [pc, #228]	; (8001830 <HAL_RCC_OscConfig+0x280>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a38      	ldr	r2, [pc, #224]	; (8001830 <HAL_RCC_OscConfig+0x280>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001754:	f7ff fae2 	bl	8000d1c <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800175c:	f7ff fade 	bl	8000d1c <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e1bd      	b.n	8001aea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800176e:	4b30      	ldr	r3, [pc, #192]	; (8001830 <HAL_RCC_OscConfig+0x280>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d0f0      	beq.n	800175c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177a:	4b2d      	ldr	r3, [pc, #180]	; (8001830 <HAL_RCC_OscConfig+0x280>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	4929      	ldr	r1, [pc, #164]	; (8001830 <HAL_RCC_OscConfig+0x280>)
 800178a:	4313      	orrs	r3, r2
 800178c:	600b      	str	r3, [r1, #0]
 800178e:	e018      	b.n	80017c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001790:	4b27      	ldr	r3, [pc, #156]	; (8001830 <HAL_RCC_OscConfig+0x280>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a26      	ldr	r2, [pc, #152]	; (8001830 <HAL_RCC_OscConfig+0x280>)
 8001796:	f023 0301 	bic.w	r3, r3, #1
 800179a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179c:	f7ff fabe 	bl	8000d1c <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a4:	f7ff faba 	bl	8000d1c <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e199      	b.n	8001aea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017b6:	4b1e      	ldr	r3, [pc, #120]	; (8001830 <HAL_RCC_OscConfig+0x280>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1f0      	bne.n	80017a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0308 	and.w	r3, r3, #8
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d038      	beq.n	8001840 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d019      	beq.n	800180a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017d6:	4b16      	ldr	r3, [pc, #88]	; (8001830 <HAL_RCC_OscConfig+0x280>)
 80017d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017da:	4a15      	ldr	r2, [pc, #84]	; (8001830 <HAL_RCC_OscConfig+0x280>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e2:	f7ff fa9b 	bl	8000d1c <HAL_GetTick>
 80017e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ea:	f7ff fa97 	bl	8000d1c <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e176      	b.n	8001aea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <HAL_RCC_OscConfig+0x280>)
 80017fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d0f0      	beq.n	80017ea <HAL_RCC_OscConfig+0x23a>
 8001808:	e01a      	b.n	8001840 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <HAL_RCC_OscConfig+0x280>)
 800180c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800180e:	4a08      	ldr	r2, [pc, #32]	; (8001830 <HAL_RCC_OscConfig+0x280>)
 8001810:	f023 0301 	bic.w	r3, r3, #1
 8001814:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001816:	f7ff fa81 	bl	8000d1c <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800181c:	e00a      	b.n	8001834 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800181e:	f7ff fa7d 	bl	8000d1c <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d903      	bls.n	8001834 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e15c      	b.n	8001aea <HAL_RCC_OscConfig+0x53a>
 8001830:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001834:	4b91      	ldr	r3, [pc, #580]	; (8001a7c <HAL_RCC_OscConfig+0x4cc>)
 8001836:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1ee      	bne.n	800181e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 80a4 	beq.w	8001996 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800184e:	4b8b      	ldr	r3, [pc, #556]	; (8001a7c <HAL_RCC_OscConfig+0x4cc>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d10d      	bne.n	8001876 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800185a:	4b88      	ldr	r3, [pc, #544]	; (8001a7c <HAL_RCC_OscConfig+0x4cc>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	4a87      	ldr	r2, [pc, #540]	; (8001a7c <HAL_RCC_OscConfig+0x4cc>)
 8001860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001864:	6413      	str	r3, [r2, #64]	; 0x40
 8001866:	4b85      	ldr	r3, [pc, #532]	; (8001a7c <HAL_RCC_OscConfig+0x4cc>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001872:	2301      	movs	r3, #1
 8001874:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001876:	4b82      	ldr	r3, [pc, #520]	; (8001a80 <HAL_RCC_OscConfig+0x4d0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187e:	2b00      	cmp	r3, #0
 8001880:	d118      	bne.n	80018b4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001882:	4b7f      	ldr	r3, [pc, #508]	; (8001a80 <HAL_RCC_OscConfig+0x4d0>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a7e      	ldr	r2, [pc, #504]	; (8001a80 <HAL_RCC_OscConfig+0x4d0>)
 8001888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800188c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800188e:	f7ff fa45 	bl	8000d1c <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001896:	f7ff fa41 	bl	8000d1c <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b64      	cmp	r3, #100	; 0x64
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e120      	b.n	8001aea <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018a8:	4b75      	ldr	r3, [pc, #468]	; (8001a80 <HAL_RCC_OscConfig+0x4d0>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0f0      	beq.n	8001896 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d106      	bne.n	80018ca <HAL_RCC_OscConfig+0x31a>
 80018bc:	4b6f      	ldr	r3, [pc, #444]	; (8001a7c <HAL_RCC_OscConfig+0x4cc>)
 80018be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c0:	4a6e      	ldr	r2, [pc, #440]	; (8001a7c <HAL_RCC_OscConfig+0x4cc>)
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	6713      	str	r3, [r2, #112]	; 0x70
 80018c8:	e02d      	b.n	8001926 <HAL_RCC_OscConfig+0x376>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d10c      	bne.n	80018ec <HAL_RCC_OscConfig+0x33c>
 80018d2:	4b6a      	ldr	r3, [pc, #424]	; (8001a7c <HAL_RCC_OscConfig+0x4cc>)
 80018d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d6:	4a69      	ldr	r2, [pc, #420]	; (8001a7c <HAL_RCC_OscConfig+0x4cc>)
 80018d8:	f023 0301 	bic.w	r3, r3, #1
 80018dc:	6713      	str	r3, [r2, #112]	; 0x70
 80018de:	4b67      	ldr	r3, [pc, #412]	; (8001a7c <HAL_RCC_OscConfig+0x4cc>)
 80018e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e2:	4a66      	ldr	r2, [pc, #408]	; (8001a7c <HAL_RCC_OscConfig+0x4cc>)
 80018e4:	f023 0304 	bic.w	r3, r3, #4
 80018e8:	6713      	str	r3, [r2, #112]	; 0x70
 80018ea:	e01c      	b.n	8001926 <HAL_RCC_OscConfig+0x376>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	2b05      	cmp	r3, #5
 80018f2:	d10c      	bne.n	800190e <HAL_RCC_OscConfig+0x35e>
 80018f4:	4b61      	ldr	r3, [pc, #388]	; (8001a7c <HAL_RCC_OscConfig+0x4cc>)
 80018f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f8:	4a60      	ldr	r2, [pc, #384]	; (8001a7c <HAL_RCC_OscConfig+0x4cc>)
 80018fa:	f043 0304 	orr.w	r3, r3, #4
 80018fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001900:	4b5e      	ldr	r3, [pc, #376]	; (8001a7c <HAL_RCC_OscConfig+0x4cc>)
 8001902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001904:	4a5d      	ldr	r2, [pc, #372]	; (8001a7c <HAL_RCC_OscConfig+0x4cc>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	6713      	str	r3, [r2, #112]	; 0x70
 800190c:	e00b      	b.n	8001926 <HAL_RCC_OscConfig+0x376>
 800190e:	4b5b      	ldr	r3, [pc, #364]	; (8001a7c <HAL_RCC_OscConfig+0x4cc>)
 8001910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001912:	4a5a      	ldr	r2, [pc, #360]	; (8001a7c <HAL_RCC_OscConfig+0x4cc>)
 8001914:	f023 0301 	bic.w	r3, r3, #1
 8001918:	6713      	str	r3, [r2, #112]	; 0x70
 800191a:	4b58      	ldr	r3, [pc, #352]	; (8001a7c <HAL_RCC_OscConfig+0x4cc>)
 800191c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191e:	4a57      	ldr	r2, [pc, #348]	; (8001a7c <HAL_RCC_OscConfig+0x4cc>)
 8001920:	f023 0304 	bic.w	r3, r3, #4
 8001924:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d015      	beq.n	800195a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800192e:	f7ff f9f5 	bl	8000d1c <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001934:	e00a      	b.n	800194c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001936:	f7ff f9f1 	bl	8000d1c <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	f241 3288 	movw	r2, #5000	; 0x1388
 8001944:	4293      	cmp	r3, r2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e0ce      	b.n	8001aea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800194c:	4b4b      	ldr	r3, [pc, #300]	; (8001a7c <HAL_RCC_OscConfig+0x4cc>)
 800194e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0ee      	beq.n	8001936 <HAL_RCC_OscConfig+0x386>
 8001958:	e014      	b.n	8001984 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800195a:	f7ff f9df 	bl	8000d1c <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001960:	e00a      	b.n	8001978 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001962:	f7ff f9db 	bl	8000d1c <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001970:	4293      	cmp	r3, r2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e0b8      	b.n	8001aea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001978:	4b40      	ldr	r3, [pc, #256]	; (8001a7c <HAL_RCC_OscConfig+0x4cc>)
 800197a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1ee      	bne.n	8001962 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001984:	7dfb      	ldrb	r3, [r7, #23]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d105      	bne.n	8001996 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800198a:	4b3c      	ldr	r3, [pc, #240]	; (8001a7c <HAL_RCC_OscConfig+0x4cc>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	4a3b      	ldr	r2, [pc, #236]	; (8001a7c <HAL_RCC_OscConfig+0x4cc>)
 8001990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001994:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 80a4 	beq.w	8001ae8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019a0:	4b36      	ldr	r3, [pc, #216]	; (8001a7c <HAL_RCC_OscConfig+0x4cc>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 030c 	and.w	r3, r3, #12
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	d06b      	beq.n	8001a84 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d149      	bne.n	8001a48 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b4:	4b31      	ldr	r3, [pc, #196]	; (8001a7c <HAL_RCC_OscConfig+0x4cc>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a30      	ldr	r2, [pc, #192]	; (8001a7c <HAL_RCC_OscConfig+0x4cc>)
 80019ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c0:	f7ff f9ac 	bl	8000d1c <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c8:	f7ff f9a8 	bl	8000d1c <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e087      	b.n	8001aea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019da:	4b28      	ldr	r3, [pc, #160]	; (8001a7c <HAL_RCC_OscConfig+0x4cc>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1f0      	bne.n	80019c8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69da      	ldr	r2, [r3, #28]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f4:	019b      	lsls	r3, r3, #6
 80019f6:	431a      	orrs	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fc:	085b      	lsrs	r3, r3, #1
 80019fe:	3b01      	subs	r3, #1
 8001a00:	041b      	lsls	r3, r3, #16
 8001a02:	431a      	orrs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a08:	061b      	lsls	r3, r3, #24
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	4a1b      	ldr	r2, [pc, #108]	; (8001a7c <HAL_RCC_OscConfig+0x4cc>)
 8001a0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001a12:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a14:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <HAL_RCC_OscConfig+0x4cc>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a18      	ldr	r2, [pc, #96]	; (8001a7c <HAL_RCC_OscConfig+0x4cc>)
 8001a1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a20:	f7ff f97c 	bl	8000d1c <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a28:	f7ff f978 	bl	8000d1c <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e057      	b.n	8001aea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a3a:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <HAL_RCC_OscConfig+0x4cc>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0f0      	beq.n	8001a28 <HAL_RCC_OscConfig+0x478>
 8001a46:	e04f      	b.n	8001ae8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a48:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <HAL_RCC_OscConfig+0x4cc>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0b      	ldr	r2, [pc, #44]	; (8001a7c <HAL_RCC_OscConfig+0x4cc>)
 8001a4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a54:	f7ff f962 	bl	8000d1c <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a5c:	f7ff f95e 	bl	8000d1c <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e03d      	b.n	8001aea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a6e:	4b03      	ldr	r3, [pc, #12]	; (8001a7c <HAL_RCC_OscConfig+0x4cc>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1f0      	bne.n	8001a5c <HAL_RCC_OscConfig+0x4ac>
 8001a7a:	e035      	b.n	8001ae8 <HAL_RCC_OscConfig+0x538>
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001a84:	4b1b      	ldr	r3, [pc, #108]	; (8001af4 <HAL_RCC_OscConfig+0x544>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d028      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d121      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d11a      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001aba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d111      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aca:	085b      	lsrs	r3, r3, #1
 8001acc:	3b01      	subs	r3, #1
 8001ace:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d107      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ade:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d001      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e000      	b.n	8001aea <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800

08001af8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e0d0      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b10:	4b6a      	ldr	r3, [pc, #424]	; (8001cbc <HAL_RCC_ClockConfig+0x1c4>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 030f 	and.w	r3, r3, #15
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d910      	bls.n	8001b40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1e:	4b67      	ldr	r3, [pc, #412]	; (8001cbc <HAL_RCC_ClockConfig+0x1c4>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f023 020f 	bic.w	r2, r3, #15
 8001b26:	4965      	ldr	r1, [pc, #404]	; (8001cbc <HAL_RCC_ClockConfig+0x1c4>)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2e:	4b63      	ldr	r3, [pc, #396]	; (8001cbc <HAL_RCC_ClockConfig+0x1c4>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d001      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e0b8      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d020      	beq.n	8001b8e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d005      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b58:	4b59      	ldr	r3, [pc, #356]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	4a58      	ldr	r2, [pc, #352]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001b5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b62:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0308 	and.w	r3, r3, #8
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d005      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b70:	4b53      	ldr	r3, [pc, #332]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	4a52      	ldr	r2, [pc, #328]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001b76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b7a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b7c:	4b50      	ldr	r3, [pc, #320]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	494d      	ldr	r1, [pc, #308]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d040      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d107      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba2:	4b47      	ldr	r3, [pc, #284]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d115      	bne.n	8001bda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e07f      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d107      	bne.n	8001bca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bba:	4b41      	ldr	r3, [pc, #260]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d109      	bne.n	8001bda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e073      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bca:	4b3d      	ldr	r3, [pc, #244]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e06b      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bda:	4b39      	ldr	r3, [pc, #228]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f023 0203 	bic.w	r2, r3, #3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	4936      	ldr	r1, [pc, #216]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bec:	f7ff f896 	bl	8000d1c <HAL_GetTick>
 8001bf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf2:	e00a      	b.n	8001c0a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf4:	f7ff f892 	bl	8000d1c <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e053      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0a:	4b2d      	ldr	r3, [pc, #180]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 020c 	and.w	r2, r3, #12
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d1eb      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c1c:	4b27      	ldr	r3, [pc, #156]	; (8001cbc <HAL_RCC_ClockConfig+0x1c4>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 030f 	and.w	r3, r3, #15
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d210      	bcs.n	8001c4c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2a:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <HAL_RCC_ClockConfig+0x1c4>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f023 020f 	bic.w	r2, r3, #15
 8001c32:	4922      	ldr	r1, [pc, #136]	; (8001cbc <HAL_RCC_ClockConfig+0x1c4>)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3a:	4b20      	ldr	r3, [pc, #128]	; (8001cbc <HAL_RCC_ClockConfig+0x1c4>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d001      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e032      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d008      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c58:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	4916      	ldr	r1, [pc, #88]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d009      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c76:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	490e      	ldr	r1, [pc, #56]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c8a:	f000 f821 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	091b      	lsrs	r3, r3, #4
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	490a      	ldr	r1, [pc, #40]	; (8001cc4 <HAL_RCC_ClockConfig+0x1cc>)
 8001c9c:	5ccb      	ldrb	r3, [r1, r3]
 8001c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca2:	4a09      	ldr	r2, [pc, #36]	; (8001cc8 <HAL_RCC_ClockConfig+0x1d0>)
 8001ca4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ca6:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <HAL_RCC_ClockConfig+0x1d4>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe ff62 	bl	8000b74 <HAL_InitTick>

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40023c00 	.word	0x40023c00
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	08006110 	.word	0x08006110
 8001cc8:	20000000 	.word	0x20000000
 8001ccc:	20000004 	.word	0x20000004

08001cd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cd4:	b094      	sub	sp, #80	; 0x50
 8001cd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	647b      	str	r3, [r7, #68]	; 0x44
 8001cdc:	2300      	movs	r3, #0
 8001cde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ce8:	4b79      	ldr	r3, [pc, #484]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 030c 	and.w	r3, r3, #12
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d00d      	beq.n	8001d10 <HAL_RCC_GetSysClockFreq+0x40>
 8001cf4:	2b08      	cmp	r3, #8
 8001cf6:	f200 80e1 	bhi.w	8001ebc <HAL_RCC_GetSysClockFreq+0x1ec>
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d002      	beq.n	8001d04 <HAL_RCC_GetSysClockFreq+0x34>
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	d003      	beq.n	8001d0a <HAL_RCC_GetSysClockFreq+0x3a>
 8001d02:	e0db      	b.n	8001ebc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d04:	4b73      	ldr	r3, [pc, #460]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d06:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d08:	e0db      	b.n	8001ec2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d0a:	4b73      	ldr	r3, [pc, #460]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001d0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d0e:	e0d8      	b.n	8001ec2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d10:	4b6f      	ldr	r3, [pc, #444]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d18:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001d1a:	4b6d      	ldr	r3, [pc, #436]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d063      	beq.n	8001dee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d26:	4b6a      	ldr	r3, [pc, #424]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	099b      	lsrs	r3, r3, #6
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d30:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d38:	633b      	str	r3, [r7, #48]	; 0x30
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	637b      	str	r3, [r7, #52]	; 0x34
 8001d3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001d42:	4622      	mov	r2, r4
 8001d44:	462b      	mov	r3, r5
 8001d46:	f04f 0000 	mov.w	r0, #0
 8001d4a:	f04f 0100 	mov.w	r1, #0
 8001d4e:	0159      	lsls	r1, r3, #5
 8001d50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d54:	0150      	lsls	r0, r2, #5
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4621      	mov	r1, r4
 8001d5c:	1a51      	subs	r1, r2, r1
 8001d5e:	6139      	str	r1, [r7, #16]
 8001d60:	4629      	mov	r1, r5
 8001d62:	eb63 0301 	sbc.w	r3, r3, r1
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	f04f 0200 	mov.w	r2, #0
 8001d6c:	f04f 0300 	mov.w	r3, #0
 8001d70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d74:	4659      	mov	r1, fp
 8001d76:	018b      	lsls	r3, r1, #6
 8001d78:	4651      	mov	r1, sl
 8001d7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d7e:	4651      	mov	r1, sl
 8001d80:	018a      	lsls	r2, r1, #6
 8001d82:	4651      	mov	r1, sl
 8001d84:	ebb2 0801 	subs.w	r8, r2, r1
 8001d88:	4659      	mov	r1, fp
 8001d8a:	eb63 0901 	sbc.w	r9, r3, r1
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	f04f 0300 	mov.w	r3, #0
 8001d96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001da2:	4690      	mov	r8, r2
 8001da4:	4699      	mov	r9, r3
 8001da6:	4623      	mov	r3, r4
 8001da8:	eb18 0303 	adds.w	r3, r8, r3
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	462b      	mov	r3, r5
 8001db0:	eb49 0303 	adc.w	r3, r9, r3
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	f04f 0200 	mov.w	r2, #0
 8001dba:	f04f 0300 	mov.w	r3, #0
 8001dbe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001dc2:	4629      	mov	r1, r5
 8001dc4:	024b      	lsls	r3, r1, #9
 8001dc6:	4621      	mov	r1, r4
 8001dc8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001dcc:	4621      	mov	r1, r4
 8001dce:	024a      	lsls	r2, r1, #9
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ddc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001de0:	f7fe fa16 	bl	8000210 <__aeabi_uldivmod>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4613      	mov	r3, r2
 8001dea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001dec:	e058      	b.n	8001ea0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dee:	4b38      	ldr	r3, [pc, #224]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	099b      	lsrs	r3, r3, #6
 8001df4:	2200      	movs	r2, #0
 8001df6:	4618      	mov	r0, r3
 8001df8:	4611      	mov	r1, r2
 8001dfa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001dfe:	623b      	str	r3, [r7, #32]
 8001e00:	2300      	movs	r3, #0
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
 8001e04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e08:	4642      	mov	r2, r8
 8001e0a:	464b      	mov	r3, r9
 8001e0c:	f04f 0000 	mov.w	r0, #0
 8001e10:	f04f 0100 	mov.w	r1, #0
 8001e14:	0159      	lsls	r1, r3, #5
 8001e16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e1a:	0150      	lsls	r0, r2, #5
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	4641      	mov	r1, r8
 8001e22:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e26:	4649      	mov	r1, r9
 8001e28:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	f04f 0300 	mov.w	r3, #0
 8001e34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e40:	ebb2 040a 	subs.w	r4, r2, sl
 8001e44:	eb63 050b 	sbc.w	r5, r3, fp
 8001e48:	f04f 0200 	mov.w	r2, #0
 8001e4c:	f04f 0300 	mov.w	r3, #0
 8001e50:	00eb      	lsls	r3, r5, #3
 8001e52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e56:	00e2      	lsls	r2, r4, #3
 8001e58:	4614      	mov	r4, r2
 8001e5a:	461d      	mov	r5, r3
 8001e5c:	4643      	mov	r3, r8
 8001e5e:	18e3      	adds	r3, r4, r3
 8001e60:	603b      	str	r3, [r7, #0]
 8001e62:	464b      	mov	r3, r9
 8001e64:	eb45 0303 	adc.w	r3, r5, r3
 8001e68:	607b      	str	r3, [r7, #4]
 8001e6a:	f04f 0200 	mov.w	r2, #0
 8001e6e:	f04f 0300 	mov.w	r3, #0
 8001e72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e76:	4629      	mov	r1, r5
 8001e78:	028b      	lsls	r3, r1, #10
 8001e7a:	4621      	mov	r1, r4
 8001e7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e80:	4621      	mov	r1, r4
 8001e82:	028a      	lsls	r2, r1, #10
 8001e84:	4610      	mov	r0, r2
 8001e86:	4619      	mov	r1, r3
 8001e88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	61bb      	str	r3, [r7, #24]
 8001e8e:	61fa      	str	r2, [r7, #28]
 8001e90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e94:	f7fe f9bc 	bl	8000210 <__aeabi_uldivmod>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	0c1b      	lsrs	r3, r3, #16
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	3301      	adds	r3, #1
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001eb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001eb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001eba:	e002      	b.n	8001ec2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ebc:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ebe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ec0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ec2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3750      	adds	r7, #80	; 0x50
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ece:	bf00      	nop
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	00f42400 	.word	0x00f42400
 8001ed8:	007a1200 	.word	0x007a1200

08001edc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ee0:	4b03      	ldr	r3, [pc, #12]	; (8001ef0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	20000000 	.word	0x20000000

08001ef4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ef8:	f7ff fff0 	bl	8001edc <HAL_RCC_GetHCLKFreq>
 8001efc:	4602      	mov	r2, r0
 8001efe:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	0a9b      	lsrs	r3, r3, #10
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	4903      	ldr	r1, [pc, #12]	; (8001f18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f0a:	5ccb      	ldrb	r3, [r1, r3]
 8001f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40023800 	.word	0x40023800
 8001f18:	08006120 	.word	0x08006120

08001f1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f20:	f7ff ffdc 	bl	8001edc <HAL_RCC_GetHCLKFreq>
 8001f24:	4602      	mov	r2, r0
 8001f26:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	0b5b      	lsrs	r3, r3, #13
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	4903      	ldr	r1, [pc, #12]	; (8001f40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f32:	5ccb      	ldrb	r3, [r1, r3]
 8001f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	08006120 	.word	0x08006120

08001f44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	220f      	movs	r2, #15
 8001f52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f54:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <HAL_RCC_GetClockConfig+0x5c>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f003 0203 	and.w	r2, r3, #3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f60:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <HAL_RCC_GetClockConfig+0x5c>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <HAL_RCC_GetClockConfig+0x5c>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001f78:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <HAL_RCC_GetClockConfig+0x5c>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	08db      	lsrs	r3, r3, #3
 8001f7e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f86:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <HAL_RCC_GetClockConfig+0x60>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 020f 	and.w	r2, r3, #15
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	601a      	str	r2, [r3, #0]
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40023c00 	.word	0x40023c00

08001fa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d012      	beq.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001fd0:	4b69      	ldr	r3, [pc, #420]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	4a68      	ldr	r2, [pc, #416]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fd6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001fda:	6093      	str	r3, [r2, #8]
 8001fdc:	4b66      	ldr	r3, [pc, #408]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe4:	4964      	ldr	r1, [pc, #400]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d017      	beq.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002002:	4b5d      	ldr	r3, [pc, #372]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002004:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002008:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002010:	4959      	ldr	r1, [pc, #356]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002012:	4313      	orrs	r3, r2
 8002014:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800201c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002020:	d101      	bne.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002022:	2301      	movs	r3, #1
 8002024:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800202e:	2301      	movs	r3, #1
 8002030:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d017      	beq.n	800206e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800203e:	4b4e      	ldr	r3, [pc, #312]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002040:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002044:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204c:	494a      	ldr	r1, [pc, #296]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800204e:	4313      	orrs	r3, r2
 8002050:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002058:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800205c:	d101      	bne.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800205e:	2301      	movs	r3, #1
 8002060:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800206a:	2301      	movs	r3, #1
 800206c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800207a:	2301      	movs	r3, #1
 800207c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0320 	and.w	r3, r3, #32
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 808b 	beq.w	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800208c:	4b3a      	ldr	r3, [pc, #232]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800208e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002090:	4a39      	ldr	r2, [pc, #228]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002096:	6413      	str	r3, [r2, #64]	; 0x40
 8002098:	4b37      	ldr	r3, [pc, #220]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80020a4:	4b35      	ldr	r3, [pc, #212]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a34      	ldr	r2, [pc, #208]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020b0:	f7fe fe34 	bl	8000d1c <HAL_GetTick>
 80020b4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b8:	f7fe fe30 	bl	8000d1c <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b64      	cmp	r3, #100	; 0x64
 80020c4:	d901      	bls.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e357      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80020ca:	4b2c      	ldr	r3, [pc, #176]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0f0      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020d6:	4b28      	ldr	r3, [pc, #160]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020de:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d035      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d02e      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020f4:	4b20      	ldr	r3, [pc, #128]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020fc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020fe:	4b1e      	ldr	r3, [pc, #120]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002102:	4a1d      	ldr	r2, [pc, #116]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002108:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800210a:	4b1b      	ldr	r3, [pc, #108]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800210c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210e:	4a1a      	ldr	r2, [pc, #104]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002110:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002114:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002116:	4a18      	ldr	r2, [pc, #96]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800211c:	4b16      	ldr	r3, [pc, #88]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800211e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	2b01      	cmp	r3, #1
 8002126:	d114      	bne.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002128:	f7fe fdf8 	bl	8000d1c <HAL_GetTick>
 800212c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212e:	e00a      	b.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002130:	f7fe fdf4 	bl	8000d1c <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	f241 3288 	movw	r2, #5000	; 0x1388
 800213e:	4293      	cmp	r3, r2
 8002140:	d901      	bls.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e319      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002146:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0ee      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800215a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800215e:	d111      	bne.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002160:	4b05      	ldr	r3, [pc, #20]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800216c:	4b04      	ldr	r3, [pc, #16]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800216e:	400b      	ands	r3, r1
 8002170:	4901      	ldr	r1, [pc, #4]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002172:	4313      	orrs	r3, r2
 8002174:	608b      	str	r3, [r1, #8]
 8002176:	e00b      	b.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002178:	40023800 	.word	0x40023800
 800217c:	40007000 	.word	0x40007000
 8002180:	0ffffcff 	.word	0x0ffffcff
 8002184:	4baa      	ldr	r3, [pc, #680]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	4aa9      	ldr	r2, [pc, #676]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800218a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800218e:	6093      	str	r3, [r2, #8]
 8002190:	4ba7      	ldr	r3, [pc, #668]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002192:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800219c:	49a4      	ldr	r1, [pc, #656]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0310 	and.w	r3, r3, #16
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d010      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80021ae:	4ba0      	ldr	r3, [pc, #640]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021b4:	4a9e      	ldr	r2, [pc, #632]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80021be:	4b9c      	ldr	r3, [pc, #624]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c8:	4999      	ldr	r1, [pc, #612]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00a      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021dc:	4b94      	ldr	r3, [pc, #592]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021ea:	4991      	ldr	r1, [pc, #580]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00a      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021fe:	4b8c      	ldr	r3, [pc, #560]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002204:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800220c:	4988      	ldr	r1, [pc, #544]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800220e:	4313      	orrs	r3, r2
 8002210:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00a      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002220:	4b83      	ldr	r3, [pc, #524]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002226:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800222e:	4980      	ldr	r1, [pc, #512]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002230:	4313      	orrs	r3, r2
 8002232:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00a      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002242:	4b7b      	ldr	r3, [pc, #492]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002248:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002250:	4977      	ldr	r1, [pc, #476]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002252:	4313      	orrs	r3, r2
 8002254:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00a      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002264:	4b72      	ldr	r3, [pc, #456]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800226a:	f023 0203 	bic.w	r2, r3, #3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	496f      	ldr	r1, [pc, #444]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002274:	4313      	orrs	r3, r2
 8002276:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00a      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002286:	4b6a      	ldr	r3, [pc, #424]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228c:	f023 020c 	bic.w	r2, r3, #12
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002294:	4966      	ldr	r1, [pc, #408]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002296:	4313      	orrs	r3, r2
 8002298:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00a      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022a8:	4b61      	ldr	r3, [pc, #388]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b6:	495e      	ldr	r1, [pc, #376]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00a      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022ca:	4b59      	ldr	r3, [pc, #356]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022d8:	4955      	ldr	r1, [pc, #340]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00a      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022ec:	4b50      	ldr	r3, [pc, #320]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fa:	494d      	ldr	r1, [pc, #308]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00a      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800230e:	4b48      	ldr	r3, [pc, #288]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002314:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231c:	4944      	ldr	r1, [pc, #272]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800231e:	4313      	orrs	r3, r2
 8002320:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00a      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002330:	4b3f      	ldr	r3, [pc, #252]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002336:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233e:	493c      	ldr	r1, [pc, #240]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002340:	4313      	orrs	r3, r2
 8002342:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00a      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002352:	4b37      	ldr	r3, [pc, #220]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002358:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002360:	4933      	ldr	r1, [pc, #204]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002362:	4313      	orrs	r3, r2
 8002364:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00a      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002374:	4b2e      	ldr	r3, [pc, #184]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002382:	492b      	ldr	r1, [pc, #172]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002384:	4313      	orrs	r3, r2
 8002386:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d011      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002396:	4b26      	ldr	r3, [pc, #152]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023a4:	4922      	ldr	r1, [pc, #136]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023b4:	d101      	bne.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80023b6:	2301      	movs	r3, #1
 80023b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80023c6:	2301      	movs	r3, #1
 80023c8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00a      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023d6:	4b16      	ldr	r3, [pc, #88]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023dc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023e4:	4912      	ldr	r1, [pc, #72]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00b      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023f8:	4b0d      	ldr	r3, [pc, #52]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023fe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002408:	4909      	ldr	r1, [pc, #36]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800240a:	4313      	orrs	r3, r2
 800240c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d006      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 80d9 	beq.w	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002424:	4b02      	ldr	r3, [pc, #8]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a01      	ldr	r2, [pc, #4]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800242a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800242e:	e001      	b.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002430:	40023800 	.word	0x40023800
 8002434:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002436:	f7fe fc71 	bl	8000d1c <HAL_GetTick>
 800243a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800243c:	e008      	b.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800243e:	f7fe fc6d 	bl	8000d1c <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b64      	cmp	r3, #100	; 0x64
 800244a:	d901      	bls.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e194      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002450:	4b6c      	ldr	r3, [pc, #432]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1f0      	bne.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b00      	cmp	r3, #0
 8002466:	d021      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800246c:	2b00      	cmp	r3, #0
 800246e:	d11d      	bne.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002470:	4b64      	ldr	r3, [pc, #400]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002472:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002476:	0c1b      	lsrs	r3, r3, #16
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800247e:	4b61      	ldr	r3, [pc, #388]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002480:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002484:	0e1b      	lsrs	r3, r3, #24
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	019a      	lsls	r2, r3, #6
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	041b      	lsls	r3, r3, #16
 8002496:	431a      	orrs	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	061b      	lsls	r3, r3, #24
 800249c:	431a      	orrs	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	071b      	lsls	r3, r3, #28
 80024a4:	4957      	ldr	r1, [pc, #348]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d004      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024c0:	d00a      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d02e      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024d6:	d129      	bne.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80024d8:	4b4a      	ldr	r3, [pc, #296]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024de:	0c1b      	lsrs	r3, r3, #16
 80024e0:	f003 0303 	and.w	r3, r3, #3
 80024e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80024e6:	4b47      	ldr	r3, [pc, #284]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024ec:	0f1b      	lsrs	r3, r3, #28
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	019a      	lsls	r2, r3, #6
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	041b      	lsls	r3, r3, #16
 80024fe:	431a      	orrs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	061b      	lsls	r3, r3, #24
 8002506:	431a      	orrs	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	071b      	lsls	r3, r3, #28
 800250c:	493d      	ldr	r1, [pc, #244]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800250e:	4313      	orrs	r3, r2
 8002510:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002514:	4b3b      	ldr	r3, [pc, #236]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002516:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800251a:	f023 021f 	bic.w	r2, r3, #31
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002522:	3b01      	subs	r3, #1
 8002524:	4937      	ldr	r1, [pc, #220]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002526:	4313      	orrs	r3, r2
 8002528:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d01d      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002538:	4b32      	ldr	r3, [pc, #200]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800253a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800253e:	0e1b      	lsrs	r3, r3, #24
 8002540:	f003 030f 	and.w	r3, r3, #15
 8002544:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002546:	4b2f      	ldr	r3, [pc, #188]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800254c:	0f1b      	lsrs	r3, r3, #28
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	019a      	lsls	r2, r3, #6
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	041b      	lsls	r3, r3, #16
 8002560:	431a      	orrs	r2, r3
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	061b      	lsls	r3, r3, #24
 8002566:	431a      	orrs	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	071b      	lsls	r3, r3, #28
 800256c:	4925      	ldr	r1, [pc, #148]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800256e:	4313      	orrs	r3, r2
 8002570:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d011      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	019a      	lsls	r2, r3, #6
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	041b      	lsls	r3, r3, #16
 800258c:	431a      	orrs	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	061b      	lsls	r3, r3, #24
 8002594:	431a      	orrs	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	071b      	lsls	r3, r3, #28
 800259c:	4919      	ldr	r1, [pc, #100]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80025a4:	4b17      	ldr	r3, [pc, #92]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a16      	ldr	r2, [pc, #88]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025b0:	f7fe fbb4 	bl	8000d1c <HAL_GetTick>
 80025b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80025b8:	f7fe fbb0 	bl	8000d1c <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b64      	cmp	r3, #100	; 0x64
 80025c4:	d901      	bls.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e0d7      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80025ca:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0f0      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	f040 80cd 	bne.w	8002778 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80025de:	4b09      	ldr	r3, [pc, #36]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a08      	ldr	r2, [pc, #32]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025ea:	f7fe fb97 	bl	8000d1c <HAL_GetTick>
 80025ee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80025f0:	e00a      	b.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80025f2:	f7fe fb93 	bl	8000d1c <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b64      	cmp	r3, #100	; 0x64
 80025fe:	d903      	bls.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e0ba      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002604:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002608:	4b5e      	ldr	r3, [pc, #376]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002610:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002614:	d0ed      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002626:	2b00      	cmp	r3, #0
 8002628:	d009      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002632:	2b00      	cmp	r3, #0
 8002634:	d02e      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	2b00      	cmp	r3, #0
 800263c:	d12a      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800263e:	4b51      	ldr	r3, [pc, #324]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002644:	0c1b      	lsrs	r3, r3, #16
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800264c:	4b4d      	ldr	r3, [pc, #308]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800264e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002652:	0f1b      	lsrs	r3, r3, #28
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	019a      	lsls	r2, r3, #6
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	041b      	lsls	r3, r3, #16
 8002664:	431a      	orrs	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	061b      	lsls	r3, r3, #24
 800266c:	431a      	orrs	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	071b      	lsls	r3, r3, #28
 8002672:	4944      	ldr	r1, [pc, #272]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002674:	4313      	orrs	r3, r2
 8002676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800267a:	4b42      	ldr	r3, [pc, #264]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800267c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002680:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002688:	3b01      	subs	r3, #1
 800268a:	021b      	lsls	r3, r3, #8
 800268c:	493d      	ldr	r1, [pc, #244]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800268e:	4313      	orrs	r3, r2
 8002690:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d022      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026a8:	d11d      	bne.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80026aa:	4b36      	ldr	r3, [pc, #216]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b0:	0e1b      	lsrs	r3, r3, #24
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80026b8:	4b32      	ldr	r3, [pc, #200]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026be:	0f1b      	lsrs	r3, r3, #28
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	019a      	lsls	r2, r3, #6
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	041b      	lsls	r3, r3, #16
 80026d2:	431a      	orrs	r2, r3
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	061b      	lsls	r3, r3, #24
 80026d8:	431a      	orrs	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	071b      	lsls	r3, r3, #28
 80026de:	4929      	ldr	r1, [pc, #164]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d028      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80026f2:	4b24      	ldr	r3, [pc, #144]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f8:	0e1b      	lsrs	r3, r3, #24
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002700:	4b20      	ldr	r3, [pc, #128]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002706:	0c1b      	lsrs	r3, r3, #16
 8002708:	f003 0303 	and.w	r3, r3, #3
 800270c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	019a      	lsls	r2, r3, #6
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	041b      	lsls	r3, r3, #16
 8002718:	431a      	orrs	r2, r3
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	061b      	lsls	r3, r3, #24
 800271e:	431a      	orrs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	071b      	lsls	r3, r3, #28
 8002726:	4917      	ldr	r1, [pc, #92]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002728:	4313      	orrs	r3, r2
 800272a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800272e:	4b15      	ldr	r3, [pc, #84]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002734:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273c:	4911      	ldr	r1, [pc, #68]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800273e:	4313      	orrs	r3, r2
 8002740:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002744:	4b0f      	ldr	r3, [pc, #60]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a0e      	ldr	r2, [pc, #56]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800274a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800274e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002750:	f7fe fae4 	bl	8000d1c <HAL_GetTick>
 8002754:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002756:	e008      	b.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002758:	f7fe fae0 	bl	8000d1c <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b64      	cmp	r3, #100	; 0x64
 8002764:	d901      	bls.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e007      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800276a:	4b06      	ldr	r3, [pc, #24]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002776:	d1ef      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3720      	adds	r7, #32
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40023800 	.word	0x40023800

08002788 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e049      	b.n	800282e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d106      	bne.n	80027b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f841 	bl	8002836 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2202      	movs	r2, #2
 80027b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3304      	adds	r3, #4
 80027c4:	4619      	mov	r1, r3
 80027c6:	4610      	mov	r0, r2
 80027c8:	f000 fa00 	bl	8002bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
	...

0800284c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b01      	cmp	r3, #1
 800285e:	d001      	beq.n	8002864 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e054      	b.n	800290e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2202      	movs	r2, #2
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68da      	ldr	r2, [r3, #12]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f042 0201 	orr.w	r2, r2, #1
 800287a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a26      	ldr	r2, [pc, #152]	; (800291c <HAL_TIM_Base_Start_IT+0xd0>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d022      	beq.n	80028cc <HAL_TIM_Base_Start_IT+0x80>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800288e:	d01d      	beq.n	80028cc <HAL_TIM_Base_Start_IT+0x80>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a22      	ldr	r2, [pc, #136]	; (8002920 <HAL_TIM_Base_Start_IT+0xd4>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d018      	beq.n	80028cc <HAL_TIM_Base_Start_IT+0x80>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a21      	ldr	r2, [pc, #132]	; (8002924 <HAL_TIM_Base_Start_IT+0xd8>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d013      	beq.n	80028cc <HAL_TIM_Base_Start_IT+0x80>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a1f      	ldr	r2, [pc, #124]	; (8002928 <HAL_TIM_Base_Start_IT+0xdc>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d00e      	beq.n	80028cc <HAL_TIM_Base_Start_IT+0x80>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a1e      	ldr	r2, [pc, #120]	; (800292c <HAL_TIM_Base_Start_IT+0xe0>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d009      	beq.n	80028cc <HAL_TIM_Base_Start_IT+0x80>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a1c      	ldr	r2, [pc, #112]	; (8002930 <HAL_TIM_Base_Start_IT+0xe4>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d004      	beq.n	80028cc <HAL_TIM_Base_Start_IT+0x80>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a1b      	ldr	r2, [pc, #108]	; (8002934 <HAL_TIM_Base_Start_IT+0xe8>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d115      	bne.n	80028f8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	4b19      	ldr	r3, [pc, #100]	; (8002938 <HAL_TIM_Base_Start_IT+0xec>)
 80028d4:	4013      	ands	r3, r2
 80028d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2b06      	cmp	r3, #6
 80028dc:	d015      	beq.n	800290a <HAL_TIM_Base_Start_IT+0xbe>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028e4:	d011      	beq.n	800290a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f042 0201 	orr.w	r2, r2, #1
 80028f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028f6:	e008      	b.n	800290a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 0201 	orr.w	r2, r2, #1
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	e000      	b.n	800290c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800290a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3714      	adds	r7, #20
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	40010000 	.word	0x40010000
 8002920:	40000400 	.word	0x40000400
 8002924:	40000800 	.word	0x40000800
 8002928:	40000c00 	.word	0x40000c00
 800292c:	40010400 	.word	0x40010400
 8002930:	40014000 	.word	0x40014000
 8002934:	40001800 	.word	0x40001800
 8002938:	00010007 	.word	0x00010007

0800293c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b02      	cmp	r3, #2
 8002950:	d122      	bne.n	8002998 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b02      	cmp	r3, #2
 800295e:	d11b      	bne.n	8002998 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f06f 0202 	mvn.w	r2, #2
 8002968:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f905 	bl	8002b8e <HAL_TIM_IC_CaptureCallback>
 8002984:	e005      	b.n	8002992 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 f8f7 	bl	8002b7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 f908 	bl	8002ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	f003 0304 	and.w	r3, r3, #4
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	d122      	bne.n	80029ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	2b04      	cmp	r3, #4
 80029b2:	d11b      	bne.n	80029ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f06f 0204 	mvn.w	r2, #4
 80029bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2202      	movs	r2, #2
 80029c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f8db 	bl	8002b8e <HAL_TIM_IC_CaptureCallback>
 80029d8:	e005      	b.n	80029e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 f8cd 	bl	8002b7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 f8de 	bl	8002ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b08      	cmp	r3, #8
 80029f8:	d122      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f003 0308 	and.w	r3, r3, #8
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	d11b      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f06f 0208 	mvn.w	r2, #8
 8002a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2204      	movs	r2, #4
 8002a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	f003 0303 	and.w	r3, r3, #3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 f8b1 	bl	8002b8e <HAL_TIM_IC_CaptureCallback>
 8002a2c:	e005      	b.n	8002a3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f8a3 	bl	8002b7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 f8b4 	bl	8002ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	f003 0310 	and.w	r3, r3, #16
 8002a4a:	2b10      	cmp	r3, #16
 8002a4c:	d122      	bne.n	8002a94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	f003 0310 	and.w	r3, r3, #16
 8002a58:	2b10      	cmp	r3, #16
 8002a5a:	d11b      	bne.n	8002a94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f06f 0210 	mvn.w	r2, #16
 8002a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2208      	movs	r2, #8
 8002a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f887 	bl	8002b8e <HAL_TIM_IC_CaptureCallback>
 8002a80:	e005      	b.n	8002a8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f879 	bl	8002b7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 f88a 	bl	8002ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d10e      	bne.n	8002ac0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d107      	bne.n	8002ac0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f06f 0201 	mvn.w	r2, #1
 8002ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7fd ff38 	bl	8000930 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aca:	2b80      	cmp	r3, #128	; 0x80
 8002acc:	d10e      	bne.n	8002aec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad8:	2b80      	cmp	r3, #128	; 0x80
 8002ada:	d107      	bne.n	8002aec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f91a 	bl	8002d20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002afa:	d10e      	bne.n	8002b1a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b06:	2b80      	cmp	r3, #128	; 0x80
 8002b08:	d107      	bne.n	8002b1a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f90d 	bl	8002d34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b24:	2b40      	cmp	r3, #64	; 0x40
 8002b26:	d10e      	bne.n	8002b46 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b32:	2b40      	cmp	r3, #64	; 0x40
 8002b34:	d107      	bne.n	8002b46 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f838 	bl	8002bb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	f003 0320 	and.w	r3, r3, #32
 8002b50:	2b20      	cmp	r3, #32
 8002b52:	d10e      	bne.n	8002b72 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	f003 0320 	and.w	r3, r3, #32
 8002b5e:	2b20      	cmp	r3, #32
 8002b60:	d107      	bne.n	8002b72 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f06f 0220 	mvn.w	r2, #32
 8002b6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f8cd 	bl	8002d0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b72:	bf00      	nop
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b083      	sub	sp, #12
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
	...

08002bcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a40      	ldr	r2, [pc, #256]	; (8002ce0 <TIM_Base_SetConfig+0x114>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d013      	beq.n	8002c0c <TIM_Base_SetConfig+0x40>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bea:	d00f      	beq.n	8002c0c <TIM_Base_SetConfig+0x40>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a3d      	ldr	r2, [pc, #244]	; (8002ce4 <TIM_Base_SetConfig+0x118>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d00b      	beq.n	8002c0c <TIM_Base_SetConfig+0x40>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a3c      	ldr	r2, [pc, #240]	; (8002ce8 <TIM_Base_SetConfig+0x11c>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d007      	beq.n	8002c0c <TIM_Base_SetConfig+0x40>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a3b      	ldr	r2, [pc, #236]	; (8002cec <TIM_Base_SetConfig+0x120>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d003      	beq.n	8002c0c <TIM_Base_SetConfig+0x40>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a3a      	ldr	r2, [pc, #232]	; (8002cf0 <TIM_Base_SetConfig+0x124>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d108      	bne.n	8002c1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a2f      	ldr	r2, [pc, #188]	; (8002ce0 <TIM_Base_SetConfig+0x114>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d02b      	beq.n	8002c7e <TIM_Base_SetConfig+0xb2>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c2c:	d027      	beq.n	8002c7e <TIM_Base_SetConfig+0xb2>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a2c      	ldr	r2, [pc, #176]	; (8002ce4 <TIM_Base_SetConfig+0x118>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d023      	beq.n	8002c7e <TIM_Base_SetConfig+0xb2>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a2b      	ldr	r2, [pc, #172]	; (8002ce8 <TIM_Base_SetConfig+0x11c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d01f      	beq.n	8002c7e <TIM_Base_SetConfig+0xb2>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a2a      	ldr	r2, [pc, #168]	; (8002cec <TIM_Base_SetConfig+0x120>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d01b      	beq.n	8002c7e <TIM_Base_SetConfig+0xb2>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a29      	ldr	r2, [pc, #164]	; (8002cf0 <TIM_Base_SetConfig+0x124>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d017      	beq.n	8002c7e <TIM_Base_SetConfig+0xb2>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a28      	ldr	r2, [pc, #160]	; (8002cf4 <TIM_Base_SetConfig+0x128>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d013      	beq.n	8002c7e <TIM_Base_SetConfig+0xb2>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a27      	ldr	r2, [pc, #156]	; (8002cf8 <TIM_Base_SetConfig+0x12c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d00f      	beq.n	8002c7e <TIM_Base_SetConfig+0xb2>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a26      	ldr	r2, [pc, #152]	; (8002cfc <TIM_Base_SetConfig+0x130>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d00b      	beq.n	8002c7e <TIM_Base_SetConfig+0xb2>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a25      	ldr	r2, [pc, #148]	; (8002d00 <TIM_Base_SetConfig+0x134>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d007      	beq.n	8002c7e <TIM_Base_SetConfig+0xb2>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a24      	ldr	r2, [pc, #144]	; (8002d04 <TIM_Base_SetConfig+0x138>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d003      	beq.n	8002c7e <TIM_Base_SetConfig+0xb2>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a23      	ldr	r2, [pc, #140]	; (8002d08 <TIM_Base_SetConfig+0x13c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d108      	bne.n	8002c90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a0a      	ldr	r2, [pc, #40]	; (8002ce0 <TIM_Base_SetConfig+0x114>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d003      	beq.n	8002cc4 <TIM_Base_SetConfig+0xf8>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a0c      	ldr	r2, [pc, #48]	; (8002cf0 <TIM_Base_SetConfig+0x124>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d103      	bne.n	8002ccc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	691a      	ldr	r2, [r3, #16]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	615a      	str	r2, [r3, #20]
}
 8002cd2:	bf00      	nop
 8002cd4:	3714      	adds	r7, #20
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	40010000 	.word	0x40010000
 8002ce4:	40000400 	.word	0x40000400
 8002ce8:	40000800 	.word	0x40000800
 8002cec:	40000c00 	.word	0x40000c00
 8002cf0:	40010400 	.word	0x40010400
 8002cf4:	40014000 	.word	0x40014000
 8002cf8:	40014400 	.word	0x40014400
 8002cfc:	40014800 	.word	0x40014800
 8002d00:	40001800 	.word	0x40001800
 8002d04:	40001c00 	.word	0x40001c00
 8002d08:	40002000 	.word	0x40002000

08002d0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e040      	b.n	8002ddc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d106      	bne.n	8002d70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7fd fe28 	bl	80009c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2224      	movs	r2, #36	; 0x24
 8002d74:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 0201 	bic.w	r2, r2, #1
 8002d84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 f82c 	bl	8002de4 <UART_SetConfig>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d101      	bne.n	8002d96 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e022      	b.n	8002ddc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 fa84 	bl	80032ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002db2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689a      	ldr	r2, [r3, #8]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f042 0201 	orr.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 fb0b 	bl	80033f0 <UART_CheckIdleState>
 8002dda:	4603      	mov	r3, r0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b088      	sub	sp, #32
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002dec:	2300      	movs	r3, #0
 8002dee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	4ba6      	ldr	r3, [pc, #664]	; (80030a8 <UART_SetConfig+0x2c4>)
 8002e10:	4013      	ands	r3, r2
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	6812      	ldr	r2, [r2, #0]
 8002e16:	6979      	ldr	r1, [r7, #20]
 8002e18:	430b      	orrs	r3, r1
 8002e1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68da      	ldr	r2, [r3, #12]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a94      	ldr	r2, [pc, #592]	; (80030ac <UART_SetConfig+0x2c8>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d120      	bne.n	8002ea2 <UART_SetConfig+0xbe>
 8002e60:	4b93      	ldr	r3, [pc, #588]	; (80030b0 <UART_SetConfig+0x2cc>)
 8002e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	2b03      	cmp	r3, #3
 8002e6c:	d816      	bhi.n	8002e9c <UART_SetConfig+0xb8>
 8002e6e:	a201      	add	r2, pc, #4	; (adr r2, 8002e74 <UART_SetConfig+0x90>)
 8002e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e74:	08002e85 	.word	0x08002e85
 8002e78:	08002e91 	.word	0x08002e91
 8002e7c:	08002e8b 	.word	0x08002e8b
 8002e80:	08002e97 	.word	0x08002e97
 8002e84:	2301      	movs	r3, #1
 8002e86:	77fb      	strb	r3, [r7, #31]
 8002e88:	e150      	b.n	800312c <UART_SetConfig+0x348>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	77fb      	strb	r3, [r7, #31]
 8002e8e:	e14d      	b.n	800312c <UART_SetConfig+0x348>
 8002e90:	2304      	movs	r3, #4
 8002e92:	77fb      	strb	r3, [r7, #31]
 8002e94:	e14a      	b.n	800312c <UART_SetConfig+0x348>
 8002e96:	2308      	movs	r3, #8
 8002e98:	77fb      	strb	r3, [r7, #31]
 8002e9a:	e147      	b.n	800312c <UART_SetConfig+0x348>
 8002e9c:	2310      	movs	r3, #16
 8002e9e:	77fb      	strb	r3, [r7, #31]
 8002ea0:	e144      	b.n	800312c <UART_SetConfig+0x348>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a83      	ldr	r2, [pc, #524]	; (80030b4 <UART_SetConfig+0x2d0>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d132      	bne.n	8002f12 <UART_SetConfig+0x12e>
 8002eac:	4b80      	ldr	r3, [pc, #512]	; (80030b0 <UART_SetConfig+0x2cc>)
 8002eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb2:	f003 030c 	and.w	r3, r3, #12
 8002eb6:	2b0c      	cmp	r3, #12
 8002eb8:	d828      	bhi.n	8002f0c <UART_SetConfig+0x128>
 8002eba:	a201      	add	r2, pc, #4	; (adr r2, 8002ec0 <UART_SetConfig+0xdc>)
 8002ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec0:	08002ef5 	.word	0x08002ef5
 8002ec4:	08002f0d 	.word	0x08002f0d
 8002ec8:	08002f0d 	.word	0x08002f0d
 8002ecc:	08002f0d 	.word	0x08002f0d
 8002ed0:	08002f01 	.word	0x08002f01
 8002ed4:	08002f0d 	.word	0x08002f0d
 8002ed8:	08002f0d 	.word	0x08002f0d
 8002edc:	08002f0d 	.word	0x08002f0d
 8002ee0:	08002efb 	.word	0x08002efb
 8002ee4:	08002f0d 	.word	0x08002f0d
 8002ee8:	08002f0d 	.word	0x08002f0d
 8002eec:	08002f0d 	.word	0x08002f0d
 8002ef0:	08002f07 	.word	0x08002f07
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	77fb      	strb	r3, [r7, #31]
 8002ef8:	e118      	b.n	800312c <UART_SetConfig+0x348>
 8002efa:	2302      	movs	r3, #2
 8002efc:	77fb      	strb	r3, [r7, #31]
 8002efe:	e115      	b.n	800312c <UART_SetConfig+0x348>
 8002f00:	2304      	movs	r3, #4
 8002f02:	77fb      	strb	r3, [r7, #31]
 8002f04:	e112      	b.n	800312c <UART_SetConfig+0x348>
 8002f06:	2308      	movs	r3, #8
 8002f08:	77fb      	strb	r3, [r7, #31]
 8002f0a:	e10f      	b.n	800312c <UART_SetConfig+0x348>
 8002f0c:	2310      	movs	r3, #16
 8002f0e:	77fb      	strb	r3, [r7, #31]
 8002f10:	e10c      	b.n	800312c <UART_SetConfig+0x348>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a68      	ldr	r2, [pc, #416]	; (80030b8 <UART_SetConfig+0x2d4>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d120      	bne.n	8002f5e <UART_SetConfig+0x17a>
 8002f1c:	4b64      	ldr	r3, [pc, #400]	; (80030b0 <UART_SetConfig+0x2cc>)
 8002f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f22:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f26:	2b30      	cmp	r3, #48	; 0x30
 8002f28:	d013      	beq.n	8002f52 <UART_SetConfig+0x16e>
 8002f2a:	2b30      	cmp	r3, #48	; 0x30
 8002f2c:	d814      	bhi.n	8002f58 <UART_SetConfig+0x174>
 8002f2e:	2b20      	cmp	r3, #32
 8002f30:	d009      	beq.n	8002f46 <UART_SetConfig+0x162>
 8002f32:	2b20      	cmp	r3, #32
 8002f34:	d810      	bhi.n	8002f58 <UART_SetConfig+0x174>
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d002      	beq.n	8002f40 <UART_SetConfig+0x15c>
 8002f3a:	2b10      	cmp	r3, #16
 8002f3c:	d006      	beq.n	8002f4c <UART_SetConfig+0x168>
 8002f3e:	e00b      	b.n	8002f58 <UART_SetConfig+0x174>
 8002f40:	2300      	movs	r3, #0
 8002f42:	77fb      	strb	r3, [r7, #31]
 8002f44:	e0f2      	b.n	800312c <UART_SetConfig+0x348>
 8002f46:	2302      	movs	r3, #2
 8002f48:	77fb      	strb	r3, [r7, #31]
 8002f4a:	e0ef      	b.n	800312c <UART_SetConfig+0x348>
 8002f4c:	2304      	movs	r3, #4
 8002f4e:	77fb      	strb	r3, [r7, #31]
 8002f50:	e0ec      	b.n	800312c <UART_SetConfig+0x348>
 8002f52:	2308      	movs	r3, #8
 8002f54:	77fb      	strb	r3, [r7, #31]
 8002f56:	e0e9      	b.n	800312c <UART_SetConfig+0x348>
 8002f58:	2310      	movs	r3, #16
 8002f5a:	77fb      	strb	r3, [r7, #31]
 8002f5c:	e0e6      	b.n	800312c <UART_SetConfig+0x348>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a56      	ldr	r2, [pc, #344]	; (80030bc <UART_SetConfig+0x2d8>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d120      	bne.n	8002faa <UART_SetConfig+0x1c6>
 8002f68:	4b51      	ldr	r3, [pc, #324]	; (80030b0 <UART_SetConfig+0x2cc>)
 8002f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f72:	2bc0      	cmp	r3, #192	; 0xc0
 8002f74:	d013      	beq.n	8002f9e <UART_SetConfig+0x1ba>
 8002f76:	2bc0      	cmp	r3, #192	; 0xc0
 8002f78:	d814      	bhi.n	8002fa4 <UART_SetConfig+0x1c0>
 8002f7a:	2b80      	cmp	r3, #128	; 0x80
 8002f7c:	d009      	beq.n	8002f92 <UART_SetConfig+0x1ae>
 8002f7e:	2b80      	cmp	r3, #128	; 0x80
 8002f80:	d810      	bhi.n	8002fa4 <UART_SetConfig+0x1c0>
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d002      	beq.n	8002f8c <UART_SetConfig+0x1a8>
 8002f86:	2b40      	cmp	r3, #64	; 0x40
 8002f88:	d006      	beq.n	8002f98 <UART_SetConfig+0x1b4>
 8002f8a:	e00b      	b.n	8002fa4 <UART_SetConfig+0x1c0>
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	77fb      	strb	r3, [r7, #31]
 8002f90:	e0cc      	b.n	800312c <UART_SetConfig+0x348>
 8002f92:	2302      	movs	r3, #2
 8002f94:	77fb      	strb	r3, [r7, #31]
 8002f96:	e0c9      	b.n	800312c <UART_SetConfig+0x348>
 8002f98:	2304      	movs	r3, #4
 8002f9a:	77fb      	strb	r3, [r7, #31]
 8002f9c:	e0c6      	b.n	800312c <UART_SetConfig+0x348>
 8002f9e:	2308      	movs	r3, #8
 8002fa0:	77fb      	strb	r3, [r7, #31]
 8002fa2:	e0c3      	b.n	800312c <UART_SetConfig+0x348>
 8002fa4:	2310      	movs	r3, #16
 8002fa6:	77fb      	strb	r3, [r7, #31]
 8002fa8:	e0c0      	b.n	800312c <UART_SetConfig+0x348>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a44      	ldr	r2, [pc, #272]	; (80030c0 <UART_SetConfig+0x2dc>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d125      	bne.n	8003000 <UART_SetConfig+0x21c>
 8002fb4:	4b3e      	ldr	r3, [pc, #248]	; (80030b0 <UART_SetConfig+0x2cc>)
 8002fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fc2:	d017      	beq.n	8002ff4 <UART_SetConfig+0x210>
 8002fc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fc8:	d817      	bhi.n	8002ffa <UART_SetConfig+0x216>
 8002fca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fce:	d00b      	beq.n	8002fe8 <UART_SetConfig+0x204>
 8002fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fd4:	d811      	bhi.n	8002ffa <UART_SetConfig+0x216>
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <UART_SetConfig+0x1fe>
 8002fda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fde:	d006      	beq.n	8002fee <UART_SetConfig+0x20a>
 8002fe0:	e00b      	b.n	8002ffa <UART_SetConfig+0x216>
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	77fb      	strb	r3, [r7, #31]
 8002fe6:	e0a1      	b.n	800312c <UART_SetConfig+0x348>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	77fb      	strb	r3, [r7, #31]
 8002fec:	e09e      	b.n	800312c <UART_SetConfig+0x348>
 8002fee:	2304      	movs	r3, #4
 8002ff0:	77fb      	strb	r3, [r7, #31]
 8002ff2:	e09b      	b.n	800312c <UART_SetConfig+0x348>
 8002ff4:	2308      	movs	r3, #8
 8002ff6:	77fb      	strb	r3, [r7, #31]
 8002ff8:	e098      	b.n	800312c <UART_SetConfig+0x348>
 8002ffa:	2310      	movs	r3, #16
 8002ffc:	77fb      	strb	r3, [r7, #31]
 8002ffe:	e095      	b.n	800312c <UART_SetConfig+0x348>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a2f      	ldr	r2, [pc, #188]	; (80030c4 <UART_SetConfig+0x2e0>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d125      	bne.n	8003056 <UART_SetConfig+0x272>
 800300a:	4b29      	ldr	r3, [pc, #164]	; (80030b0 <UART_SetConfig+0x2cc>)
 800300c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003010:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003014:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003018:	d017      	beq.n	800304a <UART_SetConfig+0x266>
 800301a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800301e:	d817      	bhi.n	8003050 <UART_SetConfig+0x26c>
 8003020:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003024:	d00b      	beq.n	800303e <UART_SetConfig+0x25a>
 8003026:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800302a:	d811      	bhi.n	8003050 <UART_SetConfig+0x26c>
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <UART_SetConfig+0x254>
 8003030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003034:	d006      	beq.n	8003044 <UART_SetConfig+0x260>
 8003036:	e00b      	b.n	8003050 <UART_SetConfig+0x26c>
 8003038:	2301      	movs	r3, #1
 800303a:	77fb      	strb	r3, [r7, #31]
 800303c:	e076      	b.n	800312c <UART_SetConfig+0x348>
 800303e:	2302      	movs	r3, #2
 8003040:	77fb      	strb	r3, [r7, #31]
 8003042:	e073      	b.n	800312c <UART_SetConfig+0x348>
 8003044:	2304      	movs	r3, #4
 8003046:	77fb      	strb	r3, [r7, #31]
 8003048:	e070      	b.n	800312c <UART_SetConfig+0x348>
 800304a:	2308      	movs	r3, #8
 800304c:	77fb      	strb	r3, [r7, #31]
 800304e:	e06d      	b.n	800312c <UART_SetConfig+0x348>
 8003050:	2310      	movs	r3, #16
 8003052:	77fb      	strb	r3, [r7, #31]
 8003054:	e06a      	b.n	800312c <UART_SetConfig+0x348>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a1b      	ldr	r2, [pc, #108]	; (80030c8 <UART_SetConfig+0x2e4>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d138      	bne.n	80030d2 <UART_SetConfig+0x2ee>
 8003060:	4b13      	ldr	r3, [pc, #76]	; (80030b0 <UART_SetConfig+0x2cc>)
 8003062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003066:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800306a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800306e:	d017      	beq.n	80030a0 <UART_SetConfig+0x2bc>
 8003070:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003074:	d82a      	bhi.n	80030cc <UART_SetConfig+0x2e8>
 8003076:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800307a:	d00b      	beq.n	8003094 <UART_SetConfig+0x2b0>
 800307c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003080:	d824      	bhi.n	80030cc <UART_SetConfig+0x2e8>
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <UART_SetConfig+0x2aa>
 8003086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800308a:	d006      	beq.n	800309a <UART_SetConfig+0x2b6>
 800308c:	e01e      	b.n	80030cc <UART_SetConfig+0x2e8>
 800308e:	2300      	movs	r3, #0
 8003090:	77fb      	strb	r3, [r7, #31]
 8003092:	e04b      	b.n	800312c <UART_SetConfig+0x348>
 8003094:	2302      	movs	r3, #2
 8003096:	77fb      	strb	r3, [r7, #31]
 8003098:	e048      	b.n	800312c <UART_SetConfig+0x348>
 800309a:	2304      	movs	r3, #4
 800309c:	77fb      	strb	r3, [r7, #31]
 800309e:	e045      	b.n	800312c <UART_SetConfig+0x348>
 80030a0:	2308      	movs	r3, #8
 80030a2:	77fb      	strb	r3, [r7, #31]
 80030a4:	e042      	b.n	800312c <UART_SetConfig+0x348>
 80030a6:	bf00      	nop
 80030a8:	efff69f3 	.word	0xefff69f3
 80030ac:	40011000 	.word	0x40011000
 80030b0:	40023800 	.word	0x40023800
 80030b4:	40004400 	.word	0x40004400
 80030b8:	40004800 	.word	0x40004800
 80030bc:	40004c00 	.word	0x40004c00
 80030c0:	40005000 	.word	0x40005000
 80030c4:	40011400 	.word	0x40011400
 80030c8:	40007800 	.word	0x40007800
 80030cc:	2310      	movs	r3, #16
 80030ce:	77fb      	strb	r3, [r7, #31]
 80030d0:	e02c      	b.n	800312c <UART_SetConfig+0x348>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a72      	ldr	r2, [pc, #456]	; (80032a0 <UART_SetConfig+0x4bc>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d125      	bne.n	8003128 <UART_SetConfig+0x344>
 80030dc:	4b71      	ldr	r3, [pc, #452]	; (80032a4 <UART_SetConfig+0x4c0>)
 80030de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80030e6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80030ea:	d017      	beq.n	800311c <UART_SetConfig+0x338>
 80030ec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80030f0:	d817      	bhi.n	8003122 <UART_SetConfig+0x33e>
 80030f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030f6:	d00b      	beq.n	8003110 <UART_SetConfig+0x32c>
 80030f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030fc:	d811      	bhi.n	8003122 <UART_SetConfig+0x33e>
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <UART_SetConfig+0x326>
 8003102:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003106:	d006      	beq.n	8003116 <UART_SetConfig+0x332>
 8003108:	e00b      	b.n	8003122 <UART_SetConfig+0x33e>
 800310a:	2300      	movs	r3, #0
 800310c:	77fb      	strb	r3, [r7, #31]
 800310e:	e00d      	b.n	800312c <UART_SetConfig+0x348>
 8003110:	2302      	movs	r3, #2
 8003112:	77fb      	strb	r3, [r7, #31]
 8003114:	e00a      	b.n	800312c <UART_SetConfig+0x348>
 8003116:	2304      	movs	r3, #4
 8003118:	77fb      	strb	r3, [r7, #31]
 800311a:	e007      	b.n	800312c <UART_SetConfig+0x348>
 800311c:	2308      	movs	r3, #8
 800311e:	77fb      	strb	r3, [r7, #31]
 8003120:	e004      	b.n	800312c <UART_SetConfig+0x348>
 8003122:	2310      	movs	r3, #16
 8003124:	77fb      	strb	r3, [r7, #31]
 8003126:	e001      	b.n	800312c <UART_SetConfig+0x348>
 8003128:	2310      	movs	r3, #16
 800312a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003134:	d15b      	bne.n	80031ee <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003136:	7ffb      	ldrb	r3, [r7, #31]
 8003138:	2b08      	cmp	r3, #8
 800313a:	d828      	bhi.n	800318e <UART_SetConfig+0x3aa>
 800313c:	a201      	add	r2, pc, #4	; (adr r2, 8003144 <UART_SetConfig+0x360>)
 800313e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003142:	bf00      	nop
 8003144:	08003169 	.word	0x08003169
 8003148:	08003171 	.word	0x08003171
 800314c:	08003179 	.word	0x08003179
 8003150:	0800318f 	.word	0x0800318f
 8003154:	0800317f 	.word	0x0800317f
 8003158:	0800318f 	.word	0x0800318f
 800315c:	0800318f 	.word	0x0800318f
 8003160:	0800318f 	.word	0x0800318f
 8003164:	08003187 	.word	0x08003187
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003168:	f7fe fec4 	bl	8001ef4 <HAL_RCC_GetPCLK1Freq>
 800316c:	61b8      	str	r0, [r7, #24]
        break;
 800316e:	e013      	b.n	8003198 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003170:	f7fe fed4 	bl	8001f1c <HAL_RCC_GetPCLK2Freq>
 8003174:	61b8      	str	r0, [r7, #24]
        break;
 8003176:	e00f      	b.n	8003198 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003178:	4b4b      	ldr	r3, [pc, #300]	; (80032a8 <UART_SetConfig+0x4c4>)
 800317a:	61bb      	str	r3, [r7, #24]
        break;
 800317c:	e00c      	b.n	8003198 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800317e:	f7fe fda7 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
 8003182:	61b8      	str	r0, [r7, #24]
        break;
 8003184:	e008      	b.n	8003198 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003186:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800318a:	61bb      	str	r3, [r7, #24]
        break;
 800318c:	e004      	b.n	8003198 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800318e:	2300      	movs	r3, #0
 8003190:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	77bb      	strb	r3, [r7, #30]
        break;
 8003196:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d074      	beq.n	8003288 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	005a      	lsls	r2, r3, #1
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	085b      	lsrs	r3, r3, #1
 80031a8:	441a      	add	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	2b0f      	cmp	r3, #15
 80031b8:	d916      	bls.n	80031e8 <UART_SetConfig+0x404>
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c0:	d212      	bcs.n	80031e8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	f023 030f 	bic.w	r3, r3, #15
 80031ca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	085b      	lsrs	r3, r3, #1
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	89fb      	ldrh	r3, [r7, #14]
 80031da:	4313      	orrs	r3, r2
 80031dc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	89fa      	ldrh	r2, [r7, #14]
 80031e4:	60da      	str	r2, [r3, #12]
 80031e6:	e04f      	b.n	8003288 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	77bb      	strb	r3, [r7, #30]
 80031ec:	e04c      	b.n	8003288 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031ee:	7ffb      	ldrb	r3, [r7, #31]
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d828      	bhi.n	8003246 <UART_SetConfig+0x462>
 80031f4:	a201      	add	r2, pc, #4	; (adr r2, 80031fc <UART_SetConfig+0x418>)
 80031f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031fa:	bf00      	nop
 80031fc:	08003221 	.word	0x08003221
 8003200:	08003229 	.word	0x08003229
 8003204:	08003231 	.word	0x08003231
 8003208:	08003247 	.word	0x08003247
 800320c:	08003237 	.word	0x08003237
 8003210:	08003247 	.word	0x08003247
 8003214:	08003247 	.word	0x08003247
 8003218:	08003247 	.word	0x08003247
 800321c:	0800323f 	.word	0x0800323f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003220:	f7fe fe68 	bl	8001ef4 <HAL_RCC_GetPCLK1Freq>
 8003224:	61b8      	str	r0, [r7, #24]
        break;
 8003226:	e013      	b.n	8003250 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003228:	f7fe fe78 	bl	8001f1c <HAL_RCC_GetPCLK2Freq>
 800322c:	61b8      	str	r0, [r7, #24]
        break;
 800322e:	e00f      	b.n	8003250 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003230:	4b1d      	ldr	r3, [pc, #116]	; (80032a8 <UART_SetConfig+0x4c4>)
 8003232:	61bb      	str	r3, [r7, #24]
        break;
 8003234:	e00c      	b.n	8003250 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003236:	f7fe fd4b 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
 800323a:	61b8      	str	r0, [r7, #24]
        break;
 800323c:	e008      	b.n	8003250 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800323e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003242:	61bb      	str	r3, [r7, #24]
        break;
 8003244:	e004      	b.n	8003250 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003246:	2300      	movs	r3, #0
 8003248:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	77bb      	strb	r3, [r7, #30]
        break;
 800324e:	bf00      	nop
    }

    if (pclk != 0U)
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d018      	beq.n	8003288 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	085a      	lsrs	r2, r3, #1
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	441a      	add	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	fbb2 f3f3 	udiv	r3, r2, r3
 8003268:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	2b0f      	cmp	r3, #15
 800326e:	d909      	bls.n	8003284 <UART_SetConfig+0x4a0>
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003276:	d205      	bcs.n	8003284 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	b29a      	uxth	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	60da      	str	r2, [r3, #12]
 8003282:	e001      	b.n	8003288 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003294:	7fbb      	ldrb	r3, [r7, #30]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3720      	adds	r7, #32
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40007c00 	.word	0x40007c00
 80032a4:	40023800 	.word	0x40023800
 80032a8:	00f42400 	.word	0x00f42400

080032ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00a      	beq.n	80032d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00a      	beq.n	800331a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00a      	beq.n	800333c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	f003 0310 	and.w	r3, r3, #16
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00a      	beq.n	800335e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003362:	f003 0320 	and.w	r3, r3, #32
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00a      	beq.n	8003380 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003388:	2b00      	cmp	r3, #0
 800338a:	d01a      	beq.n	80033c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033aa:	d10a      	bne.n	80033c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00a      	beq.n	80033e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	605a      	str	r2, [r3, #4]
  }
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af02      	add	r7, sp, #8
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003400:	f7fd fc8c 	bl	8000d1c <HAL_GetTick>
 8003404:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	2b08      	cmp	r3, #8
 8003412:	d10e      	bne.n	8003432 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003414:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f817 	bl	8003456 <UART_WaitOnFlagUntilTimeout>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e00d      	b.n	800344e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2220      	movs	r2, #32
 8003436:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2220      	movs	r2, #32
 800343c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b09c      	sub	sp, #112	; 0x70
 800345a:	af00      	add	r7, sp, #0
 800345c:	60f8      	str	r0, [r7, #12]
 800345e:	60b9      	str	r1, [r7, #8]
 8003460:	603b      	str	r3, [r7, #0]
 8003462:	4613      	mov	r3, r2
 8003464:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003466:	e0a5      	b.n	80035b4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003468:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800346a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800346e:	f000 80a1 	beq.w	80035b4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003472:	f7fd fc53 	bl	8000d1c <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800347e:	429a      	cmp	r2, r3
 8003480:	d302      	bcc.n	8003488 <UART_WaitOnFlagUntilTimeout+0x32>
 8003482:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003484:	2b00      	cmp	r3, #0
 8003486:	d13e      	bne.n	8003506 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003490:	e853 3f00 	ldrex	r3, [r3]
 8003494:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003498:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800349c:	667b      	str	r3, [r7, #100]	; 0x64
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	461a      	mov	r2, r3
 80034a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034a8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80034ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80034ae:	e841 2300 	strex	r3, r2, [r1]
 80034b2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80034b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1e6      	bne.n	8003488 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	3308      	adds	r3, #8
 80034c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034c4:	e853 3f00 	ldrex	r3, [r3]
 80034c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80034ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034cc:	f023 0301 	bic.w	r3, r3, #1
 80034d0:	663b      	str	r3, [r7, #96]	; 0x60
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	3308      	adds	r3, #8
 80034d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80034da:	64ba      	str	r2, [r7, #72]	; 0x48
 80034dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80034e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034e2:	e841 2300 	strex	r3, r2, [r1]
 80034e6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80034e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1e5      	bne.n	80034ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2220      	movs	r2, #32
 80034f2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2220      	movs	r2, #32
 80034f8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e067      	b.n	80035d6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b00      	cmp	r3, #0
 8003512:	d04f      	beq.n	80035b4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800351e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003522:	d147      	bne.n	80035b4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800352c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003536:	e853 3f00 	ldrex	r3, [r3]
 800353a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003542:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	461a      	mov	r2, r3
 800354a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800354c:	637b      	str	r3, [r7, #52]	; 0x34
 800354e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003550:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003552:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003554:	e841 2300 	strex	r3, r2, [r1]
 8003558:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800355a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1e6      	bne.n	800352e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	3308      	adds	r3, #8
 8003566:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	e853 3f00 	ldrex	r3, [r3]
 800356e:	613b      	str	r3, [r7, #16]
   return(result);
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	f023 0301 	bic.w	r3, r3, #1
 8003576:	66bb      	str	r3, [r7, #104]	; 0x68
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	3308      	adds	r3, #8
 800357e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003580:	623a      	str	r2, [r7, #32]
 8003582:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003584:	69f9      	ldr	r1, [r7, #28]
 8003586:	6a3a      	ldr	r2, [r7, #32]
 8003588:	e841 2300 	strex	r3, r2, [r1]
 800358c:	61bb      	str	r3, [r7, #24]
   return(result);
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1e5      	bne.n	8003560 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2220      	movs	r2, #32
 8003598:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2220      	movs	r2, #32
 800359e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2220      	movs	r2, #32
 80035a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e010      	b.n	80035d6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	69da      	ldr	r2, [r3, #28]
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	4013      	ands	r3, r2
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	bf0c      	ite	eq
 80035c4:	2301      	moveq	r3, #1
 80035c6:	2300      	movne	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	461a      	mov	r2, r3
 80035cc:	79fb      	ldrb	r3, [r7, #7]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	f43f af4a 	beq.w	8003468 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3770      	adds	r7, #112	; 0x70
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
	...

080035e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80035e0:	b084      	sub	sp, #16
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b084      	sub	sp, #16
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
 80035ea:	f107 001c 	add.w	r0, r7, #28
 80035ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80035f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d120      	bne.n	800363a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	4b20      	ldr	r3, [pc, #128]	; (800368c <USB_CoreInit+0xac>)
 800360a:	4013      	ands	r3, r2
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800361c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800361e:	2b01      	cmp	r3, #1
 8003620:	d105      	bne.n	800362e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 fa92 	bl	8003b58 <USB_CoreReset>
 8003634:	4603      	mov	r3, r0
 8003636:	73fb      	strb	r3, [r7, #15]
 8003638:	e010      	b.n	800365c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 fa86 	bl	8003b58 <USB_CoreReset>
 800364c:	4603      	mov	r3, r0
 800364e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003654:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800365c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365e:	2b01      	cmp	r3, #1
 8003660:	d10b      	bne.n	800367a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f043 0206 	orr.w	r2, r3, #6
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f043 0220 	orr.w	r2, r3, #32
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800367a:	7bfb      	ldrb	r3, [r7, #15]
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003686:	b004      	add	sp, #16
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	ffbdffbf 	.word	0xffbdffbf

08003690 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f023 0201 	bic.w	r2, r3, #1
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b084      	sub	sp, #16
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
 80036ba:	460b      	mov	r3, r1
 80036bc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80036be:	2300      	movs	r3, #0
 80036c0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80036ce:	78fb      	ldrb	r3, [r7, #3]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d115      	bne.n	8003700 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80036e0:	2001      	movs	r0, #1
 80036e2:	f7fd fb27 	bl	8000d34 <HAL_Delay>
      ms++;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	3301      	adds	r3, #1
 80036ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 fa25 	bl	8003b3c <USB_GetMode>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d01e      	beq.n	8003736 <USB_SetCurrentMode+0x84>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2b31      	cmp	r3, #49	; 0x31
 80036fc:	d9f0      	bls.n	80036e0 <USB_SetCurrentMode+0x2e>
 80036fe:	e01a      	b.n	8003736 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003700:	78fb      	ldrb	r3, [r7, #3]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d115      	bne.n	8003732 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003712:	2001      	movs	r0, #1
 8003714:	f7fd fb0e 	bl	8000d34 <HAL_Delay>
      ms++;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	3301      	adds	r3, #1
 800371c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 fa0c 	bl	8003b3c <USB_GetMode>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d005      	beq.n	8003736 <USB_SetCurrentMode+0x84>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2b31      	cmp	r3, #49	; 0x31
 800372e:	d9f0      	bls.n	8003712 <USB_SetCurrentMode+0x60>
 8003730:	e001      	b.n	8003736 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e005      	b.n	8003742 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2b32      	cmp	r3, #50	; 0x32
 800373a:	d101      	bne.n	8003740 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e000      	b.n	8003742 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
	...

0800374c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800374c:	b084      	sub	sp, #16
 800374e:	b580      	push	{r7, lr}
 8003750:	b086      	sub	sp, #24
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
 8003756:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800375a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800375e:	2300      	movs	r3, #0
 8003760:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003766:	2300      	movs	r3, #0
 8003768:	613b      	str	r3, [r7, #16]
 800376a:	e009      	b.n	8003780 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	3340      	adds	r3, #64	; 0x40
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	2200      	movs	r2, #0
 8003778:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	3301      	adds	r3, #1
 800377e:	613b      	str	r3, [r7, #16]
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	2b0e      	cmp	r3, #14
 8003784:	d9f2      	bls.n	800376c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003788:	2b00      	cmp	r3, #0
 800378a:	d11c      	bne.n	80037c6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800379a:	f043 0302 	orr.w	r3, r3, #2
 800379e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	e005      	b.n	80037d2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80037d8:	461a      	mov	r2, r3
 80037da:	2300      	movs	r3, #0
 80037dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037e4:	4619      	mov	r1, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ec:	461a      	mov	r2, r3
 80037ee:	680b      	ldr	r3, [r1, #0]
 80037f0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80037f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d10c      	bne.n	8003812 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80037f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d104      	bne.n	8003808 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80037fe:	2100      	movs	r1, #0
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 f961 	bl	8003ac8 <USB_SetDevSpeed>
 8003806:	e008      	b.n	800381a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003808:	2101      	movs	r1, #1
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f95c 	bl	8003ac8 <USB_SetDevSpeed>
 8003810:	e003      	b.n	800381a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003812:	2103      	movs	r1, #3
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f957 	bl	8003ac8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800381a:	2110      	movs	r1, #16
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f8f3 	bl	8003a08 <USB_FlushTxFifo>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 f91d 	bl	8003a6c <USB_FlushRxFifo>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003842:	461a      	mov	r2, r3
 8003844:	2300      	movs	r3, #0
 8003846:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800384e:	461a      	mov	r2, r3
 8003850:	2300      	movs	r3, #0
 8003852:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800385a:	461a      	mov	r2, r3
 800385c:	2300      	movs	r3, #0
 800385e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003860:	2300      	movs	r3, #0
 8003862:	613b      	str	r3, [r7, #16]
 8003864:	e043      	b.n	80038ee <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	015a      	lsls	r2, r3, #5
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4413      	add	r3, r2
 800386e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003878:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800387c:	d118      	bne.n	80038b0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10a      	bne.n	800389a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	015a      	lsls	r2, r3, #5
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4413      	add	r3, r2
 800388c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003890:	461a      	mov	r2, r3
 8003892:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003896:	6013      	str	r3, [r2, #0]
 8003898:	e013      	b.n	80038c2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	015a      	lsls	r2, r3, #5
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	4413      	add	r3, r2
 80038a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038a6:	461a      	mov	r2, r3
 80038a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80038ac:	6013      	str	r3, [r2, #0]
 80038ae:	e008      	b.n	80038c2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	015a      	lsls	r2, r3, #5
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	4413      	add	r3, r2
 80038b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038bc:	461a      	mov	r2, r3
 80038be:	2300      	movs	r3, #0
 80038c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	015a      	lsls	r2, r3, #5
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	4413      	add	r3, r2
 80038ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ce:	461a      	mov	r2, r3
 80038d0:	2300      	movs	r3, #0
 80038d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	015a      	lsls	r2, r3, #5
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	4413      	add	r3, r2
 80038dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038e0:	461a      	mov	r2, r3
 80038e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	3301      	adds	r3, #1
 80038ec:	613b      	str	r3, [r7, #16]
 80038ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d3b7      	bcc.n	8003866 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038f6:	2300      	movs	r3, #0
 80038f8:	613b      	str	r3, [r7, #16]
 80038fa:	e043      	b.n	8003984 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	015a      	lsls	r2, r3, #5
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4413      	add	r3, r2
 8003904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800390e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003912:	d118      	bne.n	8003946 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10a      	bne.n	8003930 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	015a      	lsls	r2, r3, #5
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	4413      	add	r3, r2
 8003922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003926:	461a      	mov	r2, r3
 8003928:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800392c:	6013      	str	r3, [r2, #0]
 800392e:	e013      	b.n	8003958 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	015a      	lsls	r2, r3, #5
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4413      	add	r3, r2
 8003938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800393c:	461a      	mov	r2, r3
 800393e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003942:	6013      	str	r3, [r2, #0]
 8003944:	e008      	b.n	8003958 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	015a      	lsls	r2, r3, #5
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	4413      	add	r3, r2
 800394e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003952:	461a      	mov	r2, r3
 8003954:	2300      	movs	r3, #0
 8003956:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	015a      	lsls	r2, r3, #5
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4413      	add	r3, r2
 8003960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003964:	461a      	mov	r2, r3
 8003966:	2300      	movs	r3, #0
 8003968:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	015a      	lsls	r2, r3, #5
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	4413      	add	r3, r2
 8003972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003976:	461a      	mov	r2, r3
 8003978:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800397c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	3301      	adds	r3, #1
 8003982:	613b      	str	r3, [r7, #16]
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	429a      	cmp	r2, r3
 800398a:	d3b7      	bcc.n	80038fc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800399a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800399e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80039ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80039ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d105      	bne.n	80039c0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	f043 0210 	orr.w	r2, r3, #16
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	699a      	ldr	r2, [r3, #24]
 80039c4:	4b0e      	ldr	r3, [pc, #56]	; (8003a00 <USB_DevInit+0x2b4>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80039cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d005      	beq.n	80039de <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	f043 0208 	orr.w	r2, r3, #8
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80039de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d105      	bne.n	80039f0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	699a      	ldr	r2, [r3, #24]
 80039e8:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <USB_DevInit+0x2b8>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80039f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3718      	adds	r7, #24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80039fc:	b004      	add	sp, #16
 80039fe:	4770      	bx	lr
 8003a00:	803c3800 	.word	0x803c3800
 8003a04:	40000004 	.word	0x40000004

08003a08 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	4a12      	ldr	r2, [pc, #72]	; (8003a68 <USB_FlushTxFifo+0x60>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d901      	bls.n	8003a26 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e01a      	b.n	8003a5c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	daf3      	bge.n	8003a16 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	019b      	lsls	r3, r3, #6
 8003a36:	f043 0220 	orr.w	r2, r3, #32
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	3301      	adds	r3, #1
 8003a42:	60fb      	str	r3, [r7, #12]
 8003a44:	4a08      	ldr	r2, [pc, #32]	; (8003a68 <USB_FlushTxFifo+0x60>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d901      	bls.n	8003a4e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e006      	b.n	8003a5c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	f003 0320 	and.w	r3, r3, #32
 8003a56:	2b20      	cmp	r3, #32
 8003a58:	d0f1      	beq.n	8003a3e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3714      	adds	r7, #20
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr
 8003a68:	00030d40 	.word	0x00030d40

08003a6c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a74:	2300      	movs	r3, #0
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	60fb      	str	r3, [r7, #12]
 8003a7e:	4a11      	ldr	r2, [pc, #68]	; (8003ac4 <USB_FlushRxFifo+0x58>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d901      	bls.n	8003a88 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e017      	b.n	8003ab8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	daf3      	bge.n	8003a78 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2210      	movs	r2, #16
 8003a98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	4a08      	ldr	r2, [pc, #32]	; (8003ac4 <USB_FlushRxFifo+0x58>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d901      	bls.n	8003aaa <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e006      	b.n	8003ab8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	f003 0310 	and.w	r3, r3, #16
 8003ab2:	2b10      	cmp	r3, #16
 8003ab4:	d0f1      	beq.n	8003a9a <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3714      	adds	r7, #20
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	00030d40 	.word	0x00030d40

08003ac8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	78fb      	ldrb	r3, [r7, #3]
 8003ae2:	68f9      	ldr	r1, [r7, #12]
 8003ae4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b085      	sub	sp, #20
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003b14:	f023 0303 	bic.w	r3, r3, #3
 8003b18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b28:	f043 0302 	orr.w	r3, r3, #2
 8003b2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3714      	adds	r7, #20
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	f003 0301 	and.w	r3, r3, #1
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	3301      	adds	r3, #1
 8003b68:	60fb      	str	r3, [r7, #12]
 8003b6a:	4a13      	ldr	r2, [pc, #76]	; (8003bb8 <USB_CoreReset+0x60>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d901      	bls.n	8003b74 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e01a      	b.n	8003baa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	daf3      	bge.n	8003b64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	f043 0201 	orr.w	r2, r3, #1
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	60fb      	str	r3, [r7, #12]
 8003b92:	4a09      	ldr	r2, [pc, #36]	; (8003bb8 <USB_CoreReset+0x60>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d901      	bls.n	8003b9c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e006      	b.n	8003baa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d0f1      	beq.n	8003b8c <USB_CoreReset+0x34>

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	00030d40 	.word	0x00030d40

08003bbc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003bc0:	bf00      	nop
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
	...

08003bcc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bd2:	f3ef 8305 	mrs	r3, IPSR
 8003bd6:	60bb      	str	r3, [r7, #8]
  return(result);
 8003bd8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10f      	bne.n	8003bfe <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bde:	f3ef 8310 	mrs	r3, PRIMASK
 8003be2:	607b      	str	r3, [r7, #4]
  return(result);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d105      	bne.n	8003bf6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003bea:	f3ef 8311 	mrs	r3, BASEPRI
 8003bee:	603b      	str	r3, [r7, #0]
  return(result);
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d007      	beq.n	8003c06 <osKernelInitialize+0x3a>
 8003bf6:	4b0e      	ldr	r3, [pc, #56]	; (8003c30 <osKernelInitialize+0x64>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d103      	bne.n	8003c06 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003bfe:	f06f 0305 	mvn.w	r3, #5
 8003c02:	60fb      	str	r3, [r7, #12]
 8003c04:	e00c      	b.n	8003c20 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003c06:	4b0a      	ldr	r3, [pc, #40]	; (8003c30 <osKernelInitialize+0x64>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d105      	bne.n	8003c1a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003c0e:	4b08      	ldr	r3, [pc, #32]	; (8003c30 <osKernelInitialize+0x64>)
 8003c10:	2201      	movs	r2, #1
 8003c12:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003c14:	2300      	movs	r3, #0
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	e002      	b.n	8003c20 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003c1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c1e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003c20:	68fb      	ldr	r3, [r7, #12]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3714      	adds	r7, #20
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	20000510 	.word	0x20000510

08003c34 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c3a:	f3ef 8305 	mrs	r3, IPSR
 8003c3e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c40:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10f      	bne.n	8003c66 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c46:	f3ef 8310 	mrs	r3, PRIMASK
 8003c4a:	607b      	str	r3, [r7, #4]
  return(result);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d105      	bne.n	8003c5e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c52:	f3ef 8311 	mrs	r3, BASEPRI
 8003c56:	603b      	str	r3, [r7, #0]
  return(result);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d007      	beq.n	8003c6e <osKernelStart+0x3a>
 8003c5e:	4b0f      	ldr	r3, [pc, #60]	; (8003c9c <osKernelStart+0x68>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d103      	bne.n	8003c6e <osKernelStart+0x3a>
    stat = osErrorISR;
 8003c66:	f06f 0305 	mvn.w	r3, #5
 8003c6a:	60fb      	str	r3, [r7, #12]
 8003c6c:	e010      	b.n	8003c90 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003c6e:	4b0b      	ldr	r3, [pc, #44]	; (8003c9c <osKernelStart+0x68>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d109      	bne.n	8003c8a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003c76:	f7ff ffa1 	bl	8003bbc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003c7a:	4b08      	ldr	r3, [pc, #32]	; (8003c9c <osKernelStart+0x68>)
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003c80:	f000 ff0e 	bl	8004aa0 <vTaskStartScheduler>
      stat = osOK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	60fb      	str	r3, [r7, #12]
 8003c88:	e002      	b.n	8003c90 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003c8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c8e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003c90:	68fb      	ldr	r3, [r7, #12]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	20000510 	.word	0x20000510

08003ca0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b090      	sub	sp, #64	; 0x40
 8003ca4:	af04      	add	r7, sp, #16
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003cac:	2300      	movs	r3, #0
 8003cae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cb0:	f3ef 8305 	mrs	r3, IPSR
 8003cb4:	61fb      	str	r3, [r7, #28]
  return(result);
 8003cb6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f040 808f 	bne.w	8003ddc <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cbe:	f3ef 8310 	mrs	r3, PRIMASK
 8003cc2:	61bb      	str	r3, [r7, #24]
  return(result);
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d105      	bne.n	8003cd6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003cca:	f3ef 8311 	mrs	r3, BASEPRI
 8003cce:	617b      	str	r3, [r7, #20]
  return(result);
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <osThreadNew+0x3e>
 8003cd6:	4b44      	ldr	r3, [pc, #272]	; (8003de8 <osThreadNew+0x148>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d07e      	beq.n	8003ddc <osThreadNew+0x13c>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d07b      	beq.n	8003ddc <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003ce4:	2380      	movs	r3, #128	; 0x80
 8003ce6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003ce8:	2318      	movs	r3, #24
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003cec:	2300      	movs	r3, #0
 8003cee:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003cf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cf4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d045      	beq.n	8003d88 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d002      	beq.n	8003d0a <osThreadNew+0x6a>
        name = attr->name;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d002      	beq.n	8003d18 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d008      	beq.n	8003d30 <osThreadNew+0x90>
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	2b38      	cmp	r3, #56	; 0x38
 8003d22:	d805      	bhi.n	8003d30 <osThreadNew+0x90>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <osThreadNew+0x94>
        return (NULL);
 8003d30:	2300      	movs	r3, #0
 8003d32:	e054      	b.n	8003dde <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	089b      	lsrs	r3, r3, #2
 8003d42:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00e      	beq.n	8003d6a <osThreadNew+0xca>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	2b5b      	cmp	r3, #91	; 0x5b
 8003d52:	d90a      	bls.n	8003d6a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d006      	beq.n	8003d6a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d002      	beq.n	8003d6a <osThreadNew+0xca>
        mem = 1;
 8003d64:	2301      	movs	r3, #1
 8003d66:	623b      	str	r3, [r7, #32]
 8003d68:	e010      	b.n	8003d8c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10c      	bne.n	8003d8c <osThreadNew+0xec>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d108      	bne.n	8003d8c <osThreadNew+0xec>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d104      	bne.n	8003d8c <osThreadNew+0xec>
          mem = 0;
 8003d82:	2300      	movs	r3, #0
 8003d84:	623b      	str	r3, [r7, #32]
 8003d86:	e001      	b.n	8003d8c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d110      	bne.n	8003db4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003d9a:	9202      	str	r2, [sp, #8]
 8003d9c:	9301      	str	r3, [sp, #4]
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003da6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 fced 	bl	8004788 <xTaskCreateStatic>
 8003dae:	4603      	mov	r3, r0
 8003db0:	613b      	str	r3, [r7, #16]
 8003db2:	e013      	b.n	8003ddc <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003db4:	6a3b      	ldr	r3, [r7, #32]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d110      	bne.n	8003ddc <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	f107 0310 	add.w	r3, r7, #16
 8003dc2:	9301      	str	r3, [sp, #4]
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	9300      	str	r3, [sp, #0]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f000 fd0e 	bl	80047ee <xTaskCreate>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d001      	beq.n	8003ddc <osThreadNew+0x13c>
          hTask = NULL;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003ddc:	693b      	ldr	r3, [r7, #16]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3730      	adds	r7, #48	; 0x30
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	20000510 	.word	0x20000510

08003dec <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003df4:	f3ef 8305 	mrs	r3, IPSR
 8003df8:	613b      	str	r3, [r7, #16]
  return(result);
 8003dfa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10f      	bne.n	8003e20 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e00:	f3ef 8310 	mrs	r3, PRIMASK
 8003e04:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d105      	bne.n	8003e18 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e0c:	f3ef 8311 	mrs	r3, BASEPRI
 8003e10:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d007      	beq.n	8003e28 <osDelay+0x3c>
 8003e18:	4b0a      	ldr	r3, [pc, #40]	; (8003e44 <osDelay+0x58>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d103      	bne.n	8003e28 <osDelay+0x3c>
    stat = osErrorISR;
 8003e20:	f06f 0305 	mvn.w	r3, #5
 8003e24:	617b      	str	r3, [r7, #20]
 8003e26:	e007      	b.n	8003e38 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d002      	beq.n	8003e38 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 fe10 	bl	8004a58 <vTaskDelay>
    }
  }

  return (stat);
 8003e38:	697b      	ldr	r3, [r7, #20]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	20000510 	.word	0x20000510

08003e48 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4a07      	ldr	r2, [pc, #28]	; (8003e74 <vApplicationGetIdleTaskMemory+0x2c>)
 8003e58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	4a06      	ldr	r2, [pc, #24]	; (8003e78 <vApplicationGetIdleTaskMemory+0x30>)
 8003e5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2280      	movs	r2, #128	; 0x80
 8003e64:	601a      	str	r2, [r3, #0]
}
 8003e66:	bf00      	nop
 8003e68:	3714      	adds	r7, #20
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	20000514 	.word	0x20000514
 8003e78:	20000570 	.word	0x20000570

08003e7c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	4a07      	ldr	r2, [pc, #28]	; (8003ea8 <vApplicationGetTimerTaskMemory+0x2c>)
 8003e8c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	4a06      	ldr	r2, [pc, #24]	; (8003eac <vApplicationGetTimerTaskMemory+0x30>)
 8003e92:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e9a:	601a      	str	r2, [r3, #0]
}
 8003e9c:	bf00      	nop
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	20000770 	.word	0x20000770
 8003eac:	200007cc 	.word	0x200007cc

08003eb0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f103 0208 	add.w	r2, r3, #8
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ec8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f103 0208 	add.w	r2, r3, #8
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f103 0208 	add.w	r2, r3, #8
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b085      	sub	sp, #20
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
 8003f12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	601a      	str	r2, [r3, #0]
}
 8003f46:	bf00      	nop
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f52:	b480      	push	{r7}
 8003f54:	b085      	sub	sp, #20
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
 8003f5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f68:	d103      	bne.n	8003f72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	60fb      	str	r3, [r7, #12]
 8003f70:	e00c      	b.n	8003f8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	3308      	adds	r3, #8
 8003f76:	60fb      	str	r3, [r7, #12]
 8003f78:	e002      	b.n	8003f80 <vListInsert+0x2e>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	60fb      	str	r3, [r7, #12]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68ba      	ldr	r2, [r7, #8]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d2f6      	bcs.n	8003f7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	683a      	ldr	r2, [r7, #0]
 8003fa6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	1c5a      	adds	r2, r3, #1
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	601a      	str	r2, [r3, #0]
}
 8003fb8:	bf00      	nop
 8003fba:	3714      	adds	r7, #20
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	6892      	ldr	r2, [r2, #8]
 8003fda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	6852      	ldr	r2, [r2, #4]
 8003fe4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d103      	bne.n	8003ff8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	1e5a      	subs	r2, r3, #1
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
}
 800400c:	4618      	mov	r0, r3
 800400e:	3714      	adds	r7, #20
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 8004026:	f001 fd7d 	bl	8005b24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004032:	68f9      	ldr	r1, [r7, #12]
 8004034:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004036:	fb01 f303 	mul.w	r3, r1, r3
 800403a:	441a      	add	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004056:	3b01      	subs	r3, #1
 8004058:	68f9      	ldr	r1, [r7, #12]
 800405a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800405c:	fb01 f303 	mul.w	r3, r1, r3
 8004060:	441a      	add	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	22ff      	movs	r2, #255	; 0xff
 800406a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	22ff      	movs	r2, #255	; 0xff
 8004072:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d114      	bne.n	80040a6 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d01a      	beq.n	80040ba <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	3310      	adds	r3, #16
 8004088:	4618      	mov	r0, r3
 800408a:	f000 ff3b 	bl	8004f04 <xTaskRemoveFromEventList>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d012      	beq.n	80040ba <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004094:	4b0c      	ldr	r3, [pc, #48]	; (80040c8 <xQueueGenericReset+0xb0>)
 8004096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800409a:	601a      	str	r2, [r3, #0]
 800409c:	f3bf 8f4f 	dsb	sy
 80040a0:	f3bf 8f6f 	isb	sy
 80040a4:	e009      	b.n	80040ba <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	3310      	adds	r3, #16
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7ff ff00 	bl	8003eb0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	3324      	adds	r3, #36	; 0x24
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7ff fefb 	bl	8003eb0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80040ba:	f001 fd4f 	bl	8005b5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80040be:	2301      	movs	r3, #1
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	e000ed04 	.word	0xe000ed04

080040cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b088      	sub	sp, #32
 80040d0:	af02      	add	r7, sp, #8
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
 80040d8:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80040da:	2350      	movs	r3, #80	; 0x50
 80040dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80040de:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00d      	beq.n	8004106 <xQueueGenericCreateStatic+0x3a>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040f2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	4613      	mov	r3, r2
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	68b9      	ldr	r1, [r7, #8]
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f000 f805 	bl	8004110 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004106:	697b      	ldr	r3, [r7, #20]
	}
 8004108:	4618      	mov	r0, r3
 800410a:	3718      	adds	r7, #24
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
 800411c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d103      	bne.n	800412c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	601a      	str	r2, [r3, #0]
 800412a:	e002      	b.n	8004132 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800413e:	2101      	movs	r1, #1
 8004140:	69b8      	ldr	r0, [r7, #24]
 8004142:	f7ff ff69 	bl	8004018 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	78fa      	ldrb	r2, [r7, #3]
 800414a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800414e:	bf00      	nop
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
	...

08004158 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b08a      	sub	sp, #40	; 0x28
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
 8004164:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004166:	2300      	movs	r3, #0
 8004168:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	623b      	str	r3, [r7, #32]
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800416e:	f001 fcd9 	bl	8005b24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004176:	6a3b      	ldr	r3, [r7, #32]
 8004178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417a:	429a      	cmp	r2, r3
 800417c:	d302      	bcc.n	8004184 <xQueueGenericSend+0x2c>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2b02      	cmp	r3, #2
 8004182:	d129      	bne.n	80041d8 <xQueueGenericSend+0x80>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	68b9      	ldr	r1, [r7, #8]
 8004188:	6a38      	ldr	r0, [r7, #32]
 800418a:	f000 f98f 	bl	80044ac <prvCopyDataToQueue>
 800418e:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	2b00      	cmp	r3, #0
 8004196:	d010      	beq.n	80041ba <xQueueGenericSend+0x62>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	3324      	adds	r3, #36	; 0x24
 800419c:	4618      	mov	r0, r3
 800419e:	f000 feb1 	bl	8004f04 <xTaskRemoveFromEventList>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d013      	beq.n	80041d0 <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80041a8:	4b3f      	ldr	r3, [pc, #252]	; (80042a8 <xQueueGenericSend+0x150>)
 80041aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041ae:	601a      	str	r2, [r3, #0]
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	f3bf 8f6f 	isb	sy
 80041b8:	e00a      	b.n	80041d0 <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d007      	beq.n	80041d0 <xQueueGenericSend+0x78>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80041c0:	4b39      	ldr	r3, [pc, #228]	; (80042a8 <xQueueGenericSend+0x150>)
 80041c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041c6:	601a      	str	r2, [r3, #0]
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80041d0:	f001 fcc4 	bl	8005b5c <vPortExitCritical>
				return pdPASS;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e063      	b.n	80042a0 <xQueueGenericSend+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d103      	bne.n	80041e6 <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80041de:	f001 fcbd 	bl	8005b5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80041e2:	2300      	movs	r3, #0
 80041e4:	e05c      	b.n	80042a0 <xQueueGenericSend+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d106      	bne.n	80041fa <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80041ec:	f107 0314 	add.w	r3, r7, #20
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 fedd 	bl	8004fb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041f6:	2301      	movs	r3, #1
 80041f8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041fa:	f001 fcaf 	bl	8005b5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80041fe:	f000 fca9 	bl	8004b54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004202:	f001 fc8f 	bl	8005b24 <vPortEnterCritical>
 8004206:	6a3b      	ldr	r3, [r7, #32]
 8004208:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800420c:	b25b      	sxtb	r3, r3
 800420e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004212:	d103      	bne.n	800421c <xQueueGenericSend+0xc4>
 8004214:	6a3b      	ldr	r3, [r7, #32]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800421c:	6a3b      	ldr	r3, [r7, #32]
 800421e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004222:	b25b      	sxtb	r3, r3
 8004224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004228:	d103      	bne.n	8004232 <xQueueGenericSend+0xda>
 800422a:	6a3b      	ldr	r3, [r7, #32]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004232:	f001 fc93 	bl	8005b5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004236:	1d3a      	adds	r2, r7, #4
 8004238:	f107 0314 	add.w	r3, r7, #20
 800423c:	4611      	mov	r1, r2
 800423e:	4618      	mov	r0, r3
 8004240:	f000 fecc 	bl	8004fdc <xTaskCheckForTimeOut>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d124      	bne.n	8004294 <xQueueGenericSend+0x13c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800424a:	6a38      	ldr	r0, [r7, #32]
 800424c:	f000 fa26 	bl	800469c <prvIsQueueFull>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d018      	beq.n	8004288 <xQueueGenericSend+0x130>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	3310      	adds	r3, #16
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	4611      	mov	r1, r2
 800425e:	4618      	mov	r0, r3
 8004260:	f000 fe1c 	bl	8004e9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004264:	6a38      	ldr	r0, [r7, #32]
 8004266:	f000 f9b1 	bl	80045cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800426a:	f000 fc81 	bl	8004b70 <xTaskResumeAll>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	f47f af7c 	bne.w	800416e <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
 8004276:	4b0c      	ldr	r3, [pc, #48]	; (80042a8 <xQueueGenericSend+0x150>)
 8004278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800427c:	601a      	str	r2, [r3, #0]
 800427e:	f3bf 8f4f 	dsb	sy
 8004282:	f3bf 8f6f 	isb	sy
 8004286:	e772      	b.n	800416e <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004288:	6a38      	ldr	r0, [r7, #32]
 800428a:	f000 f99f 	bl	80045cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800428e:	f000 fc6f 	bl	8004b70 <xTaskResumeAll>
 8004292:	e76c      	b.n	800416e <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004294:	6a38      	ldr	r0, [r7, #32]
 8004296:	f000 f999 	bl	80045cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800429a:	f000 fc69 	bl	8004b70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800429e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3728      	adds	r7, #40	; 0x28
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	e000ed04 	.word	0xe000ed04

080042ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b08c      	sub	sp, #48	; 0x30
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
 80042b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	62bb      	str	r3, [r7, #40]	; 0x28
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80042be:	f001 fced 	bl	8005c9c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80042c2:	f3ef 8211 	mrs	r2, BASEPRI
 80042c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ca:	b672      	cpsid	i
 80042cc:	f383 8811 	msr	BASEPRI, r3
 80042d0:	f3bf 8f6f 	isb	sy
 80042d4:	f3bf 8f4f 	dsb	sy
 80042d8:	b662      	cpsie	i
 80042da:	61fa      	str	r2, [r7, #28]
 80042dc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80042de:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80042e0:	627b      	str	r3, [r7, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80042e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d302      	bcc.n	80042f4 <xQueueGenericSendFromISR+0x48>
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d12c      	bne.n	800434e <xQueueGenericSendFromISR+0xa2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80042f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	68b9      	ldr	r1, [r7, #8]
 8004302:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004304:	f000 f8d2 	bl	80044ac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004308:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800430c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004310:	d112      	bne.n	8004338 <xQueueGenericSendFromISR+0x8c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004316:	2b00      	cmp	r3, #0
 8004318:	d016      	beq.n	8004348 <xQueueGenericSendFromISR+0x9c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800431a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431c:	3324      	adds	r3, #36	; 0x24
 800431e:	4618      	mov	r0, r3
 8004320:	f000 fdf0 	bl	8004f04 <xTaskRemoveFromEventList>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00e      	beq.n	8004348 <xQueueGenericSendFromISR+0x9c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00b      	beq.n	8004348 <xQueueGenericSendFromISR+0x9c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	e007      	b.n	8004348 <xQueueGenericSendFromISR+0x9c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004338:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800433c:	3301      	adds	r3, #1
 800433e:	b2db      	uxtb	r3, r3
 8004340:	b25a      	sxtb	r2, r3
 8004342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004344:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004348:	2301      	movs	r3, #1
 800434a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
 800434c:	e001      	b.n	8004352 <xQueueGenericSendFromISR+0xa6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800434e:	2300      	movs	r3, #0
 8004350:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800435c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800435e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004360:	4618      	mov	r0, r3
 8004362:	3730      	adds	r7, #48	; 0x30
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b08a      	sub	sp, #40	; 0x28
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004374:	2300      	movs	r3, #0
 8004376:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	623b      	str	r3, [r7, #32]
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800437c:	f001 fbd2 	bl	8005b24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004380:	6a3b      	ldr	r3, [r7, #32]
 8004382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004384:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d01f      	beq.n	80043cc <xQueueReceive+0x64>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800438c:	68b9      	ldr	r1, [r7, #8]
 800438e:	6a38      	ldr	r0, [r7, #32]
 8004390:	f000 f8f6 	bl	8004580 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	1e5a      	subs	r2, r3, #1
 8004398:	6a3b      	ldr	r3, [r7, #32]
 800439a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00f      	beq.n	80043c4 <xQueueReceive+0x5c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	3310      	adds	r3, #16
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 fdab 	bl	8004f04 <xTaskRemoveFromEventList>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d007      	beq.n	80043c4 <xQueueReceive+0x5c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80043b4:	4b3c      	ldr	r3, [pc, #240]	; (80044a8 <xQueueReceive+0x140>)
 80043b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043ba:	601a      	str	r2, [r3, #0]
 80043bc:	f3bf 8f4f 	dsb	sy
 80043c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80043c4:	f001 fbca 	bl	8005b5c <vPortExitCritical>
				return pdPASS;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e069      	b.n	80044a0 <xQueueReceive+0x138>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d103      	bne.n	80043da <xQueueReceive+0x72>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80043d2:	f001 fbc3 	bl	8005b5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80043d6:	2300      	movs	r3, #0
 80043d8:	e062      	b.n	80044a0 <xQueueReceive+0x138>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d106      	bne.n	80043ee <xQueueReceive+0x86>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043e0:	f107 0314 	add.w	r3, r7, #20
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 fde3 	bl	8004fb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043ea:	2301      	movs	r3, #1
 80043ec:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043ee:	f001 fbb5 	bl	8005b5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043f2:	f000 fbaf 	bl	8004b54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043f6:	f001 fb95 	bl	8005b24 <vPortEnterCritical>
 80043fa:	6a3b      	ldr	r3, [r7, #32]
 80043fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004400:	b25b      	sxtb	r3, r3
 8004402:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004406:	d103      	bne.n	8004410 <xQueueReceive+0xa8>
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004416:	b25b      	sxtb	r3, r3
 8004418:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800441c:	d103      	bne.n	8004426 <xQueueReceive+0xbe>
 800441e:	6a3b      	ldr	r3, [r7, #32]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004426:	f001 fb99 	bl	8005b5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800442a:	1d3a      	adds	r2, r7, #4
 800442c:	f107 0314 	add.w	r3, r7, #20
 8004430:	4611      	mov	r1, r2
 8004432:	4618      	mov	r0, r3
 8004434:	f000 fdd2 	bl	8004fdc <xTaskCheckForTimeOut>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d123      	bne.n	8004486 <xQueueReceive+0x11e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800443e:	6a38      	ldr	r0, [r7, #32]
 8004440:	f000 f916 	bl	8004670 <prvIsQueueEmpty>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d017      	beq.n	800447a <xQueueReceive+0x112>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800444a:	6a3b      	ldr	r3, [r7, #32]
 800444c:	3324      	adds	r3, #36	; 0x24
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	4611      	mov	r1, r2
 8004452:	4618      	mov	r0, r3
 8004454:	f000 fd22 	bl	8004e9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004458:	6a38      	ldr	r0, [r7, #32]
 800445a:	f000 f8b7 	bl	80045cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800445e:	f000 fb87 	bl	8004b70 <xTaskResumeAll>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d189      	bne.n	800437c <xQueueReceive+0x14>
				{
					portYIELD_WITHIN_API();
 8004468:	4b0f      	ldr	r3, [pc, #60]	; (80044a8 <xQueueReceive+0x140>)
 800446a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	f3bf 8f4f 	dsb	sy
 8004474:	f3bf 8f6f 	isb	sy
 8004478:	e780      	b.n	800437c <xQueueReceive+0x14>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800447a:	6a38      	ldr	r0, [r7, #32]
 800447c:	f000 f8a6 	bl	80045cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004480:	f000 fb76 	bl	8004b70 <xTaskResumeAll>
 8004484:	e77a      	b.n	800437c <xQueueReceive+0x14>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004486:	6a38      	ldr	r0, [r7, #32]
 8004488:	f000 f8a0 	bl	80045cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800448c:	f000 fb70 	bl	8004b70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004490:	6a38      	ldr	r0, [r7, #32]
 8004492:	f000 f8ed 	bl	8004670 <prvIsQueueEmpty>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	f43f af6f 	beq.w	800437c <xQueueReceive+0x14>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800449e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3728      	adds	r7, #40	; 0x28
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	e000ed04 	.word	0xe000ed04

080044ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80044b8:	2300      	movs	r3, #0
 80044ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10d      	bne.n	80044e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d14d      	bne.n	800456e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 feb4 	bl	8005244 <xTaskPriorityDisinherit>
 80044dc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	609a      	str	r2, [r3, #8]
 80044e4:	e043      	b.n	800456e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d119      	bne.n	8004520 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6858      	ldr	r0, [r3, #4]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f4:	461a      	mov	r2, r3
 80044f6:	68b9      	ldr	r1, [r7, #8]
 80044f8:	f001 fd94 	bl	8006024 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004504:	441a      	add	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	429a      	cmp	r2, r3
 8004514:	d32b      	bcc.n	800456e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	605a      	str	r2, [r3, #4]
 800451e:	e026      	b.n	800456e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	68d8      	ldr	r0, [r3, #12]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004528:	461a      	mov	r2, r3
 800452a:	68b9      	ldr	r1, [r7, #8]
 800452c:	f001 fd7a 	bl	8006024 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	68da      	ldr	r2, [r3, #12]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004538:	425b      	negs	r3, r3
 800453a:	441a      	add	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	68da      	ldr	r2, [r3, #12]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	429a      	cmp	r2, r3
 800454a:	d207      	bcs.n	800455c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004554:	425b      	negs	r3, r3
 8004556:	441a      	add	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b02      	cmp	r3, #2
 8004560:	d105      	bne.n	800456e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d002      	beq.n	800456e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	3b01      	subs	r3, #1
 800456c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1c5a      	adds	r2, r3, #1
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004576:	697b      	ldr	r3, [r7, #20]
}
 8004578:	4618      	mov	r0, r3
 800457a:	3718      	adds	r7, #24
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458e:	2b00      	cmp	r3, #0
 8004590:	d018      	beq.n	80045c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68da      	ldr	r2, [r3, #12]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459a:	441a      	add	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68da      	ldr	r2, [r3, #12]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d303      	bcc.n	80045b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68d9      	ldr	r1, [r3, #12]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045bc:	461a      	mov	r2, r3
 80045be:	6838      	ldr	r0, [r7, #0]
 80045c0:	f001 fd30 	bl	8006024 <memcpy>
	}
}
 80045c4:	bf00      	nop
 80045c6:	3708      	adds	r7, #8
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80045d4:	f001 faa6 	bl	8005b24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80045e0:	e011      	b.n	8004606 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d012      	beq.n	8004610 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	3324      	adds	r3, #36	; 0x24
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 fc88 	bl	8004f04 <xTaskRemoveFromEventList>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80045fa:	f000 fd35 	bl	8005068 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
 8004600:	3b01      	subs	r3, #1
 8004602:	b2db      	uxtb	r3, r3
 8004604:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800460a:	2b00      	cmp	r3, #0
 800460c:	dce9      	bgt.n	80045e2 <prvUnlockQueue+0x16>
 800460e:	e000      	b.n	8004612 <prvUnlockQueue+0x46>
					break;
 8004610:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	22ff      	movs	r2, #255	; 0xff
 8004616:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800461a:	f001 fa9f 	bl	8005b5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800461e:	f001 fa81 	bl	8005b24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004628:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800462a:	e011      	b.n	8004650 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d012      	beq.n	800465a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	3310      	adds	r3, #16
 8004638:	4618      	mov	r0, r3
 800463a:	f000 fc63 	bl	8004f04 <xTaskRemoveFromEventList>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d001      	beq.n	8004648 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004644:	f000 fd10 	bl	8005068 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004648:	7bbb      	ldrb	r3, [r7, #14]
 800464a:	3b01      	subs	r3, #1
 800464c:	b2db      	uxtb	r3, r3
 800464e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004650:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004654:	2b00      	cmp	r3, #0
 8004656:	dce9      	bgt.n	800462c <prvUnlockQueue+0x60>
 8004658:	e000      	b.n	800465c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800465a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	22ff      	movs	r2, #255	; 0xff
 8004660:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004664:	f001 fa7a 	bl	8005b5c <vPortExitCritical>
}
 8004668:	bf00      	nop
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004678:	f001 fa54 	bl	8005b24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004680:	2b00      	cmp	r3, #0
 8004682:	d102      	bne.n	800468a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004684:	2301      	movs	r3, #1
 8004686:	60fb      	str	r3, [r7, #12]
 8004688:	e001      	b.n	800468e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800468a:	2300      	movs	r3, #0
 800468c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800468e:	f001 fa65 	bl	8005b5c <vPortExitCritical>

	return xReturn;
 8004692:	68fb      	ldr	r3, [r7, #12]
}
 8004694:	4618      	mov	r0, r3
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80046a4:	f001 fa3e 	bl	8005b24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d102      	bne.n	80046ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80046b4:	2301      	movs	r3, #1
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	e001      	b.n	80046be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80046ba:	2300      	movs	r3, #0
 80046bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80046be:	f001 fa4d 	bl	8005b5c <vPortExitCritical>

	return xReturn;
 80046c2:	68fb      	ldr	r3, [r7, #12]
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80046d6:	2300      	movs	r3, #0
 80046d8:	60fb      	str	r3, [r7, #12]
 80046da:	e014      	b.n	8004706 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80046dc:	4a0f      	ldr	r2, [pc, #60]	; (800471c <vQueueAddToRegistry+0x50>)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10b      	bne.n	8004700 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80046e8:	490c      	ldr	r1, [pc, #48]	; (800471c <vQueueAddToRegistry+0x50>)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80046f2:	4a0a      	ldr	r2, [pc, #40]	; (800471c <vQueueAddToRegistry+0x50>)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	00db      	lsls	r3, r3, #3
 80046f8:	4413      	add	r3, r2
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80046fe:	e006      	b.n	800470e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	3301      	adds	r3, #1
 8004704:	60fb      	str	r3, [r7, #12]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2b07      	cmp	r3, #7
 800470a:	d9e7      	bls.n	80046dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800470c:	bf00      	nop
 800470e:	bf00      	nop
 8004710:	3714      	adds	r7, #20
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	20000bcc 	.word	0x20000bcc

08004720 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004730:	f001 f9f8 	bl	8005b24 <vPortEnterCritical>
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800473a:	b25b      	sxtb	r3, r3
 800473c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004740:	d103      	bne.n	800474a <vQueueWaitForMessageRestricted+0x2a>
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004750:	b25b      	sxtb	r3, r3
 8004752:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004756:	d103      	bne.n	8004760 <vQueueWaitForMessageRestricted+0x40>
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004760:	f001 f9fc 	bl	8005b5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004768:	2b00      	cmp	r3, #0
 800476a:	d106      	bne.n	800477a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	3324      	adds	r3, #36	; 0x24
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	68b9      	ldr	r1, [r7, #8]
 8004774:	4618      	mov	r0, r3
 8004776:	f000 fba7 	bl	8004ec8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800477a:	6978      	ldr	r0, [r7, #20]
 800477c:	f7ff ff26 	bl	80045cc <prvUnlockQueue>
	}
 8004780:	bf00      	nop
 8004782:	3718      	adds	r7, #24
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004788:	b580      	push	{r7, lr}
 800478a:	b08c      	sub	sp, #48	; 0x30
 800478c:	af04      	add	r7, sp, #16
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
 8004794:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004796:	235c      	movs	r3, #92	; 0x5c
 8004798:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800479a:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800479c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d01e      	beq.n	80047e0 <xTaskCreateStatic+0x58>
 80047a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d01b      	beq.n	80047e0 <xTaskCreateStatic+0x58>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80047a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047aa:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	2202      	movs	r2, #2
 80047b6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80047ba:	2300      	movs	r3, #0
 80047bc:	9303      	str	r3, [sp, #12]
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	9302      	str	r3, [sp, #8]
 80047c2:	f107 0318 	add.w	r3, r7, #24
 80047c6:	9301      	str	r3, [sp, #4]
 80047c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	68b9      	ldr	r1, [r7, #8]
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 f850 	bl	8004878 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80047d8:	69f8      	ldr	r0, [r7, #28]
 80047da:	f000 f8cd 	bl	8004978 <prvAddNewTaskToReadyList>
 80047de:	e001      	b.n	80047e4 <xTaskCreateStatic+0x5c>
		}
		else
		{
			xReturn = NULL;
 80047e0:	2300      	movs	r3, #0
 80047e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80047e4:	69bb      	ldr	r3, [r7, #24]
	}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3720      	adds	r7, #32
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b08c      	sub	sp, #48	; 0x30
 80047f2:	af04      	add	r7, sp, #16
 80047f4:	60f8      	str	r0, [r7, #12]
 80047f6:	60b9      	str	r1, [r7, #8]
 80047f8:	603b      	str	r3, [r7, #0]
 80047fa:	4613      	mov	r3, r2
 80047fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80047fe:	88fb      	ldrh	r3, [r7, #6]
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4618      	mov	r0, r3
 8004804:	f001 fa60 	bl	8005cc8 <pvPortMalloc>
 8004808:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00e      	beq.n	800482e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004810:	205c      	movs	r0, #92	; 0x5c
 8004812:	f001 fa59 	bl	8005cc8 <pvPortMalloc>
 8004816:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	631a      	str	r2, [r3, #48]	; 0x30
 8004824:	e005      	b.n	8004832 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004826:	6978      	ldr	r0, [r7, #20]
 8004828:	f001 fae2 	bl	8005df0 <vPortFree>
 800482c:	e001      	b.n	8004832 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800482e:	2300      	movs	r3, #0
 8004830:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d017      	beq.n	8004868 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004840:	88fa      	ldrh	r2, [r7, #6]
 8004842:	2300      	movs	r3, #0
 8004844:	9303      	str	r3, [sp, #12]
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	9302      	str	r3, [sp, #8]
 800484a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484c:	9301      	str	r3, [sp, #4]
 800484e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004850:	9300      	str	r3, [sp, #0]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	68b9      	ldr	r1, [r7, #8]
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f000 f80e 	bl	8004878 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800485c:	69f8      	ldr	r0, [r7, #28]
 800485e:	f000 f88b 	bl	8004978 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004862:	2301      	movs	r3, #1
 8004864:	61bb      	str	r3, [r7, #24]
 8004866:	e002      	b.n	800486e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004868:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800486c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800486e:	69bb      	ldr	r3, [r7, #24]
	}
 8004870:	4618      	mov	r0, r3
 8004872:	3720      	adds	r7, #32
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
 8004884:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004888:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	461a      	mov	r2, r3
 8004890:	21a5      	movs	r1, #165	; 0xa5
 8004892:	f001 fbd5 	bl	8006040 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004898:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800489a:	6879      	ldr	r1, [r7, #4]
 800489c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80048a0:	440b      	add	r3, r1
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	f023 0307 	bic.w	r3, r3, #7
 80048ae:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d01f      	beq.n	80048f6 <prvInitialiseNewTask+0x7e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048b6:	2300      	movs	r3, #0
 80048b8:	617b      	str	r3, [r7, #20]
 80048ba:	e012      	b.n	80048e2 <prvInitialiseNewTask+0x6a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	4413      	add	r3, r2
 80048c2:	7819      	ldrb	r1, [r3, #0]
 80048c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	4413      	add	r3, r2
 80048ca:	3334      	adds	r3, #52	; 0x34
 80048cc:	460a      	mov	r2, r1
 80048ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	4413      	add	r3, r2
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d006      	beq.n	80048ea <prvInitialiseNewTask+0x72>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	3301      	adds	r3, #1
 80048e0:	617b      	str	r3, [r7, #20]
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	2b0f      	cmp	r3, #15
 80048e6:	d9e9      	bls.n	80048bc <prvInitialiseNewTask+0x44>
 80048e8:	e000      	b.n	80048ec <prvInitialiseNewTask+0x74>
			{
				break;
 80048ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80048ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048f4:	e003      	b.n	80048fe <prvInitialiseNewTask+0x86>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80048f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80048fe:	6a3b      	ldr	r3, [r7, #32]
 8004900:	2b37      	cmp	r3, #55	; 0x37
 8004902:	d901      	bls.n	8004908 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004904:	2337      	movs	r3, #55	; 0x37
 8004906:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490a:	6a3a      	ldr	r2, [r7, #32]
 800490c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800490e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004910:	6a3a      	ldr	r2, [r7, #32]
 8004912:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004916:	2200      	movs	r2, #0
 8004918:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800491a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491c:	3304      	adds	r3, #4
 800491e:	4618      	mov	r0, r3
 8004920:	f7ff fae6 	bl	8003ef0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004926:	3318      	adds	r3, #24
 8004928:	4618      	mov	r0, r3
 800492a:	f7ff fae1 	bl	8003ef0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800492e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004930:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004932:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004934:	6a3b      	ldr	r3, [r7, #32]
 8004936:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800493a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800493e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004940:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004942:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004946:	2200      	movs	r2, #0
 8004948:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800494a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	68f9      	ldr	r1, [r7, #12]
 8004956:	6938      	ldr	r0, [r7, #16]
 8004958:	f001 f802 	bl	8005960 <pxPortInitialiseStack>
 800495c:	4602      	mov	r2, r0
 800495e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004960:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004964:	2b00      	cmp	r3, #0
 8004966:	d002      	beq.n	800496e <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800496c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800496e:	bf00      	nop
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
	...

08004978 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004980:	f001 f8d0 	bl	8005b24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004984:	4b2d      	ldr	r3, [pc, #180]	; (8004a3c <prvAddNewTaskToReadyList+0xc4>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	3301      	adds	r3, #1
 800498a:	4a2c      	ldr	r2, [pc, #176]	; (8004a3c <prvAddNewTaskToReadyList+0xc4>)
 800498c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800498e:	4b2c      	ldr	r3, [pc, #176]	; (8004a40 <prvAddNewTaskToReadyList+0xc8>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d109      	bne.n	80049aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004996:	4a2a      	ldr	r2, [pc, #168]	; (8004a40 <prvAddNewTaskToReadyList+0xc8>)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800499c:	4b27      	ldr	r3, [pc, #156]	; (8004a3c <prvAddNewTaskToReadyList+0xc4>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d110      	bne.n	80049c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80049a4:	f000 fb84 	bl	80050b0 <prvInitialiseTaskLists>
 80049a8:	e00d      	b.n	80049c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80049aa:	4b26      	ldr	r3, [pc, #152]	; (8004a44 <prvAddNewTaskToReadyList+0xcc>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d109      	bne.n	80049c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80049b2:	4b23      	ldr	r3, [pc, #140]	; (8004a40 <prvAddNewTaskToReadyList+0xc8>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049bc:	429a      	cmp	r2, r3
 80049be:	d802      	bhi.n	80049c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80049c0:	4a1f      	ldr	r2, [pc, #124]	; (8004a40 <prvAddNewTaskToReadyList+0xc8>)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80049c6:	4b20      	ldr	r3, [pc, #128]	; (8004a48 <prvAddNewTaskToReadyList+0xd0>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	3301      	adds	r3, #1
 80049cc:	4a1e      	ldr	r2, [pc, #120]	; (8004a48 <prvAddNewTaskToReadyList+0xd0>)
 80049ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80049d0:	4b1d      	ldr	r3, [pc, #116]	; (8004a48 <prvAddNewTaskToReadyList+0xd0>)
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049dc:	4b1b      	ldr	r3, [pc, #108]	; (8004a4c <prvAddNewTaskToReadyList+0xd4>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d903      	bls.n	80049ec <prvAddNewTaskToReadyList+0x74>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e8:	4a18      	ldr	r2, [pc, #96]	; (8004a4c <prvAddNewTaskToReadyList+0xd4>)
 80049ea:	6013      	str	r3, [r2, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f0:	4613      	mov	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4413      	add	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4a15      	ldr	r2, [pc, #84]	; (8004a50 <prvAddNewTaskToReadyList+0xd8>)
 80049fa:	441a      	add	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	3304      	adds	r3, #4
 8004a00:	4619      	mov	r1, r3
 8004a02:	4610      	mov	r0, r2
 8004a04:	f7ff fa81 	bl	8003f0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004a08:	f001 f8a8 	bl	8005b5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004a0c:	4b0d      	ldr	r3, [pc, #52]	; (8004a44 <prvAddNewTaskToReadyList+0xcc>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00e      	beq.n	8004a32 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a14:	4b0a      	ldr	r3, [pc, #40]	; (8004a40 <prvAddNewTaskToReadyList+0xc8>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d207      	bcs.n	8004a32 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004a22:	4b0c      	ldr	r3, [pc, #48]	; (8004a54 <prvAddNewTaskToReadyList+0xdc>)
 8004a24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a32:	bf00      	nop
 8004a34:	3708      	adds	r7, #8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	200010e0 	.word	0x200010e0
 8004a40:	20000c0c 	.word	0x20000c0c
 8004a44:	200010ec 	.word	0x200010ec
 8004a48:	200010fc 	.word	0x200010fc
 8004a4c:	200010e8 	.word	0x200010e8
 8004a50:	20000c10 	.word	0x20000c10
 8004a54:	e000ed04 	.word	0xe000ed04

08004a58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004a60:	2300      	movs	r3, #0
 8004a62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d008      	beq.n	8004a7c <vTaskDelay+0x24>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 8004a6a:	f000 f873 	bl	8004b54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004a6e:	2100      	movs	r1, #0
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 fc33 	bl	80052dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004a76:	f000 f87b 	bl	8004b70 <xTaskResumeAll>
 8004a7a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d107      	bne.n	8004a92 <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
 8004a82:	4b06      	ldr	r3, [pc, #24]	; (8004a9c <vTaskDelay+0x44>)
 8004a84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a88:	601a      	str	r2, [r3, #0]
 8004a8a:	f3bf 8f4f 	dsb	sy
 8004a8e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a92:	bf00      	nop
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	e000ed04 	.word	0xe000ed04

08004aa0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b08a      	sub	sp, #40	; 0x28
 8004aa4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	60fb      	str	r3, [r7, #12]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	60bb      	str	r3, [r7, #8]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004aae:	1d3a      	adds	r2, r7, #4
 8004ab0:	f107 0108 	add.w	r1, r7, #8
 8004ab4:	f107 030c 	add.w	r3, r7, #12
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff f9c5 	bl	8003e48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004abe:	6879      	ldr	r1, [r7, #4]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	9202      	str	r2, [sp, #8]
 8004ac6:	9301      	str	r3, [sp, #4]
 8004ac8:	2300      	movs	r3, #0
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	2300      	movs	r3, #0
 8004ace:	460a      	mov	r2, r1
 8004ad0:	491a      	ldr	r1, [pc, #104]	; (8004b3c <vTaskStartScheduler+0x9c>)
 8004ad2:	481b      	ldr	r0, [pc, #108]	; (8004b40 <vTaskStartScheduler+0xa0>)
 8004ad4:	f7ff fe58 	bl	8004788 <xTaskCreateStatic>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	4a1a      	ldr	r2, [pc, #104]	; (8004b44 <vTaskStartScheduler+0xa4>)
 8004adc:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004ade:	4b19      	ldr	r3, [pc, #100]	; (8004b44 <vTaskStartScheduler+0xa4>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d002      	beq.n	8004aec <vTaskStartScheduler+0x4c>
		{
			xReturn = pdPASS;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	617b      	str	r3, [r7, #20]
 8004aea:	e001      	b.n	8004af0 <vTaskStartScheduler+0x50>
		}
		else
		{
			xReturn = pdFAIL;
 8004aec:	2300      	movs	r3, #0
 8004aee:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d102      	bne.n	8004afc <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8004af6:	f000 fc45 	bl	8005384 <xTimerCreateTimerTask>
 8004afa:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d117      	bne.n	8004b32 <vTaskStartScheduler+0x92>
	__asm volatile
 8004b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b06:	b672      	cpsid	i
 8004b08:	f383 8811 	msr	BASEPRI, r3
 8004b0c:	f3bf 8f6f 	isb	sy
 8004b10:	f3bf 8f4f 	dsb	sy
 8004b14:	b662      	cpsie	i
 8004b16:	613b      	str	r3, [r7, #16]
}
 8004b18:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004b1a:	4b0b      	ldr	r3, [pc, #44]	; (8004b48 <vTaskStartScheduler+0xa8>)
 8004b1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b20:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004b22:	4b0a      	ldr	r3, [pc, #40]	; (8004b4c <vTaskStartScheduler+0xac>)
 8004b24:	2201      	movs	r2, #1
 8004b26:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004b28:	4b09      	ldr	r3, [pc, #36]	; (8004b50 <vTaskStartScheduler+0xb0>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004b2e:	f000 ff8f 	bl	8005a50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004b32:	bf00      	nop
 8004b34:	3718      	adds	r7, #24
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	0800608c 	.word	0x0800608c
 8004b40:	08005081 	.word	0x08005081
 8004b44:	20001104 	.word	0x20001104
 8004b48:	20001100 	.word	0x20001100
 8004b4c:	200010ec 	.word	0x200010ec
 8004b50:	200010e4 	.word	0x200010e4

08004b54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004b54:	b480      	push	{r7}
 8004b56:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004b58:	4b04      	ldr	r3, [pc, #16]	; (8004b6c <vTaskSuspendAll+0x18>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	4a03      	ldr	r2, [pc, #12]	; (8004b6c <vTaskSuspendAll+0x18>)
 8004b60:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004b62:	bf00      	nop
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	20001108 	.word	0x20001108

08004b70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004b76:	2300      	movs	r3, #0
 8004b78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004b7e:	f000 ffd1 	bl	8005b24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004b82:	4b39      	ldr	r3, [pc, #228]	; (8004c68 <xTaskResumeAll+0xf8>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	3b01      	subs	r3, #1
 8004b88:	4a37      	ldr	r2, [pc, #220]	; (8004c68 <xTaskResumeAll+0xf8>)
 8004b8a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b8c:	4b36      	ldr	r3, [pc, #216]	; (8004c68 <xTaskResumeAll+0xf8>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d162      	bne.n	8004c5a <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004b94:	4b35      	ldr	r3, [pc, #212]	; (8004c6c <xTaskResumeAll+0xfc>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d05e      	beq.n	8004c5a <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b9c:	e02f      	b.n	8004bfe <xTaskResumeAll+0x8e>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b9e:	4b34      	ldr	r3, [pc, #208]	; (8004c70 <xTaskResumeAll+0x100>)
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	3318      	adds	r3, #24
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7ff fa0a 	bl	8003fc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	3304      	adds	r3, #4
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7ff fa05 	bl	8003fc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bbe:	4b2d      	ldr	r3, [pc, #180]	; (8004c74 <xTaskResumeAll+0x104>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d903      	bls.n	8004bce <xTaskResumeAll+0x5e>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bca:	4a2a      	ldr	r2, [pc, #168]	; (8004c74 <xTaskResumeAll+0x104>)
 8004bcc:	6013      	str	r3, [r2, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4413      	add	r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	4a27      	ldr	r2, [pc, #156]	; (8004c78 <xTaskResumeAll+0x108>)
 8004bdc:	441a      	add	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	3304      	adds	r3, #4
 8004be2:	4619      	mov	r1, r3
 8004be4:	4610      	mov	r0, r2
 8004be6:	f7ff f990 	bl	8003f0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bee:	4b23      	ldr	r3, [pc, #140]	; (8004c7c <xTaskResumeAll+0x10c>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d302      	bcc.n	8004bfe <xTaskResumeAll+0x8e>
					{
						xYieldPending = pdTRUE;
 8004bf8:	4b21      	ldr	r3, [pc, #132]	; (8004c80 <xTaskResumeAll+0x110>)
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004bfe:	4b1c      	ldr	r3, [pc, #112]	; (8004c70 <xTaskResumeAll+0x100>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1cb      	bne.n	8004b9e <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d001      	beq.n	8004c10 <xTaskResumeAll+0xa0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004c0c:	f000 fadc 	bl	80051c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004c10:	4b1c      	ldr	r3, [pc, #112]	; (8004c84 <xTaskResumeAll+0x114>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d010      	beq.n	8004c3e <xTaskResumeAll+0xce>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004c1c:	f000 f846 	bl	8004cac <xTaskIncrementTick>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d002      	beq.n	8004c2c <xTaskResumeAll+0xbc>
							{
								xYieldPending = pdTRUE;
 8004c26:	4b16      	ldr	r3, [pc, #88]	; (8004c80 <xTaskResumeAll+0x110>)
 8004c28:	2201      	movs	r2, #1
 8004c2a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1f1      	bne.n	8004c1c <xTaskResumeAll+0xac>

						uxPendedTicks = 0;
 8004c38:	4b12      	ldr	r3, [pc, #72]	; (8004c84 <xTaskResumeAll+0x114>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004c3e:	4b10      	ldr	r3, [pc, #64]	; (8004c80 <xTaskResumeAll+0x110>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d009      	beq.n	8004c5a <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004c46:	2301      	movs	r3, #1
 8004c48:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004c4a:	4b0f      	ldr	r3, [pc, #60]	; (8004c88 <xTaskResumeAll+0x118>)
 8004c4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c50:	601a      	str	r2, [r3, #0]
 8004c52:	f3bf 8f4f 	dsb	sy
 8004c56:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c5a:	f000 ff7f 	bl	8005b5c <vPortExitCritical>

	return xAlreadyYielded;
 8004c5e:	68bb      	ldr	r3, [r7, #8]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	20001108 	.word	0x20001108
 8004c6c:	200010e0 	.word	0x200010e0
 8004c70:	200010a0 	.word	0x200010a0
 8004c74:	200010e8 	.word	0x200010e8
 8004c78:	20000c10 	.word	0x20000c10
 8004c7c:	20000c0c 	.word	0x20000c0c
 8004c80:	200010f4 	.word	0x200010f4
 8004c84:	200010f0 	.word	0x200010f0
 8004c88:	e000ed04 	.word	0xe000ed04

08004c8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004c92:	4b05      	ldr	r3, [pc, #20]	; (8004ca8 <xTaskGetTickCount+0x1c>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004c98:	687b      	ldr	r3, [r7, #4]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	200010e4 	.word	0x200010e4

08004cac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cb6:	4b46      	ldr	r3, [pc, #280]	; (8004dd0 <xTaskIncrementTick+0x124>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d178      	bne.n	8004db0 <xTaskIncrementTick+0x104>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004cbe:	4b45      	ldr	r3, [pc, #276]	; (8004dd4 <xTaskIncrementTick+0x128>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004cc6:	4a43      	ldr	r2, [pc, #268]	; (8004dd4 <xTaskIncrementTick+0x128>)
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d110      	bne.n	8004cf4 <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 8004cd2:	4b41      	ldr	r3, [pc, #260]	; (8004dd8 <xTaskIncrementTick+0x12c>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	60fb      	str	r3, [r7, #12]
 8004cd8:	4b40      	ldr	r3, [pc, #256]	; (8004ddc <xTaskIncrementTick+0x130>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a3e      	ldr	r2, [pc, #248]	; (8004dd8 <xTaskIncrementTick+0x12c>)
 8004cde:	6013      	str	r3, [r2, #0]
 8004ce0:	4a3e      	ldr	r2, [pc, #248]	; (8004ddc <xTaskIncrementTick+0x130>)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6013      	str	r3, [r2, #0]
 8004ce6:	4b3e      	ldr	r3, [pc, #248]	; (8004de0 <xTaskIncrementTick+0x134>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	3301      	adds	r3, #1
 8004cec:	4a3c      	ldr	r2, [pc, #240]	; (8004de0 <xTaskIncrementTick+0x134>)
 8004cee:	6013      	str	r3, [r2, #0]
 8004cf0:	f000 fa6a 	bl	80051c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004cf4:	4b3b      	ldr	r3, [pc, #236]	; (8004de4 <xTaskIncrementTick+0x138>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d349      	bcc.n	8004d92 <xTaskIncrementTick+0xe6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cfe:	4b36      	ldr	r3, [pc, #216]	; (8004dd8 <xTaskIncrementTick+0x12c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d104      	bne.n	8004d12 <xTaskIncrementTick+0x66>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d08:	4b36      	ldr	r3, [pc, #216]	; (8004de4 <xTaskIncrementTick+0x138>)
 8004d0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d0e:	601a      	str	r2, [r3, #0]
					break;
 8004d10:	e03f      	b.n	8004d92 <xTaskIncrementTick+0xe6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d12:	4b31      	ldr	r3, [pc, #196]	; (8004dd8 <xTaskIncrementTick+0x12c>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d203      	bcs.n	8004d32 <xTaskIncrementTick+0x86>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004d2a:	4a2e      	ldr	r2, [pc, #184]	; (8004de4 <xTaskIncrementTick+0x138>)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004d30:	e02f      	b.n	8004d92 <xTaskIncrementTick+0xe6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	3304      	adds	r3, #4
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7ff f944 	bl	8003fc4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d004      	beq.n	8004d4e <xTaskIncrementTick+0xa2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	3318      	adds	r3, #24
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7ff f93b 	bl	8003fc4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d52:	4b25      	ldr	r3, [pc, #148]	; (8004de8 <xTaskIncrementTick+0x13c>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d903      	bls.n	8004d62 <xTaskIncrementTick+0xb6>
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5e:	4a22      	ldr	r2, [pc, #136]	; (8004de8 <xTaskIncrementTick+0x13c>)
 8004d60:	6013      	str	r3, [r2, #0]
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d66:	4613      	mov	r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4413      	add	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4a1f      	ldr	r2, [pc, #124]	; (8004dec <xTaskIncrementTick+0x140>)
 8004d70:	441a      	add	r2, r3
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	3304      	adds	r3, #4
 8004d76:	4619      	mov	r1, r3
 8004d78:	4610      	mov	r0, r2
 8004d7a:	f7ff f8c6 	bl	8003f0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d82:	4b1b      	ldr	r3, [pc, #108]	; (8004df0 <xTaskIncrementTick+0x144>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d3b8      	bcc.n	8004cfe <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d90:	e7b5      	b.n	8004cfe <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004d92:	4b17      	ldr	r3, [pc, #92]	; (8004df0 <xTaskIncrementTick+0x144>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d98:	4914      	ldr	r1, [pc, #80]	; (8004dec <xTaskIncrementTick+0x140>)
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4413      	add	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	440b      	add	r3, r1
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d907      	bls.n	8004dba <xTaskIncrementTick+0x10e>
			{
				xSwitchRequired = pdTRUE;
 8004daa:	2301      	movs	r3, #1
 8004dac:	617b      	str	r3, [r7, #20]
 8004dae:	e004      	b.n	8004dba <xTaskIncrementTick+0x10e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004db0:	4b10      	ldr	r3, [pc, #64]	; (8004df4 <xTaskIncrementTick+0x148>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	3301      	adds	r3, #1
 8004db6:	4a0f      	ldr	r2, [pc, #60]	; (8004df4 <xTaskIncrementTick+0x148>)
 8004db8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004dba:	4b0f      	ldr	r3, [pc, #60]	; (8004df8 <xTaskIncrementTick+0x14c>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d001      	beq.n	8004dc6 <xTaskIncrementTick+0x11a>
		{
			xSwitchRequired = pdTRUE;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004dc6:	697b      	ldr	r3, [r7, #20]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3718      	adds	r7, #24
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	20001108 	.word	0x20001108
 8004dd4:	200010e4 	.word	0x200010e4
 8004dd8:	20001098 	.word	0x20001098
 8004ddc:	2000109c 	.word	0x2000109c
 8004de0:	200010f8 	.word	0x200010f8
 8004de4:	20001100 	.word	0x20001100
 8004de8:	200010e8 	.word	0x200010e8
 8004dec:	20000c10 	.word	0x20000c10
 8004df0:	20000c0c 	.word	0x20000c0c
 8004df4:	200010f0 	.word	0x200010f0
 8004df8:	200010f4 	.word	0x200010f4

08004dfc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e02:	4b21      	ldr	r3, [pc, #132]	; (8004e88 <vTaskSwitchContext+0x8c>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d003      	beq.n	8004e12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004e0a:	4b20      	ldr	r3, [pc, #128]	; (8004e8c <vTaskSwitchContext+0x90>)
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004e10:	e033      	b.n	8004e7a <vTaskSwitchContext+0x7e>
		xYieldPending = pdFALSE;
 8004e12:	4b1e      	ldr	r3, [pc, #120]	; (8004e8c <vTaskSwitchContext+0x90>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e18:	4b1d      	ldr	r3, [pc, #116]	; (8004e90 <vTaskSwitchContext+0x94>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	607b      	str	r3, [r7, #4]
 8004e1e:	e002      	b.n	8004e26 <vTaskSwitchContext+0x2a>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	3b01      	subs	r3, #1
 8004e24:	607b      	str	r3, [r7, #4]
 8004e26:	491b      	ldr	r1, [pc, #108]	; (8004e94 <vTaskSwitchContext+0x98>)
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4413      	add	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	440b      	add	r3, r1
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d0f2      	beq.n	8004e20 <vTaskSwitchContext+0x24>
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4413      	add	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4a13      	ldr	r2, [pc, #76]	; (8004e94 <vTaskSwitchContext+0x98>)
 8004e46:	4413      	add	r3, r2
 8004e48:	603b      	str	r3, [r7, #0]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	605a      	str	r2, [r3, #4]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	3308      	adds	r3, #8
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d104      	bne.n	8004e6a <vTaskSwitchContext+0x6e>
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	685a      	ldr	r2, [r3, #4]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	605a      	str	r2, [r3, #4]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	4a09      	ldr	r2, [pc, #36]	; (8004e98 <vTaskSwitchContext+0x9c>)
 8004e72:	6013      	str	r3, [r2, #0]
 8004e74:	4a06      	ldr	r2, [pc, #24]	; (8004e90 <vTaskSwitchContext+0x94>)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6013      	str	r3, [r2, #0]
}
 8004e7a:	bf00      	nop
 8004e7c:	370c      	adds	r7, #12
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	20001108 	.word	0x20001108
 8004e8c:	200010f4 	.word	0x200010f4
 8004e90:	200010e8 	.word	0x200010e8
 8004e94:	20000c10 	.word	0x20000c10
 8004e98:	20000c0c 	.word	0x20000c0c

08004e9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ea6:	4b07      	ldr	r3, [pc, #28]	; (8004ec4 <vTaskPlaceOnEventList+0x28>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	3318      	adds	r3, #24
 8004eac:	4619      	mov	r1, r3
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f7ff f84f 	bl	8003f52 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	6838      	ldr	r0, [r7, #0]
 8004eb8:	f000 fa10 	bl	80052dc <prvAddCurrentTaskToDelayedList>
}
 8004ebc:	bf00      	nop
 8004ebe:	3708      	adds	r7, #8
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	20000c0c 	.word	0x20000c0c

08004ec8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ed4:	4b0a      	ldr	r3, [pc, #40]	; (8004f00 <vTaskPlaceOnEventListRestricted+0x38>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	3318      	adds	r3, #24
 8004eda:	4619      	mov	r1, r3
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f7ff f814 	bl	8003f0a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d002      	beq.n	8004eee <vTaskPlaceOnEventListRestricted+0x26>
		{
			xTicksToWait = portMAX_DELAY;
 8004ee8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004eec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004eee:	6879      	ldr	r1, [r7, #4]
 8004ef0:	68b8      	ldr	r0, [r7, #8]
 8004ef2:	f000 f9f3 	bl	80052dc <prvAddCurrentTaskToDelayedList>
	}
 8004ef6:	bf00      	nop
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	20000c0c 	.word	0x20000c0c

08004f04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	3318      	adds	r3, #24
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7ff f853 	bl	8003fc4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f1e:	4b1e      	ldr	r3, [pc, #120]	; (8004f98 <xTaskRemoveFromEventList+0x94>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d11d      	bne.n	8004f62 <xTaskRemoveFromEventList+0x5e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	3304      	adds	r3, #4
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7ff f84a 	bl	8003fc4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f34:	4b19      	ldr	r3, [pc, #100]	; (8004f9c <xTaskRemoveFromEventList+0x98>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d903      	bls.n	8004f44 <xTaskRemoveFromEventList+0x40>
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f40:	4a16      	ldr	r2, [pc, #88]	; (8004f9c <xTaskRemoveFromEventList+0x98>)
 8004f42:	6013      	str	r3, [r2, #0]
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f48:	4613      	mov	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4413      	add	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4a13      	ldr	r2, [pc, #76]	; (8004fa0 <xTaskRemoveFromEventList+0x9c>)
 8004f52:	441a      	add	r2, r3
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	3304      	adds	r3, #4
 8004f58:	4619      	mov	r1, r3
 8004f5a:	4610      	mov	r0, r2
 8004f5c:	f7fe ffd5 	bl	8003f0a <vListInsertEnd>
 8004f60:	e005      	b.n	8004f6e <xTaskRemoveFromEventList+0x6a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	3318      	adds	r3, #24
 8004f66:	4619      	mov	r1, r3
 8004f68:	480e      	ldr	r0, [pc, #56]	; (8004fa4 <xTaskRemoveFromEventList+0xa0>)
 8004f6a:	f7fe ffce 	bl	8003f0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f72:	4b0d      	ldr	r3, [pc, #52]	; (8004fa8 <xTaskRemoveFromEventList+0xa4>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d905      	bls.n	8004f88 <xTaskRemoveFromEventList+0x84>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004f80:	4b0a      	ldr	r3, [pc, #40]	; (8004fac <xTaskRemoveFromEventList+0xa8>)
 8004f82:	2201      	movs	r2, #1
 8004f84:	601a      	str	r2, [r3, #0]
 8004f86:	e001      	b.n	8004f8c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		xReturn = pdFALSE;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	20001108 	.word	0x20001108
 8004f9c:	200010e8 	.word	0x200010e8
 8004fa0:	20000c10 	.word	0x20000c10
 8004fa4:	200010a0 	.word	0x200010a0
 8004fa8:	20000c0c 	.word	0x20000c0c
 8004fac:	200010f4 	.word	0x200010f4

08004fb0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004fb8:	4b06      	ldr	r3, [pc, #24]	; (8004fd4 <vTaskInternalSetTimeOutState+0x24>)
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004fc0:	4b05      	ldr	r3, [pc, #20]	; (8004fd8 <vTaskInternalSetTimeOutState+0x28>)
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	605a      	str	r2, [r3, #4]
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr
 8004fd4:	200010f8 	.word	0x200010f8
 8004fd8:	200010e4 	.word	0x200010e4

08004fdc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 8004fe6:	f000 fd9d 	bl	8005b24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004fea:	4b1d      	ldr	r3, [pc, #116]	; (8005060 <xTaskCheckForTimeOut+0x84>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005002:	d102      	bne.n	800500a <xTaskCheckForTimeOut+0x2e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005004:	2300      	movs	r3, #0
 8005006:	617b      	str	r3, [r7, #20]
 8005008:	e023      	b.n	8005052 <xTaskCheckForTimeOut+0x76>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	4b15      	ldr	r3, [pc, #84]	; (8005064 <xTaskCheckForTimeOut+0x88>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	429a      	cmp	r2, r3
 8005014:	d007      	beq.n	8005026 <xTaskCheckForTimeOut+0x4a>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	429a      	cmp	r2, r3
 800501e:	d302      	bcc.n	8005026 <xTaskCheckForTimeOut+0x4a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005020:	2301      	movs	r3, #1
 8005022:	617b      	str	r3, [r7, #20]
 8005024:	e015      	b.n	8005052 <xTaskCheckForTimeOut+0x76>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	429a      	cmp	r2, r3
 800502e:	d20b      	bcs.n	8005048 <xTaskCheckForTimeOut+0x6c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	1ad2      	subs	r2, r2, r3
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f7ff ffb7 	bl	8004fb0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005042:	2300      	movs	r3, #0
 8005044:	617b      	str	r3, [r7, #20]
 8005046:	e004      	b.n	8005052 <xTaskCheckForTimeOut+0x76>
		}
		else
		{
			*pxTicksToWait = 0;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	2200      	movs	r2, #0
 800504c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800504e:	2301      	movs	r3, #1
 8005050:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8005052:	f000 fd83 	bl	8005b5c <vPortExitCritical>

	return xReturn;
 8005056:	697b      	ldr	r3, [r7, #20]
}
 8005058:	4618      	mov	r0, r3
 800505a:	3718      	adds	r7, #24
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	200010e4 	.word	0x200010e4
 8005064:	200010f8 	.word	0x200010f8

08005068 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005068:	b480      	push	{r7}
 800506a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800506c:	4b03      	ldr	r3, [pc, #12]	; (800507c <vTaskMissedYield+0x14>)
 800506e:	2201      	movs	r2, #1
 8005070:	601a      	str	r2, [r3, #0]
}
 8005072:	bf00      	nop
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr
 800507c:	200010f4 	.word	0x200010f4

08005080 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005088:	f000 f852 	bl	8005130 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800508c:	4b06      	ldr	r3, [pc, #24]	; (80050a8 <prvIdleTask+0x28>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d9f9      	bls.n	8005088 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005094:	4b05      	ldr	r3, [pc, #20]	; (80050ac <prvIdleTask+0x2c>)
 8005096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800509a:	601a      	str	r2, [r3, #0]
 800509c:	f3bf 8f4f 	dsb	sy
 80050a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80050a4:	e7f0      	b.n	8005088 <prvIdleTask+0x8>
 80050a6:	bf00      	nop
 80050a8:	20000c10 	.word	0x20000c10
 80050ac:	e000ed04 	.word	0xe000ed04

080050b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050b6:	2300      	movs	r3, #0
 80050b8:	607b      	str	r3, [r7, #4]
 80050ba:	e00c      	b.n	80050d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	4613      	mov	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4413      	add	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4a12      	ldr	r2, [pc, #72]	; (8005110 <prvInitialiseTaskLists+0x60>)
 80050c8:	4413      	add	r3, r2
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fe fef0 	bl	8003eb0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	3301      	adds	r3, #1
 80050d4:	607b      	str	r3, [r7, #4]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2b37      	cmp	r3, #55	; 0x37
 80050da:	d9ef      	bls.n	80050bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80050dc:	480d      	ldr	r0, [pc, #52]	; (8005114 <prvInitialiseTaskLists+0x64>)
 80050de:	f7fe fee7 	bl	8003eb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80050e2:	480d      	ldr	r0, [pc, #52]	; (8005118 <prvInitialiseTaskLists+0x68>)
 80050e4:	f7fe fee4 	bl	8003eb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80050e8:	480c      	ldr	r0, [pc, #48]	; (800511c <prvInitialiseTaskLists+0x6c>)
 80050ea:	f7fe fee1 	bl	8003eb0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80050ee:	480c      	ldr	r0, [pc, #48]	; (8005120 <prvInitialiseTaskLists+0x70>)
 80050f0:	f7fe fede 	bl	8003eb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80050f4:	480b      	ldr	r0, [pc, #44]	; (8005124 <prvInitialiseTaskLists+0x74>)
 80050f6:	f7fe fedb 	bl	8003eb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80050fa:	4b0b      	ldr	r3, [pc, #44]	; (8005128 <prvInitialiseTaskLists+0x78>)
 80050fc:	4a05      	ldr	r2, [pc, #20]	; (8005114 <prvInitialiseTaskLists+0x64>)
 80050fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005100:	4b0a      	ldr	r3, [pc, #40]	; (800512c <prvInitialiseTaskLists+0x7c>)
 8005102:	4a05      	ldr	r2, [pc, #20]	; (8005118 <prvInitialiseTaskLists+0x68>)
 8005104:	601a      	str	r2, [r3, #0]
}
 8005106:	bf00      	nop
 8005108:	3708      	adds	r7, #8
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	20000c10 	.word	0x20000c10
 8005114:	20001070 	.word	0x20001070
 8005118:	20001084 	.word	0x20001084
 800511c:	200010a0 	.word	0x200010a0
 8005120:	200010b4 	.word	0x200010b4
 8005124:	200010cc 	.word	0x200010cc
 8005128:	20001098 	.word	0x20001098
 800512c:	2000109c 	.word	0x2000109c

08005130 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005136:	e019      	b.n	800516c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005138:	f000 fcf4 	bl	8005b24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800513c:	4b10      	ldr	r3, [pc, #64]	; (8005180 <prvCheckTasksWaitingTermination+0x50>)
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	3304      	adds	r3, #4
 8005148:	4618      	mov	r0, r3
 800514a:	f7fe ff3b 	bl	8003fc4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800514e:	4b0d      	ldr	r3, [pc, #52]	; (8005184 <prvCheckTasksWaitingTermination+0x54>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	3b01      	subs	r3, #1
 8005154:	4a0b      	ldr	r2, [pc, #44]	; (8005184 <prvCheckTasksWaitingTermination+0x54>)
 8005156:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005158:	4b0b      	ldr	r3, [pc, #44]	; (8005188 <prvCheckTasksWaitingTermination+0x58>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	3b01      	subs	r3, #1
 800515e:	4a0a      	ldr	r2, [pc, #40]	; (8005188 <prvCheckTasksWaitingTermination+0x58>)
 8005160:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005162:	f000 fcfb 	bl	8005b5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f810 	bl	800518c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800516c:	4b06      	ldr	r3, [pc, #24]	; (8005188 <prvCheckTasksWaitingTermination+0x58>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1e1      	bne.n	8005138 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005174:	bf00      	nop
 8005176:	bf00      	nop
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	200010b4 	.word	0x200010b4
 8005184:	200010e0 	.word	0x200010e0
 8005188:	200010c8 	.word	0x200010c8

0800518c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800519a:	2b00      	cmp	r3, #0
 800519c:	d108      	bne.n	80051b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 fe24 	bl	8005df0 <vPortFree>
				vPortFree( pxTCB );
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 fe21 	bl	8005df0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80051ae:	e007      	b.n	80051c0 <prvDeleteTCB+0x34>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d102      	bne.n	80051c0 <prvDeleteTCB+0x34>
				vPortFree( pxTCB );
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 fe18 	bl	8005df0 <vPortFree>
	}
 80051c0:	bf00      	nop
 80051c2:	3708      	adds	r7, #8
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051ce:	4b0c      	ldr	r3, [pc, #48]	; (8005200 <prvResetNextTaskUnblockTime+0x38>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d104      	bne.n	80051e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80051d8:	4b0a      	ldr	r3, [pc, #40]	; (8005204 <prvResetNextTaskUnblockTime+0x3c>)
 80051da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80051e0:	e008      	b.n	80051f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051e2:	4b07      	ldr	r3, [pc, #28]	; (8005200 <prvResetNextTaskUnblockTime+0x38>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	4a04      	ldr	r2, [pc, #16]	; (8005204 <prvResetNextTaskUnblockTime+0x3c>)
 80051f2:	6013      	str	r3, [r2, #0]
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	20001098 	.word	0x20001098
 8005204:	20001100 	.word	0x20001100

08005208 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800520e:	4b0b      	ldr	r3, [pc, #44]	; (800523c <xTaskGetSchedulerState+0x34>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d102      	bne.n	800521c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005216:	2301      	movs	r3, #1
 8005218:	607b      	str	r3, [r7, #4]
 800521a:	e008      	b.n	800522e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800521c:	4b08      	ldr	r3, [pc, #32]	; (8005240 <xTaskGetSchedulerState+0x38>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d102      	bne.n	800522a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005224:	2302      	movs	r3, #2
 8005226:	607b      	str	r3, [r7, #4]
 8005228:	e001      	b.n	800522e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800522a:	2300      	movs	r3, #0
 800522c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800522e:	687b      	ldr	r3, [r7, #4]
	}
 8005230:	4618      	mov	r0, r3
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr
 800523c:	200010ec 	.word	0x200010ec
 8005240:	20001108 	.word	0x20001108

08005244 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005250:	2300      	movs	r3, #0
 8005252:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d037      	beq.n	80052ca <xTaskPriorityDisinherit+0x86>
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800525e:	1e5a      	subs	r2, r3, #1
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800526c:	429a      	cmp	r2, r3
 800526e:	d02c      	beq.n	80052ca <xTaskPriorityDisinherit+0x86>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005274:	2b00      	cmp	r3, #0
 8005276:	d128      	bne.n	80052ca <xTaskPriorityDisinherit+0x86>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	3304      	adds	r3, #4
 800527c:	4618      	mov	r0, r3
 800527e:	f7fe fea1 	bl	8003fc4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800529a:	4b0e      	ldr	r3, [pc, #56]	; (80052d4 <xTaskPriorityDisinherit+0x90>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d903      	bls.n	80052aa <xTaskPriorityDisinherit+0x66>
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a6:	4a0b      	ldr	r2, [pc, #44]	; (80052d4 <xTaskPriorityDisinherit+0x90>)
 80052a8:	6013      	str	r3, [r2, #0]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ae:	4613      	mov	r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4413      	add	r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	4a08      	ldr	r2, [pc, #32]	; (80052d8 <xTaskPriorityDisinherit+0x94>)
 80052b8:	441a      	add	r2, r3
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	3304      	adds	r3, #4
 80052be:	4619      	mov	r1, r3
 80052c0:	4610      	mov	r0, r2
 80052c2:	f7fe fe22 	bl	8003f0a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80052c6:	2301      	movs	r3, #1
 80052c8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80052ca:	68fb      	ldr	r3, [r7, #12]
	}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	200010e8 	.word	0x200010e8
 80052d8:	20000c10 	.word	0x20000c10

080052dc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80052e6:	4b21      	ldr	r3, [pc, #132]	; (800536c <prvAddCurrentTaskToDelayedList+0x90>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052ec:	4b20      	ldr	r3, [pc, #128]	; (8005370 <prvAddCurrentTaskToDelayedList+0x94>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	3304      	adds	r3, #4
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fe fe66 	bl	8003fc4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052fe:	d10a      	bne.n	8005316 <prvAddCurrentTaskToDelayedList+0x3a>
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d007      	beq.n	8005316 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005306:	4b1a      	ldr	r3, [pc, #104]	; (8005370 <prvAddCurrentTaskToDelayedList+0x94>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	3304      	adds	r3, #4
 800530c:	4619      	mov	r1, r3
 800530e:	4819      	ldr	r0, [pc, #100]	; (8005374 <prvAddCurrentTaskToDelayedList+0x98>)
 8005310:	f7fe fdfb 	bl	8003f0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005314:	e026      	b.n	8005364 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4413      	add	r3, r2
 800531c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800531e:	4b14      	ldr	r3, [pc, #80]	; (8005370 <prvAddCurrentTaskToDelayedList+0x94>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68ba      	ldr	r2, [r7, #8]
 8005324:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005326:	68ba      	ldr	r2, [r7, #8]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	429a      	cmp	r2, r3
 800532c:	d209      	bcs.n	8005342 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800532e:	4b12      	ldr	r3, [pc, #72]	; (8005378 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	4b0f      	ldr	r3, [pc, #60]	; (8005370 <prvAddCurrentTaskToDelayedList+0x94>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	3304      	adds	r3, #4
 8005338:	4619      	mov	r1, r3
 800533a:	4610      	mov	r0, r2
 800533c:	f7fe fe09 	bl	8003f52 <vListInsert>
}
 8005340:	e010      	b.n	8005364 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005342:	4b0e      	ldr	r3, [pc, #56]	; (800537c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	4b0a      	ldr	r3, [pc, #40]	; (8005370 <prvAddCurrentTaskToDelayedList+0x94>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	3304      	adds	r3, #4
 800534c:	4619      	mov	r1, r3
 800534e:	4610      	mov	r0, r2
 8005350:	f7fe fdff 	bl	8003f52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005354:	4b0a      	ldr	r3, [pc, #40]	; (8005380 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	429a      	cmp	r2, r3
 800535c:	d202      	bcs.n	8005364 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800535e:	4a08      	ldr	r2, [pc, #32]	; (8005380 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	6013      	str	r3, [r2, #0]
}
 8005364:	bf00      	nop
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	200010e4 	.word	0x200010e4
 8005370:	20000c0c 	.word	0x20000c0c
 8005374:	200010cc 	.word	0x200010cc
 8005378:	2000109c 	.word	0x2000109c
 800537c:	20001098 	.word	0x20001098
 8005380:	20001100 	.word	0x20001100

08005384 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b088      	sub	sp, #32
 8005388:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800538a:	2300      	movs	r3, #0
 800538c:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800538e:	f000 faa7 	bl	80058e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005392:	4b15      	ldr	r3, [pc, #84]	; (80053e8 <xTimerCreateTimerTask+0x64>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d020      	beq.n	80053dc <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800539a:	2300      	movs	r3, #0
 800539c:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800539e:	2300      	movs	r3, #0
 80053a0:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80053a2:	463a      	mov	r2, r7
 80053a4:	1d39      	adds	r1, r7, #4
 80053a6:	f107 0308 	add.w	r3, r7, #8
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7fe fd66 	bl	8003e7c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80053b0:	6839      	ldr	r1, [r7, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	9202      	str	r2, [sp, #8]
 80053b8:	9301      	str	r3, [sp, #4]
 80053ba:	2302      	movs	r3, #2
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	2300      	movs	r3, #0
 80053c0:	460a      	mov	r2, r1
 80053c2:	490a      	ldr	r1, [pc, #40]	; (80053ec <xTimerCreateTimerTask+0x68>)
 80053c4:	480a      	ldr	r0, [pc, #40]	; (80053f0 <xTimerCreateTimerTask+0x6c>)
 80053c6:	f7ff f9df 	bl	8004788 <xTaskCreateStatic>
 80053ca:	4603      	mov	r3, r0
 80053cc:	4a09      	ldr	r2, [pc, #36]	; (80053f4 <xTimerCreateTimerTask+0x70>)
 80053ce:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80053d0:	4b08      	ldr	r3, [pc, #32]	; (80053f4 <xTimerCreateTimerTask+0x70>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d001      	beq.n	80053dc <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 80053d8:	2301      	movs	r3, #1
 80053da:	60fb      	str	r3, [r7, #12]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
 80053dc:	68fb      	ldr	r3, [r7, #12]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	2000113c 	.word	0x2000113c
 80053ec:	08006094 	.word	0x08006094
 80053f0:	080054f9 	.word	0x080054f9
 80053f4:	20001140 	.word	0x20001140

080053f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b08a      	sub	sp, #40	; 0x28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
 8005404:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005406:	2300      	movs	r3, #0
 8005408:	627b      	str	r3, [r7, #36]	; 0x24

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800540a:	4b1a      	ldr	r3, [pc, #104]	; (8005474 <xTimerGenericCommand+0x7c>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d02a      	beq.n	8005468 <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	2b05      	cmp	r3, #5
 8005422:	dc18      	bgt.n	8005456 <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005424:	f7ff fef0 	bl	8005208 <xTaskGetSchedulerState>
 8005428:	4603      	mov	r3, r0
 800542a:	2b02      	cmp	r3, #2
 800542c:	d109      	bne.n	8005442 <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800542e:	4b11      	ldr	r3, [pc, #68]	; (8005474 <xTimerGenericCommand+0x7c>)
 8005430:	6818      	ldr	r0, [r3, #0]
 8005432:	f107 0114 	add.w	r1, r7, #20
 8005436:	2300      	movs	r3, #0
 8005438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800543a:	f7fe fe8d 	bl	8004158 <xQueueGenericSend>
 800543e:	6278      	str	r0, [r7, #36]	; 0x24
 8005440:	e012      	b.n	8005468 <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005442:	4b0c      	ldr	r3, [pc, #48]	; (8005474 <xTimerGenericCommand+0x7c>)
 8005444:	6818      	ldr	r0, [r3, #0]
 8005446:	f107 0114 	add.w	r1, r7, #20
 800544a:	2300      	movs	r3, #0
 800544c:	2200      	movs	r2, #0
 800544e:	f7fe fe83 	bl	8004158 <xQueueGenericSend>
 8005452:	6278      	str	r0, [r7, #36]	; 0x24
 8005454:	e008      	b.n	8005468 <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005456:	4b07      	ldr	r3, [pc, #28]	; (8005474 <xTimerGenericCommand+0x7c>)
 8005458:	6818      	ldr	r0, [r3, #0]
 800545a:	f107 0114 	add.w	r1, r7, #20
 800545e:	2300      	movs	r3, #0
 8005460:	683a      	ldr	r2, [r7, #0]
 8005462:	f7fe ff23 	bl	80042ac <xQueueGenericSendFromISR>
 8005466:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800546a:	4618      	mov	r0, r3
 800546c:	3728      	adds	r7, #40	; 0x28
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	2000113c 	.word	0x2000113c

08005478 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af02      	add	r7, sp, #8
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005482:	4b1c      	ldr	r3, [pc, #112]	; (80054f4 <prvProcessExpiredTimer+0x7c>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	3304      	adds	r3, #4
 8005490:	4618      	mov	r0, r3
 8005492:	f7fe fd97 	bl	8003fc4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800549c:	f003 0304 	and.w	r3, r3, #4
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d015      	beq.n	80054d0 <prvProcessExpiredTimer+0x58>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	699a      	ldr	r2, [r3, #24]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	18d1      	adds	r1, r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f000 f8c5 	bl	8005640 <prvInsertTimerInActiveList>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d012      	beq.n	80054e2 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80054bc:	2300      	movs	r3, #0
 80054be:	9300      	str	r3, [sp, #0]
 80054c0:	2300      	movs	r3, #0
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	2100      	movs	r1, #0
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	f7ff ff96 	bl	80053f8 <xTimerGenericCommand>
 80054cc:	60b8      	str	r0, [r7, #8]
 80054ce:	e008      	b.n	80054e2 <prvProcessExpiredTimer+0x6a>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054d6:	f023 0301 	bic.w	r3, r3, #1
 80054da:	b2da      	uxtb	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	4798      	blx	r3
}
 80054ea:	bf00      	nop
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	20001134 	.word	0x20001134

080054f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005500:	f107 0308 	add.w	r3, r7, #8
 8005504:	4618      	mov	r0, r3
 8005506:	f000 f857 	bl	80055b8 <prvGetNextExpireTime>
 800550a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	4619      	mov	r1, r3
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f000 f803 	bl	800551c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005516:	f000 f8d5 	bl	80056c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800551a:	e7f1      	b.n	8005500 <prvTimerTask+0x8>

0800551c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005526:	f7ff fb15 	bl	8004b54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800552a:	f107 0308 	add.w	r3, r7, #8
 800552e:	4618      	mov	r0, r3
 8005530:	f000 f866 	bl	8005600 <prvSampleTimeNow>
 8005534:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d130      	bne.n	800559e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10a      	bne.n	8005558 <prvProcessTimerOrBlockTask+0x3c>
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	429a      	cmp	r2, r3
 8005548:	d806      	bhi.n	8005558 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800554a:	f7ff fb11 	bl	8004b70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800554e:	68f9      	ldr	r1, [r7, #12]
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f7ff ff91 	bl	8005478 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005556:	e024      	b.n	80055a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d008      	beq.n	8005570 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800555e:	4b13      	ldr	r3, [pc, #76]	; (80055ac <prvProcessTimerOrBlockTask+0x90>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d101      	bne.n	800556c <prvProcessTimerOrBlockTask+0x50>
 8005568:	2301      	movs	r3, #1
 800556a:	e000      	b.n	800556e <prvProcessTimerOrBlockTask+0x52>
 800556c:	2300      	movs	r3, #0
 800556e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005570:	4b0f      	ldr	r3, [pc, #60]	; (80055b0 <prvProcessTimerOrBlockTask+0x94>)
 8005572:	6818      	ldr	r0, [r3, #0]
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	683a      	ldr	r2, [r7, #0]
 800557c:	4619      	mov	r1, r3
 800557e:	f7ff f8cf 	bl	8004720 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005582:	f7ff faf5 	bl	8004b70 <xTaskResumeAll>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d10a      	bne.n	80055a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800558c:	4b09      	ldr	r3, [pc, #36]	; (80055b4 <prvProcessTimerOrBlockTask+0x98>)
 800558e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005592:	601a      	str	r2, [r3, #0]
 8005594:	f3bf 8f4f 	dsb	sy
 8005598:	f3bf 8f6f 	isb	sy
}
 800559c:	e001      	b.n	80055a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800559e:	f7ff fae7 	bl	8004b70 <xTaskResumeAll>
}
 80055a2:	bf00      	nop
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	20001138 	.word	0x20001138
 80055b0:	2000113c 	.word	0x2000113c
 80055b4:	e000ed04 	.word	0xe000ed04

080055b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80055c0:	4b0e      	ldr	r3, [pc, #56]	; (80055fc <prvGetNextExpireTime+0x44>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <prvGetNextExpireTime+0x16>
 80055ca:	2201      	movs	r2, #1
 80055cc:	e000      	b.n	80055d0 <prvGetNextExpireTime+0x18>
 80055ce:	2200      	movs	r2, #0
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d105      	bne.n	80055e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80055dc:	4b07      	ldr	r3, [pc, #28]	; (80055fc <prvGetNextExpireTime+0x44>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	60fb      	str	r3, [r7, #12]
 80055e6:	e001      	b.n	80055ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80055e8:	2300      	movs	r3, #0
 80055ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80055ec:	68fb      	ldr	r3, [r7, #12]
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3714      	adds	r7, #20
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	20001134 	.word	0x20001134

08005600 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005608:	f7ff fb40 	bl	8004c8c <xTaskGetTickCount>
 800560c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800560e:	4b0b      	ldr	r3, [pc, #44]	; (800563c <prvSampleTimeNow+0x3c>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	429a      	cmp	r2, r3
 8005616:	d205      	bcs.n	8005624 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005618:	f000 f90c 	bl	8005834 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	601a      	str	r2, [r3, #0]
 8005622:	e002      	b.n	800562a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800562a:	4a04      	ldr	r2, [pc, #16]	; (800563c <prvSampleTimeNow+0x3c>)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005630:	68fb      	ldr	r3, [r7, #12]
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	20001144 	.word	0x20001144

08005640 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
 800564c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800564e:	2300      	movs	r3, #0
 8005650:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	68ba      	ldr	r2, [r7, #8]
 8005656:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	429a      	cmp	r2, r3
 8005664:	d812      	bhi.n	800568c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	1ad2      	subs	r2, r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	429a      	cmp	r2, r3
 8005672:	d302      	bcc.n	800567a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005674:	2301      	movs	r3, #1
 8005676:	617b      	str	r3, [r7, #20]
 8005678:	e01b      	b.n	80056b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800567a:	4b10      	ldr	r3, [pc, #64]	; (80056bc <prvInsertTimerInActiveList+0x7c>)
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	3304      	adds	r3, #4
 8005682:	4619      	mov	r1, r3
 8005684:	4610      	mov	r0, r2
 8005686:	f7fe fc64 	bl	8003f52 <vListInsert>
 800568a:	e012      	b.n	80056b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	429a      	cmp	r2, r3
 8005692:	d206      	bcs.n	80056a2 <prvInsertTimerInActiveList+0x62>
 8005694:	68ba      	ldr	r2, [r7, #8]
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	429a      	cmp	r2, r3
 800569a:	d302      	bcc.n	80056a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800569c:	2301      	movs	r3, #1
 800569e:	617b      	str	r3, [r7, #20]
 80056a0:	e007      	b.n	80056b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80056a2:	4b07      	ldr	r3, [pc, #28]	; (80056c0 <prvInsertTimerInActiveList+0x80>)
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	3304      	adds	r3, #4
 80056aa:	4619      	mov	r1, r3
 80056ac:	4610      	mov	r0, r2
 80056ae:	f7fe fc50 	bl	8003f52 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80056b2:	697b      	ldr	r3, [r7, #20]
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3718      	adds	r7, #24
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	20001138 	.word	0x20001138
 80056c0:	20001134 	.word	0x20001134

080056c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b08c      	sub	sp, #48	; 0x30
 80056c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80056ca:	e0a0      	b.n	800580e <prvProcessReceivedCommands+0x14a>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	da0b      	bge.n	80056ea <prvProcessReceivedCommands+0x26>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80056d2:	f107 0308 	add.w	r3, r7, #8
 80056d6:	3304      	adds	r3, #4
 80056d8:	627b      	str	r3, [r7, #36]	; 0x24
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80056da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056e0:	6850      	ldr	r0, [r2, #4]
 80056e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056e4:	6892      	ldr	r2, [r2, #8]
 80056e6:	4611      	mov	r1, r2
 80056e8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f2c0 808d 	blt.w	800580c <prvProcessReceivedCommands+0x148>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80056f6:	6a3b      	ldr	r3, [r7, #32]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d004      	beq.n	8005708 <prvProcessReceivedCommands+0x44>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056fe:	6a3b      	ldr	r3, [r7, #32]
 8005700:	3304      	adds	r3, #4
 8005702:	4618      	mov	r0, r3
 8005704:	f7fe fc5e 	bl	8003fc4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005708:	1d3b      	adds	r3, r7, #4
 800570a:	4618      	mov	r0, r3
 800570c:	f7ff ff78 	bl	8005600 <prvSampleTimeNow>
 8005710:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	2b09      	cmp	r3, #9
 8005716:	d87a      	bhi.n	800580e <prvProcessReceivedCommands+0x14a>
 8005718:	a201      	add	r2, pc, #4	; (adr r2, 8005720 <prvProcessReceivedCommands+0x5c>)
 800571a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571e:	bf00      	nop
 8005720:	08005749 	.word	0x08005749
 8005724:	08005749 	.word	0x08005749
 8005728:	08005749 	.word	0x08005749
 800572c:	080057a3 	.word	0x080057a3
 8005730:	080057b7 	.word	0x080057b7
 8005734:	080057e3 	.word	0x080057e3
 8005738:	08005749 	.word	0x08005749
 800573c:	08005749 	.word	0x08005749
 8005740:	080057a3 	.word	0x080057a3
 8005744:	080057b7 	.word	0x080057b7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005748:	6a3b      	ldr	r3, [r7, #32]
 800574a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800574e:	f043 0301 	orr.w	r3, r3, #1
 8005752:	b2da      	uxtb	r2, r3
 8005754:	6a3b      	ldr	r3, [r7, #32]
 8005756:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	6a3b      	ldr	r3, [r7, #32]
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	18d1      	adds	r1, r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	69fa      	ldr	r2, [r7, #28]
 8005766:	6a38      	ldr	r0, [r7, #32]
 8005768:	f7ff ff6a 	bl	8005640 <prvInsertTimerInActiveList>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d04d      	beq.n	800580e <prvProcessReceivedCommands+0x14a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005772:	6a3b      	ldr	r3, [r7, #32]
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	6a38      	ldr	r0, [r7, #32]
 8005778:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800577a:	6a3b      	ldr	r3, [r7, #32]
 800577c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005780:	f003 0304 	and.w	r3, r3, #4
 8005784:	2b00      	cmp	r3, #0
 8005786:	d042      	beq.n	800580e <prvProcessReceivedCommands+0x14a>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	6a3b      	ldr	r3, [r7, #32]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	441a      	add	r2, r3
 8005790:	2300      	movs	r3, #0
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	2300      	movs	r3, #0
 8005796:	2100      	movs	r1, #0
 8005798:	6a38      	ldr	r0, [r7, #32]
 800579a:	f7ff fe2d 	bl	80053f8 <xTimerGenericCommand>
 800579e:	61b8      	str	r0, [r7, #24]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 80057a0:	e035      	b.n	800580e <prvProcessReceivedCommands+0x14a>

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057a8:	f023 0301 	bic.w	r3, r3, #1
 80057ac:	b2da      	uxtb	r2, r3
 80057ae:	6a3b      	ldr	r3, [r7, #32]
 80057b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80057b4:	e02b      	b.n	800580e <prvProcessReceivedCommands+0x14a>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80057b6:	6a3b      	ldr	r3, [r7, #32]
 80057b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057bc:	f043 0301 	orr.w	r3, r3, #1
 80057c0:	b2da      	uxtb	r2, r3
 80057c2:	6a3b      	ldr	r3, [r7, #32]
 80057c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	6a3b      	ldr	r3, [r7, #32]
 80057cc:	619a      	str	r2, [r3, #24]
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80057ce:	6a3b      	ldr	r3, [r7, #32]
 80057d0:	699a      	ldr	r2, [r3, #24]
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	18d1      	adds	r1, r2, r3
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	69fa      	ldr	r2, [r7, #28]
 80057da:	6a38      	ldr	r0, [r7, #32]
 80057dc:	f7ff ff30 	bl	8005640 <prvInsertTimerInActiveList>
					break;
 80057e0:	e015      	b.n	800580e <prvProcessReceivedCommands+0x14a>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80057e2:	6a3b      	ldr	r3, [r7, #32]
 80057e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057e8:	f003 0302 	and.w	r3, r3, #2
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d103      	bne.n	80057f8 <prvProcessReceivedCommands+0x134>
						{
							vPortFree( pxTimer );
 80057f0:	6a38      	ldr	r0, [r7, #32]
 80057f2:	f000 fafd 	bl	8005df0 <vPortFree>
 80057f6:	e00a      	b.n	800580e <prvProcessReceivedCommands+0x14a>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057fe:	f023 0301 	bic.w	r3, r3, #1
 8005802:	b2da      	uxtb	r2, r3
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800580a:	e000      	b.n	800580e <prvProcessReceivedCommands+0x14a>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800580c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800580e:	4b08      	ldr	r3, [pc, #32]	; (8005830 <prvProcessReceivedCommands+0x16c>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f107 0108 	add.w	r1, r7, #8
 8005816:	2200      	movs	r2, #0
 8005818:	4618      	mov	r0, r3
 800581a:	f7fe fda5 	bl	8004368 <xQueueReceive>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	f47f af53 	bne.w	80056cc <prvProcessReceivedCommands+0x8>
	}
}
 8005826:	bf00      	nop
 8005828:	bf00      	nop
 800582a:	3728      	adds	r7, #40	; 0x28
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	2000113c 	.word	0x2000113c

08005834 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b088      	sub	sp, #32
 8005838:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800583a:	e03a      	b.n	80058b2 <prvSwitchTimerLists+0x7e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800583c:	4b26      	ldr	r3, [pc, #152]	; (80058d8 <prvSwitchTimerLists+0xa4>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005846:	4b24      	ldr	r3, [pc, #144]	; (80058d8 <prvSwitchTimerLists+0xa4>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	3304      	adds	r3, #4
 8005854:	4618      	mov	r0, r3
 8005856:	f7fe fbb5 	bl	8003fc4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005868:	f003 0304 	and.w	r3, r3, #4
 800586c:	2b00      	cmp	r3, #0
 800586e:	d020      	beq.n	80058b2 <prvSwitchTimerLists+0x7e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	4413      	add	r3, r2
 8005878:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	429a      	cmp	r2, r3
 8005880:	d90e      	bls.n	80058a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800588e:	4b12      	ldr	r3, [pc, #72]	; (80058d8 <prvSwitchTimerLists+0xa4>)
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	3304      	adds	r3, #4
 8005896:	4619      	mov	r1, r3
 8005898:	4610      	mov	r0, r2
 800589a:	f7fe fb5a 	bl	8003f52 <vListInsert>
 800589e:	e008      	b.n	80058b2 <prvSwitchTimerLists+0x7e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80058a0:	2300      	movs	r3, #0
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	2300      	movs	r3, #0
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	2100      	movs	r1, #0
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f7ff fda4 	bl	80053f8 <xTimerGenericCommand>
 80058b0:	6078      	str	r0, [r7, #4]
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80058b2:	4b09      	ldr	r3, [pc, #36]	; (80058d8 <prvSwitchTimerLists+0xa4>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1bf      	bne.n	800583c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80058bc:	4b06      	ldr	r3, [pc, #24]	; (80058d8 <prvSwitchTimerLists+0xa4>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80058c2:	4b06      	ldr	r3, [pc, #24]	; (80058dc <prvSwitchTimerLists+0xa8>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a04      	ldr	r2, [pc, #16]	; (80058d8 <prvSwitchTimerLists+0xa4>)
 80058c8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80058ca:	4a04      	ldr	r2, [pc, #16]	; (80058dc <prvSwitchTimerLists+0xa8>)
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	6013      	str	r3, [r2, #0]
}
 80058d0:	bf00      	nop
 80058d2:	3718      	adds	r7, #24
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	20001134 	.word	0x20001134
 80058dc:	20001138 	.word	0x20001138

080058e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80058e6:	f000 f91d 	bl	8005b24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80058ea:	4b15      	ldr	r3, [pc, #84]	; (8005940 <prvCheckForValidListAndQueue+0x60>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d120      	bne.n	8005934 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80058f2:	4814      	ldr	r0, [pc, #80]	; (8005944 <prvCheckForValidListAndQueue+0x64>)
 80058f4:	f7fe fadc 	bl	8003eb0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80058f8:	4813      	ldr	r0, [pc, #76]	; (8005948 <prvCheckForValidListAndQueue+0x68>)
 80058fa:	f7fe fad9 	bl	8003eb0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80058fe:	4b13      	ldr	r3, [pc, #76]	; (800594c <prvCheckForValidListAndQueue+0x6c>)
 8005900:	4a10      	ldr	r2, [pc, #64]	; (8005944 <prvCheckForValidListAndQueue+0x64>)
 8005902:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005904:	4b12      	ldr	r3, [pc, #72]	; (8005950 <prvCheckForValidListAndQueue+0x70>)
 8005906:	4a10      	ldr	r2, [pc, #64]	; (8005948 <prvCheckForValidListAndQueue+0x68>)
 8005908:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800590a:	2300      	movs	r3, #0
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	4b11      	ldr	r3, [pc, #68]	; (8005954 <prvCheckForValidListAndQueue+0x74>)
 8005910:	4a11      	ldr	r2, [pc, #68]	; (8005958 <prvCheckForValidListAndQueue+0x78>)
 8005912:	2110      	movs	r1, #16
 8005914:	200a      	movs	r0, #10
 8005916:	f7fe fbd9 	bl	80040cc <xQueueGenericCreateStatic>
 800591a:	4603      	mov	r3, r0
 800591c:	4a08      	ldr	r2, [pc, #32]	; (8005940 <prvCheckForValidListAndQueue+0x60>)
 800591e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005920:	4b07      	ldr	r3, [pc, #28]	; (8005940 <prvCheckForValidListAndQueue+0x60>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d005      	beq.n	8005934 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005928:	4b05      	ldr	r3, [pc, #20]	; (8005940 <prvCheckForValidListAndQueue+0x60>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	490b      	ldr	r1, [pc, #44]	; (800595c <prvCheckForValidListAndQueue+0x7c>)
 800592e:	4618      	mov	r0, r3
 8005930:	f7fe fecc 	bl	80046cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005934:	f000 f912 	bl	8005b5c <vPortExitCritical>
}
 8005938:	bf00      	nop
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	2000113c 	.word	0x2000113c
 8005944:	2000110c 	.word	0x2000110c
 8005948:	20001120 	.word	0x20001120
 800594c:	20001134 	.word	0x20001134
 8005950:	20001138 	.word	0x20001138
 8005954:	200011e8 	.word	0x200011e8
 8005958:	20001148 	.word	0x20001148
 800595c:	0800609c 	.word	0x0800609c

08005960 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	3b04      	subs	r3, #4
 8005970:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005978:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	3b04      	subs	r3, #4
 800597e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	f023 0201 	bic.w	r2, r3, #1
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	3b04      	subs	r3, #4
 800598e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005990:	4a0c      	ldr	r2, [pc, #48]	; (80059c4 <pxPortInitialiseStack+0x64>)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	3b14      	subs	r3, #20
 800599a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	3b04      	subs	r3, #4
 80059a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f06f 0202 	mvn.w	r2, #2
 80059ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	3b20      	subs	r3, #32
 80059b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80059b6:	68fb      	ldr	r3, [r7, #12]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3714      	adds	r7, #20
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr
 80059c4:	080059c9 	.word	0x080059c9

080059c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80059ce:	2300      	movs	r3, #0
 80059d0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d6:	b672      	cpsid	i
 80059d8:	f383 8811 	msr	BASEPRI, r3
 80059dc:	f3bf 8f6f 	isb	sy
 80059e0:	f3bf 8f4f 	dsb	sy
 80059e4:	b662      	cpsie	i
 80059e6:	607b      	str	r3, [r7, #4]
}
 80059e8:	bf00      	nop

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80059ea:	bf00      	nop
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d0fc      	beq.n	80059ec <prvTaskExitError+0x24>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80059f2:	bf00      	nop
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005a00:	4b07      	ldr	r3, [pc, #28]	; (8005a20 <pxCurrentTCBConst2>)
 8005a02:	6819      	ldr	r1, [r3, #0]
 8005a04:	6808      	ldr	r0, [r1, #0]
 8005a06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a0a:	f380 8809 	msr	PSP, r0
 8005a0e:	f3bf 8f6f 	isb	sy
 8005a12:	f04f 0000 	mov.w	r0, #0
 8005a16:	f380 8811 	msr	BASEPRI, r0
 8005a1a:	4770      	bx	lr
 8005a1c:	f3af 8000 	nop.w

08005a20 <pxCurrentTCBConst2>:
 8005a20:	20000c0c 	.word	0x20000c0c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005a24:	bf00      	nop
 8005a26:	bf00      	nop

08005a28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005a28:	4808      	ldr	r0, [pc, #32]	; (8005a4c <prvPortStartFirstTask+0x24>)
 8005a2a:	6800      	ldr	r0, [r0, #0]
 8005a2c:	6800      	ldr	r0, [r0, #0]
 8005a2e:	f380 8808 	msr	MSP, r0
 8005a32:	f04f 0000 	mov.w	r0, #0
 8005a36:	f380 8814 	msr	CONTROL, r0
 8005a3a:	b662      	cpsie	i
 8005a3c:	b661      	cpsie	f
 8005a3e:	f3bf 8f4f 	dsb	sy
 8005a42:	f3bf 8f6f 	isb	sy
 8005a46:	df00      	svc	0
 8005a48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005a4a:	bf00      	nop
 8005a4c:	e000ed08 	.word	0xe000ed08

08005a50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005a56:	4b2d      	ldr	r3, [pc, #180]	; (8005b0c <xPortStartScheduler+0xbc>)
 8005a58:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	22ff      	movs	r2, #255	; 0xff
 8005a66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a70:	79fb      	ldrb	r3, [r7, #7]
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005a78:	b2da      	uxtb	r2, r3
 8005a7a:	4b25      	ldr	r3, [pc, #148]	; (8005b10 <xPortStartScheduler+0xc0>)
 8005a7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005a7e:	4b25      	ldr	r3, [pc, #148]	; (8005b14 <xPortStartScheduler+0xc4>)
 8005a80:	2207      	movs	r2, #7
 8005a82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a84:	e009      	b.n	8005a9a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005a86:	4b23      	ldr	r3, [pc, #140]	; (8005b14 <xPortStartScheduler+0xc4>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	4a21      	ldr	r2, [pc, #132]	; (8005b14 <xPortStartScheduler+0xc4>)
 8005a8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005a90:	79fb      	ldrb	r3, [r7, #7]
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	005b      	lsls	r3, r3, #1
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a9a:	79fb      	ldrb	r3, [r7, #7]
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aa2:	2b80      	cmp	r3, #128	; 0x80
 8005aa4:	d0ef      	beq.n	8005a86 <xPortStartScheduler+0x36>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005aa6:	4b1b      	ldr	r3, [pc, #108]	; (8005b14 <xPortStartScheduler+0xc4>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	021b      	lsls	r3, r3, #8
 8005aac:	4a19      	ldr	r2, [pc, #100]	; (8005b14 <xPortStartScheduler+0xc4>)
 8005aae:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005ab0:	4b18      	ldr	r3, [pc, #96]	; (8005b14 <xPortStartScheduler+0xc4>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ab8:	4a16      	ldr	r2, [pc, #88]	; (8005b14 <xPortStartScheduler+0xc4>)
 8005aba:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	b2da      	uxtb	r2, r3
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005ac4:	4b14      	ldr	r3, [pc, #80]	; (8005b18 <xPortStartScheduler+0xc8>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a13      	ldr	r2, [pc, #76]	; (8005b18 <xPortStartScheduler+0xc8>)
 8005aca:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ace:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005ad0:	4b11      	ldr	r3, [pc, #68]	; (8005b18 <xPortStartScheduler+0xc8>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a10      	ldr	r2, [pc, #64]	; (8005b18 <xPortStartScheduler+0xc8>)
 8005ad6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005ada:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005adc:	f000 f8b0 	bl	8005c40 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005ae0:	4b0e      	ldr	r3, [pc, #56]	; (8005b1c <xPortStartScheduler+0xcc>)
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005ae6:	f000 f8cf 	bl	8005c88 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005aea:	4b0d      	ldr	r3, [pc, #52]	; (8005b20 <xPortStartScheduler+0xd0>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a0c      	ldr	r2, [pc, #48]	; (8005b20 <xPortStartScheduler+0xd0>)
 8005af0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005af4:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005af6:	f7ff ff97 	bl	8005a28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005afa:	f7ff f97f 	bl	8004dfc <vTaskSwitchContext>
	prvTaskExitError();
 8005afe:	f7ff ff63 	bl	80059c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	e000e400 	.word	0xe000e400
 8005b10:	20001238 	.word	0x20001238
 8005b14:	2000123c 	.word	0x2000123c
 8005b18:	e000ed20 	.word	0xe000ed20
 8005b1c:	2000000c 	.word	0x2000000c
 8005b20:	e000ef34 	.word	0xe000ef34

08005b24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
	__asm volatile
 8005b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2e:	b672      	cpsid	i
 8005b30:	f383 8811 	msr	BASEPRI, r3
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	b662      	cpsie	i
 8005b3e:	607b      	str	r3, [r7, #4]
}
 8005b40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005b42:	4b05      	ldr	r3, [pc, #20]	; (8005b58 <vPortEnterCritical+0x34>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	3301      	adds	r3, #1
 8005b48:	4a03      	ldr	r2, [pc, #12]	; (8005b58 <vPortEnterCritical+0x34>)
 8005b4a:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr
 8005b58:	2000000c 	.word	0x2000000c

08005b5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 8005b62:	4b0a      	ldr	r3, [pc, #40]	; (8005b8c <vPortExitCritical+0x30>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	3b01      	subs	r3, #1
 8005b68:	4a08      	ldr	r2, [pc, #32]	; (8005b8c <vPortExitCritical+0x30>)
 8005b6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005b6c:	4b07      	ldr	r3, [pc, #28]	; (8005b8c <vPortExitCritical+0x30>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d105      	bne.n	8005b80 <vPortExitCritical+0x24>
 8005b74:	2300      	movs	r3, #0
 8005b76:	607b      	str	r3, [r7, #4]
	__asm volatile
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f383 8811 	msr	BASEPRI, r3
}
 8005b7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	2000000c 	.word	0x2000000c

08005b90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005b90:	f3ef 8009 	mrs	r0, PSP
 8005b94:	f3bf 8f6f 	isb	sy
 8005b98:	4b15      	ldr	r3, [pc, #84]	; (8005bf0 <pxCurrentTCBConst>)
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	f01e 0f10 	tst.w	lr, #16
 8005ba0:	bf08      	it	eq
 8005ba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005baa:	6010      	str	r0, [r2, #0]
 8005bac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005bb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005bb4:	b672      	cpsid	i
 8005bb6:	f380 8811 	msr	BASEPRI, r0
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	f3bf 8f6f 	isb	sy
 8005bc2:	b662      	cpsie	i
 8005bc4:	f7ff f91a 	bl	8004dfc <vTaskSwitchContext>
 8005bc8:	f04f 0000 	mov.w	r0, #0
 8005bcc:	f380 8811 	msr	BASEPRI, r0
 8005bd0:	bc09      	pop	{r0, r3}
 8005bd2:	6819      	ldr	r1, [r3, #0]
 8005bd4:	6808      	ldr	r0, [r1, #0]
 8005bd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bda:	f01e 0f10 	tst.w	lr, #16
 8005bde:	bf08      	it	eq
 8005be0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005be4:	f380 8809 	msr	PSP, r0
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop

08005bf0 <pxCurrentTCBConst>:
 8005bf0:	20000c0c 	.word	0x20000c0c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005bf4:	bf00      	nop
 8005bf6:	bf00      	nop

08005bf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
	__asm volatile
 8005bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c02:	b672      	cpsid	i
 8005c04:	f383 8811 	msr	BASEPRI, r3
 8005c08:	f3bf 8f6f 	isb	sy
 8005c0c:	f3bf 8f4f 	dsb	sy
 8005c10:	b662      	cpsie	i
 8005c12:	607b      	str	r3, [r7, #4]
}
 8005c14:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005c16:	f7ff f849 	bl	8004cac <xTaskIncrementTick>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d003      	beq.n	8005c28 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005c20:	4b06      	ldr	r3, [pc, #24]	; (8005c3c <SysTick_Handler+0x44>)
 8005c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c26:	601a      	str	r2, [r3, #0]
 8005c28:	2300      	movs	r3, #0
 8005c2a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	f383 8811 	msr	BASEPRI, r3
}
 8005c32:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005c34:	bf00      	nop
 8005c36:	3708      	adds	r7, #8
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	e000ed04 	.word	0xe000ed04

08005c40 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005c40:	b480      	push	{r7}
 8005c42:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005c44:	4b0b      	ldr	r3, [pc, #44]	; (8005c74 <vPortSetupTimerInterrupt+0x34>)
 8005c46:	2200      	movs	r2, #0
 8005c48:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005c4a:	4b0b      	ldr	r3, [pc, #44]	; (8005c78 <vPortSetupTimerInterrupt+0x38>)
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005c50:	4b0a      	ldr	r3, [pc, #40]	; (8005c7c <vPortSetupTimerInterrupt+0x3c>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a0a      	ldr	r2, [pc, #40]	; (8005c80 <vPortSetupTimerInterrupt+0x40>)
 8005c56:	fba2 2303 	umull	r2, r3, r2, r3
 8005c5a:	099b      	lsrs	r3, r3, #6
 8005c5c:	4a09      	ldr	r2, [pc, #36]	; (8005c84 <vPortSetupTimerInterrupt+0x44>)
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005c62:	4b04      	ldr	r3, [pc, #16]	; (8005c74 <vPortSetupTimerInterrupt+0x34>)
 8005c64:	2207      	movs	r2, #7
 8005c66:	601a      	str	r2, [r3, #0]
}
 8005c68:	bf00      	nop
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	e000e010 	.word	0xe000e010
 8005c78:	e000e018 	.word	0xe000e018
 8005c7c:	20000000 	.word	0x20000000
 8005c80:	10624dd3 	.word	0x10624dd3
 8005c84:	e000e014 	.word	0xe000e014

08005c88 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005c88:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005c98 <vPortEnableVFP+0x10>
 8005c8c:	6801      	ldr	r1, [r0, #0]
 8005c8e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005c92:	6001      	str	r1, [r0, #0]
 8005c94:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005c96:	bf00      	nop
 8005c98:	e000ed88 	.word	0xe000ed88

08005c9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005ca2:	f3ef 8305 	mrs	r3, IPSR
 8005ca6:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2b0f      	cmp	r3, #15
 8005cac:	d904      	bls.n	8005cb8 <vPortValidateInterruptPriority+0x1c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005cae:	4a05      	ldr	r2, [pc, #20]	; (8005cc4 <vPortValidateInterruptPriority+0x28>)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	70fb      	strb	r3, [r7, #3]
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
	}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr
 8005cc4:	e000e3f0 	.word	0xe000e3f0

08005cc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8005cd4:	f7fe ff3e 	bl	8004b54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005cd8:	4b40      	ldr	r3, [pc, #256]	; (8005ddc <pvPortMalloc+0x114>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d101      	bne.n	8005ce4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ce0:	f000 f8c0 	bl	8005e64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ce4:	4b3e      	ldr	r3, [pc, #248]	; (8005de0 <pvPortMalloc+0x118>)
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4013      	ands	r3, r2
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d16d      	bne.n	8005dcc <pvPortMalloc+0x104>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00d      	beq.n	8005d12 <pvPortMalloc+0x4a>
			{
				xWantedSize += xHeapStructSize;
 8005cf6:	2208      	movs	r2, #8
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f003 0307 	and.w	r3, r3, #7
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d004      	beq.n	8005d12 <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f023 0307 	bic.w	r3, r3, #7
 8005d0e:	3308      	adds	r3, #8
 8005d10:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d059      	beq.n	8005dcc <pvPortMalloc+0x104>
 8005d18:	4b32      	ldr	r3, [pc, #200]	; (8005de4 <pvPortMalloc+0x11c>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d854      	bhi.n	8005dcc <pvPortMalloc+0x104>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005d22:	4b31      	ldr	r3, [pc, #196]	; (8005de8 <pvPortMalloc+0x120>)
 8005d24:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8005d26:	4b30      	ldr	r3, [pc, #192]	; (8005de8 <pvPortMalloc+0x120>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d2c:	e004      	b.n	8005d38 <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d903      	bls.n	8005d4a <pvPortMalloc+0x82>
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1f1      	bne.n	8005d2e <pvPortMalloc+0x66>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005d4a:	4b24      	ldr	r3, [pc, #144]	; (8005ddc <pvPortMalloc+0x114>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d03b      	beq.n	8005dcc <pvPortMalloc+0x104>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2208      	movs	r2, #8
 8005d5a:	4413      	add	r3, r2
 8005d5c:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	685a      	ldr	r2, [r3, #4]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	1ad2      	subs	r2, r2, r3
 8005d6e:	2308      	movs	r3, #8
 8005d70:	005b      	lsls	r3, r3, #1
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d90f      	bls.n	8005d96 <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	1ad2      	subs	r2, r2, r3
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d90:	68b8      	ldr	r0, [r7, #8]
 8005d92:	f000 f8c9 	bl	8005f28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d96:	4b13      	ldr	r3, [pc, #76]	; (8005de4 <pvPortMalloc+0x11c>)
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	4a10      	ldr	r2, [pc, #64]	; (8005de4 <pvPortMalloc+0x11c>)
 8005da2:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005da4:	4b0f      	ldr	r3, [pc, #60]	; (8005de4 <pvPortMalloc+0x11c>)
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	4b10      	ldr	r3, [pc, #64]	; (8005dec <pvPortMalloc+0x124>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d203      	bcs.n	8005db8 <pvPortMalloc+0xf0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005db0:	4b0c      	ldr	r3, [pc, #48]	; (8005de4 <pvPortMalloc+0x11c>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a0d      	ldr	r2, [pc, #52]	; (8005dec <pvPortMalloc+0x124>)
 8005db6:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	685a      	ldr	r2, [r3, #4]
 8005dbc:	4b08      	ldr	r3, [pc, #32]	; (8005de0 <pvPortMalloc+0x118>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	431a      	orrs	r2, r3
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005dcc:	f7fe fed0 	bl	8004b70 <xTaskResumeAll>
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3718      	adds	r7, #24
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	20004e48 	.word	0x20004e48
 8005de0:	20004e54 	.word	0x20004e54
 8005de4:	20004e4c 	.word	0x20004e4c
 8005de8:	20004e40 	.word	0x20004e40
 8005dec:	20004e50 	.word	0x20004e50

08005df0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d027      	beq.n	8005e52 <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e02:	2308      	movs	r3, #8
 8005e04:	425b      	negs	r3, r3
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	4413      	add	r3, r2
 8005e0a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	685a      	ldr	r2, [r3, #4]
 8005e14:	4b11      	ldr	r3, [pc, #68]	; (8005e5c <vPortFree+0x6c>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4013      	ands	r3, r2
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d019      	beq.n	8005e52 <vPortFree+0x62>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d115      	bne.n	8005e52 <vPortFree+0x62>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	685a      	ldr	r2, [r3, #4]
 8005e2a:	4b0c      	ldr	r3, [pc, #48]	; (8005e5c <vPortFree+0x6c>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	43db      	mvns	r3, r3
 8005e30:	401a      	ands	r2, r3
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e36:	f7fe fe8d 	bl	8004b54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	4b08      	ldr	r3, [pc, #32]	; (8005e60 <vPortFree+0x70>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4413      	add	r3, r2
 8005e44:	4a06      	ldr	r2, [pc, #24]	; (8005e60 <vPortFree+0x70>)
 8005e46:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e48:	68b8      	ldr	r0, [r7, #8]
 8005e4a:	f000 f86d 	bl	8005f28 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005e4e:	f7fe fe8f 	bl	8004b70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e52:	bf00      	nop
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	20004e54 	.word	0x20004e54
 8005e60:	20004e4c 	.word	0x20004e4c

08005e64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005e6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005e6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005e70:	4b27      	ldr	r3, [pc, #156]	; (8005f10 <prvHeapInit+0xac>)
 8005e72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f003 0307 	and.w	r3, r3, #7
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00c      	beq.n	8005e98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	3307      	adds	r3, #7
 8005e82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f023 0307 	bic.w	r3, r3, #7
 8005e8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	4a1f      	ldr	r2, [pc, #124]	; (8005f10 <prvHeapInit+0xac>)
 8005e94:	4413      	add	r3, r2
 8005e96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e9c:	4a1d      	ldr	r2, [pc, #116]	; (8005f14 <prvHeapInit+0xb0>)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ea2:	4b1c      	ldr	r3, [pc, #112]	; (8005f14 <prvHeapInit+0xb0>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	4413      	add	r3, r2
 8005eae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005eb0:	2208      	movs	r2, #8
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	1a9b      	subs	r3, r3, r2
 8005eb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f023 0307 	bic.w	r3, r3, #7
 8005ebe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	4a15      	ldr	r2, [pc, #84]	; (8005f18 <prvHeapInit+0xb4>)
 8005ec4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005ec6:	4b14      	ldr	r3, [pc, #80]	; (8005f18 <prvHeapInit+0xb4>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005ece:	4b12      	ldr	r3, [pc, #72]	; (8005f18 <prvHeapInit+0xb4>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	1ad2      	subs	r2, r2, r3
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ee4:	4b0c      	ldr	r3, [pc, #48]	; (8005f18 <prvHeapInit+0xb4>)
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	4a0a      	ldr	r2, [pc, #40]	; (8005f1c <prvHeapInit+0xb8>)
 8005ef2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	4a09      	ldr	r2, [pc, #36]	; (8005f20 <prvHeapInit+0xbc>)
 8005efa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005efc:	4b09      	ldr	r3, [pc, #36]	; (8005f24 <prvHeapInit+0xc0>)
 8005efe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005f02:	601a      	str	r2, [r3, #0]
}
 8005f04:	bf00      	nop
 8005f06:	3714      	adds	r7, #20
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr
 8005f10:	20001240 	.word	0x20001240
 8005f14:	20004e40 	.word	0x20004e40
 8005f18:	20004e48 	.word	0x20004e48
 8005f1c:	20004e50 	.word	0x20004e50
 8005f20:	20004e4c 	.word	0x20004e4c
 8005f24:	20004e54 	.word	0x20004e54

08005f28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f30:	4b28      	ldr	r3, [pc, #160]	; (8005fd4 <prvInsertBlockIntoFreeList+0xac>)
 8005f32:	60fb      	str	r3, [r7, #12]
 8005f34:	e002      	b.n	8005f3c <prvInsertBlockIntoFreeList+0x14>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	60fb      	str	r3, [r7, #12]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d8f7      	bhi.n	8005f36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	68ba      	ldr	r2, [r7, #8]
 8005f50:	4413      	add	r3, r2
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d108      	bne.n	8005f6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	441a      	add	r2, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	441a      	add	r2, r3
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d118      	bne.n	8005fb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	4b15      	ldr	r3, [pc, #84]	; (8005fd8 <prvInsertBlockIntoFreeList+0xb0>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d00d      	beq.n	8005fa6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685a      	ldr	r2, [r3, #4]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	441a      	add	r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	601a      	str	r2, [r3, #0]
 8005fa4:	e008      	b.n	8005fb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005fa6:	4b0c      	ldr	r3, [pc, #48]	; (8005fd8 <prvInsertBlockIntoFreeList+0xb0>)
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	601a      	str	r2, [r3, #0]
 8005fae:	e003      	b.n	8005fb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d002      	beq.n	8005fc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fc6:	bf00      	nop
 8005fc8:	3714      	adds	r7, #20
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	20004e40 	.word	0x20004e40
 8005fd8:	20004e48 	.word	0x20004e48

08005fdc <__libc_init_array>:
 8005fdc:	b570      	push	{r4, r5, r6, lr}
 8005fde:	4d0d      	ldr	r5, [pc, #52]	; (8006014 <__libc_init_array+0x38>)
 8005fe0:	4c0d      	ldr	r4, [pc, #52]	; (8006018 <__libc_init_array+0x3c>)
 8005fe2:	1b64      	subs	r4, r4, r5
 8005fe4:	10a4      	asrs	r4, r4, #2
 8005fe6:	2600      	movs	r6, #0
 8005fe8:	42a6      	cmp	r6, r4
 8005fea:	d109      	bne.n	8006000 <__libc_init_array+0x24>
 8005fec:	4d0b      	ldr	r5, [pc, #44]	; (800601c <__libc_init_array+0x40>)
 8005fee:	4c0c      	ldr	r4, [pc, #48]	; (8006020 <__libc_init_array+0x44>)
 8005ff0:	f000 f82e 	bl	8006050 <_init>
 8005ff4:	1b64      	subs	r4, r4, r5
 8005ff6:	10a4      	asrs	r4, r4, #2
 8005ff8:	2600      	movs	r6, #0
 8005ffa:	42a6      	cmp	r6, r4
 8005ffc:	d105      	bne.n	800600a <__libc_init_array+0x2e>
 8005ffe:	bd70      	pop	{r4, r5, r6, pc}
 8006000:	f855 3b04 	ldr.w	r3, [r5], #4
 8006004:	4798      	blx	r3
 8006006:	3601      	adds	r6, #1
 8006008:	e7ee      	b.n	8005fe8 <__libc_init_array+0xc>
 800600a:	f855 3b04 	ldr.w	r3, [r5], #4
 800600e:	4798      	blx	r3
 8006010:	3601      	adds	r6, #1
 8006012:	e7f2      	b.n	8005ffa <__libc_init_array+0x1e>
 8006014:	08006130 	.word	0x08006130
 8006018:	08006130 	.word	0x08006130
 800601c:	08006130 	.word	0x08006130
 8006020:	08006134 	.word	0x08006134

08006024 <memcpy>:
 8006024:	440a      	add	r2, r1
 8006026:	4291      	cmp	r1, r2
 8006028:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800602c:	d100      	bne.n	8006030 <memcpy+0xc>
 800602e:	4770      	bx	lr
 8006030:	b510      	push	{r4, lr}
 8006032:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006036:	f803 4f01 	strb.w	r4, [r3, #1]!
 800603a:	4291      	cmp	r1, r2
 800603c:	d1f9      	bne.n	8006032 <memcpy+0xe>
 800603e:	bd10      	pop	{r4, pc}

08006040 <memset>:
 8006040:	4402      	add	r2, r0
 8006042:	4603      	mov	r3, r0
 8006044:	4293      	cmp	r3, r2
 8006046:	d100      	bne.n	800604a <memset+0xa>
 8006048:	4770      	bx	lr
 800604a:	f803 1b01 	strb.w	r1, [r3], #1
 800604e:	e7f9      	b.n	8006044 <memset+0x4>

08006050 <_init>:
 8006050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006052:	bf00      	nop
 8006054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006056:	bc08      	pop	{r3}
 8006058:	469e      	mov	lr, r3
 800605a:	4770      	bx	lr

0800605c <_fini>:
 800605c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800605e:	bf00      	nop
 8006060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006062:	bc08      	pop	{r3}
 8006064:	469e      	mov	lr, r3
 8006066:	4770      	bx	lr
