
stm32_f303k8_can2odrive_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031dc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003364  08003364  00013364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800339c  0800339c  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  0800339c  0800339c  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800339c  0800339c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800339c  0800339c  0001339c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033a0  080033a0  000133a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080033a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000018  080033bc  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  080033bc  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d102  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000190b  00000000  00000000  0002d14a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000740  00000000  00000000  0002ea58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000698  00000000  00000000  0002f198  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000178d4  00000000  00000000  0002f830  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007349  00000000  00000000  00047104  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000813d8  00000000  00000000  0004e44d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cf825  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cf8  00000000  00000000  000cf8a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800334c 	.word	0x0800334c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	0800334c 	.word	0x0800334c

080001c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001cc:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <HAL_Init+0x28>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a07      	ldr	r2, [pc, #28]	; (80001f0 <HAL_Init+0x28>)
 80001d2:	f043 0310 	orr.w	r3, r3, #16
 80001d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d8:	2003      	movs	r0, #3
 80001da:	f000 ff6d 	bl	80010b8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001de:	2000      	movs	r0, #0
 80001e0:	f000 f808 	bl	80001f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001e4:	f002 ff02 	bl	8002fec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001e8:	2300      	movs	r3, #0
}
 80001ea:	4618      	mov	r0, r3
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	40022000 	.word	0x40022000

080001f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001fc:	4b12      	ldr	r3, [pc, #72]	; (8000248 <HAL_InitTick+0x54>)
 80001fe:	681a      	ldr	r2, [r3, #0]
 8000200:	4b12      	ldr	r3, [pc, #72]	; (800024c <HAL_InitTick+0x58>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	4619      	mov	r1, r3
 8000206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800020a:	fbb3 f3f1 	udiv	r3, r3, r1
 800020e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000212:	4618      	mov	r0, r3
 8000214:	f000 ff85 	bl	8001122 <HAL_SYSTICK_Config>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800021e:	2301      	movs	r3, #1
 8000220:	e00e      	b.n	8000240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	2b0f      	cmp	r3, #15
 8000226:	d80a      	bhi.n	800023e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000228:	2200      	movs	r2, #0
 800022a:	6879      	ldr	r1, [r7, #4]
 800022c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000230:	f000 ff4d 	bl	80010ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000234:	4a06      	ldr	r2, [pc, #24]	; (8000250 <HAL_InitTick+0x5c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
 800023c:	e000      	b.n	8000240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800023e:	2301      	movs	r3, #1
}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	20000014 	.word	0x20000014
 800024c:	20000004 	.word	0x20000004
 8000250:	20000000 	.word	0x20000000

08000254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <HAL_IncTick+0x20>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	461a      	mov	r2, r3
 800025e:	4b06      	ldr	r3, [pc, #24]	; (8000278 <HAL_IncTick+0x24>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4413      	add	r3, r2
 8000264:	4a04      	ldr	r2, [pc, #16]	; (8000278 <HAL_IncTick+0x24>)
 8000266:	6013      	str	r3, [r2, #0]
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	20000004 	.word	0x20000004
 8000278:	20000034 	.word	0x20000034

0800027c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000280:	4b03      	ldr	r3, [pc, #12]	; (8000290 <HAL_GetTick+0x14>)
 8000282:	681b      	ldr	r3, [r3, #0]
}
 8000284:	4618      	mov	r0, r3
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	20000034 	.word	0x20000034

08000294 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d101      	bne.n	80002a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80002a2:	2301      	movs	r3, #1
 80002a4:	e0ed      	b.n	8000482 <HAL_CAN_Init+0x1ee>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d102      	bne.n	80002b8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80002b2:	6878      	ldr	r0, [r7, #4]
 80002b4:	f002 febe 	bl	8003034 <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	681a      	ldr	r2, [r3, #0]
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f022 0202 	bic.w	r2, r2, #2
 80002c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80002c8:	f7ff ffd8 	bl	800027c <HAL_GetTick>
 80002cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80002ce:	e012      	b.n	80002f6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80002d0:	f7ff ffd4 	bl	800027c <HAL_GetTick>
 80002d4:	4602      	mov	r2, r0
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	1ad3      	subs	r3, r2, r3
 80002da:	2b0a      	cmp	r3, #10
 80002dc:	d90b      	bls.n	80002f6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	2205      	movs	r2, #5
 80002ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80002f2:	2301      	movs	r3, #1
 80002f4:	e0c5      	b.n	8000482 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	685b      	ldr	r3, [r3, #4]
 80002fc:	f003 0302 	and.w	r3, r3, #2
 8000300:	2b00      	cmp	r3, #0
 8000302:	d1e5      	bne.n	80002d0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	681a      	ldr	r2, [r3, #0]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	f042 0201 	orr.w	r2, r2, #1
 8000312:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000314:	f7ff ffb2 	bl	800027c <HAL_GetTick>
 8000318:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800031a:	e012      	b.n	8000342 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800031c:	f7ff ffae 	bl	800027c <HAL_GetTick>
 8000320:	4602      	mov	r2, r0
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	1ad3      	subs	r3, r2, r3
 8000326:	2b0a      	cmp	r3, #10
 8000328:	d90b      	bls.n	8000342 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800032e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	2205      	movs	r2, #5
 800033a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800033e:	2301      	movs	r3, #1
 8000340:	e09f      	b.n	8000482 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	685b      	ldr	r3, [r3, #4]
 8000348:	f003 0301 	and.w	r3, r3, #1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d0e5      	beq.n	800031c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	7e1b      	ldrb	r3, [r3, #24]
 8000354:	2b01      	cmp	r3, #1
 8000356:	d108      	bne.n	800036a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	681a      	ldr	r2, [r3, #0]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000366:	601a      	str	r2, [r3, #0]
 8000368:	e007      	b.n	800037a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	681a      	ldr	r2, [r3, #0]
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000378:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	7e5b      	ldrb	r3, [r3, #25]
 800037e:	2b01      	cmp	r3, #1
 8000380:	d108      	bne.n	8000394 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	681a      	ldr	r2, [r3, #0]
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	e007      	b.n	80003a4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	681a      	ldr	r2, [r3, #0]
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80003a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	7e9b      	ldrb	r3, [r3, #26]
 80003a8:	2b01      	cmp	r3, #1
 80003aa:	d108      	bne.n	80003be <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	f042 0220 	orr.w	r2, r2, #32
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	e007      	b.n	80003ce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	681a      	ldr	r2, [r3, #0]
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	f022 0220 	bic.w	r2, r2, #32
 80003cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	7edb      	ldrb	r3, [r3, #27]
 80003d2:	2b01      	cmp	r3, #1
 80003d4:	d108      	bne.n	80003e8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	681a      	ldr	r2, [r3, #0]
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	f022 0210 	bic.w	r2, r2, #16
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	e007      	b.n	80003f8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	681a      	ldr	r2, [r3, #0]
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	f042 0210 	orr.w	r2, r2, #16
 80003f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	7f1b      	ldrb	r3, [r3, #28]
 80003fc:	2b01      	cmp	r3, #1
 80003fe:	d108      	bne.n	8000412 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	681a      	ldr	r2, [r3, #0]
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	f042 0208 	orr.w	r2, r2, #8
 800040e:	601a      	str	r2, [r3, #0]
 8000410:	e007      	b.n	8000422 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	681a      	ldr	r2, [r3, #0]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	f022 0208 	bic.w	r2, r2, #8
 8000420:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	7f5b      	ldrb	r3, [r3, #29]
 8000426:	2b01      	cmp	r3, #1
 8000428:	d108      	bne.n	800043c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	681a      	ldr	r2, [r3, #0]
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	f042 0204 	orr.w	r2, r2, #4
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	e007      	b.n	800044c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	681a      	ldr	r2, [r3, #0]
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	f022 0204 	bic.w	r2, r2, #4
 800044a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	689a      	ldr	r2, [r3, #8]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	68db      	ldr	r3, [r3, #12]
 8000454:	431a      	orrs	r2, r3
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	691b      	ldr	r3, [r3, #16]
 800045a:	431a      	orrs	r2, r3
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	695b      	ldr	r3, [r3, #20]
 8000460:	ea42 0103 	orr.w	r1, r2, r3
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	685b      	ldr	r3, [r3, #4]
 8000468:	1e5a      	subs	r2, r3, #1
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	430a      	orrs	r2, r1
 8000470:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	2200      	movs	r2, #0
 8000476:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	2201      	movs	r2, #1
 800047c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000480:	2300      	movs	r3, #0
}
 8000482:	4618      	mov	r0, r3
 8000484:	3710      	adds	r7, #16
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}

0800048a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800048a:	b480      	push	{r7}
 800048c:	b087      	sub	sp, #28
 800048e:	af00      	add	r7, sp, #0
 8000490:	6078      	str	r0, [r7, #4]
 8000492:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80004a0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80004a2:	7cfb      	ldrb	r3, [r7, #19]
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	d003      	beq.n	80004b0 <HAL_CAN_ConfigFilter+0x26>
 80004a8:	7cfb      	ldrb	r3, [r7, #19]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	f040 80aa 	bne.w	8000604 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80004b6:	f043 0201 	orr.w	r2, r3, #1
 80004ba:	697b      	ldr	r3, [r7, #20]
 80004bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	695b      	ldr	r3, [r3, #20]
 80004c4:	f003 031f 	and.w	r3, r3, #31
 80004c8:	2201      	movs	r2, #1
 80004ca:	fa02 f303 	lsl.w	r3, r2, r3
 80004ce:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80004d0:	697b      	ldr	r3, [r7, #20]
 80004d2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	43db      	mvns	r3, r3
 80004da:	401a      	ands	r2, r3
 80004dc:	697b      	ldr	r3, [r7, #20]
 80004de:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d123      	bne.n	8000532 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	43db      	mvns	r3, r3
 80004f4:	401a      	ands	r2, r3
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	68db      	ldr	r3, [r3, #12]
 8000500:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	685b      	ldr	r3, [r3, #4]
 8000506:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000508:	683a      	ldr	r2, [r7, #0]
 800050a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800050c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	3248      	adds	r2, #72	; 0x48
 8000512:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	689b      	ldr	r3, [r3, #8]
 800051a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000526:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000528:	6979      	ldr	r1, [r7, #20]
 800052a:	3348      	adds	r3, #72	; 0x48
 800052c:	00db      	lsls	r3, r3, #3
 800052e:	440b      	add	r3, r1
 8000530:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	69db      	ldr	r3, [r3, #28]
 8000536:	2b01      	cmp	r3, #1
 8000538:	d122      	bne.n	8000580 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800053a:	697b      	ldr	r3, [r7, #20]
 800053c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	431a      	orrs	r2, r3
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000556:	683a      	ldr	r2, [r7, #0]
 8000558:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800055a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	3248      	adds	r2, #72	; 0x48
 8000560:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	689b      	ldr	r3, [r3, #8]
 8000568:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	68db      	ldr	r3, [r3, #12]
 800056e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000574:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000576:	6979      	ldr	r1, [r7, #20]
 8000578:	3348      	adds	r3, #72	; 0x48
 800057a:	00db      	lsls	r3, r3, #3
 800057c:	440b      	add	r3, r1
 800057e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d109      	bne.n	800059c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	43db      	mvns	r3, r3
 8000592:	401a      	ands	r2, r3
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800059a:	e007      	b.n	80005ac <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	431a      	orrs	r2, r3
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	691b      	ldr	r3, [r3, #16]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d109      	bne.n	80005c8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	43db      	mvns	r3, r3
 80005be:	401a      	ands	r2, r3
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80005c6:	e007      	b.n	80005d8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	431a      	orrs	r2, r3
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	6a1b      	ldr	r3, [r3, #32]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d107      	bne.n	80005f0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	431a      	orrs	r2, r3
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80005f6:	f023 0201 	bic.w	r2, r3, #1
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000600:	2300      	movs	r3, #0
 8000602:	e006      	b.n	8000612 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000608:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000610:	2301      	movs	r3, #1
  }
}
 8000612:	4618      	mov	r0, r3
 8000614:	371c      	adds	r7, #28
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800061e:	b580      	push	{r7, lr}
 8000620:	b084      	sub	sp, #16
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	f893 3020 	ldrb.w	r3, [r3, #32]
 800062c:	b2db      	uxtb	r3, r3
 800062e:	2b01      	cmp	r3, #1
 8000630:	d12e      	bne.n	8000690 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2202      	movs	r2, #2
 8000636:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f022 0201 	bic.w	r2, r2, #1
 8000648:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800064a:	f7ff fe17 	bl	800027c <HAL_GetTick>
 800064e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000650:	e012      	b.n	8000678 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000652:	f7ff fe13 	bl	800027c <HAL_GetTick>
 8000656:	4602      	mov	r2, r0
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	1ad3      	subs	r3, r2, r3
 800065c:	2b0a      	cmp	r3, #10
 800065e:	d90b      	bls.n	8000678 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000664:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2205      	movs	r2, #5
 8000670:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000674:	2301      	movs	r3, #1
 8000676:	e012      	b.n	800069e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	685b      	ldr	r3, [r3, #4]
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	2b00      	cmp	r3, #0
 8000684:	d1e5      	bne.n	8000652 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2200      	movs	r2, #0
 800068a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800068c:	2300      	movs	r3, #0
 800068e:	e006      	b.n	800069e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000694:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800069c:	2301      	movs	r3, #1
  }
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80006a6:	b480      	push	{r7}
 80006a8:	b089      	sub	sp, #36	; 0x24
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	60f8      	str	r0, [r7, #12]
 80006ae:	60b9      	str	r1, [r7, #8]
 80006b0:	607a      	str	r2, [r7, #4]
 80006b2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80006ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	689b      	ldr	r3, [r3, #8]
 80006c2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80006c4:	7ffb      	ldrb	r3, [r7, #31]
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d003      	beq.n	80006d2 <HAL_CAN_AddTxMessage+0x2c>
 80006ca:	7ffb      	ldrb	r3, [r7, #31]
 80006cc:	2b02      	cmp	r3, #2
 80006ce:	f040 80b8 	bne.w	8000842 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80006d2:	69bb      	ldr	r3, [r7, #24]
 80006d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d10a      	bne.n	80006f2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80006dc:	69bb      	ldr	r3, [r7, #24]
 80006de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d105      	bne.n	80006f2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80006e6:	69bb      	ldr	r3, [r7, #24]
 80006e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	f000 80a0 	beq.w	8000832 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80006f2:	69bb      	ldr	r3, [r7, #24]
 80006f4:	0e1b      	lsrs	r3, r3, #24
 80006f6:	f003 0303 	and.w	r3, r3, #3
 80006fa:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	2b02      	cmp	r3, #2
 8000700:	d907      	bls.n	8000712 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000706:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800070e:	2301      	movs	r3, #1
 8000710:	e09e      	b.n	8000850 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000712:	2201      	movs	r2, #1
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	409a      	lsls	r2, r3
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	689b      	ldr	r3, [r3, #8]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d10d      	bne.n	8000740 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800072e:	68f9      	ldr	r1, [r7, #12]
 8000730:	6809      	ldr	r1, [r1, #0]
 8000732:	431a      	orrs	r2, r3
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	3318      	adds	r3, #24
 8000738:	011b      	lsls	r3, r3, #4
 800073a:	440b      	add	r3, r1
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	e00f      	b.n	8000760 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800074a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000750:	68f9      	ldr	r1, [r7, #12]
 8000752:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000754:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	3318      	adds	r3, #24
 800075a:	011b      	lsls	r3, r3, #4
 800075c:	440b      	add	r3, r1
 800075e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	6819      	ldr	r1, [r3, #0]
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	691a      	ldr	r2, [r3, #16]
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	3318      	adds	r3, #24
 800076c:	011b      	lsls	r3, r3, #4
 800076e:	440b      	add	r3, r1
 8000770:	3304      	adds	r3, #4
 8000772:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	7d1b      	ldrb	r3, [r3, #20]
 8000778:	2b01      	cmp	r3, #1
 800077a:	d111      	bne.n	80007a0 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	3318      	adds	r3, #24
 8000784:	011b      	lsls	r3, r3, #4
 8000786:	4413      	add	r3, r2
 8000788:	3304      	adds	r3, #4
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	68fa      	ldr	r2, [r7, #12]
 800078e:	6811      	ldr	r1, [r2, #0]
 8000790:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	3318      	adds	r3, #24
 8000798:	011b      	lsls	r3, r3, #4
 800079a:	440b      	add	r3, r1
 800079c:	3304      	adds	r3, #4
 800079e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3307      	adds	r3, #7
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	061a      	lsls	r2, r3, #24
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	3306      	adds	r3, #6
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	041b      	lsls	r3, r3, #16
 80007b0:	431a      	orrs	r2, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	3305      	adds	r3, #5
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	021b      	lsls	r3, r3, #8
 80007ba:	4313      	orrs	r3, r2
 80007bc:	687a      	ldr	r2, [r7, #4]
 80007be:	3204      	adds	r2, #4
 80007c0:	7812      	ldrb	r2, [r2, #0]
 80007c2:	4610      	mov	r0, r2
 80007c4:	68fa      	ldr	r2, [r7, #12]
 80007c6:	6811      	ldr	r1, [r2, #0]
 80007c8:	ea43 0200 	orr.w	r2, r3, r0
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	011b      	lsls	r3, r3, #4
 80007d0:	440b      	add	r3, r1
 80007d2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80007d6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	3303      	adds	r3, #3
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	061a      	lsls	r2, r3, #24
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	3302      	adds	r3, #2
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	041b      	lsls	r3, r3, #16
 80007e8:	431a      	orrs	r2, r3
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	3301      	adds	r3, #1
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	021b      	lsls	r3, r3, #8
 80007f2:	4313      	orrs	r3, r2
 80007f4:	687a      	ldr	r2, [r7, #4]
 80007f6:	7812      	ldrb	r2, [r2, #0]
 80007f8:	4610      	mov	r0, r2
 80007fa:	68fa      	ldr	r2, [r7, #12]
 80007fc:	6811      	ldr	r1, [r2, #0]
 80007fe:	ea43 0200 	orr.w	r2, r3, r0
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	011b      	lsls	r3, r3, #4
 8000806:	440b      	add	r3, r1
 8000808:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800080c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	3318      	adds	r3, #24
 8000816:	011b      	lsls	r3, r3, #4
 8000818:	4413      	add	r3, r2
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	68fa      	ldr	r2, [r7, #12]
 800081e:	6811      	ldr	r1, [r2, #0]
 8000820:	f043 0201 	orr.w	r2, r3, #1
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	3318      	adds	r3, #24
 8000828:	011b      	lsls	r3, r3, #4
 800082a:	440b      	add	r3, r1
 800082c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800082e:	2300      	movs	r3, #0
 8000830:	e00e      	b.n	8000850 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000836:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800083e:	2301      	movs	r3, #1
 8000840:	e006      	b.n	8000850 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000846:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800084e:	2301      	movs	r3, #1
  }
}
 8000850:	4618      	mov	r0, r3
 8000852:	3724      	adds	r7, #36	; 0x24
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800085c:	b480      	push	{r7}
 800085e:	b087      	sub	sp, #28
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	607a      	str	r2, [r7, #4]
 8000868:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000870:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000872:	7dfb      	ldrb	r3, [r7, #23]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d003      	beq.n	8000880 <HAL_CAN_GetRxMessage+0x24>
 8000878:	7dfb      	ldrb	r3, [r7, #23]
 800087a:	2b02      	cmp	r3, #2
 800087c:	f040 80f4 	bne.w	8000a68 <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d10e      	bne.n	80008a4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	f003 0303 	and.w	r3, r3, #3
 8000890:	2b00      	cmp	r3, #0
 8000892:	d116      	bne.n	80008c2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000898:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80008a0:	2301      	movs	r3, #1
 80008a2:	e0e8      	b.n	8000a76 <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	691b      	ldr	r3, [r3, #16]
 80008aa:	f003 0303 	and.w	r3, r3, #3
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d107      	bne.n	80008c2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80008be:	2301      	movs	r3, #1
 80008c0:	e0d9      	b.n	8000a76 <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	331b      	adds	r3, #27
 80008ca:	011b      	lsls	r3, r3, #4
 80008cc:	4413      	add	r3, r2
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f003 0204 	and.w	r2, r3, #4
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	689b      	ldr	r3, [r3, #8]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d10c      	bne.n	80008fa <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	331b      	adds	r3, #27
 80008e8:	011b      	lsls	r3, r3, #4
 80008ea:	4413      	add	r3, r2
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	0d5b      	lsrs	r3, r3, #21
 80008f0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	e00b      	b.n	8000912 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	331b      	adds	r3, #27
 8000902:	011b      	lsls	r3, r3, #4
 8000904:	4413      	add	r3, r2
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	08db      	lsrs	r3, r3, #3
 800090a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	331b      	adds	r3, #27
 800091a:	011b      	lsls	r3, r3, #4
 800091c:	4413      	add	r3, r2
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	f003 0201 	and.w	r2, r3, #1
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	331b      	adds	r3, #27
 8000932:	011b      	lsls	r3, r3, #4
 8000934:	4413      	add	r3, r2
 8000936:	3304      	adds	r3, #4
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f003 020f 	and.w	r2, r3, #15
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	331b      	adds	r3, #27
 800094a:	011b      	lsls	r3, r3, #4
 800094c:	4413      	add	r3, r2
 800094e:	3304      	adds	r3, #4
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	0a1b      	lsrs	r3, r3, #8
 8000954:	b2da      	uxtb	r2, r3
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	331b      	adds	r3, #27
 8000962:	011b      	lsls	r3, r3, #4
 8000964:	4413      	add	r3, r2
 8000966:	3304      	adds	r3, #4
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	0c1b      	lsrs	r3, r3, #16
 800096c:	b29a      	uxth	r2, r3
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	011b      	lsls	r3, r3, #4
 800097a:	4413      	add	r3, r2
 800097c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	b2da      	uxtb	r2, r3
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	011b      	lsls	r3, r3, #4
 8000990:	4413      	add	r3, r2
 8000992:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	0a1a      	lsrs	r2, r3, #8
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	3301      	adds	r3, #1
 800099e:	b2d2      	uxtb	r2, r2
 80009a0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	011b      	lsls	r3, r3, #4
 80009aa:	4413      	add	r3, r2
 80009ac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	0c1a      	lsrs	r2, r3, #16
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	3302      	adds	r3, #2
 80009b8:	b2d2      	uxtb	r2, r2
 80009ba:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	011b      	lsls	r3, r3, #4
 80009c4:	4413      	add	r3, r2
 80009c6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	0e1a      	lsrs	r2, r3, #24
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	3303      	adds	r3, #3
 80009d2:	b2d2      	uxtb	r2, r2
 80009d4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	011b      	lsls	r3, r3, #4
 80009de:	4413      	add	r3, r2
 80009e0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	3304      	adds	r3, #4
 80009ea:	b2d2      	uxtb	r2, r2
 80009ec:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	011b      	lsls	r3, r3, #4
 80009f6:	4413      	add	r3, r2
 80009f8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	0a1a      	lsrs	r2, r3, #8
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	3305      	adds	r3, #5
 8000a04:	b2d2      	uxtb	r2, r2
 8000a06:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	011b      	lsls	r3, r3, #4
 8000a10:	4413      	add	r3, r2
 8000a12:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	0c1a      	lsrs	r2, r3, #16
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	3306      	adds	r3, #6
 8000a1e:	b2d2      	uxtb	r2, r2
 8000a20:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	011b      	lsls	r3, r3, #4
 8000a2a:	4413      	add	r3, r2
 8000a2c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	0e1a      	lsrs	r2, r3, #24
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	3307      	adds	r3, #7
 8000a38:	b2d2      	uxtb	r2, r2
 8000a3a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d108      	bne.n	8000a54 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	68da      	ldr	r2, [r3, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f042 0220 	orr.w	r2, r2, #32
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	e007      	b.n	8000a64 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	691a      	ldr	r2, [r3, #16]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f042 0220 	orr.w	r2, r2, #32
 8000a62:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000a64:	2300      	movs	r3, #0
 8000a66:	e006      	b.n	8000a76 <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a6c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000a74:	2301      	movs	r3, #1
  }
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	371c      	adds	r7, #28
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b085      	sub	sp, #20
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
 8000a8a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a92:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000a94:	7bfb      	ldrb	r3, [r7, #15]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d002      	beq.n	8000aa0 <HAL_CAN_ActivateNotification+0x1e>
 8000a9a:	7bfb      	ldrb	r3, [r7, #15]
 8000a9c:	2b02      	cmp	r3, #2
 8000a9e:	d109      	bne.n	8000ab4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	6959      	ldr	r1, [r3, #20]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	683a      	ldr	r2, [r7, #0]
 8000aac:	430a      	orrs	r2, r1
 8000aae:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	e006      	b.n	8000ac2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ab8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ac0:	2301      	movs	r3, #1
  }
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3714      	adds	r7, #20
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b08a      	sub	sp, #40	; 0x28
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	695b      	ldr	r3, [r3, #20]
 8000ae0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	691b      	ldr	r3, [r3, #16]
 8000b00:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000b0a:	6a3b      	ldr	r3, [r7, #32]
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d07c      	beq.n	8000c0e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d023      	beq.n	8000b66 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2201      	movs	r2, #1
 8000b24:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	f003 0302 	and.w	r3, r3, #2
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d003      	beq.n	8000b38 <HAL_CAN_IRQHandler+0x6a>
      {
        /* Transmission Mailbox 0 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f000 f97d 	bl	8000e30 <HAL_CAN_TxMailbox0CompleteCallback>
 8000b36:	e016      	b.n	8000b66 <HAL_CAN_IRQHandler+0x98>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	f003 0304 	and.w	r3, r3, #4
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d004      	beq.n	8000b4c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
 8000b4a:	e00c      	b.n	8000b66 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	f003 0308 	and.w	r3, r3, #8
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d004      	beq.n	8000b60 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b5e:	e002      	b.n	8000b66 <HAL_CAN_IRQHandler+0x98>
        }
        else
        {
          /* Transmission Mailbox 0 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f000 f983 	bl	8000e6c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000b66:	69bb      	ldr	r3, [r7, #24]
 8000b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d024      	beq.n	8000bba <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b78:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d003      	beq.n	8000b8c <HAL_CAN_IRQHandler+0xbe>
      {
        /* Transmission Mailbox 1 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f000 f95d 	bl	8000e44 <HAL_CAN_TxMailbox1CompleteCallback>
 8000b8a:	e016      	b.n	8000bba <HAL_CAN_IRQHandler+0xec>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d004      	beq.n	8000ba0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b98:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b9e:	e00c      	b.n	8000bba <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000ba0:	69bb      	ldr	r3, [r7, #24]
 8000ba2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d004      	beq.n	8000bb4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8000bb2:	e002      	b.n	8000bba <HAL_CAN_IRQHandler+0xec>
        }
        else
        {
          /* Transmission Mailbox 1 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f000 f963 	bl	8000e80 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000bba:	69bb      	ldr	r3, [r7, #24]
 8000bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d024      	beq.n	8000c0e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000bcc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d003      	beq.n	8000be0 <HAL_CAN_IRQHandler+0x112>
      {
        /* Transmission Mailbox 2 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f000 f93d 	bl	8000e58 <HAL_CAN_TxMailbox2CompleteCallback>
 8000bde:	e016      	b.n	8000c0e <HAL_CAN_IRQHandler+0x140>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d004      	beq.n	8000bf4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8000bf2:	e00c      	b.n	8000c0e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d004      	beq.n	8000c08 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
 8000c06:	e002      	b.n	8000c0e <HAL_CAN_IRQHandler+0x140>
        }
        else
        {
          /* Transmission Mailbox 2 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f000 f943 	bl	8000e94 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000c0e:	6a3b      	ldr	r3, [r7, #32]
 8000c10:	f003 0308 	and.w	r3, r3, #8
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d00c      	beq.n	8000c32 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	f003 0310 	and.w	r3, r3, #16
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d007      	beq.n	8000c32 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2210      	movs	r2, #16
 8000c30:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000c32:	6a3b      	ldr	r3, [r7, #32]
 8000c34:	f003 0304 	and.w	r3, r3, #4
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d00b      	beq.n	8000c54 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	f003 0308 	and.w	r3, r3, #8
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d006      	beq.n	8000c54 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2208      	movs	r2, #8
 8000c4c:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f000 f92a 	bl	8000ea8 <HAL_CAN_RxFifo0FullCallback>
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000c54:	6a3b      	ldr	r3, [r7, #32]
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d009      	beq.n	8000c72 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	f003 0303 	and.w	r3, r3, #3
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d002      	beq.n	8000c72 <HAL_CAN_IRQHandler+0x1a4>
    {
      /* Receive FIFO 0 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f002 f989 	bl	8002f84 <HAL_CAN_RxFifo0MsgPendingCallback>
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000c72:	6a3b      	ldr	r3, [r7, #32]
 8000c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d00c      	beq.n	8000c96 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	f003 0310 	and.w	r3, r3, #16
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d007      	beq.n	8000c96 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2210      	movs	r2, #16
 8000c94:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000c96:	6a3b      	ldr	r3, [r7, #32]
 8000c98:	f003 0320 	and.w	r3, r3, #32
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d00b      	beq.n	8000cb8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	f003 0308 	and.w	r3, r3, #8
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d006      	beq.n	8000cb8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2208      	movs	r2, #8
 8000cb0:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f000 f90c 	bl	8000ed0 <HAL_CAN_RxFifo1FullCallback>
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000cb8:	6a3b      	ldr	r3, [r7, #32]
 8000cba:	f003 0310 	and.w	r3, r3, #16
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d009      	beq.n	8000cd6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	691b      	ldr	r3, [r3, #16]
 8000cc8:	f003 0303 	and.w	r3, r3, #3
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d002      	beq.n	8000cd6 <HAL_CAN_IRQHandler+0x208>
    {
      /* Receive FIFO 1 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f000 f8f3 	bl	8000ebc <HAL_CAN_RxFifo1MsgPendingCallback>
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000cd6:	6a3b      	ldr	r3, [r7, #32]
 8000cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d00b      	beq.n	8000cf8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	f003 0310 	and.w	r3, r3, #16
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d006      	beq.n	8000cf8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2210      	movs	r2, #16
 8000cf0:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f000 f8f6 	bl	8000ee4 <HAL_CAN_SleepCallback>
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000cf8:	6a3b      	ldr	r3, [r7, #32]
 8000cfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d00b      	beq.n	8000d1a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	f003 0308 	and.w	r3, r3, #8
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d006      	beq.n	8000d1a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2208      	movs	r2, #8
 8000d12:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f000 f8ef 	bl	8000ef8 <HAL_CAN_WakeUpFromRxMsgCallback>
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000d1a:	6a3b      	ldr	r3, [r7, #32]
 8000d1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d075      	beq.n	8000e10 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	f003 0304 	and.w	r3, r3, #4
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d06c      	beq.n	8000e08 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000d2e:	6a3b      	ldr	r3, [r7, #32]
 8000d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d008      	beq.n	8000d4a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d003      	beq.n	8000d4a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000d4a:	6a3b      	ldr	r3, [r7, #32]
 8000d4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d008      	beq.n	8000d66 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d003      	beq.n	8000d66 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d60:	f043 0302 	orr.w	r3, r3, #2
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000d66:	6a3b      	ldr	r3, [r7, #32]
 8000d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d008      	beq.n	8000d82 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d003      	beq.n	8000d82 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7c:	f043 0304 	orr.w	r3, r3, #4
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000d82:	6a3b      	ldr	r3, [r7, #32]
 8000d84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d03d      	beq.n	8000e08 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d038      	beq.n	8000e08 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000d9c:	2b30      	cmp	r3, #48	; 0x30
 8000d9e:	d017      	beq.n	8000dd0 <HAL_CAN_IRQHandler+0x302>
 8000da0:	2b30      	cmp	r3, #48	; 0x30
 8000da2:	d804      	bhi.n	8000dae <HAL_CAN_IRQHandler+0x2e0>
 8000da4:	2b10      	cmp	r3, #16
 8000da6:	d009      	beq.n	8000dbc <HAL_CAN_IRQHandler+0x2ee>
 8000da8:	2b20      	cmp	r3, #32
 8000daa:	d00c      	beq.n	8000dc6 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000dac:	e024      	b.n	8000df8 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8000dae:	2b50      	cmp	r3, #80	; 0x50
 8000db0:	d018      	beq.n	8000de4 <HAL_CAN_IRQHandler+0x316>
 8000db2:	2b60      	cmp	r3, #96	; 0x60
 8000db4:	d01b      	beq.n	8000dee <HAL_CAN_IRQHandler+0x320>
 8000db6:	2b40      	cmp	r3, #64	; 0x40
 8000db8:	d00f      	beq.n	8000dda <HAL_CAN_IRQHandler+0x30c>
            break;
 8000dba:	e01d      	b.n	8000df8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8000dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dbe:	f043 0308 	orr.w	r3, r3, #8
 8000dc2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000dc4:	e018      	b.n	8000df8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc8:	f043 0310 	orr.w	r3, r3, #16
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000dce:	e013      	b.n	8000df8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd2:	f043 0320 	orr.w	r3, r3, #32
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000dd8:	e00e      	b.n	8000df8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8000dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ddc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000de2:	e009      	b.n	8000df8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8000de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000dec:	e004      	b.n	8000df8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000df6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	699a      	ldr	r2, [r3, #24]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000e06:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2204      	movs	r2, #4
 8000e0e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d008      	beq.n	8000e28 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1c:	431a      	orrs	r2, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f000 f872 	bl	8000f0c <HAL_CAN_ErrorCallback>
  }
}
 8000e28:	bf00      	nop
 8000e2a:	3728      	adds	r7, #40	; 0x28
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <NVIC_SetPriorityGrouping+0x44>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f52:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <NVIC_SetPriorityGrouping+0x44>)
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	60d3      	str	r3, [r2, #12]
}
 8000f58:	bf00      	nop
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f6c:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <NVIC_GetPriorityGrouping+0x18>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	0a1b      	lsrs	r3, r3, #8
 8000f72:	f003 0307 	and.w	r3, r3, #7
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	f003 021f 	and.w	r2, r3, #31
 8000f94:	4907      	ldr	r1, [pc, #28]	; (8000fb4 <NVIC_EnableIRQ+0x30>)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	095b      	lsrs	r3, r3, #5
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000e100 	.word	0xe000e100

08000fb8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	6039      	str	r1, [r7, #0]
 8000fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	da0b      	bge.n	8000fe4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	490c      	ldr	r1, [pc, #48]	; (8001004 <NVIC_SetPriority+0x4c>)
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	f003 030f 	and.w	r3, r3, #15
 8000fd8:	3b04      	subs	r3, #4
 8000fda:	0112      	lsls	r2, r2, #4
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	440b      	add	r3, r1
 8000fe0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe2:	e009      	b.n	8000ff8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	4907      	ldr	r1, [pc, #28]	; (8001008 <NVIC_SetPriority+0x50>)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	0112      	lsls	r2, r2, #4
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00
 8001008:	e000e100 	.word	0xe000e100

0800100c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800100c:	b480      	push	{r7}
 800100e:	b089      	sub	sp, #36	; 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f1c3 0307 	rsb	r3, r3, #7
 8001026:	2b04      	cmp	r3, #4
 8001028:	bf28      	it	cs
 800102a:	2304      	movcs	r3, #4
 800102c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	3304      	adds	r3, #4
 8001032:	2b06      	cmp	r3, #6
 8001034:	d902      	bls.n	800103c <NVIC_EncodePriority+0x30>
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3b03      	subs	r3, #3
 800103a:	e000      	b.n	800103e <NVIC_EncodePriority+0x32>
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43da      	mvns	r2, r3
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	401a      	ands	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001054:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa01 f303 	lsl.w	r3, r1, r3
 800105e:	43d9      	mvns	r1, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	4313      	orrs	r3, r2
         );
}
 8001066:	4618      	mov	r0, r3
 8001068:	3724      	adds	r7, #36	; 0x24
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001084:	d301      	bcc.n	800108a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001086:	2301      	movs	r3, #1
 8001088:	e00f      	b.n	80010aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108a:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <SysTick_Config+0x40>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001092:	210f      	movs	r1, #15
 8001094:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001098:	f7ff ff8e 	bl	8000fb8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <SysTick_Config+0x40>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a2:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <SysTick_Config+0x40>)
 80010a4:	2207      	movs	r2, #7
 80010a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	e000e010 	.word	0xe000e010

080010b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff ff2d 	bl	8000f20 <NVIC_SetPriorityGrouping>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b086      	sub	sp, #24
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	4603      	mov	r3, r0
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	607a      	str	r2, [r7, #4]
 80010da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e0:	f7ff ff42 	bl	8000f68 <NVIC_GetPriorityGrouping>
 80010e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	68b9      	ldr	r1, [r7, #8]
 80010ea:	6978      	ldr	r0, [r7, #20]
 80010ec:	f7ff ff8e 	bl	800100c <NVIC_EncodePriority>
 80010f0:	4602      	mov	r2, r0
 80010f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f6:	4611      	mov	r1, r2
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff5d 	bl	8000fb8 <NVIC_SetPriority>
}
 80010fe:	bf00      	nop
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	4603      	mov	r3, r0
 800110e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff35 	bl	8000f84 <NVIC_EnableIRQ>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ffa2 	bl	8001074 <SysTick_Config>
 8001130:	4603      	mov	r3, r0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800113c:	b480      	push	{r7}
 800113e:	b087      	sub	sp, #28
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001152:	e14e      	b.n	80013f2 <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	2101      	movs	r1, #1
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	fa01 f303 	lsl.w	r3, r1, r3
 8001160:	4013      	ands	r3, r2
 8001162:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2b00      	cmp	r3, #0
 8001168:	f000 8140 	beq.w	80013ec <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	2b02      	cmp	r3, #2
 8001172:	d003      	beq.n	800117c <HAL_GPIO_Init+0x40>
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	2b12      	cmp	r3, #18
 800117a:	d123      	bne.n	80011c4 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	08da      	lsrs	r2, r3, #3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3208      	adds	r2, #8
 8001184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001188:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	f003 0307 	and.w	r3, r3, #7
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	220f      	movs	r2, #15
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	691a      	ldr	r2, [r3, #16]
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	08da      	lsrs	r2, r3, #3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	3208      	adds	r2, #8
 80011be:	6939      	ldr	r1, [r7, #16]
 80011c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	2203      	movs	r2, #3
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4013      	ands	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f003 0203 	and.w	r2, r3, #3
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d00b      	beq.n	8001218 <HAL_GPIO_Init+0xdc>
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	2b02      	cmp	r3, #2
 8001206:	d007      	beq.n	8001218 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800120c:	2b11      	cmp	r3, #17
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	2b12      	cmp	r3, #18
 8001216:	d130      	bne.n	800127a <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	2203      	movs	r2, #3
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4013      	ands	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	68da      	ldr	r2, [r3, #12]
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	4313      	orrs	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800124e:	2201      	movs	r2, #1
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	4013      	ands	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	091b      	lsrs	r3, r3, #4
 8001264:	f003 0201 	and.w	r2, r3, #1
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	2203      	movs	r2, #3
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	689a      	ldr	r2, [r3, #8]
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f000 809a 	beq.w	80013ec <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b8:	4b55      	ldr	r3, [pc, #340]	; (8001410 <HAL_GPIO_Init+0x2d4>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	4a54      	ldr	r2, [pc, #336]	; (8001410 <HAL_GPIO_Init+0x2d4>)
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	6193      	str	r3, [r2, #24]
 80012c4:	4b52      	ldr	r3, [pc, #328]	; (8001410 <HAL_GPIO_Init+0x2d4>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80012d0:	4a50      	ldr	r2, [pc, #320]	; (8001414 <HAL_GPIO_Init+0x2d8>)
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	089b      	lsrs	r3, r3, #2
 80012d6:	3302      	adds	r3, #2
 80012d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012dc:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	f003 0303 	and.w	r3, r3, #3
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	220f      	movs	r2, #15
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4013      	ands	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012fa:	d013      	beq.n	8001324 <HAL_GPIO_Init+0x1e8>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a46      	ldr	r2, [pc, #280]	; (8001418 <HAL_GPIO_Init+0x2dc>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d00d      	beq.n	8001320 <HAL_GPIO_Init+0x1e4>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a45      	ldr	r2, [pc, #276]	; (800141c <HAL_GPIO_Init+0x2e0>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d007      	beq.n	800131c <HAL_GPIO_Init+0x1e0>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a44      	ldr	r2, [pc, #272]	; (8001420 <HAL_GPIO_Init+0x2e4>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d101      	bne.n	8001318 <HAL_GPIO_Init+0x1dc>
 8001314:	2303      	movs	r3, #3
 8001316:	e006      	b.n	8001326 <HAL_GPIO_Init+0x1ea>
 8001318:	2305      	movs	r3, #5
 800131a:	e004      	b.n	8001326 <HAL_GPIO_Init+0x1ea>
 800131c:	2302      	movs	r3, #2
 800131e:	e002      	b.n	8001326 <HAL_GPIO_Init+0x1ea>
 8001320:	2301      	movs	r3, #1
 8001322:	e000      	b.n	8001326 <HAL_GPIO_Init+0x1ea>
 8001324:	2300      	movs	r3, #0
 8001326:	697a      	ldr	r2, [r7, #20]
 8001328:	f002 0203 	and.w	r2, r2, #3
 800132c:	0092      	lsls	r2, r2, #2
 800132e:	4093      	lsls	r3, r2
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	4313      	orrs	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001336:	4937      	ldr	r1, [pc, #220]	; (8001414 <HAL_GPIO_Init+0x2d8>)
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	089b      	lsrs	r3, r3, #2
 800133c:	3302      	adds	r3, #2
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001344:	4b37      	ldr	r3, [pc, #220]	; (8001424 <HAL_GPIO_Init+0x2e8>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	43db      	mvns	r3, r3
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4013      	ands	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	4313      	orrs	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001368:	4a2e      	ldr	r2, [pc, #184]	; (8001424 <HAL_GPIO_Init+0x2e8>)
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800136e:	4b2d      	ldr	r3, [pc, #180]	; (8001424 <HAL_GPIO_Init+0x2e8>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	43db      	mvns	r3, r3
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	4013      	ands	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4313      	orrs	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001392:	4a24      	ldr	r2, [pc, #144]	; (8001424 <HAL_GPIO_Init+0x2e8>)
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001398:	4b22      	ldr	r3, [pc, #136]	; (8001424 <HAL_GPIO_Init+0x2e8>)
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013bc:	4a19      	ldr	r2, [pc, #100]	; (8001424 <HAL_GPIO_Init+0x2e8>)
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <HAL_GPIO_Init+0x2e8>)
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	43db      	mvns	r3, r3
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4013      	ands	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013e6:	4a0f      	ldr	r2, [pc, #60]	; (8001424 <HAL_GPIO_Init+0x2e8>)
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	3301      	adds	r3, #1
 80013f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	fa22 f303 	lsr.w	r3, r2, r3
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f47f aea9 	bne.w	8001154 <HAL_GPIO_Init+0x18>
  }
}
 8001402:	bf00      	nop
 8001404:	371c      	adds	r7, #28
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	40021000 	.word	0x40021000
 8001414:	40010000 	.word	0x40010000
 8001418:	48000400 	.word	0x48000400
 800141c:	48000800 	.word	0x48000800
 8001420:	48000c00 	.word	0x48000c00
 8001424:	40010400 	.word	0x40010400

08001428 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	807b      	strh	r3, [r7, #2]
 8001434:	4613      	mov	r3, r2
 8001436:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001438:	787b      	ldrb	r3, [r7, #1]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800143e:	887a      	ldrh	r2, [r7, #2]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001444:	e002      	b.n	800144c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001446:	887a      	ldrh	r2, [r7, #2]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800145e:	af00      	add	r7, sp, #0
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d102      	bne.n	8001472 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	f000 beda 	b.w	8002226 <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	2b00      	cmp	r3, #0
 800147e:	f000 816e 	beq.w	800175e <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001482:	4bb5      	ldr	r3, [pc, #724]	; (8001758 <HAL_RCC_OscConfig+0x300>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f003 030c 	and.w	r3, r3, #12
 800148a:	2b04      	cmp	r3, #4
 800148c:	d00c      	beq.n	80014a8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800148e:	4bb2      	ldr	r3, [pc, #712]	; (8001758 <HAL_RCC_OscConfig+0x300>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 030c 	and.w	r3, r3, #12
 8001496:	2b08      	cmp	r3, #8
 8001498:	d15a      	bne.n	8001550 <HAL_RCC_OscConfig+0xf8>
 800149a:	4baf      	ldr	r3, [pc, #700]	; (8001758 <HAL_RCC_OscConfig+0x300>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014a6:	d153      	bne.n	8001550 <HAL_RCC_OscConfig+0xf8>
 80014a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014ac:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80014b4:	fa93 f3a3 	rbit	r3, r3
 80014b8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80014bc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c0:	fab3 f383 	clz	r3, r3
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	095b      	lsrs	r3, r3, #5
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d102      	bne.n	80014da <HAL_RCC_OscConfig+0x82>
 80014d4:	4ba0      	ldr	r3, [pc, #640]	; (8001758 <HAL_RCC_OscConfig+0x300>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	e015      	b.n	8001506 <HAL_RCC_OscConfig+0xae>
 80014da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014de:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80014e6:	fa93 f3a3 	rbit	r3, r3
 80014ea:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80014ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014f2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80014f6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80014fa:	fa93 f3a3 	rbit	r3, r3
 80014fe:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001502:	4b95      	ldr	r3, [pc, #596]	; (8001758 <HAL_RCC_OscConfig+0x300>)
 8001504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001506:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800150a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800150e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001512:	fa92 f2a2 	rbit	r2, r2
 8001516:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 800151a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800151e:	fab2 f282 	clz	r2, r2
 8001522:	b252      	sxtb	r2, r2
 8001524:	f042 0220 	orr.w	r2, r2, #32
 8001528:	b252      	sxtb	r2, r2
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	f002 021f 	and.w	r2, r2, #31
 8001530:	2101      	movs	r1, #1
 8001532:	fa01 f202 	lsl.w	r2, r1, r2
 8001536:	4013      	ands	r3, r2
 8001538:	2b00      	cmp	r3, #0
 800153a:	f000 810f 	beq.w	800175c <HAL_RCC_OscConfig+0x304>
 800153e:	1d3b      	adds	r3, r7, #4
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	f040 8109 	bne.w	800175c <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	f000 be6b 	b.w	8002226 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800155a:	d106      	bne.n	800156a <HAL_RCC_OscConfig+0x112>
 800155c:	4b7e      	ldr	r3, [pc, #504]	; (8001758 <HAL_RCC_OscConfig+0x300>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a7d      	ldr	r2, [pc, #500]	; (8001758 <HAL_RCC_OscConfig+0x300>)
 8001562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001566:	6013      	str	r3, [r2, #0]
 8001568:	e030      	b.n	80015cc <HAL_RCC_OscConfig+0x174>
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d10c      	bne.n	800158e <HAL_RCC_OscConfig+0x136>
 8001574:	4b78      	ldr	r3, [pc, #480]	; (8001758 <HAL_RCC_OscConfig+0x300>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a77      	ldr	r2, [pc, #476]	; (8001758 <HAL_RCC_OscConfig+0x300>)
 800157a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800157e:	6013      	str	r3, [r2, #0]
 8001580:	4b75      	ldr	r3, [pc, #468]	; (8001758 <HAL_RCC_OscConfig+0x300>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a74      	ldr	r2, [pc, #464]	; (8001758 <HAL_RCC_OscConfig+0x300>)
 8001586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800158a:	6013      	str	r3, [r2, #0]
 800158c:	e01e      	b.n	80015cc <HAL_RCC_OscConfig+0x174>
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001598:	d10c      	bne.n	80015b4 <HAL_RCC_OscConfig+0x15c>
 800159a:	4b6f      	ldr	r3, [pc, #444]	; (8001758 <HAL_RCC_OscConfig+0x300>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a6e      	ldr	r2, [pc, #440]	; (8001758 <HAL_RCC_OscConfig+0x300>)
 80015a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	4b6c      	ldr	r3, [pc, #432]	; (8001758 <HAL_RCC_OscConfig+0x300>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a6b      	ldr	r2, [pc, #428]	; (8001758 <HAL_RCC_OscConfig+0x300>)
 80015ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	e00b      	b.n	80015cc <HAL_RCC_OscConfig+0x174>
 80015b4:	4b68      	ldr	r3, [pc, #416]	; (8001758 <HAL_RCC_OscConfig+0x300>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a67      	ldr	r2, [pc, #412]	; (8001758 <HAL_RCC_OscConfig+0x300>)
 80015ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	4b65      	ldr	r3, [pc, #404]	; (8001758 <HAL_RCC_OscConfig+0x300>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a64      	ldr	r2, [pc, #400]	; (8001758 <HAL_RCC_OscConfig+0x300>)
 80015c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ca:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015cc:	4b62      	ldr	r3, [pc, #392]	; (8001758 <HAL_RCC_OscConfig+0x300>)
 80015ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d0:	f023 020f 	bic.w	r2, r3, #15
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	495f      	ldr	r1, [pc, #380]	; (8001758 <HAL_RCC_OscConfig+0x300>)
 80015dc:	4313      	orrs	r3, r2
 80015de:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d05a      	beq.n	80016a0 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ea:	f7fe fe47 	bl	800027c <HAL_GetTick>
 80015ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f2:	e00a      	b.n	800160a <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015f4:	f7fe fe42 	bl	800027c <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b64      	cmp	r3, #100	; 0x64
 8001602:	d902      	bls.n	800160a <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	f000 be0e 	b.w	8002226 <HAL_RCC_OscConfig+0xdce>
 800160a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800160e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001612:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001616:	fa93 f3a3 	rbit	r3, r3
 800161a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 800161e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001622:	fab3 f383 	clz	r3, r3
 8001626:	b2db      	uxtb	r3, r3
 8001628:	095b      	lsrs	r3, r3, #5
 800162a:	b2db      	uxtb	r3, r3
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b01      	cmp	r3, #1
 8001634:	d102      	bne.n	800163c <HAL_RCC_OscConfig+0x1e4>
 8001636:	4b48      	ldr	r3, [pc, #288]	; (8001758 <HAL_RCC_OscConfig+0x300>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	e015      	b.n	8001668 <HAL_RCC_OscConfig+0x210>
 800163c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001640:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001644:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001648:	fa93 f3a3 	rbit	r3, r3
 800164c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001650:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001654:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001658:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800165c:	fa93 f3a3 	rbit	r3, r3
 8001660:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001664:	4b3c      	ldr	r3, [pc, #240]	; (8001758 <HAL_RCC_OscConfig+0x300>)
 8001666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001668:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800166c:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001670:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001674:	fa92 f2a2 	rbit	r2, r2
 8001678:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 800167c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001680:	fab2 f282 	clz	r2, r2
 8001684:	b252      	sxtb	r2, r2
 8001686:	f042 0220 	orr.w	r2, r2, #32
 800168a:	b252      	sxtb	r2, r2
 800168c:	b2d2      	uxtb	r2, r2
 800168e:	f002 021f 	and.w	r2, r2, #31
 8001692:	2101      	movs	r1, #1
 8001694:	fa01 f202 	lsl.w	r2, r1, r2
 8001698:	4013      	ands	r3, r2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d0aa      	beq.n	80015f4 <HAL_RCC_OscConfig+0x19c>
 800169e:	e05e      	b.n	800175e <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a0:	f7fe fdec 	bl	800027c <HAL_GetTick>
 80016a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016a8:	e00a      	b.n	80016c0 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016aa:	f7fe fde7 	bl	800027c <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b64      	cmp	r3, #100	; 0x64
 80016b8:	d902      	bls.n	80016c0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	f000 bdb3 	b.w	8002226 <HAL_RCC_OscConfig+0xdce>
 80016c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016c4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80016cc:	fa93 f3a3 	rbit	r3, r3
 80016d0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 80016d4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d8:	fab3 f383 	clz	r3, r3
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	095b      	lsrs	r3, r3, #5
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	f043 0301 	orr.w	r3, r3, #1
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d102      	bne.n	80016f2 <HAL_RCC_OscConfig+0x29a>
 80016ec:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <HAL_RCC_OscConfig+0x300>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	e015      	b.n	800171e <HAL_RCC_OscConfig+0x2c6>
 80016f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016f6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80016fe:	fa93 f3a3 	rbit	r3, r3
 8001702:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001706:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800170a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800170e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001712:	fa93 f3a3 	rbit	r3, r3
 8001716:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800171a:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <HAL_RCC_OscConfig+0x300>)
 800171c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001722:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001726:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800172a:	fa92 f2a2 	rbit	r2, r2
 800172e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8001732:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001736:	fab2 f282 	clz	r2, r2
 800173a:	b252      	sxtb	r2, r2
 800173c:	f042 0220 	orr.w	r2, r2, #32
 8001740:	b252      	sxtb	r2, r2
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	f002 021f 	and.w	r2, r2, #31
 8001748:	2101      	movs	r1, #1
 800174a:	fa01 f202 	lsl.w	r2, r1, r2
 800174e:	4013      	ands	r3, r2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1aa      	bne.n	80016aa <HAL_RCC_OscConfig+0x252>
 8001754:	e003      	b.n	800175e <HAL_RCC_OscConfig+0x306>
 8001756:	bf00      	nop
 8001758:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800175c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800175e:	1d3b      	adds	r3, r7, #4
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	f000 8170 	beq.w	8001a4e <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800176e:	4bd0      	ldr	r3, [pc, #832]	; (8001ab0 <HAL_RCC_OscConfig+0x658>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f003 030c 	and.w	r3, r3, #12
 8001776:	2b00      	cmp	r3, #0
 8001778:	d00b      	beq.n	8001792 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800177a:	4bcd      	ldr	r3, [pc, #820]	; (8001ab0 <HAL_RCC_OscConfig+0x658>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f003 030c 	and.w	r3, r3, #12
 8001782:	2b08      	cmp	r3, #8
 8001784:	d16d      	bne.n	8001862 <HAL_RCC_OscConfig+0x40a>
 8001786:	4bca      	ldr	r3, [pc, #808]	; (8001ab0 <HAL_RCC_OscConfig+0x658>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d167      	bne.n	8001862 <HAL_RCC_OscConfig+0x40a>
 8001792:	2302      	movs	r3, #2
 8001794:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001798:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800179c:	fa93 f3a3 	rbit	r3, r3
 80017a0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 80017a4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017a8:	fab3 f383 	clz	r3, r3
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	095b      	lsrs	r3, r3, #5
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d102      	bne.n	80017c2 <HAL_RCC_OscConfig+0x36a>
 80017bc:	4bbc      	ldr	r3, [pc, #752]	; (8001ab0 <HAL_RCC_OscConfig+0x658>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	e013      	b.n	80017ea <HAL_RCC_OscConfig+0x392>
 80017c2:	2302      	movs	r3, #2
 80017c4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80017cc:	fa93 f3a3 	rbit	r3, r3
 80017d0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80017d4:	2302      	movs	r3, #2
 80017d6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80017da:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80017de:	fa93 f3a3 	rbit	r3, r3
 80017e2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80017e6:	4bb2      	ldr	r3, [pc, #712]	; (8001ab0 <HAL_RCC_OscConfig+0x658>)
 80017e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ea:	2202      	movs	r2, #2
 80017ec:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80017f0:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80017f4:	fa92 f2a2 	rbit	r2, r2
 80017f8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 80017fc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001800:	fab2 f282 	clz	r2, r2
 8001804:	b252      	sxtb	r2, r2
 8001806:	f042 0220 	orr.w	r2, r2, #32
 800180a:	b252      	sxtb	r2, r2
 800180c:	b2d2      	uxtb	r2, r2
 800180e:	f002 021f 	and.w	r2, r2, #31
 8001812:	2101      	movs	r1, #1
 8001814:	fa01 f202 	lsl.w	r2, r1, r2
 8001818:	4013      	ands	r3, r2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d007      	beq.n	800182e <HAL_RCC_OscConfig+0x3d6>
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d002      	beq.n	800182e <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	f000 bcfc 	b.w	8002226 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800182e:	4ba0      	ldr	r3, [pc, #640]	; (8001ab0 <HAL_RCC_OscConfig+0x658>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001836:	1d3b      	adds	r3, r7, #4
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6959      	ldr	r1, [r3, #20]
 800183c:	23f8      	movs	r3, #248	; 0xf8
 800183e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001842:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001846:	fa93 f3a3 	rbit	r3, r3
 800184a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 800184e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001852:	fab3 f383 	clz	r3, r3
 8001856:	fa01 f303 	lsl.w	r3, r1, r3
 800185a:	4995      	ldr	r1, [pc, #596]	; (8001ab0 <HAL_RCC_OscConfig+0x658>)
 800185c:	4313      	orrs	r3, r2
 800185e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001860:	e0f5      	b.n	8001a4e <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001862:	1d3b      	adds	r3, r7, #4
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	2b00      	cmp	r3, #0
 800186a:	f000 8085 	beq.w	8001978 <HAL_RCC_OscConfig+0x520>
 800186e:	2301      	movs	r3, #1
 8001870:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001874:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001878:	fa93 f3a3 	rbit	r3, r3
 800187c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8001880:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001884:	fab3 f383 	clz	r3, r3
 8001888:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800188c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	461a      	mov	r2, r3
 8001894:	2301      	movs	r3, #1
 8001896:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001898:	f7fe fcf0 	bl	800027c <HAL_GetTick>
 800189c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a0:	e00a      	b.n	80018b8 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018a2:	f7fe fceb 	bl	800027c <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d902      	bls.n	80018b8 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	f000 bcb7 	b.w	8002226 <HAL_RCC_OscConfig+0xdce>
 80018b8:	2302      	movs	r3, #2
 80018ba:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018be:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80018c2:	fa93 f3a3 	rbit	r3, r3
 80018c6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 80018ca:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ce:	fab3 f383 	clz	r3, r3
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	095b      	lsrs	r3, r3, #5
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d102      	bne.n	80018e8 <HAL_RCC_OscConfig+0x490>
 80018e2:	4b73      	ldr	r3, [pc, #460]	; (8001ab0 <HAL_RCC_OscConfig+0x658>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	e013      	b.n	8001910 <HAL_RCC_OscConfig+0x4b8>
 80018e8:	2302      	movs	r3, #2
 80018ea:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ee:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80018f2:	fa93 f3a3 	rbit	r3, r3
 80018f6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80018fa:	2302      	movs	r3, #2
 80018fc:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001900:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001904:	fa93 f3a3 	rbit	r3, r3
 8001908:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800190c:	4b68      	ldr	r3, [pc, #416]	; (8001ab0 <HAL_RCC_OscConfig+0x658>)
 800190e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001910:	2202      	movs	r2, #2
 8001912:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001916:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800191a:	fa92 f2a2 	rbit	r2, r2
 800191e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8001922:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001926:	fab2 f282 	clz	r2, r2
 800192a:	b252      	sxtb	r2, r2
 800192c:	f042 0220 	orr.w	r2, r2, #32
 8001930:	b252      	sxtb	r2, r2
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	f002 021f 	and.w	r2, r2, #31
 8001938:	2101      	movs	r1, #1
 800193a:	fa01 f202 	lsl.w	r2, r1, r2
 800193e:	4013      	ands	r3, r2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0ae      	beq.n	80018a2 <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001944:	4b5a      	ldr	r3, [pc, #360]	; (8001ab0 <HAL_RCC_OscConfig+0x658>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800194c:	1d3b      	adds	r3, r7, #4
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6959      	ldr	r1, [r3, #20]
 8001952:	23f8      	movs	r3, #248	; 0xf8
 8001954:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001958:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800195c:	fa93 f3a3 	rbit	r3, r3
 8001960:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8001964:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001968:	fab3 f383 	clz	r3, r3
 800196c:	fa01 f303 	lsl.w	r3, r1, r3
 8001970:	494f      	ldr	r1, [pc, #316]	; (8001ab0 <HAL_RCC_OscConfig+0x658>)
 8001972:	4313      	orrs	r3, r2
 8001974:	600b      	str	r3, [r1, #0]
 8001976:	e06a      	b.n	8001a4e <HAL_RCC_OscConfig+0x5f6>
 8001978:	2301      	movs	r3, #1
 800197a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001982:	fa93 f3a3 	rbit	r3, r3
 8001986:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 800198a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800198e:	fab3 f383 	clz	r3, r3
 8001992:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001996:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	461a      	mov	r2, r3
 800199e:	2300      	movs	r3, #0
 80019a0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a2:	f7fe fc6b 	bl	800027c <HAL_GetTick>
 80019a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019aa:	e00a      	b.n	80019c2 <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ac:	f7fe fc66 	bl	800027c <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d902      	bls.n	80019c2 <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	f000 bc32 	b.w	8002226 <HAL_RCC_OscConfig+0xdce>
 80019c2:	2302      	movs	r3, #2
 80019c4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80019cc:	fa93 f3a3 	rbit	r3, r3
 80019d0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 80019d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d8:	fab3 f383 	clz	r3, r3
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	095b      	lsrs	r3, r3, #5
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d102      	bne.n	80019f2 <HAL_RCC_OscConfig+0x59a>
 80019ec:	4b30      	ldr	r3, [pc, #192]	; (8001ab0 <HAL_RCC_OscConfig+0x658>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	e013      	b.n	8001a1a <HAL_RCC_OscConfig+0x5c2>
 80019f2:	2302      	movs	r3, #2
 80019f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80019fc:	fa93 f3a3 	rbit	r3, r3
 8001a00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001a04:	2302      	movs	r3, #2
 8001a06:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001a0a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001a0e:	fa93 f3a3 	rbit	r3, r3
 8001a12:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001a16:	4b26      	ldr	r3, [pc, #152]	; (8001ab0 <HAL_RCC_OscConfig+0x658>)
 8001a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001a20:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001a24:	fa92 f2a2 	rbit	r2, r2
 8001a28:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8001a2c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001a30:	fab2 f282 	clz	r2, r2
 8001a34:	b252      	sxtb	r2, r2
 8001a36:	f042 0220 	orr.w	r2, r2, #32
 8001a3a:	b252      	sxtb	r2, r2
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	f002 021f 	and.w	r2, r2, #31
 8001a42:	2101      	movs	r1, #1
 8001a44:	fa01 f202 	lsl.w	r2, r1, r2
 8001a48:	4013      	ands	r3, r2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1ae      	bne.n	80019ac <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a4e:	1d3b      	adds	r3, r7, #4
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0308 	and.w	r3, r3, #8
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 80d8 	beq.w	8001c0e <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a5e:	1d3b      	adds	r3, r7, #4
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d067      	beq.n	8001b38 <HAL_RCC_OscConfig+0x6e0>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a72:	fa93 f3a3 	rbit	r3, r3
 8001a76:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8001a7a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a7e:	fab3 f383 	clz	r3, r3
 8001a82:	461a      	mov	r2, r3
 8001a84:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <HAL_RCC_OscConfig+0x65c>)
 8001a86:	4413      	add	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a90:	f7fe fbf4 	bl	800027c <HAL_GetTick>
 8001a94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a98:	e00e      	b.n	8001ab8 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a9a:	f7fe fbef 	bl	800027c <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d906      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e3bb      	b.n	8002226 <HAL_RCC_OscConfig+0xdce>
 8001aae:	bf00      	nop
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	10908120 	.word	0x10908120
 8001ab8:	2302      	movs	r3, #2
 8001aba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001ac2:	fa93 f3a3 	rbit	r3, r3
 8001ac6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001aca:	2302      	movs	r3, #2
 8001acc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001ad4:	fa93 f2a3 	rbit	r2, r3
 8001ad8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	fa93 f2a3 	rbit	r2, r3
 8001af0:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001af4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001af6:	4ba5      	ldr	r3, [pc, #660]	; (8001d8c <HAL_RCC_OscConfig+0x934>)
 8001af8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001afa:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001afe:	2102      	movs	r1, #2
 8001b00:	6019      	str	r1, [r3, #0]
 8001b02:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	fa93 f1a3 	rbit	r1, r3
 8001b0c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001b10:	6019      	str	r1, [r3, #0]
  return(result);
 8001b12:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	fab3 f383 	clz	r3, r3
 8001b1c:	b25b      	sxtb	r3, r3
 8001b1e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b22:	b25b      	sxtb	r3, r3
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	f003 031f 	and.w	r3, r3, #31
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b30:	4013      	ands	r3, r2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d0b1      	beq.n	8001a9a <HAL_RCC_OscConfig+0x642>
 8001b36:	e06a      	b.n	8001c0e <HAL_RCC_OscConfig+0x7b6>
 8001b38:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b40:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	fa93 f2a3 	rbit	r2, r3
 8001b4a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001b4e:	601a      	str	r2, [r3, #0]
  return(result);
 8001b50:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001b54:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b56:	fab3 f383 	clz	r3, r3
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	4b8c      	ldr	r3, [pc, #560]	; (8001d90 <HAL_RCC_OscConfig+0x938>)
 8001b5e:	4413      	add	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	461a      	mov	r2, r3
 8001b64:	2300      	movs	r3, #0
 8001b66:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b68:	f7fe fb88 	bl	800027c <HAL_GetTick>
 8001b6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b70:	e009      	b.n	8001b86 <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b72:	f7fe fb83 	bl	800027c <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e34f      	b.n	8002226 <HAL_RCC_OscConfig+0xdce>
 8001b86:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	fa93 f2a3 	rbit	r2, r3
 8001b98:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	fa93 f2a3 	rbit	r2, r3
 8001bb0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001bba:	2202      	movs	r2, #2
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	fa93 f2a3 	rbit	r2, r3
 8001bc8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001bcc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bce:	4b6f      	ldr	r3, [pc, #444]	; (8001d8c <HAL_RCC_OscConfig+0x934>)
 8001bd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bd2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001bd6:	2102      	movs	r1, #2
 8001bd8:	6019      	str	r1, [r3, #0]
 8001bda:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	fa93 f1a3 	rbit	r1, r3
 8001be4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001be8:	6019      	str	r1, [r3, #0]
  return(result);
 8001bea:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	fab3 f383 	clz	r3, r3
 8001bf4:	b25b      	sxtb	r3, r3
 8001bf6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001bfa:	b25b      	sxtb	r3, r3
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	f003 031f 	and.w	r3, r3, #31
 8001c02:	2101      	movs	r1, #1
 8001c04:	fa01 f303 	lsl.w	r3, r1, r3
 8001c08:	4013      	ands	r3, r2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1b1      	bne.n	8001b72 <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c0e:	1d3b      	adds	r3, r7, #4
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f000 8159 	beq.w	8001ed0 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c24:	4b59      	ldr	r3, [pc, #356]	; (8001d8c <HAL_RCC_OscConfig+0x934>)
 8001c26:	69db      	ldr	r3, [r3, #28]
 8001c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d112      	bne.n	8001c56 <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c30:	4b56      	ldr	r3, [pc, #344]	; (8001d8c <HAL_RCC_OscConfig+0x934>)
 8001c32:	69db      	ldr	r3, [r3, #28]
 8001c34:	4a55      	ldr	r2, [pc, #340]	; (8001d8c <HAL_RCC_OscConfig+0x934>)
 8001c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	61d3      	str	r3, [r2, #28]
 8001c3c:	4b53      	ldr	r3, [pc, #332]	; (8001d8c <HAL_RCC_OscConfig+0x934>)
 8001c3e:	69db      	ldr	r3, [r3, #28]
 8001c40:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001c44:	f107 030c 	add.w	r3, r7, #12
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	f107 030c 	add.w	r3, r7, #12
 8001c4e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001c50:	2301      	movs	r3, #1
 8001c52:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c56:	4b4f      	ldr	r3, [pc, #316]	; (8001d94 <HAL_RCC_OscConfig+0x93c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d11a      	bne.n	8001c98 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c62:	4b4c      	ldr	r3, [pc, #304]	; (8001d94 <HAL_RCC_OscConfig+0x93c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a4b      	ldr	r2, [pc, #300]	; (8001d94 <HAL_RCC_OscConfig+0x93c>)
 8001c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c6c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c6e:	f7fe fb05 	bl	800027c <HAL_GetTick>
 8001c72:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c76:	e009      	b.n	8001c8c <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c78:	f7fe fb00 	bl	800027c <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b64      	cmp	r3, #100	; 0x64
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e2cc      	b.n	8002226 <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c8c:	4b41      	ldr	r3, [pc, #260]	; (8001d94 <HAL_RCC_OscConfig+0x93c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0ef      	beq.n	8001c78 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c98:	1d3b      	adds	r3, r7, #4
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d106      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x858>
 8001ca2:	4b3a      	ldr	r3, [pc, #232]	; (8001d8c <HAL_RCC_OscConfig+0x934>)
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	4a39      	ldr	r2, [pc, #228]	; (8001d8c <HAL_RCC_OscConfig+0x934>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	6213      	str	r3, [r2, #32]
 8001cae:	e02f      	b.n	8001d10 <HAL_RCC_OscConfig+0x8b8>
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10c      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x87c>
 8001cba:	4b34      	ldr	r3, [pc, #208]	; (8001d8c <HAL_RCC_OscConfig+0x934>)
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	4a33      	ldr	r2, [pc, #204]	; (8001d8c <HAL_RCC_OscConfig+0x934>)
 8001cc0:	f023 0301 	bic.w	r3, r3, #1
 8001cc4:	6213      	str	r3, [r2, #32]
 8001cc6:	4b31      	ldr	r3, [pc, #196]	; (8001d8c <HAL_RCC_OscConfig+0x934>)
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	4a30      	ldr	r2, [pc, #192]	; (8001d8c <HAL_RCC_OscConfig+0x934>)
 8001ccc:	f023 0304 	bic.w	r3, r3, #4
 8001cd0:	6213      	str	r3, [r2, #32]
 8001cd2:	e01d      	b.n	8001d10 <HAL_RCC_OscConfig+0x8b8>
 8001cd4:	1d3b      	adds	r3, r7, #4
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	2b05      	cmp	r3, #5
 8001cdc:	d10c      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x8a0>
 8001cde:	4b2b      	ldr	r3, [pc, #172]	; (8001d8c <HAL_RCC_OscConfig+0x934>)
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	4a2a      	ldr	r2, [pc, #168]	; (8001d8c <HAL_RCC_OscConfig+0x934>)
 8001ce4:	f043 0304 	orr.w	r3, r3, #4
 8001ce8:	6213      	str	r3, [r2, #32]
 8001cea:	4b28      	ldr	r3, [pc, #160]	; (8001d8c <HAL_RCC_OscConfig+0x934>)
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	4a27      	ldr	r2, [pc, #156]	; (8001d8c <HAL_RCC_OscConfig+0x934>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	6213      	str	r3, [r2, #32]
 8001cf6:	e00b      	b.n	8001d10 <HAL_RCC_OscConfig+0x8b8>
 8001cf8:	4b24      	ldr	r3, [pc, #144]	; (8001d8c <HAL_RCC_OscConfig+0x934>)
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	4a23      	ldr	r2, [pc, #140]	; (8001d8c <HAL_RCC_OscConfig+0x934>)
 8001cfe:	f023 0301 	bic.w	r3, r3, #1
 8001d02:	6213      	str	r3, [r2, #32]
 8001d04:	4b21      	ldr	r3, [pc, #132]	; (8001d8c <HAL_RCC_OscConfig+0x934>)
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	4a20      	ldr	r2, [pc, #128]	; (8001d8c <HAL_RCC_OscConfig+0x934>)
 8001d0a:	f023 0304 	bic.w	r3, r3, #4
 8001d0e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d10:	1d3b      	adds	r3, r7, #4
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d06b      	beq.n	8001df2 <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1a:	f7fe faaf 	bl	800027c <HAL_GetTick>
 8001d1e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d22:	e00b      	b.n	8001d3c <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d24:	f7fe faaa 	bl	800027c <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e274      	b.n	8002226 <HAL_RCC_OscConfig+0xdce>
 8001d3c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d40:	2202      	movs	r2, #2
 8001d42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d44:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	fa93 f2a3 	rbit	r2, r3
 8001d4e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001d58:	2202      	movs	r2, #2
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	fa93 f2a3 	rbit	r2, r3
 8001d66:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001d6a:	601a      	str	r2, [r3, #0]
  return(result);
 8001d6c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001d70:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d72:	fab3 f383 	clz	r3, r3
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	095b      	lsrs	r3, r3, #5
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	f043 0302 	orr.w	r3, r3, #2
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d108      	bne.n	8001d98 <HAL_RCC_OscConfig+0x940>
 8001d86:	4b01      	ldr	r3, [pc, #4]	; (8001d8c <HAL_RCC_OscConfig+0x934>)
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	e013      	b.n	8001db4 <HAL_RCC_OscConfig+0x95c>
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	10908120 	.word	0x10908120
 8001d94:	40007000 	.word	0x40007000
 8001d98:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	fa93 f2a3 	rbit	r2, r3
 8001daa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	4bbb      	ldr	r3, [pc, #748]	; (80020a0 <HAL_RCC_OscConfig+0xc48>)
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001db8:	2102      	movs	r1, #2
 8001dba:	6011      	str	r1, [r2, #0]
 8001dbc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001dc0:	6812      	ldr	r2, [r2, #0]
 8001dc2:	fa92 f1a2 	rbit	r1, r2
 8001dc6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001dca:	6011      	str	r1, [r2, #0]
  return(result);
 8001dcc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001dd0:	6812      	ldr	r2, [r2, #0]
 8001dd2:	fab2 f282 	clz	r2, r2
 8001dd6:	b252      	sxtb	r2, r2
 8001dd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ddc:	b252      	sxtb	r2, r2
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	f002 021f 	and.w	r2, r2, #31
 8001de4:	2101      	movs	r1, #1
 8001de6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dea:	4013      	ands	r3, r2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d099      	beq.n	8001d24 <HAL_RCC_OscConfig+0x8cc>
 8001df0:	e064      	b.n	8001ebc <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df2:	f7fe fa43 	bl	800027c <HAL_GetTick>
 8001df6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dfa:	e00b      	b.n	8001e14 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dfc:	f7fe fa3e 	bl	800027c <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e208      	b.n	8002226 <HAL_RCC_OscConfig+0xdce>
 8001e14:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e18:	2202      	movs	r2, #2
 8001e1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	fa93 f2a3 	rbit	r2, r3
 8001e26:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e30:	2202      	movs	r2, #2
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	fa93 f2a3 	rbit	r2, r3
 8001e3e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001e42:	601a      	str	r2, [r3, #0]
  return(result);
 8001e44:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001e48:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e4a:	fab3 f383 	clz	r3, r3
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	095b      	lsrs	r3, r3, #5
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	f043 0302 	orr.w	r3, r3, #2
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d102      	bne.n	8001e64 <HAL_RCC_OscConfig+0xa0c>
 8001e5e:	4b90      	ldr	r3, [pc, #576]	; (80020a0 <HAL_RCC_OscConfig+0xc48>)
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	e00d      	b.n	8001e80 <HAL_RCC_OscConfig+0xa28>
 8001e64:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e68:	2202      	movs	r2, #2
 8001e6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	fa93 f2a3 	rbit	r2, r3
 8001e76:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	4b88      	ldr	r3, [pc, #544]	; (80020a0 <HAL_RCC_OscConfig+0xc48>)
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e80:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001e84:	2102      	movs	r1, #2
 8001e86:	6011      	str	r1, [r2, #0]
 8001e88:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001e8c:	6812      	ldr	r2, [r2, #0]
 8001e8e:	fa92 f1a2 	rbit	r1, r2
 8001e92:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001e96:	6011      	str	r1, [r2, #0]
  return(result);
 8001e98:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001e9c:	6812      	ldr	r2, [r2, #0]
 8001e9e:	fab2 f282 	clz	r2, r2
 8001ea2:	b252      	sxtb	r2, r2
 8001ea4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ea8:	b252      	sxtb	r2, r2
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	f002 021f 	and.w	r2, r2, #31
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	fa01 f202 	lsl.w	r2, r1, r2
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d19f      	bne.n	8001dfc <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ebc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d105      	bne.n	8001ed0 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ec4:	4b76      	ldr	r3, [pc, #472]	; (80020a0 <HAL_RCC_OscConfig+0xc48>)
 8001ec6:	69db      	ldr	r3, [r3, #28]
 8001ec8:	4a75      	ldr	r2, [pc, #468]	; (80020a0 <HAL_RCC_OscConfig+0xc48>)
 8001eca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ece:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ed0:	1d3b      	adds	r3, r7, #4
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 81a4 	beq.w	8002224 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001edc:	4b70      	ldr	r3, [pc, #448]	; (80020a0 <HAL_RCC_OscConfig+0xc48>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 030c 	and.w	r3, r3, #12
 8001ee4:	2b08      	cmp	r3, #8
 8001ee6:	f000 819b 	beq.w	8002220 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eea:	1d3b      	adds	r3, r7, #4
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	f040 8113 	bne.w	800211c <HAL_RCC_OscConfig+0xcc4>
 8001ef6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001efa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001efe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f00:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	fa93 f2a3 	rbit	r2, r3
 8001f0a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001f0e:	601a      	str	r2, [r3, #0]
  return(result);
 8001f10:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001f14:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f16:	fab3 f383 	clz	r3, r3
 8001f1a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f1e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	461a      	mov	r2, r3
 8001f26:	2300      	movs	r3, #0
 8001f28:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2a:	f7fe f9a7 	bl	800027c <HAL_GetTick>
 8001f2e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f32:	e009      	b.n	8001f48 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f34:	f7fe f9a2 	bl	800027c <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e16e      	b.n	8002226 <HAL_RCC_OscConfig+0xdce>
 8001f48:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001f4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f52:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	fa93 f2a3 	rbit	r2, r3
 8001f5c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001f60:	601a      	str	r2, [r3, #0]
  return(result);
 8001f62:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001f66:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f68:	fab3 f383 	clz	r3, r3
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	095b      	lsrs	r3, r3, #5
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	f043 0301 	orr.w	r3, r3, #1
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d102      	bne.n	8001f82 <HAL_RCC_OscConfig+0xb2a>
 8001f7c:	4b48      	ldr	r3, [pc, #288]	; (80020a0 <HAL_RCC_OscConfig+0xc48>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	e01b      	b.n	8001fba <HAL_RCC_OscConfig+0xb62>
 8001f82:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001f86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	fa93 f2a3 	rbit	r2, r3
 8001f96:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001fa0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	fa93 f2a3 	rbit	r2, r3
 8001fb0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	4b3a      	ldr	r3, [pc, #232]	; (80020a0 <HAL_RCC_OscConfig+0xc48>)
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fba:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001fbe:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fc2:	6011      	str	r1, [r2, #0]
 8001fc4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001fc8:	6812      	ldr	r2, [r2, #0]
 8001fca:	fa92 f1a2 	rbit	r1, r2
 8001fce:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001fd2:	6011      	str	r1, [r2, #0]
  return(result);
 8001fd4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001fd8:	6812      	ldr	r2, [r2, #0]
 8001fda:	fab2 f282 	clz	r2, r2
 8001fde:	b252      	sxtb	r2, r2
 8001fe0:	f042 0220 	orr.w	r2, r2, #32
 8001fe4:	b252      	sxtb	r2, r2
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	f002 021f 	and.w	r2, r2, #31
 8001fec:	2101      	movs	r1, #1
 8001fee:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d19d      	bne.n	8001f34 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ff8:	4b29      	ldr	r3, [pc, #164]	; (80020a0 <HAL_RCC_OscConfig+0xc48>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002000:	1d3b      	adds	r3, r7, #4
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002006:	1d3b      	adds	r3, r7, #4
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	430b      	orrs	r3, r1
 800200e:	4924      	ldr	r1, [pc, #144]	; (80020a0 <HAL_RCC_OscConfig+0xc48>)
 8002010:	4313      	orrs	r3, r2
 8002012:	604b      	str	r3, [r1, #4]
 8002014:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002018:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800201c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	fa93 f2a3 	rbit	r2, r3
 8002028:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800202c:	601a      	str	r2, [r3, #0]
  return(result);
 800202e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002032:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002034:	fab3 f383 	clz	r3, r3
 8002038:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800203c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	461a      	mov	r2, r3
 8002044:	2301      	movs	r3, #1
 8002046:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002048:	f7fe f918 	bl	800027c <HAL_GetTick>
 800204c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002050:	e009      	b.n	8002066 <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002052:	f7fe f913 	bl	800027c <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e0df      	b.n	8002226 <HAL_RCC_OscConfig+0xdce>
 8002066:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800206a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800206e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002070:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	fa93 f2a3 	rbit	r2, r3
 800207a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800207e:	601a      	str	r2, [r3, #0]
  return(result);
 8002080:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002084:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002086:	fab3 f383 	clz	r3, r3
 800208a:	b2db      	uxtb	r3, r3
 800208c:	095b      	lsrs	r3, r3, #5
 800208e:	b2db      	uxtb	r3, r3
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b01      	cmp	r3, #1
 8002098:	d104      	bne.n	80020a4 <HAL_RCC_OscConfig+0xc4c>
 800209a:	4b01      	ldr	r3, [pc, #4]	; (80020a0 <HAL_RCC_OscConfig+0xc48>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	e01d      	b.n	80020dc <HAL_RCC_OscConfig+0xc84>
 80020a0:	40021000 	.word	0x40021000
 80020a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	fa93 f2a3 	rbit	r2, r3
 80020b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80020c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	fa93 f2a3 	rbit	r2, r3
 80020d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	4b55      	ldr	r3, [pc, #340]	; (8002230 <HAL_RCC_OscConfig+0xdd8>)
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80020e0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80020e4:	6011      	str	r1, [r2, #0]
 80020e6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80020ea:	6812      	ldr	r2, [r2, #0]
 80020ec:	fa92 f1a2 	rbit	r1, r2
 80020f0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80020f4:	6011      	str	r1, [r2, #0]
  return(result);
 80020f6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80020fa:	6812      	ldr	r2, [r2, #0]
 80020fc:	fab2 f282 	clz	r2, r2
 8002100:	b252      	sxtb	r2, r2
 8002102:	f042 0220 	orr.w	r2, r2, #32
 8002106:	b252      	sxtb	r2, r2
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	f002 021f 	and.w	r2, r2, #31
 800210e:	2101      	movs	r1, #1
 8002110:	fa01 f202 	lsl.w	r2, r1, r2
 8002114:	4013      	ands	r3, r2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d09b      	beq.n	8002052 <HAL_RCC_OscConfig+0xbfa>
 800211a:	e083      	b.n	8002224 <HAL_RCC_OscConfig+0xdcc>
 800211c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002120:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002124:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002126:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	fa93 f2a3 	rbit	r2, r3
 8002130:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002134:	601a      	str	r2, [r3, #0]
  return(result);
 8002136:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800213a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800213c:	fab3 f383 	clz	r3, r3
 8002140:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002144:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	461a      	mov	r2, r3
 800214c:	2300      	movs	r3, #0
 800214e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002150:	f7fe f894 	bl	800027c <HAL_GetTick>
 8002154:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002158:	e009      	b.n	800216e <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800215a:	f7fe f88f 	bl	800027c <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e05b      	b.n	8002226 <HAL_RCC_OscConfig+0xdce>
 800216e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002172:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002176:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002178:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	fa93 f2a3 	rbit	r2, r3
 8002182:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002186:	601a      	str	r2, [r3, #0]
  return(result);
 8002188:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800218c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800218e:	fab3 f383 	clz	r3, r3
 8002192:	b2db      	uxtb	r3, r3
 8002194:	095b      	lsrs	r3, r3, #5
 8002196:	b2db      	uxtb	r3, r3
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d102      	bne.n	80021a8 <HAL_RCC_OscConfig+0xd50>
 80021a2:	4b23      	ldr	r3, [pc, #140]	; (8002230 <HAL_RCC_OscConfig+0xdd8>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	e01b      	b.n	80021e0 <HAL_RCC_OscConfig+0xd88>
 80021a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	fa93 f2a3 	rbit	r2, r3
 80021bc:	f107 0320 	add.w	r3, r7, #32
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	f107 031c 	add.w	r3, r7, #28
 80021c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	f107 031c 	add.w	r3, r7, #28
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	fa93 f2a3 	rbit	r2, r3
 80021d6:	f107 0318 	add.w	r3, r7, #24
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	4b14      	ldr	r3, [pc, #80]	; (8002230 <HAL_RCC_OscConfig+0xdd8>)
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e0:	f107 0214 	add.w	r2, r7, #20
 80021e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80021e8:	6011      	str	r1, [r2, #0]
 80021ea:	f107 0214 	add.w	r2, r7, #20
 80021ee:	6812      	ldr	r2, [r2, #0]
 80021f0:	fa92 f1a2 	rbit	r1, r2
 80021f4:	f107 0210 	add.w	r2, r7, #16
 80021f8:	6011      	str	r1, [r2, #0]
  return(result);
 80021fa:	f107 0210 	add.w	r2, r7, #16
 80021fe:	6812      	ldr	r2, [r2, #0]
 8002200:	fab2 f282 	clz	r2, r2
 8002204:	b252      	sxtb	r2, r2
 8002206:	f042 0220 	orr.w	r2, r2, #32
 800220a:	b252      	sxtb	r2, r2
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	f002 021f 	and.w	r2, r2, #31
 8002212:	2101      	movs	r1, #1
 8002214:	fa01 f202 	lsl.w	r2, r1, r2
 8002218:	4013      	ands	r3, r2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d19d      	bne.n	800215a <HAL_RCC_OscConfig+0xd02>
 800221e:	e001      	b.n	8002224 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e000      	b.n	8002226 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40021000 	.word	0x40021000

08002234 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b09e      	sub	sp, #120	; 0x78
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800223e:	2300      	movs	r3, #0
 8002240:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d101      	bne.n	800224c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e164      	b.n	8002516 <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800224c:	4b92      	ldr	r3, [pc, #584]	; (8002498 <HAL_RCC_ClockConfig+0x264>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	429a      	cmp	r2, r3
 8002258:	d910      	bls.n	800227c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225a:	4b8f      	ldr	r3, [pc, #572]	; (8002498 <HAL_RCC_ClockConfig+0x264>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f023 0207 	bic.w	r2, r3, #7
 8002262:	498d      	ldr	r1, [pc, #564]	; (8002498 <HAL_RCC_ClockConfig+0x264>)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	4313      	orrs	r3, r2
 8002268:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800226a:	4b8b      	ldr	r3, [pc, #556]	; (8002498 <HAL_RCC_ClockConfig+0x264>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	d001      	beq.n	800227c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e14c      	b.n	8002516 <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d008      	beq.n	800229a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002288:	4b84      	ldr	r3, [pc, #528]	; (800249c <HAL_RCC_ClockConfig+0x268>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	4981      	ldr	r1, [pc, #516]	; (800249c <HAL_RCC_ClockConfig+0x268>)
 8002296:	4313      	orrs	r3, r2
 8002298:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 80df 	beq.w	8002466 <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d13d      	bne.n	800232c <HAL_RCC_ClockConfig+0xf8>
 80022b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022b4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022b8:	fa93 f3a3 	rbit	r3, r3
 80022bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 80022be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c0:	fab3 f383 	clz	r3, r3
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	095b      	lsrs	r3, r3, #5
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	f043 0301 	orr.w	r3, r3, #1
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d102      	bne.n	80022da <HAL_RCC_ClockConfig+0xa6>
 80022d4:	4b71      	ldr	r3, [pc, #452]	; (800249c <HAL_RCC_ClockConfig+0x268>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	e00f      	b.n	80022fa <HAL_RCC_ClockConfig+0xc6>
 80022da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022e2:	fa93 f3a3 	rbit	r3, r3
 80022e6:	667b      	str	r3, [r7, #100]	; 0x64
 80022e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022ec:	663b      	str	r3, [r7, #96]	; 0x60
 80022ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022f0:	fa93 f3a3 	rbit	r3, r3
 80022f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022f6:	4b69      	ldr	r3, [pc, #420]	; (800249c <HAL_RCC_ClockConfig+0x268>)
 80022f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022fe:	65ba      	str	r2, [r7, #88]	; 0x58
 8002300:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002302:	fa92 f2a2 	rbit	r2, r2
 8002306:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8002308:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800230a:	fab2 f282 	clz	r2, r2
 800230e:	b252      	sxtb	r2, r2
 8002310:	f042 0220 	orr.w	r2, r2, #32
 8002314:	b252      	sxtb	r2, r2
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	f002 021f 	and.w	r2, r2, #31
 800231c:	2101      	movs	r1, #1
 800231e:	fa01 f202 	lsl.w	r2, r1, r2
 8002322:	4013      	ands	r3, r2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d17d      	bne.n	8002424 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0f4      	b.n	8002516 <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	2b02      	cmp	r3, #2
 8002332:	d13d      	bne.n	80023b0 <HAL_RCC_ClockConfig+0x17c>
 8002334:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002338:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800233c:	fa93 f3a3 	rbit	r3, r3
 8002340:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8002342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002344:	fab3 f383 	clz	r3, r3
 8002348:	b2db      	uxtb	r3, r3
 800234a:	095b      	lsrs	r3, r3, #5
 800234c:	b2db      	uxtb	r3, r3
 800234e:	f043 0301 	orr.w	r3, r3, #1
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b01      	cmp	r3, #1
 8002356:	d102      	bne.n	800235e <HAL_RCC_ClockConfig+0x12a>
 8002358:	4b50      	ldr	r3, [pc, #320]	; (800249c <HAL_RCC_ClockConfig+0x268>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	e00f      	b.n	800237e <HAL_RCC_ClockConfig+0x14a>
 800235e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002362:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002364:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002366:	fa93 f3a3 	rbit	r3, r3
 800236a:	647b      	str	r3, [r7, #68]	; 0x44
 800236c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002370:	643b      	str	r3, [r7, #64]	; 0x40
 8002372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002374:	fa93 f3a3 	rbit	r3, r3
 8002378:	63fb      	str	r3, [r7, #60]	; 0x3c
 800237a:	4b48      	ldr	r3, [pc, #288]	; (800249c <HAL_RCC_ClockConfig+0x268>)
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002382:	63ba      	str	r2, [r7, #56]	; 0x38
 8002384:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002386:	fa92 f2a2 	rbit	r2, r2
 800238a:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 800238c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800238e:	fab2 f282 	clz	r2, r2
 8002392:	b252      	sxtb	r2, r2
 8002394:	f042 0220 	orr.w	r2, r2, #32
 8002398:	b252      	sxtb	r2, r2
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	f002 021f 	and.w	r2, r2, #31
 80023a0:	2101      	movs	r1, #1
 80023a2:	fa01 f202 	lsl.w	r2, r1, r2
 80023a6:	4013      	ands	r3, r2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d13b      	bne.n	8002424 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0b2      	b.n	8002516 <HAL_RCC_ClockConfig+0x2e2>
 80023b0:	2302      	movs	r3, #2
 80023b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b6:	fa93 f3a3 	rbit	r3, r3
 80023ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80023bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023be:	fab3 f383 	clz	r3, r3
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	095b      	lsrs	r3, r3, #5
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	f043 0301 	orr.w	r3, r3, #1
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d102      	bne.n	80023d8 <HAL_RCC_ClockConfig+0x1a4>
 80023d2:	4b32      	ldr	r3, [pc, #200]	; (800249c <HAL_RCC_ClockConfig+0x268>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	e00d      	b.n	80023f4 <HAL_RCC_ClockConfig+0x1c0>
 80023d8:	2302      	movs	r3, #2
 80023da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023de:	fa93 f3a3 	rbit	r3, r3
 80023e2:	627b      	str	r3, [r7, #36]	; 0x24
 80023e4:	2302      	movs	r3, #2
 80023e6:	623b      	str	r3, [r7, #32]
 80023e8:	6a3b      	ldr	r3, [r7, #32]
 80023ea:	fa93 f3a3 	rbit	r3, r3
 80023ee:	61fb      	str	r3, [r7, #28]
 80023f0:	4b2a      	ldr	r3, [pc, #168]	; (800249c <HAL_RCC_ClockConfig+0x268>)
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	2202      	movs	r2, #2
 80023f6:	61ba      	str	r2, [r7, #24]
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	fa92 f2a2 	rbit	r2, r2
 80023fe:	617a      	str	r2, [r7, #20]
  return(result);
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	fab2 f282 	clz	r2, r2
 8002406:	b252      	sxtb	r2, r2
 8002408:	f042 0220 	orr.w	r2, r2, #32
 800240c:	b252      	sxtb	r2, r2
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	f002 021f 	and.w	r2, r2, #31
 8002414:	2101      	movs	r1, #1
 8002416:	fa01 f202 	lsl.w	r2, r1, r2
 800241a:	4013      	ands	r3, r2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e078      	b.n	8002516 <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002424:	4b1d      	ldr	r3, [pc, #116]	; (800249c <HAL_RCC_ClockConfig+0x268>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f023 0203 	bic.w	r2, r3, #3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	491a      	ldr	r1, [pc, #104]	; (800249c <HAL_RCC_ClockConfig+0x268>)
 8002432:	4313      	orrs	r3, r2
 8002434:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002436:	f7fd ff21 	bl	800027c <HAL_GetTick>
 800243a:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243c:	e00a      	b.n	8002454 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800243e:	f7fd ff1d 	bl	800027c <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	f241 3288 	movw	r2, #5000	; 0x1388
 800244c:	4293      	cmp	r3, r2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e060      	b.n	8002516 <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002454:	4b11      	ldr	r3, [pc, #68]	; (800249c <HAL_RCC_ClockConfig+0x268>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 020c 	and.w	r2, r3, #12
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	429a      	cmp	r2, r3
 8002464:	d1eb      	bne.n	800243e <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002466:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <HAL_RCC_ClockConfig+0x264>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	d215      	bcs.n	80024a0 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002474:	4b08      	ldr	r3, [pc, #32]	; (8002498 <HAL_RCC_ClockConfig+0x264>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f023 0207 	bic.w	r2, r3, #7
 800247c:	4906      	ldr	r1, [pc, #24]	; (8002498 <HAL_RCC_ClockConfig+0x264>)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	4313      	orrs	r3, r2
 8002482:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002484:	4b04      	ldr	r3, [pc, #16]	; (8002498 <HAL_RCC_ClockConfig+0x264>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	429a      	cmp	r2, r3
 8002490:	d006      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e03f      	b.n	8002516 <HAL_RCC_ClockConfig+0x2e2>
 8002496:	bf00      	nop
 8002498:	40022000 	.word	0x40022000
 800249c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d008      	beq.n	80024be <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ac:	4b1c      	ldr	r3, [pc, #112]	; (8002520 <HAL_RCC_ClockConfig+0x2ec>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	4919      	ldr	r1, [pc, #100]	; (8002520 <HAL_RCC_ClockConfig+0x2ec>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d009      	beq.n	80024de <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024ca:	4b15      	ldr	r3, [pc, #84]	; (8002520 <HAL_RCC_ClockConfig+0x2ec>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	4911      	ldr	r1, [pc, #68]	; (8002520 <HAL_RCC_ClockConfig+0x2ec>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80024de:	f000 f825 	bl	800252c <HAL_RCC_GetSysClockFreq>
 80024e2:	4601      	mov	r1, r0
 80024e4:	4b0e      	ldr	r3, [pc, #56]	; (8002520 <HAL_RCC_ClockConfig+0x2ec>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024ec:	23f0      	movs	r3, #240	; 0xf0
 80024ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	fa93 f3a3 	rbit	r3, r3
 80024f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	fab3 f383 	clz	r3, r3
 80024fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002502:	4a08      	ldr	r2, [pc, #32]	; (8002524 <HAL_RCC_ClockConfig+0x2f0>)
 8002504:	5cd3      	ldrb	r3, [r2, r3]
 8002506:	fa21 f303 	lsr.w	r3, r1, r3
 800250a:	4a07      	ldr	r2, [pc, #28]	; (8002528 <HAL_RCC_ClockConfig+0x2f4>)
 800250c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800250e:	2000      	movs	r0, #0
 8002510:	f7fd fe70 	bl	80001f4 <HAL_InitTick>
  
  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3778      	adds	r7, #120	; 0x78
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40021000 	.word	0x40021000
 8002524:	08003384 	.word	0x08003384
 8002528:	20000014 	.word	0x20000014

0800252c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800252c:	b480      	push	{r7}
 800252e:	b08b      	sub	sp, #44	; 0x2c
 8002530:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002532:	2300      	movs	r3, #0
 8002534:	61fb      	str	r3, [r7, #28]
 8002536:	2300      	movs	r3, #0
 8002538:	61bb      	str	r3, [r7, #24]
 800253a:	2300      	movs	r3, #0
 800253c:	627b      	str	r3, [r7, #36]	; 0x24
 800253e:	2300      	movs	r3, #0
 8002540:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002542:	2300      	movs	r3, #0
 8002544:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002546:	4b29      	ldr	r3, [pc, #164]	; (80025ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	f003 030c 	and.w	r3, r3, #12
 8002552:	2b04      	cmp	r3, #4
 8002554:	d002      	beq.n	800255c <HAL_RCC_GetSysClockFreq+0x30>
 8002556:	2b08      	cmp	r3, #8
 8002558:	d003      	beq.n	8002562 <HAL_RCC_GetSysClockFreq+0x36>
 800255a:	e03c      	b.n	80025d6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800255c:	4b24      	ldr	r3, [pc, #144]	; (80025f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800255e:	623b      	str	r3, [r7, #32]
      break;
 8002560:	e03c      	b.n	80025dc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002568:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800256c:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	fa93 f3a3 	rbit	r3, r3
 8002574:	607b      	str	r3, [r7, #4]
  return(result);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	fab3 f383 	clz	r3, r3
 800257c:	fa22 f303 	lsr.w	r3, r2, r3
 8002580:	4a1c      	ldr	r2, [pc, #112]	; (80025f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002582:	5cd3      	ldrb	r3, [r2, r3]
 8002584:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002586:	4b19      	ldr	r3, [pc, #100]	; (80025ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8002588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258a:	f003 020f 	and.w	r2, r3, #15
 800258e:	230f      	movs	r3, #15
 8002590:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	fa93 f3a3 	rbit	r3, r3
 8002598:	60fb      	str	r3, [r7, #12]
  return(result);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	fab3 f383 	clz	r3, r3
 80025a0:	fa22 f303 	lsr.w	r3, r2, r3
 80025a4:	4a14      	ldr	r2, [pc, #80]	; (80025f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80025a6:	5cd3      	ldrb	r3, [r2, r3]
 80025a8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d008      	beq.n	80025c6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80025b4:	4a0e      	ldr	r2, [pc, #56]	; (80025f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	fb02 f303 	mul.w	r3, r2, r3
 80025c2:	627b      	str	r3, [r7, #36]	; 0x24
 80025c4:	e004      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	4a0c      	ldr	r2, [pc, #48]	; (80025fc <HAL_RCC_GetSysClockFreq+0xd0>)
 80025ca:	fb02 f303 	mul.w	r3, r2, r3
 80025ce:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	623b      	str	r3, [r7, #32]
      break;
 80025d4:	e002      	b.n	80025dc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025d6:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80025d8:	623b      	str	r3, [r7, #32]
      break;
 80025da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025dc:	6a3b      	ldr	r3, [r7, #32]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	372c      	adds	r7, #44	; 0x2c
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	40021000 	.word	0x40021000
 80025f0:	007a1200 	.word	0x007a1200
 80025f4:	08003364 	.word	0x08003364
 80025f8:	08003374 	.word	0x08003374
 80025fc:	003d0900 	.word	0x003d0900

08002600 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002604:	4b03      	ldr	r3, [pc, #12]	; (8002614 <HAL_RCC_GetHCLKFreq+0x14>)
 8002606:	681b      	ldr	r3, [r3, #0]
}
 8002608:	4618      	mov	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	20000014 	.word	0x20000014

08002618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800261e:	f7ff ffef 	bl	8002600 <HAL_RCC_GetHCLKFreq>
 8002622:	4601      	mov	r1, r0
 8002624:	4b0b      	ldr	r3, [pc, #44]	; (8002654 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800262c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002630:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	fa93 f3a3 	rbit	r3, r3
 8002638:	603b      	str	r3, [r7, #0]
  return(result);
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	fab3 f383 	clz	r3, r3
 8002640:	fa22 f303 	lsr.w	r3, r2, r3
 8002644:	4a04      	ldr	r2, [pc, #16]	; (8002658 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002646:	5cd3      	ldrb	r3, [r2, r3]
 8002648:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800264c:	4618      	mov	r0, r3
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40021000 	.word	0x40021000
 8002658:	08003394 	.word	0x08003394

0800265c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002662:	f7ff ffcd 	bl	8002600 <HAL_RCC_GetHCLKFreq>
 8002666:	4601      	mov	r1, r0
 8002668:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8002670:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002674:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	fa93 f3a3 	rbit	r3, r3
 800267c:	603b      	str	r3, [r7, #0]
  return(result);
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	fab3 f383 	clz	r3, r3
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
 8002688:	4a04      	ldr	r2, [pc, #16]	; (800269c <HAL_RCC_GetPCLK2Freq+0x40>)
 800268a:	5cd3      	ldrb	r3, [r2, r3]
 800268c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002690:	4618      	mov	r0, r3
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40021000 	.word	0x40021000
 800269c:	08003394 	.word	0x08003394

080026a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e043      	b.n	800273a <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d106      	bne.n	80026cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 fd1a 	bl	8003100 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2224      	movs	r2, #36	; 0x24
 80026d0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0201 	bic.w	r2, r2, #1
 80026e2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 f82d 	bl	8002744 <UART_SetConfig>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d101      	bne.n	80026f4 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e022      	b.n	800273a <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d002      	beq.n	8002702 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 f987 	bl	8002a10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002710:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002720:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f042 0201 	orr.w	r2, r2, #1
 8002730:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 fa0e 	bl	8002b54 <UART_CheckIdleState>
 8002738:	4603      	mov	r3, r0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
	...

08002744 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 800274c:	2300      	movs	r3, #0
 800274e:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002750:	2310      	movs	r3, #16
 8002752:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8002754:	2300      	movs	r3, #0
 8002756:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8002758:	2300      	movs	r3, #0
 800275a:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 800275c:	2300      	movs	r3, #0
 800275e:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	431a      	orrs	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	69db      	ldr	r3, [r3, #28]
 8002774:	4313      	orrs	r3, r2
 8002776:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	4b9f      	ldr	r3, [pc, #636]	; (80029fc <UART_SetConfig+0x2b8>)
 8002780:	4013      	ands	r3, r2
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6812      	ldr	r2, [r2, #0]
 8002786:	68f9      	ldr	r1, [r7, #12]
 8002788:	430b      	orrs	r3, r1
 800278a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68da      	ldr	r2, [r3, #12]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	430a      	orrs	r2, r1
 80027a0:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699a      	ldr	r2, [r3, #24]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	430a      	orrs	r2, r1
 80027c0:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a8e      	ldr	r2, [pc, #568]	; (8002a00 <UART_SetConfig+0x2bc>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d121      	bne.n	8002810 <UART_SetConfig+0xcc>
 80027cc:	4b8d      	ldr	r3, [pc, #564]	; (8002a04 <UART_SetConfig+0x2c0>)
 80027ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d0:	f003 0303 	and.w	r3, r3, #3
 80027d4:	2b03      	cmp	r3, #3
 80027d6:	d817      	bhi.n	8002808 <UART_SetConfig+0xc4>
 80027d8:	a201      	add	r2, pc, #4	; (adr r2, 80027e0 <UART_SetConfig+0x9c>)
 80027da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027de:	bf00      	nop
 80027e0:	080027f1 	.word	0x080027f1
 80027e4:	080027fd 	.word	0x080027fd
 80027e8:	08002803 	.word	0x08002803
 80027ec:	080027f7 	.word	0x080027f7
 80027f0:	2300      	movs	r3, #0
 80027f2:	75fb      	strb	r3, [r7, #23]
 80027f4:	e01e      	b.n	8002834 <UART_SetConfig+0xf0>
 80027f6:	2302      	movs	r3, #2
 80027f8:	75fb      	strb	r3, [r7, #23]
 80027fa:	e01b      	b.n	8002834 <UART_SetConfig+0xf0>
 80027fc:	2304      	movs	r3, #4
 80027fe:	75fb      	strb	r3, [r7, #23]
 8002800:	e018      	b.n	8002834 <UART_SetConfig+0xf0>
 8002802:	2308      	movs	r3, #8
 8002804:	75fb      	strb	r3, [r7, #23]
 8002806:	e015      	b.n	8002834 <UART_SetConfig+0xf0>
 8002808:	2310      	movs	r3, #16
 800280a:	75fb      	strb	r3, [r7, #23]
 800280c:	bf00      	nop
 800280e:	e011      	b.n	8002834 <UART_SetConfig+0xf0>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a7c      	ldr	r2, [pc, #496]	; (8002a08 <UART_SetConfig+0x2c4>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d102      	bne.n	8002820 <UART_SetConfig+0xdc>
 800281a:	2300      	movs	r3, #0
 800281c:	75fb      	strb	r3, [r7, #23]
 800281e:	e009      	b.n	8002834 <UART_SetConfig+0xf0>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a79      	ldr	r2, [pc, #484]	; (8002a0c <UART_SetConfig+0x2c8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d102      	bne.n	8002830 <UART_SetConfig+0xec>
 800282a:	2300      	movs	r3, #0
 800282c:	75fb      	strb	r3, [r7, #23]
 800282e:	e001      	b.n	8002834 <UART_SetConfig+0xf0>
 8002830:	2310      	movs	r3, #16
 8002832:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	69db      	ldr	r3, [r3, #28]
 8002838:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800283c:	d16f      	bne.n	800291e <UART_SetConfig+0x1da>
  {
    switch (clocksource)
 800283e:	7dfb      	ldrb	r3, [r7, #23]
 8002840:	2b08      	cmp	r3, #8
 8002842:	d857      	bhi.n	80028f4 <UART_SetConfig+0x1b0>
 8002844:	a201      	add	r2, pc, #4	; (adr r2, 800284c <UART_SetConfig+0x108>)
 8002846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800284a:	bf00      	nop
 800284c:	08002871 	.word	0x08002871
 8002850:	0800288d 	.word	0x0800288d
 8002854:	080028a9 	.word	0x080028a9
 8002858:	080028f5 	.word	0x080028f5
 800285c:	080028c3 	.word	0x080028c3
 8002860:	080028f5 	.word	0x080028f5
 8002864:	080028f5 	.word	0x080028f5
 8002868:	080028f5 	.word	0x080028f5
 800286c:	080028df 	.word	0x080028df
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002870:	f7ff fed2 	bl	8002618 <HAL_RCC_GetPCLK1Freq>
 8002874:	4603      	mov	r3, r0
 8002876:	005a      	lsls	r2, r3, #1
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	085b      	lsrs	r3, r3, #1
 800287e:	441a      	add	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	fbb2 f3f3 	udiv	r3, r2, r3
 8002888:	82bb      	strh	r3, [r7, #20]
        break;
 800288a:	e036      	b.n	80028fa <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800288c:	f7ff fee6 	bl	800265c <HAL_RCC_GetPCLK2Freq>
 8002890:	4603      	mov	r3, r0
 8002892:	005a      	lsls	r2, r3, #1
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	085b      	lsrs	r3, r3, #1
 800289a:	441a      	add	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a4:	82bb      	strh	r3, [r7, #20]
        break;
 80028a6:	e028      	b.n	80028fa <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	085b      	lsrs	r3, r3, #1
 80028ae:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80028b2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	6852      	ldr	r2, [r2, #4]
 80028ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80028be:	82bb      	strh	r3, [r7, #20]
        break;
 80028c0:	e01b      	b.n	80028fa <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80028c2:	f7ff fe33 	bl	800252c <HAL_RCC_GetSysClockFreq>
 80028c6:	4603      	mov	r3, r0
 80028c8:	005a      	lsls	r2, r3, #1
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	085b      	lsrs	r3, r3, #1
 80028d0:	441a      	add	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028da:	82bb      	strh	r3, [r7, #20]
        break;
 80028dc:	e00d      	b.n	80028fa <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	085b      	lsrs	r3, r3, #1
 80028e4:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f0:	82bb      	strh	r3, [r7, #20]
        break;
 80028f2:	e002      	b.n	80028fa <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	74fb      	strb	r3, [r7, #19]
        break;
 80028f8:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 80028fa:	8abb      	ldrh	r3, [r7, #20]
 80028fc:	f023 030f 	bic.w	r3, r3, #15
 8002900:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002902:	8abb      	ldrh	r3, [r7, #20]
 8002904:	105b      	asrs	r3, r3, #1
 8002906:	b29b      	uxth	r3, r3
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	b29a      	uxth	r2, r3
 800290e:	897b      	ldrh	r3, [r7, #10]
 8002910:	4313      	orrs	r3, r2
 8002912:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	897a      	ldrh	r2, [r7, #10]
 800291a:	60da      	str	r2, [r3, #12]
 800291c:	e069      	b.n	80029f2 <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 800291e:	7dfb      	ldrb	r3, [r7, #23]
 8002920:	2b08      	cmp	r3, #8
 8002922:	d863      	bhi.n	80029ec <UART_SetConfig+0x2a8>
 8002924:	a201      	add	r2, pc, #4	; (adr r2, 800292c <UART_SetConfig+0x1e8>)
 8002926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800292a:	bf00      	nop
 800292c:	08002951 	.word	0x08002951
 8002930:	08002971 	.word	0x08002971
 8002934:	08002991 	.word	0x08002991
 8002938:	080029ed 	.word	0x080029ed
 800293c:	080029b1 	.word	0x080029b1
 8002940:	080029ed 	.word	0x080029ed
 8002944:	080029ed 	.word	0x080029ed
 8002948:	080029ed 	.word	0x080029ed
 800294c:	080029d1 	.word	0x080029d1
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002950:	f7ff fe62 	bl	8002618 <HAL_RCC_GetPCLK1Freq>
 8002954:	4602      	mov	r2, r0
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	085b      	lsrs	r3, r3, #1
 800295c:	441a      	add	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	fbb2 f3f3 	udiv	r3, r2, r3
 8002966:	b29a      	uxth	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	60da      	str	r2, [r3, #12]
        break;
 800296e:	e040      	b.n	80029f2 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002970:	f7ff fe74 	bl	800265c <HAL_RCC_GetPCLK2Freq>
 8002974:	4602      	mov	r2, r0
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	085b      	lsrs	r3, r3, #1
 800297c:	441a      	add	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	fbb2 f3f3 	udiv	r3, r2, r3
 8002986:	b29a      	uxth	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	60da      	str	r2, [r3, #12]
        break;
 800298e:	e030      	b.n	80029f2 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	085b      	lsrs	r3, r3, #1
 8002996:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800299a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	6852      	ldr	r2, [r2, #4]
 80029a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	60da      	str	r2, [r3, #12]
        break;
 80029ae:	e020      	b.n	80029f2 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80029b0:	f7ff fdbc 	bl	800252c <HAL_RCC_GetSysClockFreq>
 80029b4:	4602      	mov	r2, r0
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	085b      	lsrs	r3, r3, #1
 80029bc:	441a      	add	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	60da      	str	r2, [r3, #12]
        break;
 80029ce:	e010      	b.n	80029f2 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	085b      	lsrs	r3, r3, #1
 80029d6:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	60da      	str	r2, [r3, #12]
        break;
 80029ea:	e002      	b.n	80029f2 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	74fb      	strb	r3, [r7, #19]
        break;
 80029f0:	bf00      	nop
    }
  }

  return ret;
 80029f2:	7cfb      	ldrb	r3, [r7, #19]

}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	efff69f3 	.word	0xefff69f3
 8002a00:	40013800 	.word	0x40013800
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40004400 	.word	0x40004400
 8002a0c:	40004800 	.word	0x40004800

08002a10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00a      	beq.n	8002a3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00a      	beq.n	8002a5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00a      	beq.n	8002a7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a82:	f003 0308 	and.w	r3, r3, #8
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00a      	beq.n	8002aa0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa4:	f003 0310 	and.w	r3, r3, #16
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00a      	beq.n	8002ac2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac6:	f003 0320 	and.w	r3, r3, #32
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00a      	beq.n	8002ae4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d01a      	beq.n	8002b26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b0e:	d10a      	bne.n	8002b26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00a      	beq.n	8002b48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	605a      	str	r2, [r3, #4]
  }
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af02      	add	r7, sp, #8
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002b66:	f7fd fb89 	bl	800027c <HAL_GetTick>
 8002b6a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d10e      	bne.n	8002b98 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b7a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f82c 	bl	8002be6 <UART_WaitOnFlagUntilTimeout>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e022      	b.n	8002bde <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0304 	and.w	r3, r3, #4
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	d10e      	bne.n	8002bc4 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ba6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f816 	bl	8002be6 <UART_WaitOnFlagUntilTimeout>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e00c      	b.n	8002bde <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b084      	sub	sp, #16
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	60f8      	str	r0, [r7, #12]
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	603b      	str	r3, [r7, #0]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bf6:	e02c      	b.n	8002c52 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bfe:	d028      	beq.n	8002c52 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d007      	beq.n	8002c16 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c06:	f7fd fb39 	bl	800027c <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d21d      	bcs.n	8002c52 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002c24:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0201 	bic.w	r2, r2, #1
 8002c34:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2220      	movs	r2, #32
 8002c3a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2220      	movs	r2, #32
 8002c42:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e00f      	b.n	8002c72 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	69da      	ldr	r2, [r3, #28]
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	bf0c      	ite	eq
 8002c62:	2301      	moveq	r3, #1
 8002c64:	2300      	movne	r3, #0
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	461a      	mov	r2, r3
 8002c6a:	79fb      	ldrb	r3, [r7, #7]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d0c3      	beq.n	8002bf8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
	...

08002c7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c80:	f7fd faa2 	bl	80001c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c84:	f000 f88e 	bl	8002da4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c88:	f000 f932 	bl	8002ef0 <MX_GPIO_Init>
  MX_CAN_Init();
 8002c8c:	f000 f8ca 	bl	8002e24 <MX_CAN_Init>
  MX_USART2_UART_Init();
 8002c90:	f000 f8fe 	bl	8002e90 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  sFilterConfig.FilterBank = 0;
 8002c94:	4b3b      	ldr	r3, [pc, #236]	; (8002d84 <main+0x108>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002c9a:	4b3a      	ldr	r3, [pc, #232]	; (8002d84 <main+0x108>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002ca0:	4b38      	ldr	r3, [pc, #224]	; (8002d84 <main+0x108>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8002ca6:	4b37      	ldr	r3, [pc, #220]	; (8002d84 <main+0x108>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8002cac:	4b35      	ldr	r3, [pc, #212]	; (8002d84 <main+0x108>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8002cb2:	4b34      	ldr	r3, [pc, #208]	; (8002d84 <main+0x108>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8002cb8:	4b32      	ldr	r3, [pc, #200]	; (8002d84 <main+0x108>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002cbe:	4b31      	ldr	r3, [pc, #196]	; (8002d84 <main+0x108>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation=ENABLE;
 8002cc4:	4b2f      	ldr	r3, [pc, #188]	; (8002d84 <main+0x108>)
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank=14;
 8002cca:	4b2e      	ldr	r3, [pc, #184]	; (8002d84 <main+0x108>)
 8002ccc:	220e      	movs	r2, #14
 8002cce:	625a      	str	r2, [r3, #36]	; 0x24

  if(HAL_CAN_ConfigFilter(&hcan,&sFilterConfig) != HAL_OK)
 8002cd0:	492c      	ldr	r1, [pc, #176]	; (8002d84 <main+0x108>)
 8002cd2:	482d      	ldr	r0, [pc, #180]	; (8002d88 <main+0x10c>)
 8002cd4:	f7fd fbd9 	bl	800048a <HAL_CAN_ConfigFilter>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <main+0x66>
  {
    Error_Handler();
 8002cde:	f000 f97d 	bl	8002fdc <Error_Handler>
  }
  if(HAL_CAN_Start(&hcan)!=HAL_OK)
 8002ce2:	4829      	ldr	r0, [pc, #164]	; (8002d88 <main+0x10c>)
 8002ce4:	f7fd fc9b 	bl	800061e <HAL_CAN_Start>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <main+0x76>
  {
    Error_Handler();
 8002cee:	f000 f975 	bl	8002fdc <Error_Handler>
  }

  if(HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8002cf2:	2103      	movs	r1, #3
 8002cf4:	4824      	ldr	r0, [pc, #144]	; (8002d88 <main+0x10c>)
 8002cf6:	f7fd fec4 	bl	8000a82 <HAL_CAN_ActivateNotification>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <main+0x88>
  {
	Error_Handler();
 8002d00:	f000 f96c 	bl	8002fdc <Error_Handler>
  }
  TxHeader.StdId=(motor_num << 5) + (control_mode);
 8002d04:	4b21      	ldr	r3, [pc, #132]	; (8002d8c <main+0x110>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	015b      	lsls	r3, r3, #5
 8002d0a:	4a21      	ldr	r2, [pc, #132]	; (8002d90 <main+0x114>)
 8002d0c:	7812      	ldrb	r2, [r2, #0]
 8002d0e:	4413      	add	r3, r2
 8002d10:	461a      	mov	r2, r3
 8002d12:	4b20      	ldr	r3, [pc, #128]	; (8002d94 <main+0x118>)
 8002d14:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = 0;//CAN_RTR_DATA;
 8002d16:	4b1f      	ldr	r3, [pc, #124]	; (8002d94 <main+0x118>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 8002d1c:	4b1d      	ldr	r3, [pc, #116]	; (8002d94 <main+0x118>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 0x08;
 8002d22:	4b1c      	ldr	r3, [pc, #112]	; (8002d94 <main+0x118>)
 8002d24:	2208      	movs	r2, #8
 8002d26:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8002d28:	4b1a      	ldr	r3, [pc, #104]	; (8002d94 <main+0x118>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	751a      	strb	r2, [r3, #20]

  TxData[0] = set_point;
 8002d2e:	4b1a      	ldr	r3, [pc, #104]	; (8002d98 <main+0x11c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	4b19      	ldr	r3, [pc, #100]	; (8002d9c <main+0x120>)
 8002d36:	701a      	strb	r2, [r3, #0]
  TxData[1] = set_point >> 8;
 8002d38:	4b17      	ldr	r3, [pc, #92]	; (8002d98 <main+0x11c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	121b      	asrs	r3, r3, #8
 8002d3e:	b2da      	uxtb	r2, r3
 8002d40:	4b16      	ldr	r3, [pc, #88]	; (8002d9c <main+0x120>)
 8002d42:	705a      	strb	r2, [r3, #1]
  TxData[2] = set_point >> 16;
 8002d44:	4b14      	ldr	r3, [pc, #80]	; (8002d98 <main+0x11c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	141b      	asrs	r3, r3, #16
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	4b13      	ldr	r3, [pc, #76]	; (8002d9c <main+0x120>)
 8002d4e:	709a      	strb	r2, [r3, #2]
  TxData[3] = set_point >> 24;
 8002d50:	4b11      	ldr	r3, [pc, #68]	; (8002d98 <main+0x11c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	161b      	asrs	r3, r3, #24
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	4b10      	ldr	r3, [pc, #64]	; (8002d9c <main+0x120>)
 8002d5a:	70da      	strb	r2, [r3, #3]
  TxData[4] = 0;
 8002d5c:	4b0f      	ldr	r3, [pc, #60]	; (8002d9c <main+0x120>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	711a      	strb	r2, [r3, #4]
  TxData[5] = 0;
 8002d62:	4b0e      	ldr	r3, [pc, #56]	; (8002d9c <main+0x120>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	715a      	strb	r2, [r3, #5]
  TxData[6] = 0;
 8002d68:	4b0c      	ldr	r3, [pc, #48]	; (8002d9c <main+0x120>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	719a      	strb	r2, [r3, #6]
  TxData[7] = 0;
 8002d6e:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <main+0x120>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	71da      	strb	r2, [r3, #7]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData,&TxMailbox);
 8002d74:	4b0a      	ldr	r3, [pc, #40]	; (8002da0 <main+0x124>)
 8002d76:	4a09      	ldr	r2, [pc, #36]	; (8002d9c <main+0x120>)
 8002d78:	4906      	ldr	r1, [pc, #24]	; (8002d94 <main+0x118>)
 8002d7a:	4803      	ldr	r0, [pc, #12]	; (8002d88 <main+0x10c>)
 8002d7c:	f7fd fc93 	bl	80006a6 <HAL_CAN_AddTxMessage>
 8002d80:	e7f8      	b.n	8002d74 <main+0xf8>
 8002d82:	bf00      	nop
 8002d84:	20000038 	.word	0x20000038
 8002d88:	20000060 	.word	0x20000060
 8002d8c:	2000000c 	.word	0x2000000c
 8002d90:	2000000d 	.word	0x2000000d
 8002d94:	20000110 	.word	0x20000110
 8002d98:	20000008 	.word	0x20000008
 8002d9c:	2000008c 	.word	0x2000008c
 8002da0:	20000094 	.word	0x20000094

08002da4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b090      	sub	sp, #64	; 0x40
 8002da8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002daa:	f107 0318 	add.w	r3, r7, #24
 8002dae:	2228      	movs	r2, #40	; 0x28
 8002db0:	2100      	movs	r1, #0
 8002db2:	4618      	mov	r0, r3
 8002db4:	f000 fac2 	bl	800333c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002db8:	1d3b      	adds	r3, r7, #4
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	605a      	str	r2, [r3, #4]
 8002dc0:	609a      	str	r2, [r3, #8]
 8002dc2:	60da      	str	r2, [r3, #12]
 8002dc4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002dce:	2310      	movs	r3, #16
 8002dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002dda:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002dde:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002de0:	f107 0318 	add.w	r3, r7, #24
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7fe fb37 	bl	8001458 <HAL_RCC_OscConfig>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8002df0:	f000 f8f4 	bl	8002fdc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002df4:	230f      	movs	r3, #15
 8002df6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002df8:	2302      	movs	r3, #2
 8002dfa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e00:	2300      	movs	r3, #0
 8002e02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002e08:	1d3b      	adds	r3, r7, #4
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff fa11 	bl	8002234 <HAL_RCC_ClockConfig>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002e18:	f000 f8e0 	bl	8002fdc <Error_Handler>
  }
}
 8002e1c:	bf00      	nop
 8002e1e:	3740      	adds	r7, #64	; 0x40
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8002e28:	4b17      	ldr	r3, [pc, #92]	; (8002e88 <MX_CAN_Init+0x64>)
 8002e2a:	4a18      	ldr	r2, [pc, #96]	; (8002e8c <MX_CAN_Init+0x68>)
 8002e2c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;
 8002e2e:	4b16      	ldr	r3, [pc, #88]	; (8002e88 <MX_CAN_Init+0x64>)
 8002e30:	2206      	movs	r2, #6
 8002e32:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002e34:	4b14      	ldr	r3, [pc, #80]	; (8002e88 <MX_CAN_Init+0x64>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002e3a:	4b13      	ldr	r3, [pc, #76]	; (8002e88 <MX_CAN_Init+0x64>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_10TQ;
 8002e40:	4b11      	ldr	r3, [pc, #68]	; (8002e88 <MX_CAN_Init+0x64>)
 8002e42:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8002e46:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002e48:	4b0f      	ldr	r3, [pc, #60]	; (8002e88 <MX_CAN_Init+0x64>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002e4e:	4b0e      	ldr	r3, [pc, #56]	; (8002e88 <MX_CAN_Init+0x64>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8002e54:	4b0c      	ldr	r3, [pc, #48]	; (8002e88 <MX_CAN_Init+0x64>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002e5a:	4b0b      	ldr	r3, [pc, #44]	; (8002e88 <MX_CAN_Init+0x64>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002e60:	4b09      	ldr	r3, [pc, #36]	; (8002e88 <MX_CAN_Init+0x64>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002e66:	4b08      	ldr	r3, [pc, #32]	; (8002e88 <MX_CAN_Init+0x64>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002e6c:	4b06      	ldr	r3, [pc, #24]	; (8002e88 <MX_CAN_Init+0x64>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002e72:	4805      	ldr	r0, [pc, #20]	; (8002e88 <MX_CAN_Init+0x64>)
 8002e74:	f7fd fa0e 	bl	8000294 <HAL_CAN_Init>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8002e7e:	f000 f8ad 	bl	8002fdc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8002e82:	bf00      	nop
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	20000060 	.word	0x20000060
 8002e8c:	40006400 	.word	0x40006400

08002e90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e94:	4b14      	ldr	r3, [pc, #80]	; (8002ee8 <MX_USART2_UART_Init+0x58>)
 8002e96:	4a15      	ldr	r2, [pc, #84]	; (8002eec <MX_USART2_UART_Init+0x5c>)
 8002e98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8002e9a:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <MX_USART2_UART_Init+0x58>)
 8002e9c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002ea0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ea2:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <MX_USART2_UART_Init+0x58>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ea8:	4b0f      	ldr	r3, [pc, #60]	; (8002ee8 <MX_USART2_UART_Init+0x58>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002eae:	4b0e      	ldr	r3, [pc, #56]	; (8002ee8 <MX_USART2_UART_Init+0x58>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002eb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <MX_USART2_UART_Init+0x58>)
 8002eb6:	220c      	movs	r2, #12
 8002eb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eba:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <MX_USART2_UART_Init+0x58>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ec0:	4b09      	ldr	r3, [pc, #36]	; (8002ee8 <MX_USART2_UART_Init+0x58>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ec6:	4b08      	ldr	r3, [pc, #32]	; (8002ee8 <MX_USART2_UART_Init+0x58>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ecc:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <MX_USART2_UART_Init+0x58>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ed2:	4805      	ldr	r0, [pc, #20]	; (8002ee8 <MX_USART2_UART_Init+0x58>)
 8002ed4:	f7ff fbe4 	bl	80026a0 <HAL_UART_Init>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002ede:	f000 f87d 	bl	8002fdc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ee2:	bf00      	nop
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	200000a0 	.word	0x200000a0
 8002eec:	40004400 	.word	0x40004400

08002ef0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b088      	sub	sp, #32
 8002ef4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef6:	f107 030c 	add.w	r3, r7, #12
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	605a      	str	r2, [r3, #4]
 8002f00:	609a      	str	r2, [r3, #8]
 8002f02:	60da      	str	r2, [r3, #12]
 8002f04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f06:	4b1d      	ldr	r3, [pc, #116]	; (8002f7c <MX_GPIO_Init+0x8c>)
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	4a1c      	ldr	r2, [pc, #112]	; (8002f7c <MX_GPIO_Init+0x8c>)
 8002f0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f10:	6153      	str	r3, [r2, #20]
 8002f12:	4b1a      	ldr	r3, [pc, #104]	; (8002f7c <MX_GPIO_Init+0x8c>)
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f1a:	60bb      	str	r3, [r7, #8]
 8002f1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f1e:	4b17      	ldr	r3, [pc, #92]	; (8002f7c <MX_GPIO_Init+0x8c>)
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	4a16      	ldr	r2, [pc, #88]	; (8002f7c <MX_GPIO_Init+0x8c>)
 8002f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f28:	6153      	str	r3, [r2, #20]
 8002f2a:	4b14      	ldr	r3, [pc, #80]	; (8002f7c <MX_GPIO_Init+0x8c>)
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f32:	607b      	str	r3, [r7, #4]
 8002f34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f36:	4b11      	ldr	r3, [pc, #68]	; (8002f7c <MX_GPIO_Init+0x8c>)
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	4a10      	ldr	r2, [pc, #64]	; (8002f7c <MX_GPIO_Init+0x8c>)
 8002f3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f40:	6153      	str	r3, [r2, #20]
 8002f42:	4b0e      	ldr	r3, [pc, #56]	; (8002f7c <MX_GPIO_Init+0x8c>)
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f4a:	603b      	str	r3, [r7, #0]
 8002f4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002f4e:	2200      	movs	r2, #0
 8002f50:	2108      	movs	r1, #8
 8002f52:	480b      	ldr	r0, [pc, #44]	; (8002f80 <MX_GPIO_Init+0x90>)
 8002f54:	f7fe fa68 	bl	8001428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8002f58:	2308      	movs	r3, #8
 8002f5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f60:	2300      	movs	r3, #0
 8002f62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f64:	2300      	movs	r3, #0
 8002f66:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8002f68:	f107 030c 	add.w	r3, r7, #12
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4804      	ldr	r0, [pc, #16]	; (8002f80 <MX_GPIO_Init+0x90>)
 8002f70:	f7fe f8e4 	bl	800113c <HAL_GPIO_Init>

}
 8002f74:	bf00      	nop
 8002f76:	3720      	adds	r7, #32
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	48000400 	.word	0x48000400

08002f84 <HAL_CAN_RxFifo0MsgPendingCallback>:
{
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,1);
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan_)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  HAL_CAN_GetRxMessage(&hcan,CAN_RX_FIFO0,&RxHeader,RxData);
 8002f8c:	4b0e      	ldr	r3, [pc, #56]	; (8002fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8002f8e:	4a0f      	ldr	r2, [pc, #60]	; (8002fcc <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8002f90:	2100      	movs	r1, #0
 8002f92:	480f      	ldr	r0, [pc, #60]	; (8002fd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8002f94:	f7fd fc62 	bl	800085c <HAL_CAN_GetRxMessage>
  }
*/
  //HAL_UART_Transmit(&huart2,RxData,4,0xFFFF);


  flag *= -1;
 8002f98:	4b0e      	ldr	r3, [pc, #56]	; (8002fd4 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	425b      	negs	r3, r3
 8002f9e:	4a0d      	ldr	r2, [pc, #52]	; (8002fd4 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8002fa0:	6013      	str	r3, [r2, #0]
  if(flag >0){
 8002fa2:	4b0c      	ldr	r3, [pc, #48]	; (8002fd4 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	dd05      	ble.n	8002fb6 <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,1);
 8002faa:	2201      	movs	r2, #1
 8002fac:	2108      	movs	r1, #8
 8002fae:	480a      	ldr	r0, [pc, #40]	; (8002fd8 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8002fb0:	f7fe fa3a 	bl	8001428 <HAL_GPIO_WritePin>
  }else{
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,0);
  }

}
 8002fb4:	e004      	b.n	8002fc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,0);
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	2108      	movs	r1, #8
 8002fba:	4807      	ldr	r0, [pc, #28]	; (8002fd8 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8002fbc:	f7fe fa34 	bl	8001428 <HAL_GPIO_WritePin>
}
 8002fc0:	bf00      	nop
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	20000098 	.word	0x20000098
 8002fcc:	20000128 	.word	0x20000128
 8002fd0:	20000060 	.word	0x20000060
 8002fd4:	20000010 	.word	0x20000010
 8002fd8:	48000400 	.word	0x48000400

08002fdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002fe0:	bf00      	nop
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
	...

08002fec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ff2:	4b0f      	ldr	r3, [pc, #60]	; (8003030 <HAL_MspInit+0x44>)
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	4a0e      	ldr	r2, [pc, #56]	; (8003030 <HAL_MspInit+0x44>)
 8002ff8:	f043 0301 	orr.w	r3, r3, #1
 8002ffc:	6193      	str	r3, [r2, #24]
 8002ffe:	4b0c      	ldr	r3, [pc, #48]	; (8003030 <HAL_MspInit+0x44>)
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	607b      	str	r3, [r7, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800300a:	4b09      	ldr	r3, [pc, #36]	; (8003030 <HAL_MspInit+0x44>)
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	4a08      	ldr	r2, [pc, #32]	; (8003030 <HAL_MspInit+0x44>)
 8003010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003014:	61d3      	str	r3, [r2, #28]
 8003016:	4b06      	ldr	r3, [pc, #24]	; (8003030 <HAL_MspInit+0x44>)
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800301e:	603b      	str	r3, [r7, #0]
 8003020:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003022:	bf00      	nop
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	40021000 	.word	0x40021000

08003034 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b08a      	sub	sp, #40	; 0x28
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800303c:	f107 0314 	add.w	r3, r7, #20
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	605a      	str	r2, [r3, #4]
 8003046:	609a      	str	r2, [r3, #8]
 8003048:	60da      	str	r2, [r3, #12]
 800304a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a29      	ldr	r2, [pc, #164]	; (80030f8 <HAL_CAN_MspInit+0xc4>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d14b      	bne.n	80030ee <HAL_CAN_MspInit+0xba>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003056:	4b29      	ldr	r3, [pc, #164]	; (80030fc <HAL_CAN_MspInit+0xc8>)
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	4a28      	ldr	r2, [pc, #160]	; (80030fc <HAL_CAN_MspInit+0xc8>)
 800305c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003060:	61d3      	str	r3, [r2, #28]
 8003062:	4b26      	ldr	r3, [pc, #152]	; (80030fc <HAL_CAN_MspInit+0xc8>)
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306a:	613b      	str	r3, [r7, #16]
 800306c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800306e:	4b23      	ldr	r3, [pc, #140]	; (80030fc <HAL_CAN_MspInit+0xc8>)
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	4a22      	ldr	r2, [pc, #136]	; (80030fc <HAL_CAN_MspInit+0xc8>)
 8003074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003078:	6153      	str	r3, [r2, #20]
 800307a:	4b20      	ldr	r3, [pc, #128]	; (80030fc <HAL_CAN_MspInit+0xc8>)
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003086:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800308a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800308c:	2302      	movs	r3, #2
 800308e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003090:	2300      	movs	r3, #0
 8003092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003094:	2303      	movs	r3, #3
 8003096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8003098:	2309      	movs	r3, #9
 800309a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800309c:	f107 0314 	add.w	r3, r7, #20
 80030a0:	4619      	mov	r1, r3
 80030a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030a6:	f7fe f849 	bl	800113c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80030aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b0:	2302      	movs	r3, #2
 80030b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030b4:	2301      	movs	r3, #1
 80030b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030b8:	2303      	movs	r3, #3
 80030ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80030bc:	2309      	movs	r3, #9
 80030be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030c0:	f107 0314 	add.w	r3, r7, #20
 80030c4:	4619      	mov	r1, r3
 80030c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030ca:	f7fe f837 	bl	800113c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_TX_IRQn, 0, 0);
 80030ce:	2200      	movs	r2, #0
 80030d0:	2100      	movs	r1, #0
 80030d2:	2013      	movs	r0, #19
 80030d4:	f7fd fffb 	bl	80010ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_TX_IRQn);
 80030d8:	2013      	movs	r0, #19
 80030da:	f7fe f814 	bl	8001106 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 80030de:	2200      	movs	r2, #0
 80030e0:	2100      	movs	r1, #0
 80030e2:	2014      	movs	r0, #20
 80030e4:	f7fd fff3 	bl	80010ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 80030e8:	2014      	movs	r0, #20
 80030ea:	f7fe f80c 	bl	8001106 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80030ee:	bf00      	nop
 80030f0:	3728      	adds	r7, #40	; 0x28
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40006400 	.word	0x40006400
 80030fc:	40021000 	.word	0x40021000

08003100 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b08a      	sub	sp, #40	; 0x28
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003108:	f107 0314 	add.w	r3, r7, #20
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	605a      	str	r2, [r3, #4]
 8003112:	609a      	str	r2, [r3, #8]
 8003114:	60da      	str	r2, [r3, #12]
 8003116:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a18      	ldr	r2, [pc, #96]	; (8003180 <HAL_UART_MspInit+0x80>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d129      	bne.n	8003176 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003122:	4b18      	ldr	r3, [pc, #96]	; (8003184 <HAL_UART_MspInit+0x84>)
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	4a17      	ldr	r2, [pc, #92]	; (8003184 <HAL_UART_MspInit+0x84>)
 8003128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800312c:	61d3      	str	r3, [r2, #28]
 800312e:	4b15      	ldr	r3, [pc, #84]	; (8003184 <HAL_UART_MspInit+0x84>)
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003136:	613b      	str	r3, [r7, #16]
 8003138:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800313a:	4b12      	ldr	r3, [pc, #72]	; (8003184 <HAL_UART_MspInit+0x84>)
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	4a11      	ldr	r2, [pc, #68]	; (8003184 <HAL_UART_MspInit+0x84>)
 8003140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003144:	6153      	str	r3, [r2, #20]
 8003146:	4b0f      	ldr	r3, [pc, #60]	; (8003184 <HAL_UART_MspInit+0x84>)
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8003152:	f248 0304 	movw	r3, #32772	; 0x8004
 8003156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003158:	2302      	movs	r3, #2
 800315a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315c:	2300      	movs	r3, #0
 800315e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003160:	2303      	movs	r3, #3
 8003162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003164:	2307      	movs	r3, #7
 8003166:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003168:	f107 0314 	add.w	r3, r7, #20
 800316c:	4619      	mov	r1, r3
 800316e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003172:	f7fd ffe3 	bl	800113c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003176:	bf00      	nop
 8003178:	3728      	adds	r7, #40	; 0x28
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40004400 	.word	0x40004400
 8003184:	40021000 	.word	0x40021000

08003188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800318c:	bf00      	nop
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003196:	b480      	push	{r7}
 8003198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800319a:	e7fe      	b.n	800319a <HardFault_Handler+0x4>

0800319c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031a0:	e7fe      	b.n	80031a0 <MemManage_Handler+0x4>

080031a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031a2:	b480      	push	{r7}
 80031a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031a6:	e7fe      	b.n	80031a6 <BusFault_Handler+0x4>

080031a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031ac:	e7fe      	b.n	80031ac <UsageFault_Handler+0x4>

080031ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031ae:	b480      	push	{r7}
 80031b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031b2:	bf00      	nop
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031c0:	bf00      	nop
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031ca:	b480      	push	{r7}
 80031cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031ce:	bf00      	nop
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031dc:	f7fd f83a 	bl	8000254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031e0:	bf00      	nop
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <CAN_TX_IRQHandler>:

/**
  * @brief This function handles CAN TX interrupt.
  */
void CAN_TX_IRQHandler(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_TX_IRQn 0 */

  /* USER CODE END CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80031e8:	4802      	ldr	r0, [pc, #8]	; (80031f4 <CAN_TX_IRQHandler+0x10>)
 80031ea:	f7fd fc70 	bl	8000ace <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_TX_IRQn 1 */

  /* USER CODE END CAN_TX_IRQn 1 */
}
 80031ee:	bf00      	nop
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	20000060 	.word	0x20000060

080031f8 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80031fc:	4802      	ldr	r0, [pc, #8]	; (8003208 <CAN_RX0_IRQHandler+0x10>)
 80031fe:	f7fd fc66 	bl	8000ace <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8003202:	bf00      	nop
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	20000060 	.word	0x20000060

0800320c <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003210:	4b1f      	ldr	r3, [pc, #124]	; (8003290 <SystemInit+0x84>)
 8003212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003216:	4a1e      	ldr	r2, [pc, #120]	; (8003290 <SystemInit+0x84>)
 8003218:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800321c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003220:	4b1c      	ldr	r3, [pc, #112]	; (8003294 <SystemInit+0x88>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a1b      	ldr	r2, [pc, #108]	; (8003294 <SystemInit+0x88>)
 8003226:	f043 0301 	orr.w	r3, r3, #1
 800322a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 800322c:	4b19      	ldr	r3, [pc, #100]	; (8003294 <SystemInit+0x88>)
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	4918      	ldr	r1, [pc, #96]	; (8003294 <SystemInit+0x88>)
 8003232:	4b19      	ldr	r3, [pc, #100]	; (8003298 <SystemInit+0x8c>)
 8003234:	4013      	ands	r3, r2
 8003236:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003238:	4b16      	ldr	r3, [pc, #88]	; (8003294 <SystemInit+0x88>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a15      	ldr	r2, [pc, #84]	; (8003294 <SystemInit+0x88>)
 800323e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003246:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003248:	4b12      	ldr	r3, [pc, #72]	; (8003294 <SystemInit+0x88>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a11      	ldr	r2, [pc, #68]	; (8003294 <SystemInit+0x88>)
 800324e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003252:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003254:	4b0f      	ldr	r3, [pc, #60]	; (8003294 <SystemInit+0x88>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	4a0e      	ldr	r2, [pc, #56]	; (8003294 <SystemInit+0x88>)
 800325a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800325e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8003260:	4b0c      	ldr	r3, [pc, #48]	; (8003294 <SystemInit+0x88>)
 8003262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003264:	4a0b      	ldr	r2, [pc, #44]	; (8003294 <SystemInit+0x88>)
 8003266:	f023 030f 	bic.w	r3, r3, #15
 800326a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800326c:	4b09      	ldr	r3, [pc, #36]	; (8003294 <SystemInit+0x88>)
 800326e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003270:	4908      	ldr	r1, [pc, #32]	; (8003294 <SystemInit+0x88>)
 8003272:	4b0a      	ldr	r3, [pc, #40]	; (800329c <SystemInit+0x90>)
 8003274:	4013      	ands	r3, r2
 8003276:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003278:	4b06      	ldr	r3, [pc, #24]	; (8003294 <SystemInit+0x88>)
 800327a:	2200      	movs	r2, #0
 800327c:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800327e:	4b04      	ldr	r3, [pc, #16]	; (8003290 <SystemInit+0x84>)
 8003280:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003284:	609a      	str	r2, [r3, #8]
#endif
}
 8003286:	bf00      	nop
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	e000ed00 	.word	0xe000ed00
 8003294:	40021000 	.word	0x40021000
 8003298:	f87fc00c 	.word	0xf87fc00c
 800329c:	ff00fccc 	.word	0xff00fccc

080032a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80032a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032d8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80032a4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80032a6:	e003      	b.n	80032b0 <LoopCopyDataInit>

080032a8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80032a8:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80032aa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80032ac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80032ae:	3104      	adds	r1, #4

080032b0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80032b0:	480b      	ldr	r0, [pc, #44]	; (80032e0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80032b2:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80032b4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80032b6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80032b8:	d3f6      	bcc.n	80032a8 <CopyDataInit>
	ldr	r2, =_sbss
 80032ba:	4a0b      	ldr	r2, [pc, #44]	; (80032e8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80032bc:	e002      	b.n	80032c4 <LoopFillZerobss>

080032be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80032be:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80032c0:	f842 3b04 	str.w	r3, [r2], #4

080032c4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80032c4:	4b09      	ldr	r3, [pc, #36]	; (80032ec <LoopForever+0x16>)
	cmp	r2, r3
 80032c6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80032c8:	d3f9      	bcc.n	80032be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80032ca:	f7ff ff9f 	bl	800320c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032ce:	f000 f811 	bl	80032f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80032d2:	f7ff fcd3 	bl	8002c7c <main>

080032d6 <LoopForever>:

LoopForever:
    b LoopForever
 80032d6:	e7fe      	b.n	80032d6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80032d8:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80032dc:	080033a4 	.word	0x080033a4
	ldr	r0, =_sdata
 80032e0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80032e4:	20000018 	.word	0x20000018
	ldr	r2, =_sbss
 80032e8:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 80032ec:	20000144 	.word	0x20000144

080032f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80032f0:	e7fe      	b.n	80032f0 <ADC1_2_IRQHandler>
	...

080032f4 <__libc_init_array>:
 80032f4:	b570      	push	{r4, r5, r6, lr}
 80032f6:	4e0d      	ldr	r6, [pc, #52]	; (800332c <__libc_init_array+0x38>)
 80032f8:	4c0d      	ldr	r4, [pc, #52]	; (8003330 <__libc_init_array+0x3c>)
 80032fa:	1ba4      	subs	r4, r4, r6
 80032fc:	10a4      	asrs	r4, r4, #2
 80032fe:	2500      	movs	r5, #0
 8003300:	42a5      	cmp	r5, r4
 8003302:	d109      	bne.n	8003318 <__libc_init_array+0x24>
 8003304:	4e0b      	ldr	r6, [pc, #44]	; (8003334 <__libc_init_array+0x40>)
 8003306:	4c0c      	ldr	r4, [pc, #48]	; (8003338 <__libc_init_array+0x44>)
 8003308:	f000 f820 	bl	800334c <_init>
 800330c:	1ba4      	subs	r4, r4, r6
 800330e:	10a4      	asrs	r4, r4, #2
 8003310:	2500      	movs	r5, #0
 8003312:	42a5      	cmp	r5, r4
 8003314:	d105      	bne.n	8003322 <__libc_init_array+0x2e>
 8003316:	bd70      	pop	{r4, r5, r6, pc}
 8003318:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800331c:	4798      	blx	r3
 800331e:	3501      	adds	r5, #1
 8003320:	e7ee      	b.n	8003300 <__libc_init_array+0xc>
 8003322:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003326:	4798      	blx	r3
 8003328:	3501      	adds	r5, #1
 800332a:	e7f2      	b.n	8003312 <__libc_init_array+0x1e>
 800332c:	0800339c 	.word	0x0800339c
 8003330:	0800339c 	.word	0x0800339c
 8003334:	0800339c 	.word	0x0800339c
 8003338:	080033a0 	.word	0x080033a0

0800333c <memset>:
 800333c:	4402      	add	r2, r0
 800333e:	4603      	mov	r3, r0
 8003340:	4293      	cmp	r3, r2
 8003342:	d100      	bne.n	8003346 <memset+0xa>
 8003344:	4770      	bx	lr
 8003346:	f803 1b01 	strb.w	r1, [r3], #1
 800334a:	e7f9      	b.n	8003340 <memset+0x4>

0800334c <_init>:
 800334c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800334e:	bf00      	nop
 8003350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003352:	bc08      	pop	{r3}
 8003354:	469e      	mov	lr, r3
 8003356:	4770      	bx	lr

08003358 <_fini>:
 8003358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335a:	bf00      	nop
 800335c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800335e:	bc08      	pop	{r3}
 8003360:	469e      	mov	lr, r3
 8003362:	4770      	bx	lr
