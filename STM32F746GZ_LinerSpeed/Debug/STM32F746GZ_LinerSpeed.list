
STM32F746GZ_LinerSpeed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dc8  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002f90  08002f90  00012f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fa0  08002fa0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002fa0  08002fa0  00012fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002fa8  08002fa8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fa8  08002fa8  00012fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fac  08002fac  00012fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002fb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000070  08003020  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08003020  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a42a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015ce  00000000  00000000  0002a4ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000990  00000000  00000000  0002ba98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e8  00000000  00000000  0002c428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024c3c  00000000  00000000  0002cd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a5a0  00000000  00000000  0005194c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e95f7  00000000  00000000  0005beec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001454e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a78  00000000  00000000  00145538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000070 	.word	0x20000070
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08002f78 	.word	0x08002f78

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000074 	.word	0x20000074
 8000204:	08002f78 	.word	0x08002f78

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2f>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae8:	bf24      	itt	cs
 8000aea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000af2:	d90d      	bls.n	8000b10 <__aeabi_d2f+0x30>
 8000af4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000afc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b08:	bf08      	it	eq
 8000b0a:	f020 0001 	biceq.w	r0, r0, #1
 8000b0e:	4770      	bx	lr
 8000b10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b14:	d121      	bne.n	8000b5a <__aeabi_d2f+0x7a>
 8000b16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b1a:	bfbc      	itt	lt
 8000b1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	4770      	bxlt	lr
 8000b22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b2a:	f1c2 0218 	rsb	r2, r2, #24
 8000b2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b36:	fa20 f002 	lsr.w	r0, r0, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	f040 0001 	orrne.w	r0, r0, #1
 8000b40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b4c:	ea40 000c 	orr.w	r0, r0, ip
 8000b50:	fa23 f302 	lsr.w	r3, r3, r2
 8000b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b58:	e7cc      	b.n	8000af4 <__aeabi_d2f+0x14>
 8000b5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5e:	d107      	bne.n	8000b70 <__aeabi_d2f+0x90>
 8000b60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b64:	bf1e      	ittt	ne
 8000b66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6e:	4770      	bxne	lr
 8000b70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <__aeabi_uldivmod>:
 8000b80:	b953      	cbnz	r3, 8000b98 <__aeabi_uldivmod+0x18>
 8000b82:	b94a      	cbnz	r2, 8000b98 <__aeabi_uldivmod+0x18>
 8000b84:	2900      	cmp	r1, #0
 8000b86:	bf08      	it	eq
 8000b88:	2800      	cmpeq	r0, #0
 8000b8a:	bf1c      	itt	ne
 8000b8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b90:	f04f 30ff 	movne.w	r0, #4294967295
 8000b94:	f000 b96e 	b.w	8000e74 <__aeabi_idiv0>
 8000b98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba0:	f000 f806 	bl	8000bb0 <__udivmoddi4>
 8000ba4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bac:	b004      	add	sp, #16
 8000bae:	4770      	bx	lr

08000bb0 <__udivmoddi4>:
 8000bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb4:	9d08      	ldr	r5, [sp, #32]
 8000bb6:	4604      	mov	r4, r0
 8000bb8:	468c      	mov	ip, r1
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f040 8083 	bne.w	8000cc6 <__udivmoddi4+0x116>
 8000bc0:	428a      	cmp	r2, r1
 8000bc2:	4617      	mov	r7, r2
 8000bc4:	d947      	bls.n	8000c56 <__udivmoddi4+0xa6>
 8000bc6:	fab2 f282 	clz	r2, r2
 8000bca:	b142      	cbz	r2, 8000bde <__udivmoddi4+0x2e>
 8000bcc:	f1c2 0020 	rsb	r0, r2, #32
 8000bd0:	fa24 f000 	lsr.w	r0, r4, r0
 8000bd4:	4091      	lsls	r1, r2
 8000bd6:	4097      	lsls	r7, r2
 8000bd8:	ea40 0c01 	orr.w	ip, r0, r1
 8000bdc:	4094      	lsls	r4, r2
 8000bde:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000be2:	0c23      	lsrs	r3, r4, #16
 8000be4:	fbbc f6f8 	udiv	r6, ip, r8
 8000be8:	fa1f fe87 	uxth.w	lr, r7
 8000bec:	fb08 c116 	mls	r1, r8, r6, ip
 8000bf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf4:	fb06 f10e 	mul.w	r1, r6, lr
 8000bf8:	4299      	cmp	r1, r3
 8000bfa:	d909      	bls.n	8000c10 <__udivmoddi4+0x60>
 8000bfc:	18fb      	adds	r3, r7, r3
 8000bfe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c02:	f080 8119 	bcs.w	8000e38 <__udivmoddi4+0x288>
 8000c06:	4299      	cmp	r1, r3
 8000c08:	f240 8116 	bls.w	8000e38 <__udivmoddi4+0x288>
 8000c0c:	3e02      	subs	r6, #2
 8000c0e:	443b      	add	r3, r7
 8000c10:	1a5b      	subs	r3, r3, r1
 8000c12:	b2a4      	uxth	r4, r4
 8000c14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c18:	fb08 3310 	mls	r3, r8, r0, r3
 8000c1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c20:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c24:	45a6      	cmp	lr, r4
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x8c>
 8000c28:	193c      	adds	r4, r7, r4
 8000c2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2e:	f080 8105 	bcs.w	8000e3c <__udivmoddi4+0x28c>
 8000c32:	45a6      	cmp	lr, r4
 8000c34:	f240 8102 	bls.w	8000e3c <__udivmoddi4+0x28c>
 8000c38:	3802      	subs	r0, #2
 8000c3a:	443c      	add	r4, r7
 8000c3c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c40:	eba4 040e 	sub.w	r4, r4, lr
 8000c44:	2600      	movs	r6, #0
 8000c46:	b11d      	cbz	r5, 8000c50 <__udivmoddi4+0xa0>
 8000c48:	40d4      	lsrs	r4, r2
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	b902      	cbnz	r2, 8000c5a <__udivmoddi4+0xaa>
 8000c58:	deff      	udf	#255	; 0xff
 8000c5a:	fab2 f282 	clz	r2, r2
 8000c5e:	2a00      	cmp	r2, #0
 8000c60:	d150      	bne.n	8000d04 <__udivmoddi4+0x154>
 8000c62:	1bcb      	subs	r3, r1, r7
 8000c64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c68:	fa1f f887 	uxth.w	r8, r7
 8000c6c:	2601      	movs	r6, #1
 8000c6e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c72:	0c21      	lsrs	r1, r4, #16
 8000c74:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c7c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c80:	428b      	cmp	r3, r1
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0xe4>
 8000c84:	1879      	adds	r1, r7, r1
 8000c86:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0xe2>
 8000c8c:	428b      	cmp	r3, r1
 8000c8e:	f200 80e9 	bhi.w	8000e64 <__udivmoddi4+0x2b4>
 8000c92:	4684      	mov	ip, r0
 8000c94:	1ac9      	subs	r1, r1, r3
 8000c96:	b2a3      	uxth	r3, r4
 8000c98:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c9c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ca0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ca4:	fb08 f800 	mul.w	r8, r8, r0
 8000ca8:	45a0      	cmp	r8, r4
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0x10c>
 8000cac:	193c      	adds	r4, r7, r4
 8000cae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0x10a>
 8000cb4:	45a0      	cmp	r8, r4
 8000cb6:	f200 80d9 	bhi.w	8000e6c <__udivmoddi4+0x2bc>
 8000cba:	4618      	mov	r0, r3
 8000cbc:	eba4 0408 	sub.w	r4, r4, r8
 8000cc0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cc4:	e7bf      	b.n	8000c46 <__udivmoddi4+0x96>
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d909      	bls.n	8000cde <__udivmoddi4+0x12e>
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	f000 80b1 	beq.w	8000e32 <__udivmoddi4+0x282>
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd6:	4630      	mov	r0, r6
 8000cd8:	4631      	mov	r1, r6
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	fab3 f683 	clz	r6, r3
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	d14a      	bne.n	8000d7c <__udivmoddi4+0x1cc>
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0x140>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 80b8 	bhi.w	8000e60 <__udivmoddi4+0x2b0>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb61 0103 	sbc.w	r1, r1, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	468c      	mov	ip, r1
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0a8      	beq.n	8000c50 <__udivmoddi4+0xa0>
 8000cfe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d02:	e7a5      	b.n	8000c50 <__udivmoddi4+0xa0>
 8000d04:	f1c2 0320 	rsb	r3, r2, #32
 8000d08:	fa20 f603 	lsr.w	r6, r0, r3
 8000d0c:	4097      	lsls	r7, r2
 8000d0e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d12:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d16:	40d9      	lsrs	r1, r3
 8000d18:	4330      	orrs	r0, r6
 8000d1a:	0c03      	lsrs	r3, r0, #16
 8000d1c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d20:	fa1f f887 	uxth.w	r8, r7
 8000d24:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2c:	fb06 f108 	mul.w	r1, r6, r8
 8000d30:	4299      	cmp	r1, r3
 8000d32:	fa04 f402 	lsl.w	r4, r4, r2
 8000d36:	d909      	bls.n	8000d4c <__udivmoddi4+0x19c>
 8000d38:	18fb      	adds	r3, r7, r3
 8000d3a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d3e:	f080 808d 	bcs.w	8000e5c <__udivmoddi4+0x2ac>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 808a 	bls.w	8000e5c <__udivmoddi4+0x2ac>
 8000d48:	3e02      	subs	r6, #2
 8000d4a:	443b      	add	r3, r7
 8000d4c:	1a5b      	subs	r3, r3, r1
 8000d4e:	b281      	uxth	r1, r0
 8000d50:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d54:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d5c:	fb00 f308 	mul.w	r3, r0, r8
 8000d60:	428b      	cmp	r3, r1
 8000d62:	d907      	bls.n	8000d74 <__udivmoddi4+0x1c4>
 8000d64:	1879      	adds	r1, r7, r1
 8000d66:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d6a:	d273      	bcs.n	8000e54 <__udivmoddi4+0x2a4>
 8000d6c:	428b      	cmp	r3, r1
 8000d6e:	d971      	bls.n	8000e54 <__udivmoddi4+0x2a4>
 8000d70:	3802      	subs	r0, #2
 8000d72:	4439      	add	r1, r7
 8000d74:	1acb      	subs	r3, r1, r3
 8000d76:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d7a:	e778      	b.n	8000c6e <__udivmoddi4+0xbe>
 8000d7c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d80:	fa03 f406 	lsl.w	r4, r3, r6
 8000d84:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d88:	431c      	orrs	r4, r3
 8000d8a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d92:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d96:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d9a:	431f      	orrs	r7, r3
 8000d9c:	0c3b      	lsrs	r3, r7, #16
 8000d9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000da2:	fa1f f884 	uxth.w	r8, r4
 8000da6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000daa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dae:	fb09 fa08 	mul.w	sl, r9, r8
 8000db2:	458a      	cmp	sl, r1
 8000db4:	fa02 f206 	lsl.w	r2, r2, r6
 8000db8:	fa00 f306 	lsl.w	r3, r0, r6
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x220>
 8000dbe:	1861      	adds	r1, r4, r1
 8000dc0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dc4:	d248      	bcs.n	8000e58 <__udivmoddi4+0x2a8>
 8000dc6:	458a      	cmp	sl, r1
 8000dc8:	d946      	bls.n	8000e58 <__udivmoddi4+0x2a8>
 8000dca:	f1a9 0902 	sub.w	r9, r9, #2
 8000dce:	4421      	add	r1, r4
 8000dd0:	eba1 010a 	sub.w	r1, r1, sl
 8000dd4:	b2bf      	uxth	r7, r7
 8000dd6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dda:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dde:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000de2:	fb00 f808 	mul.w	r8, r0, r8
 8000de6:	45b8      	cmp	r8, r7
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x24a>
 8000dea:	19e7      	adds	r7, r4, r7
 8000dec:	f100 31ff 	add.w	r1, r0, #4294967295
 8000df0:	d22e      	bcs.n	8000e50 <__udivmoddi4+0x2a0>
 8000df2:	45b8      	cmp	r8, r7
 8000df4:	d92c      	bls.n	8000e50 <__udivmoddi4+0x2a0>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4427      	add	r7, r4
 8000dfa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dfe:	eba7 0708 	sub.w	r7, r7, r8
 8000e02:	fba0 8902 	umull	r8, r9, r0, r2
 8000e06:	454f      	cmp	r7, r9
 8000e08:	46c6      	mov	lr, r8
 8000e0a:	4649      	mov	r1, r9
 8000e0c:	d31a      	bcc.n	8000e44 <__udivmoddi4+0x294>
 8000e0e:	d017      	beq.n	8000e40 <__udivmoddi4+0x290>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x27a>
 8000e12:	ebb3 020e 	subs.w	r2, r3, lr
 8000e16:	eb67 0701 	sbc.w	r7, r7, r1
 8000e1a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e1e:	40f2      	lsrs	r2, r6
 8000e20:	ea4c 0202 	orr.w	r2, ip, r2
 8000e24:	40f7      	lsrs	r7, r6
 8000e26:	e9c5 2700 	strd	r2, r7, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	462e      	mov	r6, r5
 8000e34:	4628      	mov	r0, r5
 8000e36:	e70b      	b.n	8000c50 <__udivmoddi4+0xa0>
 8000e38:	4606      	mov	r6, r0
 8000e3a:	e6e9      	b.n	8000c10 <__udivmoddi4+0x60>
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	e6fd      	b.n	8000c3c <__udivmoddi4+0x8c>
 8000e40:	4543      	cmp	r3, r8
 8000e42:	d2e5      	bcs.n	8000e10 <__udivmoddi4+0x260>
 8000e44:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e48:	eb69 0104 	sbc.w	r1, r9, r4
 8000e4c:	3801      	subs	r0, #1
 8000e4e:	e7df      	b.n	8000e10 <__udivmoddi4+0x260>
 8000e50:	4608      	mov	r0, r1
 8000e52:	e7d2      	b.n	8000dfa <__udivmoddi4+0x24a>
 8000e54:	4660      	mov	r0, ip
 8000e56:	e78d      	b.n	8000d74 <__udivmoddi4+0x1c4>
 8000e58:	4681      	mov	r9, r0
 8000e5a:	e7b9      	b.n	8000dd0 <__udivmoddi4+0x220>
 8000e5c:	4666      	mov	r6, ip
 8000e5e:	e775      	b.n	8000d4c <__udivmoddi4+0x19c>
 8000e60:	4630      	mov	r0, r6
 8000e62:	e74a      	b.n	8000cfa <__udivmoddi4+0x14a>
 8000e64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e68:	4439      	add	r1, r7
 8000e6a:	e713      	b.n	8000c94 <__udivmoddi4+0xe4>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	443c      	add	r4, r7
 8000e70:	e724      	b.n	8000cbc <__udivmoddi4+0x10c>
 8000e72:	bf00      	nop

08000e74 <__aeabi_idiv0>:
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <delay_us>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us (uint16_t us)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000e82:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <delay_us+0x30>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2200      	movs	r2, #0
 8000e88:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < us);
 8000e8a:	bf00      	nop
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <delay_us+0x30>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e92:	88fb      	ldrh	r3, [r7, #6]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d3f9      	bcc.n	8000e8c <delay_us+0x14>
}
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	2000008c 	.word	0x2000008c
 8000eac:	00000000 	.word	0x00000000

08000eb0 <constantAccel>:

void constantAccel(){
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	f6ad 7dc8 	subw	sp, sp, #4040	; 0xfc8
 8000eb6:	af00      	add	r7, sp, #0
	int   delays[STEPS];
	//float angle = 0.031416
	float angle =1 ;
 8000eb8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000ebc:	f507 627b 	add.w	r2, r7, #4016	; 0xfb0
 8000ec0:	6013      	str	r3, [r2, #0]
	float accel = 0.01;
 8000ec2:	4b77      	ldr	r3, [pc, #476]	; (80010a0 <constantAccel+0x1f0>)
 8000ec4:	f607 72ac 	addw	r2, r7, #4012	; 0xfac
 8000ec8:	6013      	str	r3, [r2, #0]
	float c0 = 2000 * sqrt(2 * angle / accel) * 0.67703;
 8000eca:	f507 637b 	add.w	r3, r7, #4016	; 0xfb0
 8000ece:	edd3 7a00 	vldr	s15, [r3]
 8000ed2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000ed6:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8000eda:	edd3 7a00 	vldr	s15, [r3]
 8000ede:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000ee2:	ee16 0a90 	vmov	r0, s13
 8000ee6:	f7ff faf3 	bl	80004d0 <__aeabi_f2d>
 8000eea:	4602      	mov	r2, r0
 8000eec:	460b      	mov	r3, r1
 8000eee:	ec43 2b10 	vmov	d0, r2, r3
 8000ef2:	f001 ff27 	bl	8002d44 <sqrt>
 8000ef6:	ec51 0b10 	vmov	r0, r1, d0
 8000efa:	f04f 0200 	mov.w	r2, #0
 8000efe:	4b69      	ldr	r3, [pc, #420]	; (80010a4 <constantAccel+0x1f4>)
 8000f00:	f7ff fb3e 	bl	8000580 <__aeabi_dmul>
 8000f04:	4602      	mov	r2, r0
 8000f06:	460b      	mov	r3, r1
 8000f08:	4610      	mov	r0, r2
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	a362      	add	r3, pc, #392	; (adr r3, 8001098 <constantAccel+0x1e8>)
 8000f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f12:	f7ff fb35 	bl	8000580 <__aeabi_dmul>
 8000f16:	4602      	mov	r2, r0
 8000f18:	460b      	mov	r3, r1
 8000f1a:	4610      	mov	r0, r2
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f7ff fddf 	bl	8000ae0 <__aeabi_d2f>
 8000f22:	4603      	mov	r3, r0
 8000f24:	f607 72a8 	addw	r2, r7, #4008	; 0xfa8
 8000f28:	6013      	str	r3, [r2, #0]
	float lastDelay = 0;
 8000f2a:	f04f 0300 	mov.w	r3, #0
 8000f2e:	f607 72c4 	addw	r2, r7, #4036	; 0xfc4
 8000f32:	6013      	str	r3, [r2, #0]
	int   highSpeed = 100;
 8000f34:	2364      	movs	r3, #100	; 0x64
 8000f36:	f8c7 3fa4 	str.w	r3, [r7, #4004]	; 0xfa4
	for (int i = 0; i < STEPS; i++){
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f8c7 3fc0 	str.w	r3, [r7, #4032]	; 0xfc0
 8000f40:	e054      	b.n	8000fec <constantAccel+0x13c>
		float d = c0;
 8000f42:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f607 72bc 	addw	r2, r7, #4028	; 0xfbc
 8000f4c:	6013      	str	r3, [r2, #0]
		if (i > 0)
 8000f4e:	f8d7 3fc0 	ldr.w	r3, [r7, #4032]	; 0xfc0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	dd19      	ble.n	8000f8a <constantAccel+0xda>
			d = lastDelay - (2 * lastDelay) / (4 * i + 1);
 8000f56:	f607 73c4 	addw	r3, r7, #4036	; 0xfc4
 8000f5a:	edd3 7a00 	vldr	s15, [r3]
 8000f5e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8000f62:	f8d7 3fc0 	ldr.w	r3, [r7, #4032]	; 0xfc0
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	3301      	adds	r3, #1
 8000f6a:	ee07 3a90 	vmov	s15, r3
 8000f6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f76:	f607 73c4 	addw	r3, r7, #4036	; 0xfc4
 8000f7a:	ed93 7a00 	vldr	s14, [r3]
 8000f7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f82:	f607 73bc 	addw	r3, r7, #4028	; 0xfbc
 8000f86:	edc3 7a00 	vstr	s15, [r3]
		if (d < highSpeed)
 8000f8a:	f8d7 3fa4 	ldr.w	r3, [r7, #4004]	; 0xfa4
 8000f8e:	ee07 3a90 	vmov	s15, r3
 8000f92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f96:	f607 73bc 	addw	r3, r7, #4028	; 0xfbc
 8000f9a:	ed93 7a00 	vldr	s14, [r3]
 8000f9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa6:	d509      	bpl.n	8000fbc <constantAccel+0x10c>
			d = highSpeed;
 8000fa8:	f8d7 3fa4 	ldr.w	r3, [r7, #4004]	; 0xfa4
 8000fac:	ee07 3a90 	vmov	s15, r3
 8000fb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fb4:	f607 73bc 	addw	r3, r7, #4028	; 0xfbc
 8000fb8:	edc3 7a00 	vstr	s15, [r3]
		delays[i] = d;
 8000fbc:	f607 73bc 	addw	r3, r7, #4028	; 0xfbc
 8000fc0:	edd3 7a00 	vldr	s15, [r3]
 8000fc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fc8:	ee17 1a90 	vmov	r1, s15
 8000fcc:	1d3b      	adds	r3, r7, #4
 8000fce:	f8d7 2fc0 	ldr.w	r2, [r7, #4032]	; 0xfc0
 8000fd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		lastDelay = d;
 8000fd6:	f607 73bc 	addw	r3, r7, #4028	; 0xfbc
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f607 72c4 	addw	r2, r7, #4036	; 0xfc4
 8000fe0:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < STEPS; i++){
 8000fe2:	f8d7 3fc0 	ldr.w	r3, [r7, #4032]	; 0xfc0
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	f8c7 3fc0 	str.w	r3, [r7, #4032]	; 0xfc0
 8000fec:	f8d7 3fc0 	ldr.w	r3, [r7, #4032]	; 0xfc0
 8000ff0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ff4:	dba5      	blt.n	8000f42 <constantAccel+0x92>
	}

	for (int i = 0; i < STEPS; i++) {
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f8c7 3fb8 	str.w	r3, [r7, #4024]	; 0xfb8
 8000ffc:	e019      	b.n	8001032 <constantAccel+0x182>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8000ffe:	2201      	movs	r2, #1
 8001000:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001004:	4828      	ldr	r0, [pc, #160]	; (80010a8 <constantAccel+0x1f8>)
 8001006:	f000 fd6f 	bl	8001ae8 <HAL_GPIO_WritePin>
		delay_us(delays[i]);
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	f8d7 2fb8 	ldr.w	r2, [r7, #4024]	; 0xfb8
 8001010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001014:	b29b      	uxth	r3, r3
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff ff2e 	bl	8000e78 <delay_us>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001022:	4821      	ldr	r0, [pc, #132]	; (80010a8 <constantAccel+0x1f8>)
 8001024:	f000 fd60 	bl	8001ae8 <HAL_GPIO_WritePin>
	for (int i = 0; i < STEPS; i++) {
 8001028:	f8d7 3fb8 	ldr.w	r3, [r7, #4024]	; 0xfb8
 800102c:	3301      	adds	r3, #1
 800102e:	f8c7 3fb8 	str.w	r3, [r7, #4024]	; 0xfb8
 8001032:	f8d7 3fb8 	ldr.w	r3, [r7, #4024]	; 0xfb8
 8001036:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800103a:	dbe0      	blt.n	8000ffe <constantAccel+0x14e>
	}

	for (int i = 0; i < STEPS; i++) {
 800103c:	2300      	movs	r3, #0
 800103e:	f8c7 3fb4 	str.w	r3, [r7, #4020]	; 0xfb4
 8001042:	e01c      	b.n	800107e <constantAccel+0x1ce>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8001044:	2201      	movs	r2, #1
 8001046:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800104a:	4817      	ldr	r0, [pc, #92]	; (80010a8 <constantAccel+0x1f8>)
 800104c:	f000 fd4c 	bl	8001ae8 <HAL_GPIO_WritePin>
		delay_us(delays[STEPS-i-1]);
 8001050:	f8d7 2fb4 	ldr.w	r2, [r7, #4020]	; 0xfb4
 8001054:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001058:	1a9b      	subs	r3, r3, r2
 800105a:	1d3a      	adds	r2, r7, #4
 800105c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001060:	b29b      	uxth	r3, r3
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff ff08 	bl	8000e78 <delay_us>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8001068:	2200      	movs	r2, #0
 800106a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800106e:	480e      	ldr	r0, [pc, #56]	; (80010a8 <constantAccel+0x1f8>)
 8001070:	f000 fd3a 	bl	8001ae8 <HAL_GPIO_WritePin>
	for (int i = 0; i < STEPS; i++) {
 8001074:	f8d7 3fb4 	ldr.w	r3, [r7, #4020]	; 0xfb4
 8001078:	3301      	adds	r3, #1
 800107a:	f8c7 3fb4 	str.w	r3, [r7, #4020]	; 0xfb4
 800107e:	f8d7 3fb4 	ldr.w	r3, [r7, #4020]	; 0xfb4
 8001082:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001086:	dbdd      	blt.n	8001044 <constantAccel+0x194>
	}
}
 8001088:	bf00      	nop
 800108a:	bf00      	nop
 800108c:	f607 77c8 	addw	r7, r7, #4040	; 0xfc8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	f3af 8000 	nop.w
 8001098:	d18d25ee 	.word	0xd18d25ee
 800109c:	3fe5aa3a 	.word	0x3fe5aa3a
 80010a0:	3c23d70a 	.word	0x3c23d70a
 80010a4:	409f4000 	.word	0x409f4000
 80010a8:	40020800 	.word	0x40020800

080010ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b0:	f000 f9db 	bl	800146a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b4:	f000 f826 	bl	8001104 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b8:	f000 f8d4 	bl	8001264 <MX_GPIO_Init>
  MX_TIM1_Init();
 80010bc:	f000 f87e 	bl	80011bc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80010c0:	2200      	movs	r2, #0
 80010c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010c6:	480d      	ldr	r0, [pc, #52]	; (80010fc <main+0x50>)
 80010c8:	f000 fd0e 	bl	8001ae8 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim1);
 80010cc:	480c      	ldr	r0, [pc, #48]	; (8001100 <main+0x54>)
 80010ce:	f001 f9c3 	bl	8002458 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 80010d2:	2201      	movs	r2, #1
 80010d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010d8:	4808      	ldr	r0, [pc, #32]	; (80010fc <main+0x50>)
 80010da:	f000 fd05 	bl	8001ae8 <HAL_GPIO_WritePin>
	  constantAccel();
 80010de:	f7ff fee7 	bl	8000eb0 <constantAccel>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010e8:	4804      	ldr	r0, [pc, #16]	; (80010fc <main+0x50>)
 80010ea:	f000 fcfd 	bl	8001ae8 <HAL_GPIO_WritePin>
	  constantAccel();
 80010ee:	f7ff fedf 	bl	8000eb0 <constantAccel>

	  HAL_Delay(3000);
 80010f2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80010f6:	f000 fa15 	bl	8001524 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 80010fa:	e7ea      	b.n	80010d2 <main+0x26>
 80010fc:	40020800 	.word	0x40020800
 8001100:	2000008c 	.word	0x2000008c

08001104 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b094      	sub	sp, #80	; 0x50
 8001108:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110a:	f107 0320 	add.w	r3, r7, #32
 800110e:	2230      	movs	r2, #48	; 0x30
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f001 ff28 	bl	8002f68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001128:	4b22      	ldr	r3, [pc, #136]	; (80011b4 <SystemClock_Config+0xb0>)
 800112a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112c:	4a21      	ldr	r2, [pc, #132]	; (80011b4 <SystemClock_Config+0xb0>)
 800112e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001132:	6413      	str	r3, [r2, #64]	; 0x40
 8001134:	4b1f      	ldr	r3, [pc, #124]	; (80011b4 <SystemClock_Config+0xb0>)
 8001136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001140:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <SystemClock_Config+0xb4>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001148:	4a1b      	ldr	r2, [pc, #108]	; (80011b8 <SystemClock_Config+0xb4>)
 800114a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800114e:	6013      	str	r3, [r2, #0]
 8001150:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <SystemClock_Config+0xb4>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800115c:	2302      	movs	r3, #2
 800115e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001160:	2301      	movs	r3, #1
 8001162:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001164:	2310      	movs	r3, #16
 8001166:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001168:	2300      	movs	r3, #0
 800116a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800116c:	f107 0320 	add.w	r3, r7, #32
 8001170:	4618      	mov	r0, r3
 8001172:	f000 fcd3 	bl	8001b1c <HAL_RCC_OscConfig>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800117c:	f000 f8a4 	bl	80012c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001180:	230f      	movs	r3, #15
 8001182:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001184:	2300      	movs	r3, #0
 8001186:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800118c:	2300      	movs	r3, #0
 800118e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001190:	2300      	movs	r3, #0
 8001192:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001194:	f107 030c 	add.w	r3, r7, #12
 8001198:	2100      	movs	r1, #0
 800119a:	4618      	mov	r0, r3
 800119c:	f000 ff62 	bl	8002064 <HAL_RCC_ClockConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80011a6:	f000 f88f 	bl	80012c8 <Error_Handler>
  }
}
 80011aa:	bf00      	nop
 80011ac:	3750      	adds	r7, #80	; 0x50
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40007000 	.word	0x40007000

080011bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011c2:	f107 0310 	add.w	r3, r7, #16
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011da:	4b20      	ldr	r3, [pc, #128]	; (800125c <MX_TIM1_Init+0xa0>)
 80011dc:	4a20      	ldr	r2, [pc, #128]	; (8001260 <MX_TIM1_Init+0xa4>)
 80011de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 80011e0:	4b1e      	ldr	r3, [pc, #120]	; (800125c <MX_TIM1_Init+0xa0>)
 80011e2:	220f      	movs	r2, #15
 80011e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e6:	4b1d      	ldr	r3, [pc, #116]	; (800125c <MX_TIM1_Init+0xa0>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80011ec:	4b1b      	ldr	r3, [pc, #108]	; (800125c <MX_TIM1_Init+0xa0>)
 80011ee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80011f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f4:	4b19      	ldr	r3, [pc, #100]	; (800125c <MX_TIM1_Init+0xa0>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <MX_TIM1_Init+0xa0>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001200:	4b16      	ldr	r3, [pc, #88]	; (800125c <MX_TIM1_Init+0xa0>)
 8001202:	2200      	movs	r2, #0
 8001204:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001206:	4815      	ldr	r0, [pc, #84]	; (800125c <MX_TIM1_Init+0xa0>)
 8001208:	f001 f8ce 	bl	80023a8 <HAL_TIM_Base_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001212:	f000 f859 	bl	80012c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001216:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800121a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800121c:	f107 0310 	add.w	r3, r7, #16
 8001220:	4619      	mov	r1, r3
 8001222:	480e      	ldr	r0, [pc, #56]	; (800125c <MX_TIM1_Init+0xa0>)
 8001224:	f001 fab0 	bl	8002788 <HAL_TIM_ConfigClockSource>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800122e:	f000 f84b 	bl	80012c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001232:	2300      	movs	r3, #0
 8001234:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	4619      	mov	r1, r3
 8001242:	4806      	ldr	r0, [pc, #24]	; (800125c <MX_TIM1_Init+0xa0>)
 8001244:	f001 fcd2 	bl	8002bec <HAL_TIMEx_MasterConfigSynchronization>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800124e:	f000 f83b 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	3720      	adds	r7, #32
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	2000008c 	.word	0x2000008c
 8001260:	40010000 	.word	0x40010000

08001264 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001278:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <MX_GPIO_Init+0x5c>)
 800127a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127c:	4a10      	ldr	r2, [pc, #64]	; (80012c0 <MX_GPIO_Init+0x5c>)
 800127e:	f043 0304 	orr.w	r3, r3, #4
 8001282:	6313      	str	r3, [r2, #48]	; 0x30
 8001284:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <MX_GPIO_Init+0x5c>)
 8001286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001288:	f003 0304 	and.w	r3, r3, #4
 800128c:	603b      	str	r3, [r7, #0]
 800128e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001290:	2200      	movs	r2, #0
 8001292:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001296:	480b      	ldr	r0, [pc, #44]	; (80012c4 <MX_GPIO_Init+0x60>)
 8001298:	f000 fc26 	bl	8001ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800129c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80012a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a2:	2301      	movs	r3, #1
 80012a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	4619      	mov	r1, r3
 80012b2:	4804      	ldr	r0, [pc, #16]	; (80012c4 <MX_GPIO_Init+0x60>)
 80012b4:	f000 fa6c 	bl	8001790 <HAL_GPIO_Init>

}
 80012b8:	bf00      	nop
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40020800 	.word	0x40020800

080012c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012cc:	b672      	cpsid	i
}
 80012ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <Error_Handler+0x8>
	...

080012d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80012da:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <HAL_MspInit+0x44>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	4a0e      	ldr	r2, [pc, #56]	; (8001318 <HAL_MspInit+0x44>)
 80012e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e4:	6413      	str	r3, [r2, #64]	; 0x40
 80012e6:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <HAL_MspInit+0x44>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <HAL_MspInit+0x44>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	4a08      	ldr	r2, [pc, #32]	; (8001318 <HAL_MspInit+0x44>)
 80012f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012fc:	6453      	str	r3, [r2, #68]	; 0x44
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_MspInit+0x44>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001306:	603b      	str	r3, [r7, #0]
 8001308:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800

0800131c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a11      	ldr	r2, [pc, #68]	; (8001370 <HAL_TIM_Base_MspInit+0x54>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d11b      	bne.n	8001366 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <HAL_TIM_Base_MspInit+0x58>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	4a10      	ldr	r2, [pc, #64]	; (8001374 <HAL_TIM_Base_MspInit+0x58>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6453      	str	r3, [r2, #68]	; 0x44
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <HAL_TIM_Base_MspInit+0x58>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001346:	2200      	movs	r2, #0
 8001348:	2100      	movs	r1, #0
 800134a:	201a      	movs	r0, #26
 800134c:	f000 f9e9 	bl	8001722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001350:	201a      	movs	r0, #26
 8001352:	f000 fa02 	bl	800175a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001356:	2200      	movs	r2, #0
 8001358:	2100      	movs	r1, #0
 800135a:	201b      	movs	r0, #27
 800135c:	f000 f9e1 	bl	8001722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001360:	201b      	movs	r0, #27
 8001362:	f000 f9fa 	bl	800175a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001366:	bf00      	nop
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40010000 	.word	0x40010000
 8001374:	40023800 	.word	0x40023800

08001378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800137c:	e7fe      	b.n	800137c <NMI_Handler+0x4>

0800137e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001382:	e7fe      	b.n	8001382 <HardFault_Handler+0x4>

08001384 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <MemManage_Handler+0x4>

0800138a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800138e:	e7fe      	b.n	800138e <BusFault_Handler+0x4>

08001390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001394:	e7fe      	b.n	8001394 <UsageFault_Handler+0x4>

08001396 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c4:	f000 f88e 	bl	80014e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}

080013cc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013d0:	4802      	ldr	r0, [pc, #8]	; (80013dc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80013d2:	f001 f8b9 	bl	8002548 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	2000008c 	.word	0x2000008c

080013e0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013e4:	4802      	ldr	r0, [pc, #8]	; (80013f0 <TIM1_CC_IRQHandler+0x10>)
 80013e6:	f001 f8af 	bl	8002548 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	2000008c 	.word	0x2000008c

080013f4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <SystemInit+0x20>)
 80013fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013fe:	4a05      	ldr	r2, [pc, #20]	; (8001414 <SystemInit+0x20>)
 8001400:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001404:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001418:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001450 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800141c:	480d      	ldr	r0, [pc, #52]	; (8001454 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800141e:	490e      	ldr	r1, [pc, #56]	; (8001458 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001420:	4a0e      	ldr	r2, [pc, #56]	; (800145c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001424:	e002      	b.n	800142c <LoopCopyDataInit>

08001426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800142a:	3304      	adds	r3, #4

0800142c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800142c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800142e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001430:	d3f9      	bcc.n	8001426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001432:	4a0b      	ldr	r2, [pc, #44]	; (8001460 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001434:	4c0b      	ldr	r4, [pc, #44]	; (8001464 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001438:	e001      	b.n	800143e <LoopFillZerobss>

0800143a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800143a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800143c:	3204      	adds	r2, #4

0800143e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800143e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001440:	d3fb      	bcc.n	800143a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001442:	f7ff ffd7 	bl	80013f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001446:	f001 fd6b 	bl	8002f20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800144a:	f7ff fe2f 	bl	80010ac <main>
  bx  lr    
 800144e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001450:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001458:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800145c:	08002fb0 	.word	0x08002fb0
  ldr r2, =_sbss
 8001460:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001464:	200000dc 	.word	0x200000dc

08001468 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001468:	e7fe      	b.n	8001468 <ADC_IRQHandler>

0800146a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800146e:	2003      	movs	r0, #3
 8001470:	f000 f94c 	bl	800170c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001474:	2000      	movs	r0, #0
 8001476:	f000 f805 	bl	8001484 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800147a:	f7ff ff2b 	bl	80012d4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800147e:	2300      	movs	r3, #0
}
 8001480:	4618      	mov	r0, r3
 8001482:	bd80      	pop	{r7, pc}

08001484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800148c:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <HAL_InitTick+0x54>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4b12      	ldr	r3, [pc, #72]	; (80014dc <HAL_InitTick+0x58>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	4619      	mov	r1, r3
 8001496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800149a:	fbb3 f3f1 	udiv	r3, r3, r1
 800149e:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 f967 	bl	8001776 <HAL_SYSTICK_Config>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e00e      	b.n	80014d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b0f      	cmp	r3, #15
 80014b6:	d80a      	bhi.n	80014ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014b8:	2200      	movs	r2, #0
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	f04f 30ff 	mov.w	r0, #4294967295
 80014c0:	f000 f92f 	bl	8001722 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014c4:	4a06      	ldr	r2, [pc, #24]	; (80014e0 <HAL_InitTick+0x5c>)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
 80014cc:	e000      	b.n	80014d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000000 	.word	0x20000000
 80014dc:	20000008 	.word	0x20000008
 80014e0:	20000004 	.word	0x20000004

080014e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_IncTick+0x20>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b06      	ldr	r3, [pc, #24]	; (8001508 <HAL_IncTick+0x24>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4413      	add	r3, r2
 80014f4:	4a04      	ldr	r2, [pc, #16]	; (8001508 <HAL_IncTick+0x24>)
 80014f6:	6013      	str	r3, [r2, #0]
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20000008 	.word	0x20000008
 8001508:	200000d8 	.word	0x200000d8

0800150c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return uwTick;
 8001510:	4b03      	ldr	r3, [pc, #12]	; (8001520 <HAL_GetTick+0x14>)
 8001512:	681b      	ldr	r3, [r3, #0]
}
 8001514:	4618      	mov	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	200000d8 	.word	0x200000d8

08001524 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800152c:	f7ff ffee 	bl	800150c <HAL_GetTick>
 8001530:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800153c:	d005      	beq.n	800154a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800153e:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <HAL_Delay+0x44>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	461a      	mov	r2, r3
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	4413      	add	r3, r2
 8001548:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800154a:	bf00      	nop
 800154c:	f7ff ffde 	bl	800150c <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	429a      	cmp	r2, r3
 800155a:	d8f7      	bhi.n	800154c <HAL_Delay+0x28>
  {
  }
}
 800155c:	bf00      	nop
 800155e:	bf00      	nop
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000008 	.word	0x20000008

0800156c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800157c:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <__NVIC_SetPriorityGrouping+0x40>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001588:	4013      	ands	r3, r2
 800158a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <__NVIC_SetPriorityGrouping+0x44>)
 8001596:	4313      	orrs	r3, r2
 8001598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800159a:	4a04      	ldr	r2, [pc, #16]	; (80015ac <__NVIC_SetPriorityGrouping+0x40>)
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	60d3      	str	r3, [r2, #12]
}
 80015a0:	bf00      	nop
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000ed00 	.word	0xe000ed00
 80015b0:	05fa0000 	.word	0x05fa0000

080015b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <__NVIC_GetPriorityGrouping+0x18>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	0a1b      	lsrs	r3, r3, #8
 80015be:	f003 0307 	and.w	r3, r3, #7
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	db0b      	blt.n	80015fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	f003 021f 	and.w	r2, r3, #31
 80015e8:	4907      	ldr	r1, [pc, #28]	; (8001608 <__NVIC_EnableIRQ+0x38>)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	095b      	lsrs	r3, r3, #5
 80015f0:	2001      	movs	r0, #1
 80015f2:	fa00 f202 	lsl.w	r2, r0, r2
 80015f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000e100 	.word	0xe000e100

0800160c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	6039      	str	r1, [r7, #0]
 8001616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161c:	2b00      	cmp	r3, #0
 800161e:	db0a      	blt.n	8001636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	b2da      	uxtb	r2, r3
 8001624:	490c      	ldr	r1, [pc, #48]	; (8001658 <__NVIC_SetPriority+0x4c>)
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	0112      	lsls	r2, r2, #4
 800162c:	b2d2      	uxtb	r2, r2
 800162e:	440b      	add	r3, r1
 8001630:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001634:	e00a      	b.n	800164c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	b2da      	uxtb	r2, r3
 800163a:	4908      	ldr	r1, [pc, #32]	; (800165c <__NVIC_SetPriority+0x50>)
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	f003 030f 	and.w	r3, r3, #15
 8001642:	3b04      	subs	r3, #4
 8001644:	0112      	lsls	r2, r2, #4
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	440b      	add	r3, r1
 800164a:	761a      	strb	r2, [r3, #24]
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	e000e100 	.word	0xe000e100
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001660:	b480      	push	{r7}
 8001662:	b089      	sub	sp, #36	; 0x24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f1c3 0307 	rsb	r3, r3, #7
 800167a:	2b04      	cmp	r3, #4
 800167c:	bf28      	it	cs
 800167e:	2304      	movcs	r3, #4
 8001680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3304      	adds	r3, #4
 8001686:	2b06      	cmp	r3, #6
 8001688:	d902      	bls.n	8001690 <NVIC_EncodePriority+0x30>
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	3b03      	subs	r3, #3
 800168e:	e000      	b.n	8001692 <NVIC_EncodePriority+0x32>
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	f04f 32ff 	mov.w	r2, #4294967295
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43da      	mvns	r2, r3
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	401a      	ands	r2, r3
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a8:	f04f 31ff 	mov.w	r1, #4294967295
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	fa01 f303 	lsl.w	r3, r1, r3
 80016b2:	43d9      	mvns	r1, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b8:	4313      	orrs	r3, r2
         );
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3724      	adds	r7, #36	; 0x24
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
	...

080016c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016d8:	d301      	bcc.n	80016de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016da:	2301      	movs	r3, #1
 80016dc:	e00f      	b.n	80016fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016de:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <SysTick_Config+0x40>)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016e6:	210f      	movs	r1, #15
 80016e8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ec:	f7ff ff8e 	bl	800160c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <SysTick_Config+0x40>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016f6:	4b04      	ldr	r3, [pc, #16]	; (8001708 <SysTick_Config+0x40>)
 80016f8:	2207      	movs	r2, #7
 80016fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	e000e010 	.word	0xe000e010

0800170c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff ff29 	bl	800156c <__NVIC_SetPriorityGrouping>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001722:	b580      	push	{r7, lr}
 8001724:	b086      	sub	sp, #24
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
 800172e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001734:	f7ff ff3e 	bl	80015b4 <__NVIC_GetPriorityGrouping>
 8001738:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	68b9      	ldr	r1, [r7, #8]
 800173e:	6978      	ldr	r0, [r7, #20]
 8001740:	f7ff ff8e 	bl	8001660 <NVIC_EncodePriority>
 8001744:	4602      	mov	r2, r0
 8001746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800174a:	4611      	mov	r1, r2
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff ff5d 	bl	800160c <__NVIC_SetPriority>
}
 8001752:	bf00      	nop
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	4603      	mov	r3, r0
 8001762:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff31 	bl	80015d0 <__NVIC_EnableIRQ>
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff ffa2 	bl	80016c8 <SysTick_Config>
 8001784:	4603      	mov	r3, r0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001790:	b480      	push	{r7}
 8001792:	b089      	sub	sp, #36	; 0x24
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
 80017ae:	e175      	b.n	8001a9c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80017b0:	2201      	movs	r2, #1
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	4013      	ands	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	f040 8164 	bne.w	8001a96 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d00b      	beq.n	80017ee <HAL_GPIO_Init+0x5e>
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d007      	beq.n	80017ee <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017e2:	2b11      	cmp	r3, #17
 80017e4:	d003      	beq.n	80017ee <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b12      	cmp	r3, #18
 80017ec:	d130      	bne.n	8001850 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	2203      	movs	r2, #3
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43db      	mvns	r3, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4013      	ands	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	68da      	ldr	r2, [r3, #12]
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	4313      	orrs	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001824:	2201      	movs	r2, #1
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	091b      	lsrs	r3, r3, #4
 800183a:	f003 0201 	and.w	r2, r3, #1
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4313      	orrs	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	2203      	movs	r2, #3
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4313      	orrs	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	2b02      	cmp	r3, #2
 8001886:	d003      	beq.n	8001890 <HAL_GPIO_Init+0x100>
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2b12      	cmp	r3, #18
 800188e:	d123      	bne.n	80018d8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	08da      	lsrs	r2, r3, #3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3208      	adds	r2, #8
 8001898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800189c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	220f      	movs	r2, #15
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4013      	ands	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	691a      	ldr	r2, [r3, #16]
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	08da      	lsrs	r2, r3, #3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	3208      	adds	r2, #8
 80018d2:	69b9      	ldr	r1, [r7, #24]
 80018d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	2203      	movs	r2, #3
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4013      	ands	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 0203 	and.w	r2, r3, #3
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001914:	2b00      	cmp	r3, #0
 8001916:	f000 80be 	beq.w	8001a96 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191a:	4b66      	ldr	r3, [pc, #408]	; (8001ab4 <HAL_GPIO_Init+0x324>)
 800191c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191e:	4a65      	ldr	r2, [pc, #404]	; (8001ab4 <HAL_GPIO_Init+0x324>)
 8001920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001924:	6453      	str	r3, [r2, #68]	; 0x44
 8001926:	4b63      	ldr	r3, [pc, #396]	; (8001ab4 <HAL_GPIO_Init+0x324>)
 8001928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001932:	4a61      	ldr	r2, [pc, #388]	; (8001ab8 <HAL_GPIO_Init+0x328>)
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	089b      	lsrs	r3, r3, #2
 8001938:	3302      	adds	r3, #2
 800193a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f003 0303 	and.w	r3, r3, #3
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	220f      	movs	r2, #15
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4013      	ands	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a58      	ldr	r2, [pc, #352]	; (8001abc <HAL_GPIO_Init+0x32c>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d037      	beq.n	80019ce <HAL_GPIO_Init+0x23e>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a57      	ldr	r2, [pc, #348]	; (8001ac0 <HAL_GPIO_Init+0x330>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d031      	beq.n	80019ca <HAL_GPIO_Init+0x23a>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a56      	ldr	r2, [pc, #344]	; (8001ac4 <HAL_GPIO_Init+0x334>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d02b      	beq.n	80019c6 <HAL_GPIO_Init+0x236>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a55      	ldr	r2, [pc, #340]	; (8001ac8 <HAL_GPIO_Init+0x338>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d025      	beq.n	80019c2 <HAL_GPIO_Init+0x232>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a54      	ldr	r2, [pc, #336]	; (8001acc <HAL_GPIO_Init+0x33c>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d01f      	beq.n	80019be <HAL_GPIO_Init+0x22e>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a53      	ldr	r2, [pc, #332]	; (8001ad0 <HAL_GPIO_Init+0x340>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d019      	beq.n	80019ba <HAL_GPIO_Init+0x22a>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a52      	ldr	r2, [pc, #328]	; (8001ad4 <HAL_GPIO_Init+0x344>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d013      	beq.n	80019b6 <HAL_GPIO_Init+0x226>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a51      	ldr	r2, [pc, #324]	; (8001ad8 <HAL_GPIO_Init+0x348>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d00d      	beq.n	80019b2 <HAL_GPIO_Init+0x222>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a50      	ldr	r2, [pc, #320]	; (8001adc <HAL_GPIO_Init+0x34c>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d007      	beq.n	80019ae <HAL_GPIO_Init+0x21e>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a4f      	ldr	r2, [pc, #316]	; (8001ae0 <HAL_GPIO_Init+0x350>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d101      	bne.n	80019aa <HAL_GPIO_Init+0x21a>
 80019a6:	2309      	movs	r3, #9
 80019a8:	e012      	b.n	80019d0 <HAL_GPIO_Init+0x240>
 80019aa:	230a      	movs	r3, #10
 80019ac:	e010      	b.n	80019d0 <HAL_GPIO_Init+0x240>
 80019ae:	2308      	movs	r3, #8
 80019b0:	e00e      	b.n	80019d0 <HAL_GPIO_Init+0x240>
 80019b2:	2307      	movs	r3, #7
 80019b4:	e00c      	b.n	80019d0 <HAL_GPIO_Init+0x240>
 80019b6:	2306      	movs	r3, #6
 80019b8:	e00a      	b.n	80019d0 <HAL_GPIO_Init+0x240>
 80019ba:	2305      	movs	r3, #5
 80019bc:	e008      	b.n	80019d0 <HAL_GPIO_Init+0x240>
 80019be:	2304      	movs	r3, #4
 80019c0:	e006      	b.n	80019d0 <HAL_GPIO_Init+0x240>
 80019c2:	2303      	movs	r3, #3
 80019c4:	e004      	b.n	80019d0 <HAL_GPIO_Init+0x240>
 80019c6:	2302      	movs	r3, #2
 80019c8:	e002      	b.n	80019d0 <HAL_GPIO_Init+0x240>
 80019ca:	2301      	movs	r3, #1
 80019cc:	e000      	b.n	80019d0 <HAL_GPIO_Init+0x240>
 80019ce:	2300      	movs	r3, #0
 80019d0:	69fa      	ldr	r2, [r7, #28]
 80019d2:	f002 0203 	and.w	r2, r2, #3
 80019d6:	0092      	lsls	r2, r2, #2
 80019d8:	4093      	lsls	r3, r2
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4313      	orrs	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80019e0:	4935      	ldr	r1, [pc, #212]	; (8001ab8 <HAL_GPIO_Init+0x328>)
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	089b      	lsrs	r3, r3, #2
 80019e6:	3302      	adds	r3, #2
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019ee:	4b3d      	ldr	r3, [pc, #244]	; (8001ae4 <HAL_GPIO_Init+0x354>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	43db      	mvns	r3, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4013      	ands	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a12:	4a34      	ldr	r2, [pc, #208]	; (8001ae4 <HAL_GPIO_Init+0x354>)
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a18:	4b32      	ldr	r3, [pc, #200]	; (8001ae4 <HAL_GPIO_Init+0x354>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	43db      	mvns	r3, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4013      	ands	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d003      	beq.n	8001a3c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a3c:	4a29      	ldr	r2, [pc, #164]	; (8001ae4 <HAL_GPIO_Init+0x354>)
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a42:	4b28      	ldr	r3, [pc, #160]	; (8001ae4 <HAL_GPIO_Init+0x354>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a66:	4a1f      	ldr	r2, [pc, #124]	; (8001ae4 <HAL_GPIO_Init+0x354>)
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <HAL_GPIO_Init+0x354>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	43db      	mvns	r3, r3
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a90:	4a14      	ldr	r2, [pc, #80]	; (8001ae4 <HAL_GPIO_Init+0x354>)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	61fb      	str	r3, [r7, #28]
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	2b0f      	cmp	r3, #15
 8001aa0:	f67f ae86 	bls.w	80017b0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	bf00      	nop
 8001aa8:	3724      	adds	r7, #36	; 0x24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	40013800 	.word	0x40013800
 8001abc:	40020000 	.word	0x40020000
 8001ac0:	40020400 	.word	0x40020400
 8001ac4:	40020800 	.word	0x40020800
 8001ac8:	40020c00 	.word	0x40020c00
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40021400 	.word	0x40021400
 8001ad4:	40021800 	.word	0x40021800
 8001ad8:	40021c00 	.word	0x40021c00
 8001adc:	40022000 	.word	0x40022000
 8001ae0:	40022400 	.word	0x40022400
 8001ae4:	40013c00 	.word	0x40013c00

08001ae8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	460b      	mov	r3, r1
 8001af2:	807b      	strh	r3, [r7, #2]
 8001af4:	4613      	mov	r3, r2
 8001af6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001af8:	787b      	ldrb	r3, [r7, #1]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d003      	beq.n	8001b06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001afe:	887a      	ldrh	r2, [r7, #2]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001b04:	e003      	b.n	8001b0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001b06:	887b      	ldrh	r3, [r7, #2]
 8001b08:	041a      	lsls	r2, r3, #16
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	619a      	str	r2, [r3, #24]
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
	...

08001b1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001b24:	2300      	movs	r3, #0
 8001b26:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e291      	b.n	8002056 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 8087 	beq.w	8001c4e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b40:	4b96      	ldr	r3, [pc, #600]	; (8001d9c <HAL_RCC_OscConfig+0x280>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f003 030c 	and.w	r3, r3, #12
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	d00c      	beq.n	8001b66 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b4c:	4b93      	ldr	r3, [pc, #588]	; (8001d9c <HAL_RCC_OscConfig+0x280>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 030c 	and.w	r3, r3, #12
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	d112      	bne.n	8001b7e <HAL_RCC_OscConfig+0x62>
 8001b58:	4b90      	ldr	r3, [pc, #576]	; (8001d9c <HAL_RCC_OscConfig+0x280>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b64:	d10b      	bne.n	8001b7e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b66:	4b8d      	ldr	r3, [pc, #564]	; (8001d9c <HAL_RCC_OscConfig+0x280>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d06c      	beq.n	8001c4c <HAL_RCC_OscConfig+0x130>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d168      	bne.n	8001c4c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e26b      	b.n	8002056 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b86:	d106      	bne.n	8001b96 <HAL_RCC_OscConfig+0x7a>
 8001b88:	4b84      	ldr	r3, [pc, #528]	; (8001d9c <HAL_RCC_OscConfig+0x280>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a83      	ldr	r2, [pc, #524]	; (8001d9c <HAL_RCC_OscConfig+0x280>)
 8001b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	e02e      	b.n	8001bf4 <HAL_RCC_OscConfig+0xd8>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10c      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x9c>
 8001b9e:	4b7f      	ldr	r3, [pc, #508]	; (8001d9c <HAL_RCC_OscConfig+0x280>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a7e      	ldr	r2, [pc, #504]	; (8001d9c <HAL_RCC_OscConfig+0x280>)
 8001ba4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	4b7c      	ldr	r3, [pc, #496]	; (8001d9c <HAL_RCC_OscConfig+0x280>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a7b      	ldr	r2, [pc, #492]	; (8001d9c <HAL_RCC_OscConfig+0x280>)
 8001bb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	e01d      	b.n	8001bf4 <HAL_RCC_OscConfig+0xd8>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bc0:	d10c      	bne.n	8001bdc <HAL_RCC_OscConfig+0xc0>
 8001bc2:	4b76      	ldr	r3, [pc, #472]	; (8001d9c <HAL_RCC_OscConfig+0x280>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a75      	ldr	r2, [pc, #468]	; (8001d9c <HAL_RCC_OscConfig+0x280>)
 8001bc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	4b73      	ldr	r3, [pc, #460]	; (8001d9c <HAL_RCC_OscConfig+0x280>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a72      	ldr	r2, [pc, #456]	; (8001d9c <HAL_RCC_OscConfig+0x280>)
 8001bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	e00b      	b.n	8001bf4 <HAL_RCC_OscConfig+0xd8>
 8001bdc:	4b6f      	ldr	r3, [pc, #444]	; (8001d9c <HAL_RCC_OscConfig+0x280>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a6e      	ldr	r2, [pc, #440]	; (8001d9c <HAL_RCC_OscConfig+0x280>)
 8001be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001be6:	6013      	str	r3, [r2, #0]
 8001be8:	4b6c      	ldr	r3, [pc, #432]	; (8001d9c <HAL_RCC_OscConfig+0x280>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a6b      	ldr	r2, [pc, #428]	; (8001d9c <HAL_RCC_OscConfig+0x280>)
 8001bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d013      	beq.n	8001c24 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfc:	f7ff fc86 	bl	800150c <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c04:	f7ff fc82 	bl	800150c <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b64      	cmp	r3, #100	; 0x64
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e21f      	b.n	8002056 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c16:	4b61      	ldr	r3, [pc, #388]	; (8001d9c <HAL_RCC_OscConfig+0x280>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0f0      	beq.n	8001c04 <HAL_RCC_OscConfig+0xe8>
 8001c22:	e014      	b.n	8001c4e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c24:	f7ff fc72 	bl	800150c <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c2c:	f7ff fc6e 	bl	800150c <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b64      	cmp	r3, #100	; 0x64
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e20b      	b.n	8002056 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c3e:	4b57      	ldr	r3, [pc, #348]	; (8001d9c <HAL_RCC_OscConfig+0x280>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f0      	bne.n	8001c2c <HAL_RCC_OscConfig+0x110>
 8001c4a:	e000      	b.n	8001c4e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d069      	beq.n	8001d2e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c5a:	4b50      	ldr	r3, [pc, #320]	; (8001d9c <HAL_RCC_OscConfig+0x280>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 030c 	and.w	r3, r3, #12
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00b      	beq.n	8001c7e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c66:	4b4d      	ldr	r3, [pc, #308]	; (8001d9c <HAL_RCC_OscConfig+0x280>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
 8001c6e:	2b08      	cmp	r3, #8
 8001c70:	d11c      	bne.n	8001cac <HAL_RCC_OscConfig+0x190>
 8001c72:	4b4a      	ldr	r3, [pc, #296]	; (8001d9c <HAL_RCC_OscConfig+0x280>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d116      	bne.n	8001cac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c7e:	4b47      	ldr	r3, [pc, #284]	; (8001d9c <HAL_RCC_OscConfig+0x280>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d005      	beq.n	8001c96 <HAL_RCC_OscConfig+0x17a>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d001      	beq.n	8001c96 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e1df      	b.n	8002056 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c96:	4b41      	ldr	r3, [pc, #260]	; (8001d9c <HAL_RCC_OscConfig+0x280>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	493d      	ldr	r1, [pc, #244]	; (8001d9c <HAL_RCC_OscConfig+0x280>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001caa:	e040      	b.n	8001d2e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d023      	beq.n	8001cfc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cb4:	4b39      	ldr	r3, [pc, #228]	; (8001d9c <HAL_RCC_OscConfig+0x280>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a38      	ldr	r2, [pc, #224]	; (8001d9c <HAL_RCC_OscConfig+0x280>)
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc0:	f7ff fc24 	bl	800150c <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc8:	f7ff fc20 	bl	800150c <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e1bd      	b.n	8002056 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cda:	4b30      	ldr	r3, [pc, #192]	; (8001d9c <HAL_RCC_OscConfig+0x280>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0f0      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce6:	4b2d      	ldr	r3, [pc, #180]	; (8001d9c <HAL_RCC_OscConfig+0x280>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	4929      	ldr	r1, [pc, #164]	; (8001d9c <HAL_RCC_OscConfig+0x280>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	600b      	str	r3, [r1, #0]
 8001cfa:	e018      	b.n	8001d2e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cfc:	4b27      	ldr	r3, [pc, #156]	; (8001d9c <HAL_RCC_OscConfig+0x280>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a26      	ldr	r2, [pc, #152]	; (8001d9c <HAL_RCC_OscConfig+0x280>)
 8001d02:	f023 0301 	bic.w	r3, r3, #1
 8001d06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d08:	f7ff fc00 	bl	800150c <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d10:	f7ff fbfc 	bl	800150c <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e199      	b.n	8002056 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d22:	4b1e      	ldr	r3, [pc, #120]	; (8001d9c <HAL_RCC_OscConfig+0x280>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f0      	bne.n	8001d10 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d038      	beq.n	8001dac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d019      	beq.n	8001d76 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d42:	4b16      	ldr	r3, [pc, #88]	; (8001d9c <HAL_RCC_OscConfig+0x280>)
 8001d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d46:	4a15      	ldr	r2, [pc, #84]	; (8001d9c <HAL_RCC_OscConfig+0x280>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d4e:	f7ff fbdd 	bl	800150c <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d56:	f7ff fbd9 	bl	800150c <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e176      	b.n	8002056 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d68:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <HAL_RCC_OscConfig+0x280>)
 8001d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0f0      	beq.n	8001d56 <HAL_RCC_OscConfig+0x23a>
 8001d74:	e01a      	b.n	8001dac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <HAL_RCC_OscConfig+0x280>)
 8001d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d7a:	4a08      	ldr	r2, [pc, #32]	; (8001d9c <HAL_RCC_OscConfig+0x280>)
 8001d7c:	f023 0301 	bic.w	r3, r3, #1
 8001d80:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d82:	f7ff fbc3 	bl	800150c <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d88:	e00a      	b.n	8001da0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d8a:	f7ff fbbf 	bl	800150c <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d903      	bls.n	8001da0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e15c      	b.n	8002056 <HAL_RCC_OscConfig+0x53a>
 8001d9c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001da0:	4b91      	ldr	r3, [pc, #580]	; (8001fe8 <HAL_RCC_OscConfig+0x4cc>)
 8001da2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1ee      	bne.n	8001d8a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f000 80a4 	beq.w	8001f02 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dba:	4b8b      	ldr	r3, [pc, #556]	; (8001fe8 <HAL_RCC_OscConfig+0x4cc>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10d      	bne.n	8001de2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dc6:	4b88      	ldr	r3, [pc, #544]	; (8001fe8 <HAL_RCC_OscConfig+0x4cc>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	4a87      	ldr	r2, [pc, #540]	; (8001fe8 <HAL_RCC_OscConfig+0x4cc>)
 8001dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd2:	4b85      	ldr	r3, [pc, #532]	; (8001fe8 <HAL_RCC_OscConfig+0x4cc>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dda:	60bb      	str	r3, [r7, #8]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dde:	2301      	movs	r3, #1
 8001de0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001de2:	4b82      	ldr	r3, [pc, #520]	; (8001fec <HAL_RCC_OscConfig+0x4d0>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d118      	bne.n	8001e20 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001dee:	4b7f      	ldr	r3, [pc, #508]	; (8001fec <HAL_RCC_OscConfig+0x4d0>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a7e      	ldr	r2, [pc, #504]	; (8001fec <HAL_RCC_OscConfig+0x4d0>)
 8001df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dfa:	f7ff fb87 	bl	800150c <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e02:	f7ff fb83 	bl	800150c <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b64      	cmp	r3, #100	; 0x64
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e120      	b.n	8002056 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e14:	4b75      	ldr	r3, [pc, #468]	; (8001fec <HAL_RCC_OscConfig+0x4d0>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0f0      	beq.n	8001e02 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d106      	bne.n	8001e36 <HAL_RCC_OscConfig+0x31a>
 8001e28:	4b6f      	ldr	r3, [pc, #444]	; (8001fe8 <HAL_RCC_OscConfig+0x4cc>)
 8001e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2c:	4a6e      	ldr	r2, [pc, #440]	; (8001fe8 <HAL_RCC_OscConfig+0x4cc>)
 8001e2e:	f043 0301 	orr.w	r3, r3, #1
 8001e32:	6713      	str	r3, [r2, #112]	; 0x70
 8001e34:	e02d      	b.n	8001e92 <HAL_RCC_OscConfig+0x376>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10c      	bne.n	8001e58 <HAL_RCC_OscConfig+0x33c>
 8001e3e:	4b6a      	ldr	r3, [pc, #424]	; (8001fe8 <HAL_RCC_OscConfig+0x4cc>)
 8001e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e42:	4a69      	ldr	r2, [pc, #420]	; (8001fe8 <HAL_RCC_OscConfig+0x4cc>)
 8001e44:	f023 0301 	bic.w	r3, r3, #1
 8001e48:	6713      	str	r3, [r2, #112]	; 0x70
 8001e4a:	4b67      	ldr	r3, [pc, #412]	; (8001fe8 <HAL_RCC_OscConfig+0x4cc>)
 8001e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e4e:	4a66      	ldr	r2, [pc, #408]	; (8001fe8 <HAL_RCC_OscConfig+0x4cc>)
 8001e50:	f023 0304 	bic.w	r3, r3, #4
 8001e54:	6713      	str	r3, [r2, #112]	; 0x70
 8001e56:	e01c      	b.n	8001e92 <HAL_RCC_OscConfig+0x376>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	2b05      	cmp	r3, #5
 8001e5e:	d10c      	bne.n	8001e7a <HAL_RCC_OscConfig+0x35e>
 8001e60:	4b61      	ldr	r3, [pc, #388]	; (8001fe8 <HAL_RCC_OscConfig+0x4cc>)
 8001e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e64:	4a60      	ldr	r2, [pc, #384]	; (8001fe8 <HAL_RCC_OscConfig+0x4cc>)
 8001e66:	f043 0304 	orr.w	r3, r3, #4
 8001e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e6c:	4b5e      	ldr	r3, [pc, #376]	; (8001fe8 <HAL_RCC_OscConfig+0x4cc>)
 8001e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e70:	4a5d      	ldr	r2, [pc, #372]	; (8001fe8 <HAL_RCC_OscConfig+0x4cc>)
 8001e72:	f043 0301 	orr.w	r3, r3, #1
 8001e76:	6713      	str	r3, [r2, #112]	; 0x70
 8001e78:	e00b      	b.n	8001e92 <HAL_RCC_OscConfig+0x376>
 8001e7a:	4b5b      	ldr	r3, [pc, #364]	; (8001fe8 <HAL_RCC_OscConfig+0x4cc>)
 8001e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e7e:	4a5a      	ldr	r2, [pc, #360]	; (8001fe8 <HAL_RCC_OscConfig+0x4cc>)
 8001e80:	f023 0301 	bic.w	r3, r3, #1
 8001e84:	6713      	str	r3, [r2, #112]	; 0x70
 8001e86:	4b58      	ldr	r3, [pc, #352]	; (8001fe8 <HAL_RCC_OscConfig+0x4cc>)
 8001e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8a:	4a57      	ldr	r2, [pc, #348]	; (8001fe8 <HAL_RCC_OscConfig+0x4cc>)
 8001e8c:	f023 0304 	bic.w	r3, r3, #4
 8001e90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d015      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e9a:	f7ff fb37 	bl	800150c <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea0:	e00a      	b.n	8001eb8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea2:	f7ff fb33 	bl	800150c <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e0ce      	b.n	8002056 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb8:	4b4b      	ldr	r3, [pc, #300]	; (8001fe8 <HAL_RCC_OscConfig+0x4cc>)
 8001eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0ee      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x386>
 8001ec4:	e014      	b.n	8001ef0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec6:	f7ff fb21 	bl	800150c <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ecc:	e00a      	b.n	8001ee4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ece:	f7ff fb1d 	bl	800150c <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e0b8      	b.n	8002056 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee4:	4b40      	ldr	r3, [pc, #256]	; (8001fe8 <HAL_RCC_OscConfig+0x4cc>)
 8001ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1ee      	bne.n	8001ece <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ef0:	7dfb      	ldrb	r3, [r7, #23]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d105      	bne.n	8001f02 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef6:	4b3c      	ldr	r3, [pc, #240]	; (8001fe8 <HAL_RCC_OscConfig+0x4cc>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	4a3b      	ldr	r2, [pc, #236]	; (8001fe8 <HAL_RCC_OscConfig+0x4cc>)
 8001efc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f00:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 80a4 	beq.w	8002054 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f0c:	4b36      	ldr	r3, [pc, #216]	; (8001fe8 <HAL_RCC_OscConfig+0x4cc>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 030c 	and.w	r3, r3, #12
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	d06b      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d149      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f20:	4b31      	ldr	r3, [pc, #196]	; (8001fe8 <HAL_RCC_OscConfig+0x4cc>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a30      	ldr	r2, [pc, #192]	; (8001fe8 <HAL_RCC_OscConfig+0x4cc>)
 8001f26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2c:	f7ff faee 	bl	800150c <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f34:	f7ff faea 	bl	800150c <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e087      	b.n	8002056 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f46:	4b28      	ldr	r3, [pc, #160]	; (8001fe8 <HAL_RCC_OscConfig+0x4cc>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f0      	bne.n	8001f34 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69da      	ldr	r2, [r3, #28]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f60:	019b      	lsls	r3, r3, #6
 8001f62:	431a      	orrs	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f68:	085b      	lsrs	r3, r3, #1
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	041b      	lsls	r3, r3, #16
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f74:	061b      	lsls	r3, r3, #24
 8001f76:	4313      	orrs	r3, r2
 8001f78:	4a1b      	ldr	r2, [pc, #108]	; (8001fe8 <HAL_RCC_OscConfig+0x4cc>)
 8001f7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f7e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f80:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <HAL_RCC_OscConfig+0x4cc>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a18      	ldr	r2, [pc, #96]	; (8001fe8 <HAL_RCC_OscConfig+0x4cc>)
 8001f86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f8c:	f7ff fabe 	bl	800150c <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f94:	f7ff faba 	bl	800150c <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e057      	b.n	8002056 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fa6:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <HAL_RCC_OscConfig+0x4cc>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0f0      	beq.n	8001f94 <HAL_RCC_OscConfig+0x478>
 8001fb2:	e04f      	b.n	8002054 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <HAL_RCC_OscConfig+0x4cc>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a0b      	ldr	r2, [pc, #44]	; (8001fe8 <HAL_RCC_OscConfig+0x4cc>)
 8001fba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc0:	f7ff faa4 	bl	800150c <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc8:	f7ff faa0 	bl	800150c <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e03d      	b.n	8002056 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fda:	4b03      	ldr	r3, [pc, #12]	; (8001fe8 <HAL_RCC_OscConfig+0x4cc>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f0      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x4ac>
 8001fe6:	e035      	b.n	8002054 <HAL_RCC_OscConfig+0x538>
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001ff0:	4b1b      	ldr	r3, [pc, #108]	; (8002060 <HAL_RCC_OscConfig+0x544>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d028      	beq.n	8002050 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002008:	429a      	cmp	r2, r3
 800200a:	d121      	bne.n	8002050 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002016:	429a      	cmp	r2, r3
 8002018:	d11a      	bne.n	8002050 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002020:	4013      	ands	r3, r2
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002026:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002028:	4293      	cmp	r3, r2
 800202a:	d111      	bne.n	8002050 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002036:	085b      	lsrs	r3, r3, #1
 8002038:	3b01      	subs	r3, #1
 800203a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800203c:	429a      	cmp	r2, r3
 800203e:	d107      	bne.n	8002050 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800204c:	429a      	cmp	r2, r3
 800204e:	d001      	beq.n	8002054 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e000      	b.n	8002056 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40023800 	.word	0x40023800

08002064 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800206e:	2300      	movs	r3, #0
 8002070:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0d0      	b.n	800221e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800207c:	4b6a      	ldr	r3, [pc, #424]	; (8002228 <HAL_RCC_ClockConfig+0x1c4>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 030f 	and.w	r3, r3, #15
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d910      	bls.n	80020ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208a:	4b67      	ldr	r3, [pc, #412]	; (8002228 <HAL_RCC_ClockConfig+0x1c4>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f023 020f 	bic.w	r2, r3, #15
 8002092:	4965      	ldr	r1, [pc, #404]	; (8002228 <HAL_RCC_ClockConfig+0x1c4>)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	4313      	orrs	r3, r2
 8002098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800209a:	4b63      	ldr	r3, [pc, #396]	; (8002228 <HAL_RCC_ClockConfig+0x1c4>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d001      	beq.n	80020ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e0b8      	b.n	800221e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d020      	beq.n	80020fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d005      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020c4:	4b59      	ldr	r3, [pc, #356]	; (800222c <HAL_RCC_ClockConfig+0x1c8>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	4a58      	ldr	r2, [pc, #352]	; (800222c <HAL_RCC_ClockConfig+0x1c8>)
 80020ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0308 	and.w	r3, r3, #8
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d005      	beq.n	80020e8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020dc:	4b53      	ldr	r3, [pc, #332]	; (800222c <HAL_RCC_ClockConfig+0x1c8>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	4a52      	ldr	r2, [pc, #328]	; (800222c <HAL_RCC_ClockConfig+0x1c8>)
 80020e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e8:	4b50      	ldr	r3, [pc, #320]	; (800222c <HAL_RCC_ClockConfig+0x1c8>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	494d      	ldr	r1, [pc, #308]	; (800222c <HAL_RCC_ClockConfig+0x1c8>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d040      	beq.n	8002188 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d107      	bne.n	800211e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210e:	4b47      	ldr	r3, [pc, #284]	; (800222c <HAL_RCC_ClockConfig+0x1c8>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d115      	bne.n	8002146 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e07f      	b.n	800221e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b02      	cmp	r3, #2
 8002124:	d107      	bne.n	8002136 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002126:	4b41      	ldr	r3, [pc, #260]	; (800222c <HAL_RCC_ClockConfig+0x1c8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d109      	bne.n	8002146 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e073      	b.n	800221e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002136:	4b3d      	ldr	r3, [pc, #244]	; (800222c <HAL_RCC_ClockConfig+0x1c8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e06b      	b.n	800221e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002146:	4b39      	ldr	r3, [pc, #228]	; (800222c <HAL_RCC_ClockConfig+0x1c8>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f023 0203 	bic.w	r2, r3, #3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	4936      	ldr	r1, [pc, #216]	; (800222c <HAL_RCC_ClockConfig+0x1c8>)
 8002154:	4313      	orrs	r3, r2
 8002156:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002158:	f7ff f9d8 	bl	800150c <HAL_GetTick>
 800215c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215e:	e00a      	b.n	8002176 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002160:	f7ff f9d4 	bl	800150c <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	f241 3288 	movw	r2, #5000	; 0x1388
 800216e:	4293      	cmp	r3, r2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e053      	b.n	800221e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002176:	4b2d      	ldr	r3, [pc, #180]	; (800222c <HAL_RCC_ClockConfig+0x1c8>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 020c 	and.w	r2, r3, #12
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	429a      	cmp	r2, r3
 8002186:	d1eb      	bne.n	8002160 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002188:	4b27      	ldr	r3, [pc, #156]	; (8002228 <HAL_RCC_ClockConfig+0x1c4>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 030f 	and.w	r3, r3, #15
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d210      	bcs.n	80021b8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002196:	4b24      	ldr	r3, [pc, #144]	; (8002228 <HAL_RCC_ClockConfig+0x1c4>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f023 020f 	bic.w	r2, r3, #15
 800219e:	4922      	ldr	r1, [pc, #136]	; (8002228 <HAL_RCC_ClockConfig+0x1c4>)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a6:	4b20      	ldr	r3, [pc, #128]	; (8002228 <HAL_RCC_ClockConfig+0x1c4>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d001      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e032      	b.n	800221e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d008      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021c4:	4b19      	ldr	r3, [pc, #100]	; (800222c <HAL_RCC_ClockConfig+0x1c8>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	4916      	ldr	r1, [pc, #88]	; (800222c <HAL_RCC_ClockConfig+0x1c8>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d009      	beq.n	80021f6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021e2:	4b12      	ldr	r3, [pc, #72]	; (800222c <HAL_RCC_ClockConfig+0x1c8>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	490e      	ldr	r1, [pc, #56]	; (800222c <HAL_RCC_ClockConfig+0x1c8>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021f6:	f000 f821 	bl	800223c <HAL_RCC_GetSysClockFreq>
 80021fa:	4602      	mov	r2, r0
 80021fc:	4b0b      	ldr	r3, [pc, #44]	; (800222c <HAL_RCC_ClockConfig+0x1c8>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	091b      	lsrs	r3, r3, #4
 8002202:	f003 030f 	and.w	r3, r3, #15
 8002206:	490a      	ldr	r1, [pc, #40]	; (8002230 <HAL_RCC_ClockConfig+0x1cc>)
 8002208:	5ccb      	ldrb	r3, [r1, r3]
 800220a:	fa22 f303 	lsr.w	r3, r2, r3
 800220e:	4a09      	ldr	r2, [pc, #36]	; (8002234 <HAL_RCC_ClockConfig+0x1d0>)
 8002210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002212:	4b09      	ldr	r3, [pc, #36]	; (8002238 <HAL_RCC_ClockConfig+0x1d4>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff f934 	bl	8001484 <HAL_InitTick>

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40023c00 	.word	0x40023c00
 800222c:	40023800 	.word	0x40023800
 8002230:	08002f90 	.word	0x08002f90
 8002234:	20000000 	.word	0x20000000
 8002238:	20000004 	.word	0x20000004

0800223c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800223c:	b5b0      	push	{r4, r5, r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002242:	2100      	movs	r1, #0
 8002244:	6079      	str	r1, [r7, #4]
 8002246:	2100      	movs	r1, #0
 8002248:	60f9      	str	r1, [r7, #12]
 800224a:	2100      	movs	r1, #0
 800224c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800224e:	2100      	movs	r1, #0
 8002250:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002252:	4952      	ldr	r1, [pc, #328]	; (800239c <HAL_RCC_GetSysClockFreq+0x160>)
 8002254:	6889      	ldr	r1, [r1, #8]
 8002256:	f001 010c 	and.w	r1, r1, #12
 800225a:	2908      	cmp	r1, #8
 800225c:	d00d      	beq.n	800227a <HAL_RCC_GetSysClockFreq+0x3e>
 800225e:	2908      	cmp	r1, #8
 8002260:	f200 8094 	bhi.w	800238c <HAL_RCC_GetSysClockFreq+0x150>
 8002264:	2900      	cmp	r1, #0
 8002266:	d002      	beq.n	800226e <HAL_RCC_GetSysClockFreq+0x32>
 8002268:	2904      	cmp	r1, #4
 800226a:	d003      	beq.n	8002274 <HAL_RCC_GetSysClockFreq+0x38>
 800226c:	e08e      	b.n	800238c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800226e:	4b4c      	ldr	r3, [pc, #304]	; (80023a0 <HAL_RCC_GetSysClockFreq+0x164>)
 8002270:	60bb      	str	r3, [r7, #8]
      break;
 8002272:	e08e      	b.n	8002392 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002274:	4b4b      	ldr	r3, [pc, #300]	; (80023a4 <HAL_RCC_GetSysClockFreq+0x168>)
 8002276:	60bb      	str	r3, [r7, #8]
      break;
 8002278:	e08b      	b.n	8002392 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800227a:	4948      	ldr	r1, [pc, #288]	; (800239c <HAL_RCC_GetSysClockFreq+0x160>)
 800227c:	6849      	ldr	r1, [r1, #4]
 800227e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002282:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002284:	4945      	ldr	r1, [pc, #276]	; (800239c <HAL_RCC_GetSysClockFreq+0x160>)
 8002286:	6849      	ldr	r1, [r1, #4]
 8002288:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800228c:	2900      	cmp	r1, #0
 800228e:	d024      	beq.n	80022da <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002290:	4942      	ldr	r1, [pc, #264]	; (800239c <HAL_RCC_GetSysClockFreq+0x160>)
 8002292:	6849      	ldr	r1, [r1, #4]
 8002294:	0989      	lsrs	r1, r1, #6
 8002296:	4608      	mov	r0, r1
 8002298:	f04f 0100 	mov.w	r1, #0
 800229c:	f240 14ff 	movw	r4, #511	; 0x1ff
 80022a0:	f04f 0500 	mov.w	r5, #0
 80022a4:	ea00 0204 	and.w	r2, r0, r4
 80022a8:	ea01 0305 	and.w	r3, r1, r5
 80022ac:	493d      	ldr	r1, [pc, #244]	; (80023a4 <HAL_RCC_GetSysClockFreq+0x168>)
 80022ae:	fb01 f003 	mul.w	r0, r1, r3
 80022b2:	2100      	movs	r1, #0
 80022b4:	fb01 f102 	mul.w	r1, r1, r2
 80022b8:	1844      	adds	r4, r0, r1
 80022ba:	493a      	ldr	r1, [pc, #232]	; (80023a4 <HAL_RCC_GetSysClockFreq+0x168>)
 80022bc:	fba2 0101 	umull	r0, r1, r2, r1
 80022c0:	1863      	adds	r3, r4, r1
 80022c2:	4619      	mov	r1, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	461a      	mov	r2, r3
 80022c8:	f04f 0300 	mov.w	r3, #0
 80022cc:	f7fe fc58 	bl	8000b80 <__aeabi_uldivmod>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	4613      	mov	r3, r2
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	e04a      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022da:	4b30      	ldr	r3, [pc, #192]	; (800239c <HAL_RCC_GetSysClockFreq+0x160>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	099b      	lsrs	r3, r3, #6
 80022e0:	461a      	mov	r2, r3
 80022e2:	f04f 0300 	mov.w	r3, #0
 80022e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80022ea:	f04f 0100 	mov.w	r1, #0
 80022ee:	ea02 0400 	and.w	r4, r2, r0
 80022f2:	ea03 0501 	and.w	r5, r3, r1
 80022f6:	4620      	mov	r0, r4
 80022f8:	4629      	mov	r1, r5
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	f04f 0300 	mov.w	r3, #0
 8002302:	014b      	lsls	r3, r1, #5
 8002304:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002308:	0142      	lsls	r2, r0, #5
 800230a:	4610      	mov	r0, r2
 800230c:	4619      	mov	r1, r3
 800230e:	1b00      	subs	r0, r0, r4
 8002310:	eb61 0105 	sbc.w	r1, r1, r5
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	f04f 0300 	mov.w	r3, #0
 800231c:	018b      	lsls	r3, r1, #6
 800231e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002322:	0182      	lsls	r2, r0, #6
 8002324:	1a12      	subs	r2, r2, r0
 8002326:	eb63 0301 	sbc.w	r3, r3, r1
 800232a:	f04f 0000 	mov.w	r0, #0
 800232e:	f04f 0100 	mov.w	r1, #0
 8002332:	00d9      	lsls	r1, r3, #3
 8002334:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002338:	00d0      	lsls	r0, r2, #3
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	1912      	adds	r2, r2, r4
 8002340:	eb45 0303 	adc.w	r3, r5, r3
 8002344:	f04f 0000 	mov.w	r0, #0
 8002348:	f04f 0100 	mov.w	r1, #0
 800234c:	0299      	lsls	r1, r3, #10
 800234e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002352:	0290      	lsls	r0, r2, #10
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4610      	mov	r0, r2
 800235a:	4619      	mov	r1, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	461a      	mov	r2, r3
 8002360:	f04f 0300 	mov.w	r3, #0
 8002364:	f7fe fc0c 	bl	8000b80 <__aeabi_uldivmod>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4613      	mov	r3, r2
 800236e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002370:	4b0a      	ldr	r3, [pc, #40]	; (800239c <HAL_RCC_GetSysClockFreq+0x160>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	0c1b      	lsrs	r3, r3, #16
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	3301      	adds	r3, #1
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	fbb2 f3f3 	udiv	r3, r2, r3
 8002388:	60bb      	str	r3, [r7, #8]
      break;
 800238a:	e002      	b.n	8002392 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800238c:	4b04      	ldr	r3, [pc, #16]	; (80023a0 <HAL_RCC_GetSysClockFreq+0x164>)
 800238e:	60bb      	str	r3, [r7, #8]
      break;
 8002390:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002392:	68bb      	ldr	r3, [r7, #8]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bdb0      	pop	{r4, r5, r7, pc}
 800239c:	40023800 	.word	0x40023800
 80023a0:	00f42400 	.word	0x00f42400
 80023a4:	017d7840 	.word	0x017d7840

080023a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e049      	b.n	800244e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d106      	bne.n	80023d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7fe ffa4 	bl	800131c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2202      	movs	r2, #2
 80023d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3304      	adds	r3, #4
 80023e4:	4619      	mov	r1, r3
 80023e6:	4610      	mov	r0, r2
 80023e8:	f000 fac6 	bl	8002978 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
	...

08002458 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b01      	cmp	r3, #1
 800246a:	d001      	beq.n	8002470 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e054      	b.n	800251a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2202      	movs	r2, #2
 8002474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68da      	ldr	r2, [r3, #12]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 0201 	orr.w	r2, r2, #1
 8002486:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a26      	ldr	r2, [pc, #152]	; (8002528 <HAL_TIM_Base_Start_IT+0xd0>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d022      	beq.n	80024d8 <HAL_TIM_Base_Start_IT+0x80>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800249a:	d01d      	beq.n	80024d8 <HAL_TIM_Base_Start_IT+0x80>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a22      	ldr	r2, [pc, #136]	; (800252c <HAL_TIM_Base_Start_IT+0xd4>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d018      	beq.n	80024d8 <HAL_TIM_Base_Start_IT+0x80>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a21      	ldr	r2, [pc, #132]	; (8002530 <HAL_TIM_Base_Start_IT+0xd8>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d013      	beq.n	80024d8 <HAL_TIM_Base_Start_IT+0x80>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a1f      	ldr	r2, [pc, #124]	; (8002534 <HAL_TIM_Base_Start_IT+0xdc>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d00e      	beq.n	80024d8 <HAL_TIM_Base_Start_IT+0x80>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a1e      	ldr	r2, [pc, #120]	; (8002538 <HAL_TIM_Base_Start_IT+0xe0>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d009      	beq.n	80024d8 <HAL_TIM_Base_Start_IT+0x80>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a1c      	ldr	r2, [pc, #112]	; (800253c <HAL_TIM_Base_Start_IT+0xe4>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d004      	beq.n	80024d8 <HAL_TIM_Base_Start_IT+0x80>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a1b      	ldr	r2, [pc, #108]	; (8002540 <HAL_TIM_Base_Start_IT+0xe8>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d115      	bne.n	8002504 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	4b19      	ldr	r3, [pc, #100]	; (8002544 <HAL_TIM_Base_Start_IT+0xec>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2b06      	cmp	r3, #6
 80024e8:	d015      	beq.n	8002516 <HAL_TIM_Base_Start_IT+0xbe>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f0:	d011      	beq.n	8002516 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 0201 	orr.w	r2, r2, #1
 8002500:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002502:	e008      	b.n	8002516 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0201 	orr.w	r2, r2, #1
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	e000      	b.n	8002518 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002516:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	40010000 	.word	0x40010000
 800252c:	40000400 	.word	0x40000400
 8002530:	40000800 	.word	0x40000800
 8002534:	40000c00 	.word	0x40000c00
 8002538:	40010400 	.word	0x40010400
 800253c:	40014000 	.word	0x40014000
 8002540:	40001800 	.word	0x40001800
 8002544:	00010007 	.word	0x00010007

08002548 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b02      	cmp	r3, #2
 800255c:	d122      	bne.n	80025a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b02      	cmp	r3, #2
 800256a:	d11b      	bne.n	80025a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f06f 0202 	mvn.w	r2, #2
 8002574:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f9d6 	bl	800293c <HAL_TIM_IC_CaptureCallback>
 8002590:	e005      	b.n	800259e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f9c8 	bl	8002928 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 f9d9 	bl	8002950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d122      	bne.n	80025f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	2b04      	cmp	r3, #4
 80025be:	d11b      	bne.n	80025f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f06f 0204 	mvn.w	r2, #4
 80025c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2202      	movs	r2, #2
 80025ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f9ac 	bl	800293c <HAL_TIM_IC_CaptureCallback>
 80025e4:	e005      	b.n	80025f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f99e 	bl	8002928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 f9af 	bl	8002950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	2b08      	cmp	r3, #8
 8002604:	d122      	bne.n	800264c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	2b08      	cmp	r3, #8
 8002612:	d11b      	bne.n	800264c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f06f 0208 	mvn.w	r2, #8
 800261c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2204      	movs	r2, #4
 8002622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	f003 0303 	and.w	r3, r3, #3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f982 	bl	800293c <HAL_TIM_IC_CaptureCallback>
 8002638:	e005      	b.n	8002646 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f974 	bl	8002928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 f985 	bl	8002950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	f003 0310 	and.w	r3, r3, #16
 8002656:	2b10      	cmp	r3, #16
 8002658:	d122      	bne.n	80026a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f003 0310 	and.w	r3, r3, #16
 8002664:	2b10      	cmp	r3, #16
 8002666:	d11b      	bne.n	80026a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f06f 0210 	mvn.w	r2, #16
 8002670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2208      	movs	r2, #8
 8002676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f958 	bl	800293c <HAL_TIM_IC_CaptureCallback>
 800268c:	e005      	b.n	800269a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f94a 	bl	8002928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 f95b 	bl	8002950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d10e      	bne.n	80026cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d107      	bne.n	80026cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f06f 0201 	mvn.w	r2, #1
 80026c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f924 	bl	8002914 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d6:	2b80      	cmp	r3, #128	; 0x80
 80026d8:	d10e      	bne.n	80026f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e4:	2b80      	cmp	r3, #128	; 0x80
 80026e6:	d107      	bne.n	80026f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 fb12 	bl	8002d1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002706:	d10e      	bne.n	8002726 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002712:	2b80      	cmp	r3, #128	; 0x80
 8002714:	d107      	bne.n	8002726 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800271e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 fb05 	bl	8002d30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002730:	2b40      	cmp	r3, #64	; 0x40
 8002732:	d10e      	bne.n	8002752 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273e:	2b40      	cmp	r3, #64	; 0x40
 8002740:	d107      	bne.n	8002752 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800274a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 f909 	bl	8002964 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	f003 0320 	and.w	r3, r3, #32
 800275c:	2b20      	cmp	r3, #32
 800275e:	d10e      	bne.n	800277e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	f003 0320 	and.w	r3, r3, #32
 800276a:	2b20      	cmp	r3, #32
 800276c:	d107      	bne.n	800277e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f06f 0220 	mvn.w	r2, #32
 8002776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 fac5 	bl	8002d08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
	...

08002788 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002798:	2b01      	cmp	r3, #1
 800279a:	d101      	bne.n	80027a0 <HAL_TIM_ConfigClockSource+0x18>
 800279c:	2302      	movs	r3, #2
 800279e:	e0b3      	b.n	8002908 <HAL_TIM_ConfigClockSource+0x180>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2202      	movs	r2, #2
 80027ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	4b55      	ldr	r3, [pc, #340]	; (8002910 <HAL_TIM_ConfigClockSource+0x188>)
 80027bc:	4013      	ands	r3, r2
 80027be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027d8:	d03e      	beq.n	8002858 <HAL_TIM_ConfigClockSource+0xd0>
 80027da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027de:	f200 8087 	bhi.w	80028f0 <HAL_TIM_ConfigClockSource+0x168>
 80027e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027e6:	f000 8085 	beq.w	80028f4 <HAL_TIM_ConfigClockSource+0x16c>
 80027ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ee:	d87f      	bhi.n	80028f0 <HAL_TIM_ConfigClockSource+0x168>
 80027f0:	2b70      	cmp	r3, #112	; 0x70
 80027f2:	d01a      	beq.n	800282a <HAL_TIM_ConfigClockSource+0xa2>
 80027f4:	2b70      	cmp	r3, #112	; 0x70
 80027f6:	d87b      	bhi.n	80028f0 <HAL_TIM_ConfigClockSource+0x168>
 80027f8:	2b60      	cmp	r3, #96	; 0x60
 80027fa:	d050      	beq.n	800289e <HAL_TIM_ConfigClockSource+0x116>
 80027fc:	2b60      	cmp	r3, #96	; 0x60
 80027fe:	d877      	bhi.n	80028f0 <HAL_TIM_ConfigClockSource+0x168>
 8002800:	2b50      	cmp	r3, #80	; 0x50
 8002802:	d03c      	beq.n	800287e <HAL_TIM_ConfigClockSource+0xf6>
 8002804:	2b50      	cmp	r3, #80	; 0x50
 8002806:	d873      	bhi.n	80028f0 <HAL_TIM_ConfigClockSource+0x168>
 8002808:	2b40      	cmp	r3, #64	; 0x40
 800280a:	d058      	beq.n	80028be <HAL_TIM_ConfigClockSource+0x136>
 800280c:	2b40      	cmp	r3, #64	; 0x40
 800280e:	d86f      	bhi.n	80028f0 <HAL_TIM_ConfigClockSource+0x168>
 8002810:	2b30      	cmp	r3, #48	; 0x30
 8002812:	d064      	beq.n	80028de <HAL_TIM_ConfigClockSource+0x156>
 8002814:	2b30      	cmp	r3, #48	; 0x30
 8002816:	d86b      	bhi.n	80028f0 <HAL_TIM_ConfigClockSource+0x168>
 8002818:	2b20      	cmp	r3, #32
 800281a:	d060      	beq.n	80028de <HAL_TIM_ConfigClockSource+0x156>
 800281c:	2b20      	cmp	r3, #32
 800281e:	d867      	bhi.n	80028f0 <HAL_TIM_ConfigClockSource+0x168>
 8002820:	2b00      	cmp	r3, #0
 8002822:	d05c      	beq.n	80028de <HAL_TIM_ConfigClockSource+0x156>
 8002824:	2b10      	cmp	r3, #16
 8002826:	d05a      	beq.n	80028de <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002828:	e062      	b.n	80028f0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6818      	ldr	r0, [r3, #0]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	6899      	ldr	r1, [r3, #8]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	f000 f9b7 	bl	8002bac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800284c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	609a      	str	r2, [r3, #8]
      break;
 8002856:	e04e      	b.n	80028f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6818      	ldr	r0, [r3, #0]
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	6899      	ldr	r1, [r3, #8]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	f000 f9a0 	bl	8002bac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689a      	ldr	r2, [r3, #8]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800287a:	609a      	str	r2, [r3, #8]
      break;
 800287c:	e03b      	b.n	80028f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6818      	ldr	r0, [r3, #0]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	6859      	ldr	r1, [r3, #4]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	461a      	mov	r2, r3
 800288c:	f000 f914 	bl	8002ab8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2150      	movs	r1, #80	; 0x50
 8002896:	4618      	mov	r0, r3
 8002898:	f000 f96d 	bl	8002b76 <TIM_ITRx_SetConfig>
      break;
 800289c:	e02b      	b.n	80028f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6818      	ldr	r0, [r3, #0]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	6859      	ldr	r1, [r3, #4]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	461a      	mov	r2, r3
 80028ac:	f000 f933 	bl	8002b16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2160      	movs	r1, #96	; 0x60
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 f95d 	bl	8002b76 <TIM_ITRx_SetConfig>
      break;
 80028bc:	e01b      	b.n	80028f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6818      	ldr	r0, [r3, #0]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	6859      	ldr	r1, [r3, #4]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	461a      	mov	r2, r3
 80028cc:	f000 f8f4 	bl	8002ab8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2140      	movs	r1, #64	; 0x40
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 f94d 	bl	8002b76 <TIM_ITRx_SetConfig>
      break;
 80028dc:	e00b      	b.n	80028f6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4619      	mov	r1, r3
 80028e8:	4610      	mov	r0, r2
 80028ea:	f000 f944 	bl	8002b76 <TIM_ITRx_SetConfig>
        break;
 80028ee:	e002      	b.n	80028f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80028f0:	bf00      	nop
 80028f2:	e000      	b.n	80028f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80028f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	fffeff88 	.word	0xfffeff88

08002914 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a40      	ldr	r2, [pc, #256]	; (8002a8c <TIM_Base_SetConfig+0x114>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d013      	beq.n	80029b8 <TIM_Base_SetConfig+0x40>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002996:	d00f      	beq.n	80029b8 <TIM_Base_SetConfig+0x40>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a3d      	ldr	r2, [pc, #244]	; (8002a90 <TIM_Base_SetConfig+0x118>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d00b      	beq.n	80029b8 <TIM_Base_SetConfig+0x40>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a3c      	ldr	r2, [pc, #240]	; (8002a94 <TIM_Base_SetConfig+0x11c>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d007      	beq.n	80029b8 <TIM_Base_SetConfig+0x40>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a3b      	ldr	r2, [pc, #236]	; (8002a98 <TIM_Base_SetConfig+0x120>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d003      	beq.n	80029b8 <TIM_Base_SetConfig+0x40>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a3a      	ldr	r2, [pc, #232]	; (8002a9c <TIM_Base_SetConfig+0x124>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d108      	bne.n	80029ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a2f      	ldr	r2, [pc, #188]	; (8002a8c <TIM_Base_SetConfig+0x114>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d02b      	beq.n	8002a2a <TIM_Base_SetConfig+0xb2>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d8:	d027      	beq.n	8002a2a <TIM_Base_SetConfig+0xb2>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a2c      	ldr	r2, [pc, #176]	; (8002a90 <TIM_Base_SetConfig+0x118>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d023      	beq.n	8002a2a <TIM_Base_SetConfig+0xb2>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a2b      	ldr	r2, [pc, #172]	; (8002a94 <TIM_Base_SetConfig+0x11c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d01f      	beq.n	8002a2a <TIM_Base_SetConfig+0xb2>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a2a      	ldr	r2, [pc, #168]	; (8002a98 <TIM_Base_SetConfig+0x120>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d01b      	beq.n	8002a2a <TIM_Base_SetConfig+0xb2>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a29      	ldr	r2, [pc, #164]	; (8002a9c <TIM_Base_SetConfig+0x124>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d017      	beq.n	8002a2a <TIM_Base_SetConfig+0xb2>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a28      	ldr	r2, [pc, #160]	; (8002aa0 <TIM_Base_SetConfig+0x128>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d013      	beq.n	8002a2a <TIM_Base_SetConfig+0xb2>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a27      	ldr	r2, [pc, #156]	; (8002aa4 <TIM_Base_SetConfig+0x12c>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d00f      	beq.n	8002a2a <TIM_Base_SetConfig+0xb2>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a26      	ldr	r2, [pc, #152]	; (8002aa8 <TIM_Base_SetConfig+0x130>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d00b      	beq.n	8002a2a <TIM_Base_SetConfig+0xb2>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a25      	ldr	r2, [pc, #148]	; (8002aac <TIM_Base_SetConfig+0x134>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d007      	beq.n	8002a2a <TIM_Base_SetConfig+0xb2>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a24      	ldr	r2, [pc, #144]	; (8002ab0 <TIM_Base_SetConfig+0x138>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d003      	beq.n	8002a2a <TIM_Base_SetConfig+0xb2>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a23      	ldr	r2, [pc, #140]	; (8002ab4 <TIM_Base_SetConfig+0x13c>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d108      	bne.n	8002a3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a0a      	ldr	r2, [pc, #40]	; (8002a8c <TIM_Base_SetConfig+0x114>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d003      	beq.n	8002a70 <TIM_Base_SetConfig+0xf8>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a0c      	ldr	r2, [pc, #48]	; (8002a9c <TIM_Base_SetConfig+0x124>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d103      	bne.n	8002a78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	691a      	ldr	r2, [r3, #16]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	615a      	str	r2, [r3, #20]
}
 8002a7e:	bf00      	nop
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	40010000 	.word	0x40010000
 8002a90:	40000400 	.word	0x40000400
 8002a94:	40000800 	.word	0x40000800
 8002a98:	40000c00 	.word	0x40000c00
 8002a9c:	40010400 	.word	0x40010400
 8002aa0:	40014000 	.word	0x40014000
 8002aa4:	40014400 	.word	0x40014400
 8002aa8:	40014800 	.word	0x40014800
 8002aac:	40001800 	.word	0x40001800
 8002ab0:	40001c00 	.word	0x40001c00
 8002ab4:	40002000 	.word	0x40002000

08002ab8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b087      	sub	sp, #28
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	f023 0201 	bic.w	r2, r3, #1
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ae2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	011b      	lsls	r3, r3, #4
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f023 030a 	bic.w	r3, r3, #10
 8002af4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	621a      	str	r2, [r3, #32]
}
 8002b0a:	bf00      	nop
 8002b0c:	371c      	adds	r7, #28
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b087      	sub	sp, #28
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	60f8      	str	r0, [r7, #12]
 8002b1e:	60b9      	str	r1, [r7, #8]
 8002b20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	f023 0210 	bic.w	r2, r3, #16
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	031b      	lsls	r3, r3, #12
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	011b      	lsls	r3, r3, #4
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	621a      	str	r2, [r3, #32]
}
 8002b6a:	bf00      	nop
 8002b6c:	371c      	adds	r7, #28
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b085      	sub	sp, #20
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
 8002b7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	f043 0307 	orr.w	r3, r3, #7
 8002b98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	609a      	str	r2, [r3, #8]
}
 8002ba0:	bf00      	nop
 8002ba2:	3714      	adds	r7, #20
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b087      	sub	sp, #28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
 8002bb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	021a      	lsls	r2, r3, #8
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	609a      	str	r2, [r3, #8]
}
 8002be0:	bf00      	nop
 8002be2:	371c      	adds	r7, #28
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d101      	bne.n	8002c04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c00:	2302      	movs	r3, #2
 8002c02:	e06d      	b.n	8002ce0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a30      	ldr	r2, [pc, #192]	; (8002cec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d004      	beq.n	8002c38 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a2f      	ldr	r2, [pc, #188]	; (8002cf0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d108      	bne.n	8002c4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002c3e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c50:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a20      	ldr	r2, [pc, #128]	; (8002cec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d022      	beq.n	8002cb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c76:	d01d      	beq.n	8002cb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a1d      	ldr	r2, [pc, #116]	; (8002cf4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d018      	beq.n	8002cb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a1c      	ldr	r2, [pc, #112]	; (8002cf8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d013      	beq.n	8002cb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a1a      	ldr	r2, [pc, #104]	; (8002cfc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d00e      	beq.n	8002cb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a15      	ldr	r2, [pc, #84]	; (8002cf0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d009      	beq.n	8002cb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a16      	ldr	r2, [pc, #88]	; (8002d00 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d004      	beq.n	8002cb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a15      	ldr	r2, [pc, #84]	; (8002d04 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d10c      	bne.n	8002cce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	68ba      	ldr	r2, [r7, #8]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	40010000 	.word	0x40010000
 8002cf0:	40010400 	.word	0x40010400
 8002cf4:	40000400 	.word	0x40000400
 8002cf8:	40000800 	.word	0x40000800
 8002cfc:	40000c00 	.word	0x40000c00
 8002d00:	40014000 	.word	0x40014000
 8002d04:	40001800 	.word	0x40001800

08002d08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <sqrt>:
 8002d44:	b538      	push	{r3, r4, r5, lr}
 8002d46:	ed2d 8b02 	vpush	{d8}
 8002d4a:	ec55 4b10 	vmov	r4, r5, d0
 8002d4e:	f000 f82d 	bl	8002dac <__ieee754_sqrt>
 8002d52:	4b15      	ldr	r3, [pc, #84]	; (8002da8 <sqrt+0x64>)
 8002d54:	eeb0 8a40 	vmov.f32	s16, s0
 8002d58:	eef0 8a60 	vmov.f32	s17, s1
 8002d5c:	f993 3000 	ldrsb.w	r3, [r3]
 8002d60:	3301      	adds	r3, #1
 8002d62:	d019      	beq.n	8002d98 <sqrt+0x54>
 8002d64:	4622      	mov	r2, r4
 8002d66:	462b      	mov	r3, r5
 8002d68:	4620      	mov	r0, r4
 8002d6a:	4629      	mov	r1, r5
 8002d6c:	f7fd fea2 	bl	8000ab4 <__aeabi_dcmpun>
 8002d70:	b990      	cbnz	r0, 8002d98 <sqrt+0x54>
 8002d72:	2200      	movs	r2, #0
 8002d74:	2300      	movs	r3, #0
 8002d76:	4620      	mov	r0, r4
 8002d78:	4629      	mov	r1, r5
 8002d7a:	f7fd fe73 	bl	8000a64 <__aeabi_dcmplt>
 8002d7e:	b158      	cbz	r0, 8002d98 <sqrt+0x54>
 8002d80:	f000 f8c8 	bl	8002f14 <__errno>
 8002d84:	2321      	movs	r3, #33	; 0x21
 8002d86:	6003      	str	r3, [r0, #0]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	4619      	mov	r1, r3
 8002d90:	f7fd fd20 	bl	80007d4 <__aeabi_ddiv>
 8002d94:	ec41 0b18 	vmov	d8, r0, r1
 8002d98:	eeb0 0a48 	vmov.f32	s0, s16
 8002d9c:	eef0 0a68 	vmov.f32	s1, s17
 8002da0:	ecbd 8b02 	vpop	{d8}
 8002da4:	bd38      	pop	{r3, r4, r5, pc}
 8002da6:	bf00      	nop
 8002da8:	20000009 	.word	0x20000009

08002dac <__ieee754_sqrt>:
 8002dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002db0:	ec55 4b10 	vmov	r4, r5, d0
 8002db4:	4e56      	ldr	r6, [pc, #344]	; (8002f10 <__ieee754_sqrt+0x164>)
 8002db6:	43ae      	bics	r6, r5
 8002db8:	ee10 0a10 	vmov	r0, s0
 8002dbc:	ee10 3a10 	vmov	r3, s0
 8002dc0:	4629      	mov	r1, r5
 8002dc2:	462a      	mov	r2, r5
 8002dc4:	d110      	bne.n	8002de8 <__ieee754_sqrt+0x3c>
 8002dc6:	ee10 2a10 	vmov	r2, s0
 8002dca:	462b      	mov	r3, r5
 8002dcc:	f7fd fbd8 	bl	8000580 <__aeabi_dmul>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4620      	mov	r0, r4
 8002dd6:	4629      	mov	r1, r5
 8002dd8:	f7fd fa1c 	bl	8000214 <__adddf3>
 8002ddc:	4604      	mov	r4, r0
 8002dde:	460d      	mov	r5, r1
 8002de0:	ec45 4b10 	vmov	d0, r4, r5
 8002de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002de8:	2d00      	cmp	r5, #0
 8002dea:	dc10      	bgt.n	8002e0e <__ieee754_sqrt+0x62>
 8002dec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8002df0:	4330      	orrs	r0, r6
 8002df2:	d0f5      	beq.n	8002de0 <__ieee754_sqrt+0x34>
 8002df4:	b15d      	cbz	r5, 8002e0e <__ieee754_sqrt+0x62>
 8002df6:	ee10 2a10 	vmov	r2, s0
 8002dfa:	462b      	mov	r3, r5
 8002dfc:	ee10 0a10 	vmov	r0, s0
 8002e00:	f7fd fa06 	bl	8000210 <__aeabi_dsub>
 8002e04:	4602      	mov	r2, r0
 8002e06:	460b      	mov	r3, r1
 8002e08:	f7fd fce4 	bl	80007d4 <__aeabi_ddiv>
 8002e0c:	e7e6      	b.n	8002ddc <__ieee754_sqrt+0x30>
 8002e0e:	1509      	asrs	r1, r1, #20
 8002e10:	d076      	beq.n	8002f00 <__ieee754_sqrt+0x154>
 8002e12:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8002e16:	07ce      	lsls	r6, r1, #31
 8002e18:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8002e1c:	bf5e      	ittt	pl
 8002e1e:	0fda      	lsrpl	r2, r3, #31
 8002e20:	005b      	lslpl	r3, r3, #1
 8002e22:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8002e26:	0fda      	lsrs	r2, r3, #31
 8002e28:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8002e2c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8002e30:	2000      	movs	r0, #0
 8002e32:	106d      	asrs	r5, r5, #1
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	f04f 0e16 	mov.w	lr, #22
 8002e3a:	4684      	mov	ip, r0
 8002e3c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002e40:	eb0c 0401 	add.w	r4, ip, r1
 8002e44:	4294      	cmp	r4, r2
 8002e46:	bfde      	ittt	le
 8002e48:	1b12      	suble	r2, r2, r4
 8002e4a:	eb04 0c01 	addle.w	ip, r4, r1
 8002e4e:	1840      	addle	r0, r0, r1
 8002e50:	0052      	lsls	r2, r2, #1
 8002e52:	f1be 0e01 	subs.w	lr, lr, #1
 8002e56:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8002e5a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8002e5e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002e62:	d1ed      	bne.n	8002e40 <__ieee754_sqrt+0x94>
 8002e64:	4671      	mov	r1, lr
 8002e66:	2720      	movs	r7, #32
 8002e68:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8002e6c:	4562      	cmp	r2, ip
 8002e6e:	eb04 060e 	add.w	r6, r4, lr
 8002e72:	dc02      	bgt.n	8002e7a <__ieee754_sqrt+0xce>
 8002e74:	d113      	bne.n	8002e9e <__ieee754_sqrt+0xf2>
 8002e76:	429e      	cmp	r6, r3
 8002e78:	d811      	bhi.n	8002e9e <__ieee754_sqrt+0xf2>
 8002e7a:	2e00      	cmp	r6, #0
 8002e7c:	eb06 0e04 	add.w	lr, r6, r4
 8002e80:	da43      	bge.n	8002f0a <__ieee754_sqrt+0x15e>
 8002e82:	f1be 0f00 	cmp.w	lr, #0
 8002e86:	db40      	blt.n	8002f0a <__ieee754_sqrt+0x15e>
 8002e88:	f10c 0801 	add.w	r8, ip, #1
 8002e8c:	eba2 020c 	sub.w	r2, r2, ip
 8002e90:	429e      	cmp	r6, r3
 8002e92:	bf88      	it	hi
 8002e94:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8002e98:	1b9b      	subs	r3, r3, r6
 8002e9a:	4421      	add	r1, r4
 8002e9c:	46c4      	mov	ip, r8
 8002e9e:	0052      	lsls	r2, r2, #1
 8002ea0:	3f01      	subs	r7, #1
 8002ea2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8002ea6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8002eaa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002eae:	d1dd      	bne.n	8002e6c <__ieee754_sqrt+0xc0>
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	d006      	beq.n	8002ec2 <__ieee754_sqrt+0x116>
 8002eb4:	1c4c      	adds	r4, r1, #1
 8002eb6:	bf13      	iteet	ne
 8002eb8:	3101      	addne	r1, #1
 8002eba:	3001      	addeq	r0, #1
 8002ebc:	4639      	moveq	r1, r7
 8002ebe:	f021 0101 	bicne.w	r1, r1, #1
 8002ec2:	1043      	asrs	r3, r0, #1
 8002ec4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8002ec8:	0849      	lsrs	r1, r1, #1
 8002eca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8002ece:	07c2      	lsls	r2, r0, #31
 8002ed0:	bf48      	it	mi
 8002ed2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8002ed6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8002eda:	460c      	mov	r4, r1
 8002edc:	463d      	mov	r5, r7
 8002ede:	e77f      	b.n	8002de0 <__ieee754_sqrt+0x34>
 8002ee0:	0ada      	lsrs	r2, r3, #11
 8002ee2:	3815      	subs	r0, #21
 8002ee4:	055b      	lsls	r3, r3, #21
 8002ee6:	2a00      	cmp	r2, #0
 8002ee8:	d0fa      	beq.n	8002ee0 <__ieee754_sqrt+0x134>
 8002eea:	02d7      	lsls	r7, r2, #11
 8002eec:	d50a      	bpl.n	8002f04 <__ieee754_sqrt+0x158>
 8002eee:	f1c1 0420 	rsb	r4, r1, #32
 8002ef2:	fa23 f404 	lsr.w	r4, r3, r4
 8002ef6:	1e4d      	subs	r5, r1, #1
 8002ef8:	408b      	lsls	r3, r1
 8002efa:	4322      	orrs	r2, r4
 8002efc:	1b41      	subs	r1, r0, r5
 8002efe:	e788      	b.n	8002e12 <__ieee754_sqrt+0x66>
 8002f00:	4608      	mov	r0, r1
 8002f02:	e7f0      	b.n	8002ee6 <__ieee754_sqrt+0x13a>
 8002f04:	0052      	lsls	r2, r2, #1
 8002f06:	3101      	adds	r1, #1
 8002f08:	e7ef      	b.n	8002eea <__ieee754_sqrt+0x13e>
 8002f0a:	46e0      	mov	r8, ip
 8002f0c:	e7be      	b.n	8002e8c <__ieee754_sqrt+0xe0>
 8002f0e:	bf00      	nop
 8002f10:	7ff00000 	.word	0x7ff00000

08002f14 <__errno>:
 8002f14:	4b01      	ldr	r3, [pc, #4]	; (8002f1c <__errno+0x8>)
 8002f16:	6818      	ldr	r0, [r3, #0]
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	2000000c 	.word	0x2000000c

08002f20 <__libc_init_array>:
 8002f20:	b570      	push	{r4, r5, r6, lr}
 8002f22:	4d0d      	ldr	r5, [pc, #52]	; (8002f58 <__libc_init_array+0x38>)
 8002f24:	4c0d      	ldr	r4, [pc, #52]	; (8002f5c <__libc_init_array+0x3c>)
 8002f26:	1b64      	subs	r4, r4, r5
 8002f28:	10a4      	asrs	r4, r4, #2
 8002f2a:	2600      	movs	r6, #0
 8002f2c:	42a6      	cmp	r6, r4
 8002f2e:	d109      	bne.n	8002f44 <__libc_init_array+0x24>
 8002f30:	4d0b      	ldr	r5, [pc, #44]	; (8002f60 <__libc_init_array+0x40>)
 8002f32:	4c0c      	ldr	r4, [pc, #48]	; (8002f64 <__libc_init_array+0x44>)
 8002f34:	f000 f820 	bl	8002f78 <_init>
 8002f38:	1b64      	subs	r4, r4, r5
 8002f3a:	10a4      	asrs	r4, r4, #2
 8002f3c:	2600      	movs	r6, #0
 8002f3e:	42a6      	cmp	r6, r4
 8002f40:	d105      	bne.n	8002f4e <__libc_init_array+0x2e>
 8002f42:	bd70      	pop	{r4, r5, r6, pc}
 8002f44:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f48:	4798      	blx	r3
 8002f4a:	3601      	adds	r6, #1
 8002f4c:	e7ee      	b.n	8002f2c <__libc_init_array+0xc>
 8002f4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f52:	4798      	blx	r3
 8002f54:	3601      	adds	r6, #1
 8002f56:	e7f2      	b.n	8002f3e <__libc_init_array+0x1e>
 8002f58:	08002fa8 	.word	0x08002fa8
 8002f5c:	08002fa8 	.word	0x08002fa8
 8002f60:	08002fa8 	.word	0x08002fa8
 8002f64:	08002fac 	.word	0x08002fac

08002f68 <memset>:
 8002f68:	4402      	add	r2, r0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d100      	bne.n	8002f72 <memset+0xa>
 8002f70:	4770      	bx	lr
 8002f72:	f803 1b01 	strb.w	r1, [r3], #1
 8002f76:	e7f9      	b.n	8002f6c <memset+0x4>

08002f78 <_init>:
 8002f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f7a:	bf00      	nop
 8002f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f7e:	bc08      	pop	{r3}
 8002f80:	469e      	mov	lr, r3
 8002f82:	4770      	bx	lr

08002f84 <_fini>:
 8002f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f86:	bf00      	nop
 8002f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f8a:	bc08      	pop	{r3}
 8002f8c:	469e      	mov	lr, r3
 8002f8e:	4770      	bx	lr
