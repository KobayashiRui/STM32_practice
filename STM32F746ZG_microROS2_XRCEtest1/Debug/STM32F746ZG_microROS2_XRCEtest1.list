
STM32F746ZG_microROS2_XRCEtest1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024fe4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004b30  080251b8  080251b8  000351b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029ce8  08029ce8  00040124  2**0
                  CONTENTS
  4 .ARM          00000008  08029ce8  08029ce8  00039ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029cf0  08029cf0  00040124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08029cf0  08029cf0  00039cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08029cf8  08029cf8  00039cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000124  20000000  08029cfc  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014770  20000128  08029e20  00040128  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20014898  08029e20  00044898  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040124  2**0
                  CONTENTS, READONLY
 12 .debug_info   00040fdd  00000000  00000000  00040154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009294  00000000  00000000  00081131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002c40  00000000  00000000  0008a3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002ad8  00000000  00000000  0008d008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e8e  00000000  00000000  0008fae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00047625  00000000  00000000  000a896e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00123c7d  00000000  00000000  000eff93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000a9  00000000  00000000  00213c10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c544  00000000  00000000  00213cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000128 	.word	0x20000128
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0802519c 	.word	0x0802519c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000012c 	.word	0x2000012c
 800020c:	0802519c 	.word	0x0802519c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_ldivmod>:
 80002e0:	b97b      	cbnz	r3, 8000302 <__aeabi_ldivmod+0x22>
 80002e2:	b972      	cbnz	r2, 8000302 <__aeabi_ldivmod+0x22>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bfbe      	ittt	lt
 80002e8:	2000      	movlt	r0, #0
 80002ea:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002ee:	e006      	blt.n	80002fe <__aeabi_ldivmod+0x1e>
 80002f0:	bf08      	it	eq
 80002f2:	2800      	cmpeq	r0, #0
 80002f4:	bf1c      	itt	ne
 80002f6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002fa:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002fe:	f000 b9bf 	b.w	8000680 <__aeabi_idiv0>
 8000302:	f1ad 0c08 	sub.w	ip, sp, #8
 8000306:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030a:	2900      	cmp	r1, #0
 800030c:	db09      	blt.n	8000322 <__aeabi_ldivmod+0x42>
 800030e:	2b00      	cmp	r3, #0
 8000310:	db1a      	blt.n	8000348 <__aeabi_ldivmod+0x68>
 8000312:	f000 f84d 	bl	80003b0 <__udivmoddi4>
 8000316:	f8dd e004 	ldr.w	lr, [sp, #4]
 800031a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031e:	b004      	add	sp, #16
 8000320:	4770      	bx	lr
 8000322:	4240      	negs	r0, r0
 8000324:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000328:	2b00      	cmp	r3, #0
 800032a:	db1b      	blt.n	8000364 <__aeabi_ldivmod+0x84>
 800032c:	f000 f840 	bl	80003b0 <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4240      	negs	r0, r0
 800033c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000340:	4252      	negs	r2, r2
 8000342:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000346:	4770      	bx	lr
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	f000 f82f 	bl	80003b0 <__udivmoddi4>
 8000352:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000356:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035a:	b004      	add	sp, #16
 800035c:	4240      	negs	r0, r0
 800035e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000362:	4770      	bx	lr
 8000364:	4252      	negs	r2, r2
 8000366:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036a:	f000 f821 	bl	80003b0 <__udivmoddi4>
 800036e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000372:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000376:	b004      	add	sp, #16
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	4770      	bx	lr

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800068c:	2300      	movs	r3, #0
 800068e:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8000690:	f007 fee2 	bl	8008458 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000694:	4b40      	ldr	r3, [pc, #256]	; (8000798 <pvPortMallocMicroROS+0x114>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d101      	bne.n	80006a0 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 800069c:	f000 f930 	bl	8000900 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80006a0:	4b3e      	ldr	r3, [pc, #248]	; (800079c <pvPortMallocMicroROS+0x118>)
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	4013      	ands	r3, r2
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d16d      	bne.n	8000788 <pvPortMallocMicroROS+0x104>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d00d      	beq.n	80006ce <pvPortMallocMicroROS+0x4a>
			{
				xWantedSize += xHeapStructSize;
 80006b2:	2208      	movs	r2, #8
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4413      	add	r3, r2
 80006b8:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	f003 0307 	and.w	r3, r3, #7
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d004      	beq.n	80006ce <pvPortMallocMicroROS+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	f023 0307 	bic.w	r3, r3, #7
 80006ca:	3308      	adds	r3, #8
 80006cc:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d059      	beq.n	8000788 <pvPortMallocMicroROS+0x104>
 80006d4:	4b32      	ldr	r3, [pc, #200]	; (80007a0 <pvPortMallocMicroROS+0x11c>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	429a      	cmp	r2, r3
 80006dc:	d854      	bhi.n	8000788 <pvPortMallocMicroROS+0x104>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80006de:	4b31      	ldr	r3, [pc, #196]	; (80007a4 <pvPortMallocMicroROS+0x120>)
 80006e0:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80006e2:	4b30      	ldr	r3, [pc, #192]	; (80007a4 <pvPortMallocMicroROS+0x120>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80006e8:	e004      	b.n	80006f4 <pvPortMallocMicroROS+0x70>
				{
					pxPreviousBlock = pxBlock;
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	685b      	ldr	r3, [r3, #4]
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	429a      	cmp	r2, r3
 80006fc:	d903      	bls.n	8000706 <pvPortMallocMicroROS+0x82>
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d1f1      	bne.n	80006ea <pvPortMallocMicroROS+0x66>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000706:	4b24      	ldr	r3, [pc, #144]	; (8000798 <pvPortMallocMicroROS+0x114>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	697a      	ldr	r2, [r7, #20]
 800070c:	429a      	cmp	r2, r3
 800070e:	d03b      	beq.n	8000788 <pvPortMallocMicroROS+0x104>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2208      	movs	r2, #8
 8000716:	4413      	add	r3, r2
 8000718:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	693b      	ldr	r3, [r7, #16]
 8000720:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000722:	697b      	ldr	r3, [r7, #20]
 8000724:	685a      	ldr	r2, [r3, #4]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	1ad2      	subs	r2, r2, r3
 800072a:	2308      	movs	r3, #8
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	429a      	cmp	r2, r3
 8000730:	d90f      	bls.n	8000752 <pvPortMallocMicroROS+0xce>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000732:	697a      	ldr	r2, [r7, #20]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4413      	add	r3, r2
 8000738:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	685a      	ldr	r2, [r3, #4]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	1ad2      	subs	r2, r2, r3
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800074c:	68b8      	ldr	r0, [r7, #8]
 800074e:	f000 f939 	bl	80009c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <pvPortMallocMicroROS+0x11c>)
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	1ad3      	subs	r3, r2, r3
 800075c:	4a10      	ldr	r2, [pc, #64]	; (80007a0 <pvPortMallocMicroROS+0x11c>)
 800075e:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <pvPortMallocMicroROS+0x11c>)
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <pvPortMallocMicroROS+0x124>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	429a      	cmp	r2, r3
 800076a:	d203      	bcs.n	8000774 <pvPortMallocMicroROS+0xf0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <pvPortMallocMicroROS+0x11c>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a0d      	ldr	r2, [pc, #52]	; (80007a8 <pvPortMallocMicroROS+0x124>)
 8000772:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	685a      	ldr	r2, [r3, #4]
 8000778:	4b08      	ldr	r3, [pc, #32]	; (800079c <pvPortMallocMicroROS+0x118>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	431a      	orrs	r2, r3
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000788:	f007 fe74 	bl	8008474 <xTaskResumeAll>
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
 800078c:	68fb      	ldr	r3, [r7, #12]
}
 800078e:	4618      	mov	r0, r3
 8000790:	3718      	adds	r7, #24
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20003d4c 	.word	0x20003d4c
 800079c:	20003d58 	.word	0x20003d58
 80007a0:	20003d50 	.word	0x20003d50
 80007a4:	20003d44 	.word	0x20003d44
 80007a8:	20003d54 	.word	0x20003d54

080007ac <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d027      	beq.n	800080e <vPortFreeMicroROS+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80007be:	2308      	movs	r3, #8
 80007c0:	425b      	negs	r3, r3
 80007c2:	68fa      	ldr	r2, [r7, #12]
 80007c4:	4413      	add	r3, r2
 80007c6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	685a      	ldr	r2, [r3, #4]
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <vPortFreeMicroROS+0x6c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4013      	ands	r3, r2
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d019      	beq.n	800080e <vPortFreeMicroROS+0x62>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d115      	bne.n	800080e <vPortFreeMicroROS+0x62>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	685a      	ldr	r2, [r3, #4]
 80007e6:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <vPortFreeMicroROS+0x6c>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	43db      	mvns	r3, r3
 80007ec:	401a      	ands	r2, r3
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80007f2:	f007 fe31 	bl	8008458 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	685a      	ldr	r2, [r3, #4]
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <vPortFreeMicroROS+0x70>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4413      	add	r3, r2
 8000800:	4a06      	ldr	r2, [pc, #24]	; (800081c <vPortFreeMicroROS+0x70>)
 8000802:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000804:	68b8      	ldr	r0, [r7, #8]
 8000806:	f000 f8dd 	bl	80009c4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800080a:	f007 fe33 	bl	8008474 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800080e:	bf00      	nop
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20003d58 	.word	0x20003d58
 800081c:	20003d50 	.word	0x20003d50

08000820 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000820:	b480      	push	{r7}
 8000822:	b087      	sub	sp, #28
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 800082c:	2308      	movs	r3, #8
 800082e:	425b      	negs	r3, r3
 8000830:	697a      	ldr	r2, [r7, #20]
 8000832:	4413      	add	r3, r2
 8000834:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800083a:	693b      	ldr	r3, [r7, #16]
 800083c:	685a      	ldr	r2, [r3, #4]
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <getBlockSize+0x38>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	43db      	mvns	r3, r3
 8000844:	4013      	ands	r3, r2
 8000846:	60fb      	str	r3, [r7, #12]

	return count;
 8000848:	68fb      	ldr	r3, [r7, #12]
}
 800084a:	4618      	mov	r0, r3
 800084c:	371c      	adds	r7, #28
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	20003d58 	.word	0x20003d58

0800085c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000866:	f007 fdf7 	bl	8008458 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800086a:	6838      	ldr	r0, [r7, #0]
 800086c:	f7ff ff0a 	bl	8000684 <pvPortMallocMicroROS>
 8000870:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d017      	beq.n	80008a8 <pvPortReallocMicroROS+0x4c>
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d014      	beq.n	80008a8 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f7ff ffce 	bl	8000820 <getBlockSize>
 8000884:	4603      	mov	r3, r0
 8000886:	2208      	movs	r2, #8
 8000888:	1a9b      	subs	r3, r3, r2
 800088a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 800088c:	683a      	ldr	r2, [r7, #0]
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	429a      	cmp	r2, r3
 8000892:	d201      	bcs.n	8000898 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000898:	68fa      	ldr	r2, [r7, #12]
 800089a:	6879      	ldr	r1, [r7, #4]
 800089c:	68b8      	ldr	r0, [r7, #8]
 800089e:	f023 f879 	bl	8023994 <memcpy>

		vPortFreeMicroROS(pv);
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f7ff ff82 	bl	80007ac <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80008a8:	f007 fde4 	bl	8008474 <xTaskResumeAll>

	return newmem;
 80008ac:	68bb      	ldr	r3, [r7, #8]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b086      	sub	sp, #24
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
 80008be:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80008c0:	f007 fdca 	bl	8008458 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	fb02 f303 	mul.w	r3, r2, r3
 80008cc:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80008ce:	6978      	ldr	r0, [r7, #20]
 80008d0:	f7ff fed8 	bl	8000684 <pvPortMallocMicroROS>
 80008d4:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	613b      	str	r3, [r7, #16]

  	while(count--)
 80008da:	e004      	b.n	80008e6 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80008dc:	693b      	ldr	r3, [r7, #16]
 80008de:	1c5a      	adds	r2, r3, #1
 80008e0:	613a      	str	r2, [r7, #16]
 80008e2:	2200      	movs	r2, #0
 80008e4:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	1e5a      	subs	r2, r3, #1
 80008ea:	617a      	str	r2, [r7, #20]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d1f5      	bne.n	80008dc <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80008f0:	f007 fdc0 	bl	8008474 <xTaskResumeAll>
  	return mem;
 80008f4:	68fb      	ldr	r3, [r7, #12]
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3718      	adds	r7, #24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000906:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800090a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800090c:	4b27      	ldr	r3, [pc, #156]	; (80009ac <prvHeapInit+0xac>)
 800090e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	f003 0307 	and.w	r3, r3, #7
 8000916:	2b00      	cmp	r3, #0
 8000918:	d00c      	beq.n	8000934 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	3307      	adds	r3, #7
 800091e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	f023 0307 	bic.w	r3, r3, #7
 8000926:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000928:	68ba      	ldr	r2, [r7, #8]
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	4a1f      	ldr	r2, [pc, #124]	; (80009ac <prvHeapInit+0xac>)
 8000930:	4413      	add	r3, r2
 8000932:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000938:	4a1d      	ldr	r2, [pc, #116]	; (80009b0 <prvHeapInit+0xb0>)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800093e:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <prvHeapInit+0xb0>)
 8000940:	2200      	movs	r2, #0
 8000942:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	68ba      	ldr	r2, [r7, #8]
 8000948:	4413      	add	r3, r2
 800094a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800094c:	2208      	movs	r2, #8
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	1a9b      	subs	r3, r3, r2
 8000952:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	f023 0307 	bic.w	r3, r3, #7
 800095a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	4a15      	ldr	r2, [pc, #84]	; (80009b4 <prvHeapInit+0xb4>)
 8000960:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000962:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <prvHeapInit+0xb4>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2200      	movs	r2, #0
 8000968:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800096a:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <prvHeapInit+0xb4>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	68fa      	ldr	r2, [r7, #12]
 800097a:	1ad2      	subs	r2, r2, r3
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <prvHeapInit+0xb4>)
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	4a0a      	ldr	r2, [pc, #40]	; (80009b8 <prvHeapInit+0xb8>)
 800098e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	4a09      	ldr	r2, [pc, #36]	; (80009bc <prvHeapInit+0xbc>)
 8000996:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <prvHeapInit+0xc0>)
 800099a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800099e:	601a      	str	r2, [r3, #0]
}
 80009a0:	bf00      	nop
 80009a2:	3714      	adds	r7, #20
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	20000144 	.word	0x20000144
 80009b0:	20003d44 	.word	0x20003d44
 80009b4:	20003d4c 	.word	0x20003d4c
 80009b8:	20003d54 	.word	0x20003d54
 80009bc:	20003d50 	.word	0x20003d50
 80009c0:	20003d58 	.word	0x20003d58

080009c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80009cc:	4b28      	ldr	r3, [pc, #160]	; (8000a70 <prvInsertBlockIntoFreeList+0xac>)
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	e002      	b.n	80009d8 <prvInsertBlockIntoFreeList+0x14>
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	687a      	ldr	r2, [r7, #4]
 80009de:	429a      	cmp	r2, r3
 80009e0:	d8f7      	bhi.n	80009d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	68ba      	ldr	r2, [r7, #8]
 80009ec:	4413      	add	r3, r2
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d108      	bne.n	8000a06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	685a      	ldr	r2, [r3, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	441a      	add	r2, r3
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	68ba      	ldr	r2, [r7, #8]
 8000a10:	441a      	add	r2, r3
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d118      	bne.n	8000a4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <prvInsertBlockIntoFreeList+0xb0>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d00d      	beq.n	8000a42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	685a      	ldr	r2, [r3, #4]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	441a      	add	r2, r3
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	e008      	b.n	8000a54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <prvInsertBlockIntoFreeList+0xb0>)
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	e003      	b.n	8000a54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000a54:	68fa      	ldr	r2, [r7, #12]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d002      	beq.n	8000a62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	687a      	ldr	r2, [r7, #4]
 8000a60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000a62:	bf00      	nop
 8000a64:	3714      	adds	r7, #20
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	20003d44 	.word	0x20003d44
 8000a74:	20003d4c 	.word	0x20003d4c

08000a78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a7c:	f000 fe67 	bl	800174e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a80:	f000 f81a 	bl	8000ab8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a84:	f000 f8de 	bl	8000c44 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a88:	f000 f87e 	bl	8000b88 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a8c:	f000 f8ac 	bl	8000be8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a90:	f005 fd3a 	bl	8006508 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000a94:	4a05      	ldr	r2, [pc, #20]	; (8000aac <main+0x34>)
 8000a96:	2100      	movs	r1, #0
 8000a98:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <main+0x38>)
 8000a9a:	f005 fdc7 	bl	800662c <osThreadNew>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <main+0x3c>)
 8000aa2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000aa4:	f005 fd64 	bl	8006570 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <main+0x30>
 8000aaa:	bf00      	nop
 8000aac:	08029180 	.word	0x08029180
 8000ab0:	08000dad 	.word	0x08000dad
 8000ab4:	200041e4 	.word	0x200041e4

08000ab8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b094      	sub	sp, #80	; 0x50
 8000abc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000abe:	f107 0320 	add.w	r3, r7, #32
 8000ac2:	2230      	movs	r2, #48	; 0x30
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f022 ff8c 	bl	80239e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000acc:	f107 030c 	add.w	r3, r7, #12
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000adc:	f002 fbe4 	bl	80032a8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae0:	4b27      	ldr	r3, [pc, #156]	; (8000b80 <SystemClock_Config+0xc8>)
 8000ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae4:	4a26      	ldr	r2, [pc, #152]	; (8000b80 <SystemClock_Config+0xc8>)
 8000ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aea:	6413      	str	r3, [r2, #64]	; 0x40
 8000aec:	4b24      	ldr	r3, [pc, #144]	; (8000b80 <SystemClock_Config+0xc8>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000af8:	4b22      	ldr	r3, [pc, #136]	; (8000b84 <SystemClock_Config+0xcc>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b00:	4a20      	ldr	r2, [pc, #128]	; (8000b84 <SystemClock_Config+0xcc>)
 8000b02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b06:	6013      	str	r3, [r2, #0]
 8000b08:	4b1e      	ldr	r3, [pc, #120]	; (8000b84 <SystemClock_Config+0xcc>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b14:	2301      	movs	r3, #1
 8000b16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b18:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b28:	2304      	movs	r3, #4
 8000b2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000b2c:	2348      	movs	r3, #72	; 0x48
 8000b2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b30:	2302      	movs	r3, #2
 8000b32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000b34:	2303      	movs	r3, #3
 8000b36:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b38:	f107 0320 	add.w	r3, r7, #32
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f002 fbc3 	bl	80032c8 <HAL_RCC_OscConfig>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b48:	f000 fa10 	bl	8000f6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b4c:	230f      	movs	r3, #15
 8000b4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b50:	2302      	movs	r3, #2
 8000b52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b62:	f107 030c 	add.w	r3, r7, #12
 8000b66:	2102      	movs	r1, #2
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f002 fe51 	bl	8003810 <HAL_RCC_ClockConfig>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b74:	f000 f9fa 	bl	8000f6c <Error_Handler>
  }
}
 8000b78:	bf00      	nop
 8000b7a:	3750      	adds	r7, #80	; 0x50
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40007000 	.word	0x40007000

08000b88 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b8c:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <MX_USART3_UART_Init+0x58>)
 8000b8e:	4a15      	ldr	r2, [pc, #84]	; (8000be4 <MX_USART3_UART_Init+0x5c>)
 8000b90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b92:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <MX_USART3_UART_Init+0x58>)
 8000b94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9a:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <MX_USART3_UART_Init+0x58>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <MX_USART3_UART_Init+0x58>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <MX_USART3_UART_Init+0x58>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <MX_USART3_UART_Init+0x58>)
 8000bae:	220c      	movs	r2, #12
 8000bb0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <MX_USART3_UART_Init+0x58>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <MX_USART3_UART_Init+0x58>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bbe:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <MX_USART3_UART_Init+0x58>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <MX_USART3_UART_Init+0x58>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bca:	4805      	ldr	r0, [pc, #20]	; (8000be0 <MX_USART3_UART_Init+0x58>)
 8000bcc:	f003 ff48 	bl	8004a60 <HAL_UART_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000bd6:	f000 f9c9 	bl	8000f6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20003d5c 	.word	0x20003d5c
 8000be4:	40004800 	.word	0x40004800

08000be8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000bf2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bf6:	2206      	movs	r2, #6
 8000bf8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000bfa:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bfc:	2202      	movs	r2, #2
 8000bfe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c00:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c08:	2202      	movs	r2, #2
 8000c0a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c2a:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c2c:	f002 f9f3 	bl	8003016 <HAL_PCD_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c36:	f000 f999 	bl	8000f6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20003de0 	.word	0x20003de0

08000c44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08c      	sub	sp, #48	; 0x30
 8000c48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4a:	f107 031c 	add.w	r3, r7, #28
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
 8000c58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5a:	4b47      	ldr	r3, [pc, #284]	; (8000d78 <MX_GPIO_Init+0x134>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a46      	ldr	r2, [pc, #280]	; (8000d78 <MX_GPIO_Init+0x134>)
 8000c60:	f043 0304 	orr.w	r3, r3, #4
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b44      	ldr	r3, [pc, #272]	; (8000d78 <MX_GPIO_Init+0x134>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0304 	and.w	r3, r3, #4
 8000c6e:	61bb      	str	r3, [r7, #24]
 8000c70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c72:	4b41      	ldr	r3, [pc, #260]	; (8000d78 <MX_GPIO_Init+0x134>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a40      	ldr	r2, [pc, #256]	; (8000d78 <MX_GPIO_Init+0x134>)
 8000c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b3e      	ldr	r3, [pc, #248]	; (8000d78 <MX_GPIO_Init+0x134>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	4b3b      	ldr	r3, [pc, #236]	; (8000d78 <MX_GPIO_Init+0x134>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a3a      	ldr	r2, [pc, #232]	; (8000d78 <MX_GPIO_Init+0x134>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b38      	ldr	r3, [pc, #224]	; (8000d78 <MX_GPIO_Init+0x134>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca2:	4b35      	ldr	r3, [pc, #212]	; (8000d78 <MX_GPIO_Init+0x134>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a34      	ldr	r2, [pc, #208]	; (8000d78 <MX_GPIO_Init+0x134>)
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b32      	ldr	r3, [pc, #200]	; (8000d78 <MX_GPIO_Init+0x134>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cba:	4b2f      	ldr	r3, [pc, #188]	; (8000d78 <MX_GPIO_Init+0x134>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a2e      	ldr	r2, [pc, #184]	; (8000d78 <MX_GPIO_Init+0x134>)
 8000cc0:	f043 0308 	orr.w	r3, r3, #8
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b2c      	ldr	r3, [pc, #176]	; (8000d78 <MX_GPIO_Init+0x134>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0308 	and.w	r3, r3, #8
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cd2:	4b29      	ldr	r3, [pc, #164]	; (8000d78 <MX_GPIO_Init+0x134>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a28      	ldr	r2, [pc, #160]	; (8000d78 <MX_GPIO_Init+0x134>)
 8000cd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b26      	ldr	r3, [pc, #152]	; (8000d78 <MX_GPIO_Init+0x134>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	f244 0181 	movw	r1, #16513	; 0x4081
 8000cf0:	4822      	ldr	r0, [pc, #136]	; (8000d7c <MX_GPIO_Init+0x138>)
 8000cf2:	f002 f977 	bl	8002fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2140      	movs	r1, #64	; 0x40
 8000cfa:	4821      	ldr	r0, [pc, #132]	; (8000d80 <MX_GPIO_Init+0x13c>)
 8000cfc:	f002 f972 	bl	8002fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d06:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d10:	f107 031c 	add.w	r3, r7, #28
 8000d14:	4619      	mov	r1, r3
 8000d16:	481b      	ldr	r0, [pc, #108]	; (8000d84 <MX_GPIO_Init+0x140>)
 8000d18:	f001 ffb8 	bl	8002c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000d1c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000d20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d22:	2301      	movs	r3, #1
 8000d24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2e:	f107 031c 	add.w	r3, r7, #28
 8000d32:	4619      	mov	r1, r3
 8000d34:	4811      	ldr	r0, [pc, #68]	; (8000d7c <MX_GPIO_Init+0x138>)
 8000d36:	f001 ffa9 	bl	8002c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d3a:	2340      	movs	r3, #64	; 0x40
 8000d3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d4a:	f107 031c 	add.w	r3, r7, #28
 8000d4e:	4619      	mov	r1, r3
 8000d50:	480b      	ldr	r0, [pc, #44]	; (8000d80 <MX_GPIO_Init+0x13c>)
 8000d52:	f001 ff9b 	bl	8002c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d56:	2380      	movs	r3, #128	; 0x80
 8000d58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d62:	f107 031c 	add.w	r3, r7, #28
 8000d66:	4619      	mov	r1, r3
 8000d68:	4805      	ldr	r0, [pc, #20]	; (8000d80 <MX_GPIO_Init+0x13c>)
 8000d6a:	f001 ff8f 	bl	8002c8c <HAL_GPIO_Init>

}
 8000d6e:	bf00      	nop
 8000d70:	3730      	adds	r7, #48	; 0x30
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40020400 	.word	0x40020400
 8000d80:	40021800 	.word	0x40021800
 8000d84:	40020800 	.word	0x40020800

08000d88 <__io_putchar>:
#ifdef __GNUC__
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000d90:	1d39      	adds	r1, r7, #4
 8000d92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d96:	2201      	movs	r2, #1
 8000d98:	4803      	ldr	r0, [pc, #12]	; (8000da8 <__io_putchar+0x20>)
 8000d9a:	f003 feaf 	bl	8004afc <HAL_UART_Transmit>
  return ch;
 8000d9e:	687b      	ldr	r3, [r7, #4]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20003d5c 	.word	0x20003d5c

08000dac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000dac:	b5b0      	push	{r4, r5, r7, lr}
 8000dae:	b0ac      	sub	sp, #176	; 0xb0
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	61f8      	str	r0, [r7, #28]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000db4:	f004 fe22 	bl	80059fc <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  bool availableNetwork = false;
 8000db8:	2300      	movs	r3, #0
 8000dba:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
  printf("Ethernet Initialization\r\n");
 8000dbe:	4851      	ldr	r0, [pc, #324]	; (8000f04 <StartDefaultTask+0x158>)
 8000dc0:	f022 ff94 	bl	8023cec <puts>

	//Waiting for an IP
  printf("Waiting for IP\r\n");
 8000dc4:	4850      	ldr	r0, [pc, #320]	; (8000f08 <StartDefaultTask+0x15c>)
 8000dc6:	f022 ff91 	bl	8023cec <puts>
  int retries = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	while(gnetif.ip_addr.addr == 0 && retries < 10){
 8000dd0:	e008      	b.n	8000de4 <StartDefaultTask+0x38>
    osDelay(500);
 8000dd2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dd6:	f005 fccf 	bl	8006778 <osDelay>
    retries++;
 8000dda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000dde:	3301      	adds	r3, #1
 8000de0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	while(gnetif.ip_addr.addr == 0 && retries < 10){
 8000de4:	4b49      	ldr	r3, [pc, #292]	; (8000f0c <StartDefaultTask+0x160>)
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d103      	bne.n	8000df4 <StartDefaultTask+0x48>
 8000dec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000df0:	2b09      	cmp	r3, #9
 8000df2:	ddee      	ble.n	8000dd2 <StartDefaultTask+0x26>
  };

  availableNetwork = (gnetif.ip_addr.addr != 0);
 8000df4:	4b45      	ldr	r3, [pc, #276]	; (8000f0c <StartDefaultTask+0x160>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	bf14      	ite	ne
 8000dfc:	2301      	movne	r3, #1
 8000dfe:	2300      	moveq	r3, #0
 8000e00:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
  if (availableNetwork){
 8000e04:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d008      	beq.n	8000e1e <StartDefaultTask+0x72>
    printf("IP: %s\r\n",ip4addr_ntoa(&gnetif.ip_addr));
 8000e0c:	4840      	ldr	r0, [pc, #256]	; (8000f10 <StartDefaultTask+0x164>)
 8000e0e:	f019 fb45 	bl	801a49c <ip4addr_ntoa>
 8000e12:	4603      	mov	r3, r0
 8000e14:	4619      	mov	r1, r3
 8000e16:	483f      	ldr	r0, [pc, #252]	; (8000f14 <StartDefaultTask+0x168>)
 8000e18:	f022 fee2 	bl	8023be0 <iprintf>
 8000e1c:	e002      	b.n	8000e24 <StartDefaultTask+0x78>
  }else{
    printf("Impossible to retrieve an IP\n");
 8000e1e:	483e      	ldr	r0, [pc, #248]	; (8000f18 <StartDefaultTask+0x16c>)
 8000e20:	f022 ff64 	bl	8023cec <puts>
  }

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8000e24:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f01a fe4d 	bl	801bac8 <rcutils_get_zero_initialized_allocator>
   freeRTOS_allocator.allocate = microros_allocate;
 8000e2e:	4b3b      	ldr	r3, [pc, #236]	; (8000f1c <StartDefaultTask+0x170>)
 8000e30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   freeRTOS_allocator.deallocate = microros_deallocate;
 8000e34:	4b3a      	ldr	r3, [pc, #232]	; (8000f20 <StartDefaultTask+0x174>)
 8000e36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   freeRTOS_allocator.reallocate = microros_reallocate;
 8000e3a:	4b3a      	ldr	r3, [pc, #232]	; (8000f24 <StartDefaultTask+0x178>)
 8000e3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8000e40:	4b39      	ldr	r3, [pc, #228]	; (8000f28 <StartDefaultTask+0x17c>)
 8000e42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

   if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8000e46:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f01a fe4a 	bl	801bae4 <rcutils_set_default_allocator>
 8000e50:	4603      	mov	r3, r0
 8000e52:	f083 0301 	eor.w	r3, r3, #1
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d004      	beq.n	8000e66 <StartDefaultTask+0xba>
 	 printf("Error on default allocators (line %d)\n", __LINE__);
 8000e5c:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000e60:	4832      	ldr	r0, [pc, #200]	; (8000f2c <StartDefaultTask+0x180>)
 8000e62:	f022 febd 	bl	8023be0 <iprintf>
   std_msgs__msg__Int32 msg;
   rclc_support_t support;
   rcl_allocator_t allocator;
   rcl_node_t node;

   allocator = rcl_get_default_allocator();
 8000e66:	463b      	mov	r3, r7
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f01a fe5b 	bl	801bb24 <rcutils_get_default_allocator>
 8000e6e:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000e72:	463d      	mov	r5, r7
 8000e74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e78:	682b      	ldr	r3, [r5, #0]
 8000e7a:	6023      	str	r3, [r4, #0]

   //create init_options
   rclc_support_init(&support, 0, NULL, &allocator);
 8000e7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e80:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8000e84:	2200      	movs	r2, #0
 8000e86:	2100      	movs	r1, #0
 8000e88:	f01a fd50 	bl	801b92c <rclc_support_init>

   // create node
   rclc_node_init_default(&node, "cubemx_node", "", &support);
 8000e8c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e90:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000e94:	4a26      	ldr	r2, [pc, #152]	; (8000f30 <StartDefaultTask+0x184>)
 8000e96:	4927      	ldr	r1, [pc, #156]	; (8000f34 <StartDefaultTask+0x188>)
 8000e98:	f01a fd98 	bl	801b9cc <rclc_node_init_default>

   // create publisher
   rclc_publisher_init_default(
 8000e9c:	f01b fae8 	bl	801c470 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000ea6:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8000eaa:	4b23      	ldr	r3, [pc, #140]	; (8000f38 <StartDefaultTask+0x18c>)
 8000eac:	f01a fdce 	bl	801ba4c <rclc_publisher_init_default>
     &publisher,
     &node,
     ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
     "cubemx_publisher");

   msg.data = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   // printf("Task  State   Prio    Stack    Num");
   // printf("**********************************");
   // printf(ptrTaskList);
   // printf("**********************************");

   printf("Start \n");
 8000eb6:	4821      	ldr	r0, [pc, #132]	; (8000f3c <StartDefaultTask+0x190>)
 8000eb8:	f022 ff18 	bl	8023cec <puts>

   for(;;) {
 	 printf("publish: %ld \n", msg.data);
 8000ebc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	481f      	ldr	r0, [pc, #124]	; (8000f40 <StartDefaultTask+0x194>)
 8000ec4:	f022 fe8c 	bl	8023be0 <iprintf>
     //(void)! rcl_publish(&publisher, &msg, NULL);
     rcl_ret_t ret = rcl_publish(&publisher, &msg, NULL);
 8000ec8:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8000ecc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f01a fd06 	bl	801b8e4 <rcl_publish>
 8000ed8:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
     if (ret != RCL_RET_OK)
 8000edc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d005      	beq.n	8000ef0 <StartDefaultTask+0x144>
     {
       printf("Error publishing (line %d)\n", __LINE__);
 8000ee4:	f240 11af 	movw	r1, #431	; 0x1af
 8000ee8:	4816      	ldr	r0, [pc, #88]	; (8000f44 <StartDefaultTask+0x198>)
 8000eea:	f022 fe79 	bl	8023be0 <iprintf>
 8000eee:	e004      	b.n	8000efa <StartDefaultTask+0x14e>
     }else{
       msg.data++;
 8000ef0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
     }

     osDelay(portTICK_RATE_MS*1000);
 8000efa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000efe:	f005 fc3b 	bl	8006778 <osDelay>
   for(;;) {
 8000f02:	e7db      	b.n	8000ebc <StartDefaultTask+0x110>
 8000f04:	080251c4 	.word	0x080251c4
 8000f08:	080251e0 	.word	0x080251e0
 8000f0c:	20004254 	.word	0x20004254
 8000f10:	20004258 	.word	0x20004258
 8000f14:	080251f0 	.word	0x080251f0
 8000f18:	080251fc 	.word	0x080251fc
 8000f1c:	08000f79 	.word	0x08000f79
 8000f20:	08000fbd 	.word	0x08000fbd
 8000f24:	08000ff5 	.word	0x08000ff5
 8000f28:	08001061 	.word	0x08001061
 8000f2c:	0802521c 	.word	0x0802521c
 8000f30:	08025244 	.word	0x08025244
 8000f34:	08025248 	.word	0x08025248
 8000f38:	08025254 	.word	0x08025254
 8000f3c:	08025268 	.word	0x08025268
 8000f40:	08025270 	.word	0x08025270
 8000f44:	08025280 	.word	0x08025280

08000f48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a04      	ldr	r2, [pc, #16]	; (8000f68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d101      	bne.n	8000f5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f5a:	f000 fc05 	bl	8001768 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40010000 	.word	0x40010000

08000f6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f70:	b672      	cpsid	i
}
 8000f72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <Error_Handler+0x8>
	...

08000f78 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8000f82:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <microros_allocate+0x3c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	461a      	mov	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <microros_allocate+0x3c>)
 8000f90:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <microros_allocate+0x40>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	461a      	mov	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <microros_allocate+0x40>)
 8000fa0:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff fb6e 	bl	8000684 <pvPortMallocMicroROS>
 8000fa8:	4603      	mov	r3, r0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200041e8 	.word	0x200041e8
 8000fb8:	200041ec 	.word	0x200041ec

08000fbc <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d00c      	beq.n	8000fe6 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff fc27 	bl	8000820 <getBlockSize>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	4a06      	ldr	r2, [pc, #24]	; (8000ff0 <microros_deallocate+0x34>)
 8000fd6:	6812      	ldr	r2, [r2, #0]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	461a      	mov	r2, r3
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <microros_deallocate+0x34>)
 8000fde:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff fbe3 	bl	80007ac <vPortFreeMicroROS>
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200041ec 	.word	0x200041ec

08000ff4 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001000:	4b15      	ldr	r3, [pc, #84]	; (8001058 <microros_reallocate+0x64>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	4413      	add	r3, r2
 800100a:	461a      	mov	r2, r3
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <microros_reallocate+0x64>)
 800100e:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <microros_reallocate+0x68>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	461a      	mov	r2, r3
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	4413      	add	r3, r2
 800101a:	461a      	mov	r2, r3
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <microros_reallocate+0x68>)
 800101e:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d104      	bne.n	8001030 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001026:	68b8      	ldr	r0, [r7, #8]
 8001028:	f7ff fb2c 	bl	8000684 <pvPortMallocMicroROS>
 800102c:	4603      	mov	r3, r0
 800102e:	e00e      	b.n	800104e <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001030:	68f8      	ldr	r0, [r7, #12]
 8001032:	f7ff fbf5 	bl	8000820 <getBlockSize>
 8001036:	4603      	mov	r3, r0
 8001038:	4a08      	ldr	r2, [pc, #32]	; (800105c <microros_reallocate+0x68>)
 800103a:	6812      	ldr	r2, [r2, #0]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	461a      	mov	r2, r3
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <microros_reallocate+0x68>)
 8001042:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001044:	68b9      	ldr	r1, [r7, #8]
 8001046:	68f8      	ldr	r0, [r7, #12]
 8001048:	f7ff fc08 	bl	800085c <pvPortReallocMicroROS>
 800104c:	4603      	mov	r3, r0
  }
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200041e8 	.word	0x200041e8
 800105c:	200041ec 	.word	0x200041ec

08001060 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	68ba      	ldr	r2, [r7, #8]
 8001070:	fb02 f303 	mul.w	r3, r2, r3
 8001074:	4a0c      	ldr	r2, [pc, #48]	; (80010a8 <microros_zero_allocate+0x48>)
 8001076:	6812      	ldr	r2, [r2, #0]
 8001078:	4413      	add	r3, r2
 800107a:	461a      	mov	r2, r3
 800107c:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <microros_zero_allocate+0x48>)
 800107e:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	fb02 f303 	mul.w	r3, r2, r3
 8001088:	4a08      	ldr	r2, [pc, #32]	; (80010ac <microros_zero_allocate+0x4c>)
 800108a:	6812      	ldr	r2, [r2, #0]
 800108c:	4413      	add	r3, r2
 800108e:	461a      	mov	r2, r3
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <microros_zero_allocate+0x4c>)
 8001092:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001094:	68b9      	ldr	r1, [r7, #8]
 8001096:	68f8      	ldr	r0, [r7, #12]
 8001098:	f7ff fc0d 	bl	80008b6 <pvPortCallocMicroROS>
 800109c:	4603      	mov	r3, r0
 800109e:	4618      	mov	r0, r3
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	200041e8 	.word	0x200041e8
 80010ac:	200041ec 	.word	0x200041ec

080010b0 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80010b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010b4:	b086      	sub	sp, #24
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80010bc:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80010c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010c6:	a320      	add	r3, pc, #128	; (adr r3, 8001148 <UTILS_NanosecondsToTimespec+0x98>)
 80010c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010cc:	f7ff f908 	bl	80002e0 <__aeabi_ldivmod>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	6879      	ldr	r1, [r7, #4]
 80010d6:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80010da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010de:	a31a      	add	r3, pc, #104	; (adr r3, 8001148 <UTILS_NanosecondsToTimespec+0x98>)
 80010e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e4:	f7ff f8fc 	bl	80002e0 <__aeabi_ldivmod>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	da20      	bge.n	8001136 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	4a11      	ldr	r2, [pc, #68]	; (8001140 <UTILS_NanosecondsToTimespec+0x90>)
 80010fa:	fb82 1203 	smull	r1, r2, r2, r3
 80010fe:	1712      	asrs	r2, r2, #28
 8001100:	17db      	asrs	r3, r3, #31
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	3301      	adds	r3, #1
 8001106:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110e:	6979      	ldr	r1, [r7, #20]
 8001110:	17c8      	asrs	r0, r1, #31
 8001112:	460c      	mov	r4, r1
 8001114:	4605      	mov	r5, r0
 8001116:	ebb2 0804 	subs.w	r8, r2, r4
 800111a:	eb63 0905 	sbc.w	r9, r3, r5
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	4906      	ldr	r1, [pc, #24]	; (8001144 <UTILS_NanosecondsToTimespec+0x94>)
 800112c:	fb01 f303 	mul.w	r3, r1, r3
 8001130:	441a      	add	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	609a      	str	r2, [r3, #8]
    }
}
 8001136:	bf00      	nop
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001140:	44b82fa1 	.word	0x44b82fa1
 8001144:	3b9aca00 	.word	0x3b9aca00
 8001148:	3b9aca00 	.word	0x3b9aca00
 800114c:	00000000 	.word	0x00000000

08001150 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001150:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001154:	b08e      	sub	sp, #56	; 0x38
 8001156:	af00      	add	r7, sp, #0
 8001158:	6278      	str	r0, [r7, #36]	; 0x24
 800115a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800115c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001160:	2300      	movs	r3, #0
 8001162:	6013      	str	r3, [r2, #0]
 8001164:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	f04f 0300 	mov.w	r3, #0
 800116e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001172:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001176:	4618      	mov	r0, r3
 8001178:	f007 fbc2 	bl	8008900 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800117c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800117e:	17da      	asrs	r2, r3, #31
 8001180:	61bb      	str	r3, [r7, #24]
 8001182:	61fa      	str	r2, [r7, #28]
 8001184:	f04f 0200 	mov.w	r2, #0
 8001188:	f04f 0300 	mov.w	r3, #0
 800118c:	69b9      	ldr	r1, [r7, #24]
 800118e:	000b      	movs	r3, r1
 8001190:	2200      	movs	r2, #0
 8001192:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001198:	2200      	movs	r2, #0
 800119a:	461c      	mov	r4, r3
 800119c:	4615      	mov	r5, r2
 800119e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80011a2:	1911      	adds	r1, r2, r4
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	416b      	adcs	r3, r5
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80011ae:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80011b2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	f04f 0400 	mov.w	r4, #0
 80011be:	f04f 0500 	mov.w	r5, #0
 80011c2:	015d      	lsls	r5, r3, #5
 80011c4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80011c8:	0154      	lsls	r4, r2, #5
 80011ca:	4622      	mov	r2, r4
 80011cc:	462b      	mov	r3, r5
 80011ce:	ebb2 0800 	subs.w	r8, r2, r0
 80011d2:	eb63 0901 	sbc.w	r9, r3, r1
 80011d6:	f04f 0200 	mov.w	r2, #0
 80011da:	f04f 0300 	mov.w	r3, #0
 80011de:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80011e2:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80011e6:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80011ea:	4690      	mov	r8, r2
 80011ec:	4699      	mov	r9, r3
 80011ee:	eb18 0a00 	adds.w	sl, r8, r0
 80011f2:	eb49 0b01 	adc.w	fp, r9, r1
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	f04f 0300 	mov.w	r3, #0
 80011fe:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001202:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001206:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800120a:	ebb2 040a 	subs.w	r4, r2, sl
 800120e:	603c      	str	r4, [r7, #0]
 8001210:	eb63 030b 	sbc.w	r3, r3, fp
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	e9d7 4500 	ldrd	r4, r5, [r7]
 800121a:	4623      	mov	r3, r4
 800121c:	181b      	adds	r3, r3, r0
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	462b      	mov	r3, r5
 8001222:	eb41 0303 	adc.w	r3, r1, r3
 8001226:	617b      	str	r3, [r7, #20]
 8001228:	6a3a      	ldr	r2, [r7, #32]
 800122a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800122e:	f7ff ff3f 	bl	80010b0 <UTILS_NanosecondsToTimespec>

    return 0;
 8001232:	2300      	movs	r3, #0
 8001234:	4618      	mov	r0, r3
 8001236:	3738      	adds	r7, #56	; 0x38
 8001238:	46bd      	mov	sp, r7
 800123a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001240 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <HAL_MspInit+0x4c>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	4a10      	ldr	r2, [pc, #64]	; (800128c <HAL_MspInit+0x4c>)
 800124c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001250:	6413      	str	r3, [r2, #64]	; 0x40
 8001252:	4b0e      	ldr	r3, [pc, #56]	; (800128c <HAL_MspInit+0x4c>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125e:	4b0b      	ldr	r3, [pc, #44]	; (800128c <HAL_MspInit+0x4c>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	4a0a      	ldr	r2, [pc, #40]	; (800128c <HAL_MspInit+0x4c>)
 8001264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001268:	6453      	str	r3, [r2, #68]	; 0x44
 800126a:	4b08      	ldr	r3, [pc, #32]	; (800128c <HAL_MspInit+0x4c>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001272:	603b      	str	r3, [r7, #0]
 8001274:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	210f      	movs	r1, #15
 800127a:	f06f 0001 	mvn.w	r0, #1
 800127e:	f000 fb6f 	bl	8001960 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40023800 	.word	0x40023800

08001290 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b0aa      	sub	sp, #168	; 0xa8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	2284      	movs	r2, #132	; 0x84
 80012ae:	2100      	movs	r1, #0
 80012b0:	4618      	mov	r0, r3
 80012b2:	f022 fb97 	bl	80239e4 <memset>
  if(huart->Instance==USART3)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a22      	ldr	r2, [pc, #136]	; (8001344 <HAL_UART_MspInit+0xb4>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d13c      	bne.n	800133a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012c4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012c6:	2300      	movs	r3, #0
 80012c8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ca:	f107 0310 	add.w	r3, r7, #16
 80012ce:	4618      	mov	r0, r3
 80012d0:	f002 fcf6 	bl	8003cc0 <HAL_RCCEx_PeriphCLKConfig>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80012da:	f7ff fe47 	bl	8000f6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012de:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <HAL_UART_MspInit+0xb8>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	4a19      	ldr	r2, [pc, #100]	; (8001348 <HAL_UART_MspInit+0xb8>)
 80012e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012e8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ea:	4b17      	ldr	r3, [pc, #92]	; (8001348 <HAL_UART_MspInit+0xb8>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f6:	4b14      	ldr	r3, [pc, #80]	; (8001348 <HAL_UART_MspInit+0xb8>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a13      	ldr	r2, [pc, #76]	; (8001348 <HAL_UART_MspInit+0xb8>)
 80012fc:	f043 0308 	orr.w	r3, r3, #8
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b11      	ldr	r3, [pc, #68]	; (8001348 <HAL_UART_MspInit+0xb8>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0308 	and.w	r3, r3, #8
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800130e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001312:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001322:	2303      	movs	r3, #3
 8001324:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001328:	2307      	movs	r3, #7
 800132a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800132e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001332:	4619      	mov	r1, r3
 8001334:	4805      	ldr	r0, [pc, #20]	; (800134c <HAL_UART_MspInit+0xbc>)
 8001336:	f001 fca9 	bl	8002c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800133a:	bf00      	nop
 800133c:	37a8      	adds	r7, #168	; 0xa8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40004800 	.word	0x40004800
 8001348:	40023800 	.word	0x40023800
 800134c:	40020c00 	.word	0x40020c00

08001350 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b0ac      	sub	sp, #176	; 0xb0
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001368:	f107 0318 	add.w	r3, r7, #24
 800136c:	2284      	movs	r2, #132	; 0x84
 800136e:	2100      	movs	r1, #0
 8001370:	4618      	mov	r0, r3
 8001372:	f022 fb37 	bl	80239e4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800137e:	d159      	bne.n	8001434 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001380:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001384:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001386:	2300      	movs	r3, #0
 8001388:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800138c:	f107 0318 	add.w	r3, r7, #24
 8001390:	4618      	mov	r0, r3
 8001392:	f002 fc95 	bl	8003cc0 <HAL_RCCEx_PeriphCLKConfig>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800139c:	f7ff fde6 	bl	8000f6c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a0:	4b26      	ldr	r3, [pc, #152]	; (800143c <HAL_PCD_MspInit+0xec>)
 80013a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a4:	4a25      	ldr	r2, [pc, #148]	; (800143c <HAL_PCD_MspInit+0xec>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	6313      	str	r3, [r2, #48]	; 0x30
 80013ac:	4b23      	ldr	r3, [pc, #140]	; (800143c <HAL_PCD_MspInit+0xec>)
 80013ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80013b8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80013bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c0:	2302      	movs	r3, #2
 80013c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013cc:	2303      	movs	r3, #3
 80013ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013d2:	230a      	movs	r3, #10
 80013d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013dc:	4619      	mov	r1, r3
 80013de:	4818      	ldr	r0, [pc, #96]	; (8001440 <HAL_PCD_MspInit+0xf0>)
 80013e0:	f001 fc54 	bl	8002c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80013e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80013f8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013fc:	4619      	mov	r1, r3
 80013fe:	4810      	ldr	r0, [pc, #64]	; (8001440 <HAL_PCD_MspInit+0xf0>)
 8001400:	f001 fc44 	bl	8002c8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001404:	4b0d      	ldr	r3, [pc, #52]	; (800143c <HAL_PCD_MspInit+0xec>)
 8001406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001408:	4a0c      	ldr	r2, [pc, #48]	; (800143c <HAL_PCD_MspInit+0xec>)
 800140a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800140e:	6353      	str	r3, [r2, #52]	; 0x34
 8001410:	4b0a      	ldr	r3, [pc, #40]	; (800143c <HAL_PCD_MspInit+0xec>)
 8001412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	4b07      	ldr	r3, [pc, #28]	; (800143c <HAL_PCD_MspInit+0xec>)
 800141e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001420:	4a06      	ldr	r2, [pc, #24]	; (800143c <HAL_PCD_MspInit+0xec>)
 8001422:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001426:	6453      	str	r3, [r2, #68]	; 0x44
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <HAL_PCD_MspInit+0xec>)
 800142a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001434:	bf00      	nop
 8001436:	37b0      	adds	r7, #176	; 0xb0
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40023800 	.word	0x40023800
 8001440:	40020000 	.word	0x40020000

08001444 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08c      	sub	sp, #48	; 0x30
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001454:	2200      	movs	r2, #0
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	2019      	movs	r0, #25
 800145a:	f000 fa81 	bl	8001960 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800145e:	2019      	movs	r0, #25
 8001460:	f000 fa9a 	bl	8001998 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001464:	4b1e      	ldr	r3, [pc, #120]	; (80014e0 <HAL_InitTick+0x9c>)
 8001466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001468:	4a1d      	ldr	r2, [pc, #116]	; (80014e0 <HAL_InitTick+0x9c>)
 800146a:	f043 0301 	orr.w	r3, r3, #1
 800146e:	6453      	str	r3, [r2, #68]	; 0x44
 8001470:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <HAL_InitTick+0x9c>)
 8001472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800147c:	f107 0210 	add.w	r2, r7, #16
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	4611      	mov	r1, r2
 8001486:	4618      	mov	r0, r3
 8001488:	f002 fbe8 	bl	8003c5c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800148c:	f002 fbd2 	bl	8003c34 <HAL_RCC_GetPCLK2Freq>
 8001490:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001494:	4a13      	ldr	r2, [pc, #76]	; (80014e4 <HAL_InitTick+0xa0>)
 8001496:	fba2 2303 	umull	r2, r3, r2, r3
 800149a:	0c9b      	lsrs	r3, r3, #18
 800149c:	3b01      	subs	r3, #1
 800149e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <HAL_InitTick+0xa4>)
 80014a2:	4a12      	ldr	r2, [pc, #72]	; (80014ec <HAL_InitTick+0xa8>)
 80014a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <HAL_InitTick+0xa4>)
 80014a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014ac:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80014ae:	4a0e      	ldr	r2, [pc, #56]	; (80014e8 <HAL_InitTick+0xa4>)
 80014b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <HAL_InitTick+0xa4>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <HAL_InitTick+0xa4>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80014c0:	4809      	ldr	r0, [pc, #36]	; (80014e8 <HAL_InitTick+0xa4>)
 80014c2:	f002 ffed 	bl	80044a0 <HAL_TIM_Base_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d104      	bne.n	80014d6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80014cc:	4806      	ldr	r0, [pc, #24]	; (80014e8 <HAL_InitTick+0xa4>)
 80014ce:	f003 f849 	bl	8004564 <HAL_TIM_Base_Start_IT>
 80014d2:	4603      	mov	r3, r0
 80014d4:	e000      	b.n	80014d8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3730      	adds	r7, #48	; 0x30
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40023800 	.word	0x40023800
 80014e4:	431bde83 	.word	0x431bde83
 80014e8:	200041f0 	.word	0x200041f0
 80014ec:	40010000 	.word	0x40010000

080014f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <NMI_Handler+0x4>

080014f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014fa:	e7fe      	b.n	80014fa <HardFault_Handler+0x4>

080014fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <MemManage_Handler+0x4>

08001502 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001506:	e7fe      	b.n	8001506 <BusFault_Handler+0x4>

08001508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800150c:	e7fe      	b.n	800150c <UsageFault_Handler+0x4>

0800150e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001520:	4802      	ldr	r0, [pc, #8]	; (800152c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001522:	f003 f897 	bl	8004654 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	200041f0 	.word	0x200041f0

08001530 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001534:	4802      	ldr	r0, [pc, #8]	; (8001540 <ETH_IRQHandler+0x10>)
 8001536:	f000 fe1b 	bl	8002170 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20007370 	.word	0x20007370

08001544 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
	return 1;
 8001548:	2301      	movs	r3, #1
}
 800154a:	4618      	mov	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <_kill>:

int _kill(int pid, int sig)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800155e:	4b05      	ldr	r3, [pc, #20]	; (8001574 <_kill+0x20>)
 8001560:	2216      	movs	r2, #22
 8001562:	601a      	str	r2, [r3, #0]
	return -1;
 8001564:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001568:	4618      	mov	r0, r3
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	2000ff64 	.word	0x2000ff64

08001578 <_exit>:

void _exit (int status)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001580:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff ffe5 	bl	8001554 <_kill>
	while (1) {}		/* Make sure we hang here */
 800158a:	e7fe      	b.n	800158a <_exit+0x12>

0800158c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	e00a      	b.n	80015b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800159e:	f3af 8000 	nop.w
 80015a2:	4601      	mov	r1, r0
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	1c5a      	adds	r2, r3, #1
 80015a8:	60ba      	str	r2, [r7, #8]
 80015aa:	b2ca      	uxtb	r2, r1
 80015ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	3301      	adds	r3, #1
 80015b2:	617b      	str	r3, [r7, #20]
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	dbf0      	blt.n	800159e <_read+0x12>
	}

return len;
 80015bc:	687b      	ldr	r3, [r7, #4]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b086      	sub	sp, #24
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	60f8      	str	r0, [r7, #12]
 80015ce:	60b9      	str	r1, [r7, #8]
 80015d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
 80015d6:	e009      	b.n	80015ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	1c5a      	adds	r2, r3, #1
 80015dc:	60ba      	str	r2, [r7, #8]
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fbd1 	bl	8000d88 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	3301      	adds	r3, #1
 80015ea:	617b      	str	r3, [r7, #20]
 80015ec:	697a      	ldr	r2, [r7, #20]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	dbf1      	blt.n	80015d8 <_write+0x12>
	}
	return len;
 80015f4:	687b      	ldr	r3, [r7, #4]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <_close>:

int _close(int file)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
	return -1;
 8001606:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800160a:	4618      	mov	r0, r3
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001626:	605a      	str	r2, [r3, #4]
	return 0;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <_isatty>:

int _isatty(int file)
{
 8001636:	b480      	push	{r7}
 8001638:	b083      	sub	sp, #12
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
	return 1;
 800163e:	2301      	movs	r3, #1
}
 8001640:	4618      	mov	r0, r3
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
	return 0;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
	...

08001668 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001668:	b480      	push	{r7}
 800166a:	b087      	sub	sp, #28
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001670:	4a14      	ldr	r2, [pc, #80]	; (80016c4 <_sbrk+0x5c>)
 8001672:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <_sbrk+0x60>)
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800167c:	4b13      	ldr	r3, [pc, #76]	; (80016cc <_sbrk+0x64>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d102      	bne.n	800168a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001684:	4b11      	ldr	r3, [pc, #68]	; (80016cc <_sbrk+0x64>)
 8001686:	4a12      	ldr	r2, [pc, #72]	; (80016d0 <_sbrk+0x68>)
 8001688:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <_sbrk+0x64>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4413      	add	r3, r2
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	429a      	cmp	r2, r3
 8001696:	d205      	bcs.n	80016a4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001698:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <_sbrk+0x6c>)
 800169a:	220c      	movs	r2, #12
 800169c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800169e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016a2:	e009      	b.n	80016b8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80016a4:	4b09      	ldr	r3, [pc, #36]	; (80016cc <_sbrk+0x64>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016aa:	4b08      	ldr	r3, [pc, #32]	; (80016cc <_sbrk+0x64>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	4a06      	ldr	r2, [pc, #24]	; (80016cc <_sbrk+0x64>)
 80016b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016b6:	68fb      	ldr	r3, [r7, #12]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	371c      	adds	r7, #28
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	20050000 	.word	0x20050000
 80016c8:	00000400 	.word	0x00000400
 80016cc:	20004240 	.word	0x20004240
 80016d0:	20014898 	.word	0x20014898
 80016d4:	2000ff64 	.word	0x2000ff64

080016d8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <SystemInit+0x20>)
 80016de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016e2:	4a05      	ldr	r2, [pc, #20]	; (80016f8 <SystemInit+0x20>)
 80016e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001734 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001700:	480d      	ldr	r0, [pc, #52]	; (8001738 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001702:	490e      	ldr	r1, [pc, #56]	; (800173c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001704:	4a0e      	ldr	r2, [pc, #56]	; (8001740 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001708:	e002      	b.n	8001710 <LoopCopyDataInit>

0800170a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800170a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800170c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800170e:	3304      	adds	r3, #4

08001710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001714:	d3f9      	bcc.n	800170a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001716:	4a0b      	ldr	r2, [pc, #44]	; (8001744 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001718:	4c0b      	ldr	r4, [pc, #44]	; (8001748 <LoopFillZerobss+0x26>)
  movs r3, #0
 800171a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800171c:	e001      	b.n	8001722 <LoopFillZerobss>

0800171e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800171e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001720:	3204      	adds	r2, #4

08001722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001724:	d3fb      	bcc.n	800171e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001726:	f7ff ffd7 	bl	80016d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800172a:	f022 f8eb 	bl	8023904 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800172e:	f7ff f9a3 	bl	8000a78 <main>
  bx  lr    
 8001732:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001734:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800173c:	20000124 	.word	0x20000124
  ldr r2, =_sidata
 8001740:	08029cfc 	.word	0x08029cfc
  ldr r2, =_sbss
 8001744:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 8001748:	20014898 	.word	0x20014898

0800174c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800174c:	e7fe      	b.n	800174c <ADC_IRQHandler>

0800174e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001752:	2003      	movs	r0, #3
 8001754:	f000 f8f9 	bl	800194a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001758:	200f      	movs	r0, #15
 800175a:	f7ff fe73 	bl	8001444 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800175e:	f7ff fd6f 	bl	8001240 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	bd80      	pop	{r7, pc}

08001768 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_IncTick+0x20>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_IncTick+0x24>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4413      	add	r3, r2
 8001778:	4a04      	ldr	r2, [pc, #16]	; (800178c <HAL_IncTick+0x24>)
 800177a:	6013      	str	r3, [r2, #0]
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	2000000c 	.word	0x2000000c
 800178c:	20004244 	.word	0x20004244

08001790 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return uwTick;
 8001794:	4b03      	ldr	r3, [pc, #12]	; (80017a4 <HAL_GetTick+0x14>)
 8001796:	681b      	ldr	r3, [r3, #0]
}
 8001798:	4618      	mov	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	20004244 	.word	0x20004244

080017a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017b0:	f7ff ffee 	bl	8001790 <HAL_GetTick>
 80017b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017c0:	d005      	beq.n	80017ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017c2:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <HAL_Delay+0x44>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	461a      	mov	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	4413      	add	r3, r2
 80017cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017ce:	bf00      	nop
 80017d0:	f7ff ffde 	bl	8001790 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d8f7      	bhi.n	80017d0 <HAL_Delay+0x28>
  {
  }
}
 80017e0:	bf00      	nop
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	2000000c 	.word	0x2000000c

080017f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001800:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <__NVIC_SetPriorityGrouping+0x40>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800180c:	4013      	ands	r3, r2
 800180e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <__NVIC_SetPriorityGrouping+0x44>)
 800181a:	4313      	orrs	r3, r2
 800181c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181e:	4a04      	ldr	r2, [pc, #16]	; (8001830 <__NVIC_SetPriorityGrouping+0x40>)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	60d3      	str	r3, [r2, #12]
}
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000ed00 	.word	0xe000ed00
 8001834:	05fa0000 	.word	0x05fa0000

08001838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800183c:	4b04      	ldr	r3, [pc, #16]	; (8001850 <__NVIC_GetPriorityGrouping+0x18>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	0a1b      	lsrs	r3, r3, #8
 8001842:	f003 0307 	and.w	r3, r3, #7
}
 8001846:	4618      	mov	r0, r3
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	2b00      	cmp	r3, #0
 8001864:	db0b      	blt.n	800187e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	f003 021f 	and.w	r2, r3, #31
 800186c:	4907      	ldr	r1, [pc, #28]	; (800188c <__NVIC_EnableIRQ+0x38>)
 800186e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001872:	095b      	lsrs	r3, r3, #5
 8001874:	2001      	movs	r0, #1
 8001876:	fa00 f202 	lsl.w	r2, r0, r2
 800187a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000e100 	.word	0xe000e100

08001890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	6039      	str	r1, [r7, #0]
 800189a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800189c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	db0a      	blt.n	80018ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	490c      	ldr	r1, [pc, #48]	; (80018dc <__NVIC_SetPriority+0x4c>)
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	0112      	lsls	r2, r2, #4
 80018b0:	b2d2      	uxtb	r2, r2
 80018b2:	440b      	add	r3, r1
 80018b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b8:	e00a      	b.n	80018d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	4908      	ldr	r1, [pc, #32]	; (80018e0 <__NVIC_SetPriority+0x50>)
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	3b04      	subs	r3, #4
 80018c8:	0112      	lsls	r2, r2, #4
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	440b      	add	r3, r1
 80018ce:	761a      	strb	r2, [r3, #24]
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	e000e100 	.word	0xe000e100
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b089      	sub	sp, #36	; 0x24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f1c3 0307 	rsb	r3, r3, #7
 80018fe:	2b04      	cmp	r3, #4
 8001900:	bf28      	it	cs
 8001902:	2304      	movcs	r3, #4
 8001904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3304      	adds	r3, #4
 800190a:	2b06      	cmp	r3, #6
 800190c:	d902      	bls.n	8001914 <NVIC_EncodePriority+0x30>
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	3b03      	subs	r3, #3
 8001912:	e000      	b.n	8001916 <NVIC_EncodePriority+0x32>
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001918:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43da      	mvns	r2, r3
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	401a      	ands	r2, r3
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800192c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	fa01 f303 	lsl.w	r3, r1, r3
 8001936:	43d9      	mvns	r1, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800193c:	4313      	orrs	r3, r2
         );
}
 800193e:	4618      	mov	r0, r3
 8001940:	3724      	adds	r7, #36	; 0x24
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff ff4c 	bl	80017f0 <__NVIC_SetPriorityGrouping>
}
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
 800196c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001972:	f7ff ff61 	bl	8001838 <__NVIC_GetPriorityGrouping>
 8001976:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	68b9      	ldr	r1, [r7, #8]
 800197c:	6978      	ldr	r0, [r7, #20]
 800197e:	f7ff ffb1 	bl	80018e4 <NVIC_EncodePriority>
 8001982:	4602      	mov	r2, r0
 8001984:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001988:	4611      	mov	r1, r2
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff ff80 	bl	8001890 <__NVIC_SetPriority>
}
 8001990:	bf00      	nop
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff ff54 	bl	8001854 <__NVIC_EnableIRQ>
}
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b088      	sub	sp, #32
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80019bc:	2300      	movs	r3, #0
 80019be:	61fb      	str	r3, [r7, #28]
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80019c4:	4ba0      	ldr	r3, [pc, #640]	; (8001c48 <HAL_ETH_Init+0x294>)
 80019c6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80019cc:	2300      	movs	r3, #0
 80019ce:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e180      	b.n	8001cdc <HAL_ETH_Init+0x328>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d106      	bne.n	80019f4 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f004 f966 	bl	8005cc0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f4:	4b95      	ldr	r3, [pc, #596]	; (8001c4c <HAL_ETH_Init+0x298>)
 80019f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f8:	4a94      	ldr	r2, [pc, #592]	; (8001c4c <HAL_ETH_Init+0x298>)
 80019fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019fe:	6453      	str	r3, [r2, #68]	; 0x44
 8001a00:	4b92      	ldr	r3, [pc, #584]	; (8001c4c <HAL_ETH_Init+0x298>)
 8001a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001a0c:	4b90      	ldr	r3, [pc, #576]	; (8001c50 <HAL_ETH_Init+0x29c>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	4a8f      	ldr	r2, [pc, #572]	; (8001c50 <HAL_ETH_Init+0x29c>)
 8001a12:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a16:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001a18:	4b8d      	ldr	r3, [pc, #564]	; (8001c50 <HAL_ETH_Init+0x29c>)
 8001a1a:	685a      	ldr	r2, [r3, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	498b      	ldr	r1, [pc, #556]	; (8001c50 <HAL_ETH_Init+0x29c>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	6812      	ldr	r2, [r2, #0]
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a3c:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001a3e:	f7ff fea7 	bl	8001790 <HAL_GetTick>
 8001a42:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001a44:	e011      	b.n	8001a6a <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001a46:	f7ff fea3 	bl	8001790 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a54:	d909      	bls.n	8001a6a <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2203      	movs	r2, #3
 8001a5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e138      	b.n	8001cdc <HAL_ETH_Init+0x328>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1e4      	bne.n	8001a46 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	f023 031c 	bic.w	r3, r3, #28
 8001a8a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001a8c:	f002 f8b2 	bl	8003bf4 <HAL_RCC_GetHCLKFreq>
 8001a90:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	4a6f      	ldr	r2, [pc, #444]	; (8001c54 <HAL_ETH_Init+0x2a0>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d908      	bls.n	8001aac <HAL_ETH_Init+0xf8>
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	4a6e      	ldr	r2, [pc, #440]	; (8001c58 <HAL_ETH_Init+0x2a4>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d804      	bhi.n	8001aac <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	f043 0308 	orr.w	r3, r3, #8
 8001aa8:	61fb      	str	r3, [r7, #28]
 8001aaa:	e027      	b.n	8001afc <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	4a6a      	ldr	r2, [pc, #424]	; (8001c58 <HAL_ETH_Init+0x2a4>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d908      	bls.n	8001ac6 <HAL_ETH_Init+0x112>
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	4a64      	ldr	r2, [pc, #400]	; (8001c48 <HAL_ETH_Init+0x294>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d204      	bcs.n	8001ac6 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f043 030c 	orr.w	r3, r3, #12
 8001ac2:	61fb      	str	r3, [r7, #28]
 8001ac4:	e01a      	b.n	8001afc <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	4a5f      	ldr	r2, [pc, #380]	; (8001c48 <HAL_ETH_Init+0x294>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d303      	bcc.n	8001ad6 <HAL_ETH_Init+0x122>
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	4a62      	ldr	r2, [pc, #392]	; (8001c5c <HAL_ETH_Init+0x2a8>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d911      	bls.n	8001afa <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	4a60      	ldr	r2, [pc, #384]	; (8001c5c <HAL_ETH_Init+0x2a8>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d908      	bls.n	8001af0 <HAL_ETH_Init+0x13c>
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	4a5f      	ldr	r2, [pc, #380]	; (8001c60 <HAL_ETH_Init+0x2ac>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d804      	bhi.n	8001af0 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	f043 0304 	orr.w	r3, r3, #4
 8001aec:	61fb      	str	r3, [r7, #28]
 8001aee:	e005      	b.n	8001afc <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f043 0310 	orr.w	r3, r3, #16
 8001af6:	61fb      	str	r3, [r7, #28]
 8001af8:	e000      	b.n	8001afc <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001afa:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	69fa      	ldr	r2, [r7, #28]
 8001b02:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001b04:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b08:	2100      	movs	r1, #0
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 fc10 	bl	8002330 <HAL_ETH_WritePHYRegister>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d00b      	beq.n	8001b2e <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001b1a:	6939      	ldr	r1, [r7, #16]
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 fdc5 	bl	80026ac <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e0d6      	b.n	8001cdc <HAL_ETH_Init+0x328>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001b2e:	20ff      	movs	r0, #255	; 0xff
 8001b30:	f7ff fe3a 	bl	80017a8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 80a4 	beq.w	8001c86 <HAL_ETH_Init+0x2d2>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b3e:	f7ff fe27 	bl	8001790 <HAL_GetTick>
 8001b42:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001b44:	f107 030c 	add.w	r3, r7, #12
 8001b48:	461a      	mov	r2, r3
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 fb87 	bl	8002260 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001b52:	f7ff fe1d 	bl	8001790 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d90f      	bls.n	8001b84 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001b68:	6939      	ldr	r1, [r7, #16]
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 fd9e 	bl	80026ac <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e0ab      	b.n	8001cdc <HAL_ETH_Init+0x328>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f003 0304 	and.w	r3, r3, #4
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0da      	beq.n	8001b44 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001b8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b92:	2100      	movs	r1, #0
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 fbcb 	bl	8002330 <HAL_ETH_WritePHYRegister>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d00b      	beq.n	8001bb8 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001ba4:	6939      	ldr	r1, [r7, #16]
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 fd80 	bl	80026ac <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e091      	b.n	8001cdc <HAL_ETH_Init+0x328>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001bb8:	f7ff fdea 	bl	8001790 <HAL_GetTick>
 8001bbc:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001bbe:	f107 030c 	add.w	r3, r7, #12
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 fb4a 	bl	8002260 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001bcc:	f7ff fde0 	bl	8001790 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d90f      	bls.n	8001bfe <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001be2:	6939      	ldr	r1, [r7, #16]
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 fd61 	bl	80026ac <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e06e      	b.n	8001cdc <HAL_ETH_Init+0x328>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f003 0320 	and.w	r3, r3, #32
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0da      	beq.n	8001bbe <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001c08:	f107 030c 	add.w	r3, r7, #12
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	2110      	movs	r1, #16
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 fb25 	bl	8002260 <HAL_ETH_ReadPHYRegister>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d00b      	beq.n	8001c34 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001c20:	6939      	ldr	r1, [r7, #16]
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 fd42 	bl	80026ac <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001c30:	2301      	movs	r3, #1
 8001c32:	e053      	b.n	8001cdc <HAL_ETH_Init+0x328>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f003 0304 	and.w	r3, r3, #4
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d012      	beq.n	8001c64 <HAL_ETH_Init+0x2b0>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	e010      	b.n	8001c6a <HAL_ETH_Init+0x2b6>
 8001c48:	03938700 	.word	0x03938700
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40013800 	.word	0x40013800
 8001c54:	01312cff 	.word	0x01312cff
 8001c58:	02160ebf 	.word	0x02160ebf
 8001c5c:	05f5e0ff 	.word	0x05f5e0ff
 8001c60:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d003      	beq.n	8001c7c <HAL_ETH_Init+0x2c8>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	e026      	b.n	8001cca <HAL_ETH_Init+0x316>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	e021      	b.n	8001cca <HAL_ETH_Init+0x316>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	08db      	lsrs	r3, r3, #3
 8001c8c:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	085b      	lsrs	r3, r3, #1
 8001c94:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001c96:	4313      	orrs	r3, r2
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 fb46 	bl	8002330 <HAL_ETH_WritePHYRegister>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00b      	beq.n	8001cc2 <HAL_ETH_Init+0x30e>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001cae:	6939      	ldr	r1, [r7, #16]
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 fcfb 	bl	80026ac <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e00c      	b.n	8001cdc <HAL_ETH_Init+0x328>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001cc2:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001cc6:	f7ff fd6f 	bl	80017a8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001cca:	6939      	ldr	r1, [r7, #16]
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 fced 	bl	80026ac <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3720      	adds	r7, #32
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b087      	sub	sp, #28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
 8001cf0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d101      	bne.n	8001d04 <HAL_ETH_DMATxDescListInit+0x20>
 8001d00:	2302      	movs	r3, #2
 8001d02:	e051      	b.n	8001da8 <HAL_ETH_DMATxDescListInit+0xc4>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2202      	movs	r2, #2
 8001d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	e030      	b.n	8001d82 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	015b      	lsls	r3, r3, #5
 8001d24:	68ba      	ldr	r2, [r7, #8]
 8001d26:	4413      	add	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d30:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001d38:	fb02 f303 	mul.w	r3, r2, r3
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	4413      	add	r3, r2
 8001d40:	461a      	mov	r2, r3
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d105      	bne.n	8001d5a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d208      	bcs.n	8001d76 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	3301      	adds	r3, #1
 8001d68:	015b      	lsls	r3, r3, #5
 8001d6a:	68ba      	ldr	r2, [r7, #8]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	461a      	mov	r2, r3
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	60da      	str	r2, [r3, #12]
 8001d74:	e002      	b.n	8001d7c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001d76:	68ba      	ldr	r2, [r7, #8]
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d3ca      	bcc.n	8001d20 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d94:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	371c      	adds	r7, #28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
 8001dc0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d101      	bne.n	8001dd4 <HAL_ETH_DMARxDescListInit+0x20>
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	e055      	b.n	8001e80 <HAL_ETH_DMARxDescListInit+0xcc>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2202      	movs	r2, #2
 8001de0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	e034      	b.n	8001e5a <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	015b      	lsls	r3, r3, #5
 8001df4:	68ba      	ldr	r2, [r7, #8]
 8001df6:	4413      	add	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001e00:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001e08:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001e10:	fb02 f303 	mul.w	r3, r2, r3
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	4413      	add	r3, r2
 8001e18:	461a      	mov	r2, r3
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d105      	bne.n	8001e32 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	3b01      	subs	r3, #1
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d208      	bcs.n	8001e4e <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	015b      	lsls	r3, r3, #5
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	4413      	add	r3, r2
 8001e46:	461a      	mov	r2, r3
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	60da      	str	r2, [r3, #12]
 8001e4c:	e002      	b.n	8001e54 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	3301      	adds	r3, #1
 8001e58:	617b      	str	r3, [r7, #20]
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d3c6      	bcc.n	8001df0 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e6c:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	371c      	adds	r7, #28
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b087      	sub	sp, #28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d101      	bne.n	8001eb0 <HAL_ETH_TransmitFrame+0x24>
 8001eac:	2302      	movs	r3, #2
 8001eae:	e0cc      	b.n	800204a <HAL_ETH_TransmitFrame+0x1be>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2202      	movs	r2, #2
 8001ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d109      	bne.n	8001eda <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e0b7      	b.n	800204a <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	da09      	bge.n	8001ef8 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2212      	movs	r2, #18
 8001ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e0a8      	b.n	800204a <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d915      	bls.n	8001f2e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	4a54      	ldr	r2, [pc, #336]	; (8002058 <HAL_ETH_TransmitFrame+0x1cc>)
 8001f06:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0a:	0a9b      	lsrs	r3, r3, #10
 8001f0c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	4b51      	ldr	r3, [pc, #324]	; (8002058 <HAL_ETH_TransmitFrame+0x1cc>)
 8001f12:	fba3 1302 	umull	r1, r3, r3, r2
 8001f16:	0a9b      	lsrs	r3, r3, #10
 8001f18:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001f1c:	fb01 f303 	mul.w	r3, r1, r3
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d005      	beq.n	8001f32 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	e001      	b.n	8001f32 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d11c      	bne.n	8001f72 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f42:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001f46:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001f52:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f62:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f70:	e04b      	b.n	800200a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8001f72:	2300      	movs	r3, #0
 8001f74:	613b      	str	r3, [r7, #16]
 8001f76:	e044      	b.n	8002002 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f82:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f86:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d107      	bne.n	8001f9e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f98:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f9c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001fa6:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	3b01      	subs	r3, #1
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d116      	bne.n	8001fe0 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fbc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001fc0:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	4a25      	ldr	r2, [pc, #148]	; (800205c <HAL_ETH_TransmitFrame+0x1d0>)
 8001fc6:	fb03 f202 	mul.w	r2, r3, r2
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	4413      	add	r3, r2
 8001fce:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001fd2:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001fde:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fea:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001fee:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	3301      	adds	r3, #1
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	429a      	cmp	r2, r3
 8002008:	d3b6      	bcc.n	8001f78 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00d      	beq.n	8002038 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002024:	461a      	mov	r2, r3
 8002026:	2304      	movs	r3, #4
 8002028:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002032:	461a      	mov	r2, r3
 8002034:	2300      	movs	r3, #0
 8002036:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	371c      	adds	r7, #28
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	ac02b00b 	.word	0xac02b00b
 800205c:	fffffa0c 	.word	0xfffffa0c

08002060 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002072:	2b01      	cmp	r3, #1
 8002074:	d101      	bne.n	800207a <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8002076:	2302      	movs	r3, #2
 8002078:	e074      	b.n	8002164 <HAL_ETH_GetReceivedFrame_IT+0x104>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2202      	movs	r2, #2
 8002086:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800208a:	e05a      	b.n	8002142 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	3301      	adds	r3, #1
 8002090:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800209c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020a0:	d10d      	bne.n	80020be <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	461a      	mov	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	629a      	str	r2, [r3, #40]	; 0x28
 80020bc:	e041      	b.n	8002142 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10b      	bne.n	80020e4 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d0:	1c5a      	adds	r2, r3, #1
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	461a      	mov	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	629a      	str	r2, [r3, #40]	; 0x28
 80020e2:	e02e      	b.n	8002142 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f0:	1c5a      	adds	r2, r3, #1
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d103      	bne.n	8002106 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	0c1b      	lsrs	r3, r3, #16
 800210e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002112:	1f1a      	subs	r2, r3, #4
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	461a      	mov	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	e010      	b.n	8002164 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	db02      	blt.n	8002152 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2b03      	cmp	r3, #3
 8002150:	d99c      	bls.n	800208c <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
}
 8002164:	4618      	mov	r0, r3
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002186:	2b40      	cmp	r3, #64	; 0x40
 8002188:	d112      	bne.n	80021b0 <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f003 fe58 	bl	8005e40 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002198:	461a      	mov	r2, r3
 800219a:	2340      	movs	r3, #64	; 0x40
 800219c:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80021ae:	e01a      	b.n	80021e6 <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d111      	bne.n	80021e6 <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f838 	bl	8002238 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021d0:	461a      	mov	r2, r3
 80021d2:	2301      	movs	r3, #1
 80021d4:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ee:	461a      	mov	r2, r3
 80021f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021f4:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002204:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002208:	d112      	bne.n	8002230 <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f81e 	bl	800224c <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002218:	461a      	mov	r2, r3
 800221a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800221e:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8002230:	bf00      	nop
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	460b      	mov	r3, r1
 800226a:	607a      	str	r2, [r7, #4]
 800226c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 800226e:	2300      	movs	r3, #0
 8002270:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b82      	cmp	r3, #130	; 0x82
 8002280:	d101      	bne.n	8002286 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002282:	2302      	movs	r3, #2
 8002284:	e050      	b.n	8002328 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2282      	movs	r2, #130	; 0x82
 800228a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	f003 031c 	and.w	r3, r3, #28
 800229c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8a1b      	ldrh	r3, [r3, #16]
 80022a2:	02db      	lsls	r3, r3, #11
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80022ac:	897b      	ldrh	r3, [r7, #10]
 80022ae:	019b      	lsls	r3, r3, #6
 80022b0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f023 0302 	bic.w	r3, r3, #2
 80022c0:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80022d2:	f7ff fa5d 	bl	8001790 <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80022d8:	e015      	b.n	8002306 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80022da:	f7ff fa59 	bl	8001790 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022e8:	d309      	bcc.n	80022fe <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e014      	b.n	8002328 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1e4      	bne.n	80022da <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	b29b      	uxth	r3, r3
 8002318:	461a      	mov	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	460b      	mov	r3, r1
 800233a:	607a      	str	r2, [r7, #4]
 800233c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002342:	2300      	movs	r3, #0
 8002344:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b42      	cmp	r3, #66	; 0x42
 8002350:	d101      	bne.n	8002356 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002352:	2302      	movs	r3, #2
 8002354:	e04e      	b.n	80023f4 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2242      	movs	r2, #66	; 0x42
 800235a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f003 031c 	and.w	r3, r3, #28
 800236c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8a1b      	ldrh	r3, [r3, #16]
 8002372:	02db      	lsls	r3, r3, #11
 8002374:	b29b      	uxth	r3, r3
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	4313      	orrs	r3, r2
 800237a:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800237c:	897b      	ldrh	r3, [r7, #10]
 800237e:	019b      	lsls	r3, r3, #6
 8002380:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	4313      	orrs	r3, r2
 8002388:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	f043 0302 	orr.w	r3, r3, #2
 8002390:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	b29a      	uxth	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80023ac:	f7ff f9f0 	bl	8001790 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80023b2:	e015      	b.n	80023e0 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80023b4:	f7ff f9ec 	bl	8001790 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c2:	d309      	bcc.n	80023d8 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e00d      	b.n	80023f4 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1e4      	bne.n	80023b4 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800240a:	2b01      	cmp	r3, #1
 800240c:	d101      	bne.n	8002412 <HAL_ETH_Start+0x16>
 800240e:	2302      	movs	r3, #2
 8002410:	e01f      	b.n	8002452 <HAL_ETH_Start+0x56>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2202      	movs	r2, #2
 800241e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 fb40 	bl	8002aa8 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 fb77 	bl	8002b1c <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 fc06 	bl	8002c40 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 fbab 	bl	8002b90 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 fbd4 	bl	8002be8 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800245a:	b580      	push	{r7, lr}
 800245c:	b082      	sub	sp, #8
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002468:	2b01      	cmp	r3, #1
 800246a:	d101      	bne.n	8002470 <HAL_ETH_Stop+0x16>
 800246c:	2302      	movs	r3, #2
 800246e:	e01f      	b.n	80024b0 <HAL_ETH_Stop+0x56>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2202      	movs	r2, #2
 800247c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 fb9b 	bl	8002bbc <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 fbc4 	bl	8002c14 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 fb62 	bl	8002b56 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 fbd4 	bl	8002c40 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 fb22 	bl	8002ae2 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d101      	bne.n	80024d4 <HAL_ETH_ConfigMAC+0x1c>
 80024d0:	2302      	movs	r3, #2
 80024d2:	e0e4      	b.n	800269e <HAL_ETH_ConfigMAC+0x1e6>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2202      	movs	r2, #2
 80024e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 80b1 	beq.w	800264e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	4b6c      	ldr	r3, [pc, #432]	; (80026a8 <HAL_ETH_ConfigMAC+0x1f0>)
 80024f8:	4013      	ands	r3, r2
 80024fa:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002504:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800250a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002510:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8002516:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 800251c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8002522:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002528:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800252e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8002534:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800253a:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002540:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8002546:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	4313      	orrs	r3, r2
 800254c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800255e:	2001      	movs	r0, #1
 8002560:	f7ff f922 	bl	80017a8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002574:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800257a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002580:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8002586:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 800258c:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8002592:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800259e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80025a0:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80025aa:	2001      	movs	r0, #1
 80025ac:	f7ff f8fc 	bl	80017a8 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80025c0:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80025ca:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80025da:	4013      	ands	r3, r2
 80025dc:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e2:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80025e8:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80025ee:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80025f4:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80025fa:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002600:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	4313      	orrs	r3, r2
 8002606:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002618:	2001      	movs	r0, #1
 800261a:	f7ff f8c5 	bl	80017a8 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	430a      	orrs	r2, r1
 8002634:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800263e:	2001      	movs	r0, #1
 8002640:	f7ff f8b2 	bl	80017a8 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	61da      	str	r2, [r3, #28]
 800264c:	e01e      	b.n	800268c <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800265c:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689a      	ldr	r2, [r3, #8]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	4313      	orrs	r3, r2
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	4313      	orrs	r3, r2
 800266c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800267e:	2001      	movs	r0, #1
 8002680:	f7ff f892 	bl	80017a8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	ff20810f 	.word	0xff20810f

080026ac <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b0b0      	sub	sp, #192	; 0xc0
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80026b6:	2300      	movs	r3, #0
 80026b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d007      	beq.n	80026d2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026c8:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80026d2:	2300      	movs	r3, #0
 80026d4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80026d6:	2300      	movs	r3, #0
 80026d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80026da:	2300      	movs	r3, #0
 80026dc:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80026de:	2300      	movs	r3, #0
 80026e0:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80026e2:	2300      	movs	r3, #0
 80026e4:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80026e6:	2300      	movs	r3, #0
 80026e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d103      	bne.n	80026fa <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80026f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026f6:	663b      	str	r3, [r7, #96]	; 0x60
 80026f8:	e001      	b.n	80026fe <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80026fa:	2300      	movs	r3, #0
 80026fc:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80026fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002702:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002704:	2300      	movs	r3, #0
 8002706:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002708:	2300      	movs	r3, #0
 800270a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800270c:	2300      	movs	r3, #0
 800270e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002710:	2300      	movs	r3, #0
 8002712:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002714:	2300      	movs	r3, #0
 8002716:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002718:	2340      	movs	r3, #64	; 0x40
 800271a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800271c:	2300      	movs	r3, #0
 800271e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002722:	2300      	movs	r3, #0
 8002724:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002728:	2300      	movs	r3, #0
 800272a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800272e:	2300      	movs	r3, #0
 8002730:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002734:	2300      	movs	r3, #0
 8002736:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 800273a:	2300      	movs	r3, #0
 800273c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002740:	2300      	movs	r3, #0
 8002742:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8002746:	2300      	movs	r3, #0
 8002748:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800274c:	2380      	movs	r3, #128	; 0x80
 800274e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002752:	2300      	movs	r3, #0
 8002754:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002758:	2300      	movs	r3, #0
 800275a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800275e:	2300      	movs	r3, #0
 8002760:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002764:	2300      	movs	r3, #0
 8002766:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800276a:	2300      	movs	r3, #0
 800276c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002770:	2300      	movs	r3, #0
 8002772:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002780:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002784:	4ba9      	ldr	r3, [pc, #676]	; (8002a2c <ETH_MACDMAConfig+0x380>)
 8002786:	4013      	ands	r3, r2
 8002788:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800278c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800278e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002790:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002794:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002796:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002798:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800279e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80027a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80027a2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80027a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80027a6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80027ac:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80027ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80027b0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80027b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80027b4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80027b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80027b8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80027ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80027bc:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80027be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80027c0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80027c2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027c6:	4313      	orrs	r3, r2
 80027c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027d4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027e0:	2001      	movs	r0, #1
 80027e2:	f7fe ffe1 	bl	80017a8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027ee:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80027f0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80027f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80027f4:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80027f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80027f8:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80027fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80027fe:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002800:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002804:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002806:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800280a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800280c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002810:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002814:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800281c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800281e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800282a:	2001      	movs	r0, #1
 800282c:	f7fe ffbc 	bl	80017a8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002838:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002842:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800284c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002858:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800285c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002860:	4013      	ands	r3, r2
 8002862:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002866:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800286a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800286c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002870:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002872:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002876:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002878:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800287c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800287e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002882:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002884:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002888:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800288a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800288e:	4313      	orrs	r3, r2
 8002890:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800289c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80028a8:	2001      	movs	r0, #1
 80028aa:	f7fe ff7d 	bl	80017a8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80028b6:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80028b8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80028bc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80028d2:	2001      	movs	r0, #1
 80028d4:	f7fe ff68 	bl	80017a8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80028e0:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80028e2:	2300      	movs	r3, #0
 80028e4:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80028e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028ea:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80028ec:	2300      	movs	r3, #0
 80028ee:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80028f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028f4:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80028f6:	2300      	movs	r3, #0
 80028f8:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80028fa:	2300      	movs	r3, #0
 80028fc:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80028fe:	2300      	movs	r3, #0
 8002900:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002902:	2300      	movs	r3, #0
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002906:	2304      	movs	r3, #4
 8002908:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800290a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800290e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002910:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002914:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002916:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800291a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800291c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002920:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002922:	2380      	movs	r3, #128	; 0x80
 8002924:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002926:	2300      	movs	r3, #0
 8002928:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800292a:	2300      	movs	r3, #0
 800292c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800293c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002940:	4b3b      	ldr	r3, [pc, #236]	; (8002a30 <ETH_MACDMAConfig+0x384>)
 8002942:	4013      	ands	r3, r2
 8002944:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002948:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800294a:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800294c:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800294e:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002950:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002952:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002954:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002956:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002958:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800295a:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800295c:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800295e:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002960:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002964:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002966:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002968:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800296a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800296e:	4313      	orrs	r3, r2
 8002970:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800297c:	461a      	mov	r2, r3
 800297e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002982:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002992:	2001      	movs	r0, #1
 8002994:	f7fe ff08 	bl	80017a8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029a0:	461a      	mov	r2, r3
 80029a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80029a6:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80029a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80029aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80029ac:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80029ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80029b0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80029b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80029b4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80029b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80029b8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80029ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029bc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80029be:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80029c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80029c2:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	6812      	ldr	r2, [r2, #0]
 80029c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80029d0:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80029e0:	2001      	movs	r0, #1
 80029e2:	f7fe fee1 	bl	80017a8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029ee:	461a      	mov	r2, r3
 80029f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80029f4:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d10b      	bne.n	8002a16 <ETH_MACDMAConfig+0x36a>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a06:	69d9      	ldr	r1, [r3, #28]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	4b09      	ldr	r3, [pc, #36]	; (8002a34 <ETH_MACDMAConfig+0x388>)
 8002a0e:	430b      	orrs	r3, r1
 8002a10:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a14:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f80a 	bl	8002a38 <ETH_MACAddressConfig>
}
 8002a24:	bf00      	nop
 8002a26:	37c0      	adds	r7, #192	; 0xc0
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	ff20810f 	.word	0xff20810f
 8002a30:	f8de3f23 	.word	0xf8de3f23
 8002a34:	00010040 	.word	0x00010040

08002a38 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b087      	sub	sp, #28
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3305      	adds	r3, #5
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	021b      	lsls	r3, r3, #8
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	3204      	adds	r2, #4
 8002a50:	7812      	ldrb	r2, [r2, #0]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	4b11      	ldr	r3, [pc, #68]	; (8002aa0 <ETH_MACAddressConfig+0x68>)
 8002a5a:	4413      	add	r3, r2
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3303      	adds	r3, #3
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	061a      	lsls	r2, r3, #24
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	3302      	adds	r3, #2
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	041b      	lsls	r3, r3, #16
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3301      	adds	r3, #1
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	021b      	lsls	r3, r3, #8
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	7812      	ldrb	r2, [r2, #0]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <ETH_MACAddressConfig+0x6c>)
 8002a8a:	4413      	add	r3, r2
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	6013      	str	r3, [r2, #0]
}
 8002a92:	bf00      	nop
 8002a94:	371c      	adds	r7, #28
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40028040 	.word	0x40028040
 8002aa4:	40028044 	.word	0x40028044

08002aa8 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0208 	orr.w	r2, r2, #8
 8002ac2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002acc:	2001      	movs	r0, #1
 8002ace:	f7fe fe6b 	bl	80017a8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	601a      	str	r2, [r3, #0]
}
 8002ada:	bf00      	nop
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b084      	sub	sp, #16
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002aea:	2300      	movs	r3, #0
 8002aec:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 0208 	bic.w	r2, r2, #8
 8002afc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b06:	2001      	movs	r0, #1
 8002b08:	f7fe fe4e 	bl	80017a8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	601a      	str	r2, [r3, #0]
}
 8002b14:	bf00      	nop
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0204 	orr.w	r2, r2, #4
 8002b36:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b40:	2001      	movs	r0, #1
 8002b42:	f7fe fe31 	bl	80017a8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	601a      	str	r2, [r3, #0]
}
 8002b4e:	bf00      	nop
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b084      	sub	sp, #16
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 0204 	bic.w	r2, r2, #4
 8002b70:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b7a:	2001      	movs	r0, #1
 8002b7c:	f7fe fe14 	bl	80017a8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	601a      	str	r2, [r3, #0]
}
 8002b88:	bf00      	nop
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6812      	ldr	r2, [r2, #0]
 8002ba6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002baa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002bae:	6193      	str	r3, [r2, #24]
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6812      	ldr	r2, [r2, #0]
 8002bd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bd6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002bda:	6193      	str	r3, [r2, #24]
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6812      	ldr	r2, [r2, #0]
 8002bfe:	f043 0302 	orr.w	r3, r3, #2
 8002c02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002c06:	6193      	str	r3, [r2, #24]
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6812      	ldr	r2, [r2, #0]
 8002c2a:	f023 0302 	bic.w	r3, r3, #2
 8002c2e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002c32:	6193      	str	r3, [r2, #24]
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c5e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002c62:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c70:	2001      	movs	r0, #1
 8002c72:	f7fe fd99 	bl	80017a8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002c80:	6193      	str	r3, [r2, #24]
}
 8002c82:	bf00      	nop
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
	...

08002c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b089      	sub	sp, #36	; 0x24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002c96:	2300      	movs	r3, #0
 8002c98:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61fb      	str	r3, [r7, #28]
 8002caa:	e175      	b.n	8002f98 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002cac:	2201      	movs	r2, #1
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	f040 8164 	bne.w	8002f92 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f003 0303 	and.w	r3, r3, #3
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d005      	beq.n	8002ce2 <HAL_GPIO_Init+0x56>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f003 0303 	and.w	r3, r3, #3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d130      	bne.n	8002d44 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	2203      	movs	r2, #3
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d18:	2201      	movs	r2, #1
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	43db      	mvns	r3, r3
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4013      	ands	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	091b      	lsrs	r3, r3, #4
 8002d2e:	f003 0201 	and.w	r2, r3, #1
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f003 0303 	and.w	r3, r3, #3
 8002d4c:	2b03      	cmp	r3, #3
 8002d4e:	d017      	beq.n	8002d80 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	2203      	movs	r2, #3
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4013      	ands	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f003 0303 	and.w	r3, r3, #3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d123      	bne.n	8002dd4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	08da      	lsrs	r2, r3, #3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3208      	adds	r2, #8
 8002d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	220f      	movs	r2, #15
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	43db      	mvns	r3, r3
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4013      	ands	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	691a      	ldr	r2, [r3, #16]
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	08da      	lsrs	r2, r3, #3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	3208      	adds	r2, #8
 8002dce:	69b9      	ldr	r1, [r7, #24]
 8002dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	2203      	movs	r2, #3
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	43db      	mvns	r3, r3
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	4013      	ands	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f003 0203 	and.w	r2, r3, #3
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 80be 	beq.w	8002f92 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e16:	4b66      	ldr	r3, [pc, #408]	; (8002fb0 <HAL_GPIO_Init+0x324>)
 8002e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1a:	4a65      	ldr	r2, [pc, #404]	; (8002fb0 <HAL_GPIO_Init+0x324>)
 8002e1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e20:	6453      	str	r3, [r2, #68]	; 0x44
 8002e22:	4b63      	ldr	r3, [pc, #396]	; (8002fb0 <HAL_GPIO_Init+0x324>)
 8002e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002e2e:	4a61      	ldr	r2, [pc, #388]	; (8002fb4 <HAL_GPIO_Init+0x328>)
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	089b      	lsrs	r3, r3, #2
 8002e34:	3302      	adds	r3, #2
 8002e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	220f      	movs	r2, #15
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a58      	ldr	r2, [pc, #352]	; (8002fb8 <HAL_GPIO_Init+0x32c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d037      	beq.n	8002eca <HAL_GPIO_Init+0x23e>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a57      	ldr	r2, [pc, #348]	; (8002fbc <HAL_GPIO_Init+0x330>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d031      	beq.n	8002ec6 <HAL_GPIO_Init+0x23a>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a56      	ldr	r2, [pc, #344]	; (8002fc0 <HAL_GPIO_Init+0x334>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d02b      	beq.n	8002ec2 <HAL_GPIO_Init+0x236>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a55      	ldr	r2, [pc, #340]	; (8002fc4 <HAL_GPIO_Init+0x338>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d025      	beq.n	8002ebe <HAL_GPIO_Init+0x232>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a54      	ldr	r2, [pc, #336]	; (8002fc8 <HAL_GPIO_Init+0x33c>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d01f      	beq.n	8002eba <HAL_GPIO_Init+0x22e>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a53      	ldr	r2, [pc, #332]	; (8002fcc <HAL_GPIO_Init+0x340>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d019      	beq.n	8002eb6 <HAL_GPIO_Init+0x22a>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a52      	ldr	r2, [pc, #328]	; (8002fd0 <HAL_GPIO_Init+0x344>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d013      	beq.n	8002eb2 <HAL_GPIO_Init+0x226>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a51      	ldr	r2, [pc, #324]	; (8002fd4 <HAL_GPIO_Init+0x348>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d00d      	beq.n	8002eae <HAL_GPIO_Init+0x222>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a50      	ldr	r2, [pc, #320]	; (8002fd8 <HAL_GPIO_Init+0x34c>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d007      	beq.n	8002eaa <HAL_GPIO_Init+0x21e>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a4f      	ldr	r2, [pc, #316]	; (8002fdc <HAL_GPIO_Init+0x350>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d101      	bne.n	8002ea6 <HAL_GPIO_Init+0x21a>
 8002ea2:	2309      	movs	r3, #9
 8002ea4:	e012      	b.n	8002ecc <HAL_GPIO_Init+0x240>
 8002ea6:	230a      	movs	r3, #10
 8002ea8:	e010      	b.n	8002ecc <HAL_GPIO_Init+0x240>
 8002eaa:	2308      	movs	r3, #8
 8002eac:	e00e      	b.n	8002ecc <HAL_GPIO_Init+0x240>
 8002eae:	2307      	movs	r3, #7
 8002eb0:	e00c      	b.n	8002ecc <HAL_GPIO_Init+0x240>
 8002eb2:	2306      	movs	r3, #6
 8002eb4:	e00a      	b.n	8002ecc <HAL_GPIO_Init+0x240>
 8002eb6:	2305      	movs	r3, #5
 8002eb8:	e008      	b.n	8002ecc <HAL_GPIO_Init+0x240>
 8002eba:	2304      	movs	r3, #4
 8002ebc:	e006      	b.n	8002ecc <HAL_GPIO_Init+0x240>
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e004      	b.n	8002ecc <HAL_GPIO_Init+0x240>
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	e002      	b.n	8002ecc <HAL_GPIO_Init+0x240>
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e000      	b.n	8002ecc <HAL_GPIO_Init+0x240>
 8002eca:	2300      	movs	r3, #0
 8002ecc:	69fa      	ldr	r2, [r7, #28]
 8002ece:	f002 0203 	and.w	r2, r2, #3
 8002ed2:	0092      	lsls	r2, r2, #2
 8002ed4:	4093      	lsls	r3, r2
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002edc:	4935      	ldr	r1, [pc, #212]	; (8002fb4 <HAL_GPIO_Init+0x328>)
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	089b      	lsrs	r3, r3, #2
 8002ee2:	3302      	adds	r3, #2
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002eea:	4b3d      	ldr	r3, [pc, #244]	; (8002fe0 <HAL_GPIO_Init+0x354>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f0e:	4a34      	ldr	r2, [pc, #208]	; (8002fe0 <HAL_GPIO_Init+0x354>)
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f14:	4b32      	ldr	r3, [pc, #200]	; (8002fe0 <HAL_GPIO_Init+0x354>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	4013      	ands	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d003      	beq.n	8002f38 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f38:	4a29      	ldr	r2, [pc, #164]	; (8002fe0 <HAL_GPIO_Init+0x354>)
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f3e:	4b28      	ldr	r3, [pc, #160]	; (8002fe0 <HAL_GPIO_Init+0x354>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	43db      	mvns	r3, r3
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f62:	4a1f      	ldr	r2, [pc, #124]	; (8002fe0 <HAL_GPIO_Init+0x354>)
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f68:	4b1d      	ldr	r3, [pc, #116]	; (8002fe0 <HAL_GPIO_Init+0x354>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	43db      	mvns	r3, r3
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	4013      	ands	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d003      	beq.n	8002f8c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f8c:	4a14      	ldr	r2, [pc, #80]	; (8002fe0 <HAL_GPIO_Init+0x354>)
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	3301      	adds	r3, #1
 8002f96:	61fb      	str	r3, [r7, #28]
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	2b0f      	cmp	r3, #15
 8002f9c:	f67f ae86 	bls.w	8002cac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002fa0:	bf00      	nop
 8002fa2:	bf00      	nop
 8002fa4:	3724      	adds	r7, #36	; 0x24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	40013800 	.word	0x40013800
 8002fb8:	40020000 	.word	0x40020000
 8002fbc:	40020400 	.word	0x40020400
 8002fc0:	40020800 	.word	0x40020800
 8002fc4:	40020c00 	.word	0x40020c00
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	40021400 	.word	0x40021400
 8002fd0:	40021800 	.word	0x40021800
 8002fd4:	40021c00 	.word	0x40021c00
 8002fd8:	40022000 	.word	0x40022000
 8002fdc:	40022400 	.word	0x40022400
 8002fe0:	40013c00 	.word	0x40013c00

08002fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	460b      	mov	r3, r1
 8002fee:	807b      	strh	r3, [r7, #2]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ff4:	787b      	ldrb	r3, [r7, #1]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ffa:	887a      	ldrh	r2, [r7, #2]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003000:	e003      	b.n	800300a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003002:	887b      	ldrh	r3, [r7, #2]
 8003004:	041a      	lsls	r2, r3, #16
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	619a      	str	r2, [r3, #24]
}
 800300a:	bf00      	nop
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003016:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003018:	b08f      	sub	sp, #60	; 0x3c
 800301a:	af0a      	add	r7, sp, #40	; 0x28
 800301c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e116      	b.n	8003256 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d106      	bne.n	8003048 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7fe f984 	bl	8001350 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2203      	movs	r2, #3
 800304c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003058:	2b00      	cmp	r3, #0
 800305a:	d102      	bne.n	8003062 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f002 fa32 	bl	80054d0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	603b      	str	r3, [r7, #0]
 8003072:	687e      	ldr	r6, [r7, #4]
 8003074:	466d      	mov	r5, sp
 8003076:	f106 0410 	add.w	r4, r6, #16
 800307a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800307c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800307e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003080:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003082:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003086:	e885 0003 	stmia.w	r5, {r0, r1}
 800308a:	1d33      	adds	r3, r6, #4
 800308c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800308e:	6838      	ldr	r0, [r7, #0]
 8003090:	f002 f9c6 	bl	8005420 <USB_CoreInit>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d005      	beq.n	80030a6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2202      	movs	r2, #2
 800309e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e0d7      	b.n	8003256 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2100      	movs	r1, #0
 80030ac:	4618      	mov	r0, r3
 80030ae:	f002 fa20 	bl	80054f2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030b2:	2300      	movs	r3, #0
 80030b4:	73fb      	strb	r3, [r7, #15]
 80030b6:	e04a      	b.n	800314e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80030b8:	7bfa      	ldrb	r2, [r7, #15]
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	4613      	mov	r3, r2
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	1a9b      	subs	r3, r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	440b      	add	r3, r1
 80030c6:	333d      	adds	r3, #61	; 0x3d
 80030c8:	2201      	movs	r2, #1
 80030ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80030cc:	7bfa      	ldrb	r2, [r7, #15]
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	4613      	mov	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	1a9b      	subs	r3, r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	333c      	adds	r3, #60	; 0x3c
 80030dc:	7bfa      	ldrb	r2, [r7, #15]
 80030de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80030e0:	7bfa      	ldrb	r2, [r7, #15]
 80030e2:	7bfb      	ldrb	r3, [r7, #15]
 80030e4:	b298      	uxth	r0, r3
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	1a9b      	subs	r3, r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	3342      	adds	r3, #66	; 0x42
 80030f4:	4602      	mov	r2, r0
 80030f6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030f8:	7bfa      	ldrb	r2, [r7, #15]
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	4613      	mov	r3, r2
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	1a9b      	subs	r3, r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	333f      	adds	r3, #63	; 0x3f
 8003108:	2200      	movs	r2, #0
 800310a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800310c:	7bfa      	ldrb	r2, [r7, #15]
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	1a9b      	subs	r3, r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	3344      	adds	r3, #68	; 0x44
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003120:	7bfa      	ldrb	r2, [r7, #15]
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	1a9b      	subs	r3, r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	440b      	add	r3, r1
 800312e:	3348      	adds	r3, #72	; 0x48
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003134:	7bfa      	ldrb	r2, [r7, #15]
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	4613      	mov	r3, r2
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	1a9b      	subs	r3, r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	3350      	adds	r3, #80	; 0x50
 8003144:	2200      	movs	r2, #0
 8003146:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003148:	7bfb      	ldrb	r3, [r7, #15]
 800314a:	3301      	adds	r3, #1
 800314c:	73fb      	strb	r3, [r7, #15]
 800314e:	7bfa      	ldrb	r2, [r7, #15]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	429a      	cmp	r2, r3
 8003156:	d3af      	bcc.n	80030b8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003158:	2300      	movs	r3, #0
 800315a:	73fb      	strb	r3, [r7, #15]
 800315c:	e044      	b.n	80031e8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800315e:	7bfa      	ldrb	r2, [r7, #15]
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	4613      	mov	r3, r2
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	1a9b      	subs	r3, r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	440b      	add	r3, r1
 800316c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003170:	2200      	movs	r2, #0
 8003172:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003174:	7bfa      	ldrb	r2, [r7, #15]
 8003176:	6879      	ldr	r1, [r7, #4]
 8003178:	4613      	mov	r3, r2
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	1a9b      	subs	r3, r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003186:	7bfa      	ldrb	r2, [r7, #15]
 8003188:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800318a:	7bfa      	ldrb	r2, [r7, #15]
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	1a9b      	subs	r3, r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	440b      	add	r3, r1
 8003198:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800319c:	2200      	movs	r2, #0
 800319e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031a0:	7bfa      	ldrb	r2, [r7, #15]
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	1a9b      	subs	r3, r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80031b2:	2200      	movs	r2, #0
 80031b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031b6:	7bfa      	ldrb	r2, [r7, #15]
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	4613      	mov	r3, r2
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	1a9b      	subs	r3, r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	440b      	add	r3, r1
 80031c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031cc:	7bfa      	ldrb	r2, [r7, #15]
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	4613      	mov	r3, r2
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	1a9b      	subs	r3, r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80031de:	2200      	movs	r2, #0
 80031e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031e2:	7bfb      	ldrb	r3, [r7, #15]
 80031e4:	3301      	adds	r3, #1
 80031e6:	73fb      	strb	r3, [r7, #15]
 80031e8:	7bfa      	ldrb	r2, [r7, #15]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d3b5      	bcc.n	800315e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	603b      	str	r3, [r7, #0]
 80031f8:	687e      	ldr	r6, [r7, #4]
 80031fa:	466d      	mov	r5, sp
 80031fc:	f106 0410 	add.w	r4, r6, #16
 8003200:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003202:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003204:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003206:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003208:	e894 0003 	ldmia.w	r4, {r0, r1}
 800320c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003210:	1d33      	adds	r3, r6, #4
 8003212:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003214:	6838      	ldr	r0, [r7, #0]
 8003216:	f002 f9b9 	bl	800558c <USB_DevInit>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d005      	beq.n	800322c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2202      	movs	r2, #2
 8003224:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e014      	b.n	8003256 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003240:	2b01      	cmp	r3, #1
 8003242:	d102      	bne.n	800324a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 f80b 	bl	8003260 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f002 fb73 	bl	800593a <USB_DevDisconnect>

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3714      	adds	r7, #20
 800325a:	46bd      	mov	sp, r7
 800325c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003260 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800328e:	4b05      	ldr	r3, [pc, #20]	; (80032a4 <HAL_PCDEx_ActivateLPM+0x44>)
 8003290:	4313      	orrs	r3, r2
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3714      	adds	r7, #20
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	10000003 	.word	0x10000003

080032a8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032ac:	4b05      	ldr	r3, [pc, #20]	; (80032c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a04      	ldr	r2, [pc, #16]	; (80032c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80032b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b6:	6013      	str	r3, [r2, #0]
}
 80032b8:	bf00      	nop
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	40007000 	.word	0x40007000

080032c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80032d0:	2300      	movs	r3, #0
 80032d2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e291      	b.n	8003802 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 8087 	beq.w	80033fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032ec:	4b96      	ldr	r3, [pc, #600]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 030c 	and.w	r3, r3, #12
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d00c      	beq.n	8003312 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032f8:	4b93      	ldr	r3, [pc, #588]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f003 030c 	and.w	r3, r3, #12
 8003300:	2b08      	cmp	r3, #8
 8003302:	d112      	bne.n	800332a <HAL_RCC_OscConfig+0x62>
 8003304:	4b90      	ldr	r3, [pc, #576]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800330c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003310:	d10b      	bne.n	800332a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003312:	4b8d      	ldr	r3, [pc, #564]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d06c      	beq.n	80033f8 <HAL_RCC_OscConfig+0x130>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d168      	bne.n	80033f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e26b      	b.n	8003802 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003332:	d106      	bne.n	8003342 <HAL_RCC_OscConfig+0x7a>
 8003334:	4b84      	ldr	r3, [pc, #528]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a83      	ldr	r2, [pc, #524]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 800333a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800333e:	6013      	str	r3, [r2, #0]
 8003340:	e02e      	b.n	80033a0 <HAL_RCC_OscConfig+0xd8>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10c      	bne.n	8003364 <HAL_RCC_OscConfig+0x9c>
 800334a:	4b7f      	ldr	r3, [pc, #508]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a7e      	ldr	r2, [pc, #504]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 8003350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	4b7c      	ldr	r3, [pc, #496]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a7b      	ldr	r2, [pc, #492]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 800335c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	e01d      	b.n	80033a0 <HAL_RCC_OscConfig+0xd8>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800336c:	d10c      	bne.n	8003388 <HAL_RCC_OscConfig+0xc0>
 800336e:	4b76      	ldr	r3, [pc, #472]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a75      	ldr	r2, [pc, #468]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 8003374:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	4b73      	ldr	r3, [pc, #460]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a72      	ldr	r2, [pc, #456]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 8003380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	e00b      	b.n	80033a0 <HAL_RCC_OscConfig+0xd8>
 8003388:	4b6f      	ldr	r3, [pc, #444]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a6e      	ldr	r2, [pc, #440]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 800338e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003392:	6013      	str	r3, [r2, #0]
 8003394:	4b6c      	ldr	r3, [pc, #432]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a6b      	ldr	r2, [pc, #428]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 800339a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800339e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d013      	beq.n	80033d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a8:	f7fe f9f2 	bl	8001790 <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033b0:	f7fe f9ee 	bl	8001790 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b64      	cmp	r3, #100	; 0x64
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e21f      	b.n	8003802 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c2:	4b61      	ldr	r3, [pc, #388]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d0f0      	beq.n	80033b0 <HAL_RCC_OscConfig+0xe8>
 80033ce:	e014      	b.n	80033fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d0:	f7fe f9de 	bl	8001790 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033d8:	f7fe f9da 	bl	8001790 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b64      	cmp	r3, #100	; 0x64
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e20b      	b.n	8003802 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ea:	4b57      	ldr	r3, [pc, #348]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f0      	bne.n	80033d8 <HAL_RCC_OscConfig+0x110>
 80033f6:	e000      	b.n	80033fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d069      	beq.n	80034da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003406:	4b50      	ldr	r3, [pc, #320]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 030c 	and.w	r3, r3, #12
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00b      	beq.n	800342a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003412:	4b4d      	ldr	r3, [pc, #308]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 030c 	and.w	r3, r3, #12
 800341a:	2b08      	cmp	r3, #8
 800341c:	d11c      	bne.n	8003458 <HAL_RCC_OscConfig+0x190>
 800341e:	4b4a      	ldr	r3, [pc, #296]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d116      	bne.n	8003458 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800342a:	4b47      	ldr	r3, [pc, #284]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d005      	beq.n	8003442 <HAL_RCC_OscConfig+0x17a>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d001      	beq.n	8003442 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e1df      	b.n	8003802 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003442:	4b41      	ldr	r3, [pc, #260]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	493d      	ldr	r1, [pc, #244]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 8003452:	4313      	orrs	r3, r2
 8003454:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003456:	e040      	b.n	80034da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d023      	beq.n	80034a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003460:	4b39      	ldr	r3, [pc, #228]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a38      	ldr	r2, [pc, #224]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 8003466:	f043 0301 	orr.w	r3, r3, #1
 800346a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346c:	f7fe f990 	bl	8001790 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003474:	f7fe f98c 	bl	8001790 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e1bd      	b.n	8003802 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003486:	4b30      	ldr	r3, [pc, #192]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0f0      	beq.n	8003474 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003492:	4b2d      	ldr	r3, [pc, #180]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	4929      	ldr	r1, [pc, #164]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	600b      	str	r3, [r1, #0]
 80034a6:	e018      	b.n	80034da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034a8:	4b27      	ldr	r3, [pc, #156]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a26      	ldr	r2, [pc, #152]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 80034ae:	f023 0301 	bic.w	r3, r3, #1
 80034b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b4:	f7fe f96c 	bl	8001790 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034bc:	f7fe f968 	bl	8001790 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e199      	b.n	8003802 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ce:	4b1e      	ldr	r3, [pc, #120]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f0      	bne.n	80034bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d038      	beq.n	8003558 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d019      	beq.n	8003522 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034ee:	4b16      	ldr	r3, [pc, #88]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 80034f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034f2:	4a15      	ldr	r2, [pc, #84]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 80034f4:	f043 0301 	orr.w	r3, r3, #1
 80034f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034fa:	f7fe f949 	bl	8001790 <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003500:	e008      	b.n	8003514 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003502:	f7fe f945 	bl	8001790 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e176      	b.n	8003802 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003514:	4b0c      	ldr	r3, [pc, #48]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 8003516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0f0      	beq.n	8003502 <HAL_RCC_OscConfig+0x23a>
 8003520:	e01a      	b.n	8003558 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003522:	4b09      	ldr	r3, [pc, #36]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 8003524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003526:	4a08      	ldr	r2, [pc, #32]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 8003528:	f023 0301 	bic.w	r3, r3, #1
 800352c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352e:	f7fe f92f 	bl	8001790 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003534:	e00a      	b.n	800354c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003536:	f7fe f92b 	bl	8001790 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d903      	bls.n	800354c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e15c      	b.n	8003802 <HAL_RCC_OscConfig+0x53a>
 8003548:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800354c:	4b91      	ldr	r3, [pc, #580]	; (8003794 <HAL_RCC_OscConfig+0x4cc>)
 800354e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1ee      	bne.n	8003536 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 80a4 	beq.w	80036ae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003566:	4b8b      	ldr	r3, [pc, #556]	; (8003794 <HAL_RCC_OscConfig+0x4cc>)
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10d      	bne.n	800358e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003572:	4b88      	ldr	r3, [pc, #544]	; (8003794 <HAL_RCC_OscConfig+0x4cc>)
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	4a87      	ldr	r2, [pc, #540]	; (8003794 <HAL_RCC_OscConfig+0x4cc>)
 8003578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800357c:	6413      	str	r3, [r2, #64]	; 0x40
 800357e:	4b85      	ldr	r3, [pc, #532]	; (8003794 <HAL_RCC_OscConfig+0x4cc>)
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003586:	60bb      	str	r3, [r7, #8]
 8003588:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800358a:	2301      	movs	r3, #1
 800358c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800358e:	4b82      	ldr	r3, [pc, #520]	; (8003798 <HAL_RCC_OscConfig+0x4d0>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003596:	2b00      	cmp	r3, #0
 8003598:	d118      	bne.n	80035cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800359a:	4b7f      	ldr	r3, [pc, #508]	; (8003798 <HAL_RCC_OscConfig+0x4d0>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a7e      	ldr	r2, [pc, #504]	; (8003798 <HAL_RCC_OscConfig+0x4d0>)
 80035a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035a6:	f7fe f8f3 	bl	8001790 <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ae:	f7fe f8ef 	bl	8001790 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b64      	cmp	r3, #100	; 0x64
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e120      	b.n	8003802 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035c0:	4b75      	ldr	r3, [pc, #468]	; (8003798 <HAL_RCC_OscConfig+0x4d0>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0f0      	beq.n	80035ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d106      	bne.n	80035e2 <HAL_RCC_OscConfig+0x31a>
 80035d4:	4b6f      	ldr	r3, [pc, #444]	; (8003794 <HAL_RCC_OscConfig+0x4cc>)
 80035d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d8:	4a6e      	ldr	r2, [pc, #440]	; (8003794 <HAL_RCC_OscConfig+0x4cc>)
 80035da:	f043 0301 	orr.w	r3, r3, #1
 80035de:	6713      	str	r3, [r2, #112]	; 0x70
 80035e0:	e02d      	b.n	800363e <HAL_RCC_OscConfig+0x376>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10c      	bne.n	8003604 <HAL_RCC_OscConfig+0x33c>
 80035ea:	4b6a      	ldr	r3, [pc, #424]	; (8003794 <HAL_RCC_OscConfig+0x4cc>)
 80035ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ee:	4a69      	ldr	r2, [pc, #420]	; (8003794 <HAL_RCC_OscConfig+0x4cc>)
 80035f0:	f023 0301 	bic.w	r3, r3, #1
 80035f4:	6713      	str	r3, [r2, #112]	; 0x70
 80035f6:	4b67      	ldr	r3, [pc, #412]	; (8003794 <HAL_RCC_OscConfig+0x4cc>)
 80035f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fa:	4a66      	ldr	r2, [pc, #408]	; (8003794 <HAL_RCC_OscConfig+0x4cc>)
 80035fc:	f023 0304 	bic.w	r3, r3, #4
 8003600:	6713      	str	r3, [r2, #112]	; 0x70
 8003602:	e01c      	b.n	800363e <HAL_RCC_OscConfig+0x376>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	2b05      	cmp	r3, #5
 800360a:	d10c      	bne.n	8003626 <HAL_RCC_OscConfig+0x35e>
 800360c:	4b61      	ldr	r3, [pc, #388]	; (8003794 <HAL_RCC_OscConfig+0x4cc>)
 800360e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003610:	4a60      	ldr	r2, [pc, #384]	; (8003794 <HAL_RCC_OscConfig+0x4cc>)
 8003612:	f043 0304 	orr.w	r3, r3, #4
 8003616:	6713      	str	r3, [r2, #112]	; 0x70
 8003618:	4b5e      	ldr	r3, [pc, #376]	; (8003794 <HAL_RCC_OscConfig+0x4cc>)
 800361a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361c:	4a5d      	ldr	r2, [pc, #372]	; (8003794 <HAL_RCC_OscConfig+0x4cc>)
 800361e:	f043 0301 	orr.w	r3, r3, #1
 8003622:	6713      	str	r3, [r2, #112]	; 0x70
 8003624:	e00b      	b.n	800363e <HAL_RCC_OscConfig+0x376>
 8003626:	4b5b      	ldr	r3, [pc, #364]	; (8003794 <HAL_RCC_OscConfig+0x4cc>)
 8003628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362a:	4a5a      	ldr	r2, [pc, #360]	; (8003794 <HAL_RCC_OscConfig+0x4cc>)
 800362c:	f023 0301 	bic.w	r3, r3, #1
 8003630:	6713      	str	r3, [r2, #112]	; 0x70
 8003632:	4b58      	ldr	r3, [pc, #352]	; (8003794 <HAL_RCC_OscConfig+0x4cc>)
 8003634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003636:	4a57      	ldr	r2, [pc, #348]	; (8003794 <HAL_RCC_OscConfig+0x4cc>)
 8003638:	f023 0304 	bic.w	r3, r3, #4
 800363c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d015      	beq.n	8003672 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003646:	f7fe f8a3 	bl	8001790 <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800364c:	e00a      	b.n	8003664 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800364e:	f7fe f89f 	bl	8001790 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	f241 3288 	movw	r2, #5000	; 0x1388
 800365c:	4293      	cmp	r3, r2
 800365e:	d901      	bls.n	8003664 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e0ce      	b.n	8003802 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003664:	4b4b      	ldr	r3, [pc, #300]	; (8003794 <HAL_RCC_OscConfig+0x4cc>)
 8003666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0ee      	beq.n	800364e <HAL_RCC_OscConfig+0x386>
 8003670:	e014      	b.n	800369c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003672:	f7fe f88d 	bl	8001790 <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003678:	e00a      	b.n	8003690 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800367a:	f7fe f889 	bl	8001790 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	f241 3288 	movw	r2, #5000	; 0x1388
 8003688:	4293      	cmp	r3, r2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e0b8      	b.n	8003802 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003690:	4b40      	ldr	r3, [pc, #256]	; (8003794 <HAL_RCC_OscConfig+0x4cc>)
 8003692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1ee      	bne.n	800367a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800369c:	7dfb      	ldrb	r3, [r7, #23]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d105      	bne.n	80036ae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036a2:	4b3c      	ldr	r3, [pc, #240]	; (8003794 <HAL_RCC_OscConfig+0x4cc>)
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	4a3b      	ldr	r2, [pc, #236]	; (8003794 <HAL_RCC_OscConfig+0x4cc>)
 80036a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 80a4 	beq.w	8003800 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036b8:	4b36      	ldr	r3, [pc, #216]	; (8003794 <HAL_RCC_OscConfig+0x4cc>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f003 030c 	and.w	r3, r3, #12
 80036c0:	2b08      	cmp	r3, #8
 80036c2:	d06b      	beq.n	800379c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d149      	bne.n	8003760 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036cc:	4b31      	ldr	r3, [pc, #196]	; (8003794 <HAL_RCC_OscConfig+0x4cc>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a30      	ldr	r2, [pc, #192]	; (8003794 <HAL_RCC_OscConfig+0x4cc>)
 80036d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d8:	f7fe f85a 	bl	8001790 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e0:	f7fe f856 	bl	8001790 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e087      	b.n	8003802 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f2:	4b28      	ldr	r3, [pc, #160]	; (8003794 <HAL_RCC_OscConfig+0x4cc>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1f0      	bne.n	80036e0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	69da      	ldr	r2, [r3, #28]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	019b      	lsls	r3, r3, #6
 800370e:	431a      	orrs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003714:	085b      	lsrs	r3, r3, #1
 8003716:	3b01      	subs	r3, #1
 8003718:	041b      	lsls	r3, r3, #16
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003720:	061b      	lsls	r3, r3, #24
 8003722:	4313      	orrs	r3, r2
 8003724:	4a1b      	ldr	r2, [pc, #108]	; (8003794 <HAL_RCC_OscConfig+0x4cc>)
 8003726:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800372a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800372c:	4b19      	ldr	r3, [pc, #100]	; (8003794 <HAL_RCC_OscConfig+0x4cc>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a18      	ldr	r2, [pc, #96]	; (8003794 <HAL_RCC_OscConfig+0x4cc>)
 8003732:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003736:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003738:	f7fe f82a 	bl	8001790 <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003740:	f7fe f826 	bl	8001790 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e057      	b.n	8003802 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003752:	4b10      	ldr	r3, [pc, #64]	; (8003794 <HAL_RCC_OscConfig+0x4cc>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d0f0      	beq.n	8003740 <HAL_RCC_OscConfig+0x478>
 800375e:	e04f      	b.n	8003800 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003760:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <HAL_RCC_OscConfig+0x4cc>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a0b      	ldr	r2, [pc, #44]	; (8003794 <HAL_RCC_OscConfig+0x4cc>)
 8003766:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800376a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376c:	f7fe f810 	bl	8001790 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003774:	f7fe f80c 	bl	8001790 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e03d      	b.n	8003802 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003786:	4b03      	ldr	r3, [pc, #12]	; (8003794 <HAL_RCC_OscConfig+0x4cc>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1f0      	bne.n	8003774 <HAL_RCC_OscConfig+0x4ac>
 8003792:	e035      	b.n	8003800 <HAL_RCC_OscConfig+0x538>
 8003794:	40023800 	.word	0x40023800
 8003798:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800379c:	4b1b      	ldr	r3, [pc, #108]	; (800380c <HAL_RCC_OscConfig+0x544>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d028      	beq.n	80037fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d121      	bne.n	80037fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d11a      	bne.n	80037fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037cc:	4013      	ands	r3, r2
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037d2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d111      	bne.n	80037fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e2:	085b      	lsrs	r3, r3, #1
 80037e4:	3b01      	subs	r3, #1
 80037e6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d107      	bne.n	80037fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d001      	beq.n	8003800 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e000      	b.n	8003802 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3718      	adds	r7, #24
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	40023800 	.word	0x40023800

08003810 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800381a:	2300      	movs	r3, #0
 800381c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d101      	bne.n	8003828 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e0d0      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003828:	4b6a      	ldr	r3, [pc, #424]	; (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 030f 	and.w	r3, r3, #15
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	429a      	cmp	r2, r3
 8003834:	d910      	bls.n	8003858 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003836:	4b67      	ldr	r3, [pc, #412]	; (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f023 020f 	bic.w	r2, r3, #15
 800383e:	4965      	ldr	r1, [pc, #404]	; (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	4313      	orrs	r3, r2
 8003844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003846:	4b63      	ldr	r3, [pc, #396]	; (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 030f 	and.w	r3, r3, #15
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	429a      	cmp	r2, r3
 8003852:	d001      	beq.n	8003858 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e0b8      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d020      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0304 	and.w	r3, r3, #4
 800386c:	2b00      	cmp	r3, #0
 800386e:	d005      	beq.n	800387c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003870:	4b59      	ldr	r3, [pc, #356]	; (80039d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	4a58      	ldr	r2, [pc, #352]	; (80039d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003876:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800387a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0308 	and.w	r3, r3, #8
 8003884:	2b00      	cmp	r3, #0
 8003886:	d005      	beq.n	8003894 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003888:	4b53      	ldr	r3, [pc, #332]	; (80039d8 <HAL_RCC_ClockConfig+0x1c8>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	4a52      	ldr	r2, [pc, #328]	; (80039d8 <HAL_RCC_ClockConfig+0x1c8>)
 800388e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003892:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003894:	4b50      	ldr	r3, [pc, #320]	; (80039d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	494d      	ldr	r1, [pc, #308]	; (80039d8 <HAL_RCC_ClockConfig+0x1c8>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d040      	beq.n	8003934 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d107      	bne.n	80038ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ba:	4b47      	ldr	r3, [pc, #284]	; (80039d8 <HAL_RCC_ClockConfig+0x1c8>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d115      	bne.n	80038f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e07f      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d107      	bne.n	80038e2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038d2:	4b41      	ldr	r3, [pc, #260]	; (80039d8 <HAL_RCC_ClockConfig+0x1c8>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d109      	bne.n	80038f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e073      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e2:	4b3d      	ldr	r3, [pc, #244]	; (80039d8 <HAL_RCC_ClockConfig+0x1c8>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e06b      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038f2:	4b39      	ldr	r3, [pc, #228]	; (80039d8 <HAL_RCC_ClockConfig+0x1c8>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f023 0203 	bic.w	r2, r3, #3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	4936      	ldr	r1, [pc, #216]	; (80039d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003900:	4313      	orrs	r3, r2
 8003902:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003904:	f7fd ff44 	bl	8001790 <HAL_GetTick>
 8003908:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800390a:	e00a      	b.n	8003922 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800390c:	f7fd ff40 	bl	8001790 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	f241 3288 	movw	r2, #5000	; 0x1388
 800391a:	4293      	cmp	r3, r2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e053      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003922:	4b2d      	ldr	r3, [pc, #180]	; (80039d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 020c 	and.w	r2, r3, #12
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	429a      	cmp	r2, r3
 8003932:	d1eb      	bne.n	800390c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003934:	4b27      	ldr	r3, [pc, #156]	; (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 030f 	and.w	r3, r3, #15
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	429a      	cmp	r2, r3
 8003940:	d210      	bcs.n	8003964 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003942:	4b24      	ldr	r3, [pc, #144]	; (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f023 020f 	bic.w	r2, r3, #15
 800394a:	4922      	ldr	r1, [pc, #136]	; (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	4313      	orrs	r3, r2
 8003950:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003952:	4b20      	ldr	r3, [pc, #128]	; (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	429a      	cmp	r2, r3
 800395e:	d001      	beq.n	8003964 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e032      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b00      	cmp	r3, #0
 800396e:	d008      	beq.n	8003982 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003970:	4b19      	ldr	r3, [pc, #100]	; (80039d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	4916      	ldr	r1, [pc, #88]	; (80039d8 <HAL_RCC_ClockConfig+0x1c8>)
 800397e:	4313      	orrs	r3, r2
 8003980:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	2b00      	cmp	r3, #0
 800398c:	d009      	beq.n	80039a2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800398e:	4b12      	ldr	r3, [pc, #72]	; (80039d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	490e      	ldr	r1, [pc, #56]	; (80039d8 <HAL_RCC_ClockConfig+0x1c8>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039a2:	f000 f821 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 80039a6:	4602      	mov	r2, r0
 80039a8:	4b0b      	ldr	r3, [pc, #44]	; (80039d8 <HAL_RCC_ClockConfig+0x1c8>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	091b      	lsrs	r3, r3, #4
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	490a      	ldr	r1, [pc, #40]	; (80039dc <HAL_RCC_ClockConfig+0x1cc>)
 80039b4:	5ccb      	ldrb	r3, [r1, r3]
 80039b6:	fa22 f303 	lsr.w	r3, r2, r3
 80039ba:	4a09      	ldr	r2, [pc, #36]	; (80039e0 <HAL_RCC_ClockConfig+0x1d0>)
 80039bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039be:	4b09      	ldr	r3, [pc, #36]	; (80039e4 <HAL_RCC_ClockConfig+0x1d4>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fd fd3e 	bl	8001444 <HAL_InitTick>

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40023c00 	.word	0x40023c00
 80039d8:	40023800 	.word	0x40023800
 80039dc:	080291a4 	.word	0x080291a4
 80039e0:	20000004 	.word	0x20000004
 80039e4:	20000008 	.word	0x20000008

080039e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039ec:	b094      	sub	sp, #80	; 0x50
 80039ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80039f0:	2300      	movs	r3, #0
 80039f2:	647b      	str	r3, [r7, #68]	; 0x44
 80039f4:	2300      	movs	r3, #0
 80039f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039f8:	2300      	movs	r3, #0
 80039fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80039fc:	2300      	movs	r3, #0
 80039fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a00:	4b79      	ldr	r3, [pc, #484]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 030c 	and.w	r3, r3, #12
 8003a08:	2b08      	cmp	r3, #8
 8003a0a:	d00d      	beq.n	8003a28 <HAL_RCC_GetSysClockFreq+0x40>
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	f200 80e1 	bhi.w	8003bd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d002      	beq.n	8003a1c <HAL_RCC_GetSysClockFreq+0x34>
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d003      	beq.n	8003a22 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a1a:	e0db      	b.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a1c:	4b73      	ldr	r3, [pc, #460]	; (8003bec <HAL_RCC_GetSysClockFreq+0x204>)
 8003a1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a20:	e0db      	b.n	8003bda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a22:	4b73      	ldr	r3, [pc, #460]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a26:	e0d8      	b.n	8003bda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a28:	4b6f      	ldr	r3, [pc, #444]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a30:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003a32:	4b6d      	ldr	r3, [pc, #436]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d063      	beq.n	8003b06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a3e:	4b6a      	ldr	r3, [pc, #424]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	099b      	lsrs	r3, r3, #6
 8003a44:	2200      	movs	r2, #0
 8003a46:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a50:	633b      	str	r3, [r7, #48]	; 0x30
 8003a52:	2300      	movs	r3, #0
 8003a54:	637b      	str	r3, [r7, #52]	; 0x34
 8003a56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a5a:	4622      	mov	r2, r4
 8003a5c:	462b      	mov	r3, r5
 8003a5e:	f04f 0000 	mov.w	r0, #0
 8003a62:	f04f 0100 	mov.w	r1, #0
 8003a66:	0159      	lsls	r1, r3, #5
 8003a68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a6c:	0150      	lsls	r0, r2, #5
 8003a6e:	4602      	mov	r2, r0
 8003a70:	460b      	mov	r3, r1
 8003a72:	4621      	mov	r1, r4
 8003a74:	1a51      	subs	r1, r2, r1
 8003a76:	6139      	str	r1, [r7, #16]
 8003a78:	4629      	mov	r1, r5
 8003a7a:	eb63 0301 	sbc.w	r3, r3, r1
 8003a7e:	617b      	str	r3, [r7, #20]
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	f04f 0300 	mov.w	r3, #0
 8003a88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a8c:	4659      	mov	r1, fp
 8003a8e:	018b      	lsls	r3, r1, #6
 8003a90:	4651      	mov	r1, sl
 8003a92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a96:	4651      	mov	r1, sl
 8003a98:	018a      	lsls	r2, r1, #6
 8003a9a:	4651      	mov	r1, sl
 8003a9c:	ebb2 0801 	subs.w	r8, r2, r1
 8003aa0:	4659      	mov	r1, fp
 8003aa2:	eb63 0901 	sbc.w	r9, r3, r1
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	f04f 0300 	mov.w	r3, #0
 8003aae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ab2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ab6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003aba:	4690      	mov	r8, r2
 8003abc:	4699      	mov	r9, r3
 8003abe:	4623      	mov	r3, r4
 8003ac0:	eb18 0303 	adds.w	r3, r8, r3
 8003ac4:	60bb      	str	r3, [r7, #8]
 8003ac6:	462b      	mov	r3, r5
 8003ac8:	eb49 0303 	adc.w	r3, r9, r3
 8003acc:	60fb      	str	r3, [r7, #12]
 8003ace:	f04f 0200 	mov.w	r2, #0
 8003ad2:	f04f 0300 	mov.w	r3, #0
 8003ad6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ada:	4629      	mov	r1, r5
 8003adc:	024b      	lsls	r3, r1, #9
 8003ade:	4621      	mov	r1, r4
 8003ae0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ae4:	4621      	mov	r1, r4
 8003ae6:	024a      	lsls	r2, r1, #9
 8003ae8:	4610      	mov	r0, r2
 8003aea:	4619      	mov	r1, r3
 8003aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aee:	2200      	movs	r2, #0
 8003af0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003af2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003af4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003af8:	f7fc fc42 	bl	8000380 <__aeabi_uldivmod>
 8003afc:	4602      	mov	r2, r0
 8003afe:	460b      	mov	r3, r1
 8003b00:	4613      	mov	r3, r2
 8003b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b04:	e058      	b.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b06:	4b38      	ldr	r3, [pc, #224]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	099b      	lsrs	r3, r3, #6
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	4618      	mov	r0, r3
 8003b10:	4611      	mov	r1, r2
 8003b12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b16:	623b      	str	r3, [r7, #32]
 8003b18:	2300      	movs	r3, #0
 8003b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b20:	4642      	mov	r2, r8
 8003b22:	464b      	mov	r3, r9
 8003b24:	f04f 0000 	mov.w	r0, #0
 8003b28:	f04f 0100 	mov.w	r1, #0
 8003b2c:	0159      	lsls	r1, r3, #5
 8003b2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b32:	0150      	lsls	r0, r2, #5
 8003b34:	4602      	mov	r2, r0
 8003b36:	460b      	mov	r3, r1
 8003b38:	4641      	mov	r1, r8
 8003b3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b3e:	4649      	mov	r1, r9
 8003b40:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b44:	f04f 0200 	mov.w	r2, #0
 8003b48:	f04f 0300 	mov.w	r3, #0
 8003b4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b58:	ebb2 040a 	subs.w	r4, r2, sl
 8003b5c:	eb63 050b 	sbc.w	r5, r3, fp
 8003b60:	f04f 0200 	mov.w	r2, #0
 8003b64:	f04f 0300 	mov.w	r3, #0
 8003b68:	00eb      	lsls	r3, r5, #3
 8003b6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b6e:	00e2      	lsls	r2, r4, #3
 8003b70:	4614      	mov	r4, r2
 8003b72:	461d      	mov	r5, r3
 8003b74:	4643      	mov	r3, r8
 8003b76:	18e3      	adds	r3, r4, r3
 8003b78:	603b      	str	r3, [r7, #0]
 8003b7a:	464b      	mov	r3, r9
 8003b7c:	eb45 0303 	adc.w	r3, r5, r3
 8003b80:	607b      	str	r3, [r7, #4]
 8003b82:	f04f 0200 	mov.w	r2, #0
 8003b86:	f04f 0300 	mov.w	r3, #0
 8003b8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b8e:	4629      	mov	r1, r5
 8003b90:	028b      	lsls	r3, r1, #10
 8003b92:	4621      	mov	r1, r4
 8003b94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b98:	4621      	mov	r1, r4
 8003b9a:	028a      	lsls	r2, r1, #10
 8003b9c:	4610      	mov	r0, r2
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	61bb      	str	r3, [r7, #24]
 8003ba6:	61fa      	str	r2, [r7, #28]
 8003ba8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bac:	f7fc fbe8 	bl	8000380 <__aeabi_uldivmod>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003bb8:	4b0b      	ldr	r3, [pc, #44]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	0c1b      	lsrs	r3, r3, #16
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003bc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bd2:	e002      	b.n	8003bda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bd4:	4b05      	ldr	r3, [pc, #20]	; (8003bec <HAL_RCC_GetSysClockFreq+0x204>)
 8003bd6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3750      	adds	r7, #80	; 0x50
 8003be0:	46bd      	mov	sp, r7
 8003be2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003be6:	bf00      	nop
 8003be8:	40023800 	.word	0x40023800
 8003bec:	00f42400 	.word	0x00f42400
 8003bf0:	007a1200 	.word	0x007a1200

08003bf4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bf8:	4b03      	ldr	r3, [pc, #12]	; (8003c08 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	20000004 	.word	0x20000004

08003c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c10:	f7ff fff0 	bl	8003bf4 <HAL_RCC_GetHCLKFreq>
 8003c14:	4602      	mov	r2, r0
 8003c16:	4b05      	ldr	r3, [pc, #20]	; (8003c2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	0a9b      	lsrs	r3, r3, #10
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	4903      	ldr	r1, [pc, #12]	; (8003c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c22:	5ccb      	ldrb	r3, [r1, r3]
 8003c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	080291b4 	.word	0x080291b4

08003c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c38:	f7ff ffdc 	bl	8003bf4 <HAL_RCC_GetHCLKFreq>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	0b5b      	lsrs	r3, r3, #13
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	4903      	ldr	r1, [pc, #12]	; (8003c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c4a:	5ccb      	ldrb	r3, [r1, r3]
 8003c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	40023800 	.word	0x40023800
 8003c58:	080291b4 	.word	0x080291b4

08003c5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	220f      	movs	r2, #15
 8003c6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c6c:	4b12      	ldr	r3, [pc, #72]	; (8003cb8 <HAL_RCC_GetClockConfig+0x5c>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f003 0203 	and.w	r2, r3, #3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c78:	4b0f      	ldr	r3, [pc, #60]	; (8003cb8 <HAL_RCC_GetClockConfig+0x5c>)
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003c84:	4b0c      	ldr	r3, [pc, #48]	; (8003cb8 <HAL_RCC_GetClockConfig+0x5c>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003c90:	4b09      	ldr	r3, [pc, #36]	; (8003cb8 <HAL_RCC_GetClockConfig+0x5c>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	08db      	lsrs	r3, r3, #3
 8003c96:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c9e:	4b07      	ldr	r3, [pc, #28]	; (8003cbc <HAL_RCC_GetClockConfig+0x60>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 020f 	and.w	r2, r3, #15
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	601a      	str	r2, [r3, #0]
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	40023800 	.word	0x40023800
 8003cbc:	40023c00 	.word	0x40023c00

08003cc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b088      	sub	sp, #32
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d012      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ce8:	4b69      	ldr	r3, [pc, #420]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	4a68      	ldr	r2, [pc, #416]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003cf2:	6093      	str	r3, [r2, #8]
 8003cf4:	4b66      	ldr	r3, [pc, #408]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfc:	4964      	ldr	r1, [pc, #400]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d017      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d1a:	4b5d      	ldr	r3, [pc, #372]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d28:	4959      	ldr	r1, [pc, #356]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d38:	d101      	bne.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003d46:	2301      	movs	r3, #1
 8003d48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d017      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d56:	4b4e      	ldr	r3, [pc, #312]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d64:	494a      	ldr	r1, [pc, #296]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d74:	d101      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003d76:	2301      	movs	r3, #1
 8003d78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003d82:	2301      	movs	r3, #1
 8003d84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003d92:	2301      	movs	r3, #1
 8003d94:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0320 	and.w	r3, r3, #32
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f000 808b 	beq.w	8003eba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003da4:	4b3a      	ldr	r3, [pc, #232]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da8:	4a39      	ldr	r2, [pc, #228]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dae:	6413      	str	r3, [r2, #64]	; 0x40
 8003db0:	4b37      	ldr	r3, [pc, #220]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db8:	60bb      	str	r3, [r7, #8]
 8003dba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003dbc:	4b35      	ldr	r3, [pc, #212]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a34      	ldr	r2, [pc, #208]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dc8:	f7fd fce2 	bl	8001790 <HAL_GetTick>
 8003dcc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd0:	f7fd fcde 	bl	8001790 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b64      	cmp	r3, #100	; 0x64
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e357      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003de2:	4b2c      	ldr	r3, [pc, #176]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0f0      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003dee:	4b28      	ldr	r3, [pc, #160]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d035      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d02e      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e0c:	4b20      	ldr	r3, [pc, #128]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e14:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e16:	4b1e      	ldr	r3, [pc, #120]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1a:	4a1d      	ldr	r2, [pc, #116]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e20:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e22:	4b1b      	ldr	r3, [pc, #108]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e26:	4a1a      	ldr	r2, [pc, #104]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e2c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003e2e:	4a18      	ldr	r2, [pc, #96]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e34:	4b16      	ldr	r3, [pc, #88]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d114      	bne.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e40:	f7fd fca6 	bl	8001790 <HAL_GetTick>
 8003e44:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e46:	e00a      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e48:	f7fd fca2 	bl	8001790 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e319      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e5e:	4b0c      	ldr	r3, [pc, #48]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d0ee      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e76:	d111      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003e78:	4b05      	ldr	r3, [pc, #20]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e84:	4b04      	ldr	r3, [pc, #16]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003e86:	400b      	ands	r3, r1
 8003e88:	4901      	ldr	r1, [pc, #4]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	608b      	str	r3, [r1, #8]
 8003e8e:	e00b      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003e90:	40023800 	.word	0x40023800
 8003e94:	40007000 	.word	0x40007000
 8003e98:	0ffffcff 	.word	0x0ffffcff
 8003e9c:	4baa      	ldr	r3, [pc, #680]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	4aa9      	ldr	r2, [pc, #676]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ea2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003ea6:	6093      	str	r3, [r2, #8]
 8003ea8:	4ba7      	ldr	r3, [pc, #668]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003eaa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eb4:	49a4      	ldr	r1, [pc, #656]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0310 	and.w	r3, r3, #16
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d010      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ec6:	4ba0      	ldr	r3, [pc, #640]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ecc:	4a9e      	ldr	r2, [pc, #632]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ece:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ed2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003ed6:	4b9c      	ldr	r3, [pc, #624]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ed8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee0:	4999      	ldr	r1, [pc, #612]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00a      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ef4:	4b94      	ldr	r3, [pc, #592]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f02:	4991      	ldr	r1, [pc, #580]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00a      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f16:	4b8c      	ldr	r3, [pc, #560]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f24:	4988      	ldr	r1, [pc, #544]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00a      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f38:	4b83      	ldr	r3, [pc, #524]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f46:	4980      	ldr	r1, [pc, #512]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f5a:	4b7b      	ldr	r3, [pc, #492]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f68:	4977      	ldr	r1, [pc, #476]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00a      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f7c:	4b72      	ldr	r3, [pc, #456]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f82:	f023 0203 	bic.w	r2, r3, #3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8a:	496f      	ldr	r1, [pc, #444]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00a      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f9e:	4b6a      	ldr	r3, [pc, #424]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa4:	f023 020c 	bic.w	r2, r3, #12
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fac:	4966      	ldr	r1, [pc, #408]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00a      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fc0:	4b61      	ldr	r3, [pc, #388]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fce:	495e      	ldr	r1, [pc, #376]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00a      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fe2:	4b59      	ldr	r3, [pc, #356]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff0:	4955      	ldr	r1, [pc, #340]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00a      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004004:	4b50      	ldr	r3, [pc, #320]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004012:	494d      	ldr	r1, [pc, #308]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004014:	4313      	orrs	r3, r2
 8004016:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00a      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004026:	4b48      	ldr	r3, [pc, #288]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004034:	4944      	ldr	r1, [pc, #272]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004036:	4313      	orrs	r3, r2
 8004038:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00a      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004048:	4b3f      	ldr	r3, [pc, #252]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800404a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004056:	493c      	ldr	r1, [pc, #240]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004058:	4313      	orrs	r3, r2
 800405a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00a      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800406a:	4b37      	ldr	r3, [pc, #220]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800406c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004070:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004078:	4933      	ldr	r1, [pc, #204]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800407a:	4313      	orrs	r3, r2
 800407c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00a      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800408c:	4b2e      	ldr	r3, [pc, #184]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800408e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004092:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800409a:	492b      	ldr	r1, [pc, #172]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800409c:	4313      	orrs	r3, r2
 800409e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d011      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80040ae:	4b26      	ldr	r3, [pc, #152]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040bc:	4922      	ldr	r1, [pc, #136]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040cc:	d101      	bne.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80040ce:	2301      	movs	r3, #1
 80040d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80040de:	2301      	movs	r3, #1
 80040e0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00a      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040ee:	4b16      	ldr	r3, [pc, #88]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040fc:	4912      	ldr	r1, [pc, #72]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00b      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004110:	4b0d      	ldr	r3, [pc, #52]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004116:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004120:	4909      	ldr	r1, [pc, #36]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004122:	4313      	orrs	r3, r2
 8004124:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d006      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004136:	2b00      	cmp	r3, #0
 8004138:	f000 80d9 	beq.w	80042ee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800413c:	4b02      	ldr	r3, [pc, #8]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a01      	ldr	r2, [pc, #4]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004142:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004146:	e001      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004148:	40023800 	.word	0x40023800
 800414c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800414e:	f7fd fb1f 	bl	8001790 <HAL_GetTick>
 8004152:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004154:	e008      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004156:	f7fd fb1b 	bl	8001790 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b64      	cmp	r3, #100	; 0x64
 8004162:	d901      	bls.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e194      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004168:	4b6c      	ldr	r3, [pc, #432]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1f0      	bne.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	2b00      	cmp	r3, #0
 800417e:	d021      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004184:	2b00      	cmp	r3, #0
 8004186:	d11d      	bne.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004188:	4b64      	ldr	r3, [pc, #400]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800418a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800418e:	0c1b      	lsrs	r3, r3, #16
 8004190:	f003 0303 	and.w	r3, r3, #3
 8004194:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004196:	4b61      	ldr	r3, [pc, #388]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800419c:	0e1b      	lsrs	r3, r3, #24
 800419e:	f003 030f 	and.w	r3, r3, #15
 80041a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	019a      	lsls	r2, r3, #6
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	041b      	lsls	r3, r3, #16
 80041ae:	431a      	orrs	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	061b      	lsls	r3, r3, #24
 80041b4:	431a      	orrs	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	071b      	lsls	r3, r3, #28
 80041bc:	4957      	ldr	r1, [pc, #348]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d004      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041d8:	d00a      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d02e      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041ee:	d129      	bne.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80041f0:	4b4a      	ldr	r3, [pc, #296]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041f6:	0c1b      	lsrs	r3, r3, #16
 80041f8:	f003 0303 	and.w	r3, r3, #3
 80041fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041fe:	4b47      	ldr	r3, [pc, #284]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004200:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004204:	0f1b      	lsrs	r3, r3, #28
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	019a      	lsls	r2, r3, #6
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	041b      	lsls	r3, r3, #16
 8004216:	431a      	orrs	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	061b      	lsls	r3, r3, #24
 800421e:	431a      	orrs	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	071b      	lsls	r3, r3, #28
 8004224:	493d      	ldr	r1, [pc, #244]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004226:	4313      	orrs	r3, r2
 8004228:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800422c:	4b3b      	ldr	r3, [pc, #236]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800422e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004232:	f023 021f 	bic.w	r2, r3, #31
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423a:	3b01      	subs	r3, #1
 800423c:	4937      	ldr	r1, [pc, #220]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800423e:	4313      	orrs	r3, r2
 8004240:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d01d      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004250:	4b32      	ldr	r3, [pc, #200]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004252:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004256:	0e1b      	lsrs	r3, r3, #24
 8004258:	f003 030f 	and.w	r3, r3, #15
 800425c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800425e:	4b2f      	ldr	r3, [pc, #188]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004260:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004264:	0f1b      	lsrs	r3, r3, #28
 8004266:	f003 0307 	and.w	r3, r3, #7
 800426a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	019a      	lsls	r2, r3, #6
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	041b      	lsls	r3, r3, #16
 8004278:	431a      	orrs	r2, r3
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	061b      	lsls	r3, r3, #24
 800427e:	431a      	orrs	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	071b      	lsls	r3, r3, #28
 8004284:	4925      	ldr	r1, [pc, #148]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004286:	4313      	orrs	r3, r2
 8004288:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d011      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	019a      	lsls	r2, r3, #6
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	041b      	lsls	r3, r3, #16
 80042a4:	431a      	orrs	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	061b      	lsls	r3, r3, #24
 80042ac:	431a      	orrs	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	071b      	lsls	r3, r3, #28
 80042b4:	4919      	ldr	r1, [pc, #100]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80042bc:	4b17      	ldr	r3, [pc, #92]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a16      	ldr	r2, [pc, #88]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042c8:	f7fd fa62 	bl	8001790 <HAL_GetTick>
 80042cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042ce:	e008      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80042d0:	f7fd fa5e 	bl	8001790 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b64      	cmp	r3, #100	; 0x64
 80042dc:	d901      	bls.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e0d7      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042e2:	4b0e      	ldr	r3, [pc, #56]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0f0      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	f040 80cd 	bne.w	8004490 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80042f6:	4b09      	ldr	r3, [pc, #36]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a08      	ldr	r2, [pc, #32]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004300:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004302:	f7fd fa45 	bl	8001790 <HAL_GetTick>
 8004306:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004308:	e00a      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800430a:	f7fd fa41 	bl	8001790 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b64      	cmp	r3, #100	; 0x64
 8004316:	d903      	bls.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e0ba      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800431c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004320:	4b5e      	ldr	r3, [pc, #376]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004328:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800432c:	d0ed      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d003      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800433e:	2b00      	cmp	r3, #0
 8004340:	d009      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800434a:	2b00      	cmp	r3, #0
 800434c:	d02e      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004352:	2b00      	cmp	r3, #0
 8004354:	d12a      	bne.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004356:	4b51      	ldr	r3, [pc, #324]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435c:	0c1b      	lsrs	r3, r3, #16
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004364:	4b4d      	ldr	r3, [pc, #308]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436a:	0f1b      	lsrs	r3, r3, #28
 800436c:	f003 0307 	and.w	r3, r3, #7
 8004370:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	019a      	lsls	r2, r3, #6
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	041b      	lsls	r3, r3, #16
 800437c:	431a      	orrs	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	061b      	lsls	r3, r3, #24
 8004384:	431a      	orrs	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	071b      	lsls	r3, r3, #28
 800438a:	4944      	ldr	r1, [pc, #272]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800438c:	4313      	orrs	r3, r2
 800438e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004392:	4b42      	ldr	r3, [pc, #264]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004394:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004398:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a0:	3b01      	subs	r3, #1
 80043a2:	021b      	lsls	r3, r3, #8
 80043a4:	493d      	ldr	r1, [pc, #244]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d022      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043c0:	d11d      	bne.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80043c2:	4b36      	ldr	r3, [pc, #216]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c8:	0e1b      	lsrs	r3, r3, #24
 80043ca:	f003 030f 	and.w	r3, r3, #15
 80043ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80043d0:	4b32      	ldr	r3, [pc, #200]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d6:	0f1b      	lsrs	r3, r3, #28
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	019a      	lsls	r2, r3, #6
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	041b      	lsls	r3, r3, #16
 80043ea:	431a      	orrs	r2, r3
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	061b      	lsls	r3, r3, #24
 80043f0:	431a      	orrs	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	071b      	lsls	r3, r3, #28
 80043f6:	4929      	ldr	r1, [pc, #164]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0308 	and.w	r3, r3, #8
 8004406:	2b00      	cmp	r3, #0
 8004408:	d028      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800440a:	4b24      	ldr	r3, [pc, #144]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800440c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004410:	0e1b      	lsrs	r3, r3, #24
 8004412:	f003 030f 	and.w	r3, r3, #15
 8004416:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004418:	4b20      	ldr	r3, [pc, #128]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800441a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800441e:	0c1b      	lsrs	r3, r3, #16
 8004420:	f003 0303 	and.w	r3, r3, #3
 8004424:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	019a      	lsls	r2, r3, #6
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	041b      	lsls	r3, r3, #16
 8004430:	431a      	orrs	r2, r3
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	061b      	lsls	r3, r3, #24
 8004436:	431a      	orrs	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	69db      	ldr	r3, [r3, #28]
 800443c:	071b      	lsls	r3, r3, #28
 800443e:	4917      	ldr	r1, [pc, #92]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004440:	4313      	orrs	r3, r2
 8004442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004446:	4b15      	ldr	r3, [pc, #84]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004448:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800444c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004454:	4911      	ldr	r1, [pc, #68]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004456:	4313      	orrs	r3, r2
 8004458:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800445c:	4b0f      	ldr	r3, [pc, #60]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a0e      	ldr	r2, [pc, #56]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004466:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004468:	f7fd f992 	bl	8001790 <HAL_GetTick>
 800446c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800446e:	e008      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004470:	f7fd f98e 	bl	8001790 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b64      	cmp	r3, #100	; 0x64
 800447c:	d901      	bls.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e007      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004482:	4b06      	ldr	r3, [pc, #24]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800448a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800448e:	d1ef      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3720      	adds	r7, #32
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	40023800 	.word	0x40023800

080044a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e049      	b.n	8004546 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d106      	bne.n	80044cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f841 	bl	800454e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3304      	adds	r3, #4
 80044dc:	4619      	mov	r1, r3
 80044de:	4610      	mov	r0, r2
 80044e0:	f000 fa00 	bl	80048e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004556:	bf00      	nop
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
	...

08004564 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004572:	b2db      	uxtb	r3, r3
 8004574:	2b01      	cmp	r3, #1
 8004576:	d001      	beq.n	800457c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e054      	b.n	8004626 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2202      	movs	r2, #2
 8004580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68da      	ldr	r2, [r3, #12]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f042 0201 	orr.w	r2, r2, #1
 8004592:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a26      	ldr	r2, [pc, #152]	; (8004634 <HAL_TIM_Base_Start_IT+0xd0>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d022      	beq.n	80045e4 <HAL_TIM_Base_Start_IT+0x80>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045a6:	d01d      	beq.n	80045e4 <HAL_TIM_Base_Start_IT+0x80>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a22      	ldr	r2, [pc, #136]	; (8004638 <HAL_TIM_Base_Start_IT+0xd4>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d018      	beq.n	80045e4 <HAL_TIM_Base_Start_IT+0x80>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a21      	ldr	r2, [pc, #132]	; (800463c <HAL_TIM_Base_Start_IT+0xd8>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d013      	beq.n	80045e4 <HAL_TIM_Base_Start_IT+0x80>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a1f      	ldr	r2, [pc, #124]	; (8004640 <HAL_TIM_Base_Start_IT+0xdc>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d00e      	beq.n	80045e4 <HAL_TIM_Base_Start_IT+0x80>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a1e      	ldr	r2, [pc, #120]	; (8004644 <HAL_TIM_Base_Start_IT+0xe0>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d009      	beq.n	80045e4 <HAL_TIM_Base_Start_IT+0x80>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a1c      	ldr	r2, [pc, #112]	; (8004648 <HAL_TIM_Base_Start_IT+0xe4>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d004      	beq.n	80045e4 <HAL_TIM_Base_Start_IT+0x80>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a1b      	ldr	r2, [pc, #108]	; (800464c <HAL_TIM_Base_Start_IT+0xe8>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d115      	bne.n	8004610 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689a      	ldr	r2, [r3, #8]
 80045ea:	4b19      	ldr	r3, [pc, #100]	; (8004650 <HAL_TIM_Base_Start_IT+0xec>)
 80045ec:	4013      	ands	r3, r2
 80045ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2b06      	cmp	r3, #6
 80045f4:	d015      	beq.n	8004622 <HAL_TIM_Base_Start_IT+0xbe>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045fc:	d011      	beq.n	8004622 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f042 0201 	orr.w	r2, r2, #1
 800460c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800460e:	e008      	b.n	8004622 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 0201 	orr.w	r2, r2, #1
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	e000      	b.n	8004624 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004622:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3714      	adds	r7, #20
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	40010000 	.word	0x40010000
 8004638:	40000400 	.word	0x40000400
 800463c:	40000800 	.word	0x40000800
 8004640:	40000c00 	.word	0x40000c00
 8004644:	40010400 	.word	0x40010400
 8004648:	40014000 	.word	0x40014000
 800464c:	40001800 	.word	0x40001800
 8004650:	00010007 	.word	0x00010007

08004654 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b02      	cmp	r3, #2
 8004668:	d122      	bne.n	80046b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b02      	cmp	r3, #2
 8004676:	d11b      	bne.n	80046b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f06f 0202 	mvn.w	r2, #2
 8004680:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	f003 0303 	and.w	r3, r3, #3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f905 	bl	80048a6 <HAL_TIM_IC_CaptureCallback>
 800469c:	e005      	b.n	80046aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f8f7 	bl	8004892 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 f908 	bl	80048ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	f003 0304 	and.w	r3, r3, #4
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	d122      	bne.n	8004704 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	f003 0304 	and.w	r3, r3, #4
 80046c8:	2b04      	cmp	r3, #4
 80046ca:	d11b      	bne.n	8004704 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f06f 0204 	mvn.w	r2, #4
 80046d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2202      	movs	r2, #2
 80046da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f8db 	bl	80048a6 <HAL_TIM_IC_CaptureCallback>
 80046f0:	e005      	b.n	80046fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f8cd 	bl	8004892 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 f8de 	bl	80048ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	f003 0308 	and.w	r3, r3, #8
 800470e:	2b08      	cmp	r3, #8
 8004710:	d122      	bne.n	8004758 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	f003 0308 	and.w	r3, r3, #8
 800471c:	2b08      	cmp	r3, #8
 800471e:	d11b      	bne.n	8004758 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f06f 0208 	mvn.w	r2, #8
 8004728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2204      	movs	r2, #4
 800472e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f8b1 	bl	80048a6 <HAL_TIM_IC_CaptureCallback>
 8004744:	e005      	b.n	8004752 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f8a3 	bl	8004892 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f8b4 	bl	80048ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f003 0310 	and.w	r3, r3, #16
 8004762:	2b10      	cmp	r3, #16
 8004764:	d122      	bne.n	80047ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f003 0310 	and.w	r3, r3, #16
 8004770:	2b10      	cmp	r3, #16
 8004772:	d11b      	bne.n	80047ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f06f 0210 	mvn.w	r2, #16
 800477c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2208      	movs	r2, #8
 8004782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f887 	bl	80048a6 <HAL_TIM_IC_CaptureCallback>
 8004798:	e005      	b.n	80047a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f879 	bl	8004892 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 f88a 	bl	80048ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d10e      	bne.n	80047d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d107      	bne.n	80047d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f06f 0201 	mvn.w	r2, #1
 80047d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f7fc fbb8 	bl	8000f48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e2:	2b80      	cmp	r3, #128	; 0x80
 80047e4:	d10e      	bne.n	8004804 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f0:	2b80      	cmp	r3, #128	; 0x80
 80047f2:	d107      	bne.n	8004804 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f91a 	bl	8004a38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004812:	d10e      	bne.n	8004832 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800481e:	2b80      	cmp	r3, #128	; 0x80
 8004820:	d107      	bne.n	8004832 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800482a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 f90d 	bl	8004a4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483c:	2b40      	cmp	r3, #64	; 0x40
 800483e:	d10e      	bne.n	800485e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484a:	2b40      	cmp	r3, #64	; 0x40
 800484c:	d107      	bne.n	800485e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 f838 	bl	80048ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	f003 0320 	and.w	r3, r3, #32
 8004868:	2b20      	cmp	r3, #32
 800486a:	d10e      	bne.n	800488a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	f003 0320 	and.w	r3, r3, #32
 8004876:	2b20      	cmp	r3, #32
 8004878:	d107      	bne.n	800488a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f06f 0220 	mvn.w	r2, #32
 8004882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f8cd 	bl	8004a24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800488a:	bf00      	nop
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
	...

080048e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a40      	ldr	r2, [pc, #256]	; (80049f8 <TIM_Base_SetConfig+0x114>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d013      	beq.n	8004924 <TIM_Base_SetConfig+0x40>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004902:	d00f      	beq.n	8004924 <TIM_Base_SetConfig+0x40>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a3d      	ldr	r2, [pc, #244]	; (80049fc <TIM_Base_SetConfig+0x118>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d00b      	beq.n	8004924 <TIM_Base_SetConfig+0x40>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a3c      	ldr	r2, [pc, #240]	; (8004a00 <TIM_Base_SetConfig+0x11c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d007      	beq.n	8004924 <TIM_Base_SetConfig+0x40>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a3b      	ldr	r2, [pc, #236]	; (8004a04 <TIM_Base_SetConfig+0x120>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d003      	beq.n	8004924 <TIM_Base_SetConfig+0x40>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a3a      	ldr	r2, [pc, #232]	; (8004a08 <TIM_Base_SetConfig+0x124>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d108      	bne.n	8004936 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800492a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	4313      	orrs	r3, r2
 8004934:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a2f      	ldr	r2, [pc, #188]	; (80049f8 <TIM_Base_SetConfig+0x114>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d02b      	beq.n	8004996 <TIM_Base_SetConfig+0xb2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004944:	d027      	beq.n	8004996 <TIM_Base_SetConfig+0xb2>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a2c      	ldr	r2, [pc, #176]	; (80049fc <TIM_Base_SetConfig+0x118>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d023      	beq.n	8004996 <TIM_Base_SetConfig+0xb2>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a2b      	ldr	r2, [pc, #172]	; (8004a00 <TIM_Base_SetConfig+0x11c>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d01f      	beq.n	8004996 <TIM_Base_SetConfig+0xb2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a2a      	ldr	r2, [pc, #168]	; (8004a04 <TIM_Base_SetConfig+0x120>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d01b      	beq.n	8004996 <TIM_Base_SetConfig+0xb2>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a29      	ldr	r2, [pc, #164]	; (8004a08 <TIM_Base_SetConfig+0x124>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d017      	beq.n	8004996 <TIM_Base_SetConfig+0xb2>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a28      	ldr	r2, [pc, #160]	; (8004a0c <TIM_Base_SetConfig+0x128>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d013      	beq.n	8004996 <TIM_Base_SetConfig+0xb2>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a27      	ldr	r2, [pc, #156]	; (8004a10 <TIM_Base_SetConfig+0x12c>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d00f      	beq.n	8004996 <TIM_Base_SetConfig+0xb2>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a26      	ldr	r2, [pc, #152]	; (8004a14 <TIM_Base_SetConfig+0x130>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d00b      	beq.n	8004996 <TIM_Base_SetConfig+0xb2>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a25      	ldr	r2, [pc, #148]	; (8004a18 <TIM_Base_SetConfig+0x134>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d007      	beq.n	8004996 <TIM_Base_SetConfig+0xb2>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a24      	ldr	r2, [pc, #144]	; (8004a1c <TIM_Base_SetConfig+0x138>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d003      	beq.n	8004996 <TIM_Base_SetConfig+0xb2>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a23      	ldr	r2, [pc, #140]	; (8004a20 <TIM_Base_SetConfig+0x13c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d108      	bne.n	80049a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800499c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	689a      	ldr	r2, [r3, #8]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a0a      	ldr	r2, [pc, #40]	; (80049f8 <TIM_Base_SetConfig+0x114>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d003      	beq.n	80049dc <TIM_Base_SetConfig+0xf8>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a0c      	ldr	r2, [pc, #48]	; (8004a08 <TIM_Base_SetConfig+0x124>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d103      	bne.n	80049e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	691a      	ldr	r2, [r3, #16]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	615a      	str	r2, [r3, #20]
}
 80049ea:	bf00      	nop
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	40010000 	.word	0x40010000
 80049fc:	40000400 	.word	0x40000400
 8004a00:	40000800 	.word	0x40000800
 8004a04:	40000c00 	.word	0x40000c00
 8004a08:	40010400 	.word	0x40010400
 8004a0c:	40014000 	.word	0x40014000
 8004a10:	40014400 	.word	0x40014400
 8004a14:	40014800 	.word	0x40014800
 8004a18:	40001800 	.word	0x40001800
 8004a1c:	40001c00 	.word	0x40001c00
 8004a20:	40002000 	.word	0x40002000

08004a24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e040      	b.n	8004af4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d106      	bne.n	8004a88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7fc fc04 	bl	8001290 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2224      	movs	r2, #36	; 0x24
 8004a8c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 0201 	bic.w	r2, r2, #1
 8004a9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f8c0 	bl	8004c24 <UART_SetConfig>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d101      	bne.n	8004aae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e022      	b.n	8004af4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d002      	beq.n	8004abc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 fb18 	bl	80050ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004aca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689a      	ldr	r2, [r3, #8]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ada:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0201 	orr.w	r2, r2, #1
 8004aea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 fb9f 	bl	8005230 <UART_CheckIdleState>
 8004af2:	4603      	mov	r3, r0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3708      	adds	r7, #8
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b08a      	sub	sp, #40	; 0x28
 8004b00:	af02      	add	r7, sp, #8
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	603b      	str	r3, [r7, #0]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b10:	2b20      	cmp	r3, #32
 8004b12:	f040 8081 	bne.w	8004c18 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d002      	beq.n	8004b22 <HAL_UART_Transmit+0x26>
 8004b1c:	88fb      	ldrh	r3, [r7, #6]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e079      	b.n	8004c1a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d101      	bne.n	8004b34 <HAL_UART_Transmit+0x38>
 8004b30:	2302      	movs	r3, #2
 8004b32:	e072      	b.n	8004c1a <HAL_UART_Transmit+0x11e>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2221      	movs	r2, #33	; 0x21
 8004b48:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b4a:	f7fc fe21 	bl	8001790 <HAL_GetTick>
 8004b4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	88fa      	ldrh	r2, [r7, #6]
 8004b54:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	88fa      	ldrh	r2, [r7, #6]
 8004b5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b68:	d108      	bne.n	8004b7c <HAL_UART_Transmit+0x80>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d104      	bne.n	8004b7c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004b72:	2300      	movs	r3, #0
 8004b74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	61bb      	str	r3, [r7, #24]
 8004b7a:	e003      	b.n	8004b84 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b80:	2300      	movs	r3, #0
 8004b82:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004b8c:	e02c      	b.n	8004be8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	9300      	str	r3, [sp, #0]
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	2200      	movs	r2, #0
 8004b96:	2180      	movs	r1, #128	; 0x80
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f000 fb7c 	bl	8005296 <UART_WaitOnFlagUntilTimeout>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d001      	beq.n	8004ba8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e038      	b.n	8004c1a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10b      	bne.n	8004bc6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	881b      	ldrh	r3, [r3, #0]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bbc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	3302      	adds	r3, #2
 8004bc2:	61bb      	str	r3, [r7, #24]
 8004bc4:	e007      	b.n	8004bd6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	781a      	ldrb	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	3b01      	subs	r3, #1
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1cc      	bne.n	8004b8e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	9300      	str	r3, [sp, #0]
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	2140      	movs	r1, #64	; 0x40
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f000 fb49 	bl	8005296 <UART_WaitOnFlagUntilTimeout>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e005      	b.n	8004c1a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2220      	movs	r2, #32
 8004c12:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004c14:	2300      	movs	r3, #0
 8004c16:	e000      	b.n	8004c1a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004c18:	2302      	movs	r3, #2
  }
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3720      	adds	r7, #32
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
	...

08004c24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b088      	sub	sp, #32
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689a      	ldr	r2, [r3, #8]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	69db      	ldr	r3, [r3, #28]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	4ba6      	ldr	r3, [pc, #664]	; (8004ee8 <UART_SetConfig+0x2c4>)
 8004c50:	4013      	ands	r3, r2
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	6812      	ldr	r2, [r2, #0]
 8004c56:	6979      	ldr	r1, [r7, #20]
 8004c58:	430b      	orrs	r3, r1
 8004c5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68da      	ldr	r2, [r3, #12]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a94      	ldr	r2, [pc, #592]	; (8004eec <UART_SetConfig+0x2c8>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d120      	bne.n	8004ce2 <UART_SetConfig+0xbe>
 8004ca0:	4b93      	ldr	r3, [pc, #588]	; (8004ef0 <UART_SetConfig+0x2cc>)
 8004ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca6:	f003 0303 	and.w	r3, r3, #3
 8004caa:	2b03      	cmp	r3, #3
 8004cac:	d816      	bhi.n	8004cdc <UART_SetConfig+0xb8>
 8004cae:	a201      	add	r2, pc, #4	; (adr r2, 8004cb4 <UART_SetConfig+0x90>)
 8004cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb4:	08004cc5 	.word	0x08004cc5
 8004cb8:	08004cd1 	.word	0x08004cd1
 8004cbc:	08004ccb 	.word	0x08004ccb
 8004cc0:	08004cd7 	.word	0x08004cd7
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	77fb      	strb	r3, [r7, #31]
 8004cc8:	e150      	b.n	8004f6c <UART_SetConfig+0x348>
 8004cca:	2302      	movs	r3, #2
 8004ccc:	77fb      	strb	r3, [r7, #31]
 8004cce:	e14d      	b.n	8004f6c <UART_SetConfig+0x348>
 8004cd0:	2304      	movs	r3, #4
 8004cd2:	77fb      	strb	r3, [r7, #31]
 8004cd4:	e14a      	b.n	8004f6c <UART_SetConfig+0x348>
 8004cd6:	2308      	movs	r3, #8
 8004cd8:	77fb      	strb	r3, [r7, #31]
 8004cda:	e147      	b.n	8004f6c <UART_SetConfig+0x348>
 8004cdc:	2310      	movs	r3, #16
 8004cde:	77fb      	strb	r3, [r7, #31]
 8004ce0:	e144      	b.n	8004f6c <UART_SetConfig+0x348>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a83      	ldr	r2, [pc, #524]	; (8004ef4 <UART_SetConfig+0x2d0>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d132      	bne.n	8004d52 <UART_SetConfig+0x12e>
 8004cec:	4b80      	ldr	r3, [pc, #512]	; (8004ef0 <UART_SetConfig+0x2cc>)
 8004cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf2:	f003 030c 	and.w	r3, r3, #12
 8004cf6:	2b0c      	cmp	r3, #12
 8004cf8:	d828      	bhi.n	8004d4c <UART_SetConfig+0x128>
 8004cfa:	a201      	add	r2, pc, #4	; (adr r2, 8004d00 <UART_SetConfig+0xdc>)
 8004cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d00:	08004d35 	.word	0x08004d35
 8004d04:	08004d4d 	.word	0x08004d4d
 8004d08:	08004d4d 	.word	0x08004d4d
 8004d0c:	08004d4d 	.word	0x08004d4d
 8004d10:	08004d41 	.word	0x08004d41
 8004d14:	08004d4d 	.word	0x08004d4d
 8004d18:	08004d4d 	.word	0x08004d4d
 8004d1c:	08004d4d 	.word	0x08004d4d
 8004d20:	08004d3b 	.word	0x08004d3b
 8004d24:	08004d4d 	.word	0x08004d4d
 8004d28:	08004d4d 	.word	0x08004d4d
 8004d2c:	08004d4d 	.word	0x08004d4d
 8004d30:	08004d47 	.word	0x08004d47
 8004d34:	2300      	movs	r3, #0
 8004d36:	77fb      	strb	r3, [r7, #31]
 8004d38:	e118      	b.n	8004f6c <UART_SetConfig+0x348>
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	77fb      	strb	r3, [r7, #31]
 8004d3e:	e115      	b.n	8004f6c <UART_SetConfig+0x348>
 8004d40:	2304      	movs	r3, #4
 8004d42:	77fb      	strb	r3, [r7, #31]
 8004d44:	e112      	b.n	8004f6c <UART_SetConfig+0x348>
 8004d46:	2308      	movs	r3, #8
 8004d48:	77fb      	strb	r3, [r7, #31]
 8004d4a:	e10f      	b.n	8004f6c <UART_SetConfig+0x348>
 8004d4c:	2310      	movs	r3, #16
 8004d4e:	77fb      	strb	r3, [r7, #31]
 8004d50:	e10c      	b.n	8004f6c <UART_SetConfig+0x348>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a68      	ldr	r2, [pc, #416]	; (8004ef8 <UART_SetConfig+0x2d4>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d120      	bne.n	8004d9e <UART_SetConfig+0x17a>
 8004d5c:	4b64      	ldr	r3, [pc, #400]	; (8004ef0 <UART_SetConfig+0x2cc>)
 8004d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d62:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d66:	2b30      	cmp	r3, #48	; 0x30
 8004d68:	d013      	beq.n	8004d92 <UART_SetConfig+0x16e>
 8004d6a:	2b30      	cmp	r3, #48	; 0x30
 8004d6c:	d814      	bhi.n	8004d98 <UART_SetConfig+0x174>
 8004d6e:	2b20      	cmp	r3, #32
 8004d70:	d009      	beq.n	8004d86 <UART_SetConfig+0x162>
 8004d72:	2b20      	cmp	r3, #32
 8004d74:	d810      	bhi.n	8004d98 <UART_SetConfig+0x174>
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d002      	beq.n	8004d80 <UART_SetConfig+0x15c>
 8004d7a:	2b10      	cmp	r3, #16
 8004d7c:	d006      	beq.n	8004d8c <UART_SetConfig+0x168>
 8004d7e:	e00b      	b.n	8004d98 <UART_SetConfig+0x174>
 8004d80:	2300      	movs	r3, #0
 8004d82:	77fb      	strb	r3, [r7, #31]
 8004d84:	e0f2      	b.n	8004f6c <UART_SetConfig+0x348>
 8004d86:	2302      	movs	r3, #2
 8004d88:	77fb      	strb	r3, [r7, #31]
 8004d8a:	e0ef      	b.n	8004f6c <UART_SetConfig+0x348>
 8004d8c:	2304      	movs	r3, #4
 8004d8e:	77fb      	strb	r3, [r7, #31]
 8004d90:	e0ec      	b.n	8004f6c <UART_SetConfig+0x348>
 8004d92:	2308      	movs	r3, #8
 8004d94:	77fb      	strb	r3, [r7, #31]
 8004d96:	e0e9      	b.n	8004f6c <UART_SetConfig+0x348>
 8004d98:	2310      	movs	r3, #16
 8004d9a:	77fb      	strb	r3, [r7, #31]
 8004d9c:	e0e6      	b.n	8004f6c <UART_SetConfig+0x348>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a56      	ldr	r2, [pc, #344]	; (8004efc <UART_SetConfig+0x2d8>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d120      	bne.n	8004dea <UART_SetConfig+0x1c6>
 8004da8:	4b51      	ldr	r3, [pc, #324]	; (8004ef0 <UART_SetConfig+0x2cc>)
 8004daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004db2:	2bc0      	cmp	r3, #192	; 0xc0
 8004db4:	d013      	beq.n	8004dde <UART_SetConfig+0x1ba>
 8004db6:	2bc0      	cmp	r3, #192	; 0xc0
 8004db8:	d814      	bhi.n	8004de4 <UART_SetConfig+0x1c0>
 8004dba:	2b80      	cmp	r3, #128	; 0x80
 8004dbc:	d009      	beq.n	8004dd2 <UART_SetConfig+0x1ae>
 8004dbe:	2b80      	cmp	r3, #128	; 0x80
 8004dc0:	d810      	bhi.n	8004de4 <UART_SetConfig+0x1c0>
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d002      	beq.n	8004dcc <UART_SetConfig+0x1a8>
 8004dc6:	2b40      	cmp	r3, #64	; 0x40
 8004dc8:	d006      	beq.n	8004dd8 <UART_SetConfig+0x1b4>
 8004dca:	e00b      	b.n	8004de4 <UART_SetConfig+0x1c0>
 8004dcc:	2300      	movs	r3, #0
 8004dce:	77fb      	strb	r3, [r7, #31]
 8004dd0:	e0cc      	b.n	8004f6c <UART_SetConfig+0x348>
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	77fb      	strb	r3, [r7, #31]
 8004dd6:	e0c9      	b.n	8004f6c <UART_SetConfig+0x348>
 8004dd8:	2304      	movs	r3, #4
 8004dda:	77fb      	strb	r3, [r7, #31]
 8004ddc:	e0c6      	b.n	8004f6c <UART_SetConfig+0x348>
 8004dde:	2308      	movs	r3, #8
 8004de0:	77fb      	strb	r3, [r7, #31]
 8004de2:	e0c3      	b.n	8004f6c <UART_SetConfig+0x348>
 8004de4:	2310      	movs	r3, #16
 8004de6:	77fb      	strb	r3, [r7, #31]
 8004de8:	e0c0      	b.n	8004f6c <UART_SetConfig+0x348>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a44      	ldr	r2, [pc, #272]	; (8004f00 <UART_SetConfig+0x2dc>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d125      	bne.n	8004e40 <UART_SetConfig+0x21c>
 8004df4:	4b3e      	ldr	r3, [pc, #248]	; (8004ef0 <UART_SetConfig+0x2cc>)
 8004df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e02:	d017      	beq.n	8004e34 <UART_SetConfig+0x210>
 8004e04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e08:	d817      	bhi.n	8004e3a <UART_SetConfig+0x216>
 8004e0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e0e:	d00b      	beq.n	8004e28 <UART_SetConfig+0x204>
 8004e10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e14:	d811      	bhi.n	8004e3a <UART_SetConfig+0x216>
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <UART_SetConfig+0x1fe>
 8004e1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e1e:	d006      	beq.n	8004e2e <UART_SetConfig+0x20a>
 8004e20:	e00b      	b.n	8004e3a <UART_SetConfig+0x216>
 8004e22:	2300      	movs	r3, #0
 8004e24:	77fb      	strb	r3, [r7, #31]
 8004e26:	e0a1      	b.n	8004f6c <UART_SetConfig+0x348>
 8004e28:	2302      	movs	r3, #2
 8004e2a:	77fb      	strb	r3, [r7, #31]
 8004e2c:	e09e      	b.n	8004f6c <UART_SetConfig+0x348>
 8004e2e:	2304      	movs	r3, #4
 8004e30:	77fb      	strb	r3, [r7, #31]
 8004e32:	e09b      	b.n	8004f6c <UART_SetConfig+0x348>
 8004e34:	2308      	movs	r3, #8
 8004e36:	77fb      	strb	r3, [r7, #31]
 8004e38:	e098      	b.n	8004f6c <UART_SetConfig+0x348>
 8004e3a:	2310      	movs	r3, #16
 8004e3c:	77fb      	strb	r3, [r7, #31]
 8004e3e:	e095      	b.n	8004f6c <UART_SetConfig+0x348>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a2f      	ldr	r2, [pc, #188]	; (8004f04 <UART_SetConfig+0x2e0>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d125      	bne.n	8004e96 <UART_SetConfig+0x272>
 8004e4a:	4b29      	ldr	r3, [pc, #164]	; (8004ef0 <UART_SetConfig+0x2cc>)
 8004e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e58:	d017      	beq.n	8004e8a <UART_SetConfig+0x266>
 8004e5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e5e:	d817      	bhi.n	8004e90 <UART_SetConfig+0x26c>
 8004e60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e64:	d00b      	beq.n	8004e7e <UART_SetConfig+0x25a>
 8004e66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e6a:	d811      	bhi.n	8004e90 <UART_SetConfig+0x26c>
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d003      	beq.n	8004e78 <UART_SetConfig+0x254>
 8004e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e74:	d006      	beq.n	8004e84 <UART_SetConfig+0x260>
 8004e76:	e00b      	b.n	8004e90 <UART_SetConfig+0x26c>
 8004e78:	2301      	movs	r3, #1
 8004e7a:	77fb      	strb	r3, [r7, #31]
 8004e7c:	e076      	b.n	8004f6c <UART_SetConfig+0x348>
 8004e7e:	2302      	movs	r3, #2
 8004e80:	77fb      	strb	r3, [r7, #31]
 8004e82:	e073      	b.n	8004f6c <UART_SetConfig+0x348>
 8004e84:	2304      	movs	r3, #4
 8004e86:	77fb      	strb	r3, [r7, #31]
 8004e88:	e070      	b.n	8004f6c <UART_SetConfig+0x348>
 8004e8a:	2308      	movs	r3, #8
 8004e8c:	77fb      	strb	r3, [r7, #31]
 8004e8e:	e06d      	b.n	8004f6c <UART_SetConfig+0x348>
 8004e90:	2310      	movs	r3, #16
 8004e92:	77fb      	strb	r3, [r7, #31]
 8004e94:	e06a      	b.n	8004f6c <UART_SetConfig+0x348>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a1b      	ldr	r2, [pc, #108]	; (8004f08 <UART_SetConfig+0x2e4>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d138      	bne.n	8004f12 <UART_SetConfig+0x2ee>
 8004ea0:	4b13      	ldr	r3, [pc, #76]	; (8004ef0 <UART_SetConfig+0x2cc>)
 8004ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004eaa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004eae:	d017      	beq.n	8004ee0 <UART_SetConfig+0x2bc>
 8004eb0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004eb4:	d82a      	bhi.n	8004f0c <UART_SetConfig+0x2e8>
 8004eb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eba:	d00b      	beq.n	8004ed4 <UART_SetConfig+0x2b0>
 8004ebc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ec0:	d824      	bhi.n	8004f0c <UART_SetConfig+0x2e8>
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <UART_SetConfig+0x2aa>
 8004ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eca:	d006      	beq.n	8004eda <UART_SetConfig+0x2b6>
 8004ecc:	e01e      	b.n	8004f0c <UART_SetConfig+0x2e8>
 8004ece:	2300      	movs	r3, #0
 8004ed0:	77fb      	strb	r3, [r7, #31]
 8004ed2:	e04b      	b.n	8004f6c <UART_SetConfig+0x348>
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	77fb      	strb	r3, [r7, #31]
 8004ed8:	e048      	b.n	8004f6c <UART_SetConfig+0x348>
 8004eda:	2304      	movs	r3, #4
 8004edc:	77fb      	strb	r3, [r7, #31]
 8004ede:	e045      	b.n	8004f6c <UART_SetConfig+0x348>
 8004ee0:	2308      	movs	r3, #8
 8004ee2:	77fb      	strb	r3, [r7, #31]
 8004ee4:	e042      	b.n	8004f6c <UART_SetConfig+0x348>
 8004ee6:	bf00      	nop
 8004ee8:	efff69f3 	.word	0xefff69f3
 8004eec:	40011000 	.word	0x40011000
 8004ef0:	40023800 	.word	0x40023800
 8004ef4:	40004400 	.word	0x40004400
 8004ef8:	40004800 	.word	0x40004800
 8004efc:	40004c00 	.word	0x40004c00
 8004f00:	40005000 	.word	0x40005000
 8004f04:	40011400 	.word	0x40011400
 8004f08:	40007800 	.word	0x40007800
 8004f0c:	2310      	movs	r3, #16
 8004f0e:	77fb      	strb	r3, [r7, #31]
 8004f10:	e02c      	b.n	8004f6c <UART_SetConfig+0x348>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a72      	ldr	r2, [pc, #456]	; (80050e0 <UART_SetConfig+0x4bc>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d125      	bne.n	8004f68 <UART_SetConfig+0x344>
 8004f1c:	4b71      	ldr	r3, [pc, #452]	; (80050e4 <UART_SetConfig+0x4c0>)
 8004f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f22:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004f26:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f2a:	d017      	beq.n	8004f5c <UART_SetConfig+0x338>
 8004f2c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f30:	d817      	bhi.n	8004f62 <UART_SetConfig+0x33e>
 8004f32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f36:	d00b      	beq.n	8004f50 <UART_SetConfig+0x32c>
 8004f38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f3c:	d811      	bhi.n	8004f62 <UART_SetConfig+0x33e>
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <UART_SetConfig+0x326>
 8004f42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f46:	d006      	beq.n	8004f56 <UART_SetConfig+0x332>
 8004f48:	e00b      	b.n	8004f62 <UART_SetConfig+0x33e>
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	77fb      	strb	r3, [r7, #31]
 8004f4e:	e00d      	b.n	8004f6c <UART_SetConfig+0x348>
 8004f50:	2302      	movs	r3, #2
 8004f52:	77fb      	strb	r3, [r7, #31]
 8004f54:	e00a      	b.n	8004f6c <UART_SetConfig+0x348>
 8004f56:	2304      	movs	r3, #4
 8004f58:	77fb      	strb	r3, [r7, #31]
 8004f5a:	e007      	b.n	8004f6c <UART_SetConfig+0x348>
 8004f5c:	2308      	movs	r3, #8
 8004f5e:	77fb      	strb	r3, [r7, #31]
 8004f60:	e004      	b.n	8004f6c <UART_SetConfig+0x348>
 8004f62:	2310      	movs	r3, #16
 8004f64:	77fb      	strb	r3, [r7, #31]
 8004f66:	e001      	b.n	8004f6c <UART_SetConfig+0x348>
 8004f68:	2310      	movs	r3, #16
 8004f6a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	69db      	ldr	r3, [r3, #28]
 8004f70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f74:	d15b      	bne.n	800502e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004f76:	7ffb      	ldrb	r3, [r7, #31]
 8004f78:	2b08      	cmp	r3, #8
 8004f7a:	d828      	bhi.n	8004fce <UART_SetConfig+0x3aa>
 8004f7c:	a201      	add	r2, pc, #4	; (adr r2, 8004f84 <UART_SetConfig+0x360>)
 8004f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f82:	bf00      	nop
 8004f84:	08004fa9 	.word	0x08004fa9
 8004f88:	08004fb1 	.word	0x08004fb1
 8004f8c:	08004fb9 	.word	0x08004fb9
 8004f90:	08004fcf 	.word	0x08004fcf
 8004f94:	08004fbf 	.word	0x08004fbf
 8004f98:	08004fcf 	.word	0x08004fcf
 8004f9c:	08004fcf 	.word	0x08004fcf
 8004fa0:	08004fcf 	.word	0x08004fcf
 8004fa4:	08004fc7 	.word	0x08004fc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fa8:	f7fe fe30 	bl	8003c0c <HAL_RCC_GetPCLK1Freq>
 8004fac:	61b8      	str	r0, [r7, #24]
        break;
 8004fae:	e013      	b.n	8004fd8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fb0:	f7fe fe40 	bl	8003c34 <HAL_RCC_GetPCLK2Freq>
 8004fb4:	61b8      	str	r0, [r7, #24]
        break;
 8004fb6:	e00f      	b.n	8004fd8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fb8:	4b4b      	ldr	r3, [pc, #300]	; (80050e8 <UART_SetConfig+0x4c4>)
 8004fba:	61bb      	str	r3, [r7, #24]
        break;
 8004fbc:	e00c      	b.n	8004fd8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fbe:	f7fe fd13 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 8004fc2:	61b8      	str	r0, [r7, #24]
        break;
 8004fc4:	e008      	b.n	8004fd8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fca:	61bb      	str	r3, [r7, #24]
        break;
 8004fcc:	e004      	b.n	8004fd8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	77bb      	strb	r3, [r7, #30]
        break;
 8004fd6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d074      	beq.n	80050c8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	005a      	lsls	r2, r3, #1
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	085b      	lsrs	r3, r3, #1
 8004fe8:	441a      	add	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	2b0f      	cmp	r3, #15
 8004ff8:	d916      	bls.n	8005028 <UART_SetConfig+0x404>
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005000:	d212      	bcs.n	8005028 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	b29b      	uxth	r3, r3
 8005006:	f023 030f 	bic.w	r3, r3, #15
 800500a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	085b      	lsrs	r3, r3, #1
 8005010:	b29b      	uxth	r3, r3
 8005012:	f003 0307 	and.w	r3, r3, #7
 8005016:	b29a      	uxth	r2, r3
 8005018:	89fb      	ldrh	r3, [r7, #14]
 800501a:	4313      	orrs	r3, r2
 800501c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	89fa      	ldrh	r2, [r7, #14]
 8005024:	60da      	str	r2, [r3, #12]
 8005026:	e04f      	b.n	80050c8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	77bb      	strb	r3, [r7, #30]
 800502c:	e04c      	b.n	80050c8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800502e:	7ffb      	ldrb	r3, [r7, #31]
 8005030:	2b08      	cmp	r3, #8
 8005032:	d828      	bhi.n	8005086 <UART_SetConfig+0x462>
 8005034:	a201      	add	r2, pc, #4	; (adr r2, 800503c <UART_SetConfig+0x418>)
 8005036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503a:	bf00      	nop
 800503c:	08005061 	.word	0x08005061
 8005040:	08005069 	.word	0x08005069
 8005044:	08005071 	.word	0x08005071
 8005048:	08005087 	.word	0x08005087
 800504c:	08005077 	.word	0x08005077
 8005050:	08005087 	.word	0x08005087
 8005054:	08005087 	.word	0x08005087
 8005058:	08005087 	.word	0x08005087
 800505c:	0800507f 	.word	0x0800507f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005060:	f7fe fdd4 	bl	8003c0c <HAL_RCC_GetPCLK1Freq>
 8005064:	61b8      	str	r0, [r7, #24]
        break;
 8005066:	e013      	b.n	8005090 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005068:	f7fe fde4 	bl	8003c34 <HAL_RCC_GetPCLK2Freq>
 800506c:	61b8      	str	r0, [r7, #24]
        break;
 800506e:	e00f      	b.n	8005090 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005070:	4b1d      	ldr	r3, [pc, #116]	; (80050e8 <UART_SetConfig+0x4c4>)
 8005072:	61bb      	str	r3, [r7, #24]
        break;
 8005074:	e00c      	b.n	8005090 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005076:	f7fe fcb7 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 800507a:	61b8      	str	r0, [r7, #24]
        break;
 800507c:	e008      	b.n	8005090 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800507e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005082:	61bb      	str	r3, [r7, #24]
        break;
 8005084:	e004      	b.n	8005090 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005086:	2300      	movs	r3, #0
 8005088:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	77bb      	strb	r3, [r7, #30]
        break;
 800508e:	bf00      	nop
    }

    if (pclk != 0U)
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d018      	beq.n	80050c8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	085a      	lsrs	r2, r3, #1
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	441a      	add	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	2b0f      	cmp	r3, #15
 80050ae:	d909      	bls.n	80050c4 <UART_SetConfig+0x4a0>
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b6:	d205      	bcs.n	80050c4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	60da      	str	r2, [r3, #12]
 80050c2:	e001      	b.n	80050c8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80050d4:	7fbb      	ldrb	r3, [r7, #30]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3720      	adds	r7, #32
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	40007c00 	.word	0x40007c00
 80050e4:	40023800 	.word	0x40023800
 80050e8:	00f42400 	.word	0x00f42400

080050ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f8:	f003 0301 	and.w	r3, r3, #1
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00a      	beq.n	8005116 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00a      	beq.n	8005138 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	430a      	orrs	r2, r1
 8005136:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513c:	f003 0304 	and.w	r3, r3, #4
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00a      	beq.n	800515a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	430a      	orrs	r2, r1
 8005158:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515e:	f003 0308 	and.w	r3, r3, #8
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00a      	beq.n	800517c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	430a      	orrs	r2, r1
 800517a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005180:	f003 0310 	and.w	r3, r3, #16
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00a      	beq.n	800519e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a2:	f003 0320 	and.w	r3, r3, #32
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00a      	beq.n	80051c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d01a      	beq.n	8005202 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	430a      	orrs	r2, r1
 80051e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051ea:	d10a      	bne.n	8005202 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00a      	beq.n	8005224 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	430a      	orrs	r2, r1
 8005222:	605a      	str	r2, [r3, #4]
  }
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af02      	add	r7, sp, #8
 8005236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005240:	f7fc faa6 	bl	8001790 <HAL_GetTick>
 8005244:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0308 	and.w	r3, r3, #8
 8005250:	2b08      	cmp	r3, #8
 8005252:	d10e      	bne.n	8005272 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005254:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005258:	9300      	str	r3, [sp, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f817 	bl	8005296 <UART_WaitOnFlagUntilTimeout>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e00d      	b.n	800528e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2220      	movs	r2, #32
 8005276:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2220      	movs	r2, #32
 800527c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b09c      	sub	sp, #112	; 0x70
 800529a:	af00      	add	r7, sp, #0
 800529c:	60f8      	str	r0, [r7, #12]
 800529e:	60b9      	str	r1, [r7, #8]
 80052a0:	603b      	str	r3, [r7, #0]
 80052a2:	4613      	mov	r3, r2
 80052a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052a6:	e0a5      	b.n	80053f4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052ae:	f000 80a1 	beq.w	80053f4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052b2:	f7fc fa6d 	bl	8001790 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80052be:	429a      	cmp	r2, r3
 80052c0:	d302      	bcc.n	80052c8 <UART_WaitOnFlagUntilTimeout+0x32>
 80052c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d13e      	bne.n	8005346 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052d0:	e853 3f00 	ldrex	r3, [r3]
 80052d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80052d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052dc:	667b      	str	r3, [r7, #100]	; 0x64
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	461a      	mov	r2, r3
 80052e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052e8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80052ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80052ee:	e841 2300 	strex	r3, r2, [r1]
 80052f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80052f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1e6      	bne.n	80052c8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	3308      	adds	r3, #8
 8005300:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005304:	e853 3f00 	ldrex	r3, [r3]
 8005308:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800530a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530c:	f023 0301 	bic.w	r3, r3, #1
 8005310:	663b      	str	r3, [r7, #96]	; 0x60
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	3308      	adds	r3, #8
 8005318:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800531a:	64ba      	str	r2, [r7, #72]	; 0x48
 800531c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005320:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005322:	e841 2300 	strex	r3, r2, [r1]
 8005326:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1e5      	bne.n	80052fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2220      	movs	r2, #32
 8005332:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2220      	movs	r2, #32
 8005338:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e067      	b.n	8005416 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0304 	and.w	r3, r3, #4
 8005350:	2b00      	cmp	r3, #0
 8005352:	d04f      	beq.n	80053f4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	69db      	ldr	r3, [r3, #28]
 800535a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800535e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005362:	d147      	bne.n	80053f4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800536c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005376:	e853 3f00 	ldrex	r3, [r3]
 800537a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005382:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	461a      	mov	r2, r3
 800538a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800538c:	637b      	str	r3, [r7, #52]	; 0x34
 800538e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005390:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005392:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005394:	e841 2300 	strex	r3, r2, [r1]
 8005398:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800539a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1e6      	bne.n	800536e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	3308      	adds	r3, #8
 80053a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	e853 3f00 	ldrex	r3, [r3]
 80053ae:	613b      	str	r3, [r7, #16]
   return(result);
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	f023 0301 	bic.w	r3, r3, #1
 80053b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	3308      	adds	r3, #8
 80053be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80053c0:	623a      	str	r2, [r7, #32]
 80053c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c4:	69f9      	ldr	r1, [r7, #28]
 80053c6:	6a3a      	ldr	r2, [r7, #32]
 80053c8:	e841 2300 	strex	r3, r2, [r1]
 80053cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1e5      	bne.n	80053a0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2220      	movs	r2, #32
 80053d8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2220      	movs	r2, #32
 80053de:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2220      	movs	r2, #32
 80053e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e010      	b.n	8005416 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	69da      	ldr	r2, [r3, #28]
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	4013      	ands	r3, r2
 80053fe:	68ba      	ldr	r2, [r7, #8]
 8005400:	429a      	cmp	r2, r3
 8005402:	bf0c      	ite	eq
 8005404:	2301      	moveq	r3, #1
 8005406:	2300      	movne	r3, #0
 8005408:	b2db      	uxtb	r3, r3
 800540a:	461a      	mov	r2, r3
 800540c:	79fb      	ldrb	r3, [r7, #7]
 800540e:	429a      	cmp	r2, r3
 8005410:	f43f af4a 	beq.w	80052a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3770      	adds	r7, #112	; 0x70
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
	...

08005420 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005420:	b084      	sub	sp, #16
 8005422:	b580      	push	{r7, lr}
 8005424:	b084      	sub	sp, #16
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
 800542a:	f107 001c 	add.w	r0, r7, #28
 800542e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005434:	2b01      	cmp	r3, #1
 8005436:	d120      	bne.n	800547a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	68da      	ldr	r2, [r3, #12]
 8005448:	4b20      	ldr	r3, [pc, #128]	; (80054cc <USB_CoreInit+0xac>)
 800544a:	4013      	ands	r3, r2
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800545c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800545e:	2b01      	cmp	r3, #1
 8005460:	d105      	bne.n	800546e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 fa92 	bl	8005998 <USB_CoreReset>
 8005474:	4603      	mov	r3, r0
 8005476:	73fb      	strb	r3, [r7, #15]
 8005478:	e010      	b.n	800549c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 fa86 	bl	8005998 <USB_CoreReset>
 800548c:	4603      	mov	r3, r0
 800548e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005494:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800549c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d10b      	bne.n	80054ba <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f043 0206 	orr.w	r2, r3, #6
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f043 0220 	orr.w	r2, r3, #32
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80054ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054c6:	b004      	add	sp, #16
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	ffbdffbf 	.word	0xffbdffbf

080054d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f023 0201 	bic.w	r2, r3, #1
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b084      	sub	sp, #16
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
 80054fa:	460b      	mov	r3, r1
 80054fc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80054fe:	2300      	movs	r3, #0
 8005500:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800550e:	78fb      	ldrb	r3, [r7, #3]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d115      	bne.n	8005540 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005520:	2001      	movs	r0, #1
 8005522:	f7fc f941 	bl	80017a8 <HAL_Delay>
      ms++;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	3301      	adds	r3, #1
 800552a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 fa25 	bl	800597c <USB_GetMode>
 8005532:	4603      	mov	r3, r0
 8005534:	2b01      	cmp	r3, #1
 8005536:	d01e      	beq.n	8005576 <USB_SetCurrentMode+0x84>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2b31      	cmp	r3, #49	; 0x31
 800553c:	d9f0      	bls.n	8005520 <USB_SetCurrentMode+0x2e>
 800553e:	e01a      	b.n	8005576 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005540:	78fb      	ldrb	r3, [r7, #3]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d115      	bne.n	8005572 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005552:	2001      	movs	r0, #1
 8005554:	f7fc f928 	bl	80017a8 <HAL_Delay>
      ms++;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	3301      	adds	r3, #1
 800555c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 fa0c 	bl	800597c <USB_GetMode>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d005      	beq.n	8005576 <USB_SetCurrentMode+0x84>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2b31      	cmp	r3, #49	; 0x31
 800556e:	d9f0      	bls.n	8005552 <USB_SetCurrentMode+0x60>
 8005570:	e001      	b.n	8005576 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e005      	b.n	8005582 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2b32      	cmp	r3, #50	; 0x32
 800557a:	d101      	bne.n	8005580 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e000      	b.n	8005582 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3710      	adds	r7, #16
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
	...

0800558c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800558c:	b084      	sub	sp, #16
 800558e:	b580      	push	{r7, lr}
 8005590:	b086      	sub	sp, #24
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
 8005596:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800559a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800559e:	2300      	movs	r3, #0
 80055a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80055a6:	2300      	movs	r3, #0
 80055a8:	613b      	str	r3, [r7, #16]
 80055aa:	e009      	b.n	80055c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	3340      	adds	r3, #64	; 0x40
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4413      	add	r3, r2
 80055b6:	2200      	movs	r2, #0
 80055b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	3301      	adds	r3, #1
 80055be:	613b      	str	r3, [r7, #16]
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	2b0e      	cmp	r3, #14
 80055c4:	d9f2      	bls.n	80055ac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80055c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d11c      	bne.n	8005606 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055da:	f043 0302 	orr.w	r3, r3, #2
 80055de:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	e005      	b.n	8005612 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005618:	461a      	mov	r2, r3
 800561a:	2300      	movs	r3, #0
 800561c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005624:	4619      	mov	r1, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800562c:	461a      	mov	r2, r3
 800562e:	680b      	ldr	r3, [r1, #0]
 8005630:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005634:	2b01      	cmp	r3, #1
 8005636:	d10c      	bne.n	8005652 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800563a:	2b00      	cmp	r3, #0
 800563c:	d104      	bne.n	8005648 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800563e:	2100      	movs	r1, #0
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 f961 	bl	8005908 <USB_SetDevSpeed>
 8005646:	e008      	b.n	800565a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005648:	2101      	movs	r1, #1
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f95c 	bl	8005908 <USB_SetDevSpeed>
 8005650:	e003      	b.n	800565a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005652:	2103      	movs	r1, #3
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 f957 	bl	8005908 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800565a:	2110      	movs	r1, #16
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 f8f3 	bl	8005848 <USB_FlushTxFifo>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d001      	beq.n	800566c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 f91d 	bl	80058ac <USB_FlushRxFifo>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d001      	beq.n	800567c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005682:	461a      	mov	r2, r3
 8005684:	2300      	movs	r3, #0
 8005686:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800568e:	461a      	mov	r2, r3
 8005690:	2300      	movs	r3, #0
 8005692:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800569a:	461a      	mov	r2, r3
 800569c:	2300      	movs	r3, #0
 800569e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056a0:	2300      	movs	r3, #0
 80056a2:	613b      	str	r3, [r7, #16]
 80056a4:	e043      	b.n	800572e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056bc:	d118      	bne.n	80056f0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d10a      	bne.n	80056da <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	015a      	lsls	r2, r3, #5
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d0:	461a      	mov	r2, r3
 80056d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80056d6:	6013      	str	r3, [r2, #0]
 80056d8:	e013      	b.n	8005702 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	015a      	lsls	r2, r3, #5
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	4413      	add	r3, r2
 80056e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e6:	461a      	mov	r2, r3
 80056e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80056ec:	6013      	str	r3, [r2, #0]
 80056ee:	e008      	b.n	8005702 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	015a      	lsls	r2, r3, #5
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	4413      	add	r3, r2
 80056f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056fc:	461a      	mov	r2, r3
 80056fe:	2300      	movs	r3, #0
 8005700:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	015a      	lsls	r2, r3, #5
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	4413      	add	r3, r2
 800570a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800570e:	461a      	mov	r2, r3
 8005710:	2300      	movs	r3, #0
 8005712:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	015a      	lsls	r2, r3, #5
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	4413      	add	r3, r2
 800571c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005720:	461a      	mov	r2, r3
 8005722:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005726:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	3301      	adds	r3, #1
 800572c:	613b      	str	r3, [r7, #16]
 800572e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	429a      	cmp	r2, r3
 8005734:	d3b7      	bcc.n	80056a6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005736:	2300      	movs	r3, #0
 8005738:	613b      	str	r3, [r7, #16]
 800573a:	e043      	b.n	80057c4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	015a      	lsls	r2, r3, #5
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	4413      	add	r3, r2
 8005744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800574e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005752:	d118      	bne.n	8005786 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d10a      	bne.n	8005770 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	015a      	lsls	r2, r3, #5
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	4413      	add	r3, r2
 8005762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005766:	461a      	mov	r2, r3
 8005768:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800576c:	6013      	str	r3, [r2, #0]
 800576e:	e013      	b.n	8005798 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	4413      	add	r3, r2
 8005778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800577c:	461a      	mov	r2, r3
 800577e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005782:	6013      	str	r3, [r2, #0]
 8005784:	e008      	b.n	8005798 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	4413      	add	r3, r2
 800578e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005792:	461a      	mov	r2, r3
 8005794:	2300      	movs	r3, #0
 8005796:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	015a      	lsls	r2, r3, #5
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	4413      	add	r3, r2
 80057a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a4:	461a      	mov	r2, r3
 80057a6:	2300      	movs	r3, #0
 80057a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	015a      	lsls	r2, r3, #5
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	4413      	add	r3, r2
 80057b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b6:	461a      	mov	r2, r3
 80057b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	3301      	adds	r3, #1
 80057c2:	613b      	str	r3, [r7, #16]
 80057c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d3b7      	bcc.n	800573c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80057ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80057ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d105      	bne.n	8005800 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	f043 0210 	orr.w	r2, r3, #16
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	699a      	ldr	r2, [r3, #24]
 8005804:	4b0e      	ldr	r3, [pc, #56]	; (8005840 <USB_DevInit+0x2b4>)
 8005806:	4313      	orrs	r3, r2
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800580c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800580e:	2b00      	cmp	r3, #0
 8005810:	d005      	beq.n	800581e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	f043 0208 	orr.w	r2, r3, #8
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800581e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005820:	2b01      	cmp	r3, #1
 8005822:	d105      	bne.n	8005830 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	699a      	ldr	r2, [r3, #24]
 8005828:	4b06      	ldr	r3, [pc, #24]	; (8005844 <USB_DevInit+0x2b8>)
 800582a:	4313      	orrs	r3, r2
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005830:	7dfb      	ldrb	r3, [r7, #23]
}
 8005832:	4618      	mov	r0, r3
 8005834:	3718      	adds	r7, #24
 8005836:	46bd      	mov	sp, r7
 8005838:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800583c:	b004      	add	sp, #16
 800583e:	4770      	bx	lr
 8005840:	803c3800 	.word	0x803c3800
 8005844:	40000004 	.word	0x40000004

08005848 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005852:	2300      	movs	r3, #0
 8005854:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	3301      	adds	r3, #1
 800585a:	60fb      	str	r3, [r7, #12]
 800585c:	4a12      	ldr	r2, [pc, #72]	; (80058a8 <USB_FlushTxFifo+0x60>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d901      	bls.n	8005866 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e01a      	b.n	800589c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	2b00      	cmp	r3, #0
 800586c:	daf3      	bge.n	8005856 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800586e:	2300      	movs	r3, #0
 8005870:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	019b      	lsls	r3, r3, #6
 8005876:	f043 0220 	orr.w	r2, r3, #32
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	3301      	adds	r3, #1
 8005882:	60fb      	str	r3, [r7, #12]
 8005884:	4a08      	ldr	r2, [pc, #32]	; (80058a8 <USB_FlushTxFifo+0x60>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d901      	bls.n	800588e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e006      	b.n	800589c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	f003 0320 	and.w	r3, r3, #32
 8005896:	2b20      	cmp	r3, #32
 8005898:	d0f1      	beq.n	800587e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3714      	adds	r7, #20
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr
 80058a8:	00030d40 	.word	0x00030d40

080058ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058b4:	2300      	movs	r3, #0
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	3301      	adds	r3, #1
 80058bc:	60fb      	str	r3, [r7, #12]
 80058be:	4a11      	ldr	r2, [pc, #68]	; (8005904 <USB_FlushRxFifo+0x58>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d901      	bls.n	80058c8 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e017      	b.n	80058f8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	daf3      	bge.n	80058b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80058d0:	2300      	movs	r3, #0
 80058d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2210      	movs	r2, #16
 80058d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	3301      	adds	r3, #1
 80058de:	60fb      	str	r3, [r7, #12]
 80058e0:	4a08      	ldr	r2, [pc, #32]	; (8005904 <USB_FlushRxFifo+0x58>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d901      	bls.n	80058ea <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e006      	b.n	80058f8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	f003 0310 	and.w	r3, r3, #16
 80058f2:	2b10      	cmp	r3, #16
 80058f4:	d0f1      	beq.n	80058da <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3714      	adds	r7, #20
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr
 8005904:	00030d40 	.word	0x00030d40

08005908 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	460b      	mov	r3, r1
 8005912:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	78fb      	ldrb	r3, [r7, #3]
 8005922:	68f9      	ldr	r1, [r7, #12]
 8005924:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005928:	4313      	orrs	r3, r2
 800592a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3714      	adds	r7, #20
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr

0800593a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800593a:	b480      	push	{r7}
 800593c:	b085      	sub	sp, #20
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005954:	f023 0303 	bic.w	r3, r3, #3
 8005958:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005968:	f043 0302 	orr.w	r3, r3, #2
 800596c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3714      	adds	r7, #20
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	695b      	ldr	r3, [r3, #20]
 8005988:	f003 0301 	and.w	r3, r3, #1
}
 800598c:	4618      	mov	r0, r3
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059a0:	2300      	movs	r3, #0
 80059a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	3301      	adds	r3, #1
 80059a8:	60fb      	str	r3, [r7, #12]
 80059aa:	4a13      	ldr	r2, [pc, #76]	; (80059f8 <USB_CoreReset+0x60>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d901      	bls.n	80059b4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e01a      	b.n	80059ea <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	daf3      	bge.n	80059a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80059bc:	2300      	movs	r3, #0
 80059be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	f043 0201 	orr.w	r2, r3, #1
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	3301      	adds	r3, #1
 80059d0:	60fb      	str	r3, [r7, #12]
 80059d2:	4a09      	ldr	r2, [pc, #36]	; (80059f8 <USB_CoreReset+0x60>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d901      	bls.n	80059dc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e006      	b.n	80059ea <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	f003 0301 	and.w	r3, r3, #1
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d0f1      	beq.n	80059cc <USB_CoreReset+0x34>

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3714      	adds	r7, #20
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	00030d40 	.word	0x00030d40

080059fc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8005a02:	4ba0      	ldr	r3, [pc, #640]	; (8005c84 <MX_LWIP_Init+0x288>)
 8005a04:	22c0      	movs	r2, #192	; 0xc0
 8005a06:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005a08:	4b9e      	ldr	r3, [pc, #632]	; (8005c84 <MX_LWIP_Init+0x288>)
 8005a0a:	22a8      	movs	r2, #168	; 0xa8
 8005a0c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 11;
 8005a0e:	4b9d      	ldr	r3, [pc, #628]	; (8005c84 <MX_LWIP_Init+0x288>)
 8005a10:	220b      	movs	r2, #11
 8005a12:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 2;
 8005a14:	4b9b      	ldr	r3, [pc, #620]	; (8005c84 <MX_LWIP_Init+0x288>)
 8005a16:	2202      	movs	r2, #2
 8005a18:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8005a1a:	4b9b      	ldr	r3, [pc, #620]	; (8005c88 <MX_LWIP_Init+0x28c>)
 8005a1c:	22ff      	movs	r2, #255	; 0xff
 8005a1e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005a20:	4b99      	ldr	r3, [pc, #612]	; (8005c88 <MX_LWIP_Init+0x28c>)
 8005a22:	22ff      	movs	r2, #255	; 0xff
 8005a24:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8005a26:	4b98      	ldr	r3, [pc, #608]	; (8005c88 <MX_LWIP_Init+0x28c>)
 8005a28:	22ff      	movs	r2, #255	; 0xff
 8005a2a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005a2c:	4b96      	ldr	r3, [pc, #600]	; (8005c88 <MX_LWIP_Init+0x28c>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8005a32:	4b96      	ldr	r3, [pc, #600]	; (8005c8c <MX_LWIP_Init+0x290>)
 8005a34:	22c0      	movs	r2, #192	; 0xc0
 8005a36:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8005a38:	4b94      	ldr	r3, [pc, #592]	; (8005c8c <MX_LWIP_Init+0x290>)
 8005a3a:	22a8      	movs	r2, #168	; 0xa8
 8005a3c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 11;
 8005a3e:	4b93      	ldr	r3, [pc, #588]	; (8005c8c <MX_LWIP_Init+0x290>)
 8005a40:	220b      	movs	r2, #11
 8005a42:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8005a44:	4b91      	ldr	r3, [pc, #580]	; (8005c8c <MX_LWIP_Init+0x290>)
 8005a46:	2201      	movs	r2, #1
 8005a48:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8005a4a:	2100      	movs	r1, #0
 8005a4c:	2000      	movs	r0, #0
 8005a4e:	f008 fa87 	bl	800df60 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005a52:	4b8c      	ldr	r3, [pc, #560]	; (8005c84 <MX_LWIP_Init+0x288>)
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	061a      	lsls	r2, r3, #24
 8005a58:	4b8a      	ldr	r3, [pc, #552]	; (8005c84 <MX_LWIP_Init+0x288>)
 8005a5a:	785b      	ldrb	r3, [r3, #1]
 8005a5c:	041b      	lsls	r3, r3, #16
 8005a5e:	431a      	orrs	r2, r3
 8005a60:	4b88      	ldr	r3, [pc, #544]	; (8005c84 <MX_LWIP_Init+0x288>)
 8005a62:	789b      	ldrb	r3, [r3, #2]
 8005a64:	021b      	lsls	r3, r3, #8
 8005a66:	4313      	orrs	r3, r2
 8005a68:	4a86      	ldr	r2, [pc, #536]	; (8005c84 <MX_LWIP_Init+0x288>)
 8005a6a:	78d2      	ldrb	r2, [r2, #3]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	061a      	lsls	r2, r3, #24
 8005a70:	4b84      	ldr	r3, [pc, #528]	; (8005c84 <MX_LWIP_Init+0x288>)
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	0619      	lsls	r1, r3, #24
 8005a76:	4b83      	ldr	r3, [pc, #524]	; (8005c84 <MX_LWIP_Init+0x288>)
 8005a78:	785b      	ldrb	r3, [r3, #1]
 8005a7a:	041b      	lsls	r3, r3, #16
 8005a7c:	4319      	orrs	r1, r3
 8005a7e:	4b81      	ldr	r3, [pc, #516]	; (8005c84 <MX_LWIP_Init+0x288>)
 8005a80:	789b      	ldrb	r3, [r3, #2]
 8005a82:	021b      	lsls	r3, r3, #8
 8005a84:	430b      	orrs	r3, r1
 8005a86:	497f      	ldr	r1, [pc, #508]	; (8005c84 <MX_LWIP_Init+0x288>)
 8005a88:	78c9      	ldrb	r1, [r1, #3]
 8005a8a:	430b      	orrs	r3, r1
 8005a8c:	021b      	lsls	r3, r3, #8
 8005a8e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a92:	431a      	orrs	r2, r3
 8005a94:	4b7b      	ldr	r3, [pc, #492]	; (8005c84 <MX_LWIP_Init+0x288>)
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	0619      	lsls	r1, r3, #24
 8005a9a:	4b7a      	ldr	r3, [pc, #488]	; (8005c84 <MX_LWIP_Init+0x288>)
 8005a9c:	785b      	ldrb	r3, [r3, #1]
 8005a9e:	041b      	lsls	r3, r3, #16
 8005aa0:	4319      	orrs	r1, r3
 8005aa2:	4b78      	ldr	r3, [pc, #480]	; (8005c84 <MX_LWIP_Init+0x288>)
 8005aa4:	789b      	ldrb	r3, [r3, #2]
 8005aa6:	021b      	lsls	r3, r3, #8
 8005aa8:	430b      	orrs	r3, r1
 8005aaa:	4976      	ldr	r1, [pc, #472]	; (8005c84 <MX_LWIP_Init+0x288>)
 8005aac:	78c9      	ldrb	r1, [r1, #3]
 8005aae:	430b      	orrs	r3, r1
 8005ab0:	0a1b      	lsrs	r3, r3, #8
 8005ab2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005ab6:	431a      	orrs	r2, r3
 8005ab8:	4b72      	ldr	r3, [pc, #456]	; (8005c84 <MX_LWIP_Init+0x288>)
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	0619      	lsls	r1, r3, #24
 8005abe:	4b71      	ldr	r3, [pc, #452]	; (8005c84 <MX_LWIP_Init+0x288>)
 8005ac0:	785b      	ldrb	r3, [r3, #1]
 8005ac2:	041b      	lsls	r3, r3, #16
 8005ac4:	4319      	orrs	r1, r3
 8005ac6:	4b6f      	ldr	r3, [pc, #444]	; (8005c84 <MX_LWIP_Init+0x288>)
 8005ac8:	789b      	ldrb	r3, [r3, #2]
 8005aca:	021b      	lsls	r3, r3, #8
 8005acc:	430b      	orrs	r3, r1
 8005ace:	496d      	ldr	r1, [pc, #436]	; (8005c84 <MX_LWIP_Init+0x288>)
 8005ad0:	78c9      	ldrb	r1, [r1, #3]
 8005ad2:	430b      	orrs	r3, r1
 8005ad4:	0e1b      	lsrs	r3, r3, #24
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	4a6d      	ldr	r2, [pc, #436]	; (8005c90 <MX_LWIP_Init+0x294>)
 8005ada:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005adc:	4b6a      	ldr	r3, [pc, #424]	; (8005c88 <MX_LWIP_Init+0x28c>)
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	061a      	lsls	r2, r3, #24
 8005ae2:	4b69      	ldr	r3, [pc, #420]	; (8005c88 <MX_LWIP_Init+0x28c>)
 8005ae4:	785b      	ldrb	r3, [r3, #1]
 8005ae6:	041b      	lsls	r3, r3, #16
 8005ae8:	431a      	orrs	r2, r3
 8005aea:	4b67      	ldr	r3, [pc, #412]	; (8005c88 <MX_LWIP_Init+0x28c>)
 8005aec:	789b      	ldrb	r3, [r3, #2]
 8005aee:	021b      	lsls	r3, r3, #8
 8005af0:	4313      	orrs	r3, r2
 8005af2:	4a65      	ldr	r2, [pc, #404]	; (8005c88 <MX_LWIP_Init+0x28c>)
 8005af4:	78d2      	ldrb	r2, [r2, #3]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	061a      	lsls	r2, r3, #24
 8005afa:	4b63      	ldr	r3, [pc, #396]	; (8005c88 <MX_LWIP_Init+0x28c>)
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	0619      	lsls	r1, r3, #24
 8005b00:	4b61      	ldr	r3, [pc, #388]	; (8005c88 <MX_LWIP_Init+0x28c>)
 8005b02:	785b      	ldrb	r3, [r3, #1]
 8005b04:	041b      	lsls	r3, r3, #16
 8005b06:	4319      	orrs	r1, r3
 8005b08:	4b5f      	ldr	r3, [pc, #380]	; (8005c88 <MX_LWIP_Init+0x28c>)
 8005b0a:	789b      	ldrb	r3, [r3, #2]
 8005b0c:	021b      	lsls	r3, r3, #8
 8005b0e:	430b      	orrs	r3, r1
 8005b10:	495d      	ldr	r1, [pc, #372]	; (8005c88 <MX_LWIP_Init+0x28c>)
 8005b12:	78c9      	ldrb	r1, [r1, #3]
 8005b14:	430b      	orrs	r3, r1
 8005b16:	021b      	lsls	r3, r3, #8
 8005b18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b1c:	431a      	orrs	r2, r3
 8005b1e:	4b5a      	ldr	r3, [pc, #360]	; (8005c88 <MX_LWIP_Init+0x28c>)
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	0619      	lsls	r1, r3, #24
 8005b24:	4b58      	ldr	r3, [pc, #352]	; (8005c88 <MX_LWIP_Init+0x28c>)
 8005b26:	785b      	ldrb	r3, [r3, #1]
 8005b28:	041b      	lsls	r3, r3, #16
 8005b2a:	4319      	orrs	r1, r3
 8005b2c:	4b56      	ldr	r3, [pc, #344]	; (8005c88 <MX_LWIP_Init+0x28c>)
 8005b2e:	789b      	ldrb	r3, [r3, #2]
 8005b30:	021b      	lsls	r3, r3, #8
 8005b32:	430b      	orrs	r3, r1
 8005b34:	4954      	ldr	r1, [pc, #336]	; (8005c88 <MX_LWIP_Init+0x28c>)
 8005b36:	78c9      	ldrb	r1, [r1, #3]
 8005b38:	430b      	orrs	r3, r1
 8005b3a:	0a1b      	lsrs	r3, r3, #8
 8005b3c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005b40:	431a      	orrs	r2, r3
 8005b42:	4b51      	ldr	r3, [pc, #324]	; (8005c88 <MX_LWIP_Init+0x28c>)
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	0619      	lsls	r1, r3, #24
 8005b48:	4b4f      	ldr	r3, [pc, #316]	; (8005c88 <MX_LWIP_Init+0x28c>)
 8005b4a:	785b      	ldrb	r3, [r3, #1]
 8005b4c:	041b      	lsls	r3, r3, #16
 8005b4e:	4319      	orrs	r1, r3
 8005b50:	4b4d      	ldr	r3, [pc, #308]	; (8005c88 <MX_LWIP_Init+0x28c>)
 8005b52:	789b      	ldrb	r3, [r3, #2]
 8005b54:	021b      	lsls	r3, r3, #8
 8005b56:	430b      	orrs	r3, r1
 8005b58:	494b      	ldr	r1, [pc, #300]	; (8005c88 <MX_LWIP_Init+0x28c>)
 8005b5a:	78c9      	ldrb	r1, [r1, #3]
 8005b5c:	430b      	orrs	r3, r1
 8005b5e:	0e1b      	lsrs	r3, r3, #24
 8005b60:	4313      	orrs	r3, r2
 8005b62:	4a4c      	ldr	r2, [pc, #304]	; (8005c94 <MX_LWIP_Init+0x298>)
 8005b64:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005b66:	4b49      	ldr	r3, [pc, #292]	; (8005c8c <MX_LWIP_Init+0x290>)
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	061a      	lsls	r2, r3, #24
 8005b6c:	4b47      	ldr	r3, [pc, #284]	; (8005c8c <MX_LWIP_Init+0x290>)
 8005b6e:	785b      	ldrb	r3, [r3, #1]
 8005b70:	041b      	lsls	r3, r3, #16
 8005b72:	431a      	orrs	r2, r3
 8005b74:	4b45      	ldr	r3, [pc, #276]	; (8005c8c <MX_LWIP_Init+0x290>)
 8005b76:	789b      	ldrb	r3, [r3, #2]
 8005b78:	021b      	lsls	r3, r3, #8
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	4a43      	ldr	r2, [pc, #268]	; (8005c8c <MX_LWIP_Init+0x290>)
 8005b7e:	78d2      	ldrb	r2, [r2, #3]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	061a      	lsls	r2, r3, #24
 8005b84:	4b41      	ldr	r3, [pc, #260]	; (8005c8c <MX_LWIP_Init+0x290>)
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	0619      	lsls	r1, r3, #24
 8005b8a:	4b40      	ldr	r3, [pc, #256]	; (8005c8c <MX_LWIP_Init+0x290>)
 8005b8c:	785b      	ldrb	r3, [r3, #1]
 8005b8e:	041b      	lsls	r3, r3, #16
 8005b90:	4319      	orrs	r1, r3
 8005b92:	4b3e      	ldr	r3, [pc, #248]	; (8005c8c <MX_LWIP_Init+0x290>)
 8005b94:	789b      	ldrb	r3, [r3, #2]
 8005b96:	021b      	lsls	r3, r3, #8
 8005b98:	430b      	orrs	r3, r1
 8005b9a:	493c      	ldr	r1, [pc, #240]	; (8005c8c <MX_LWIP_Init+0x290>)
 8005b9c:	78c9      	ldrb	r1, [r1, #3]
 8005b9e:	430b      	orrs	r3, r1
 8005ba0:	021b      	lsls	r3, r3, #8
 8005ba2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005ba6:	431a      	orrs	r2, r3
 8005ba8:	4b38      	ldr	r3, [pc, #224]	; (8005c8c <MX_LWIP_Init+0x290>)
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	0619      	lsls	r1, r3, #24
 8005bae:	4b37      	ldr	r3, [pc, #220]	; (8005c8c <MX_LWIP_Init+0x290>)
 8005bb0:	785b      	ldrb	r3, [r3, #1]
 8005bb2:	041b      	lsls	r3, r3, #16
 8005bb4:	4319      	orrs	r1, r3
 8005bb6:	4b35      	ldr	r3, [pc, #212]	; (8005c8c <MX_LWIP_Init+0x290>)
 8005bb8:	789b      	ldrb	r3, [r3, #2]
 8005bba:	021b      	lsls	r3, r3, #8
 8005bbc:	430b      	orrs	r3, r1
 8005bbe:	4933      	ldr	r1, [pc, #204]	; (8005c8c <MX_LWIP_Init+0x290>)
 8005bc0:	78c9      	ldrb	r1, [r1, #3]
 8005bc2:	430b      	orrs	r3, r1
 8005bc4:	0a1b      	lsrs	r3, r3, #8
 8005bc6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	4b2f      	ldr	r3, [pc, #188]	; (8005c8c <MX_LWIP_Init+0x290>)
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	0619      	lsls	r1, r3, #24
 8005bd2:	4b2e      	ldr	r3, [pc, #184]	; (8005c8c <MX_LWIP_Init+0x290>)
 8005bd4:	785b      	ldrb	r3, [r3, #1]
 8005bd6:	041b      	lsls	r3, r3, #16
 8005bd8:	4319      	orrs	r1, r3
 8005bda:	4b2c      	ldr	r3, [pc, #176]	; (8005c8c <MX_LWIP_Init+0x290>)
 8005bdc:	789b      	ldrb	r3, [r3, #2]
 8005bde:	021b      	lsls	r3, r3, #8
 8005be0:	430b      	orrs	r3, r1
 8005be2:	492a      	ldr	r1, [pc, #168]	; (8005c8c <MX_LWIP_Init+0x290>)
 8005be4:	78c9      	ldrb	r1, [r1, #3]
 8005be6:	430b      	orrs	r3, r1
 8005be8:	0e1b      	lsrs	r3, r3, #24
 8005bea:	4313      	orrs	r3, r2
 8005bec:	4a2a      	ldr	r2, [pc, #168]	; (8005c98 <MX_LWIP_Init+0x29c>)
 8005bee:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005bf0:	4b2a      	ldr	r3, [pc, #168]	; (8005c9c <MX_LWIP_Init+0x2a0>)
 8005bf2:	9302      	str	r3, [sp, #8]
 8005bf4:	4b2a      	ldr	r3, [pc, #168]	; (8005ca0 <MX_LWIP_Init+0x2a4>)
 8005bf6:	9301      	str	r3, [sp, #4]
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	9300      	str	r3, [sp, #0]
 8005bfc:	4b26      	ldr	r3, [pc, #152]	; (8005c98 <MX_LWIP_Init+0x29c>)
 8005bfe:	4a25      	ldr	r2, [pc, #148]	; (8005c94 <MX_LWIP_Init+0x298>)
 8005c00:	4923      	ldr	r1, [pc, #140]	; (8005c90 <MX_LWIP_Init+0x294>)
 8005c02:	4828      	ldr	r0, [pc, #160]	; (8005ca4 <MX_LWIP_Init+0x2a8>)
 8005c04:	f009 ff52 	bl	800faac <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005c08:	4826      	ldr	r0, [pc, #152]	; (8005ca4 <MX_LWIP_Init+0x2a8>)
 8005c0a:	f00a f915 	bl	800fe38 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005c0e:	4b25      	ldr	r3, [pc, #148]	; (8005ca4 <MX_LWIP_Init+0x2a8>)
 8005c10:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005c14:	089b      	lsrs	r3, r3, #2
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d003      	beq.n	8005c28 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005c20:	4820      	ldr	r0, [pc, #128]	; (8005ca4 <MX_LWIP_Init+0x2a8>)
 8005c22:	f00a f919 	bl	800fe58 <netif_set_up>
 8005c26:	e002      	b.n	8005c2e <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005c28:	481e      	ldr	r0, [pc, #120]	; (8005ca4 <MX_LWIP_Init+0x2a8>)
 8005c2a:	f00a f98b 	bl	800ff44 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8005c2e:	491e      	ldr	r1, [pc, #120]	; (8005ca8 <MX_LWIP_Init+0x2ac>)
 8005c30:	481c      	ldr	r0, [pc, #112]	; (8005ca4 <MX_LWIP_Init+0x2a8>)
 8005c32:	f00a fa1d 	bl	8010070 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 8005c36:	2200      	movs	r2, #0
 8005c38:	2101      	movs	r1, #1
 8005c3a:	2001      	movs	r0, #1
 8005c3c:	f000 ff12 	bl	8006a64 <osSemaphoreNew>
 8005c40:	4603      	mov	r3, r0
 8005c42:	4a1a      	ldr	r2, [pc, #104]	; (8005cac <MX_LWIP_Init+0x2b0>)
 8005c44:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8005c46:	4b1a      	ldr	r3, [pc, #104]	; (8005cb0 <MX_LWIP_Init+0x2b4>)
 8005c48:	4a16      	ldr	r2, [pc, #88]	; (8005ca4 <MX_LWIP_Init+0x2a8>)
 8005c4a:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8005c4c:	4b17      	ldr	r3, [pc, #92]	; (8005cac <MX_LWIP_Init+0x2b0>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a17      	ldr	r2, [pc, #92]	; (8005cb0 <MX_LWIP_Init+0x2b4>)
 8005c52:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005c54:	2224      	movs	r2, #36	; 0x24
 8005c56:	2100      	movs	r1, #0
 8005c58:	4816      	ldr	r0, [pc, #88]	; (8005cb4 <MX_LWIP_Init+0x2b8>)
 8005c5a:	f01d fec3 	bl	80239e4 <memset>
  attributes.name = "LinkThr";
 8005c5e:	4b15      	ldr	r3, [pc, #84]	; (8005cb4 <MX_LWIP_Init+0x2b8>)
 8005c60:	4a15      	ldr	r2, [pc, #84]	; (8005cb8 <MX_LWIP_Init+0x2bc>)
 8005c62:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005c64:	4b13      	ldr	r3, [pc, #76]	; (8005cb4 <MX_LWIP_Init+0x2b8>)
 8005c66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c6a:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8005c6c:	4b11      	ldr	r3, [pc, #68]	; (8005cb4 <MX_LWIP_Init+0x2b8>)
 8005c6e:	2210      	movs	r2, #16
 8005c70:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 8005c72:	4a10      	ldr	r2, [pc, #64]	; (8005cb4 <MX_LWIP_Init+0x2b8>)
 8005c74:	490e      	ldr	r1, [pc, #56]	; (8005cb0 <MX_LWIP_Init+0x2b4>)
 8005c76:	4811      	ldr	r0, [pc, #68]	; (8005cbc <MX_LWIP_Init+0x2c0>)
 8005c78:	f000 fcd8 	bl	800662c <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005c7c:	bf00      	nop
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	2000429c 	.word	0x2000429c
 8005c88:	200042a0 	.word	0x200042a0
 8005c8c:	200042a4 	.word	0x200042a4
 8005c90:	20004290 	.word	0x20004290
 8005c94:	20004294 	.word	0x20004294
 8005c98:	20004298 	.word	0x20004298
 8005c9c:	0800de71 	.word	0x0800de71
 8005ca0:	08006309 	.word	0x08006309
 8005ca4:	20004254 	.word	0x20004254
 8005ca8:	080063ed 	.word	0x080063ed
 8005cac:	20004248 	.word	0x20004248
 8005cb0:	2000424c 	.word	0x2000424c
 8005cb4:	200042a8 	.word	0x200042a8
 8005cb8:	0802529c 	.word	0x0802529c
 8005cbc:	08006375 	.word	0x08006375

08005cc0 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b08e      	sub	sp, #56	; 0x38
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ccc:	2200      	movs	r2, #0
 8005cce:	601a      	str	r2, [r3, #0]
 8005cd0:	605a      	str	r2, [r3, #4]
 8005cd2:	609a      	str	r2, [r3, #8]
 8005cd4:	60da      	str	r2, [r3, #12]
 8005cd6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a52      	ldr	r2, [pc, #328]	; (8005e28 <HAL_ETH_MspInit+0x168>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	f040 809e 	bne.w	8005e20 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005ce4:	4b51      	ldr	r3, [pc, #324]	; (8005e2c <HAL_ETH_MspInit+0x16c>)
 8005ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce8:	4a50      	ldr	r2, [pc, #320]	; (8005e2c <HAL_ETH_MspInit+0x16c>)
 8005cea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005cee:	6313      	str	r3, [r2, #48]	; 0x30
 8005cf0:	4b4e      	ldr	r3, [pc, #312]	; (8005e2c <HAL_ETH_MspInit+0x16c>)
 8005cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cf8:	623b      	str	r3, [r7, #32]
 8005cfa:	6a3b      	ldr	r3, [r7, #32]
 8005cfc:	4b4b      	ldr	r3, [pc, #300]	; (8005e2c <HAL_ETH_MspInit+0x16c>)
 8005cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d00:	4a4a      	ldr	r2, [pc, #296]	; (8005e2c <HAL_ETH_MspInit+0x16c>)
 8005d02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d06:	6313      	str	r3, [r2, #48]	; 0x30
 8005d08:	4b48      	ldr	r3, [pc, #288]	; (8005e2c <HAL_ETH_MspInit+0x16c>)
 8005d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005d10:	61fb      	str	r3, [r7, #28]
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	4b45      	ldr	r3, [pc, #276]	; (8005e2c <HAL_ETH_MspInit+0x16c>)
 8005d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d18:	4a44      	ldr	r2, [pc, #272]	; (8005e2c <HAL_ETH_MspInit+0x16c>)
 8005d1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d1e:	6313      	str	r3, [r2, #48]	; 0x30
 8005d20:	4b42      	ldr	r3, [pc, #264]	; (8005e2c <HAL_ETH_MspInit+0x16c>)
 8005d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d28:	61bb      	str	r3, [r7, #24]
 8005d2a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d2c:	4b3f      	ldr	r3, [pc, #252]	; (8005e2c <HAL_ETH_MspInit+0x16c>)
 8005d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d30:	4a3e      	ldr	r2, [pc, #248]	; (8005e2c <HAL_ETH_MspInit+0x16c>)
 8005d32:	f043 0304 	orr.w	r3, r3, #4
 8005d36:	6313      	str	r3, [r2, #48]	; 0x30
 8005d38:	4b3c      	ldr	r3, [pc, #240]	; (8005e2c <HAL_ETH_MspInit+0x16c>)
 8005d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3c:	f003 0304 	and.w	r3, r3, #4
 8005d40:	617b      	str	r3, [r7, #20]
 8005d42:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d44:	4b39      	ldr	r3, [pc, #228]	; (8005e2c <HAL_ETH_MspInit+0x16c>)
 8005d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d48:	4a38      	ldr	r2, [pc, #224]	; (8005e2c <HAL_ETH_MspInit+0x16c>)
 8005d4a:	f043 0301 	orr.w	r3, r3, #1
 8005d4e:	6313      	str	r3, [r2, #48]	; 0x30
 8005d50:	4b36      	ldr	r3, [pc, #216]	; (8005e2c <HAL_ETH_MspInit+0x16c>)
 8005d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d54:	f003 0301 	and.w	r3, r3, #1
 8005d58:	613b      	str	r3, [r7, #16]
 8005d5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d5c:	4b33      	ldr	r3, [pc, #204]	; (8005e2c <HAL_ETH_MspInit+0x16c>)
 8005d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d60:	4a32      	ldr	r2, [pc, #200]	; (8005e2c <HAL_ETH_MspInit+0x16c>)
 8005d62:	f043 0302 	orr.w	r3, r3, #2
 8005d66:	6313      	str	r3, [r2, #48]	; 0x30
 8005d68:	4b30      	ldr	r3, [pc, #192]	; (8005e2c <HAL_ETH_MspInit+0x16c>)
 8005d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6c:	f003 0302 	and.w	r3, r3, #2
 8005d70:	60fb      	str	r3, [r7, #12]
 8005d72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005d74:	4b2d      	ldr	r3, [pc, #180]	; (8005e2c <HAL_ETH_MspInit+0x16c>)
 8005d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d78:	4a2c      	ldr	r2, [pc, #176]	; (8005e2c <HAL_ETH_MspInit+0x16c>)
 8005d7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d7e:	6313      	str	r3, [r2, #48]	; 0x30
 8005d80:	4b2a      	ldr	r3, [pc, #168]	; (8005e2c <HAL_ETH_MspInit+0x16c>)
 8005d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d88:	60bb      	str	r3, [r7, #8]
 8005d8a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005d8c:	2332      	movs	r3, #50	; 0x32
 8005d8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d90:	2302      	movs	r3, #2
 8005d92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d94:	2300      	movs	r3, #0
 8005d96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005d9c:	230b      	movs	r3, #11
 8005d9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005da0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005da4:	4619      	mov	r1, r3
 8005da6:	4822      	ldr	r0, [pc, #136]	; (8005e30 <HAL_ETH_MspInit+0x170>)
 8005da8:	f7fc ff70 	bl	8002c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005dac:	2386      	movs	r3, #134	; 0x86
 8005dae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005db0:	2302      	movs	r3, #2
 8005db2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005db4:	2300      	movs	r3, #0
 8005db6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005db8:	2303      	movs	r3, #3
 8005dba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005dbc:	230b      	movs	r3, #11
 8005dbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	481b      	ldr	r0, [pc, #108]	; (8005e34 <HAL_ETH_MspInit+0x174>)
 8005dc8:	f7fc ff60 	bl	8002c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005dcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005dd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dd2:	2302      	movs	r3, #2
 8005dd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005dde:	230b      	movs	r3, #11
 8005de0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8005de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005de6:	4619      	mov	r1, r3
 8005de8:	4813      	ldr	r0, [pc, #76]	; (8005e38 <HAL_ETH_MspInit+0x178>)
 8005dea:	f7fc ff4f 	bl	8002c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8005dee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005df2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005df4:	2302      	movs	r3, #2
 8005df6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005e00:	230b      	movs	r3, #11
 8005e02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e08:	4619      	mov	r1, r3
 8005e0a:	480c      	ldr	r0, [pc, #48]	; (8005e3c <HAL_ETH_MspInit+0x17c>)
 8005e0c:	f7fc ff3e 	bl	8002c8c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005e10:	2200      	movs	r2, #0
 8005e12:	2105      	movs	r1, #5
 8005e14:	203d      	movs	r0, #61	; 0x3d
 8005e16:	f7fb fda3 	bl	8001960 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005e1a:	203d      	movs	r0, #61	; 0x3d
 8005e1c:	f7fb fdbc 	bl	8001998 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005e20:	bf00      	nop
 8005e22:	3738      	adds	r7, #56	; 0x38
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	40028000 	.word	0x40028000
 8005e2c:	40023800 	.word	0x40023800
 8005e30:	40020800 	.word	0x40020800
 8005e34:	40020000 	.word	0x40020000
 8005e38:	40020400 	.word	0x40020400
 8005e3c:	40021800 	.word	0x40021800

08005e40 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8005e48:	4b04      	ldr	r3, [pc, #16]	; (8005e5c <HAL_ETH_RxCpltCallback+0x1c>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f000 ff0b 	bl	8006c68 <osSemaphoreRelease>
}
 8005e52:	bf00      	nop
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	2000736c 	.word	0x2000736c

08005e60 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b090      	sub	sp, #64	; 0x40
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005e6c:	4b5d      	ldr	r3, [pc, #372]	; (8005fe4 <low_level_init+0x184>)
 8005e6e:	4a5e      	ldr	r2, [pc, #376]	; (8005fe8 <low_level_init+0x188>)
 8005e70:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8005e72:	4b5c      	ldr	r3, [pc, #368]	; (8005fe4 <low_level_init+0x184>)
 8005e74:	2201      	movs	r2, #1
 8005e76:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8005e78:	4b5a      	ldr	r3, [pc, #360]	; (8005fe4 <low_level_init+0x184>)
 8005e7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005e7e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005e80:	4b58      	ldr	r3, [pc, #352]	; (8005fe4 <low_level_init+0x184>)
 8005e82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e86:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8005e88:	4b56      	ldr	r3, [pc, #344]	; (8005fe4 <low_level_init+0x184>)
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 8005e92:	2380      	movs	r3, #128	; 0x80
 8005e94:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 8005e96:	23e1      	movs	r3, #225	; 0xe1
 8005e98:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8005ea6:	4a4f      	ldr	r2, [pc, #316]	; (8005fe4 <low_level_init+0x184>)
 8005ea8:	f107 030c 	add.w	r3, r7, #12
 8005eac:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8005eae:	4b4d      	ldr	r3, [pc, #308]	; (8005fe4 <low_level_init+0x184>)
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8005eb4:	4b4b      	ldr	r3, [pc, #300]	; (8005fe4 <low_level_init+0x184>)
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8005eba:	4b4a      	ldr	r3, [pc, #296]	; (8005fe4 <low_level_init+0x184>)
 8005ebc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005ec0:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005ec2:	4848      	ldr	r0, [pc, #288]	; (8005fe4 <low_level_init+0x184>)
 8005ec4:	f7fb fd76 	bl	80019b4 <HAL_ETH_Init>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8005ece:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d108      	bne.n	8005ee8 <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005edc:	f043 0304 	orr.w	r3, r3, #4
 8005ee0:	b2da      	uxtb	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8005ee8:	2304      	movs	r3, #4
 8005eea:	4a40      	ldr	r2, [pc, #256]	; (8005fec <low_level_init+0x18c>)
 8005eec:	4940      	ldr	r1, [pc, #256]	; (8005ff0 <low_level_init+0x190>)
 8005eee:	483d      	ldr	r0, [pc, #244]	; (8005fe4 <low_level_init+0x184>)
 8005ef0:	f7fb fef8 	bl	8001ce4 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8005ef4:	2304      	movs	r3, #4
 8005ef6:	4a3f      	ldr	r2, [pc, #252]	; (8005ff4 <low_level_init+0x194>)
 8005ef8:	493f      	ldr	r1, [pc, #252]	; (8005ff8 <low_level_init+0x198>)
 8005efa:	483a      	ldr	r0, [pc, #232]	; (8005fe4 <low_level_init+0x184>)
 8005efc:	f7fb ff5a 	bl	8001db4 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2206      	movs	r2, #6
 8005f04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005f08:	4b36      	ldr	r3, [pc, #216]	; (8005fe4 <low_level_init+0x184>)
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	781a      	ldrb	r2, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005f14:	4b33      	ldr	r3, [pc, #204]	; (8005fe4 <low_level_init+0x184>)
 8005f16:	695b      	ldr	r3, [r3, #20]
 8005f18:	785a      	ldrb	r2, [r3, #1]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005f20:	4b30      	ldr	r3, [pc, #192]	; (8005fe4 <low_level_init+0x184>)
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	789a      	ldrb	r2, [r3, #2]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005f2c:	4b2d      	ldr	r3, [pc, #180]	; (8005fe4 <low_level_init+0x184>)
 8005f2e:	695b      	ldr	r3, [r3, #20]
 8005f30:	78da      	ldrb	r2, [r3, #3]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005f38:	4b2a      	ldr	r3, [pc, #168]	; (8005fe4 <low_level_init+0x184>)
 8005f3a:	695b      	ldr	r3, [r3, #20]
 8005f3c:	791a      	ldrb	r2, [r3, #4]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005f44:	4b27      	ldr	r3, [pc, #156]	; (8005fe4 <low_level_init+0x184>)
 8005f46:	695b      	ldr	r3, [r3, #20]
 8005f48:	795a      	ldrb	r2, [r3, #5]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005f56:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005f5e:	f043 030a 	orr.w	r3, r3, #10
 8005f62:	b2da      	uxtb	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	2101      	movs	r1, #1
 8005f6e:	2001      	movs	r0, #1
 8005f70:	f000 fd78 	bl	8006a64 <osSemaphoreNew>
 8005f74:	4603      	mov	r3, r0
 8005f76:	4a21      	ldr	r2, [pc, #132]	; (8005ffc <low_level_init+0x19c>)
 8005f78:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005f7a:	f107 0314 	add.w	r3, r7, #20
 8005f7e:	2224      	movs	r2, #36	; 0x24
 8005f80:	2100      	movs	r1, #0
 8005f82:	4618      	mov	r0, r3
 8005f84:	f01d fd2e 	bl	80239e4 <memset>
  attributes.name = "EthIf";
 8005f88:	4b1d      	ldr	r3, [pc, #116]	; (8006000 <low_level_init+0x1a0>)
 8005f8a:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005f8c:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8005f90:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 8005f92:	2330      	movs	r3, #48	; 0x30
 8005f94:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 8005f96:	f107 0314 	add.w	r3, r7, #20
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	6879      	ldr	r1, [r7, #4]
 8005f9e:	4819      	ldr	r0, [pc, #100]	; (8006004 <low_level_init+0x1a4>)
 8005fa0:	f000 fb44 	bl	800662c <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8005fa4:	480f      	ldr	r0, [pc, #60]	; (8005fe4 <low_level_init+0x184>)
 8005fa6:	f7fc fa29 	bl	80023fc <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8005faa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005fae:	461a      	mov	r2, r3
 8005fb0:	211d      	movs	r1, #29
 8005fb2:	480c      	ldr	r0, [pc, #48]	; (8005fe4 <low_level_init+0x184>)
 8005fb4:	f7fc f954 	bl	8002260 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8005fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fba:	f043 030b 	orr.w	r3, r3, #11
 8005fbe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8005fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	211d      	movs	r1, #29
 8005fc6:	4807      	ldr	r0, [pc, #28]	; (8005fe4 <low_level_init+0x184>)
 8005fc8:	f7fc f9b2 	bl	8002330 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8005fcc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	211d      	movs	r1, #29
 8005fd4:	4803      	ldr	r0, [pc, #12]	; (8005fe4 <low_level_init+0x184>)
 8005fd6:	f7fc f943 	bl	8002260 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005fda:	bf00      	nop
 8005fdc:	3740      	adds	r7, #64	; 0x40
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	20007370 	.word	0x20007370
 8005fe8:	40028000 	.word	0x40028000
 8005fec:	20005b9c 	.word	0x20005b9c
 8005ff0:	2000434c 	.word	0x2000434c
 8005ff4:	200043cc 	.word	0x200043cc
 8005ff8:	200042cc 	.word	0x200042cc
 8005ffc:	2000736c 	.word	0x2000736c
 8006000:	080252a4 	.word	0x080252a4
 8006004:	080062a9 	.word	0x080062a9

08006008 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b08a      	sub	sp, #40	; 0x28
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8006012:	4b4b      	ldr	r3, [pc, #300]	; (8006140 <low_level_output+0x138>)
 8006014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800601a:	2300      	movs	r3, #0
 800601c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800601e:	2300      	movs	r3, #0
 8006020:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8006022:	2300      	movs	r3, #0
 8006024:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8006026:	2300      	movs	r3, #0
 8006028:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800602a:	4b45      	ldr	r3, [pc, #276]	; (8006140 <low_level_output+0x138>)
 800602c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8006030:	2300      	movs	r3, #0
 8006032:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	623b      	str	r3, [r7, #32]
 8006038:	e05a      	b.n	80060f0 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	da03      	bge.n	800604a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8006042:	23f8      	movs	r3, #248	; 0xf8
 8006044:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8006048:	e05c      	b.n	8006104 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800604a:	6a3b      	ldr	r3, [r7, #32]
 800604c:	895b      	ldrh	r3, [r3, #10]
 800604e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8006050:	2300      	movs	r3, #0
 8006052:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006054:	e02f      	b.n	80060b6 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8006056:	69fa      	ldr	r2, [r7, #28]
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	18d0      	adds	r0, r2, r3
 800605c:	6a3b      	ldr	r3, [r7, #32]
 800605e:	685a      	ldr	r2, [r3, #4]
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	18d1      	adds	r1, r2, r3
 8006064:	693a      	ldr	r2, [r7, #16]
 8006066:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800606a:	1a9b      	subs	r3, r3, r2
 800606c:	461a      	mov	r2, r3
 800606e:	f01d fc91 	bl	8023994 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	da03      	bge.n	8006088 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8006080:	23f8      	movs	r3, #248	; 0xf8
 8006082:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8006086:	e03d      	b.n	8006104 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	4413      	add	r3, r2
 8006094:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8006098:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80060a4:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80060b0:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80060b2:	2300      	movs	r3, #0
 80060b4:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	4413      	add	r3, r2
 80060bc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d8c8      	bhi.n	8006056 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80060c4:	69fa      	ldr	r2, [r7, #28]
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	18d0      	adds	r0, r2, r3
 80060ca:	6a3b      	ldr	r3, [r7, #32]
 80060cc:	685a      	ldr	r2, [r3, #4]
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	4413      	add	r3, r2
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	4619      	mov	r1, r3
 80060d6:	f01d fc5d 	bl	8023994 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	4413      	add	r3, r2
 80060e0:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	4413      	add	r3, r2
 80060e8:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80060ea:	6a3b      	ldr	r3, [r7, #32]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	623b      	str	r3, [r7, #32]
 80060f0:	6a3b      	ldr	r3, [r7, #32]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1a1      	bne.n	800603a <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80060f6:	6979      	ldr	r1, [r7, #20]
 80060f8:	4811      	ldr	r0, [pc, #68]	; (8006140 <low_level_output+0x138>)
 80060fa:	f7fb fec7 	bl	8001e8c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80060fe:	2300      	movs	r3, #0
 8006100:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8006104:	4b0e      	ldr	r3, [pc, #56]	; (8006140 <low_level_output+0x138>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	f003 0320 	and.w	r3, r3, #32
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00d      	beq.n	8006132 <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8006116:	4b0a      	ldr	r3, [pc, #40]	; (8006140 <low_level_output+0x138>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800611e:	461a      	mov	r2, r3
 8006120:	2320      	movs	r3, #32
 8006122:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8006124:	4b06      	ldr	r3, [pc, #24]	; (8006140 <low_level_output+0x138>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800612c:	461a      	mov	r2, r3
 800612e:	2300      	movs	r3, #0
 8006130:	6053      	str	r3, [r2, #4]
  }
  return errval;
 8006132:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006136:	4618      	mov	r0, r3
 8006138:	3728      	adds	r7, #40	; 0x28
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	20007370 	.word	0x20007370

08006144 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b08c      	sub	sp, #48	; 0x30
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800614c:	2300      	movs	r3, #0
 800614e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8006150:	2300      	movs	r3, #0
 8006152:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8006154:	2300      	movs	r3, #0
 8006156:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8006158:	2300      	movs	r3, #0
 800615a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800615c:	2300      	movs	r3, #0
 800615e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8006160:	2300      	movs	r3, #0
 8006162:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8006164:	2300      	movs	r3, #0
 8006166:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8006168:	484e      	ldr	r0, [pc, #312]	; (80062a4 <low_level_input+0x160>)
 800616a:	f7fb ff79 	bl	8002060 <HAL_ETH_GetReceivedFrame_IT>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d001      	beq.n	8006178 <low_level_input+0x34>

    return NULL;
 8006174:	2300      	movs	r3, #0
 8006176:	e091      	b.n	800629c <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8006178:	4b4a      	ldr	r3, [pc, #296]	; (80062a4 <low_level_input+0x160>)
 800617a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800617c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800617e:	4b49      	ldr	r3, [pc, #292]	; (80062a4 <low_level_input+0x160>)
 8006180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006182:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8006184:	89fb      	ldrh	r3, [r7, #14]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d007      	beq.n	800619a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800618a:	89fb      	ldrh	r3, [r7, #14]
 800618c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8006190:	4619      	mov	r1, r3
 8006192:	2000      	movs	r0, #0
 8006194:	f00a f86e 	bl	8010274 <pbuf_alloc>
 8006198:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800619a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800619c:	2b00      	cmp	r3, #0
 800619e:	d04b      	beq.n	8006238 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80061a0:	4b40      	ldr	r3, [pc, #256]	; (80062a4 <low_level_input+0x160>)
 80061a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a4:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80061a6:	2300      	movs	r3, #0
 80061a8:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80061aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80061ae:	e040      	b.n	8006232 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80061b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b2:	895b      	ldrh	r3, [r3, #10]
 80061b4:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80061b6:	2300      	movs	r3, #0
 80061b8:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80061ba:	e021      	b.n	8006200 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80061bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061be:	685a      	ldr	r2, [r3, #4]
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	18d0      	adds	r0, r2, r3
 80061c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	18d1      	adds	r1, r2, r3
 80061ca:	69fa      	ldr	r2, [r7, #28]
 80061cc:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80061d0:	1a9b      	subs	r3, r3, r2
 80061d2:	461a      	mov	r2, r3
 80061d4:	f01d fbde 	bl	8023994 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80061d8:	6a3b      	ldr	r3, [r7, #32]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80061de:	6a3b      	ldr	r3, [r7, #32]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80061e4:	69fa      	ldr	r2, [r7, #28]
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	4413      	add	r3, r2
 80061ea:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80061ee:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80061f0:	69ba      	ldr	r2, [r7, #24]
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80061fa:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80061fc:	2300      	movs	r3, #0
 80061fe:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	4413      	add	r3, r2
 8006206:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800620a:	4293      	cmp	r3, r2
 800620c:	d8d6      	bhi.n	80061bc <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800620e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006210:	685a      	ldr	r2, [r3, #4]
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	18d0      	adds	r0, r2, r3
 8006216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	4413      	add	r3, r2
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	4619      	mov	r1, r3
 8006220:	f01d fbb8 	bl	8023994 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8006224:	69fa      	ldr	r2, [r7, #28]
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	4413      	add	r3, r2
 800622a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800622c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	62bb      	str	r3, [r7, #40]	; 0x28
 8006232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006234:	2b00      	cmp	r3, #0
 8006236:	d1bb      	bne.n	80061b0 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006238:	4b1a      	ldr	r3, [pc, #104]	; (80062a4 <low_level_input+0x160>)
 800623a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623c:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800623e:	2300      	movs	r3, #0
 8006240:	613b      	str	r3, [r7, #16]
 8006242:	e00b      	b.n	800625c <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8006244:	6a3b      	ldr	r3, [r7, #32]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800624c:	6a3b      	ldr	r3, [r7, #32]
 800624e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8006250:	6a3b      	ldr	r3, [r7, #32]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	3301      	adds	r3, #1
 800625a:	613b      	str	r3, [r7, #16]
 800625c:	4b11      	ldr	r3, [pc, #68]	; (80062a4 <low_level_input+0x160>)
 800625e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	429a      	cmp	r2, r3
 8006264:	d3ee      	bcc.n	8006244 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8006266:	4b0f      	ldr	r3, [pc, #60]	; (80062a4 <low_level_input+0x160>)
 8006268:	2200      	movs	r2, #0
 800626a:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800626c:	4b0d      	ldr	r3, [pc, #52]	; (80062a4 <low_level_input+0x160>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00d      	beq.n	800629a <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800627e:	4b09      	ldr	r3, [pc, #36]	; (80062a4 <low_level_input+0x160>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006286:	461a      	mov	r2, r3
 8006288:	2380      	movs	r3, #128	; 0x80
 800628a:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800628c:	4b05      	ldr	r3, [pc, #20]	; (80062a4 <low_level_input+0x160>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006294:	461a      	mov	r2, r3
 8006296:	2300      	movs	r3, #0
 8006298:	6093      	str	r3, [r2, #8]
  }
  return p;
 800629a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800629c:	4618      	mov	r0, r3
 800629e:	3730      	adds	r7, #48	; 0x30
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	20007370 	.word	0x20007370

080062a8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80062b4:	4b12      	ldr	r3, [pc, #72]	; (8006300 <ethernetif_input+0x58>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80062bc:	4618      	mov	r0, r3
 80062be:	f000 fc6d 	bl	8006b9c <osSemaphoreAcquire>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d1f5      	bne.n	80062b4 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 80062c8:	480e      	ldr	r0, [pc, #56]	; (8006304 <ethernetif_input+0x5c>)
 80062ca:	f015 f9e7 	bl	801b69c <sys_mutex_lock>
        p = low_level_input( netif );
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f7ff ff38 	bl	8006144 <low_level_input>
 80062d4:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00a      	beq.n	80062f2 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	68f9      	ldr	r1, [r7, #12]
 80062e2:	68b8      	ldr	r0, [r7, #8]
 80062e4:	4798      	blx	r3
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d002      	beq.n	80062f2 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 80062ec:	68b8      	ldr	r0, [r7, #8]
 80062ee:	f00a fad7 	bl	80108a0 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 80062f2:	4804      	ldr	r0, [pc, #16]	; (8006304 <ethernetif_input+0x5c>)
 80062f4:	f015 f9e1 	bl	801b6ba <sys_mutex_unlock>
      } while(p!=NULL);
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1e4      	bne.n	80062c8 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80062fe:	e7d9      	b.n	80062b4 <ethernetif_input+0xc>
 8006300:	2000736c 	.word	0x2000736c
 8006304:	2000be54 	.word	0x2000be54

08006308 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d106      	bne.n	8006324 <ethernetif_init+0x1c>
 8006316:	4b0e      	ldr	r3, [pc, #56]	; (8006350 <ethernetif_init+0x48>)
 8006318:	f240 223b 	movw	r2, #571	; 0x23b
 800631c:	490d      	ldr	r1, [pc, #52]	; (8006354 <ethernetif_init+0x4c>)
 800631e:	480e      	ldr	r0, [pc, #56]	; (8006358 <ethernetif_init+0x50>)
 8006320:	f01d fc5e 	bl	8023be0 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2273      	movs	r2, #115	; 0x73
 8006328:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2274      	movs	r2, #116	; 0x74
 8006330:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a09      	ldr	r2, [pc, #36]	; (800635c <ethernetif_init+0x54>)
 8006338:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a08      	ldr	r2, [pc, #32]	; (8006360 <ethernetif_init+0x58>)
 800633e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f7ff fd8d 	bl	8005e60 <low_level_init>

  return ERR_OK;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3708      	adds	r7, #8
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	080252ac 	.word	0x080252ac
 8006354:	080252c8 	.word	0x080252c8
 8006358:	080252d8 	.word	0x080252d8
 800635c:	080188e9 	.word	0x080188e9
 8006360:	08006009 	.word	0x08006009

08006364 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006368:	f7fb fa12 	bl	8001790 <HAL_GetTick>
 800636c:	4603      	mov	r3, r0
}
 800636e:	4618      	mov	r0, r3
 8006370:	bd80      	pop	{r7, pc}
	...

08006374 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800637c:	2300      	movs	r3, #0
 800637e:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8006384:	f107 0308 	add.w	r3, r7, #8
 8006388:	461a      	mov	r2, r3
 800638a:	2101      	movs	r1, #1
 800638c:	4816      	ldr	r0, [pc, #88]	; (80063e8 <ethernetif_set_link+0x74>)
 800638e:	f7fb ff67 	bl	8002260 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	f003 0304 	and.w	r3, r3, #4
 8006398:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80063a2:	f003 0304 	and.w	r3, r3, #4
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d108      	bne.n	80063bc <ethernetif_set_link+0x48>
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d005      	beq.n	80063bc <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4618      	mov	r0, r3
 80063b6:	f009 fdf7 	bl	800ffa8 <netif_set_link_up>
 80063ba:	e011      	b.n	80063e0 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80063c4:	089b      	lsrs	r3, r3, #2
 80063c6:	f003 0301 	and.w	r3, r3, #1
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d007      	beq.n	80063e0 <ethernetif_set_link+0x6c>
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d104      	bne.n	80063e0 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4618      	mov	r0, r3
 80063dc:	f009 fe18 	bl	8010010 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 80063e0:	20c8      	movs	r0, #200	; 0xc8
 80063e2:	f000 f9c9 	bl	8006778 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80063e6:	e7cd      	b.n	8006384 <ethernetif_set_link+0x10>
 80063e8:	20007370 	.word	0x20007370

080063ec <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80063f4:	2300      	movs	r3, #0
 80063f6:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80063f8:	2300      	movs	r3, #0
 80063fa:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006402:	089b      	lsrs	r3, r3, #2
 8006404:	f003 0301 	and.w	r3, r3, #1
 8006408:	b2db      	uxtb	r3, r3
 800640a:	2b00      	cmp	r3, #0
 800640c:	d05d      	beq.n	80064ca <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800640e:	4b34      	ldr	r3, [pc, #208]	; (80064e0 <ethernetif_update_config+0xf4>)
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d03f      	beq.n	8006496 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8006416:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800641a:	2100      	movs	r1, #0
 800641c:	4830      	ldr	r0, [pc, #192]	; (80064e0 <ethernetif_update_config+0xf4>)
 800641e:	f7fb ff87 	bl	8002330 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8006422:	f7fb f9b5 	bl	8001790 <HAL_GetTick>
 8006426:	4603      	mov	r3, r0
 8006428:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800642a:	f107 0308 	add.w	r3, r7, #8
 800642e:	461a      	mov	r2, r3
 8006430:	2101      	movs	r1, #1
 8006432:	482b      	ldr	r0, [pc, #172]	; (80064e0 <ethernetif_update_config+0xf4>)
 8006434:	f7fb ff14 	bl	8002260 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8006438:	f7fb f9aa 	bl	8001790 <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006446:	d828      	bhi.n	800649a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	f003 0320 	and.w	r3, r3, #32
 800644e:	2b00      	cmp	r3, #0
 8006450:	d0eb      	beq.n	800642a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8006452:	f107 0308 	add.w	r3, r7, #8
 8006456:	461a      	mov	r2, r3
 8006458:	2110      	movs	r1, #16
 800645a:	4821      	ldr	r0, [pc, #132]	; (80064e0 <ethernetif_update_config+0xf4>)
 800645c:	f7fb ff00 	bl	8002260 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	f003 0304 	and.w	r3, r3, #4
 8006466:	2b00      	cmp	r3, #0
 8006468:	d004      	beq.n	8006474 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800646a:	4b1d      	ldr	r3, [pc, #116]	; (80064e0 <ethernetif_update_config+0xf4>)
 800646c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006470:	60da      	str	r2, [r3, #12]
 8006472:	e002      	b.n	800647a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8006474:	4b1a      	ldr	r3, [pc, #104]	; (80064e0 <ethernetif_update_config+0xf4>)
 8006476:	2200      	movs	r2, #0
 8006478:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	f003 0302 	and.w	r3, r3, #2
 8006480:	2b00      	cmp	r3, #0
 8006482:	d003      	beq.n	800648c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8006484:	4b16      	ldr	r3, [pc, #88]	; (80064e0 <ethernetif_update_config+0xf4>)
 8006486:	2200      	movs	r2, #0
 8006488:	609a      	str	r2, [r3, #8]
 800648a:	e016      	b.n	80064ba <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800648c:	4b14      	ldr	r3, [pc, #80]	; (80064e0 <ethernetif_update_config+0xf4>)
 800648e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006492:	609a      	str	r2, [r3, #8]
 8006494:	e011      	b.n	80064ba <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8006496:	bf00      	nop
 8006498:	e000      	b.n	800649c <ethernetif_update_config+0xb0>
          goto error;
 800649a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800649c:	4b10      	ldr	r3, [pc, #64]	; (80064e0 <ethernetif_update_config+0xf4>)
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	08db      	lsrs	r3, r3, #3
 80064a2:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80064a4:	4b0e      	ldr	r3, [pc, #56]	; (80064e0 <ethernetif_update_config+0xf4>)
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	085b      	lsrs	r3, r3, #1
 80064aa:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80064ac:	4313      	orrs	r3, r2
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	461a      	mov	r2, r3
 80064b2:	2100      	movs	r1, #0
 80064b4:	480a      	ldr	r0, [pc, #40]	; (80064e0 <ethernetif_update_config+0xf4>)
 80064b6:	f7fb ff3b 	bl	8002330 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80064ba:	2100      	movs	r1, #0
 80064bc:	4808      	ldr	r0, [pc, #32]	; (80064e0 <ethernetif_update_config+0xf4>)
 80064be:	f7fb fffb 	bl	80024b8 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80064c2:	4807      	ldr	r0, [pc, #28]	; (80064e0 <ethernetif_update_config+0xf4>)
 80064c4:	f7fb ff9a 	bl	80023fc <HAL_ETH_Start>
 80064c8:	e002      	b.n	80064d0 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80064ca:	4805      	ldr	r0, [pc, #20]	; (80064e0 <ethernetif_update_config+0xf4>)
 80064cc:	f7fb ffc5 	bl	800245a <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 f807 	bl	80064e4 <ethernetif_notify_conn_changed>
}
 80064d6:	bf00      	nop
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	20007370 	.word	0x20007370

080064e4 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80064ec:	bf00      	nop
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80064f8:	b480      	push	{r7}
 80064fa:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80064fc:	bf00      	nop
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
	...

08006508 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800650e:	f3ef 8305 	mrs	r3, IPSR
 8006512:	60bb      	str	r3, [r7, #8]
  return(result);
 8006514:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10f      	bne.n	800653a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800651a:	f3ef 8310 	mrs	r3, PRIMASK
 800651e:	607b      	str	r3, [r7, #4]
  return(result);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d105      	bne.n	8006532 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006526:	f3ef 8311 	mrs	r3, BASEPRI
 800652a:	603b      	str	r3, [r7, #0]
  return(result);
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d007      	beq.n	8006542 <osKernelInitialize+0x3a>
 8006532:	4b0e      	ldr	r3, [pc, #56]	; (800656c <osKernelInitialize+0x64>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2b02      	cmp	r3, #2
 8006538:	d103      	bne.n	8006542 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800653a:	f06f 0305 	mvn.w	r3, #5
 800653e:	60fb      	str	r3, [r7, #12]
 8006540:	e00c      	b.n	800655c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006542:	4b0a      	ldr	r3, [pc, #40]	; (800656c <osKernelInitialize+0x64>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d105      	bne.n	8006556 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800654a:	4b08      	ldr	r3, [pc, #32]	; (800656c <osKernelInitialize+0x64>)
 800654c:	2201      	movs	r2, #1
 800654e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006550:	2300      	movs	r3, #0
 8006552:	60fb      	str	r3, [r7, #12]
 8006554:	e002      	b.n	800655c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006556:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800655a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800655c:	68fb      	ldr	r3, [r7, #12]
}
 800655e:	4618      	mov	r0, r3
 8006560:	3714      	adds	r7, #20
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	200073b8 	.word	0x200073b8

08006570 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006576:	f3ef 8305 	mrs	r3, IPSR
 800657a:	60bb      	str	r3, [r7, #8]
  return(result);
 800657c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800657e:	2b00      	cmp	r3, #0
 8006580:	d10f      	bne.n	80065a2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006582:	f3ef 8310 	mrs	r3, PRIMASK
 8006586:	607b      	str	r3, [r7, #4]
  return(result);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d105      	bne.n	800659a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800658e:	f3ef 8311 	mrs	r3, BASEPRI
 8006592:	603b      	str	r3, [r7, #0]
  return(result);
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d007      	beq.n	80065aa <osKernelStart+0x3a>
 800659a:	4b0f      	ldr	r3, [pc, #60]	; (80065d8 <osKernelStart+0x68>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d103      	bne.n	80065aa <osKernelStart+0x3a>
    stat = osErrorISR;
 80065a2:	f06f 0305 	mvn.w	r3, #5
 80065a6:	60fb      	str	r3, [r7, #12]
 80065a8:	e010      	b.n	80065cc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80065aa:	4b0b      	ldr	r3, [pc, #44]	; (80065d8 <osKernelStart+0x68>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d109      	bne.n	80065c6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80065b2:	f7ff ffa1 	bl	80064f8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80065b6:	4b08      	ldr	r3, [pc, #32]	; (80065d8 <osKernelStart+0x68>)
 80065b8:	2202      	movs	r2, #2
 80065ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80065bc:	f001 feea 	bl	8008394 <vTaskStartScheduler>
      stat = osOK;
 80065c0:	2300      	movs	r3, #0
 80065c2:	60fb      	str	r3, [r7, #12]
 80065c4:	e002      	b.n	80065cc <osKernelStart+0x5c>
    } else {
      stat = osError;
 80065c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80065cc:	68fb      	ldr	r3, [r7, #12]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	200073b8 	.word	0x200073b8

080065dc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065e2:	f3ef 8305 	mrs	r3, IPSR
 80065e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80065e8:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10f      	bne.n	800660e <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065ee:	f3ef 8310 	mrs	r3, PRIMASK
 80065f2:	607b      	str	r3, [r7, #4]
  return(result);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d105      	bne.n	8006606 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065fa:	f3ef 8311 	mrs	r3, BASEPRI
 80065fe:	603b      	str	r3, [r7, #0]
  return(result);
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d007      	beq.n	8006616 <osKernelGetTickCount+0x3a>
 8006606:	4b08      	ldr	r3, [pc, #32]	; (8006628 <osKernelGetTickCount+0x4c>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2b02      	cmp	r3, #2
 800660c:	d103      	bne.n	8006616 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800660e:	f001 ffcf 	bl	80085b0 <xTaskGetTickCountFromISR>
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	e002      	b.n	800661c <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8006616:	f001 ffbb 	bl	8008590 <xTaskGetTickCount>
 800661a:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800661c:	68fb      	ldr	r3, [r7, #12]
}
 800661e:	4618      	mov	r0, r3
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	200073b8 	.word	0x200073b8

0800662c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800662c:	b580      	push	{r7, lr}
 800662e:	b090      	sub	sp, #64	; 0x40
 8006630:	af04      	add	r7, sp, #16
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006638:	2300      	movs	r3, #0
 800663a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800663c:	f3ef 8305 	mrs	r3, IPSR
 8006640:	61fb      	str	r3, [r7, #28]
  return(result);
 8006642:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006644:	2b00      	cmp	r3, #0
 8006646:	f040 808f 	bne.w	8006768 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800664a:	f3ef 8310 	mrs	r3, PRIMASK
 800664e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d105      	bne.n	8006662 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006656:	f3ef 8311 	mrs	r3, BASEPRI
 800665a:	617b      	str	r3, [r7, #20]
  return(result);
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d003      	beq.n	800666a <osThreadNew+0x3e>
 8006662:	4b44      	ldr	r3, [pc, #272]	; (8006774 <osThreadNew+0x148>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2b02      	cmp	r3, #2
 8006668:	d07e      	beq.n	8006768 <osThreadNew+0x13c>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d07b      	beq.n	8006768 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006670:	2380      	movs	r3, #128	; 0x80
 8006672:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006674:	2318      	movs	r3, #24
 8006676:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006678:	2300      	movs	r3, #0
 800667a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800667c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006680:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d045      	beq.n	8006714 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d002      	beq.n	8006696 <osThreadNew+0x6a>
        name = attr->name;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	699b      	ldr	r3, [r3, #24]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d002      	beq.n	80066a4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80066a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d008      	beq.n	80066bc <osThreadNew+0x90>
 80066aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ac:	2b38      	cmp	r3, #56	; 0x38
 80066ae:	d805      	bhi.n	80066bc <osThreadNew+0x90>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	f003 0301 	and.w	r3, r3, #1
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d001      	beq.n	80066c0 <osThreadNew+0x94>
        return (NULL);
 80066bc:	2300      	movs	r3, #0
 80066be:	e054      	b.n	800676a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	695b      	ldr	r3, [r3, #20]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d003      	beq.n	80066d0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	695b      	ldr	r3, [r3, #20]
 80066cc:	089b      	lsrs	r3, r3, #2
 80066ce:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d00e      	beq.n	80066f6 <osThreadNew+0xca>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	2bc3      	cmp	r3, #195	; 0xc3
 80066de:	d90a      	bls.n	80066f6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d006      	beq.n	80066f6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	695b      	ldr	r3, [r3, #20]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d002      	beq.n	80066f6 <osThreadNew+0xca>
        mem = 1;
 80066f0:	2301      	movs	r3, #1
 80066f2:	623b      	str	r3, [r7, #32]
 80066f4:	e010      	b.n	8006718 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10c      	bne.n	8006718 <osThreadNew+0xec>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d108      	bne.n	8006718 <osThreadNew+0xec>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d104      	bne.n	8006718 <osThreadNew+0xec>
          mem = 0;
 800670e:	2300      	movs	r3, #0
 8006710:	623b      	str	r3, [r7, #32]
 8006712:	e001      	b.n	8006718 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006714:	2300      	movs	r3, #0
 8006716:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006718:	6a3b      	ldr	r3, [r7, #32]
 800671a:	2b01      	cmp	r3, #1
 800671c:	d110      	bne.n	8006740 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006726:	9202      	str	r2, [sp, #8]
 8006728:	9301      	str	r3, [sp, #4]
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	9300      	str	r3, [sp, #0]
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006732:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f001 fc87 	bl	8008048 <xTaskCreateStatic>
 800673a:	4603      	mov	r3, r0
 800673c:	613b      	str	r3, [r7, #16]
 800673e:	e013      	b.n	8006768 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006740:	6a3b      	ldr	r3, [r7, #32]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d110      	bne.n	8006768 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006748:	b29a      	uxth	r2, r3
 800674a:	f107 0310 	add.w	r3, r7, #16
 800674e:	9301      	str	r3, [sp, #4]
 8006750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006752:	9300      	str	r3, [sp, #0]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006758:	68f8      	ldr	r0, [r7, #12]
 800675a:	f001 fca8 	bl	80080ae <xTaskCreate>
 800675e:	4603      	mov	r3, r0
 8006760:	2b01      	cmp	r3, #1
 8006762:	d001      	beq.n	8006768 <osThreadNew+0x13c>
          hTask = NULL;
 8006764:	2300      	movs	r3, #0
 8006766:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006768:	693b      	ldr	r3, [r7, #16]
}
 800676a:	4618      	mov	r0, r3
 800676c:	3730      	adds	r7, #48	; 0x30
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	200073b8 	.word	0x200073b8

08006778 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006778:	b580      	push	{r7, lr}
 800677a:	b086      	sub	sp, #24
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006780:	f3ef 8305 	mrs	r3, IPSR
 8006784:	613b      	str	r3, [r7, #16]
  return(result);
 8006786:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006788:	2b00      	cmp	r3, #0
 800678a:	d10f      	bne.n	80067ac <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800678c:	f3ef 8310 	mrs	r3, PRIMASK
 8006790:	60fb      	str	r3, [r7, #12]
  return(result);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d105      	bne.n	80067a4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006798:	f3ef 8311 	mrs	r3, BASEPRI
 800679c:	60bb      	str	r3, [r7, #8]
  return(result);
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d007      	beq.n	80067b4 <osDelay+0x3c>
 80067a4:	4b0a      	ldr	r3, [pc, #40]	; (80067d0 <osDelay+0x58>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	d103      	bne.n	80067b4 <osDelay+0x3c>
    stat = osErrorISR;
 80067ac:	f06f 0305 	mvn.w	r3, #5
 80067b0:	617b      	str	r3, [r7, #20]
 80067b2:	e007      	b.n	80067c4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80067b4:	2300      	movs	r3, #0
 80067b6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d002      	beq.n	80067c4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f001 fdc4 	bl	800834c <vTaskDelay>
    }
  }

  return (stat);
 80067c4:	697b      	ldr	r3, [r7, #20]
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3718      	adds	r7, #24
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	200073b8 	.word	0x200073b8

080067d4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b08a      	sub	sp, #40	; 0x28
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80067dc:	2300      	movs	r3, #0
 80067de:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067e0:	f3ef 8305 	mrs	r3, IPSR
 80067e4:	613b      	str	r3, [r7, #16]
  return(result);
 80067e6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f040 8085 	bne.w	80068f8 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067ee:	f3ef 8310 	mrs	r3, PRIMASK
 80067f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d105      	bne.n	8006806 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80067fa:	f3ef 8311 	mrs	r3, BASEPRI
 80067fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d003      	beq.n	800680e <osMutexNew+0x3a>
 8006806:	4b3f      	ldr	r3, [pc, #252]	; (8006904 <osMutexNew+0x130>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2b02      	cmp	r3, #2
 800680c:	d074      	beq.n	80068f8 <osMutexNew+0x124>
    if (attr != NULL) {
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d003      	beq.n	800681c <osMutexNew+0x48>
      type = attr->attr_bits;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	623b      	str	r3, [r7, #32]
 800681a:	e001      	b.n	8006820 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800681c:	2300      	movs	r3, #0
 800681e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006820:	6a3b      	ldr	r3, [r7, #32]
 8006822:	f003 0301 	and.w	r3, r3, #1
 8006826:	2b00      	cmp	r3, #0
 8006828:	d002      	beq.n	8006830 <osMutexNew+0x5c>
      rmtx = 1U;
 800682a:	2301      	movs	r3, #1
 800682c:	61fb      	str	r3, [r7, #28]
 800682e:	e001      	b.n	8006834 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8006830:	2300      	movs	r3, #0
 8006832:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006834:	6a3b      	ldr	r3, [r7, #32]
 8006836:	f003 0308 	and.w	r3, r3, #8
 800683a:	2b00      	cmp	r3, #0
 800683c:	d15c      	bne.n	80068f8 <osMutexNew+0x124>
      mem = -1;
 800683e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006842:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d015      	beq.n	8006876 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d006      	beq.n	8006860 <osMutexNew+0x8c>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	2b4f      	cmp	r3, #79	; 0x4f
 8006858:	d902      	bls.n	8006860 <osMutexNew+0x8c>
          mem = 1;
 800685a:	2301      	movs	r3, #1
 800685c:	61bb      	str	r3, [r7, #24]
 800685e:	e00c      	b.n	800687a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d108      	bne.n	800687a <osMutexNew+0xa6>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d104      	bne.n	800687a <osMutexNew+0xa6>
            mem = 0;
 8006870:	2300      	movs	r3, #0
 8006872:	61bb      	str	r3, [r7, #24]
 8006874:	e001      	b.n	800687a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8006876:	2300      	movs	r3, #0
 8006878:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	2b01      	cmp	r3, #1
 800687e:	d112      	bne.n	80068a6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d007      	beq.n	8006896 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	4619      	mov	r1, r3
 800688c:	2004      	movs	r0, #4
 800688e:	f000 fe38 	bl	8007502 <xQueueCreateMutexStatic>
 8006892:	6278      	str	r0, [r7, #36]	; 0x24
 8006894:	e016      	b.n	80068c4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	4619      	mov	r1, r3
 800689c:	2001      	movs	r0, #1
 800689e:	f000 fe30 	bl	8007502 <xQueueCreateMutexStatic>
 80068a2:	6278      	str	r0, [r7, #36]	; 0x24
 80068a4:	e00e      	b.n	80068c4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d10b      	bne.n	80068c4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d004      	beq.n	80068bc <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80068b2:	2004      	movs	r0, #4
 80068b4:	f000 fe0d 	bl	80074d2 <xQueueCreateMutex>
 80068b8:	6278      	str	r0, [r7, #36]	; 0x24
 80068ba:	e003      	b.n	80068c4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80068bc:	2001      	movs	r0, #1
 80068be:	f000 fe08 	bl	80074d2 <xQueueCreateMutex>
 80068c2:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80068c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00c      	beq.n	80068e4 <osMutexNew+0x110>
        if (attr != NULL) {
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d003      	beq.n	80068d8 <osMutexNew+0x104>
          name = attr->name;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	617b      	str	r3, [r7, #20]
 80068d6:	e001      	b.n	80068dc <osMutexNew+0x108>
        } else {
          name = NULL;
 80068d8:	2300      	movs	r3, #0
 80068da:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80068dc:	6979      	ldr	r1, [r7, #20]
 80068de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068e0:	f001 fb2a 	bl	8007f38 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80068e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d006      	beq.n	80068f8 <osMutexNew+0x124>
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d003      	beq.n	80068f8 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80068f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f2:	f043 0301 	orr.w	r3, r3, #1
 80068f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3728      	adds	r7, #40	; 0x28
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	200073b8 	.word	0x200073b8

08006908 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006908:	b580      	push	{r7, lr}
 800690a:	b088      	sub	sp, #32
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f023 0301 	bic.w	r3, r3, #1
 8006918:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f003 0301 	and.w	r3, r3, #1
 8006920:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8006922:	2300      	movs	r3, #0
 8006924:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006926:	f3ef 8305 	mrs	r3, IPSR
 800692a:	613b      	str	r3, [r7, #16]
  return(result);
 800692c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800692e:	2b00      	cmp	r3, #0
 8006930:	d10f      	bne.n	8006952 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006932:	f3ef 8310 	mrs	r3, PRIMASK
 8006936:	60fb      	str	r3, [r7, #12]
  return(result);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d105      	bne.n	800694a <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800693e:	f3ef 8311 	mrs	r3, BASEPRI
 8006942:	60bb      	str	r3, [r7, #8]
  return(result);
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d007      	beq.n	800695a <osMutexAcquire+0x52>
 800694a:	4b1d      	ldr	r3, [pc, #116]	; (80069c0 <osMutexAcquire+0xb8>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2b02      	cmp	r3, #2
 8006950:	d103      	bne.n	800695a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8006952:	f06f 0305 	mvn.w	r3, #5
 8006956:	61fb      	str	r3, [r7, #28]
 8006958:	e02c      	b.n	80069b4 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d103      	bne.n	8006968 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8006960:	f06f 0303 	mvn.w	r3, #3
 8006964:	61fb      	str	r3, [r7, #28]
 8006966:	e025      	b.n	80069b4 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d011      	beq.n	8006992 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800696e:	6839      	ldr	r1, [r7, #0]
 8006970:	69b8      	ldr	r0, [r7, #24]
 8006972:	f000 fe07 	bl	8007584 <xQueueTakeMutexRecursive>
 8006976:	4603      	mov	r3, r0
 8006978:	2b01      	cmp	r3, #1
 800697a:	d01b      	beq.n	80069b4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d003      	beq.n	800698a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8006982:	f06f 0301 	mvn.w	r3, #1
 8006986:	61fb      	str	r3, [r7, #28]
 8006988:	e014      	b.n	80069b4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800698a:	f06f 0302 	mvn.w	r3, #2
 800698e:	61fb      	str	r3, [r7, #28]
 8006990:	e010      	b.n	80069b4 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006992:	6839      	ldr	r1, [r7, #0]
 8006994:	69b8      	ldr	r0, [r7, #24]
 8006996:	f001 f84f 	bl	8007a38 <xQueueSemaphoreTake>
 800699a:	4603      	mov	r3, r0
 800699c:	2b01      	cmp	r3, #1
 800699e:	d009      	beq.n	80069b4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d003      	beq.n	80069ae <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80069a6:	f06f 0301 	mvn.w	r3, #1
 80069aa:	61fb      	str	r3, [r7, #28]
 80069ac:	e002      	b.n	80069b4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80069ae:	f06f 0302 	mvn.w	r3, #2
 80069b2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80069b4:	69fb      	ldr	r3, [r7, #28]
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3720      	adds	r7, #32
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	200073b8 	.word	0x200073b8

080069c4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b088      	sub	sp, #32
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f023 0301 	bic.w	r3, r3, #1
 80069d2:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80069dc:	2300      	movs	r3, #0
 80069de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069e0:	f3ef 8305 	mrs	r3, IPSR
 80069e4:	613b      	str	r3, [r7, #16]
  return(result);
 80069e6:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d10f      	bne.n	8006a0c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069ec:	f3ef 8310 	mrs	r3, PRIMASK
 80069f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d105      	bne.n	8006a04 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80069f8:	f3ef 8311 	mrs	r3, BASEPRI
 80069fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d007      	beq.n	8006a14 <osMutexRelease+0x50>
 8006a04:	4b16      	ldr	r3, [pc, #88]	; (8006a60 <osMutexRelease+0x9c>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d103      	bne.n	8006a14 <osMutexRelease+0x50>
    stat = osErrorISR;
 8006a0c:	f06f 0305 	mvn.w	r3, #5
 8006a10:	61fb      	str	r3, [r7, #28]
 8006a12:	e01f      	b.n	8006a54 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d103      	bne.n	8006a22 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8006a1a:	f06f 0303 	mvn.w	r3, #3
 8006a1e:	61fb      	str	r3, [r7, #28]
 8006a20:	e018      	b.n	8006a54 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d009      	beq.n	8006a3c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006a28:	69b8      	ldr	r0, [r7, #24]
 8006a2a:	f000 fd85 	bl	8007538 <xQueueGiveMutexRecursive>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d00f      	beq.n	8006a54 <osMutexRelease+0x90>
        stat = osErrorResource;
 8006a34:	f06f 0302 	mvn.w	r3, #2
 8006a38:	61fb      	str	r3, [r7, #28]
 8006a3a:	e00b      	b.n	8006a54 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	2200      	movs	r2, #0
 8006a40:	2100      	movs	r1, #0
 8006a42:	69b8      	ldr	r0, [r7, #24]
 8006a44:	f000 fdf6 	bl	8007634 <xQueueGenericSend>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d002      	beq.n	8006a54 <osMutexRelease+0x90>
        stat = osErrorResource;
 8006a4e:	f06f 0302 	mvn.w	r3, #2
 8006a52:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8006a54:	69fb      	ldr	r3, [r7, #28]
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3720      	adds	r7, #32
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	200073b8 	.word	0x200073b8

08006a64 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b08c      	sub	sp, #48	; 0x30
 8006a68:	af02      	add	r7, sp, #8
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006a70:	2300      	movs	r3, #0
 8006a72:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a74:	f3ef 8305 	mrs	r3, IPSR
 8006a78:	61bb      	str	r3, [r7, #24]
  return(result);
 8006a7a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f040 8086 	bne.w	8006b8e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a82:	f3ef 8310 	mrs	r3, PRIMASK
 8006a86:	617b      	str	r3, [r7, #20]
  return(result);
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d105      	bne.n	8006a9a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a8e:	f3ef 8311 	mrs	r3, BASEPRI
 8006a92:	613b      	str	r3, [r7, #16]
  return(result);
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d003      	beq.n	8006aa2 <osSemaphoreNew+0x3e>
 8006a9a:	4b3f      	ldr	r3, [pc, #252]	; (8006b98 <osSemaphoreNew+0x134>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d075      	beq.n	8006b8e <osSemaphoreNew+0x12a>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d072      	beq.n	8006b8e <osSemaphoreNew+0x12a>
 8006aa8:	68ba      	ldr	r2, [r7, #8]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d86e      	bhi.n	8006b8e <osSemaphoreNew+0x12a>
    mem = -1;
 8006ab0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ab4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d015      	beq.n	8006ae8 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d006      	beq.n	8006ad2 <osSemaphoreNew+0x6e>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	2b4f      	cmp	r3, #79	; 0x4f
 8006aca:	d902      	bls.n	8006ad2 <osSemaphoreNew+0x6e>
        mem = 1;
 8006acc:	2301      	movs	r3, #1
 8006ace:	623b      	str	r3, [r7, #32]
 8006ad0:	e00c      	b.n	8006aec <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d108      	bne.n	8006aec <osSemaphoreNew+0x88>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d104      	bne.n	8006aec <osSemaphoreNew+0x88>
          mem = 0;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	623b      	str	r3, [r7, #32]
 8006ae6:	e001      	b.n	8006aec <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8006aec:	6a3b      	ldr	r3, [r7, #32]
 8006aee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006af2:	d04c      	beq.n	8006b8e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d128      	bne.n	8006b4c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8006afa:	6a3b      	ldr	r3, [r7, #32]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d10a      	bne.n	8006b16 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	2203      	movs	r2, #3
 8006b06:	9200      	str	r2, [sp, #0]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	2100      	movs	r1, #0
 8006b0c:	2001      	movs	r0, #1
 8006b0e:	f000 fc4f 	bl	80073b0 <xQueueGenericCreateStatic>
 8006b12:	6278      	str	r0, [r7, #36]	; 0x24
 8006b14:	e005      	b.n	8006b22 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8006b16:	2203      	movs	r2, #3
 8006b18:	2100      	movs	r1, #0
 8006b1a:	2001      	movs	r0, #1
 8006b1c:	f000 fc6a 	bl	80073f4 <xQueueGenericCreate>
 8006b20:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d022      	beq.n	8006b6e <osSemaphoreNew+0x10a>
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d01f      	beq.n	8006b6e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006b2e:	2300      	movs	r3, #0
 8006b30:	2200      	movs	r2, #0
 8006b32:	2100      	movs	r1, #0
 8006b34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b36:	f000 fd7d 	bl	8007634 <xQueueGenericSend>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d016      	beq.n	8006b6e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8006b40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b42:	f001 f8bc 	bl	8007cbe <vQueueDelete>
            hSemaphore = NULL;
 8006b46:	2300      	movs	r3, #0
 8006b48:	627b      	str	r3, [r7, #36]	; 0x24
 8006b4a:	e010      	b.n	8006b6e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8006b4c:	6a3b      	ldr	r3, [r7, #32]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d108      	bne.n	8006b64 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	461a      	mov	r2, r3
 8006b58:	68b9      	ldr	r1, [r7, #8]
 8006b5a:	68f8      	ldr	r0, [r7, #12]
 8006b5c:	f000 fd3a 	bl	80075d4 <xQueueCreateCountingSemaphoreStatic>
 8006b60:	6278      	str	r0, [r7, #36]	; 0x24
 8006b62:	e004      	b.n	8006b6e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006b64:	68b9      	ldr	r1, [r7, #8]
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	f000 fd4e 	bl	8007608 <xQueueCreateCountingSemaphore>
 8006b6c:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00c      	beq.n	8006b8e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d003      	beq.n	8006b82 <osSemaphoreNew+0x11e>
          name = attr->name;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	61fb      	str	r3, [r7, #28]
 8006b80:	e001      	b.n	8006b86 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8006b82:	2300      	movs	r3, #0
 8006b84:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006b86:	69f9      	ldr	r1, [r7, #28]
 8006b88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b8a:	f001 f9d5 	bl	8007f38 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3728      	adds	r7, #40	; 0x28
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	200073b8 	.word	0x200073b8

08006b9c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b088      	sub	sp, #32
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006baa:	2300      	movs	r3, #0
 8006bac:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d103      	bne.n	8006bbc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006bb4:	f06f 0303 	mvn.w	r3, #3
 8006bb8:	61fb      	str	r3, [r7, #28]
 8006bba:	e04b      	b.n	8006c54 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bbc:	f3ef 8305 	mrs	r3, IPSR
 8006bc0:	617b      	str	r3, [r7, #20]
  return(result);
 8006bc2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d10f      	bne.n	8006be8 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bc8:	f3ef 8310 	mrs	r3, PRIMASK
 8006bcc:	613b      	str	r3, [r7, #16]
  return(result);
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d105      	bne.n	8006be0 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006bd4:	f3ef 8311 	mrs	r3, BASEPRI
 8006bd8:	60fb      	str	r3, [r7, #12]
  return(result);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d026      	beq.n	8006c2e <osSemaphoreAcquire+0x92>
 8006be0:	4b1f      	ldr	r3, [pc, #124]	; (8006c60 <osSemaphoreAcquire+0xc4>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2b02      	cmp	r3, #2
 8006be6:	d122      	bne.n	8006c2e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d003      	beq.n	8006bf6 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8006bee:	f06f 0303 	mvn.w	r3, #3
 8006bf2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006bf4:	e02d      	b.n	8006c52 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006bfa:	f107 0308 	add.w	r3, r7, #8
 8006bfe:	461a      	mov	r2, r3
 8006c00:	2100      	movs	r1, #0
 8006c02:	69b8      	ldr	r0, [r7, #24]
 8006c04:	f000 ffe0 	bl	8007bc8 <xQueueReceiveFromISR>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d003      	beq.n	8006c16 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8006c0e:	f06f 0302 	mvn.w	r3, #2
 8006c12:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006c14:	e01d      	b.n	8006c52 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d01a      	beq.n	8006c52 <osSemaphoreAcquire+0xb6>
 8006c1c:	4b11      	ldr	r3, [pc, #68]	; (8006c64 <osSemaphoreAcquire+0xc8>)
 8006c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c22:	601a      	str	r2, [r3, #0]
 8006c24:	f3bf 8f4f 	dsb	sy
 8006c28:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8006c2c:	e011      	b.n	8006c52 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006c2e:	6839      	ldr	r1, [r7, #0]
 8006c30:	69b8      	ldr	r0, [r7, #24]
 8006c32:	f000 ff01 	bl	8007a38 <xQueueSemaphoreTake>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d00b      	beq.n	8006c54 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d003      	beq.n	8006c4a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8006c42:	f06f 0301 	mvn.w	r3, #1
 8006c46:	61fb      	str	r3, [r7, #28]
 8006c48:	e004      	b.n	8006c54 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8006c4a:	f06f 0302 	mvn.w	r3, #2
 8006c4e:	61fb      	str	r3, [r7, #28]
 8006c50:	e000      	b.n	8006c54 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8006c52:	bf00      	nop
      }
    }
  }

  return (stat);
 8006c54:	69fb      	ldr	r3, [r7, #28]
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3720      	adds	r7, #32
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	200073b8 	.word	0x200073b8
 8006c64:	e000ed04 	.word	0xe000ed04

08006c68 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b088      	sub	sp, #32
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006c74:	2300      	movs	r3, #0
 8006c76:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d103      	bne.n	8006c86 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006c7e:	f06f 0303 	mvn.w	r3, #3
 8006c82:	61fb      	str	r3, [r7, #28]
 8006c84:	e03e      	b.n	8006d04 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c86:	f3ef 8305 	mrs	r3, IPSR
 8006c8a:	617b      	str	r3, [r7, #20]
  return(result);
 8006c8c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d10f      	bne.n	8006cb2 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c92:	f3ef 8310 	mrs	r3, PRIMASK
 8006c96:	613b      	str	r3, [r7, #16]
  return(result);
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d105      	bne.n	8006caa <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c9e:	f3ef 8311 	mrs	r3, BASEPRI
 8006ca2:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d01e      	beq.n	8006ce8 <osSemaphoreRelease+0x80>
 8006caa:	4b19      	ldr	r3, [pc, #100]	; (8006d10 <osSemaphoreRelease+0xa8>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2b02      	cmp	r3, #2
 8006cb0:	d11a      	bne.n	8006ce8 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006cb6:	f107 0308 	add.w	r3, r7, #8
 8006cba:	4619      	mov	r1, r3
 8006cbc:	69b8      	ldr	r0, [r7, #24]
 8006cbe:	f000 fdc1 	bl	8007844 <xQueueGiveFromISR>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d003      	beq.n	8006cd0 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8006cc8:	f06f 0302 	mvn.w	r3, #2
 8006ccc:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006cce:	e018      	b.n	8006d02 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d015      	beq.n	8006d02 <osSemaphoreRelease+0x9a>
 8006cd6:	4b0f      	ldr	r3, [pc, #60]	; (8006d14 <osSemaphoreRelease+0xac>)
 8006cd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cdc:	601a      	str	r2, [r3, #0]
 8006cde:	f3bf 8f4f 	dsb	sy
 8006ce2:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006ce6:	e00c      	b.n	8006d02 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006ce8:	2300      	movs	r3, #0
 8006cea:	2200      	movs	r2, #0
 8006cec:	2100      	movs	r1, #0
 8006cee:	69b8      	ldr	r0, [r7, #24]
 8006cf0:	f000 fca0 	bl	8007634 <xQueueGenericSend>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d004      	beq.n	8006d04 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8006cfa:	f06f 0302 	mvn.w	r3, #2
 8006cfe:	61fb      	str	r3, [r7, #28]
 8006d00:	e000      	b.n	8006d04 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006d02:	bf00      	nop
    }
  }

  return (stat);
 8006d04:	69fb      	ldr	r3, [r7, #28]
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3720      	adds	r7, #32
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	200073b8 	.word	0x200073b8
 8006d14:	e000ed04 	.word	0xe000ed04

08006d18 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b088      	sub	sp, #32
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d24:	f3ef 8305 	mrs	r3, IPSR
 8006d28:	617b      	str	r3, [r7, #20]
  return(result);
 8006d2a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d10f      	bne.n	8006d50 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d30:	f3ef 8310 	mrs	r3, PRIMASK
 8006d34:	613b      	str	r3, [r7, #16]
  return(result);
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d105      	bne.n	8006d48 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d3c:	f3ef 8311 	mrs	r3, BASEPRI
 8006d40:	60fb      	str	r3, [r7, #12]
  return(result);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d007      	beq.n	8006d58 <osSemaphoreDelete+0x40>
 8006d48:	4b0d      	ldr	r3, [pc, #52]	; (8006d80 <osSemaphoreDelete+0x68>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2b02      	cmp	r3, #2
 8006d4e:	d103      	bne.n	8006d58 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8006d50:	f06f 0305 	mvn.w	r3, #5
 8006d54:	61fb      	str	r3, [r7, #28]
 8006d56:	e00e      	b.n	8006d76 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d103      	bne.n	8006d66 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8006d5e:	f06f 0303 	mvn.w	r3, #3
 8006d62:	61fb      	str	r3, [r7, #28]
 8006d64:	e007      	b.n	8006d76 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8006d66:	69b8      	ldr	r0, [r7, #24]
 8006d68:	f001 f910 	bl	8007f8c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8006d70:	69b8      	ldr	r0, [r7, #24]
 8006d72:	f000 ffa4 	bl	8007cbe <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8006d76:	69fb      	ldr	r3, [r7, #28]
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3720      	adds	r7, #32
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	200073b8 	.word	0x200073b8

08006d84 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b08c      	sub	sp, #48	; 0x30
 8006d88:	af02      	add	r7, sp, #8
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006d90:	2300      	movs	r3, #0
 8006d92:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d94:	f3ef 8305 	mrs	r3, IPSR
 8006d98:	61bb      	str	r3, [r7, #24]
  return(result);
 8006d9a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d16f      	bne.n	8006e80 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006da0:	f3ef 8310 	mrs	r3, PRIMASK
 8006da4:	617b      	str	r3, [r7, #20]
  return(result);
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d105      	bne.n	8006db8 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006dac:	f3ef 8311 	mrs	r3, BASEPRI
 8006db0:	613b      	str	r3, [r7, #16]
  return(result);
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d003      	beq.n	8006dc0 <osMessageQueueNew+0x3c>
 8006db8:	4b34      	ldr	r3, [pc, #208]	; (8006e8c <osMessageQueueNew+0x108>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	d05f      	beq.n	8006e80 <osMessageQueueNew+0xfc>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d05c      	beq.n	8006e80 <osMessageQueueNew+0xfc>
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d059      	beq.n	8006e80 <osMessageQueueNew+0xfc>
    mem = -1;
 8006dcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006dd0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d029      	beq.n	8006e2c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d012      	beq.n	8006e06 <osMessageQueueNew+0x82>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	2b4f      	cmp	r3, #79	; 0x4f
 8006de6:	d90e      	bls.n	8006e06 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d00a      	beq.n	8006e06 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	695a      	ldr	r2, [r3, #20]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	68b9      	ldr	r1, [r7, #8]
 8006df8:	fb01 f303 	mul.w	r3, r1, r3
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d302      	bcc.n	8006e06 <osMessageQueueNew+0x82>
        mem = 1;
 8006e00:	2301      	movs	r3, #1
 8006e02:	623b      	str	r3, [r7, #32]
 8006e04:	e014      	b.n	8006e30 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d110      	bne.n	8006e30 <osMessageQueueNew+0xac>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d10c      	bne.n	8006e30 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d108      	bne.n	8006e30 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d104      	bne.n	8006e30 <osMessageQueueNew+0xac>
          mem = 0;
 8006e26:	2300      	movs	r3, #0
 8006e28:	623b      	str	r3, [r7, #32]
 8006e2a:	e001      	b.n	8006e30 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006e30:	6a3b      	ldr	r3, [r7, #32]
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d10b      	bne.n	8006e4e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	691a      	ldr	r2, [r3, #16]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	2100      	movs	r1, #0
 8006e40:	9100      	str	r1, [sp, #0]
 8006e42:	68b9      	ldr	r1, [r7, #8]
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f000 fab3 	bl	80073b0 <xQueueGenericCreateStatic>
 8006e4a:	6278      	str	r0, [r7, #36]	; 0x24
 8006e4c:	e008      	b.n	8006e60 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8006e4e:	6a3b      	ldr	r3, [r7, #32]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d105      	bne.n	8006e60 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006e54:	2200      	movs	r2, #0
 8006e56:	68b9      	ldr	r1, [r7, #8]
 8006e58:	68f8      	ldr	r0, [r7, #12]
 8006e5a:	f000 facb 	bl	80073f4 <xQueueGenericCreate>
 8006e5e:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00c      	beq.n	8006e80 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d003      	beq.n	8006e74 <osMessageQueueNew+0xf0>
        name = attr->name;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	61fb      	str	r3, [r7, #28]
 8006e72:	e001      	b.n	8006e78 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8006e74:	2300      	movs	r3, #0
 8006e76:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8006e78:	69f9      	ldr	r1, [r7, #28]
 8006e7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e7c:	f001 f85c 	bl	8007f38 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3728      	adds	r7, #40	; 0x28
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	200073b8 	.word	0x200073b8

08006e90 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b08a      	sub	sp, #40	; 0x28
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	603b      	str	r3, [r7, #0]
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ea8:	f3ef 8305 	mrs	r3, IPSR
 8006eac:	61fb      	str	r3, [r7, #28]
  return(result);
 8006eae:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10f      	bne.n	8006ed4 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006eb4:	f3ef 8310 	mrs	r3, PRIMASK
 8006eb8:	61bb      	str	r3, [r7, #24]
  return(result);
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d105      	bne.n	8006ecc <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ec0:	f3ef 8311 	mrs	r3, BASEPRI
 8006ec4:	617b      	str	r3, [r7, #20]
  return(result);
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d02c      	beq.n	8006f26 <osMessageQueuePut+0x96>
 8006ecc:	4b28      	ldr	r3, [pc, #160]	; (8006f70 <osMessageQueuePut+0xe0>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d128      	bne.n	8006f26 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006ed4:	6a3b      	ldr	r3, [r7, #32]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d005      	beq.n	8006ee6 <osMessageQueuePut+0x56>
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d002      	beq.n	8006ee6 <osMessageQueuePut+0x56>
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d003      	beq.n	8006eee <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8006ee6:	f06f 0303 	mvn.w	r3, #3
 8006eea:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006eec:	e039      	b.n	8006f62 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006ef2:	f107 0210 	add.w	r2, r7, #16
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	68b9      	ldr	r1, [r7, #8]
 8006efa:	6a38      	ldr	r0, [r7, #32]
 8006efc:	f000 fc44 	bl	8007788 <xQueueGenericSendFromISR>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d003      	beq.n	8006f0e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8006f06:	f06f 0302 	mvn.w	r3, #2
 8006f0a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006f0c:	e029      	b.n	8006f62 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d026      	beq.n	8006f62 <osMessageQueuePut+0xd2>
 8006f14:	4b17      	ldr	r3, [pc, #92]	; (8006f74 <osMessageQueuePut+0xe4>)
 8006f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f1a:	601a      	str	r2, [r3, #0]
 8006f1c:	f3bf 8f4f 	dsb	sy
 8006f20:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006f24:	e01d      	b.n	8006f62 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006f26:	6a3b      	ldr	r3, [r7, #32]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d002      	beq.n	8006f32 <osMessageQueuePut+0xa2>
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d103      	bne.n	8006f3a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8006f32:	f06f 0303 	mvn.w	r3, #3
 8006f36:	627b      	str	r3, [r7, #36]	; 0x24
 8006f38:	e014      	b.n	8006f64 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	683a      	ldr	r2, [r7, #0]
 8006f3e:	68b9      	ldr	r1, [r7, #8]
 8006f40:	6a38      	ldr	r0, [r7, #32]
 8006f42:	f000 fb77 	bl	8007634 <xQueueGenericSend>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d00b      	beq.n	8006f64 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d003      	beq.n	8006f5a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8006f52:	f06f 0301 	mvn.w	r3, #1
 8006f56:	627b      	str	r3, [r7, #36]	; 0x24
 8006f58:	e004      	b.n	8006f64 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8006f5a:	f06f 0302 	mvn.w	r3, #2
 8006f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8006f60:	e000      	b.n	8006f64 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006f62:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3728      	adds	r7, #40	; 0x28
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	200073b8 	.word	0x200073b8
 8006f74:	e000ed04 	.word	0xe000ed04

08006f78 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b08a      	sub	sp, #40	; 0x28
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	607a      	str	r2, [r7, #4]
 8006f84:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f8e:	f3ef 8305 	mrs	r3, IPSR
 8006f92:	61fb      	str	r3, [r7, #28]
  return(result);
 8006f94:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10f      	bne.n	8006fba <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f9a:	f3ef 8310 	mrs	r3, PRIMASK
 8006f9e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d105      	bne.n	8006fb2 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006fa6:	f3ef 8311 	mrs	r3, BASEPRI
 8006faa:	617b      	str	r3, [r7, #20]
  return(result);
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d02c      	beq.n	800700c <osMessageQueueGet+0x94>
 8006fb2:	4b28      	ldr	r3, [pc, #160]	; (8007054 <osMessageQueueGet+0xdc>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d128      	bne.n	800700c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006fba:	6a3b      	ldr	r3, [r7, #32]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d005      	beq.n	8006fcc <osMessageQueueGet+0x54>
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d002      	beq.n	8006fcc <osMessageQueueGet+0x54>
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d003      	beq.n	8006fd4 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8006fcc:	f06f 0303 	mvn.w	r3, #3
 8006fd0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006fd2:	e038      	b.n	8007046 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006fd8:	f107 0310 	add.w	r3, r7, #16
 8006fdc:	461a      	mov	r2, r3
 8006fde:	68b9      	ldr	r1, [r7, #8]
 8006fe0:	6a38      	ldr	r0, [r7, #32]
 8006fe2:	f000 fdf1 	bl	8007bc8 <xQueueReceiveFromISR>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d003      	beq.n	8006ff4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8006fec:	f06f 0302 	mvn.w	r3, #2
 8006ff0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006ff2:	e028      	b.n	8007046 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d025      	beq.n	8007046 <osMessageQueueGet+0xce>
 8006ffa:	4b17      	ldr	r3, [pc, #92]	; (8007058 <osMessageQueueGet+0xe0>)
 8006ffc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007000:	601a      	str	r2, [r3, #0]
 8007002:	f3bf 8f4f 	dsb	sy
 8007006:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800700a:	e01c      	b.n	8007046 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800700c:	6a3b      	ldr	r3, [r7, #32]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d002      	beq.n	8007018 <osMessageQueueGet+0xa0>
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d103      	bne.n	8007020 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8007018:	f06f 0303 	mvn.w	r3, #3
 800701c:	627b      	str	r3, [r7, #36]	; 0x24
 800701e:	e013      	b.n	8007048 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007020:	683a      	ldr	r2, [r7, #0]
 8007022:	68b9      	ldr	r1, [r7, #8]
 8007024:	6a38      	ldr	r0, [r7, #32]
 8007026:	f000 fc65 	bl	80078f4 <xQueueReceive>
 800702a:	4603      	mov	r3, r0
 800702c:	2b01      	cmp	r3, #1
 800702e:	d00b      	beq.n	8007048 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d003      	beq.n	800703e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8007036:	f06f 0301 	mvn.w	r3, #1
 800703a:	627b      	str	r3, [r7, #36]	; 0x24
 800703c:	e004      	b.n	8007048 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800703e:	f06f 0302 	mvn.w	r3, #2
 8007042:	627b      	str	r3, [r7, #36]	; 0x24
 8007044:	e000      	b.n	8007048 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007046:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800704a:	4618      	mov	r0, r3
 800704c:	3728      	adds	r7, #40	; 0x28
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	200073b8 	.word	0x200073b8
 8007058:	e000ed04 	.word	0xe000ed04

0800705c <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800705c:	b580      	push	{r7, lr}
 800705e:	b088      	sub	sp, #32
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d102      	bne.n	8007074 <osMessageQueueGetCount+0x18>
    count = 0U;
 800706e:	2300      	movs	r3, #0
 8007070:	61fb      	str	r3, [r7, #28]
 8007072:	e01e      	b.n	80070b2 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007074:	f3ef 8305 	mrs	r3, IPSR
 8007078:	617b      	str	r3, [r7, #20]
  return(result);
 800707a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800707c:	2b00      	cmp	r3, #0
 800707e:	d10f      	bne.n	80070a0 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007080:	f3ef 8310 	mrs	r3, PRIMASK
 8007084:	613b      	str	r3, [r7, #16]
  return(result);
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d105      	bne.n	8007098 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800708c:	f3ef 8311 	mrs	r3, BASEPRI
 8007090:	60fb      	str	r3, [r7, #12]
  return(result);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d008      	beq.n	80070aa <osMessageQueueGetCount+0x4e>
 8007098:	4b08      	ldr	r3, [pc, #32]	; (80070bc <osMessageQueueGetCount+0x60>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2b02      	cmp	r3, #2
 800709e:	d104      	bne.n	80070aa <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80070a0:	69b8      	ldr	r0, [r7, #24]
 80070a2:	f000 fdfc 	bl	8007c9e <uxQueueMessagesWaitingFromISR>
 80070a6:	61f8      	str	r0, [r7, #28]
 80070a8:	e003      	b.n	80070b2 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80070aa:	69b8      	ldr	r0, [r7, #24]
 80070ac:	f000 fde7 	bl	8007c7e <uxQueueMessagesWaiting>
 80070b0:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 80070b2:	69fb      	ldr	r3, [r7, #28]
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3720      	adds	r7, #32
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	200073b8 	.word	0x200073b8

080070c0 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b088      	sub	sp, #32
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070cc:	f3ef 8305 	mrs	r3, IPSR
 80070d0:	617b      	str	r3, [r7, #20]
  return(result);
 80070d2:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d10f      	bne.n	80070f8 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070d8:	f3ef 8310 	mrs	r3, PRIMASK
 80070dc:	613b      	str	r3, [r7, #16]
  return(result);
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d105      	bne.n	80070f0 <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80070e4:	f3ef 8311 	mrs	r3, BASEPRI
 80070e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d007      	beq.n	8007100 <osMessageQueueDelete+0x40>
 80070f0:	4b0d      	ldr	r3, [pc, #52]	; (8007128 <osMessageQueueDelete+0x68>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	d103      	bne.n	8007100 <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 80070f8:	f06f 0305 	mvn.w	r3, #5
 80070fc:	61fb      	str	r3, [r7, #28]
 80070fe:	e00e      	b.n	800711e <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d103      	bne.n	800710e <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 8007106:	f06f 0303 	mvn.w	r3, #3
 800710a:	61fb      	str	r3, [r7, #28]
 800710c:	e007      	b.n	800711e <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800710e:	69b8      	ldr	r0, [r7, #24]
 8007110:	f000 ff3c 	bl	8007f8c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8007114:	2300      	movs	r3, #0
 8007116:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 8007118:	69b8      	ldr	r0, [r7, #24]
 800711a:	f000 fdd0 	bl	8007cbe <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800711e:	69fb      	ldr	r3, [r7, #28]
}
 8007120:	4618      	mov	r0, r3
 8007122:	3720      	adds	r7, #32
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	200073b8 	.word	0x200073b8

0800712c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	4a07      	ldr	r2, [pc, #28]	; (8007158 <vApplicationGetIdleTaskMemory+0x2c>)
 800713c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	4a06      	ldr	r2, [pc, #24]	; (800715c <vApplicationGetIdleTaskMemory+0x30>)
 8007142:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2280      	movs	r2, #128	; 0x80
 8007148:	601a      	str	r2, [r3, #0]
}
 800714a:	bf00      	nop
 800714c:	3714      	adds	r7, #20
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	200073bc 	.word	0x200073bc
 800715c:	20007480 	.word	0x20007480

08007160 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007160:	b480      	push	{r7}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	4a07      	ldr	r2, [pc, #28]	; (800718c <vApplicationGetTimerTaskMemory+0x2c>)
 8007170:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	4a06      	ldr	r2, [pc, #24]	; (8007190 <vApplicationGetTimerTaskMemory+0x30>)
 8007176:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800717e:	601a      	str	r2, [r3, #0]
}
 8007180:	bf00      	nop
 8007182:	3714      	adds	r7, #20
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr
 800718c:	20007680 	.word	0x20007680
 8007190:	20007744 	.word	0x20007744

08007194 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f103 0208 	add.w	r2, r3, #8
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f103 0208 	add.w	r2, r3, #8
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f103 0208 	add.w	r2, r3, #8
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80071c8:	bf00      	nop
 80071ca:	370c      	adds	r7, #12
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80071e2:	bf00      	nop
 80071e4:	370c      	adds	r7, #12
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr

080071ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071ee:	b480      	push	{r7}
 80071f0:	b085      	sub	sp, #20
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
 80071f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	689a      	ldr	r2, [r3, #8]
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	683a      	ldr	r2, [r7, #0]
 8007212:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	683a      	ldr	r2, [r7, #0]
 8007218:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	1c5a      	adds	r2, r3, #1
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	601a      	str	r2, [r3, #0]
}
 800722a:	bf00      	nop
 800722c:	3714      	adds	r7, #20
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr

08007236 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007236:	b480      	push	{r7}
 8007238:	b085      	sub	sp, #20
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
 800723e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800724c:	d103      	bne.n	8007256 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	60fb      	str	r3, [r7, #12]
 8007254:	e00c      	b.n	8007270 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	3308      	adds	r3, #8
 800725a:	60fb      	str	r3, [r7, #12]
 800725c:	e002      	b.n	8007264 <vListInsert+0x2e>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	60fb      	str	r3, [r7, #12]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68ba      	ldr	r2, [r7, #8]
 800726c:	429a      	cmp	r2, r3
 800726e:	d2f6      	bcs.n	800725e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	685a      	ldr	r2, [r3, #4]
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	683a      	ldr	r2, [r7, #0]
 800727e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	683a      	ldr	r2, [r7, #0]
 800728a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	1c5a      	adds	r2, r3, #1
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	601a      	str	r2, [r3, #0]
}
 800729c:	bf00      	nop
 800729e:	3714      	adds	r7, #20
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	6892      	ldr	r2, [r2, #8]
 80072be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	6852      	ldr	r2, [r2, #4]
 80072c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d103      	bne.n	80072dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	689a      	ldr	r2, [r3, #8]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	1e5a      	subs	r2, r3, #1
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3714      	adds	r7, #20
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 800730a:	f002 f9c3 	bl	8009694 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007316:	68f9      	ldr	r1, [r7, #12]
 8007318:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800731a:	fb01 f303 	mul.w	r3, r1, r3
 800731e:	441a      	add	r2, r3
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2200      	movs	r2, #0
 8007328:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800733a:	3b01      	subs	r3, #1
 800733c:	68f9      	ldr	r1, [r7, #12]
 800733e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007340:	fb01 f303 	mul.w	r3, r1, r3
 8007344:	441a      	add	r2, r3
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	22ff      	movs	r2, #255	; 0xff
 800734e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	22ff      	movs	r2, #255	; 0xff
 8007356:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d114      	bne.n	800738a <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d01a      	beq.n	800739e <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	3310      	adds	r3, #16
 800736c:	4618      	mov	r0, r3
 800736e:	f001 fa71 	bl	8008854 <xTaskRemoveFromEventList>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d012      	beq.n	800739e <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007378:	4b0c      	ldr	r3, [pc, #48]	; (80073ac <xQueueGenericReset+0xb0>)
 800737a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800737e:	601a      	str	r2, [r3, #0]
 8007380:	f3bf 8f4f 	dsb	sy
 8007384:	f3bf 8f6f 	isb	sy
 8007388:	e009      	b.n	800739e <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	3310      	adds	r3, #16
 800738e:	4618      	mov	r0, r3
 8007390:	f7ff ff00 	bl	8007194 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	3324      	adds	r3, #36	; 0x24
 8007398:	4618      	mov	r0, r3
 800739a:	f7ff fefb 	bl	8007194 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800739e:	f002 f995 	bl	80096cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80073a2:	2301      	movs	r3, #1
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3710      	adds	r7, #16
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	e000ed04 	.word	0xe000ed04

080073b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b088      	sub	sp, #32
 80073b4:	af02      	add	r7, sp, #8
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
 80073bc:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80073be:	2350      	movs	r3, #80	; 0x50
 80073c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80073c2:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00d      	beq.n	80073ea <xQueueGenericCreateStatic+0x3a>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	2201      	movs	r2, #1
 80073d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80073d6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	4613      	mov	r3, r2
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	68b9      	ldr	r1, [r7, #8]
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f000 f837 	bl	8007458 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80073ea:	697b      	ldr	r3, [r7, #20]
	}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3718      	adds	r7, #24
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b08a      	sub	sp, #40	; 0x28
 80073f8:	af02      	add	r7, sp, #8
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	4613      	mov	r3, r2
 8007400:	71fb      	strb	r3, [r7, #7]
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d102      	bne.n	800740e <xQueueGenericCreate+0x1a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007408:	2300      	movs	r3, #0
 800740a:	61fb      	str	r3, [r7, #28]
 800740c:	e004      	b.n	8007418 <xQueueGenericCreate+0x24>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	68ba      	ldr	r2, [r7, #8]
 8007412:	fb02 f303 	mul.w	r3, r2, r3
 8007416:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	3350      	adds	r3, #80	; 0x50
 800741c:	4618      	mov	r0, r3
 800741e:	f002 fa0b 	bl	8009838 <pvPortMalloc>
 8007422:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d011      	beq.n	800744e <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	3350      	adds	r3, #80	; 0x50
 8007432:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	2200      	movs	r2, #0
 8007438:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800743c:	79fa      	ldrb	r2, [r7, #7]
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	9300      	str	r3, [sp, #0]
 8007442:	4613      	mov	r3, r2
 8007444:	697a      	ldr	r2, [r7, #20]
 8007446:	68b9      	ldr	r1, [r7, #8]
 8007448:	68f8      	ldr	r0, [r7, #12]
 800744a:	f000 f805 	bl	8007458 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800744e:	69bb      	ldr	r3, [r7, #24]
	}
 8007450:	4618      	mov	r0, r3
 8007452:	3720      	adds	r7, #32
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	607a      	str	r2, [r7, #4]
 8007464:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d103      	bne.n	8007474 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	69ba      	ldr	r2, [r7, #24]
 8007470:	601a      	str	r2, [r3, #0]
 8007472:	e002      	b.n	800747a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007486:	2101      	movs	r1, #1
 8007488:	69b8      	ldr	r0, [r7, #24]
 800748a:	f7ff ff37 	bl	80072fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	78fa      	ldrb	r2, [r7, #3]
 8007492:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007496:	bf00      	nop
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800749e:	b580      	push	{r7, lr}
 80074a0:	b082      	sub	sp, #8
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00e      	beq.n	80074ca <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80074be:	2300      	movs	r3, #0
 80074c0:	2200      	movs	r2, #0
 80074c2:	2100      	movs	r1, #0
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 f8b5 	bl	8007634 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80074ca:	bf00      	nop
 80074cc:	3708      	adds	r7, #8
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b086      	sub	sp, #24
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	4603      	mov	r3, r0
 80074da:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80074dc:	2301      	movs	r3, #1
 80074de:	617b      	str	r3, [r7, #20]
 80074e0:	2300      	movs	r3, #0
 80074e2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80074e4:	79fb      	ldrb	r3, [r7, #7]
 80074e6:	461a      	mov	r2, r3
 80074e8:	6939      	ldr	r1, [r7, #16]
 80074ea:	6978      	ldr	r0, [r7, #20]
 80074ec:	f7ff ff82 	bl	80073f4 <xQueueGenericCreate>
 80074f0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	f7ff ffd3 	bl	800749e <prvInitialiseMutex>

		return xNewQueue;
 80074f8:	68fb      	ldr	r3, [r7, #12]
	}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3718      	adds	r7, #24
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007502:	b580      	push	{r7, lr}
 8007504:	b088      	sub	sp, #32
 8007506:	af02      	add	r7, sp, #8
 8007508:	4603      	mov	r3, r0
 800750a:	6039      	str	r1, [r7, #0]
 800750c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800750e:	2301      	movs	r3, #1
 8007510:	617b      	str	r3, [r7, #20]
 8007512:	2300      	movs	r3, #0
 8007514:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007516:	79fb      	ldrb	r3, [r7, #7]
 8007518:	9300      	str	r3, [sp, #0]
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	2200      	movs	r2, #0
 800751e:	6939      	ldr	r1, [r7, #16]
 8007520:	6978      	ldr	r0, [r7, #20]
 8007522:	f7ff ff45 	bl	80073b0 <xQueueGenericCreateStatic>
 8007526:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007528:	68f8      	ldr	r0, [r7, #12]
 800752a:	f7ff ffb8 	bl	800749e <prvInitialiseMutex>

		return xNewQueue;
 800752e:	68fb      	ldr	r3, [r7, #12]
	}
 8007530:	4618      	mov	r0, r3
 8007532:	3718      	adds	r7, #24
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007538:	b590      	push	{r4, r7, lr}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	60bb      	str	r3, [r7, #8]
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	689c      	ldr	r4, [r3, #8]
 8007548:	f001 fb24 	bl	8008b94 <xTaskGetCurrentTaskHandle>
 800754c:	4603      	mov	r3, r0
 800754e:	429c      	cmp	r4, r3
 8007550:	d111      	bne.n	8007576 <xQueueGiveMutexRecursive+0x3e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	1e5a      	subs	r2, r3, #1
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d105      	bne.n	8007570 <xQueueGiveMutexRecursive+0x38>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007564:	2300      	movs	r3, #0
 8007566:	2200      	movs	r2, #0
 8007568:	2100      	movs	r1, #0
 800756a:	68b8      	ldr	r0, [r7, #8]
 800756c:	f000 f862 	bl	8007634 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007570:	2301      	movs	r3, #1
 8007572:	60fb      	str	r3, [r7, #12]
 8007574:	e001      	b.n	800757a <xQueueGiveMutexRecursive+0x42>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007576:	2300      	movs	r3, #0
 8007578:	60fb      	str	r3, [r7, #12]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800757a:	68fb      	ldr	r3, [r7, #12]
	}
 800757c:	4618      	mov	r0, r3
 800757e:	3714      	adds	r7, #20
 8007580:	46bd      	mov	sp, r7
 8007582:	bd90      	pop	{r4, r7, pc}

08007584 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007584:	b590      	push	{r4, r7, lr}
 8007586:	b085      	sub	sp, #20
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	60bb      	str	r3, [r7, #8]
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	689c      	ldr	r4, [r3, #8]
 8007596:	f001 fafd 	bl	8008b94 <xTaskGetCurrentTaskHandle>
 800759a:	4603      	mov	r3, r0
 800759c:	429c      	cmp	r4, r3
 800759e:	d107      	bne.n	80075b0 <xQueueTakeMutexRecursive+0x2c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	1c5a      	adds	r2, r3, #1
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80075aa:	2301      	movs	r3, #1
 80075ac:	60fb      	str	r3, [r7, #12]
 80075ae:	e00c      	b.n	80075ca <xQueueTakeMutexRecursive+0x46>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80075b0:	6839      	ldr	r1, [r7, #0]
 80075b2:	68b8      	ldr	r0, [r7, #8]
 80075b4:	f000 fa40 	bl	8007a38 <xQueueSemaphoreTake>
 80075b8:	60f8      	str	r0, [r7, #12]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d004      	beq.n	80075ca <xQueueTakeMutexRecursive+0x46>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	1c5a      	adds	r2, r3, #1
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80075ca:	68fb      	ldr	r3, [r7, #12]
	}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3714      	adds	r7, #20
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd90      	pop	{r4, r7, pc}

080075d4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b088      	sub	sp, #32
 80075d8:	af02      	add	r7, sp, #8
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80075e0:	2302      	movs	r3, #2
 80075e2:	9300      	str	r3, [sp, #0]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	2100      	movs	r1, #0
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	f7ff fee0 	bl	80073b0 <xQueueGenericCreateStatic>
 80075f0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d002      	beq.n	80075fe <xQueueCreateCountingSemaphoreStatic+0x2a>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	68ba      	ldr	r2, [r7, #8]
 80075fc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80075fe:	697b      	ldr	r3, [r7, #20]
	}
 8007600:	4618      	mov	r0, r3
 8007602:	3718      	adds	r7, #24
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007612:	2202      	movs	r2, #2
 8007614:	2100      	movs	r1, #0
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f7ff feec 	bl	80073f4 <xQueueGenericCreate>
 800761c:	60f8      	str	r0, [r7, #12]

		if( xHandle != NULL )
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d002      	beq.n	800762a <xQueueCreateCountingSemaphore+0x22>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	683a      	ldr	r2, [r7, #0]
 8007628:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800762a:	68fb      	ldr	r3, [r7, #12]
	}
 800762c:	4618      	mov	r0, r3
 800762e:	3710      	adds	r7, #16
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b08a      	sub	sp, #40	; 0x28
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	607a      	str	r2, [r7, #4]
 8007640:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007642:	2300      	movs	r3, #0
 8007644:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	623b      	str	r3, [r7, #32]
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800764a:	f002 f823 	bl	8009694 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800764e:	6a3b      	ldr	r3, [r7, #32]
 8007650:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007652:	6a3b      	ldr	r3, [r7, #32]
 8007654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007656:	429a      	cmp	r2, r3
 8007658:	d302      	bcc.n	8007660 <xQueueGenericSend+0x2c>
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	2b02      	cmp	r3, #2
 800765e:	d129      	bne.n	80076b4 <xQueueGenericSend+0x80>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007660:	683a      	ldr	r2, [r7, #0]
 8007662:	68b9      	ldr	r1, [r7, #8]
 8007664:	6a38      	ldr	r0, [r7, #32]
 8007666:	f000 fb57 	bl	8007d18 <prvCopyDataToQueue>
 800766a:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800766c:	6a3b      	ldr	r3, [r7, #32]
 800766e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007670:	2b00      	cmp	r3, #0
 8007672:	d010      	beq.n	8007696 <xQueueGenericSend+0x62>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007674:	6a3b      	ldr	r3, [r7, #32]
 8007676:	3324      	adds	r3, #36	; 0x24
 8007678:	4618      	mov	r0, r3
 800767a:	f001 f8eb 	bl	8008854 <xTaskRemoveFromEventList>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d013      	beq.n	80076ac <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007684:	4b3f      	ldr	r3, [pc, #252]	; (8007784 <xQueueGenericSend+0x150>)
 8007686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800768a:	601a      	str	r2, [r3, #0]
 800768c:	f3bf 8f4f 	dsb	sy
 8007690:	f3bf 8f6f 	isb	sy
 8007694:	e00a      	b.n	80076ac <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d007      	beq.n	80076ac <xQueueGenericSend+0x78>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800769c:	4b39      	ldr	r3, [pc, #228]	; (8007784 <xQueueGenericSend+0x150>)
 800769e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076a2:	601a      	str	r2, [r3, #0]
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80076ac:	f002 f80e 	bl	80096cc <vPortExitCritical>
				return pdPASS;
 80076b0:	2301      	movs	r3, #1
 80076b2:	e063      	b.n	800777c <xQueueGenericSend+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d103      	bne.n	80076c2 <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80076ba:	f002 f807 	bl	80096cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80076be:	2300      	movs	r3, #0
 80076c0:	e05c      	b.n	800777c <xQueueGenericSend+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
 80076c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d106      	bne.n	80076d6 <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80076c8:	f107 0314 	add.w	r3, r7, #20
 80076cc:	4618      	mov	r0, r3
 80076ce:	f001 f92f 	bl	8008930 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80076d2:	2301      	movs	r3, #1
 80076d4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80076d6:	f001 fff9 	bl	80096cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80076da:	f000 febd 	bl	8008458 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80076de:	f001 ffd9 	bl	8009694 <vPortEnterCritical>
 80076e2:	6a3b      	ldr	r3, [r7, #32]
 80076e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076e8:	b25b      	sxtb	r3, r3
 80076ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076ee:	d103      	bne.n	80076f8 <xQueueGenericSend+0xc4>
 80076f0:	6a3b      	ldr	r3, [r7, #32]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076f8:	6a3b      	ldr	r3, [r7, #32]
 80076fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076fe:	b25b      	sxtb	r3, r3
 8007700:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007704:	d103      	bne.n	800770e <xQueueGenericSend+0xda>
 8007706:	6a3b      	ldr	r3, [r7, #32]
 8007708:	2200      	movs	r2, #0
 800770a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800770e:	f001 ffdd 	bl	80096cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007712:	1d3a      	adds	r2, r7, #4
 8007714:	f107 0314 	add.w	r3, r7, #20
 8007718:	4611      	mov	r1, r2
 800771a:	4618      	mov	r0, r3
 800771c:	f001 f91e 	bl	800895c <xTaskCheckForTimeOut>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d124      	bne.n	8007770 <xQueueGenericSend+0x13c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007726:	6a38      	ldr	r0, [r7, #32]
 8007728:	f000 fbee 	bl	8007f08 <prvIsQueueFull>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d018      	beq.n	8007764 <xQueueGenericSend+0x130>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007732:	6a3b      	ldr	r3, [r7, #32]
 8007734:	3310      	adds	r3, #16
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	4611      	mov	r1, r2
 800773a:	4618      	mov	r0, r3
 800773c:	f001 f856 	bl	80087ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007740:	6a38      	ldr	r0, [r7, #32]
 8007742:	f000 fb79 	bl	8007e38 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007746:	f000 fe95 	bl	8008474 <xTaskResumeAll>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	f47f af7c 	bne.w	800764a <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
 8007752:	4b0c      	ldr	r3, [pc, #48]	; (8007784 <xQueueGenericSend+0x150>)
 8007754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007758:	601a      	str	r2, [r3, #0]
 800775a:	f3bf 8f4f 	dsb	sy
 800775e:	f3bf 8f6f 	isb	sy
 8007762:	e772      	b.n	800764a <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007764:	6a38      	ldr	r0, [r7, #32]
 8007766:	f000 fb67 	bl	8007e38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800776a:	f000 fe83 	bl	8008474 <xTaskResumeAll>
 800776e:	e76c      	b.n	800764a <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007770:	6a38      	ldr	r0, [r7, #32]
 8007772:	f000 fb61 	bl	8007e38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007776:	f000 fe7d 	bl	8008474 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800777a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800777c:	4618      	mov	r0, r3
 800777e:	3728      	adds	r7, #40	; 0x28
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	e000ed04 	.word	0xe000ed04

08007788 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b08c      	sub	sp, #48	; 0x30
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	607a      	str	r2, [r7, #4]
 8007794:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	62bb      	str	r3, [r7, #40]	; 0x28
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800779a:	f002 f837 	bl	800980c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800779e:	f3ef 8211 	mrs	r2, BASEPRI
 80077a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a6:	b672      	cpsid	i
 80077a8:	f383 8811 	msr	BASEPRI, r3
 80077ac:	f3bf 8f6f 	isb	sy
 80077b0:	f3bf 8f4f 	dsb	sy
 80077b4:	b662      	cpsie	i
 80077b6:	61fa      	str	r2, [r7, #28]
 80077b8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80077ba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80077bc:	627b      	str	r3, [r7, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80077be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d302      	bcc.n	80077d0 <xQueueGenericSendFromISR+0x48>
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d12c      	bne.n	800782a <xQueueGenericSendFromISR+0xa2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80077d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80077da:	683a      	ldr	r2, [r7, #0]
 80077dc:	68b9      	ldr	r1, [r7, #8]
 80077de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077e0:	f000 fa9a 	bl	8007d18 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80077e4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80077e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077ec:	d112      	bne.n	8007814 <xQueueGenericSendFromISR+0x8c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d016      	beq.n	8007824 <xQueueGenericSendFromISR+0x9c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f8:	3324      	adds	r3, #36	; 0x24
 80077fa:	4618      	mov	r0, r3
 80077fc:	f001 f82a 	bl	8008854 <xTaskRemoveFromEventList>
 8007800:	4603      	mov	r3, r0
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00e      	beq.n	8007824 <xQueueGenericSendFromISR+0x9c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00b      	beq.n	8007824 <xQueueGenericSendFromISR+0x9c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	601a      	str	r2, [r3, #0]
 8007812:	e007      	b.n	8007824 <xQueueGenericSendFromISR+0x9c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007814:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007818:	3301      	adds	r3, #1
 800781a:	b2db      	uxtb	r3, r3
 800781c:	b25a      	sxtb	r2, r3
 800781e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007824:	2301      	movs	r3, #1
 8007826:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
 8007828:	e001      	b.n	800782e <xQueueGenericSendFromISR+0xa6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800782a:	2300      	movs	r3, #0
 800782c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800782e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007830:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007838:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800783a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800783c:	4618      	mov	r0, r3
 800783e:	3730      	adds	r7, #48	; 0x30
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b08a      	sub	sp, #40	; 0x28
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	623b      	str	r3, [r7, #32]
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007852:	f001 ffdb 	bl	800980c <vPortValidateInterruptPriority>
	__asm volatile
 8007856:	f3ef 8211 	mrs	r2, BASEPRI
 800785a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800785e:	b672      	cpsid	i
 8007860:	f383 8811 	msr	BASEPRI, r3
 8007864:	f3bf 8f6f 	isb	sy
 8007868:	f3bf 8f4f 	dsb	sy
 800786c:	b662      	cpsie	i
 800786e:	613a      	str	r2, [r7, #16]
 8007870:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8007872:	693b      	ldr	r3, [r7, #16]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007874:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007876:	6a3b      	ldr	r3, [r7, #32]
 8007878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800787a:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800787c:	6a3b      	ldr	r3, [r7, #32]
 800787e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007880:	69ba      	ldr	r2, [r7, #24]
 8007882:	429a      	cmp	r2, r3
 8007884:	d229      	bcs.n	80078da <xQueueGiveFromISR+0x96>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007886:	6a3b      	ldr	r3, [r7, #32]
 8007888:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800788c:	75fb      	strb	r3, [r7, #23]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	1c5a      	adds	r2, r3, #1
 8007892:	6a3b      	ldr	r3, [r7, #32]
 8007894:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007896:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800789a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800789e:	d112      	bne.n	80078c6 <xQueueGiveFromISR+0x82>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078a0:	6a3b      	ldr	r3, [r7, #32]
 80078a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d015      	beq.n	80078d4 <xQueueGiveFromISR+0x90>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078a8:	6a3b      	ldr	r3, [r7, #32]
 80078aa:	3324      	adds	r3, #36	; 0x24
 80078ac:	4618      	mov	r0, r3
 80078ae:	f000 ffd1 	bl	8008854 <xTaskRemoveFromEventList>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00d      	beq.n	80078d4 <xQueueGiveFromISR+0x90>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d00a      	beq.n	80078d4 <xQueueGiveFromISR+0x90>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	2201      	movs	r2, #1
 80078c2:	601a      	str	r2, [r3, #0]
 80078c4:	e006      	b.n	80078d4 <xQueueGiveFromISR+0x90>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80078c6:	7dfb      	ldrb	r3, [r7, #23]
 80078c8:	3301      	adds	r3, #1
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	b25a      	sxtb	r2, r3
 80078ce:	6a3b      	ldr	r3, [r7, #32]
 80078d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80078d4:	2301      	movs	r3, #1
 80078d6:	627b      	str	r3, [r7, #36]	; 0x24
 80078d8:	e001      	b.n	80078de <xQueueGiveFromISR+0x9a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80078da:	2300      	movs	r3, #0
 80078dc:	627b      	str	r3, [r7, #36]	; 0x24
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	60bb      	str	r3, [r7, #8]
	__asm volatile
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	f383 8811 	msr	BASEPRI, r3
}
 80078e8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80078ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3728      	adds	r7, #40	; 0x28
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b08a      	sub	sp, #40	; 0x28
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007900:	2300      	movs	r3, #0
 8007902:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	623b      	str	r3, [r7, #32]
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007908:	f001 fec4 	bl	8009694 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800790c:	6a3b      	ldr	r3, [r7, #32]
 800790e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007910:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d01f      	beq.n	8007958 <xQueueReceive+0x64>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007918:	68b9      	ldr	r1, [r7, #8]
 800791a:	6a38      	ldr	r0, [r7, #32]
 800791c:	f000 fa66 	bl	8007dec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	1e5a      	subs	r2, r3, #1
 8007924:	6a3b      	ldr	r3, [r7, #32]
 8007926:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007928:	6a3b      	ldr	r3, [r7, #32]
 800792a:	691b      	ldr	r3, [r3, #16]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00f      	beq.n	8007950 <xQueueReceive+0x5c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007930:	6a3b      	ldr	r3, [r7, #32]
 8007932:	3310      	adds	r3, #16
 8007934:	4618      	mov	r0, r3
 8007936:	f000 ff8d 	bl	8008854 <xTaskRemoveFromEventList>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d007      	beq.n	8007950 <xQueueReceive+0x5c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007940:	4b3c      	ldr	r3, [pc, #240]	; (8007a34 <xQueueReceive+0x140>)
 8007942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007946:	601a      	str	r2, [r3, #0]
 8007948:	f3bf 8f4f 	dsb	sy
 800794c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007950:	f001 febc 	bl	80096cc <vPortExitCritical>
				return pdPASS;
 8007954:	2301      	movs	r3, #1
 8007956:	e069      	b.n	8007a2c <xQueueReceive+0x138>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d103      	bne.n	8007966 <xQueueReceive+0x72>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800795e:	f001 feb5 	bl	80096cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007962:	2300      	movs	r3, #0
 8007964:	e062      	b.n	8007a2c <xQueueReceive+0x138>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007968:	2b00      	cmp	r3, #0
 800796a:	d106      	bne.n	800797a <xQueueReceive+0x86>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800796c:	f107 0314 	add.w	r3, r7, #20
 8007970:	4618      	mov	r0, r3
 8007972:	f000 ffdd 	bl	8008930 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007976:	2301      	movs	r3, #1
 8007978:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800797a:	f001 fea7 	bl	80096cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800797e:	f000 fd6b 	bl	8008458 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007982:	f001 fe87 	bl	8009694 <vPortEnterCritical>
 8007986:	6a3b      	ldr	r3, [r7, #32]
 8007988:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800798c:	b25b      	sxtb	r3, r3
 800798e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007992:	d103      	bne.n	800799c <xQueueReceive+0xa8>
 8007994:	6a3b      	ldr	r3, [r7, #32]
 8007996:	2200      	movs	r2, #0
 8007998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800799c:	6a3b      	ldr	r3, [r7, #32]
 800799e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079a2:	b25b      	sxtb	r3, r3
 80079a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079a8:	d103      	bne.n	80079b2 <xQueueReceive+0xbe>
 80079aa:	6a3b      	ldr	r3, [r7, #32]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079b2:	f001 fe8b 	bl	80096cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079b6:	1d3a      	adds	r2, r7, #4
 80079b8:	f107 0314 	add.w	r3, r7, #20
 80079bc:	4611      	mov	r1, r2
 80079be:	4618      	mov	r0, r3
 80079c0:	f000 ffcc 	bl	800895c <xTaskCheckForTimeOut>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d123      	bne.n	8007a12 <xQueueReceive+0x11e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079ca:	6a38      	ldr	r0, [r7, #32]
 80079cc:	f000 fa86 	bl	8007edc <prvIsQueueEmpty>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d017      	beq.n	8007a06 <xQueueReceive+0x112>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80079d6:	6a3b      	ldr	r3, [r7, #32]
 80079d8:	3324      	adds	r3, #36	; 0x24
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	4611      	mov	r1, r2
 80079de:	4618      	mov	r0, r3
 80079e0:	f000 ff04 	bl	80087ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80079e4:	6a38      	ldr	r0, [r7, #32]
 80079e6:	f000 fa27 	bl	8007e38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80079ea:	f000 fd43 	bl	8008474 <xTaskResumeAll>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d189      	bne.n	8007908 <xQueueReceive+0x14>
				{
					portYIELD_WITHIN_API();
 80079f4:	4b0f      	ldr	r3, [pc, #60]	; (8007a34 <xQueueReceive+0x140>)
 80079f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079fa:	601a      	str	r2, [r3, #0]
 80079fc:	f3bf 8f4f 	dsb	sy
 8007a00:	f3bf 8f6f 	isb	sy
 8007a04:	e780      	b.n	8007908 <xQueueReceive+0x14>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007a06:	6a38      	ldr	r0, [r7, #32]
 8007a08:	f000 fa16 	bl	8007e38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a0c:	f000 fd32 	bl	8008474 <xTaskResumeAll>
 8007a10:	e77a      	b.n	8007908 <xQueueReceive+0x14>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007a12:	6a38      	ldr	r0, [r7, #32]
 8007a14:	f000 fa10 	bl	8007e38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a18:	f000 fd2c 	bl	8008474 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a1c:	6a38      	ldr	r0, [r7, #32]
 8007a1e:	f000 fa5d 	bl	8007edc <prvIsQueueEmpty>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f43f af6f 	beq.w	8007908 <xQueueReceive+0x14>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007a2a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3728      	adds	r7, #40	; 0x28
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	e000ed04 	.word	0xe000ed04

08007a38 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b08a      	sub	sp, #40	; 0x28
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007a42:	2300      	movs	r3, #0
 8007a44:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	623b      	str	r3, [r7, #32]
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a4e:	f001 fe21 	bl	8009694 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a56:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d024      	beq.n	8007aa8 <xQueueSemaphoreTake+0x70>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007a5e:	69bb      	ldr	r3, [r7, #24]
 8007a60:	1e5a      	subs	r2, r3, #1
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d104      	bne.n	8007a78 <xQueueSemaphoreTake+0x40>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007a6e:	f001 f9d3 	bl	8008e18 <pvTaskIncrementMutexHeldCount>
 8007a72:	4602      	mov	r2, r0
 8007a74:	69fb      	ldr	r3, [r7, #28]
 8007a76:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00f      	beq.n	8007aa0 <xQueueSemaphoreTake+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	3310      	adds	r3, #16
 8007a84:	4618      	mov	r0, r3
 8007a86:	f000 fee5 	bl	8008854 <xTaskRemoveFromEventList>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d007      	beq.n	8007aa0 <xQueueSemaphoreTake+0x68>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007a90:	4b4c      	ldr	r3, [pc, #304]	; (8007bc4 <xQueueSemaphoreTake+0x18c>)
 8007a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a96:	601a      	str	r2, [r3, #0]
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007aa0:	f001 fe14 	bl	80096cc <vPortExitCritical>
				return pdPASS;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e089      	b.n	8007bbc <xQueueSemaphoreTake+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d103      	bne.n	8007ab6 <xQueueSemaphoreTake+0x7e>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007aae:	f001 fe0d 	bl	80096cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	e082      	b.n	8007bbc <xQueueSemaphoreTake+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d106      	bne.n	8007aca <xQueueSemaphoreTake+0x92>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007abc:	f107 030c 	add.w	r3, r7, #12
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f000 ff35 	bl	8008930 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007aca:	f001 fdff 	bl	80096cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ace:	f000 fcc3 	bl	8008458 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ad2:	f001 fddf 	bl	8009694 <vPortEnterCritical>
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007adc:	b25b      	sxtb	r3, r3
 8007ade:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ae2:	d103      	bne.n	8007aec <xQueueSemaphoreTake+0xb4>
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007af2:	b25b      	sxtb	r3, r3
 8007af4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007af8:	d103      	bne.n	8007b02 <xQueueSemaphoreTake+0xca>
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b02:	f001 fde3 	bl	80096cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b06:	463a      	mov	r2, r7
 8007b08:	f107 030c 	add.w	r3, r7, #12
 8007b0c:	4611      	mov	r1, r2
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f000 ff24 	bl	800895c <xTaskCheckForTimeOut>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d132      	bne.n	8007b80 <xQueueSemaphoreTake+0x148>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b1a:	69f8      	ldr	r0, [r7, #28]
 8007b1c:	f000 f9de 	bl	8007edc <prvIsQueueEmpty>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d026      	beq.n	8007b74 <xQueueSemaphoreTake+0x13c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d109      	bne.n	8007b42 <xQueueSemaphoreTake+0x10a>
					{
						taskENTER_CRITICAL();
 8007b2e:	f001 fdb1 	bl	8009694 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	4618      	mov	r0, r3
 8007b38:	f001 f85a 	bl	8008bf0 <xTaskPriorityInherit>
 8007b3c:	6238      	str	r0, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8007b3e:	f001 fdc5 	bl	80096cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	3324      	adds	r3, #36	; 0x24
 8007b46:	683a      	ldr	r2, [r7, #0]
 8007b48:	4611      	mov	r1, r2
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f000 fe4e 	bl	80087ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b50:	69f8      	ldr	r0, [r7, #28]
 8007b52:	f000 f971 	bl	8007e38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b56:	f000 fc8d 	bl	8008474 <xTaskResumeAll>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f47f af76 	bne.w	8007a4e <xQueueSemaphoreTake+0x16>
				{
					portYIELD_WITHIN_API();
 8007b62:	4b18      	ldr	r3, [pc, #96]	; (8007bc4 <xQueueSemaphoreTake+0x18c>)
 8007b64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b68:	601a      	str	r2, [r3, #0]
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	f3bf 8f6f 	isb	sy
 8007b72:	e76c      	b.n	8007a4e <xQueueSemaphoreTake+0x16>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007b74:	69f8      	ldr	r0, [r7, #28]
 8007b76:	f000 f95f 	bl	8007e38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b7a:	f000 fc7b 	bl	8008474 <xTaskResumeAll>
 8007b7e:	e766      	b.n	8007a4e <xQueueSemaphoreTake+0x16>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007b80:	69f8      	ldr	r0, [r7, #28]
 8007b82:	f000 f959 	bl	8007e38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b86:	f000 fc75 	bl	8008474 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b8a:	69f8      	ldr	r0, [r7, #28]
 8007b8c:	f000 f9a6 	bl	8007edc <prvIsQueueEmpty>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	f43f af5b 	beq.w	8007a4e <xQueueSemaphoreTake+0x16>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007b98:	6a3b      	ldr	r3, [r7, #32]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00d      	beq.n	8007bba <xQueueSemaphoreTake+0x182>
					{
						taskENTER_CRITICAL();
 8007b9e:	f001 fd79 	bl	8009694 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007ba2:	69f8      	ldr	r0, [r7, #28]
 8007ba4:	f000 f8a0 	bl	8007ce8 <prvGetDisinheritPriorityAfterTimeout>
 8007ba8:	6178      	str	r0, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	6979      	ldr	r1, [r7, #20]
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f001 f8d1 	bl	8008d58 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007bb6:	f001 fd89 	bl	80096cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007bba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3728      	adds	r7, #40	; 0x28
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	e000ed04 	.word	0xe000ed04

08007bc8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b08c      	sub	sp, #48	; 0x30
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	62bb      	str	r3, [r7, #40]	; 0x28
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007bd8:	f001 fe18 	bl	800980c <vPortValidateInterruptPriority>
	__asm volatile
 8007bdc:	f3ef 8211 	mrs	r2, BASEPRI
 8007be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be4:	b672      	cpsid	i
 8007be6:	f383 8811 	msr	BASEPRI, r3
 8007bea:	f3bf 8f6f 	isb	sy
 8007bee:	f3bf 8f4f 	dsb	sy
 8007bf2:	b662      	cpsie	i
 8007bf4:	61ba      	str	r2, [r7, #24]
 8007bf6:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007bf8:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007bfa:	627b      	str	r3, [r7, #36]	; 0x24
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c00:	623b      	str	r3, [r7, #32]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c02:	6a3b      	ldr	r3, [r7, #32]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d02d      	beq.n	8007c64 <xQueueReceiveFromISR+0x9c>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c0e:	77fb      	strb	r3, [r7, #31]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c10:	68b9      	ldr	r1, [r7, #8]
 8007c12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c14:	f000 f8ea 	bl	8007dec <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c18:	6a3b      	ldr	r3, [r7, #32]
 8007c1a:	1e5a      	subs	r2, r3, #1
 8007c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c1e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007c20:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007c24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c28:	d112      	bne.n	8007c50 <xQueueReceiveFromISR+0x88>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d015      	beq.n	8007c5e <xQueueReceiveFromISR+0x96>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c34:	3310      	adds	r3, #16
 8007c36:	4618      	mov	r0, r3
 8007c38:	f000 fe0c 	bl	8008854 <xTaskRemoveFromEventList>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00d      	beq.n	8007c5e <xQueueReceiveFromISR+0x96>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00a      	beq.n	8007c5e <xQueueReceiveFromISR+0x96>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	601a      	str	r2, [r3, #0]
 8007c4e:	e006      	b.n	8007c5e <xQueueReceiveFromISR+0x96>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007c50:	7ffb      	ldrb	r3, [r7, #31]
 8007c52:	3301      	adds	r3, #1
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	b25a      	sxtb	r2, r3
 8007c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c62:	e001      	b.n	8007c68 <xQueueReceiveFromISR+0xa0>
		}
		else
		{
			xReturn = pdFAIL;
 8007c64:	2300      	movs	r3, #0
 8007c66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6a:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	f383 8811 	msr	BASEPRI, r3
}
 8007c72:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3730      	adds	r7, #48	; 0x30
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b084      	sub	sp, #16
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
 8007c86:	f001 fd05 	bl	8009694 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c8e:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8007c90:	f001 fd1c 	bl	80096cc <vPortExitCritical>

	return uxReturn;
 8007c94:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007c96:	4618      	mov	r0, r3
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8007c9e:	b480      	push	{r7}
 8007ca0:	b085      	sub	sp, #20
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
	uxReturn = pxQueue->uxMessagesWaiting;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cae:	60bb      	str	r3, [r7, #8]

	return uxReturn;
 8007cb0:	68bb      	ldr	r3, [r7, #8]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3714      	adds	r7, #20
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr

08007cbe <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b084      	sub	sp, #16
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	60fb      	str	r3, [r7, #12]
	configASSERT( pxQueue );
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f000 f95e 	bl	8007f8c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d102      	bne.n	8007ce0 <vQueueDelete+0x22>
		{
			vPortFree( pxQueue );
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f001 fe40 	bl	8009960 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007ce0:	bf00      	nop
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d006      	beq.n	8007d06 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007d02:	60fb      	str	r3, [r7, #12]
 8007d04:	e001      	b.n	8007d0a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007d06:	2300      	movs	r3, #0
 8007d08:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
	}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3714      	adds	r7, #20
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr

08007d18 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b086      	sub	sp, #24
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007d24:	2300      	movs	r3, #0
 8007d26:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d2c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d10d      	bne.n	8007d52 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d14d      	bne.n	8007dda <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	4618      	mov	r0, r3
 8007d44:	f000 ffbc 	bl	8008cc0 <xTaskPriorityDisinherit>
 8007d48:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	609a      	str	r2, [r3, #8]
 8007d50:	e043      	b.n	8007dda <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d119      	bne.n	8007d8c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6858      	ldr	r0, [r3, #4]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d60:	461a      	mov	r2, r3
 8007d62:	68b9      	ldr	r1, [r7, #8]
 8007d64:	f01b fe16 	bl	8023994 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	685a      	ldr	r2, [r3, #4]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d70:	441a      	add	r2, r3
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	685a      	ldr	r2, [r3, #4]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d32b      	bcc.n	8007dda <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	605a      	str	r2, [r3, #4]
 8007d8a:	e026      	b.n	8007dda <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	68d8      	ldr	r0, [r3, #12]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d94:	461a      	mov	r2, r3
 8007d96:	68b9      	ldr	r1, [r7, #8]
 8007d98:	f01b fdfc 	bl	8023994 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	68da      	ldr	r2, [r3, #12]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da4:	425b      	negs	r3, r3
 8007da6:	441a      	add	r2, r3
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	68da      	ldr	r2, [r3, #12]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d207      	bcs.n	8007dc8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	689a      	ldr	r2, [r3, #8]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc0:	425b      	negs	r3, r3
 8007dc2:	441a      	add	r2, r3
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d105      	bne.n	8007dda <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d002      	beq.n	8007dda <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	3b01      	subs	r3, #1
 8007dd8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	1c5a      	adds	r2, r3, #1
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007de2:	697b      	ldr	r3, [r7, #20]
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3718      	adds	r7, #24
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d018      	beq.n	8007e30 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	68da      	ldr	r2, [r3, #12]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e06:	441a      	add	r2, r3
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	68da      	ldr	r2, [r3, #12]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d303      	bcc.n	8007e20 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	68d9      	ldr	r1, [r3, #12]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e28:	461a      	mov	r2, r3
 8007e2a:	6838      	ldr	r0, [r7, #0]
 8007e2c:	f01b fdb2 	bl	8023994 <memcpy>
	}
}
 8007e30:	bf00      	nop
 8007e32:	3708      	adds	r7, #8
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007e40:	f001 fc28 	bl	8009694 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e4a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e4c:	e011      	b.n	8007e72 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d012      	beq.n	8007e7c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	3324      	adds	r3, #36	; 0x24
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f000 fcfa 	bl	8008854 <xTaskRemoveFromEventList>
 8007e60:	4603      	mov	r3, r0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d001      	beq.n	8007e6a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007e66:	f000 fdbf 	bl	80089e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007e6a:	7bfb      	ldrb	r3, [r7, #15]
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	dce9      	bgt.n	8007e4e <prvUnlockQueue+0x16>
 8007e7a:	e000      	b.n	8007e7e <prvUnlockQueue+0x46>
					break;
 8007e7c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	22ff      	movs	r2, #255	; 0xff
 8007e82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007e86:	f001 fc21 	bl	80096cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007e8a:	f001 fc03 	bl	8009694 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e94:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e96:	e011      	b.n	8007ebc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d012      	beq.n	8007ec6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	3310      	adds	r3, #16
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f000 fcd5 	bl	8008854 <xTaskRemoveFromEventList>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d001      	beq.n	8007eb4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007eb0:	f000 fd9a 	bl	80089e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007eb4:	7bbb      	ldrb	r3, [r7, #14]
 8007eb6:	3b01      	subs	r3, #1
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ebc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	dce9      	bgt.n	8007e98 <prvUnlockQueue+0x60>
 8007ec4:	e000      	b.n	8007ec8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007ec6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	22ff      	movs	r2, #255	; 0xff
 8007ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007ed0:	f001 fbfc 	bl	80096cc <vPortExitCritical>
}
 8007ed4:	bf00      	nop
 8007ed6:	3710      	adds	r7, #16
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ee4:	f001 fbd6 	bl	8009694 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d102      	bne.n	8007ef6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	60fb      	str	r3, [r7, #12]
 8007ef4:	e001      	b.n	8007efa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007efa:	f001 fbe7 	bl	80096cc <vPortExitCritical>

	return xReturn;
 8007efe:	68fb      	ldr	r3, [r7, #12]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3710      	adds	r7, #16
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f10:	f001 fbc0 	bl	8009694 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d102      	bne.n	8007f26 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007f20:	2301      	movs	r3, #1
 8007f22:	60fb      	str	r3, [r7, #12]
 8007f24:	e001      	b.n	8007f2a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007f26:	2300      	movs	r3, #0
 8007f28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f2a:	f001 fbcf 	bl	80096cc <vPortExitCritical>

	return xReturn;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3710      	adds	r7, #16
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007f38:	b480      	push	{r7}
 8007f3a:	b085      	sub	sp, #20
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f42:	2300      	movs	r3, #0
 8007f44:	60fb      	str	r3, [r7, #12]
 8007f46:	e014      	b.n	8007f72 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007f48:	4a0f      	ldr	r2, [pc, #60]	; (8007f88 <vQueueAddToRegistry+0x50>)
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d10b      	bne.n	8007f6c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007f54:	490c      	ldr	r1, [pc, #48]	; (8007f88 <vQueueAddToRegistry+0x50>)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	683a      	ldr	r2, [r7, #0]
 8007f5a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007f5e:	4a0a      	ldr	r2, [pc, #40]	; (8007f88 <vQueueAddToRegistry+0x50>)
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	00db      	lsls	r3, r3, #3
 8007f64:	4413      	add	r3, r2
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007f6a:	e006      	b.n	8007f7a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	3301      	adds	r3, #1
 8007f70:	60fb      	str	r3, [r7, #12]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2b07      	cmp	r3, #7
 8007f76:	d9e7      	bls.n	8007f48 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007f78:	bf00      	nop
 8007f7a:	bf00      	nop
 8007f7c:	3714      	adds	r7, #20
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr
 8007f86:	bf00      	nop
 8007f88:	20007b44 	.word	0x20007b44

08007f8c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b085      	sub	sp, #20
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f94:	2300      	movs	r3, #0
 8007f96:	60fb      	str	r3, [r7, #12]
 8007f98:	e016      	b.n	8007fc8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007f9a:	4a10      	ldr	r2, [pc, #64]	; (8007fdc <vQueueUnregisterQueue+0x50>)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	00db      	lsls	r3, r3, #3
 8007fa0:	4413      	add	r3, r2
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d10b      	bne.n	8007fc2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007faa:	4a0c      	ldr	r2, [pc, #48]	; (8007fdc <vQueueUnregisterQueue+0x50>)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2100      	movs	r1, #0
 8007fb0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007fb4:	4a09      	ldr	r2, [pc, #36]	; (8007fdc <vQueueUnregisterQueue+0x50>)
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	00db      	lsls	r3, r3, #3
 8007fba:	4413      	add	r3, r2
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	605a      	str	r2, [r3, #4]
				break;
 8007fc0:	e006      	b.n	8007fd0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	60fb      	str	r3, [r7, #12]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2b07      	cmp	r3, #7
 8007fcc:	d9e5      	bls.n	8007f9a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007fce:	bf00      	nop
 8007fd0:	bf00      	nop
 8007fd2:	3714      	adds	r7, #20
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr
 8007fdc:	20007b44 	.word	0x20007b44

08007fe0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b086      	sub	sp, #24
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007ff0:	f001 fb50 	bl	8009694 <vPortEnterCritical>
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ffa:	b25b      	sxtb	r3, r3
 8007ffc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008000:	d103      	bne.n	800800a <vQueueWaitForMessageRestricted+0x2a>
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	2200      	movs	r2, #0
 8008006:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008010:	b25b      	sxtb	r3, r3
 8008012:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008016:	d103      	bne.n	8008020 <vQueueWaitForMessageRestricted+0x40>
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	2200      	movs	r2, #0
 800801c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008020:	f001 fb54 	bl	80096cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008028:	2b00      	cmp	r3, #0
 800802a:	d106      	bne.n	800803a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	3324      	adds	r3, #36	; 0x24
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	68b9      	ldr	r1, [r7, #8]
 8008034:	4618      	mov	r0, r3
 8008036:	f000 fbef 	bl	8008818 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800803a:	6978      	ldr	r0, [r7, #20]
 800803c:	f7ff fefc 	bl	8007e38 <prvUnlockQueue>
	}
 8008040:	bf00      	nop
 8008042:	3718      	adds	r7, #24
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008048:	b580      	push	{r7, lr}
 800804a:	b08c      	sub	sp, #48	; 0x30
 800804c:	af04      	add	r7, sp, #16
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	607a      	str	r2, [r7, #4]
 8008054:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008056:	23c4      	movs	r3, #196	; 0xc4
 8008058:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800805a:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800805c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800805e:	2b00      	cmp	r3, #0
 8008060:	d01e      	beq.n	80080a0 <xTaskCreateStatic+0x58>
 8008062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008064:	2b00      	cmp	r3, #0
 8008066:	d01b      	beq.n	80080a0 <xTaskCreateStatic+0x58>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806a:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008070:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	2202      	movs	r2, #2
 8008076:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800807a:	2300      	movs	r3, #0
 800807c:	9303      	str	r3, [sp, #12]
 800807e:	69fb      	ldr	r3, [r7, #28]
 8008080:	9302      	str	r3, [sp, #8]
 8008082:	f107 0318 	add.w	r3, r7, #24
 8008086:	9301      	str	r3, [sp, #4]
 8008088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808a:	9300      	str	r3, [sp, #0]
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	68b9      	ldr	r1, [r7, #8]
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	f000 f850 	bl	8008138 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008098:	69f8      	ldr	r0, [r7, #28]
 800809a:	f000 f8e7 	bl	800826c <prvAddNewTaskToReadyList>
 800809e:	e001      	b.n	80080a4 <xTaskCreateStatic+0x5c>
		}
		else
		{
			xReturn = NULL;
 80080a0:	2300      	movs	r3, #0
 80080a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80080a4:	69bb      	ldr	r3, [r7, #24]
	}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3720      	adds	r7, #32
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}

080080ae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80080ae:	b580      	push	{r7, lr}
 80080b0:	b08c      	sub	sp, #48	; 0x30
 80080b2:	af04      	add	r7, sp, #16
 80080b4:	60f8      	str	r0, [r7, #12]
 80080b6:	60b9      	str	r1, [r7, #8]
 80080b8:	603b      	str	r3, [r7, #0]
 80080ba:	4613      	mov	r3, r2
 80080bc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80080be:	88fb      	ldrh	r3, [r7, #6]
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	4618      	mov	r0, r3
 80080c4:	f001 fbb8 	bl	8009838 <pvPortMalloc>
 80080c8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d00e      	beq.n	80080ee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80080d0:	20c4      	movs	r0, #196	; 0xc4
 80080d2:	f001 fbb1 	bl	8009838 <pvPortMalloc>
 80080d6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80080d8:	69fb      	ldr	r3, [r7, #28]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d003      	beq.n	80080e6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	697a      	ldr	r2, [r7, #20]
 80080e2:	631a      	str	r2, [r3, #48]	; 0x30
 80080e4:	e005      	b.n	80080f2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80080e6:	6978      	ldr	r0, [r7, #20]
 80080e8:	f001 fc3a 	bl	8009960 <vPortFree>
 80080ec:	e001      	b.n	80080f2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80080ee:	2300      	movs	r3, #0
 80080f0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d017      	beq.n	8008128 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80080f8:	69fb      	ldr	r3, [r7, #28]
 80080fa:	2200      	movs	r2, #0
 80080fc:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008100:	88fa      	ldrh	r2, [r7, #6]
 8008102:	2300      	movs	r3, #0
 8008104:	9303      	str	r3, [sp, #12]
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	9302      	str	r3, [sp, #8]
 800810a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800810c:	9301      	str	r3, [sp, #4]
 800810e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008110:	9300      	str	r3, [sp, #0]
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	68b9      	ldr	r1, [r7, #8]
 8008116:	68f8      	ldr	r0, [r7, #12]
 8008118:	f000 f80e 	bl	8008138 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800811c:	69f8      	ldr	r0, [r7, #28]
 800811e:	f000 f8a5 	bl	800826c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008122:	2301      	movs	r3, #1
 8008124:	61bb      	str	r3, [r7, #24]
 8008126:	e002      	b.n	800812e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008128:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800812c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800812e:	69bb      	ldr	r3, [r7, #24]
	}
 8008130:	4618      	mov	r0, r3
 8008132:	3720      	adds	r7, #32
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b086      	sub	sp, #24
 800813c:	af00      	add	r7, sp, #0
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	607a      	str	r2, [r7, #4]
 8008144:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008148:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	461a      	mov	r2, r3
 8008150:	21a5      	movs	r1, #165	; 0xa5
 8008152:	f01b fc47 	bl	80239e4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008158:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800815a:	6879      	ldr	r1, [r7, #4]
 800815c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008160:	440b      	add	r3, r1
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	4413      	add	r3, r2
 8008166:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	f023 0307 	bic.w	r3, r3, #7
 800816e:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d01f      	beq.n	80081b6 <prvInitialiseNewTask+0x7e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008176:	2300      	movs	r3, #0
 8008178:	617b      	str	r3, [r7, #20]
 800817a:	e012      	b.n	80081a2 <prvInitialiseNewTask+0x6a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800817c:	68ba      	ldr	r2, [r7, #8]
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	4413      	add	r3, r2
 8008182:	7819      	ldrb	r1, [r3, #0]
 8008184:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	4413      	add	r3, r2
 800818a:	3334      	adds	r3, #52	; 0x34
 800818c:	460a      	mov	r2, r1
 800818e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008190:	68ba      	ldr	r2, [r7, #8]
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	4413      	add	r3, r2
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d006      	beq.n	80081aa <prvInitialiseNewTask+0x72>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	3301      	adds	r3, #1
 80081a0:	617b      	str	r3, [r7, #20]
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	2b0f      	cmp	r3, #15
 80081a6:	d9e9      	bls.n	800817c <prvInitialiseNewTask+0x44>
 80081a8:	e000      	b.n	80081ac <prvInitialiseNewTask+0x74>
			{
				break;
 80081aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80081ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ae:	2200      	movs	r2, #0
 80081b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081b4:	e003      	b.n	80081be <prvInitialiseNewTask+0x86>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80081b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b8:	2200      	movs	r2, #0
 80081ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80081be:	6a3b      	ldr	r3, [r7, #32]
 80081c0:	2b37      	cmp	r3, #55	; 0x37
 80081c2:	d901      	bls.n	80081c8 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80081c4:	2337      	movs	r3, #55	; 0x37
 80081c6:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80081c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ca:	6a3a      	ldr	r2, [r7, #32]
 80081cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80081ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d0:	6a3a      	ldr	r2, [r7, #32]
 80081d2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80081d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d6:	2200      	movs	r2, #0
 80081d8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80081da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081dc:	3304      	adds	r3, #4
 80081de:	4618      	mov	r0, r3
 80081e0:	f7fe fff8 	bl	80071d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80081e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e6:	3318      	adds	r3, #24
 80081e8:	4618      	mov	r0, r3
 80081ea:	f7fe fff3 	bl	80071d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80081ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081f4:	6a3b      	ldr	r3, [r7, #32]
 80081f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80081fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80081fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008200:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008202:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8008204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008206:	2200      	movs	r2, #0
 8008208:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800820a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820c:	2200      	movs	r2, #0
 800820e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008214:	2200      	movs	r2, #0
 8008216:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800821a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800821c:	3358      	adds	r3, #88	; 0x58
 800821e:	2260      	movs	r2, #96	; 0x60
 8008220:	2100      	movs	r1, #0
 8008222:	4618      	mov	r0, r3
 8008224:	f01b fbde 	bl	80239e4 <memset>
 8008228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800822a:	4a0d      	ldr	r2, [pc, #52]	; (8008260 <prvInitialiseNewTask+0x128>)
 800822c:	65da      	str	r2, [r3, #92]	; 0x5c
 800822e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008230:	4a0c      	ldr	r2, [pc, #48]	; (8008264 <prvInitialiseNewTask+0x12c>)
 8008232:	661a      	str	r2, [r3, #96]	; 0x60
 8008234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008236:	4a0c      	ldr	r2, [pc, #48]	; (8008268 <prvInitialiseNewTask+0x130>)
 8008238:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800823a:	683a      	ldr	r2, [r7, #0]
 800823c:	68f9      	ldr	r1, [r7, #12]
 800823e:	6938      	ldr	r0, [r7, #16]
 8008240:	f001 f940 	bl	80094c4 <pxPortInitialiseStack>
 8008244:	4602      	mov	r2, r0
 8008246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008248:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800824a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824c:	2b00      	cmp	r3, #0
 800824e:	d002      	beq.n	8008256 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008252:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008254:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008256:	bf00      	nop
 8008258:	3718      	adds	r7, #24
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	08029bc0 	.word	0x08029bc0
 8008264:	08029be0 	.word	0x08029be0
 8008268:	08029ba0 	.word	0x08029ba0

0800826c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008274:	f001 fa0e 	bl	8009694 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008278:	4b2d      	ldr	r3, [pc, #180]	; (8008330 <prvAddNewTaskToReadyList+0xc4>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	3301      	adds	r3, #1
 800827e:	4a2c      	ldr	r2, [pc, #176]	; (8008330 <prvAddNewTaskToReadyList+0xc4>)
 8008280:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008282:	4b2c      	ldr	r3, [pc, #176]	; (8008334 <prvAddNewTaskToReadyList+0xc8>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d109      	bne.n	800829e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800828a:	4a2a      	ldr	r2, [pc, #168]	; (8008334 <prvAddNewTaskToReadyList+0xc8>)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008290:	4b27      	ldr	r3, [pc, #156]	; (8008330 <prvAddNewTaskToReadyList+0xc4>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	2b01      	cmp	r3, #1
 8008296:	d110      	bne.n	80082ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008298:	f000 fbca 	bl	8008a30 <prvInitialiseTaskLists>
 800829c:	e00d      	b.n	80082ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800829e:	4b26      	ldr	r3, [pc, #152]	; (8008338 <prvAddNewTaskToReadyList+0xcc>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d109      	bne.n	80082ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80082a6:	4b23      	ldr	r3, [pc, #140]	; (8008334 <prvAddNewTaskToReadyList+0xc8>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d802      	bhi.n	80082ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80082b4:	4a1f      	ldr	r2, [pc, #124]	; (8008334 <prvAddNewTaskToReadyList+0xc8>)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80082ba:	4b20      	ldr	r3, [pc, #128]	; (800833c <prvAddNewTaskToReadyList+0xd0>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	3301      	adds	r3, #1
 80082c0:	4a1e      	ldr	r2, [pc, #120]	; (800833c <prvAddNewTaskToReadyList+0xd0>)
 80082c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80082c4:	4b1d      	ldr	r3, [pc, #116]	; (800833c <prvAddNewTaskToReadyList+0xd0>)
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082d0:	4b1b      	ldr	r3, [pc, #108]	; (8008340 <prvAddNewTaskToReadyList+0xd4>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d903      	bls.n	80082e0 <prvAddNewTaskToReadyList+0x74>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082dc:	4a18      	ldr	r2, [pc, #96]	; (8008340 <prvAddNewTaskToReadyList+0xd4>)
 80082de:	6013      	str	r3, [r2, #0]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082e4:	4613      	mov	r3, r2
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	4413      	add	r3, r2
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	4a15      	ldr	r2, [pc, #84]	; (8008344 <prvAddNewTaskToReadyList+0xd8>)
 80082ee:	441a      	add	r2, r3
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	3304      	adds	r3, #4
 80082f4:	4619      	mov	r1, r3
 80082f6:	4610      	mov	r0, r2
 80082f8:	f7fe ff79 	bl	80071ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80082fc:	f001 f9e6 	bl	80096cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008300:	4b0d      	ldr	r3, [pc, #52]	; (8008338 <prvAddNewTaskToReadyList+0xcc>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d00e      	beq.n	8008326 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008308:	4b0a      	ldr	r3, [pc, #40]	; (8008334 <prvAddNewTaskToReadyList+0xc8>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008312:	429a      	cmp	r2, r3
 8008314:	d207      	bcs.n	8008326 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008316:	4b0c      	ldr	r3, [pc, #48]	; (8008348 <prvAddNewTaskToReadyList+0xdc>)
 8008318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800831c:	601a      	str	r2, [r3, #0]
 800831e:	f3bf 8f4f 	dsb	sy
 8008322:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008326:	bf00      	nop
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	2000805c 	.word	0x2000805c
 8008334:	20007b84 	.word	0x20007b84
 8008338:	20008068 	.word	0x20008068
 800833c:	20008078 	.word	0x20008078
 8008340:	20008064 	.word	0x20008064
 8008344:	20007b88 	.word	0x20007b88
 8008348:	e000ed04 	.word	0xe000ed04

0800834c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008354:	2300      	movs	r3, #0
 8008356:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d008      	beq.n	8008370 <vTaskDelay+0x24>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 800835e:	f000 f87b 	bl	8008458 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008362:	2100      	movs	r1, #0
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 fd6b 	bl	8008e40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800836a:	f000 f883 	bl	8008474 <xTaskResumeAll>
 800836e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d107      	bne.n	8008386 <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
 8008376:	4b06      	ldr	r3, [pc, #24]	; (8008390 <vTaskDelay+0x44>)
 8008378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800837c:	601a      	str	r2, [r3, #0]
 800837e:	f3bf 8f4f 	dsb	sy
 8008382:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008386:	bf00      	nop
 8008388:	3710      	adds	r7, #16
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	e000ed04 	.word	0xe000ed04

08008394 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b08a      	sub	sp, #40	; 0x28
 8008398:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800839a:	2300      	movs	r3, #0
 800839c:	60fb      	str	r3, [r7, #12]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800839e:	2300      	movs	r3, #0
 80083a0:	60bb      	str	r3, [r7, #8]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80083a2:	1d3a      	adds	r2, r7, #4
 80083a4:	f107 0108 	add.w	r1, r7, #8
 80083a8:	f107 030c 	add.w	r3, r7, #12
 80083ac:	4618      	mov	r0, r3
 80083ae:	f7fe febd 	bl	800712c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80083b2:	6879      	ldr	r1, [r7, #4]
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	68fa      	ldr	r2, [r7, #12]
 80083b8:	9202      	str	r2, [sp, #8]
 80083ba:	9301      	str	r3, [sp, #4]
 80083bc:	2300      	movs	r3, #0
 80083be:	9300      	str	r3, [sp, #0]
 80083c0:	2300      	movs	r3, #0
 80083c2:	460a      	mov	r2, r1
 80083c4:	491c      	ldr	r1, [pc, #112]	; (8008438 <vTaskStartScheduler+0xa4>)
 80083c6:	481d      	ldr	r0, [pc, #116]	; (800843c <vTaskStartScheduler+0xa8>)
 80083c8:	f7ff fe3e 	bl	8008048 <xTaskCreateStatic>
 80083cc:	4603      	mov	r3, r0
 80083ce:	4a1c      	ldr	r2, [pc, #112]	; (8008440 <vTaskStartScheduler+0xac>)
 80083d0:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80083d2:	4b1b      	ldr	r3, [pc, #108]	; (8008440 <vTaskStartScheduler+0xac>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d002      	beq.n	80083e0 <vTaskStartScheduler+0x4c>
		{
			xReturn = pdPASS;
 80083da:	2301      	movs	r3, #1
 80083dc:	617b      	str	r3, [r7, #20]
 80083de:	e001      	b.n	80083e4 <vTaskStartScheduler+0x50>
		}
		else
		{
			xReturn = pdFAIL;
 80083e0:	2300      	movs	r3, #0
 80083e2:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d102      	bne.n	80083f0 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 80083ea:	f000 fd7d 	bl	8008ee8 <xTimerCreateTimerTask>
 80083ee:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d11c      	bne.n	8008430 <vTaskStartScheduler+0x9c>
	__asm volatile
 80083f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fa:	b672      	cpsid	i
 80083fc:	f383 8811 	msr	BASEPRI, r3
 8008400:	f3bf 8f6f 	isb	sy
 8008404:	f3bf 8f4f 	dsb	sy
 8008408:	b662      	cpsie	i
 800840a:	613b      	str	r3, [r7, #16]
}
 800840c:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800840e:	4b0d      	ldr	r3, [pc, #52]	; (8008444 <vTaskStartScheduler+0xb0>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	3358      	adds	r3, #88	; 0x58
 8008414:	4a0c      	ldr	r2, [pc, #48]	; (8008448 <vTaskStartScheduler+0xb4>)
 8008416:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008418:	4b0c      	ldr	r3, [pc, #48]	; (800844c <vTaskStartScheduler+0xb8>)
 800841a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800841e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008420:	4b0b      	ldr	r3, [pc, #44]	; (8008450 <vTaskStartScheduler+0xbc>)
 8008422:	2201      	movs	r2, #1
 8008424:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008426:	4b0b      	ldr	r3, [pc, #44]	; (8008454 <vTaskStartScheduler+0xc0>)
 8008428:	2200      	movs	r2, #0
 800842a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800842c:	f001 f8c8 	bl	80095c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008430:	bf00      	nop
 8008432:	3718      	adds	r7, #24
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	08025300 	.word	0x08025300
 800843c:	08008a01 	.word	0x08008a01
 8008440:	20008080 	.word	0x20008080
 8008444:	20007b84 	.word	0x20007b84
 8008448:	200000c0 	.word	0x200000c0
 800844c:	2000807c 	.word	0x2000807c
 8008450:	20008068 	.word	0x20008068
 8008454:	20008060 	.word	0x20008060

08008458 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008458:	b480      	push	{r7}
 800845a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800845c:	4b04      	ldr	r3, [pc, #16]	; (8008470 <vTaskSuspendAll+0x18>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	3301      	adds	r3, #1
 8008462:	4a03      	ldr	r2, [pc, #12]	; (8008470 <vTaskSuspendAll+0x18>)
 8008464:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008466:	bf00      	nop
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr
 8008470:	20008084 	.word	0x20008084

08008474 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800847a:	2300      	movs	r3, #0
 800847c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800847e:	2300      	movs	r3, #0
 8008480:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008482:	f001 f907 	bl	8009694 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008486:	4b39      	ldr	r3, [pc, #228]	; (800856c <xTaskResumeAll+0xf8>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	3b01      	subs	r3, #1
 800848c:	4a37      	ldr	r2, [pc, #220]	; (800856c <xTaskResumeAll+0xf8>)
 800848e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008490:	4b36      	ldr	r3, [pc, #216]	; (800856c <xTaskResumeAll+0xf8>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d162      	bne.n	800855e <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008498:	4b35      	ldr	r3, [pc, #212]	; (8008570 <xTaskResumeAll+0xfc>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d05e      	beq.n	800855e <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80084a0:	e02f      	b.n	8008502 <xTaskResumeAll+0x8e>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084a2:	4b34      	ldr	r3, [pc, #208]	; (8008574 <xTaskResumeAll+0x100>)
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	3318      	adds	r3, #24
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7fe fefa 	bl	80072a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	3304      	adds	r3, #4
 80084b8:	4618      	mov	r0, r3
 80084ba:	f7fe fef5 	bl	80072a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084c2:	4b2d      	ldr	r3, [pc, #180]	; (8008578 <xTaskResumeAll+0x104>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d903      	bls.n	80084d2 <xTaskResumeAll+0x5e>
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ce:	4a2a      	ldr	r2, [pc, #168]	; (8008578 <xTaskResumeAll+0x104>)
 80084d0:	6013      	str	r3, [r2, #0]
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084d6:	4613      	mov	r3, r2
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	4413      	add	r3, r2
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	4a27      	ldr	r2, [pc, #156]	; (800857c <xTaskResumeAll+0x108>)
 80084e0:	441a      	add	r2, r3
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	3304      	adds	r3, #4
 80084e6:	4619      	mov	r1, r3
 80084e8:	4610      	mov	r0, r2
 80084ea:	f7fe fe80 	bl	80071ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084f2:	4b23      	ldr	r3, [pc, #140]	; (8008580 <xTaskResumeAll+0x10c>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d302      	bcc.n	8008502 <xTaskResumeAll+0x8e>
					{
						xYieldPending = pdTRUE;
 80084fc:	4b21      	ldr	r3, [pc, #132]	; (8008584 <xTaskResumeAll+0x110>)
 80084fe:	2201      	movs	r2, #1
 8008500:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008502:	4b1c      	ldr	r3, [pc, #112]	; (8008574 <xTaskResumeAll+0x100>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1cb      	bne.n	80084a2 <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d001      	beq.n	8008514 <xTaskResumeAll+0xa0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008510:	f000 fb20 	bl	8008b54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008514:	4b1c      	ldr	r3, [pc, #112]	; (8008588 <xTaskResumeAll+0x114>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d010      	beq.n	8008542 <xTaskResumeAll+0xce>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008520:	f000 f858 	bl	80085d4 <xTaskIncrementTick>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d002      	beq.n	8008530 <xTaskResumeAll+0xbc>
							{
								xYieldPending = pdTRUE;
 800852a:	4b16      	ldr	r3, [pc, #88]	; (8008584 <xTaskResumeAll+0x110>)
 800852c:	2201      	movs	r2, #1
 800852e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	3b01      	subs	r3, #1
 8008534:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d1f1      	bne.n	8008520 <xTaskResumeAll+0xac>

						uxPendedTicks = 0;
 800853c:	4b12      	ldr	r3, [pc, #72]	; (8008588 <xTaskResumeAll+0x114>)
 800853e:	2200      	movs	r2, #0
 8008540:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008542:	4b10      	ldr	r3, [pc, #64]	; (8008584 <xTaskResumeAll+0x110>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d009      	beq.n	800855e <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800854a:	2301      	movs	r3, #1
 800854c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800854e:	4b0f      	ldr	r3, [pc, #60]	; (800858c <xTaskResumeAll+0x118>)
 8008550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008554:	601a      	str	r2, [r3, #0]
 8008556:	f3bf 8f4f 	dsb	sy
 800855a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800855e:	f001 f8b5 	bl	80096cc <vPortExitCritical>

	return xAlreadyYielded;
 8008562:	68bb      	ldr	r3, [r7, #8]
}
 8008564:	4618      	mov	r0, r3
 8008566:	3710      	adds	r7, #16
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}
 800856c:	20008084 	.word	0x20008084
 8008570:	2000805c 	.word	0x2000805c
 8008574:	20008018 	.word	0x20008018
 8008578:	20008064 	.word	0x20008064
 800857c:	20007b88 	.word	0x20007b88
 8008580:	20007b84 	.word	0x20007b84
 8008584:	20008070 	.word	0x20008070
 8008588:	2000806c 	.word	0x2000806c
 800858c:	e000ed04 	.word	0xe000ed04

08008590 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008590:	b480      	push	{r7}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008596:	4b05      	ldr	r3, [pc, #20]	; (80085ac <xTaskGetTickCount+0x1c>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800859c:	687b      	ldr	r3, [r7, #4]
}
 800859e:	4618      	mov	r0, r3
 80085a0:	370c      	adds	r7, #12
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr
 80085aa:	bf00      	nop
 80085ac:	20008060 	.word	0x20008060

080085b0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b082      	sub	sp, #8
 80085b4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80085b6:	f001 f929 	bl	800980c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80085ba:	2300      	movs	r3, #0
 80085bc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80085be:	4b04      	ldr	r3, [pc, #16]	; (80085d0 <xTaskGetTickCountFromISR+0x20>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80085c4:	683b      	ldr	r3, [r7, #0]
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3708      	adds	r7, #8
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	20008060 	.word	0x20008060

080085d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b086      	sub	sp, #24
 80085d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80085da:	2300      	movs	r3, #0
 80085dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085de:	4b46      	ldr	r3, [pc, #280]	; (80086f8 <xTaskIncrementTick+0x124>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d178      	bne.n	80086d8 <xTaskIncrementTick+0x104>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80085e6:	4b45      	ldr	r3, [pc, #276]	; (80086fc <xTaskIncrementTick+0x128>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	3301      	adds	r3, #1
 80085ec:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80085ee:	4a43      	ldr	r2, [pc, #268]	; (80086fc <xTaskIncrementTick+0x128>)
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d110      	bne.n	800861c <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 80085fa:	4b41      	ldr	r3, [pc, #260]	; (8008700 <xTaskIncrementTick+0x12c>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	60fb      	str	r3, [r7, #12]
 8008600:	4b40      	ldr	r3, [pc, #256]	; (8008704 <xTaskIncrementTick+0x130>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a3e      	ldr	r2, [pc, #248]	; (8008700 <xTaskIncrementTick+0x12c>)
 8008606:	6013      	str	r3, [r2, #0]
 8008608:	4a3e      	ldr	r2, [pc, #248]	; (8008704 <xTaskIncrementTick+0x130>)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6013      	str	r3, [r2, #0]
 800860e:	4b3e      	ldr	r3, [pc, #248]	; (8008708 <xTaskIncrementTick+0x134>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	3301      	adds	r3, #1
 8008614:	4a3c      	ldr	r2, [pc, #240]	; (8008708 <xTaskIncrementTick+0x134>)
 8008616:	6013      	str	r3, [r2, #0]
 8008618:	f000 fa9c 	bl	8008b54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800861c:	4b3b      	ldr	r3, [pc, #236]	; (800870c <xTaskIncrementTick+0x138>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	693a      	ldr	r2, [r7, #16]
 8008622:	429a      	cmp	r2, r3
 8008624:	d349      	bcc.n	80086ba <xTaskIncrementTick+0xe6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008626:	4b36      	ldr	r3, [pc, #216]	; (8008700 <xTaskIncrementTick+0x12c>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d104      	bne.n	800863a <xTaskIncrementTick+0x66>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008630:	4b36      	ldr	r3, [pc, #216]	; (800870c <xTaskIncrementTick+0x138>)
 8008632:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008636:	601a      	str	r2, [r3, #0]
					break;
 8008638:	e03f      	b.n	80086ba <xTaskIncrementTick+0xe6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800863a:	4b31      	ldr	r3, [pc, #196]	; (8008700 <xTaskIncrementTick+0x12c>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	68db      	ldr	r3, [r3, #12]
 8008640:	68db      	ldr	r3, [r3, #12]
 8008642:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800864a:	693a      	ldr	r2, [r7, #16]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	429a      	cmp	r2, r3
 8008650:	d203      	bcs.n	800865a <xTaskIncrementTick+0x86>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008652:	4a2e      	ldr	r2, [pc, #184]	; (800870c <xTaskIncrementTick+0x138>)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008658:	e02f      	b.n	80086ba <xTaskIncrementTick+0xe6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	3304      	adds	r3, #4
 800865e:	4618      	mov	r0, r3
 8008660:	f7fe fe22 	bl	80072a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008668:	2b00      	cmp	r3, #0
 800866a:	d004      	beq.n	8008676 <xTaskIncrementTick+0xa2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	3318      	adds	r3, #24
 8008670:	4618      	mov	r0, r3
 8008672:	f7fe fe19 	bl	80072a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800867a:	4b25      	ldr	r3, [pc, #148]	; (8008710 <xTaskIncrementTick+0x13c>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	429a      	cmp	r2, r3
 8008680:	d903      	bls.n	800868a <xTaskIncrementTick+0xb6>
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008686:	4a22      	ldr	r2, [pc, #136]	; (8008710 <xTaskIncrementTick+0x13c>)
 8008688:	6013      	str	r3, [r2, #0]
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800868e:	4613      	mov	r3, r2
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	4413      	add	r3, r2
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	4a1f      	ldr	r2, [pc, #124]	; (8008714 <xTaskIncrementTick+0x140>)
 8008698:	441a      	add	r2, r3
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	3304      	adds	r3, #4
 800869e:	4619      	mov	r1, r3
 80086a0:	4610      	mov	r0, r2
 80086a2:	f7fe fda4 	bl	80071ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086aa:	4b1b      	ldr	r3, [pc, #108]	; (8008718 <xTaskIncrementTick+0x144>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d3b8      	bcc.n	8008626 <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 80086b4:	2301      	movs	r3, #1
 80086b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086b8:	e7b5      	b.n	8008626 <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80086ba:	4b17      	ldr	r3, [pc, #92]	; (8008718 <xTaskIncrementTick+0x144>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086c0:	4914      	ldr	r1, [pc, #80]	; (8008714 <xTaskIncrementTick+0x140>)
 80086c2:	4613      	mov	r3, r2
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	4413      	add	r3, r2
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	440b      	add	r3, r1
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d907      	bls.n	80086e2 <xTaskIncrementTick+0x10e>
			{
				xSwitchRequired = pdTRUE;
 80086d2:	2301      	movs	r3, #1
 80086d4:	617b      	str	r3, [r7, #20]
 80086d6:	e004      	b.n	80086e2 <xTaskIncrementTick+0x10e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80086d8:	4b10      	ldr	r3, [pc, #64]	; (800871c <xTaskIncrementTick+0x148>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	3301      	adds	r3, #1
 80086de:	4a0f      	ldr	r2, [pc, #60]	; (800871c <xTaskIncrementTick+0x148>)
 80086e0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80086e2:	4b0f      	ldr	r3, [pc, #60]	; (8008720 <xTaskIncrementTick+0x14c>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d001      	beq.n	80086ee <xTaskIncrementTick+0x11a>
		{
			xSwitchRequired = pdTRUE;
 80086ea:	2301      	movs	r3, #1
 80086ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80086ee:	697b      	ldr	r3, [r7, #20]
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3718      	adds	r7, #24
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}
 80086f8:	20008084 	.word	0x20008084
 80086fc:	20008060 	.word	0x20008060
 8008700:	20008010 	.word	0x20008010
 8008704:	20008014 	.word	0x20008014
 8008708:	20008074 	.word	0x20008074
 800870c:	2000807c 	.word	0x2000807c
 8008710:	20008064 	.word	0x20008064
 8008714:	20007b88 	.word	0x20007b88
 8008718:	20007b84 	.word	0x20007b84
 800871c:	2000806c 	.word	0x2000806c
 8008720:	20008070 	.word	0x20008070

08008724 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800872a:	4b29      	ldr	r3, [pc, #164]	; (80087d0 <vTaskSwitchContext+0xac>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d003      	beq.n	800873a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008732:	4b28      	ldr	r3, [pc, #160]	; (80087d4 <vTaskSwitchContext+0xb0>)
 8008734:	2201      	movs	r2, #1
 8008736:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008738:	e044      	b.n	80087c4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800873a:	4b26      	ldr	r3, [pc, #152]	; (80087d4 <vTaskSwitchContext+0xb0>)
 800873c:	2200      	movs	r2, #0
 800873e:	601a      	str	r2, [r3, #0]
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 8008740:	4b25      	ldr	r3, [pc, #148]	; (80087d8 <vTaskSwitchContext+0xb4>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a25      	ldr	r2, [pc, #148]	; (80087dc <vTaskSwitchContext+0xb8>)
 8008746:	6812      	ldr	r2, [r2, #0]
 8008748:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800874c:	4b24      	ldr	r3, [pc, #144]	; (80087e0 <vTaskSwitchContext+0xbc>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	607b      	str	r3, [r7, #4]
 8008752:	e002      	b.n	800875a <vTaskSwitchContext+0x36>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	3b01      	subs	r3, #1
 8008758:	607b      	str	r3, [r7, #4]
 800875a:	4922      	ldr	r1, [pc, #136]	; (80087e4 <vTaskSwitchContext+0xc0>)
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	4613      	mov	r3, r2
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	4413      	add	r3, r2
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	440b      	add	r3, r1
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d0f2      	beq.n	8008754 <vTaskSwitchContext+0x30>
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	4613      	mov	r3, r2
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	4413      	add	r3, r2
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	4a1a      	ldr	r2, [pc, #104]	; (80087e4 <vTaskSwitchContext+0xc0>)
 800877a:	4413      	add	r3, r2
 800877c:	603b      	str	r3, [r7, #0]
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	685a      	ldr	r2, [r3, #4]
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	605a      	str	r2, [r3, #4]
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	685a      	ldr	r2, [r3, #4]
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	3308      	adds	r3, #8
 8008790:	429a      	cmp	r2, r3
 8008792:	d104      	bne.n	800879e <vTaskSwitchContext+0x7a>
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	685a      	ldr	r2, [r3, #4]
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	605a      	str	r2, [r3, #4]
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	68db      	ldr	r3, [r3, #12]
 80087a4:	4a0c      	ldr	r2, [pc, #48]	; (80087d8 <vTaskSwitchContext+0xb4>)
 80087a6:	6013      	str	r3, [r2, #0]
 80087a8:	4a0d      	ldr	r2, [pc, #52]	; (80087e0 <vTaskSwitchContext+0xbc>)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 80087ae:	4b0a      	ldr	r3, [pc, #40]	; (80087d8 <vTaskSwitchContext+0xb4>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80087b6:	4a09      	ldr	r2, [pc, #36]	; (80087dc <vTaskSwitchContext+0xb8>)
 80087b8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80087ba:	4b07      	ldr	r3, [pc, #28]	; (80087d8 <vTaskSwitchContext+0xb4>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	3358      	adds	r3, #88	; 0x58
 80087c0:	4a09      	ldr	r2, [pc, #36]	; (80087e8 <vTaskSwitchContext+0xc4>)
 80087c2:	6013      	str	r3, [r2, #0]
}
 80087c4:	bf00      	nop
 80087c6:	370c      	adds	r7, #12
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr
 80087d0:	20008084 	.word	0x20008084
 80087d4:	20008070 	.word	0x20008070
 80087d8:	20007b84 	.word	0x20007b84
 80087dc:	20008058 	.word	0x20008058
 80087e0:	20008064 	.word	0x20008064
 80087e4:	20007b88 	.word	0x20007b88
 80087e8:	200000c0 	.word	0x200000c0

080087ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80087f6:	4b07      	ldr	r3, [pc, #28]	; (8008814 <vTaskPlaceOnEventList+0x28>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	3318      	adds	r3, #24
 80087fc:	4619      	mov	r1, r3
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f7fe fd19 	bl	8007236 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008804:	2101      	movs	r1, #1
 8008806:	6838      	ldr	r0, [r7, #0]
 8008808:	f000 fb1a 	bl	8008e40 <prvAddCurrentTaskToDelayedList>
}
 800880c:	bf00      	nop
 800880e:	3708      	adds	r7, #8
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}
 8008814:	20007b84 	.word	0x20007b84

08008818 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	607a      	str	r2, [r7, #4]

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008824:	4b0a      	ldr	r3, [pc, #40]	; (8008850 <vTaskPlaceOnEventListRestricted+0x38>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	3318      	adds	r3, #24
 800882a:	4619      	mov	r1, r3
 800882c:	68f8      	ldr	r0, [r7, #12]
 800882e:	f7fe fcde 	bl	80071ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d002      	beq.n	800883e <vTaskPlaceOnEventListRestricted+0x26>
		{
			xTicksToWait = portMAX_DELAY;
 8008838:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800883c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800883e:	6879      	ldr	r1, [r7, #4]
 8008840:	68b8      	ldr	r0, [r7, #8]
 8008842:	f000 fafd 	bl	8008e40 <prvAddCurrentTaskToDelayedList>
	}
 8008846:	bf00      	nop
 8008848:	3710      	adds	r7, #16
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	20007b84 	.word	0x20007b84

08008854 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	68db      	ldr	r3, [r3, #12]
 8008862:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	3318      	adds	r3, #24
 8008868:	4618      	mov	r0, r3
 800886a:	f7fe fd1d 	bl	80072a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800886e:	4b1e      	ldr	r3, [pc, #120]	; (80088e8 <xTaskRemoveFromEventList+0x94>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d11d      	bne.n	80088b2 <xTaskRemoveFromEventList+0x5e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	3304      	adds	r3, #4
 800887a:	4618      	mov	r0, r3
 800887c:	f7fe fd14 	bl	80072a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008884:	4b19      	ldr	r3, [pc, #100]	; (80088ec <xTaskRemoveFromEventList+0x98>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	429a      	cmp	r2, r3
 800888a:	d903      	bls.n	8008894 <xTaskRemoveFromEventList+0x40>
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008890:	4a16      	ldr	r2, [pc, #88]	; (80088ec <xTaskRemoveFromEventList+0x98>)
 8008892:	6013      	str	r3, [r2, #0]
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008898:	4613      	mov	r3, r2
 800889a:	009b      	lsls	r3, r3, #2
 800889c:	4413      	add	r3, r2
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	4a13      	ldr	r2, [pc, #76]	; (80088f0 <xTaskRemoveFromEventList+0x9c>)
 80088a2:	441a      	add	r2, r3
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	3304      	adds	r3, #4
 80088a8:	4619      	mov	r1, r3
 80088aa:	4610      	mov	r0, r2
 80088ac:	f7fe fc9f 	bl	80071ee <vListInsertEnd>
 80088b0:	e005      	b.n	80088be <xTaskRemoveFromEventList+0x6a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	3318      	adds	r3, #24
 80088b6:	4619      	mov	r1, r3
 80088b8:	480e      	ldr	r0, [pc, #56]	; (80088f4 <xTaskRemoveFromEventList+0xa0>)
 80088ba:	f7fe fc98 	bl	80071ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088c2:	4b0d      	ldr	r3, [pc, #52]	; (80088f8 <xTaskRemoveFromEventList+0xa4>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d905      	bls.n	80088d8 <xTaskRemoveFromEventList+0x84>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80088cc:	2301      	movs	r3, #1
 80088ce:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80088d0:	4b0a      	ldr	r3, [pc, #40]	; (80088fc <xTaskRemoveFromEventList+0xa8>)
 80088d2:	2201      	movs	r2, #1
 80088d4:	601a      	str	r2, [r3, #0]
 80088d6:	e001      	b.n	80088dc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		xReturn = pdFALSE;
 80088d8:	2300      	movs	r3, #0
 80088da:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80088dc:	68fb      	ldr	r3, [r7, #12]
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3710      	adds	r7, #16
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop
 80088e8:	20008084 	.word	0x20008084
 80088ec:	20008064 	.word	0x20008064
 80088f0:	20007b88 	.word	0x20007b88
 80088f4:	20008018 	.word	0x20008018
 80088f8:	20007b84 	.word	0x20007b84
 80088fc:	20008070 	.word	0x20008070

08008900 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	taskENTER_CRITICAL();
 8008908:	f000 fec4 	bl	8009694 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800890c:	4b06      	ldr	r3, [pc, #24]	; (8008928 <vTaskSetTimeOutState+0x28>)
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8008914:	4b05      	ldr	r3, [pc, #20]	; (800892c <vTaskSetTimeOutState+0x2c>)
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800891c:	f000 fed6 	bl	80096cc <vPortExitCritical>
}
 8008920:	bf00      	nop
 8008922:	3708      	adds	r7, #8
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}
 8008928:	20008074 	.word	0x20008074
 800892c:	20008060 	.word	0x20008060

08008930 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008938:	4b06      	ldr	r3, [pc, #24]	; (8008954 <vTaskInternalSetTimeOutState+0x24>)
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008940:	4b05      	ldr	r3, [pc, #20]	; (8008958 <vTaskInternalSetTimeOutState+0x28>)
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	605a      	str	r2, [r3, #4]
}
 8008948:	bf00      	nop
 800894a:	370c      	adds	r7, #12
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr
 8008954:	20008074 	.word	0x20008074
 8008958:	20008060 	.word	0x20008060

0800895c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b086      	sub	sp, #24
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 8008966:	f000 fe95 	bl	8009694 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800896a:	4b1d      	ldr	r3, [pc, #116]	; (80089e0 <xTaskCheckForTimeOut+0x84>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	693a      	ldr	r2, [r7, #16]
 8008976:	1ad3      	subs	r3, r2, r3
 8008978:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008982:	d102      	bne.n	800898a <xTaskCheckForTimeOut+0x2e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008984:	2300      	movs	r3, #0
 8008986:	617b      	str	r3, [r7, #20]
 8008988:	e023      	b.n	80089d2 <xTaskCheckForTimeOut+0x76>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	4b15      	ldr	r3, [pc, #84]	; (80089e4 <xTaskCheckForTimeOut+0x88>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	429a      	cmp	r2, r3
 8008994:	d007      	beq.n	80089a6 <xTaskCheckForTimeOut+0x4a>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	693a      	ldr	r2, [r7, #16]
 800899c:	429a      	cmp	r2, r3
 800899e:	d302      	bcc.n	80089a6 <xTaskCheckForTimeOut+0x4a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80089a0:	2301      	movs	r3, #1
 80089a2:	617b      	str	r3, [r7, #20]
 80089a4:	e015      	b.n	80089d2 <xTaskCheckForTimeOut+0x76>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	68fa      	ldr	r2, [r7, #12]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d20b      	bcs.n	80089c8 <xTaskCheckForTimeOut+0x6c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	1ad2      	subs	r2, r2, r3
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f7ff ffb7 	bl	8008930 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80089c2:	2300      	movs	r3, #0
 80089c4:	617b      	str	r3, [r7, #20]
 80089c6:	e004      	b.n	80089d2 <xTaskCheckForTimeOut+0x76>
		}
		else
		{
			*pxTicksToWait = 0;
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	2200      	movs	r2, #0
 80089cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80089ce:	2301      	movs	r3, #1
 80089d0:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80089d2:	f000 fe7b 	bl	80096cc <vPortExitCritical>

	return xReturn;
 80089d6:	697b      	ldr	r3, [r7, #20]
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3718      	adds	r7, #24
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}
 80089e0:	20008060 	.word	0x20008060
 80089e4:	20008074 	.word	0x20008074

080089e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80089e8:	b480      	push	{r7}
 80089ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80089ec:	4b03      	ldr	r3, [pc, #12]	; (80089fc <vTaskMissedYield+0x14>)
 80089ee:	2201      	movs	r2, #1
 80089f0:	601a      	str	r2, [r3, #0]
}
 80089f2:	bf00      	nop
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr
 80089fc:	20008070 	.word	0x20008070

08008a00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008a08:	f000 f852 	bl	8008ab0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008a0c:	4b06      	ldr	r3, [pc, #24]	; (8008a28 <prvIdleTask+0x28>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d9f9      	bls.n	8008a08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008a14:	4b05      	ldr	r3, [pc, #20]	; (8008a2c <prvIdleTask+0x2c>)
 8008a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a1a:	601a      	str	r2, [r3, #0]
 8008a1c:	f3bf 8f4f 	dsb	sy
 8008a20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008a24:	e7f0      	b.n	8008a08 <prvIdleTask+0x8>
 8008a26:	bf00      	nop
 8008a28:	20007b88 	.word	0x20007b88
 8008a2c:	e000ed04 	.word	0xe000ed04

08008a30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b082      	sub	sp, #8
 8008a34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a36:	2300      	movs	r3, #0
 8008a38:	607b      	str	r3, [r7, #4]
 8008a3a:	e00c      	b.n	8008a56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	4613      	mov	r3, r2
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	4413      	add	r3, r2
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	4a12      	ldr	r2, [pc, #72]	; (8008a90 <prvInitialiseTaskLists+0x60>)
 8008a48:	4413      	add	r3, r2
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7fe fba2 	bl	8007194 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	3301      	adds	r3, #1
 8008a54:	607b      	str	r3, [r7, #4]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2b37      	cmp	r3, #55	; 0x37
 8008a5a:	d9ef      	bls.n	8008a3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008a5c:	480d      	ldr	r0, [pc, #52]	; (8008a94 <prvInitialiseTaskLists+0x64>)
 8008a5e:	f7fe fb99 	bl	8007194 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008a62:	480d      	ldr	r0, [pc, #52]	; (8008a98 <prvInitialiseTaskLists+0x68>)
 8008a64:	f7fe fb96 	bl	8007194 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008a68:	480c      	ldr	r0, [pc, #48]	; (8008a9c <prvInitialiseTaskLists+0x6c>)
 8008a6a:	f7fe fb93 	bl	8007194 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008a6e:	480c      	ldr	r0, [pc, #48]	; (8008aa0 <prvInitialiseTaskLists+0x70>)
 8008a70:	f7fe fb90 	bl	8007194 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008a74:	480b      	ldr	r0, [pc, #44]	; (8008aa4 <prvInitialiseTaskLists+0x74>)
 8008a76:	f7fe fb8d 	bl	8007194 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008a7a:	4b0b      	ldr	r3, [pc, #44]	; (8008aa8 <prvInitialiseTaskLists+0x78>)
 8008a7c:	4a05      	ldr	r2, [pc, #20]	; (8008a94 <prvInitialiseTaskLists+0x64>)
 8008a7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008a80:	4b0a      	ldr	r3, [pc, #40]	; (8008aac <prvInitialiseTaskLists+0x7c>)
 8008a82:	4a05      	ldr	r2, [pc, #20]	; (8008a98 <prvInitialiseTaskLists+0x68>)
 8008a84:	601a      	str	r2, [r3, #0]
}
 8008a86:	bf00      	nop
 8008a88:	3708      	adds	r7, #8
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	20007b88 	.word	0x20007b88
 8008a94:	20007fe8 	.word	0x20007fe8
 8008a98:	20007ffc 	.word	0x20007ffc
 8008a9c:	20008018 	.word	0x20008018
 8008aa0:	2000802c 	.word	0x2000802c
 8008aa4:	20008044 	.word	0x20008044
 8008aa8:	20008010 	.word	0x20008010
 8008aac:	20008014 	.word	0x20008014

08008ab0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ab6:	e019      	b.n	8008aec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008ab8:	f000 fdec 	bl	8009694 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008abc:	4b10      	ldr	r3, [pc, #64]	; (8008b00 <prvCheckTasksWaitingTermination+0x50>)
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	68db      	ldr	r3, [r3, #12]
 8008ac2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	3304      	adds	r3, #4
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f7fe fbed 	bl	80072a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008ace:	4b0d      	ldr	r3, [pc, #52]	; (8008b04 <prvCheckTasksWaitingTermination+0x54>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	3b01      	subs	r3, #1
 8008ad4:	4a0b      	ldr	r2, [pc, #44]	; (8008b04 <prvCheckTasksWaitingTermination+0x54>)
 8008ad6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008ad8:	4b0b      	ldr	r3, [pc, #44]	; (8008b08 <prvCheckTasksWaitingTermination+0x58>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	3b01      	subs	r3, #1
 8008ade:	4a0a      	ldr	r2, [pc, #40]	; (8008b08 <prvCheckTasksWaitingTermination+0x58>)
 8008ae0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008ae2:	f000 fdf3 	bl	80096cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 f810 	bl	8008b0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008aec:	4b06      	ldr	r3, [pc, #24]	; (8008b08 <prvCheckTasksWaitingTermination+0x58>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d1e1      	bne.n	8008ab8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008af4:	bf00      	nop
 8008af6:	bf00      	nop
 8008af8:	3708      	adds	r7, #8
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	2000802c 	.word	0x2000802c
 8008b04:	2000805c 	.word	0x2000805c
 8008b08:	20008040 	.word	0x20008040

08008b0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	3358      	adds	r3, #88	; 0x58
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f01b f971 	bl	8023e00 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d108      	bne.n	8008b3a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f000 ff17 	bl	8009960 <vPortFree>
				vPortFree( pxTCB );
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 ff14 	bl	8009960 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008b38:	e007      	b.n	8008b4a <prvDeleteTCB+0x3e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d102      	bne.n	8008b4a <prvDeleteTCB+0x3e>
				vPortFree( pxTCB );
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 ff0b 	bl	8009960 <vPortFree>
	}
 8008b4a:	bf00      	nop
 8008b4c:	3708      	adds	r7, #8
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
	...

08008b54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b5a:	4b0c      	ldr	r3, [pc, #48]	; (8008b8c <prvResetNextTaskUnblockTime+0x38>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d104      	bne.n	8008b6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008b64:	4b0a      	ldr	r3, [pc, #40]	; (8008b90 <prvResetNextTaskUnblockTime+0x3c>)
 8008b66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008b6c:	e008      	b.n	8008b80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b6e:	4b07      	ldr	r3, [pc, #28]	; (8008b8c <prvResetNextTaskUnblockTime+0x38>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	68db      	ldr	r3, [r3, #12]
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	4a04      	ldr	r2, [pc, #16]	; (8008b90 <prvResetNextTaskUnblockTime+0x3c>)
 8008b7e:	6013      	str	r3, [r2, #0]
}
 8008b80:	bf00      	nop
 8008b82:	370c      	adds	r7, #12
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr
 8008b8c:	20008010 	.word	0x20008010
 8008b90:	2000807c 	.word	0x2000807c

08008b94 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008b9a:	4b05      	ldr	r3, [pc, #20]	; (8008bb0 <xTaskGetCurrentTaskHandle+0x1c>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008ba0:	687b      	ldr	r3, [r7, #4]
	}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	370c      	adds	r7, #12
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop
 8008bb0:	20007b84 	.word	0x20007b84

08008bb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008bba:	4b0b      	ldr	r3, [pc, #44]	; (8008be8 <xTaskGetSchedulerState+0x34>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d102      	bne.n	8008bc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	607b      	str	r3, [r7, #4]
 8008bc6:	e008      	b.n	8008bda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bc8:	4b08      	ldr	r3, [pc, #32]	; (8008bec <xTaskGetSchedulerState+0x38>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d102      	bne.n	8008bd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008bd0:	2302      	movs	r3, #2
 8008bd2:	607b      	str	r3, [r7, #4]
 8008bd4:	e001      	b.n	8008bda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008bda:	687b      	ldr	r3, [r7, #4]
	}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	370c      	adds	r7, #12
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr
 8008be8:	20008068 	.word	0x20008068
 8008bec:	20008084 	.word	0x20008084

08008bf0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d051      	beq.n	8008caa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c0a:	4b2a      	ldr	r3, [pc, #168]	; (8008cb4 <xTaskPriorityInherit+0xc4>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d241      	bcs.n	8008c98 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	699b      	ldr	r3, [r3, #24]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	db06      	blt.n	8008c2a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c1c:	4b25      	ldr	r3, [pc, #148]	; (8008cb4 <xTaskPriorityInherit+0xc4>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c22:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	6959      	ldr	r1, [r3, #20]
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c32:	4613      	mov	r3, r2
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	4413      	add	r3, r2
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	4a1f      	ldr	r2, [pc, #124]	; (8008cb8 <xTaskPriorityInherit+0xc8>)
 8008c3c:	4413      	add	r3, r2
 8008c3e:	4299      	cmp	r1, r3
 8008c40:	d122      	bne.n	8008c88 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	3304      	adds	r3, #4
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7fe fb2e 	bl	80072a8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008c4c:	4b19      	ldr	r3, [pc, #100]	; (8008cb4 <xTaskPriorityInherit+0xc4>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c5a:	4b18      	ldr	r3, [pc, #96]	; (8008cbc <xTaskPriorityInherit+0xcc>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d903      	bls.n	8008c6a <xTaskPriorityInherit+0x7a>
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c66:	4a15      	ldr	r2, [pc, #84]	; (8008cbc <xTaskPriorityInherit+0xcc>)
 8008c68:	6013      	str	r3, [r2, #0]
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c6e:	4613      	mov	r3, r2
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	4413      	add	r3, r2
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	4a10      	ldr	r2, [pc, #64]	; (8008cb8 <xTaskPriorityInherit+0xc8>)
 8008c78:	441a      	add	r2, r3
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	3304      	adds	r3, #4
 8008c7e:	4619      	mov	r1, r3
 8008c80:	4610      	mov	r0, r2
 8008c82:	f7fe fab4 	bl	80071ee <vListInsertEnd>
 8008c86:	e004      	b.n	8008c92 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008c88:	4b0a      	ldr	r3, [pc, #40]	; (8008cb4 <xTaskPriorityInherit+0xc4>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008c92:	2301      	movs	r3, #1
 8008c94:	60fb      	str	r3, [r7, #12]
 8008c96:	e008      	b.n	8008caa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c9c:	4b05      	ldr	r3, [pc, #20]	; (8008cb4 <xTaskPriorityInherit+0xc4>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d201      	bcs.n	8008caa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008caa:	68fb      	ldr	r3, [r7, #12]
	}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	20007b84 	.word	0x20007b84
 8008cb8:	20007b88 	.word	0x20007b88
 8008cbc:	20008064 	.word	0x20008064

08008cc0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b084      	sub	sp, #16
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d037      	beq.n	8008d46 <xTaskPriorityDisinherit+0x86>
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cda:	1e5a      	subs	r2, r3, #1
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d02c      	beq.n	8008d46 <xTaskPriorityDisinherit+0x86>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d128      	bne.n	8008d46 <xTaskPriorityDisinherit+0x86>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	3304      	adds	r3, #4
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f7fe fad5 	bl	80072a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d16:	4b0e      	ldr	r3, [pc, #56]	; (8008d50 <xTaskPriorityDisinherit+0x90>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d903      	bls.n	8008d26 <xTaskPriorityDisinherit+0x66>
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d22:	4a0b      	ldr	r2, [pc, #44]	; (8008d50 <xTaskPriorityDisinherit+0x90>)
 8008d24:	6013      	str	r3, [r2, #0]
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	4413      	add	r3, r2
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	4a08      	ldr	r2, [pc, #32]	; (8008d54 <xTaskPriorityDisinherit+0x94>)
 8008d34:	441a      	add	r2, r3
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	3304      	adds	r3, #4
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	4610      	mov	r0, r2
 8008d3e:	f7fe fa56 	bl	80071ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008d42:	2301      	movs	r3, #1
 8008d44:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008d46:	68fb      	ldr	r3, [r7, #12]
	}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3710      	adds	r7, #16
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	20008064 	.word	0x20008064
 8008d54:	20007b88 	.word	0x20007b88

08008d58 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b086      	sub	sp, #24
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008d66:	2301      	movs	r3, #1
 8008d68:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d04b      	beq.n	8008e08 <vTaskPriorityDisinheritAfterTimeout+0xb0>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d74:	683a      	ldr	r2, [r7, #0]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d902      	bls.n	8008d80 <vTaskPriorityDisinheritAfterTimeout+0x28>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	617b      	str	r3, [r7, #20]
 8008d7e:	e002      	b.n	8008d86 <vTaskPriorityDisinheritAfterTimeout+0x2e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d84:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d8a:	697a      	ldr	r2, [r7, #20]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d03b      	beq.n	8008e08 <vTaskPriorityDisinheritAfterTimeout+0xb0>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d136      	bne.n	8008e08 <vTaskPriorityDisinheritAfterTimeout+0xb0>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d9e:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	697a      	ldr	r2, [r7, #20]
 8008da4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	699b      	ldr	r3, [r3, #24]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	db04      	blt.n	8008db8 <vTaskPriorityDisinheritAfterTimeout+0x60>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	6959      	ldr	r1, [r3, #20]
 8008dbc:	68ba      	ldr	r2, [r7, #8]
 8008dbe:	4613      	mov	r3, r2
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	4413      	add	r3, r2
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	4a12      	ldr	r2, [pc, #72]	; (8008e10 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 8008dc8:	4413      	add	r3, r2
 8008dca:	4299      	cmp	r1, r3
 8008dcc:	d11c      	bne.n	8008e08 <vTaskPriorityDisinheritAfterTimeout+0xb0>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	3304      	adds	r3, #4
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7fe fa68 	bl	80072a8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ddc:	4b0d      	ldr	r3, [pc, #52]	; (8008e14 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d903      	bls.n	8008dec <vTaskPriorityDisinheritAfterTimeout+0x94>
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de8:	4a0a      	ldr	r2, [pc, #40]	; (8008e14 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 8008dea:	6013      	str	r3, [r2, #0]
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008df0:	4613      	mov	r3, r2
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	4413      	add	r3, r2
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	4a05      	ldr	r2, [pc, #20]	; (8008e10 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 8008dfa:	441a      	add	r2, r3
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	3304      	adds	r3, #4
 8008e00:	4619      	mov	r1, r3
 8008e02:	4610      	mov	r0, r2
 8008e04:	f7fe f9f3 	bl	80071ee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e08:	bf00      	nop
 8008e0a:	3718      	adds	r7, #24
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	20007b88 	.word	0x20007b88
 8008e14:	20008064 	.word	0x20008064

08008e18 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008e18:	b480      	push	{r7}
 8008e1a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008e1c:	4b07      	ldr	r3, [pc, #28]	; (8008e3c <pvTaskIncrementMutexHeldCount+0x24>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d004      	beq.n	8008e2e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008e24:	4b05      	ldr	r3, [pc, #20]	; (8008e3c <pvTaskIncrementMutexHeldCount+0x24>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008e2a:	3201      	adds	r2, #1
 8008e2c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008e2e:	4b03      	ldr	r3, [pc, #12]	; (8008e3c <pvTaskIncrementMutexHeldCount+0x24>)
 8008e30:	681b      	ldr	r3, [r3, #0]
	}
 8008e32:	4618      	mov	r0, r3
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr
 8008e3c:	20007b84 	.word	0x20007b84

08008e40 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b084      	sub	sp, #16
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008e4a:	4b21      	ldr	r3, [pc, #132]	; (8008ed0 <prvAddCurrentTaskToDelayedList+0x90>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e50:	4b20      	ldr	r3, [pc, #128]	; (8008ed4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	3304      	adds	r3, #4
 8008e56:	4618      	mov	r0, r3
 8008e58:	f7fe fa26 	bl	80072a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e62:	d10a      	bne.n	8008e7a <prvAddCurrentTaskToDelayedList+0x3a>
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d007      	beq.n	8008e7a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e6a:	4b1a      	ldr	r3, [pc, #104]	; (8008ed4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	3304      	adds	r3, #4
 8008e70:	4619      	mov	r1, r3
 8008e72:	4819      	ldr	r0, [pc, #100]	; (8008ed8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008e74:	f7fe f9bb 	bl	80071ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008e78:	e026      	b.n	8008ec8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008e7a:	68fa      	ldr	r2, [r7, #12]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	4413      	add	r3, r2
 8008e80:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008e82:	4b14      	ldr	r3, [pc, #80]	; (8008ed4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	68ba      	ldr	r2, [r7, #8]
 8008e88:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008e8a:	68ba      	ldr	r2, [r7, #8]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d209      	bcs.n	8008ea6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e92:	4b12      	ldr	r3, [pc, #72]	; (8008edc <prvAddCurrentTaskToDelayedList+0x9c>)
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	4b0f      	ldr	r3, [pc, #60]	; (8008ed4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	3304      	adds	r3, #4
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	4610      	mov	r0, r2
 8008ea0:	f7fe f9c9 	bl	8007236 <vListInsert>
}
 8008ea4:	e010      	b.n	8008ec8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ea6:	4b0e      	ldr	r3, [pc, #56]	; (8008ee0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	4b0a      	ldr	r3, [pc, #40]	; (8008ed4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	3304      	adds	r3, #4
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	4610      	mov	r0, r2
 8008eb4:	f7fe f9bf 	bl	8007236 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008eb8:	4b0a      	ldr	r3, [pc, #40]	; (8008ee4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	68ba      	ldr	r2, [r7, #8]
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d202      	bcs.n	8008ec8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008ec2:	4a08      	ldr	r2, [pc, #32]	; (8008ee4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	6013      	str	r3, [r2, #0]
}
 8008ec8:	bf00      	nop
 8008eca:	3710      	adds	r7, #16
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}
 8008ed0:	20008060 	.word	0x20008060
 8008ed4:	20007b84 	.word	0x20007b84
 8008ed8:	20008044 	.word	0x20008044
 8008edc:	20008014 	.word	0x20008014
 8008ee0:	20008010 	.word	0x20008010
 8008ee4:	2000807c 	.word	0x2000807c

08008ee8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b088      	sub	sp, #32
 8008eec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008ef2:	f000 faa7 	bl	8009444 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008ef6:	4b15      	ldr	r3, [pc, #84]	; (8008f4c <xTimerCreateTimerTask+0x64>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d020      	beq.n	8008f40 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008efe:	2300      	movs	r3, #0
 8008f00:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008f02:	2300      	movs	r3, #0
 8008f04:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008f06:	463a      	mov	r2, r7
 8008f08:	1d39      	adds	r1, r7, #4
 8008f0a:	f107 0308 	add.w	r3, r7, #8
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7fe f926 	bl	8007160 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008f14:	6839      	ldr	r1, [r7, #0]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	68ba      	ldr	r2, [r7, #8]
 8008f1a:	9202      	str	r2, [sp, #8]
 8008f1c:	9301      	str	r3, [sp, #4]
 8008f1e:	2302      	movs	r3, #2
 8008f20:	9300      	str	r3, [sp, #0]
 8008f22:	2300      	movs	r3, #0
 8008f24:	460a      	mov	r2, r1
 8008f26:	490a      	ldr	r1, [pc, #40]	; (8008f50 <xTimerCreateTimerTask+0x68>)
 8008f28:	480a      	ldr	r0, [pc, #40]	; (8008f54 <xTimerCreateTimerTask+0x6c>)
 8008f2a:	f7ff f88d 	bl	8008048 <xTaskCreateStatic>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	4a09      	ldr	r2, [pc, #36]	; (8008f58 <xTimerCreateTimerTask+0x70>)
 8008f32:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008f34:	4b08      	ldr	r3, [pc, #32]	; (8008f58 <xTimerCreateTimerTask+0x70>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d001      	beq.n	8008f40 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	60fb      	str	r3, [r7, #12]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
 8008f40:	68fb      	ldr	r3, [r7, #12]
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3710      	adds	r7, #16
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	200080b8 	.word	0x200080b8
 8008f50:	08025318 	.word	0x08025318
 8008f54:	0800905d 	.word	0x0800905d
 8008f58:	200080bc 	.word	0x200080bc

08008f5c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b08a      	sub	sp, #40	; 0x28
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	60f8      	str	r0, [r7, #12]
 8008f64:	60b9      	str	r1, [r7, #8]
 8008f66:	607a      	str	r2, [r7, #4]
 8008f68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	627b      	str	r3, [r7, #36]	; 0x24

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008f6e:	4b1a      	ldr	r3, [pc, #104]	; (8008fd8 <xTimerGenericCommand+0x7c>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d02a      	beq.n	8008fcc <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	2b05      	cmp	r3, #5
 8008f86:	dc18      	bgt.n	8008fba <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008f88:	f7ff fe14 	bl	8008bb4 <xTaskGetSchedulerState>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	2b02      	cmp	r3, #2
 8008f90:	d109      	bne.n	8008fa6 <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008f92:	4b11      	ldr	r3, [pc, #68]	; (8008fd8 <xTimerGenericCommand+0x7c>)
 8008f94:	6818      	ldr	r0, [r3, #0]
 8008f96:	f107 0114 	add.w	r1, r7, #20
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f9e:	f7fe fb49 	bl	8007634 <xQueueGenericSend>
 8008fa2:	6278      	str	r0, [r7, #36]	; 0x24
 8008fa4:	e012      	b.n	8008fcc <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008fa6:	4b0c      	ldr	r3, [pc, #48]	; (8008fd8 <xTimerGenericCommand+0x7c>)
 8008fa8:	6818      	ldr	r0, [r3, #0]
 8008faa:	f107 0114 	add.w	r1, r7, #20
 8008fae:	2300      	movs	r3, #0
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f7fe fb3f 	bl	8007634 <xQueueGenericSend>
 8008fb6:	6278      	str	r0, [r7, #36]	; 0x24
 8008fb8:	e008      	b.n	8008fcc <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008fba:	4b07      	ldr	r3, [pc, #28]	; (8008fd8 <xTimerGenericCommand+0x7c>)
 8008fbc:	6818      	ldr	r0, [r3, #0]
 8008fbe:	f107 0114 	add.w	r1, r7, #20
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	683a      	ldr	r2, [r7, #0]
 8008fc6:	f7fe fbdf 	bl	8007788 <xQueueGenericSendFromISR>
 8008fca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3728      	adds	r7, #40	; 0x28
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	200080b8 	.word	0x200080b8

08008fdc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b086      	sub	sp, #24
 8008fe0:	af02      	add	r7, sp, #8
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fe6:	4b1c      	ldr	r3, [pc, #112]	; (8009058 <prvProcessExpiredTimer+0x7c>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	3304      	adds	r3, #4
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f7fe f957 	bl	80072a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009000:	f003 0304 	and.w	r3, r3, #4
 8009004:	2b00      	cmp	r3, #0
 8009006:	d015      	beq.n	8009034 <prvProcessExpiredTimer+0x58>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	699a      	ldr	r2, [r3, #24]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	18d1      	adds	r1, r2, r3
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	683a      	ldr	r2, [r7, #0]
 8009014:	68f8      	ldr	r0, [r7, #12]
 8009016:	f000 f8c5 	bl	80091a4 <prvInsertTimerInActiveList>
 800901a:	4603      	mov	r3, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	d012      	beq.n	8009046 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009020:	2300      	movs	r3, #0
 8009022:	9300      	str	r3, [sp, #0]
 8009024:	2300      	movs	r3, #0
 8009026:	687a      	ldr	r2, [r7, #4]
 8009028:	2100      	movs	r1, #0
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f7ff ff96 	bl	8008f5c <xTimerGenericCommand>
 8009030:	60b8      	str	r0, [r7, #8]
 8009032:	e008      	b.n	8009046 <prvProcessExpiredTimer+0x6a>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800903a:	f023 0301 	bic.w	r3, r3, #1
 800903e:	b2da      	uxtb	r2, r3
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6a1b      	ldr	r3, [r3, #32]
 800904a:	68f8      	ldr	r0, [r7, #12]
 800904c:	4798      	blx	r3
}
 800904e:	bf00      	nop
 8009050:	3710      	adds	r7, #16
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
 8009056:	bf00      	nop
 8009058:	200080b0 	.word	0x200080b0

0800905c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009064:	f107 0308 	add.w	r3, r7, #8
 8009068:	4618      	mov	r0, r3
 800906a:	f000 f857 	bl	800911c <prvGetNextExpireTime>
 800906e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	4619      	mov	r1, r3
 8009074:	68f8      	ldr	r0, [r7, #12]
 8009076:	f000 f803 	bl	8009080 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800907a:	f000 f8d5 	bl	8009228 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800907e:	e7f1      	b.n	8009064 <prvTimerTask+0x8>

08009080 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800908a:	f7ff f9e5 	bl	8008458 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800908e:	f107 0308 	add.w	r3, r7, #8
 8009092:	4618      	mov	r0, r3
 8009094:	f000 f866 	bl	8009164 <prvSampleTimeNow>
 8009098:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d130      	bne.n	8009102 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d10a      	bne.n	80090bc <prvProcessTimerOrBlockTask+0x3c>
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d806      	bhi.n	80090bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80090ae:	f7ff f9e1 	bl	8008474 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80090b2:	68f9      	ldr	r1, [r7, #12]
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f7ff ff91 	bl	8008fdc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80090ba:	e024      	b.n	8009106 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d008      	beq.n	80090d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80090c2:	4b13      	ldr	r3, [pc, #76]	; (8009110 <prvProcessTimerOrBlockTask+0x90>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d101      	bne.n	80090d0 <prvProcessTimerOrBlockTask+0x50>
 80090cc:	2301      	movs	r3, #1
 80090ce:	e000      	b.n	80090d2 <prvProcessTimerOrBlockTask+0x52>
 80090d0:	2300      	movs	r3, #0
 80090d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80090d4:	4b0f      	ldr	r3, [pc, #60]	; (8009114 <prvProcessTimerOrBlockTask+0x94>)
 80090d6:	6818      	ldr	r0, [r3, #0]
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	1ad3      	subs	r3, r2, r3
 80090de:	683a      	ldr	r2, [r7, #0]
 80090e0:	4619      	mov	r1, r3
 80090e2:	f7fe ff7d 	bl	8007fe0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80090e6:	f7ff f9c5 	bl	8008474 <xTaskResumeAll>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d10a      	bne.n	8009106 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80090f0:	4b09      	ldr	r3, [pc, #36]	; (8009118 <prvProcessTimerOrBlockTask+0x98>)
 80090f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090f6:	601a      	str	r2, [r3, #0]
 80090f8:	f3bf 8f4f 	dsb	sy
 80090fc:	f3bf 8f6f 	isb	sy
}
 8009100:	e001      	b.n	8009106 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009102:	f7ff f9b7 	bl	8008474 <xTaskResumeAll>
}
 8009106:	bf00      	nop
 8009108:	3710      	adds	r7, #16
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	200080b4 	.word	0x200080b4
 8009114:	200080b8 	.word	0x200080b8
 8009118:	e000ed04 	.word	0xe000ed04

0800911c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800911c:	b480      	push	{r7}
 800911e:	b085      	sub	sp, #20
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009124:	4b0e      	ldr	r3, [pc, #56]	; (8009160 <prvGetNextExpireTime+0x44>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d101      	bne.n	8009132 <prvGetNextExpireTime+0x16>
 800912e:	2201      	movs	r2, #1
 8009130:	e000      	b.n	8009134 <prvGetNextExpireTime+0x18>
 8009132:	2200      	movs	r2, #0
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d105      	bne.n	800914c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009140:	4b07      	ldr	r3, [pc, #28]	; (8009160 <prvGetNextExpireTime+0x44>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	60fb      	str	r3, [r7, #12]
 800914a:	e001      	b.n	8009150 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800914c:	2300      	movs	r3, #0
 800914e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009150:	68fb      	ldr	r3, [r7, #12]
}
 8009152:	4618      	mov	r0, r3
 8009154:	3714      	adds	r7, #20
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr
 800915e:	bf00      	nop
 8009160:	200080b0 	.word	0x200080b0

08009164 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800916c:	f7ff fa10 	bl	8008590 <xTaskGetTickCount>
 8009170:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009172:	4b0b      	ldr	r3, [pc, #44]	; (80091a0 <prvSampleTimeNow+0x3c>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	68fa      	ldr	r2, [r7, #12]
 8009178:	429a      	cmp	r2, r3
 800917a:	d205      	bcs.n	8009188 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800917c:	f000 f90c 	bl	8009398 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2201      	movs	r2, #1
 8009184:	601a      	str	r2, [r3, #0]
 8009186:	e002      	b.n	800918e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800918e:	4a04      	ldr	r2, [pc, #16]	; (80091a0 <prvSampleTimeNow+0x3c>)
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009194:	68fb      	ldr	r3, [r7, #12]
}
 8009196:	4618      	mov	r0, r3
 8009198:	3710      	adds	r7, #16
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
 800919e:	bf00      	nop
 80091a0:	200080c0 	.word	0x200080c0

080091a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b086      	sub	sp, #24
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	607a      	str	r2, [r7, #4]
 80091b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80091b2:	2300      	movs	r3, #0
 80091b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	68ba      	ldr	r2, [r7, #8]
 80091ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	68fa      	ldr	r2, [r7, #12]
 80091c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80091c2:	68ba      	ldr	r2, [r7, #8]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d812      	bhi.n	80091f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	1ad2      	subs	r2, r2, r3
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	699b      	ldr	r3, [r3, #24]
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d302      	bcc.n	80091de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80091d8:	2301      	movs	r3, #1
 80091da:	617b      	str	r3, [r7, #20]
 80091dc:	e01b      	b.n	8009216 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80091de:	4b10      	ldr	r3, [pc, #64]	; (8009220 <prvInsertTimerInActiveList+0x7c>)
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	3304      	adds	r3, #4
 80091e6:	4619      	mov	r1, r3
 80091e8:	4610      	mov	r0, r2
 80091ea:	f7fe f824 	bl	8007236 <vListInsert>
 80091ee:	e012      	b.n	8009216 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d206      	bcs.n	8009206 <prvInsertTimerInActiveList+0x62>
 80091f8:	68ba      	ldr	r2, [r7, #8]
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d302      	bcc.n	8009206 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009200:	2301      	movs	r3, #1
 8009202:	617b      	str	r3, [r7, #20]
 8009204:	e007      	b.n	8009216 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009206:	4b07      	ldr	r3, [pc, #28]	; (8009224 <prvInsertTimerInActiveList+0x80>)
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	3304      	adds	r3, #4
 800920e:	4619      	mov	r1, r3
 8009210:	4610      	mov	r0, r2
 8009212:	f7fe f810 	bl	8007236 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009216:	697b      	ldr	r3, [r7, #20]
}
 8009218:	4618      	mov	r0, r3
 800921a:	3718      	adds	r7, #24
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}
 8009220:	200080b4 	.word	0x200080b4
 8009224:	200080b0 	.word	0x200080b0

08009228 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b08c      	sub	sp, #48	; 0x30
 800922c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800922e:	e0a0      	b.n	8009372 <prvProcessReceivedCommands+0x14a>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	2b00      	cmp	r3, #0
 8009234:	da0b      	bge.n	800924e <prvProcessReceivedCommands+0x26>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009236:	f107 0308 	add.w	r3, r7, #8
 800923a:	3304      	adds	r3, #4
 800923c:	627b      	str	r3, [r7, #36]	; 0x24
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800923e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009244:	6850      	ldr	r0, [r2, #4]
 8009246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009248:	6892      	ldr	r2, [r2, #8]
 800924a:	4611      	mov	r1, r2
 800924c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	2b00      	cmp	r3, #0
 8009252:	f2c0 808d 	blt.w	8009370 <prvProcessReceivedCommands+0x148>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800925a:	6a3b      	ldr	r3, [r7, #32]
 800925c:	695b      	ldr	r3, [r3, #20]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d004      	beq.n	800926c <prvProcessReceivedCommands+0x44>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009262:	6a3b      	ldr	r3, [r7, #32]
 8009264:	3304      	adds	r3, #4
 8009266:	4618      	mov	r0, r3
 8009268:	f7fe f81e 	bl	80072a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800926c:	1d3b      	adds	r3, r7, #4
 800926e:	4618      	mov	r0, r3
 8009270:	f7ff ff78 	bl	8009164 <prvSampleTimeNow>
 8009274:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	2b09      	cmp	r3, #9
 800927a:	d87a      	bhi.n	8009372 <prvProcessReceivedCommands+0x14a>
 800927c:	a201      	add	r2, pc, #4	; (adr r2, 8009284 <prvProcessReceivedCommands+0x5c>)
 800927e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009282:	bf00      	nop
 8009284:	080092ad 	.word	0x080092ad
 8009288:	080092ad 	.word	0x080092ad
 800928c:	080092ad 	.word	0x080092ad
 8009290:	08009307 	.word	0x08009307
 8009294:	0800931b 	.word	0x0800931b
 8009298:	08009347 	.word	0x08009347
 800929c:	080092ad 	.word	0x080092ad
 80092a0:	080092ad 	.word	0x080092ad
 80092a4:	08009307 	.word	0x08009307
 80092a8:	0800931b 	.word	0x0800931b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80092ac:	6a3b      	ldr	r3, [r7, #32]
 80092ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092b2:	f043 0301 	orr.w	r3, r3, #1
 80092b6:	b2da      	uxtb	r2, r3
 80092b8:	6a3b      	ldr	r3, [r7, #32]
 80092ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80092be:	68fa      	ldr	r2, [r7, #12]
 80092c0:	6a3b      	ldr	r3, [r7, #32]
 80092c2:	699b      	ldr	r3, [r3, #24]
 80092c4:	18d1      	adds	r1, r2, r3
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	69fa      	ldr	r2, [r7, #28]
 80092ca:	6a38      	ldr	r0, [r7, #32]
 80092cc:	f7ff ff6a 	bl	80091a4 <prvInsertTimerInActiveList>
 80092d0:	4603      	mov	r3, r0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d04d      	beq.n	8009372 <prvProcessReceivedCommands+0x14a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092d6:	6a3b      	ldr	r3, [r7, #32]
 80092d8:	6a1b      	ldr	r3, [r3, #32]
 80092da:	6a38      	ldr	r0, [r7, #32]
 80092dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80092de:	6a3b      	ldr	r3, [r7, #32]
 80092e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092e4:	f003 0304 	and.w	r3, r3, #4
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d042      	beq.n	8009372 <prvProcessReceivedCommands+0x14a>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80092ec:	68fa      	ldr	r2, [r7, #12]
 80092ee:	6a3b      	ldr	r3, [r7, #32]
 80092f0:	699b      	ldr	r3, [r3, #24]
 80092f2:	441a      	add	r2, r3
 80092f4:	2300      	movs	r3, #0
 80092f6:	9300      	str	r3, [sp, #0]
 80092f8:	2300      	movs	r3, #0
 80092fa:	2100      	movs	r1, #0
 80092fc:	6a38      	ldr	r0, [r7, #32]
 80092fe:	f7ff fe2d 	bl	8008f5c <xTimerGenericCommand>
 8009302:	61b8      	str	r0, [r7, #24]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 8009304:	e035      	b.n	8009372 <prvProcessReceivedCommands+0x14a>

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009306:	6a3b      	ldr	r3, [r7, #32]
 8009308:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800930c:	f023 0301 	bic.w	r3, r3, #1
 8009310:	b2da      	uxtb	r2, r3
 8009312:	6a3b      	ldr	r3, [r7, #32]
 8009314:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009318:	e02b      	b.n	8009372 <prvProcessReceivedCommands+0x14a>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800931a:	6a3b      	ldr	r3, [r7, #32]
 800931c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009320:	f043 0301 	orr.w	r3, r3, #1
 8009324:	b2da      	uxtb	r2, r3
 8009326:	6a3b      	ldr	r3, [r7, #32]
 8009328:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800932c:	68fa      	ldr	r2, [r7, #12]
 800932e:	6a3b      	ldr	r3, [r7, #32]
 8009330:	619a      	str	r2, [r3, #24]
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009332:	6a3b      	ldr	r3, [r7, #32]
 8009334:	699a      	ldr	r2, [r3, #24]
 8009336:	69fb      	ldr	r3, [r7, #28]
 8009338:	18d1      	adds	r1, r2, r3
 800933a:	69fb      	ldr	r3, [r7, #28]
 800933c:	69fa      	ldr	r2, [r7, #28]
 800933e:	6a38      	ldr	r0, [r7, #32]
 8009340:	f7ff ff30 	bl	80091a4 <prvInsertTimerInActiveList>
					break;
 8009344:	e015      	b.n	8009372 <prvProcessReceivedCommands+0x14a>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009346:	6a3b      	ldr	r3, [r7, #32]
 8009348:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800934c:	f003 0302 	and.w	r3, r3, #2
 8009350:	2b00      	cmp	r3, #0
 8009352:	d103      	bne.n	800935c <prvProcessReceivedCommands+0x134>
						{
							vPortFree( pxTimer );
 8009354:	6a38      	ldr	r0, [r7, #32]
 8009356:	f000 fb03 	bl	8009960 <vPortFree>
 800935a:	e00a      	b.n	8009372 <prvProcessReceivedCommands+0x14a>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800935c:	6a3b      	ldr	r3, [r7, #32]
 800935e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009362:	f023 0301 	bic.w	r3, r3, #1
 8009366:	b2da      	uxtb	r2, r3
 8009368:	6a3b      	ldr	r3, [r7, #32]
 800936a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800936e:	e000      	b.n	8009372 <prvProcessReceivedCommands+0x14a>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009370:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009372:	4b08      	ldr	r3, [pc, #32]	; (8009394 <prvProcessReceivedCommands+0x16c>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f107 0108 	add.w	r1, r7, #8
 800937a:	2200      	movs	r2, #0
 800937c:	4618      	mov	r0, r3
 800937e:	f7fe fab9 	bl	80078f4 <xQueueReceive>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	f47f af53 	bne.w	8009230 <prvProcessReceivedCommands+0x8>
	}
}
 800938a:	bf00      	nop
 800938c:	bf00      	nop
 800938e:	3728      	adds	r7, #40	; 0x28
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	200080b8 	.word	0x200080b8

08009398 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b088      	sub	sp, #32
 800939c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800939e:	e03a      	b.n	8009416 <prvSwitchTimerLists+0x7e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80093a0:	4b26      	ldr	r3, [pc, #152]	; (800943c <prvSwitchTimerLists+0xa4>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	68db      	ldr	r3, [r3, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093aa:	4b24      	ldr	r3, [pc, #144]	; (800943c <prvSwitchTimerLists+0xa4>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	68db      	ldr	r3, [r3, #12]
 80093b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	3304      	adds	r3, #4
 80093b8:	4618      	mov	r0, r3
 80093ba:	f7fd ff75 	bl	80072a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	6a1b      	ldr	r3, [r3, #32]
 80093c2:	68f8      	ldr	r0, [r7, #12]
 80093c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093cc:	f003 0304 	and.w	r3, r3, #4
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d020      	beq.n	8009416 <prvSwitchTimerLists+0x7e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	699b      	ldr	r3, [r3, #24]
 80093d8:	693a      	ldr	r2, [r7, #16]
 80093da:	4413      	add	r3, r2
 80093dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80093de:	68ba      	ldr	r2, [r7, #8]
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d90e      	bls.n	8009404 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	68ba      	ldr	r2, [r7, #8]
 80093ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	68fa      	ldr	r2, [r7, #12]
 80093f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80093f2:	4b12      	ldr	r3, [pc, #72]	; (800943c <prvSwitchTimerLists+0xa4>)
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	3304      	adds	r3, #4
 80093fa:	4619      	mov	r1, r3
 80093fc:	4610      	mov	r0, r2
 80093fe:	f7fd ff1a 	bl	8007236 <vListInsert>
 8009402:	e008      	b.n	8009416 <prvSwitchTimerLists+0x7e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009404:	2300      	movs	r3, #0
 8009406:	9300      	str	r3, [sp, #0]
 8009408:	2300      	movs	r3, #0
 800940a:	693a      	ldr	r2, [r7, #16]
 800940c:	2100      	movs	r1, #0
 800940e:	68f8      	ldr	r0, [r7, #12]
 8009410:	f7ff fda4 	bl	8008f5c <xTimerGenericCommand>
 8009414:	6078      	str	r0, [r7, #4]
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009416:	4b09      	ldr	r3, [pc, #36]	; (800943c <prvSwitchTimerLists+0xa4>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d1bf      	bne.n	80093a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009420:	4b06      	ldr	r3, [pc, #24]	; (800943c <prvSwitchTimerLists+0xa4>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009426:	4b06      	ldr	r3, [pc, #24]	; (8009440 <prvSwitchTimerLists+0xa8>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a04      	ldr	r2, [pc, #16]	; (800943c <prvSwitchTimerLists+0xa4>)
 800942c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800942e:	4a04      	ldr	r2, [pc, #16]	; (8009440 <prvSwitchTimerLists+0xa8>)
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	6013      	str	r3, [r2, #0]
}
 8009434:	bf00      	nop
 8009436:	3718      	adds	r7, #24
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}
 800943c:	200080b0 	.word	0x200080b0
 8009440:	200080b4 	.word	0x200080b4

08009444 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800944a:	f000 f923 	bl	8009694 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800944e:	4b15      	ldr	r3, [pc, #84]	; (80094a4 <prvCheckForValidListAndQueue+0x60>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d120      	bne.n	8009498 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009456:	4814      	ldr	r0, [pc, #80]	; (80094a8 <prvCheckForValidListAndQueue+0x64>)
 8009458:	f7fd fe9c 	bl	8007194 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800945c:	4813      	ldr	r0, [pc, #76]	; (80094ac <prvCheckForValidListAndQueue+0x68>)
 800945e:	f7fd fe99 	bl	8007194 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009462:	4b13      	ldr	r3, [pc, #76]	; (80094b0 <prvCheckForValidListAndQueue+0x6c>)
 8009464:	4a10      	ldr	r2, [pc, #64]	; (80094a8 <prvCheckForValidListAndQueue+0x64>)
 8009466:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009468:	4b12      	ldr	r3, [pc, #72]	; (80094b4 <prvCheckForValidListAndQueue+0x70>)
 800946a:	4a10      	ldr	r2, [pc, #64]	; (80094ac <prvCheckForValidListAndQueue+0x68>)
 800946c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800946e:	2300      	movs	r3, #0
 8009470:	9300      	str	r3, [sp, #0]
 8009472:	4b11      	ldr	r3, [pc, #68]	; (80094b8 <prvCheckForValidListAndQueue+0x74>)
 8009474:	4a11      	ldr	r2, [pc, #68]	; (80094bc <prvCheckForValidListAndQueue+0x78>)
 8009476:	2110      	movs	r1, #16
 8009478:	200a      	movs	r0, #10
 800947a:	f7fd ff99 	bl	80073b0 <xQueueGenericCreateStatic>
 800947e:	4603      	mov	r3, r0
 8009480:	4a08      	ldr	r2, [pc, #32]	; (80094a4 <prvCheckForValidListAndQueue+0x60>)
 8009482:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009484:	4b07      	ldr	r3, [pc, #28]	; (80094a4 <prvCheckForValidListAndQueue+0x60>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d005      	beq.n	8009498 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800948c:	4b05      	ldr	r3, [pc, #20]	; (80094a4 <prvCheckForValidListAndQueue+0x60>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	490b      	ldr	r1, [pc, #44]	; (80094c0 <prvCheckForValidListAndQueue+0x7c>)
 8009492:	4618      	mov	r0, r3
 8009494:	f7fe fd50 	bl	8007f38 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009498:	f000 f918 	bl	80096cc <vPortExitCritical>
}
 800949c:	bf00      	nop
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	200080b8 	.word	0x200080b8
 80094a8:	20008088 	.word	0x20008088
 80094ac:	2000809c 	.word	0x2000809c
 80094b0:	200080b0 	.word	0x200080b0
 80094b4:	200080b4 	.word	0x200080b4
 80094b8:	20008164 	.word	0x20008164
 80094bc:	200080c4 	.word	0x200080c4
 80094c0:	08025320 	.word	0x08025320

080094c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80094c4:	b480      	push	{r7}
 80094c6:	b085      	sub	sp, #20
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	60f8      	str	r0, [r7, #12]
 80094cc:	60b9      	str	r1, [r7, #8]
 80094ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	3b04      	subs	r3, #4
 80094d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80094dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	3b04      	subs	r3, #4
 80094e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	f023 0201 	bic.w	r2, r3, #1
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	3b04      	subs	r3, #4
 80094f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80094f4:	4a0c      	ldr	r2, [pc, #48]	; (8009528 <pxPortInitialiseStack+0x64>)
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	3b14      	subs	r3, #20
 80094fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	3b04      	subs	r3, #4
 800950a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f06f 0202 	mvn.w	r2, #2
 8009512:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	3b20      	subs	r3, #32
 8009518:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800951a:	68fb      	ldr	r3, [r7, #12]
}
 800951c:	4618      	mov	r0, r3
 800951e:	3714      	adds	r7, #20
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr
 8009528:	0800952d 	.word	0x0800952d

0800952c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800952c:	b480      	push	{r7}
 800952e:	b083      	sub	sp, #12
 8009530:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009532:	2300      	movs	r3, #0
 8009534:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800953a:	b672      	cpsid	i
 800953c:	f383 8811 	msr	BASEPRI, r3
 8009540:	f3bf 8f6f 	isb	sy
 8009544:	f3bf 8f4f 	dsb	sy
 8009548:	b662      	cpsie	i
 800954a:	607b      	str	r3, [r7, #4]
}
 800954c:	bf00      	nop

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800954e:	bf00      	nop
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d0fc      	beq.n	8009550 <prvTaskExitError+0x24>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009556:	bf00      	nop
 8009558:	bf00      	nop
 800955a:	370c      	adds	r7, #12
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr
	...

08009570 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009570:	4b07      	ldr	r3, [pc, #28]	; (8009590 <pxCurrentTCBConst2>)
 8009572:	6819      	ldr	r1, [r3, #0]
 8009574:	6808      	ldr	r0, [r1, #0]
 8009576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800957a:	f380 8809 	msr	PSP, r0
 800957e:	f3bf 8f6f 	isb	sy
 8009582:	f04f 0000 	mov.w	r0, #0
 8009586:	f380 8811 	msr	BASEPRI, r0
 800958a:	4770      	bx	lr
 800958c:	f3af 8000 	nop.w

08009590 <pxCurrentTCBConst2>:
 8009590:	20007b84 	.word	0x20007b84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009594:	bf00      	nop
 8009596:	bf00      	nop

08009598 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009598:	4808      	ldr	r0, [pc, #32]	; (80095bc <prvPortStartFirstTask+0x24>)
 800959a:	6800      	ldr	r0, [r0, #0]
 800959c:	6800      	ldr	r0, [r0, #0]
 800959e:	f380 8808 	msr	MSP, r0
 80095a2:	f04f 0000 	mov.w	r0, #0
 80095a6:	f380 8814 	msr	CONTROL, r0
 80095aa:	b662      	cpsie	i
 80095ac:	b661      	cpsie	f
 80095ae:	f3bf 8f4f 	dsb	sy
 80095b2:	f3bf 8f6f 	isb	sy
 80095b6:	df00      	svc	0
 80095b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80095ba:	bf00      	nop
 80095bc:	e000ed08 	.word	0xe000ed08

080095c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80095c6:	4b2d      	ldr	r3, [pc, #180]	; (800967c <xPortStartScheduler+0xbc>)
 80095c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	22ff      	movs	r2, #255	; 0xff
 80095d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	b2db      	uxtb	r3, r3
 80095de:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80095e0:	79fb      	ldrb	r3, [r7, #7]
 80095e2:	b2db      	uxtb	r3, r3
 80095e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80095e8:	b2da      	uxtb	r2, r3
 80095ea:	4b25      	ldr	r3, [pc, #148]	; (8009680 <xPortStartScheduler+0xc0>)
 80095ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80095ee:	4b25      	ldr	r3, [pc, #148]	; (8009684 <xPortStartScheduler+0xc4>)
 80095f0:	2207      	movs	r2, #7
 80095f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80095f4:	e009      	b.n	800960a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80095f6:	4b23      	ldr	r3, [pc, #140]	; (8009684 <xPortStartScheduler+0xc4>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	3b01      	subs	r3, #1
 80095fc:	4a21      	ldr	r2, [pc, #132]	; (8009684 <xPortStartScheduler+0xc4>)
 80095fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009600:	79fb      	ldrb	r3, [r7, #7]
 8009602:	b2db      	uxtb	r3, r3
 8009604:	005b      	lsls	r3, r3, #1
 8009606:	b2db      	uxtb	r3, r3
 8009608:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800960a:	79fb      	ldrb	r3, [r7, #7]
 800960c:	b2db      	uxtb	r3, r3
 800960e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009612:	2b80      	cmp	r3, #128	; 0x80
 8009614:	d0ef      	beq.n	80095f6 <xPortStartScheduler+0x36>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009616:	4b1b      	ldr	r3, [pc, #108]	; (8009684 <xPortStartScheduler+0xc4>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	021b      	lsls	r3, r3, #8
 800961c:	4a19      	ldr	r2, [pc, #100]	; (8009684 <xPortStartScheduler+0xc4>)
 800961e:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009620:	4b18      	ldr	r3, [pc, #96]	; (8009684 <xPortStartScheduler+0xc4>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009628:	4a16      	ldr	r2, [pc, #88]	; (8009684 <xPortStartScheduler+0xc4>)
 800962a:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	b2da      	uxtb	r2, r3
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009634:	4b14      	ldr	r3, [pc, #80]	; (8009688 <xPortStartScheduler+0xc8>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a13      	ldr	r2, [pc, #76]	; (8009688 <xPortStartScheduler+0xc8>)
 800963a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800963e:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009640:	4b11      	ldr	r3, [pc, #68]	; (8009688 <xPortStartScheduler+0xc8>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a10      	ldr	r2, [pc, #64]	; (8009688 <xPortStartScheduler+0xc8>)
 8009646:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800964a:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800964c:	f000 f8b0 	bl	80097b0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009650:	4b0e      	ldr	r3, [pc, #56]	; (800968c <xPortStartScheduler+0xcc>)
 8009652:	2200      	movs	r2, #0
 8009654:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009656:	f000 f8cf 	bl	80097f8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800965a:	4b0d      	ldr	r3, [pc, #52]	; (8009690 <xPortStartScheduler+0xd0>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a0c      	ldr	r2, [pc, #48]	; (8009690 <xPortStartScheduler+0xd0>)
 8009660:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009664:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009666:	f7ff ff97 	bl	8009598 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800966a:	f7ff f85b 	bl	8008724 <vTaskSwitchContext>
	prvTaskExitError();
 800966e:	f7ff ff5d 	bl	800952c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009672:	2300      	movs	r3, #0
}
 8009674:	4618      	mov	r0, r3
 8009676:	3710      	adds	r7, #16
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}
 800967c:	e000e400 	.word	0xe000e400
 8009680:	200081b4 	.word	0x200081b4
 8009684:	200081b8 	.word	0x200081b8
 8009688:	e000ed20 	.word	0xe000ed20
 800968c:	20000010 	.word	0x20000010
 8009690:	e000ef34 	.word	0xe000ef34

08009694 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
	__asm volatile
 800969a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800969e:	b672      	cpsid	i
 80096a0:	f383 8811 	msr	BASEPRI, r3
 80096a4:	f3bf 8f6f 	isb	sy
 80096a8:	f3bf 8f4f 	dsb	sy
 80096ac:	b662      	cpsie	i
 80096ae:	607b      	str	r3, [r7, #4]
}
 80096b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80096b2:	4b05      	ldr	r3, [pc, #20]	; (80096c8 <vPortEnterCritical+0x34>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	3301      	adds	r3, #1
 80096b8:	4a03      	ldr	r2, [pc, #12]	; (80096c8 <vPortEnterCritical+0x34>)
 80096ba:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 80096bc:	bf00      	nop
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr
 80096c8:	20000010 	.word	0x20000010

080096cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 80096d2:	4b0a      	ldr	r3, [pc, #40]	; (80096fc <vPortExitCritical+0x30>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	3b01      	subs	r3, #1
 80096d8:	4a08      	ldr	r2, [pc, #32]	; (80096fc <vPortExitCritical+0x30>)
 80096da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80096dc:	4b07      	ldr	r3, [pc, #28]	; (80096fc <vPortExitCritical+0x30>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d105      	bne.n	80096f0 <vPortExitCritical+0x24>
 80096e4:	2300      	movs	r3, #0
 80096e6:	607b      	str	r3, [r7, #4]
	__asm volatile
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f383 8811 	msr	BASEPRI, r3
}
 80096ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80096f0:	bf00      	nop
 80096f2:	370c      	adds	r7, #12
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr
 80096fc:	20000010 	.word	0x20000010

08009700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009700:	f3ef 8009 	mrs	r0, PSP
 8009704:	f3bf 8f6f 	isb	sy
 8009708:	4b15      	ldr	r3, [pc, #84]	; (8009760 <pxCurrentTCBConst>)
 800970a:	681a      	ldr	r2, [r3, #0]
 800970c:	f01e 0f10 	tst.w	lr, #16
 8009710:	bf08      	it	eq
 8009712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800971a:	6010      	str	r0, [r2, #0]
 800971c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009720:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009724:	b672      	cpsid	i
 8009726:	f380 8811 	msr	BASEPRI, r0
 800972a:	f3bf 8f4f 	dsb	sy
 800972e:	f3bf 8f6f 	isb	sy
 8009732:	b662      	cpsie	i
 8009734:	f7fe fff6 	bl	8008724 <vTaskSwitchContext>
 8009738:	f04f 0000 	mov.w	r0, #0
 800973c:	f380 8811 	msr	BASEPRI, r0
 8009740:	bc09      	pop	{r0, r3}
 8009742:	6819      	ldr	r1, [r3, #0]
 8009744:	6808      	ldr	r0, [r1, #0]
 8009746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800974a:	f01e 0f10 	tst.w	lr, #16
 800974e:	bf08      	it	eq
 8009750:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009754:	f380 8809 	msr	PSP, r0
 8009758:	f3bf 8f6f 	isb	sy
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop

08009760 <pxCurrentTCBConst>:
 8009760:	20007b84 	.word	0x20007b84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009764:	bf00      	nop
 8009766:	bf00      	nop

08009768 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b082      	sub	sp, #8
 800976c:	af00      	add	r7, sp, #0
	__asm volatile
 800976e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009772:	b672      	cpsid	i
 8009774:	f383 8811 	msr	BASEPRI, r3
 8009778:	f3bf 8f6f 	isb	sy
 800977c:	f3bf 8f4f 	dsb	sy
 8009780:	b662      	cpsie	i
 8009782:	607b      	str	r3, [r7, #4]
}
 8009784:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009786:	f7fe ff25 	bl	80085d4 <xTaskIncrementTick>
 800978a:	4603      	mov	r3, r0
 800978c:	2b00      	cmp	r3, #0
 800978e:	d003      	beq.n	8009798 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009790:	4b06      	ldr	r3, [pc, #24]	; (80097ac <SysTick_Handler+0x44>)
 8009792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009796:	601a      	str	r2, [r3, #0]
 8009798:	2300      	movs	r3, #0
 800979a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	f383 8811 	msr	BASEPRI, r3
}
 80097a2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80097a4:	bf00      	nop
 80097a6:	3708      	adds	r7, #8
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	e000ed04 	.word	0xe000ed04

080097b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80097b0:	b480      	push	{r7}
 80097b2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80097b4:	4b0b      	ldr	r3, [pc, #44]	; (80097e4 <vPortSetupTimerInterrupt+0x34>)
 80097b6:	2200      	movs	r2, #0
 80097b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80097ba:	4b0b      	ldr	r3, [pc, #44]	; (80097e8 <vPortSetupTimerInterrupt+0x38>)
 80097bc:	2200      	movs	r2, #0
 80097be:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80097c0:	4b0a      	ldr	r3, [pc, #40]	; (80097ec <vPortSetupTimerInterrupt+0x3c>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4a0a      	ldr	r2, [pc, #40]	; (80097f0 <vPortSetupTimerInterrupt+0x40>)
 80097c6:	fba2 2303 	umull	r2, r3, r2, r3
 80097ca:	099b      	lsrs	r3, r3, #6
 80097cc:	4a09      	ldr	r2, [pc, #36]	; (80097f4 <vPortSetupTimerInterrupt+0x44>)
 80097ce:	3b01      	subs	r3, #1
 80097d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80097d2:	4b04      	ldr	r3, [pc, #16]	; (80097e4 <vPortSetupTimerInterrupt+0x34>)
 80097d4:	2207      	movs	r2, #7
 80097d6:	601a      	str	r2, [r3, #0]
}
 80097d8:	bf00      	nop
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr
 80097e2:	bf00      	nop
 80097e4:	e000e010 	.word	0xe000e010
 80097e8:	e000e018 	.word	0xe000e018
 80097ec:	20000004 	.word	0x20000004
 80097f0:	10624dd3 	.word	0x10624dd3
 80097f4:	e000e014 	.word	0xe000e014

080097f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80097f8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009808 <vPortEnableVFP+0x10>
 80097fc:	6801      	ldr	r1, [r0, #0]
 80097fe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009802:	6001      	str	r1, [r0, #0]
 8009804:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009806:	bf00      	nop
 8009808:	e000ed88 	.word	0xe000ed88

0800980c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009812:	f3ef 8305 	mrs	r3, IPSR
 8009816:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2b0f      	cmp	r3, #15
 800981c:	d904      	bls.n	8009828 <vPortValidateInterruptPriority+0x1c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800981e:	4a05      	ldr	r2, [pc, #20]	; (8009834 <vPortValidateInterruptPriority+0x28>)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	4413      	add	r3, r2
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	70fb      	strb	r3, [r7, #3]
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
	}
 8009828:	bf00      	nop
 800982a:	370c      	adds	r7, #12
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr
 8009834:	e000e3f0 	.word	0xe000e3f0

08009838 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b086      	sub	sp, #24
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009840:	2300      	movs	r3, #0
 8009842:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8009844:	f7fe fe08 	bl	8008458 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009848:	4b40      	ldr	r3, [pc, #256]	; (800994c <pvPortMalloc+0x114>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d101      	bne.n	8009854 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009850:	f000 f8c0 	bl	80099d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009854:	4b3e      	ldr	r3, [pc, #248]	; (8009950 <pvPortMalloc+0x118>)
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4013      	ands	r3, r2
 800985c:	2b00      	cmp	r3, #0
 800985e:	d16d      	bne.n	800993c <pvPortMalloc+0x104>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d00d      	beq.n	8009882 <pvPortMalloc+0x4a>
			{
				xWantedSize += xHeapStructSize;
 8009866:	2208      	movs	r2, #8
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	4413      	add	r3, r2
 800986c:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f003 0307 	and.w	r3, r3, #7
 8009874:	2b00      	cmp	r3, #0
 8009876:	d004      	beq.n	8009882 <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f023 0307 	bic.w	r3, r3, #7
 800987e:	3308      	adds	r3, #8
 8009880:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d059      	beq.n	800993c <pvPortMalloc+0x104>
 8009888:	4b32      	ldr	r3, [pc, #200]	; (8009954 <pvPortMalloc+0x11c>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	429a      	cmp	r2, r3
 8009890:	d854      	bhi.n	800993c <pvPortMalloc+0x104>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009892:	4b31      	ldr	r3, [pc, #196]	; (8009958 <pvPortMalloc+0x120>)
 8009894:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8009896:	4b30      	ldr	r3, [pc, #192]	; (8009958 <pvPortMalloc+0x120>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800989c:	e004      	b.n	80098a8 <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d903      	bls.n	80098ba <pvPortMalloc+0x82>
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d1f1      	bne.n	800989e <pvPortMalloc+0x66>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80098ba:	4b24      	ldr	r3, [pc, #144]	; (800994c <pvPortMalloc+0x114>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	697a      	ldr	r2, [r7, #20]
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d03b      	beq.n	800993c <pvPortMalloc+0x104>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	2208      	movs	r2, #8
 80098ca:	4413      	add	r3, r2
 80098cc:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	681a      	ldr	r2, [r3, #0]
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	685a      	ldr	r2, [r3, #4]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	1ad2      	subs	r2, r2, r3
 80098de:	2308      	movs	r3, #8
 80098e0:	005b      	lsls	r3, r3, #1
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d90f      	bls.n	8009906 <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80098e6:	697a      	ldr	r2, [r7, #20]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	4413      	add	r3, r2
 80098ec:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	685a      	ldr	r2, [r3, #4]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	1ad2      	subs	r2, r2, r3
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009900:	68b8      	ldr	r0, [r7, #8]
 8009902:	f000 f8c9 	bl	8009a98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009906:	4b13      	ldr	r3, [pc, #76]	; (8009954 <pvPortMalloc+0x11c>)
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	1ad3      	subs	r3, r2, r3
 8009910:	4a10      	ldr	r2, [pc, #64]	; (8009954 <pvPortMalloc+0x11c>)
 8009912:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009914:	4b0f      	ldr	r3, [pc, #60]	; (8009954 <pvPortMalloc+0x11c>)
 8009916:	681a      	ldr	r2, [r3, #0]
 8009918:	4b10      	ldr	r3, [pc, #64]	; (800995c <pvPortMalloc+0x124>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	429a      	cmp	r2, r3
 800991e:	d203      	bcs.n	8009928 <pvPortMalloc+0xf0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009920:	4b0c      	ldr	r3, [pc, #48]	; (8009954 <pvPortMalloc+0x11c>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a0d      	ldr	r2, [pc, #52]	; (800995c <pvPortMalloc+0x124>)
 8009926:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	685a      	ldr	r2, [r3, #4]
 800992c:	4b08      	ldr	r3, [pc, #32]	; (8009950 <pvPortMalloc+0x118>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	431a      	orrs	r2, r3
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	2200      	movs	r2, #0
 800993a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800993c:	f7fe fd9a 	bl	8008474 <xTaskResumeAll>
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
 8009940:	68fb      	ldr	r3, [r7, #12]
}
 8009942:	4618      	mov	r0, r3
 8009944:	3718      	adds	r7, #24
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop
 800994c:	2000bdc4 	.word	0x2000bdc4
 8009950:	2000bdd0 	.word	0x2000bdd0
 8009954:	2000bdc8 	.word	0x2000bdc8
 8009958:	2000bdbc 	.word	0x2000bdbc
 800995c:	2000bdcc 	.word	0x2000bdcc

08009960 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b084      	sub	sp, #16
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d027      	beq.n	80099c2 <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009972:	2308      	movs	r3, #8
 8009974:	425b      	negs	r3, r3
 8009976:	68fa      	ldr	r2, [r7, #12]
 8009978:	4413      	add	r3, r2
 800997a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	685a      	ldr	r2, [r3, #4]
 8009984:	4b11      	ldr	r3, [pc, #68]	; (80099cc <vPortFree+0x6c>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4013      	ands	r3, r2
 800998a:	2b00      	cmp	r3, #0
 800998c:	d019      	beq.n	80099c2 <vPortFree+0x62>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d115      	bne.n	80099c2 <vPortFree+0x62>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	685a      	ldr	r2, [r3, #4]
 800999a:	4b0c      	ldr	r3, [pc, #48]	; (80099cc <vPortFree+0x6c>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	43db      	mvns	r3, r3
 80099a0:	401a      	ands	r2, r3
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80099a6:	f7fe fd57 	bl	8008458 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	685a      	ldr	r2, [r3, #4]
 80099ae:	4b08      	ldr	r3, [pc, #32]	; (80099d0 <vPortFree+0x70>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4413      	add	r3, r2
 80099b4:	4a06      	ldr	r2, [pc, #24]	; (80099d0 <vPortFree+0x70>)
 80099b6:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80099b8:	68b8      	ldr	r0, [r7, #8]
 80099ba:	f000 f86d 	bl	8009a98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80099be:	f7fe fd59 	bl	8008474 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80099c2:	bf00      	nop
 80099c4:	3710      	adds	r7, #16
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}
 80099ca:	bf00      	nop
 80099cc:	2000bdd0 	.word	0x2000bdd0
 80099d0:	2000bdc8 	.word	0x2000bdc8

080099d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80099d4:	b480      	push	{r7}
 80099d6:	b085      	sub	sp, #20
 80099d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80099da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80099de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80099e0:	4b27      	ldr	r3, [pc, #156]	; (8009a80 <prvHeapInit+0xac>)
 80099e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f003 0307 	and.w	r3, r3, #7
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d00c      	beq.n	8009a08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	3307      	adds	r3, #7
 80099f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	f023 0307 	bic.w	r3, r3, #7
 80099fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80099fc:	68ba      	ldr	r2, [r7, #8]
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	1ad3      	subs	r3, r2, r3
 8009a02:	4a1f      	ldr	r2, [pc, #124]	; (8009a80 <prvHeapInit+0xac>)
 8009a04:	4413      	add	r3, r2
 8009a06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009a0c:	4a1d      	ldr	r2, [pc, #116]	; (8009a84 <prvHeapInit+0xb0>)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009a12:	4b1c      	ldr	r3, [pc, #112]	; (8009a84 <prvHeapInit+0xb0>)
 8009a14:	2200      	movs	r2, #0
 8009a16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	68ba      	ldr	r2, [r7, #8]
 8009a1c:	4413      	add	r3, r2
 8009a1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009a20:	2208      	movs	r2, #8
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	1a9b      	subs	r3, r3, r2
 8009a26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f023 0307 	bic.w	r3, r3, #7
 8009a2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	4a15      	ldr	r2, [pc, #84]	; (8009a88 <prvHeapInit+0xb4>)
 8009a34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009a36:	4b14      	ldr	r3, [pc, #80]	; (8009a88 <prvHeapInit+0xb4>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009a3e:	4b12      	ldr	r3, [pc, #72]	; (8009a88 <prvHeapInit+0xb4>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	2200      	movs	r2, #0
 8009a44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	68fa      	ldr	r2, [r7, #12]
 8009a4e:	1ad2      	subs	r2, r2, r3
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009a54:	4b0c      	ldr	r3, [pc, #48]	; (8009a88 <prvHeapInit+0xb4>)
 8009a56:	681a      	ldr	r2, [r3, #0]
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	4a0a      	ldr	r2, [pc, #40]	; (8009a8c <prvHeapInit+0xb8>)
 8009a62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	4a09      	ldr	r2, [pc, #36]	; (8009a90 <prvHeapInit+0xbc>)
 8009a6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009a6c:	4b09      	ldr	r3, [pc, #36]	; (8009a94 <prvHeapInit+0xc0>)
 8009a6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009a72:	601a      	str	r2, [r3, #0]
}
 8009a74:	bf00      	nop
 8009a76:	3714      	adds	r7, #20
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr
 8009a80:	200081bc 	.word	0x200081bc
 8009a84:	2000bdbc 	.word	0x2000bdbc
 8009a88:	2000bdc4 	.word	0x2000bdc4
 8009a8c:	2000bdcc 	.word	0x2000bdcc
 8009a90:	2000bdc8 	.word	0x2000bdc8
 8009a94:	2000bdd0 	.word	0x2000bdd0

08009a98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b085      	sub	sp, #20
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009aa0:	4b28      	ldr	r3, [pc, #160]	; (8009b44 <prvInsertBlockIntoFreeList+0xac>)
 8009aa2:	60fb      	str	r3, [r7, #12]
 8009aa4:	e002      	b.n	8009aac <prvInsertBlockIntoFreeList+0x14>
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	60fb      	str	r3, [r7, #12]
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	687a      	ldr	r2, [r7, #4]
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d8f7      	bhi.n	8009aa6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	68ba      	ldr	r2, [r7, #8]
 8009ac0:	4413      	add	r3, r2
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	d108      	bne.n	8009ada <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	685a      	ldr	r2, [r3, #4]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	441a      	add	r2, r3
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	68ba      	ldr	r2, [r7, #8]
 8009ae4:	441a      	add	r2, r3
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d118      	bne.n	8009b20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681a      	ldr	r2, [r3, #0]
 8009af2:	4b15      	ldr	r3, [pc, #84]	; (8009b48 <prvInsertBlockIntoFreeList+0xb0>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d00d      	beq.n	8009b16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	685a      	ldr	r2, [r3, #4]
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	441a      	add	r2, r3
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	681a      	ldr	r2, [r3, #0]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	601a      	str	r2, [r3, #0]
 8009b14:	e008      	b.n	8009b28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009b16:	4b0c      	ldr	r3, [pc, #48]	; (8009b48 <prvInsertBlockIntoFreeList+0xb0>)
 8009b18:	681a      	ldr	r2, [r3, #0]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	601a      	str	r2, [r3, #0]
 8009b1e:	e003      	b.n	8009b28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009b28:	68fa      	ldr	r2, [r7, #12]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d002      	beq.n	8009b36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b36:	bf00      	nop
 8009b38:	3714      	adds	r7, #20
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b40:	4770      	bx	lr
 8009b42:	bf00      	nop
 8009b44:	2000bdbc 	.word	0x2000bdbc
 8009b48:	2000bdc4 	.word	0x2000bdc4

08009b4c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	330c      	adds	r3, #12
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	6839      	ldr	r1, [r7, #0]
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f004 f9e7 	bl	800df34 <tcpip_send_msg_wait_sem>
 8009b66:	4603      	mov	r3, r0
 8009b68:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8009b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d103      	bne.n	8009b7a <netconn_apimsg+0x2e>
    return apimsg->err;
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8009b78:	e001      	b.n	8009b7e <netconn_apimsg+0x32>
  }
  return err;
 8009b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
	...

08009b88 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b08c      	sub	sp, #48	; 0x30
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	4603      	mov	r3, r0
 8009b90:	603a      	str	r2, [r7, #0]
 8009b92:	71fb      	strb	r3, [r7, #7]
 8009b94:	460b      	mov	r3, r1
 8009b96:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8009b98:	79fb      	ldrb	r3, [r7, #7]
 8009b9a:	6839      	ldr	r1, [r7, #0]
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f001 f8f5 	bl	800ad8c <netconn_alloc>
 8009ba2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8009ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d054      	beq.n	8009c54 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8009baa:	79bb      	ldrb	r3, [r7, #6]
 8009bac:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8009bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8009bb2:	f107 0308 	add.w	r3, r7, #8
 8009bb6:	4619      	mov	r1, r3
 8009bb8:	4829      	ldr	r0, [pc, #164]	; (8009c60 <netconn_new_with_proto_and_callback+0xd8>)
 8009bba:	f7ff ffc7 	bl	8009b4c <netconn_apimsg>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8009bc4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d043      	beq.n	8009c54 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8009bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d005      	beq.n	8009be0 <netconn_new_with_proto_and_callback+0x58>
 8009bd4:	4b23      	ldr	r3, [pc, #140]	; (8009c64 <netconn_new_with_proto_and_callback+0xdc>)
 8009bd6:	22a3      	movs	r2, #163	; 0xa3
 8009bd8:	4923      	ldr	r1, [pc, #140]	; (8009c68 <netconn_new_with_proto_and_callback+0xe0>)
 8009bda:	4824      	ldr	r0, [pc, #144]	; (8009c6c <netconn_new_with_proto_and_callback+0xe4>)
 8009bdc:	f01a f800 	bl	8023be0 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8009be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be2:	3310      	adds	r3, #16
 8009be4:	4618      	mov	r0, r3
 8009be6:	f011 fc8b 	bl	801b500 <sys_mbox_valid>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d105      	bne.n	8009bfc <netconn_new_with_proto_and_callback+0x74>
 8009bf0:	4b1c      	ldr	r3, [pc, #112]	; (8009c64 <netconn_new_with_proto_and_callback+0xdc>)
 8009bf2:	22a4      	movs	r2, #164	; 0xa4
 8009bf4:	491e      	ldr	r1, [pc, #120]	; (8009c70 <netconn_new_with_proto_and_callback+0xe8>)
 8009bf6:	481d      	ldr	r0, [pc, #116]	; (8009c6c <netconn_new_with_proto_and_callback+0xe4>)
 8009bf8:	f019 fff2 	bl	8023be0 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8009bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bfe:	3314      	adds	r3, #20
 8009c00:	4618      	mov	r0, r3
 8009c02:	f011 fc7d 	bl	801b500 <sys_mbox_valid>
 8009c06:	4603      	mov	r3, r0
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d005      	beq.n	8009c18 <netconn_new_with_proto_and_callback+0x90>
 8009c0c:	4b15      	ldr	r3, [pc, #84]	; (8009c64 <netconn_new_with_proto_and_callback+0xdc>)
 8009c0e:	22a6      	movs	r2, #166	; 0xa6
 8009c10:	4918      	ldr	r1, [pc, #96]	; (8009c74 <netconn_new_with_proto_and_callback+0xec>)
 8009c12:	4816      	ldr	r0, [pc, #88]	; (8009c6c <netconn_new_with_proto_and_callback+0xe4>)
 8009c14:	f019 ffe4 	bl	8023be0 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8009c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c1a:	330c      	adds	r3, #12
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f011 fcfd 	bl	801b61c <sys_sem_valid>
 8009c22:	4603      	mov	r3, r0
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d105      	bne.n	8009c34 <netconn_new_with_proto_and_callback+0xac>
 8009c28:	4b0e      	ldr	r3, [pc, #56]	; (8009c64 <netconn_new_with_proto_and_callback+0xdc>)
 8009c2a:	22a9      	movs	r2, #169	; 0xa9
 8009c2c:	4912      	ldr	r1, [pc, #72]	; (8009c78 <netconn_new_with_proto_and_callback+0xf0>)
 8009c2e:	480f      	ldr	r0, [pc, #60]	; (8009c6c <netconn_new_with_proto_and_callback+0xe4>)
 8009c30:	f019 ffd6 	bl	8023be0 <iprintf>
      sys_sem_free(&conn->op_completed);
 8009c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c36:	330c      	adds	r3, #12
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f011 fce2 	bl	801b602 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8009c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c40:	3310      	adds	r3, #16
 8009c42:	4618      	mov	r0, r3
 8009c44:	f011 fbe8 	bl	801b418 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8009c48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c4a:	2007      	movs	r0, #7
 8009c4c:	f005 fefc 	bl	800fa48 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8009c50:	2300      	movs	r3, #0
 8009c52:	e000      	b.n	8009c56 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8009c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3730      	adds	r7, #48	; 0x30
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
 8009c5e:	bf00      	nop
 8009c60:	0800ad61 	.word	0x0800ad61
 8009c64:	08025328 	.word	0x08025328
 8009c68:	0802535c 	.word	0x0802535c
 8009c6c:	08025380 	.word	0x08025380
 8009c70:	080253a8 	.word	0x080253a8
 8009c74:	080253c0 	.word	0x080253c0
 8009c78:	080253e4 	.word	0x080253e4

08009c7c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b08c      	sub	sp, #48	; 0x30
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d101      	bne.n	8009c8e <netconn_prepare_delete+0x12>
    return ERR_OK;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	e014      	b.n	8009cb8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009c92:	2329      	movs	r3, #41	; 0x29
 8009c94:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8009c96:	f107 030c 	add.w	r3, r7, #12
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	4808      	ldr	r0, [pc, #32]	; (8009cc0 <netconn_prepare_delete+0x44>)
 8009c9e:	f7ff ff55 	bl	8009b4c <netconn_apimsg>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8009ca8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d002      	beq.n	8009cb6 <netconn_prepare_delete+0x3a>
    return err;
 8009cb0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009cb4:	e000      	b.n	8009cb8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8009cb6:	2300      	movs	r3, #0
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3730      	adds	r7, #48	; 0x30
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}
 8009cc0:	0800b2cd 	.word	0x0800b2cd

08009cc4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b084      	sub	sp, #16
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d101      	bne.n	8009cd6 <netconn_delete+0x12>
    return ERR_OK;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	e00d      	b.n	8009cf2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f7ff ffd0 	bl	8009c7c <netconn_prepare_delete>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8009ce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d102      	bne.n	8009cee <netconn_delete+0x2a>
    netconn_free(conn);
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f001 f8bd 	bl	800ae68 <netconn_free>
  }
  return err;
 8009cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3710      	adds	r7, #16
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
	...

08009cfc <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b08e      	sub	sp, #56	; 0x38
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	607a      	str	r2, [r7, #4]
 8009d08:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d109      	bne.n	8009d24 <netconn_getaddr+0x28>
 8009d10:	4b1d      	ldr	r3, [pc, #116]	; (8009d88 <netconn_getaddr+0x8c>)
 8009d12:	f44f 7289 	mov.w	r2, #274	; 0x112
 8009d16:	491d      	ldr	r1, [pc, #116]	; (8009d8c <netconn_getaddr+0x90>)
 8009d18:	481d      	ldr	r0, [pc, #116]	; (8009d90 <netconn_getaddr+0x94>)
 8009d1a:	f019 ff61 	bl	8023be0 <iprintf>
 8009d1e:	f06f 030f 	mvn.w	r3, #15
 8009d22:	e02d      	b.n	8009d80 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d109      	bne.n	8009d3e <netconn_getaddr+0x42>
 8009d2a:	4b17      	ldr	r3, [pc, #92]	; (8009d88 <netconn_getaddr+0x8c>)
 8009d2c:	f240 1213 	movw	r2, #275	; 0x113
 8009d30:	4918      	ldr	r1, [pc, #96]	; (8009d94 <netconn_getaddr+0x98>)
 8009d32:	4817      	ldr	r0, [pc, #92]	; (8009d90 <netconn_getaddr+0x94>)
 8009d34:	f019 ff54 	bl	8023be0 <iprintf>
 8009d38:	f06f 030f 	mvn.w	r3, #15
 8009d3c:	e020      	b.n	8009d80 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d109      	bne.n	8009d58 <netconn_getaddr+0x5c>
 8009d44:	4b10      	ldr	r3, [pc, #64]	; (8009d88 <netconn_getaddr+0x8c>)
 8009d46:	f44f 728a 	mov.w	r2, #276	; 0x114
 8009d4a:	4913      	ldr	r1, [pc, #76]	; (8009d98 <netconn_getaddr+0x9c>)
 8009d4c:	4810      	ldr	r0, [pc, #64]	; (8009d90 <netconn_getaddr+0x94>)
 8009d4e:	f019 ff47 	bl	8023be0 <iprintf>
 8009d52:	f06f 030f 	mvn.w	r3, #15
 8009d56:	e013      	b.n	8009d80 <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 8009d5c:	78fb      	ldrb	r3, [r7, #3]
 8009d5e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 8009d6a:	f107 0314 	add.w	r3, r7, #20
 8009d6e:	4619      	mov	r1, r3
 8009d70:	480a      	ldr	r0, [pc, #40]	; (8009d9c <netconn_getaddr+0xa0>)
 8009d72:	f7ff feeb 	bl	8009b4c <netconn_apimsg>
 8009d76:	4603      	mov	r3, r0
 8009d78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 8009d7c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3738      	adds	r7, #56	; 0x38
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}
 8009d88:	08025328 	.word	0x08025328
 8009d8c:	08025400 	.word	0x08025400
 8009d90:	08025380 	.word	0x08025380
 8009d94:	08025420 	.word	0x08025420
 8009d98:	08025440 	.word	0x08025440
 8009d9c:	0800bd21 	.word	0x0800bd21

08009da0 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b08e      	sub	sp, #56	; 0x38
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	60f8      	str	r0, [r7, #12]
 8009da8:	60b9      	str	r1, [r7, #8]
 8009daa:	4613      	mov	r3, r2
 8009dac:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d109      	bne.n	8009dc8 <netconn_connect+0x28>
 8009db4:	4b11      	ldr	r3, [pc, #68]	; (8009dfc <netconn_connect+0x5c>)
 8009db6:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8009dba:	4911      	ldr	r1, [pc, #68]	; (8009e00 <netconn_connect+0x60>)
 8009dbc:	4811      	ldr	r0, [pc, #68]	; (8009e04 <netconn_connect+0x64>)
 8009dbe:	f019 ff0f 	bl	8023be0 <iprintf>
 8009dc2:	f06f 030f 	mvn.w	r3, #15
 8009dc6:	e015      	b.n	8009df4 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d101      	bne.n	8009dd2 <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 8009dce:	4b0e      	ldr	r3, [pc, #56]	; (8009e08 <netconn_connect+0x68>)
 8009dd0:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8009dda:	88fb      	ldrh	r3, [r7, #6]
 8009ddc:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8009dde:	f107 0314 	add.w	r3, r7, #20
 8009de2:	4619      	mov	r1, r3
 8009de4:	4809      	ldr	r0, [pc, #36]	; (8009e0c <netconn_connect+0x6c>)
 8009de6:	f7ff feb1 	bl	8009b4c <netconn_apimsg>
 8009dea:	4603      	mov	r3, r0
 8009dec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8009df0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3738      	adds	r7, #56	; 0x38
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}
 8009dfc:	08025328 	.word	0x08025328
 8009e00:	0802549c 	.word	0x0802549c
 8009e04:	08025380 	.word	0x08025380
 8009e08:	08029344 	.word	0x08029344
 8009e0c:	0800b5b5 	.word	0x0800b5b5

08009e10 <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b08c      	sub	sp, #48	; 0x30
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d109      	bne.n	8009e32 <netconn_disconnect+0x22>
 8009e1e:	4b0d      	ldr	r3, [pc, #52]	; (8009e54 <netconn_disconnect+0x44>)
 8009e20:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8009e24:	490c      	ldr	r1, [pc, #48]	; (8009e58 <netconn_disconnect+0x48>)
 8009e26:	480d      	ldr	r0, [pc, #52]	; (8009e5c <netconn_disconnect+0x4c>)
 8009e28:	f019 feda 	bl	8023be0 <iprintf>
 8009e2c:	f06f 030f 	mvn.w	r3, #15
 8009e30:	e00c      	b.n	8009e4c <netconn_disconnect+0x3c>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	60fb      	str	r3, [r7, #12]
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 8009e36:	f107 030c 	add.w	r3, r7, #12
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	4808      	ldr	r0, [pc, #32]	; (8009e60 <netconn_disconnect+0x50>)
 8009e3e:	f7ff fe85 	bl	8009b4c <netconn_apimsg>
 8009e42:	4603      	mov	r3, r0
 8009e44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009e48:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3730      	adds	r7, #48	; 0x30
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}
 8009e54:	08025328 	.word	0x08025328
 8009e58:	080254bc 	.word	0x080254bc
 8009e5c:	08025380 	.word	0x08025380
 8009e60:	0800b731 	.word	0x0800b731

08009e64 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b088      	sub	sp, #32
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	60f8      	str	r0, [r7, #12]
 8009e6c:	60b9      	str	r1, [r7, #8]
 8009e6e:	4613      	mov	r3, r2
 8009e70:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8009e72:	2300      	movs	r3, #0
 8009e74:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d109      	bne.n	8009e90 <netconn_recv_data+0x2c>
 8009e7c:	4b58      	ldr	r3, [pc, #352]	; (8009fe0 <netconn_recv_data+0x17c>)
 8009e7e:	f44f 7212 	mov.w	r2, #584	; 0x248
 8009e82:	4958      	ldr	r1, [pc, #352]	; (8009fe4 <netconn_recv_data+0x180>)
 8009e84:	4858      	ldr	r0, [pc, #352]	; (8009fe8 <netconn_recv_data+0x184>)
 8009e86:	f019 feab 	bl	8023be0 <iprintf>
 8009e8a:	f06f 030f 	mvn.w	r3, #15
 8009e8e:	e0a2      	b.n	8009fd6 <netconn_recv_data+0x172>
  *new_buf = NULL;
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	2200      	movs	r2, #0
 8009e94:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d109      	bne.n	8009eb0 <netconn_recv_data+0x4c>
 8009e9c:	4b50      	ldr	r3, [pc, #320]	; (8009fe0 <netconn_recv_data+0x17c>)
 8009e9e:	f240 224a 	movw	r2, #586	; 0x24a
 8009ea2:	4952      	ldr	r1, [pc, #328]	; (8009fec <netconn_recv_data+0x188>)
 8009ea4:	4850      	ldr	r0, [pc, #320]	; (8009fe8 <netconn_recv_data+0x184>)
 8009ea6:	f019 fe9b 	bl	8023be0 <iprintf>
 8009eaa:	f06f 030f 	mvn.w	r3, #15
 8009eae:	e092      	b.n	8009fd6 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	3310      	adds	r3, #16
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f011 fb23 	bl	801b500 <sys_mbox_valid>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d10e      	bne.n	8009ede <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8009ec0:	68f8      	ldr	r0, [r7, #12]
 8009ec2:	f000 fb01 	bl	800a4c8 <netconn_err>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8009eca:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d002      	beq.n	8009ed8 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8009ed2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8009ed6:	e07e      	b.n	8009fd6 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8009ed8:	f06f 030a 	mvn.w	r3, #10
 8009edc:	e07b      	b.n	8009fd6 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	7f1b      	ldrb	r3, [r3, #28]
 8009ee2:	f003 0302 	and.w	r3, r3, #2
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d10f      	bne.n	8009f0a <netconn_recv_data+0xa6>
 8009eea:	79fb      	ldrb	r3, [r7, #7]
 8009eec:	f003 0304 	and.w	r3, r3, #4
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d10a      	bne.n	8009f0a <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	7f1b      	ldrb	r3, [r3, #28]
 8009ef8:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d104      	bne.n	8009f0a <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d023      	beq.n	8009f52 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	3310      	adds	r3, #16
 8009f0e:	f107 0218 	add.w	r2, r7, #24
 8009f12:	4611      	mov	r1, r2
 8009f14:	4618      	mov	r0, r3
 8009f16:	f011 fadc 	bl	801b4d2 <sys_arch_mbox_tryfetch>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f20:	d11f      	bne.n	8009f62 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8009f22:	68f8      	ldr	r0, [r7, #12]
 8009f24:	f000 fad0 	bl	800a4c8 <netconn_err>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8009f2c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d002      	beq.n	8009f3a <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8009f34:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009f38:	e04d      	b.n	8009fd6 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	7f1b      	ldrb	r3, [r3, #28]
 8009f3e:	f003 0301 	and.w	r3, r3, #1
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d002      	beq.n	8009f4c <netconn_recv_data+0xe8>
        return ERR_CONN;
 8009f46:	f06f 030a 	mvn.w	r3, #10
 8009f4a:	e044      	b.n	8009fd6 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8009f4c:	f06f 0306 	mvn.w	r3, #6
 8009f50:	e041      	b.n	8009fd6 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	3310      	adds	r3, #16
 8009f56:	f107 0118 	add.w	r1, r7, #24
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f011 fa87 	bl	801b470 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f6a:	2b10      	cmp	r3, #16
 8009f6c:	d117      	bne.n	8009f9e <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8009f6e:	69bb      	ldr	r3, [r7, #24]
 8009f70:	f107 0217 	add.w	r2, r7, #23
 8009f74:	4611      	mov	r1, r2
 8009f76:	4618      	mov	r0, r3
 8009f78:	f000 fb94 	bl	800a6a4 <lwip_netconn_is_err_msg>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d009      	beq.n	8009f96 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8009f82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f86:	f113 0f0f 	cmn.w	r3, #15
 8009f8a:	d101      	bne.n	8009f90 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	e022      	b.n	8009fd6 <netconn_recv_data+0x172>
      }
      return err;
 8009f90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f94:	e01f      	b.n	8009fd6 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8009f96:	69bb      	ldr	r3, [r7, #24]
 8009f98:	891b      	ldrh	r3, [r3, #8]
 8009f9a:	83fb      	strh	r3, [r7, #30]
 8009f9c:	e00d      	b.n	8009fba <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8009f9e:	69bb      	ldr	r3, [r7, #24]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d106      	bne.n	8009fb2 <netconn_recv_data+0x14e>
 8009fa4:	4b0e      	ldr	r3, [pc, #56]	; (8009fe0 <netconn_recv_data+0x17c>)
 8009fa6:	f240 2291 	movw	r2, #657	; 0x291
 8009faa:	4911      	ldr	r1, [pc, #68]	; (8009ff0 <netconn_recv_data+0x18c>)
 8009fac:	480e      	ldr	r0, [pc, #56]	; (8009fe8 <netconn_recv_data+0x184>)
 8009fae:	f019 fe17 	bl	8023be0 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8009fb2:	69bb      	ldr	r3, [r7, #24]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	891b      	ldrh	r3, [r3, #8]
 8009fb8:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d005      	beq.n	8009fce <netconn_recv_data+0x16a>
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc6:	8bfa      	ldrh	r2, [r7, #30]
 8009fc8:	2101      	movs	r1, #1
 8009fca:	68f8      	ldr	r0, [r7, #12]
 8009fcc:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8009fce:	69ba      	ldr	r2, [r7, #24]
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8009fd4:	2300      	movs	r3, #0
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3720      	adds	r7, #32
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}
 8009fde:	bf00      	nop
 8009fe0:	08025328 	.word	0x08025328
 8009fe4:	08025540 	.word	0x08025540
 8009fe8:	08025380 	.word	0x08025380
 8009fec:	08025560 	.word	0x08025560
 8009ff0:	0802557c 	.word	0x0802557c

08009ff4 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b084      	sub	sp, #16
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	60f8      	str	r0, [r7, #12]
 8009ffc:	60b9      	str	r1, [r7, #8]
 8009ffe:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d005      	beq.n	800a012 <netconn_tcp_recvd_msg+0x1e>
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	781b      	ldrb	r3, [r3, #0]
 800a00a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a00e:	2b10      	cmp	r3, #16
 800a010:	d009      	beq.n	800a026 <netconn_tcp_recvd_msg+0x32>
 800a012:	4b0c      	ldr	r3, [pc, #48]	; (800a044 <netconn_tcp_recvd_msg+0x50>)
 800a014:	f240 22a7 	movw	r2, #679	; 0x2a7
 800a018:	490b      	ldr	r1, [pc, #44]	; (800a048 <netconn_tcp_recvd_msg+0x54>)
 800a01a:	480c      	ldr	r0, [pc, #48]	; (800a04c <netconn_tcp_recvd_msg+0x58>)
 800a01c:	f019 fde0 	bl	8023be0 <iprintf>
 800a020:	f06f 030f 	mvn.w	r3, #15
 800a024:	e00a      	b.n	800a03c <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	68fa      	ldr	r2, [r7, #12]
 800a02a:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	68ba      	ldr	r2, [r7, #8]
 800a030:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800a032:	6879      	ldr	r1, [r7, #4]
 800a034:	4806      	ldr	r0, [pc, #24]	; (800a050 <netconn_tcp_recvd_msg+0x5c>)
 800a036:	f7ff fd89 	bl	8009b4c <netconn_apimsg>
 800a03a:	4603      	mov	r3, r0
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3710      	adds	r7, #16
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}
 800a044:	08025328 	.word	0x08025328
 800a048:	08025588 	.word	0x08025588
 800a04c:	08025380 	.word	0x08025380
 800a050:	0800b807 	.word	0x0800b807

0800a054 <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b08c      	sub	sp, #48	; 0x30
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d005      	beq.n	800a070 <netconn_tcp_recvd+0x1c>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a06c:	2b10      	cmp	r3, #16
 800a06e:	d009      	beq.n	800a084 <netconn_tcp_recvd+0x30>
 800a070:	4b0c      	ldr	r3, [pc, #48]	; (800a0a4 <netconn_tcp_recvd+0x50>)
 800a072:	f240 22b5 	movw	r2, #693	; 0x2b5
 800a076:	490c      	ldr	r1, [pc, #48]	; (800a0a8 <netconn_tcp_recvd+0x54>)
 800a078:	480c      	ldr	r0, [pc, #48]	; (800a0ac <netconn_tcp_recvd+0x58>)
 800a07a:	f019 fdb1 	bl	8023be0 <iprintf>
 800a07e:	f06f 030f 	mvn.w	r3, #15
 800a082:	e00b      	b.n	800a09c <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 800a084:	f107 030c 	add.w	r3, r7, #12
 800a088:	461a      	mov	r2, r3
 800a08a:	6839      	ldr	r1, [r7, #0]
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f7ff ffb1 	bl	8009ff4 <netconn_tcp_recvd_msg>
 800a092:	4603      	mov	r3, r0
 800a094:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 800a098:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3730      	adds	r7, #48	; 0x30
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}
 800a0a4:	08025328 	.word	0x08025328
 800a0a8:	08025588 	.word	0x08025588
 800a0ac:	08025380 	.word	0x08025380

0800a0b0 <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b090      	sub	sp, #64	; 0x40
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	60f8      	str	r0, [r7, #12]
 800a0b8:	60b9      	str	r1, [r7, #8]
 800a0ba:	4613      	mov	r3, r2
 800a0bc:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	3310      	adds	r3, #16
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f011 fa1c 	bl	801b500 <sys_mbox_valid>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d102      	bne.n	800a0d4 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800a0ce:	f06f 030a 	mvn.w	r3, #10
 800a0d2:	e06d      	b.n	800a1b0 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	7f1b      	ldrb	r3, [r3, #28]
 800a0d8:	b25b      	sxtb	r3, r3
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	da07      	bge.n	800a0ee <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	7f1b      	ldrb	r3, [r3, #28]
 800a0e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0e6:	b2da      	uxtb	r2, r3
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800a0ec:	e039      	b.n	800a162 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800a0ee:	79fb      	ldrb	r3, [r7, #7]
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	68b9      	ldr	r1, [r7, #8]
 800a0f4:	68f8      	ldr	r0, [r7, #12]
 800a0f6:	f7ff feb5 	bl	8009e64 <netconn_recv_data>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800a100:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a104:	2b00      	cmp	r3, #0
 800a106:	d002      	beq.n	800a10e <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800a108:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a10c:	e050      	b.n	800a1b0 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800a114:	79fb      	ldrb	r3, [r7, #7]
 800a116:	f003 0308 	and.w	r3, r3, #8
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d10e      	bne.n	800a13c <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800a11e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a120:	2b00      	cmp	r3, #0
 800a122:	d002      	beq.n	800a12a <netconn_recv_data_tcp+0x7a>
 800a124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a126:	891b      	ldrh	r3, [r3, #8]
 800a128:	e000      	b.n	800a12c <netconn_recv_data_tcp+0x7c>
 800a12a:	2301      	movs	r3, #1
 800a12c:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800a12e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a130:	f107 0214 	add.w	r2, r7, #20
 800a134:	4619      	mov	r1, r3
 800a136:	68f8      	ldr	r0, [r7, #12]
 800a138:	f7ff ff5c 	bl	8009ff4 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800a13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d134      	bne.n	800a1ac <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800a142:	79fb      	ldrb	r3, [r7, #7]
 800a144:	f003 0310 	and.w	r3, r3, #16
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d009      	beq.n	800a160 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	7f1b      	ldrb	r3, [r3, #28]
 800a150:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a154:	b2da      	uxtb	r2, r3
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800a15a:	f06f 0306 	mvn.w	r3, #6
 800a15e:	e027      	b.n	800a1b0 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800a160:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a166:	2b00      	cmp	r3, #0
 800a168:	d005      	beq.n	800a176 <netconn_recv_data_tcp+0xc6>
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a16e:	2200      	movs	r2, #0
 800a170:	2101      	movs	r1, #1
 800a172:	68f8      	ldr	r0, [r7, #12]
 800a174:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d10f      	bne.n	800a19e <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800a17e:	68f8      	ldr	r0, [r7, #12]
 800a180:	f000 f9a2 	bl	800a4c8 <netconn_err>
 800a184:	4603      	mov	r3, r0
 800a186:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800a18a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d002      	beq.n	800a198 <netconn_recv_data_tcp+0xe8>
          return err;
 800a192:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a196:	e00b      	b.n	800a1b0 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800a198:	f06f 030d 	mvn.w	r3, #13
 800a19c:	e008      	b.n	800a1b0 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800a19e:	2101      	movs	r1, #1
 800a1a0:	68f8      	ldr	r0, [r7, #12]
 800a1a2:	f000 f961 	bl	800a468 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800a1a6:	f06f 030e 	mvn.w	r3, #14
 800a1aa:	e001      	b.n	800a1b0 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800a1ac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3740      	adds	r7, #64	; 0x40
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	60f8      	str	r0, [r7, #12]
 800a1c0:	60b9      	str	r1, [r7, #8]
 800a1c2:	4613      	mov	r3, r2
 800a1c4:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d005      	beq.n	800a1d8 <netconn_recv_tcp_pbuf_flags+0x20>
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a1d4:	2b10      	cmp	r3, #16
 800a1d6:	d009      	beq.n	800a1ec <netconn_recv_tcp_pbuf_flags+0x34>
 800a1d8:	4b0a      	ldr	r3, [pc, #40]	; (800a204 <netconn_recv_tcp_pbuf_flags+0x4c>)
 800a1da:	f240 3225 	movw	r2, #805	; 0x325
 800a1de:	490a      	ldr	r1, [pc, #40]	; (800a208 <netconn_recv_tcp_pbuf_flags+0x50>)
 800a1e0:	480a      	ldr	r0, [pc, #40]	; (800a20c <netconn_recv_tcp_pbuf_flags+0x54>)
 800a1e2:	f019 fcfd 	bl	8023be0 <iprintf>
 800a1e6:	f06f 030f 	mvn.w	r3, #15
 800a1ea:	e006      	b.n	800a1fa <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 800a1ec:	79fb      	ldrb	r3, [r7, #7]
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	68b9      	ldr	r1, [r7, #8]
 800a1f2:	68f8      	ldr	r0, [r7, #12]
 800a1f4:	f7ff ff5c 	bl	800a0b0 <netconn_recv_data_tcp>
 800a1f8:	4603      	mov	r3, r0
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3710      	adds	r7, #16
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
 800a202:	bf00      	nop
 800a204:	08025328 	.word	0x08025328
 800a208:	08025588 	.word	0x08025588
 800a20c:	08025380 	.word	0x08025380

0800a210 <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	60f8      	str	r0, [r7, #12]
 800a218:	60b9      	str	r1, [r7, #8]
 800a21a:	4613      	mov	r3, r2
 800a21c:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d005      	beq.n	800a230 <netconn_recv_udp_raw_netbuf_flags+0x20>
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a22c:	2b10      	cmp	r3, #16
 800a22e:	d109      	bne.n	800a244 <netconn_recv_udp_raw_netbuf_flags+0x34>
 800a230:	4b0a      	ldr	r3, [pc, #40]	; (800a25c <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 800a232:	f44f 7253 	mov.w	r2, #844	; 0x34c
 800a236:	490a      	ldr	r1, [pc, #40]	; (800a260 <netconn_recv_udp_raw_netbuf_flags+0x50>)
 800a238:	480a      	ldr	r0, [pc, #40]	; (800a264 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 800a23a:	f019 fcd1 	bl	8023be0 <iprintf>
 800a23e:	f06f 030f 	mvn.w	r3, #15
 800a242:	e006      	b.n	800a252 <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 800a244:	79fb      	ldrb	r3, [r7, #7]
 800a246:	461a      	mov	r2, r3
 800a248:	68b9      	ldr	r1, [r7, #8]
 800a24a:	68f8      	ldr	r0, [r7, #12]
 800a24c:	f7ff fe0a 	bl	8009e64 <netconn_recv_data>
 800a250:	4603      	mov	r3, r0
}
 800a252:	4618      	mov	r0, r3
 800a254:	3710      	adds	r7, #16
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
 800a25a:	bf00      	nop
 800a25c:	08025328 	.word	0x08025328
 800a260:	080255ac 	.word	0x080255ac
 800a264:	08025380 	.word	0x08025380

0800a268 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b08c      	sub	sp, #48	; 0x30
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d109      	bne.n	800a28c <netconn_send+0x24>
 800a278:	4b0e      	ldr	r3, [pc, #56]	; (800a2b4 <netconn_send+0x4c>)
 800a27a:	f240 32b2 	movw	r2, #946	; 0x3b2
 800a27e:	490e      	ldr	r1, [pc, #56]	; (800a2b8 <netconn_send+0x50>)
 800a280:	480e      	ldr	r0, [pc, #56]	; (800a2bc <netconn_send+0x54>)
 800a282:	f019 fcad 	bl	8023be0 <iprintf>
 800a286:	f06f 030f 	mvn.w	r3, #15
 800a28a:	e00e      	b.n	800a2aa <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800a294:	f107 030c 	add.w	r3, r7, #12
 800a298:	4619      	mov	r1, r3
 800a29a:	4809      	ldr	r0, [pc, #36]	; (800a2c0 <netconn_send+0x58>)
 800a29c:	f7ff fc56 	bl	8009b4c <netconn_apimsg>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800a2a6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3730      	adds	r7, #48	; 0x30
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	bf00      	nop
 800a2b4:	08025328 	.word	0x08025328
 800a2b8:	080255e4 	.word	0x080255e4
 800a2bc:	08025380 	.word	0x08025380
 800a2c0:	0800b76d 	.word	0x0800b76d

0800a2c4 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b088      	sub	sp, #32
 800a2c8:	af02      	add	r7, sp, #8
 800a2ca:	60f8      	str	r0, [r7, #12]
 800a2cc:	60b9      	str	r1, [r7, #8]
 800a2ce:	607a      	str	r2, [r7, #4]
 800a2d0:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800a2da:	78fa      	ldrb	r2, [r7, #3]
 800a2dc:	f107 0110 	add.w	r1, r7, #16
 800a2e0:	6a3b      	ldr	r3, [r7, #32]
 800a2e2:	9300      	str	r3, [sp, #0]
 800a2e4:	4613      	mov	r3, r2
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	68f8      	ldr	r0, [r7, #12]
 800a2ea:	f000 f805 	bl	800a2f8 <netconn_write_vectors_partly>
 800a2ee:	4603      	mov	r3, r0
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3718      	adds	r7, #24
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b092      	sub	sp, #72	; 0x48
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	60f8      	str	r0, [r7, #12]
 800a300:	60b9      	str	r1, [r7, #8]
 800a302:	4611      	mov	r1, r2
 800a304:	461a      	mov	r2, r3
 800a306:	460b      	mov	r3, r1
 800a308:	80fb      	strh	r3, [r7, #6]
 800a30a:	4613      	mov	r3, r2
 800a30c:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d109      	bne.n	800a328 <netconn_write_vectors_partly+0x30>
 800a314:	4b4e      	ldr	r3, [pc, #312]	; (800a450 <netconn_write_vectors_partly+0x158>)
 800a316:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800a31a:	494e      	ldr	r1, [pc, #312]	; (800a454 <netconn_write_vectors_partly+0x15c>)
 800a31c:	484e      	ldr	r0, [pc, #312]	; (800a458 <netconn_write_vectors_partly+0x160>)
 800a31e:	f019 fc5f 	bl	8023be0 <iprintf>
 800a322:	f06f 030f 	mvn.w	r3, #15
 800a326:	e08e      	b.n	800a446 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a330:	2b10      	cmp	r3, #16
 800a332:	d009      	beq.n	800a348 <netconn_write_vectors_partly+0x50>
 800a334:	4b46      	ldr	r3, [pc, #280]	; (800a450 <netconn_write_vectors_partly+0x158>)
 800a336:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800a33a:	4948      	ldr	r1, [pc, #288]	; (800a45c <netconn_write_vectors_partly+0x164>)
 800a33c:	4846      	ldr	r0, [pc, #280]	; (800a458 <netconn_write_vectors_partly+0x160>)
 800a33e:	f019 fc4f 	bl	8023be0 <iprintf>
 800a342:	f06f 0305 	mvn.w	r3, #5
 800a346:	e07e      	b.n	800a446 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	7f1b      	ldrb	r3, [r3, #28]
 800a34c:	f003 0302 	and.w	r3, r3, #2
 800a350:	2b00      	cmp	r3, #0
 800a352:	d104      	bne.n	800a35e <netconn_write_vectors_partly+0x66>
 800a354:	797b      	ldrb	r3, [r7, #5]
 800a356:	f003 0304 	and.w	r3, r3, #4
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d001      	beq.n	800a362 <netconn_write_vectors_partly+0x6a>
 800a35e:	2301      	movs	r3, #1
 800a360:	e000      	b.n	800a364 <netconn_write_vectors_partly+0x6c>
 800a362:	2300      	movs	r3, #0
 800a364:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800a368:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d005      	beq.n	800a37c <netconn_write_vectors_partly+0x84>
 800a370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a372:	2b00      	cmp	r3, #0
 800a374:	d102      	bne.n	800a37c <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800a376:	f06f 0305 	mvn.w	r3, #5
 800a37a:	e064      	b.n	800a446 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800a37c:	2300      	movs	r3, #0
 800a37e:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800a380:	2300      	movs	r3, #0
 800a382:	643b      	str	r3, [r7, #64]	; 0x40
 800a384:	e015      	b.n	800a3b2 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800a386:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a388:	00db      	lsls	r3, r3, #3
 800a38a:	68ba      	ldr	r2, [r7, #8]
 800a38c:	4413      	add	r3, r2
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a392:	4413      	add	r3, r2
 800a394:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800a396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a398:	00db      	lsls	r3, r3, #3
 800a39a:	68ba      	ldr	r2, [r7, #8]
 800a39c:	4413      	add	r3, r2
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d202      	bcs.n	800a3ac <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800a3a6:	f06f 0305 	mvn.w	r3, #5
 800a3aa:	e04c      	b.n	800a446 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800a3ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	643b      	str	r3, [r7, #64]	; 0x40
 800a3b2:	88fb      	ldrh	r3, [r7, #6]
 800a3b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	dbe5      	blt.n	800a386 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800a3ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d101      	bne.n	800a3c4 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	e040      	b.n	800a446 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800a3c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	da0a      	bge.n	800a3e0 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800a3ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d102      	bne.n	800a3d6 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800a3d0:	f06f 0305 	mvn.w	r3, #5
 800a3d4:	e037      	b.n	800a446 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800a3d6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a3da:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800a3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3de:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800a3e8:	88fb      	ldrh	r3, [r7, #6]
 800a3ea:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800a3f0:	797b      	ldrb	r3, [r7, #5]
 800a3f2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800a3f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3f8:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800a3fe:	f107 0314 	add.w	r3, r7, #20
 800a402:	4619      	mov	r1, r3
 800a404:	4816      	ldr	r0, [pc, #88]	; (800a460 <netconn_write_vectors_partly+0x168>)
 800a406:	f7ff fba1 	bl	8009b4c <netconn_apimsg>
 800a40a:	4603      	mov	r3, r0
 800a40c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800a410:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800a414:	2b00      	cmp	r3, #0
 800a416:	d114      	bne.n	800a442 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800a418:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d002      	beq.n	800a424 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800a41e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a422:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800a424:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d10a      	bne.n	800a442 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800a42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a42e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a430:	429a      	cmp	r2, r3
 800a432:	d006      	beq.n	800a442 <netconn_write_vectors_partly+0x14a>
 800a434:	4b06      	ldr	r3, [pc, #24]	; (800a450 <netconn_write_vectors_partly+0x158>)
 800a436:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a43a:	490a      	ldr	r1, [pc, #40]	; (800a464 <netconn_write_vectors_partly+0x16c>)
 800a43c:	4806      	ldr	r0, [pc, #24]	; (800a458 <netconn_write_vectors_partly+0x160>)
 800a43e:	f019 fbcf 	bl	8023be0 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800a442:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800a446:	4618      	mov	r0, r3
 800a448:	3748      	adds	r7, #72	; 0x48
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}
 800a44e:	bf00      	nop
 800a450:	08025328 	.word	0x08025328
 800a454:	08025600 	.word	0x08025600
 800a458:	08025380 	.word	0x08025380
 800a45c:	0802561c 	.word	0x0802561c
 800a460:	0800bc09 	.word	0x0800bc09
 800a464:	08025640 	.word	0x08025640

0800a468 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b08c      	sub	sp, #48	; 0x30
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	460b      	mov	r3, r1
 800a472:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d109      	bne.n	800a48e <netconn_close_shutdown+0x26>
 800a47a:	4b0f      	ldr	r3, [pc, #60]	; (800a4b8 <netconn_close_shutdown+0x50>)
 800a47c:	f240 4247 	movw	r2, #1095	; 0x447
 800a480:	490e      	ldr	r1, [pc, #56]	; (800a4bc <netconn_close_shutdown+0x54>)
 800a482:	480f      	ldr	r0, [pc, #60]	; (800a4c0 <netconn_close_shutdown+0x58>)
 800a484:	f019 fbac 	bl	8023be0 <iprintf>
 800a488:	f06f 030f 	mvn.w	r3, #15
 800a48c:	e010      	b.n	800a4b0 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800a492:	78fb      	ldrb	r3, [r7, #3]
 800a494:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800a496:	2329      	movs	r3, #41	; 0x29
 800a498:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800a49a:	f107 030c 	add.w	r3, r7, #12
 800a49e:	4619      	mov	r1, r3
 800a4a0:	4808      	ldr	r0, [pc, #32]	; (800a4c4 <netconn_close_shutdown+0x5c>)
 800a4a2:	f7ff fb53 	bl	8009b4c <netconn_apimsg>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800a4ac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3730      	adds	r7, #48	; 0x30
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}
 800a4b8:	08025328 	.word	0x08025328
 800a4bc:	08025664 	.word	0x08025664
 800a4c0:	08025380 	.word	0x08025380
 800a4c4:	0800be2d 	.word	0x0800be2d

0800a4c8 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b084      	sub	sp, #16
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d101      	bne.n	800a4da <netconn_err+0x12>
    return ERR_OK;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	e00d      	b.n	800a4f6 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800a4da:	f011 f91b 	bl	801b714 <sys_arch_protect>
 800a4de:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	7a1b      	ldrb	r3, [r3, #8]
 800a4e4:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800a4ec:	68f8      	ldr	r0, [r7, #12]
 800a4ee:	f011 f91f 	bl	801b730 <sys_arch_unprotect>
  return err;
 800a4f2:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3710      	adds	r7, #16
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
	...

0800a500 <netconn_join_leave_group>:
err_t
netconn_join_leave_group(struct netconn *conn,
                         const ip_addr_t *multiaddr,
                         const ip_addr_t *netif_addr,
                         enum netconn_igmp join_or_leave)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b08e      	sub	sp, #56	; 0x38
 800a504:	af00      	add	r7, sp, #0
 800a506:	60f8      	str	r0, [r7, #12]
 800a508:	60b9      	str	r1, [r7, #8]
 800a50a:	607a      	str	r2, [r7, #4]
 800a50c:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_join_leave_group: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d109      	bne.n	800a528 <netconn_join_leave_group+0x28>
 800a514:	4b15      	ldr	r3, [pc, #84]	; (800a56c <netconn_join_leave_group+0x6c>)
 800a516:	f240 42a5 	movw	r2, #1189	; 0x4a5
 800a51a:	4915      	ldr	r1, [pc, #84]	; (800a570 <netconn_join_leave_group+0x70>)
 800a51c:	4815      	ldr	r0, [pc, #84]	; (800a574 <netconn_join_leave_group+0x74>)
 800a51e:	f019 fb5f 	bl	8023be0 <iprintf>
 800a522:	f06f 030f 	mvn.w	r3, #15
 800a526:	e01d      	b.n	800a564 <netconn_join_leave_group+0x64>

  API_MSG_VAR_ALLOC(msg);

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (multiaddr == NULL) {
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d101      	bne.n	800a532 <netconn_join_leave_group+0x32>
    multiaddr = IP4_ADDR_ANY;
 800a52e:	4b12      	ldr	r3, [pc, #72]	; (800a578 <netconn_join_leave_group+0x78>)
 800a530:	60bb      	str	r3, [r7, #8]
  }
  if (netif_addr == NULL) {
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d101      	bne.n	800a53c <netconn_join_leave_group+0x3c>
    netif_addr = IP4_ADDR_ANY;
 800a538:	4b0f      	ldr	r3, [pc, #60]	; (800a578 <netconn_join_leave_group+0x78>)
 800a53a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_REF(msg).conn = conn;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.jl.multiaddr = API_MSG_VAR_REF(multiaddr);
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.jl.netif_addr = API_MSG_VAR_REF(netif_addr);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	623b      	str	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.jl.join_or_leave = join_or_leave;
 800a548:	78fb      	ldrb	r3, [r7, #3]
 800a54a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  err = netconn_apimsg(lwip_netconn_do_join_leave_group, &API_MSG_VAR_REF(msg));
 800a54e:	f107 0314 	add.w	r3, r7, #20
 800a552:	4619      	mov	r1, r3
 800a554:	4809      	ldr	r0, [pc, #36]	; (800a57c <netconn_join_leave_group+0x7c>)
 800a556:	f7ff faf9 	bl	8009b4c <netconn_apimsg>
 800a55a:	4603      	mov	r3, r0
 800a55c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800a560:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800a564:	4618      	mov	r0, r3
 800a566:	3738      	adds	r7, #56	; 0x38
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}
 800a56c:	08025328 	.word	0x08025328
 800a570:	08025680 	.word	0x08025680
 800a574:	08025380 	.word	0x08025380
 800a578:	08029344 	.word	0x08029344
 800a57c:	0800bf45 	.word	0x0800bf45

0800a580 <netconn_gethostbyname>:
netconn_gethostbyname_addrtype(const char *name, ip_addr_t *addr, u8_t dns_addrtype)
#else
err_t
netconn_gethostbyname(const char *name, ip_addr_t *addr)
#endif
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b08a      	sub	sp, #40	; 0x28
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	6039      	str	r1, [r7, #0]
  sys_sem_t sem;
#endif /* LWIP_MPU_COMPATIBLE */
  err_t err;
  err_t cberr;

  LWIP_ERROR("netconn_gethostbyname: invalid name", (name != NULL), return ERR_ARG;);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d109      	bne.n	800a5a4 <netconn_gethostbyname+0x24>
 800a590:	4b24      	ldr	r3, [pc, #144]	; (800a624 <netconn_gethostbyname+0xa4>)
 800a592:	f240 5204 	movw	r2, #1284	; 0x504
 800a596:	4924      	ldr	r1, [pc, #144]	; (800a628 <netconn_gethostbyname+0xa8>)
 800a598:	4824      	ldr	r0, [pc, #144]	; (800a62c <netconn_gethostbyname+0xac>)
 800a59a:	f019 fb21 	bl	8023be0 <iprintf>
 800a59e:	f06f 030f 	mvn.w	r3, #15
 800a5a2:	e03b      	b.n	800a61c <netconn_gethostbyname+0x9c>
  LWIP_ERROR("netconn_gethostbyname: invalid addr", (addr != NULL), return ERR_ARG;);
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d109      	bne.n	800a5be <netconn_gethostbyname+0x3e>
 800a5aa:	4b1e      	ldr	r3, [pc, #120]	; (800a624 <netconn_gethostbyname+0xa4>)
 800a5ac:	f240 5205 	movw	r2, #1285	; 0x505
 800a5b0:	491f      	ldr	r1, [pc, #124]	; (800a630 <netconn_gethostbyname+0xb0>)
 800a5b2:	481e      	ldr	r0, [pc, #120]	; (800a62c <netconn_gethostbyname+0xac>)
 800a5b4:	f019 fb14 	bl	8023be0 <iprintf>
 800a5b8:	f06f 030f 	mvn.w	r3, #15
 800a5bc:	e02e      	b.n	800a61c <netconn_gethostbyname+0x9c>
  API_VAR_ALLOC(struct dns_api_msg, MEMP_DNS_API_MSG, msg, ERR_MEM);
#if LWIP_MPU_COMPATIBLE
  strncpy(API_VAR_REF(msg).name, name, DNS_MAX_NAME_LENGTH - 1);
  API_VAR_REF(msg).name[DNS_MAX_NAME_LENGTH - 1] = 0;
#else /* LWIP_MPU_COMPATIBLE */
  msg.err = &err;
 800a5be:	f107 030f 	add.w	r3, r7, #15
 800a5c2:	623b      	str	r3, [r7, #32]
  msg.sem = &sem;
 800a5c4:	f107 0310 	add.w	r3, r7, #16
 800a5c8:	61fb      	str	r3, [r7, #28]
  API_VAR_REF(msg).addr = API_VAR_REF(addr);
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	61bb      	str	r3, [r7, #24]
  API_VAR_REF(msg).name = name;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	617b      	str	r3, [r7, #20]
  API_VAR_REF(msg).dns_addrtype = dns_addrtype;
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_NETCONN_SEM_PER_THREAD
  API_VAR_REF(msg).sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD*/
  err = sys_sem_new(API_EXPR_REF(API_VAR_REF(msg).sem), 0);
 800a5d2:	69fb      	ldr	r3, [r7, #28]
 800a5d4:	2100      	movs	r1, #0
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f010 ffb0 	bl	801b53c <sys_sem_new>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800a5e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d002      	beq.n	800a5ee <netconn_gethostbyname+0x6e>
    API_VAR_FREE(MEMP_DNS_API_MSG, msg);
    return err;
 800a5e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5ec:	e016      	b.n	800a61c <netconn_gethostbyname+0x9c>
  }
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  cberr = tcpip_send_msg_wait_sem(lwip_netconn_do_gethostbyname, &API_VAR_REF(msg), API_EXPR_REF(API_VAR_REF(msg).sem));
 800a5ee:	69fa      	ldr	r2, [r7, #28]
 800a5f0:	f107 0314 	add.w	r3, r7, #20
 800a5f4:	4619      	mov	r1, r3
 800a5f6:	480f      	ldr	r0, [pc, #60]	; (800a634 <netconn_gethostbyname+0xb4>)
 800a5f8:	f003 fc9c 	bl	800df34 <tcpip_send_msg_wait_sem>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(API_EXPR_REF(API_VAR_REF(msg).sem));
 800a602:	69fb      	ldr	r3, [r7, #28]
 800a604:	4618      	mov	r0, r3
 800a606:	f010 fffc 	bl	801b602 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
  if (cberr != ERR_OK) {
 800a60a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d002      	beq.n	800a618 <netconn_gethostbyname+0x98>
    API_VAR_FREE(MEMP_DNS_API_MSG, msg);
    return cberr;
 800a612:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a616:	e001      	b.n	800a61c <netconn_gethostbyname+0x9c>
  *addr = msg->addr;
  err = msg->err;
#endif /* LWIP_MPU_COMPATIBLE */

  API_VAR_FREE(MEMP_DNS_API_MSG, msg);
  return err;
 800a618:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3728      	adds	r7, #40	; 0x28
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}
 800a624:	08025328 	.word	0x08025328
 800a628:	080256a8 	.word	0x080256a8
 800a62c:	08025380 	.word	0x08025380
 800a630:	080256cc 	.word	0x080256cc
 800a634:	0800bffd 	.word	0x0800bffd

0800a638 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b082      	sub	sp, #8
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	4603      	mov	r3, r0
 800a640:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800a642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a646:	f113 0f0d 	cmn.w	r3, #13
 800a64a:	d009      	beq.n	800a660 <lwip_netconn_err_to_msg+0x28>
 800a64c:	f113 0f0d 	cmn.w	r3, #13
 800a650:	dc0c      	bgt.n	800a66c <lwip_netconn_err_to_msg+0x34>
 800a652:	f113 0f0f 	cmn.w	r3, #15
 800a656:	d007      	beq.n	800a668 <lwip_netconn_err_to_msg+0x30>
 800a658:	f113 0f0e 	cmn.w	r3, #14
 800a65c:	d002      	beq.n	800a664 <lwip_netconn_err_to_msg+0x2c>
 800a65e:	e005      	b.n	800a66c <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800a660:	4b0a      	ldr	r3, [pc, #40]	; (800a68c <lwip_netconn_err_to_msg+0x54>)
 800a662:	e00e      	b.n	800a682 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800a664:	4b0a      	ldr	r3, [pc, #40]	; (800a690 <lwip_netconn_err_to_msg+0x58>)
 800a666:	e00c      	b.n	800a682 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800a668:	4b0a      	ldr	r3, [pc, #40]	; (800a694 <lwip_netconn_err_to_msg+0x5c>)
 800a66a:	e00a      	b.n	800a682 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800a66c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d005      	beq.n	800a680 <lwip_netconn_err_to_msg+0x48>
 800a674:	4b08      	ldr	r3, [pc, #32]	; (800a698 <lwip_netconn_err_to_msg+0x60>)
 800a676:	227d      	movs	r2, #125	; 0x7d
 800a678:	4908      	ldr	r1, [pc, #32]	; (800a69c <lwip_netconn_err_to_msg+0x64>)
 800a67a:	4809      	ldr	r0, [pc, #36]	; (800a6a0 <lwip_netconn_err_to_msg+0x68>)
 800a67c:	f019 fab0 	bl	8023be0 <iprintf>
      return NULL;
 800a680:	2300      	movs	r3, #0
  }
}
 800a682:	4618      	mov	r0, r3
 800a684:	3708      	adds	r7, #8
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}
 800a68a:	bf00      	nop
 800a68c:	080291bc 	.word	0x080291bc
 800a690:	080291bd 	.word	0x080291bd
 800a694:	080291be 	.word	0x080291be
 800a698:	080256f0 	.word	0x080256f0
 800a69c:	08025724 	.word	0x08025724
 800a6a0:	08025734 	.word	0x08025734

0800a6a4 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d105      	bne.n	800a6c0 <lwip_netconn_is_err_msg+0x1c>
 800a6b4:	4b12      	ldr	r3, [pc, #72]	; (800a700 <lwip_netconn_is_err_msg+0x5c>)
 800a6b6:	2285      	movs	r2, #133	; 0x85
 800a6b8:	4912      	ldr	r1, [pc, #72]	; (800a704 <lwip_netconn_is_err_msg+0x60>)
 800a6ba:	4813      	ldr	r0, [pc, #76]	; (800a708 <lwip_netconn_is_err_msg+0x64>)
 800a6bc:	f019 fa90 	bl	8023be0 <iprintf>

  if (msg == &netconn_aborted) {
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	4a12      	ldr	r2, [pc, #72]	; (800a70c <lwip_netconn_is_err_msg+0x68>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d104      	bne.n	800a6d2 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	22f3      	movs	r2, #243	; 0xf3
 800a6cc:	701a      	strb	r2, [r3, #0]
    return 1;
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	e012      	b.n	800a6f8 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	4a0e      	ldr	r2, [pc, #56]	; (800a710 <lwip_netconn_is_err_msg+0x6c>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d104      	bne.n	800a6e4 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	22f2      	movs	r2, #242	; 0xf2
 800a6de:	701a      	strb	r2, [r3, #0]
    return 1;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	e009      	b.n	800a6f8 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	4a0b      	ldr	r2, [pc, #44]	; (800a714 <lwip_netconn_is_err_msg+0x70>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d104      	bne.n	800a6f6 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	22f1      	movs	r2, #241	; 0xf1
 800a6f0:	701a      	strb	r2, [r3, #0]
    return 1;
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	e000      	b.n	800a6f8 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800a6f6:	2300      	movs	r3, #0
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3708      	adds	r7, #8
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}
 800a700:	080256f0 	.word	0x080256f0
 800a704:	0802575c 	.word	0x0802575c
 800a708:	08025734 	.word	0x08025734
 800a70c:	080291bc 	.word	0x080291bc
 800a710:	080291bd 	.word	0x080291bd
 800a714:	080291be 	.word	0x080291be

0800a718 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b088      	sub	sp, #32
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	60f8      	str	r0, [r7, #12]
 800a720:	60b9      	str	r1, [r7, #8]
 800a722:	607a      	str	r2, [r7, #4]
 800a724:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d105      	bne.n	800a738 <recv_udp+0x20>
 800a72c:	4b34      	ldr	r3, [pc, #208]	; (800a800 <recv_udp+0xe8>)
 800a72e:	22e5      	movs	r2, #229	; 0xe5
 800a730:	4934      	ldr	r1, [pc, #208]	; (800a804 <recv_udp+0xec>)
 800a732:	4835      	ldr	r0, [pc, #212]	; (800a808 <recv_udp+0xf0>)
 800a734:	f019 fa54 	bl	8023be0 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d105      	bne.n	800a74a <recv_udp+0x32>
 800a73e:	4b30      	ldr	r3, [pc, #192]	; (800a800 <recv_udp+0xe8>)
 800a740:	22e6      	movs	r2, #230	; 0xe6
 800a742:	4932      	ldr	r1, [pc, #200]	; (800a80c <recv_udp+0xf4>)
 800a744:	4830      	ldr	r0, [pc, #192]	; (800a808 <recv_udp+0xf0>)
 800a746:	f019 fa4b 	bl	8023be0 <iprintf>
  conn = (struct netconn *)arg;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800a74e:	69fb      	ldr	r3, [r7, #28]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d103      	bne.n	800a75c <recv_udp+0x44>
    pbuf_free(p);
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f006 f8a3 	bl	80108a0 <pbuf_free>
    return;
 800a75a:	e04d      	b.n	800a7f8 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800a75c:	69fb      	ldr	r3, [r7, #28]
 800a75e:	685b      	ldr	r3, [r3, #4]
 800a760:	68ba      	ldr	r2, [r7, #8]
 800a762:	429a      	cmp	r2, r3
 800a764:	d005      	beq.n	800a772 <recv_udp+0x5a>
 800a766:	4b26      	ldr	r3, [pc, #152]	; (800a800 <recv_udp+0xe8>)
 800a768:	22ee      	movs	r2, #238	; 0xee
 800a76a:	4929      	ldr	r1, [pc, #164]	; (800a810 <recv_udp+0xf8>)
 800a76c:	4826      	ldr	r0, [pc, #152]	; (800a808 <recv_udp+0xf0>)
 800a76e:	f019 fa37 	bl	8023be0 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a772:	69fb      	ldr	r3, [r7, #28]
 800a774:	3310      	adds	r3, #16
 800a776:	4618      	mov	r0, r3
 800a778:	f010 fec2 	bl	801b500 <sys_mbox_valid>
 800a77c:	4603      	mov	r3, r0
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d103      	bne.n	800a78a <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f006 f88c 	bl	80108a0 <pbuf_free>
    return;
 800a788:	e036      	b.n	800a7f8 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800a78a:	2006      	movs	r0, #6
 800a78c:	f005 f90a 	bl	800f9a4 <memp_malloc>
 800a790:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800a792:	69bb      	ldr	r3, [r7, #24]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d103      	bne.n	800a7a0 <recv_udp+0x88>
    pbuf_free(p);
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f006 f881 	bl	80108a0 <pbuf_free>
    return;
 800a79e:	e02b      	b.n	800a7f8 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800a7a0:	69bb      	ldr	r3, [r7, #24]
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800a7a6:	69bb      	ldr	r3, [r7, #24]
 800a7a8:	687a      	ldr	r2, [r7, #4]
 800a7aa:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d002      	beq.n	800a7b8 <recv_udp+0xa0>
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	e000      	b.n	800a7ba <recv_udp+0xa2>
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	69ba      	ldr	r2, [r7, #24]
 800a7bc:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800a7be:	69bb      	ldr	r3, [r7, #24]
 800a7c0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a7c2:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	891b      	ldrh	r3, [r3, #8]
 800a7c8:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800a7ca:	69fb      	ldr	r3, [r7, #28]
 800a7cc:	3310      	adds	r3, #16
 800a7ce:	69b9      	ldr	r1, [r7, #24]
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f010 fe33 	bl	801b43c <sys_mbox_trypost>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d003      	beq.n	800a7e4 <recv_udp+0xcc>
    netbuf_delete(buf);
 800a7dc:	69b8      	ldr	r0, [r7, #24]
 800a7de:	f001 fc71 	bl	800c0c4 <netbuf_delete>
    return;
 800a7e2:	e009      	b.n	800a7f8 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a7e4:	69fb      	ldr	r3, [r7, #28]
 800a7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d005      	beq.n	800a7f8 <recv_udp+0xe0>
 800a7ec:	69fb      	ldr	r3, [r7, #28]
 800a7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f0:	8afa      	ldrh	r2, [r7, #22]
 800a7f2:	2100      	movs	r1, #0
 800a7f4:	69f8      	ldr	r0, [r7, #28]
 800a7f6:	4798      	blx	r3
  }
}
 800a7f8:	3720      	adds	r7, #32
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	bf00      	nop
 800a800:	080256f0 	.word	0x080256f0
 800a804:	08025768 	.word	0x08025768
 800a808:	08025734 	.word	0x08025734
 800a80c:	0802578c 	.word	0x0802578c
 800a810:	080257ac 	.word	0x080257ac

0800a814 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b088      	sub	sp, #32
 800a818:	af00      	add	r7, sp, #0
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	607a      	str	r2, [r7, #4]
 800a820:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d106      	bne.n	800a836 <recv_tcp+0x22>
 800a828:	4b36      	ldr	r3, [pc, #216]	; (800a904 <recv_tcp+0xf0>)
 800a82a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a82e:	4936      	ldr	r1, [pc, #216]	; (800a908 <recv_tcp+0xf4>)
 800a830:	4836      	ldr	r0, [pc, #216]	; (800a90c <recv_tcp+0xf8>)
 800a832:	f019 f9d5 	bl	8023be0 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d106      	bne.n	800a84a <recv_tcp+0x36>
 800a83c:	4b31      	ldr	r3, [pc, #196]	; (800a904 <recv_tcp+0xf0>)
 800a83e:	f240 122d 	movw	r2, #301	; 0x12d
 800a842:	4933      	ldr	r1, [pc, #204]	; (800a910 <recv_tcp+0xfc>)
 800a844:	4831      	ldr	r0, [pc, #196]	; (800a90c <recv_tcp+0xf8>)
 800a846:	f019 f9cb 	bl	8023be0 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800a84a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d006      	beq.n	800a860 <recv_tcp+0x4c>
 800a852:	4b2c      	ldr	r3, [pc, #176]	; (800a904 <recv_tcp+0xf0>)
 800a854:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800a858:	492e      	ldr	r1, [pc, #184]	; (800a914 <recv_tcp+0x100>)
 800a85a:	482c      	ldr	r0, [pc, #176]	; (800a90c <recv_tcp+0xf8>)
 800a85c:	f019 f9c0 	bl	8023be0 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d102      	bne.n	800a870 <recv_tcp+0x5c>
    return ERR_VAL;
 800a86a:	f06f 0305 	mvn.w	r3, #5
 800a86e:	e045      	b.n	800a8fc <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	685b      	ldr	r3, [r3, #4]
 800a874:	68ba      	ldr	r2, [r7, #8]
 800a876:	429a      	cmp	r2, r3
 800a878:	d006      	beq.n	800a888 <recv_tcp+0x74>
 800a87a:	4b22      	ldr	r3, [pc, #136]	; (800a904 <recv_tcp+0xf0>)
 800a87c:	f240 1235 	movw	r2, #309	; 0x135
 800a880:	4925      	ldr	r1, [pc, #148]	; (800a918 <recv_tcp+0x104>)
 800a882:	4822      	ldr	r0, [pc, #136]	; (800a90c <recv_tcp+0xf8>)
 800a884:	f019 f9ac 	bl	8023be0 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	3310      	adds	r3, #16
 800a88c:	4618      	mov	r0, r3
 800a88e:	f010 fe37 	bl	801b500 <sys_mbox_valid>
 800a892:	4603      	mov	r3, r0
 800a894:	2b00      	cmp	r3, #0
 800a896:	d10d      	bne.n	800a8b4 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d008      	beq.n	800a8b0 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	891b      	ldrh	r3, [r3, #8]
 800a8a2:	4619      	mov	r1, r3
 800a8a4:	68b8      	ldr	r0, [r7, #8]
 800a8a6:	f006 fff7 	bl	8011898 <tcp_recved>
      pbuf_free(p);
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f005 fff8 	bl	80108a0 <pbuf_free>
    }
    return ERR_OK;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	e023      	b.n	800a8fc <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d005      	beq.n	800a8c6 <recv_tcp+0xb2>
    msg = p;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	891b      	ldrh	r3, [r3, #8]
 800a8c2:	83fb      	strh	r3, [r7, #30]
 800a8c4:	e003      	b.n	800a8ce <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800a8c6:	4b15      	ldr	r3, [pc, #84]	; (800a91c <recv_tcp+0x108>)
 800a8c8:	61bb      	str	r3, [r7, #24]
    len = 0;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	3310      	adds	r3, #16
 800a8d2:	69b9      	ldr	r1, [r7, #24]
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f010 fdb1 	bl	801b43c <sys_mbox_trypost>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d002      	beq.n	800a8e6 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800a8e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a8e4:	e00a      	b.n	800a8fc <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d005      	beq.n	800a8fa <recv_tcp+0xe6>
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f2:	8bfa      	ldrh	r2, [r7, #30]
 800a8f4:	2100      	movs	r1, #0
 800a8f6:	6978      	ldr	r0, [r7, #20]
 800a8f8:	4798      	blx	r3
  }

  return ERR_OK;
 800a8fa:	2300      	movs	r3, #0
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3720      	adds	r7, #32
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}
 800a904:	080256f0 	.word	0x080256f0
 800a908:	080257cc 	.word	0x080257cc
 800a90c:	08025734 	.word	0x08025734
 800a910:	080257f0 	.word	0x080257f0
 800a914:	08025810 	.word	0x08025810
 800a918:	08025828 	.word	0x08025828
 800a91c:	080291be 	.word	0x080291be

0800a920 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b084      	sub	sp, #16
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d106      	bne.n	800a942 <poll_tcp+0x22>
 800a934:	4b29      	ldr	r3, [pc, #164]	; (800a9dc <poll_tcp+0xbc>)
 800a936:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800a93a:	4929      	ldr	r1, [pc, #164]	; (800a9e0 <poll_tcp+0xc0>)
 800a93c:	4829      	ldr	r0, [pc, #164]	; (800a9e4 <poll_tcp+0xc4>)
 800a93e:	f019 f94f 	bl	8023be0 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	785b      	ldrb	r3, [r3, #1]
 800a946:	2b01      	cmp	r3, #1
 800a948:	d104      	bne.n	800a954 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a94a:	2101      	movs	r1, #1
 800a94c:	68f8      	ldr	r0, [r7, #12]
 800a94e:	f000 ff8f 	bl	800b870 <lwip_netconn_do_writemore>
 800a952:	e016      	b.n	800a982 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	785b      	ldrb	r3, [r3, #1]
 800a958:	2b04      	cmp	r3, #4
 800a95a:	d112      	bne.n	800a982 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	6a1b      	ldr	r3, [r3, #32]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d00a      	beq.n	800a97a <poll_tcp+0x5a>
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	6a1b      	ldr	r3, [r3, #32]
 800a968:	7a5b      	ldrb	r3, [r3, #9]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d005      	beq.n	800a97a <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	6a1b      	ldr	r3, [r3, #32]
 800a972:	7a5a      	ldrb	r2, [r3, #9]
 800a974:	3a01      	subs	r2, #1
 800a976:	b2d2      	uxtb	r2, r2
 800a978:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a97a:	2101      	movs	r1, #1
 800a97c:	68f8      	ldr	r0, [r7, #12]
 800a97e:	f000 fb3b 	bl	800aff8 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	7f1b      	ldrb	r3, [r3, #28]
 800a986:	f003 0310 	and.w	r3, r3, #16
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d021      	beq.n	800a9d2 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d01d      	beq.n	800a9d2 <poll_tcp+0xb2>
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a99e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a9a2:	d316      	bcc.n	800a9d2 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a9ac:	2b04      	cmp	r3, #4
 800a9ae:	d810      	bhi.n	800a9d2 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	7f1b      	ldrb	r3, [r3, #28]
 800a9b4:	f023 0310 	bic.w	r3, r3, #16
 800a9b8:	b2da      	uxtb	r2, r3
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d005      	beq.n	800a9d2 <poll_tcp+0xb2>
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	2102      	movs	r1, #2
 800a9ce:	68f8      	ldr	r0, [r7, #12]
 800a9d0:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a9d2:	2300      	movs	r3, #0
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3710      	adds	r7, #16
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}
 800a9dc:	080256f0 	.word	0x080256f0
 800a9e0:	08025848 	.word	0x08025848
 800a9e4:	08025734 	.word	0x08025734

0800a9e8 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b086      	sub	sp, #24
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	60f8      	str	r0, [r7, #12]
 800a9f0:	60b9      	str	r1, [r7, #8]
 800a9f2:	4613      	mov	r3, r2
 800a9f4:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d106      	bne.n	800aa0e <sent_tcp+0x26>
 800aa00:	4b20      	ldr	r3, [pc, #128]	; (800aa84 <sent_tcp+0x9c>)
 800aa02:	f240 1293 	movw	r2, #403	; 0x193
 800aa06:	4920      	ldr	r1, [pc, #128]	; (800aa88 <sent_tcp+0xa0>)
 800aa08:	4820      	ldr	r0, [pc, #128]	; (800aa8c <sent_tcp+0xa4>)
 800aa0a:	f019 f8e9 	bl	8023be0 <iprintf>

  if (conn) {
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d032      	beq.n	800aa7a <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	785b      	ldrb	r3, [r3, #1]
 800aa18:	2b01      	cmp	r3, #1
 800aa1a:	d104      	bne.n	800aa26 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800aa1c:	2101      	movs	r1, #1
 800aa1e:	6978      	ldr	r0, [r7, #20]
 800aa20:	f000 ff26 	bl	800b870 <lwip_netconn_do_writemore>
 800aa24:	e007      	b.n	800aa36 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	785b      	ldrb	r3, [r3, #1]
 800aa2a:	2b04      	cmp	r3, #4
 800aa2c:	d103      	bne.n	800aa36 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800aa2e:	2101      	movs	r1, #1
 800aa30:	6978      	ldr	r0, [r7, #20]
 800aa32:	f000 fae1 	bl	800aff8 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	685b      	ldr	r3, [r3, #4]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d01d      	beq.n	800aa7a <sent_tcp+0x92>
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800aa46:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800aa4a:	d316      	bcc.n	800aa7a <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	685b      	ldr	r3, [r3, #4]
 800aa50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800aa54:	2b04      	cmp	r3, #4
 800aa56:	d810      	bhi.n	800aa7a <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	7f1b      	ldrb	r3, [r3, #28]
 800aa5c:	f023 0310 	bic.w	r3, r3, #16
 800aa60:	b2da      	uxtb	r2, r3
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d005      	beq.n	800aa7a <sent_tcp+0x92>
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa72:	88fa      	ldrh	r2, [r7, #6]
 800aa74:	2102      	movs	r1, #2
 800aa76:	6978      	ldr	r0, [r7, #20]
 800aa78:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800aa7a:	2300      	movs	r3, #0
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3718      	adds	r7, #24
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}
 800aa84:	080256f0 	.word	0x080256f0
 800aa88:	08025848 	.word	0x08025848
 800aa8c:	08025734 	.word	0x08025734

0800aa90 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b088      	sub	sp, #32
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	460b      	mov	r3, r1
 800aa9a:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800aaa0:	69fb      	ldr	r3, [r7, #28]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d106      	bne.n	800aab4 <err_tcp+0x24>
 800aaa6:	4b5f      	ldr	r3, [pc, #380]	; (800ac24 <err_tcp+0x194>)
 800aaa8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800aaac:	495e      	ldr	r1, [pc, #376]	; (800ac28 <err_tcp+0x198>)
 800aaae:	485f      	ldr	r0, [pc, #380]	; (800ac2c <err_tcp+0x19c>)
 800aab0:	f019 f896 	bl	8023be0 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800aab4:	f010 fe2e 	bl	801b714 <sys_arch_protect>
 800aab8:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800aaba:	69fb      	ldr	r3, [r7, #28]
 800aabc:	2200      	movs	r2, #0
 800aabe:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800aac0:	69fb      	ldr	r3, [r7, #28]
 800aac2:	78fa      	ldrb	r2, [r7, #3]
 800aac4:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800aac6:	69fb      	ldr	r3, [r7, #28]
 800aac8:	7f1b      	ldrb	r3, [r3, #28]
 800aaca:	f043 0301 	orr.w	r3, r3, #1
 800aace:	b2da      	uxtb	r2, r3
 800aad0:	69fb      	ldr	r3, [r7, #28]
 800aad2:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800aad4:	69fb      	ldr	r3, [r7, #28]
 800aad6:	785b      	ldrb	r3, [r3, #1]
 800aad8:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800aada:	69fb      	ldr	r3, [r7, #28]
 800aadc:	2200      	movs	r2, #0
 800aade:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800aae0:	69b8      	ldr	r0, [r7, #24]
 800aae2:	f010 fe25 	bl	801b730 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800aae6:	69fb      	ldr	r3, [r7, #28]
 800aae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d005      	beq.n	800aafa <err_tcp+0x6a>
 800aaee:	69fb      	ldr	r3, [r7, #28]
 800aaf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	2104      	movs	r1, #4
 800aaf6:	69f8      	ldr	r0, [r7, #28]
 800aaf8:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800aafa:	69fb      	ldr	r3, [r7, #28]
 800aafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d005      	beq.n	800ab0e <err_tcp+0x7e>
 800ab02:	69fb      	ldr	r3, [r7, #28]
 800ab04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab06:	2200      	movs	r2, #0
 800ab08:	2100      	movs	r1, #0
 800ab0a:	69f8      	ldr	r0, [r7, #28]
 800ab0c:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800ab0e:	69fb      	ldr	r3, [r7, #28]
 800ab10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d005      	beq.n	800ab22 <err_tcp+0x92>
 800ab16:	69fb      	ldr	r3, [r7, #28]
 800ab18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	2102      	movs	r1, #2
 800ab1e:	69f8      	ldr	r0, [r7, #28]
 800ab20:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800ab22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab26:	4618      	mov	r0, r3
 800ab28:	f7ff fd86 	bl	800a638 <lwip_netconn_err_to_msg>
 800ab2c:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800ab2e:	69fb      	ldr	r3, [r7, #28]
 800ab30:	3310      	adds	r3, #16
 800ab32:	4618      	mov	r0, r3
 800ab34:	f010 fce4 	bl	801b500 <sys_mbox_valid>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d005      	beq.n	800ab4a <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800ab3e:	69fb      	ldr	r3, [r7, #28]
 800ab40:	3310      	adds	r3, #16
 800ab42:	6939      	ldr	r1, [r7, #16]
 800ab44:	4618      	mov	r0, r3
 800ab46:	f010 fc79 	bl	801b43c <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800ab4a:	69fb      	ldr	r3, [r7, #28]
 800ab4c:	3314      	adds	r3, #20
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f010 fcd6 	bl	801b500 <sys_mbox_valid>
 800ab54:	4603      	mov	r3, r0
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d005      	beq.n	800ab66 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800ab5a:	69fb      	ldr	r3, [r7, #28]
 800ab5c:	3314      	adds	r3, #20
 800ab5e:	6939      	ldr	r1, [r7, #16]
 800ab60:	4618      	mov	r0, r3
 800ab62:	f010 fc6b 	bl	801b43c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800ab66:	7dfb      	ldrb	r3, [r7, #23]
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d005      	beq.n	800ab78 <err_tcp+0xe8>
 800ab6c:	7dfb      	ldrb	r3, [r7, #23]
 800ab6e:	2b04      	cmp	r3, #4
 800ab70:	d002      	beq.n	800ab78 <err_tcp+0xe8>
 800ab72:	7dfb      	ldrb	r3, [r7, #23]
 800ab74:	2b03      	cmp	r3, #3
 800ab76:	d143      	bne.n	800ac00 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800ab78:	69fb      	ldr	r3, [r7, #28]
 800ab7a:	7f1b      	ldrb	r3, [r3, #28]
 800ab7c:	f003 0304 	and.w	r3, r3, #4
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	bf14      	ite	ne
 800ab84:	2301      	movne	r3, #1
 800ab86:	2300      	moveq	r3, #0
 800ab88:	b2db      	uxtb	r3, r3
 800ab8a:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800ab8c:	69fb      	ldr	r3, [r7, #28]
 800ab8e:	7f1b      	ldrb	r3, [r3, #28]
 800ab90:	f023 0304 	bic.w	r3, r3, #4
 800ab94:	b2da      	uxtb	r2, r3
 800ab96:	69fb      	ldr	r3, [r7, #28]
 800ab98:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d13b      	bne.n	800ac18 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800aba0:	69fb      	ldr	r3, [r7, #28]
 800aba2:	6a1b      	ldr	r3, [r3, #32]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d106      	bne.n	800abb6 <err_tcp+0x126>
 800aba8:	4b1e      	ldr	r3, [pc, #120]	; (800ac24 <err_tcp+0x194>)
 800abaa:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800abae:	4920      	ldr	r1, [pc, #128]	; (800ac30 <err_tcp+0x1a0>)
 800abb0:	481e      	ldr	r0, [pc, #120]	; (800ac2c <err_tcp+0x19c>)
 800abb2:	f019 f815 	bl	8023be0 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800abb6:	7dfb      	ldrb	r3, [r7, #23]
 800abb8:	2b04      	cmp	r3, #4
 800abba:	d104      	bne.n	800abc6 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800abbc:	69fb      	ldr	r3, [r7, #28]
 800abbe:	6a1b      	ldr	r3, [r3, #32]
 800abc0:	2200      	movs	r2, #0
 800abc2:	711a      	strb	r2, [r3, #4]
 800abc4:	e003      	b.n	800abce <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800abc6:	69fb      	ldr	r3, [r7, #28]
 800abc8:	6a1b      	ldr	r3, [r3, #32]
 800abca:	78fa      	ldrb	r2, [r7, #3]
 800abcc:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800abce:	69fb      	ldr	r3, [r7, #28]
 800abd0:	6a1b      	ldr	r3, [r3, #32]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	330c      	adds	r3, #12
 800abd6:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800abd8:	68b8      	ldr	r0, [r7, #8]
 800abda:	f010 fd1f 	bl	801b61c <sys_sem_valid>
 800abde:	4603      	mov	r3, r0
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d106      	bne.n	800abf2 <err_tcp+0x162>
 800abe4:	4b0f      	ldr	r3, [pc, #60]	; (800ac24 <err_tcp+0x194>)
 800abe6:	f240 12ef 	movw	r2, #495	; 0x1ef
 800abea:	4912      	ldr	r1, [pc, #72]	; (800ac34 <err_tcp+0x1a4>)
 800abec:	480f      	ldr	r0, [pc, #60]	; (800ac2c <err_tcp+0x19c>)
 800abee:	f018 fff7 	bl	8023be0 <iprintf>
      conn->current_msg = NULL;
 800abf2:	69fb      	ldr	r3, [r7, #28]
 800abf4:	2200      	movs	r2, #0
 800abf6:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800abf8:	68b8      	ldr	r0, [r7, #8]
 800abfa:	f010 fcf5 	bl	801b5e8 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800abfe:	e00b      	b.n	800ac18 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800ac00:	69fb      	ldr	r3, [r7, #28]
 800ac02:	6a1b      	ldr	r3, [r3, #32]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d008      	beq.n	800ac1a <err_tcp+0x18a>
 800ac08:	4b06      	ldr	r3, [pc, #24]	; (800ac24 <err_tcp+0x194>)
 800ac0a:	f240 12f7 	movw	r2, #503	; 0x1f7
 800ac0e:	490a      	ldr	r1, [pc, #40]	; (800ac38 <err_tcp+0x1a8>)
 800ac10:	4806      	ldr	r0, [pc, #24]	; (800ac2c <err_tcp+0x19c>)
 800ac12:	f018 ffe5 	bl	8023be0 <iprintf>
  }
}
 800ac16:	e000      	b.n	800ac1a <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800ac18:	bf00      	nop
}
 800ac1a:	bf00      	nop
 800ac1c:	3720      	adds	r7, #32
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}
 800ac22:	bf00      	nop
 800ac24:	080256f0 	.word	0x080256f0
 800ac28:	08025848 	.word	0x08025848
 800ac2c:	08025734 	.word	0x08025734
 800ac30:	08025858 	.word	0x08025858
 800ac34:	08025874 	.word	0x08025874
 800ac38:	08025890 	.word	0x08025890

0800ac3c <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b084      	sub	sp, #16
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	685b      	ldr	r3, [r3, #4]
 800ac48:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800ac4a:	6879      	ldr	r1, [r7, #4]
 800ac4c:	68f8      	ldr	r0, [r7, #12]
 800ac4e:	f007 fe01 	bl	8012854 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800ac52:	490a      	ldr	r1, [pc, #40]	; (800ac7c <setup_tcp+0x40>)
 800ac54:	68f8      	ldr	r0, [r7, #12]
 800ac56:	f007 fe0f 	bl	8012878 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800ac5a:	4909      	ldr	r1, [pc, #36]	; (800ac80 <setup_tcp+0x44>)
 800ac5c:	68f8      	ldr	r0, [r7, #12]
 800ac5e:	f007 fe2d 	bl	80128bc <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800ac62:	2202      	movs	r2, #2
 800ac64:	4907      	ldr	r1, [pc, #28]	; (800ac84 <setup_tcp+0x48>)
 800ac66:	68f8      	ldr	r0, [r7, #12]
 800ac68:	f007 fe84 	bl	8012974 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800ac6c:	4906      	ldr	r1, [pc, #24]	; (800ac88 <setup_tcp+0x4c>)
 800ac6e:	68f8      	ldr	r0, [r7, #12]
 800ac70:	f007 fe46 	bl	8012900 <tcp_err>
}
 800ac74:	bf00      	nop
 800ac76:	3710      	adds	r7, #16
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}
 800ac7c:	0800a815 	.word	0x0800a815
 800ac80:	0800a9e9 	.word	0x0800a9e9
 800ac84:	0800a921 	.word	0x0800a921
 800ac88:	0800aa91 	.word	0x0800aa91

0800ac8c <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800ac8c:	b590      	push	{r4, r7, lr}
 800ac8e:	b085      	sub	sp, #20
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800ac94:	2300      	movs	r3, #0
 800ac96:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d006      	beq.n	800acb0 <pcb_new+0x24>
 800aca2:	4b2b      	ldr	r3, [pc, #172]	; (800ad50 <pcb_new+0xc4>)
 800aca4:	f240 2265 	movw	r2, #613	; 0x265
 800aca8:	492a      	ldr	r1, [pc, #168]	; (800ad54 <pcb_new+0xc8>)
 800acaa:	482b      	ldr	r0, [pc, #172]	; (800ad58 <pcb_new+0xcc>)
 800acac:	f018 ff98 	bl	8023be0 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	781b      	ldrb	r3, [r3, #0]
 800acb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800acba:	2b10      	cmp	r3, #16
 800acbc:	d022      	beq.n	800ad04 <pcb_new+0x78>
 800acbe:	2b20      	cmp	r3, #32
 800acc0:	d133      	bne.n	800ad2a <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681c      	ldr	r4, [r3, #0]
 800acc6:	7bfb      	ldrb	r3, [r7, #15]
 800acc8:	4618      	mov	r0, r3
 800acca:	f00d f983 	bl	8017fd4 <udp_new_ip_type>
 800acce:	4603      	mov	r3, r0
 800acd0:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	685b      	ldr	r3, [r3, #4]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d02a      	beq.n	800ad32 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	781b      	ldrb	r3, [r3, #0]
 800ace2:	2b22      	cmp	r3, #34	; 0x22
 800ace4:	d104      	bne.n	800acf0 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	2201      	movs	r2, #1
 800acee:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	6858      	ldr	r0, [r3, #4]
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	461a      	mov	r2, r3
 800acfc:	4917      	ldr	r1, [pc, #92]	; (800ad5c <pcb_new+0xd0>)
 800acfe:	f00d f8ed 	bl	8017edc <udp_recv>
      }
      break;
 800ad02:	e016      	b.n	800ad32 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681c      	ldr	r4, [r3, #0]
 800ad08:	7bfb      	ldrb	r3, [r7, #15]
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f007 fd94 	bl	8012838 <tcp_new_ip_type>
 800ad10:	4603      	mov	r3, r0
 800ad12:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	685b      	ldr	r3, [r3, #4]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d00b      	beq.n	800ad36 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	4618      	mov	r0, r3
 800ad24:	f7ff ff8a 	bl	800ac3c <setup_tcp>
      }
      break;
 800ad28:	e005      	b.n	800ad36 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	22fa      	movs	r2, #250	; 0xfa
 800ad2e:	711a      	strb	r2, [r3, #4]
      return;
 800ad30:	e00a      	b.n	800ad48 <pcb_new+0xbc>
      break;
 800ad32:	bf00      	nop
 800ad34:	e000      	b.n	800ad38 <pcb_new+0xac>
      break;
 800ad36:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	685b      	ldr	r3, [r3, #4]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d102      	bne.n	800ad48 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	22ff      	movs	r2, #255	; 0xff
 800ad46:	711a      	strb	r2, [r3, #4]
  }
}
 800ad48:	3714      	adds	r7, #20
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd90      	pop	{r4, r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	080256f0 	.word	0x080256f0
 800ad54:	080258d4 	.word	0x080258d4
 800ad58:	08025734 	.word	0x08025734
 800ad5c:	0800a719 	.word	0x0800a719

0800ad60 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b084      	sub	sp, #16
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	685b      	ldr	r3, [r3, #4]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d102      	bne.n	800ad82 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800ad7c:	68f8      	ldr	r0, [r7, #12]
 800ad7e:	f7ff ff85 	bl	800ac8c <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800ad82:	bf00      	nop
 800ad84:	3710      	adds	r7, #16
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}
	...

0800ad8c <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b086      	sub	sp, #24
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	4603      	mov	r3, r0
 800ad94:	6039      	str	r1, [r7, #0]
 800ad96:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800ad9c:	2007      	movs	r0, #7
 800ad9e:	f004 fe01 	bl	800f9a4 <memp_malloc>
 800ada2:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d101      	bne.n	800adae <netconn_alloc+0x22>
    return NULL;
 800adaa:	2300      	movs	r3, #0
 800adac:	e052      	b.n	800ae54 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2200      	movs	r2, #0
 800adb2:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	79fa      	ldrb	r2, [r7, #7]
 800adb8:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2200      	movs	r2, #0
 800adbe:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800adc0:	79fb      	ldrb	r3, [r7, #7]
 800adc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800adc6:	2b10      	cmp	r3, #16
 800adc8:	d004      	beq.n	800add4 <netconn_alloc+0x48>
 800adca:	2b20      	cmp	r3, #32
 800adcc:	d105      	bne.n	800adda <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800adce:	2306      	movs	r3, #6
 800add0:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800add2:	e00a      	b.n	800adea <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800add4:	2306      	movs	r3, #6
 800add6:	617b      	str	r3, [r7, #20]
      break;
 800add8:	e007      	b.n	800adea <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800adda:	4b20      	ldr	r3, [pc, #128]	; (800ae5c <netconn_alloc+0xd0>)
 800addc:	f240 22e5 	movw	r2, #741	; 0x2e5
 800ade0:	491f      	ldr	r1, [pc, #124]	; (800ae60 <netconn_alloc+0xd4>)
 800ade2:	4820      	ldr	r0, [pc, #128]	; (800ae64 <netconn_alloc+0xd8>)
 800ade4:	f018 fefc 	bl	8023be0 <iprintf>
      goto free_and_return;
 800ade8:	e02f      	b.n	800ae4a <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	3310      	adds	r3, #16
 800adee:	6979      	ldr	r1, [r7, #20]
 800adf0:	4618      	mov	r0, r3
 800adf2:	f010 faf7 	bl	801b3e4 <sys_mbox_new>
 800adf6:	4603      	mov	r3, r0
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d125      	bne.n	800ae48 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	330c      	adds	r3, #12
 800ae00:	2100      	movs	r1, #0
 800ae02:	4618      	mov	r0, r3
 800ae04:	f010 fb9a 	bl	801b53c <sys_sem_new>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d005      	beq.n	800ae1a <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	3310      	adds	r3, #16
 800ae12:	4618      	mov	r0, r3
 800ae14:	f010 fb00 	bl	801b418 <sys_mbox_free>
    goto free_and_return;
 800ae18:	e017      	b.n	800ae4a <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	3314      	adds	r3, #20
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f010 fb7f 	bl	801b522 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	2200      	movs	r2, #0
 800ae28:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ae30:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	683a      	ldr	r2, [r7, #0]
 800ae36:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	7cfa      	ldrb	r2, [r7, #19]
 800ae42:	771a      	strb	r2, [r3, #28]
  return conn;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	e005      	b.n	800ae54 <netconn_alloc+0xc8>
    goto free_and_return;
 800ae48:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800ae4a:	68f9      	ldr	r1, [r7, #12]
 800ae4c:	2007      	movs	r0, #7
 800ae4e:	f004 fdfb 	bl	800fa48 <memp_free>
  return NULL;
 800ae52:	2300      	movs	r3, #0
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3718      	adds	r7, #24
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}
 800ae5c:	080256f0 	.word	0x080256f0
 800ae60:	080258f4 	.word	0x080258f4
 800ae64:	08025734 	.word	0x08025734

0800ae68 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b082      	sub	sp, #8
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d006      	beq.n	800ae86 <netconn_free+0x1e>
 800ae78:	4b1b      	ldr	r3, [pc, #108]	; (800aee8 <netconn_free+0x80>)
 800ae7a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800ae7e:	491b      	ldr	r1, [pc, #108]	; (800aeec <netconn_free+0x84>)
 800ae80:	481b      	ldr	r0, [pc, #108]	; (800aef0 <netconn_free+0x88>)
 800ae82:	f018 fead 	bl	8023be0 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	3310      	adds	r3, #16
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f010 fb38 	bl	801b500 <sys_mbox_valid>
 800ae90:	4603      	mov	r3, r0
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d006      	beq.n	800aea4 <netconn_free+0x3c>
 800ae96:	4b14      	ldr	r3, [pc, #80]	; (800aee8 <netconn_free+0x80>)
 800ae98:	f240 3223 	movw	r2, #803	; 0x323
 800ae9c:	4915      	ldr	r1, [pc, #84]	; (800aef4 <netconn_free+0x8c>)
 800ae9e:	4814      	ldr	r0, [pc, #80]	; (800aef0 <netconn_free+0x88>)
 800aea0:	f018 fe9e 	bl	8023be0 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	3314      	adds	r3, #20
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f010 fb29 	bl	801b500 <sys_mbox_valid>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d006      	beq.n	800aec2 <netconn_free+0x5a>
 800aeb4:	4b0c      	ldr	r3, [pc, #48]	; (800aee8 <netconn_free+0x80>)
 800aeb6:	f240 3226 	movw	r2, #806	; 0x326
 800aeba:	490f      	ldr	r1, [pc, #60]	; (800aef8 <netconn_free+0x90>)
 800aebc:	480c      	ldr	r0, [pc, #48]	; (800aef0 <netconn_free+0x88>)
 800aebe:	f018 fe8f 	bl	8023be0 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	330c      	adds	r3, #12
 800aec6:	4618      	mov	r0, r3
 800aec8:	f010 fb9b 	bl	801b602 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	330c      	adds	r3, #12
 800aed0:	4618      	mov	r0, r3
 800aed2:	f010 fbb4 	bl	801b63e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800aed6:	6879      	ldr	r1, [r7, #4]
 800aed8:	2007      	movs	r0, #7
 800aeda:	f004 fdb5 	bl	800fa48 <memp_free>
}
 800aede:	bf00      	nop
 800aee0:	3708      	adds	r7, #8
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}
 800aee6:	bf00      	nop
 800aee8:	080256f0 	.word	0x080256f0
 800aeec:	0802591c 	.word	0x0802591c
 800aef0:	08025734 	.word	0x08025734
 800aef4:	0802594c 	.word	0x0802594c
 800aef8:	08025988 	.word	0x08025988

0800aefc <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b086      	sub	sp, #24
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	3310      	adds	r3, #16
 800af08:	4618      	mov	r0, r3
 800af0a:	f010 faf9 	bl	801b500 <sys_mbox_valid>
 800af0e:	4603      	mov	r3, r0
 800af10:	2b00      	cmp	r3, #0
 800af12:	d02f      	beq.n	800af74 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800af14:	e018      	b.n	800af48 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800af1e:	2b10      	cmp	r3, #16
 800af20:	d10e      	bne.n	800af40 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	f107 020f 	add.w	r2, r7, #15
 800af28:	4611      	mov	r1, r2
 800af2a:	4618      	mov	r0, r3
 800af2c:	f7ff fbba 	bl	800a6a4 <lwip_netconn_is_err_msg>
 800af30:	4603      	mov	r3, r0
 800af32:	2b00      	cmp	r3, #0
 800af34:	d108      	bne.n	800af48 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	4618      	mov	r0, r3
 800af3a:	f005 fcb1 	bl	80108a0 <pbuf_free>
 800af3e:	e003      	b.n	800af48 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	4618      	mov	r0, r3
 800af44:	f001 f8be 	bl	800c0c4 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	3310      	adds	r3, #16
 800af4c:	f107 0210 	add.w	r2, r7, #16
 800af50:	4611      	mov	r1, r2
 800af52:	4618      	mov	r0, r3
 800af54:	f010 fabd 	bl	801b4d2 <sys_arch_mbox_tryfetch>
 800af58:	4603      	mov	r3, r0
 800af5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af5e:	d1da      	bne.n	800af16 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	3310      	adds	r3, #16
 800af64:	4618      	mov	r0, r3
 800af66:	f010 fa57 	bl	801b418 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	3310      	adds	r3, #16
 800af6e:	4618      	mov	r0, r3
 800af70:	f010 fad7 	bl	801b522 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	3314      	adds	r3, #20
 800af78:	4618      	mov	r0, r3
 800af7a:	f010 fac1 	bl	801b500 <sys_mbox_valid>
 800af7e:	4603      	mov	r3, r0
 800af80:	2b00      	cmp	r3, #0
 800af82:	d034      	beq.n	800afee <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800af84:	e01d      	b.n	800afc2 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	f107 020e 	add.w	r2, r7, #14
 800af8c:	4611      	mov	r1, r2
 800af8e:	4618      	mov	r0, r3
 800af90:	f7ff fb88 	bl	800a6a4 <lwip_netconn_is_err_msg>
 800af94:	4603      	mov	r3, r0
 800af96:	2b00      	cmp	r3, #0
 800af98:	d113      	bne.n	800afc2 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800af9e:	6978      	ldr	r0, [r7, #20]
 800afa0:	f7ff ffac 	bl	800aefc <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d007      	beq.n	800afbc <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	685b      	ldr	r3, [r3, #4]
 800afb0:	4618      	mov	r0, r3
 800afb2:	f006 fbf1 	bl	8011798 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	2200      	movs	r2, #0
 800afba:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800afbc:	6978      	ldr	r0, [r7, #20]
 800afbe:	f7ff ff53 	bl	800ae68 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	3314      	adds	r3, #20
 800afc6:	f107 0210 	add.w	r2, r7, #16
 800afca:	4611      	mov	r1, r2
 800afcc:	4618      	mov	r0, r3
 800afce:	f010 fa80 	bl	801b4d2 <sys_arch_mbox_tryfetch>
 800afd2:	4603      	mov	r3, r0
 800afd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800afd8:	d1d5      	bne.n	800af86 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	3314      	adds	r3, #20
 800afde:	4618      	mov	r0, r3
 800afe0:	f010 fa1a 	bl	801b418 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	3314      	adds	r3, #20
 800afe8:	4618      	mov	r0, r3
 800afea:	f010 fa9a 	bl	801b522 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800afee:	bf00      	nop
 800aff0:	3718      	adds	r7, #24
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
	...

0800aff8 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b086      	sub	sp, #24
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	460b      	mov	r3, r1
 800b002:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800b004:	2300      	movs	r3, #0
 800b006:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d106      	bne.n	800b01c <lwip_netconn_do_close_internal+0x24>
 800b00e:	4b87      	ldr	r3, [pc, #540]	; (800b22c <lwip_netconn_do_close_internal+0x234>)
 800b010:	f240 32a2 	movw	r2, #930	; 0x3a2
 800b014:	4986      	ldr	r1, [pc, #536]	; (800b230 <lwip_netconn_do_close_internal+0x238>)
 800b016:	4887      	ldr	r0, [pc, #540]	; (800b234 <lwip_netconn_do_close_internal+0x23c>)
 800b018:	f018 fde2 	bl	8023be0 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	781b      	ldrb	r3, [r3, #0]
 800b020:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b024:	2b10      	cmp	r3, #16
 800b026:	d006      	beq.n	800b036 <lwip_netconn_do_close_internal+0x3e>
 800b028:	4b80      	ldr	r3, [pc, #512]	; (800b22c <lwip_netconn_do_close_internal+0x234>)
 800b02a:	f240 32a3 	movw	r2, #931	; 0x3a3
 800b02e:	4982      	ldr	r1, [pc, #520]	; (800b238 <lwip_netconn_do_close_internal+0x240>)
 800b030:	4880      	ldr	r0, [pc, #512]	; (800b234 <lwip_netconn_do_close_internal+0x23c>)
 800b032:	f018 fdd5 	bl	8023be0 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	785b      	ldrb	r3, [r3, #1]
 800b03a:	2b04      	cmp	r3, #4
 800b03c:	d006      	beq.n	800b04c <lwip_netconn_do_close_internal+0x54>
 800b03e:	4b7b      	ldr	r3, [pc, #492]	; (800b22c <lwip_netconn_do_close_internal+0x234>)
 800b040:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800b044:	497d      	ldr	r1, [pc, #500]	; (800b23c <lwip_netconn_do_close_internal+0x244>)
 800b046:	487b      	ldr	r0, [pc, #492]	; (800b234 <lwip_netconn_do_close_internal+0x23c>)
 800b048:	f018 fdca 	bl	8023be0 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d106      	bne.n	800b062 <lwip_netconn_do_close_internal+0x6a>
 800b054:	4b75      	ldr	r3, [pc, #468]	; (800b22c <lwip_netconn_do_close_internal+0x234>)
 800b056:	f240 32a5 	movw	r2, #933	; 0x3a5
 800b05a:	4979      	ldr	r1, [pc, #484]	; (800b240 <lwip_netconn_do_close_internal+0x248>)
 800b05c:	4875      	ldr	r0, [pc, #468]	; (800b234 <lwip_netconn_do_close_internal+0x23c>)
 800b05e:	f018 fdbf 	bl	8023be0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6a1b      	ldr	r3, [r3, #32]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d106      	bne.n	800b078 <lwip_netconn_do_close_internal+0x80>
 800b06a:	4b70      	ldr	r3, [pc, #448]	; (800b22c <lwip_netconn_do_close_internal+0x234>)
 800b06c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800b070:	4974      	ldr	r1, [pc, #464]	; (800b244 <lwip_netconn_do_close_internal+0x24c>)
 800b072:	4870      	ldr	r0, [pc, #448]	; (800b234 <lwip_netconn_do_close_internal+0x23c>)
 800b074:	f018 fdb4 	bl	8023be0 <iprintf>

  tpcb = conn->pcb.tcp;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6a1b      	ldr	r3, [r3, #32]
 800b082:	7a1b      	ldrb	r3, [r3, #8]
 800b084:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800b086:	7bfb      	ldrb	r3, [r7, #15]
 800b088:	f003 0301 	and.w	r3, r3, #1
 800b08c:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800b08e:	7bfb      	ldrb	r3, [r7, #15]
 800b090:	f003 0302 	and.w	r3, r3, #2
 800b094:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800b096:	7bfb      	ldrb	r3, [r7, #15]
 800b098:	2b03      	cmp	r3, #3
 800b09a:	d102      	bne.n	800b0a2 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800b09c:	2301      	movs	r3, #1
 800b09e:	75bb      	strb	r3, [r7, #22]
 800b0a0:	e01f      	b.n	800b0e2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800b0a2:	7bbb      	ldrb	r3, [r7, #14]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d00e      	beq.n	800b0c6 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800b0ac:	2b05      	cmp	r3, #5
 800b0ae:	d007      	beq.n	800b0c0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800b0b4:	2b06      	cmp	r3, #6
 800b0b6:	d003      	beq.n	800b0c0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800b0b8:	693b      	ldr	r3, [r7, #16]
 800b0ba:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800b0bc:	2b08      	cmp	r3, #8
 800b0be:	d102      	bne.n	800b0c6 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	75bb      	strb	r3, [r7, #22]
 800b0c4:	e00d      	b.n	800b0e2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800b0c6:	7b7b      	ldrb	r3, [r7, #13]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d008      	beq.n	800b0de <lwip_netconn_do_close_internal+0xe6>
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	8b5b      	ldrh	r3, [r3, #26]
 800b0d0:	f003 0310 	and.w	r3, r3, #16
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d002      	beq.n	800b0de <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800b0d8:	2301      	movs	r3, #1
 800b0da:	75bb      	strb	r3, [r7, #22]
 800b0dc:	e001      	b.n	800b0e2 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800b0e2:	7dbb      	ldrb	r3, [r7, #22]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d003      	beq.n	800b0f0 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800b0e8:	2100      	movs	r1, #0
 800b0ea:	6938      	ldr	r0, [r7, #16]
 800b0ec:	f007 fbb2 	bl	8012854 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	7d1b      	ldrb	r3, [r3, #20]
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d104      	bne.n	800b102 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800b0f8:	2100      	movs	r1, #0
 800b0fa:	6938      	ldr	r0, [r7, #16]
 800b0fc:	f007 fc22 	bl	8012944 <tcp_accept>
 800b100:	e01d      	b.n	800b13e <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800b102:	7bbb      	ldrb	r3, [r7, #14]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d007      	beq.n	800b118 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800b108:	2100      	movs	r1, #0
 800b10a:	6938      	ldr	r0, [r7, #16]
 800b10c:	f007 fbb4 	bl	8012878 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800b110:	2100      	movs	r1, #0
 800b112:	6938      	ldr	r0, [r7, #16]
 800b114:	f007 fc16 	bl	8012944 <tcp_accept>
    }
    if (shut_tx) {
 800b118:	7b7b      	ldrb	r3, [r7, #13]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d003      	beq.n	800b126 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800b11e:	2100      	movs	r1, #0
 800b120:	6938      	ldr	r0, [r7, #16]
 800b122:	f007 fbcb 	bl	80128bc <tcp_sent>
    }
    if (shut_close) {
 800b126:	7dbb      	ldrb	r3, [r7, #22]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d008      	beq.n	800b13e <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800b12c:	2200      	movs	r2, #0
 800b12e:	2100      	movs	r1, #0
 800b130:	6938      	ldr	r0, [r7, #16]
 800b132:	f007 fc1f 	bl	8012974 <tcp_poll>
      tcp_err(tpcb, NULL);
 800b136:	2100      	movs	r1, #0
 800b138:	6938      	ldr	r0, [r7, #16]
 800b13a:	f007 fbe1 	bl	8012900 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800b13e:	7dbb      	ldrb	r3, [r7, #22]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d005      	beq.n	800b150 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800b144:	6938      	ldr	r0, [r7, #16]
 800b146:	f006 f9e1 	bl	801150c <tcp_close>
 800b14a:	4603      	mov	r3, r0
 800b14c:	75fb      	strb	r3, [r7, #23]
 800b14e:	e007      	b.n	800b160 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800b150:	7bbb      	ldrb	r3, [r7, #14]
 800b152:	7b7a      	ldrb	r2, [r7, #13]
 800b154:	4619      	mov	r1, r3
 800b156:	6938      	ldr	r0, [r7, #16]
 800b158:	f006 fa04 	bl	8011564 <tcp_shutdown>
 800b15c:	4603      	mov	r3, r0
 800b15e:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800b160:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d102      	bne.n	800b16e <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800b168:	2301      	movs	r3, #1
 800b16a:	757b      	strb	r3, [r7, #21]
 800b16c:	e016      	b.n	800b19c <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800b16e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b172:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b176:	d10f      	bne.n	800b198 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6a1b      	ldr	r3, [r3, #32]
 800b17c:	7a5b      	ldrb	r3, [r3, #9]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d10c      	bne.n	800b19c <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800b182:	2301      	movs	r3, #1
 800b184:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800b186:	7dbb      	ldrb	r3, [r7, #22]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d007      	beq.n	800b19c <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800b18c:	6938      	ldr	r0, [r7, #16]
 800b18e:	f006 fb03 	bl	8011798 <tcp_abort>
          err = ERR_OK;
 800b192:	2300      	movs	r3, #0
 800b194:	75fb      	strb	r3, [r7, #23]
 800b196:	e001      	b.n	800b19c <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800b198:	2301      	movs	r3, #1
 800b19a:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800b19c:	7d7b      	ldrb	r3, [r7, #21]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d052      	beq.n	800b248 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6a1b      	ldr	r3, [r3, #32]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	330c      	adds	r3, #12
 800b1aa:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6a1b      	ldr	r3, [r3, #32]
 800b1b0:	7dfa      	ldrb	r2, [r7, #23]
 800b1b2:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800b1c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d129      	bne.n	800b21c <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800b1c8:	7dbb      	ldrb	r3, [r7, #22]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d00c      	beq.n	800b1e8 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d005      	beq.n	800b1e8 <lwip_netconn_do_close_internal+0x1f0>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	2104      	movs	r1, #4
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	4798      	blx	r3
      }
      if (shut_rx) {
 800b1e8:	7bbb      	ldrb	r3, [r7, #14]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d009      	beq.n	800b202 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d005      	beq.n	800b202 <lwip_netconn_do_close_internal+0x20a>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	2100      	movs	r1, #0
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	4798      	blx	r3
      }
      if (shut_tx) {
 800b202:	7b7b      	ldrb	r3, [r7, #13]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d009      	beq.n	800b21c <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d005      	beq.n	800b21c <lwip_netconn_do_close_internal+0x224>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b214:	2200      	movs	r2, #0
 800b216:	2102      	movs	r1, #2
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b21c:	78fb      	ldrb	r3, [r7, #3]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d002      	beq.n	800b228 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800b222:	68b8      	ldr	r0, [r7, #8]
 800b224:	f010 f9e0 	bl	801b5e8 <sys_sem_signal>
    }
    return ERR_OK;
 800b228:	2300      	movs	r3, #0
 800b22a:	e03c      	b.n	800b2a6 <lwip_netconn_do_close_internal+0x2ae>
 800b22c:	080256f0 	.word	0x080256f0
 800b230:	080259c4 	.word	0x080259c4
 800b234:	08025734 	.word	0x08025734
 800b238:	080259d4 	.word	0x080259d4
 800b23c:	080259f4 	.word	0x080259f4
 800b240:	08025a18 	.word	0x08025a18
 800b244:	08025858 	.word	0x08025858
  }
  if (!close_finished) {
 800b248:	7d7b      	ldrb	r3, [r7, #21]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d11e      	bne.n	800b28c <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	7d1b      	ldrb	r3, [r3, #20]
 800b252:	2b01      	cmp	r3, #1
 800b254:	d106      	bne.n	800b264 <lwip_netconn_do_close_internal+0x26c>
 800b256:	4b16      	ldr	r3, [pc, #88]	; (800b2b0 <lwip_netconn_do_close_internal+0x2b8>)
 800b258:	f240 4241 	movw	r2, #1089	; 0x441
 800b25c:	4915      	ldr	r1, [pc, #84]	; (800b2b4 <lwip_netconn_do_close_internal+0x2bc>)
 800b25e:	4816      	ldr	r0, [pc, #88]	; (800b2b8 <lwip_netconn_do_close_internal+0x2c0>)
 800b260:	f018 fcbe 	bl	8023be0 <iprintf>
    if (shut_tx) {
 800b264:	7b7b      	ldrb	r3, [r7, #13]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d003      	beq.n	800b272 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800b26a:	4914      	ldr	r1, [pc, #80]	; (800b2bc <lwip_netconn_do_close_internal+0x2c4>)
 800b26c:	6938      	ldr	r0, [r7, #16]
 800b26e:	f007 fb25 	bl	80128bc <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800b272:	2201      	movs	r2, #1
 800b274:	4912      	ldr	r1, [pc, #72]	; (800b2c0 <lwip_netconn_do_close_internal+0x2c8>)
 800b276:	6938      	ldr	r0, [r7, #16]
 800b278:	f007 fb7c 	bl	8012974 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800b27c:	4911      	ldr	r1, [pc, #68]	; (800b2c4 <lwip_netconn_do_close_internal+0x2cc>)
 800b27e:	6938      	ldr	r0, [r7, #16]
 800b280:	f007 fb3e 	bl	8012900 <tcp_err>
    tcp_arg(tpcb, conn);
 800b284:	6879      	ldr	r1, [r7, #4]
 800b286:	6938      	ldr	r0, [r7, #16]
 800b288:	f007 fae4 	bl	8012854 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800b28c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d106      	bne.n	800b2a2 <lwip_netconn_do_close_internal+0x2aa>
 800b294:	4b06      	ldr	r3, [pc, #24]	; (800b2b0 <lwip_netconn_do_close_internal+0x2b8>)
 800b296:	f240 424d 	movw	r2, #1101	; 0x44d
 800b29a:	490b      	ldr	r1, [pc, #44]	; (800b2c8 <lwip_netconn_do_close_internal+0x2d0>)
 800b29c:	4806      	ldr	r0, [pc, #24]	; (800b2b8 <lwip_netconn_do_close_internal+0x2c0>)
 800b29e:	f018 fc9f 	bl	8023be0 <iprintf>
  return err;
 800b2a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3718      	adds	r7, #24
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
 800b2ae:	bf00      	nop
 800b2b0:	080256f0 	.word	0x080256f0
 800b2b4:	08025a2c 	.word	0x08025a2c
 800b2b8:	08025734 	.word	0x08025734
 800b2bc:	0800a9e9 	.word	0x0800a9e9
 800b2c0:	0800a921 	.word	0x0800a921
 800b2c4:	0800aa91 	.word	0x0800aa91
 800b2c8:	08025a50 	.word	0x08025a50

0800b2cc <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b084      	sub	sp, #16
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	785b      	ldrb	r3, [r3, #1]
 800b2de:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800b2e0:	7afb      	ldrb	r3, [r7, #11]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d00d      	beq.n	800b302 <lwip_netconn_do_delconn+0x36>
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	781b      	ldrb	r3, [r3, #0]
 800b2ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b2f0:	2b10      	cmp	r3, #16
 800b2f2:	d006      	beq.n	800b302 <lwip_netconn_do_delconn+0x36>
 800b2f4:	4b60      	ldr	r3, [pc, #384]	; (800b478 <lwip_netconn_do_delconn+0x1ac>)
 800b2f6:	f240 425e 	movw	r2, #1118	; 0x45e
 800b2fa:	4960      	ldr	r1, [pc, #384]	; (800b47c <lwip_netconn_do_delconn+0x1b0>)
 800b2fc:	4860      	ldr	r0, [pc, #384]	; (800b480 <lwip_netconn_do_delconn+0x1b4>)
 800b2fe:	f018 fc6f 	bl	8023be0 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800b302:	7afb      	ldrb	r3, [r7, #11]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d005      	beq.n	800b314 <lwip_netconn_do_delconn+0x48>
 800b308:	7afb      	ldrb	r3, [r7, #11]
 800b30a:	2b02      	cmp	r3, #2
 800b30c:	d002      	beq.n	800b314 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800b30e:	7afb      	ldrb	r3, [r7, #11]
 800b310:	2b03      	cmp	r3, #3
 800b312:	d109      	bne.n	800b328 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800b314:	7afb      	ldrb	r3, [r7, #11]
 800b316:	2b03      	cmp	r3, #3
 800b318:	d10a      	bne.n	800b330 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	7f1b      	ldrb	r3, [r3, #28]
 800b320:	f003 0304 	and.w	r3, r3, #4
 800b324:	2b00      	cmp	r3, #0
 800b326:	d103      	bne.n	800b330 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	22fb      	movs	r2, #251	; 0xfb
 800b32c:	711a      	strb	r2, [r3, #4]
 800b32e:	e097      	b.n	800b460 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800b330:	7afb      	ldrb	r3, [r7, #11]
 800b332:	2b03      	cmp	r3, #3
 800b334:	d10d      	bne.n	800b352 <lwip_netconn_do_delconn+0x86>
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	7f1b      	ldrb	r3, [r3, #28]
 800b33c:	f003 0304 	and.w	r3, r3, #4
 800b340:	2b00      	cmp	r3, #0
 800b342:	d106      	bne.n	800b352 <lwip_netconn_do_delconn+0x86>
 800b344:	4b4c      	ldr	r3, [pc, #304]	; (800b478 <lwip_netconn_do_delconn+0x1ac>)
 800b346:	f240 427a 	movw	r2, #1146	; 0x47a
 800b34a:	494e      	ldr	r1, [pc, #312]	; (800b484 <lwip_netconn_do_delconn+0x1b8>)
 800b34c:	484c      	ldr	r0, [pc, #304]	; (800b480 <lwip_netconn_do_delconn+0x1b4>)
 800b34e:	f018 fc47 	bl	8023be0 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2200      	movs	r2, #0
 800b356:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	4618      	mov	r0, r3
 800b35e:	f7ff fdcd 	bl	800aefc <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	685b      	ldr	r3, [r3, #4]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d05f      	beq.n	800b42c <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	781b      	ldrb	r3, [r3, #0]
 800b372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b376:	2b10      	cmp	r3, #16
 800b378:	d00d      	beq.n	800b396 <lwip_netconn_do_delconn+0xca>
 800b37a:	2b20      	cmp	r3, #32
 800b37c:	d151      	bne.n	800b422 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	2200      	movs	r2, #0
 800b386:	625a      	str	r2, [r3, #36]	; 0x24
          udp_remove(msg->conn->pcb.udp);
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	685b      	ldr	r3, [r3, #4]
 800b38e:	4618      	mov	r0, r3
 800b390:	f00c fdc4 	bl	8017f1c <udp_remove>
          break;
 800b394:	e046      	b.n	800b424 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	6a1b      	ldr	r3, [r3, #32]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d006      	beq.n	800b3ae <lwip_netconn_do_delconn+0xe2>
 800b3a0:	4b35      	ldr	r3, [pc, #212]	; (800b478 <lwip_netconn_do_delconn+0x1ac>)
 800b3a2:	f240 4294 	movw	r2, #1172	; 0x494
 800b3a6:	4938      	ldr	r1, [pc, #224]	; (800b488 <lwip_netconn_do_delconn+0x1bc>)
 800b3a8:	4835      	ldr	r0, [pc, #212]	; (800b480 <lwip_netconn_do_delconn+0x1b4>)
 800b3aa:	f018 fc19 	bl	8023be0 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	2204      	movs	r2, #4
 800b3b4:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2203      	movs	r2, #3
 800b3ba:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	68fa      	ldr	r2, [r7, #12]
 800b3c2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	2100      	movs	r1, #0
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f7ff fe14 	bl	800aff8 <lwip_netconn_do_close_internal>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d04b      	beq.n	800b46e <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	785b      	ldrb	r3, [r3, #1]
 800b3dc:	2b04      	cmp	r3, #4
 800b3de:	d006      	beq.n	800b3ee <lwip_netconn_do_delconn+0x122>
 800b3e0:	4b25      	ldr	r3, [pc, #148]	; (800b478 <lwip_netconn_do_delconn+0x1ac>)
 800b3e2:	f240 429a 	movw	r2, #1178	; 0x49a
 800b3e6:	4929      	ldr	r1, [pc, #164]	; (800b48c <lwip_netconn_do_delconn+0x1c0>)
 800b3e8:	4825      	ldr	r0, [pc, #148]	; (800b480 <lwip_netconn_do_delconn+0x1b4>)
 800b3ea:	f018 fbf9 	bl	8023be0 <iprintf>
            UNLOCK_TCPIP_CORE();
 800b3ee:	4828      	ldr	r0, [pc, #160]	; (800b490 <lwip_netconn_do_delconn+0x1c4>)
 800b3f0:	f010 f963 	bl	801b6ba <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	330c      	adds	r3, #12
 800b3fa:	2100      	movs	r1, #0
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f010 f8c2 	bl	801b586 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800b402:	4823      	ldr	r0, [pc, #140]	; (800b490 <lwip_netconn_do_delconn+0x1c4>)
 800b404:	f010 f94a 	bl	801b69c <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	785b      	ldrb	r3, [r3, #1]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d02d      	beq.n	800b46e <lwip_netconn_do_delconn+0x1a2>
 800b412:	4b19      	ldr	r3, [pc, #100]	; (800b478 <lwip_netconn_do_delconn+0x1ac>)
 800b414:	f240 429e 	movw	r2, #1182	; 0x49e
 800b418:	491c      	ldr	r1, [pc, #112]	; (800b48c <lwip_netconn_do_delconn+0x1c0>)
 800b41a:	4819      	ldr	r0, [pc, #100]	; (800b480 <lwip_netconn_do_delconn+0x1b4>)
 800b41c:	f018 fbe0 	bl	8023be0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800b420:	e025      	b.n	800b46e <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800b422:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	2200      	movs	r2, #0
 800b42a:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b432:	2b00      	cmp	r3, #0
 800b434:	d007      	beq.n	800b446 <lwip_netconn_do_delconn+0x17a>
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b43c:	68fa      	ldr	r2, [r7, #12]
 800b43e:	6810      	ldr	r0, [r2, #0]
 800b440:	2200      	movs	r2, #0
 800b442:	2100      	movs	r1, #0
 800b444:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d007      	beq.n	800b460 <lwip_netconn_do_delconn+0x194>
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b456:	68fa      	ldr	r2, [r7, #12]
 800b458:	6810      	ldr	r0, [r2, #0]
 800b45a:	2200      	movs	r2, #0
 800b45c:	2102      	movs	r1, #2
 800b45e:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	330c      	adds	r3, #12
 800b466:	4618      	mov	r0, r3
 800b468:	f010 f8d8 	bl	801b61c <sys_sem_valid>
 800b46c:	e000      	b.n	800b470 <lwip_netconn_do_delconn+0x1a4>
          return;
 800b46e:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800b470:	3710      	adds	r7, #16
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}
 800b476:	bf00      	nop
 800b478:	080256f0 	.word	0x080256f0
 800b47c:	08025a60 	.word	0x08025a60
 800b480:	08025734 	.word	0x08025734
 800b484:	08025a74 	.word	0x08025a74
 800b488:	08025a94 	.word	0x08025a94
 800b48c:	08025ab0 	.word	0x08025ab0
 800b490:	2000be54 	.word	0x2000be54

0800b494 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b088      	sub	sp, #32
 800b498:	af00      	add	r7, sp, #0
 800b49a:	60f8      	str	r0, [r7, #12]
 800b49c:	60b9      	str	r1, [r7, #8]
 800b49e:	4613      	mov	r3, r2
 800b4a0:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800b4aa:	69bb      	ldr	r3, [r7, #24]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d102      	bne.n	800b4b6 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800b4b0:	f06f 0305 	mvn.w	r3, #5
 800b4b4:	e070      	b.n	800b598 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800b4b6:	69bb      	ldr	r3, [r7, #24]
 800b4b8:	785b      	ldrb	r3, [r3, #1]
 800b4ba:	2b03      	cmp	r3, #3
 800b4bc:	d006      	beq.n	800b4cc <lwip_netconn_do_connected+0x38>
 800b4be:	4b38      	ldr	r3, [pc, #224]	; (800b5a0 <lwip_netconn_do_connected+0x10c>)
 800b4c0:	f240 5223 	movw	r2, #1315	; 0x523
 800b4c4:	4937      	ldr	r1, [pc, #220]	; (800b5a4 <lwip_netconn_do_connected+0x110>)
 800b4c6:	4838      	ldr	r0, [pc, #224]	; (800b5a8 <lwip_netconn_do_connected+0x114>)
 800b4c8:	f018 fb8a 	bl	8023be0 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800b4cc:	69bb      	ldr	r3, [r7, #24]
 800b4ce:	6a1b      	ldr	r3, [r3, #32]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d10c      	bne.n	800b4ee <lwip_netconn_do_connected+0x5a>
 800b4d4:	69bb      	ldr	r3, [r7, #24]
 800b4d6:	7f1b      	ldrb	r3, [r3, #28]
 800b4d8:	f003 0304 	and.w	r3, r3, #4
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d106      	bne.n	800b4ee <lwip_netconn_do_connected+0x5a>
 800b4e0:	4b2f      	ldr	r3, [pc, #188]	; (800b5a0 <lwip_netconn_do_connected+0x10c>)
 800b4e2:	f240 5224 	movw	r2, #1316	; 0x524
 800b4e6:	4931      	ldr	r1, [pc, #196]	; (800b5ac <lwip_netconn_do_connected+0x118>)
 800b4e8:	482f      	ldr	r0, [pc, #188]	; (800b5a8 <lwip_netconn_do_connected+0x114>)
 800b4ea:	f018 fb79 	bl	8023be0 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800b4ee:	69bb      	ldr	r3, [r7, #24]
 800b4f0:	6a1b      	ldr	r3, [r3, #32]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d008      	beq.n	800b508 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 800b4f6:	69bb      	ldr	r3, [r7, #24]
 800b4f8:	6a1b      	ldr	r3, [r3, #32]
 800b4fa:	79fa      	ldrb	r2, [r7, #7]
 800b4fc:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b4fe:	69bb      	ldr	r3, [r7, #24]
 800b500:	6a1b      	ldr	r3, [r3, #32]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	330c      	adds	r3, #12
 800b506:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800b508:	69bb      	ldr	r3, [r7, #24]
 800b50a:	781b      	ldrb	r3, [r3, #0]
 800b50c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b510:	2b10      	cmp	r3, #16
 800b512:	d106      	bne.n	800b522 <lwip_netconn_do_connected+0x8e>
 800b514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d102      	bne.n	800b522 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800b51c:	69b8      	ldr	r0, [r7, #24]
 800b51e:	f7ff fb8d 	bl	800ac3c <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800b522:	69bb      	ldr	r3, [r7, #24]
 800b524:	7f1b      	ldrb	r3, [r3, #28]
 800b526:	f003 0304 	and.w	r3, r3, #4
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	bf0c      	ite	eq
 800b52e:	2301      	moveq	r3, #1
 800b530:	2300      	movne	r3, #0
 800b532:	b2db      	uxtb	r3, r3
 800b534:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800b536:	69bb      	ldr	r3, [r7, #24]
 800b538:	7f1b      	ldrb	r3, [r3, #28]
 800b53a:	f023 0304 	bic.w	r3, r3, #4
 800b53e:	b2da      	uxtb	r2, r3
 800b540:	69bb      	ldr	r3, [r7, #24]
 800b542:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d002      	beq.n	800b550 <lwip_netconn_do_connected+0xbc>
 800b54a:	69fb      	ldr	r3, [r7, #28]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d10c      	bne.n	800b56a <lwip_netconn_do_connected+0xd6>
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d102      	bne.n	800b55c <lwip_netconn_do_connected+0xc8>
 800b556:	69fb      	ldr	r3, [r7, #28]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d006      	beq.n	800b56a <lwip_netconn_do_connected+0xd6>
 800b55c:	4b10      	ldr	r3, [pc, #64]	; (800b5a0 <lwip_netconn_do_connected+0x10c>)
 800b55e:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 800b562:	4913      	ldr	r1, [pc, #76]	; (800b5b0 <lwip_netconn_do_connected+0x11c>)
 800b564:	4810      	ldr	r0, [pc, #64]	; (800b5a8 <lwip_netconn_do_connected+0x114>)
 800b566:	f018 fb3b 	bl	8023be0 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800b56a:	69bb      	ldr	r3, [r7, #24]
 800b56c:	2200      	movs	r2, #0
 800b56e:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 800b570:	69bb      	ldr	r3, [r7, #24]
 800b572:	2200      	movs	r2, #0
 800b574:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b576:	69bb      	ldr	r3, [r7, #24]
 800b578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d005      	beq.n	800b58a <lwip_netconn_do_connected+0xf6>
 800b57e:	69bb      	ldr	r3, [r7, #24]
 800b580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b582:	2200      	movs	r2, #0
 800b584:	2102      	movs	r1, #2
 800b586:	69b8      	ldr	r0, [r7, #24]
 800b588:	4798      	blx	r3

  if (was_blocking) {
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d002      	beq.n	800b596 <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 800b590:	69f8      	ldr	r0, [r7, #28]
 800b592:	f010 f829 	bl	801b5e8 <sys_sem_signal>
  }
  return ERR_OK;
 800b596:	2300      	movs	r3, #0
}
 800b598:	4618      	mov	r0, r3
 800b59a:	3720      	adds	r7, #32
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}
 800b5a0:	080256f0 	.word	0x080256f0
 800b5a4:	08025ab8 	.word	0x08025ab8
 800b5a8:	08025734 	.word	0x08025734
 800b5ac:	08025ad8 	.word	0x08025ad8
 800b5b0:	08025b18 	.word	0x08025b18

0800b5b4 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b086      	sub	sp, #24
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	685b      	ldr	r3, [r3, #4]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d102      	bne.n	800b5d0 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800b5ca:	23f1      	movs	r3, #241	; 0xf1
 800b5cc:	75fb      	strb	r3, [r7, #23]
 800b5ce:	e09b      	b.n	800b708 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	781b      	ldrb	r3, [r3, #0]
 800b5d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b5da:	2b10      	cmp	r3, #16
 800b5dc:	d00f      	beq.n	800b5fe <lwip_netconn_do_connect+0x4a>
 800b5de:	2b20      	cmp	r3, #32
 800b5e0:	f040 8087 	bne.w	800b6f2 <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	6858      	ldr	r0, [r3, #4]
 800b5ea:	693b      	ldr	r3, [r7, #16]
 800b5ec:	6899      	ldr	r1, [r3, #8]
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	899b      	ldrh	r3, [r3, #12]
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	f00c fbdc 	bl	8017db0 <udp_connect>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	75fb      	strb	r3, [r7, #23]
        break;
 800b5fc:	e084      	b.n	800b708 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	785b      	ldrb	r3, [r3, #1]
 800b604:	2b03      	cmp	r3, #3
 800b606:	d102      	bne.n	800b60e <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 800b608:	23f7      	movs	r3, #247	; 0xf7
 800b60a:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800b60c:	e07b      	b.n	800b706 <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	785b      	ldrb	r3, [r3, #1]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d002      	beq.n	800b61e <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 800b618:	23f6      	movs	r3, #246	; 0xf6
 800b61a:	75fb      	strb	r3, [r7, #23]
        break;
 800b61c:	e073      	b.n	800b706 <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	4618      	mov	r0, r3
 800b624:	f7ff fb0a 	bl	800ac3c <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	6858      	ldr	r0, [r3, #4]
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	6899      	ldr	r1, [r3, #8]
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	899a      	ldrh	r2, [r3, #12]
 800b636:	4b38      	ldr	r3, [pc, #224]	; (800b718 <lwip_netconn_do_connect+0x164>)
 800b638:	f006 f9c4 	bl	80119c4 <tcp_connect>
 800b63c:	4603      	mov	r3, r0
 800b63e:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800b640:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d15e      	bne.n	800b706 <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	7f1b      	ldrb	r3, [r3, #28]
 800b64e:	f003 0302 	and.w	r3, r3, #2
 800b652:	2b00      	cmp	r3, #0
 800b654:	bf14      	ite	ne
 800b656:	2301      	movne	r3, #1
 800b658:	2300      	moveq	r3, #0
 800b65a:	b2db      	uxtb	r3, r3
 800b65c:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	2203      	movs	r2, #3
 800b664:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800b666:	7bfb      	ldrb	r3, [r7, #15]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d009      	beq.n	800b680 <lwip_netconn_do_connect+0xcc>
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	7f1a      	ldrb	r2, [r3, #28]
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f042 0204 	orr.w	r2, r2, #4
 800b67a:	b2d2      	uxtb	r2, r2
 800b67c:	771a      	strb	r2, [r3, #28]
 800b67e:	e008      	b.n	800b692 <lwip_netconn_do_connect+0xde>
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	7f1a      	ldrb	r2, [r3, #28]
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f022 0204 	bic.w	r2, r2, #4
 800b68e:	b2d2      	uxtb	r2, r2
 800b690:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 800b692:	7bfb      	ldrb	r3, [r7, #15]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d002      	beq.n	800b69e <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 800b698:	23fb      	movs	r3, #251	; 0xfb
 800b69a:	75fb      	strb	r3, [r7, #23]
        break;
 800b69c:	e033      	b.n	800b706 <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	693a      	ldr	r2, [r7, #16]
 800b6a4:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800b6a6:	693b      	ldr	r3, [r7, #16]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	785b      	ldrb	r3, [r3, #1]
 800b6ac:	2b03      	cmp	r3, #3
 800b6ae:	d006      	beq.n	800b6be <lwip_netconn_do_connect+0x10a>
 800b6b0:	4b1a      	ldr	r3, [pc, #104]	; (800b71c <lwip_netconn_do_connect+0x168>)
 800b6b2:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800b6b6:	491a      	ldr	r1, [pc, #104]	; (800b720 <lwip_netconn_do_connect+0x16c>)
 800b6b8:	481a      	ldr	r0, [pc, #104]	; (800b724 <lwip_netconn_do_connect+0x170>)
 800b6ba:	f018 fa91 	bl	8023be0 <iprintf>
              UNLOCK_TCPIP_CORE();
 800b6be:	481a      	ldr	r0, [pc, #104]	; (800b728 <lwip_netconn_do_connect+0x174>)
 800b6c0:	f00f fffb 	bl	801b6ba <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	330c      	adds	r3, #12
 800b6ca:	2100      	movs	r1, #0
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f00f ff5a 	bl	801b586 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800b6d2:	4815      	ldr	r0, [pc, #84]	; (800b728 <lwip_netconn_do_connect+0x174>)
 800b6d4:	f00f ffe2 	bl	801b69c <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	785b      	ldrb	r3, [r3, #1]
 800b6de:	2b03      	cmp	r3, #3
 800b6e0:	d116      	bne.n	800b710 <lwip_netconn_do_connect+0x15c>
 800b6e2:	4b0e      	ldr	r3, [pc, #56]	; (800b71c <lwip_netconn_do_connect+0x168>)
 800b6e4:	f240 5274 	movw	r2, #1396	; 0x574
 800b6e8:	490d      	ldr	r1, [pc, #52]	; (800b720 <lwip_netconn_do_connect+0x16c>)
 800b6ea:	480e      	ldr	r0, [pc, #56]	; (800b724 <lwip_netconn_do_connect+0x170>)
 800b6ec:	f018 fa78 	bl	8023be0 <iprintf>
              return;
 800b6f0:	e00e      	b.n	800b710 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800b6f2:	4b0a      	ldr	r3, [pc, #40]	; (800b71c <lwip_netconn_do_connect+0x168>)
 800b6f4:	f240 527d 	movw	r2, #1405	; 0x57d
 800b6f8:	490c      	ldr	r1, [pc, #48]	; (800b72c <lwip_netconn_do_connect+0x178>)
 800b6fa:	480a      	ldr	r0, [pc, #40]	; (800b724 <lwip_netconn_do_connect+0x170>)
 800b6fc:	f018 fa70 	bl	8023be0 <iprintf>
 800b700:	23fa      	movs	r3, #250	; 0xfa
 800b702:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800b704:	e000      	b.n	800b708 <lwip_netconn_do_connect+0x154>
        break;
 800b706:	bf00      	nop
    }
  }
  msg->err = err;
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	7dfa      	ldrb	r2, [r7, #23]
 800b70c:	711a      	strb	r2, [r3, #4]
 800b70e:	e000      	b.n	800b712 <lwip_netconn_do_connect+0x15e>
              return;
 800b710:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800b712:	3718      	adds	r7, #24
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}
 800b718:	0800b495 	.word	0x0800b495
 800b71c:	080256f0 	.word	0x080256f0
 800b720:	08025ab0 	.word	0x08025ab0
 800b724:	08025734 	.word	0x08025734
 800b728:	2000be54 	.word	0x2000be54
 800b72c:	08025b38 	.word	0x08025b38

0800b730 <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b084      	sub	sp, #16
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	60fb      	str	r3, [r7, #12]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	781b      	ldrb	r3, [r3, #0]
 800b742:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b746:	2b20      	cmp	r3, #32
 800b748:	d109      	bne.n	800b75e <lwip_netconn_do_disconnect+0x2e>
    udp_disconnect(msg->conn->pcb.udp);
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	685b      	ldr	r3, [r3, #4]
 800b750:	4618      	mov	r0, r3
 800b752:	f00c fb9b 	bl	8017e8c <udp_disconnect>
    msg->err = ERR_OK;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	2200      	movs	r2, #0
 800b75a:	711a      	strb	r2, [r3, #4]
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b75c:	e002      	b.n	800b764 <lwip_netconn_do_disconnect+0x34>
    msg->err = ERR_VAL;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	22fa      	movs	r2, #250	; 0xfa
 800b762:	711a      	strb	r2, [r3, #4]
}
 800b764:	bf00      	nop
 800b766:	3710      	adds	r7, #16
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}

0800b76c <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b084      	sub	sp, #16
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	4618      	mov	r0, r3
 800b77e:	f7fe fea3 	bl	800a4c8 <netconn_err>
 800b782:	4603      	mov	r3, r0
 800b784:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d134      	bne.n	800b7f8 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d02d      	beq.n	800b7f4 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	781b      	ldrb	r3, [r3, #0]
 800b79e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b7a2:	2b20      	cmp	r3, #32
 800b7a4:	d123      	bne.n	800b7ee <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	689b      	ldr	r3, [r3, #8]
 800b7aa:	689b      	ldr	r3, [r3, #8]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d10c      	bne.n	800b7ca <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	685a      	ldr	r2, [r3, #4]
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	689b      	ldr	r3, [r3, #8]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	4619      	mov	r1, r3
 800b7be:	4610      	mov	r0, r2
 800b7c0:	f00c f826 	bl	8017810 <udp_send>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800b7c8:	e016      	b.n	800b7f8 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	6858      	ldr	r0, [r3, #4]
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	689b      	ldr	r3, [r3, #8]
 800b7d4:	6819      	ldr	r1, [r3, #0]
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	689b      	ldr	r3, [r3, #8]
 800b7da:	f103 0208 	add.w	r2, r3, #8
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	689b      	ldr	r3, [r3, #8]
 800b7e2:	899b      	ldrh	r3, [r3, #12]
 800b7e4:	f00c f848 	bl	8017878 <udp_sendto>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	73fb      	strb	r3, [r7, #15]
          break;
 800b7ec:	e004      	b.n	800b7f8 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800b7ee:	23f5      	movs	r3, #245	; 0xf5
 800b7f0:	73fb      	strb	r3, [r7, #15]
          break;
 800b7f2:	e001      	b.n	800b7f8 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800b7f4:	23f5      	movs	r3, #245	; 0xf5
 800b7f6:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	7bfa      	ldrb	r2, [r7, #15]
 800b7fc:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800b7fe:	bf00      	nop
 800b800:	3710      	adds	r7, #16
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}

0800b806 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800b806:	b580      	push	{r7, lr}
 800b808:	b086      	sub	sp, #24
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	2200      	movs	r2, #0
 800b816:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d022      	beq.n	800b868 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	781b      	ldrb	r3, [r3, #0]
 800b828:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b82c:	2b10      	cmp	r3, #16
 800b82e:	d11b      	bne.n	800b868 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	689b      	ldr	r3, [r3, #8]
 800b834:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b83c:	d202      	bcs.n	800b844 <lwip_netconn_do_recv+0x3e>
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	b29b      	uxth	r3, r3
 800b842:	e001      	b.n	800b848 <lwip_netconn_do_recv+0x42>
 800b844:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b848:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	89fa      	ldrh	r2, [r7, #14]
 800b852:	4611      	mov	r1, r2
 800b854:	4618      	mov	r0, r3
 800b856:	f006 f81f 	bl	8011898 <tcp_recved>
        remaining -= recved;
 800b85a:	89fb      	ldrh	r3, [r7, #14]
 800b85c:	697a      	ldr	r2, [r7, #20]
 800b85e:	1ad3      	subs	r3, r2, r3
 800b860:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d1e6      	bne.n	800b836 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b868:	bf00      	nop
 800b86a:	3718      	adds	r7, #24
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}

0800b870 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b088      	sub	sp, #32
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
 800b878:	460b      	mov	r3, r1
 800b87a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800b87c:	2300      	movs	r3, #0
 800b87e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d106      	bne.n	800b894 <lwip_netconn_do_writemore+0x24>
 800b886:	4b96      	ldr	r3, [pc, #600]	; (800bae0 <lwip_netconn_do_writemore+0x270>)
 800b888:	f240 6273 	movw	r2, #1651	; 0x673
 800b88c:	4995      	ldr	r1, [pc, #596]	; (800bae4 <lwip_netconn_do_writemore+0x274>)
 800b88e:	4896      	ldr	r0, [pc, #600]	; (800bae8 <lwip_netconn_do_writemore+0x278>)
 800b890:	f018 f9a6 	bl	8023be0 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	785b      	ldrb	r3, [r3, #1]
 800b898:	2b01      	cmp	r3, #1
 800b89a:	d006      	beq.n	800b8aa <lwip_netconn_do_writemore+0x3a>
 800b89c:	4b90      	ldr	r3, [pc, #576]	; (800bae0 <lwip_netconn_do_writemore+0x270>)
 800b89e:	f240 6274 	movw	r2, #1652	; 0x674
 800b8a2:	4992      	ldr	r1, [pc, #584]	; (800baec <lwip_netconn_do_writemore+0x27c>)
 800b8a4:	4890      	ldr	r0, [pc, #576]	; (800bae8 <lwip_netconn_do_writemore+0x278>)
 800b8a6:	f018 f99b 	bl	8023be0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6a1b      	ldr	r3, [r3, #32]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d106      	bne.n	800b8c0 <lwip_netconn_do_writemore+0x50>
 800b8b2:	4b8b      	ldr	r3, [pc, #556]	; (800bae0 <lwip_netconn_do_writemore+0x270>)
 800b8b4:	f240 6275 	movw	r2, #1653	; 0x675
 800b8b8:	498d      	ldr	r1, [pc, #564]	; (800baf0 <lwip_netconn_do_writemore+0x280>)
 800b8ba:	488b      	ldr	r0, [pc, #556]	; (800bae8 <lwip_netconn_do_writemore+0x278>)
 800b8bc:	f018 f990 	bl	8023be0 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	685b      	ldr	r3, [r3, #4]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d106      	bne.n	800b8d6 <lwip_netconn_do_writemore+0x66>
 800b8c8:	4b85      	ldr	r3, [pc, #532]	; (800bae0 <lwip_netconn_do_writemore+0x270>)
 800b8ca:	f240 6276 	movw	r2, #1654	; 0x676
 800b8ce:	4989      	ldr	r1, [pc, #548]	; (800baf4 <lwip_netconn_do_writemore+0x284>)
 800b8d0:	4885      	ldr	r0, [pc, #532]	; (800bae8 <lwip_netconn_do_writemore+0x278>)
 800b8d2:	f018 f985 	bl	8023be0 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6a1b      	ldr	r3, [r3, #32]
 800b8da:	699a      	ldr	r2, [r3, #24]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	6a1b      	ldr	r3, [r3, #32]
 800b8e0:	695b      	ldr	r3, [r3, #20]
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d306      	bcc.n	800b8f4 <lwip_netconn_do_writemore+0x84>
 800b8e6:	4b7e      	ldr	r3, [pc, #504]	; (800bae0 <lwip_netconn_do_writemore+0x270>)
 800b8e8:	f240 6277 	movw	r2, #1655	; 0x677
 800b8ec:	4982      	ldr	r1, [pc, #520]	; (800baf8 <lwip_netconn_do_writemore+0x288>)
 800b8ee:	487e      	ldr	r0, [pc, #504]	; (800bae8 <lwip_netconn_do_writemore+0x278>)
 800b8f0:	f018 f976 	bl	8023be0 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6a1b      	ldr	r3, [r3, #32]
 800b8f8:	899b      	ldrh	r3, [r3, #12]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d106      	bne.n	800b90c <lwip_netconn_do_writemore+0x9c>
 800b8fe:	4b78      	ldr	r3, [pc, #480]	; (800bae0 <lwip_netconn_do_writemore+0x270>)
 800b900:	f240 6279 	movw	r2, #1657	; 0x679
 800b904:	497d      	ldr	r1, [pc, #500]	; (800bafc <lwip_netconn_do_writemore+0x28c>)
 800b906:	4878      	ldr	r0, [pc, #480]	; (800bae8 <lwip_netconn_do_writemore+0x278>)
 800b908:	f018 f96a 	bl	8023be0 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6a1b      	ldr	r3, [r3, #32]
 800b910:	7f1b      	ldrb	r3, [r3, #28]
 800b912:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	7f1b      	ldrb	r3, [r3, #28]
 800b918:	f003 0302 	and.w	r3, r3, #2
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d104      	bne.n	800b92a <lwip_netconn_do_writemore+0xba>
 800b920:	7ebb      	ldrb	r3, [r7, #26]
 800b922:	f003 0304 	and.w	r3, r3, #4
 800b926:	2b00      	cmp	r3, #0
 800b928:	d001      	beq.n	800b92e <lwip_netconn_do_writemore+0xbe>
 800b92a:	2301      	movs	r3, #1
 800b92c:	e000      	b.n	800b930 <lwip_netconn_do_writemore+0xc0>
 800b92e:	2300      	movs	r3, #0
 800b930:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	6a1b      	ldr	r3, [r3, #32]
 800b936:	689b      	ldr	r3, [r3, #8]
 800b938:	681a      	ldr	r2, [r3, #0]
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6a1b      	ldr	r3, [r3, #32]
 800b93e:	691b      	ldr	r3, [r3, #16]
 800b940:	4413      	add	r3, r2
 800b942:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6a1b      	ldr	r3, [r3, #32]
 800b948:	689b      	ldr	r3, [r3, #8]
 800b94a:	685a      	ldr	r2, [r3, #4]
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6a1b      	ldr	r3, [r3, #32]
 800b950:	691b      	ldr	r3, [r3, #16]
 800b952:	1ad3      	subs	r3, r2, r3
 800b954:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b95c:	d307      	bcc.n	800b96e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800b95e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b962:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b964:	7ebb      	ldrb	r3, [r7, #26]
 800b966:	f043 0302 	orr.w	r3, r3, #2
 800b96a:	76bb      	strb	r3, [r7, #26]
 800b96c:	e001      	b.n	800b972 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b97a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800b97c:	89fa      	ldrh	r2, [r7, #14]
 800b97e:	8bbb      	ldrh	r3, [r7, #28]
 800b980:	429a      	cmp	r2, r3
 800b982:	d216      	bcs.n	800b9b2 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800b984:	89fb      	ldrh	r3, [r7, #14]
 800b986:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800b988:	7e3b      	ldrb	r3, [r7, #24]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d00d      	beq.n	800b9aa <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800b98e:	8bbb      	ldrh	r3, [r7, #28]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d10e      	bne.n	800b9b2 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6a1b      	ldr	r3, [r3, #32]
 800b998:	699b      	ldr	r3, [r3, #24]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d102      	bne.n	800b9a4 <lwip_netconn_do_writemore+0x134>
 800b99e:	f06f 0306 	mvn.w	r3, #6
 800b9a2:	e000      	b.n	800b9a6 <lwip_netconn_do_writemore+0x136>
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800b9a8:	e07d      	b.n	800baa6 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800b9aa:	7ebb      	ldrb	r3, [r7, #26]
 800b9ac:	f043 0302 	orr.w	r3, r3, #2
 800b9b0:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6a1b      	ldr	r3, [r3, #32]
 800b9b6:	691a      	ldr	r2, [r3, #16]
 800b9b8:	8bbb      	ldrh	r3, [r7, #28]
 800b9ba:	441a      	add	r2, r3
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6a1b      	ldr	r3, [r3, #32]
 800b9c0:	689b      	ldr	r3, [r3, #8]
 800b9c2:	685b      	ldr	r3, [r3, #4]
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	d906      	bls.n	800b9d6 <lwip_netconn_do_writemore+0x166>
 800b9c8:	4b45      	ldr	r3, [pc, #276]	; (800bae0 <lwip_netconn_do_writemore+0x270>)
 800b9ca:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800b9ce:	494c      	ldr	r1, [pc, #304]	; (800bb00 <lwip_netconn_do_writemore+0x290>)
 800b9d0:	4845      	ldr	r0, [pc, #276]	; (800bae8 <lwip_netconn_do_writemore+0x278>)
 800b9d2:	f018 f905 	bl	8023be0 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b9d6:	8bbb      	ldrh	r3, [r7, #28]
 800b9d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b9dc:	4293      	cmp	r3, r2
 800b9de:	d103      	bne.n	800b9e8 <lwip_netconn_do_writemore+0x178>
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9e6:	d209      	bcs.n	800b9fc <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b9ec:	8bba      	ldrh	r2, [r7, #28]
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d10b      	bne.n	800ba0a <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6a1b      	ldr	r3, [r3, #32]
 800b9f6:	899b      	ldrh	r3, [r3, #12]
 800b9f8:	2b01      	cmp	r3, #1
 800b9fa:	d906      	bls.n	800ba0a <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800ba00:	7ebb      	ldrb	r3, [r7, #26]
 800ba02:	f043 0302 	orr.w	r3, r3, #2
 800ba06:	76bb      	strb	r3, [r7, #26]
 800ba08:	e001      	b.n	800ba0e <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6858      	ldr	r0, [r3, #4]
 800ba12:	7ebb      	ldrb	r3, [r7, #26]
 800ba14:	8bba      	ldrh	r2, [r7, #28]
 800ba16:	6979      	ldr	r1, [r7, #20]
 800ba18:	f009 fe5e 	bl	80156d8 <tcp_write>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800ba20:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d12c      	bne.n	800ba82 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6a1b      	ldr	r3, [r3, #32]
 800ba2c:	6999      	ldr	r1, [r3, #24]
 800ba2e:	8bba      	ldrh	r2, [r7, #28]
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6a1b      	ldr	r3, [r3, #32]
 800ba34:	440a      	add	r2, r1
 800ba36:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6a1b      	ldr	r3, [r3, #32]
 800ba3c:	6919      	ldr	r1, [r3, #16]
 800ba3e:	8bba      	ldrh	r2, [r7, #28]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6a1b      	ldr	r3, [r3, #32]
 800ba44:	440a      	add	r2, r1
 800ba46:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6a1b      	ldr	r3, [r3, #32]
 800ba4c:	691a      	ldr	r2, [r3, #16]
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6a1b      	ldr	r3, [r3, #32]
 800ba52:	689b      	ldr	r3, [r3, #8]
 800ba54:	685b      	ldr	r3, [r3, #4]
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d113      	bne.n	800ba82 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6a1b      	ldr	r3, [r3, #32]
 800ba5e:	899a      	ldrh	r2, [r3, #12]
 800ba60:	3a01      	subs	r2, #1
 800ba62:	b292      	uxth	r2, r2
 800ba64:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6a1b      	ldr	r3, [r3, #32]
 800ba6a:	899b      	ldrh	r3, [r3, #12]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d008      	beq.n	800ba82 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6a1b      	ldr	r3, [r3, #32]
 800ba74:	689a      	ldr	r2, [r3, #8]
 800ba76:	3208      	adds	r2, #8
 800ba78:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6a1b      	ldr	r3, [r3, #32]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800ba82:	7e7b      	ldrb	r3, [r7, #25]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d004      	beq.n	800ba92 <lwip_netconn_do_writemore+0x222>
 800ba88:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	f43f af50 	beq.w	800b932 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800ba92:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d004      	beq.n	800baa4 <lwip_netconn_do_writemore+0x234>
 800ba9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ba9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800baa2:	d146      	bne.n	800bb32 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800baa4:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800baa6:	7e3b      	ldrb	r3, [r7, #24]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d02b      	beq.n	800bb04 <lwip_netconn_do_writemore+0x294>
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6a1b      	ldr	r3, [r3, #32]
 800bab0:	699a      	ldr	r2, [r3, #24]
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6a1b      	ldr	r3, [r3, #32]
 800bab6:	695b      	ldr	r3, [r3, #20]
 800bab8:	429a      	cmp	r2, r3
 800baba:	d223      	bcs.n	800bb04 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d005      	beq.n	800bad0 <lwip_netconn_do_writemore+0x260>
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac8:	2200      	movs	r2, #0
 800baca:	2103      	movs	r1, #3
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	7f1b      	ldrb	r3, [r3, #28]
 800bad4:	f043 0310 	orr.w	r3, r3, #16
 800bad8:	b2da      	uxtb	r2, r3
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	771a      	strb	r2, [r3, #28]
 800bade:	e028      	b.n	800bb32 <lwip_netconn_do_writemore+0x2c2>
 800bae0:	080256f0 	.word	0x080256f0
 800bae4:	08025848 	.word	0x08025848
 800bae8:	08025734 	.word	0x08025734
 800baec:	08025b50 	.word	0x08025b50
 800baf0:	08025858 	.word	0x08025858
 800baf4:	08025b70 	.word	0x08025b70
 800baf8:	08025b88 	.word	0x08025b88
 800bafc:	08025bc8 	.word	0x08025bc8
 800bb00:	08025bf0 	.word	0x08025bf0
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	685b      	ldr	r3, [r3, #4]
 800bb08:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800bb0c:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800bb10:	d305      	bcc.n	800bb1e <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	685b      	ldr	r3, [r3, #4]
 800bb16:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800bb1a:	2b04      	cmp	r3, #4
 800bb1c:	d909      	bls.n	800bb32 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d005      	beq.n	800bb32 <lwip_netconn_do_writemore+0x2c2>
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	2103      	movs	r1, #3
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800bb32:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d11d      	bne.n	800bb76 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6a1b      	ldr	r3, [r3, #32]
 800bb3e:	699a      	ldr	r2, [r3, #24]
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6a1b      	ldr	r3, [r3, #32]
 800bb44:	695b      	ldr	r3, [r3, #20]
 800bb46:	429a      	cmp	r2, r3
 800bb48:	d002      	beq.n	800bb50 <lwip_netconn_do_writemore+0x2e0>
 800bb4a:	7e3b      	ldrb	r3, [r7, #24]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d001      	beq.n	800bb54 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800bb50:	2301      	movs	r3, #1
 800bb52:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	685b      	ldr	r3, [r3, #4]
 800bb58:	4618      	mov	r0, r3
 800bb5a:	f00a fba7 	bl	80162ac <tcp_output>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800bb62:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800bb66:	f113 0f04 	cmn.w	r3, #4
 800bb6a:	d12c      	bne.n	800bbc6 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800bb6c:	7b3b      	ldrb	r3, [r7, #12]
 800bb6e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800bb70:	2301      	movs	r3, #1
 800bb72:	76fb      	strb	r3, [r7, #27]
 800bb74:	e027      	b.n	800bbc6 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800bb76:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bb7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb7e:	d120      	bne.n	800bbc2 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	685b      	ldr	r3, [r3, #4]
 800bb84:	4618      	mov	r0, r3
 800bb86:	f00a fb91 	bl	80162ac <tcp_output>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800bb8e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800bb92:	f113 0f04 	cmn.w	r3, #4
 800bb96:	d104      	bne.n	800bba2 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800bb98:	7b7b      	ldrb	r3, [r7, #13]
 800bb9a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	76fb      	strb	r3, [r7, #27]
 800bba0:	e011      	b.n	800bbc6 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800bba2:	7e3b      	ldrb	r3, [r7, #24]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d00e      	beq.n	800bbc6 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6a1b      	ldr	r3, [r3, #32]
 800bbac:	699b      	ldr	r3, [r3, #24]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d102      	bne.n	800bbb8 <lwip_netconn_do_writemore+0x348>
 800bbb2:	f06f 0306 	mvn.w	r3, #6
 800bbb6:	e000      	b.n	800bbba <lwip_netconn_do_writemore+0x34a>
 800bbb8:	2300      	movs	r3, #0
 800bbba:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	76fb      	strb	r3, [r7, #27]
 800bbc0:	e001      	b.n	800bbc6 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800bbc6:	7efb      	ldrb	r3, [r7, #27]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d015      	beq.n	800bbf8 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6a1b      	ldr	r3, [r3, #32]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	330c      	adds	r3, #12
 800bbd4:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6a1b      	ldr	r3, [r3, #32]
 800bbda:	7ffa      	ldrb	r2, [r7, #31]
 800bbdc:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800bbea:	78fb      	ldrb	r3, [r7, #3]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d006      	beq.n	800bbfe <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800bbf0:	68b8      	ldr	r0, [r7, #8]
 800bbf2:	f00f fcf9 	bl	801b5e8 <sys_sem_signal>
 800bbf6:	e002      	b.n	800bbfe <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800bbf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bbfc:	e000      	b.n	800bc00 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800bbfe:	2300      	movs	r3, #0
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	3720      	adds	r7, #32
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b084      	sub	sp, #16
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	4618      	mov	r0, r3
 800bc1a:	f7fe fc55 	bl	800a4c8 <netconn_err>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800bc22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d166      	bne.n	800bcf8 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	781b      	ldrb	r3, [r3, #0]
 800bc30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bc34:	2b10      	cmp	r3, #16
 800bc36:	d15d      	bne.n	800bcf4 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	785b      	ldrb	r3, [r3, #1]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d002      	beq.n	800bc48 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800bc42:	23fb      	movs	r3, #251	; 0xfb
 800bc44:	73fb      	strb	r3, [r7, #15]
 800bc46:	e057      	b.n	800bcf8 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	685b      	ldr	r3, [r3, #4]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d04d      	beq.n	800bcee <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	2201      	movs	r2, #1
 800bc58:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	6a1b      	ldr	r3, [r3, #32]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d006      	beq.n	800bc72 <lwip_netconn_do_write+0x6a>
 800bc64:	4b28      	ldr	r3, [pc, #160]	; (800bd08 <lwip_netconn_do_write+0x100>)
 800bc66:	f240 7223 	movw	r2, #1827	; 0x723
 800bc6a:	4928      	ldr	r1, [pc, #160]	; (800bd0c <lwip_netconn_do_write+0x104>)
 800bc6c:	4828      	ldr	r0, [pc, #160]	; (800bd10 <lwip_netconn_do_write+0x108>)
 800bc6e:	f017 ffb7 	bl	8023be0 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	695b      	ldr	r3, [r3, #20]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d106      	bne.n	800bc88 <lwip_netconn_do_write+0x80>
 800bc7a:	4b23      	ldr	r3, [pc, #140]	; (800bd08 <lwip_netconn_do_write+0x100>)
 800bc7c:	f240 7224 	movw	r2, #1828	; 0x724
 800bc80:	4924      	ldr	r1, [pc, #144]	; (800bd14 <lwip_netconn_do_write+0x10c>)
 800bc82:	4823      	ldr	r0, [pc, #140]	; (800bd10 <lwip_netconn_do_write+0x108>)
 800bc84:	f017 ffac 	bl	8023be0 <iprintf>
        msg->conn->current_msg = msg;
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	68ba      	ldr	r2, [r7, #8]
 800bc8e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	2100      	movs	r1, #0
 800bc96:	4618      	mov	r0, r3
 800bc98:	f7ff fdea 	bl	800b870 <lwip_netconn_do_writemore>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d02e      	beq.n	800bd00 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	785b      	ldrb	r3, [r3, #1]
 800bca8:	2b01      	cmp	r3, #1
 800bcaa:	d006      	beq.n	800bcba <lwip_netconn_do_write+0xb2>
 800bcac:	4b16      	ldr	r3, [pc, #88]	; (800bd08 <lwip_netconn_do_write+0x100>)
 800bcae:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800bcb2:	4919      	ldr	r1, [pc, #100]	; (800bd18 <lwip_netconn_do_write+0x110>)
 800bcb4:	4816      	ldr	r0, [pc, #88]	; (800bd10 <lwip_netconn_do_write+0x108>)
 800bcb6:	f017 ff93 	bl	8023be0 <iprintf>
          UNLOCK_TCPIP_CORE();
 800bcba:	4818      	ldr	r0, [pc, #96]	; (800bd1c <lwip_netconn_do_write+0x114>)
 800bcbc:	f00f fcfd 	bl	801b6ba <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	330c      	adds	r3, #12
 800bcc6:	2100      	movs	r1, #0
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f00f fc5c 	bl	801b586 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800bcce:	4813      	ldr	r0, [pc, #76]	; (800bd1c <lwip_netconn_do_write+0x114>)
 800bcd0:	f00f fce4 	bl	801b69c <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	785b      	ldrb	r3, [r3, #1]
 800bcda:	2b01      	cmp	r3, #1
 800bcdc:	d110      	bne.n	800bd00 <lwip_netconn_do_write+0xf8>
 800bcde:	4b0a      	ldr	r3, [pc, #40]	; (800bd08 <lwip_netconn_do_write+0x100>)
 800bce0:	f240 722c 	movw	r2, #1836	; 0x72c
 800bce4:	490c      	ldr	r1, [pc, #48]	; (800bd18 <lwip_netconn_do_write+0x110>)
 800bce6:	480a      	ldr	r0, [pc, #40]	; (800bd10 <lwip_netconn_do_write+0x108>)
 800bce8:	f017 ff7a 	bl	8023be0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800bcec:	e008      	b.n	800bd00 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800bcee:	23f5      	movs	r3, #245	; 0xf5
 800bcf0:	73fb      	strb	r3, [r7, #15]
 800bcf2:	e001      	b.n	800bcf8 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800bcf4:	23fa      	movs	r3, #250	; 0xfa
 800bcf6:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	7bfa      	ldrb	r2, [r7, #15]
 800bcfc:	711a      	strb	r2, [r3, #4]
 800bcfe:	e000      	b.n	800bd02 <lwip_netconn_do_write+0xfa>
        return;
 800bd00:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800bd02:	3710      	adds	r7, #16
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}
 800bd08:	080256f0 	.word	0x080256f0
 800bd0c:	08025a94 	.word	0x08025a94
 800bd10:	08025734 	.word	0x08025734
 800bd14:	08025c1c 	.word	0x08025c1c
 800bd18:	08025ab0 	.word	0x08025ab0
 800bd1c:	2000be54 	.word	0x2000be54

0800bd20 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b084      	sub	sp, #16
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	685b      	ldr	r3, [r3, #4]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d06b      	beq.n	800be0e <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	7c1b      	ldrb	r3, [r3, #16]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d007      	beq.n	800bd4e <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	685a      	ldr	r2, [r3, #4]
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	689b      	ldr	r3, [r3, #8]
 800bd48:	6812      	ldr	r2, [r2, #0]
 800bd4a:	601a      	str	r2, [r3, #0]
 800bd4c:	e006      	b.n	800bd5c <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	685a      	ldr	r2, [r3, #4]
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	689b      	ldr	r3, [r3, #8]
 800bd58:	6852      	ldr	r2, [r2, #4]
 800bd5a:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	781b      	ldrb	r3, [r3, #0]
 800bd68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bd6c:	2b10      	cmp	r3, #16
 800bd6e:	d021      	beq.n	800bdb4 <lwip_netconn_do_getaddr+0x94>
 800bd70:	2b20      	cmp	r3, #32
 800bd72:	d144      	bne.n	800bdfe <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	7c1b      	ldrb	r3, [r3, #16]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d007      	beq.n	800bd8c <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	685a      	ldr	r2, [r3, #4]
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	68db      	ldr	r3, [r3, #12]
 800bd86:	8a52      	ldrh	r2, [r2, #18]
 800bd88:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 800bd8a:	e044      	b.n	800be16 <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	685b      	ldr	r3, [r3, #4]
 800bd92:	7c1b      	ldrb	r3, [r3, #16]
 800bd94:	f003 0304 	and.w	r3, r3, #4
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d103      	bne.n	800bda4 <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	22f5      	movs	r2, #245	; 0xf5
 800bda0:	711a      	strb	r2, [r3, #4]
        break;
 800bda2:	e038      	b.n	800be16 <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	685a      	ldr	r2, [r3, #4]
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	68db      	ldr	r3, [r3, #12]
 800bdae:	8a92      	ldrh	r2, [r2, #20]
 800bdb0:	801a      	strh	r2, [r3, #0]
        break;
 800bdb2:	e030      	b.n	800be16 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	7c1b      	ldrb	r3, [r3, #16]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d10f      	bne.n	800bddc <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	685b      	ldr	r3, [r3, #4]
 800bdc2:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d005      	beq.n	800bdd4 <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	685b      	ldr	r3, [r3, #4]
 800bdce:	7d1b      	ldrb	r3, [r3, #20]
 800bdd0:	2b01      	cmp	r3, #1
 800bdd2:	d103      	bne.n	800bddc <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	22f5      	movs	r2, #245	; 0xf5
 800bdd8:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 800bdda:	e01c      	b.n	800be16 <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	7c1b      	ldrb	r3, [r3, #16]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d004      	beq.n	800bdee <lwip_netconn_do_getaddr+0xce>
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	685b      	ldr	r3, [r3, #4]
 800bdea:	8adb      	ldrh	r3, [r3, #22]
 800bdec:	e003      	b.n	800bdf6 <lwip_netconn_do_getaddr+0xd6>
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	685b      	ldr	r3, [r3, #4]
 800bdf4:	8b1b      	ldrh	r3, [r3, #24]
 800bdf6:	68fa      	ldr	r2, [r7, #12]
 800bdf8:	68d2      	ldr	r2, [r2, #12]
 800bdfa:	8013      	strh	r3, [r2, #0]
        break;
 800bdfc:	e00b      	b.n	800be16 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 800bdfe:	4b08      	ldr	r3, [pc, #32]	; (800be20 <lwip_netconn_do_getaddr+0x100>)
 800be00:	f240 727d 	movw	r2, #1917	; 0x77d
 800be04:	4907      	ldr	r1, [pc, #28]	; (800be24 <lwip_netconn_do_getaddr+0x104>)
 800be06:	4808      	ldr	r0, [pc, #32]	; (800be28 <lwip_netconn_do_getaddr+0x108>)
 800be08:	f017 feea 	bl	8023be0 <iprintf>
        break;
 800be0c:	e003      	b.n	800be16 <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	22f5      	movs	r2, #245	; 0xf5
 800be12:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 800be14:	bf00      	nop
 800be16:	bf00      	nop
 800be18:	3710      	adds	r7, #16
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}
 800be1e:	bf00      	nop
 800be20:	080256f0 	.word	0x080256f0
 800be24:	08025c30 	.word	0x08025c30
 800be28:	08025734 	.word	0x08025734

0800be2c <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b084      	sub	sp, #16
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	785b      	ldrb	r3, [r3, #1]
 800be3e:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	685b      	ldr	r3, [r3, #4]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d069      	beq.n	800bf1e <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	781b      	ldrb	r3, [r3, #0]
 800be50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800be54:	2b10      	cmp	r3, #16
 800be56:	d162      	bne.n	800bf1e <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800be5c:	2b03      	cmp	r3, #3
 800be5e:	d002      	beq.n	800be66 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800be60:	7afb      	ldrb	r3, [r7, #11]
 800be62:	2b02      	cmp	r3, #2
 800be64:	d05b      	beq.n	800bf1e <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800be66:	7afb      	ldrb	r3, [r7, #11]
 800be68:	2b03      	cmp	r3, #3
 800be6a:	d103      	bne.n	800be74 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	22f5      	movs	r2, #245	; 0xf5
 800be70:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800be72:	e059      	b.n	800bf28 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800be74:	7afb      	ldrb	r3, [r7, #11]
 800be76:	2b01      	cmp	r3, #1
 800be78:	d103      	bne.n	800be82 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	22fb      	movs	r2, #251	; 0xfb
 800be7e:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800be80:	e052      	b.n	800bf28 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	7a1b      	ldrb	r3, [r3, #8]
 800be86:	f003 0301 	and.w	r3, r3, #1
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d004      	beq.n	800be98 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	4618      	mov	r0, r3
 800be94:	f7ff f832 	bl	800aefc <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	6a1b      	ldr	r3, [r3, #32]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d006      	beq.n	800beb0 <lwip_netconn_do_close+0x84>
 800bea2:	4b23      	ldr	r3, [pc, #140]	; (800bf30 <lwip_netconn_do_close+0x104>)
 800bea4:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800bea8:	4922      	ldr	r1, [pc, #136]	; (800bf34 <lwip_netconn_do_close+0x108>)
 800beaa:	4823      	ldr	r0, [pc, #140]	; (800bf38 <lwip_netconn_do_close+0x10c>)
 800beac:	f017 fe98 	bl	8023be0 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	2204      	movs	r2, #4
 800beb6:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	68fa      	ldr	r2, [r7, #12]
 800bebe:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	2100      	movs	r1, #0
 800bec6:	4618      	mov	r0, r3
 800bec8:	f7ff f896 	bl	800aff8 <lwip_netconn_do_close_internal>
 800becc:	4603      	mov	r3, r0
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d029      	beq.n	800bf26 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	785b      	ldrb	r3, [r3, #1]
 800bed8:	2b04      	cmp	r3, #4
 800beda:	d006      	beq.n	800beea <lwip_netconn_do_close+0xbe>
 800bedc:	4b14      	ldr	r3, [pc, #80]	; (800bf30 <lwip_netconn_do_close+0x104>)
 800bede:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800bee2:	4916      	ldr	r1, [pc, #88]	; (800bf3c <lwip_netconn_do_close+0x110>)
 800bee4:	4814      	ldr	r0, [pc, #80]	; (800bf38 <lwip_netconn_do_close+0x10c>)
 800bee6:	f017 fe7b 	bl	8023be0 <iprintf>
        UNLOCK_TCPIP_CORE();
 800beea:	4815      	ldr	r0, [pc, #84]	; (800bf40 <lwip_netconn_do_close+0x114>)
 800beec:	f00f fbe5 	bl	801b6ba <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	330c      	adds	r3, #12
 800bef6:	2100      	movs	r1, #0
 800bef8:	4618      	mov	r0, r3
 800befa:	f00f fb44 	bl	801b586 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800befe:	4810      	ldr	r0, [pc, #64]	; (800bf40 <lwip_netconn_do_close+0x114>)
 800bf00:	f00f fbcc 	bl	801b69c <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	785b      	ldrb	r3, [r3, #1]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d00b      	beq.n	800bf26 <lwip_netconn_do_close+0xfa>
 800bf0e:	4b08      	ldr	r3, [pc, #32]	; (800bf30 <lwip_netconn_do_close+0x104>)
 800bf10:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800bf14:	4909      	ldr	r1, [pc, #36]	; (800bf3c <lwip_netconn_do_close+0x110>)
 800bf16:	4808      	ldr	r0, [pc, #32]	; (800bf38 <lwip_netconn_do_close+0x10c>)
 800bf18:	f017 fe62 	bl	8023be0 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800bf1c:	e003      	b.n	800bf26 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	22f5      	movs	r2, #245	; 0xf5
 800bf22:	711a      	strb	r2, [r3, #4]
 800bf24:	e000      	b.n	800bf28 <lwip_netconn_do_close+0xfc>
      return;
 800bf26:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800bf28:	3710      	adds	r7, #16
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	080256f0 	.word	0x080256f0
 800bf34:	08025a94 	.word	0x08025a94
 800bf38:	08025734 	.word	0x08025734
 800bf3c:	08025ab0 	.word	0x08025ab0
 800bf40:	2000be54 	.word	0x2000be54

0800bf44 <lwip_netconn_do_join_leave_group>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_join_leave_group(void *m)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b084      	sub	sp, #16
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_CONN;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	22f5      	movs	r2, #245	; 0xf5
 800bf54:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	685b      	ldr	r3, [r3, #4]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d027      	beq.n	800bfb0 <lwip_netconn_do_join_leave_group+0x6c>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	781b      	ldrb	r3, [r3, #0]
 800bf66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf6a:	2b20      	cmp	r3, #32
 800bf6c:	d11d      	bne.n	800bfaa <lwip_netconn_do_join_leave_group+0x66>
        }
      } else
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */
      {
#if LWIP_IGMP
        if (msg->msg.jl.join_or_leave == NETCONN_JOIN) {
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	7c5b      	ldrb	r3, [r3, #17]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d10c      	bne.n	800bf90 <lwip_netconn_do_join_leave_group+0x4c>
          msg->err = igmp_joingroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	68da      	ldr	r2, [r3, #12]
                                    ip_2_ip4(API_EXPR_REF(msg->msg.jl.multiaddr)));
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	689b      	ldr	r3, [r3, #8]
          msg->err = igmp_joingroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
 800bf7e:	4619      	mov	r1, r3
 800bf80:	4610      	mov	r0, r2
 800bf82:	f00d fae5 	bl	8019550 <igmp_joingroup>
 800bf86:	4603      	mov	r3, r0
 800bf88:	461a      	mov	r2, r3
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	711a      	strb	r2, [r3, #4]
      msg->err = ERR_VAL;
#endif /* (LWIP_TCP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800bf8e:	e00f      	b.n	800bfb0 <lwip_netconn_do_join_leave_group+0x6c>
          msg->err = igmp_leavegroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	68da      	ldr	r2, [r3, #12]
                                     ip_2_ip4(API_EXPR_REF(msg->msg.jl.multiaddr)));
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	689b      	ldr	r3, [r3, #8]
          msg->err = igmp_leavegroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
 800bf98:	4619      	mov	r1, r3
 800bf9a:	4610      	mov	r0, r2
 800bf9c:	f00d fbb4 	bl	8019708 <igmp_leavegroup>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	711a      	strb	r2, [r3, #4]
}
 800bfa8:	e002      	b.n	800bfb0 <lwip_netconn_do_join_leave_group+0x6c>
      msg->err = ERR_VAL;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	22fa      	movs	r2, #250	; 0xfa
 800bfae:	711a      	strb	r2, [r3, #4]
}
 800bfb0:	bf00      	nop
 800bfb2:	3710      	adds	r7, #16
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}

0800bfb8 <lwip_netconn_do_dns_found>:
 * (or on timeout). A waiting application thread is waked up by
 * signaling the semaphore.
 */
static void
lwip_netconn_do_dns_found(const char *name, const ip_addr_t *ipaddr, void *arg)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b086      	sub	sp, #24
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	60f8      	str	r0, [r7, #12]
 800bfc0:	60b9      	str	r1, [r7, #8]
 800bfc2:	607a      	str	r2, [r7, #4]
  struct dns_api_msg *msg = (struct dns_api_msg *)arg;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	617b      	str	r3, [r7, #20]

  /* we trust the internal implementation to be correct :-) */
  LWIP_UNUSED_ARG(name);

  if (ipaddr == NULL) {
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d104      	bne.n	800bfd8 <lwip_netconn_do_dns_found+0x20>
    /* timeout or memory error */
    API_EXPR_DEREF(msg->err) = ERR_VAL;
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	68db      	ldr	r3, [r3, #12]
 800bfd2:	22fa      	movs	r2, #250	; 0xfa
 800bfd4:	701a      	strb	r2, [r3, #0]
 800bfd6:	e008      	b.n	800bfea <lwip_netconn_do_dns_found+0x32>
  } else {
    /* address was resolved */
    API_EXPR_DEREF(msg->err) = ERR_OK;
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	68db      	ldr	r3, [r3, #12]
 800bfdc:	2200      	movs	r2, #0
 800bfde:	701a      	strb	r2, [r3, #0]
    API_EXPR_DEREF(msg->addr) = *ipaddr;
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	685b      	ldr	r3, [r3, #4]
 800bfe4:	68ba      	ldr	r2, [r7, #8]
 800bfe6:	6812      	ldr	r2, [r2, #0]
 800bfe8:	601a      	str	r2, [r3, #0]
  }
  /* wake up the application task waiting in netconn_gethostbyname */
  sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
 800bfea:	697b      	ldr	r3, [r7, #20]
 800bfec:	689b      	ldr	r3, [r3, #8]
 800bfee:	4618      	mov	r0, r3
 800bff0:	f00f fafa 	bl	801b5e8 <sys_sem_signal>
}
 800bff4:	bf00      	nop
 800bff6:	3718      	adds	r7, #24
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}

0800bffc <lwip_netconn_do_gethostbyname>:
 *
 * @param arg the dns_api_msg pointing to the query
 */
void
lwip_netconn_do_gethostbyname(void *arg)
{
 800bffc:	b590      	push	{r4, r7, lr}
 800bffe:	b087      	sub	sp, #28
 800c000:	af02      	add	r7, sp, #8
 800c002:	6078      	str	r0, [r7, #4]
  struct dns_api_msg *msg = (struct dns_api_msg *)arg;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	60fb      	str	r3, [r7, #12]
  u8_t addrtype =
 800c008:	2300      	movs	r3, #0
 800c00a:	72fb      	strb	r3, [r7, #11]
    msg->dns_addrtype;
#else
    LWIP_DNS_ADDRTYPE_DEFAULT;
#endif

  API_EXPR_DEREF(msg->err) = dns_gethostbyname_addrtype(msg->name,
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	6818      	ldr	r0, [r3, #0]
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	6859      	ldr	r1, [r3, #4]
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	68dc      	ldr	r4, [r3, #12]
 800c018:	7afb      	ldrb	r3, [r7, #11]
 800c01a:	9300      	str	r3, [sp, #0]
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	4a15      	ldr	r2, [pc, #84]	; (800c074 <lwip_netconn_do_gethostbyname+0x78>)
 800c020:	f002 ff82 	bl	800ef28 <dns_gethostbyname_addrtype>
 800c024:	4603      	mov	r3, r0
 800c026:	7023      	strb	r3, [r4, #0]
                             API_EXPR_REF(msg->addr), lwip_netconn_do_dns_found, msg, addrtype);
#if LWIP_TCPIP_CORE_LOCKING
  /* For core locking, only block if we need to wait for answer/timeout */
  if (API_EXPR_DEREF(msg->err) == ERR_INPROGRESS) {
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	68db      	ldr	r3, [r3, #12]
 800c02c:	f993 3000 	ldrsb.w	r3, [r3]
 800c030:	f113 0f05 	cmn.w	r3, #5
 800c034:	d119      	bne.n	800c06a <lwip_netconn_do_gethostbyname+0x6e>
    UNLOCK_TCPIP_CORE();
 800c036:	4810      	ldr	r0, [pc, #64]	; (800c078 <lwip_netconn_do_gethostbyname+0x7c>)
 800c038:	f00f fb3f 	bl	801b6ba <sys_mutex_unlock>
    sys_sem_wait(API_EXPR_REF_SEM(msg->sem));
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	689b      	ldr	r3, [r3, #8]
 800c040:	2100      	movs	r1, #0
 800c042:	4618      	mov	r0, r3
 800c044:	f00f fa9f 	bl	801b586 <sys_arch_sem_wait>
    LOCK_TCPIP_CORE();
 800c048:	480b      	ldr	r0, [pc, #44]	; (800c078 <lwip_netconn_do_gethostbyname+0x7c>)
 800c04a:	f00f fb27 	bl	801b69c <sys_mutex_lock>
    LWIP_ASSERT("do_gethostbyname still in progress!!", API_EXPR_DEREF(msg->err) != ERR_INPROGRESS);
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	68db      	ldr	r3, [r3, #12]
 800c052:	f993 3000 	ldrsb.w	r3, [r3]
 800c056:	f113 0f05 	cmn.w	r3, #5
 800c05a:	d106      	bne.n	800c06a <lwip_netconn_do_gethostbyname+0x6e>
 800c05c:	4b07      	ldr	r3, [pc, #28]	; (800c07c <lwip_netconn_do_gethostbyname+0x80>)
 800c05e:	f640 0271 	movw	r2, #2161	; 0x871
 800c062:	4907      	ldr	r1, [pc, #28]	; (800c080 <lwip_netconn_do_gethostbyname+0x84>)
 800c064:	4807      	ldr	r0, [pc, #28]	; (800c084 <lwip_netconn_do_gethostbyname+0x88>)
 800c066:	f017 fdbb 	bl	8023be0 <iprintf>
    /* on error or immediate success, wake up the application
     * task waiting in netconn_gethostbyname */
    sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800c06a:	bf00      	nop
 800c06c:	3714      	adds	r7, #20
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd90      	pop	{r4, r7, pc}
 800c072:	bf00      	nop
 800c074:	0800bfb9 	.word	0x0800bfb9
 800c078:	2000be54 	.word	0x2000be54
 800c07c:	080256f0 	.word	0x080256f0
 800c080:	08025c48 	.word	0x08025c48
 800c084:	08025734 	.word	0x08025734

0800c088 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800c088:	b480      	push	{r7}
 800c08a:	b083      	sub	sp, #12
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	4603      	mov	r3, r0
 800c090:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800c092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c096:	2b00      	cmp	r3, #0
 800c098:	dc04      	bgt.n	800c0a4 <err_to_errno+0x1c>
 800c09a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c09e:	f113 0f10 	cmn.w	r3, #16
 800c0a2:	da01      	bge.n	800c0a8 <err_to_errno+0x20>
    return EIO;
 800c0a4:	2305      	movs	r3, #5
 800c0a6:	e005      	b.n	800c0b4 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800c0a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c0ac:	425b      	negs	r3, r3
 800c0ae:	4a04      	ldr	r2, [pc, #16]	; (800c0c0 <err_to_errno+0x38>)
 800c0b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	370c      	adds	r7, #12
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr
 800c0c0:	080291c0 	.word	0x080291c0

0800c0c4 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b082      	sub	sp, #8
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d013      	beq.n	800c0fa <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d00b      	beq.n	800c0f2 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f004 fbde 	bl	80108a0 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	605a      	str	r2, [r3, #4]
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	685a      	ldr	r2, [r3, #4]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800c0f2:	6879      	ldr	r1, [r7, #4]
 800c0f4:	2006      	movs	r0, #6
 800c0f6:	f003 fca7 	bl	800fa48 <memp_free>
  }
}
 800c0fa:	bf00      	nop
 800c0fc:	3708      	adds	r7, #8
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}
	...

0800c104 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b082      	sub	sp, #8
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d106      	bne.n	800c120 <netbuf_free+0x1c>
 800c112:	4b0d      	ldr	r3, [pc, #52]	; (800c148 <netbuf_free+0x44>)
 800c114:	2281      	movs	r2, #129	; 0x81
 800c116:	490d      	ldr	r1, [pc, #52]	; (800c14c <netbuf_free+0x48>)
 800c118:	480d      	ldr	r0, [pc, #52]	; (800c150 <netbuf_free+0x4c>)
 800c11a:	f017 fd61 	bl	8023be0 <iprintf>
 800c11e:	e00f      	b.n	800c140 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d004      	beq.n	800c132 <netbuf_free+0x2e>
    pbuf_free(buf->p);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	4618      	mov	r0, r3
 800c12e:	f004 fbb7 	bl	80108a0 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2200      	movs	r2, #0
 800c136:	605a      	str	r2, [r3, #4]
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	685a      	ldr	r2, [r3, #4]
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 800c140:	3708      	adds	r7, #8
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}
 800c146:	bf00      	nop
 800c148:	08025c70 	.word	0x08025c70
 800c14c:	08025d0c 	.word	0x08025d0c
 800c150:	08025cc0 	.word	0x08025cc0

0800c154 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b084      	sub	sp, #16
 800c158:	af00      	add	r7, sp, #0
 800c15a:	60f8      	str	r0, [r7, #12]
 800c15c:	60b9      	str	r1, [r7, #8]
 800c15e:	4613      	mov	r3, r2
 800c160:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d108      	bne.n	800c17a <netbuf_ref+0x26>
 800c168:	4b1c      	ldr	r3, [pc, #112]	; (800c1dc <netbuf_ref+0x88>)
 800c16a:	2299      	movs	r2, #153	; 0x99
 800c16c:	491c      	ldr	r1, [pc, #112]	; (800c1e0 <netbuf_ref+0x8c>)
 800c16e:	481d      	ldr	r0, [pc, #116]	; (800c1e4 <netbuf_ref+0x90>)
 800c170:	f017 fd36 	bl	8023be0 <iprintf>
 800c174:	f06f 030f 	mvn.w	r3, #15
 800c178:	e02b      	b.n	800c1d2 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d004      	beq.n	800c18c <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	4618      	mov	r0, r3
 800c188:	f004 fb8a 	bl	80108a0 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800c18c:	2241      	movs	r2, #65	; 0x41
 800c18e:	2100      	movs	r1, #0
 800c190:	2036      	movs	r0, #54	; 0x36
 800c192:	f004 f86f 	bl	8010274 <pbuf_alloc>
 800c196:	4602      	mov	r2, r0
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d105      	bne.n	800c1b0 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800c1aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c1ae:	e010      	b.n	800c1d2 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	68ba      	ldr	r2, [r7, #8]
 800c1b6:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	88fa      	ldrh	r2, [r7, #6]
 800c1be:	811a      	strh	r2, [r3, #8]
 800c1c0:	68fa      	ldr	r2, [r7, #12]
 800c1c2:	6812      	ldr	r2, [r2, #0]
 800c1c4:	891b      	ldrh	r3, [r3, #8]
 800c1c6:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	681a      	ldr	r2, [r3, #0]
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800c1d0:	2300      	movs	r3, #0
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3710      	adds	r7, #16
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}
 800c1da:	bf00      	nop
 800c1dc:	08025c70 	.word	0x08025c70
 800c1e0:	08025d28 	.word	0x08025d28
 800c1e4:	08025cc0 	.word	0x08025cc0

0800c1e8 <lwip_freeaddrinfo>:
 *
 * @param ai struct addrinfo to free
 */
void
lwip_freeaddrinfo(struct addrinfo *ai)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b084      	sub	sp, #16
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
  struct addrinfo *next;

  while (ai != NULL) {
 800c1f0:	e008      	b.n	800c204 <lwip_freeaddrinfo+0x1c>
    next = ai->ai_next;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	69db      	ldr	r3, [r3, #28]
 800c1f6:	60fb      	str	r3, [r7, #12]
    memp_free(MEMP_NETDB, ai);
 800c1f8:	6879      	ldr	r1, [r7, #4]
 800c1fa:	200c      	movs	r0, #12
 800c1fc:	f003 fc24 	bl	800fa48 <memp_free>
    ai = next;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	607b      	str	r3, [r7, #4]
  while (ai != NULL) {
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d1f3      	bne.n	800c1f2 <lwip_freeaddrinfo+0xa>
  }
}
 800c20a:	bf00      	nop
 800c20c:	bf00      	nop
 800c20e:	3710      	adds	r7, #16
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}

0800c214 <lwip_getaddrinfo>:
 * @todo: implement AI_V4MAPPED, AI_ADDRCONFIG
 */
int
lwip_getaddrinfo(const char *nodename, const char *servname,
                 const struct addrinfo *hints, struct addrinfo **res)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b08e      	sub	sp, #56	; 0x38
 800c218:	af00      	add	r7, sp, #0
 800c21a:	60f8      	str	r0, [r7, #12]
 800c21c:	60b9      	str	r1, [r7, #8]
 800c21e:	607a      	str	r2, [r7, #4]
 800c220:	603b      	str	r3, [r7, #0]
  err_t err;
  ip_addr_t addr;
  struct addrinfo *ai;
  struct sockaddr_storage *sa = NULL;
 800c222:	2300      	movs	r3, #0
 800c224:	62bb      	str	r3, [r7, #40]	; 0x28
  int port_nr = 0;
 800c226:	2300      	movs	r3, #0
 800c228:	637b      	str	r3, [r7, #52]	; 0x34
  size_t total_size;
  size_t namelen = 0;
 800c22a:	2300      	movs	r3, #0
 800c22c:	62fb      	str	r3, [r7, #44]	; 0x2c
  int ai_family;

  if (res == NULL) {
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d101      	bne.n	800c238 <lwip_getaddrinfo+0x24>
    return EAI_FAIL;
 800c234:	23ca      	movs	r3, #202	; 0xca
 800c236:	e0dd      	b.n	800c3f4 <lwip_getaddrinfo+0x1e0>
  }
  *res = NULL;
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	2200      	movs	r2, #0
 800c23c:	601a      	str	r2, [r3, #0]
  if ((nodename == NULL) && (servname == NULL)) {
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d104      	bne.n	800c24e <lwip_getaddrinfo+0x3a>
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d101      	bne.n	800c24e <lwip_getaddrinfo+0x3a>
    return EAI_NONAME;
 800c24a:	23c8      	movs	r3, #200	; 0xc8
 800c24c:	e0d2      	b.n	800c3f4 <lwip_getaddrinfo+0x1e0>
  }

  if (hints != NULL) {
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d00a      	beq.n	800c26a <lwip_getaddrinfo+0x56>
    ai_family = hints->ai_family;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	685b      	ldr	r3, [r3, #4]
 800c258:	627b      	str	r3, [r7, #36]	; 0x24
    if ((ai_family != AF_UNSPEC)
 800c25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d006      	beq.n	800c26e <lwip_getaddrinfo+0x5a>
#if LWIP_IPV4
        && (ai_family != AF_INET)
 800c260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c262:	2b02      	cmp	r3, #2
 800c264:	d003      	beq.n	800c26e <lwip_getaddrinfo+0x5a>
#endif /* LWIP_IPV4 */
#if LWIP_IPV6
        && (ai_family != AF_INET6)
#endif /* LWIP_IPV6 */
       ) {
      return EAI_FAMILY;
 800c266:	23cc      	movs	r3, #204	; 0xcc
 800c268:	e0c4      	b.n	800c3f4 <lwip_getaddrinfo+0x1e0>
    }
  } else {
    ai_family = AF_UNSPEC;
 800c26a:	2300      	movs	r3, #0
 800c26c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (servname != NULL) {
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d00c      	beq.n	800c28e <lwip_getaddrinfo+0x7a>
    /* service name specified: convert to port number
     * @todo?: currently, only ASCII integers (port numbers) are supported (AI_NUMERICSERV)! */
    port_nr = atoi(servname);
 800c274:	68b8      	ldr	r0, [r7, #8]
 800c276:	f017 f9fb 	bl	8023670 <atoi>
 800c27a:	6378      	str	r0, [r7, #52]	; 0x34
    if ((port_nr <= 0) || (port_nr > 0xffff)) {
 800c27c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c27e:	2b00      	cmp	r3, #0
 800c280:	dd03      	ble.n	800c28a <lwip_getaddrinfo+0x76>
 800c282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c288:	db01      	blt.n	800c28e <lwip_getaddrinfo+0x7a>
      return EAI_SERVICE;
 800c28a:	23c9      	movs	r3, #201	; 0xc9
 800c28c:	e0b2      	b.n	800c3f4 <lwip_getaddrinfo+0x1e0>
    }
  }

  if (nodename != NULL) {
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d022      	beq.n	800c2da <lwip_getaddrinfo+0xc6>
    /* service location specified, try to resolve */
    if ((hints != NULL) && (hints->ai_flags & AI_NUMERICHOST)) {
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d010      	beq.n	800c2bc <lwip_getaddrinfo+0xa8>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f003 0304 	and.w	r3, r3, #4
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d00a      	beq.n	800c2bc <lwip_getaddrinfo+0xa8>
      /* no DNS lookup, just parse for an address string */
      if (!ipaddr_aton(nodename, &addr)) {
 800c2a6:	f107 0314 	add.w	r3, r7, #20
 800c2aa:	4619      	mov	r1, r3
 800c2ac:	68f8      	ldr	r0, [r7, #12]
 800c2ae:	f00d ffcb 	bl	801a248 <ip4addr_aton>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d11e      	bne.n	800c2f6 <lwip_getaddrinfo+0xe2>
        return EAI_NONAME;
 800c2b8:	23c8      	movs	r3, #200	; 0xc8
 800c2ba:	e09b      	b.n	800c3f4 <lwip_getaddrinfo+0x1e0>
        type = NETCONN_DNS_IPV4;
      } else if (ai_family == AF_INET6) {
        type = NETCONN_DNS_IPV6;
      }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
      err = netconn_gethostbyname_addrtype(nodename, &addr, type);
 800c2bc:	f107 0314 	add.w	r3, r7, #20
 800c2c0:	4619      	mov	r1, r3
 800c2c2:	68f8      	ldr	r0, [r7, #12]
 800c2c4:	f7fe f95c 	bl	800a580 <netconn_gethostbyname>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      if (err != ERR_OK) {
 800c2ce:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d00f      	beq.n	800c2f6 <lwip_getaddrinfo+0xe2>
        return EAI_FAIL;
 800c2d6:	23ca      	movs	r3, #202	; 0xca
 800c2d8:	e08c      	b.n	800c3f4 <lwip_getaddrinfo+0x1e0>
      }
    }
  } else {
    /* service location specified, use loopback address */
    if ((hints != NULL) && (hints->ai_flags & AI_PASSIVE)) {
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d008      	beq.n	800c2f2 <lwip_getaddrinfo+0xde>
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f003 0301 	and.w	r3, r3, #1
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d002      	beq.n	800c2f2 <lwip_getaddrinfo+0xde>
      ip_addr_set_any_val(ai_family == AF_INET6, addr);
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	617b      	str	r3, [r7, #20]
 800c2f0:	e001      	b.n	800c2f6 <lwip_getaddrinfo+0xe2>
    } else {
      ip_addr_set_loopback_val(ai_family == AF_INET6, addr);
 800c2f2:	4b42      	ldr	r3, [pc, #264]	; (800c3fc <lwip_getaddrinfo+0x1e8>)
 800c2f4:	617b      	str	r3, [r7, #20]
    }
  }

  total_size = sizeof(struct addrinfo) + sizeof(struct sockaddr_storage);
 800c2f6:	2330      	movs	r3, #48	; 0x30
 800c2f8:	633b      	str	r3, [r7, #48]	; 0x30
  if (nodename != NULL) {
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d01c      	beq.n	800c33a <lwip_getaddrinfo+0x126>
    namelen = strlen(nodename);
 800c300:	68f8      	ldr	r0, [r7, #12]
 800c302:	f7f3 ff8f 	bl	8000224 <strlen>
 800c306:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (namelen > DNS_MAX_NAME_LENGTH) {
 800c308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c30a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c30e:	d901      	bls.n	800c314 <lwip_getaddrinfo+0x100>
      /* invalid name length */
      return EAI_FAIL;
 800c310:	23ca      	movs	r3, #202	; 0xca
 800c312:	e06f      	b.n	800c3f4 <lwip_getaddrinfo+0x1e0>
    }
    LWIP_ASSERT("namelen is too long", total_size + namelen + 1 > total_size);
 800c314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c318:	4413      	add	r3, r2
 800c31a:	3301      	adds	r3, #1
 800c31c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c31e:	429a      	cmp	r2, r3
 800c320:	d306      	bcc.n	800c330 <lwip_getaddrinfo+0x11c>
 800c322:	4b37      	ldr	r3, [pc, #220]	; (800c400 <lwip_getaddrinfo+0x1ec>)
 800c324:	f44f 72b3 	mov.w	r2, #358	; 0x166
 800c328:	4936      	ldr	r1, [pc, #216]	; (800c404 <lwip_getaddrinfo+0x1f0>)
 800c32a:	4837      	ldr	r0, [pc, #220]	; (800c408 <lwip_getaddrinfo+0x1f4>)
 800c32c:	f017 fc58 	bl	8023be0 <iprintf>
    total_size += namelen + 1;
 800c330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c334:	4413      	add	r3, r2
 800c336:	3301      	adds	r3, #1
 800c338:	633b      	str	r3, [r7, #48]	; 0x30
  }
  /* If this fails, please report to lwip-devel! :-) */
  LWIP_ASSERT("total_size <= NETDB_ELEM_SIZE: please report this!",
 800c33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c33c:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800c340:	d306      	bcc.n	800c350 <lwip_getaddrinfo+0x13c>
 800c342:	4b2f      	ldr	r3, [pc, #188]	; (800c400 <lwip_getaddrinfo+0x1ec>)
 800c344:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800c348:	4930      	ldr	r1, [pc, #192]	; (800c40c <lwip_getaddrinfo+0x1f8>)
 800c34a:	482f      	ldr	r0, [pc, #188]	; (800c408 <lwip_getaddrinfo+0x1f4>)
 800c34c:	f017 fc48 	bl	8023be0 <iprintf>
              total_size <= NETDB_ELEM_SIZE);
  ai = (struct addrinfo *)memp_malloc(MEMP_NETDB);
 800c350:	200c      	movs	r0, #12
 800c352:	f003 fb27 	bl	800f9a4 <memp_malloc>
 800c356:	61f8      	str	r0, [r7, #28]
  if (ai == NULL) {
 800c358:	69fb      	ldr	r3, [r7, #28]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d101      	bne.n	800c362 <lwip_getaddrinfo+0x14e>
    return EAI_MEMORY;
 800c35e:	23cb      	movs	r3, #203	; 0xcb
 800c360:	e048      	b.n	800c3f4 <lwip_getaddrinfo+0x1e0>
  }
  memset(ai, 0, total_size);
 800c362:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c364:	2100      	movs	r1, #0
 800c366:	69f8      	ldr	r0, [r7, #28]
 800c368:	f017 fb3c 	bl	80239e4 <memset>
  /* cast through void* to get rid of alignment warnings */
  sa = (struct sockaddr_storage *)(void *)((u8_t *)ai + sizeof(struct addrinfo));
 800c36c:	69fb      	ldr	r3, [r7, #28]
 800c36e:	3320      	adds	r3, #32
 800c370:	62bb      	str	r3, [r7, #40]	; 0x28
    sa6->sin6_scope_id = ip6_addr_zone(ip_2_ip6(&addr));
    ai->ai_family = AF_INET6;
#endif /* LWIP_IPV6 */
  } else {
#if LWIP_IPV4
    struct sockaddr_in *sa4 = (struct sockaddr_in *)sa;
 800c372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c374:	61bb      	str	r3, [r7, #24]
    /* set up sockaddr */
    inet_addr_from_ip4addr(&sa4->sin_addr, ip_2_ip4(&addr));
 800c376:	697a      	ldr	r2, [r7, #20]
 800c378:	69bb      	ldr	r3, [r7, #24]
 800c37a:	605a      	str	r2, [r3, #4]
    sa4->sin_family = AF_INET;
 800c37c:	69bb      	ldr	r3, [r7, #24]
 800c37e:	2202      	movs	r2, #2
 800c380:	705a      	strb	r2, [r3, #1]
    sa4->sin_len = sizeof(struct sockaddr_in);
 800c382:	69bb      	ldr	r3, [r7, #24]
 800c384:	2210      	movs	r2, #16
 800c386:	701a      	strb	r2, [r3, #0]
    sa4->sin_port = lwip_htons((u16_t)port_nr);
 800c388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c38a:	b29b      	uxth	r3, r3
 800c38c:	4618      	mov	r0, r3
 800c38e:	f001 fe31 	bl	800dff4 <lwip_htons>
 800c392:	4603      	mov	r3, r0
 800c394:	461a      	mov	r2, r3
 800c396:	69bb      	ldr	r3, [r7, #24]
 800c398:	805a      	strh	r2, [r3, #2]
    ai->ai_family = AF_INET;
 800c39a:	69fb      	ldr	r3, [r7, #28]
 800c39c:	2202      	movs	r2, #2
 800c39e:	605a      	str	r2, [r3, #4]
#endif /* LWIP_IPV4 */
  }

  /* set up addrinfo */
  if (hints != NULL) {
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d007      	beq.n	800c3b6 <lwip_getaddrinfo+0x1a2>
    /* copy socktype & protocol from hints if specified */
    ai->ai_socktype = hints->ai_socktype;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	689a      	ldr	r2, [r3, #8]
 800c3aa:	69fb      	ldr	r3, [r7, #28]
 800c3ac:	609a      	str	r2, [r3, #8]
    ai->ai_protocol = hints->ai_protocol;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	68da      	ldr	r2, [r3, #12]
 800c3b2:	69fb      	ldr	r3, [r7, #28]
 800c3b4:	60da      	str	r2, [r3, #12]
  }
  if (nodename != NULL) {
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d011      	beq.n	800c3e0 <lwip_getaddrinfo+0x1cc>
    /* copy nodename to canonname if specified */
    ai->ai_canonname = ((char *)ai + sizeof(struct addrinfo) + sizeof(struct sockaddr_storage));
 800c3bc:	69fb      	ldr	r3, [r7, #28]
 800c3be:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c3c2:	69fb      	ldr	r3, [r7, #28]
 800c3c4:	619a      	str	r2, [r3, #24]
    MEMCPY(ai->ai_canonname, nodename, namelen);
 800c3c6:	69fb      	ldr	r3, [r7, #28]
 800c3c8:	699b      	ldr	r3, [r3, #24]
 800c3ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3cc:	68f9      	ldr	r1, [r7, #12]
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f017 fae0 	bl	8023994 <memcpy>
    ai->ai_canonname[namelen] = 0;
 800c3d4:	69fb      	ldr	r3, [r7, #28]
 800c3d6:	699a      	ldr	r2, [r3, #24]
 800c3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3da:	4413      	add	r3, r2
 800c3dc:	2200      	movs	r2, #0
 800c3de:	701a      	strb	r2, [r3, #0]
  }
  ai->ai_addrlen = sizeof(struct sockaddr_storage);
 800c3e0:	69fb      	ldr	r3, [r7, #28]
 800c3e2:	2210      	movs	r2, #16
 800c3e4:	611a      	str	r2, [r3, #16]
  ai->ai_addr = (struct sockaddr *)sa;
 800c3e6:	69fb      	ldr	r3, [r7, #28]
 800c3e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3ea:	615a      	str	r2, [r3, #20]

  *res = ai;
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	69fa      	ldr	r2, [r7, #28]
 800c3f0:	601a      	str	r2, [r3, #0]

  return 0;
 800c3f2:	2300      	movs	r3, #0
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	3738      	adds	r7, #56	; 0x38
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}
 800c3fc:	0100007f 	.word	0x0100007f
 800c400:	08025e08 	.word	0x08025e08
 800c404:	08025e38 	.word	0x08025e38
 800c408:	08025e4c 	.word	0x08025e4c
 800c40c:	08025e74 	.word	0x08025e74

0800c410 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800c410:	b480      	push	{r7}
 800c412:	b085      	sub	sp, #20
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	db02      	blt.n	800c428 <tryget_socket_unconn_nouse+0x18>
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	2b03      	cmp	r3, #3
 800c426:	dd01      	ble.n	800c42c <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800c428:	2300      	movs	r3, #0
 800c42a:	e003      	b.n	800c434 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	011b      	lsls	r3, r3, #4
 800c430:	4a03      	ldr	r2, [pc, #12]	; (800c440 <tryget_socket_unconn_nouse+0x30>)
 800c432:	4413      	add	r3, r2
}
 800c434:	4618      	mov	r0, r3
 800c436:	3714      	adds	r7, #20
 800c438:	46bd      	mov	sp, r7
 800c43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43e:	4770      	bx	lr
 800c440:	2000be04 	.word	0x2000be04

0800c444 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b084      	sub	sp, #16
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f7ff ffdf 	bl	800c410 <tryget_socket_unconn_nouse>
 800c452:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800c454:	68fb      	ldr	r3, [r7, #12]
}
 800c456:	4618      	mov	r0, r3
 800c458:	3710      	adds	r7, #16
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}

0800c45e <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800c45e:	b580      	push	{r7, lr}
 800c460:	b084      	sub	sp, #16
 800c462:	af00      	add	r7, sp, #0
 800c464:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f7ff ffec 	bl	800c444 <tryget_socket_unconn>
 800c46c:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d005      	beq.n	800c480 <tryget_socket+0x22>
    if (sock->conn) {
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d001      	beq.n	800c480 <tryget_socket+0x22>
      return sock;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	e000      	b.n	800c482 <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800c480:	2300      	movs	r3, #0
}
 800c482:	4618      	mov	r0, r3
 800c484:	3710      	adds	r7, #16
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}
	...

0800c48c <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b084      	sub	sp, #16
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800c494:	6878      	ldr	r0, [r7, #4]
 800c496:	f7ff ffe2 	bl	800c45e <tryget_socket>
 800c49a:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d104      	bne.n	800c4ac <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800c4a2:	4b05      	ldr	r3, [pc, #20]	; (800c4b8 <get_socket+0x2c>)
 800c4a4:	2209      	movs	r2, #9
 800c4a6:	601a      	str	r2, [r3, #0]
    return NULL;
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	e000      	b.n	800c4ae <get_socket+0x22>
  }
  return sock;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	3710      	adds	r7, #16
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}
 800c4b6:	bf00      	nop
 800c4b8:	2000ff64 	.word	0x2000ff64

0800c4bc <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b084      	sub	sp, #16
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
 800c4c4:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	60fb      	str	r3, [r7, #12]
 800c4ca:	e052      	b.n	800c572 <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800c4cc:	f00f f922 	bl	801b714 <sys_arch_protect>
 800c4d0:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800c4d2:	4a2c      	ldr	r2, [pc, #176]	; (800c584 <alloc_socket+0xc8>)
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	011b      	lsls	r3, r3, #4
 800c4d8:	4413      	add	r3, r2
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d142      	bne.n	800c566 <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800c4e0:	4a28      	ldr	r2, [pc, #160]	; (800c584 <alloc_socket+0xc8>)
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	011b      	lsls	r3, r3, #4
 800c4e6:	4413      	add	r3, r2
 800c4e8:	687a      	ldr	r2, [r7, #4]
 800c4ea:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800c4ec:	68b8      	ldr	r0, [r7, #8]
 800c4ee:	f00f f91f 	bl	801b730 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800c4f2:	4a24      	ldr	r2, [pc, #144]	; (800c584 <alloc_socket+0xc8>)
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	011b      	lsls	r3, r3, #4
 800c4f8:	4413      	add	r3, r2
 800c4fa:	3304      	adds	r3, #4
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800c500:	4a20      	ldr	r2, [pc, #128]	; (800c584 <alloc_socket+0xc8>)
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	011b      	lsls	r3, r3, #4
 800c506:	4413      	add	r3, r2
 800c508:	330e      	adds	r3, #14
 800c50a:	781b      	ldrb	r3, [r3, #0]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d006      	beq.n	800c51e <alloc_socket+0x62>
 800c510:	4b1d      	ldr	r3, [pc, #116]	; (800c588 <alloc_socket+0xcc>)
 800c512:	f240 220e 	movw	r2, #526	; 0x20e
 800c516:	491d      	ldr	r1, [pc, #116]	; (800c58c <alloc_socket+0xd0>)
 800c518:	481d      	ldr	r0, [pc, #116]	; (800c590 <alloc_socket+0xd4>)
 800c51a:	f017 fb61 	bl	8023be0 <iprintf>
      sockets[i].rcvevent   = 0;
 800c51e:	4a19      	ldr	r2, [pc, #100]	; (800c584 <alloc_socket+0xc8>)
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	011b      	lsls	r3, r3, #4
 800c524:	4413      	add	r3, r2
 800c526:	3308      	adds	r3, #8
 800c528:	2200      	movs	r2, #0
 800c52a:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	781b      	ldrb	r3, [r3, #0]
 800c530:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c534:	2b10      	cmp	r3, #16
 800c536:	d102      	bne.n	800c53e <alloc_socket+0x82>
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d001      	beq.n	800c542 <alloc_socket+0x86>
 800c53e:	2301      	movs	r3, #1
 800c540:	e000      	b.n	800c544 <alloc_socket+0x88>
 800c542:	2300      	movs	r3, #0
 800c544:	b299      	uxth	r1, r3
 800c546:	4a0f      	ldr	r2, [pc, #60]	; (800c584 <alloc_socket+0xc8>)
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	011b      	lsls	r3, r3, #4
 800c54c:	4413      	add	r3, r2
 800c54e:	330a      	adds	r3, #10
 800c550:	460a      	mov	r2, r1
 800c552:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800c554:	4a0b      	ldr	r2, [pc, #44]	; (800c584 <alloc_socket+0xc8>)
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	011b      	lsls	r3, r3, #4
 800c55a:	4413      	add	r3, r2
 800c55c:	330c      	adds	r3, #12
 800c55e:	2200      	movs	r2, #0
 800c560:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	e00a      	b.n	800c57c <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800c566:	68b8      	ldr	r0, [r7, #8]
 800c568:	f00f f8e2 	bl	801b730 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	3301      	adds	r3, #1
 800c570:	60fb      	str	r3, [r7, #12]
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	2b03      	cmp	r3, #3
 800c576:	dda9      	ble.n	800c4cc <alloc_socket+0x10>
  }
  return -1;
 800c578:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3710      	adds	r7, #16
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}
 800c584:	2000be04 	.word	0x2000be04
 800c588:	08025ea8 	.word	0x08025ea8
 800c58c:	08025edc 	.word	0x08025edc
 800c590:	08025efc 	.word	0x08025efc

0800c594 <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 800c594:	b480      	push	{r7}
 800c596:	b085      	sub	sp, #20
 800c598:	af00      	add	r7, sp, #0
 800c59a:	60f8      	str	r0, [r7, #12]
 800c59c:	60b9      	str	r1, [r7, #8]
 800c59e:	607a      	str	r2, [r7, #4]
 800c5a0:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	68fa      	ldr	r2, [r7, #12]
 800c5a6:	6852      	ldr	r2, [r2, #4]
 800c5a8:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	681a      	ldr	r2, [r3, #0]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	601a      	str	r2, [r3, #0]
  return 1;
 800c5be:	2301      	movs	r3, #1
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3714      	adds	r7, #20
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ca:	4770      	bx	lr

0800c5cc <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b084      	sub	sp, #16
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	60f8      	str	r0, [r7, #12]
 800c5d4:	60b9      	str	r1, [r7, #8]
 800c5d6:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d00d      	beq.n	800c5fc <free_socket_free_elements+0x30>
    if (is_tcp) {
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d005      	beq.n	800c5f2 <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f004 f958 	bl	80108a0 <pbuf_free>
 800c5f0:	e004      	b.n	800c5fc <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f7ff fd64 	bl	800c0c4 <netbuf_delete>
    }
  }
  if (conn != NULL) {
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d002      	beq.n	800c608 <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 800c602:	68b8      	ldr	r0, [r7, #8]
 800c604:	f7fd fb5e 	bl	8009cc4 <netconn_delete>
  }
}
 800c608:	bf00      	nop
 800c60a:	3710      	adds	r7, #16
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}

0800c610 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b086      	sub	sp, #24
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 800c61a:	f00f f87b 	bl	801b714 <sys_arch_protect>
 800c61e:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 800c620:	f107 0308 	add.w	r3, r7, #8
 800c624:	f107 020c 	add.w	r2, r7, #12
 800c628:	6839      	ldr	r1, [r7, #0]
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f7ff ffb2 	bl	800c594 <free_socket_locked>
 800c630:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 800c632:	6978      	ldr	r0, [r7, #20]
 800c634:	f00f f87c 	bl	801b730 <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 800c638:	693b      	ldr	r3, [r7, #16]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d006      	beq.n	800c64c <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	f107 0208 	add.w	r2, r7, #8
 800c644:	4619      	mov	r1, r3
 800c646:	6838      	ldr	r0, [r7, #0]
 800c648:	f7ff ffc0 	bl	800c5cc <free_socket_free_elements>
  }
}
 800c64c:	bf00      	nop
 800c64e:	3718      	adds	r7, #24
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}

0800c654 <lwip_close>:
  return 0;
}

int
lwip_close(int s)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b086      	sub	sp, #24
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 800c65c:	2300      	movs	r3, #0
 800c65e:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f7ff ff13 	bl	800c48c <get_socket>
 800c666:	6138      	str	r0, [r7, #16]
  if (!sock) {
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d102      	bne.n	800c674 <lwip_close+0x20>
    return -1;
 800c66e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c672:	e03c      	b.n	800c6ee <lwip_close+0x9a>
  }

  if (sock->conn != NULL) {
 800c674:	693b      	ldr	r3, [r7, #16]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d00b      	beq.n	800c694 <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	781b      	ldrb	r3, [r3, #0]
 800c682:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c686:	2b10      	cmp	r3, #16
 800c688:	bf0c      	ite	eq
 800c68a:	2301      	moveq	r3, #1
 800c68c:	2300      	movne	r3, #0
 800c68e:	b2db      	uxtb	r3, r3
 800c690:	617b      	str	r3, [r7, #20]
 800c692:	e00a      	b.n	800c6aa <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	685b      	ldr	r3, [r3, #4]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d006      	beq.n	800c6aa <lwip_close+0x56>
 800c69c:	4b16      	ldr	r3, [pc, #88]	; (800c6f8 <lwip_close+0xa4>)
 800c69e:	f44f 7245 	mov.w	r2, #788	; 0x314
 800c6a2:	4916      	ldr	r1, [pc, #88]	; (800c6fc <lwip_close+0xa8>)
 800c6a4:	4816      	ldr	r0, [pc, #88]	; (800c700 <lwip_close+0xac>)
 800c6a6:	f017 fa9b 	bl	8023be0 <iprintf>
  }

#if LWIP_IGMP
  /* drop all possibly joined IGMP memberships */
  lwip_socket_drop_registered_memberships(s);
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f001 fa8a 	bl	800dbc4 <lwip_socket_drop_registered_memberships>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 800c6b0:	693b      	ldr	r3, [r7, #16]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f7fd fae1 	bl	8009c7c <netconn_prepare_delete>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800c6be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d00e      	beq.n	800c6e4 <lwip_close+0x90>
    sock_set_errno(sock, err_to_errno(err));
 800c6c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f7ff fcdc 	bl	800c088 <err_to_errno>
 800c6d0:	60b8      	str	r0, [r7, #8]
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d002      	beq.n	800c6de <lwip_close+0x8a>
 800c6d8:	4a0a      	ldr	r2, [pc, #40]	; (800c704 <lwip_close+0xb0>)
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800c6de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c6e2:	e004      	b.n	800c6ee <lwip_close+0x9a>
  }

  free_socket(sock, is_tcp);
 800c6e4:	6979      	ldr	r1, [r7, #20]
 800c6e6:	6938      	ldr	r0, [r7, #16]
 800c6e8:	f7ff ff92 	bl	800c610 <free_socket>
  set_errno(0);
  return 0;
 800c6ec:	2300      	movs	r3, #0
}
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	3718      	adds	r7, #24
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}
 800c6f6:	bf00      	nop
 800c6f8:	08025ea8 	.word	0x08025ea8
 800c6fc:	08025f68 	.word	0x08025f68
 800c700:	08025efc 	.word	0x08025efc
 800c704:	2000ff64 	.word	0x2000ff64

0800c708 <lwip_connect>:

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b08c      	sub	sp, #48	; 0x30
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	60f8      	str	r0, [r7, #12]
 800c710:	60b9      	str	r1, [r7, #8]
 800c712:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  err_t err;

  sock = get_socket(s);
 800c714:	68f8      	ldr	r0, [r7, #12]
 800c716:	f7ff feb9 	bl	800c48c <get_socket>
 800c71a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (!sock) {
 800c71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d102      	bne.n	800c728 <lwip_connect+0x20>
    return -1;
 800c722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c726:	e062      	b.n	800c7ee <lwip_connect+0xe6>
    done_socket(sock);
    return -1;
  }

  LWIP_UNUSED_ARG(namelen);
  if (name->sa_family == AF_UNSPEC) {
 800c728:	68bb      	ldr	r3, [r7, #8]
 800c72a:	785b      	ldrb	r3, [r3, #1]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d108      	bne.n	800c742 <lwip_connect+0x3a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
 800c730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	4618      	mov	r0, r3
 800c736:	f7fd fb6b 	bl	8009e10 <netconn_disconnect>
 800c73a:	4603      	mov	r3, r0
 800c73c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c740:	e039      	b.n	800c7b6 <lwip_connect+0xae>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    /* check size, family and alignment of 'name' */
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2b10      	cmp	r3, #16
 800c746:	d10c      	bne.n	800c762 <lwip_connect+0x5a>
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	785b      	ldrb	r3, [r3, #1]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d003      	beq.n	800c758 <lwip_connect+0x50>
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	785b      	ldrb	r3, [r3, #1]
 800c754:	2b02      	cmp	r3, #2
 800c756:	d104      	bne.n	800c762 <lwip_connect+0x5a>
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	f003 0303 	and.w	r3, r3, #3
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d014      	beq.n	800c78c <lwip_connect+0x84>
 800c762:	4b25      	ldr	r3, [pc, #148]	; (800c7f8 <lwip_connect+0xf0>)
 800c764:	f240 3247 	movw	r2, #839	; 0x347
 800c768:	4924      	ldr	r1, [pc, #144]	; (800c7fc <lwip_connect+0xf4>)
 800c76a:	4825      	ldr	r0, [pc, #148]	; (800c800 <lwip_connect+0xf8>)
 800c76c:	f017 fa38 	bl	8023be0 <iprintf>
 800c770:	f06f 000f 	mvn.w	r0, #15
 800c774:	f7ff fc88 	bl	800c088 <err_to_errno>
 800c778:	6238      	str	r0, [r7, #32]
 800c77a:	6a3b      	ldr	r3, [r7, #32]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d002      	beq.n	800c786 <lwip_connect+0x7e>
 800c780:	4a20      	ldr	r2, [pc, #128]	; (800c804 <lwip_connect+0xfc>)
 800c782:	6a3b      	ldr	r3, [r7, #32]
 800c784:	6013      	str	r3, [r2, #0]
 800c786:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c78a:	e030      	b.n	800c7ee <lwip_connect+0xe6>
               IS_SOCK_ADDR_TYPE_VALID_OR_UNSPEC(name) && IS_SOCK_ADDR_ALIGNED(name),
               sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);

    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	685b      	ldr	r3, [r3, #4]
 800c790:	617b      	str	r3, [r7, #20]
 800c792:	68bb      	ldr	r3, [r7, #8]
 800c794:	885b      	ldrh	r3, [r3, #2]
 800c796:	4618      	mov	r0, r3
 800c798:	f001 fc2c 	bl	800dff4 <lwip_htons>
 800c79c:	4603      	mov	r3, r0
 800c79e:	84fb      	strh	r3, [r7, #38]	; 0x26
      unmap_ipv4_mapped_ipv6(ip_2_ip4(&remote_addr), ip_2_ip6(&remote_addr));
      IP_SET_TYPE_VAL(remote_addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    err = netconn_connect(sock->conn, &remote_addr, remote_port);
 800c7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c7a6:	f107 0114 	add.w	r1, r7, #20
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f7fd faf8 	bl	8009da0 <netconn_connect>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (err != ERR_OK) {
 800c7b6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d00e      	beq.n	800c7dc <lwip_connect+0xd4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800c7be:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f7ff fc60 	bl	800c088 <err_to_errno>
 800c7c8:	61b8      	str	r0, [r7, #24]
 800c7ca:	69bb      	ldr	r3, [r7, #24]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d002      	beq.n	800c7d6 <lwip_connect+0xce>
 800c7d0:	4a0c      	ldr	r2, [pc, #48]	; (800c804 <lwip_connect+0xfc>)
 800c7d2:	69bb      	ldr	r3, [r7, #24]
 800c7d4:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800c7d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c7da:	e008      	b.n	800c7ee <lwip_connect+0xe6>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800c7dc:	2300      	movs	r3, #0
 800c7de:	61fb      	str	r3, [r7, #28]
 800c7e0:	69fb      	ldr	r3, [r7, #28]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d002      	beq.n	800c7ec <lwip_connect+0xe4>
 800c7e6:	4a07      	ldr	r2, [pc, #28]	; (800c804 <lwip_connect+0xfc>)
 800c7e8:	69fb      	ldr	r3, [r7, #28]
 800c7ea:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800c7ec:	2300      	movs	r3, #0
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3730      	adds	r7, #48	; 0x30
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}
 800c7f6:	bf00      	nop
 800c7f8:	08025ea8 	.word	0x08025ea8
 800c7fc:	08025f80 	.word	0x08025f80
 800c800:	08025efc 	.word	0x08025efc
 800c804:	2000ff64 	.word	0x2000ff64

0800c808 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b08c      	sub	sp, #48	; 0x30
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	60f8      	str	r0, [r7, #12]
 800c810:	60b9      	str	r1, [r7, #8]
 800c812:	607a      	str	r2, [r7, #4]
 800c814:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 800c816:	2308      	movs	r3, #8
 800c818:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  ssize_t recvd = 0;
 800c81c:	2300      	movs	r3, #0
 800c81e:	62bb      	str	r3, [r7, #40]	; 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2b00      	cmp	r3, #0
 800c824:	db01      	blt.n	800c82a <lwip_recv_tcp+0x22>
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	e001      	b.n	800c82e <lwip_recv_tcp+0x26>
 800c82a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c82e:	627b      	str	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d106      	bne.n	800c844 <lwip_recv_tcp+0x3c>
 800c836:	4b74      	ldr	r3, [pc, #464]	; (800ca08 <lwip_recv_tcp+0x200>)
 800c838:	f240 329e 	movw	r2, #926	; 0x39e
 800c83c:	4973      	ldr	r1, [pc, #460]	; (800ca0c <lwip_recv_tcp+0x204>)
 800c83e:	4874      	ldr	r0, [pc, #464]	; (800ca10 <lwip_recv_tcp+0x208>)
 800c840:	f017 f9ce 	bl	8023be0 <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	781b      	ldrb	r3, [r3, #0]
 800c84a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c84e:	2b10      	cmp	r3, #16
 800c850:	d006      	beq.n	800c860 <lwip_recv_tcp+0x58>
 800c852:	4b6d      	ldr	r3, [pc, #436]	; (800ca08 <lwip_recv_tcp+0x200>)
 800c854:	f240 329f 	movw	r2, #927	; 0x39f
 800c858:	496e      	ldr	r1, [pc, #440]	; (800ca14 <lwip_recv_tcp+0x20c>)
 800c85a:	486d      	ldr	r0, [pc, #436]	; (800ca10 <lwip_recv_tcp+0x208>)
 800c85c:	f017 f9c0 	bl	8023be0 <iprintf>

  if (flags & MSG_DONTWAIT) {
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	f003 0308 	and.w	r3, r3, #8
 800c866:	2b00      	cmp	r3, #0
 800c868:	d005      	beq.n	800c876 <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 800c86a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c86e:	f043 0304 	orr.w	r3, r3, #4
 800c872:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	685b      	ldr	r3, [r3, #4]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d003      	beq.n	800c886 <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	685b      	ldr	r3, [r3, #4]
 800c882:	617b      	str	r3, [r7, #20]
 800c884:	e036      	b.n	800c8f4 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c88e:	f107 0114 	add.w	r1, r7, #20
 800c892:	4618      	mov	r0, r3
 800c894:	f7fd fc90 	bl	800a1b8 <netconn_recv_tcp_pbuf_flags>
 800c898:	4603      	mov	r3, r0
 800c89a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 800c89e:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d019      	beq.n	800c8da <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 800c8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	f300 808d 	bgt.w	800c9c8 <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 800c8ae:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f7ff fbe8 	bl	800c088 <err_to_errno>
 800c8b8:	61f8      	str	r0, [r7, #28]
 800c8ba:	69fb      	ldr	r3, [r7, #28]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d002      	beq.n	800c8c6 <lwip_recv_tcp+0xbe>
 800c8c0:	4a55      	ldr	r2, [pc, #340]	; (800ca18 <lwip_recv_tcp+0x210>)
 800c8c2:	69fb      	ldr	r3, [r7, #28]
 800c8c4:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 800c8c6:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800c8ca:	f113 0f0f 	cmn.w	r3, #15
 800c8ce:	d101      	bne.n	800c8d4 <lwip_recv_tcp+0xcc>
          return 0;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	e094      	b.n	800c9fe <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 800c8d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c8d8:	e091      	b.n	800c9fe <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 800c8da:	697b      	ldr	r3, [r7, #20]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d106      	bne.n	800c8ee <lwip_recv_tcp+0xe6>
 800c8e0:	4b49      	ldr	r3, [pc, #292]	; (800ca08 <lwip_recv_tcp+0x200>)
 800c8e2:	f240 32c5 	movw	r2, #965	; 0x3c5
 800c8e6:	494d      	ldr	r1, [pc, #308]	; (800ca1c <lwip_recv_tcp+0x214>)
 800c8e8:	4849      	ldr	r0, [pc, #292]	; (800ca10 <lwip_recv_tcp+0x208>)
 800c8ea:	f017 f979 	bl	8023be0 <iprintf>
      sock->lastdata.pbuf = p;
 800c8ee:	697a      	ldr	r2, [r7, #20]
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	891b      	ldrh	r3, [r3, #8]
 800c8f8:	461a      	mov	r2, r3
 800c8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8fc:	4293      	cmp	r3, r2
 800c8fe:	dd03      	ble.n	800c908 <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	891b      	ldrh	r3, [r3, #8]
 800c904:	847b      	strh	r3, [r7, #34]	; 0x22
 800c906:	e001      	b.n	800c90c <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 800c908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c90a:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    if (recvd + copylen < recvd) {
 800c90c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c910:	4413      	add	r3, r2
 800c912:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c914:	429a      	cmp	r2, r3
 800c916:	dd03      	ble.n	800c920 <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 800c918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c91a:	b29b      	uxth	r3, r3
 800c91c:	43db      	mvns	r3, r3
 800c91e:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 800c920:	6978      	ldr	r0, [r7, #20]
 800c922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c924:	68ba      	ldr	r2, [r7, #8]
 800c926:	18d1      	adds	r1, r2, r3
 800c928:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c92a:	2300      	movs	r3, #0
 800c92c:	f004 f9be 	bl	8010cac <pbuf_copy_partial>

    recvd += copylen;
 800c930:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c932:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c934:	4413      	add	r3, r2
 800c936:	62bb      	str	r3, [r7, #40]	; 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 800c938:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c93a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c93c:	429a      	cmp	r2, r3
 800c93e:	da06      	bge.n	800c94e <lwip_recv_tcp+0x146>
 800c940:	4b31      	ldr	r3, [pc, #196]	; (800ca08 <lwip_recv_tcp+0x200>)
 800c942:	f240 32dd 	movw	r2, #989	; 0x3dd
 800c946:	4936      	ldr	r1, [pc, #216]	; (800ca20 <lwip_recv_tcp+0x218>)
 800c948:	4831      	ldr	r0, [pc, #196]	; (800ca10 <lwip_recv_tcp+0x208>)
 800c94a:	f017 f949 	bl	8023be0 <iprintf>
    recv_left -= copylen;
 800c94e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c952:	1ad3      	subs	r3, r2, r3
 800c954:	627b      	str	r3, [r7, #36]	; 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	f003 0301 	and.w	r3, r3, #1
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d123      	bne.n	800c9a8 <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 800c960:	697b      	ldr	r3, [r7, #20]
 800c962:	891b      	ldrh	r3, [r3, #8]
 800c964:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c966:	429a      	cmp	r2, r3
 800c968:	d906      	bls.n	800c978 <lwip_recv_tcp+0x170>
 800c96a:	4b27      	ldr	r3, [pc, #156]	; (800ca08 <lwip_recv_tcp+0x200>)
 800c96c:	f240 32e3 	movw	r2, #995	; 0x3e3
 800c970:	492c      	ldr	r1, [pc, #176]	; (800ca24 <lwip_recv_tcp+0x21c>)
 800c972:	4827      	ldr	r0, [pc, #156]	; (800ca10 <lwip_recv_tcp+0x208>)
 800c974:	f017 f934 	bl	8023be0 <iprintf>
      if (p->tot_len - copylen > 0) {
 800c978:	697b      	ldr	r3, [r7, #20]
 800c97a:	891b      	ldrh	r3, [r3, #8]
 800c97c:	461a      	mov	r2, r3
 800c97e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c980:	1ad3      	subs	r3, r2, r3
 800c982:	2b00      	cmp	r3, #0
 800c984:	dd09      	ble.n	800c99a <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 800c986:	697b      	ldr	r3, [r7, #20]
 800c988:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c98a:	4611      	mov	r1, r2
 800c98c:	4618      	mov	r0, r3
 800c98e:	f003 ff54 	bl	801083a <pbuf_free_header>
 800c992:	4602      	mov	r2, r0
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	605a      	str	r2, [r3, #4]
 800c998:	e006      	b.n	800c9a8 <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	2200      	movs	r2, #0
 800c99e:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f003 ff7c 	bl	80108a0 <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 800c9a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c9ac:	f043 0314 	orr.w	r3, r3, #20
 800c9b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 800c9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	dd08      	ble.n	800c9cc <lwip_recv_tcp+0x1c4>
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	f003 0301 	and.w	r3, r3, #1
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	f43f af58 	beq.w	800c876 <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 800c9c6:	e001      	b.n	800c9cc <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 800c9c8:	bf00      	nop
 800c9ca:	e000      	b.n	800c9ce <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 800c9cc:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 800c9ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	dd0b      	ble.n	800c9ec <lwip_recv_tcp+0x1e4>
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	f003 0301 	and.w	r3, r3, #1
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d106      	bne.n	800c9ec <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9e4:	4611      	mov	r1, r2
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f7fd fb34 	bl	800a054 <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	61bb      	str	r3, [r7, #24]
 800c9f0:	69bb      	ldr	r3, [r7, #24]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d002      	beq.n	800c9fc <lwip_recv_tcp+0x1f4>
 800c9f6:	4a08      	ldr	r2, [pc, #32]	; (800ca18 <lwip_recv_tcp+0x210>)
 800c9f8:	69bb      	ldr	r3, [r7, #24]
 800c9fa:	6013      	str	r3, [r2, #0]
  return recvd;
 800c9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3730      	adds	r7, #48	; 0x30
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}
 800ca06:	bf00      	nop
 800ca08:	08025ea8 	.word	0x08025ea8
 800ca0c:	08025fa0 	.word	0x08025fa0
 800ca10:	08025efc 	.word	0x08025efc
 800ca14:	08025fb0 	.word	0x08025fb0
 800ca18:	2000ff64 	.word	0x2000ff64
 800ca1c:	08025fd4 	.word	0x08025fd4
 800ca20:	08025fe0 	.word	0x08025fe0
 800ca24:	08026008 	.word	0x08026008

0800ca28 <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 800ca28:	b590      	push	{r4, r7, lr}
 800ca2a:	b08b      	sub	sp, #44	; 0x2c
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	60f8      	str	r0, [r7, #12]
 800ca30:	60b9      	str	r1, [r7, #8]
 800ca32:	603b      	str	r3, [r7, #0]
 800ca34:	4613      	mov	r3, r2
 800ca36:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 800ca38:	2300      	movs	r3, #0
 800ca3a:	627b      	str	r3, [r7, #36]	; 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d106      	bne.n	800ca50 <lwip_sock_make_addr+0x28>
 800ca42:	4b2b      	ldr	r3, [pc, #172]	; (800caf0 <lwip_sock_make_addr+0xc8>)
 800ca44:	f240 4207 	movw	r2, #1031	; 0x407
 800ca48:	492a      	ldr	r1, [pc, #168]	; (800caf4 <lwip_sock_make_addr+0xcc>)
 800ca4a:	482b      	ldr	r0, [pc, #172]	; (800caf8 <lwip_sock_make_addr+0xd0>)
 800ca4c:	f017 f8c8 	bl	8023be0 <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d106      	bne.n	800ca64 <lwip_sock_make_addr+0x3c>
 800ca56:	4b26      	ldr	r3, [pc, #152]	; (800caf0 <lwip_sock_make_addr+0xc8>)
 800ca58:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800ca5c:	4927      	ldr	r1, [pc, #156]	; (800cafc <lwip_sock_make_addr+0xd4>)
 800ca5e:	4826      	ldr	r0, [pc, #152]	; (800caf8 <lwip_sock_make_addr+0xd0>)
 800ca60:	f017 f8be 	bl	8023be0 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 800ca64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d106      	bne.n	800ca78 <lwip_sock_make_addr+0x50>
 800ca6a:	4b21      	ldr	r3, [pc, #132]	; (800caf0 <lwip_sock_make_addr+0xc8>)
 800ca6c:	f240 4209 	movw	r2, #1033	; 0x409
 800ca70:	4923      	ldr	r1, [pc, #140]	; (800cb00 <lwip_sock_make_addr+0xd8>)
 800ca72:	4821      	ldr	r0, [pc, #132]	; (800caf8 <lwip_sock_make_addr+0xd0>)
 800ca74:	f017 f8b4 	bl	8023be0 <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800ca78:	f107 0314 	add.w	r3, r7, #20
 800ca7c:	2210      	movs	r2, #16
 800ca7e:	701a      	strb	r2, [r3, #0]
 800ca80:	f107 0314 	add.w	r3, r7, #20
 800ca84:	2202      	movs	r2, #2
 800ca86:	705a      	strb	r2, [r3, #1]
 800ca88:	f107 0414 	add.w	r4, r7, #20
 800ca8c:	88fb      	ldrh	r3, [r7, #6]
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f001 fab0 	bl	800dff4 <lwip_htons>
 800ca94:	4603      	mov	r3, r0
 800ca96:	8063      	strh	r3, [r4, #2]
 800ca98:	f107 0314 	add.w	r3, r7, #20
 800ca9c:	68ba      	ldr	r2, [r7, #8]
 800ca9e:	6812      	ldr	r2, [r2, #0]
 800caa0:	605a      	str	r2, [r3, #4]
 800caa2:	f107 0314 	add.w	r3, r7, #20
 800caa6:	3308      	adds	r3, #8
 800caa8:	2208      	movs	r2, #8
 800caaa:	2100      	movs	r1, #0
 800caac:	4618      	mov	r0, r3
 800caae:	f016 ff99 	bl	80239e4 <memset>
  if (*fromlen < saddr.sa.sa_len) {
 800cab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	7d3a      	ldrb	r2, [r7, #20]
 800cab8:	4293      	cmp	r3, r2
 800caba:	d202      	bcs.n	800cac2 <lwip_sock_make_addr+0x9a>
    truncated = 1;
 800cabc:	2301      	movs	r3, #1
 800cabe:	627b      	str	r3, [r7, #36]	; 0x24
 800cac0:	e008      	b.n	800cad4 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 800cac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	7d3a      	ldrb	r2, [r7, #20]
 800cac8:	4293      	cmp	r3, r2
 800caca:	d903      	bls.n	800cad4 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 800cacc:	7d3b      	ldrb	r3, [r7, #20]
 800cace:	461a      	mov	r2, r3
 800cad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad2:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 800cad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad6:	681a      	ldr	r2, [r3, #0]
 800cad8:	f107 0314 	add.w	r3, r7, #20
 800cadc:	4619      	mov	r1, r3
 800cade:	6838      	ldr	r0, [r7, #0]
 800cae0:	f016 ff58 	bl	8023994 <memcpy>
  return truncated;
 800cae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	372c      	adds	r7, #44	; 0x2c
 800caea:	46bd      	mov	sp, r7
 800caec:	bd90      	pop	{r4, r7, pc}
 800caee:	bf00      	nop
 800caf0:	08025ea8 	.word	0x08025ea8
 800caf4:	08026018 	.word	0x08026018
 800caf8:	08025efc 	.word	0x08025efc
 800cafc:	0802602c 	.word	0x0802602c
 800cb00:	0802603c 	.word	0x0802603c

0800cb04 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b088      	sub	sp, #32
 800cb08:	af02      	add	r7, sp, #8
 800cb0a:	60f8      	str	r0, [r7, #12]
 800cb0c:	60b9      	str	r1, [r7, #8]
 800cb0e:	607a      	str	r2, [r7, #4]
 800cb10:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d101      	bne.n	800cb1c <lwip_recv_tcp_from+0x18>
    return 0;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	e021      	b.n	800cb60 <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 800cb1c:	68bb      	ldr	r3, [r7, #8]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d01d      	beq.n	800cb5e <lwip_recv_tcp_from+0x5a>
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d01a      	beq.n	800cb5e <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	6818      	ldr	r0, [r3, #0]
 800cb2c:	f107 0216 	add.w	r2, r7, #22
 800cb30:	f107 0110 	add.w	r1, r7, #16
 800cb34:	2300      	movs	r3, #0
 800cb36:	f7fd f8e1 	bl	8009cfc <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 800cb3a:	68bb      	ldr	r3, [r7, #8]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d00e      	beq.n	800cb5e <lwip_recv_tcp_from+0x5a>
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d00b      	beq.n	800cb5e <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	6818      	ldr	r0, [r3, #0]
 800cb4a:	8afa      	ldrh	r2, [r7, #22]
 800cb4c:	f107 0110 	add.w	r1, r7, #16
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	9300      	str	r3, [sp, #0]
 800cb54:	68bb      	ldr	r3, [r7, #8]
 800cb56:	f7ff ff67 	bl	800ca28 <lwip_sock_make_addr>
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	e000      	b.n	800cb60 <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 800cb5e:	2300      	movs	r3, #0
}
 800cb60:	4618      	mov	r0, r3
 800cb62:	3718      	adds	r7, #24
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}

0800cb68 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 800cb68:	b590      	push	{r4, r7, lr}
 800cb6a:	b08d      	sub	sp, #52	; 0x34
 800cb6c:	af02      	add	r7, sp, #8
 800cb6e:	60f8      	str	r0, [r7, #12]
 800cb70:	60b9      	str	r1, [r7, #8]
 800cb72:	607a      	str	r2, [r7, #4]
 800cb74:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	689b      	ldr	r3, [r3, #8]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d10d      	bne.n	800cb9a <lwip_recvfrom_udp_raw+0x32>
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	68db      	ldr	r3, [r3, #12]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	dd09      	ble.n	800cb9a <lwip_recvfrom_udp_raw+0x32>
 800cb86:	4b5e      	ldr	r3, [pc, #376]	; (800cd00 <lwip_recvfrom_udp_raw+0x198>)
 800cb88:	f240 4249 	movw	r2, #1097	; 0x449
 800cb8c:	495d      	ldr	r1, [pc, #372]	; (800cd04 <lwip_recvfrom_udp_raw+0x19c>)
 800cb8e:	485e      	ldr	r0, [pc, #376]	; (800cd08 <lwip_recvfrom_udp_raw+0x1a0>)
 800cb90:	f017 f826 	bl	8023be0 <iprintf>
 800cb94:	f06f 030f 	mvn.w	r3, #15
 800cb98:	e0ad      	b.n	800ccf6 <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	f003 0308 	and.w	r3, r3, #8
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d003      	beq.n	800cbac <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 800cba4:	2304      	movs	r3, #4
 800cba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cbaa:	e002      	b.n	800cbb2 <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 800cbac:	2300      	movs	r3, #0
 800cbae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	685b      	ldr	r3, [r3, #4]
 800cbb6:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 800cbb8:	693b      	ldr	r3, [r7, #16]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d11e      	bne.n	800cbfc <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cbc6:	f107 0110 	add.w	r1, r7, #16
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f7fd fb20 	bl	800a210 <netconn_recv_udp_raw_netbuf_flags>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 800cbd4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d002      	beq.n	800cbe2 <lwip_recvfrom_udp_raw+0x7a>
      return err;
 800cbdc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800cbe0:	e089      	b.n	800ccf6 <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d106      	bne.n	800cbf6 <lwip_recvfrom_udp_raw+0x8e>
 800cbe8:	4b45      	ldr	r3, [pc, #276]	; (800cd00 <lwip_recvfrom_udp_raw+0x198>)
 800cbea:	f240 425e 	movw	r2, #1118	; 0x45e
 800cbee:	4947      	ldr	r1, [pc, #284]	; (800cd0c <lwip_recvfrom_udp_raw+0x1a4>)
 800cbf0:	4845      	ldr	r0, [pc, #276]	; (800cd08 <lwip_recvfrom_udp_raw+0x1a0>)
 800cbf2:	f016 fff5 	bl	8023be0 <iprintf>
    sock->lastdata.netbuf = buf;
 800cbf6:	693a      	ldr	r2, [r7, #16]
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 800cbfc:	693b      	ldr	r3, [r7, #16]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	891b      	ldrh	r3, [r3, #8]
 800cc02:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 800cc04:	2300      	movs	r3, #0
 800cc06:	847b      	strh	r3, [r7, #34]	; 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800cc08:	2300      	movs	r3, #0
 800cc0a:	61fb      	str	r3, [r7, #28]
 800cc0c:	e029      	b.n	800cc62 <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 800cc0e:	8b3a      	ldrh	r2, [r7, #24]
 800cc10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc12:	1ad3      	subs	r3, r2, r3
 800cc14:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	689a      	ldr	r2, [r3, #8]
 800cc1a:	69fb      	ldr	r3, [r7, #28]
 800cc1c:	00db      	lsls	r3, r3, #3
 800cc1e:	4413      	add	r3, r2
 800cc20:	685a      	ldr	r2, [r3, #4]
 800cc22:	8afb      	ldrh	r3, [r7, #22]
 800cc24:	429a      	cmp	r2, r3
 800cc26:	d902      	bls.n	800cc2e <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 800cc28:	8afb      	ldrh	r3, [r7, #22]
 800cc2a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800cc2c:	e006      	b.n	800cc3c <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	689a      	ldr	r2, [r3, #8]
 800cc32:	69fb      	ldr	r3, [r7, #28]
 800cc34:	00db      	lsls	r3, r3, #3
 800cc36:	4413      	add	r3, r2
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800cc3c:	693b      	ldr	r3, [r7, #16]
 800cc3e:	6818      	ldr	r0, [r3, #0]
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	689a      	ldr	r2, [r3, #8]
 800cc44:	69fb      	ldr	r3, [r7, #28]
 800cc46:	00db      	lsls	r3, r3, #3
 800cc48:	4413      	add	r3, r2
 800cc4a:	6819      	ldr	r1, [r3, #0]
 800cc4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cc50:	f004 f82c 	bl	8010cac <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 800cc54:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cc56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc58:	4413      	add	r3, r2
 800cc5a:	847b      	strh	r3, [r7, #34]	; 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800cc5c:	69fb      	ldr	r3, [r7, #28]
 800cc5e:	3301      	adds	r3, #1
 800cc60:	61fb      	str	r3, [r7, #28]
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	68db      	ldr	r3, [r3, #12]
 800cc66:	69fa      	ldr	r2, [r7, #28]
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	da03      	bge.n	800cc74 <lwip_recvfrom_udp_raw+0x10c>
 800cc6c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cc6e:	8b3b      	ldrh	r3, [r7, #24]
 800cc70:	429a      	cmp	r2, r3
 800cc72:	d3cc      	bcc.n	800cc0e <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d01a      	beq.n	800ccb2 <lwip_recvfrom_udp_raw+0x14a>
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	685b      	ldr	r3, [r3, #4]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d016      	beq.n	800ccb2 <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d012      	beq.n	800ccb2 <lwip_recvfrom_udp_raw+0x14a>
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	685b      	ldr	r3, [r3, #4]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d00e      	beq.n	800ccb2 <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	6818      	ldr	r0, [r3, #0]
 800cc98:	693b      	ldr	r3, [r7, #16]
 800cc9a:	f103 0108 	add.w	r1, r3, #8
 800cc9e:	693b      	ldr	r3, [r7, #16]
 800cca0:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	3304      	adds	r3, #4
 800ccaa:	9300      	str	r3, [sp, #0]
 800ccac:	4623      	mov	r3, r4
 800ccae:	f7ff febb 	bl	800ca28 <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	691b      	ldr	r3, [r3, #16]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d007      	beq.n	800ccd0 <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 800ccc4:	7d7b      	ldrb	r3, [r7, #21]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d102      	bne.n	800ccd0 <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2200      	movs	r2, #0
 800ccce:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	f003 0301 	and.w	r3, r3, #1
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d106      	bne.n	800cce8 <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 800cce0:	693b      	ldr	r3, [r7, #16]
 800cce2:	4618      	mov	r0, r3
 800cce4:	f7ff f9ee 	bl	800c0c4 <netbuf_delete>
  }
  if (datagram_len) {
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d002      	beq.n	800ccf4 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	8b3a      	ldrh	r2, [r7, #24]
 800ccf2:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 800ccf4:	2300      	movs	r3, #0
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	372c      	adds	r7, #44	; 0x2c
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bd90      	pop	{r4, r7, pc}
 800ccfe:	bf00      	nop
 800cd00:	08025ea8 	.word	0x08025ea8
 800cd04:	0802604c 	.word	0x0802604c
 800cd08:	08025efc 	.word	0x08025efc
 800cd0c:	08026078 	.word	0x08026078

0800cd10 <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b096      	sub	sp, #88	; 0x58
 800cd14:	af02      	add	r7, sp, #8
 800cd16:	60f8      	str	r0, [r7, #12]
 800cd18:	60b9      	str	r1, [r7, #8]
 800cd1a:	607a      	str	r2, [r7, #4]
 800cd1c:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 800cd1e:	68f8      	ldr	r0, [r7, #12]
 800cd20:	f7ff fbb4 	bl	800c48c <get_socket>
 800cd24:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (!sock) {
 800cd26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d102      	bne.n	800cd32 <lwip_recvfrom+0x22>
    return -1;
 800cd2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd30:	e078      	b.n	800ce24 <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800cd32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	781b      	ldrb	r3, [r3, #0]
 800cd38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cd3c:	2b10      	cmp	r3, #16
 800cd3e:	d112      	bne.n	800cd66 <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	687a      	ldr	r2, [r7, #4]
 800cd44:	68b9      	ldr	r1, [r7, #8]
 800cd46:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800cd48:	f7ff fd5e 	bl	800c808 <lwip_recv_tcp>
 800cd4c:	6478      	str	r0, [r7, #68]	; 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 800cd4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd50:	9301      	str	r3, [sp, #4]
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	9300      	str	r3, [sp, #0]
 800cd56:	4b35      	ldr	r3, [pc, #212]	; (800ce2c <lwip_recvfrom+0x11c>)
 800cd58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cd5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cd5c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800cd5e:	f7ff fed1 	bl	800cb04 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 800cd62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd64:	e05e      	b.n	800ce24 <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 800cd66:	2300      	movs	r3, #0
 800cd68:	877b      	strh	r3, [r7, #58]	; 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	633b      	str	r3, [r7, #48]	; 0x30
    vec.iov_len = len;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	637b      	str	r3, [r7, #52]	; 0x34
    msg.msg_control = NULL;
 800cd72:	2300      	movs	r3, #0
 800cd74:	627b      	str	r3, [r7, #36]	; 0x24
    msg.msg_controllen = 0;
 800cd76:	2300      	movs	r3, #0
 800cd78:	62bb      	str	r3, [r7, #40]	; 0x28
    msg.msg_flags = 0;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg.msg_iov = &vec;
 800cd7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cd82:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 800cd84:	2301      	movs	r3, #1
 800cd86:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 800cd88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cd8a:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800cd8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d002      	beq.n	800cd98 <lwip_recvfrom+0x88>
 800cd92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	e000      	b.n	800cd9a <lwip_recvfrom+0x8a>
 800cd98:	2300      	movs	r3, #0
 800cd9a:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800cd9c:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 800cda0:	f107 0214 	add.w	r2, r7, #20
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	9300      	str	r3, [sp, #0]
 800cda8:	460b      	mov	r3, r1
 800cdaa:	6839      	ldr	r1, [r7, #0]
 800cdac:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800cdae:	f7ff fedb 	bl	800cb68 <lwip_recvfrom_udp_raw>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (err != ERR_OK) {
 800cdb8:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d00e      	beq.n	800cdde <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 800cdc0:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	f7ff f95f 	bl	800c088 <err_to_errno>
 800cdca:	63f8      	str	r0, [r7, #60]	; 0x3c
 800cdcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d002      	beq.n	800cdd8 <lwip_recvfrom+0xc8>
 800cdd2:	4a17      	ldr	r2, [pc, #92]	; (800ce30 <lwip_recvfrom+0x120>)
 800cdd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdd6:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800cdd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cddc:	e022      	b.n	800ce24 <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800cdde:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cde0:	461a      	mov	r2, r3
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	4293      	cmp	r3, r2
 800cde6:	bf28      	it	cs
 800cde8:	4613      	movcs	r3, r2
 800cdea:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800cdee:	4293      	cmp	r3, r2
 800cdf0:	d206      	bcs.n	800ce00 <lwip_recvfrom+0xf0>
 800cdf2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cdf4:	461a      	mov	r2, r3
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	4293      	cmp	r3, r2
 800cdfa:	bf28      	it	cs
 800cdfc:	4613      	movcs	r3, r2
 800cdfe:	e001      	b.n	800ce04 <lwip_recvfrom+0xf4>
 800ce00:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ce04:	647b      	str	r3, [r7, #68]	; 0x44
    if (fromlen) {
 800ce06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d002      	beq.n	800ce12 <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 800ce0c:	69ba      	ldr	r2, [r7, #24]
 800ce0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce10:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 800ce12:	2300      	movs	r3, #0
 800ce14:	643b      	str	r3, [r7, #64]	; 0x40
 800ce16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d002      	beq.n	800ce22 <lwip_recvfrom+0x112>
 800ce1c:	4a04      	ldr	r2, [pc, #16]	; (800ce30 <lwip_recvfrom+0x120>)
 800ce1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce20:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 800ce22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800ce24:	4618      	mov	r0, r3
 800ce26:	3750      	adds	r7, #80	; 0x50
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}
 800ce2c:	08026084 	.word	0x08026084
 800ce30:	2000ff64 	.word	0x2000ff64

0800ce34 <lwip_recv>:
  return lwip_recvmsg(s, &msg, 0);
}

ssize_t
lwip_recv(int s, void *mem, size_t len, int flags)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b086      	sub	sp, #24
 800ce38:	af02      	add	r7, sp, #8
 800ce3a:	60f8      	str	r0, [r7, #12]
 800ce3c:	60b9      	str	r1, [r7, #8]
 800ce3e:	607a      	str	r2, [r7, #4]
 800ce40:	603b      	str	r3, [r7, #0]
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 800ce42:	2300      	movs	r3, #0
 800ce44:	9301      	str	r3, [sp, #4]
 800ce46:	2300      	movs	r3, #0
 800ce48:	9300      	str	r3, [sp, #0]
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	687a      	ldr	r2, [r7, #4]
 800ce4e:	68b9      	ldr	r1, [r7, #8]
 800ce50:	68f8      	ldr	r0, [r7, #12]
 800ce52:	f7ff ff5d 	bl	800cd10 <lwip_recvfrom>
 800ce56:	4603      	mov	r3, r0
}
 800ce58:	4618      	mov	r0, r3
 800ce5a:	3710      	adds	r7, #16
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	bd80      	pop	{r7, pc}

0800ce60 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b08a      	sub	sp, #40	; 0x28
 800ce64:	af02      	add	r7, sp, #8
 800ce66:	60f8      	str	r0, [r7, #12]
 800ce68:	60b9      	str	r1, [r7, #8]
 800ce6a:	607a      	str	r2, [r7, #4]
 800ce6c:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 800ce6e:	68f8      	ldr	r0, [r7, #12]
 800ce70:	f7ff fb0c 	bl	800c48c <get_socket>
 800ce74:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800ce76:	69fb      	ldr	r3, [r7, #28]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d102      	bne.n	800ce82 <lwip_send+0x22>
    return -1;
 800ce7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce80:	e046      	b.n	800cf10 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800ce82:	69fb      	ldr	r3, [r7, #28]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	781b      	ldrb	r3, [r3, #0]
 800ce88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ce8c:	2b10      	cmp	r3, #16
 800ce8e:	d00b      	beq.n	800cea8 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 800ce90:	2300      	movs	r3, #0
 800ce92:	9301      	str	r3, [sp, #4]
 800ce94:	2300      	movs	r3, #0
 800ce96:	9300      	str	r3, [sp, #0]
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	687a      	ldr	r2, [r7, #4]
 800ce9c:	68b9      	ldr	r1, [r7, #8]
 800ce9e:	68f8      	ldr	r0, [r7, #12]
 800cea0:	f000 f83c 	bl	800cf1c <lwip_sendto>
 800cea4:	4603      	mov	r3, r0
 800cea6:	e033      	b.n	800cf10 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d001      	beq.n	800ceb6 <lwip_send+0x56>
 800ceb2:	2203      	movs	r2, #3
 800ceb4:	e000      	b.n	800ceb8 <lwip_send+0x58>
 800ceb6:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	105b      	asrs	r3, r3, #1
 800cebc:	b25b      	sxtb	r3, r3
 800cebe:	f003 0304 	and.w	r3, r3, #4
 800cec2:	b25b      	sxtb	r3, r3
 800cec4:	4313      	orrs	r3, r2
 800cec6:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 800cec8:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 800ceca:	2300      	movs	r3, #0
 800cecc:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800cece:	69fb      	ldr	r3, [r7, #28]
 800ced0:	6818      	ldr	r0, [r3, #0]
 800ced2:	7efa      	ldrb	r2, [r7, #27]
 800ced4:	f107 0310 	add.w	r3, r7, #16
 800ced8:	9300      	str	r3, [sp, #0]
 800ceda:	4613      	mov	r3, r2
 800cedc:	687a      	ldr	r2, [r7, #4]
 800cede:	68b9      	ldr	r1, [r7, #8]
 800cee0:	f7fd f9f0 	bl	800a2c4 <netconn_write_partly>
 800cee4:	4603      	mov	r3, r0
 800cee6:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800cee8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ceec:	4618      	mov	r0, r3
 800ceee:	f7ff f8cb 	bl	800c088 <err_to_errno>
 800cef2:	6178      	str	r0, [r7, #20]
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d002      	beq.n	800cf00 <lwip_send+0xa0>
 800cefa:	4a07      	ldr	r2, [pc, #28]	; (800cf18 <lwip_send+0xb8>)
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 800cf00:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d101      	bne.n	800cf0c <lwip_send+0xac>
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	e001      	b.n	800cf10 <lwip_send+0xb0>
 800cf0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800cf10:	4618      	mov	r0, r3
 800cf12:	3720      	adds	r7, #32
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bd80      	pop	{r7, pc}
 800cf18:	2000ff64 	.word	0x2000ff64

0800cf1c <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b08e      	sub	sp, #56	; 0x38
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	60f8      	str	r0, [r7, #12]
 800cf24:	60b9      	str	r1, [r7, #8]
 800cf26:	607a      	str	r2, [r7, #4]
 800cf28:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800cf2a:	68f8      	ldr	r0, [r7, #12]
 800cf2c:	f7ff faae 	bl	800c48c <get_socket>
 800cf30:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 800cf32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d102      	bne.n	800cf3e <lwip_sendto+0x22>
    return -1;
 800cf38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf3c:	e093      	b.n	800d066 <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800cf3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	781b      	ldrb	r3, [r3, #0]
 800cf44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cf48:	2b10      	cmp	r3, #16
 800cf4a:	d107      	bne.n	800cf5c <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	687a      	ldr	r2, [r7, #4]
 800cf50:	68b9      	ldr	r1, [r7, #8]
 800cf52:	68f8      	ldr	r0, [r7, #12]
 800cf54:	f7ff ff84 	bl	800ce60 <lwip_send>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	e084      	b.n	800d066 <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf62:	d30a      	bcc.n	800cf7a <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 800cf64:	235a      	movs	r3, #90	; 0x5a
 800cf66:	623b      	str	r3, [r7, #32]
 800cf68:	6a3b      	ldr	r3, [r7, #32]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d002      	beq.n	800cf74 <lwip_sendto+0x58>
 800cf6e:	4a40      	ldr	r2, [pc, #256]	; (800d070 <lwip_sendto+0x154>)
 800cf70:	6a3b      	ldr	r3, [r7, #32]
 800cf72:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800cf74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf78:	e075      	b.n	800d066 <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800cf7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d102      	bne.n	800cf8a <lwip_sendto+0x6e>
 800cf84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d023      	beq.n	800cfd2 <lwip_sendto+0xb6>
 800cf8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf8c:	2b10      	cmp	r3, #16
 800cf8e:	d10b      	bne.n	800cfa8 <lwip_sendto+0x8c>
 800cf90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d008      	beq.n	800cfa8 <lwip_sendto+0x8c>
 800cf96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf98:	785b      	ldrb	r3, [r3, #1]
 800cf9a:	2b02      	cmp	r3, #2
 800cf9c:	d104      	bne.n	800cfa8 <lwip_sendto+0x8c>
 800cf9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfa0:	f003 0303 	and.w	r3, r3, #3
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d014      	beq.n	800cfd2 <lwip_sendto+0xb6>
 800cfa8:	4b32      	ldr	r3, [pc, #200]	; (800d074 <lwip_sendto+0x158>)
 800cfaa:	f240 6252 	movw	r2, #1618	; 0x652
 800cfae:	4932      	ldr	r1, [pc, #200]	; (800d078 <lwip_sendto+0x15c>)
 800cfb0:	4832      	ldr	r0, [pc, #200]	; (800d07c <lwip_sendto+0x160>)
 800cfb2:	f016 fe15 	bl	8023be0 <iprintf>
 800cfb6:	f06f 000f 	mvn.w	r0, #15
 800cfba:	f7ff f865 	bl	800c088 <err_to_errno>
 800cfbe:	62b8      	str	r0, [r7, #40]	; 0x28
 800cfc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d002      	beq.n	800cfcc <lwip_sendto+0xb0>
 800cfc6:	4a2a      	ldr	r2, [pc, #168]	; (800d070 <lwip_sendto+0x154>)
 800cfc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfca:	6013      	str	r3, [r2, #0]
 800cfcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cfd0:	e049      	b.n	800d066 <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	617b      	str	r3, [r7, #20]
 800cfd6:	697b      	ldr	r3, [r7, #20]
 800cfd8:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 800cfda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d00a      	beq.n	800cff6 <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800cfe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfe2:	685b      	ldr	r3, [r3, #4]
 800cfe4:	61bb      	str	r3, [r7, #24]
 800cfe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfe8:	885b      	ldrh	r3, [r3, #2]
 800cfea:	4618      	mov	r0, r3
 800cfec:	f001 f802 	bl	800dff4 <lwip_htons>
 800cff0:	4603      	mov	r3, r0
 800cff2:	86bb      	strh	r3, [r7, #52]	; 0x34
 800cff4:	e003      	b.n	800cffe <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 800cff6:	2300      	movs	r3, #0
 800cff8:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800cffa:	2300      	movs	r3, #0
 800cffc:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 800cffe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d000:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800d002:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d004:	f107 0310 	add.w	r3, r7, #16
 800d008:	68b9      	ldr	r1, [r7, #8]
 800d00a:	4618      	mov	r0, r3
 800d00c:	f7ff f8a2 	bl	800c154 <netbuf_ref>
 800d010:	4603      	mov	r3, r0
 800d012:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800d016:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d10a      	bne.n	800d034 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 800d01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	f107 0210 	add.w	r2, r7, #16
 800d026:	4611      	mov	r1, r2
 800d028:	4618      	mov	r0, r3
 800d02a:	f7fd f91d 	bl	800a268 <netconn_send>
 800d02e:	4603      	mov	r3, r0
 800d030:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800d034:	f107 0310 	add.w	r3, r7, #16
 800d038:	4618      	mov	r0, r3
 800d03a:	f7ff f863 	bl	800c104 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 800d03e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d042:	4618      	mov	r0, r3
 800d044:	f7ff f820 	bl	800c088 <err_to_errno>
 800d048:	6278      	str	r0, [r7, #36]	; 0x24
 800d04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d002      	beq.n	800d056 <lwip_sendto+0x13a>
 800d050:	4a07      	ldr	r2, [pc, #28]	; (800d070 <lwip_sendto+0x154>)
 800d052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d054:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 800d056:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d101      	bne.n	800d062 <lwip_sendto+0x146>
 800d05e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d060:	e001      	b.n	800d066 <lwip_sendto+0x14a>
 800d062:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800d066:	4618      	mov	r0, r3
 800d068:	3738      	adds	r7, #56	; 0x38
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}
 800d06e:	bf00      	nop
 800d070:	2000ff64 	.word	0x2000ff64
 800d074:	08025ea8 	.word	0x08025ea8
 800d078:	08026188 	.word	0x08026188
 800d07c:	08025efc 	.word	0x08025efc

0800d080 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b086      	sub	sp, #24
 800d084:	af00      	add	r7, sp, #0
 800d086:	60f8      	str	r0, [r7, #12]
 800d088:	60b9      	str	r1, [r7, #8]
 800d08a:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	2b03      	cmp	r3, #3
 800d090:	d009      	beq.n	800d0a6 <lwip_socket+0x26>
 800d092:	68bb      	ldr	r3, [r7, #8]
 800d094:	2b03      	cmp	r3, #3
 800d096:	dc23      	bgt.n	800d0e0 <lwip_socket+0x60>
 800d098:	68bb      	ldr	r3, [r7, #8]
 800d09a:	2b01      	cmp	r3, #1
 800d09c:	d019      	beq.n	800d0d2 <lwip_socket+0x52>
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	2b02      	cmp	r3, #2
 800d0a2:	d009      	beq.n	800d0b8 <lwip_socket+0x38>
 800d0a4:	e01c      	b.n	800d0e0 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	b2db      	uxtb	r3, r3
 800d0aa:	4a22      	ldr	r2, [pc, #136]	; (800d134 <lwip_socket+0xb4>)
 800d0ac:	4619      	mov	r1, r3
 800d0ae:	2040      	movs	r0, #64	; 0x40
 800d0b0:	f7fc fd6a 	bl	8009b88 <netconn_new_with_proto_and_callback>
 800d0b4:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800d0b6:	e019      	b.n	800d0ec <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2b88      	cmp	r3, #136	; 0x88
 800d0bc:	d101      	bne.n	800d0c2 <lwip_socket+0x42>
 800d0be:	2321      	movs	r3, #33	; 0x21
 800d0c0:	e000      	b.n	800d0c4 <lwip_socket+0x44>
 800d0c2:	2320      	movs	r3, #32
 800d0c4:	4a1b      	ldr	r2, [pc, #108]	; (800d134 <lwip_socket+0xb4>)
 800d0c6:	2100      	movs	r1, #0
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f7fc fd5d 	bl	8009b88 <netconn_new_with_proto_and_callback>
 800d0ce:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800d0d0:	e00c      	b.n	800d0ec <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800d0d2:	4a18      	ldr	r2, [pc, #96]	; (800d134 <lwip_socket+0xb4>)
 800d0d4:	2100      	movs	r1, #0
 800d0d6:	2010      	movs	r0, #16
 800d0d8:	f7fc fd56 	bl	8009b88 <netconn_new_with_proto_and_callback>
 800d0dc:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800d0de:	e005      	b.n	800d0ec <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800d0e0:	4b15      	ldr	r3, [pc, #84]	; (800d138 <lwip_socket+0xb8>)
 800d0e2:	2216      	movs	r2, #22
 800d0e4:	601a      	str	r2, [r3, #0]
      return -1;
 800d0e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d0ea:	e01e      	b.n	800d12a <lwip_socket+0xaa>
  }

  if (!conn) {
 800d0ec:	697b      	ldr	r3, [r7, #20]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d105      	bne.n	800d0fe <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800d0f2:	4b11      	ldr	r3, [pc, #68]	; (800d138 <lwip_socket+0xb8>)
 800d0f4:	2269      	movs	r2, #105	; 0x69
 800d0f6:	601a      	str	r2, [r3, #0]
    return -1;
 800d0f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d0fc:	e015      	b.n	800d12a <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 800d0fe:	2100      	movs	r1, #0
 800d100:	6978      	ldr	r0, [r7, #20]
 800d102:	f7ff f9db 	bl	800c4bc <alloc_socket>
 800d106:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800d108:	693b      	ldr	r3, [r7, #16]
 800d10a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d10e:	d108      	bne.n	800d122 <lwip_socket+0xa2>
    netconn_delete(conn);
 800d110:	6978      	ldr	r0, [r7, #20]
 800d112:	f7fc fdd7 	bl	8009cc4 <netconn_delete>
    set_errno(ENFILE);
 800d116:	4b08      	ldr	r3, [pc, #32]	; (800d138 <lwip_socket+0xb8>)
 800d118:	2217      	movs	r2, #23
 800d11a:	601a      	str	r2, [r3, #0]
    return -1;
 800d11c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d120:	e003      	b.n	800d12a <lwip_socket+0xaa>
  }
  conn->socket = i;
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	693a      	ldr	r2, [r7, #16]
 800d126:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800d128:	693b      	ldr	r3, [r7, #16]
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	3718      	adds	r7, #24
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}
 800d132:	bf00      	nop
 800d134:	0800d1c5 	.word	0x0800d1c5
 800d138:	2000ff64 	.word	0x2000ff64

0800d13c <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800d13c:	b480      	push	{r7}
 800d13e:	b087      	sub	sp, #28
 800d140:	af00      	add	r7, sp, #0
 800d142:	60f8      	str	r0, [r7, #12]
 800d144:	60b9      	str	r1, [r7, #8]
 800d146:	607a      	str	r2, [r7, #4]
 800d148:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800d14a:	2300      	movs	r3, #0
 800d14c:	617b      	str	r3, [r7, #20]
 800d14e:	e02c      	b.n	800d1aa <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	695a      	ldr	r2, [r3, #20]
 800d154:	697b      	ldr	r3, [r7, #20]
 800d156:	00db      	lsls	r3, r3, #3
 800d158:	4413      	add	r3, r2
 800d15a:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800d15c:	693b      	ldr	r3, [r7, #16]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	68ba      	ldr	r2, [r7, #8]
 800d162:	429a      	cmp	r2, r3
 800d164:	d11e      	bne.n	800d1a4 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d009      	beq.n	800d180 <lwip_poll_should_wake+0x44>
 800d16c:	693b      	ldr	r3, [r7, #16]
 800d16e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d172:	b29b      	uxth	r3, r3
 800d174:	f003 0301 	and.w	r3, r3, #1
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d001      	beq.n	800d180 <lwip_poll_should_wake+0x44>
        return 1;
 800d17c:	2301      	movs	r3, #1
 800d17e:	e01a      	b.n	800d1b6 <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d009      	beq.n	800d19a <lwip_poll_should_wake+0x5e>
 800d186:	693b      	ldr	r3, [r7, #16]
 800d188:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d18c:	b29b      	uxth	r3, r3
 800d18e:	f003 0302 	and.w	r3, r3, #2
 800d192:	2b00      	cmp	r3, #0
 800d194:	d001      	beq.n	800d19a <lwip_poll_should_wake+0x5e>
        return 1;
 800d196:	2301      	movs	r3, #1
 800d198:	e00d      	b.n	800d1b6 <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800d19a:	6a3b      	ldr	r3, [r7, #32]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d001      	beq.n	800d1a4 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	e008      	b.n	800d1b6 <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	3301      	adds	r3, #1
 800d1a8:	617b      	str	r3, [r7, #20]
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	699b      	ldr	r3, [r3, #24]
 800d1ae:	697a      	ldr	r2, [r7, #20]
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	d3cd      	bcc.n	800d150 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800d1b4:	2300      	movs	r3, #0
}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	371c      	adds	r7, #28
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c0:	4770      	bx	lr
	...

0800d1c4 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b08a      	sub	sp, #40	; 0x28
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
 800d1cc:	460b      	mov	r3, r1
 800d1ce:	70fb      	strb	r3, [r7, #3]
 800d1d0:	4613      	mov	r3, r2
 800d1d2:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	f000 80a4 	beq.w	800d324 <event_callback+0x160>
    s = conn->socket;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	699b      	ldr	r3, [r3, #24]
 800d1e0:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 800d1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	da18      	bge.n	800d21a <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800d1e8:	f00e fa94 	bl	801b714 <sys_arch_protect>
 800d1ec:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	699b      	ldr	r3, [r3, #24]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	da0b      	bge.n	800d20e <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800d1f6:	78fb      	ldrb	r3, [r7, #3]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d104      	bne.n	800d206 <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	699b      	ldr	r3, [r3, #24]
 800d200:	1e5a      	subs	r2, r3, #1
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800d206:	69f8      	ldr	r0, [r7, #28]
 800d208:	f00e fa92 	bl	801b730 <sys_arch_unprotect>
        return;
 800d20c:	e08d      	b.n	800d32a <event_callback+0x166>
      }
      s = conn->socket;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	699b      	ldr	r3, [r3, #24]
 800d212:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 800d214:	69f8      	ldr	r0, [r7, #28]
 800d216:	f00e fa8b 	bl	801b730 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800d21a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d21c:	f7ff f936 	bl	800c48c <get_socket>
 800d220:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800d222:	69bb      	ldr	r3, [r7, #24]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d07f      	beq.n	800d328 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800d228:	2301      	movs	r3, #1
 800d22a:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800d22c:	f00e fa72 	bl	801b714 <sys_arch_protect>
 800d230:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800d232:	78fb      	ldrb	r3, [r7, #3]
 800d234:	2b04      	cmp	r3, #4
 800d236:	d83e      	bhi.n	800d2b6 <event_callback+0xf2>
 800d238:	a201      	add	r2, pc, #4	; (adr r2, 800d240 <event_callback+0x7c>)
 800d23a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d23e:	bf00      	nop
 800d240:	0800d255 	.word	0x0800d255
 800d244:	0800d277 	.word	0x0800d277
 800d248:	0800d28f 	.word	0x0800d28f
 800d24c:	0800d2a3 	.word	0x0800d2a3
 800d250:	0800d2af 	.word	0x0800d2af
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800d254:	69bb      	ldr	r3, [r7, #24]
 800d256:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d25a:	b29b      	uxth	r3, r3
 800d25c:	3301      	adds	r3, #1
 800d25e:	b29b      	uxth	r3, r3
 800d260:	b21a      	sxth	r2, r3
 800d262:	69bb      	ldr	r3, [r7, #24]
 800d264:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800d266:	69bb      	ldr	r3, [r7, #24]
 800d268:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d26c:	2b01      	cmp	r3, #1
 800d26e:	dd2a      	ble.n	800d2c6 <event_callback+0x102>
        check_waiters = 0;
 800d270:	2300      	movs	r3, #0
 800d272:	623b      	str	r3, [r7, #32]
      }
      break;
 800d274:	e027      	b.n	800d2c6 <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800d276:	69bb      	ldr	r3, [r7, #24]
 800d278:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d27c:	b29b      	uxth	r3, r3
 800d27e:	3b01      	subs	r3, #1
 800d280:	b29b      	uxth	r3, r3
 800d282:	b21a      	sxth	r2, r3
 800d284:	69bb      	ldr	r3, [r7, #24]
 800d286:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800d288:	2300      	movs	r3, #0
 800d28a:	623b      	str	r3, [r7, #32]
      break;
 800d28c:	e01c      	b.n	800d2c8 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800d28e:	69bb      	ldr	r3, [r7, #24]
 800d290:	895b      	ldrh	r3, [r3, #10]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d001      	beq.n	800d29a <event_callback+0xd6>
        check_waiters = 0;
 800d296:	2300      	movs	r3, #0
 800d298:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800d29a:	69bb      	ldr	r3, [r7, #24]
 800d29c:	2201      	movs	r2, #1
 800d29e:	815a      	strh	r2, [r3, #10]
      break;
 800d2a0:	e012      	b.n	800d2c8 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800d2a2:	69bb      	ldr	r3, [r7, #24]
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	623b      	str	r3, [r7, #32]
      break;
 800d2ac:	e00c      	b.n	800d2c8 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800d2ae:	69bb      	ldr	r3, [r7, #24]
 800d2b0:	2201      	movs	r2, #1
 800d2b2:	819a      	strh	r2, [r3, #12]
      break;
 800d2b4:	e008      	b.n	800d2c8 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800d2b6:	4b1e      	ldr	r3, [pc, #120]	; (800d330 <event_callback+0x16c>)
 800d2b8:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 800d2bc:	491d      	ldr	r1, [pc, #116]	; (800d334 <event_callback+0x170>)
 800d2be:	481e      	ldr	r0, [pc, #120]	; (800d338 <event_callback+0x174>)
 800d2c0:	f016 fc8e 	bl	8023be0 <iprintf>
      break;
 800d2c4:	e000      	b.n	800d2c8 <event_callback+0x104>
      break;
 800d2c6:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800d2c8:	69bb      	ldr	r3, [r7, #24]
 800d2ca:	7b9b      	ldrb	r3, [r3, #14]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d025      	beq.n	800d31c <event_callback+0x158>
 800d2d0:	6a3b      	ldr	r3, [r7, #32]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d022      	beq.n	800d31c <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800d2d6:	69bb      	ldr	r3, [r7, #24]
 800d2d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	bfcc      	ite	gt
 800d2e0:	2301      	movgt	r3, #1
 800d2e2:	2300      	movle	r3, #0
 800d2e4:	b2db      	uxtb	r3, r3
 800d2e6:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800d2e8:	69bb      	ldr	r3, [r7, #24]
 800d2ea:	895b      	ldrh	r3, [r3, #10]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	bf14      	ite	ne
 800d2f0:	2301      	movne	r3, #1
 800d2f2:	2300      	moveq	r3, #0
 800d2f4:	b2db      	uxtb	r3, r3
 800d2f6:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800d2f8:	69bb      	ldr	r3, [r7, #24]
 800d2fa:	899b      	ldrh	r3, [r3, #12]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	bf14      	ite	ne
 800d300:	2301      	movne	r3, #1
 800d302:	2300      	moveq	r3, #0
 800d304:	b2db      	uxtb	r3, r3
 800d306:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800d308:	69f8      	ldr	r0, [r7, #28]
 800d30a:	f00e fa11 	bl	801b730 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	693a      	ldr	r2, [r7, #16]
 800d312:	6979      	ldr	r1, [r7, #20]
 800d314:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d316:	f000 f811 	bl	800d33c <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800d31a:	e006      	b.n	800d32a <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800d31c:	69f8      	ldr	r0, [r7, #28]
 800d31e:	f00e fa07 	bl	801b730 <sys_arch_unprotect>
 800d322:	e002      	b.n	800d32a <event_callback+0x166>
    return;
 800d324:	bf00      	nop
 800d326:	e000      	b.n	800d32a <event_callback+0x166>
      return;
 800d328:	bf00      	nop
  }
  done_socket(sock);
}
 800d32a:	3728      	adds	r7, #40	; 0x28
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}
 800d330:	08025ea8 	.word	0x08025ea8
 800d334:	08026224 	.word	0x08026224
 800d338:	08025efc 	.word	0x08025efc

0800d33c <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b088      	sub	sp, #32
 800d340:	af02      	add	r7, sp, #8
 800d342:	60f8      	str	r0, [r7, #12]
 800d344:	60b9      	str	r1, [r7, #8]
 800d346:	607a      	str	r2, [r7, #4]
 800d348:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800d34a:	4b4b      	ldr	r3, [pc, #300]	; (800d478 <select_check_waiters+0x13c>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	617b      	str	r3, [r7, #20]
 800d350:	e088      	b.n	800d464 <select_check_waiters+0x128>
    if (scb->sem_signalled == 0) {
 800d352:	697b      	ldr	r3, [r7, #20]
 800d354:	69db      	ldr	r3, [r3, #28]
 800d356:	2b00      	cmp	r3, #0
 800d358:	f040 8081 	bne.w	800d45e <select_check_waiters+0x122>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800d35c:	2300      	movs	r3, #0
 800d35e:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800d360:	697b      	ldr	r3, [r7, #20]
 800d362:	695b      	ldr	r3, [r3, #20]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d009      	beq.n	800d37c <select_check_waiters+0x40>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	9300      	str	r3, [sp, #0]
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	68ba      	ldr	r2, [r7, #8]
 800d370:	68f9      	ldr	r1, [r7, #12]
 800d372:	6978      	ldr	r0, [r7, #20]
 800d374:	f7ff fee2 	bl	800d13c <lwip_poll_should_wake>
 800d378:	6138      	str	r0, [r7, #16]
 800d37a:	e065      	b.n	800d448 <select_check_waiters+0x10c>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800d37c:	68bb      	ldr	r3, [r7, #8]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d01c      	beq.n	800d3bc <select_check_waiters+0x80>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800d382:	697b      	ldr	r3, [r7, #20]
 800d384:	689b      	ldr	r3, [r3, #8]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d018      	beq.n	800d3bc <select_check_waiters+0x80>
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	689a      	ldr	r2, [r3, #8]
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	2b00      	cmp	r3, #0
 800d392:	da00      	bge.n	800d396 <select_check_waiters+0x5a>
 800d394:	331f      	adds	r3, #31
 800d396:	115b      	asrs	r3, r3, #5
 800d398:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	4259      	negs	r1, r3
 800d3a0:	f003 031f 	and.w	r3, r3, #31
 800d3a4:	f001 011f 	and.w	r1, r1, #31
 800d3a8:	bf58      	it	pl
 800d3aa:	424b      	negpl	r3, r1
 800d3ac:	fa22 f303 	lsr.w	r3, r2, r3
 800d3b0:	f003 0301 	and.w	r3, r3, #1
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d001      	beq.n	800d3bc <select_check_waiters+0x80>
            do_signal = 1;
 800d3b8:	2301      	movs	r3, #1
 800d3ba:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d01f      	beq.n	800d402 <select_check_waiters+0xc6>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800d3c2:	693b      	ldr	r3, [r7, #16]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d11c      	bne.n	800d402 <select_check_waiters+0xc6>
 800d3c8:	697b      	ldr	r3, [r7, #20]
 800d3ca:	68db      	ldr	r3, [r3, #12]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d018      	beq.n	800d402 <select_check_waiters+0xc6>
 800d3d0:	697b      	ldr	r3, [r7, #20]
 800d3d2:	68da      	ldr	r2, [r3, #12]
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	da00      	bge.n	800d3dc <select_check_waiters+0xa0>
 800d3da:	331f      	adds	r3, #31
 800d3dc:	115b      	asrs	r3, r3, #5
 800d3de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	4259      	negs	r1, r3
 800d3e6:	f003 031f 	and.w	r3, r3, #31
 800d3ea:	f001 011f 	and.w	r1, r1, #31
 800d3ee:	bf58      	it	pl
 800d3f0:	424b      	negpl	r3, r1
 800d3f2:	fa22 f303 	lsr.w	r3, r2, r3
 800d3f6:	f003 0301 	and.w	r3, r3, #1
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d001      	beq.n	800d402 <select_check_waiters+0xc6>
            do_signal = 1;
 800d3fe:	2301      	movs	r3, #1
 800d400:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d01f      	beq.n	800d448 <select_check_waiters+0x10c>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800d408:	693b      	ldr	r3, [r7, #16]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d11c      	bne.n	800d448 <select_check_waiters+0x10c>
 800d40e:	697b      	ldr	r3, [r7, #20]
 800d410:	691b      	ldr	r3, [r3, #16]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d018      	beq.n	800d448 <select_check_waiters+0x10c>
 800d416:	697b      	ldr	r3, [r7, #20]
 800d418:	691a      	ldr	r2, [r3, #16]
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	da00      	bge.n	800d422 <select_check_waiters+0xe6>
 800d420:	331f      	adds	r3, #31
 800d422:	115b      	asrs	r3, r3, #5
 800d424:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	4259      	negs	r1, r3
 800d42c:	f003 031f 	and.w	r3, r3, #31
 800d430:	f001 011f 	and.w	r1, r1, #31
 800d434:	bf58      	it	pl
 800d436:	424b      	negpl	r3, r1
 800d438:	fa22 f303 	lsr.w	r3, r2, r3
 800d43c:	f003 0301 	and.w	r3, r3, #1
 800d440:	2b00      	cmp	r3, #0
 800d442:	d001      	beq.n	800d448 <select_check_waiters+0x10c>
            do_signal = 1;
 800d444:	2301      	movs	r3, #1
 800d446:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800d448:	693b      	ldr	r3, [r7, #16]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d007      	beq.n	800d45e <select_check_waiters+0x122>
        scb->sem_signalled = 1;
 800d44e:	697b      	ldr	r3, [r7, #20]
 800d450:	2201      	movs	r2, #1
 800d452:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800d454:	697b      	ldr	r3, [r7, #20]
 800d456:	3320      	adds	r3, #32
 800d458:	4618      	mov	r0, r3
 800d45a:	f00e f8c5 	bl	801b5e8 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800d45e:	697b      	ldr	r3, [r7, #20]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	617b      	str	r3, [r7, #20]
 800d464:	697b      	ldr	r3, [r7, #20]
 800d466:	2b00      	cmp	r3, #0
 800d468:	f47f af73 	bne.w	800d352 <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800d46c:	bf00      	nop
 800d46e:	bf00      	nop
 800d470:	3718      	adds	r7, #24
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}
 800d476:	bf00      	nop
 800d478:	2000be44 	.word	0x2000be44

0800d47c <lwip_sockopt_to_ipopt>:
}
#endif  /* LWIP_TCPIP_CORE_LOCKING */

static int
lwip_sockopt_to_ipopt(int optname)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b082      	sub	sp, #8
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
  /* Map SO_* values to our internal SOF_* values
   * We should not rely on #defines in socket.h
   * being in sync with ip.h.
   */
  switch (optname) {
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2b20      	cmp	r3, #32
 800d488:	d009      	beq.n	800d49e <lwip_sockopt_to_ipopt+0x22>
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2b20      	cmp	r3, #32
 800d48e:	dc0c      	bgt.n	800d4aa <lwip_sockopt_to_ipopt+0x2e>
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2b04      	cmp	r3, #4
 800d494:	d007      	beq.n	800d4a6 <lwip_sockopt_to_ipopt+0x2a>
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	2b08      	cmp	r3, #8
 800d49a:	d002      	beq.n	800d4a2 <lwip_sockopt_to_ipopt+0x26>
 800d49c:	e005      	b.n	800d4aa <lwip_sockopt_to_ipopt+0x2e>
  case SO_BROADCAST:
    return SOF_BROADCAST;
 800d49e:	2320      	movs	r3, #32
 800d4a0:	e00b      	b.n	800d4ba <lwip_sockopt_to_ipopt+0x3e>
  case SO_KEEPALIVE:
    return SOF_KEEPALIVE;
 800d4a2:	2308      	movs	r3, #8
 800d4a4:	e009      	b.n	800d4ba <lwip_sockopt_to_ipopt+0x3e>
  case SO_REUSEADDR:
    return SOF_REUSEADDR;
 800d4a6:	2304      	movs	r3, #4
 800d4a8:	e007      	b.n	800d4ba <lwip_sockopt_to_ipopt+0x3e>
  default:
    LWIP_ASSERT("Unknown socket option", 0);
 800d4aa:	4b06      	ldr	r3, [pc, #24]	; (800d4c4 <lwip_sockopt_to_ipopt+0x48>)
 800d4ac:	f640 3239 	movw	r2, #2873	; 0xb39
 800d4b0:	4905      	ldr	r1, [pc, #20]	; (800d4c8 <lwip_sockopt_to_ipopt+0x4c>)
 800d4b2:	4806      	ldr	r0, [pc, #24]	; (800d4cc <lwip_sockopt_to_ipopt+0x50>)
 800d4b4:	f016 fb94 	bl	8023be0 <iprintf>
    return 0;
 800d4b8:	2300      	movs	r3, #0
  }
}
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	3708      	adds	r7, #8
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	bd80      	pop	{r7, pc}
 800d4c2:	bf00      	nop
 800d4c4:	08025ea8 	.word	0x08025ea8
 800d4c8:	08026234 	.word	0x08026234
 800d4cc:	08025efc 	.word	0x08025efc

0800d4d0 <lwip_setsockopt>:
  return err;
}

int
lwip_setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b08a      	sub	sp, #40	; 0x28
 800d4d4:	af02      	add	r7, sp, #8
 800d4d6:	60f8      	str	r0, [r7, #12]
 800d4d8:	60b9      	str	r1, [r7, #8]
 800d4da:	607a      	str	r2, [r7, #4]
 800d4dc:	603b      	str	r3, [r7, #0]
  int err = 0;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	61fb      	str	r3, [r7, #28]
  struct lwip_sock *sock = get_socket(s);
 800d4e2:	68f8      	ldr	r0, [r7, #12]
 800d4e4:	f7fe ffd2 	bl	800c48c <get_socket>
 800d4e8:	61b8      	str	r0, [r7, #24]
#if !LWIP_TCPIP_CORE_LOCKING
  err_t cberr;
  LWIP_SETGETSOCKOPT_DATA_VAR_DECLARE(data);
#endif /* !LWIP_TCPIP_CORE_LOCKING */

  if (!sock) {
 800d4ea:	69bb      	ldr	r3, [r7, #24]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d102      	bne.n	800d4f6 <lwip_setsockopt+0x26>
    return -1;
 800d4f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d4f4:	e02b      	b.n	800d54e <lwip_setsockopt+0x7e>
  }

  if (NULL == optval) {
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d10a      	bne.n	800d512 <lwip_setsockopt+0x42>
    sock_set_errno(sock, EFAULT);
 800d4fc:	230e      	movs	r3, #14
 800d4fe:	613b      	str	r3, [r7, #16]
 800d500:	693b      	ldr	r3, [r7, #16]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d002      	beq.n	800d50c <lwip_setsockopt+0x3c>
 800d506:	4a14      	ldr	r2, [pc, #80]	; (800d558 <lwip_setsockopt+0x88>)
 800d508:	693b      	ldr	r3, [r7, #16]
 800d50a:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800d50c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d510:	e01d      	b.n	800d54e <lwip_setsockopt+0x7e>
  }

#if LWIP_TCPIP_CORE_LOCKING
  /* core-locking can just call the -impl function */
  LOCK_TCPIP_CORE();
 800d512:	4812      	ldr	r0, [pc, #72]	; (800d55c <lwip_setsockopt+0x8c>)
 800d514:	f00e f8c2 	bl	801b69c <sys_mutex_lock>
  err = lwip_setsockopt_impl(s, level, optname, optval, optlen);
 800d518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d51a:	9300      	str	r3, [sp, #0]
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	687a      	ldr	r2, [r7, #4]
 800d520:	68b9      	ldr	r1, [r7, #8]
 800d522:	68f8      	ldr	r0, [r7, #12]
 800d524:	f000 f81c 	bl	800d560 <lwip_setsockopt_impl>
 800d528:	61f8      	str	r0, [r7, #28]
  UNLOCK_TCPIP_CORE();
 800d52a:	480c      	ldr	r0, [pc, #48]	; (800d55c <lwip_setsockopt+0x8c>)
 800d52c:	f00e f8c5 	bl	801b6ba <sys_mutex_unlock>
  /* maybe lwip_getsockopt_internal has changed err */
  err = LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err;
  LWIP_SETGETSOCKOPT_DATA_VAR_FREE(data);
#endif  /* LWIP_TCPIP_CORE_LOCKING */

  sock_set_errno(sock, err);
 800d530:	69fb      	ldr	r3, [r7, #28]
 800d532:	617b      	str	r3, [r7, #20]
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d002      	beq.n	800d540 <lwip_setsockopt+0x70>
 800d53a:	4a07      	ldr	r2, [pc, #28]	; (800d558 <lwip_setsockopt+0x88>)
 800d53c:	697b      	ldr	r3, [r7, #20]
 800d53e:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return err ? -1 : 0;
 800d540:	69fb      	ldr	r3, [r7, #28]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d002      	beq.n	800d54c <lwip_setsockopt+0x7c>
 800d546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d54a:	e000      	b.n	800d54e <lwip_setsockopt+0x7e>
 800d54c:	2300      	movs	r3, #0
}
 800d54e:	4618      	mov	r0, r3
 800d550:	3720      	adds	r7, #32
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}
 800d556:	bf00      	nop
 800d558:	2000ff64 	.word	0x2000ff64
 800d55c:	2000be54 	.word	0x2000be54

0800d560 <lwip_setsockopt_impl>:
/** lwip_setsockopt_impl: the actual implementation of setsockopt:
 * same argument as lwip_setsockopt, either called directly or through callback
 */
static int
lwip_setsockopt_impl(int s, int level, int optname, const void *optval, socklen_t optlen)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b08e      	sub	sp, #56	; 0x38
 800d564:	af00      	add	r7, sp, #0
 800d566:	60f8      	str	r0, [r7, #12]
 800d568:	60b9      	str	r1, [r7, #8]
 800d56a:	607a      	str	r2, [r7, #4]
 800d56c:	603b      	str	r3, [r7, #0]
  int err = 0;
 800d56e:	2300      	movs	r3, #0
 800d570:	637b      	str	r3, [r7, #52]	; 0x34
  struct lwip_sock *sock = tryget_socket(s);
 800d572:	68f8      	ldr	r0, [r7, #12]
 800d574:	f7fe ff73 	bl	800c45e <tryget_socket>
 800d578:	62b8      	str	r0, [r7, #40]	; 0x28
  if (!sock) {
 800d57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d101      	bne.n	800d584 <lwip_setsockopt_impl+0x24>
    return EBADF;
 800d580:	2309      	movs	r3, #9
 800d582:	e270      	b.n	800da66 <lwip_setsockopt_impl+0x506>
  if (LWIP_HOOK_SOCKETS_SETSOCKOPT(s, sock, level, optname, optval, optlen, &err)) {
    return err;
  }
#endif

  switch (level) {
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	f640 72ff 	movw	r2, #4095	; 0xfff
 800d58a:	4293      	cmp	r3, r2
 800d58c:	d015      	beq.n	800d5ba <lwip_setsockopt_impl+0x5a>
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d594:	f280 8263 	bge.w	800da5e <lwip_setsockopt_impl+0x4fe>
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	2bff      	cmp	r3, #255	; 0xff
 800d59c:	f000 825b 	beq.w	800da56 <lwip_setsockopt_impl+0x4f6>
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	2bff      	cmp	r3, #255	; 0xff
 800d5a4:	f300 825b 	bgt.w	800da5e <lwip_setsockopt_impl+0x4fe>
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	f000 80e0 	beq.w	800d770 <lwip_setsockopt_impl+0x210>
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	2b06      	cmp	r3, #6
 800d5b4:	f000 81f9 	beq.w	800d9aa <lwip_setsockopt_impl+0x44a>
 800d5b8:	e251      	b.n	800da5e <lwip_setsockopt_impl+0x4fe>
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f241 020b 	movw	r2, #4107	; 0x100b
 800d5c0:	4293      	cmp	r3, r2
 800d5c2:	f000 8091 	beq.w	800d6e8 <lwip_setsockopt_impl+0x188>
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	f241 020b 	movw	r2, #4107	; 0x100b
 800d5cc:	4293      	cmp	r3, r2
 800d5ce:	f300 80cb 	bgt.w	800d768 <lwip_setsockopt_impl+0x208>
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	f241 020a 	movw	r2, #4106	; 0x100a
 800d5d8:	4293      	cmp	r3, r2
 800d5da:	d050      	beq.n	800d67e <lwip_setsockopt_impl+0x11e>
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	f241 020a 	movw	r2, #4106	; 0x100a
 800d5e2:	4293      	cmp	r3, r2
 800d5e4:	f300 80c0 	bgt.w	800d768 <lwip_setsockopt_impl+0x208>
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2b08      	cmp	r3, #8
 800d5ec:	d003      	beq.n	800d5f6 <lwip_setsockopt_impl+0x96>
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2b20      	cmp	r3, #32
 800d5f2:	f040 80b9 	bne.w	800d768 <lwip_setsockopt_impl+0x208>
        case SO_BROADCAST:
        case SO_KEEPALIVE:
#if SO_REUSE
        case SO_REUSEADDR:
#endif /* SO_REUSE */
          if ((optname == SO_BROADCAST) &&
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2b20      	cmp	r3, #32
 800d5fa:	d108      	bne.n	800d60e <lwip_setsockopt_impl+0xae>
              (NETCONNTYPE_GROUP(sock->conn->type) != NETCONN_UDP)) {
 800d5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	781b      	ldrb	r3, [r3, #0]
 800d602:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if ((optname == SO_BROADCAST) &&
 800d606:	2b20      	cmp	r3, #32
 800d608:	d001      	beq.n	800d60e <lwip_setsockopt_impl+0xae>
            done_socket(sock);
            return ENOPROTOOPT;
 800d60a:	235c      	movs	r3, #92	; 0x5c
 800d60c:	e22b      	b.n	800da66 <lwip_setsockopt_impl+0x506>
          }

          optname = lwip_sockopt_to_ipopt(optname);
 800d60e:	6878      	ldr	r0, [r7, #4]
 800d610:	f7ff ff34 	bl	800d47c <lwip_sockopt_to_ipopt>
 800d614:	6078      	str	r0, [r7, #4]

          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800d616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d618:	2b03      	cmp	r3, #3
 800d61a:	d801      	bhi.n	800d620 <lwip_setsockopt_impl+0xc0>
 800d61c:	2316      	movs	r3, #22
 800d61e:	e222      	b.n	800da66 <lwip_setsockopt_impl+0x506>
 800d620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d004      	beq.n	800d632 <lwip_setsockopt_impl+0xd2>
 800d628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	685b      	ldr	r3, [r3, #4]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d101      	bne.n	800d636 <lwip_setsockopt_impl+0xd6>
 800d632:	2316      	movs	r3, #22
 800d634:	e217      	b.n	800da66 <lwip_setsockopt_impl+0x506>
          if (*(const int *)optval) {
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d00e      	beq.n	800d65c <lwip_setsockopt_impl+0xfc>
            ip_set_option(sock->conn->pcb.ip, optname);
 800d63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	685b      	ldr	r3, [r3, #4]
 800d644:	7a5b      	ldrb	r3, [r3, #9]
 800d646:	b25a      	sxtb	r2, r3
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	b25b      	sxtb	r3, r3
 800d64c:	4313      	orrs	r3, r2
 800d64e:	b25a      	sxtb	r2, r3
 800d650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	685b      	ldr	r3, [r3, #4]
 800d656:	b2d2      	uxtb	r2, r2
 800d658:	725a      	strb	r2, [r3, #9]
          } else {
            ip_reset_option(sock->conn->pcb.ip, optname);
          }
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, optname=0x%x, ..) -> %s\n",
                                      s, optname, (*(const int *)optval ? "on" : "off")));
          break;
 800d65a:	e088      	b.n	800d76e <lwip_setsockopt_impl+0x20e>
            ip_reset_option(sock->conn->pcb.ip, optname);
 800d65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	685b      	ldr	r3, [r3, #4]
 800d662:	7a5b      	ldrb	r3, [r3, #9]
 800d664:	b25a      	sxtb	r2, r3
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	b25b      	sxtb	r3, r3
 800d66a:	43db      	mvns	r3, r3
 800d66c:	b25b      	sxtb	r3, r3
 800d66e:	4013      	ands	r3, r2
 800d670:	b25a      	sxtb	r2, r3
 800d672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	685b      	ldr	r3, [r3, #4]
 800d678:	b2d2      	uxtb	r2, r2
 800d67a:	725a      	strb	r2, [r3, #9]
          break;
 800d67c:	e077      	b.n	800d76e <lwip_setsockopt_impl+0x20e>
        }
        break;
#endif /* LWIP_SO_LINGER */
#if LWIP_UDP
        case SO_NO_CHECK:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_UDP);
 800d67e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d680:	2b03      	cmp	r3, #3
 800d682:	d801      	bhi.n	800d688 <lwip_setsockopt_impl+0x128>
 800d684:	2316      	movs	r3, #22
 800d686:	e1ee      	b.n	800da66 <lwip_setsockopt_impl+0x506>
 800d688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d004      	beq.n	800d69a <lwip_setsockopt_impl+0x13a>
 800d690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	685b      	ldr	r3, [r3, #4]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d101      	bne.n	800d69e <lwip_setsockopt_impl+0x13e>
 800d69a:	2316      	movs	r3, #22
 800d69c:	e1e3      	b.n	800da66 <lwip_setsockopt_impl+0x506>
 800d69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	781b      	ldrb	r3, [r3, #0]
 800d6a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d6a8:	2b20      	cmp	r3, #32
 800d6aa:	d001      	beq.n	800d6b0 <lwip_setsockopt_impl+0x150>
 800d6ac:	235c      	movs	r3, #92	; 0x5c
 800d6ae:	e1da      	b.n	800da66 <lwip_setsockopt_impl+0x506>
            /* this flag is only available for UDP, not for UDP lite */
            done_socket(sock);
            return EAFNOSUPPORT;
          }
#endif /* LWIP_UDPLITE */
          if (*(const int *)optval) {
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d00b      	beq.n	800d6d0 <lwip_setsockopt_impl+0x170>
            udp_set_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800d6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	685b      	ldr	r3, [r3, #4]
 800d6be:	7c1a      	ldrb	r2, [r3, #16]
 800d6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	685b      	ldr	r3, [r3, #4]
 800d6c6:	f042 0201 	orr.w	r2, r2, #1
 800d6ca:	b2d2      	uxtb	r2, r2
 800d6cc:	741a      	strb	r2, [r3, #16]
          } else {
            udp_clear_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
          }
          break;
 800d6ce:	e04e      	b.n	800d76e <lwip_setsockopt_impl+0x20e>
            udp_clear_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800d6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	685b      	ldr	r3, [r3, #4]
 800d6d6:	7c1a      	ldrb	r2, [r3, #16]
 800d6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	685b      	ldr	r3, [r3, #4]
 800d6de:	f022 0201 	bic.w	r2, r2, #1
 800d6e2:	b2d2      	uxtb	r2, r2
 800d6e4:	741a      	strb	r2, [r3, #16]
          break;
 800d6e6:	e042      	b.n	800d76e <lwip_setsockopt_impl+0x20e>
#endif /* LWIP_UDP */
        case SO_BINDTODEVICE: {
          const struct ifreq *iface;
          struct netif *n = NULL;
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	633b      	str	r3, [r7, #48]	; 0x30

          LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, struct ifreq);
 800d6ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6ee:	2b05      	cmp	r3, #5
 800d6f0:	d801      	bhi.n	800d6f6 <lwip_setsockopt_impl+0x196>
 800d6f2:	2316      	movs	r3, #22
 800d6f4:	e1b7      	b.n	800da66 <lwip_setsockopt_impl+0x506>
 800d6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d101      	bne.n	800d702 <lwip_setsockopt_impl+0x1a2>
 800d6fe:	2316      	movs	r3, #22
 800d700:	e1b1      	b.n	800da66 <lwip_setsockopt_impl+0x506>

          iface = (const struct ifreq *)optval;
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	627b      	str	r3, [r7, #36]	; 0x24
          if (iface->ifr_name[0] != 0) {
 800d706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d708:	781b      	ldrb	r3, [r3, #0]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d009      	beq.n	800d722 <lwip_setsockopt_impl+0x1c2>
            n = netif_find(iface->ifr_name);
 800d70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d710:	4618      	mov	r0, r3
 800d712:	f002 fcf3 	bl	80100fc <netif_find>
 800d716:	6338      	str	r0, [r7, #48]	; 0x30
            if (n == NULL) {
 800d718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d101      	bne.n	800d722 <lwip_setsockopt_impl+0x1c2>
              done_socket(sock);
              return ENODEV;
 800d71e:	2313      	movs	r3, #19
 800d720:	e1a1      	b.n	800da66 <lwip_setsockopt_impl+0x506>
            }
          }

          switch (NETCONNTYPE_GROUP(netconn_type(sock->conn))) {
 800d722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	781b      	ldrb	r3, [r3, #0]
 800d728:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d72c:	2b10      	cmp	r3, #16
 800d72e:	d002      	beq.n	800d736 <lwip_setsockopt_impl+0x1d6>
 800d730:	2b20      	cmp	r3, #32
 800d732:	d008      	beq.n	800d746 <lwip_setsockopt_impl+0x1e6>
 800d734:	e00f      	b.n	800d756 <lwip_setsockopt_impl+0x1f6>
#if LWIP_TCP
            case NETCONN_TCP:
              tcp_bind_netif(sock->conn->pcb.tcp, n);
 800d736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	685b      	ldr	r3, [r3, #4]
 800d73c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d73e:	4618      	mov	r0, r3
 800d740:	f004 f836 	bl	80117b0 <tcp_bind_netif>
              break;
 800d744:	e00f      	b.n	800d766 <lwip_setsockopt_impl+0x206>
#endif
#if LWIP_UDP
            case NETCONN_UDP:
              udp_bind_netif(sock->conn->pcb.udp, n);
 800d746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	685b      	ldr	r3, [r3, #4]
 800d74c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d74e:	4618      	mov	r0, r3
 800d750:	f00a fb14 	bl	8017d7c <udp_bind_netif>
              break;
 800d754:	e007      	b.n	800d766 <lwip_setsockopt_impl+0x206>
            case NETCONN_RAW:
              raw_bind_netif(sock->conn->pcb.raw, n);
              break;
#endif
            default:
              LWIP_ASSERT("Unhandled netconn type in SO_BINDTODEVICE", 0);
 800d756:	4b97      	ldr	r3, [pc, #604]	; (800d9b4 <lwip_setsockopt_impl+0x454>)
 800d758:	f640 527d 	movw	r2, #3453	; 0xd7d
 800d75c:	4996      	ldr	r1, [pc, #600]	; (800d9b8 <lwip_setsockopt_impl+0x458>)
 800d75e:	4897      	ldr	r0, [pc, #604]	; (800d9bc <lwip_setsockopt_impl+0x45c>)
 800d760:	f016 fa3e 	bl	8023be0 <iprintf>
              break;
 800d764:	bf00      	nop
          }
        }
        break;
 800d766:	e002      	b.n	800d76e <lwip_setsockopt_impl+0x20e>
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800d768:	235c      	movs	r3, #92	; 0x5c
 800d76a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800d76c:	bf00      	nop
      }  /* switch (optname) */
      break;
 800d76e:	e179      	b.n	800da64 <lwip_setsockopt_impl+0x504>
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	3b01      	subs	r3, #1
 800d774:	2b06      	cmp	r3, #6
 800d776:	f200 8113 	bhi.w	800d9a0 <lwip_setsockopt_impl+0x440>
 800d77a:	a201      	add	r2, pc, #4	; (adr r2, 800d780 <lwip_setsockopt_impl+0x220>)
 800d77c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d780:	0800d7cd 	.word	0x0800d7cd
 800d784:	0800d79d 	.word	0x0800d79d
 800d788:	0800d8eb 	.word	0x0800d8eb
 800d78c:	0800d8eb 	.word	0x0800d8eb
 800d790:	0800d7fd 	.word	0x0800d7fd
 800d794:	0800d83d 	.word	0x0800d83d
 800d798:	0800d881 	.word	0x0800d881

    /* Level: IPPROTO_IP */
    case IPPROTO_IP:
      switch (optname) {
        case IP_TTL:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800d79c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d79e:	2b03      	cmp	r3, #3
 800d7a0:	d801      	bhi.n	800d7a6 <lwip_setsockopt_impl+0x246>
 800d7a2:	2316      	movs	r3, #22
 800d7a4:	e15f      	b.n	800da66 <lwip_setsockopt_impl+0x506>
 800d7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d004      	beq.n	800d7b8 <lwip_setsockopt_impl+0x258>
 800d7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	685b      	ldr	r3, [r3, #4]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d101      	bne.n	800d7bc <lwip_setsockopt_impl+0x25c>
 800d7b8:	2316      	movs	r3, #22
 800d7ba:	e154      	b.n	800da66 <lwip_setsockopt_impl+0x506>
          sock->conn->pcb.ip->ttl = (u8_t)(*(const int *)optval);
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	681a      	ldr	r2, [r3, #0]
 800d7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	685b      	ldr	r3, [r3, #4]
 800d7c6:	b2d2      	uxtb	r2, r2
 800d7c8:	72da      	strb	r2, [r3, #11]
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TTL, ..) -> %d\n",
                                      s, sock->conn->pcb.ip->ttl));
          break;
 800d7ca:	e0ed      	b.n	800d9a8 <lwip_setsockopt_impl+0x448>
        case IP_TOS:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800d7cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7ce:	2b03      	cmp	r3, #3
 800d7d0:	d801      	bhi.n	800d7d6 <lwip_setsockopt_impl+0x276>
 800d7d2:	2316      	movs	r3, #22
 800d7d4:	e147      	b.n	800da66 <lwip_setsockopt_impl+0x506>
 800d7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d004      	beq.n	800d7e8 <lwip_setsockopt_impl+0x288>
 800d7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	685b      	ldr	r3, [r3, #4]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d101      	bne.n	800d7ec <lwip_setsockopt_impl+0x28c>
 800d7e8:	2316      	movs	r3, #22
 800d7ea:	e13c      	b.n	800da66 <lwip_setsockopt_impl+0x506>
          sock->conn->pcb.ip->tos = (u8_t)(*(const int *)optval);
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	681a      	ldr	r2, [r3, #0]
 800d7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	685b      	ldr	r3, [r3, #4]
 800d7f6:	b2d2      	uxtb	r2, r2
 800d7f8:	729a      	strb	r2, [r3, #10]
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TOS, ..)-> %d\n",
                                      s, sock->conn->pcb.ip->tos));
          break;
 800d7fa:	e0d5      	b.n	800d9a8 <lwip_setsockopt_impl+0x448>
          }
          break;
#endif /* LWIP_NETBUF_RECVINFO */
#if LWIP_IPV4 && LWIP_MULTICAST_TX_OPTIONS && LWIP_UDP
        case IP_MULTICAST_TTL:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, u8_t, NETCONN_UDP);
 800d7fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d101      	bne.n	800d806 <lwip_setsockopt_impl+0x2a6>
 800d802:	2316      	movs	r3, #22
 800d804:	e12f      	b.n	800da66 <lwip_setsockopt_impl+0x506>
 800d806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d004      	beq.n	800d818 <lwip_setsockopt_impl+0x2b8>
 800d80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	685b      	ldr	r3, [r3, #4]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d101      	bne.n	800d81c <lwip_setsockopt_impl+0x2bc>
 800d818:	2316      	movs	r3, #22
 800d81a:	e124      	b.n	800da66 <lwip_setsockopt_impl+0x506>
 800d81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	781b      	ldrb	r3, [r3, #0]
 800d822:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d826:	2b20      	cmp	r3, #32
 800d828:	d001      	beq.n	800d82e <lwip_setsockopt_impl+0x2ce>
 800d82a:	235c      	movs	r3, #92	; 0x5c
 800d82c:	e11b      	b.n	800da66 <lwip_setsockopt_impl+0x506>
          udp_set_multicast_ttl(sock->conn->pcb.udp, (u8_t)(*(const u8_t *)optval));
 800d82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	685b      	ldr	r3, [r3, #4]
 800d834:	683a      	ldr	r2, [r7, #0]
 800d836:	7812      	ldrb	r2, [r2, #0]
 800d838:	775a      	strb	r2, [r3, #29]
          break;
 800d83a:	e0b5      	b.n	800d9a8 <lwip_setsockopt_impl+0x448>
        case IP_MULTICAST_IF: {
          ip4_addr_t if_addr;
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, struct in_addr, NETCONN_UDP);
 800d83c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d83e:	2b03      	cmp	r3, #3
 800d840:	d801      	bhi.n	800d846 <lwip_setsockopt_impl+0x2e6>
 800d842:	2316      	movs	r3, #22
 800d844:	e10f      	b.n	800da66 <lwip_setsockopt_impl+0x506>
 800d846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d004      	beq.n	800d858 <lwip_setsockopt_impl+0x2f8>
 800d84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	685b      	ldr	r3, [r3, #4]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d101      	bne.n	800d85c <lwip_setsockopt_impl+0x2fc>
 800d858:	2316      	movs	r3, #22
 800d85a:	e104      	b.n	800da66 <lwip_setsockopt_impl+0x506>
 800d85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	781b      	ldrb	r3, [r3, #0]
 800d862:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d866:	2b20      	cmp	r3, #32
 800d868:	d001      	beq.n	800d86e <lwip_setsockopt_impl+0x30e>
 800d86a:	235c      	movs	r3, #92	; 0x5c
 800d86c:	e0fb      	b.n	800da66 <lwip_setsockopt_impl+0x506>
          inet_addr_to_ip4addr(&if_addr, (const struct in_addr *)optval);
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	61fb      	str	r3, [r7, #28]
          udp_set_multicast_netif_addr(sock->conn->pcb.udp, &if_addr);
 800d874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	685b      	ldr	r3, [r3, #4]
 800d87a:	69fa      	ldr	r2, [r7, #28]
 800d87c:	619a      	str	r2, [r3, #24]
        }
        break;
 800d87e:	e093      	b.n	800d9a8 <lwip_setsockopt_impl+0x448>
        case IP_MULTICAST_LOOP:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, u8_t, NETCONN_UDP);
 800d880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d882:	2b00      	cmp	r3, #0
 800d884:	d101      	bne.n	800d88a <lwip_setsockopt_impl+0x32a>
 800d886:	2316      	movs	r3, #22
 800d888:	e0ed      	b.n	800da66 <lwip_setsockopt_impl+0x506>
 800d88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d004      	beq.n	800d89c <lwip_setsockopt_impl+0x33c>
 800d892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	685b      	ldr	r3, [r3, #4]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d101      	bne.n	800d8a0 <lwip_setsockopt_impl+0x340>
 800d89c:	2316      	movs	r3, #22
 800d89e:	e0e2      	b.n	800da66 <lwip_setsockopt_impl+0x506>
 800d8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	781b      	ldrb	r3, [r3, #0]
 800d8a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d8aa:	2b20      	cmp	r3, #32
 800d8ac:	d001      	beq.n	800d8b2 <lwip_setsockopt_impl+0x352>
 800d8ae:	235c      	movs	r3, #92	; 0x5c
 800d8b0:	e0d9      	b.n	800da66 <lwip_setsockopt_impl+0x506>
          if (*(const u8_t *)optval) {
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	781b      	ldrb	r3, [r3, #0]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d00b      	beq.n	800d8d2 <lwip_setsockopt_impl+0x372>
            udp_set_flags(sock->conn->pcb.udp, UDP_FLAGS_MULTICAST_LOOP);
 800d8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	685b      	ldr	r3, [r3, #4]
 800d8c0:	7c1a      	ldrb	r2, [r3, #16]
 800d8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	685b      	ldr	r3, [r3, #4]
 800d8c8:	f042 0208 	orr.w	r2, r2, #8
 800d8cc:	b2d2      	uxtb	r2, r2
 800d8ce:	741a      	strb	r2, [r3, #16]
          } else {
            udp_clear_flags(sock->conn->pcb.udp, UDP_FLAGS_MULTICAST_LOOP);
          }
          break;
 800d8d0:	e06a      	b.n	800d9a8 <lwip_setsockopt_impl+0x448>
            udp_clear_flags(sock->conn->pcb.udp, UDP_FLAGS_MULTICAST_LOOP);
 800d8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	685b      	ldr	r3, [r3, #4]
 800d8d8:	7c1a      	ldrb	r2, [r3, #16]
 800d8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	685b      	ldr	r3, [r3, #4]
 800d8e0:	f022 0208 	bic.w	r2, r2, #8
 800d8e4:	b2d2      	uxtb	r2, r2
 800d8e6:	741a      	strb	r2, [r3, #16]
          break;
 800d8e8:	e05e      	b.n	800d9a8 <lwip_setsockopt_impl+0x448>
#if LWIP_IGMP
        case IP_ADD_MEMBERSHIP:
        case IP_DROP_MEMBERSHIP: {
          /* If this is a TCP or a RAW socket, ignore these options. */
          err_t igmp_err;
          const struct ip_mreq *imr = (const struct ip_mreq *)optval;
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	623b      	str	r3, [r7, #32]
          ip4_addr_t if_addr;
          ip4_addr_t multi_addr;
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, struct ip_mreq, NETCONN_UDP);
 800d8ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8f0:	2b07      	cmp	r3, #7
 800d8f2:	d801      	bhi.n	800d8f8 <lwip_setsockopt_impl+0x398>
 800d8f4:	2316      	movs	r3, #22
 800d8f6:	e0b6      	b.n	800da66 <lwip_setsockopt_impl+0x506>
 800d8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d004      	beq.n	800d90a <lwip_setsockopt_impl+0x3aa>
 800d900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	685b      	ldr	r3, [r3, #4]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d101      	bne.n	800d90e <lwip_setsockopt_impl+0x3ae>
 800d90a:	2316      	movs	r3, #22
 800d90c:	e0ab      	b.n	800da66 <lwip_setsockopt_impl+0x506>
 800d90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	781b      	ldrb	r3, [r3, #0]
 800d914:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d918:	2b20      	cmp	r3, #32
 800d91a:	d001      	beq.n	800d920 <lwip_setsockopt_impl+0x3c0>
 800d91c:	235c      	movs	r3, #92	; 0x5c
 800d91e:	e0a2      	b.n	800da66 <lwip_setsockopt_impl+0x506>
          inet_addr_to_ip4addr(&if_addr, &imr->imr_interface);
 800d920:	6a3b      	ldr	r3, [r7, #32]
 800d922:	685b      	ldr	r3, [r3, #4]
 800d924:	61bb      	str	r3, [r7, #24]
          inet_addr_to_ip4addr(&multi_addr, &imr->imr_multiaddr);
 800d926:	6a3b      	ldr	r3, [r7, #32]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	617b      	str	r3, [r7, #20]
          if (optname == IP_ADD_MEMBERSHIP) {
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2b03      	cmp	r3, #3
 800d930:	d11c      	bne.n	800d96c <lwip_setsockopt_impl+0x40c>
            if (!lwip_socket_register_membership(s, &if_addr, &multi_addr)) {
 800d932:	f107 0214 	add.w	r2, r7, #20
 800d936:	f107 0318 	add.w	r3, r7, #24
 800d93a:	4619      	mov	r1, r3
 800d93c:	68f8      	ldr	r0, [r7, #12]
 800d93e:	f000 f897 	bl	800da70 <lwip_socket_register_membership>
 800d942:	4603      	mov	r3, r0
 800d944:	2b00      	cmp	r3, #0
 800d946:	d105      	bne.n	800d954 <lwip_setsockopt_impl+0x3f4>
              /* cannot track membership (out of memory) */
              err = ENOMEM;
 800d948:	230c      	movs	r3, #12
 800d94a:	637b      	str	r3, [r7, #52]	; 0x34
              igmp_err = ERR_OK;
 800d94c:	2300      	movs	r3, #0
 800d94e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d952:	e01e      	b.n	800d992 <lwip_setsockopt_impl+0x432>
            } else {
              igmp_err = igmp_joingroup(&if_addr, &multi_addr);
 800d954:	f107 0214 	add.w	r2, r7, #20
 800d958:	f107 0318 	add.w	r3, r7, #24
 800d95c:	4611      	mov	r1, r2
 800d95e:	4618      	mov	r0, r3
 800d960:	f00b fdf6 	bl	8019550 <igmp_joingroup>
 800d964:	4603      	mov	r3, r0
 800d966:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d96a:	e012      	b.n	800d992 <lwip_setsockopt_impl+0x432>
            }
          } else {
            igmp_err = igmp_leavegroup(&if_addr, &multi_addr);
 800d96c:	f107 0214 	add.w	r2, r7, #20
 800d970:	f107 0318 	add.w	r3, r7, #24
 800d974:	4611      	mov	r1, r2
 800d976:	4618      	mov	r0, r3
 800d978:	f00b fec6 	bl	8019708 <igmp_leavegroup>
 800d97c:	4603      	mov	r3, r0
 800d97e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            lwip_socket_unregister_membership(s, &if_addr, &multi_addr);
 800d982:	f107 0214 	add.w	r2, r7, #20
 800d986:	f107 0318 	add.w	r3, r7, #24
 800d98a:	4619      	mov	r1, r3
 800d98c:	68f8      	ldr	r0, [r7, #12]
 800d98e:	f000 f8b9 	bl	800db04 <lwip_socket_unregister_membership>
          }
          if (igmp_err != ERR_OK) {
 800d992:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d996:	2b00      	cmp	r3, #0
 800d998:	d005      	beq.n	800d9a6 <lwip_setsockopt_impl+0x446>
            err = EADDRNOTAVAIL;
 800d99a:	2363      	movs	r3, #99	; 0x63
 800d99c:	637b      	str	r3, [r7, #52]	; 0x34
          }
        }
        break;
 800d99e:	e002      	b.n	800d9a6 <lwip_setsockopt_impl+0x446>
#endif /* LWIP_IGMP */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800d9a0:	235c      	movs	r3, #92	; 0x5c
 800d9a2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800d9a4:	e000      	b.n	800d9a8 <lwip_setsockopt_impl+0x448>
        break;
 800d9a6:	bf00      	nop
      }  /* switch (optname) */
      break;
 800d9a8:	e05c      	b.n	800da64 <lwip_setsockopt_impl+0x504>

#if LWIP_TCP
    /* Level: IPPROTO_TCP */
    case IPPROTO_TCP:
      /* Special case: all IPPROTO_TCP option take an int */
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_TCP);
 800d9aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9ac:	2b03      	cmp	r3, #3
 800d9ae:	d807      	bhi.n	800d9c0 <lwip_setsockopt_impl+0x460>
 800d9b0:	2316      	movs	r3, #22
 800d9b2:	e058      	b.n	800da66 <lwip_setsockopt_impl+0x506>
 800d9b4:	08025ea8 	.word	0x08025ea8
 800d9b8:	0802624c 	.word	0x0802624c
 800d9bc:	08025efc 	.word	0x08025efc
 800d9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d004      	beq.n	800d9d2 <lwip_setsockopt_impl+0x472>
 800d9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	685b      	ldr	r3, [r3, #4]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d101      	bne.n	800d9d6 <lwip_setsockopt_impl+0x476>
 800d9d2:	2316      	movs	r3, #22
 800d9d4:	e047      	b.n	800da66 <lwip_setsockopt_impl+0x506>
 800d9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	781b      	ldrb	r3, [r3, #0]
 800d9dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d9e0:	2b10      	cmp	r3, #16
 800d9e2:	d001      	beq.n	800d9e8 <lwip_setsockopt_impl+0x488>
 800d9e4:	235c      	movs	r3, #92	; 0x5c
 800d9e6:	e03e      	b.n	800da66 <lwip_setsockopt_impl+0x506>
      if (sock->conn->pcb.tcp->state == LISTEN) {
 800d9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	685b      	ldr	r3, [r3, #4]
 800d9ee:	7d1b      	ldrb	r3, [r3, #20]
 800d9f0:	2b01      	cmp	r3, #1
 800d9f2:	d101      	bne.n	800d9f8 <lwip_setsockopt_impl+0x498>
        done_socket(sock);
        return EINVAL;
 800d9f4:	2316      	movs	r3, #22
 800d9f6:	e036      	b.n	800da66 <lwip_setsockopt_impl+0x506>
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2b01      	cmp	r3, #1
 800d9fc:	d003      	beq.n	800da06 <lwip_setsockopt_impl+0x4a6>
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2b02      	cmp	r3, #2
 800da02:	d01c      	beq.n	800da3e <lwip_setsockopt_impl+0x4de>
 800da04:	e023      	b.n	800da4e <lwip_setsockopt_impl+0x4ee>
      }
      switch (optname) {
        case TCP_NODELAY:
          if (*(const int *)optval) {
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d00b      	beq.n	800da26 <lwip_setsockopt_impl+0x4c6>
            tcp_nagle_disable(sock->conn->pcb.tcp);
 800da0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	685b      	ldr	r3, [r3, #4]
 800da14:	8b5a      	ldrh	r2, [r3, #26]
 800da16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	685b      	ldr	r3, [r3, #4]
 800da1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800da20:	b292      	uxth	r2, r2
 800da22:	835a      	strh	r2, [r3, #26]
          } else {
            tcp_nagle_enable(sock->conn->pcb.tcp);
          }
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_NODELAY) -> %s\n",
                                      s, (*(const int *)optval) ? "on" : "off") );
          break;
 800da24:	e016      	b.n	800da54 <lwip_setsockopt_impl+0x4f4>
            tcp_nagle_enable(sock->conn->pcb.tcp);
 800da26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	685b      	ldr	r3, [r3, #4]
 800da2c:	8b5a      	ldrh	r2, [r3, #26]
 800da2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	685b      	ldr	r3, [r3, #4]
 800da34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800da38:	b292      	uxth	r2, r2
 800da3a:	835a      	strh	r2, [r3, #26]
          break;
 800da3c:	e00a      	b.n	800da54 <lwip_setsockopt_impl+0x4f4>
        case TCP_KEEPALIVE:
          sock->conn->pcb.tcp->keep_idle = (u32_t)(*(const int *)optval);
 800da3e:	683b      	ldr	r3, [r7, #0]
 800da40:	681a      	ldr	r2, [r3, #0]
 800da42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	685b      	ldr	r3, [r3, #4]
 800da48:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPALIVE) -> %"U32_F"\n",
                                      s, sock->conn->pcb.tcp->keep_idle));
          break;
 800da4c:	e002      	b.n	800da54 <lwip_setsockopt_impl+0x4f4>
          break;
#endif /* LWIP_TCP_KEEPALIVE */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800da4e:	235c      	movs	r3, #92	; 0x5c
 800da50:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800da52:	bf00      	nop
      }  /* switch (optname) */
      break;
 800da54:	e006      	b.n	800da64 <lwip_setsockopt_impl+0x504>
          break;
#endif /* LWIP_IPV6 && LWIP_RAW */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_RAW, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800da56:	235c      	movs	r3, #92	; 0x5c
 800da58:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800da5a:	bf00      	nop
      }  /* switch (optname) */
      break;
 800da5c:	e002      	b.n	800da64 <lwip_setsockopt_impl+0x504>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                                  s, level, optname));
      err = ENOPROTOOPT;
 800da5e:	235c      	movs	r3, #92	; 0x5c
 800da60:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 800da62:	bf00      	nop
  }  /* switch (level) */

  done_socket(sock);
  return err;
 800da64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800da66:	4618      	mov	r0, r3
 800da68:	3738      	adds	r7, #56	; 0x38
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}
 800da6e:	bf00      	nop

0800da70 <lwip_socket_register_membership>:
 *
 * @return 1 on success, 0 on failure
 */
static int
lwip_socket_register_membership(int s, const ip4_addr_t *if_addr, const ip4_addr_t *multi_addr)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b086      	sub	sp, #24
 800da74:	af00      	add	r7, sp, #0
 800da76:	60f8      	str	r0, [r7, #12]
 800da78:	60b9      	str	r1, [r7, #8]
 800da7a:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock = get_socket(s);
 800da7c:	68f8      	ldr	r0, [r7, #12]
 800da7e:	f7fe fd05 	bl	800c48c <get_socket>
 800da82:	6138      	str	r0, [r7, #16]
  int i;

  if (!sock) {
 800da84:	693b      	ldr	r3, [r7, #16]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d101      	bne.n	800da8e <lwip_socket_register_membership+0x1e>
    return 0;
 800da8a:	2300      	movs	r3, #0
 800da8c:	e034      	b.n	800daf8 <lwip_socket_register_membership+0x88>
  }

  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
 800da8e:	2300      	movs	r3, #0
 800da90:	617b      	str	r3, [r7, #20]
 800da92:	e02d      	b.n	800daf0 <lwip_socket_register_membership+0x80>
    if (socket_ipv4_multicast_memberships[i].sock == NULL) {
 800da94:	491a      	ldr	r1, [pc, #104]	; (800db00 <lwip_socket_register_membership+0x90>)
 800da96:	697a      	ldr	r2, [r7, #20]
 800da98:	4613      	mov	r3, r2
 800da9a:	005b      	lsls	r3, r3, #1
 800da9c:	4413      	add	r3, r2
 800da9e:	009b      	lsls	r3, r3, #2
 800daa0:	440b      	add	r3, r1
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d120      	bne.n	800daea <lwip_socket_register_membership+0x7a>
      socket_ipv4_multicast_memberships[i].sock = sock;
 800daa8:	4915      	ldr	r1, [pc, #84]	; (800db00 <lwip_socket_register_membership+0x90>)
 800daaa:	697a      	ldr	r2, [r7, #20]
 800daac:	4613      	mov	r3, r2
 800daae:	005b      	lsls	r3, r3, #1
 800dab0:	4413      	add	r3, r2
 800dab2:	009b      	lsls	r3, r3, #2
 800dab4:	440b      	add	r3, r1
 800dab6:	693a      	ldr	r2, [r7, #16]
 800dab8:	601a      	str	r2, [r3, #0]
      ip4_addr_copy(socket_ipv4_multicast_memberships[i].if_addr, *if_addr);
 800daba:	68bb      	ldr	r3, [r7, #8]
 800dabc:	6819      	ldr	r1, [r3, #0]
 800dabe:	4810      	ldr	r0, [pc, #64]	; (800db00 <lwip_socket_register_membership+0x90>)
 800dac0:	697a      	ldr	r2, [r7, #20]
 800dac2:	4613      	mov	r3, r2
 800dac4:	005b      	lsls	r3, r3, #1
 800dac6:	4413      	add	r3, r2
 800dac8:	009b      	lsls	r3, r3, #2
 800daca:	4403      	add	r3, r0
 800dacc:	3304      	adds	r3, #4
 800dace:	6019      	str	r1, [r3, #0]
      ip4_addr_copy(socket_ipv4_multicast_memberships[i].multi_addr, *multi_addr);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	6819      	ldr	r1, [r3, #0]
 800dad4:	480a      	ldr	r0, [pc, #40]	; (800db00 <lwip_socket_register_membership+0x90>)
 800dad6:	697a      	ldr	r2, [r7, #20]
 800dad8:	4613      	mov	r3, r2
 800dada:	005b      	lsls	r3, r3, #1
 800dadc:	4413      	add	r3, r2
 800dade:	009b      	lsls	r3, r3, #2
 800dae0:	4403      	add	r3, r0
 800dae2:	3308      	adds	r3, #8
 800dae4:	6019      	str	r1, [r3, #0]
      done_socket(sock);
      return 1;
 800dae6:	2301      	movs	r3, #1
 800dae8:	e006      	b.n	800daf8 <lwip_socket_register_membership+0x88>
  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
 800daea:	697b      	ldr	r3, [r7, #20]
 800daec:	3301      	adds	r3, #1
 800daee:	617b      	str	r3, [r7, #20]
 800daf0:	697b      	ldr	r3, [r7, #20]
 800daf2:	2b03      	cmp	r3, #3
 800daf4:	ddce      	ble.n	800da94 <lwip_socket_register_membership+0x24>
    }
  }
  done_socket(sock);
  return 0;
 800daf6:	2300      	movs	r3, #0
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	3718      	adds	r7, #24
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}
 800db00:	2000bdd4 	.word	0x2000bdd4

0800db04 <lwip_socket_unregister_membership>:
 *
 * ATTENTION: this function is called from tcpip_thread (or under CORE_LOCK).
 */
static void
lwip_socket_unregister_membership(int s, const ip4_addr_t *if_addr, const ip4_addr_t *multi_addr)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b086      	sub	sp, #24
 800db08:	af00      	add	r7, sp, #0
 800db0a:	60f8      	str	r0, [r7, #12]
 800db0c:	60b9      	str	r1, [r7, #8]
 800db0e:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock = get_socket(s);
 800db10:	68f8      	ldr	r0, [r7, #12]
 800db12:	f7fe fcbb 	bl	800c48c <get_socket>
 800db16:	6138      	str	r0, [r7, #16]
  int i;

  if (!sock) {
 800db18:	693b      	ldr	r3, [r7, #16]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d04c      	beq.n	800dbb8 <lwip_socket_unregister_membership+0xb4>
    return;
  }

  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
 800db1e:	2300      	movs	r3, #0
 800db20:	617b      	str	r3, [r7, #20]
 800db22:	e045      	b.n	800dbb0 <lwip_socket_unregister_membership+0xac>
    if ((socket_ipv4_multicast_memberships[i].sock == sock) &&
 800db24:	4926      	ldr	r1, [pc, #152]	; (800dbc0 <lwip_socket_unregister_membership+0xbc>)
 800db26:	697a      	ldr	r2, [r7, #20]
 800db28:	4613      	mov	r3, r2
 800db2a:	005b      	lsls	r3, r3, #1
 800db2c:	4413      	add	r3, r2
 800db2e:	009b      	lsls	r3, r3, #2
 800db30:	440b      	add	r3, r1
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	693a      	ldr	r2, [r7, #16]
 800db36:	429a      	cmp	r2, r3
 800db38:	d137      	bne.n	800dbaa <lwip_socket_unregister_membership+0xa6>
        ip4_addr_cmp(&socket_ipv4_multicast_memberships[i].if_addr, if_addr) &&
 800db3a:	4921      	ldr	r1, [pc, #132]	; (800dbc0 <lwip_socket_unregister_membership+0xbc>)
 800db3c:	697a      	ldr	r2, [r7, #20]
 800db3e:	4613      	mov	r3, r2
 800db40:	005b      	lsls	r3, r3, #1
 800db42:	4413      	add	r3, r2
 800db44:	009b      	lsls	r3, r3, #2
 800db46:	440b      	add	r3, r1
 800db48:	3304      	adds	r3, #4
 800db4a:	681a      	ldr	r2, [r3, #0]
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	681b      	ldr	r3, [r3, #0]
    if ((socket_ipv4_multicast_memberships[i].sock == sock) &&
 800db50:	429a      	cmp	r2, r3
 800db52:	d12a      	bne.n	800dbaa <lwip_socket_unregister_membership+0xa6>
        ip4_addr_cmp(&socket_ipv4_multicast_memberships[i].multi_addr, multi_addr)) {
 800db54:	491a      	ldr	r1, [pc, #104]	; (800dbc0 <lwip_socket_unregister_membership+0xbc>)
 800db56:	697a      	ldr	r2, [r7, #20]
 800db58:	4613      	mov	r3, r2
 800db5a:	005b      	lsls	r3, r3, #1
 800db5c:	4413      	add	r3, r2
 800db5e:	009b      	lsls	r3, r3, #2
 800db60:	440b      	add	r3, r1
 800db62:	3308      	adds	r3, #8
 800db64:	681a      	ldr	r2, [r3, #0]
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
        ip4_addr_cmp(&socket_ipv4_multicast_memberships[i].if_addr, if_addr) &&
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d11d      	bne.n	800dbaa <lwip_socket_unregister_membership+0xa6>
      socket_ipv4_multicast_memberships[i].sock = NULL;
 800db6e:	4914      	ldr	r1, [pc, #80]	; (800dbc0 <lwip_socket_unregister_membership+0xbc>)
 800db70:	697a      	ldr	r2, [r7, #20]
 800db72:	4613      	mov	r3, r2
 800db74:	005b      	lsls	r3, r3, #1
 800db76:	4413      	add	r3, r2
 800db78:	009b      	lsls	r3, r3, #2
 800db7a:	440b      	add	r3, r1
 800db7c:	2200      	movs	r2, #0
 800db7e:	601a      	str	r2, [r3, #0]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].if_addr);
 800db80:	490f      	ldr	r1, [pc, #60]	; (800dbc0 <lwip_socket_unregister_membership+0xbc>)
 800db82:	697a      	ldr	r2, [r7, #20]
 800db84:	4613      	mov	r3, r2
 800db86:	005b      	lsls	r3, r3, #1
 800db88:	4413      	add	r3, r2
 800db8a:	009b      	lsls	r3, r3, #2
 800db8c:	440b      	add	r3, r1
 800db8e:	3304      	adds	r3, #4
 800db90:	2200      	movs	r2, #0
 800db92:	601a      	str	r2, [r3, #0]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].multi_addr);
 800db94:	490a      	ldr	r1, [pc, #40]	; (800dbc0 <lwip_socket_unregister_membership+0xbc>)
 800db96:	697a      	ldr	r2, [r7, #20]
 800db98:	4613      	mov	r3, r2
 800db9a:	005b      	lsls	r3, r3, #1
 800db9c:	4413      	add	r3, r2
 800db9e:	009b      	lsls	r3, r3, #2
 800dba0:	440b      	add	r3, r1
 800dba2:	3308      	adds	r3, #8
 800dba4:	2200      	movs	r2, #0
 800dba6:	601a      	str	r2, [r3, #0]
      break;
 800dba8:	e007      	b.n	800dbba <lwip_socket_unregister_membership+0xb6>
  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
 800dbaa:	697b      	ldr	r3, [r7, #20]
 800dbac:	3301      	adds	r3, #1
 800dbae:	617b      	str	r3, [r7, #20]
 800dbb0:	697b      	ldr	r3, [r7, #20]
 800dbb2:	2b03      	cmp	r3, #3
 800dbb4:	ddb6      	ble.n	800db24 <lwip_socket_unregister_membership+0x20>
 800dbb6:	e000      	b.n	800dbba <lwip_socket_unregister_membership+0xb6>
    return;
 800dbb8:	bf00      	nop
    }
  }
  done_socket(sock);
}
 800dbba:	3718      	adds	r7, #24
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd80      	pop	{r7, pc}
 800dbc0:	2000bdd4 	.word	0x2000bdd4

0800dbc4 <lwip_socket_drop_registered_memberships>:
 *
 * ATTENTION: this function is NOT called from tcpip_thread (or under CORE_LOCK).
 */
static void
lwip_socket_drop_registered_memberships(int s)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b086      	sub	sp, #24
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = get_socket(s);
 800dbcc:	6878      	ldr	r0, [r7, #4]
 800dbce:	f7fe fc5d 	bl	800c48c <get_socket>
 800dbd2:	6138      	str	r0, [r7, #16]
  int i;

  if (!sock) {
 800dbd4:	693b      	ldr	r3, [r7, #16]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d04e      	beq.n	800dc78 <lwip_socket_drop_registered_memberships+0xb4>
    return;
  }

  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
 800dbda:	2300      	movs	r3, #0
 800dbdc:	617b      	str	r3, [r7, #20]
 800dbde:	e047      	b.n	800dc70 <lwip_socket_drop_registered_memberships+0xac>
    if (socket_ipv4_multicast_memberships[i].sock == sock) {
 800dbe0:	4927      	ldr	r1, [pc, #156]	; (800dc80 <lwip_socket_drop_registered_memberships+0xbc>)
 800dbe2:	697a      	ldr	r2, [r7, #20]
 800dbe4:	4613      	mov	r3, r2
 800dbe6:	005b      	lsls	r3, r3, #1
 800dbe8:	4413      	add	r3, r2
 800dbea:	009b      	lsls	r3, r3, #2
 800dbec:	440b      	add	r3, r1
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	693a      	ldr	r2, [r7, #16]
 800dbf2:	429a      	cmp	r2, r3
 800dbf4:	d139      	bne.n	800dc6a <lwip_socket_drop_registered_memberships+0xa6>
      ip_addr_t multi_addr, if_addr;
      ip_addr_copy_from_ip4(multi_addr, socket_ipv4_multicast_memberships[i].multi_addr);
 800dbf6:	4922      	ldr	r1, [pc, #136]	; (800dc80 <lwip_socket_drop_registered_memberships+0xbc>)
 800dbf8:	697a      	ldr	r2, [r7, #20]
 800dbfa:	4613      	mov	r3, r2
 800dbfc:	005b      	lsls	r3, r3, #1
 800dbfe:	4413      	add	r3, r2
 800dc00:	009b      	lsls	r3, r3, #2
 800dc02:	440b      	add	r3, r1
 800dc04:	3308      	adds	r3, #8
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	60fb      	str	r3, [r7, #12]
      ip_addr_copy_from_ip4(if_addr, socket_ipv4_multicast_memberships[i].if_addr);
 800dc0a:	491d      	ldr	r1, [pc, #116]	; (800dc80 <lwip_socket_drop_registered_memberships+0xbc>)
 800dc0c:	697a      	ldr	r2, [r7, #20]
 800dc0e:	4613      	mov	r3, r2
 800dc10:	005b      	lsls	r3, r3, #1
 800dc12:	4413      	add	r3, r2
 800dc14:	009b      	lsls	r3, r3, #2
 800dc16:	440b      	add	r3, r1
 800dc18:	3304      	adds	r3, #4
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	60bb      	str	r3, [r7, #8]
      socket_ipv4_multicast_memberships[i].sock = NULL;
 800dc1e:	4918      	ldr	r1, [pc, #96]	; (800dc80 <lwip_socket_drop_registered_memberships+0xbc>)
 800dc20:	697a      	ldr	r2, [r7, #20]
 800dc22:	4613      	mov	r3, r2
 800dc24:	005b      	lsls	r3, r3, #1
 800dc26:	4413      	add	r3, r2
 800dc28:	009b      	lsls	r3, r3, #2
 800dc2a:	440b      	add	r3, r1
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	601a      	str	r2, [r3, #0]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].if_addr);
 800dc30:	4913      	ldr	r1, [pc, #76]	; (800dc80 <lwip_socket_drop_registered_memberships+0xbc>)
 800dc32:	697a      	ldr	r2, [r7, #20]
 800dc34:	4613      	mov	r3, r2
 800dc36:	005b      	lsls	r3, r3, #1
 800dc38:	4413      	add	r3, r2
 800dc3a:	009b      	lsls	r3, r3, #2
 800dc3c:	440b      	add	r3, r1
 800dc3e:	3304      	adds	r3, #4
 800dc40:	2200      	movs	r2, #0
 800dc42:	601a      	str	r2, [r3, #0]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].multi_addr);
 800dc44:	490e      	ldr	r1, [pc, #56]	; (800dc80 <lwip_socket_drop_registered_memberships+0xbc>)
 800dc46:	697a      	ldr	r2, [r7, #20]
 800dc48:	4613      	mov	r3, r2
 800dc4a:	005b      	lsls	r3, r3, #1
 800dc4c:	4413      	add	r3, r2
 800dc4e:	009b      	lsls	r3, r3, #2
 800dc50:	440b      	add	r3, r1
 800dc52:	3308      	adds	r3, #8
 800dc54:	2200      	movs	r2, #0
 800dc56:	601a      	str	r2, [r3, #0]

      netconn_join_leave_group(sock->conn, &multi_addr, &if_addr, NETCONN_LEAVE);
 800dc58:	693b      	ldr	r3, [r7, #16]
 800dc5a:	6818      	ldr	r0, [r3, #0]
 800dc5c:	f107 0208 	add.w	r2, r7, #8
 800dc60:	f107 010c 	add.w	r1, r7, #12
 800dc64:	2301      	movs	r3, #1
 800dc66:	f7fc fc4b 	bl	800a500 <netconn_join_leave_group>
  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
 800dc6a:	697b      	ldr	r3, [r7, #20]
 800dc6c:	3301      	adds	r3, #1
 800dc6e:	617b      	str	r3, [r7, #20]
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	2b03      	cmp	r3, #3
 800dc74:	ddb4      	ble.n	800dbe0 <lwip_socket_drop_registered_memberships+0x1c>
 800dc76:	e000      	b.n	800dc7a <lwip_socket_drop_registered_memberships+0xb6>
    return;
 800dc78:	bf00      	nop
    }
  }
  done_socket(sock);
}
 800dc7a:	3718      	adds	r7, #24
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}
 800dc80:	2000bdd4 	.word	0x2000bdd4

0800dc84 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b084      	sub	sp, #16
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
 800dc8c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800dc8e:	f009 fbc5 	bl	801741c <sys_timeouts_sleeptime>
 800dc92:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc9a:	d10b      	bne.n	800dcb4 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800dc9c:	4813      	ldr	r0, [pc, #76]	; (800dcec <tcpip_timeouts_mbox_fetch+0x68>)
 800dc9e:	f00d fd0c 	bl	801b6ba <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800dca2:	2200      	movs	r2, #0
 800dca4:	6839      	ldr	r1, [r7, #0]
 800dca6:	6878      	ldr	r0, [r7, #4]
 800dca8:	f00d fbe2 	bl	801b470 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800dcac:	480f      	ldr	r0, [pc, #60]	; (800dcec <tcpip_timeouts_mbox_fetch+0x68>)
 800dcae:	f00d fcf5 	bl	801b69c <sys_mutex_lock>
    return;
 800dcb2:	e018      	b.n	800dce6 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d102      	bne.n	800dcc0 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800dcba:	f009 fb75 	bl	80173a8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800dcbe:	e7e6      	b.n	800dc8e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800dcc0:	480a      	ldr	r0, [pc, #40]	; (800dcec <tcpip_timeouts_mbox_fetch+0x68>)
 800dcc2:	f00d fcfa 	bl	801b6ba <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800dcc6:	68fa      	ldr	r2, [r7, #12]
 800dcc8:	6839      	ldr	r1, [r7, #0]
 800dcca:	6878      	ldr	r0, [r7, #4]
 800dccc:	f00d fbd0 	bl	801b470 <sys_arch_mbox_fetch>
 800dcd0:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800dcd2:	4806      	ldr	r0, [pc, #24]	; (800dcec <tcpip_timeouts_mbox_fetch+0x68>)
 800dcd4:	f00d fce2 	bl	801b69c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800dcd8:	68bb      	ldr	r3, [r7, #8]
 800dcda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dcde:	d102      	bne.n	800dce6 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800dce0:	f009 fb62 	bl	80173a8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800dce4:	e7d3      	b.n	800dc8e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800dce6:	3710      	adds	r7, #16
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}
 800dcec:	2000be54 	.word	0x2000be54

0800dcf0 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b084      	sub	sp, #16
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800dcf8:	4810      	ldr	r0, [pc, #64]	; (800dd3c <tcpip_thread+0x4c>)
 800dcfa:	f00d fccf 	bl	801b69c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800dcfe:	4b10      	ldr	r3, [pc, #64]	; (800dd40 <tcpip_thread+0x50>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d005      	beq.n	800dd12 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800dd06:	4b0e      	ldr	r3, [pc, #56]	; (800dd40 <tcpip_thread+0x50>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	4a0e      	ldr	r2, [pc, #56]	; (800dd44 <tcpip_thread+0x54>)
 800dd0c:	6812      	ldr	r2, [r2, #0]
 800dd0e:	4610      	mov	r0, r2
 800dd10:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800dd12:	f107 030c 	add.w	r3, r7, #12
 800dd16:	4619      	mov	r1, r3
 800dd18:	480b      	ldr	r0, [pc, #44]	; (800dd48 <tcpip_thread+0x58>)
 800dd1a:	f7ff ffb3 	bl	800dc84 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d106      	bne.n	800dd32 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800dd24:	4b09      	ldr	r3, [pc, #36]	; (800dd4c <tcpip_thread+0x5c>)
 800dd26:	2291      	movs	r2, #145	; 0x91
 800dd28:	4909      	ldr	r1, [pc, #36]	; (800dd50 <tcpip_thread+0x60>)
 800dd2a:	480a      	ldr	r0, [pc, #40]	; (800dd54 <tcpip_thread+0x64>)
 800dd2c:	f015 ff58 	bl	8023be0 <iprintf>
      continue;
 800dd30:	e003      	b.n	800dd3a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	4618      	mov	r0, r3
 800dd36:	f000 f80f 	bl	800dd58 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800dd3a:	e7ea      	b.n	800dd12 <tcpip_thread+0x22>
 800dd3c:	2000be54 	.word	0x2000be54
 800dd40:	2000be48 	.word	0x2000be48
 800dd44:	2000be4c 	.word	0x2000be4c
 800dd48:	2000be50 	.word	0x2000be50
 800dd4c:	08026278 	.word	0x08026278
 800dd50:	080262a8 	.word	0x080262a8
 800dd54:	080262c8 	.word	0x080262c8

0800dd58 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b082      	sub	sp, #8
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	781b      	ldrb	r3, [r3, #0]
 800dd64:	2b02      	cmp	r3, #2
 800dd66:	d026      	beq.n	800ddb6 <tcpip_thread_handle_msg+0x5e>
 800dd68:	2b02      	cmp	r3, #2
 800dd6a:	dc2b      	bgt.n	800ddc4 <tcpip_thread_handle_msg+0x6c>
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d002      	beq.n	800dd76 <tcpip_thread_handle_msg+0x1e>
 800dd70:	2b01      	cmp	r3, #1
 800dd72:	d015      	beq.n	800dda0 <tcpip_thread_handle_msg+0x48>
 800dd74:	e026      	b.n	800ddc4 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	68db      	ldr	r3, [r3, #12]
 800dd7a:	687a      	ldr	r2, [r7, #4]
 800dd7c:	6850      	ldr	r0, [r2, #4]
 800dd7e:	687a      	ldr	r2, [r7, #4]
 800dd80:	6892      	ldr	r2, [r2, #8]
 800dd82:	4611      	mov	r1, r2
 800dd84:	4798      	blx	r3
 800dd86:	4603      	mov	r3, r0
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d004      	beq.n	800dd96 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	685b      	ldr	r3, [r3, #4]
 800dd90:	4618      	mov	r0, r3
 800dd92:	f002 fd85 	bl	80108a0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800dd96:	6879      	ldr	r1, [r7, #4]
 800dd98:	2009      	movs	r0, #9
 800dd9a:	f001 fe55 	bl	800fa48 <memp_free>
      break;
 800dd9e:	e018      	b.n	800ddd2 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	685b      	ldr	r3, [r3, #4]
 800dda4:	687a      	ldr	r2, [r7, #4]
 800dda6:	6892      	ldr	r2, [r2, #8]
 800dda8:	4610      	mov	r0, r2
 800ddaa:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800ddac:	6879      	ldr	r1, [r7, #4]
 800ddae:	2008      	movs	r0, #8
 800ddb0:	f001 fe4a 	bl	800fa48 <memp_free>
      break;
 800ddb4:	e00d      	b.n	800ddd2 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	685b      	ldr	r3, [r3, #4]
 800ddba:	687a      	ldr	r2, [r7, #4]
 800ddbc:	6892      	ldr	r2, [r2, #8]
 800ddbe:	4610      	mov	r0, r2
 800ddc0:	4798      	blx	r3
      break;
 800ddc2:	e006      	b.n	800ddd2 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ddc4:	4b05      	ldr	r3, [pc, #20]	; (800dddc <tcpip_thread_handle_msg+0x84>)
 800ddc6:	22cf      	movs	r2, #207	; 0xcf
 800ddc8:	4905      	ldr	r1, [pc, #20]	; (800dde0 <tcpip_thread_handle_msg+0x88>)
 800ddca:	4806      	ldr	r0, [pc, #24]	; (800dde4 <tcpip_thread_handle_msg+0x8c>)
 800ddcc:	f015 ff08 	bl	8023be0 <iprintf>
      break;
 800ddd0:	bf00      	nop
  }
}
 800ddd2:	bf00      	nop
 800ddd4:	3708      	adds	r7, #8
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}
 800ddda:	bf00      	nop
 800dddc:	08026278 	.word	0x08026278
 800dde0:	080262a8 	.word	0x080262a8
 800dde4:	080262c8 	.word	0x080262c8

0800dde8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b086      	sub	sp, #24
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	60f8      	str	r0, [r7, #12]
 800ddf0:	60b9      	str	r1, [r7, #8]
 800ddf2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ddf4:	481a      	ldr	r0, [pc, #104]	; (800de60 <tcpip_inpkt+0x78>)
 800ddf6:	f00d fb83 	bl	801b500 <sys_mbox_valid>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d105      	bne.n	800de0c <tcpip_inpkt+0x24>
 800de00:	4b18      	ldr	r3, [pc, #96]	; (800de64 <tcpip_inpkt+0x7c>)
 800de02:	22fc      	movs	r2, #252	; 0xfc
 800de04:	4918      	ldr	r1, [pc, #96]	; (800de68 <tcpip_inpkt+0x80>)
 800de06:	4819      	ldr	r0, [pc, #100]	; (800de6c <tcpip_inpkt+0x84>)
 800de08:	f015 feea 	bl	8023be0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800de0c:	2009      	movs	r0, #9
 800de0e:	f001 fdc9 	bl	800f9a4 <memp_malloc>
 800de12:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800de14:	697b      	ldr	r3, [r7, #20]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d102      	bne.n	800de20 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800de1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de1e:	e01a      	b.n	800de56 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800de20:	697b      	ldr	r3, [r7, #20]
 800de22:	2200      	movs	r2, #0
 800de24:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800de26:	697b      	ldr	r3, [r7, #20]
 800de28:	68fa      	ldr	r2, [r7, #12]
 800de2a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800de2c:	697b      	ldr	r3, [r7, #20]
 800de2e:	68ba      	ldr	r2, [r7, #8]
 800de30:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800de32:	697b      	ldr	r3, [r7, #20]
 800de34:	687a      	ldr	r2, [r7, #4]
 800de36:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800de38:	6979      	ldr	r1, [r7, #20]
 800de3a:	4809      	ldr	r0, [pc, #36]	; (800de60 <tcpip_inpkt+0x78>)
 800de3c:	f00d fafe 	bl	801b43c <sys_mbox_trypost>
 800de40:	4603      	mov	r3, r0
 800de42:	2b00      	cmp	r3, #0
 800de44:	d006      	beq.n	800de54 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800de46:	6979      	ldr	r1, [r7, #20]
 800de48:	2009      	movs	r0, #9
 800de4a:	f001 fdfd 	bl	800fa48 <memp_free>
    return ERR_MEM;
 800de4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de52:	e000      	b.n	800de56 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800de54:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800de56:	4618      	mov	r0, r3
 800de58:	3718      	adds	r7, #24
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bd80      	pop	{r7, pc}
 800de5e:	bf00      	nop
 800de60:	2000be50 	.word	0x2000be50
 800de64:	08026278 	.word	0x08026278
 800de68:	080262f0 	.word	0x080262f0
 800de6c:	080262c8 	.word	0x080262c8

0800de70 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b082      	sub	sp, #8
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
 800de78:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800de80:	f003 0318 	and.w	r3, r3, #24
 800de84:	2b00      	cmp	r3, #0
 800de86:	d006      	beq.n	800de96 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800de88:	4a08      	ldr	r2, [pc, #32]	; (800deac <tcpip_input+0x3c>)
 800de8a:	6839      	ldr	r1, [r7, #0]
 800de8c:	6878      	ldr	r0, [r7, #4]
 800de8e:	f7ff ffab 	bl	800dde8 <tcpip_inpkt>
 800de92:	4603      	mov	r3, r0
 800de94:	e005      	b.n	800dea2 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800de96:	4a06      	ldr	r2, [pc, #24]	; (800deb0 <tcpip_input+0x40>)
 800de98:	6839      	ldr	r1, [r7, #0]
 800de9a:	6878      	ldr	r0, [r7, #4]
 800de9c:	f7ff ffa4 	bl	800dde8 <tcpip_inpkt>
 800dea0:	4603      	mov	r3, r0
}
 800dea2:	4618      	mov	r0, r3
 800dea4:	3708      	adds	r7, #8
 800dea6:	46bd      	mov	sp, r7
 800dea8:	bd80      	pop	{r7, pc}
 800deaa:	bf00      	nop
 800deac:	0801b239 	.word	0x0801b239
 800deb0:	08019c69 	.word	0x08019c69

0800deb4 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b084      	sub	sp, #16
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
 800debc:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800debe:	4819      	ldr	r0, [pc, #100]	; (800df24 <tcpip_try_callback+0x70>)
 800dec0:	f00d fb1e 	bl	801b500 <sys_mbox_valid>
 800dec4:	4603      	mov	r3, r0
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d106      	bne.n	800ded8 <tcpip_try_callback+0x24>
 800deca:	4b17      	ldr	r3, [pc, #92]	; (800df28 <tcpip_try_callback+0x74>)
 800decc:	f240 125d 	movw	r2, #349	; 0x15d
 800ded0:	4916      	ldr	r1, [pc, #88]	; (800df2c <tcpip_try_callback+0x78>)
 800ded2:	4817      	ldr	r0, [pc, #92]	; (800df30 <tcpip_try_callback+0x7c>)
 800ded4:	f015 fe84 	bl	8023be0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800ded8:	2008      	movs	r0, #8
 800deda:	f001 fd63 	bl	800f9a4 <memp_malloc>
 800dede:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d102      	bne.n	800deec <tcpip_try_callback+0x38>
    return ERR_MEM;
 800dee6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800deea:	e017      	b.n	800df1c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	2201      	movs	r2, #1
 800def0:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	687a      	ldr	r2, [r7, #4]
 800def6:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	683a      	ldr	r2, [r7, #0]
 800defc:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800defe:	68f9      	ldr	r1, [r7, #12]
 800df00:	4808      	ldr	r0, [pc, #32]	; (800df24 <tcpip_try_callback+0x70>)
 800df02:	f00d fa9b 	bl	801b43c <sys_mbox_trypost>
 800df06:	4603      	mov	r3, r0
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d006      	beq.n	800df1a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800df0c:	68f9      	ldr	r1, [r7, #12]
 800df0e:	2008      	movs	r0, #8
 800df10:	f001 fd9a 	bl	800fa48 <memp_free>
    return ERR_MEM;
 800df14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800df18:	e000      	b.n	800df1c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800df1a:	2300      	movs	r3, #0
}
 800df1c:	4618      	mov	r0, r3
 800df1e:	3710      	adds	r7, #16
 800df20:	46bd      	mov	sp, r7
 800df22:	bd80      	pop	{r7, pc}
 800df24:	2000be50 	.word	0x2000be50
 800df28:	08026278 	.word	0x08026278
 800df2c:	080262f0 	.word	0x080262f0
 800df30:	080262c8 	.word	0x080262c8

0800df34 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b084      	sub	sp, #16
 800df38:	af00      	add	r7, sp, #0
 800df3a:	60f8      	str	r0, [r7, #12]
 800df3c:	60b9      	str	r1, [r7, #8]
 800df3e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800df40:	4806      	ldr	r0, [pc, #24]	; (800df5c <tcpip_send_msg_wait_sem+0x28>)
 800df42:	f00d fbab 	bl	801b69c <sys_mutex_lock>
  fn(apimsg);
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	68b8      	ldr	r0, [r7, #8]
 800df4a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800df4c:	4803      	ldr	r0, [pc, #12]	; (800df5c <tcpip_send_msg_wait_sem+0x28>)
 800df4e:	f00d fbb4 	bl	801b6ba <sys_mutex_unlock>
  return ERR_OK;
 800df52:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800df54:	4618      	mov	r0, r3
 800df56:	3710      	adds	r7, #16
 800df58:	46bd      	mov	sp, r7
 800df5a:	bd80      	pop	{r7, pc}
 800df5c:	2000be54 	.word	0x2000be54

0800df60 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b084      	sub	sp, #16
 800df64:	af02      	add	r7, sp, #8
 800df66:	6078      	str	r0, [r7, #4]
 800df68:	6039      	str	r1, [r7, #0]
  lwip_init();
 800df6a:	f001 f890 	bl	800f08e <lwip_init>

  tcpip_init_done = initfunc;
 800df6e:	4a17      	ldr	r2, [pc, #92]	; (800dfcc <tcpip_init+0x6c>)
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800df74:	4a16      	ldr	r2, [pc, #88]	; (800dfd0 <tcpip_init+0x70>)
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800df7a:	2106      	movs	r1, #6
 800df7c:	4815      	ldr	r0, [pc, #84]	; (800dfd4 <tcpip_init+0x74>)
 800df7e:	f00d fa31 	bl	801b3e4 <sys_mbox_new>
 800df82:	4603      	mov	r3, r0
 800df84:	2b00      	cmp	r3, #0
 800df86:	d006      	beq.n	800df96 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800df88:	4b13      	ldr	r3, [pc, #76]	; (800dfd8 <tcpip_init+0x78>)
 800df8a:	f240 2261 	movw	r2, #609	; 0x261
 800df8e:	4913      	ldr	r1, [pc, #76]	; (800dfdc <tcpip_init+0x7c>)
 800df90:	4813      	ldr	r0, [pc, #76]	; (800dfe0 <tcpip_init+0x80>)
 800df92:	f015 fe25 	bl	8023be0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800df96:	4813      	ldr	r0, [pc, #76]	; (800dfe4 <tcpip_init+0x84>)
 800df98:	f00d fb6a 	bl	801b670 <sys_mutex_new>
 800df9c:	4603      	mov	r3, r0
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d006      	beq.n	800dfb0 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800dfa2:	4b0d      	ldr	r3, [pc, #52]	; (800dfd8 <tcpip_init+0x78>)
 800dfa4:	f240 2265 	movw	r2, #613	; 0x265
 800dfa8:	490f      	ldr	r1, [pc, #60]	; (800dfe8 <tcpip_init+0x88>)
 800dfaa:	480d      	ldr	r0, [pc, #52]	; (800dfe0 <tcpip_init+0x80>)
 800dfac:	f015 fe18 	bl	8023be0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800dfb0:	2318      	movs	r3, #24
 800dfb2:	9300      	str	r3, [sp, #0]
 800dfb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dfb8:	2200      	movs	r2, #0
 800dfba:	490c      	ldr	r1, [pc, #48]	; (800dfec <tcpip_init+0x8c>)
 800dfbc:	480c      	ldr	r0, [pc, #48]	; (800dff0 <tcpip_init+0x90>)
 800dfbe:	f00d fb89 	bl	801b6d4 <sys_thread_new>
}
 800dfc2:	bf00      	nop
 800dfc4:	3708      	adds	r7, #8
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	bd80      	pop	{r7, pc}
 800dfca:	bf00      	nop
 800dfcc:	2000be48 	.word	0x2000be48
 800dfd0:	2000be4c 	.word	0x2000be4c
 800dfd4:	2000be50 	.word	0x2000be50
 800dfd8:	08026278 	.word	0x08026278
 800dfdc:	08026300 	.word	0x08026300
 800dfe0:	080262c8 	.word	0x080262c8
 800dfe4:	2000be54 	.word	0x2000be54
 800dfe8:	08026324 	.word	0x08026324
 800dfec:	0800dcf1 	.word	0x0800dcf1
 800dff0:	08026348 	.word	0x08026348

0800dff4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800dff4:	b480      	push	{r7}
 800dff6:	b083      	sub	sp, #12
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	4603      	mov	r3, r0
 800dffc:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800dffe:	88fb      	ldrh	r3, [r7, #6]
 800e000:	021b      	lsls	r3, r3, #8
 800e002:	b21a      	sxth	r2, r3
 800e004:	88fb      	ldrh	r3, [r7, #6]
 800e006:	0a1b      	lsrs	r3, r3, #8
 800e008:	b29b      	uxth	r3, r3
 800e00a:	b21b      	sxth	r3, r3
 800e00c:	4313      	orrs	r3, r2
 800e00e:	b21b      	sxth	r3, r3
 800e010:	b29b      	uxth	r3, r3
}
 800e012:	4618      	mov	r0, r3
 800e014:	370c      	adds	r7, #12
 800e016:	46bd      	mov	sp, r7
 800e018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01c:	4770      	bx	lr

0800e01e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800e01e:	b480      	push	{r7}
 800e020:	b083      	sub	sp, #12
 800e022:	af00      	add	r7, sp, #0
 800e024:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	061a      	lsls	r2, r3, #24
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	021b      	lsls	r3, r3, #8
 800e02e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e032:	431a      	orrs	r2, r3
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	0a1b      	lsrs	r3, r3, #8
 800e038:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e03c:	431a      	orrs	r2, r3
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	0e1b      	lsrs	r3, r3, #24
 800e042:	4313      	orrs	r3, r2
}
 800e044:	4618      	mov	r0, r3
 800e046:	370c      	adds	r7, #12
 800e048:	46bd      	mov	sp, r7
 800e04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04e:	4770      	bx	lr

0800e050 <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char *str1, const char *str2, size_t len)
{
 800e050:	b480      	push	{r7}
 800e052:	b087      	sub	sp, #28
 800e054:	af00      	add	r7, sp, #0
 800e056:	60f8      	str	r0, [r7, #12]
 800e058:	60b9      	str	r1, [r7, #8]
 800e05a:	607a      	str	r2, [r7, #4]
  char c1, c2;

  do {
    c1 = *str1++;
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	1c5a      	adds	r2, r3, #1
 800e060:	60fa      	str	r2, [r7, #12]
 800e062:	781b      	ldrb	r3, [r3, #0]
 800e064:	75fb      	strb	r3, [r7, #23]
    c2 = *str2++;
 800e066:	68bb      	ldr	r3, [r7, #8]
 800e068:	1c5a      	adds	r2, r3, #1
 800e06a:	60ba      	str	r2, [r7, #8]
 800e06c:	781b      	ldrb	r3, [r3, #0]
 800e06e:	75bb      	strb	r3, [r7, #22]
    if (c1 != c2) {
 800e070:	7dfa      	ldrb	r2, [r7, #23]
 800e072:	7dbb      	ldrb	r3, [r7, #22]
 800e074:	429a      	cmp	r2, r3
 800e076:	d016      	beq.n	800e0a6 <lwip_strnicmp+0x56>
      char c1_upc = c1 | 0x20;
 800e078:	7dfb      	ldrb	r3, [r7, #23]
 800e07a:	f043 0320 	orr.w	r3, r3, #32
 800e07e:	757b      	strb	r3, [r7, #21]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800e080:	7d7b      	ldrb	r3, [r7, #21]
 800e082:	2b60      	cmp	r3, #96	; 0x60
 800e084:	d90c      	bls.n	800e0a0 <lwip_strnicmp+0x50>
 800e086:	7d7b      	ldrb	r3, [r7, #21]
 800e088:	2b7a      	cmp	r3, #122	; 0x7a
 800e08a:	d809      	bhi.n	800e0a0 <lwip_strnicmp+0x50>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 800e08c:	7dbb      	ldrb	r3, [r7, #22]
 800e08e:	f043 0320 	orr.w	r3, r3, #32
 800e092:	753b      	strb	r3, [r7, #20]
        if (c1_upc != c2_upc) {
 800e094:	7d7a      	ldrb	r2, [r7, #21]
 800e096:	7d3b      	ldrb	r3, [r7, #20]
 800e098:	429a      	cmp	r2, r3
 800e09a:	d003      	beq.n	800e0a4 <lwip_strnicmp+0x54>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 800e09c:	2301      	movs	r3, #1
 800e09e:	e00c      	b.n	800e0ba <lwip_strnicmp+0x6a>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 800e0a0:	2301      	movs	r3, #1
 800e0a2:	e00a      	b.n	800e0ba <lwip_strnicmp+0x6a>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800e0a4:	bf00      	nop
      }
    }
    len--;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	3b01      	subs	r3, #1
 800e0aa:	607b      	str	r3, [r7, #4]
  } while ((len != 0) && (c1 != 0));
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d002      	beq.n	800e0b8 <lwip_strnicmp+0x68>
 800e0b2:	7dfb      	ldrb	r3, [r7, #23]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d1d1      	bne.n	800e05c <lwip_strnicmp+0xc>
  return 0;
 800e0b8:	2300      	movs	r3, #0
}
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	371c      	adds	r7, #28
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c4:	4770      	bx	lr

0800e0c6 <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 800e0c6:	b480      	push	{r7}
 800e0c8:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 800e0ca:	bf00      	nop
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d2:	4770      	bx	lr

0800e0d4 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 800e0d8:	f000 fc54 	bl	800e984 <dns_check_entries>
}
 800e0dc:	bf00      	nop
 800e0de:	bd80      	pop	{r7, pc}

0800e0e0 <dns_lookup>:
 *         was not found in the cached dns_table.
 * @return ERR_OK if found, ERR_ARG if not found
 */
static err_t
dns_lookup(const char *name, ip_addr_t *addr LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype))
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b084      	sub	sp, #16
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
 800e0e8:	6039      	str	r1, [r7, #0]
    return ERR_OK;
  }
#endif /* DNS_LOOKUP_LOCAL_EXTERN */

  /* Walk through name list, return entry if found. If not, return NULL. */
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	73fb      	strb	r3, [r7, #15]
 800e0ee:	e02e      	b.n	800e14e <dns_lookup+0x6e>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 800e0f0:	7bfa      	ldrb	r2, [r7, #15]
 800e0f2:	491b      	ldr	r1, [pc, #108]	; (800e160 <dns_lookup+0x80>)
 800e0f4:	4613      	mov	r3, r2
 800e0f6:	011b      	lsls	r3, r3, #4
 800e0f8:	4413      	add	r3, r2
 800e0fa:	011b      	lsls	r3, r3, #4
 800e0fc:	440b      	add	r3, r1
 800e0fe:	330a      	adds	r3, #10
 800e100:	781b      	ldrb	r3, [r3, #0]
 800e102:	2b03      	cmp	r3, #3
 800e104:	d120      	bne.n	800e148 <dns_lookup+0x68>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
 800e106:	7bfa      	ldrb	r2, [r7, #15]
 800e108:	4613      	mov	r3, r2
 800e10a:	011b      	lsls	r3, r3, #4
 800e10c:	4413      	add	r3, r2
 800e10e:	011b      	lsls	r3, r3, #4
 800e110:	3310      	adds	r3, #16
 800e112:	4a13      	ldr	r2, [pc, #76]	; (800e160 <dns_lookup+0x80>)
 800e114:	4413      	add	r3, r2
 800e116:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e11a:	4619      	mov	r1, r3
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f7ff ff97 	bl	800e050 <lwip_strnicmp>
 800e122:	4603      	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 800e124:	2b00      	cmp	r3, #0
 800e126:	d10f      	bne.n	800e148 <dns_lookup+0x68>
        LWIP_DNS_ADDRTYPE_MATCH_IP(dns_addrtype, dns_table[i].ipaddr)) {
      LWIP_DEBUGF(DNS_DEBUG, ("dns_lookup: \"%s\": found = ", name));
      ip_addr_debug_print_val(DNS_DEBUG, dns_table[i].ipaddr);
      LWIP_DEBUGF(DNS_DEBUG, ("\n"));
      if (addr) {
 800e128:	683b      	ldr	r3, [r7, #0]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d00a      	beq.n	800e144 <dns_lookup+0x64>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
 800e12e:	7bfa      	ldrb	r2, [r7, #15]
 800e130:	490b      	ldr	r1, [pc, #44]	; (800e160 <dns_lookup+0x80>)
 800e132:	4613      	mov	r3, r2
 800e134:	011b      	lsls	r3, r3, #4
 800e136:	4413      	add	r3, r2
 800e138:	011b      	lsls	r3, r3, #4
 800e13a:	440b      	add	r3, r1
 800e13c:	3304      	adds	r3, #4
 800e13e:	681a      	ldr	r2, [r3, #0]
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	601a      	str	r2, [r3, #0]
      }
      return ERR_OK;
 800e144:	2300      	movs	r3, #0
 800e146:	e007      	b.n	800e158 <dns_lookup+0x78>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800e148:	7bfb      	ldrb	r3, [r7, #15]
 800e14a:	3301      	adds	r3, #1
 800e14c:	73fb      	strb	r3, [r7, #15]
 800e14e:	7bfb      	ldrb	r3, [r7, #15]
 800e150:	2b03      	cmp	r3, #3
 800e152:	d9cd      	bls.n	800e0f0 <dns_lookup+0x10>
    }
  }

  return ERR_ARG;
 800e154:	f06f 030f 	mvn.w	r3, #15
}
 800e158:	4618      	mov	r0, r3
 800e15a:	3710      	adds	r7, #16
 800e15c:	46bd      	mov	sp, r7
 800e15e:	bd80      	pop	{r7, pc}
 800e160:	2000be6c 	.word	0x2000be6c

0800e164 <dns_compare_name>:
 * @param start_offset offset into p where the name starts
 * @return 0xFFFF: names differ, other: names equal -> offset behind name
 */
static u16_t
dns_compare_name(const char *query, struct pbuf *p, u16_t start_offset)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b088      	sub	sp, #32
 800e168:	af00      	add	r7, sp, #0
 800e16a:	60f8      	str	r0, [r7, #12]
 800e16c:	60b9      	str	r1, [r7, #8]
 800e16e:	4613      	mov	r3, r2
 800e170:	80fb      	strh	r3, [r7, #6]
  int n;
  u16_t response_offset = start_offset;
 800e172:	88fb      	ldrh	r3, [r7, #6]
 800e174:	837b      	strh	r3, [r7, #26]

  do {
    n = pbuf_try_get_at(p, response_offset);
 800e176:	8b7b      	ldrh	r3, [r7, #26]
 800e178:	4619      	mov	r1, r3
 800e17a:	68b8      	ldr	r0, [r7, #8]
 800e17c:	f002 ff72 	bl	8011064 <pbuf_try_get_at>
 800e180:	61f8      	str	r0, [r7, #28]
    if ((n < 0) || (response_offset == 0xFFFF)) {
 800e182:	69fb      	ldr	r3, [r7, #28]
 800e184:	2b00      	cmp	r3, #0
 800e186:	db04      	blt.n	800e192 <dns_compare_name+0x2e>
 800e188:	8b7b      	ldrh	r3, [r7, #26]
 800e18a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e18e:	4293      	cmp	r3, r2
 800e190:	d102      	bne.n	800e198 <dns_compare_name+0x34>
      /* error or overflow */
      return 0xFFFF;
 800e192:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e196:	e06c      	b.n	800e272 <dns_compare_name+0x10e>
    }
    response_offset++;
 800e198:	8b7b      	ldrh	r3, [r7, #26]
 800e19a:	3301      	adds	r3, #1
 800e19c:	837b      	strh	r3, [r7, #26]
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
 800e19e:	69fb      	ldr	r3, [r7, #28]
 800e1a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e1a4:	2bc0      	cmp	r3, #192	; 0xc0
 800e1a6:	d144      	bne.n	800e232 <dns_compare_name+0xce>
      /* Compressed name: cannot be equal since we don't send them */
      return 0xFFFF;
 800e1a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e1ac:	e061      	b.n	800e272 <dns_compare_name+0x10e>
    } else {
      /* Not compressed name */
      while (n > 0) {
        int c = pbuf_try_get_at(p, response_offset);
 800e1ae:	8b7b      	ldrh	r3, [r7, #26]
 800e1b0:	4619      	mov	r1, r3
 800e1b2:	68b8      	ldr	r0, [r7, #8]
 800e1b4:	f002 ff56 	bl	8011064 <pbuf_try_get_at>
 800e1b8:	6178      	str	r0, [r7, #20]
        if (c < 0) {
 800e1ba:	697b      	ldr	r3, [r7, #20]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	da02      	bge.n	800e1c6 <dns_compare_name+0x62>
          return 0xFFFF;
 800e1c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e1c4:	e055      	b.n	800e272 <dns_compare_name+0x10e>
        }
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	781b      	ldrb	r3, [r3, #0]
 800e1ca:	74fb      	strb	r3, [r7, #19]
 800e1cc:	7cfb      	ldrb	r3, [r7, #19]
 800e1ce:	3301      	adds	r3, #1
 800e1d0:	4a2a      	ldr	r2, [pc, #168]	; (800e27c <dns_compare_name+0x118>)
 800e1d2:	4413      	add	r3, r2
 800e1d4:	781b      	ldrb	r3, [r3, #0]
 800e1d6:	f003 0303 	and.w	r3, r3, #3
 800e1da:	2b01      	cmp	r3, #1
 800e1dc:	d103      	bne.n	800e1e6 <dns_compare_name+0x82>
 800e1de:	7cfb      	ldrb	r3, [r7, #19]
 800e1e0:	f103 0220 	add.w	r2, r3, #32
 800e1e4:	e000      	b.n	800e1e8 <dns_compare_name+0x84>
 800e1e6:	7cfa      	ldrb	r2, [r7, #19]
 800e1e8:	697b      	ldr	r3, [r7, #20]
 800e1ea:	74bb      	strb	r3, [r7, #18]
 800e1ec:	7cbb      	ldrb	r3, [r7, #18]
 800e1ee:	3301      	adds	r3, #1
 800e1f0:	4922      	ldr	r1, [pc, #136]	; (800e27c <dns_compare_name+0x118>)
 800e1f2:	440b      	add	r3, r1
 800e1f4:	781b      	ldrb	r3, [r3, #0]
 800e1f6:	f003 0303 	and.w	r3, r3, #3
 800e1fa:	2b01      	cmp	r3, #1
 800e1fc:	d102      	bne.n	800e204 <dns_compare_name+0xa0>
 800e1fe:	7cbb      	ldrb	r3, [r7, #18]
 800e200:	3320      	adds	r3, #32
 800e202:	e000      	b.n	800e206 <dns_compare_name+0xa2>
 800e204:	7cbb      	ldrb	r3, [r7, #18]
 800e206:	429a      	cmp	r2, r3
 800e208:	d002      	beq.n	800e210 <dns_compare_name+0xac>
          return 0xFFFF;
 800e20a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e20e:	e030      	b.n	800e272 <dns_compare_name+0x10e>
        }
        if (response_offset == 0xFFFF) {
 800e210:	8b7b      	ldrh	r3, [r7, #26]
 800e212:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e216:	4293      	cmp	r3, r2
 800e218:	d102      	bne.n	800e220 <dns_compare_name+0xbc>
          /* would overflow */
          return 0xFFFF;
 800e21a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e21e:	e028      	b.n	800e272 <dns_compare_name+0x10e>
        }
        response_offset++;
 800e220:	8b7b      	ldrh	r3, [r7, #26]
 800e222:	3301      	adds	r3, #1
 800e224:	837b      	strh	r3, [r7, #26]
        ++query;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	3301      	adds	r3, #1
 800e22a:	60fb      	str	r3, [r7, #12]
        --n;
 800e22c:	69fb      	ldr	r3, [r7, #28]
 800e22e:	3b01      	subs	r3, #1
 800e230:	61fb      	str	r3, [r7, #28]
      while (n > 0) {
 800e232:	69fb      	ldr	r3, [r7, #28]
 800e234:	2b00      	cmp	r3, #0
 800e236:	dcba      	bgt.n	800e1ae <dns_compare_name+0x4a>
      }
      ++query;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	3301      	adds	r3, #1
 800e23c:	60fb      	str	r3, [r7, #12]
    }
    n = pbuf_try_get_at(p, response_offset);
 800e23e:	8b7b      	ldrh	r3, [r7, #26]
 800e240:	4619      	mov	r1, r3
 800e242:	68b8      	ldr	r0, [r7, #8]
 800e244:	f002 ff0e 	bl	8011064 <pbuf_try_get_at>
 800e248:	61f8      	str	r0, [r7, #28]
    if (n < 0) {
 800e24a:	69fb      	ldr	r3, [r7, #28]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	da02      	bge.n	800e256 <dns_compare_name+0xf2>
      return 0xFFFF;
 800e250:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e254:	e00d      	b.n	800e272 <dns_compare_name+0x10e>
    }
  } while (n != 0);
 800e256:	69fb      	ldr	r3, [r7, #28]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d18c      	bne.n	800e176 <dns_compare_name+0x12>

  if (response_offset == 0xFFFF) {
 800e25c:	8b7b      	ldrh	r3, [r7, #26]
 800e25e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e262:	4293      	cmp	r3, r2
 800e264:	d102      	bne.n	800e26c <dns_compare_name+0x108>
    /* would overflow */
    return 0xFFFF;
 800e266:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e26a:	e002      	b.n	800e272 <dns_compare_name+0x10e>
  }
  return (u16_t)(response_offset + 1);
 800e26c:	8b7b      	ldrh	r3, [r7, #26]
 800e26e:	3301      	adds	r3, #1
 800e270:	b29b      	uxth	r3, r3
}
 800e272:	4618      	mov	r0, r3
 800e274:	3720      	adds	r7, #32
 800e276:	46bd      	mov	sp, r7
 800e278:	bd80      	pop	{r7, pc}
 800e27a:	bf00      	nop
 800e27c:	08029a9c 	.word	0x08029a9c

0800e280 <dns_skip_name>:
 * @param query_idx start index into p pointing to encoded DNS name in the DNS server response
 * @return index to end of the name
 */
static u16_t
dns_skip_name(struct pbuf *p, u16_t query_idx)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b084      	sub	sp, #16
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
 800e288:	460b      	mov	r3, r1
 800e28a:	807b      	strh	r3, [r7, #2]
  int n;
  u16_t offset = query_idx;
 800e28c:	887b      	ldrh	r3, [r7, #2]
 800e28e:	81fb      	strh	r3, [r7, #14]

  do {
    n = pbuf_try_get_at(p, offset++);
 800e290:	89fb      	ldrh	r3, [r7, #14]
 800e292:	1c5a      	adds	r2, r3, #1
 800e294:	81fa      	strh	r2, [r7, #14]
 800e296:	4619      	mov	r1, r3
 800e298:	6878      	ldr	r0, [r7, #4]
 800e29a:	f002 fee3 	bl	8011064 <pbuf_try_get_at>
 800e29e:	60b8      	str	r0, [r7, #8]
    if ((n < 0) || (offset == 0)) {
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	db02      	blt.n	800e2ac <dns_skip_name+0x2c>
 800e2a6:	89fb      	ldrh	r3, [r7, #14]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d102      	bne.n	800e2b2 <dns_skip_name+0x32>
      return 0xFFFF;
 800e2ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e2b0:	e02f      	b.n	800e312 <dns_skip_name+0x92>
    }
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
 800e2b2:	68bb      	ldr	r3, [r7, #8]
 800e2b4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e2b8:	2bc0      	cmp	r3, #192	; 0xc0
 800e2ba:	d01e      	beq.n	800e2fa <dns_skip_name+0x7a>
      /* Compressed name: since we only want to skip it (not check it), stop here */
      break;
    } else {
      /* Not compressed name */
      if (offset + n >= p->tot_len) {
 800e2bc:	89fa      	ldrh	r2, [r7, #14]
 800e2be:	68bb      	ldr	r3, [r7, #8]
 800e2c0:	4413      	add	r3, r2
 800e2c2:	687a      	ldr	r2, [r7, #4]
 800e2c4:	8912      	ldrh	r2, [r2, #8]
 800e2c6:	4293      	cmp	r3, r2
 800e2c8:	db02      	blt.n	800e2d0 <dns_skip_name+0x50>
        return 0xFFFF;
 800e2ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e2ce:	e020      	b.n	800e312 <dns_skip_name+0x92>
      }
      offset = (u16_t)(offset + n);
 800e2d0:	68bb      	ldr	r3, [r7, #8]
 800e2d2:	b29a      	uxth	r2, r3
 800e2d4:	89fb      	ldrh	r3, [r7, #14]
 800e2d6:	4413      	add	r3, r2
 800e2d8:	81fb      	strh	r3, [r7, #14]
    }
    n = pbuf_try_get_at(p, offset);
 800e2da:	89fb      	ldrh	r3, [r7, #14]
 800e2dc:	4619      	mov	r1, r3
 800e2de:	6878      	ldr	r0, [r7, #4]
 800e2e0:	f002 fec0 	bl	8011064 <pbuf_try_get_at>
 800e2e4:	60b8      	str	r0, [r7, #8]
    if (n < 0) {
 800e2e6:	68bb      	ldr	r3, [r7, #8]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	da02      	bge.n	800e2f2 <dns_skip_name+0x72>
      return 0xFFFF;
 800e2ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e2f0:	e00f      	b.n	800e312 <dns_skip_name+0x92>
    }
  } while (n != 0);
 800e2f2:	68bb      	ldr	r3, [r7, #8]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d1cb      	bne.n	800e290 <dns_skip_name+0x10>
 800e2f8:	e000      	b.n	800e2fc <dns_skip_name+0x7c>
      break;
 800e2fa:	bf00      	nop

  if (offset == 0xFFFF) {
 800e2fc:	89fb      	ldrh	r3, [r7, #14]
 800e2fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e302:	4293      	cmp	r3, r2
 800e304:	d102      	bne.n	800e30c <dns_skip_name+0x8c>
    return 0xFFFF;
 800e306:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e30a:	e002      	b.n	800e312 <dns_skip_name+0x92>
  }
  return (u16_t)(offset + 1);
 800e30c:	89fb      	ldrh	r3, [r7, #14]
 800e30e:	3301      	adds	r3, #1
 800e310:	b29b      	uxth	r3, r3
}
 800e312:	4618      	mov	r0, r3
 800e314:	3710      	adds	r7, #16
 800e316:	46bd      	mov	sp, r7
 800e318:	bd80      	pop	{r7, pc}
	...

0800e31c <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b090      	sub	sp, #64	; 0x40
 800e320:	af00      	add	r7, sp, #0
 800e322:	4603      	mov	r3, r0
 800e324:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 800e326:	79fa      	ldrb	r2, [r7, #7]
 800e328:	4613      	mov	r3, r2
 800e32a:	011b      	lsls	r3, r3, #4
 800e32c:	4413      	add	r3, r2
 800e32e:	011b      	lsls	r3, r3, #4
 800e330:	4a6c      	ldr	r2, [pc, #432]	; (800e4e4 <dns_send+0x1c8>)
 800e332:	4413      	add	r3, r2
 800e334:	633b      	str	r3, [r7, #48]	; 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 800e336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e338:	7adb      	ldrb	r3, [r3, #11]
 800e33a:	2b01      	cmp	r3, #1
 800e33c:	d906      	bls.n	800e34c <dns_send+0x30>
 800e33e:	4b6a      	ldr	r3, [pc, #424]	; (800e4e8 <dns_send+0x1cc>)
 800e340:	f240 22fa 	movw	r2, #762	; 0x2fa
 800e344:	4969      	ldr	r1, [pc, #420]	; (800e4ec <dns_send+0x1d0>)
 800e346:	486a      	ldr	r0, [pc, #424]	; (800e4f0 <dns_send+0x1d4>)
 800e348:	f015 fc4a 	bl	8023be0 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 800e34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e34e:	7adb      	ldrb	r3, [r3, #11]
 800e350:	461a      	mov	r2, r3
 800e352:	4b68      	ldr	r3, [pc, #416]	; (800e4f4 <dns_send+0x1d8>)
 800e354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d109      	bne.n	800e370 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 800e35c:	79fb      	ldrb	r3, [r7, #7]
 800e35e:	2100      	movs	r1, #0
 800e360:	4618      	mov	r0, r3
 800e362:	f000 f959 	bl	800e618 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 800e366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e368:	2200      	movs	r2, #0
 800e36a:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 800e36c:	2300      	movs	r3, #0
 800e36e:	e0b4      	b.n	800e4da <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 800e370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e372:	3310      	adds	r3, #16
 800e374:	4618      	mov	r0, r3
 800e376:	f7f1 ff55 	bl	8000224 <strlen>
 800e37a:	4603      	mov	r3, r0
 800e37c:	b29b      	uxth	r3, r3
 800e37e:	3312      	adds	r3, #18
 800e380:	b29b      	uxth	r3, r3
 800e382:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e386:	4619      	mov	r1, r3
 800e388:	2036      	movs	r0, #54	; 0x36
 800e38a:	f001 ff73 	bl	8010274 <pbuf_alloc>
 800e38e:	62f8      	str	r0, [r7, #44]	; 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 800e390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e392:	2b00      	cmp	r3, #0
 800e394:	f000 8095 	beq.w	800e4c2 <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 800e398:	f107 0310 	add.w	r3, r7, #16
 800e39c:	220c      	movs	r2, #12
 800e39e:	2100      	movs	r1, #0
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f015 fb1f 	bl	80239e4 <memset>
    hdr.id = lwip_htons(entry->txid);
 800e3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3a8:	891b      	ldrh	r3, [r3, #8]
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	f7ff fe22 	bl	800dff4 <lwip_htons>
 800e3b0:	4603      	mov	r3, r0
 800e3b2:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 800e3b4:	2301      	movs	r3, #1
 800e3b6:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 800e3b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e3bc:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 800e3be:	f107 0310 	add.w	r3, r7, #16
 800e3c2:	220c      	movs	r2, #12
 800e3c4:	4619      	mov	r1, r3
 800e3c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e3c8:	f002 fd1e 	bl	8010e08 <pbuf_take>
    hostname = entry->name;
 800e3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ce:	3310      	adds	r3, #16
 800e3d0:	63bb      	str	r3, [r7, #56]	; 0x38
    --hostname;
 800e3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3d4:	3b01      	subs	r3, #1
 800e3d6:	63bb      	str	r3, [r7, #56]	; 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 800e3d8:	230c      	movs	r3, #12
 800e3da:	87bb      	strh	r3, [r7, #60]	; 0x3c
    do {
      ++hostname;
 800e3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3de:	3301      	adds	r3, #1
 800e3e0:	63bb      	str	r3, [r7, #56]	; 0x38
      hostname_part = hostname;
 800e3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3e4:	62bb      	str	r3, [r7, #40]	; 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e3ec:	e007      	b.n	800e3fe <dns_send+0xe2>
        ++n;
 800e3ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e3f2:	3301      	adds	r3, #1
 800e3f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800e3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3fa:	3301      	adds	r3, #1
 800e3fc:	63bb      	str	r3, [r7, #56]	; 0x38
 800e3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e400:	781b      	ldrb	r3, [r3, #0]
 800e402:	2b2e      	cmp	r3, #46	; 0x2e
 800e404:	d003      	beq.n	800e40e <dns_send+0xf2>
 800e406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e408:	781b      	ldrb	r3, [r3, #0]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d1ef      	bne.n	800e3ee <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 800e40e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e412:	1ad3      	subs	r3, r2, r3
 800e414:	84fb      	strh	r3, [r7, #38]	; 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 800e416:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800e418:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e41c:	4413      	add	r3, r2
 800e41e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e422:	4293      	cmp	r3, r2
 800e424:	dc53      	bgt.n	800e4ce <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 800e426:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e42a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e42c:	4619      	mov	r1, r3
 800e42e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e430:	f002 fe3a 	bl	80110a8 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 800e434:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e436:	3301      	adds	r3, #1
 800e438:	b29b      	uxth	r3, r3
 800e43a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e43c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e43e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e440:	f002 fd74 	bl	8010f2c <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 800e444:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e448:	b29a      	uxth	r2, r3
 800e44a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e44c:	4413      	add	r3, r2
 800e44e:	b29b      	uxth	r3, r3
 800e450:	3301      	adds	r3, #1
 800e452:	87bb      	strh	r3, [r7, #60]	; 0x3c
    } while (*hostname != 0);
 800e454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e456:	781b      	ldrb	r3, [r3, #0]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d1bf      	bne.n	800e3dc <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 800e45c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e45e:	2200      	movs	r2, #0
 800e460:	4619      	mov	r1, r3
 800e462:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e464:	f002 fe20 	bl	80110a8 <pbuf_put_at>
    query_idx++;
 800e468:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e46a:	3301      	adds	r3, #1
 800e46c:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 800e46e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e472:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 800e474:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e478:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 800e47a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e47c:	f107 010c 	add.w	r1, r7, #12
 800e480:	2204      	movs	r2, #4
 800e482:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e484:	f002 fd52 	bl	8010f2c <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 800e488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e48a:	7bdb      	ldrb	r3, [r3, #15]
 800e48c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 800e490:	2335      	movs	r3, #53	; 0x35
 800e492:	847b      	strh	r3, [r7, #34]	; 0x22
      dst = &dns_servers[entry->server_idx];
 800e494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e496:	7adb      	ldrb	r3, [r3, #11]
 800e498:	009b      	lsls	r3, r3, #2
 800e49a:	4a16      	ldr	r2, [pc, #88]	; (800e4f4 <dns_send+0x1d8>)
 800e49c:	4413      	add	r3, r2
 800e49e:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 800e4a0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e4a4:	4a14      	ldr	r2, [pc, #80]	; (800e4f8 <dns_send+0x1dc>)
 800e4a6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e4aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e4ac:	69fa      	ldr	r2, [r7, #28]
 800e4ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e4b0:	f009 f9e2 	bl	8017878 <udp_sendto>
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* free pbuf */
    pbuf_free(p);
 800e4ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e4bc:	f002 f9f0 	bl	80108a0 <pbuf_free>
 800e4c0:	e002      	b.n	800e4c8 <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 800e4c2:	23ff      	movs	r3, #255	; 0xff
 800e4c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return err;
 800e4c8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e4cc:	e005      	b.n	800e4da <dns_send+0x1be>
        goto overflow_return;
 800e4ce:	bf00      	nop
overflow_return:
  pbuf_free(p);
 800e4d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e4d2:	f002 f9e5 	bl	80108a0 <pbuf_free>
  return ERR_VAL;
 800e4d6:	f06f 0305 	mvn.w	r3, #5
}
 800e4da:	4618      	mov	r0, r3
 800e4dc:	3740      	adds	r7, #64	; 0x40
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	bd80      	pop	{r7, pc}
 800e4e2:	bf00      	nop
 800e4e4:	2000be6c 	.word	0x2000be6c
 800e4e8:	08026358 	.word	0x08026358
 800e4ec:	08026388 	.word	0x08026388
 800e4f0:	080263a0 	.word	0x080263a0
 800e4f4:	2000c2dc 	.word	0x2000c2dc
 800e4f8:	2000be58 	.word	0x2000be58

0800e4fc <dns_alloc_random_port>:

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
static struct udp_pcb *
dns_alloc_random_port(void)
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b084      	sub	sp, #16
 800e500:	af00      	add	r7, sp, #0
  err_t err;
  struct udp_pcb *pcb;

  pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 800e502:	202e      	movs	r0, #46	; 0x2e
 800e504:	f009 fd66 	bl	8017fd4 <udp_new_ip_type>
 800e508:	60b8      	str	r0, [r7, #8]
  if (pcb == NULL) {
 800e50a:	68bb      	ldr	r3, [r7, #8]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d101      	bne.n	800e514 <dns_alloc_random_port+0x18>
    /* out of memory, have to reuse an existing pcb */
    return NULL;
 800e510:	2300      	movs	r3, #0
 800e512:	e026      	b.n	800e562 <dns_alloc_random_port+0x66>
  }
  do {
    u16_t port = (u16_t)DNS_RAND_TXID();
 800e514:	f015 fc20 	bl	8023d58 <rand>
 800e518:	4603      	mov	r3, r0
 800e51a:	80fb      	strh	r3, [r7, #6]
    if (DNS_PORT_ALLOWED(port)) {
 800e51c:	88fb      	ldrh	r3, [r7, #6]
 800e51e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e522:	d308      	bcc.n	800e536 <dns_alloc_random_port+0x3a>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 800e524:	88fb      	ldrh	r3, [r7, #6]
 800e526:	461a      	mov	r2, r3
 800e528:	4910      	ldr	r1, [pc, #64]	; (800e56c <dns_alloc_random_port+0x70>)
 800e52a:	68b8      	ldr	r0, [r7, #8]
 800e52c:	f009 fb9e 	bl	8017c6c <udp_bind>
 800e530:	4603      	mov	r3, r0
 800e532:	73fb      	strb	r3, [r7, #15]
 800e534:	e001      	b.n	800e53a <dns_alloc_random_port+0x3e>
    } else {
      /* this port is not allowed, try again */
      err = ERR_USE;
 800e536:	23f8      	movs	r3, #248	; 0xf8
 800e538:	73fb      	strb	r3, [r7, #15]
    }
  } while (err == ERR_USE);
 800e53a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e53e:	f113 0f08 	cmn.w	r3, #8
 800e542:	d0e7      	beq.n	800e514 <dns_alloc_random_port+0x18>
  if (err != ERR_OK) {
 800e544:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d004      	beq.n	800e556 <dns_alloc_random_port+0x5a>
    udp_remove(pcb);
 800e54c:	68b8      	ldr	r0, [r7, #8]
 800e54e:	f009 fce5 	bl	8017f1c <udp_remove>
    return NULL;
 800e552:	2300      	movs	r3, #0
 800e554:	e005      	b.n	800e562 <dns_alloc_random_port+0x66>
  }
  udp_recv(pcb, dns_recv, NULL);
 800e556:	2200      	movs	r2, #0
 800e558:	4905      	ldr	r1, [pc, #20]	; (800e570 <dns_alloc_random_port+0x74>)
 800e55a:	68b8      	ldr	r0, [r7, #8]
 800e55c:	f009 fcbe 	bl	8017edc <udp_recv>
  return pcb;
 800e560:	68bb      	ldr	r3, [r7, #8]
}
 800e562:	4618      	mov	r0, r3
 800e564:	3710      	adds	r7, #16
 800e566:	46bd      	mov	sp, r7
 800e568:	bd80      	pop	{r7, pc}
 800e56a:	bf00      	nop
 800e56c:	08029344 	.word	0x08029344
 800e570:	0800ea1d 	.word	0x0800ea1d

0800e574 <dns_alloc_pcb>:
 *
 * @return an index into dns_pcbs
 */
static u8_t
dns_alloc_pcb(void)
{
 800e574:	b590      	push	{r4, r7, lr}
 800e576:	b083      	sub	sp, #12
 800e578:	af00      	add	r7, sp, #0
  u8_t i;
  u8_t idx;

  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 800e57a:	2300      	movs	r3, #0
 800e57c:	71fb      	strb	r3, [r7, #7]
 800e57e:	e008      	b.n	800e592 <dns_alloc_pcb+0x1e>
    if (dns_pcbs[i] == NULL) {
 800e580:	79fb      	ldrb	r3, [r7, #7]
 800e582:	4a23      	ldr	r2, [pc, #140]	; (800e610 <dns_alloc_pcb+0x9c>)
 800e584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d006      	beq.n	800e59a <dns_alloc_pcb+0x26>
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 800e58c:	79fb      	ldrb	r3, [r7, #7]
 800e58e:	3301      	adds	r3, #1
 800e590:	71fb      	strb	r3, [r7, #7]
 800e592:	79fb      	ldrb	r3, [r7, #7]
 800e594:	2b03      	cmp	r3, #3
 800e596:	d9f3      	bls.n	800e580 <dns_alloc_pcb+0xc>
 800e598:	e000      	b.n	800e59c <dns_alloc_pcb+0x28>
      break;
 800e59a:	bf00      	nop
    }
  }
  if (i < DNS_MAX_SOURCE_PORTS) {
 800e59c:	79fb      	ldrb	r3, [r7, #7]
 800e59e:	2b03      	cmp	r3, #3
 800e5a0:	d811      	bhi.n	800e5c6 <dns_alloc_pcb+0x52>
    dns_pcbs[i] = dns_alloc_random_port();
 800e5a2:	79fc      	ldrb	r4, [r7, #7]
 800e5a4:	f7ff ffaa 	bl	800e4fc <dns_alloc_random_port>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	4a19      	ldr	r2, [pc, #100]	; (800e610 <dns_alloc_pcb+0x9c>)
 800e5ac:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    if (dns_pcbs[i] != NULL) {
 800e5b0:	79fb      	ldrb	r3, [r7, #7]
 800e5b2:	4a17      	ldr	r2, [pc, #92]	; (800e610 <dns_alloc_pcb+0x9c>)
 800e5b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d004      	beq.n	800e5c6 <dns_alloc_pcb+0x52>
      /* succeeded */
      dns_last_pcb_idx = i;
 800e5bc:	4a15      	ldr	r2, [pc, #84]	; (800e614 <dns_alloc_pcb+0xa0>)
 800e5be:	79fb      	ldrb	r3, [r7, #7]
 800e5c0:	7013      	strb	r3, [r2, #0]
      return i;
 800e5c2:	79fb      	ldrb	r3, [r7, #7]
 800e5c4:	e020      	b.n	800e608 <dns_alloc_pcb+0x94>
    }
  }
  /* if we come here, creating a new UDP pcb failed, so we have to use
     an already existing one (so overflow is no issue) */
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	71fb      	strb	r3, [r7, #7]
 800e5ca:	4b12      	ldr	r3, [pc, #72]	; (800e614 <dns_alloc_pcb+0xa0>)
 800e5cc:	781b      	ldrb	r3, [r3, #0]
 800e5ce:	3301      	adds	r3, #1
 800e5d0:	71bb      	strb	r3, [r7, #6]
 800e5d2:	e015      	b.n	800e600 <dns_alloc_pcb+0x8c>
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 800e5d4:	79bb      	ldrb	r3, [r7, #6]
 800e5d6:	2b03      	cmp	r3, #3
 800e5d8:	d901      	bls.n	800e5de <dns_alloc_pcb+0x6a>
      idx = 0;
 800e5da:	2300      	movs	r3, #0
 800e5dc:	71bb      	strb	r3, [r7, #6]
    }
    if (dns_pcbs[idx] != NULL) {
 800e5de:	79bb      	ldrb	r3, [r7, #6]
 800e5e0:	4a0b      	ldr	r2, [pc, #44]	; (800e610 <dns_alloc_pcb+0x9c>)
 800e5e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d004      	beq.n	800e5f4 <dns_alloc_pcb+0x80>
      dns_last_pcb_idx = idx;
 800e5ea:	4a0a      	ldr	r2, [pc, #40]	; (800e614 <dns_alloc_pcb+0xa0>)
 800e5ec:	79bb      	ldrb	r3, [r7, #6]
 800e5ee:	7013      	strb	r3, [r2, #0]
      return idx;
 800e5f0:	79bb      	ldrb	r3, [r7, #6]
 800e5f2:	e009      	b.n	800e608 <dns_alloc_pcb+0x94>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 800e5f4:	79fb      	ldrb	r3, [r7, #7]
 800e5f6:	3301      	adds	r3, #1
 800e5f8:	71fb      	strb	r3, [r7, #7]
 800e5fa:	79bb      	ldrb	r3, [r7, #6]
 800e5fc:	3301      	adds	r3, #1
 800e5fe:	71bb      	strb	r3, [r7, #6]
 800e600:	79fb      	ldrb	r3, [r7, #7]
 800e602:	2b03      	cmp	r3, #3
 800e604:	d9e6      	bls.n	800e5d4 <dns_alloc_pcb+0x60>
    }
  }
  return DNS_MAX_SOURCE_PORTS;
 800e606:	2304      	movs	r3, #4
}
 800e608:	4618      	mov	r0, r3
 800e60a:	370c      	adds	r7, #12
 800e60c:	46bd      	mov	sp, r7
 800e60e:	bd90      	pop	{r4, r7, pc}
 800e610:	2000be58 	.word	0x2000be58
 800e614:	2000be68 	.word	0x2000be68

0800e618 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 800e618:	b590      	push	{r4, r7, lr}
 800e61a:	b085      	sub	sp, #20
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	4603      	mov	r3, r0
 800e620:	6039      	str	r1, [r7, #0]
 800e622:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800e624:	2300      	movs	r3, #0
 800e626:	73fb      	strb	r3, [r7, #15]
 800e628:	e03d      	b.n	800e6a6 <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 800e62a:	7bfa      	ldrb	r2, [r7, #15]
 800e62c:	4957      	ldr	r1, [pc, #348]	; (800e78c <dns_call_found+0x174>)
 800e62e:	4613      	mov	r3, r2
 800e630:	005b      	lsls	r3, r3, #1
 800e632:	4413      	add	r3, r2
 800e634:	009b      	lsls	r3, r3, #2
 800e636:	440b      	add	r3, r1
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d030      	beq.n	800e6a0 <dns_call_found+0x88>
 800e63e:	7bfa      	ldrb	r2, [r7, #15]
 800e640:	4952      	ldr	r1, [pc, #328]	; (800e78c <dns_call_found+0x174>)
 800e642:	4613      	mov	r3, r2
 800e644:	005b      	lsls	r3, r3, #1
 800e646:	4413      	add	r3, r2
 800e648:	009b      	lsls	r3, r3, #2
 800e64a:	440b      	add	r3, r1
 800e64c:	3308      	adds	r3, #8
 800e64e:	781b      	ldrb	r3, [r3, #0]
 800e650:	79fa      	ldrb	r2, [r7, #7]
 800e652:	429a      	cmp	r2, r3
 800e654:	d124      	bne.n	800e6a0 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 800e656:	7bfa      	ldrb	r2, [r7, #15]
 800e658:	494c      	ldr	r1, [pc, #304]	; (800e78c <dns_call_found+0x174>)
 800e65a:	4613      	mov	r3, r2
 800e65c:	005b      	lsls	r3, r3, #1
 800e65e:	4413      	add	r3, r2
 800e660:	009b      	lsls	r3, r3, #2
 800e662:	440b      	add	r3, r1
 800e664:	681c      	ldr	r4, [r3, #0]
 800e666:	79fa      	ldrb	r2, [r7, #7]
 800e668:	4613      	mov	r3, r2
 800e66a:	011b      	lsls	r3, r3, #4
 800e66c:	4413      	add	r3, r2
 800e66e:	011b      	lsls	r3, r3, #4
 800e670:	3310      	adds	r3, #16
 800e672:	4a47      	ldr	r2, [pc, #284]	; (800e790 <dns_call_found+0x178>)
 800e674:	1898      	adds	r0, r3, r2
 800e676:	7bfa      	ldrb	r2, [r7, #15]
 800e678:	4944      	ldr	r1, [pc, #272]	; (800e78c <dns_call_found+0x174>)
 800e67a:	4613      	mov	r3, r2
 800e67c:	005b      	lsls	r3, r3, #1
 800e67e:	4413      	add	r3, r2
 800e680:	009b      	lsls	r3, r3, #2
 800e682:	440b      	add	r3, r1
 800e684:	3304      	adds	r3, #4
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	461a      	mov	r2, r3
 800e68a:	6839      	ldr	r1, [r7, #0]
 800e68c:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 800e68e:	7bfa      	ldrb	r2, [r7, #15]
 800e690:	493e      	ldr	r1, [pc, #248]	; (800e78c <dns_call_found+0x174>)
 800e692:	4613      	mov	r3, r2
 800e694:	005b      	lsls	r3, r3, #1
 800e696:	4413      	add	r3, r2
 800e698:	009b      	lsls	r3, r3, #2
 800e69a:	440b      	add	r3, r1
 800e69c:	2200      	movs	r2, #0
 800e69e:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800e6a0:	7bfb      	ldrb	r3, [r7, #15]
 800e6a2:	3301      	adds	r3, #1
 800e6a4:	73fb      	strb	r3, [r7, #15]
 800e6a6:	7bfb      	ldrb	r3, [r7, #15]
 800e6a8:	2b03      	cmp	r3, #3
 800e6aa:	d9be      	bls.n	800e62a <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	73fb      	strb	r3, [r7, #15]
 800e6b0:	e031      	b.n	800e716 <dns_call_found+0xfe>
    if (i == idx) {
 800e6b2:	7bfa      	ldrb	r2, [r7, #15]
 800e6b4:	79fb      	ldrb	r3, [r7, #7]
 800e6b6:	429a      	cmp	r2, r3
 800e6b8:	d029      	beq.n	800e70e <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 800e6ba:	7bfa      	ldrb	r2, [r7, #15]
 800e6bc:	4934      	ldr	r1, [pc, #208]	; (800e790 <dns_call_found+0x178>)
 800e6be:	4613      	mov	r3, r2
 800e6c0:	011b      	lsls	r3, r3, #4
 800e6c2:	4413      	add	r3, r2
 800e6c4:	011b      	lsls	r3, r3, #4
 800e6c6:	440b      	add	r3, r1
 800e6c8:	330a      	adds	r3, #10
 800e6ca:	781b      	ldrb	r3, [r3, #0]
 800e6cc:	2b02      	cmp	r3, #2
 800e6ce:	d11f      	bne.n	800e710 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 800e6d0:	7bfa      	ldrb	r2, [r7, #15]
 800e6d2:	492f      	ldr	r1, [pc, #188]	; (800e790 <dns_call_found+0x178>)
 800e6d4:	4613      	mov	r3, r2
 800e6d6:	011b      	lsls	r3, r3, #4
 800e6d8:	4413      	add	r3, r2
 800e6da:	011b      	lsls	r3, r3, #4
 800e6dc:	440b      	add	r3, r1
 800e6de:	330f      	adds	r3, #15
 800e6e0:	7819      	ldrb	r1, [r3, #0]
 800e6e2:	79fa      	ldrb	r2, [r7, #7]
 800e6e4:	482a      	ldr	r0, [pc, #168]	; (800e790 <dns_call_found+0x178>)
 800e6e6:	4613      	mov	r3, r2
 800e6e8:	011b      	lsls	r3, r3, #4
 800e6ea:	4413      	add	r3, r2
 800e6ec:	011b      	lsls	r3, r3, #4
 800e6ee:	4403      	add	r3, r0
 800e6f0:	330f      	adds	r3, #15
 800e6f2:	781b      	ldrb	r3, [r3, #0]
 800e6f4:	4299      	cmp	r1, r3
 800e6f6:	d10b      	bne.n	800e710 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800e6f8:	79fa      	ldrb	r2, [r7, #7]
 800e6fa:	4925      	ldr	r1, [pc, #148]	; (800e790 <dns_call_found+0x178>)
 800e6fc:	4613      	mov	r3, r2
 800e6fe:	011b      	lsls	r3, r3, #4
 800e700:	4413      	add	r3, r2
 800e702:	011b      	lsls	r3, r3, #4
 800e704:	440b      	add	r3, r1
 800e706:	330f      	adds	r3, #15
 800e708:	2204      	movs	r2, #4
 800e70a:	701a      	strb	r2, [r3, #0]
        break;
 800e70c:	e006      	b.n	800e71c <dns_call_found+0x104>
      continue; /* only check other requests */
 800e70e:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800e710:	7bfb      	ldrb	r3, [r7, #15]
 800e712:	3301      	adds	r3, #1
 800e714:	73fb      	strb	r3, [r7, #15]
 800e716:	7bfb      	ldrb	r3, [r7, #15]
 800e718:	2b03      	cmp	r3, #3
 800e71a:	d9ca      	bls.n	800e6b2 <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 800e71c:	79fa      	ldrb	r2, [r7, #7]
 800e71e:	491c      	ldr	r1, [pc, #112]	; (800e790 <dns_call_found+0x178>)
 800e720:	4613      	mov	r3, r2
 800e722:	011b      	lsls	r3, r3, #4
 800e724:	4413      	add	r3, r2
 800e726:	011b      	lsls	r3, r3, #4
 800e728:	440b      	add	r3, r1
 800e72a:	330f      	adds	r3, #15
 800e72c:	781b      	ldrb	r3, [r3, #0]
 800e72e:	2b03      	cmp	r3, #3
 800e730:	d827      	bhi.n	800e782 <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 800e732:	79fa      	ldrb	r2, [r7, #7]
 800e734:	4916      	ldr	r1, [pc, #88]	; (800e790 <dns_call_found+0x178>)
 800e736:	4613      	mov	r3, r2
 800e738:	011b      	lsls	r3, r3, #4
 800e73a:	4413      	add	r3, r2
 800e73c:	011b      	lsls	r3, r3, #4
 800e73e:	440b      	add	r3, r1
 800e740:	330f      	adds	r3, #15
 800e742:	781b      	ldrb	r3, [r3, #0]
 800e744:	461a      	mov	r2, r3
 800e746:	4b13      	ldr	r3, [pc, #76]	; (800e794 <dns_call_found+0x17c>)
 800e748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e74c:	4618      	mov	r0, r3
 800e74e:	f009 fbe5 	bl	8017f1c <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 800e752:	79fa      	ldrb	r2, [r7, #7]
 800e754:	490e      	ldr	r1, [pc, #56]	; (800e790 <dns_call_found+0x178>)
 800e756:	4613      	mov	r3, r2
 800e758:	011b      	lsls	r3, r3, #4
 800e75a:	4413      	add	r3, r2
 800e75c:	011b      	lsls	r3, r3, #4
 800e75e:	440b      	add	r3, r1
 800e760:	330f      	adds	r3, #15
 800e762:	781b      	ldrb	r3, [r3, #0]
 800e764:	4619      	mov	r1, r3
 800e766:	4b0b      	ldr	r3, [pc, #44]	; (800e794 <dns_call_found+0x17c>)
 800e768:	2200      	movs	r2, #0
 800e76a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800e76e:	79fa      	ldrb	r2, [r7, #7]
 800e770:	4907      	ldr	r1, [pc, #28]	; (800e790 <dns_call_found+0x178>)
 800e772:	4613      	mov	r3, r2
 800e774:	011b      	lsls	r3, r3, #4
 800e776:	4413      	add	r3, r2
 800e778:	011b      	lsls	r3, r3, #4
 800e77a:	440b      	add	r3, r1
 800e77c:	330f      	adds	r3, #15
 800e77e:	2204      	movs	r2, #4
 800e780:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 800e782:	bf00      	nop
 800e784:	3714      	adds	r7, #20
 800e786:	46bd      	mov	sp, r7
 800e788:	bd90      	pop	{r4, r7, pc}
 800e78a:	bf00      	nop
 800e78c:	2000c2ac 	.word	0x2000c2ac
 800e790:	2000be6c 	.word	0x2000be6c
 800e794:	2000be58 	.word	0x2000be58

0800e798 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b082      	sub	sp, #8
 800e79c:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 800e79e:	f015 fadb 	bl	8023d58 <rand>
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	71fb      	strb	r3, [r7, #7]
 800e7aa:	e01a      	b.n	800e7e2 <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800e7ac:	79fa      	ldrb	r2, [r7, #7]
 800e7ae:	4911      	ldr	r1, [pc, #68]	; (800e7f4 <dns_create_txid+0x5c>)
 800e7b0:	4613      	mov	r3, r2
 800e7b2:	011b      	lsls	r3, r3, #4
 800e7b4:	4413      	add	r3, r2
 800e7b6:	011b      	lsls	r3, r3, #4
 800e7b8:	440b      	add	r3, r1
 800e7ba:	330a      	adds	r3, #10
 800e7bc:	781b      	ldrb	r3, [r3, #0]
 800e7be:	2b02      	cmp	r3, #2
 800e7c0:	d10c      	bne.n	800e7dc <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 800e7c2:	79fa      	ldrb	r2, [r7, #7]
 800e7c4:	490b      	ldr	r1, [pc, #44]	; (800e7f4 <dns_create_txid+0x5c>)
 800e7c6:	4613      	mov	r3, r2
 800e7c8:	011b      	lsls	r3, r3, #4
 800e7ca:	4413      	add	r3, r2
 800e7cc:	011b      	lsls	r3, r3, #4
 800e7ce:	440b      	add	r3, r1
 800e7d0:	3308      	adds	r3, #8
 800e7d2:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800e7d4:	88ba      	ldrh	r2, [r7, #4]
 800e7d6:	429a      	cmp	r2, r3
 800e7d8:	d100      	bne.n	800e7dc <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 800e7da:	e7e0      	b.n	800e79e <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800e7dc:	79fb      	ldrb	r3, [r7, #7]
 800e7de:	3301      	adds	r3, #1
 800e7e0:	71fb      	strb	r3, [r7, #7]
 800e7e2:	79fb      	ldrb	r3, [r7, #7]
 800e7e4:	2b03      	cmp	r3, #3
 800e7e6:	d9e1      	bls.n	800e7ac <dns_create_txid+0x14>
    }
  }

  return txid;
 800e7e8:	88bb      	ldrh	r3, [r7, #4]
}
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	3708      	adds	r7, #8
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}
 800e7f2:	bf00      	nop
 800e7f4:	2000be6c 	.word	0x2000be6c

0800e7f8 <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 800e7f8:	b480      	push	{r7}
 800e7fa:	b085      	sub	sp, #20
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 800e800:	2300      	movs	r3, #0
 800e802:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d00d      	beq.n	800e826 <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	7adb      	ldrb	r3, [r3, #11]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d109      	bne.n	800e826 <dns_backupserver_available+0x2e>
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	7adb      	ldrb	r3, [r3, #11]
 800e816:	3301      	adds	r3, #1
 800e818:	4a06      	ldr	r2, [pc, #24]	; (800e834 <dns_backupserver_available+0x3c>)
 800e81a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d001      	beq.n	800e826 <dns_backupserver_available+0x2e>
      ret = 1;
 800e822:	2301      	movs	r3, #1
 800e824:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800e826:	7bfb      	ldrb	r3, [r7, #15]
}
 800e828:	4618      	mov	r0, r3
 800e82a:	3714      	adds	r7, #20
 800e82c:	46bd      	mov	sp, r7
 800e82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e832:	4770      	bx	lr
 800e834:	2000c2dc 	.word	0x2000c2dc

0800e838 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b084      	sub	sp, #16
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	4603      	mov	r3, r0
 800e840:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 800e842:	79fa      	ldrb	r2, [r7, #7]
 800e844:	4613      	mov	r3, r2
 800e846:	011b      	lsls	r3, r3, #4
 800e848:	4413      	add	r3, r2
 800e84a:	011b      	lsls	r3, r3, #4
 800e84c:	4a48      	ldr	r2, [pc, #288]	; (800e970 <dns_check_entry+0x138>)
 800e84e:	4413      	add	r3, r2
 800e850:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 800e852:	79fb      	ldrb	r3, [r7, #7]
 800e854:	2b03      	cmp	r3, #3
 800e856:	d906      	bls.n	800e866 <dns_check_entry+0x2e>
 800e858:	4b46      	ldr	r3, [pc, #280]	; (800e974 <dns_check_entry+0x13c>)
 800e85a:	f240 421c 	movw	r2, #1052	; 0x41c
 800e85e:	4946      	ldr	r1, [pc, #280]	; (800e978 <dns_check_entry+0x140>)
 800e860:	4846      	ldr	r0, [pc, #280]	; (800e97c <dns_check_entry+0x144>)
 800e862:	f015 f9bd 	bl	8023be0 <iprintf>

  switch (entry->state) {
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	7a9b      	ldrb	r3, [r3, #10]
 800e86a:	2b03      	cmp	r3, #3
 800e86c:	d86f      	bhi.n	800e94e <dns_check_entry+0x116>
 800e86e:	a201      	add	r2, pc, #4	; (adr r2, 800e874 <dns_check_entry+0x3c>)
 800e870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e874:	0800e95f 	.word	0x0800e95f
 800e878:	0800e885 	.word	0x0800e885
 800e87c:	0800e8b7 	.word	0x0800e8b7
 800e880:	0800e92d 	.word	0x0800e92d
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 800e884:	f7ff ff88 	bl	800e798 <dns_create_txid>
 800e888:	4603      	mov	r3, r0
 800e88a:	461a      	mov	r2, r3
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	2202      	movs	r2, #2
 800e894:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	2200      	movs	r2, #0
 800e89a:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	2201      	movs	r2, #1
 800e8a0:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 800e8a8:	79fb      	ldrb	r3, [r7, #7]
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	f7ff fd36 	bl	800e31c <dns_send>
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 800e8b4:	e058      	b.n	800e968 <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	7b1b      	ldrb	r3, [r3, #12]
 800e8ba:	3b01      	subs	r3, #1
 800e8bc:	b2da      	uxtb	r2, r3
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	731a      	strb	r2, [r3, #12]
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	7b1b      	ldrb	r3, [r3, #12]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d14b      	bne.n	800e962 <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	7b5b      	ldrb	r3, [r3, #13]
 800e8ce:	3301      	adds	r3, #1
 800e8d0:	b2da      	uxtb	r2, r3
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	735a      	strb	r2, [r3, #13]
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	7b5b      	ldrb	r3, [r3, #13]
 800e8da:	2b04      	cmp	r3, #4
 800e8dc:	d11b      	bne.n	800e916 <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 800e8de:	68f8      	ldr	r0, [r7, #12]
 800e8e0:	f7ff ff8a 	bl	800e7f8 <dns_backupserver_available>
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d00c      	beq.n	800e904 <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	7adb      	ldrb	r3, [r3, #11]
 800e8ee:	3301      	adds	r3, #1
 800e8f0:	b2da      	uxtb	r2, r3
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	2201      	movs	r2, #1
 800e8fa:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	2200      	movs	r2, #0
 800e900:	735a      	strb	r2, [r3, #13]
 800e902:	e00c      	b.n	800e91e <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 800e904:	79fb      	ldrb	r3, [r7, #7]
 800e906:	2100      	movs	r1, #0
 800e908:	4618      	mov	r0, r3
 800e90a:	f7ff fe85 	bl	800e618 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	2200      	movs	r2, #0
 800e912:	729a      	strb	r2, [r3, #10]
            break;
 800e914:	e028      	b.n	800e968 <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	7b5a      	ldrb	r2, [r3, #13]
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 800e91e:	79fb      	ldrb	r3, [r7, #7]
 800e920:	4618      	mov	r0, r3
 800e922:	f7ff fcfb 	bl	800e31c <dns_send>
 800e926:	4603      	mov	r3, r0
 800e928:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 800e92a:	e01a      	b.n	800e962 <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d008      	beq.n	800e946 <dns_check_entry+0x10e>
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	1e5a      	subs	r2, r3, #1
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	601a      	str	r2, [r3, #0]
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d10f      	bne.n	800e966 <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	2200      	movs	r2, #0
 800e94a:	729a      	strb	r2, [r3, #10]
      }
      break;
 800e94c:	e00b      	b.n	800e966 <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 800e94e:	4b09      	ldr	r3, [pc, #36]	; (800e974 <dns_check_entry+0x13c>)
 800e950:	f240 425b 	movw	r2, #1115	; 0x45b
 800e954:	490a      	ldr	r1, [pc, #40]	; (800e980 <dns_check_entry+0x148>)
 800e956:	4809      	ldr	r0, [pc, #36]	; (800e97c <dns_check_entry+0x144>)
 800e958:	f015 f942 	bl	8023be0 <iprintf>
      break;
 800e95c:	e004      	b.n	800e968 <dns_check_entry+0x130>
      break;
 800e95e:	bf00      	nop
 800e960:	e002      	b.n	800e968 <dns_check_entry+0x130>
      break;
 800e962:	bf00      	nop
 800e964:	e000      	b.n	800e968 <dns_check_entry+0x130>
      break;
 800e966:	bf00      	nop
  }
}
 800e968:	bf00      	nop
 800e96a:	3710      	adds	r7, #16
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bd80      	pop	{r7, pc}
 800e970:	2000be6c 	.word	0x2000be6c
 800e974:	08026358 	.word	0x08026358
 800e978:	080263c8 	.word	0x080263c8
 800e97c:	080263a0 	.word	0x080263a0
 800e980:	080263e4 	.word	0x080263e4

0800e984 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b082      	sub	sp, #8
 800e988:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800e98a:	2300      	movs	r3, #0
 800e98c:	71fb      	strb	r3, [r7, #7]
 800e98e:	e006      	b.n	800e99e <dns_check_entries+0x1a>
    dns_check_entry(i);
 800e990:	79fb      	ldrb	r3, [r7, #7]
 800e992:	4618      	mov	r0, r3
 800e994:	f7ff ff50 	bl	800e838 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800e998:	79fb      	ldrb	r3, [r7, #7]
 800e99a:	3301      	adds	r3, #1
 800e99c:	71fb      	strb	r3, [r7, #7]
 800e99e:	79fb      	ldrb	r3, [r7, #7]
 800e9a0:	2b03      	cmp	r3, #3
 800e9a2:	d9f5      	bls.n	800e990 <dns_check_entries+0xc>
  }
}
 800e9a4:	bf00      	nop
 800e9a6:	bf00      	nop
 800e9a8:	3708      	adds	r7, #8
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bd80      	pop	{r7, pc}
	...

0800e9b0 <dns_correct_response>:
/**
 * Save TTL and call dns_call_found for correct response.
 */
static void
dns_correct_response(u8_t idx, u32_t ttl)
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b084      	sub	sp, #16
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	6039      	str	r1, [r7, #0]
 800e9ba:	71fb      	strb	r3, [r7, #7]
  struct dns_table_entry *entry = &dns_table[idx];
 800e9bc:	79fa      	ldrb	r2, [r7, #7]
 800e9be:	4613      	mov	r3, r2
 800e9c0:	011b      	lsls	r3, r3, #4
 800e9c2:	4413      	add	r3, r2
 800e9c4:	011b      	lsls	r3, r3, #4
 800e9c6:	4a13      	ldr	r2, [pc, #76]	; (800ea14 <dns_correct_response+0x64>)
 800e9c8:	4413      	add	r3, r2
 800e9ca:	60fb      	str	r3, [r7, #12]

  entry->state = DNS_STATE_DONE;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	2203      	movs	r2, #3
 800e9d0:	729a      	strb	r2, [r3, #10]
  LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response = ", entry->name));
  ip_addr_debug_print_val(DNS_DEBUG, entry->ipaddr);
  LWIP_DEBUGF(DNS_DEBUG, ("\n"));

  /* read the answer resource record's TTL, and maximize it if needed */
  entry->ttl = ttl;
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	683a      	ldr	r2, [r7, #0]
 800e9d6:	601a      	str	r2, [r3, #0]
  if (entry->ttl > DNS_MAX_TTL) {
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	4a0e      	ldr	r2, [pc, #56]	; (800ea18 <dns_correct_response+0x68>)
 800e9de:	4293      	cmp	r3, r2
 800e9e0:	d902      	bls.n	800e9e8 <dns_correct_response+0x38>
    entry->ttl = DNS_MAX_TTL;
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	4a0c      	ldr	r2, [pc, #48]	; (800ea18 <dns_correct_response+0x68>)
 800e9e6:	601a      	str	r2, [r3, #0]
  }
  dns_call_found(idx, &entry->ipaddr);
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	1d1a      	adds	r2, r3, #4
 800e9ec:	79fb      	ldrb	r3, [r7, #7]
 800e9ee:	4611      	mov	r1, r2
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	f7ff fe11 	bl	800e618 <dns_call_found>

  if (entry->ttl == 0) {
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d106      	bne.n	800ea0c <dns_correct_response+0x5c>
    /* RFC 883, page 29: "Zero values are
       interpreted to mean that the RR can only be used for the
       transaction in progress, and should not be cached."
       -> flush this entry now */
    /* entry reused during callback? */
    if (entry->state == DNS_STATE_DONE) {
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	7a9b      	ldrb	r3, [r3, #10]
 800ea02:	2b03      	cmp	r3, #3
 800ea04:	d102      	bne.n	800ea0c <dns_correct_response+0x5c>
      entry->state = DNS_STATE_UNUSED;
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	2200      	movs	r2, #0
 800ea0a:	729a      	strb	r2, [r3, #10]
    }
  }
}
 800ea0c:	bf00      	nop
 800ea0e:	3710      	adds	r7, #16
 800ea10:	46bd      	mov	sp, r7
 800ea12:	bd80      	pop	{r7, pc}
 800ea14:	2000be6c 	.word	0x2000be6c
 800ea18:	00093a80 	.word	0x00093a80

0800ea1c <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800ea1c:	b590      	push	{r4, r7, lr}
 800ea1e:	b091      	sub	sp, #68	; 0x44
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	60f8      	str	r0, [r7, #12]
 800ea24:	60b9      	str	r1, [r7, #8]
 800ea26:	607a      	str	r2, [r7, #4]
 800ea28:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	891b      	ldrh	r3, [r3, #8]
 800ea2e:	2b0f      	cmp	r3, #15
 800ea30:	f240 811e 	bls.w	800ec70 <dns_recv+0x254>
    /* free pbuf and return */
    goto ignore_packet;
  }

  /* copy dns payload inside static buffer for processing */
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
 800ea34:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800ea38:	2300      	movs	r3, #0
 800ea3a:	220c      	movs	r2, #12
 800ea3c:	6878      	ldr	r0, [r7, #4]
 800ea3e:	f002 f935 	bl	8010cac <pbuf_copy_partial>
 800ea42:	4603      	mov	r3, r0
 800ea44:	2b0c      	cmp	r3, #12
 800ea46:	f040 8115 	bne.w	800ec74 <dns_recv+0x258>
    /* Match the ID in the DNS header with the name table. */
    txid = lwip_htons(hdr.id);
 800ea4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	f7ff fad1 	bl	800dff4 <lwip_htons>
 800ea52:	4603      	mov	r3, r0
 800ea54:	873b      	strh	r3, [r7, #56]	; 0x38
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800ea56:	2300      	movs	r3, #0
 800ea58:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ea5c:	e102      	b.n	800ec64 <dns_recv+0x248>
      struct dns_table_entry *entry = &dns_table[i];
 800ea5e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800ea62:	4613      	mov	r3, r2
 800ea64:	011b      	lsls	r3, r3, #4
 800ea66:	4413      	add	r3, r2
 800ea68:	011b      	lsls	r3, r3, #4
 800ea6a:	4a92      	ldr	r2, [pc, #584]	; (800ecb4 <dns_recv+0x298>)
 800ea6c:	4413      	add	r3, r2
 800ea6e:	637b      	str	r3, [r7, #52]	; 0x34
      if ((entry->state == DNS_STATE_ASKING) &&
 800ea70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea72:	7a9b      	ldrb	r3, [r3, #10]
 800ea74:	2b02      	cmp	r3, #2
 800ea76:	f040 80f0 	bne.w	800ec5a <dns_recv+0x23e>
          (entry->txid == txid)) {
 800ea7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea7c:	891b      	ldrh	r3, [r3, #8]
      if ((entry->state == DNS_STATE_ASKING) &&
 800ea7e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800ea80:	429a      	cmp	r2, r3
 800ea82:	f040 80ea 	bne.w	800ec5a <dns_recv+0x23e>

        /* We only care about the question(s) and the answers. The authrr
           and the extrarr are simply discarded. */
        nquestions = lwip_htons(hdr.numquestions);
 800ea86:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ea88:	4618      	mov	r0, r3
 800ea8a:	f7ff fab3 	bl	800dff4 <lwip_htons>
 800ea8e:	4603      	mov	r3, r0
 800ea90:	867b      	strh	r3, [r7, #50]	; 0x32
        nanswers   = lwip_htons(hdr.numanswers);
 800ea92:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ea94:	4618      	mov	r0, r3
 800ea96:	f7ff faad 	bl	800dff4 <lwip_htons>
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	877b      	strh	r3, [r7, #58]	; 0x3a

        /* Check for correct response. */
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
 800ea9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eaa2:	b25b      	sxtb	r3, r3
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	f280 80e7 	bge.w	800ec78 <dns_recv+0x25c>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": not a response\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }
        if (nquestions != 1) {
 800eaaa:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800eaac:	2b01      	cmp	r3, #1
 800eaae:	f040 80e5 	bne.w	800ec7c <dns_recv+0x260>
        if (!entry->is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
        {
          /* Check whether response comes from the same network address to which the
             question was sent. (RFC 5452) */
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	681a      	ldr	r2, [r3, #0]
 800eab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eab8:	7adb      	ldrb	r3, [r3, #11]
 800eaba:	4619      	mov	r1, r3
 800eabc:	4b7e      	ldr	r3, [pc, #504]	; (800ecb8 <dns_recv+0x29c>)
 800eabe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800eac2:	429a      	cmp	r2, r3
 800eac4:	f040 80dc 	bne.w	800ec80 <dns_recv+0x264>
          }
        }

        /* Check if the name in the "question" part match with the name in the entry and
           skip it if equal. */
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 800eac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eaca:	3310      	adds	r3, #16
 800eacc:	220c      	movs	r2, #12
 800eace:	6879      	ldr	r1, [r7, #4]
 800ead0:	4618      	mov	r0, r3
 800ead2:	f7ff fb47 	bl	800e164 <dns_compare_name>
 800ead6:	4603      	mov	r3, r0
 800ead8:	87bb      	strh	r3, [r7, #60]	; 0x3c
        if (res_idx == 0xFFFF) {
 800eada:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800eadc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eae0:	4293      	cmp	r3, r2
 800eae2:	f000 80cf 	beq.w	800ec84 <dns_recv+0x268>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }

        /* check if "question" part matches the request */
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
 800eae6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800eae8:	f107 0114 	add.w	r1, r7, #20
 800eaec:	2204      	movs	r2, #4
 800eaee:	6878      	ldr	r0, [r7, #4]
 800eaf0:	f002 f8dc 	bl	8010cac <pbuf_copy_partial>
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	2b04      	cmp	r3, #4
 800eaf8:	f040 80c6 	bne.w	800ec88 <dns_recv+0x26c>
          goto ignore_packet; /* ignore this packet */
        }
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
 800eafc:	8afb      	ldrh	r3, [r7, #22]
 800eafe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eb02:	f040 80c3 	bne.w	800ec8c <dns_recv+0x270>
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
            (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_A)))) {
 800eb06:	8abb      	ldrh	r3, [r7, #20]
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
 800eb08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eb0c:	f040 80be 	bne.w	800ec8c <dns_recv+0x270>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }
        /* skip the rest of the "question" part */
        if (res_idx + SIZEOF_DNS_QUERY > 0xFFFF) {
 800eb10:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800eb12:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 800eb16:	4293      	cmp	r3, r2
 800eb18:	f200 80ba 	bhi.w	800ec90 <dns_recv+0x274>
          goto ignore_packet;
        }
        res_idx = (u16_t)(res_idx + SIZEOF_DNS_QUERY);
 800eb1c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800eb1e:	3304      	adds	r3, #4
 800eb20:	87bb      	strh	r3, [r7, #60]	; 0x3c

        /* Check for error. If so, call callback to inform. */
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 800eb22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb26:	f003 030f 	and.w	r3, r3, #15
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d078      	beq.n	800ec20 <dns_recv+0x204>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in flags\n", entry->name));

          /* if there is another backup DNS server to try
           * then don't stop the DNS request
           */
          if (dns_backupserver_available(entry)) {
 800eb2e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eb30:	f7ff fe62 	bl	800e7f8 <dns_backupserver_available>
 800eb34:	4603      	mov	r3, r0
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d07a      	beq.n	800ec30 <dns_recv+0x214>
            /* avoid retrying the same server */
            entry->retries = DNS_MAX_RETRIES-1;
 800eb3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb3c:	2203      	movs	r2, #3
 800eb3e:	735a      	strb	r2, [r3, #13]
            entry->tmr     = 1;
 800eb40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb42:	2201      	movs	r2, #1
 800eb44:	731a      	strb	r2, [r3, #12]

            /* contact next available server for this entry */
            dns_check_entry(i);
 800eb46:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	f7ff fe74 	bl	800e838 <dns_check_entry>

            goto ignore_packet;
 800eb50:	e0a9      	b.n	800eca6 <dns_recv+0x28a>
          }
        } else {
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
            /* skip answer resource record's host name */
            res_idx = dns_skip_name(p, res_idx);
 800eb52:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800eb54:	4619      	mov	r1, r3
 800eb56:	6878      	ldr	r0, [r7, #4]
 800eb58:	f7ff fb92 	bl	800e280 <dns_skip_name>
 800eb5c:	4603      	mov	r3, r0
 800eb5e:	87bb      	strh	r3, [r7, #60]	; 0x3c
            if (res_idx == 0xFFFF) {
 800eb60:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800eb62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eb66:	4293      	cmp	r3, r2
 800eb68:	f000 8094 	beq.w	800ec94 <dns_recv+0x278>
              goto ignore_packet; /* ignore this packet */
            }

            /* Check for IP address type and Internet class. Others are discarded. */
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
 800eb6c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800eb6e:	f107 0118 	add.w	r1, r7, #24
 800eb72:	220a      	movs	r2, #10
 800eb74:	6878      	ldr	r0, [r7, #4]
 800eb76:	f002 f899 	bl	8010cac <pbuf_copy_partial>
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	2b0a      	cmp	r3, #10
 800eb7e:	f040 808b 	bne.w	800ec98 <dns_recv+0x27c>
              goto ignore_packet; /* ignore this packet */
            }
            if (res_idx + SIZEOF_DNS_ANSWER > 0xFFFF) {
 800eb82:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800eb84:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800eb88:	4293      	cmp	r3, r2
 800eb8a:	f200 8087 	bhi.w	800ec9c <dns_recv+0x280>
              goto ignore_packet;
            }
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 800eb8e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800eb90:	330a      	adds	r3, #10
 800eb92:	87bb      	strh	r3, [r7, #60]	; 0x3c

            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 800eb94:	8b7b      	ldrh	r3, [r7, #26]
 800eb96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eb9a:	d12b      	bne.n	800ebf4 <dns_recv+0x1d8>
#if LWIP_IPV4
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 800eb9c:	8b3b      	ldrh	r3, [r7, #24]
 800eb9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eba2:	d127      	bne.n	800ebf4 <dns_recv+0x1d8>
 800eba4:	8c3b      	ldrh	r3, [r7, #32]
 800eba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ebaa:	d123      	bne.n	800ebf4 <dns_recv+0x1d8>
                if (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
                {
                  ip4_addr_t ip4addr;
                  /* read the IP address after answer resource record's header */
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
 800ebac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ebae:	f107 0110 	add.w	r1, r7, #16
 800ebb2:	2204      	movs	r2, #4
 800ebb4:	6878      	ldr	r0, [r7, #4]
 800ebb6:	f002 f879 	bl	8010cac <pbuf_copy_partial>
 800ebba:	4603      	mov	r3, r0
 800ebbc:	2b04      	cmp	r3, #4
 800ebbe:	d16f      	bne.n	800eca0 <dns_recv+0x284>
                    goto ignore_packet; /* ignore this packet */
                  }
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 800ebc0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800ebc4:	6939      	ldr	r1, [r7, #16]
 800ebc6:	483b      	ldr	r0, [pc, #236]	; (800ecb4 <dns_recv+0x298>)
 800ebc8:	4613      	mov	r3, r2
 800ebca:	011b      	lsls	r3, r3, #4
 800ebcc:	4413      	add	r3, r2
 800ebce:	011b      	lsls	r3, r3, #4
 800ebd0:	4403      	add	r3, r0
 800ebd2:	3304      	adds	r3, #4
 800ebd4:	6019      	str	r1, [r3, #0]
                  pbuf_free(p);
 800ebd6:	6878      	ldr	r0, [r7, #4]
 800ebd8:	f001 fe62 	bl	80108a0 <pbuf_free>
                  /* handle correct response */
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 800ebdc:	69fb      	ldr	r3, [r7, #28]
 800ebde:	4618      	mov	r0, r3
 800ebe0:	f7ff fa1d 	bl	800e01e <lwip_htonl>
 800ebe4:	4602      	mov	r2, r0
 800ebe6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ebea:	4611      	mov	r1, r2
 800ebec:	4618      	mov	r0, r3
 800ebee:	f7ff fedf 	bl	800e9b0 <dns_correct_response>
 800ebf2:	e05c      	b.n	800ecae <dns_recv+0x292>
                }
              }
#endif /* LWIP_IPV6 */
            }
            /* skip this answer */
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
 800ebf4:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 800ebf6:	8c3b      	ldrh	r3, [r7, #32]
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f7ff f9fb 	bl	800dff4 <lwip_htons>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	4423      	add	r3, r4
 800ec02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec06:	da4d      	bge.n	800eca4 <dns_recv+0x288>
              goto ignore_packet; /* ignore this packet */
            }
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 800ec08:	8c3b      	ldrh	r3, [r7, #32]
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f7ff f9f2 	bl	800dff4 <lwip_htons>
 800ec10:	4603      	mov	r3, r0
 800ec12:	461a      	mov	r2, r3
 800ec14:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ec16:	4413      	add	r3, r2
 800ec18:	87bb      	strh	r3, [r7, #60]	; 0x3c
            --nanswers;
 800ec1a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ec1c:	3b01      	subs	r3, #1
 800ec1e:	877b      	strh	r3, [r7, #58]	; 0x3a
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
 800ec20:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d004      	beq.n	800ec30 <dns_recv+0x214>
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	891b      	ldrh	r3, [r3, #8]
 800ec2a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800ec2c:	429a      	cmp	r2, r3
 800ec2e:	d390      	bcc.n	800eb52 <dns_recv+0x136>
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in response\n", entry->name));
        }
        /* call callback to indicate error, clean up memory and return */
        pbuf_free(p);
 800ec30:	6878      	ldr	r0, [r7, #4]
 800ec32:	f001 fe35 	bl	80108a0 <pbuf_free>
        dns_call_found(i, NULL);
 800ec36:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ec3a:	2100      	movs	r1, #0
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	f7ff fceb 	bl	800e618 <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
 800ec42:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800ec46:	491b      	ldr	r1, [pc, #108]	; (800ecb4 <dns_recv+0x298>)
 800ec48:	4613      	mov	r3, r2
 800ec4a:	011b      	lsls	r3, r3, #4
 800ec4c:	4413      	add	r3, r2
 800ec4e:	011b      	lsls	r3, r3, #4
 800ec50:	440b      	add	r3, r1
 800ec52:	330a      	adds	r3, #10
 800ec54:	2200      	movs	r2, #0
 800ec56:	701a      	strb	r2, [r3, #0]
        return;
 800ec58:	e029      	b.n	800ecae <dns_recv+0x292>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800ec5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ec5e:	3301      	adds	r3, #1
 800ec60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ec64:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ec68:	2b03      	cmp	r3, #3
 800ec6a:	f67f aef8 	bls.w	800ea5e <dns_recv+0x42>
      }
    }
  }

ignore_packet:
 800ec6e:	e001      	b.n	800ec74 <dns_recv+0x258>
    goto ignore_packet;
 800ec70:	bf00      	nop
 800ec72:	e018      	b.n	800eca6 <dns_recv+0x28a>
ignore_packet:
 800ec74:	bf00      	nop
 800ec76:	e016      	b.n	800eca6 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 800ec78:	bf00      	nop
 800ec7a:	e014      	b.n	800eca6 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 800ec7c:	bf00      	nop
 800ec7e:	e012      	b.n	800eca6 <dns_recv+0x28a>
            goto ignore_packet; /* ignore this packet */
 800ec80:	bf00      	nop
 800ec82:	e010      	b.n	800eca6 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 800ec84:	bf00      	nop
 800ec86:	e00e      	b.n	800eca6 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 800ec88:	bf00      	nop
 800ec8a:	e00c      	b.n	800eca6 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 800ec8c:	bf00      	nop
 800ec8e:	e00a      	b.n	800eca6 <dns_recv+0x28a>
          goto ignore_packet;
 800ec90:	bf00      	nop
 800ec92:	e008      	b.n	800eca6 <dns_recv+0x28a>
              goto ignore_packet; /* ignore this packet */
 800ec94:	bf00      	nop
 800ec96:	e006      	b.n	800eca6 <dns_recv+0x28a>
              goto ignore_packet; /* ignore this packet */
 800ec98:	bf00      	nop
 800ec9a:	e004      	b.n	800eca6 <dns_recv+0x28a>
              goto ignore_packet;
 800ec9c:	bf00      	nop
 800ec9e:	e002      	b.n	800eca6 <dns_recv+0x28a>
                    goto ignore_packet; /* ignore this packet */
 800eca0:	bf00      	nop
 800eca2:	e000      	b.n	800eca6 <dns_recv+0x28a>
              goto ignore_packet; /* ignore this packet */
 800eca4:	bf00      	nop
  /* deallocate memory and return */
  pbuf_free(p);
 800eca6:	6878      	ldr	r0, [r7, #4]
 800eca8:	f001 fdfa 	bl	80108a0 <pbuf_free>
  return;
 800ecac:	bf00      	nop
}
 800ecae:	3744      	adds	r7, #68	; 0x44
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd90      	pop	{r4, r7, pc}
 800ecb4:	2000be6c 	.word	0x2000be6c
 800ecb8:	2000c2dc 	.word	0x2000c2dc

0800ecbc <dns_enqueue>:
 * @return err_t return code.
 */
static err_t
dns_enqueue(const char *name, size_t hostnamelen, dns_found_callback found,
            void *callback_arg LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype) LWIP_DNS_ISMDNS_ARG(u8_t is_mdns))
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b08a      	sub	sp, #40	; 0x28
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	60f8      	str	r0, [r7, #12]
 800ecc4:	60b9      	str	r1, [r7, #8]
 800ecc6:	607a      	str	r2, [r7, #4]
 800ecc8:	603b      	str	r3, [r7, #0]
  u8_t i;
  u8_t lseq, lseqi;
  struct dns_table_entry *entry = NULL;
 800ecca:	2300      	movs	r3, #0
 800eccc:	623b      	str	r3, [r7, #32]
  struct dns_req_entry *req;

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  u8_t r;
  /* check for duplicate entries */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800ecce:	2300      	movs	r3, #0
 800ecd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ecd4:	e056      	b.n	800ed84 <dns_enqueue+0xc8>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800ecd6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ecda:	4990      	ldr	r1, [pc, #576]	; (800ef1c <dns_enqueue+0x260>)
 800ecdc:	4613      	mov	r3, r2
 800ecde:	011b      	lsls	r3, r3, #4
 800ece0:	4413      	add	r3, r2
 800ece2:	011b      	lsls	r3, r3, #4
 800ece4:	440b      	add	r3, r1
 800ece6:	330a      	adds	r3, #10
 800ece8:	781b      	ldrb	r3, [r3, #0]
 800ecea:	2b02      	cmp	r3, #2
 800ecec:	d145      	bne.n	800ed7a <dns_enqueue+0xbe>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
 800ecee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ecf2:	4613      	mov	r3, r2
 800ecf4:	011b      	lsls	r3, r3, #4
 800ecf6:	4413      	add	r3, r2
 800ecf8:	011b      	lsls	r3, r3, #4
 800ecfa:	3310      	adds	r3, #16
 800ecfc:	4a87      	ldr	r2, [pc, #540]	; (800ef1c <dns_enqueue+0x260>)
 800ecfe:	4413      	add	r3, r2
 800ed00:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ed04:	4619      	mov	r1, r3
 800ed06:	68f8      	ldr	r0, [r7, #12]
 800ed08:	f7ff f9a2 	bl	800e050 <lwip_strnicmp>
 800ed0c:	4603      	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d133      	bne.n	800ed7a <dns_enqueue+0xbe>
           for the same host should not be that common */
        continue;
      }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
      /* this is a duplicate entry, find a free request entry */
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 800ed12:	2300      	movs	r3, #0
 800ed14:	76fb      	strb	r3, [r7, #27]
 800ed16:	e02d      	b.n	800ed74 <dns_enqueue+0xb8>
        if (dns_requests[r].found == 0) {
 800ed18:	7efa      	ldrb	r2, [r7, #27]
 800ed1a:	4981      	ldr	r1, [pc, #516]	; (800ef20 <dns_enqueue+0x264>)
 800ed1c:	4613      	mov	r3, r2
 800ed1e:	005b      	lsls	r3, r3, #1
 800ed20:	4413      	add	r3, r2
 800ed22:	009b      	lsls	r3, r3, #2
 800ed24:	440b      	add	r3, r1
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d120      	bne.n	800ed6e <dns_enqueue+0xb2>
          dns_requests[r].found = found;
 800ed2c:	7efa      	ldrb	r2, [r7, #27]
 800ed2e:	497c      	ldr	r1, [pc, #496]	; (800ef20 <dns_enqueue+0x264>)
 800ed30:	4613      	mov	r3, r2
 800ed32:	005b      	lsls	r3, r3, #1
 800ed34:	4413      	add	r3, r2
 800ed36:	009b      	lsls	r3, r3, #2
 800ed38:	440b      	add	r3, r1
 800ed3a:	687a      	ldr	r2, [r7, #4]
 800ed3c:	601a      	str	r2, [r3, #0]
          dns_requests[r].arg = callback_arg;
 800ed3e:	7efa      	ldrb	r2, [r7, #27]
 800ed40:	4977      	ldr	r1, [pc, #476]	; (800ef20 <dns_enqueue+0x264>)
 800ed42:	4613      	mov	r3, r2
 800ed44:	005b      	lsls	r3, r3, #1
 800ed46:	4413      	add	r3, r2
 800ed48:	009b      	lsls	r3, r3, #2
 800ed4a:	440b      	add	r3, r1
 800ed4c:	3304      	adds	r3, #4
 800ed4e:	683a      	ldr	r2, [r7, #0]
 800ed50:	601a      	str	r2, [r3, #0]
          dns_requests[r].dns_table_idx = i;
 800ed52:	7efa      	ldrb	r2, [r7, #27]
 800ed54:	4972      	ldr	r1, [pc, #456]	; (800ef20 <dns_enqueue+0x264>)
 800ed56:	4613      	mov	r3, r2
 800ed58:	005b      	lsls	r3, r3, #1
 800ed5a:	4413      	add	r3, r2
 800ed5c:	009b      	lsls	r3, r3, #2
 800ed5e:	440b      	add	r3, r1
 800ed60:	3308      	adds	r3, #8
 800ed62:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ed66:	701a      	strb	r2, [r3, #0]
          LWIP_DNS_SET_ADDRTYPE(dns_requests[r].reqaddrtype, dns_addrtype);
          LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": duplicate request\n", name));
          return ERR_INPROGRESS;
 800ed68:	f06f 0304 	mvn.w	r3, #4
 800ed6c:	e0d1      	b.n	800ef12 <dns_enqueue+0x256>
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 800ed6e:	7efb      	ldrb	r3, [r7, #27]
 800ed70:	3301      	adds	r3, #1
 800ed72:	76fb      	strb	r3, [r7, #27]
 800ed74:	7efb      	ldrb	r3, [r7, #27]
 800ed76:	2b03      	cmp	r3, #3
 800ed78:	d9ce      	bls.n	800ed18 <dns_enqueue+0x5c>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800ed7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed7e:	3301      	adds	r3, #1
 800ed80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ed84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed88:	2b03      	cmp	r3, #3
 800ed8a:	d9a4      	bls.n	800ecd6 <dns_enqueue+0x1a>
  }
  /* no duplicate entries found */
#endif

  /* search an unused entry, or the oldest one */
  lseq = 0;
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  lseqi = DNS_TABLE_SIZE;
 800ed92:	2304      	movs	r3, #4
 800ed94:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800ed98:	2300      	movs	r3, #0
 800ed9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ed9e:	e027      	b.n	800edf0 <dns_enqueue+0x134>
    entry = &dns_table[i];
 800eda0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800eda4:	4613      	mov	r3, r2
 800eda6:	011b      	lsls	r3, r3, #4
 800eda8:	4413      	add	r3, r2
 800edaa:	011b      	lsls	r3, r3, #4
 800edac:	4a5b      	ldr	r2, [pc, #364]	; (800ef1c <dns_enqueue+0x260>)
 800edae:	4413      	add	r3, r2
 800edb0:	623b      	str	r3, [r7, #32]
    /* is it an unused entry ? */
    if (entry->state == DNS_STATE_UNUSED) {
 800edb2:	6a3b      	ldr	r3, [r7, #32]
 800edb4:	7a9b      	ldrb	r3, [r3, #10]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d01f      	beq.n	800edfa <dns_enqueue+0x13e>
      break;
    }
    /* check if this is the oldest completed entry */
    if (entry->state == DNS_STATE_DONE) {
 800edba:	6a3b      	ldr	r3, [r7, #32]
 800edbc:	7a9b      	ldrb	r3, [r3, #10]
 800edbe:	2b03      	cmp	r3, #3
 800edc0:	d111      	bne.n	800ede6 <dns_enqueue+0x12a>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 800edc2:	4b58      	ldr	r3, [pc, #352]	; (800ef24 <dns_enqueue+0x268>)
 800edc4:	781a      	ldrb	r2, [r3, #0]
 800edc6:	6a3b      	ldr	r3, [r7, #32]
 800edc8:	7b9b      	ldrb	r3, [r3, #14]
 800edca:	1ad3      	subs	r3, r2, r3
 800edcc:	76bb      	strb	r3, [r7, #26]
      if (age > lseq) {
 800edce:	7eba      	ldrb	r2, [r7, #26]
 800edd0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800edd4:	429a      	cmp	r2, r3
 800edd6:	d906      	bls.n	800ede6 <dns_enqueue+0x12a>
        lseq = age;
 800edd8:	7ebb      	ldrb	r3, [r7, #26]
 800edda:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        lseqi = i;
 800edde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ede2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800ede6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edea:	3301      	adds	r3, #1
 800edec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800edf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edf4:	2b03      	cmp	r3, #3
 800edf6:	d9d3      	bls.n	800eda0 <dns_enqueue+0xe4>
 800edf8:	e000      	b.n	800edfc <dns_enqueue+0x140>
      break;
 800edfa:	bf00      	nop
      }
    }
  }

  /* if we don't have found an unused entry, use the oldest completed one */
  if (i == DNS_TABLE_SIZE) {
 800edfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee00:	2b04      	cmp	r3, #4
 800ee02:	d11f      	bne.n	800ee44 <dns_enqueue+0x188>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
 800ee04:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800ee08:	2b03      	cmp	r3, #3
 800ee0a:	d80b      	bhi.n	800ee24 <dns_enqueue+0x168>
 800ee0c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800ee10:	4942      	ldr	r1, [pc, #264]	; (800ef1c <dns_enqueue+0x260>)
 800ee12:	4613      	mov	r3, r2
 800ee14:	011b      	lsls	r3, r3, #4
 800ee16:	4413      	add	r3, r2
 800ee18:	011b      	lsls	r3, r3, #4
 800ee1a:	440b      	add	r3, r1
 800ee1c:	330a      	adds	r3, #10
 800ee1e:	781b      	ldrb	r3, [r3, #0]
 800ee20:	2b03      	cmp	r3, #3
 800ee22:	d002      	beq.n	800ee2a <dns_enqueue+0x16e>
      /* no entry can be used now, table is full */
      LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS entries table is full\n", name));
      return ERR_MEM;
 800ee24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee28:	e073      	b.n	800ef12 <dns_enqueue+0x256>
    } else {
      /* use the oldest completed one */
      i = lseqi;
 800ee2a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800ee2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      entry = &dns_table[i];
 800ee32:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ee36:	4613      	mov	r3, r2
 800ee38:	011b      	lsls	r3, r3, #4
 800ee3a:	4413      	add	r3, r2
 800ee3c:	011b      	lsls	r3, r3, #4
 800ee3e:	4a37      	ldr	r2, [pc, #220]	; (800ef1c <dns_enqueue+0x260>)
 800ee40:	4413      	add	r3, r2
 800ee42:	623b      	str	r3, [r7, #32]
    }
  }

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  /* find a free request entry */
  req = NULL;
 800ee44:	2300      	movs	r3, #0
 800ee46:	61fb      	str	r3, [r7, #28]
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 800ee48:	2300      	movs	r3, #0
 800ee4a:	76fb      	strb	r3, [r7, #27]
 800ee4c:	e015      	b.n	800ee7a <dns_enqueue+0x1be>
    if (dns_requests[r].found == NULL) {
 800ee4e:	7efa      	ldrb	r2, [r7, #27]
 800ee50:	4933      	ldr	r1, [pc, #204]	; (800ef20 <dns_enqueue+0x264>)
 800ee52:	4613      	mov	r3, r2
 800ee54:	005b      	lsls	r3, r3, #1
 800ee56:	4413      	add	r3, r2
 800ee58:	009b      	lsls	r3, r3, #2
 800ee5a:	440b      	add	r3, r1
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d108      	bne.n	800ee74 <dns_enqueue+0x1b8>
      req = &dns_requests[r];
 800ee62:	7efa      	ldrb	r2, [r7, #27]
 800ee64:	4613      	mov	r3, r2
 800ee66:	005b      	lsls	r3, r3, #1
 800ee68:	4413      	add	r3, r2
 800ee6a:	009b      	lsls	r3, r3, #2
 800ee6c:	4a2c      	ldr	r2, [pc, #176]	; (800ef20 <dns_enqueue+0x264>)
 800ee6e:	4413      	add	r3, r2
 800ee70:	61fb      	str	r3, [r7, #28]
      break;
 800ee72:	e005      	b.n	800ee80 <dns_enqueue+0x1c4>
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 800ee74:	7efb      	ldrb	r3, [r7, #27]
 800ee76:	3301      	adds	r3, #1
 800ee78:	76fb      	strb	r3, [r7, #27]
 800ee7a:	7efb      	ldrb	r3, [r7, #27]
 800ee7c:	2b03      	cmp	r3, #3
 800ee7e:	d9e6      	bls.n	800ee4e <dns_enqueue+0x192>
    }
  }
  if (req == NULL) {
 800ee80:	69fb      	ldr	r3, [r7, #28]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d102      	bne.n	800ee8c <dns_enqueue+0x1d0>
    /* no request entry can be used now, table is full */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS request entries table is full\n", name));
    return ERR_MEM;
 800ee86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee8a:	e042      	b.n	800ef12 <dns_enqueue+0x256>
  }
  req->dns_table_idx = i;
 800ee8c:	69fb      	ldr	r3, [r7, #28]
 800ee8e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ee92:	721a      	strb	r2, [r3, #8]

  /* use this entry */
  LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": use DNS entry %"U16_F"\n", name, (u16_t)(i)));

  /* fill the entry */
  entry->state = DNS_STATE_NEW;
 800ee94:	6a3b      	ldr	r3, [r7, #32]
 800ee96:	2201      	movs	r2, #1
 800ee98:	729a      	strb	r2, [r3, #10]
  entry->seqno = dns_seqno;
 800ee9a:	4b22      	ldr	r3, [pc, #136]	; (800ef24 <dns_enqueue+0x268>)
 800ee9c:	781a      	ldrb	r2, [r3, #0]
 800ee9e:	6a3b      	ldr	r3, [r7, #32]
 800eea0:	739a      	strb	r2, [r3, #14]
  LWIP_DNS_SET_ADDRTYPE(entry->reqaddrtype, dns_addrtype);
  LWIP_DNS_SET_ADDRTYPE(req->reqaddrtype, dns_addrtype);
  req->found = found;
 800eea2:	69fb      	ldr	r3, [r7, #28]
 800eea4:	687a      	ldr	r2, [r7, #4]
 800eea6:	601a      	str	r2, [r3, #0]
  req->arg   = callback_arg;
 800eea8:	69fb      	ldr	r3, [r7, #28]
 800eeaa:	683a      	ldr	r2, [r7, #0]
 800eeac:	605a      	str	r2, [r3, #4]
  namelen = LWIP_MIN(hostnamelen, DNS_MAX_NAME_LENGTH - 1);
 800eeae:	68bb      	ldr	r3, [r7, #8]
 800eeb0:	2bff      	cmp	r3, #255	; 0xff
 800eeb2:	bf28      	it	cs
 800eeb4:	23ff      	movcs	r3, #255	; 0xff
 800eeb6:	617b      	str	r3, [r7, #20]
  MEMCPY(entry->name, name, namelen);
 800eeb8:	6a3b      	ldr	r3, [r7, #32]
 800eeba:	3310      	adds	r3, #16
 800eebc:	697a      	ldr	r2, [r7, #20]
 800eebe:	68f9      	ldr	r1, [r7, #12]
 800eec0:	4618      	mov	r0, r3
 800eec2:	f014 fd67 	bl	8023994 <memcpy>
  entry->name[namelen] = 0;
 800eec6:	6a3a      	ldr	r2, [r7, #32]
 800eec8:	697b      	ldr	r3, [r7, #20]
 800eeca:	4413      	add	r3, r2
 800eecc:	3310      	adds	r3, #16
 800eece:	2200      	movs	r2, #0
 800eed0:	701a      	strb	r2, [r3, #0]

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  entry->pcb_idx = dns_alloc_pcb();
 800eed2:	f7ff fb4f 	bl	800e574 <dns_alloc_pcb>
 800eed6:	4603      	mov	r3, r0
 800eed8:	461a      	mov	r2, r3
 800eeda:	6a3b      	ldr	r3, [r7, #32]
 800eedc:	73da      	strb	r2, [r3, #15]
  if (entry->pcb_idx >= DNS_MAX_SOURCE_PORTS) {
 800eede:	6a3b      	ldr	r3, [r7, #32]
 800eee0:	7bdb      	ldrb	r3, [r3, #15]
 800eee2:	2b03      	cmp	r3, #3
 800eee4:	d908      	bls.n	800eef8 <dns_enqueue+0x23c>
    /* failed to get a UDP pcb */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": failed to allocate a pcb\n", name));
    entry->state = DNS_STATE_UNUSED;
 800eee6:	6a3b      	ldr	r3, [r7, #32]
 800eee8:	2200      	movs	r2, #0
 800eeea:	729a      	strb	r2, [r3, #10]
    req->found = NULL;
 800eeec:	69fb      	ldr	r3, [r7, #28]
 800eeee:	2200      	movs	r2, #0
 800eef0:	601a      	str	r2, [r3, #0]
    return ERR_MEM;
 800eef2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eef6:	e00c      	b.n	800ef12 <dns_enqueue+0x256>

#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  entry->is_mdns = is_mdns;
#endif

  dns_seqno++;
 800eef8:	4b0a      	ldr	r3, [pc, #40]	; (800ef24 <dns_enqueue+0x268>)
 800eefa:	781b      	ldrb	r3, [r3, #0]
 800eefc:	3301      	adds	r3, #1
 800eefe:	b2da      	uxtb	r2, r3
 800ef00:	4b08      	ldr	r3, [pc, #32]	; (800ef24 <dns_enqueue+0x268>)
 800ef02:	701a      	strb	r2, [r3, #0]

  /* force to send query without waiting timer */
  dns_check_entry(i);
 800ef04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef08:	4618      	mov	r0, r3
 800ef0a:	f7ff fc95 	bl	800e838 <dns_check_entry>

  /* dns query is enqueued */
  return ERR_INPROGRESS;
 800ef0e:	f06f 0304 	mvn.w	r3, #4
}
 800ef12:	4618      	mov	r0, r3
 800ef14:	3728      	adds	r7, #40	; 0x28
 800ef16:	46bd      	mov	sp, r7
 800ef18:	bd80      	pop	{r7, pc}
 800ef1a:	bf00      	nop
 800ef1c:	2000be6c 	.word	0x2000be6c
 800ef20:	2000c2ac 	.word	0x2000c2ac
 800ef24:	2000be69 	.word	0x2000be69

0800ef28 <dns_gethostbyname_addrtype>:
 *                     - LWIP_DNS_ADDRTYPE_IPV6: try to resolve IPv6 only
 */
err_t
dns_gethostbyname_addrtype(const char *hostname, ip_addr_t *addr, dns_found_callback found,
                           void *callback_arg, u8_t dns_addrtype)
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b086      	sub	sp, #24
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	60f8      	str	r0, [r7, #12]
 800ef30:	60b9      	str	r1, [r7, #8]
 800ef32:	607a      	str	r2, [r7, #4]
 800ef34:	603b      	str	r3, [r7, #0]
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
 800ef36:	68bb      	ldr	r3, [r7, #8]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d006      	beq.n	800ef4a <dns_gethostbyname_addrtype+0x22>
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d003      	beq.n	800ef4a <dns_gethostbyname_addrtype+0x22>
      (!hostname) || (!hostname[0])) {
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	781b      	ldrb	r3, [r3, #0]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d102      	bne.n	800ef50 <dns_gethostbyname_addrtype+0x28>
    return ERR_ARG;
 800ef4a:	f06f 030f 	mvn.w	r3, #15
 800ef4e:	e029      	b.n	800efa4 <dns_gethostbyname_addrtype+0x7c>
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
 800ef50:	68f8      	ldr	r0, [r7, #12]
 800ef52:	f7f1 f967 	bl	8000224 <strlen>
 800ef56:	6178      	str	r0, [r7, #20]
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 800ef58:	697b      	ldr	r3, [r7, #20]
 800ef5a:	2bff      	cmp	r3, #255	; 0xff
 800ef5c:	d902      	bls.n	800ef64 <dns_gethostbyname_addrtype+0x3c>
    LWIP_DEBUGF(DNS_DEBUG, ("dns_gethostbyname: name too long to resolve"));
    return ERR_ARG;
 800ef5e:	f06f 030f 	mvn.w	r3, #15
 800ef62:	e01f      	b.n	800efa4 <dns_gethostbyname_addrtype+0x7c>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
 800ef64:	68b9      	ldr	r1, [r7, #8]
 800ef66:	68f8      	ldr	r0, [r7, #12]
 800ef68:	f00b f96e 	bl	801a248 <ip4addr_aton>
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d001      	beq.n	800ef76 <dns_gethostbyname_addrtype+0x4e>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
 800ef72:	2300      	movs	r3, #0
 800ef74:	e016      	b.n	800efa4 <dns_gethostbyname_addrtype+0x7c>
    }
  }
  /* already have this address cached? */
  if (dns_lookup(hostname, addr LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)) == ERR_OK) {
 800ef76:	68b9      	ldr	r1, [r7, #8]
 800ef78:	68f8      	ldr	r0, [r7, #12]
 800ef7a:	f7ff f8b1 	bl	800e0e0 <dns_lookup>
 800ef7e:	4603      	mov	r3, r0
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d101      	bne.n	800ef88 <dns_gethostbyname_addrtype+0x60>
    return ERR_OK;
 800ef84:	2300      	movs	r3, #0
 800ef86:	e00d      	b.n	800efa4 <dns_gethostbyname_addrtype+0x7c>

  if (!is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
  {
    /* prevent calling found callback if no server is set, return error instead */
    if (ip_addr_isany_val(dns_servers[0])) {
 800ef88:	4b08      	ldr	r3, [pc, #32]	; (800efac <dns_gethostbyname_addrtype+0x84>)
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d102      	bne.n	800ef96 <dns_gethostbyname_addrtype+0x6e>
      return ERR_VAL;
 800ef90:	f06f 0305 	mvn.w	r3, #5
 800ef94:	e006      	b.n	800efa4 <dns_gethostbyname_addrtype+0x7c>
    }
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	687a      	ldr	r2, [r7, #4]
 800ef9a:	6979      	ldr	r1, [r7, #20]
 800ef9c:	68f8      	ldr	r0, [r7, #12]
 800ef9e:	f7ff fe8d 	bl	800ecbc <dns_enqueue>
 800efa2:	4603      	mov	r3, r0
                     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
 800efa4:	4618      	mov	r0, r3
 800efa6:	3718      	adds	r7, #24
 800efa8:	46bd      	mov	sp, r7
 800efaa:	bd80      	pop	{r7, pc}
 800efac:	2000c2dc 	.word	0x2000c2dc

0800efb0 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800efb0:	b480      	push	{r7}
 800efb2:	b089      	sub	sp, #36	; 0x24
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
 800efb8:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800efbe:	2300      	movs	r3, #0
 800efc0:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800efc2:	2300      	movs	r3, #0
 800efc4:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800efc6:	69fb      	ldr	r3, [r7, #28]
 800efc8:	f003 0301 	and.w	r3, r3, #1
 800efcc:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800efce:	693b      	ldr	r3, [r7, #16]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d00d      	beq.n	800eff0 <lwip_standard_chksum+0x40>
 800efd4:	683b      	ldr	r3, [r7, #0]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	dd0a      	ble.n	800eff0 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800efda:	69fa      	ldr	r2, [r7, #28]
 800efdc:	1c53      	adds	r3, r2, #1
 800efde:	61fb      	str	r3, [r7, #28]
 800efe0:	f107 030e 	add.w	r3, r7, #14
 800efe4:	3301      	adds	r3, #1
 800efe6:	7812      	ldrb	r2, [r2, #0]
 800efe8:	701a      	strb	r2, [r3, #0]
    len--;
 800efea:	683b      	ldr	r3, [r7, #0]
 800efec:	3b01      	subs	r3, #1
 800efee:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800eff0:	69fb      	ldr	r3, [r7, #28]
 800eff2:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800eff4:	e00a      	b.n	800f00c <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800eff6:	69bb      	ldr	r3, [r7, #24]
 800eff8:	1c9a      	adds	r2, r3, #2
 800effa:	61ba      	str	r2, [r7, #24]
 800effc:	881b      	ldrh	r3, [r3, #0]
 800effe:	461a      	mov	r2, r3
 800f000:	697b      	ldr	r3, [r7, #20]
 800f002:	4413      	add	r3, r2
 800f004:	617b      	str	r3, [r7, #20]
    len -= 2;
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	3b02      	subs	r3, #2
 800f00a:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	2b01      	cmp	r3, #1
 800f010:	dcf1      	bgt.n	800eff6 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800f012:	683b      	ldr	r3, [r7, #0]
 800f014:	2b00      	cmp	r3, #0
 800f016:	dd04      	ble.n	800f022 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800f018:	f107 030e 	add.w	r3, r7, #14
 800f01c:	69ba      	ldr	r2, [r7, #24]
 800f01e:	7812      	ldrb	r2, [r2, #0]
 800f020:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800f022:	89fb      	ldrh	r3, [r7, #14]
 800f024:	461a      	mov	r2, r3
 800f026:	697b      	ldr	r3, [r7, #20]
 800f028:	4413      	add	r3, r2
 800f02a:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800f02c:	697b      	ldr	r3, [r7, #20]
 800f02e:	0c1a      	lsrs	r2, r3, #16
 800f030:	697b      	ldr	r3, [r7, #20]
 800f032:	b29b      	uxth	r3, r3
 800f034:	4413      	add	r3, r2
 800f036:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800f038:	697b      	ldr	r3, [r7, #20]
 800f03a:	0c1a      	lsrs	r2, r3, #16
 800f03c:	697b      	ldr	r3, [r7, #20]
 800f03e:	b29b      	uxth	r3, r3
 800f040:	4413      	add	r3, r2
 800f042:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800f044:	693b      	ldr	r3, [r7, #16]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d007      	beq.n	800f05a <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800f04a:	697b      	ldr	r3, [r7, #20]
 800f04c:	021b      	lsls	r3, r3, #8
 800f04e:	b29a      	uxth	r2, r3
 800f050:	697b      	ldr	r3, [r7, #20]
 800f052:	0a1b      	lsrs	r3, r3, #8
 800f054:	b2db      	uxtb	r3, r3
 800f056:	4313      	orrs	r3, r2
 800f058:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800f05a:	697b      	ldr	r3, [r7, #20]
 800f05c:	b29b      	uxth	r3, r3
}
 800f05e:	4618      	mov	r0, r3
 800f060:	3724      	adds	r7, #36	; 0x24
 800f062:	46bd      	mov	sp, r7
 800f064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f068:	4770      	bx	lr

0800f06a <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800f06a:	b580      	push	{r7, lr}
 800f06c:	b082      	sub	sp, #8
 800f06e:	af00      	add	r7, sp, #0
 800f070:	6078      	str	r0, [r7, #4]
 800f072:	460b      	mov	r3, r1
 800f074:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800f076:	887b      	ldrh	r3, [r7, #2]
 800f078:	4619      	mov	r1, r3
 800f07a:	6878      	ldr	r0, [r7, #4]
 800f07c:	f7ff ff98 	bl	800efb0 <lwip_standard_chksum>
 800f080:	4603      	mov	r3, r0
 800f082:	43db      	mvns	r3, r3
 800f084:	b29b      	uxth	r3, r3
}
 800f086:	4618      	mov	r0, r3
 800f088:	3708      	adds	r7, #8
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd80      	pop	{r7, pc}

0800f08e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800f08e:	b580      	push	{r7, lr}
 800f090:	b082      	sub	sp, #8
 800f092:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800f094:	2300      	movs	r3, #0
 800f096:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800f098:	f00c fade 	bl	801b658 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800f09c:	f000 f8d8 	bl	800f250 <mem_init>
  memp_init();
 800f0a0:	f000 fc34 	bl	800f90c <memp_init>
  pbuf_init();
  netif_init();
 800f0a4:	f000 fcfa 	bl	800fa9c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800f0a8:	f008 f9f0 	bl	801748c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800f0ac:	f002 f81e 	bl	80110ec <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
 800f0b0:	f00a f8a8 	bl	8019204 <igmp_init>
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 800f0b4:	f7ff f807 	bl	800e0c6 <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800f0b8:	f008 f92e 	bl	8017318 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800f0bc:	bf00      	nop
 800f0be:	3708      	adds	r7, #8
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}

0800f0c4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800f0c4:	b480      	push	{r7}
 800f0c6:	b083      	sub	sp, #12
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800f0ce:	4b05      	ldr	r3, [pc, #20]	; (800f0e4 <ptr_to_mem+0x20>)
 800f0d0:	681a      	ldr	r2, [r3, #0]
 800f0d2:	88fb      	ldrh	r3, [r7, #6]
 800f0d4:	4413      	add	r3, r2
}
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	370c      	adds	r7, #12
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e0:	4770      	bx	lr
 800f0e2:	bf00      	nop
 800f0e4:	2000c950 	.word	0x2000c950

0800f0e8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800f0e8:	b480      	push	{r7}
 800f0ea:	b083      	sub	sp, #12
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800f0f0:	4b05      	ldr	r3, [pc, #20]	; (800f108 <mem_to_ptr+0x20>)
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	687a      	ldr	r2, [r7, #4]
 800f0f6:	1ad3      	subs	r3, r2, r3
 800f0f8:	b29b      	uxth	r3, r3
}
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	370c      	adds	r7, #12
 800f0fe:	46bd      	mov	sp, r7
 800f100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f104:	4770      	bx	lr
 800f106:	bf00      	nop
 800f108:	2000c950 	.word	0x2000c950

0800f10c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800f10c:	b590      	push	{r4, r7, lr}
 800f10e:	b085      	sub	sp, #20
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800f114:	4b45      	ldr	r3, [pc, #276]	; (800f22c <plug_holes+0x120>)
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	687a      	ldr	r2, [r7, #4]
 800f11a:	429a      	cmp	r2, r3
 800f11c:	d206      	bcs.n	800f12c <plug_holes+0x20>
 800f11e:	4b44      	ldr	r3, [pc, #272]	; (800f230 <plug_holes+0x124>)
 800f120:	f240 12df 	movw	r2, #479	; 0x1df
 800f124:	4943      	ldr	r1, [pc, #268]	; (800f234 <plug_holes+0x128>)
 800f126:	4844      	ldr	r0, [pc, #272]	; (800f238 <plug_holes+0x12c>)
 800f128:	f014 fd5a 	bl	8023be0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800f12c:	4b43      	ldr	r3, [pc, #268]	; (800f23c <plug_holes+0x130>)
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	687a      	ldr	r2, [r7, #4]
 800f132:	429a      	cmp	r2, r3
 800f134:	d306      	bcc.n	800f144 <plug_holes+0x38>
 800f136:	4b3e      	ldr	r3, [pc, #248]	; (800f230 <plug_holes+0x124>)
 800f138:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f13c:	4940      	ldr	r1, [pc, #256]	; (800f240 <plug_holes+0x134>)
 800f13e:	483e      	ldr	r0, [pc, #248]	; (800f238 <plug_holes+0x12c>)
 800f140:	f014 fd4e 	bl	8023be0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	791b      	ldrb	r3, [r3, #4]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d006      	beq.n	800f15a <plug_holes+0x4e>
 800f14c:	4b38      	ldr	r3, [pc, #224]	; (800f230 <plug_holes+0x124>)
 800f14e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800f152:	493c      	ldr	r1, [pc, #240]	; (800f244 <plug_holes+0x138>)
 800f154:	4838      	ldr	r0, [pc, #224]	; (800f238 <plug_holes+0x12c>)
 800f156:	f014 fd43 	bl	8023be0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	881b      	ldrh	r3, [r3, #0]
 800f15e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f162:	d906      	bls.n	800f172 <plug_holes+0x66>
 800f164:	4b32      	ldr	r3, [pc, #200]	; (800f230 <plug_holes+0x124>)
 800f166:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800f16a:	4937      	ldr	r1, [pc, #220]	; (800f248 <plug_holes+0x13c>)
 800f16c:	4832      	ldr	r0, [pc, #200]	; (800f238 <plug_holes+0x12c>)
 800f16e:	f014 fd37 	bl	8023be0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	881b      	ldrh	r3, [r3, #0]
 800f176:	4618      	mov	r0, r3
 800f178:	f7ff ffa4 	bl	800f0c4 <ptr_to_mem>
 800f17c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800f17e:	687a      	ldr	r2, [r7, #4]
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	429a      	cmp	r2, r3
 800f184:	d024      	beq.n	800f1d0 <plug_holes+0xc4>
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	791b      	ldrb	r3, [r3, #4]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d120      	bne.n	800f1d0 <plug_holes+0xc4>
 800f18e:	4b2b      	ldr	r3, [pc, #172]	; (800f23c <plug_holes+0x130>)
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	68fa      	ldr	r2, [r7, #12]
 800f194:	429a      	cmp	r2, r3
 800f196:	d01b      	beq.n	800f1d0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800f198:	4b2c      	ldr	r3, [pc, #176]	; (800f24c <plug_holes+0x140>)
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	68fa      	ldr	r2, [r7, #12]
 800f19e:	429a      	cmp	r2, r3
 800f1a0:	d102      	bne.n	800f1a8 <plug_holes+0x9c>
      lfree = mem;
 800f1a2:	4a2a      	ldr	r2, [pc, #168]	; (800f24c <plug_holes+0x140>)
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	881a      	ldrh	r2, [r3, #0]
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	881b      	ldrh	r3, [r3, #0]
 800f1b4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f1b8:	d00a      	beq.n	800f1d0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	881b      	ldrh	r3, [r3, #0]
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f7ff ff80 	bl	800f0c4 <ptr_to_mem>
 800f1c4:	4604      	mov	r4, r0
 800f1c6:	6878      	ldr	r0, [r7, #4]
 800f1c8:	f7ff ff8e 	bl	800f0e8 <mem_to_ptr>
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	885b      	ldrh	r3, [r3, #2]
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	f7ff ff75 	bl	800f0c4 <ptr_to_mem>
 800f1da:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800f1dc:	68ba      	ldr	r2, [r7, #8]
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	429a      	cmp	r2, r3
 800f1e2:	d01f      	beq.n	800f224 <plug_holes+0x118>
 800f1e4:	68bb      	ldr	r3, [r7, #8]
 800f1e6:	791b      	ldrb	r3, [r3, #4]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d11b      	bne.n	800f224 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800f1ec:	4b17      	ldr	r3, [pc, #92]	; (800f24c <plug_holes+0x140>)
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	687a      	ldr	r2, [r7, #4]
 800f1f2:	429a      	cmp	r2, r3
 800f1f4:	d102      	bne.n	800f1fc <plug_holes+0xf0>
      lfree = pmem;
 800f1f6:	4a15      	ldr	r2, [pc, #84]	; (800f24c <plug_holes+0x140>)
 800f1f8:	68bb      	ldr	r3, [r7, #8]
 800f1fa:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	881a      	ldrh	r2, [r3, #0]
 800f200:	68bb      	ldr	r3, [r7, #8]
 800f202:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	881b      	ldrh	r3, [r3, #0]
 800f208:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f20c:	d00a      	beq.n	800f224 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	881b      	ldrh	r3, [r3, #0]
 800f212:	4618      	mov	r0, r3
 800f214:	f7ff ff56 	bl	800f0c4 <ptr_to_mem>
 800f218:	4604      	mov	r4, r0
 800f21a:	68b8      	ldr	r0, [r7, #8]
 800f21c:	f7ff ff64 	bl	800f0e8 <mem_to_ptr>
 800f220:	4603      	mov	r3, r0
 800f222:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800f224:	bf00      	nop
 800f226:	3714      	adds	r7, #20
 800f228:	46bd      	mov	sp, r7
 800f22a:	bd90      	pop	{r4, r7, pc}
 800f22c:	2000c950 	.word	0x2000c950
 800f230:	08026404 	.word	0x08026404
 800f234:	08026434 	.word	0x08026434
 800f238:	0802644c 	.word	0x0802644c
 800f23c:	2000c954 	.word	0x2000c954
 800f240:	08026474 	.word	0x08026474
 800f244:	08026490 	.word	0x08026490
 800f248:	080264ac 	.word	0x080264ac
 800f24c:	2000c95c 	.word	0x2000c95c

0800f250 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b082      	sub	sp, #8
 800f254:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800f256:	4b1f      	ldr	r3, [pc, #124]	; (800f2d4 <mem_init+0x84>)
 800f258:	3303      	adds	r3, #3
 800f25a:	f023 0303 	bic.w	r3, r3, #3
 800f25e:	461a      	mov	r2, r3
 800f260:	4b1d      	ldr	r3, [pc, #116]	; (800f2d8 <mem_init+0x88>)
 800f262:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800f264:	4b1c      	ldr	r3, [pc, #112]	; (800f2d8 <mem_init+0x88>)
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f270:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	2200      	movs	r2, #0
 800f276:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	2200      	movs	r2, #0
 800f27c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800f27e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800f282:	f7ff ff1f 	bl	800f0c4 <ptr_to_mem>
 800f286:	4603      	mov	r3, r0
 800f288:	4a14      	ldr	r2, [pc, #80]	; (800f2dc <mem_init+0x8c>)
 800f28a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800f28c:	4b13      	ldr	r3, [pc, #76]	; (800f2dc <mem_init+0x8c>)
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	2201      	movs	r2, #1
 800f292:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800f294:	4b11      	ldr	r3, [pc, #68]	; (800f2dc <mem_init+0x8c>)
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f29c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800f29e:	4b0f      	ldr	r3, [pc, #60]	; (800f2dc <mem_init+0x8c>)
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f2a6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800f2a8:	4b0b      	ldr	r3, [pc, #44]	; (800f2d8 <mem_init+0x88>)
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	4a0c      	ldr	r2, [pc, #48]	; (800f2e0 <mem_init+0x90>)
 800f2ae:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800f2b0:	480c      	ldr	r0, [pc, #48]	; (800f2e4 <mem_init+0x94>)
 800f2b2:	f00c f9dd 	bl	801b670 <sys_mutex_new>
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d006      	beq.n	800f2ca <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800f2bc:	4b0a      	ldr	r3, [pc, #40]	; (800f2e8 <mem_init+0x98>)
 800f2be:	f240 221f 	movw	r2, #543	; 0x21f
 800f2c2:	490a      	ldr	r1, [pc, #40]	; (800f2ec <mem_init+0x9c>)
 800f2c4:	480a      	ldr	r0, [pc, #40]	; (800f2f0 <mem_init+0xa0>)
 800f2c6:	f014 fc8b 	bl	8023be0 <iprintf>
  }
}
 800f2ca:	bf00      	nop
 800f2cc:	3708      	adds	r7, #8
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	bd80      	pop	{r7, pc}
 800f2d2:	bf00      	nop
 800f2d4:	2000c2fc 	.word	0x2000c2fc
 800f2d8:	2000c950 	.word	0x2000c950
 800f2dc:	2000c954 	.word	0x2000c954
 800f2e0:	2000c95c 	.word	0x2000c95c
 800f2e4:	2000c958 	.word	0x2000c958
 800f2e8:	08026404 	.word	0x08026404
 800f2ec:	080264d8 	.word	0x080264d8
 800f2f0:	0802644c 	.word	0x0802644c

0800f2f4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b086      	sub	sp, #24
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	f7ff fef3 	bl	800f0e8 <mem_to_ptr>
 800f302:	4603      	mov	r3, r0
 800f304:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	881b      	ldrh	r3, [r3, #0]
 800f30a:	4618      	mov	r0, r3
 800f30c:	f7ff feda 	bl	800f0c4 <ptr_to_mem>
 800f310:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	885b      	ldrh	r3, [r3, #2]
 800f316:	4618      	mov	r0, r3
 800f318:	f7ff fed4 	bl	800f0c4 <ptr_to_mem>
 800f31c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	881b      	ldrh	r3, [r3, #0]
 800f322:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f326:	d818      	bhi.n	800f35a <mem_link_valid+0x66>
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	885b      	ldrh	r3, [r3, #2]
 800f32c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f330:	d813      	bhi.n	800f35a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f336:	8afa      	ldrh	r2, [r7, #22]
 800f338:	429a      	cmp	r2, r3
 800f33a:	d004      	beq.n	800f346 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	881b      	ldrh	r3, [r3, #0]
 800f340:	8afa      	ldrh	r2, [r7, #22]
 800f342:	429a      	cmp	r2, r3
 800f344:	d109      	bne.n	800f35a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f346:	4b08      	ldr	r3, [pc, #32]	; (800f368 <mem_link_valid+0x74>)
 800f348:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f34a:	693a      	ldr	r2, [r7, #16]
 800f34c:	429a      	cmp	r2, r3
 800f34e:	d006      	beq.n	800f35e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f350:	693b      	ldr	r3, [r7, #16]
 800f352:	885b      	ldrh	r3, [r3, #2]
 800f354:	8afa      	ldrh	r2, [r7, #22]
 800f356:	429a      	cmp	r2, r3
 800f358:	d001      	beq.n	800f35e <mem_link_valid+0x6a>
    return 0;
 800f35a:	2300      	movs	r3, #0
 800f35c:	e000      	b.n	800f360 <mem_link_valid+0x6c>
  }
  return 1;
 800f35e:	2301      	movs	r3, #1
}
 800f360:	4618      	mov	r0, r3
 800f362:	3718      	adds	r7, #24
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}
 800f368:	2000c954 	.word	0x2000c954

0800f36c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b088      	sub	sp, #32
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d070      	beq.n	800f45c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	f003 0303 	and.w	r3, r3, #3
 800f380:	2b00      	cmp	r3, #0
 800f382:	d00d      	beq.n	800f3a0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800f384:	4b37      	ldr	r3, [pc, #220]	; (800f464 <mem_free+0xf8>)
 800f386:	f240 2273 	movw	r2, #627	; 0x273
 800f38a:	4937      	ldr	r1, [pc, #220]	; (800f468 <mem_free+0xfc>)
 800f38c:	4837      	ldr	r0, [pc, #220]	; (800f46c <mem_free+0x100>)
 800f38e:	f014 fc27 	bl	8023be0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f392:	f00c f9bf 	bl	801b714 <sys_arch_protect>
 800f396:	60f8      	str	r0, [r7, #12]
 800f398:	68f8      	ldr	r0, [r7, #12]
 800f39a:	f00c f9c9 	bl	801b730 <sys_arch_unprotect>
    return;
 800f39e:	e05e      	b.n	800f45e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	3b08      	subs	r3, #8
 800f3a4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800f3a6:	4b32      	ldr	r3, [pc, #200]	; (800f470 <mem_free+0x104>)
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	69fa      	ldr	r2, [r7, #28]
 800f3ac:	429a      	cmp	r2, r3
 800f3ae:	d306      	bcc.n	800f3be <mem_free+0x52>
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	f103 020c 	add.w	r2, r3, #12
 800f3b6:	4b2f      	ldr	r3, [pc, #188]	; (800f474 <mem_free+0x108>)
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	429a      	cmp	r2, r3
 800f3bc:	d90d      	bls.n	800f3da <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800f3be:	4b29      	ldr	r3, [pc, #164]	; (800f464 <mem_free+0xf8>)
 800f3c0:	f240 227f 	movw	r2, #639	; 0x27f
 800f3c4:	492c      	ldr	r1, [pc, #176]	; (800f478 <mem_free+0x10c>)
 800f3c6:	4829      	ldr	r0, [pc, #164]	; (800f46c <mem_free+0x100>)
 800f3c8:	f014 fc0a 	bl	8023be0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f3cc:	f00c f9a2 	bl	801b714 <sys_arch_protect>
 800f3d0:	6138      	str	r0, [r7, #16]
 800f3d2:	6938      	ldr	r0, [r7, #16]
 800f3d4:	f00c f9ac 	bl	801b730 <sys_arch_unprotect>
    return;
 800f3d8:	e041      	b.n	800f45e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f3da:	4828      	ldr	r0, [pc, #160]	; (800f47c <mem_free+0x110>)
 800f3dc:	f00c f95e 	bl	801b69c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800f3e0:	69fb      	ldr	r3, [r7, #28]
 800f3e2:	791b      	ldrb	r3, [r3, #4]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d110      	bne.n	800f40a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800f3e8:	4b1e      	ldr	r3, [pc, #120]	; (800f464 <mem_free+0xf8>)
 800f3ea:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800f3ee:	4924      	ldr	r1, [pc, #144]	; (800f480 <mem_free+0x114>)
 800f3f0:	481e      	ldr	r0, [pc, #120]	; (800f46c <mem_free+0x100>)
 800f3f2:	f014 fbf5 	bl	8023be0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800f3f6:	4821      	ldr	r0, [pc, #132]	; (800f47c <mem_free+0x110>)
 800f3f8:	f00c f95f 	bl	801b6ba <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f3fc:	f00c f98a 	bl	801b714 <sys_arch_protect>
 800f400:	6178      	str	r0, [r7, #20]
 800f402:	6978      	ldr	r0, [r7, #20]
 800f404:	f00c f994 	bl	801b730 <sys_arch_unprotect>
    return;
 800f408:	e029      	b.n	800f45e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800f40a:	69f8      	ldr	r0, [r7, #28]
 800f40c:	f7ff ff72 	bl	800f2f4 <mem_link_valid>
 800f410:	4603      	mov	r3, r0
 800f412:	2b00      	cmp	r3, #0
 800f414:	d110      	bne.n	800f438 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800f416:	4b13      	ldr	r3, [pc, #76]	; (800f464 <mem_free+0xf8>)
 800f418:	f240 2295 	movw	r2, #661	; 0x295
 800f41c:	4919      	ldr	r1, [pc, #100]	; (800f484 <mem_free+0x118>)
 800f41e:	4813      	ldr	r0, [pc, #76]	; (800f46c <mem_free+0x100>)
 800f420:	f014 fbde 	bl	8023be0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800f424:	4815      	ldr	r0, [pc, #84]	; (800f47c <mem_free+0x110>)
 800f426:	f00c f948 	bl	801b6ba <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f42a:	f00c f973 	bl	801b714 <sys_arch_protect>
 800f42e:	61b8      	str	r0, [r7, #24]
 800f430:	69b8      	ldr	r0, [r7, #24]
 800f432:	f00c f97d 	bl	801b730 <sys_arch_unprotect>
    return;
 800f436:	e012      	b.n	800f45e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800f438:	69fb      	ldr	r3, [r7, #28]
 800f43a:	2200      	movs	r2, #0
 800f43c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800f43e:	4b12      	ldr	r3, [pc, #72]	; (800f488 <mem_free+0x11c>)
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	69fa      	ldr	r2, [r7, #28]
 800f444:	429a      	cmp	r2, r3
 800f446:	d202      	bcs.n	800f44e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800f448:	4a0f      	ldr	r2, [pc, #60]	; (800f488 <mem_free+0x11c>)
 800f44a:	69fb      	ldr	r3, [r7, #28]
 800f44c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800f44e:	69f8      	ldr	r0, [r7, #28]
 800f450:	f7ff fe5c 	bl	800f10c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f454:	4809      	ldr	r0, [pc, #36]	; (800f47c <mem_free+0x110>)
 800f456:	f00c f930 	bl	801b6ba <sys_mutex_unlock>
 800f45a:	e000      	b.n	800f45e <mem_free+0xf2>
    return;
 800f45c:	bf00      	nop
}
 800f45e:	3720      	adds	r7, #32
 800f460:	46bd      	mov	sp, r7
 800f462:	bd80      	pop	{r7, pc}
 800f464:	08026404 	.word	0x08026404
 800f468:	080264f4 	.word	0x080264f4
 800f46c:	0802644c 	.word	0x0802644c
 800f470:	2000c950 	.word	0x2000c950
 800f474:	2000c954 	.word	0x2000c954
 800f478:	08026518 	.word	0x08026518
 800f47c:	2000c958 	.word	0x2000c958
 800f480:	08026534 	.word	0x08026534
 800f484:	0802655c 	.word	0x0802655c
 800f488:	2000c95c 	.word	0x2000c95c

0800f48c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b088      	sub	sp, #32
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
 800f494:	460b      	mov	r3, r1
 800f496:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800f498:	887b      	ldrh	r3, [r7, #2]
 800f49a:	3303      	adds	r3, #3
 800f49c:	b29b      	uxth	r3, r3
 800f49e:	f023 0303 	bic.w	r3, r3, #3
 800f4a2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800f4a4:	8bfb      	ldrh	r3, [r7, #30]
 800f4a6:	2b0b      	cmp	r3, #11
 800f4a8:	d801      	bhi.n	800f4ae <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800f4aa:	230c      	movs	r3, #12
 800f4ac:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800f4ae:	8bfb      	ldrh	r3, [r7, #30]
 800f4b0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f4b4:	d803      	bhi.n	800f4be <mem_trim+0x32>
 800f4b6:	8bfa      	ldrh	r2, [r7, #30]
 800f4b8:	887b      	ldrh	r3, [r7, #2]
 800f4ba:	429a      	cmp	r2, r3
 800f4bc:	d201      	bcs.n	800f4c2 <mem_trim+0x36>
    return NULL;
 800f4be:	2300      	movs	r3, #0
 800f4c0:	e0d8      	b.n	800f674 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800f4c2:	4b6e      	ldr	r3, [pc, #440]	; (800f67c <mem_trim+0x1f0>)
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	687a      	ldr	r2, [r7, #4]
 800f4c8:	429a      	cmp	r2, r3
 800f4ca:	d304      	bcc.n	800f4d6 <mem_trim+0x4a>
 800f4cc:	4b6c      	ldr	r3, [pc, #432]	; (800f680 <mem_trim+0x1f4>)
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	687a      	ldr	r2, [r7, #4]
 800f4d2:	429a      	cmp	r2, r3
 800f4d4:	d306      	bcc.n	800f4e4 <mem_trim+0x58>
 800f4d6:	4b6b      	ldr	r3, [pc, #428]	; (800f684 <mem_trim+0x1f8>)
 800f4d8:	f240 22d1 	movw	r2, #721	; 0x2d1
 800f4dc:	496a      	ldr	r1, [pc, #424]	; (800f688 <mem_trim+0x1fc>)
 800f4de:	486b      	ldr	r0, [pc, #428]	; (800f68c <mem_trim+0x200>)
 800f4e0:	f014 fb7e 	bl	8023be0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f4e4:	4b65      	ldr	r3, [pc, #404]	; (800f67c <mem_trim+0x1f0>)
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	687a      	ldr	r2, [r7, #4]
 800f4ea:	429a      	cmp	r2, r3
 800f4ec:	d304      	bcc.n	800f4f8 <mem_trim+0x6c>
 800f4ee:	4b64      	ldr	r3, [pc, #400]	; (800f680 <mem_trim+0x1f4>)
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	687a      	ldr	r2, [r7, #4]
 800f4f4:	429a      	cmp	r2, r3
 800f4f6:	d307      	bcc.n	800f508 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f4f8:	f00c f90c 	bl	801b714 <sys_arch_protect>
 800f4fc:	60b8      	str	r0, [r7, #8]
 800f4fe:	68b8      	ldr	r0, [r7, #8]
 800f500:	f00c f916 	bl	801b730 <sys_arch_unprotect>
    return rmem;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	e0b5      	b.n	800f674 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	3b08      	subs	r3, #8
 800f50c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800f50e:	69b8      	ldr	r0, [r7, #24]
 800f510:	f7ff fdea 	bl	800f0e8 <mem_to_ptr>
 800f514:	4603      	mov	r3, r0
 800f516:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800f518:	69bb      	ldr	r3, [r7, #24]
 800f51a:	881a      	ldrh	r2, [r3, #0]
 800f51c:	8afb      	ldrh	r3, [r7, #22]
 800f51e:	1ad3      	subs	r3, r2, r3
 800f520:	b29b      	uxth	r3, r3
 800f522:	3b08      	subs	r3, #8
 800f524:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800f526:	8bfa      	ldrh	r2, [r7, #30]
 800f528:	8abb      	ldrh	r3, [r7, #20]
 800f52a:	429a      	cmp	r2, r3
 800f52c:	d906      	bls.n	800f53c <mem_trim+0xb0>
 800f52e:	4b55      	ldr	r3, [pc, #340]	; (800f684 <mem_trim+0x1f8>)
 800f530:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800f534:	4956      	ldr	r1, [pc, #344]	; (800f690 <mem_trim+0x204>)
 800f536:	4855      	ldr	r0, [pc, #340]	; (800f68c <mem_trim+0x200>)
 800f538:	f014 fb52 	bl	8023be0 <iprintf>
  if (newsize > size) {
 800f53c:	8bfa      	ldrh	r2, [r7, #30]
 800f53e:	8abb      	ldrh	r3, [r7, #20]
 800f540:	429a      	cmp	r2, r3
 800f542:	d901      	bls.n	800f548 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800f544:	2300      	movs	r3, #0
 800f546:	e095      	b.n	800f674 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800f548:	8bfa      	ldrh	r2, [r7, #30]
 800f54a:	8abb      	ldrh	r3, [r7, #20]
 800f54c:	429a      	cmp	r2, r3
 800f54e:	d101      	bne.n	800f554 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	e08f      	b.n	800f674 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f554:	484f      	ldr	r0, [pc, #316]	; (800f694 <mem_trim+0x208>)
 800f556:	f00c f8a1 	bl	801b69c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800f55a:	69bb      	ldr	r3, [r7, #24]
 800f55c:	881b      	ldrh	r3, [r3, #0]
 800f55e:	4618      	mov	r0, r3
 800f560:	f7ff fdb0 	bl	800f0c4 <ptr_to_mem>
 800f564:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800f566:	693b      	ldr	r3, [r7, #16]
 800f568:	791b      	ldrb	r3, [r3, #4]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d13f      	bne.n	800f5ee <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f56e:	69bb      	ldr	r3, [r7, #24]
 800f570:	881b      	ldrh	r3, [r3, #0]
 800f572:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f576:	d106      	bne.n	800f586 <mem_trim+0xfa>
 800f578:	4b42      	ldr	r3, [pc, #264]	; (800f684 <mem_trim+0x1f8>)
 800f57a:	f240 22f5 	movw	r2, #757	; 0x2f5
 800f57e:	4946      	ldr	r1, [pc, #280]	; (800f698 <mem_trim+0x20c>)
 800f580:	4842      	ldr	r0, [pc, #264]	; (800f68c <mem_trim+0x200>)
 800f582:	f014 fb2d 	bl	8023be0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800f586:	693b      	ldr	r3, [r7, #16]
 800f588:	881b      	ldrh	r3, [r3, #0]
 800f58a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f58c:	8afa      	ldrh	r2, [r7, #22]
 800f58e:	8bfb      	ldrh	r3, [r7, #30]
 800f590:	4413      	add	r3, r2
 800f592:	b29b      	uxth	r3, r3
 800f594:	3308      	adds	r3, #8
 800f596:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800f598:	4b40      	ldr	r3, [pc, #256]	; (800f69c <mem_trim+0x210>)
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	693a      	ldr	r2, [r7, #16]
 800f59e:	429a      	cmp	r2, r3
 800f5a0:	d106      	bne.n	800f5b0 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800f5a2:	89fb      	ldrh	r3, [r7, #14]
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	f7ff fd8d 	bl	800f0c4 <ptr_to_mem>
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	4a3b      	ldr	r2, [pc, #236]	; (800f69c <mem_trim+0x210>)
 800f5ae:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800f5b0:	89fb      	ldrh	r3, [r7, #14]
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	f7ff fd86 	bl	800f0c4 <ptr_to_mem>
 800f5b8:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800f5ba:	693b      	ldr	r3, [r7, #16]
 800f5bc:	2200      	movs	r2, #0
 800f5be:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800f5c0:	693b      	ldr	r3, [r7, #16]
 800f5c2:	89ba      	ldrh	r2, [r7, #12]
 800f5c4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800f5c6:	693b      	ldr	r3, [r7, #16]
 800f5c8:	8afa      	ldrh	r2, [r7, #22]
 800f5ca:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800f5cc:	69bb      	ldr	r3, [r7, #24]
 800f5ce:	89fa      	ldrh	r2, [r7, #14]
 800f5d0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f5d2:	693b      	ldr	r3, [r7, #16]
 800f5d4:	881b      	ldrh	r3, [r3, #0]
 800f5d6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f5da:	d047      	beq.n	800f66c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f5dc:	693b      	ldr	r3, [r7, #16]
 800f5de:	881b      	ldrh	r3, [r3, #0]
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	f7ff fd6f 	bl	800f0c4 <ptr_to_mem>
 800f5e6:	4602      	mov	r2, r0
 800f5e8:	89fb      	ldrh	r3, [r7, #14]
 800f5ea:	8053      	strh	r3, [r2, #2]
 800f5ec:	e03e      	b.n	800f66c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800f5ee:	8bfb      	ldrh	r3, [r7, #30]
 800f5f0:	f103 0214 	add.w	r2, r3, #20
 800f5f4:	8abb      	ldrh	r3, [r7, #20]
 800f5f6:	429a      	cmp	r2, r3
 800f5f8:	d838      	bhi.n	800f66c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f5fa:	8afa      	ldrh	r2, [r7, #22]
 800f5fc:	8bfb      	ldrh	r3, [r7, #30]
 800f5fe:	4413      	add	r3, r2
 800f600:	b29b      	uxth	r3, r3
 800f602:	3308      	adds	r3, #8
 800f604:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f606:	69bb      	ldr	r3, [r7, #24]
 800f608:	881b      	ldrh	r3, [r3, #0]
 800f60a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f60e:	d106      	bne.n	800f61e <mem_trim+0x192>
 800f610:	4b1c      	ldr	r3, [pc, #112]	; (800f684 <mem_trim+0x1f8>)
 800f612:	f240 3216 	movw	r2, #790	; 0x316
 800f616:	4920      	ldr	r1, [pc, #128]	; (800f698 <mem_trim+0x20c>)
 800f618:	481c      	ldr	r0, [pc, #112]	; (800f68c <mem_trim+0x200>)
 800f61a:	f014 fae1 	bl	8023be0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800f61e:	89fb      	ldrh	r3, [r7, #14]
 800f620:	4618      	mov	r0, r3
 800f622:	f7ff fd4f 	bl	800f0c4 <ptr_to_mem>
 800f626:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800f628:	4b1c      	ldr	r3, [pc, #112]	; (800f69c <mem_trim+0x210>)
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	693a      	ldr	r2, [r7, #16]
 800f62e:	429a      	cmp	r2, r3
 800f630:	d202      	bcs.n	800f638 <mem_trim+0x1ac>
      lfree = mem2;
 800f632:	4a1a      	ldr	r2, [pc, #104]	; (800f69c <mem_trim+0x210>)
 800f634:	693b      	ldr	r3, [r7, #16]
 800f636:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800f638:	693b      	ldr	r3, [r7, #16]
 800f63a:	2200      	movs	r2, #0
 800f63c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800f63e:	69bb      	ldr	r3, [r7, #24]
 800f640:	881a      	ldrh	r2, [r3, #0]
 800f642:	693b      	ldr	r3, [r7, #16]
 800f644:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800f646:	693b      	ldr	r3, [r7, #16]
 800f648:	8afa      	ldrh	r2, [r7, #22]
 800f64a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800f64c:	69bb      	ldr	r3, [r7, #24]
 800f64e:	89fa      	ldrh	r2, [r7, #14]
 800f650:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f652:	693b      	ldr	r3, [r7, #16]
 800f654:	881b      	ldrh	r3, [r3, #0]
 800f656:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f65a:	d007      	beq.n	800f66c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f65c:	693b      	ldr	r3, [r7, #16]
 800f65e:	881b      	ldrh	r3, [r3, #0]
 800f660:	4618      	mov	r0, r3
 800f662:	f7ff fd2f 	bl	800f0c4 <ptr_to_mem>
 800f666:	4602      	mov	r2, r0
 800f668:	89fb      	ldrh	r3, [r7, #14]
 800f66a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f66c:	4809      	ldr	r0, [pc, #36]	; (800f694 <mem_trim+0x208>)
 800f66e:	f00c f824 	bl	801b6ba <sys_mutex_unlock>
  return rmem;
 800f672:	687b      	ldr	r3, [r7, #4]
}
 800f674:	4618      	mov	r0, r3
 800f676:	3720      	adds	r7, #32
 800f678:	46bd      	mov	sp, r7
 800f67a:	bd80      	pop	{r7, pc}
 800f67c:	2000c950 	.word	0x2000c950
 800f680:	2000c954 	.word	0x2000c954
 800f684:	08026404 	.word	0x08026404
 800f688:	08026590 	.word	0x08026590
 800f68c:	0802644c 	.word	0x0802644c
 800f690:	080265a8 	.word	0x080265a8
 800f694:	2000c958 	.word	0x2000c958
 800f698:	080265c8 	.word	0x080265c8
 800f69c:	2000c95c 	.word	0x2000c95c

0800f6a0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b088      	sub	sp, #32
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800f6aa:	88fb      	ldrh	r3, [r7, #6]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d101      	bne.n	800f6b4 <mem_malloc+0x14>
    return NULL;
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	e0e2      	b.n	800f87a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800f6b4:	88fb      	ldrh	r3, [r7, #6]
 800f6b6:	3303      	adds	r3, #3
 800f6b8:	b29b      	uxth	r3, r3
 800f6ba:	f023 0303 	bic.w	r3, r3, #3
 800f6be:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800f6c0:	8bbb      	ldrh	r3, [r7, #28]
 800f6c2:	2b0b      	cmp	r3, #11
 800f6c4:	d801      	bhi.n	800f6ca <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800f6c6:	230c      	movs	r3, #12
 800f6c8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800f6ca:	8bbb      	ldrh	r3, [r7, #28]
 800f6cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f6d0:	d803      	bhi.n	800f6da <mem_malloc+0x3a>
 800f6d2:	8bba      	ldrh	r2, [r7, #28]
 800f6d4:	88fb      	ldrh	r3, [r7, #6]
 800f6d6:	429a      	cmp	r2, r3
 800f6d8:	d201      	bcs.n	800f6de <mem_malloc+0x3e>
    return NULL;
 800f6da:	2300      	movs	r3, #0
 800f6dc:	e0cd      	b.n	800f87a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800f6de:	4869      	ldr	r0, [pc, #420]	; (800f884 <mem_malloc+0x1e4>)
 800f6e0:	f00b ffdc 	bl	801b69c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f6e4:	4b68      	ldr	r3, [pc, #416]	; (800f888 <mem_malloc+0x1e8>)
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	f7ff fcfd 	bl	800f0e8 <mem_to_ptr>
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	83fb      	strh	r3, [r7, #30]
 800f6f2:	e0b7      	b.n	800f864 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800f6f4:	8bfb      	ldrh	r3, [r7, #30]
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	f7ff fce4 	bl	800f0c4 <ptr_to_mem>
 800f6fc:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800f6fe:	697b      	ldr	r3, [r7, #20]
 800f700:	791b      	ldrb	r3, [r3, #4]
 800f702:	2b00      	cmp	r3, #0
 800f704:	f040 80a7 	bne.w	800f856 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800f708:	697b      	ldr	r3, [r7, #20]
 800f70a:	881b      	ldrh	r3, [r3, #0]
 800f70c:	461a      	mov	r2, r3
 800f70e:	8bfb      	ldrh	r3, [r7, #30]
 800f710:	1ad3      	subs	r3, r2, r3
 800f712:	f1a3 0208 	sub.w	r2, r3, #8
 800f716:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800f718:	429a      	cmp	r2, r3
 800f71a:	f0c0 809c 	bcc.w	800f856 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800f71e:	697b      	ldr	r3, [r7, #20]
 800f720:	881b      	ldrh	r3, [r3, #0]
 800f722:	461a      	mov	r2, r3
 800f724:	8bfb      	ldrh	r3, [r7, #30]
 800f726:	1ad3      	subs	r3, r2, r3
 800f728:	f1a3 0208 	sub.w	r2, r3, #8
 800f72c:	8bbb      	ldrh	r3, [r7, #28]
 800f72e:	3314      	adds	r3, #20
 800f730:	429a      	cmp	r2, r3
 800f732:	d333      	bcc.n	800f79c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800f734:	8bfa      	ldrh	r2, [r7, #30]
 800f736:	8bbb      	ldrh	r3, [r7, #28]
 800f738:	4413      	add	r3, r2
 800f73a:	b29b      	uxth	r3, r3
 800f73c:	3308      	adds	r3, #8
 800f73e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800f740:	8a7b      	ldrh	r3, [r7, #18]
 800f742:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f746:	d106      	bne.n	800f756 <mem_malloc+0xb6>
 800f748:	4b50      	ldr	r3, [pc, #320]	; (800f88c <mem_malloc+0x1ec>)
 800f74a:	f240 3287 	movw	r2, #903	; 0x387
 800f74e:	4950      	ldr	r1, [pc, #320]	; (800f890 <mem_malloc+0x1f0>)
 800f750:	4850      	ldr	r0, [pc, #320]	; (800f894 <mem_malloc+0x1f4>)
 800f752:	f014 fa45 	bl	8023be0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800f756:	8a7b      	ldrh	r3, [r7, #18]
 800f758:	4618      	mov	r0, r3
 800f75a:	f7ff fcb3 	bl	800f0c4 <ptr_to_mem>
 800f75e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	2200      	movs	r2, #0
 800f764:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800f766:	697b      	ldr	r3, [r7, #20]
 800f768:	881a      	ldrh	r2, [r3, #0]
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	8bfa      	ldrh	r2, [r7, #30]
 800f772:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800f774:	697b      	ldr	r3, [r7, #20]
 800f776:	8a7a      	ldrh	r2, [r7, #18]
 800f778:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800f77a:	697b      	ldr	r3, [r7, #20]
 800f77c:	2201      	movs	r2, #1
 800f77e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	881b      	ldrh	r3, [r3, #0]
 800f784:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f788:	d00b      	beq.n	800f7a2 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	881b      	ldrh	r3, [r3, #0]
 800f78e:	4618      	mov	r0, r3
 800f790:	f7ff fc98 	bl	800f0c4 <ptr_to_mem>
 800f794:	4602      	mov	r2, r0
 800f796:	8a7b      	ldrh	r3, [r7, #18]
 800f798:	8053      	strh	r3, [r2, #2]
 800f79a:	e002      	b.n	800f7a2 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800f79c:	697b      	ldr	r3, [r7, #20]
 800f79e:	2201      	movs	r2, #1
 800f7a0:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800f7a2:	4b39      	ldr	r3, [pc, #228]	; (800f888 <mem_malloc+0x1e8>)
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	697a      	ldr	r2, [r7, #20]
 800f7a8:	429a      	cmp	r2, r3
 800f7aa:	d127      	bne.n	800f7fc <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800f7ac:	4b36      	ldr	r3, [pc, #216]	; (800f888 <mem_malloc+0x1e8>)
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800f7b2:	e005      	b.n	800f7c0 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800f7b4:	69bb      	ldr	r3, [r7, #24]
 800f7b6:	881b      	ldrh	r3, [r3, #0]
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	f7ff fc83 	bl	800f0c4 <ptr_to_mem>
 800f7be:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800f7c0:	69bb      	ldr	r3, [r7, #24]
 800f7c2:	791b      	ldrb	r3, [r3, #4]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d004      	beq.n	800f7d2 <mem_malloc+0x132>
 800f7c8:	4b33      	ldr	r3, [pc, #204]	; (800f898 <mem_malloc+0x1f8>)
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	69ba      	ldr	r2, [r7, #24]
 800f7ce:	429a      	cmp	r2, r3
 800f7d0:	d1f0      	bne.n	800f7b4 <mem_malloc+0x114>
          }
          lfree = cur;
 800f7d2:	4a2d      	ldr	r2, [pc, #180]	; (800f888 <mem_malloc+0x1e8>)
 800f7d4:	69bb      	ldr	r3, [r7, #24]
 800f7d6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800f7d8:	4b2b      	ldr	r3, [pc, #172]	; (800f888 <mem_malloc+0x1e8>)
 800f7da:	681a      	ldr	r2, [r3, #0]
 800f7dc:	4b2e      	ldr	r3, [pc, #184]	; (800f898 <mem_malloc+0x1f8>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	429a      	cmp	r2, r3
 800f7e2:	d00b      	beq.n	800f7fc <mem_malloc+0x15c>
 800f7e4:	4b28      	ldr	r3, [pc, #160]	; (800f888 <mem_malloc+0x1e8>)
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	791b      	ldrb	r3, [r3, #4]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d006      	beq.n	800f7fc <mem_malloc+0x15c>
 800f7ee:	4b27      	ldr	r3, [pc, #156]	; (800f88c <mem_malloc+0x1ec>)
 800f7f0:	f240 32b5 	movw	r2, #949	; 0x3b5
 800f7f4:	4929      	ldr	r1, [pc, #164]	; (800f89c <mem_malloc+0x1fc>)
 800f7f6:	4827      	ldr	r0, [pc, #156]	; (800f894 <mem_malloc+0x1f4>)
 800f7f8:	f014 f9f2 	bl	8023be0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800f7fc:	4821      	ldr	r0, [pc, #132]	; (800f884 <mem_malloc+0x1e4>)
 800f7fe:	f00b ff5c 	bl	801b6ba <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800f802:	8bba      	ldrh	r2, [r7, #28]
 800f804:	697b      	ldr	r3, [r7, #20]
 800f806:	4413      	add	r3, r2
 800f808:	3308      	adds	r3, #8
 800f80a:	4a23      	ldr	r2, [pc, #140]	; (800f898 <mem_malloc+0x1f8>)
 800f80c:	6812      	ldr	r2, [r2, #0]
 800f80e:	4293      	cmp	r3, r2
 800f810:	d906      	bls.n	800f820 <mem_malloc+0x180>
 800f812:	4b1e      	ldr	r3, [pc, #120]	; (800f88c <mem_malloc+0x1ec>)
 800f814:	f240 32b9 	movw	r2, #953	; 0x3b9
 800f818:	4921      	ldr	r1, [pc, #132]	; (800f8a0 <mem_malloc+0x200>)
 800f81a:	481e      	ldr	r0, [pc, #120]	; (800f894 <mem_malloc+0x1f4>)
 800f81c:	f014 f9e0 	bl	8023be0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800f820:	697b      	ldr	r3, [r7, #20]
 800f822:	f003 0303 	and.w	r3, r3, #3
 800f826:	2b00      	cmp	r3, #0
 800f828:	d006      	beq.n	800f838 <mem_malloc+0x198>
 800f82a:	4b18      	ldr	r3, [pc, #96]	; (800f88c <mem_malloc+0x1ec>)
 800f82c:	f240 32bb 	movw	r2, #955	; 0x3bb
 800f830:	491c      	ldr	r1, [pc, #112]	; (800f8a4 <mem_malloc+0x204>)
 800f832:	4818      	ldr	r0, [pc, #96]	; (800f894 <mem_malloc+0x1f4>)
 800f834:	f014 f9d4 	bl	8023be0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800f838:	697b      	ldr	r3, [r7, #20]
 800f83a:	f003 0303 	and.w	r3, r3, #3
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d006      	beq.n	800f850 <mem_malloc+0x1b0>
 800f842:	4b12      	ldr	r3, [pc, #72]	; (800f88c <mem_malloc+0x1ec>)
 800f844:	f240 32bd 	movw	r2, #957	; 0x3bd
 800f848:	4917      	ldr	r1, [pc, #92]	; (800f8a8 <mem_malloc+0x208>)
 800f84a:	4812      	ldr	r0, [pc, #72]	; (800f894 <mem_malloc+0x1f4>)
 800f84c:	f014 f9c8 	bl	8023be0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800f850:	697b      	ldr	r3, [r7, #20]
 800f852:	3308      	adds	r3, #8
 800f854:	e011      	b.n	800f87a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800f856:	8bfb      	ldrh	r3, [r7, #30]
 800f858:	4618      	mov	r0, r3
 800f85a:	f7ff fc33 	bl	800f0c4 <ptr_to_mem>
 800f85e:	4603      	mov	r3, r0
 800f860:	881b      	ldrh	r3, [r3, #0]
 800f862:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f864:	8bfa      	ldrh	r2, [r7, #30]
 800f866:	8bbb      	ldrh	r3, [r7, #28]
 800f868:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800f86c:	429a      	cmp	r2, r3
 800f86e:	f4ff af41 	bcc.w	800f6f4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800f872:	4804      	ldr	r0, [pc, #16]	; (800f884 <mem_malloc+0x1e4>)
 800f874:	f00b ff21 	bl	801b6ba <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800f878:	2300      	movs	r3, #0
}
 800f87a:	4618      	mov	r0, r3
 800f87c:	3720      	adds	r7, #32
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}
 800f882:	bf00      	nop
 800f884:	2000c958 	.word	0x2000c958
 800f888:	2000c95c 	.word	0x2000c95c
 800f88c:	08026404 	.word	0x08026404
 800f890:	080265c8 	.word	0x080265c8
 800f894:	0802644c 	.word	0x0802644c
 800f898:	2000c954 	.word	0x2000c954
 800f89c:	080265dc 	.word	0x080265dc
 800f8a0:	080265f8 	.word	0x080265f8
 800f8a4:	08026628 	.word	0x08026628
 800f8a8:	08026658 	.word	0x08026658

0800f8ac <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800f8ac:	b480      	push	{r7}
 800f8ae:	b085      	sub	sp, #20
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	689b      	ldr	r3, [r3, #8]
 800f8b8:	2200      	movs	r2, #0
 800f8ba:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	685b      	ldr	r3, [r3, #4]
 800f8c0:	3303      	adds	r3, #3
 800f8c2:	f023 0303 	bic.w	r3, r3, #3
 800f8c6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	60fb      	str	r3, [r7, #12]
 800f8cc:	e011      	b.n	800f8f2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	689b      	ldr	r3, [r3, #8]
 800f8d2:	681a      	ldr	r2, [r3, #0]
 800f8d4:	68bb      	ldr	r3, [r7, #8]
 800f8d6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	689b      	ldr	r3, [r3, #8]
 800f8dc:	68ba      	ldr	r2, [r7, #8]
 800f8de:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	881b      	ldrh	r3, [r3, #0]
 800f8e4:	461a      	mov	r2, r3
 800f8e6:	68bb      	ldr	r3, [r7, #8]
 800f8e8:	4413      	add	r3, r2
 800f8ea:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	3301      	adds	r3, #1
 800f8f0:	60fb      	str	r3, [r7, #12]
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	885b      	ldrh	r3, [r3, #2]
 800f8f6:	461a      	mov	r2, r3
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	4293      	cmp	r3, r2
 800f8fc:	dbe7      	blt.n	800f8ce <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800f8fe:	bf00      	nop
 800f900:	bf00      	nop
 800f902:	3714      	adds	r7, #20
 800f904:	46bd      	mov	sp, r7
 800f906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90a:	4770      	bx	lr

0800f90c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b082      	sub	sp, #8
 800f910:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f912:	2300      	movs	r3, #0
 800f914:	80fb      	strh	r3, [r7, #6]
 800f916:	e009      	b.n	800f92c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800f918:	88fb      	ldrh	r3, [r7, #6]
 800f91a:	4a08      	ldr	r2, [pc, #32]	; (800f93c <memp_init+0x30>)
 800f91c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f920:	4618      	mov	r0, r3
 800f922:	f7ff ffc3 	bl	800f8ac <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f926:	88fb      	ldrh	r3, [r7, #6]
 800f928:	3301      	adds	r3, #1
 800f92a:	80fb      	strh	r3, [r7, #6]
 800f92c:	88fb      	ldrh	r3, [r7, #6]
 800f92e:	2b0e      	cmp	r3, #14
 800f930:	d9f2      	bls.n	800f918 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800f932:	bf00      	nop
 800f934:	bf00      	nop
 800f936:	3708      	adds	r7, #8
 800f938:	46bd      	mov	sp, r7
 800f93a:	bd80      	pop	{r7, pc}
 800f93c:	080292b8 	.word	0x080292b8

0800f940 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f940:	b580      	push	{r7, lr}
 800f942:	b084      	sub	sp, #16
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800f948:	f00b fee4 	bl	801b714 <sys_arch_protect>
 800f94c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	689b      	ldr	r3, [r3, #8]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800f956:	68bb      	ldr	r3, [r7, #8]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d015      	beq.n	800f988 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	689b      	ldr	r3, [r3, #8]
 800f960:	68ba      	ldr	r2, [r7, #8]
 800f962:	6812      	ldr	r2, [r2, #0]
 800f964:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800f966:	68bb      	ldr	r3, [r7, #8]
 800f968:	f003 0303 	and.w	r3, r3, #3
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d006      	beq.n	800f97e <do_memp_malloc_pool+0x3e>
 800f970:	4b09      	ldr	r3, [pc, #36]	; (800f998 <do_memp_malloc_pool+0x58>)
 800f972:	f44f 728c 	mov.w	r2, #280	; 0x118
 800f976:	4909      	ldr	r1, [pc, #36]	; (800f99c <do_memp_malloc_pool+0x5c>)
 800f978:	4809      	ldr	r0, [pc, #36]	; (800f9a0 <do_memp_malloc_pool+0x60>)
 800f97a:	f014 f931 	bl	8023be0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f97e:	68f8      	ldr	r0, [r7, #12]
 800f980:	f00b fed6 	bl	801b730 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800f984:	68bb      	ldr	r3, [r7, #8]
 800f986:	e003      	b.n	800f990 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f988:	68f8      	ldr	r0, [r7, #12]
 800f98a:	f00b fed1 	bl	801b730 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800f98e:	2300      	movs	r3, #0
}
 800f990:	4618      	mov	r0, r3
 800f992:	3710      	adds	r7, #16
 800f994:	46bd      	mov	sp, r7
 800f996:	bd80      	pop	{r7, pc}
 800f998:	0802667c 	.word	0x0802667c
 800f99c:	080266ac 	.word	0x080266ac
 800f9a0:	080266d0 	.word	0x080266d0

0800f9a4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b084      	sub	sp, #16
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	4603      	mov	r3, r0
 800f9ac:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800f9ae:	79fb      	ldrb	r3, [r7, #7]
 800f9b0:	2b0e      	cmp	r3, #14
 800f9b2:	d908      	bls.n	800f9c6 <memp_malloc+0x22>
 800f9b4:	4b0a      	ldr	r3, [pc, #40]	; (800f9e0 <memp_malloc+0x3c>)
 800f9b6:	f240 1257 	movw	r2, #343	; 0x157
 800f9ba:	490a      	ldr	r1, [pc, #40]	; (800f9e4 <memp_malloc+0x40>)
 800f9bc:	480a      	ldr	r0, [pc, #40]	; (800f9e8 <memp_malloc+0x44>)
 800f9be:	f014 f90f 	bl	8023be0 <iprintf>
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	e008      	b.n	800f9d8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800f9c6:	79fb      	ldrb	r3, [r7, #7]
 800f9c8:	4a08      	ldr	r2, [pc, #32]	; (800f9ec <memp_malloc+0x48>)
 800f9ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	f7ff ffb6 	bl	800f940 <do_memp_malloc_pool>
 800f9d4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800f9d6:	68fb      	ldr	r3, [r7, #12]
}
 800f9d8:	4618      	mov	r0, r3
 800f9da:	3710      	adds	r7, #16
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	bd80      	pop	{r7, pc}
 800f9e0:	0802667c 	.word	0x0802667c
 800f9e4:	0802670c 	.word	0x0802670c
 800f9e8:	080266d0 	.word	0x080266d0
 800f9ec:	080292b8 	.word	0x080292b8

0800f9f0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b084      	sub	sp, #16
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
 800f9f8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800f9fa:	683b      	ldr	r3, [r7, #0]
 800f9fc:	f003 0303 	and.w	r3, r3, #3
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d006      	beq.n	800fa12 <do_memp_free_pool+0x22>
 800fa04:	4b0d      	ldr	r3, [pc, #52]	; (800fa3c <do_memp_free_pool+0x4c>)
 800fa06:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800fa0a:	490d      	ldr	r1, [pc, #52]	; (800fa40 <do_memp_free_pool+0x50>)
 800fa0c:	480d      	ldr	r0, [pc, #52]	; (800fa44 <do_memp_free_pool+0x54>)
 800fa0e:	f014 f8e7 	bl	8023be0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800fa12:	683b      	ldr	r3, [r7, #0]
 800fa14:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800fa16:	f00b fe7d 	bl	801b714 <sys_arch_protect>
 800fa1a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	689b      	ldr	r3, [r3, #8]
 800fa20:	681a      	ldr	r2, [r3, #0]
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	689b      	ldr	r3, [r3, #8]
 800fa2a:	68fa      	ldr	r2, [r7, #12]
 800fa2c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800fa2e:	68b8      	ldr	r0, [r7, #8]
 800fa30:	f00b fe7e 	bl	801b730 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800fa34:	bf00      	nop
 800fa36:	3710      	adds	r7, #16
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	bd80      	pop	{r7, pc}
 800fa3c:	0802667c 	.word	0x0802667c
 800fa40:	0802672c 	.word	0x0802672c
 800fa44:	080266d0 	.word	0x080266d0

0800fa48 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b082      	sub	sp, #8
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	4603      	mov	r3, r0
 800fa50:	6039      	str	r1, [r7, #0]
 800fa52:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800fa54:	79fb      	ldrb	r3, [r7, #7]
 800fa56:	2b0e      	cmp	r3, #14
 800fa58:	d907      	bls.n	800fa6a <memp_free+0x22>
 800fa5a:	4b0c      	ldr	r3, [pc, #48]	; (800fa8c <memp_free+0x44>)
 800fa5c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800fa60:	490b      	ldr	r1, [pc, #44]	; (800fa90 <memp_free+0x48>)
 800fa62:	480c      	ldr	r0, [pc, #48]	; (800fa94 <memp_free+0x4c>)
 800fa64:	f014 f8bc 	bl	8023be0 <iprintf>
 800fa68:	e00c      	b.n	800fa84 <memp_free+0x3c>

  if (mem == NULL) {
 800fa6a:	683b      	ldr	r3, [r7, #0]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d008      	beq.n	800fa82 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800fa70:	79fb      	ldrb	r3, [r7, #7]
 800fa72:	4a09      	ldr	r2, [pc, #36]	; (800fa98 <memp_free+0x50>)
 800fa74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa78:	6839      	ldr	r1, [r7, #0]
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	f7ff ffb8 	bl	800f9f0 <do_memp_free_pool>
 800fa80:	e000      	b.n	800fa84 <memp_free+0x3c>
    return;
 800fa82:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800fa84:	3708      	adds	r7, #8
 800fa86:	46bd      	mov	sp, r7
 800fa88:	bd80      	pop	{r7, pc}
 800fa8a:	bf00      	nop
 800fa8c:	0802667c 	.word	0x0802667c
 800fa90:	0802674c 	.word	0x0802674c
 800fa94:	080266d0 	.word	0x080266d0
 800fa98:	080292b8 	.word	0x080292b8

0800fa9c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800fa9c:	b480      	push	{r7}
 800fa9e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800faa0:	bf00      	nop
 800faa2:	46bd      	mov	sp, r7
 800faa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa8:	4770      	bx	lr
	...

0800faac <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800faac:	b580      	push	{r7, lr}
 800faae:	b086      	sub	sp, #24
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	60f8      	str	r0, [r7, #12]
 800fab4:	60b9      	str	r1, [r7, #8]
 800fab6:	607a      	str	r2, [r7, #4]
 800fab8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d108      	bne.n	800fad2 <netif_add+0x26>
 800fac0:	4b61      	ldr	r3, [pc, #388]	; (800fc48 <netif_add+0x19c>)
 800fac2:	f240 1227 	movw	r2, #295	; 0x127
 800fac6:	4961      	ldr	r1, [pc, #388]	; (800fc4c <netif_add+0x1a0>)
 800fac8:	4861      	ldr	r0, [pc, #388]	; (800fc50 <netif_add+0x1a4>)
 800faca:	f014 f889 	bl	8023be0 <iprintf>
 800face:	2300      	movs	r3, #0
 800fad0:	e0b6      	b.n	800fc40 <netif_add+0x194>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800fad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d108      	bne.n	800faea <netif_add+0x3e>
 800fad8:	4b5b      	ldr	r3, [pc, #364]	; (800fc48 <netif_add+0x19c>)
 800fada:	f44f 7294 	mov.w	r2, #296	; 0x128
 800fade:	495d      	ldr	r1, [pc, #372]	; (800fc54 <netif_add+0x1a8>)
 800fae0:	485b      	ldr	r0, [pc, #364]	; (800fc50 <netif_add+0x1a4>)
 800fae2:	f014 f87d 	bl	8023be0 <iprintf>
 800fae6:	2300      	movs	r3, #0
 800fae8:	e0aa      	b.n	800fc40 <netif_add+0x194>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800faea:	68bb      	ldr	r3, [r7, #8]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d101      	bne.n	800faf4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800faf0:	4b59      	ldr	r3, [pc, #356]	; (800fc58 <netif_add+0x1ac>)
 800faf2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d101      	bne.n	800fafe <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800fafa:	4b57      	ldr	r3, [pc, #348]	; (800fc58 <netif_add+0x1ac>)
 800fafc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800fafe:	683b      	ldr	r3, [r7, #0]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d101      	bne.n	800fb08 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800fb04:	4b54      	ldr	r3, [pc, #336]	; (800fc58 <netif_add+0x1ac>)
 800fb06:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	2200      	movs	r2, #0
 800fb12:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	2200      	movs	r2, #0
 800fb18:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	4a4f      	ldr	r2, [pc, #316]	; (800fc5c <netif_add+0x1b0>)
 800fb1e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	2200      	movs	r2, #0
 800fb24:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	2200      	movs	r2, #0
 800fb2a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	3324      	adds	r3, #36	; 0x24
 800fb32:	2204      	movs	r2, #4
 800fb34:	2100      	movs	r1, #0
 800fb36:	4618      	mov	r0, r3
 800fb38:	f013 ff54 	bl	80239e4 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	2200      	movs	r2, #0
 800fb40:	61da      	str	r2, [r3, #28]
#endif /* LWIP_NETIF_LINK_CALLBACK */
#if LWIP_IGMP
  netif->igmp_mac_filter = NULL;
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	2200      	movs	r2, #0
 800fb46:	639a      	str	r2, [r3, #56]	; 0x38
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	6a3a      	ldr	r2, [r7, #32]
 800fb4c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800fb4e:	4b44      	ldr	r3, [pc, #272]	; (800fc60 <netif_add+0x1b4>)
 800fb50:	781a      	ldrb	r2, [r3, #0]
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb5c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800fb5e:	683b      	ldr	r3, [r7, #0]
 800fb60:	687a      	ldr	r2, [r7, #4]
 800fb62:	68b9      	ldr	r1, [r7, #8]
 800fb64:	68f8      	ldr	r0, [r7, #12]
 800fb66:	f000 f91d 	bl	800fda4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800fb6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb6c:	68f8      	ldr	r0, [r7, #12]
 800fb6e:	4798      	blx	r3
 800fb70:	4603      	mov	r3, r0
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d001      	beq.n	800fb7a <netif_add+0xce>
    return NULL;
 800fb76:	2300      	movs	r3, #0
 800fb78:	e062      	b.n	800fc40 <netif_add+0x194>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fb80:	2bff      	cmp	r3, #255	; 0xff
 800fb82:	d103      	bne.n	800fb8c <netif_add+0xe0>
        netif->num = 0;
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	2200      	movs	r2, #0
 800fb88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800fb90:	4b34      	ldr	r3, [pc, #208]	; (800fc64 <netif_add+0x1b8>)
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	617b      	str	r3, [r7, #20]
 800fb96:	e02b      	b.n	800fbf0 <netif_add+0x144>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800fb98:	697a      	ldr	r2, [r7, #20]
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	429a      	cmp	r2, r3
 800fb9e:	d106      	bne.n	800fbae <netif_add+0x102>
 800fba0:	4b29      	ldr	r3, [pc, #164]	; (800fc48 <netif_add+0x19c>)
 800fba2:	f240 128b 	movw	r2, #395	; 0x18b
 800fba6:	4930      	ldr	r1, [pc, #192]	; (800fc68 <netif_add+0x1bc>)
 800fba8:	4829      	ldr	r0, [pc, #164]	; (800fc50 <netif_add+0x1a4>)
 800fbaa:	f014 f819 	bl	8023be0 <iprintf>
        num_netifs++;
 800fbae:	693b      	ldr	r3, [r7, #16]
 800fbb0:	3301      	adds	r3, #1
 800fbb2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800fbb4:	693b      	ldr	r3, [r7, #16]
 800fbb6:	2bff      	cmp	r3, #255	; 0xff
 800fbb8:	dd06      	ble.n	800fbc8 <netif_add+0x11c>
 800fbba:	4b23      	ldr	r3, [pc, #140]	; (800fc48 <netif_add+0x19c>)
 800fbbc:	f240 128d 	movw	r2, #397	; 0x18d
 800fbc0:	492a      	ldr	r1, [pc, #168]	; (800fc6c <netif_add+0x1c0>)
 800fbc2:	4823      	ldr	r0, [pc, #140]	; (800fc50 <netif_add+0x1a4>)
 800fbc4:	f014 f80c 	bl	8023be0 <iprintf>
        if (netif2->num == netif->num) {
 800fbc8:	697b      	ldr	r3, [r7, #20]
 800fbca:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fbd4:	429a      	cmp	r2, r3
 800fbd6:	d108      	bne.n	800fbea <netif_add+0x13e>
          netif->num++;
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fbde:	3301      	adds	r3, #1
 800fbe0:	b2da      	uxtb	r2, r3
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800fbe8:	e005      	b.n	800fbf6 <netif_add+0x14a>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800fbea:	697b      	ldr	r3, [r7, #20]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	617b      	str	r3, [r7, #20]
 800fbf0:	697b      	ldr	r3, [r7, #20]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d1d0      	bne.n	800fb98 <netif_add+0xec>
        }
      }
    } while (netif2 != NULL);
 800fbf6:	697b      	ldr	r3, [r7, #20]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d1be      	bne.n	800fb7a <netif_add+0xce>
  }
  if (netif->num == 254) {
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fc02:	2bfe      	cmp	r3, #254	; 0xfe
 800fc04:	d103      	bne.n	800fc0e <netif_add+0x162>
    netif_num = 0;
 800fc06:	4b16      	ldr	r3, [pc, #88]	; (800fc60 <netif_add+0x1b4>)
 800fc08:	2200      	movs	r2, #0
 800fc0a:	701a      	strb	r2, [r3, #0]
 800fc0c:	e006      	b.n	800fc1c <netif_add+0x170>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fc14:	3301      	adds	r3, #1
 800fc16:	b2da      	uxtb	r2, r3
 800fc18:	4b11      	ldr	r3, [pc, #68]	; (800fc60 <netif_add+0x1b4>)
 800fc1a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800fc1c:	4b11      	ldr	r3, [pc, #68]	; (800fc64 <netif_add+0x1b8>)
 800fc1e:	681a      	ldr	r2, [r3, #0]
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800fc24:	4a0f      	ldr	r2, [pc, #60]	; (800fc64 <netif_add+0x1b8>)
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	6013      	str	r3, [r2, #0]
#endif /* "LWIP_SINGLE_NETIF */
  mib2_netif_added(netif);

#if LWIP_IGMP
  /* start IGMP processing */
  if (netif->flags & NETIF_FLAG_IGMP) {
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fc30:	f003 0320 	and.w	r3, r3, #32
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d002      	beq.n	800fc3e <netif_add+0x192>
    igmp_start(netif);
 800fc38:	68f8      	ldr	r0, [r7, #12]
 800fc3a:	f009 faf9 	bl	8019230 <igmp_start>
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800fc3e:	68fb      	ldr	r3, [r7, #12]
}
 800fc40:	4618      	mov	r0, r3
 800fc42:	3718      	adds	r7, #24
 800fc44:	46bd      	mov	sp, r7
 800fc46:	bd80      	pop	{r7, pc}
 800fc48:	08026768 	.word	0x08026768
 800fc4c:	080267fc 	.word	0x080267fc
 800fc50:	080267b8 	.word	0x080267b8
 800fc54:	08026818 	.word	0x08026818
 800fc58:	08029344 	.word	0x08029344
 800fc5c:	08010093 	.word	0x08010093
 800fc60:	2000fc38 	.word	0x2000fc38
 800fc64:	2000fc30 	.word	0x2000fc30
 800fc68:	0802683c 	.word	0x0802683c
 800fc6c:	08026850 	.word	0x08026850

0800fc70 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b082      	sub	sp, #8
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
 800fc78:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800fc7a:	6839      	ldr	r1, [r7, #0]
 800fc7c:	6878      	ldr	r0, [r7, #4]
 800fc7e:	f003 f81f 	bl	8012cc0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800fc82:	6839      	ldr	r1, [r7, #0]
 800fc84:	6878      	ldr	r0, [r7, #4]
 800fc86:	f008 f9b3 	bl	8017ff0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800fc8a:	bf00      	nop
 800fc8c:	3708      	adds	r7, #8
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	bd80      	pop	{r7, pc}
	...

0800fc94 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b086      	sub	sp, #24
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	60f8      	str	r0, [r7, #12]
 800fc9c:	60b9      	str	r1, [r7, #8]
 800fc9e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800fca0:	68bb      	ldr	r3, [r7, #8]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d106      	bne.n	800fcb4 <netif_do_set_ipaddr+0x20>
 800fca6:	4b1d      	ldr	r3, [pc, #116]	; (800fd1c <netif_do_set_ipaddr+0x88>)
 800fca8:	f240 12cb 	movw	r2, #459	; 0x1cb
 800fcac:	491c      	ldr	r1, [pc, #112]	; (800fd20 <netif_do_set_ipaddr+0x8c>)
 800fcae:	481d      	ldr	r0, [pc, #116]	; (800fd24 <netif_do_set_ipaddr+0x90>)
 800fcb0:	f013 ff96 	bl	8023be0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d106      	bne.n	800fcc8 <netif_do_set_ipaddr+0x34>
 800fcba:	4b18      	ldr	r3, [pc, #96]	; (800fd1c <netif_do_set_ipaddr+0x88>)
 800fcbc:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800fcc0:	4917      	ldr	r1, [pc, #92]	; (800fd20 <netif_do_set_ipaddr+0x8c>)
 800fcc2:	4818      	ldr	r0, [pc, #96]	; (800fd24 <netif_do_set_ipaddr+0x90>)
 800fcc4:	f013 ff8c 	bl	8023be0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800fcc8:	68bb      	ldr	r3, [r7, #8]
 800fcca:	681a      	ldr	r2, [r3, #0]
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	3304      	adds	r3, #4
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	429a      	cmp	r2, r3
 800fcd4:	d01c      	beq.n	800fd10 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800fcd6:	68bb      	ldr	r3, [r7, #8]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	3304      	adds	r3, #4
 800fce0:	681a      	ldr	r2, [r3, #0]
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800fce6:	f107 0314 	add.w	r3, r7, #20
 800fcea:	4619      	mov	r1, r3
 800fcec:	6878      	ldr	r0, [r7, #4]
 800fcee:	f7ff ffbf 	bl	800fc70 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800fcf2:	68bb      	ldr	r3, [r7, #8]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d002      	beq.n	800fcfe <netif_do_set_ipaddr+0x6a>
 800fcf8:	68bb      	ldr	r3, [r7, #8]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	e000      	b.n	800fd00 <netif_do_set_ipaddr+0x6c>
 800fcfe:	2300      	movs	r3, #0
 800fd00:	68fa      	ldr	r2, [r7, #12]
 800fd02:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800fd04:	2101      	movs	r1, #1
 800fd06:	68f8      	ldr	r0, [r7, #12]
 800fd08:	f000 f8d2 	bl	800feb0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800fd0c:	2301      	movs	r3, #1
 800fd0e:	e000      	b.n	800fd12 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800fd10:	2300      	movs	r3, #0
}
 800fd12:	4618      	mov	r0, r3
 800fd14:	3718      	adds	r7, #24
 800fd16:	46bd      	mov	sp, r7
 800fd18:	bd80      	pop	{r7, pc}
 800fd1a:	bf00      	nop
 800fd1c:	08026768 	.word	0x08026768
 800fd20:	08026880 	.word	0x08026880
 800fd24:	080267b8 	.word	0x080267b8

0800fd28 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800fd28:	b480      	push	{r7}
 800fd2a:	b085      	sub	sp, #20
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	60f8      	str	r0, [r7, #12]
 800fd30:	60b9      	str	r1, [r7, #8]
 800fd32:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800fd34:	68bb      	ldr	r3, [r7, #8]
 800fd36:	681a      	ldr	r2, [r3, #0]
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	3308      	adds	r3, #8
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	429a      	cmp	r2, r3
 800fd40:	d00a      	beq.n	800fd58 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800fd42:	68bb      	ldr	r3, [r7, #8]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d002      	beq.n	800fd4e <netif_do_set_netmask+0x26>
 800fd48:	68bb      	ldr	r3, [r7, #8]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	e000      	b.n	800fd50 <netif_do_set_netmask+0x28>
 800fd4e:	2300      	movs	r3, #0
 800fd50:	68fa      	ldr	r2, [r7, #12]
 800fd52:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800fd54:	2301      	movs	r3, #1
 800fd56:	e000      	b.n	800fd5a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800fd58:	2300      	movs	r3, #0
}
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	3714      	adds	r7, #20
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd64:	4770      	bx	lr

0800fd66 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800fd66:	b480      	push	{r7}
 800fd68:	b085      	sub	sp, #20
 800fd6a:	af00      	add	r7, sp, #0
 800fd6c:	60f8      	str	r0, [r7, #12]
 800fd6e:	60b9      	str	r1, [r7, #8]
 800fd70:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800fd72:	68bb      	ldr	r3, [r7, #8]
 800fd74:	681a      	ldr	r2, [r3, #0]
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	330c      	adds	r3, #12
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	429a      	cmp	r2, r3
 800fd7e:	d00a      	beq.n	800fd96 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800fd80:	68bb      	ldr	r3, [r7, #8]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d002      	beq.n	800fd8c <netif_do_set_gw+0x26>
 800fd86:	68bb      	ldr	r3, [r7, #8]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	e000      	b.n	800fd8e <netif_do_set_gw+0x28>
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	68fa      	ldr	r2, [r7, #12]
 800fd90:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800fd92:	2301      	movs	r3, #1
 800fd94:	e000      	b.n	800fd98 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800fd96:	2300      	movs	r3, #0
}
 800fd98:	4618      	mov	r0, r3
 800fd9a:	3714      	adds	r7, #20
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda2:	4770      	bx	lr

0800fda4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b088      	sub	sp, #32
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	60f8      	str	r0, [r7, #12]
 800fdac:	60b9      	str	r1, [r7, #8]
 800fdae:	607a      	str	r2, [r7, #4]
 800fdb0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800fdba:	68bb      	ldr	r3, [r7, #8]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d101      	bne.n	800fdc4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800fdc0:	4b1c      	ldr	r3, [pc, #112]	; (800fe34 <netif_set_addr+0x90>)
 800fdc2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d101      	bne.n	800fdce <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800fdca:	4b1a      	ldr	r3, [pc, #104]	; (800fe34 <netif_set_addr+0x90>)
 800fdcc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800fdce:	683b      	ldr	r3, [r7, #0]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d101      	bne.n	800fdd8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800fdd4:	4b17      	ldr	r3, [pc, #92]	; (800fe34 <netif_set_addr+0x90>)
 800fdd6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800fdd8:	68bb      	ldr	r3, [r7, #8]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d003      	beq.n	800fde6 <netif_set_addr+0x42>
 800fdde:	68bb      	ldr	r3, [r7, #8]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d101      	bne.n	800fdea <netif_set_addr+0x46>
 800fde6:	2301      	movs	r3, #1
 800fde8:	e000      	b.n	800fdec <netif_set_addr+0x48>
 800fdea:	2300      	movs	r3, #0
 800fdec:	617b      	str	r3, [r7, #20]
  if (remove) {
 800fdee:	697b      	ldr	r3, [r7, #20]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d006      	beq.n	800fe02 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800fdf4:	f107 0310 	add.w	r3, r7, #16
 800fdf8:	461a      	mov	r2, r3
 800fdfa:	68b9      	ldr	r1, [r7, #8]
 800fdfc:	68f8      	ldr	r0, [r7, #12]
 800fdfe:	f7ff ff49 	bl	800fc94 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800fe02:	69fa      	ldr	r2, [r7, #28]
 800fe04:	6879      	ldr	r1, [r7, #4]
 800fe06:	68f8      	ldr	r0, [r7, #12]
 800fe08:	f7ff ff8e 	bl	800fd28 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800fe0c:	69ba      	ldr	r2, [r7, #24]
 800fe0e:	6839      	ldr	r1, [r7, #0]
 800fe10:	68f8      	ldr	r0, [r7, #12]
 800fe12:	f7ff ffa8 	bl	800fd66 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800fe16:	697b      	ldr	r3, [r7, #20]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d106      	bne.n	800fe2a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800fe1c:	f107 0310 	add.w	r3, r7, #16
 800fe20:	461a      	mov	r2, r3
 800fe22:	68b9      	ldr	r1, [r7, #8]
 800fe24:	68f8      	ldr	r0, [r7, #12]
 800fe26:	f7ff ff35 	bl	800fc94 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800fe2a:	bf00      	nop
 800fe2c:	3720      	adds	r7, #32
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	bd80      	pop	{r7, pc}
 800fe32:	bf00      	nop
 800fe34:	08029344 	.word	0x08029344

0800fe38 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800fe38:	b480      	push	{r7}
 800fe3a:	b083      	sub	sp, #12
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800fe40:	4a04      	ldr	r2, [pc, #16]	; (800fe54 <netif_set_default+0x1c>)
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800fe46:	bf00      	nop
 800fe48:	370c      	adds	r7, #12
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe50:	4770      	bx	lr
 800fe52:	bf00      	nop
 800fe54:	2000fc34 	.word	0x2000fc34

0800fe58 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b082      	sub	sp, #8
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d107      	bne.n	800fe76 <netif_set_up+0x1e>
 800fe66:	4b0f      	ldr	r3, [pc, #60]	; (800fea4 <netif_set_up+0x4c>)
 800fe68:	f44f 7254 	mov.w	r2, #848	; 0x350
 800fe6c:	490e      	ldr	r1, [pc, #56]	; (800fea8 <netif_set_up+0x50>)
 800fe6e:	480f      	ldr	r0, [pc, #60]	; (800feac <netif_set_up+0x54>)
 800fe70:	f013 feb6 	bl	8023be0 <iprintf>
 800fe74:	e013      	b.n	800fe9e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fe7c:	f003 0301 	and.w	r3, r3, #1
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d10c      	bne.n	800fe9e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fe8a:	f043 0301 	orr.w	r3, r3, #1
 800fe8e:	b2da      	uxtb	r2, r3
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800fe96:	2103      	movs	r1, #3
 800fe98:	6878      	ldr	r0, [r7, #4]
 800fe9a:	f000 f809 	bl	800feb0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800fe9e:	3708      	adds	r7, #8
 800fea0:	46bd      	mov	sp, r7
 800fea2:	bd80      	pop	{r7, pc}
 800fea4:	08026768 	.word	0x08026768
 800fea8:	080268f0 	.word	0x080268f0
 800feac:	080267b8 	.word	0x080267b8

0800feb0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b082      	sub	sp, #8
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
 800feb8:	460b      	mov	r3, r1
 800feba:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d106      	bne.n	800fed0 <netif_issue_reports+0x20>
 800fec2:	4b1d      	ldr	r3, [pc, #116]	; (800ff38 <netif_issue_reports+0x88>)
 800fec4:	f240 326d 	movw	r2, #877	; 0x36d
 800fec8:	491c      	ldr	r1, [pc, #112]	; (800ff3c <netif_issue_reports+0x8c>)
 800feca:	481d      	ldr	r0, [pc, #116]	; (800ff40 <netif_issue_reports+0x90>)
 800fecc:	f013 fe88 	bl	8023be0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fed6:	f003 0304 	and.w	r3, r3, #4
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d028      	beq.n	800ff30 <netif_issue_reports+0x80>
      !(netif->flags & NETIF_FLAG_UP)) {
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fee4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d021      	beq.n	800ff30 <netif_issue_reports+0x80>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800feec:	78fb      	ldrb	r3, [r7, #3]
 800feee:	f003 0301 	and.w	r3, r3, #1
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d01d      	beq.n	800ff32 <netif_issue_reports+0x82>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	3304      	adds	r3, #4
 800fefa:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d018      	beq.n	800ff32 <netif_issue_reports+0x82>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ff06:	f003 0308 	and.w	r3, r3, #8
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d005      	beq.n	800ff1a <netif_issue_reports+0x6a>
      etharp_gratuitous(netif);
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	3304      	adds	r3, #4
 800ff12:	4619      	mov	r1, r3
 800ff14:	6878      	ldr	r0, [r7, #4]
 800ff16:	f008 ffd5 	bl	8018ec4 <etharp_request>
    }
#endif /* LWIP_ARP */

#if LWIP_IGMP
    /* resend IGMP memberships */
    if (netif->flags & NETIF_FLAG_IGMP) {
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ff20:	f003 0320 	and.w	r3, r3, #32
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d004      	beq.n	800ff32 <netif_issue_reports+0x82>
      igmp_report_groups(netif);
 800ff28:	6878      	ldr	r0, [r7, #4]
 800ff2a:	f009 f9ab 	bl	8019284 <igmp_report_groups>
 800ff2e:	e000      	b.n	800ff32 <netif_issue_reports+0x82>
    return;
 800ff30:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ff32:	3708      	adds	r7, #8
 800ff34:	46bd      	mov	sp, r7
 800ff36:	bd80      	pop	{r7, pc}
 800ff38:	08026768 	.word	0x08026768
 800ff3c:	0802690c 	.word	0x0802690c
 800ff40:	080267b8 	.word	0x080267b8

0800ff44 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b082      	sub	sp, #8
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d107      	bne.n	800ff62 <netif_set_down+0x1e>
 800ff52:	4b12      	ldr	r3, [pc, #72]	; (800ff9c <netif_set_down+0x58>)
 800ff54:	f240 329b 	movw	r2, #923	; 0x39b
 800ff58:	4911      	ldr	r1, [pc, #68]	; (800ffa0 <netif_set_down+0x5c>)
 800ff5a:	4812      	ldr	r0, [pc, #72]	; (800ffa4 <netif_set_down+0x60>)
 800ff5c:	f013 fe40 	bl	8023be0 <iprintf>
 800ff60:	e019      	b.n	800ff96 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ff68:	f003 0301 	and.w	r3, r3, #1
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d012      	beq.n	800ff96 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ff76:	f023 0301 	bic.w	r3, r3, #1
 800ff7a:	b2da      	uxtb	r2, r3
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ff88:	f003 0308 	and.w	r3, r3, #8
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d002      	beq.n	800ff96 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ff90:	6878      	ldr	r0, [r7, #4]
 800ff92:	f008 fb55 	bl	8018640 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ff96:	3708      	adds	r7, #8
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	bd80      	pop	{r7, pc}
 800ff9c:	08026768 	.word	0x08026768
 800ffa0:	08026930 	.word	0x08026930
 800ffa4:	080267b8 	.word	0x080267b8

0800ffa8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b082      	sub	sp, #8
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d107      	bne.n	800ffc6 <netif_set_link_up+0x1e>
 800ffb6:	4b13      	ldr	r3, [pc, #76]	; (8010004 <netif_set_link_up+0x5c>)
 800ffb8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800ffbc:	4912      	ldr	r1, [pc, #72]	; (8010008 <netif_set_link_up+0x60>)
 800ffbe:	4813      	ldr	r0, [pc, #76]	; (801000c <netif_set_link_up+0x64>)
 800ffc0:	f013 fe0e 	bl	8023be0 <iprintf>
 800ffc4:	e01b      	b.n	800fffe <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ffcc:	f003 0304 	and.w	r3, r3, #4
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d114      	bne.n	800fffe <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ffda:	f043 0304 	orr.w	r3, r3, #4
 800ffde:	b2da      	uxtb	r2, r3
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ffe6:	2103      	movs	r1, #3
 800ffe8:	6878      	ldr	r0, [r7, #4]
 800ffea:	f7ff ff61 	bl	800feb0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	69db      	ldr	r3, [r3, #28]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d003      	beq.n	800fffe <netif_set_link_up+0x56>
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	69db      	ldr	r3, [r3, #28]
 800fffa:	6878      	ldr	r0, [r7, #4]
 800fffc:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800fffe:	3708      	adds	r7, #8
 8010000:	46bd      	mov	sp, r7
 8010002:	bd80      	pop	{r7, pc}
 8010004:	08026768 	.word	0x08026768
 8010008:	08026950 	.word	0x08026950
 801000c:	080267b8 	.word	0x080267b8

08010010 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8010010:	b580      	push	{r7, lr}
 8010012:	b082      	sub	sp, #8
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d107      	bne.n	801002e <netif_set_link_down+0x1e>
 801001e:	4b11      	ldr	r3, [pc, #68]	; (8010064 <netif_set_link_down+0x54>)
 8010020:	f240 4206 	movw	r2, #1030	; 0x406
 8010024:	4910      	ldr	r1, [pc, #64]	; (8010068 <netif_set_link_down+0x58>)
 8010026:	4811      	ldr	r0, [pc, #68]	; (801006c <netif_set_link_down+0x5c>)
 8010028:	f013 fdda 	bl	8023be0 <iprintf>
 801002c:	e017      	b.n	801005e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010034:	f003 0304 	and.w	r3, r3, #4
 8010038:	2b00      	cmp	r3, #0
 801003a:	d010      	beq.n	801005e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010042:	f023 0304 	bic.w	r3, r3, #4
 8010046:	b2da      	uxtb	r2, r3
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	69db      	ldr	r3, [r3, #28]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d003      	beq.n	801005e <netif_set_link_down+0x4e>
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	69db      	ldr	r3, [r3, #28]
 801005a:	6878      	ldr	r0, [r7, #4]
 801005c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801005e:	3708      	adds	r7, #8
 8010060:	46bd      	mov	sp, r7
 8010062:	bd80      	pop	{r7, pc}
 8010064:	08026768 	.word	0x08026768
 8010068:	08026974 	.word	0x08026974
 801006c:	080267b8 	.word	0x080267b8

08010070 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8010070:	b480      	push	{r7}
 8010072:	b083      	sub	sp, #12
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
 8010078:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d002      	beq.n	8010086 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	683a      	ldr	r2, [r7, #0]
 8010084:	61da      	str	r2, [r3, #28]
  }
}
 8010086:	bf00      	nop
 8010088:	370c      	adds	r7, #12
 801008a:	46bd      	mov	sp, r7
 801008c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010090:	4770      	bx	lr

08010092 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8010092:	b480      	push	{r7}
 8010094:	b085      	sub	sp, #20
 8010096:	af00      	add	r7, sp, #0
 8010098:	60f8      	str	r0, [r7, #12]
 801009a:	60b9      	str	r1, [r7, #8]
 801009c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801009e:	f06f 030b 	mvn.w	r3, #11
}
 80100a2:	4618      	mov	r0, r3
 80100a4:	3714      	adds	r7, #20
 80100a6:	46bd      	mov	sp, r7
 80100a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ac:	4770      	bx	lr
	...

080100b0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80100b0:	b480      	push	{r7}
 80100b2:	b085      	sub	sp, #20
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	4603      	mov	r3, r0
 80100b8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80100ba:	79fb      	ldrb	r3, [r7, #7]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d013      	beq.n	80100e8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80100c0:	4b0d      	ldr	r3, [pc, #52]	; (80100f8 <netif_get_by_index+0x48>)
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	60fb      	str	r3, [r7, #12]
 80100c6:	e00c      	b.n	80100e2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80100ce:	3301      	adds	r3, #1
 80100d0:	b2db      	uxtb	r3, r3
 80100d2:	79fa      	ldrb	r2, [r7, #7]
 80100d4:	429a      	cmp	r2, r3
 80100d6:	d101      	bne.n	80100dc <netif_get_by_index+0x2c>
        return netif; /* found! */
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	e006      	b.n	80100ea <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	60fb      	str	r3, [r7, #12]
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d1ef      	bne.n	80100c8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80100e8:	2300      	movs	r3, #0
}
 80100ea:	4618      	mov	r0, r3
 80100ec:	3714      	adds	r7, #20
 80100ee:	46bd      	mov	sp, r7
 80100f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f4:	4770      	bx	lr
 80100f6:	bf00      	nop
 80100f8:	2000fc30 	.word	0x2000fc30

080100fc <netif_find>:
 * @param name the name of the netif (like netif->name) plus concatenated number
 * in ascii representation (e.g. 'en0')
 */
struct netif *
netif_find(const char *name)
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b084      	sub	sp, #16
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
  struct netif *netif;
  u8_t num;

  LWIP_ASSERT_CORE_LOCKED();

  if (name == NULL) {
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d101      	bne.n	801010e <netif_find+0x12>
    return NULL;
 801010a:	2300      	movs	r3, #0
 801010c:	e028      	b.n	8010160 <netif_find+0x64>
  }

  num = (u8_t)atoi(&name[2]);
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	3302      	adds	r3, #2
 8010112:	4618      	mov	r0, r3
 8010114:	f013 faac 	bl	8023670 <atoi>
 8010118:	4603      	mov	r3, r0
 801011a:	72fb      	strb	r3, [r7, #11]

  NETIF_FOREACH(netif) {
 801011c:	4b12      	ldr	r3, [pc, #72]	; (8010168 <netif_find+0x6c>)
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	60fb      	str	r3, [r7, #12]
 8010122:	e019      	b.n	8010158 <netif_find+0x5c>
    if (num == netif->num &&
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801012a:	7afa      	ldrb	r2, [r7, #11]
 801012c:	429a      	cmp	r2, r3
 801012e:	d110      	bne.n	8010152 <netif_find+0x56>
        name[0] == netif->name[0] &&
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	781a      	ldrb	r2, [r3, #0]
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
    if (num == netif->num &&
 801013a:	429a      	cmp	r2, r3
 801013c:	d109      	bne.n	8010152 <netif_find+0x56>
        name[1] == netif->name[1]) {
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	3301      	adds	r3, #1
 8010142:	781a      	ldrb	r2, [r3, #0]
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
        name[0] == netif->name[0] &&
 801014a:	429a      	cmp	r2, r3
 801014c:	d101      	bne.n	8010152 <netif_find+0x56>
      LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: found %c%c\n", name[0], name[1]));
      return netif;
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	e006      	b.n	8010160 <netif_find+0x64>
  NETIF_FOREACH(netif) {
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	60fb      	str	r3, [r7, #12]
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d1e2      	bne.n	8010124 <netif_find+0x28>
    }
  }
  LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: didn't find %c%c\n", name[0], name[1]));
  return NULL;
 801015e:	2300      	movs	r3, #0
}
 8010160:	4618      	mov	r0, r3
 8010162:	3710      	adds	r7, #16
 8010164:	46bd      	mov	sp, r7
 8010166:	bd80      	pop	{r7, pc}
 8010168:	2000fc30 	.word	0x2000fc30

0801016c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 801016c:	b580      	push	{r7, lr}
 801016e:	b082      	sub	sp, #8
 8010170:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8010172:	f00b facf 	bl	801b714 <sys_arch_protect>
 8010176:	6038      	str	r0, [r7, #0]
 8010178:	4b0d      	ldr	r3, [pc, #52]	; (80101b0 <pbuf_free_ooseq+0x44>)
 801017a:	2200      	movs	r2, #0
 801017c:	701a      	strb	r2, [r3, #0]
 801017e:	6838      	ldr	r0, [r7, #0]
 8010180:	f00b fad6 	bl	801b730 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010184:	4b0b      	ldr	r3, [pc, #44]	; (80101b4 <pbuf_free_ooseq+0x48>)
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	607b      	str	r3, [r7, #4]
 801018a:	e00a      	b.n	80101a2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010190:	2b00      	cmp	r3, #0
 8010192:	d003      	beq.n	801019c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8010194:	6878      	ldr	r0, [r7, #4]
 8010196:	f002 fdd1 	bl	8012d3c <tcp_free_ooseq>
      return;
 801019a:	e005      	b.n	80101a8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	68db      	ldr	r3, [r3, #12]
 80101a0:	607b      	str	r3, [r7, #4]
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d1f1      	bne.n	801018c <pbuf_free_ooseq+0x20>
    }
  }
}
 80101a8:	3708      	adds	r7, #8
 80101aa:	46bd      	mov	sp, r7
 80101ac:	bd80      	pop	{r7, pc}
 80101ae:	bf00      	nop
 80101b0:	2000fc39 	.word	0x2000fc39
 80101b4:	2000fc48 	.word	0x2000fc48

080101b8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80101b8:	b580      	push	{r7, lr}
 80101ba:	b082      	sub	sp, #8
 80101bc:	af00      	add	r7, sp, #0
 80101be:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80101c0:	f7ff ffd4 	bl	801016c <pbuf_free_ooseq>
}
 80101c4:	bf00      	nop
 80101c6:	3708      	adds	r7, #8
 80101c8:	46bd      	mov	sp, r7
 80101ca:	bd80      	pop	{r7, pc}

080101cc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b082      	sub	sp, #8
 80101d0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80101d2:	f00b fa9f 	bl	801b714 <sys_arch_protect>
 80101d6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80101d8:	4b0f      	ldr	r3, [pc, #60]	; (8010218 <pbuf_pool_is_empty+0x4c>)
 80101da:	781b      	ldrb	r3, [r3, #0]
 80101dc:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80101de:	4b0e      	ldr	r3, [pc, #56]	; (8010218 <pbuf_pool_is_empty+0x4c>)
 80101e0:	2201      	movs	r2, #1
 80101e2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80101e4:	6878      	ldr	r0, [r7, #4]
 80101e6:	f00b faa3 	bl	801b730 <sys_arch_unprotect>

  if (!queued) {
 80101ea:	78fb      	ldrb	r3, [r7, #3]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d10f      	bne.n	8010210 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80101f0:	2100      	movs	r1, #0
 80101f2:	480a      	ldr	r0, [pc, #40]	; (801021c <pbuf_pool_is_empty+0x50>)
 80101f4:	f7fd fe5e 	bl	800deb4 <tcpip_try_callback>
 80101f8:	4603      	mov	r3, r0
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d008      	beq.n	8010210 <pbuf_pool_is_empty+0x44>
 80101fe:	f00b fa89 	bl	801b714 <sys_arch_protect>
 8010202:	6078      	str	r0, [r7, #4]
 8010204:	4b04      	ldr	r3, [pc, #16]	; (8010218 <pbuf_pool_is_empty+0x4c>)
 8010206:	2200      	movs	r2, #0
 8010208:	701a      	strb	r2, [r3, #0]
 801020a:	6878      	ldr	r0, [r7, #4]
 801020c:	f00b fa90 	bl	801b730 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8010210:	bf00      	nop
 8010212:	3708      	adds	r7, #8
 8010214:	46bd      	mov	sp, r7
 8010216:	bd80      	pop	{r7, pc}
 8010218:	2000fc39 	.word	0x2000fc39
 801021c:	080101b9 	.word	0x080101b9

08010220 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8010220:	b480      	push	{r7}
 8010222:	b085      	sub	sp, #20
 8010224:	af00      	add	r7, sp, #0
 8010226:	60f8      	str	r0, [r7, #12]
 8010228:	60b9      	str	r1, [r7, #8]
 801022a:	4611      	mov	r1, r2
 801022c:	461a      	mov	r2, r3
 801022e:	460b      	mov	r3, r1
 8010230:	80fb      	strh	r3, [r7, #6]
 8010232:	4613      	mov	r3, r2
 8010234:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	2200      	movs	r2, #0
 801023a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	68ba      	ldr	r2, [r7, #8]
 8010240:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	88fa      	ldrh	r2, [r7, #6]
 8010246:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	88ba      	ldrh	r2, [r7, #4]
 801024c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801024e:	8b3b      	ldrh	r3, [r7, #24]
 8010250:	b2da      	uxtb	r2, r3
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	7f3a      	ldrb	r2, [r7, #28]
 801025a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	2201      	movs	r2, #1
 8010260:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	2200      	movs	r2, #0
 8010266:	73da      	strb	r2, [r3, #15]
}
 8010268:	bf00      	nop
 801026a:	3714      	adds	r7, #20
 801026c:	46bd      	mov	sp, r7
 801026e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010272:	4770      	bx	lr

08010274 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8010274:	b580      	push	{r7, lr}
 8010276:	b08c      	sub	sp, #48	; 0x30
 8010278:	af02      	add	r7, sp, #8
 801027a:	4603      	mov	r3, r0
 801027c:	71fb      	strb	r3, [r7, #7]
 801027e:	460b      	mov	r3, r1
 8010280:	80bb      	strh	r3, [r7, #4]
 8010282:	4613      	mov	r3, r2
 8010284:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8010286:	79fb      	ldrb	r3, [r7, #7]
 8010288:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801028a:	887b      	ldrh	r3, [r7, #2]
 801028c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010290:	d07f      	beq.n	8010392 <pbuf_alloc+0x11e>
 8010292:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010296:	f300 80c8 	bgt.w	801042a <pbuf_alloc+0x1b6>
 801029a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801029e:	d010      	beq.n	80102c2 <pbuf_alloc+0x4e>
 80102a0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80102a4:	f300 80c1 	bgt.w	801042a <pbuf_alloc+0x1b6>
 80102a8:	2b01      	cmp	r3, #1
 80102aa:	d002      	beq.n	80102b2 <pbuf_alloc+0x3e>
 80102ac:	2b41      	cmp	r3, #65	; 0x41
 80102ae:	f040 80bc 	bne.w	801042a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80102b2:	887a      	ldrh	r2, [r7, #2]
 80102b4:	88bb      	ldrh	r3, [r7, #4]
 80102b6:	4619      	mov	r1, r3
 80102b8:	2000      	movs	r0, #0
 80102ba:	f000 f8d1 	bl	8010460 <pbuf_alloc_reference>
 80102be:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80102c0:	e0bd      	b.n	801043e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80102c2:	2300      	movs	r3, #0
 80102c4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80102c6:	2300      	movs	r3, #0
 80102c8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80102ca:	88bb      	ldrh	r3, [r7, #4]
 80102cc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80102ce:	200e      	movs	r0, #14
 80102d0:	f7ff fb68 	bl	800f9a4 <memp_malloc>
 80102d4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80102d6:	693b      	ldr	r3, [r7, #16]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d109      	bne.n	80102f0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80102dc:	f7ff ff76 	bl	80101cc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80102e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d002      	beq.n	80102ec <pbuf_alloc+0x78>
            pbuf_free(p);
 80102e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80102e8:	f000 fada 	bl	80108a0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80102ec:	2300      	movs	r3, #0
 80102ee:	e0a7      	b.n	8010440 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80102f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80102f2:	3303      	adds	r3, #3
 80102f4:	b29b      	uxth	r3, r3
 80102f6:	f023 0303 	bic.w	r3, r3, #3
 80102fa:	b29b      	uxth	r3, r3
 80102fc:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8010300:	b29b      	uxth	r3, r3
 8010302:	8b7a      	ldrh	r2, [r7, #26]
 8010304:	4293      	cmp	r3, r2
 8010306:	bf28      	it	cs
 8010308:	4613      	movcs	r3, r2
 801030a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801030c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801030e:	3310      	adds	r3, #16
 8010310:	693a      	ldr	r2, [r7, #16]
 8010312:	4413      	add	r3, r2
 8010314:	3303      	adds	r3, #3
 8010316:	f023 0303 	bic.w	r3, r3, #3
 801031a:	4618      	mov	r0, r3
 801031c:	89f9      	ldrh	r1, [r7, #14]
 801031e:	8b7a      	ldrh	r2, [r7, #26]
 8010320:	2300      	movs	r3, #0
 8010322:	9301      	str	r3, [sp, #4]
 8010324:	887b      	ldrh	r3, [r7, #2]
 8010326:	9300      	str	r3, [sp, #0]
 8010328:	460b      	mov	r3, r1
 801032a:	4601      	mov	r1, r0
 801032c:	6938      	ldr	r0, [r7, #16]
 801032e:	f7ff ff77 	bl	8010220 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8010332:	693b      	ldr	r3, [r7, #16]
 8010334:	685b      	ldr	r3, [r3, #4]
 8010336:	f003 0303 	and.w	r3, r3, #3
 801033a:	2b00      	cmp	r3, #0
 801033c:	d006      	beq.n	801034c <pbuf_alloc+0xd8>
 801033e:	4b42      	ldr	r3, [pc, #264]	; (8010448 <pbuf_alloc+0x1d4>)
 8010340:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010344:	4941      	ldr	r1, [pc, #260]	; (801044c <pbuf_alloc+0x1d8>)
 8010346:	4842      	ldr	r0, [pc, #264]	; (8010450 <pbuf_alloc+0x1dc>)
 8010348:	f013 fc4a 	bl	8023be0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801034c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801034e:	3303      	adds	r3, #3
 8010350:	f023 0303 	bic.w	r3, r3, #3
 8010354:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8010358:	d106      	bne.n	8010368 <pbuf_alloc+0xf4>
 801035a:	4b3b      	ldr	r3, [pc, #236]	; (8010448 <pbuf_alloc+0x1d4>)
 801035c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8010360:	493c      	ldr	r1, [pc, #240]	; (8010454 <pbuf_alloc+0x1e0>)
 8010362:	483b      	ldr	r0, [pc, #236]	; (8010450 <pbuf_alloc+0x1dc>)
 8010364:	f013 fc3c 	bl	8023be0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8010368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801036a:	2b00      	cmp	r3, #0
 801036c:	d102      	bne.n	8010374 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801036e:	693b      	ldr	r3, [r7, #16]
 8010370:	627b      	str	r3, [r7, #36]	; 0x24
 8010372:	e002      	b.n	801037a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8010374:	69fb      	ldr	r3, [r7, #28]
 8010376:	693a      	ldr	r2, [r7, #16]
 8010378:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801037a:	693b      	ldr	r3, [r7, #16]
 801037c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801037e:	8b7a      	ldrh	r2, [r7, #26]
 8010380:	89fb      	ldrh	r3, [r7, #14]
 8010382:	1ad3      	subs	r3, r2, r3
 8010384:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8010386:	2300      	movs	r3, #0
 8010388:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 801038a:	8b7b      	ldrh	r3, [r7, #26]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d19e      	bne.n	80102ce <pbuf_alloc+0x5a>
      break;
 8010390:	e055      	b.n	801043e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8010392:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010394:	3303      	adds	r3, #3
 8010396:	b29b      	uxth	r3, r3
 8010398:	f023 0303 	bic.w	r3, r3, #3
 801039c:	b29a      	uxth	r2, r3
 801039e:	88bb      	ldrh	r3, [r7, #4]
 80103a0:	3303      	adds	r3, #3
 80103a2:	b29b      	uxth	r3, r3
 80103a4:	f023 0303 	bic.w	r3, r3, #3
 80103a8:	b29b      	uxth	r3, r3
 80103aa:	4413      	add	r3, r2
 80103ac:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80103ae:	8b3b      	ldrh	r3, [r7, #24]
 80103b0:	3310      	adds	r3, #16
 80103b2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80103b4:	8b3a      	ldrh	r2, [r7, #24]
 80103b6:	88bb      	ldrh	r3, [r7, #4]
 80103b8:	3303      	adds	r3, #3
 80103ba:	f023 0303 	bic.w	r3, r3, #3
 80103be:	429a      	cmp	r2, r3
 80103c0:	d306      	bcc.n	80103d0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80103c2:	8afa      	ldrh	r2, [r7, #22]
 80103c4:	88bb      	ldrh	r3, [r7, #4]
 80103c6:	3303      	adds	r3, #3
 80103c8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80103cc:	429a      	cmp	r2, r3
 80103ce:	d201      	bcs.n	80103d4 <pbuf_alloc+0x160>
        return NULL;
 80103d0:	2300      	movs	r3, #0
 80103d2:	e035      	b.n	8010440 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80103d4:	8afb      	ldrh	r3, [r7, #22]
 80103d6:	4618      	mov	r0, r3
 80103d8:	f7ff f962 	bl	800f6a0 <mem_malloc>
 80103dc:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80103de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d101      	bne.n	80103e8 <pbuf_alloc+0x174>
        return NULL;
 80103e4:	2300      	movs	r3, #0
 80103e6:	e02b      	b.n	8010440 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80103e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80103ea:	3310      	adds	r3, #16
 80103ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80103ee:	4413      	add	r3, r2
 80103f0:	3303      	adds	r3, #3
 80103f2:	f023 0303 	bic.w	r3, r3, #3
 80103f6:	4618      	mov	r0, r3
 80103f8:	88b9      	ldrh	r1, [r7, #4]
 80103fa:	88ba      	ldrh	r2, [r7, #4]
 80103fc:	2300      	movs	r3, #0
 80103fe:	9301      	str	r3, [sp, #4]
 8010400:	887b      	ldrh	r3, [r7, #2]
 8010402:	9300      	str	r3, [sp, #0]
 8010404:	460b      	mov	r3, r1
 8010406:	4601      	mov	r1, r0
 8010408:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801040a:	f7ff ff09 	bl	8010220 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801040e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010410:	685b      	ldr	r3, [r3, #4]
 8010412:	f003 0303 	and.w	r3, r3, #3
 8010416:	2b00      	cmp	r3, #0
 8010418:	d010      	beq.n	801043c <pbuf_alloc+0x1c8>
 801041a:	4b0b      	ldr	r3, [pc, #44]	; (8010448 <pbuf_alloc+0x1d4>)
 801041c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8010420:	490d      	ldr	r1, [pc, #52]	; (8010458 <pbuf_alloc+0x1e4>)
 8010422:	480b      	ldr	r0, [pc, #44]	; (8010450 <pbuf_alloc+0x1dc>)
 8010424:	f013 fbdc 	bl	8023be0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8010428:	e008      	b.n	801043c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801042a:	4b07      	ldr	r3, [pc, #28]	; (8010448 <pbuf_alloc+0x1d4>)
 801042c:	f240 1227 	movw	r2, #295	; 0x127
 8010430:	490a      	ldr	r1, [pc, #40]	; (801045c <pbuf_alloc+0x1e8>)
 8010432:	4807      	ldr	r0, [pc, #28]	; (8010450 <pbuf_alloc+0x1dc>)
 8010434:	f013 fbd4 	bl	8023be0 <iprintf>
      return NULL;
 8010438:	2300      	movs	r3, #0
 801043a:	e001      	b.n	8010440 <pbuf_alloc+0x1cc>
      break;
 801043c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801043e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010440:	4618      	mov	r0, r3
 8010442:	3728      	adds	r7, #40	; 0x28
 8010444:	46bd      	mov	sp, r7
 8010446:	bd80      	pop	{r7, pc}
 8010448:	08026998 	.word	0x08026998
 801044c:	080269c8 	.word	0x080269c8
 8010450:	080269f8 	.word	0x080269f8
 8010454:	08026a20 	.word	0x08026a20
 8010458:	08026a54 	.word	0x08026a54
 801045c:	08026a80 	.word	0x08026a80

08010460 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b086      	sub	sp, #24
 8010464:	af02      	add	r7, sp, #8
 8010466:	6078      	str	r0, [r7, #4]
 8010468:	460b      	mov	r3, r1
 801046a:	807b      	strh	r3, [r7, #2]
 801046c:	4613      	mov	r3, r2
 801046e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8010470:	883b      	ldrh	r3, [r7, #0]
 8010472:	2b41      	cmp	r3, #65	; 0x41
 8010474:	d009      	beq.n	801048a <pbuf_alloc_reference+0x2a>
 8010476:	883b      	ldrh	r3, [r7, #0]
 8010478:	2b01      	cmp	r3, #1
 801047a:	d006      	beq.n	801048a <pbuf_alloc_reference+0x2a>
 801047c:	4b0f      	ldr	r3, [pc, #60]	; (80104bc <pbuf_alloc_reference+0x5c>)
 801047e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8010482:	490f      	ldr	r1, [pc, #60]	; (80104c0 <pbuf_alloc_reference+0x60>)
 8010484:	480f      	ldr	r0, [pc, #60]	; (80104c4 <pbuf_alloc_reference+0x64>)
 8010486:	f013 fbab 	bl	8023be0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801048a:	200d      	movs	r0, #13
 801048c:	f7ff fa8a 	bl	800f9a4 <memp_malloc>
 8010490:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d101      	bne.n	801049c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8010498:	2300      	movs	r3, #0
 801049a:	e00b      	b.n	80104b4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 801049c:	8879      	ldrh	r1, [r7, #2]
 801049e:	887a      	ldrh	r2, [r7, #2]
 80104a0:	2300      	movs	r3, #0
 80104a2:	9301      	str	r3, [sp, #4]
 80104a4:	883b      	ldrh	r3, [r7, #0]
 80104a6:	9300      	str	r3, [sp, #0]
 80104a8:	460b      	mov	r3, r1
 80104aa:	6879      	ldr	r1, [r7, #4]
 80104ac:	68f8      	ldr	r0, [r7, #12]
 80104ae:	f7ff feb7 	bl	8010220 <pbuf_init_alloced_pbuf>
  return p;
 80104b2:	68fb      	ldr	r3, [r7, #12]
}
 80104b4:	4618      	mov	r0, r3
 80104b6:	3710      	adds	r7, #16
 80104b8:	46bd      	mov	sp, r7
 80104ba:	bd80      	pop	{r7, pc}
 80104bc:	08026998 	.word	0x08026998
 80104c0:	08026a9c 	.word	0x08026a9c
 80104c4:	080269f8 	.word	0x080269f8

080104c8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b088      	sub	sp, #32
 80104cc:	af02      	add	r7, sp, #8
 80104ce:	607b      	str	r3, [r7, #4]
 80104d0:	4603      	mov	r3, r0
 80104d2:	73fb      	strb	r3, [r7, #15]
 80104d4:	460b      	mov	r3, r1
 80104d6:	81bb      	strh	r3, [r7, #12]
 80104d8:	4613      	mov	r3, r2
 80104da:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80104dc:	7bfb      	ldrb	r3, [r7, #15]
 80104de:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80104e0:	8a7b      	ldrh	r3, [r7, #18]
 80104e2:	3303      	adds	r3, #3
 80104e4:	f023 0203 	bic.w	r2, r3, #3
 80104e8:	89bb      	ldrh	r3, [r7, #12]
 80104ea:	441a      	add	r2, r3
 80104ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80104ee:	429a      	cmp	r2, r3
 80104f0:	d901      	bls.n	80104f6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80104f2:	2300      	movs	r3, #0
 80104f4:	e018      	b.n	8010528 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80104f6:	6a3b      	ldr	r3, [r7, #32]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d007      	beq.n	801050c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80104fc:	8a7b      	ldrh	r3, [r7, #18]
 80104fe:	3303      	adds	r3, #3
 8010500:	f023 0303 	bic.w	r3, r3, #3
 8010504:	6a3a      	ldr	r2, [r7, #32]
 8010506:	4413      	add	r3, r2
 8010508:	617b      	str	r3, [r7, #20]
 801050a:	e001      	b.n	8010510 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801050c:	2300      	movs	r3, #0
 801050e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8010510:	6878      	ldr	r0, [r7, #4]
 8010512:	89b9      	ldrh	r1, [r7, #12]
 8010514:	89ba      	ldrh	r2, [r7, #12]
 8010516:	2302      	movs	r3, #2
 8010518:	9301      	str	r3, [sp, #4]
 801051a:	897b      	ldrh	r3, [r7, #10]
 801051c:	9300      	str	r3, [sp, #0]
 801051e:	460b      	mov	r3, r1
 8010520:	6979      	ldr	r1, [r7, #20]
 8010522:	f7ff fe7d 	bl	8010220 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8010526:	687b      	ldr	r3, [r7, #4]
}
 8010528:	4618      	mov	r0, r3
 801052a:	3718      	adds	r7, #24
 801052c:	46bd      	mov	sp, r7
 801052e:	bd80      	pop	{r7, pc}

08010530 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8010530:	b580      	push	{r7, lr}
 8010532:	b084      	sub	sp, #16
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
 8010538:	460b      	mov	r3, r1
 801053a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d106      	bne.n	8010550 <pbuf_realloc+0x20>
 8010542:	4b3a      	ldr	r3, [pc, #232]	; (801062c <pbuf_realloc+0xfc>)
 8010544:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8010548:	4939      	ldr	r1, [pc, #228]	; (8010630 <pbuf_realloc+0x100>)
 801054a:	483a      	ldr	r0, [pc, #232]	; (8010634 <pbuf_realloc+0x104>)
 801054c:	f013 fb48 	bl	8023be0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	891b      	ldrh	r3, [r3, #8]
 8010554:	887a      	ldrh	r2, [r7, #2]
 8010556:	429a      	cmp	r2, r3
 8010558:	d263      	bcs.n	8010622 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	891a      	ldrh	r2, [r3, #8]
 801055e:	887b      	ldrh	r3, [r7, #2]
 8010560:	1ad3      	subs	r3, r2, r3
 8010562:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8010564:	887b      	ldrh	r3, [r7, #2]
 8010566:	817b      	strh	r3, [r7, #10]
  q = p;
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801056c:	e018      	b.n	80105a0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	895b      	ldrh	r3, [r3, #10]
 8010572:	897a      	ldrh	r2, [r7, #10]
 8010574:	1ad3      	subs	r3, r2, r3
 8010576:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	891a      	ldrh	r2, [r3, #8]
 801057c:	893b      	ldrh	r3, [r7, #8]
 801057e:	1ad3      	subs	r3, r2, r3
 8010580:	b29a      	uxth	r2, r3
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d106      	bne.n	80105a0 <pbuf_realloc+0x70>
 8010592:	4b26      	ldr	r3, [pc, #152]	; (801062c <pbuf_realloc+0xfc>)
 8010594:	f240 12af 	movw	r2, #431	; 0x1af
 8010598:	4927      	ldr	r1, [pc, #156]	; (8010638 <pbuf_realloc+0x108>)
 801059a:	4826      	ldr	r0, [pc, #152]	; (8010634 <pbuf_realloc+0x104>)
 801059c:	f013 fb20 	bl	8023be0 <iprintf>
  while (rem_len > q->len) {
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	895b      	ldrh	r3, [r3, #10]
 80105a4:	897a      	ldrh	r2, [r7, #10]
 80105a6:	429a      	cmp	r2, r3
 80105a8:	d8e1      	bhi.n	801056e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	7b1b      	ldrb	r3, [r3, #12]
 80105ae:	f003 030f 	and.w	r3, r3, #15
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d121      	bne.n	80105fa <pbuf_realloc+0xca>
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	895b      	ldrh	r3, [r3, #10]
 80105ba:	897a      	ldrh	r2, [r7, #10]
 80105bc:	429a      	cmp	r2, r3
 80105be:	d01c      	beq.n	80105fa <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	7b5b      	ldrb	r3, [r3, #13]
 80105c4:	f003 0302 	and.w	r3, r3, #2
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d116      	bne.n	80105fa <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	685a      	ldr	r2, [r3, #4]
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	1ad3      	subs	r3, r2, r3
 80105d4:	b29a      	uxth	r2, r3
 80105d6:	897b      	ldrh	r3, [r7, #10]
 80105d8:	4413      	add	r3, r2
 80105da:	b29b      	uxth	r3, r3
 80105dc:	4619      	mov	r1, r3
 80105de:	68f8      	ldr	r0, [r7, #12]
 80105e0:	f7fe ff54 	bl	800f48c <mem_trim>
 80105e4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d106      	bne.n	80105fa <pbuf_realloc+0xca>
 80105ec:	4b0f      	ldr	r3, [pc, #60]	; (801062c <pbuf_realloc+0xfc>)
 80105ee:	f240 12bd 	movw	r2, #445	; 0x1bd
 80105f2:	4912      	ldr	r1, [pc, #72]	; (801063c <pbuf_realloc+0x10c>)
 80105f4:	480f      	ldr	r0, [pc, #60]	; (8010634 <pbuf_realloc+0x104>)
 80105f6:	f013 faf3 	bl	8023be0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	897a      	ldrh	r2, [r7, #10]
 80105fe:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	895a      	ldrh	r2, [r3, #10]
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d004      	beq.n	801061a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	4618      	mov	r0, r3
 8010616:	f000 f943 	bl	80108a0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	2200      	movs	r2, #0
 801061e:	601a      	str	r2, [r3, #0]
 8010620:	e000      	b.n	8010624 <pbuf_realloc+0xf4>
    return;
 8010622:	bf00      	nop

}
 8010624:	3710      	adds	r7, #16
 8010626:	46bd      	mov	sp, r7
 8010628:	bd80      	pop	{r7, pc}
 801062a:	bf00      	nop
 801062c:	08026998 	.word	0x08026998
 8010630:	08026ab0 	.word	0x08026ab0
 8010634:	080269f8 	.word	0x080269f8
 8010638:	08026ac8 	.word	0x08026ac8
 801063c:	08026ae0 	.word	0x08026ae0

08010640 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8010640:	b580      	push	{r7, lr}
 8010642:	b086      	sub	sp, #24
 8010644:	af00      	add	r7, sp, #0
 8010646:	60f8      	str	r0, [r7, #12]
 8010648:	60b9      	str	r1, [r7, #8]
 801064a:	4613      	mov	r3, r2
 801064c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d106      	bne.n	8010662 <pbuf_add_header_impl+0x22>
 8010654:	4b2b      	ldr	r3, [pc, #172]	; (8010704 <pbuf_add_header_impl+0xc4>)
 8010656:	f240 12df 	movw	r2, #479	; 0x1df
 801065a:	492b      	ldr	r1, [pc, #172]	; (8010708 <pbuf_add_header_impl+0xc8>)
 801065c:	482b      	ldr	r0, [pc, #172]	; (801070c <pbuf_add_header_impl+0xcc>)
 801065e:	f013 fabf 	bl	8023be0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	2b00      	cmp	r3, #0
 8010666:	d003      	beq.n	8010670 <pbuf_add_header_impl+0x30>
 8010668:	68bb      	ldr	r3, [r7, #8]
 801066a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801066e:	d301      	bcc.n	8010674 <pbuf_add_header_impl+0x34>
    return 1;
 8010670:	2301      	movs	r3, #1
 8010672:	e043      	b.n	80106fc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8010674:	68bb      	ldr	r3, [r7, #8]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d101      	bne.n	801067e <pbuf_add_header_impl+0x3e>
    return 0;
 801067a:	2300      	movs	r3, #0
 801067c:	e03e      	b.n	80106fc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801067e:	68bb      	ldr	r3, [r7, #8]
 8010680:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	891a      	ldrh	r2, [r3, #8]
 8010686:	8a7b      	ldrh	r3, [r7, #18]
 8010688:	4413      	add	r3, r2
 801068a:	b29b      	uxth	r3, r3
 801068c:	8a7a      	ldrh	r2, [r7, #18]
 801068e:	429a      	cmp	r2, r3
 8010690:	d901      	bls.n	8010696 <pbuf_add_header_impl+0x56>
    return 1;
 8010692:	2301      	movs	r3, #1
 8010694:	e032      	b.n	80106fc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	7b1b      	ldrb	r3, [r3, #12]
 801069a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801069c:	8a3b      	ldrh	r3, [r7, #16]
 801069e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d00c      	beq.n	80106c0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	685a      	ldr	r2, [r3, #4]
 80106aa:	68bb      	ldr	r3, [r7, #8]
 80106ac:	425b      	negs	r3, r3
 80106ae:	4413      	add	r3, r2
 80106b0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	3310      	adds	r3, #16
 80106b6:	697a      	ldr	r2, [r7, #20]
 80106b8:	429a      	cmp	r2, r3
 80106ba:	d20d      	bcs.n	80106d8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80106bc:	2301      	movs	r3, #1
 80106be:	e01d      	b.n	80106fc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80106c0:	79fb      	ldrb	r3, [r7, #7]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d006      	beq.n	80106d4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	685a      	ldr	r2, [r3, #4]
 80106ca:	68bb      	ldr	r3, [r7, #8]
 80106cc:	425b      	negs	r3, r3
 80106ce:	4413      	add	r3, r2
 80106d0:	617b      	str	r3, [r7, #20]
 80106d2:	e001      	b.n	80106d8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80106d4:	2301      	movs	r3, #1
 80106d6:	e011      	b.n	80106fc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	697a      	ldr	r2, [r7, #20]
 80106dc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	895a      	ldrh	r2, [r3, #10]
 80106e2:	8a7b      	ldrh	r3, [r7, #18]
 80106e4:	4413      	add	r3, r2
 80106e6:	b29a      	uxth	r2, r3
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	891a      	ldrh	r2, [r3, #8]
 80106f0:	8a7b      	ldrh	r3, [r7, #18]
 80106f2:	4413      	add	r3, r2
 80106f4:	b29a      	uxth	r2, r3
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	811a      	strh	r2, [r3, #8]


  return 0;
 80106fa:	2300      	movs	r3, #0
}
 80106fc:	4618      	mov	r0, r3
 80106fe:	3718      	adds	r7, #24
 8010700:	46bd      	mov	sp, r7
 8010702:	bd80      	pop	{r7, pc}
 8010704:	08026998 	.word	0x08026998
 8010708:	08026afc 	.word	0x08026afc
 801070c:	080269f8 	.word	0x080269f8

08010710 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b082      	sub	sp, #8
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
 8010718:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801071a:	2200      	movs	r2, #0
 801071c:	6839      	ldr	r1, [r7, #0]
 801071e:	6878      	ldr	r0, [r7, #4]
 8010720:	f7ff ff8e 	bl	8010640 <pbuf_add_header_impl>
 8010724:	4603      	mov	r3, r0
}
 8010726:	4618      	mov	r0, r3
 8010728:	3708      	adds	r7, #8
 801072a:	46bd      	mov	sp, r7
 801072c:	bd80      	pop	{r7, pc}
	...

08010730 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b084      	sub	sp, #16
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
 8010738:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d106      	bne.n	801074e <pbuf_remove_header+0x1e>
 8010740:	4b20      	ldr	r3, [pc, #128]	; (80107c4 <pbuf_remove_header+0x94>)
 8010742:	f240 224b 	movw	r2, #587	; 0x24b
 8010746:	4920      	ldr	r1, [pc, #128]	; (80107c8 <pbuf_remove_header+0x98>)
 8010748:	4820      	ldr	r0, [pc, #128]	; (80107cc <pbuf_remove_header+0x9c>)
 801074a:	f013 fa49 	bl	8023be0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d003      	beq.n	801075c <pbuf_remove_header+0x2c>
 8010754:	683b      	ldr	r3, [r7, #0]
 8010756:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801075a:	d301      	bcc.n	8010760 <pbuf_remove_header+0x30>
    return 1;
 801075c:	2301      	movs	r3, #1
 801075e:	e02c      	b.n	80107ba <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d101      	bne.n	801076a <pbuf_remove_header+0x3a>
    return 0;
 8010766:	2300      	movs	r3, #0
 8010768:	e027      	b.n	80107ba <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801076a:	683b      	ldr	r3, [r7, #0]
 801076c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	895b      	ldrh	r3, [r3, #10]
 8010772:	89fa      	ldrh	r2, [r7, #14]
 8010774:	429a      	cmp	r2, r3
 8010776:	d908      	bls.n	801078a <pbuf_remove_header+0x5a>
 8010778:	4b12      	ldr	r3, [pc, #72]	; (80107c4 <pbuf_remove_header+0x94>)
 801077a:	f240 2255 	movw	r2, #597	; 0x255
 801077e:	4914      	ldr	r1, [pc, #80]	; (80107d0 <pbuf_remove_header+0xa0>)
 8010780:	4812      	ldr	r0, [pc, #72]	; (80107cc <pbuf_remove_header+0x9c>)
 8010782:	f013 fa2d 	bl	8023be0 <iprintf>
 8010786:	2301      	movs	r3, #1
 8010788:	e017      	b.n	80107ba <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	685b      	ldr	r3, [r3, #4]
 801078e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	685a      	ldr	r2, [r3, #4]
 8010794:	683b      	ldr	r3, [r7, #0]
 8010796:	441a      	add	r2, r3
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	895a      	ldrh	r2, [r3, #10]
 80107a0:	89fb      	ldrh	r3, [r7, #14]
 80107a2:	1ad3      	subs	r3, r2, r3
 80107a4:	b29a      	uxth	r2, r3
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	891a      	ldrh	r2, [r3, #8]
 80107ae:	89fb      	ldrh	r3, [r7, #14]
 80107b0:	1ad3      	subs	r3, r2, r3
 80107b2:	b29a      	uxth	r2, r3
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80107b8:	2300      	movs	r3, #0
}
 80107ba:	4618      	mov	r0, r3
 80107bc:	3710      	adds	r7, #16
 80107be:	46bd      	mov	sp, r7
 80107c0:	bd80      	pop	{r7, pc}
 80107c2:	bf00      	nop
 80107c4:	08026998 	.word	0x08026998
 80107c8:	08026afc 	.word	0x08026afc
 80107cc:	080269f8 	.word	0x080269f8
 80107d0:	08026b08 	.word	0x08026b08

080107d4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b082      	sub	sp, #8
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
 80107dc:	460b      	mov	r3, r1
 80107de:	807b      	strh	r3, [r7, #2]
 80107e0:	4613      	mov	r3, r2
 80107e2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80107e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	da08      	bge.n	80107fe <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80107ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80107f0:	425b      	negs	r3, r3
 80107f2:	4619      	mov	r1, r3
 80107f4:	6878      	ldr	r0, [r7, #4]
 80107f6:	f7ff ff9b 	bl	8010730 <pbuf_remove_header>
 80107fa:	4603      	mov	r3, r0
 80107fc:	e007      	b.n	801080e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80107fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010802:	787a      	ldrb	r2, [r7, #1]
 8010804:	4619      	mov	r1, r3
 8010806:	6878      	ldr	r0, [r7, #4]
 8010808:	f7ff ff1a 	bl	8010640 <pbuf_add_header_impl>
 801080c:	4603      	mov	r3, r0
  }
}
 801080e:	4618      	mov	r0, r3
 8010810:	3708      	adds	r7, #8
 8010812:	46bd      	mov	sp, r7
 8010814:	bd80      	pop	{r7, pc}

08010816 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8010816:	b580      	push	{r7, lr}
 8010818:	b082      	sub	sp, #8
 801081a:	af00      	add	r7, sp, #0
 801081c:	6078      	str	r0, [r7, #4]
 801081e:	460b      	mov	r3, r1
 8010820:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8010822:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010826:	2201      	movs	r2, #1
 8010828:	4619      	mov	r1, r3
 801082a:	6878      	ldr	r0, [r7, #4]
 801082c:	f7ff ffd2 	bl	80107d4 <pbuf_header_impl>
 8010830:	4603      	mov	r3, r0
}
 8010832:	4618      	mov	r0, r3
 8010834:	3708      	adds	r7, #8
 8010836:	46bd      	mov	sp, r7
 8010838:	bd80      	pop	{r7, pc}

0801083a <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 801083a:	b580      	push	{r7, lr}
 801083c:	b086      	sub	sp, #24
 801083e:	af00      	add	r7, sp, #0
 8010840:	6078      	str	r0, [r7, #4]
 8010842:	460b      	mov	r3, r1
 8010844:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 801084a:	887b      	ldrh	r3, [r7, #2]
 801084c:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 801084e:	e01c      	b.n	801088a <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 8010850:	697b      	ldr	r3, [r7, #20]
 8010852:	895b      	ldrh	r3, [r3, #10]
 8010854:	8a7a      	ldrh	r2, [r7, #18]
 8010856:	429a      	cmp	r2, r3
 8010858:	d310      	bcc.n	801087c <pbuf_free_header+0x42>
      struct pbuf *f = p;
 801085a:	697b      	ldr	r3, [r7, #20]
 801085c:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 801085e:	697b      	ldr	r3, [r7, #20]
 8010860:	895b      	ldrh	r3, [r3, #10]
 8010862:	8a7a      	ldrh	r2, [r7, #18]
 8010864:	1ad3      	subs	r3, r2, r3
 8010866:	827b      	strh	r3, [r7, #18]
      p = p->next;
 8010868:	697b      	ldr	r3, [r7, #20]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	617b      	str	r3, [r7, #20]
      f->next = 0;
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	2200      	movs	r2, #0
 8010872:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 8010874:	68f8      	ldr	r0, [r7, #12]
 8010876:	f000 f813 	bl	80108a0 <pbuf_free>
 801087a:	e006      	b.n	801088a <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 801087c:	8a7b      	ldrh	r3, [r7, #18]
 801087e:	4619      	mov	r1, r3
 8010880:	6978      	ldr	r0, [r7, #20]
 8010882:	f7ff ff55 	bl	8010730 <pbuf_remove_header>
      free_left = 0;
 8010886:	2300      	movs	r3, #0
 8010888:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 801088a:	8a7b      	ldrh	r3, [r7, #18]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d002      	beq.n	8010896 <pbuf_free_header+0x5c>
 8010890:	697b      	ldr	r3, [r7, #20]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d1dc      	bne.n	8010850 <pbuf_free_header+0x16>
    }
  }
  return p;
 8010896:	697b      	ldr	r3, [r7, #20]
}
 8010898:	4618      	mov	r0, r3
 801089a:	3718      	adds	r7, #24
 801089c:	46bd      	mov	sp, r7
 801089e:	bd80      	pop	{r7, pc}

080108a0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b088      	sub	sp, #32
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d10b      	bne.n	80108c6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d106      	bne.n	80108c2 <pbuf_free+0x22>
 80108b4:	4b3b      	ldr	r3, [pc, #236]	; (80109a4 <pbuf_free+0x104>)
 80108b6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80108ba:	493b      	ldr	r1, [pc, #236]	; (80109a8 <pbuf_free+0x108>)
 80108bc:	483b      	ldr	r0, [pc, #236]	; (80109ac <pbuf_free+0x10c>)
 80108be:	f013 f98f 	bl	8023be0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80108c2:	2300      	movs	r3, #0
 80108c4:	e069      	b.n	801099a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80108c6:	2300      	movs	r3, #0
 80108c8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80108ca:	e062      	b.n	8010992 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80108cc:	f00a ff22 	bl	801b714 <sys_arch_protect>
 80108d0:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	7b9b      	ldrb	r3, [r3, #14]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d106      	bne.n	80108e8 <pbuf_free+0x48>
 80108da:	4b32      	ldr	r3, [pc, #200]	; (80109a4 <pbuf_free+0x104>)
 80108dc:	f240 22f1 	movw	r2, #753	; 0x2f1
 80108e0:	4933      	ldr	r1, [pc, #204]	; (80109b0 <pbuf_free+0x110>)
 80108e2:	4832      	ldr	r0, [pc, #200]	; (80109ac <pbuf_free+0x10c>)
 80108e4:	f013 f97c 	bl	8023be0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	7b9b      	ldrb	r3, [r3, #14]
 80108ec:	3b01      	subs	r3, #1
 80108ee:	b2da      	uxtb	r2, r3
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	739a      	strb	r2, [r3, #14]
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	7b9b      	ldrb	r3, [r3, #14]
 80108f8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80108fa:	69b8      	ldr	r0, [r7, #24]
 80108fc:	f00a ff18 	bl	801b730 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8010900:	7dfb      	ldrb	r3, [r7, #23]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d143      	bne.n	801098e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	7b1b      	ldrb	r3, [r3, #12]
 8010910:	f003 030f 	and.w	r3, r3, #15
 8010914:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	7b5b      	ldrb	r3, [r3, #13]
 801091a:	f003 0302 	and.w	r3, r3, #2
 801091e:	2b00      	cmp	r3, #0
 8010920:	d011      	beq.n	8010946 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8010926:	68bb      	ldr	r3, [r7, #8]
 8010928:	691b      	ldr	r3, [r3, #16]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d106      	bne.n	801093c <pbuf_free+0x9c>
 801092e:	4b1d      	ldr	r3, [pc, #116]	; (80109a4 <pbuf_free+0x104>)
 8010930:	f240 22ff 	movw	r2, #767	; 0x2ff
 8010934:	491f      	ldr	r1, [pc, #124]	; (80109b4 <pbuf_free+0x114>)
 8010936:	481d      	ldr	r0, [pc, #116]	; (80109ac <pbuf_free+0x10c>)
 8010938:	f013 f952 	bl	8023be0 <iprintf>
        pc->custom_free_function(p);
 801093c:	68bb      	ldr	r3, [r7, #8]
 801093e:	691b      	ldr	r3, [r3, #16]
 8010940:	6878      	ldr	r0, [r7, #4]
 8010942:	4798      	blx	r3
 8010944:	e01d      	b.n	8010982 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8010946:	7bfb      	ldrb	r3, [r7, #15]
 8010948:	2b02      	cmp	r3, #2
 801094a:	d104      	bne.n	8010956 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 801094c:	6879      	ldr	r1, [r7, #4]
 801094e:	200e      	movs	r0, #14
 8010950:	f7ff f87a 	bl	800fa48 <memp_free>
 8010954:	e015      	b.n	8010982 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8010956:	7bfb      	ldrb	r3, [r7, #15]
 8010958:	2b01      	cmp	r3, #1
 801095a:	d104      	bne.n	8010966 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 801095c:	6879      	ldr	r1, [r7, #4]
 801095e:	200d      	movs	r0, #13
 8010960:	f7ff f872 	bl	800fa48 <memp_free>
 8010964:	e00d      	b.n	8010982 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8010966:	7bfb      	ldrb	r3, [r7, #15]
 8010968:	2b00      	cmp	r3, #0
 801096a:	d103      	bne.n	8010974 <pbuf_free+0xd4>
          mem_free(p);
 801096c:	6878      	ldr	r0, [r7, #4]
 801096e:	f7fe fcfd 	bl	800f36c <mem_free>
 8010972:	e006      	b.n	8010982 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8010974:	4b0b      	ldr	r3, [pc, #44]	; (80109a4 <pbuf_free+0x104>)
 8010976:	f240 320f 	movw	r2, #783	; 0x30f
 801097a:	490f      	ldr	r1, [pc, #60]	; (80109b8 <pbuf_free+0x118>)
 801097c:	480b      	ldr	r0, [pc, #44]	; (80109ac <pbuf_free+0x10c>)
 801097e:	f013 f92f 	bl	8023be0 <iprintf>
        }
      }
      count++;
 8010982:	7ffb      	ldrb	r3, [r7, #31]
 8010984:	3301      	adds	r3, #1
 8010986:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8010988:	693b      	ldr	r3, [r7, #16]
 801098a:	607b      	str	r3, [r7, #4]
 801098c:	e001      	b.n	8010992 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801098e:	2300      	movs	r3, #0
 8010990:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	2b00      	cmp	r3, #0
 8010996:	d199      	bne.n	80108cc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8010998:	7ffb      	ldrb	r3, [r7, #31]
}
 801099a:	4618      	mov	r0, r3
 801099c:	3720      	adds	r7, #32
 801099e:	46bd      	mov	sp, r7
 80109a0:	bd80      	pop	{r7, pc}
 80109a2:	bf00      	nop
 80109a4:	08026998 	.word	0x08026998
 80109a8:	08026afc 	.word	0x08026afc
 80109ac:	080269f8 	.word	0x080269f8
 80109b0:	08026b28 	.word	0x08026b28
 80109b4:	08026b40 	.word	0x08026b40
 80109b8:	08026b64 	.word	0x08026b64

080109bc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80109bc:	b480      	push	{r7}
 80109be:	b085      	sub	sp, #20
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80109c4:	2300      	movs	r3, #0
 80109c6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80109c8:	e005      	b.n	80109d6 <pbuf_clen+0x1a>
    ++len;
 80109ca:	89fb      	ldrh	r3, [r7, #14]
 80109cc:	3301      	adds	r3, #1
 80109ce:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d1f6      	bne.n	80109ca <pbuf_clen+0xe>
  }
  return len;
 80109dc:	89fb      	ldrh	r3, [r7, #14]
}
 80109de:	4618      	mov	r0, r3
 80109e0:	3714      	adds	r7, #20
 80109e2:	46bd      	mov	sp, r7
 80109e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e8:	4770      	bx	lr
	...

080109ec <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b084      	sub	sp, #16
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d016      	beq.n	8010a28 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80109fa:	f00a fe8b 	bl	801b714 <sys_arch_protect>
 80109fe:	60f8      	str	r0, [r7, #12]
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	7b9b      	ldrb	r3, [r3, #14]
 8010a04:	3301      	adds	r3, #1
 8010a06:	b2da      	uxtb	r2, r3
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	739a      	strb	r2, [r3, #14]
 8010a0c:	68f8      	ldr	r0, [r7, #12]
 8010a0e:	f00a fe8f 	bl	801b730 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	7b9b      	ldrb	r3, [r3, #14]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d106      	bne.n	8010a28 <pbuf_ref+0x3c>
 8010a1a:	4b05      	ldr	r3, [pc, #20]	; (8010a30 <pbuf_ref+0x44>)
 8010a1c:	f240 3242 	movw	r2, #834	; 0x342
 8010a20:	4904      	ldr	r1, [pc, #16]	; (8010a34 <pbuf_ref+0x48>)
 8010a22:	4805      	ldr	r0, [pc, #20]	; (8010a38 <pbuf_ref+0x4c>)
 8010a24:	f013 f8dc 	bl	8023be0 <iprintf>
  }
}
 8010a28:	bf00      	nop
 8010a2a:	3710      	adds	r7, #16
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	bd80      	pop	{r7, pc}
 8010a30:	08026998 	.word	0x08026998
 8010a34:	08026b78 	.word	0x08026b78
 8010a38:	080269f8 	.word	0x080269f8

08010a3c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b084      	sub	sp, #16
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	6078      	str	r0, [r7, #4]
 8010a44:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d002      	beq.n	8010a52 <pbuf_cat+0x16>
 8010a4c:	683b      	ldr	r3, [r7, #0]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d107      	bne.n	8010a62 <pbuf_cat+0x26>
 8010a52:	4b20      	ldr	r3, [pc, #128]	; (8010ad4 <pbuf_cat+0x98>)
 8010a54:	f240 3259 	movw	r2, #857	; 0x359
 8010a58:	491f      	ldr	r1, [pc, #124]	; (8010ad8 <pbuf_cat+0x9c>)
 8010a5a:	4820      	ldr	r0, [pc, #128]	; (8010adc <pbuf_cat+0xa0>)
 8010a5c:	f013 f8c0 	bl	8023be0 <iprintf>
 8010a60:	e034      	b.n	8010acc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	60fb      	str	r3, [r7, #12]
 8010a66:	e00a      	b.n	8010a7e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	891a      	ldrh	r2, [r3, #8]
 8010a6c:	683b      	ldr	r3, [r7, #0]
 8010a6e:	891b      	ldrh	r3, [r3, #8]
 8010a70:	4413      	add	r3, r2
 8010a72:	b29a      	uxth	r2, r3
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	60fb      	str	r3, [r7, #12]
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d1f0      	bne.n	8010a68 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	891a      	ldrh	r2, [r3, #8]
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	895b      	ldrh	r3, [r3, #10]
 8010a8e:	429a      	cmp	r2, r3
 8010a90:	d006      	beq.n	8010aa0 <pbuf_cat+0x64>
 8010a92:	4b10      	ldr	r3, [pc, #64]	; (8010ad4 <pbuf_cat+0x98>)
 8010a94:	f240 3262 	movw	r2, #866	; 0x362
 8010a98:	4911      	ldr	r1, [pc, #68]	; (8010ae0 <pbuf_cat+0xa4>)
 8010a9a:	4810      	ldr	r0, [pc, #64]	; (8010adc <pbuf_cat+0xa0>)
 8010a9c:	f013 f8a0 	bl	8023be0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d006      	beq.n	8010ab6 <pbuf_cat+0x7a>
 8010aa8:	4b0a      	ldr	r3, [pc, #40]	; (8010ad4 <pbuf_cat+0x98>)
 8010aaa:	f240 3263 	movw	r2, #867	; 0x363
 8010aae:	490d      	ldr	r1, [pc, #52]	; (8010ae4 <pbuf_cat+0xa8>)
 8010ab0:	480a      	ldr	r0, [pc, #40]	; (8010adc <pbuf_cat+0xa0>)
 8010ab2:	f013 f895 	bl	8023be0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	891a      	ldrh	r2, [r3, #8]
 8010aba:	683b      	ldr	r3, [r7, #0]
 8010abc:	891b      	ldrh	r3, [r3, #8]
 8010abe:	4413      	add	r3, r2
 8010ac0:	b29a      	uxth	r2, r3
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	683a      	ldr	r2, [r7, #0]
 8010aca:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8010acc:	3710      	adds	r7, #16
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	bd80      	pop	{r7, pc}
 8010ad2:	bf00      	nop
 8010ad4:	08026998 	.word	0x08026998
 8010ad8:	08026b8c 	.word	0x08026b8c
 8010adc:	080269f8 	.word	0x080269f8
 8010ae0:	08026bc4 	.word	0x08026bc4
 8010ae4:	08026bf4 	.word	0x08026bf4

08010ae8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	b082      	sub	sp, #8
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	6078      	str	r0, [r7, #4]
 8010af0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8010af2:	6839      	ldr	r1, [r7, #0]
 8010af4:	6878      	ldr	r0, [r7, #4]
 8010af6:	f7ff ffa1 	bl	8010a3c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8010afa:	6838      	ldr	r0, [r7, #0]
 8010afc:	f7ff ff76 	bl	80109ec <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8010b00:	bf00      	nop
 8010b02:	3708      	adds	r7, #8
 8010b04:	46bd      	mov	sp, r7
 8010b06:	bd80      	pop	{r7, pc}

08010b08 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b086      	sub	sp, #24
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
 8010b10:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8010b12:	2300      	movs	r3, #0
 8010b14:	617b      	str	r3, [r7, #20]
 8010b16:	2300      	movs	r3, #0
 8010b18:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d008      	beq.n	8010b32 <pbuf_copy+0x2a>
 8010b20:	683b      	ldr	r3, [r7, #0]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d005      	beq.n	8010b32 <pbuf_copy+0x2a>
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	891a      	ldrh	r2, [r3, #8]
 8010b2a:	683b      	ldr	r3, [r7, #0]
 8010b2c:	891b      	ldrh	r3, [r3, #8]
 8010b2e:	429a      	cmp	r2, r3
 8010b30:	d209      	bcs.n	8010b46 <pbuf_copy+0x3e>
 8010b32:	4b57      	ldr	r3, [pc, #348]	; (8010c90 <pbuf_copy+0x188>)
 8010b34:	f240 32c9 	movw	r2, #969	; 0x3c9
 8010b38:	4956      	ldr	r1, [pc, #344]	; (8010c94 <pbuf_copy+0x18c>)
 8010b3a:	4857      	ldr	r0, [pc, #348]	; (8010c98 <pbuf_copy+0x190>)
 8010b3c:	f013 f850 	bl	8023be0 <iprintf>
 8010b40:	f06f 030f 	mvn.w	r3, #15
 8010b44:	e09f      	b.n	8010c86 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	895b      	ldrh	r3, [r3, #10]
 8010b4a:	461a      	mov	r2, r3
 8010b4c:	697b      	ldr	r3, [r7, #20]
 8010b4e:	1ad2      	subs	r2, r2, r3
 8010b50:	683b      	ldr	r3, [r7, #0]
 8010b52:	895b      	ldrh	r3, [r3, #10]
 8010b54:	4619      	mov	r1, r3
 8010b56:	693b      	ldr	r3, [r7, #16]
 8010b58:	1acb      	subs	r3, r1, r3
 8010b5a:	429a      	cmp	r2, r3
 8010b5c:	d306      	bcc.n	8010b6c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8010b5e:	683b      	ldr	r3, [r7, #0]
 8010b60:	895b      	ldrh	r3, [r3, #10]
 8010b62:	461a      	mov	r2, r3
 8010b64:	693b      	ldr	r3, [r7, #16]
 8010b66:	1ad3      	subs	r3, r2, r3
 8010b68:	60fb      	str	r3, [r7, #12]
 8010b6a:	e005      	b.n	8010b78 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	895b      	ldrh	r3, [r3, #10]
 8010b70:	461a      	mov	r2, r3
 8010b72:	697b      	ldr	r3, [r7, #20]
 8010b74:	1ad3      	subs	r3, r2, r3
 8010b76:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	685a      	ldr	r2, [r3, #4]
 8010b7c:	697b      	ldr	r3, [r7, #20]
 8010b7e:	18d0      	adds	r0, r2, r3
 8010b80:	683b      	ldr	r3, [r7, #0]
 8010b82:	685a      	ldr	r2, [r3, #4]
 8010b84:	693b      	ldr	r3, [r7, #16]
 8010b86:	4413      	add	r3, r2
 8010b88:	68fa      	ldr	r2, [r7, #12]
 8010b8a:	4619      	mov	r1, r3
 8010b8c:	f012 ff02 	bl	8023994 <memcpy>
    offset_to += len;
 8010b90:	697a      	ldr	r2, [r7, #20]
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	4413      	add	r3, r2
 8010b96:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8010b98:	693a      	ldr	r2, [r7, #16]
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	4413      	add	r3, r2
 8010b9e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	895b      	ldrh	r3, [r3, #10]
 8010ba4:	461a      	mov	r2, r3
 8010ba6:	697b      	ldr	r3, [r7, #20]
 8010ba8:	4293      	cmp	r3, r2
 8010baa:	d906      	bls.n	8010bba <pbuf_copy+0xb2>
 8010bac:	4b38      	ldr	r3, [pc, #224]	; (8010c90 <pbuf_copy+0x188>)
 8010bae:	f240 32d9 	movw	r2, #985	; 0x3d9
 8010bb2:	493a      	ldr	r1, [pc, #232]	; (8010c9c <pbuf_copy+0x194>)
 8010bb4:	4838      	ldr	r0, [pc, #224]	; (8010c98 <pbuf_copy+0x190>)
 8010bb6:	f013 f813 	bl	8023be0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8010bba:	683b      	ldr	r3, [r7, #0]
 8010bbc:	895b      	ldrh	r3, [r3, #10]
 8010bbe:	461a      	mov	r2, r3
 8010bc0:	693b      	ldr	r3, [r7, #16]
 8010bc2:	4293      	cmp	r3, r2
 8010bc4:	d906      	bls.n	8010bd4 <pbuf_copy+0xcc>
 8010bc6:	4b32      	ldr	r3, [pc, #200]	; (8010c90 <pbuf_copy+0x188>)
 8010bc8:	f240 32da 	movw	r2, #986	; 0x3da
 8010bcc:	4934      	ldr	r1, [pc, #208]	; (8010ca0 <pbuf_copy+0x198>)
 8010bce:	4832      	ldr	r0, [pc, #200]	; (8010c98 <pbuf_copy+0x190>)
 8010bd0:	f013 f806 	bl	8023be0 <iprintf>
    if (offset_from >= p_from->len) {
 8010bd4:	683b      	ldr	r3, [r7, #0]
 8010bd6:	895b      	ldrh	r3, [r3, #10]
 8010bd8:	461a      	mov	r2, r3
 8010bda:	693b      	ldr	r3, [r7, #16]
 8010bdc:	4293      	cmp	r3, r2
 8010bde:	d304      	bcc.n	8010bea <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8010be0:	2300      	movs	r3, #0
 8010be2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8010be4:	683b      	ldr	r3, [r7, #0]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	895b      	ldrh	r3, [r3, #10]
 8010bee:	461a      	mov	r2, r3
 8010bf0:	697b      	ldr	r3, [r7, #20]
 8010bf2:	4293      	cmp	r3, r2
 8010bf4:	d114      	bne.n	8010c20 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d10c      	bne.n	8010c20 <pbuf_copy+0x118>
 8010c06:	683b      	ldr	r3, [r7, #0]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d009      	beq.n	8010c20 <pbuf_copy+0x118>
 8010c0c:	4b20      	ldr	r3, [pc, #128]	; (8010c90 <pbuf_copy+0x188>)
 8010c0e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8010c12:	4924      	ldr	r1, [pc, #144]	; (8010ca4 <pbuf_copy+0x19c>)
 8010c14:	4820      	ldr	r0, [pc, #128]	; (8010c98 <pbuf_copy+0x190>)
 8010c16:	f012 ffe3 	bl	8023be0 <iprintf>
 8010c1a:	f06f 030f 	mvn.w	r3, #15
 8010c1e:	e032      	b.n	8010c86 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010c20:	683b      	ldr	r3, [r7, #0]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d013      	beq.n	8010c4e <pbuf_copy+0x146>
 8010c26:	683b      	ldr	r3, [r7, #0]
 8010c28:	895a      	ldrh	r2, [r3, #10]
 8010c2a:	683b      	ldr	r3, [r7, #0]
 8010c2c:	891b      	ldrh	r3, [r3, #8]
 8010c2e:	429a      	cmp	r2, r3
 8010c30:	d10d      	bne.n	8010c4e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010c32:	683b      	ldr	r3, [r7, #0]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d009      	beq.n	8010c4e <pbuf_copy+0x146>
 8010c3a:	4b15      	ldr	r3, [pc, #84]	; (8010c90 <pbuf_copy+0x188>)
 8010c3c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8010c40:	4919      	ldr	r1, [pc, #100]	; (8010ca8 <pbuf_copy+0x1a0>)
 8010c42:	4815      	ldr	r0, [pc, #84]	; (8010c98 <pbuf_copy+0x190>)
 8010c44:	f012 ffcc 	bl	8023be0 <iprintf>
 8010c48:	f06f 0305 	mvn.w	r3, #5
 8010c4c:	e01b      	b.n	8010c86 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d013      	beq.n	8010c7c <pbuf_copy+0x174>
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	895a      	ldrh	r2, [r3, #10]
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	891b      	ldrh	r3, [r3, #8]
 8010c5c:	429a      	cmp	r2, r3
 8010c5e:	d10d      	bne.n	8010c7c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d009      	beq.n	8010c7c <pbuf_copy+0x174>
 8010c68:	4b09      	ldr	r3, [pc, #36]	; (8010c90 <pbuf_copy+0x188>)
 8010c6a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8010c6e:	490e      	ldr	r1, [pc, #56]	; (8010ca8 <pbuf_copy+0x1a0>)
 8010c70:	4809      	ldr	r0, [pc, #36]	; (8010c98 <pbuf_copy+0x190>)
 8010c72:	f012 ffb5 	bl	8023be0 <iprintf>
 8010c76:	f06f 0305 	mvn.w	r3, #5
 8010c7a:	e004      	b.n	8010c86 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8010c7c:	683b      	ldr	r3, [r7, #0]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	f47f af61 	bne.w	8010b46 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8010c84:	2300      	movs	r3, #0
}
 8010c86:	4618      	mov	r0, r3
 8010c88:	3718      	adds	r7, #24
 8010c8a:	46bd      	mov	sp, r7
 8010c8c:	bd80      	pop	{r7, pc}
 8010c8e:	bf00      	nop
 8010c90:	08026998 	.word	0x08026998
 8010c94:	08026c40 	.word	0x08026c40
 8010c98:	080269f8 	.word	0x080269f8
 8010c9c:	08026c70 	.word	0x08026c70
 8010ca0:	08026c88 	.word	0x08026c88
 8010ca4:	08026ca4 	.word	0x08026ca4
 8010ca8:	08026cb4 	.word	0x08026cb4

08010cac <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8010cac:	b580      	push	{r7, lr}
 8010cae:	b088      	sub	sp, #32
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	60f8      	str	r0, [r7, #12]
 8010cb4:	60b9      	str	r1, [r7, #8]
 8010cb6:	4611      	mov	r1, r2
 8010cb8:	461a      	mov	r2, r3
 8010cba:	460b      	mov	r3, r1
 8010cbc:	80fb      	strh	r3, [r7, #6]
 8010cbe:	4613      	mov	r3, r2
 8010cc0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d108      	bne.n	8010ce2 <pbuf_copy_partial+0x36>
 8010cd0:	4b2b      	ldr	r3, [pc, #172]	; (8010d80 <pbuf_copy_partial+0xd4>)
 8010cd2:	f240 420a 	movw	r2, #1034	; 0x40a
 8010cd6:	492b      	ldr	r1, [pc, #172]	; (8010d84 <pbuf_copy_partial+0xd8>)
 8010cd8:	482b      	ldr	r0, [pc, #172]	; (8010d88 <pbuf_copy_partial+0xdc>)
 8010cda:	f012 ff81 	bl	8023be0 <iprintf>
 8010cde:	2300      	movs	r3, #0
 8010ce0:	e04a      	b.n	8010d78 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8010ce2:	68bb      	ldr	r3, [r7, #8]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d108      	bne.n	8010cfa <pbuf_copy_partial+0x4e>
 8010ce8:	4b25      	ldr	r3, [pc, #148]	; (8010d80 <pbuf_copy_partial+0xd4>)
 8010cea:	f240 420b 	movw	r2, #1035	; 0x40b
 8010cee:	4927      	ldr	r1, [pc, #156]	; (8010d8c <pbuf_copy_partial+0xe0>)
 8010cf0:	4825      	ldr	r0, [pc, #148]	; (8010d88 <pbuf_copy_partial+0xdc>)
 8010cf2:	f012 ff75 	bl	8023be0 <iprintf>
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	e03e      	b.n	8010d78 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	61fb      	str	r3, [r7, #28]
 8010cfe:	e034      	b.n	8010d6a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8010d00:	88bb      	ldrh	r3, [r7, #4]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d00a      	beq.n	8010d1c <pbuf_copy_partial+0x70>
 8010d06:	69fb      	ldr	r3, [r7, #28]
 8010d08:	895b      	ldrh	r3, [r3, #10]
 8010d0a:	88ba      	ldrh	r2, [r7, #4]
 8010d0c:	429a      	cmp	r2, r3
 8010d0e:	d305      	bcc.n	8010d1c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8010d10:	69fb      	ldr	r3, [r7, #28]
 8010d12:	895b      	ldrh	r3, [r3, #10]
 8010d14:	88ba      	ldrh	r2, [r7, #4]
 8010d16:	1ad3      	subs	r3, r2, r3
 8010d18:	80bb      	strh	r3, [r7, #4]
 8010d1a:	e023      	b.n	8010d64 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8010d1c:	69fb      	ldr	r3, [r7, #28]
 8010d1e:	895a      	ldrh	r2, [r3, #10]
 8010d20:	88bb      	ldrh	r3, [r7, #4]
 8010d22:	1ad3      	subs	r3, r2, r3
 8010d24:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8010d26:	8b3a      	ldrh	r2, [r7, #24]
 8010d28:	88fb      	ldrh	r3, [r7, #6]
 8010d2a:	429a      	cmp	r2, r3
 8010d2c:	d901      	bls.n	8010d32 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8010d2e:	88fb      	ldrh	r3, [r7, #6]
 8010d30:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8010d32:	8b7b      	ldrh	r3, [r7, #26]
 8010d34:	68ba      	ldr	r2, [r7, #8]
 8010d36:	18d0      	adds	r0, r2, r3
 8010d38:	69fb      	ldr	r3, [r7, #28]
 8010d3a:	685a      	ldr	r2, [r3, #4]
 8010d3c:	88bb      	ldrh	r3, [r7, #4]
 8010d3e:	4413      	add	r3, r2
 8010d40:	8b3a      	ldrh	r2, [r7, #24]
 8010d42:	4619      	mov	r1, r3
 8010d44:	f012 fe26 	bl	8023994 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8010d48:	8afa      	ldrh	r2, [r7, #22]
 8010d4a:	8b3b      	ldrh	r3, [r7, #24]
 8010d4c:	4413      	add	r3, r2
 8010d4e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8010d50:	8b7a      	ldrh	r2, [r7, #26]
 8010d52:	8b3b      	ldrh	r3, [r7, #24]
 8010d54:	4413      	add	r3, r2
 8010d56:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8010d58:	88fa      	ldrh	r2, [r7, #6]
 8010d5a:	8b3b      	ldrh	r3, [r7, #24]
 8010d5c:	1ad3      	subs	r3, r2, r3
 8010d5e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8010d60:	2300      	movs	r3, #0
 8010d62:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010d64:	69fb      	ldr	r3, [r7, #28]
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	61fb      	str	r3, [r7, #28]
 8010d6a:	88fb      	ldrh	r3, [r7, #6]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d002      	beq.n	8010d76 <pbuf_copy_partial+0xca>
 8010d70:	69fb      	ldr	r3, [r7, #28]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d1c4      	bne.n	8010d00 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8010d76:	8afb      	ldrh	r3, [r7, #22]
}
 8010d78:	4618      	mov	r0, r3
 8010d7a:	3720      	adds	r7, #32
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	bd80      	pop	{r7, pc}
 8010d80:	08026998 	.word	0x08026998
 8010d84:	08026ce0 	.word	0x08026ce0
 8010d88:	080269f8 	.word	0x080269f8
 8010d8c:	08026d00 	.word	0x08026d00

08010d90 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8010d90:	b480      	push	{r7}
 8010d92:	b087      	sub	sp, #28
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	60f8      	str	r0, [r7, #12]
 8010d98:	460b      	mov	r3, r1
 8010d9a:	607a      	str	r2, [r7, #4]
 8010d9c:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8010d9e:	897b      	ldrh	r3, [r7, #10]
 8010da0:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8010da6:	e007      	b.n	8010db8 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8010da8:	693b      	ldr	r3, [r7, #16]
 8010daa:	895b      	ldrh	r3, [r3, #10]
 8010dac:	8afa      	ldrh	r2, [r7, #22]
 8010dae:	1ad3      	subs	r3, r2, r3
 8010db0:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8010db2:	693b      	ldr	r3, [r7, #16]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8010db8:	693b      	ldr	r3, [r7, #16]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d004      	beq.n	8010dc8 <pbuf_skip_const+0x38>
 8010dbe:	693b      	ldr	r3, [r7, #16]
 8010dc0:	895b      	ldrh	r3, [r3, #10]
 8010dc2:	8afa      	ldrh	r2, [r7, #22]
 8010dc4:	429a      	cmp	r2, r3
 8010dc6:	d2ef      	bcs.n	8010da8 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d002      	beq.n	8010dd4 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	8afa      	ldrh	r2, [r7, #22]
 8010dd2:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8010dd4:	693b      	ldr	r3, [r7, #16]
}
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	371c      	adds	r7, #28
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de0:	4770      	bx	lr

08010de2 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8010de2:	b580      	push	{r7, lr}
 8010de4:	b086      	sub	sp, #24
 8010de6:	af00      	add	r7, sp, #0
 8010de8:	60f8      	str	r0, [r7, #12]
 8010dea:	460b      	mov	r3, r1
 8010dec:	607a      	str	r2, [r7, #4]
 8010dee:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 8010df0:	897b      	ldrh	r3, [r7, #10]
 8010df2:	687a      	ldr	r2, [r7, #4]
 8010df4:	4619      	mov	r1, r3
 8010df6:	68f8      	ldr	r0, [r7, #12]
 8010df8:	f7ff ffca 	bl	8010d90 <pbuf_skip_const>
 8010dfc:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 8010dfe:	697b      	ldr	r3, [r7, #20]
}
 8010e00:	4618      	mov	r0, r3
 8010e02:	3718      	adds	r7, #24
 8010e04:	46bd      	mov	sp, r7
 8010e06:	bd80      	pop	{r7, pc}

08010e08 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b088      	sub	sp, #32
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	60f8      	str	r0, [r7, #12]
 8010e10:	60b9      	str	r1, [r7, #8]
 8010e12:	4613      	mov	r3, r2
 8010e14:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8010e16:	88fb      	ldrh	r3, [r7, #6]
 8010e18:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d109      	bne.n	8010e38 <pbuf_take+0x30>
 8010e24:	4b3a      	ldr	r3, [pc, #232]	; (8010f10 <pbuf_take+0x108>)
 8010e26:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8010e2a:	493a      	ldr	r1, [pc, #232]	; (8010f14 <pbuf_take+0x10c>)
 8010e2c:	483a      	ldr	r0, [pc, #232]	; (8010f18 <pbuf_take+0x110>)
 8010e2e:	f012 fed7 	bl	8023be0 <iprintf>
 8010e32:	f06f 030f 	mvn.w	r3, #15
 8010e36:	e067      	b.n	8010f08 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8010e38:	68bb      	ldr	r3, [r7, #8]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d109      	bne.n	8010e52 <pbuf_take+0x4a>
 8010e3e:	4b34      	ldr	r3, [pc, #208]	; (8010f10 <pbuf_take+0x108>)
 8010e40:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8010e44:	4935      	ldr	r1, [pc, #212]	; (8010f1c <pbuf_take+0x114>)
 8010e46:	4834      	ldr	r0, [pc, #208]	; (8010f18 <pbuf_take+0x110>)
 8010e48:	f012 feca 	bl	8023be0 <iprintf>
 8010e4c:	f06f 030f 	mvn.w	r3, #15
 8010e50:	e05a      	b.n	8010f08 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	891b      	ldrh	r3, [r3, #8]
 8010e56:	88fa      	ldrh	r2, [r7, #6]
 8010e58:	429a      	cmp	r2, r3
 8010e5a:	d909      	bls.n	8010e70 <pbuf_take+0x68>
 8010e5c:	4b2c      	ldr	r3, [pc, #176]	; (8010f10 <pbuf_take+0x108>)
 8010e5e:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8010e62:	492f      	ldr	r1, [pc, #188]	; (8010f20 <pbuf_take+0x118>)
 8010e64:	482c      	ldr	r0, [pc, #176]	; (8010f18 <pbuf_take+0x110>)
 8010e66:	f012 febb 	bl	8023be0 <iprintf>
 8010e6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010e6e:	e04b      	b.n	8010f08 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d007      	beq.n	8010e86 <pbuf_take+0x7e>
 8010e76:	68bb      	ldr	r3, [r7, #8]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d004      	beq.n	8010e86 <pbuf_take+0x7e>
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	891b      	ldrh	r3, [r3, #8]
 8010e80:	88fa      	ldrh	r2, [r7, #6]
 8010e82:	429a      	cmp	r2, r3
 8010e84:	d902      	bls.n	8010e8c <pbuf_take+0x84>
    return ERR_ARG;
 8010e86:	f06f 030f 	mvn.w	r3, #15
 8010e8a:	e03d      	b.n	8010f08 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	61fb      	str	r3, [r7, #28]
 8010e90:	e028      	b.n	8010ee4 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8010e92:	69fb      	ldr	r3, [r7, #28]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d106      	bne.n	8010ea6 <pbuf_take+0x9e>
 8010e98:	4b1d      	ldr	r3, [pc, #116]	; (8010f10 <pbuf_take+0x108>)
 8010e9a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8010e9e:	4921      	ldr	r1, [pc, #132]	; (8010f24 <pbuf_take+0x11c>)
 8010ea0:	481d      	ldr	r0, [pc, #116]	; (8010f18 <pbuf_take+0x110>)
 8010ea2:	f012 fe9d 	bl	8023be0 <iprintf>
    buf_copy_len = total_copy_len;
 8010ea6:	697b      	ldr	r3, [r7, #20]
 8010ea8:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8010eaa:	69fb      	ldr	r3, [r7, #28]
 8010eac:	895b      	ldrh	r3, [r3, #10]
 8010eae:	461a      	mov	r2, r3
 8010eb0:	69bb      	ldr	r3, [r7, #24]
 8010eb2:	4293      	cmp	r3, r2
 8010eb4:	d902      	bls.n	8010ebc <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8010eb6:	69fb      	ldr	r3, [r7, #28]
 8010eb8:	895b      	ldrh	r3, [r3, #10]
 8010eba:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8010ebc:	69fb      	ldr	r3, [r7, #28]
 8010ebe:	6858      	ldr	r0, [r3, #4]
 8010ec0:	68ba      	ldr	r2, [r7, #8]
 8010ec2:	693b      	ldr	r3, [r7, #16]
 8010ec4:	4413      	add	r3, r2
 8010ec6:	69ba      	ldr	r2, [r7, #24]
 8010ec8:	4619      	mov	r1, r3
 8010eca:	f012 fd63 	bl	8023994 <memcpy>
    total_copy_len -= buf_copy_len;
 8010ece:	697a      	ldr	r2, [r7, #20]
 8010ed0:	69bb      	ldr	r3, [r7, #24]
 8010ed2:	1ad3      	subs	r3, r2, r3
 8010ed4:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8010ed6:	693a      	ldr	r2, [r7, #16]
 8010ed8:	69bb      	ldr	r3, [r7, #24]
 8010eda:	4413      	add	r3, r2
 8010edc:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8010ede:	69fb      	ldr	r3, [r7, #28]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	61fb      	str	r3, [r7, #28]
 8010ee4:	697b      	ldr	r3, [r7, #20]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d1d3      	bne.n	8010e92 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8010eea:	697b      	ldr	r3, [r7, #20]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d103      	bne.n	8010ef8 <pbuf_take+0xf0>
 8010ef0:	88fb      	ldrh	r3, [r7, #6]
 8010ef2:	693a      	ldr	r2, [r7, #16]
 8010ef4:	429a      	cmp	r2, r3
 8010ef6:	d006      	beq.n	8010f06 <pbuf_take+0xfe>
 8010ef8:	4b05      	ldr	r3, [pc, #20]	; (8010f10 <pbuf_take+0x108>)
 8010efa:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8010efe:	490a      	ldr	r1, [pc, #40]	; (8010f28 <pbuf_take+0x120>)
 8010f00:	4805      	ldr	r0, [pc, #20]	; (8010f18 <pbuf_take+0x110>)
 8010f02:	f012 fe6d 	bl	8023be0 <iprintf>
  return ERR_OK;
 8010f06:	2300      	movs	r3, #0
}
 8010f08:	4618      	mov	r0, r3
 8010f0a:	3720      	adds	r7, #32
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	bd80      	pop	{r7, pc}
 8010f10:	08026998 	.word	0x08026998
 8010f14:	08026d70 	.word	0x08026d70
 8010f18:	080269f8 	.word	0x080269f8
 8010f1c:	08026d88 	.word	0x08026d88
 8010f20:	08026da4 	.word	0x08026da4
 8010f24:	08026dc4 	.word	0x08026dc4
 8010f28:	08026ddc 	.word	0x08026ddc

08010f2c <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b088      	sub	sp, #32
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	60f8      	str	r0, [r7, #12]
 8010f34:	60b9      	str	r1, [r7, #8]
 8010f36:	4611      	mov	r1, r2
 8010f38:	461a      	mov	r2, r3
 8010f3a:	460b      	mov	r3, r1
 8010f3c:	80fb      	strh	r3, [r7, #6]
 8010f3e:	4613      	mov	r3, r2
 8010f40:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 8010f42:	f107 0210 	add.w	r2, r7, #16
 8010f46:	88bb      	ldrh	r3, [r7, #4]
 8010f48:	4619      	mov	r1, r3
 8010f4a:	68f8      	ldr	r0, [r7, #12]
 8010f4c:	f7ff ff49 	bl	8010de2 <pbuf_skip>
 8010f50:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 8010f52:	69fb      	ldr	r3, [r7, #28]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d047      	beq.n	8010fe8 <pbuf_take_at+0xbc>
 8010f58:	69fb      	ldr	r3, [r7, #28]
 8010f5a:	891b      	ldrh	r3, [r3, #8]
 8010f5c:	461a      	mov	r2, r3
 8010f5e:	8a3b      	ldrh	r3, [r7, #16]
 8010f60:	4619      	mov	r1, r3
 8010f62:	88fb      	ldrh	r3, [r7, #6]
 8010f64:	440b      	add	r3, r1
 8010f66:	429a      	cmp	r2, r3
 8010f68:	db3e      	blt.n	8010fe8 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 8010f6a:	88fb      	ldrh	r3, [r7, #6]
 8010f6c:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 8010f6e:	68bb      	ldr	r3, [r7, #8]
 8010f70:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 8010f72:	69fb      	ldr	r3, [r7, #28]
 8010f74:	895a      	ldrh	r2, [r3, #10]
 8010f76:	8a3b      	ldrh	r3, [r7, #16]
 8010f78:	429a      	cmp	r2, r3
 8010f7a:	d806      	bhi.n	8010f8a <pbuf_take_at+0x5e>
 8010f7c:	4b1d      	ldr	r3, [pc, #116]	; (8010ff4 <pbuf_take_at+0xc8>)
 8010f7e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8010f82:	491d      	ldr	r1, [pc, #116]	; (8010ff8 <pbuf_take_at+0xcc>)
 8010f84:	481d      	ldr	r0, [pc, #116]	; (8010ffc <pbuf_take_at+0xd0>)
 8010f86:	f012 fe2b 	bl	8023be0 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 8010f8a:	69fb      	ldr	r3, [r7, #28]
 8010f8c:	895b      	ldrh	r3, [r3, #10]
 8010f8e:	461a      	mov	r2, r3
 8010f90:	8a3b      	ldrh	r3, [r7, #16]
 8010f92:	1ad2      	subs	r2, r2, r3
 8010f94:	88fb      	ldrh	r3, [r7, #6]
 8010f96:	429a      	cmp	r2, r3
 8010f98:	da05      	bge.n	8010fa6 <pbuf_take_at+0x7a>
 8010f9a:	69fb      	ldr	r3, [r7, #28]
 8010f9c:	895a      	ldrh	r2, [r3, #10]
 8010f9e:	8a3b      	ldrh	r3, [r7, #16]
 8010fa0:	1ad3      	subs	r3, r2, r3
 8010fa2:	b29b      	uxth	r3, r3
 8010fa4:	e000      	b.n	8010fa8 <pbuf_take_at+0x7c>
 8010fa6:	88fb      	ldrh	r3, [r7, #6]
 8010fa8:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 8010faa:	69fb      	ldr	r3, [r7, #28]
 8010fac:	685b      	ldr	r3, [r3, #4]
 8010fae:	8a3a      	ldrh	r2, [r7, #16]
 8010fb0:	4413      	add	r3, r2
 8010fb2:	8a7a      	ldrh	r2, [r7, #18]
 8010fb4:	68b9      	ldr	r1, [r7, #8]
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	f012 fcec 	bl	8023994 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 8010fbc:	8b7a      	ldrh	r2, [r7, #26]
 8010fbe:	8a7b      	ldrh	r3, [r7, #18]
 8010fc0:	1ad3      	subs	r3, r2, r3
 8010fc2:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 8010fc4:	8a7b      	ldrh	r3, [r7, #18]
 8010fc6:	697a      	ldr	r2, [r7, #20]
 8010fc8:	4413      	add	r3, r2
 8010fca:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 8010fcc:	8b7b      	ldrh	r3, [r7, #26]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d008      	beq.n	8010fe4 <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 8010fd2:	69fb      	ldr	r3, [r7, #28]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	8b7a      	ldrh	r2, [r7, #26]
 8010fd8:	6979      	ldr	r1, [r7, #20]
 8010fda:	4618      	mov	r0, r3
 8010fdc:	f7ff ff14 	bl	8010e08 <pbuf_take>
 8010fe0:	4603      	mov	r3, r0
 8010fe2:	e003      	b.n	8010fec <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	e001      	b.n	8010fec <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 8010fe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8010fec:	4618      	mov	r0, r3
 8010fee:	3720      	adds	r7, #32
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	bd80      	pop	{r7, pc}
 8010ff4:	08026998 	.word	0x08026998
 8010ff8:	08026df4 	.word	0x08026df4
 8010ffc:	080269f8 	.word	0x080269f8

08011000 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8011000:	b580      	push	{r7, lr}
 8011002:	b084      	sub	sp, #16
 8011004:	af00      	add	r7, sp, #0
 8011006:	4603      	mov	r3, r0
 8011008:	603a      	str	r2, [r7, #0]
 801100a:	71fb      	strb	r3, [r7, #7]
 801100c:	460b      	mov	r3, r1
 801100e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8011010:	683b      	ldr	r3, [r7, #0]
 8011012:	8919      	ldrh	r1, [r3, #8]
 8011014:	88ba      	ldrh	r2, [r7, #4]
 8011016:	79fb      	ldrb	r3, [r7, #7]
 8011018:	4618      	mov	r0, r3
 801101a:	f7ff f92b 	bl	8010274 <pbuf_alloc>
 801101e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d101      	bne.n	801102a <pbuf_clone+0x2a>
    return NULL;
 8011026:	2300      	movs	r3, #0
 8011028:	e011      	b.n	801104e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801102a:	6839      	ldr	r1, [r7, #0]
 801102c:	68f8      	ldr	r0, [r7, #12]
 801102e:	f7ff fd6b 	bl	8010b08 <pbuf_copy>
 8011032:	4603      	mov	r3, r0
 8011034:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8011036:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d006      	beq.n	801104c <pbuf_clone+0x4c>
 801103e:	4b06      	ldr	r3, [pc, #24]	; (8011058 <pbuf_clone+0x58>)
 8011040:	f240 5224 	movw	r2, #1316	; 0x524
 8011044:	4905      	ldr	r1, [pc, #20]	; (801105c <pbuf_clone+0x5c>)
 8011046:	4806      	ldr	r0, [pc, #24]	; (8011060 <pbuf_clone+0x60>)
 8011048:	f012 fdca 	bl	8023be0 <iprintf>
  return q;
 801104c:	68fb      	ldr	r3, [r7, #12]
}
 801104e:	4618      	mov	r0, r3
 8011050:	3710      	adds	r7, #16
 8011052:	46bd      	mov	sp, r7
 8011054:	bd80      	pop	{r7, pc}
 8011056:	bf00      	nop
 8011058:	08026998 	.word	0x08026998
 801105c:	08026e0c 	.word	0x08026e0c
 8011060:	080269f8 	.word	0x080269f8

08011064 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b084      	sub	sp, #16
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]
 801106c:	460b      	mov	r3, r1
 801106e:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 8011070:	f107 020a 	add.w	r2, r7, #10
 8011074:	887b      	ldrh	r3, [r7, #2]
 8011076:	4619      	mov	r1, r3
 8011078:	6878      	ldr	r0, [r7, #4]
 801107a:	f7ff fe89 	bl	8010d90 <pbuf_skip_const>
 801107e:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	2b00      	cmp	r3, #0
 8011084:	d00a      	beq.n	801109c <pbuf_try_get_at+0x38>
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	895a      	ldrh	r2, [r3, #10]
 801108a:	897b      	ldrh	r3, [r7, #10]
 801108c:	429a      	cmp	r2, r3
 801108e:	d905      	bls.n	801109c <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	685b      	ldr	r3, [r3, #4]
 8011094:	897a      	ldrh	r2, [r7, #10]
 8011096:	4413      	add	r3, r2
 8011098:	781b      	ldrb	r3, [r3, #0]
 801109a:	e001      	b.n	80110a0 <pbuf_try_get_at+0x3c>
  }
  return -1;
 801109c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80110a0:	4618      	mov	r0, r3
 80110a2:	3710      	adds	r7, #16
 80110a4:	46bd      	mov	sp, r7
 80110a6:	bd80      	pop	{r7, pc}

080110a8 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b084      	sub	sp, #16
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
 80110b0:	460b      	mov	r3, r1
 80110b2:	807b      	strh	r3, [r7, #2]
 80110b4:	4613      	mov	r3, r2
 80110b6:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 80110b8:	f107 020a 	add.w	r2, r7, #10
 80110bc:	887b      	ldrh	r3, [r7, #2]
 80110be:	4619      	mov	r1, r3
 80110c0:	6878      	ldr	r0, [r7, #4]
 80110c2:	f7ff fe8e 	bl	8010de2 <pbuf_skip>
 80110c6:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d00a      	beq.n	80110e4 <pbuf_put_at+0x3c>
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	895a      	ldrh	r2, [r3, #10]
 80110d2:	897b      	ldrh	r3, [r7, #10]
 80110d4:	429a      	cmp	r2, r3
 80110d6:	d905      	bls.n	80110e4 <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	685b      	ldr	r3, [r3, #4]
 80110dc:	897a      	ldrh	r2, [r7, #10]
 80110de:	4413      	add	r3, r2
 80110e0:	787a      	ldrb	r2, [r7, #1]
 80110e2:	701a      	strb	r2, [r3, #0]
  }
}
 80110e4:	bf00      	nop
 80110e6:	3710      	adds	r7, #16
 80110e8:	46bd      	mov	sp, r7
 80110ea:	bd80      	pop	{r7, pc}

080110ec <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80110f0:	f012 fe32 	bl	8023d58 <rand>
 80110f4:	4603      	mov	r3, r0
 80110f6:	b29b      	uxth	r3, r3
 80110f8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80110fc:	b29b      	uxth	r3, r3
 80110fe:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011102:	b29a      	uxth	r2, r3
 8011104:	4b01      	ldr	r3, [pc, #4]	; (801110c <tcp_init+0x20>)
 8011106:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011108:	bf00      	nop
 801110a:	bd80      	pop	{r7, pc}
 801110c:	20000014 	.word	0x20000014

08011110 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8011110:	b580      	push	{r7, lr}
 8011112:	b082      	sub	sp, #8
 8011114:	af00      	add	r7, sp, #0
 8011116:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	7d1b      	ldrb	r3, [r3, #20]
 801111c:	2b01      	cmp	r3, #1
 801111e:	d105      	bne.n	801112c <tcp_free+0x1c>
 8011120:	4b06      	ldr	r3, [pc, #24]	; (801113c <tcp_free+0x2c>)
 8011122:	22d4      	movs	r2, #212	; 0xd4
 8011124:	4906      	ldr	r1, [pc, #24]	; (8011140 <tcp_free+0x30>)
 8011126:	4807      	ldr	r0, [pc, #28]	; (8011144 <tcp_free+0x34>)
 8011128:	f012 fd5a 	bl	8023be0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 801112c:	6879      	ldr	r1, [r7, #4]
 801112e:	2001      	movs	r0, #1
 8011130:	f7fe fc8a 	bl	800fa48 <memp_free>
}
 8011134:	bf00      	nop
 8011136:	3708      	adds	r7, #8
 8011138:	46bd      	mov	sp, r7
 801113a:	bd80      	pop	{r7, pc}
 801113c:	08026e98 	.word	0x08026e98
 8011140:	08026ec8 	.word	0x08026ec8
 8011144:	08026edc 	.word	0x08026edc

08011148 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8011148:	b580      	push	{r7, lr}
 801114a:	b082      	sub	sp, #8
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	7d1b      	ldrb	r3, [r3, #20]
 8011154:	2b01      	cmp	r3, #1
 8011156:	d105      	bne.n	8011164 <tcp_free_listen+0x1c>
 8011158:	4b06      	ldr	r3, [pc, #24]	; (8011174 <tcp_free_listen+0x2c>)
 801115a:	22df      	movs	r2, #223	; 0xdf
 801115c:	4906      	ldr	r1, [pc, #24]	; (8011178 <tcp_free_listen+0x30>)
 801115e:	4807      	ldr	r0, [pc, #28]	; (801117c <tcp_free_listen+0x34>)
 8011160:	f012 fd3e 	bl	8023be0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8011164:	6879      	ldr	r1, [r7, #4]
 8011166:	2002      	movs	r0, #2
 8011168:	f7fe fc6e 	bl	800fa48 <memp_free>
}
 801116c:	bf00      	nop
 801116e:	3708      	adds	r7, #8
 8011170:	46bd      	mov	sp, r7
 8011172:	bd80      	pop	{r7, pc}
 8011174:	08026e98 	.word	0x08026e98
 8011178:	08026f04 	.word	0x08026f04
 801117c:	08026edc 	.word	0x08026edc

08011180 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8011180:	b580      	push	{r7, lr}
 8011182:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8011184:	f001 f876 	bl	8012274 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8011188:	4b07      	ldr	r3, [pc, #28]	; (80111a8 <tcp_tmr+0x28>)
 801118a:	781b      	ldrb	r3, [r3, #0]
 801118c:	3301      	adds	r3, #1
 801118e:	b2da      	uxtb	r2, r3
 8011190:	4b05      	ldr	r3, [pc, #20]	; (80111a8 <tcp_tmr+0x28>)
 8011192:	701a      	strb	r2, [r3, #0]
 8011194:	4b04      	ldr	r3, [pc, #16]	; (80111a8 <tcp_tmr+0x28>)
 8011196:	781b      	ldrb	r3, [r3, #0]
 8011198:	f003 0301 	and.w	r3, r3, #1
 801119c:	2b00      	cmp	r3, #0
 801119e:	d001      	beq.n	80111a4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80111a0:	f000 fd28 	bl	8011bf4 <tcp_slowtmr>
  }
}
 80111a4:	bf00      	nop
 80111a6:	bd80      	pop	{r7, pc}
 80111a8:	2000fc51 	.word	0x2000fc51

080111ac <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b084      	sub	sp, #16
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
 80111b4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80111b6:	683b      	ldr	r3, [r7, #0]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d105      	bne.n	80111c8 <tcp_remove_listener+0x1c>
 80111bc:	4b0d      	ldr	r3, [pc, #52]	; (80111f4 <tcp_remove_listener+0x48>)
 80111be:	22ff      	movs	r2, #255	; 0xff
 80111c0:	490d      	ldr	r1, [pc, #52]	; (80111f8 <tcp_remove_listener+0x4c>)
 80111c2:	480e      	ldr	r0, [pc, #56]	; (80111fc <tcp_remove_listener+0x50>)
 80111c4:	f012 fd0c 	bl	8023be0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	60fb      	str	r3, [r7, #12]
 80111cc:	e00a      	b.n	80111e4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80111d2:	683a      	ldr	r2, [r7, #0]
 80111d4:	429a      	cmp	r2, r3
 80111d6:	d102      	bne.n	80111de <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	2200      	movs	r2, #0
 80111dc:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	68db      	ldr	r3, [r3, #12]
 80111e2:	60fb      	str	r3, [r7, #12]
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d1f1      	bne.n	80111ce <tcp_remove_listener+0x22>
    }
  }
}
 80111ea:	bf00      	nop
 80111ec:	bf00      	nop
 80111ee:	3710      	adds	r7, #16
 80111f0:	46bd      	mov	sp, r7
 80111f2:	bd80      	pop	{r7, pc}
 80111f4:	08026e98 	.word	0x08026e98
 80111f8:	08026f20 	.word	0x08026f20
 80111fc:	08026edc 	.word	0x08026edc

08011200 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8011200:	b580      	push	{r7, lr}
 8011202:	b084      	sub	sp, #16
 8011204:	af00      	add	r7, sp, #0
 8011206:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d106      	bne.n	801121c <tcp_listen_closed+0x1c>
 801120e:	4b14      	ldr	r3, [pc, #80]	; (8011260 <tcp_listen_closed+0x60>)
 8011210:	f240 1211 	movw	r2, #273	; 0x111
 8011214:	4913      	ldr	r1, [pc, #76]	; (8011264 <tcp_listen_closed+0x64>)
 8011216:	4814      	ldr	r0, [pc, #80]	; (8011268 <tcp_listen_closed+0x68>)
 8011218:	f012 fce2 	bl	8023be0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	7d1b      	ldrb	r3, [r3, #20]
 8011220:	2b01      	cmp	r3, #1
 8011222:	d006      	beq.n	8011232 <tcp_listen_closed+0x32>
 8011224:	4b0e      	ldr	r3, [pc, #56]	; (8011260 <tcp_listen_closed+0x60>)
 8011226:	f44f 7289 	mov.w	r2, #274	; 0x112
 801122a:	4910      	ldr	r1, [pc, #64]	; (801126c <tcp_listen_closed+0x6c>)
 801122c:	480e      	ldr	r0, [pc, #56]	; (8011268 <tcp_listen_closed+0x68>)
 801122e:	f012 fcd7 	bl	8023be0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011232:	2301      	movs	r3, #1
 8011234:	60fb      	str	r3, [r7, #12]
 8011236:	e00b      	b.n	8011250 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8011238:	4a0d      	ldr	r2, [pc, #52]	; (8011270 <tcp_listen_closed+0x70>)
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	6879      	ldr	r1, [r7, #4]
 8011244:	4618      	mov	r0, r3
 8011246:	f7ff ffb1 	bl	80111ac <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	3301      	adds	r3, #1
 801124e:	60fb      	str	r3, [r7, #12]
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	2b03      	cmp	r3, #3
 8011254:	d9f0      	bls.n	8011238 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8011256:	bf00      	nop
 8011258:	bf00      	nop
 801125a:	3710      	adds	r7, #16
 801125c:	46bd      	mov	sp, r7
 801125e:	bd80      	pop	{r7, pc}
 8011260:	08026e98 	.word	0x08026e98
 8011264:	08026f48 	.word	0x08026f48
 8011268:	08026edc 	.word	0x08026edc
 801126c:	08026f54 	.word	0x08026f54
 8011270:	0802930c 	.word	0x0802930c

08011274 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8011274:	b5b0      	push	{r4, r5, r7, lr}
 8011276:	b088      	sub	sp, #32
 8011278:	af04      	add	r7, sp, #16
 801127a:	6078      	str	r0, [r7, #4]
 801127c:	460b      	mov	r3, r1
 801127e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d106      	bne.n	8011294 <tcp_close_shutdown+0x20>
 8011286:	4b63      	ldr	r3, [pc, #396]	; (8011414 <tcp_close_shutdown+0x1a0>)
 8011288:	f44f 72af 	mov.w	r2, #350	; 0x15e
 801128c:	4962      	ldr	r1, [pc, #392]	; (8011418 <tcp_close_shutdown+0x1a4>)
 801128e:	4863      	ldr	r0, [pc, #396]	; (801141c <tcp_close_shutdown+0x1a8>)
 8011290:	f012 fca6 	bl	8023be0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8011294:	78fb      	ldrb	r3, [r7, #3]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d066      	beq.n	8011368 <tcp_close_shutdown+0xf4>
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	7d1b      	ldrb	r3, [r3, #20]
 801129e:	2b04      	cmp	r3, #4
 80112a0:	d003      	beq.n	80112aa <tcp_close_shutdown+0x36>
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	7d1b      	ldrb	r3, [r3, #20]
 80112a6:	2b07      	cmp	r3, #7
 80112a8:	d15e      	bne.n	8011368 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d104      	bne.n	80112bc <tcp_close_shutdown+0x48>
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80112b6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80112ba:	d055      	beq.n	8011368 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	8b5b      	ldrh	r3, [r3, #26]
 80112c0:	f003 0310 	and.w	r3, r3, #16
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d106      	bne.n	80112d6 <tcp_close_shutdown+0x62>
 80112c8:	4b52      	ldr	r3, [pc, #328]	; (8011414 <tcp_close_shutdown+0x1a0>)
 80112ca:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80112ce:	4954      	ldr	r1, [pc, #336]	; (8011420 <tcp_close_shutdown+0x1ac>)
 80112d0:	4852      	ldr	r0, [pc, #328]	; (801141c <tcp_close_shutdown+0x1a8>)
 80112d2:	f012 fc85 	bl	8023be0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80112de:	687d      	ldr	r5, [r7, #4]
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	3304      	adds	r3, #4
 80112e4:	687a      	ldr	r2, [r7, #4]
 80112e6:	8ad2      	ldrh	r2, [r2, #22]
 80112e8:	6879      	ldr	r1, [r7, #4]
 80112ea:	8b09      	ldrh	r1, [r1, #24]
 80112ec:	9102      	str	r1, [sp, #8]
 80112ee:	9201      	str	r2, [sp, #4]
 80112f0:	9300      	str	r3, [sp, #0]
 80112f2:	462b      	mov	r3, r5
 80112f4:	4622      	mov	r2, r4
 80112f6:	4601      	mov	r1, r0
 80112f8:	6878      	ldr	r0, [r7, #4]
 80112fa:	f005 fd8b 	bl	8016e14 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80112fe:	6878      	ldr	r0, [r7, #4]
 8011300:	f001 fb68 	bl	80129d4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8011304:	4b47      	ldr	r3, [pc, #284]	; (8011424 <tcp_close_shutdown+0x1b0>)
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	687a      	ldr	r2, [r7, #4]
 801130a:	429a      	cmp	r2, r3
 801130c:	d105      	bne.n	801131a <tcp_close_shutdown+0xa6>
 801130e:	4b45      	ldr	r3, [pc, #276]	; (8011424 <tcp_close_shutdown+0x1b0>)
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	68db      	ldr	r3, [r3, #12]
 8011314:	4a43      	ldr	r2, [pc, #268]	; (8011424 <tcp_close_shutdown+0x1b0>)
 8011316:	6013      	str	r3, [r2, #0]
 8011318:	e013      	b.n	8011342 <tcp_close_shutdown+0xce>
 801131a:	4b42      	ldr	r3, [pc, #264]	; (8011424 <tcp_close_shutdown+0x1b0>)
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	60fb      	str	r3, [r7, #12]
 8011320:	e00c      	b.n	801133c <tcp_close_shutdown+0xc8>
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	68db      	ldr	r3, [r3, #12]
 8011326:	687a      	ldr	r2, [r7, #4]
 8011328:	429a      	cmp	r2, r3
 801132a:	d104      	bne.n	8011336 <tcp_close_shutdown+0xc2>
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	68da      	ldr	r2, [r3, #12]
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	60da      	str	r2, [r3, #12]
 8011334:	e005      	b.n	8011342 <tcp_close_shutdown+0xce>
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	68db      	ldr	r3, [r3, #12]
 801133a:	60fb      	str	r3, [r7, #12]
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	2b00      	cmp	r3, #0
 8011340:	d1ef      	bne.n	8011322 <tcp_close_shutdown+0xae>
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	2200      	movs	r2, #0
 8011346:	60da      	str	r2, [r3, #12]
 8011348:	4b37      	ldr	r3, [pc, #220]	; (8011428 <tcp_close_shutdown+0x1b4>)
 801134a:	2201      	movs	r2, #1
 801134c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801134e:	4b37      	ldr	r3, [pc, #220]	; (801142c <tcp_close_shutdown+0x1b8>)
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	687a      	ldr	r2, [r7, #4]
 8011354:	429a      	cmp	r2, r3
 8011356:	d102      	bne.n	801135e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8011358:	f004 f800 	bl	801535c <tcp_trigger_input_pcb_close>
 801135c:	e002      	b.n	8011364 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 801135e:	6878      	ldr	r0, [r7, #4]
 8011360:	f7ff fed6 	bl	8011110 <tcp_free>
      }
      return ERR_OK;
 8011364:	2300      	movs	r3, #0
 8011366:	e050      	b.n	801140a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	7d1b      	ldrb	r3, [r3, #20]
 801136c:	2b02      	cmp	r3, #2
 801136e:	d03b      	beq.n	80113e8 <tcp_close_shutdown+0x174>
 8011370:	2b02      	cmp	r3, #2
 8011372:	dc44      	bgt.n	80113fe <tcp_close_shutdown+0x18a>
 8011374:	2b00      	cmp	r3, #0
 8011376:	d002      	beq.n	801137e <tcp_close_shutdown+0x10a>
 8011378:	2b01      	cmp	r3, #1
 801137a:	d02a      	beq.n	80113d2 <tcp_close_shutdown+0x15e>
 801137c:	e03f      	b.n	80113fe <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	8adb      	ldrh	r3, [r3, #22]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d021      	beq.n	80113ca <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011386:	4b2a      	ldr	r3, [pc, #168]	; (8011430 <tcp_close_shutdown+0x1bc>)
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	687a      	ldr	r2, [r7, #4]
 801138c:	429a      	cmp	r2, r3
 801138e:	d105      	bne.n	801139c <tcp_close_shutdown+0x128>
 8011390:	4b27      	ldr	r3, [pc, #156]	; (8011430 <tcp_close_shutdown+0x1bc>)
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	68db      	ldr	r3, [r3, #12]
 8011396:	4a26      	ldr	r2, [pc, #152]	; (8011430 <tcp_close_shutdown+0x1bc>)
 8011398:	6013      	str	r3, [r2, #0]
 801139a:	e013      	b.n	80113c4 <tcp_close_shutdown+0x150>
 801139c:	4b24      	ldr	r3, [pc, #144]	; (8011430 <tcp_close_shutdown+0x1bc>)
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	60bb      	str	r3, [r7, #8]
 80113a2:	e00c      	b.n	80113be <tcp_close_shutdown+0x14a>
 80113a4:	68bb      	ldr	r3, [r7, #8]
 80113a6:	68db      	ldr	r3, [r3, #12]
 80113a8:	687a      	ldr	r2, [r7, #4]
 80113aa:	429a      	cmp	r2, r3
 80113ac:	d104      	bne.n	80113b8 <tcp_close_shutdown+0x144>
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	68da      	ldr	r2, [r3, #12]
 80113b2:	68bb      	ldr	r3, [r7, #8]
 80113b4:	60da      	str	r2, [r3, #12]
 80113b6:	e005      	b.n	80113c4 <tcp_close_shutdown+0x150>
 80113b8:	68bb      	ldr	r3, [r7, #8]
 80113ba:	68db      	ldr	r3, [r3, #12]
 80113bc:	60bb      	str	r3, [r7, #8]
 80113be:	68bb      	ldr	r3, [r7, #8]
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d1ef      	bne.n	80113a4 <tcp_close_shutdown+0x130>
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	2200      	movs	r2, #0
 80113c8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80113ca:	6878      	ldr	r0, [r7, #4]
 80113cc:	f7ff fea0 	bl	8011110 <tcp_free>
      break;
 80113d0:	e01a      	b.n	8011408 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80113d2:	6878      	ldr	r0, [r7, #4]
 80113d4:	f7ff ff14 	bl	8011200 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80113d8:	6879      	ldr	r1, [r7, #4]
 80113da:	4816      	ldr	r0, [pc, #88]	; (8011434 <tcp_close_shutdown+0x1c0>)
 80113dc:	f001 fb4a 	bl	8012a74 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80113e0:	6878      	ldr	r0, [r7, #4]
 80113e2:	f7ff feb1 	bl	8011148 <tcp_free_listen>
      break;
 80113e6:	e00f      	b.n	8011408 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80113e8:	6879      	ldr	r1, [r7, #4]
 80113ea:	480e      	ldr	r0, [pc, #56]	; (8011424 <tcp_close_shutdown+0x1b0>)
 80113ec:	f001 fb42 	bl	8012a74 <tcp_pcb_remove>
 80113f0:	4b0d      	ldr	r3, [pc, #52]	; (8011428 <tcp_close_shutdown+0x1b4>)
 80113f2:	2201      	movs	r2, #1
 80113f4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80113f6:	6878      	ldr	r0, [r7, #4]
 80113f8:	f7ff fe8a 	bl	8011110 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80113fc:	e004      	b.n	8011408 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80113fe:	6878      	ldr	r0, [r7, #4]
 8011400:	f000 f81a 	bl	8011438 <tcp_close_shutdown_fin>
 8011404:	4603      	mov	r3, r0
 8011406:	e000      	b.n	801140a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8011408:	2300      	movs	r3, #0
}
 801140a:	4618      	mov	r0, r3
 801140c:	3710      	adds	r7, #16
 801140e:	46bd      	mov	sp, r7
 8011410:	bdb0      	pop	{r4, r5, r7, pc}
 8011412:	bf00      	nop
 8011414:	08026e98 	.word	0x08026e98
 8011418:	08026f6c 	.word	0x08026f6c
 801141c:	08026edc 	.word	0x08026edc
 8011420:	08026f8c 	.word	0x08026f8c
 8011424:	2000fc48 	.word	0x2000fc48
 8011428:	2000fc50 	.word	0x2000fc50
 801142c:	2000fc88 	.word	0x2000fc88
 8011430:	2000fc40 	.word	0x2000fc40
 8011434:	2000fc44 	.word	0x2000fc44

08011438 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8011438:	b580      	push	{r7, lr}
 801143a:	b084      	sub	sp, #16
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d106      	bne.n	8011454 <tcp_close_shutdown_fin+0x1c>
 8011446:	4b2e      	ldr	r3, [pc, #184]	; (8011500 <tcp_close_shutdown_fin+0xc8>)
 8011448:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 801144c:	492d      	ldr	r1, [pc, #180]	; (8011504 <tcp_close_shutdown_fin+0xcc>)
 801144e:	482e      	ldr	r0, [pc, #184]	; (8011508 <tcp_close_shutdown_fin+0xd0>)
 8011450:	f012 fbc6 	bl	8023be0 <iprintf>

  switch (pcb->state) {
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	7d1b      	ldrb	r3, [r3, #20]
 8011458:	2b07      	cmp	r3, #7
 801145a:	d020      	beq.n	801149e <tcp_close_shutdown_fin+0x66>
 801145c:	2b07      	cmp	r3, #7
 801145e:	dc2b      	bgt.n	80114b8 <tcp_close_shutdown_fin+0x80>
 8011460:	2b03      	cmp	r3, #3
 8011462:	d002      	beq.n	801146a <tcp_close_shutdown_fin+0x32>
 8011464:	2b04      	cmp	r3, #4
 8011466:	d00d      	beq.n	8011484 <tcp_close_shutdown_fin+0x4c>
 8011468:	e026      	b.n	80114b8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801146a:	6878      	ldr	r0, [r7, #4]
 801146c:	f004 fde0 	bl	8016030 <tcp_send_fin>
 8011470:	4603      	mov	r3, r0
 8011472:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011474:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011478:	2b00      	cmp	r3, #0
 801147a:	d11f      	bne.n	80114bc <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	2205      	movs	r2, #5
 8011480:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011482:	e01b      	b.n	80114bc <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8011484:	6878      	ldr	r0, [r7, #4]
 8011486:	f004 fdd3 	bl	8016030 <tcp_send_fin>
 801148a:	4603      	mov	r3, r0
 801148c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801148e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d114      	bne.n	80114c0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	2205      	movs	r2, #5
 801149a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801149c:	e010      	b.n	80114c0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801149e:	6878      	ldr	r0, [r7, #4]
 80114a0:	f004 fdc6 	bl	8016030 <tcp_send_fin>
 80114a4:	4603      	mov	r3, r0
 80114a6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80114a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d109      	bne.n	80114c4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	2209      	movs	r2, #9
 80114b4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80114b6:	e005      	b.n	80114c4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80114b8:	2300      	movs	r3, #0
 80114ba:	e01c      	b.n	80114f6 <tcp_close_shutdown_fin+0xbe>
      break;
 80114bc:	bf00      	nop
 80114be:	e002      	b.n	80114c6 <tcp_close_shutdown_fin+0x8e>
      break;
 80114c0:	bf00      	nop
 80114c2:	e000      	b.n	80114c6 <tcp_close_shutdown_fin+0x8e>
      break;
 80114c4:	bf00      	nop
  }

  if (err == ERR_OK) {
 80114c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d103      	bne.n	80114d6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80114ce:	6878      	ldr	r0, [r7, #4]
 80114d0:	f004 feec 	bl	80162ac <tcp_output>
 80114d4:	e00d      	b.n	80114f2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80114d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80114da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80114de:	d108      	bne.n	80114f2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	8b5b      	ldrh	r3, [r3, #26]
 80114e4:	f043 0308 	orr.w	r3, r3, #8
 80114e8:	b29a      	uxth	r2, r3
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80114ee:	2300      	movs	r3, #0
 80114f0:	e001      	b.n	80114f6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80114f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80114f6:	4618      	mov	r0, r3
 80114f8:	3710      	adds	r7, #16
 80114fa:	46bd      	mov	sp, r7
 80114fc:	bd80      	pop	{r7, pc}
 80114fe:	bf00      	nop
 8011500:	08026e98 	.word	0x08026e98
 8011504:	08026f48 	.word	0x08026f48
 8011508:	08026edc 	.word	0x08026edc

0801150c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801150c:	b580      	push	{r7, lr}
 801150e:	b082      	sub	sp, #8
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	2b00      	cmp	r3, #0
 8011518:	d109      	bne.n	801152e <tcp_close+0x22>
 801151a:	4b0f      	ldr	r3, [pc, #60]	; (8011558 <tcp_close+0x4c>)
 801151c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8011520:	490e      	ldr	r1, [pc, #56]	; (801155c <tcp_close+0x50>)
 8011522:	480f      	ldr	r0, [pc, #60]	; (8011560 <tcp_close+0x54>)
 8011524:	f012 fb5c 	bl	8023be0 <iprintf>
 8011528:	f06f 030f 	mvn.w	r3, #15
 801152c:	e00f      	b.n	801154e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	7d1b      	ldrb	r3, [r3, #20]
 8011532:	2b01      	cmp	r3, #1
 8011534:	d006      	beq.n	8011544 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	8b5b      	ldrh	r3, [r3, #26]
 801153a:	f043 0310 	orr.w	r3, r3, #16
 801153e:	b29a      	uxth	r2, r3
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8011544:	2101      	movs	r1, #1
 8011546:	6878      	ldr	r0, [r7, #4]
 8011548:	f7ff fe94 	bl	8011274 <tcp_close_shutdown>
 801154c:	4603      	mov	r3, r0
}
 801154e:	4618      	mov	r0, r3
 8011550:	3708      	adds	r7, #8
 8011552:	46bd      	mov	sp, r7
 8011554:	bd80      	pop	{r7, pc}
 8011556:	bf00      	nop
 8011558:	08026e98 	.word	0x08026e98
 801155c:	08026fa8 	.word	0x08026fa8
 8011560:	08026edc 	.word	0x08026edc

08011564 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8011564:	b580      	push	{r7, lr}
 8011566:	b084      	sub	sp, #16
 8011568:	af00      	add	r7, sp, #0
 801156a:	60f8      	str	r0, [r7, #12]
 801156c:	60b9      	str	r1, [r7, #8]
 801156e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	2b00      	cmp	r3, #0
 8011574:	d109      	bne.n	801158a <tcp_shutdown+0x26>
 8011576:	4b26      	ldr	r3, [pc, #152]	; (8011610 <tcp_shutdown+0xac>)
 8011578:	f240 2207 	movw	r2, #519	; 0x207
 801157c:	4925      	ldr	r1, [pc, #148]	; (8011614 <tcp_shutdown+0xb0>)
 801157e:	4826      	ldr	r0, [pc, #152]	; (8011618 <tcp_shutdown+0xb4>)
 8011580:	f012 fb2e 	bl	8023be0 <iprintf>
 8011584:	f06f 030f 	mvn.w	r3, #15
 8011588:	e03d      	b.n	8011606 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	7d1b      	ldrb	r3, [r3, #20]
 801158e:	2b01      	cmp	r3, #1
 8011590:	d102      	bne.n	8011598 <tcp_shutdown+0x34>
    return ERR_CONN;
 8011592:	f06f 030a 	mvn.w	r3, #10
 8011596:	e036      	b.n	8011606 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8011598:	68bb      	ldr	r3, [r7, #8]
 801159a:	2b00      	cmp	r3, #0
 801159c:	d01b      	beq.n	80115d6 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	8b5b      	ldrh	r3, [r3, #26]
 80115a2:	f043 0310 	orr.w	r3, r3, #16
 80115a6:	b29a      	uxth	r2, r3
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d005      	beq.n	80115be <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 80115b2:	2101      	movs	r1, #1
 80115b4:	68f8      	ldr	r0, [r7, #12]
 80115b6:	f7ff fe5d 	bl	8011274 <tcp_close_shutdown>
 80115ba:	4603      	mov	r3, r0
 80115bc:	e023      	b.n	8011606 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d007      	beq.n	80115d6 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80115ca:	4618      	mov	r0, r3
 80115cc:	f7ff f968 	bl	80108a0 <pbuf_free>
      pcb->refused_data = NULL;
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	2200      	movs	r2, #0
 80115d4:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d013      	beq.n	8011604 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	7d1b      	ldrb	r3, [r3, #20]
 80115e0:	2b04      	cmp	r3, #4
 80115e2:	dc02      	bgt.n	80115ea <tcp_shutdown+0x86>
 80115e4:	2b03      	cmp	r3, #3
 80115e6:	da02      	bge.n	80115ee <tcp_shutdown+0x8a>
 80115e8:	e009      	b.n	80115fe <tcp_shutdown+0x9a>
 80115ea:	2b07      	cmp	r3, #7
 80115ec:	d107      	bne.n	80115fe <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 80115ee:	68bb      	ldr	r3, [r7, #8]
 80115f0:	b2db      	uxtb	r3, r3
 80115f2:	4619      	mov	r1, r3
 80115f4:	68f8      	ldr	r0, [r7, #12]
 80115f6:	f7ff fe3d 	bl	8011274 <tcp_close_shutdown>
 80115fa:	4603      	mov	r3, r0
 80115fc:	e003      	b.n	8011606 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 80115fe:	f06f 030a 	mvn.w	r3, #10
 8011602:	e000      	b.n	8011606 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8011604:	2300      	movs	r3, #0
}
 8011606:	4618      	mov	r0, r3
 8011608:	3710      	adds	r7, #16
 801160a:	46bd      	mov	sp, r7
 801160c:	bd80      	pop	{r7, pc}
 801160e:	bf00      	nop
 8011610:	08026e98 	.word	0x08026e98
 8011614:	08026fc0 	.word	0x08026fc0
 8011618:	08026edc 	.word	0x08026edc

0801161c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801161c:	b580      	push	{r7, lr}
 801161e:	b08e      	sub	sp, #56	; 0x38
 8011620:	af04      	add	r7, sp, #16
 8011622:	6078      	str	r0, [r7, #4]
 8011624:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	2b00      	cmp	r3, #0
 801162a:	d107      	bne.n	801163c <tcp_abandon+0x20>
 801162c:	4b52      	ldr	r3, [pc, #328]	; (8011778 <tcp_abandon+0x15c>)
 801162e:	f240 223d 	movw	r2, #573	; 0x23d
 8011632:	4952      	ldr	r1, [pc, #328]	; (801177c <tcp_abandon+0x160>)
 8011634:	4852      	ldr	r0, [pc, #328]	; (8011780 <tcp_abandon+0x164>)
 8011636:	f012 fad3 	bl	8023be0 <iprintf>
 801163a:	e099      	b.n	8011770 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	7d1b      	ldrb	r3, [r3, #20]
 8011640:	2b01      	cmp	r3, #1
 8011642:	d106      	bne.n	8011652 <tcp_abandon+0x36>
 8011644:	4b4c      	ldr	r3, [pc, #304]	; (8011778 <tcp_abandon+0x15c>)
 8011646:	f44f 7210 	mov.w	r2, #576	; 0x240
 801164a:	494e      	ldr	r1, [pc, #312]	; (8011784 <tcp_abandon+0x168>)
 801164c:	484c      	ldr	r0, [pc, #304]	; (8011780 <tcp_abandon+0x164>)
 801164e:	f012 fac7 	bl	8023be0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	7d1b      	ldrb	r3, [r3, #20]
 8011656:	2b0a      	cmp	r3, #10
 8011658:	d107      	bne.n	801166a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801165a:	6879      	ldr	r1, [r7, #4]
 801165c:	484a      	ldr	r0, [pc, #296]	; (8011788 <tcp_abandon+0x16c>)
 801165e:	f001 fa09 	bl	8012a74 <tcp_pcb_remove>
    tcp_free(pcb);
 8011662:	6878      	ldr	r0, [r7, #4]
 8011664:	f7ff fd54 	bl	8011110 <tcp_free>
 8011668:	e082      	b.n	8011770 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801166a:	2300      	movs	r3, #0
 801166c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801166e:	2300      	movs	r3, #0
 8011670:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011676:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801167c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011684:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	691b      	ldr	r3, [r3, #16]
 801168a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	7d1b      	ldrb	r3, [r3, #20]
 8011690:	2b00      	cmp	r3, #0
 8011692:	d126      	bne.n	80116e2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	8adb      	ldrh	r3, [r3, #22]
 8011698:	2b00      	cmp	r3, #0
 801169a:	d02e      	beq.n	80116fa <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801169c:	4b3b      	ldr	r3, [pc, #236]	; (801178c <tcp_abandon+0x170>)
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	687a      	ldr	r2, [r7, #4]
 80116a2:	429a      	cmp	r2, r3
 80116a4:	d105      	bne.n	80116b2 <tcp_abandon+0x96>
 80116a6:	4b39      	ldr	r3, [pc, #228]	; (801178c <tcp_abandon+0x170>)
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	68db      	ldr	r3, [r3, #12]
 80116ac:	4a37      	ldr	r2, [pc, #220]	; (801178c <tcp_abandon+0x170>)
 80116ae:	6013      	str	r3, [r2, #0]
 80116b0:	e013      	b.n	80116da <tcp_abandon+0xbe>
 80116b2:	4b36      	ldr	r3, [pc, #216]	; (801178c <tcp_abandon+0x170>)
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	61fb      	str	r3, [r7, #28]
 80116b8:	e00c      	b.n	80116d4 <tcp_abandon+0xb8>
 80116ba:	69fb      	ldr	r3, [r7, #28]
 80116bc:	68db      	ldr	r3, [r3, #12]
 80116be:	687a      	ldr	r2, [r7, #4]
 80116c0:	429a      	cmp	r2, r3
 80116c2:	d104      	bne.n	80116ce <tcp_abandon+0xb2>
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	68da      	ldr	r2, [r3, #12]
 80116c8:	69fb      	ldr	r3, [r7, #28]
 80116ca:	60da      	str	r2, [r3, #12]
 80116cc:	e005      	b.n	80116da <tcp_abandon+0xbe>
 80116ce:	69fb      	ldr	r3, [r7, #28]
 80116d0:	68db      	ldr	r3, [r3, #12]
 80116d2:	61fb      	str	r3, [r7, #28]
 80116d4:	69fb      	ldr	r3, [r7, #28]
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d1ef      	bne.n	80116ba <tcp_abandon+0x9e>
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	2200      	movs	r2, #0
 80116de:	60da      	str	r2, [r3, #12]
 80116e0:	e00b      	b.n	80116fa <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80116e2:	683b      	ldr	r3, [r7, #0]
 80116e4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	8adb      	ldrh	r3, [r3, #22]
 80116ea:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80116ec:	6879      	ldr	r1, [r7, #4]
 80116ee:	4828      	ldr	r0, [pc, #160]	; (8011790 <tcp_abandon+0x174>)
 80116f0:	f001 f9c0 	bl	8012a74 <tcp_pcb_remove>
 80116f4:	4b27      	ldr	r3, [pc, #156]	; (8011794 <tcp_abandon+0x178>)
 80116f6:	2201      	movs	r2, #1
 80116f8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d004      	beq.n	801170c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011706:	4618      	mov	r0, r3
 8011708:	f000 fe94 	bl	8012434 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011710:	2b00      	cmp	r3, #0
 8011712:	d004      	beq.n	801171e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011718:	4618      	mov	r0, r3
 801171a:	f000 fe8b 	bl	8012434 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011722:	2b00      	cmp	r3, #0
 8011724:	d004      	beq.n	8011730 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801172a:	4618      	mov	r0, r3
 801172c:	f000 fe82 	bl	8012434 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8011730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011732:	2b00      	cmp	r3, #0
 8011734:	d00e      	beq.n	8011754 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8011736:	6879      	ldr	r1, [r7, #4]
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	3304      	adds	r3, #4
 801173c:	687a      	ldr	r2, [r7, #4]
 801173e:	8b12      	ldrh	r2, [r2, #24]
 8011740:	9202      	str	r2, [sp, #8]
 8011742:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011744:	9201      	str	r2, [sp, #4]
 8011746:	9300      	str	r3, [sp, #0]
 8011748:	460b      	mov	r3, r1
 801174a:	697a      	ldr	r2, [r7, #20]
 801174c:	69b9      	ldr	r1, [r7, #24]
 801174e:	6878      	ldr	r0, [r7, #4]
 8011750:	f005 fb60 	bl	8016e14 <tcp_rst>
    }
    last_state = pcb->state;
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	7d1b      	ldrb	r3, [r3, #20]
 8011758:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801175a:	6878      	ldr	r0, [r7, #4]
 801175c:	f7ff fcd8 	bl	8011110 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8011760:	693b      	ldr	r3, [r7, #16]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d004      	beq.n	8011770 <tcp_abandon+0x154>
 8011766:	693b      	ldr	r3, [r7, #16]
 8011768:	f06f 010c 	mvn.w	r1, #12
 801176c:	68f8      	ldr	r0, [r7, #12]
 801176e:	4798      	blx	r3
  }
}
 8011770:	3728      	adds	r7, #40	; 0x28
 8011772:	46bd      	mov	sp, r7
 8011774:	bd80      	pop	{r7, pc}
 8011776:	bf00      	nop
 8011778:	08026e98 	.word	0x08026e98
 801177c:	08026fdc 	.word	0x08026fdc
 8011780:	08026edc 	.word	0x08026edc
 8011784:	08026ff8 	.word	0x08026ff8
 8011788:	2000fc4c 	.word	0x2000fc4c
 801178c:	2000fc40 	.word	0x2000fc40
 8011790:	2000fc48 	.word	0x2000fc48
 8011794:	2000fc50 	.word	0x2000fc50

08011798 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8011798:	b580      	push	{r7, lr}
 801179a:	b082      	sub	sp, #8
 801179c:	af00      	add	r7, sp, #0
 801179e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80117a0:	2101      	movs	r1, #1
 80117a2:	6878      	ldr	r0, [r7, #4]
 80117a4:	f7ff ff3a 	bl	801161c <tcp_abandon>
}
 80117a8:	bf00      	nop
 80117aa:	3708      	adds	r7, #8
 80117ac:	46bd      	mov	sp, r7
 80117ae:	bd80      	pop	{r7, pc}

080117b0 <tcp_bind_netif>:
 * @param pcb the tcp_pcb to bind.
 * @param netif the netif to bind to. Can be NULL.
 */
void
tcp_bind_netif(struct tcp_pcb *pcb, const struct netif *netif)
{
 80117b0:	b480      	push	{r7}
 80117b2:	b083      	sub	sp, #12
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	6078      	str	r0, [r7, #4]
 80117b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (netif != NULL) {
 80117ba:	683b      	ldr	r3, [r7, #0]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d007      	beq.n	80117d0 <tcp_bind_netif+0x20>
    pcb->netif_idx = netif_get_index(netif);
 80117c0:	683b      	ldr	r3, [r7, #0]
 80117c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80117c6:	3301      	adds	r3, #1
 80117c8:	b2da      	uxtb	r2, r3
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	721a      	strb	r2, [r3, #8]
  } else {
    pcb->netif_idx = NETIF_NO_INDEX;
  }
}
 80117ce:	e002      	b.n	80117d6 <tcp_bind_netif+0x26>
    pcb->netif_idx = NETIF_NO_INDEX;
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	2200      	movs	r2, #0
 80117d4:	721a      	strb	r2, [r3, #8]
}
 80117d6:	bf00      	nop
 80117d8:	370c      	adds	r7, #12
 80117da:	46bd      	mov	sp, r7
 80117dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e0:	4770      	bx	lr
	...

080117e4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80117e4:	b580      	push	{r7, lr}
 80117e6:	b084      	sub	sp, #16
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d106      	bne.n	8011800 <tcp_update_rcv_ann_wnd+0x1c>
 80117f2:	4b25      	ldr	r3, [pc, #148]	; (8011888 <tcp_update_rcv_ann_wnd+0xa4>)
 80117f4:	f240 32a6 	movw	r2, #934	; 0x3a6
 80117f8:	4924      	ldr	r1, [pc, #144]	; (801188c <tcp_update_rcv_ann_wnd+0xa8>)
 80117fa:	4825      	ldr	r0, [pc, #148]	; (8011890 <tcp_update_rcv_ann_wnd+0xac>)
 80117fc:	f012 f9f0 	bl	8023be0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011804:	687a      	ldr	r2, [r7, #4]
 8011806:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8011808:	4413      	add	r3, r2
 801180a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011810:	687a      	ldr	r2, [r7, #4]
 8011812:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8011814:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8011818:	bf28      	it	cs
 801181a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 801181e:	b292      	uxth	r2, r2
 8011820:	4413      	add	r3, r2
 8011822:	68fa      	ldr	r2, [r7, #12]
 8011824:	1ad3      	subs	r3, r2, r3
 8011826:	2b00      	cmp	r3, #0
 8011828:	db08      	blt.n	801183c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011836:	68fa      	ldr	r2, [r7, #12]
 8011838:	1ad3      	subs	r3, r2, r3
 801183a:	e020      	b.n	801187e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011844:	1ad3      	subs	r3, r2, r3
 8011846:	2b00      	cmp	r3, #0
 8011848:	dd03      	ble.n	8011852 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	2200      	movs	r2, #0
 801184e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011850:	e014      	b.n	801187c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801185a:	1ad3      	subs	r3, r2, r3
 801185c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801185e:	68bb      	ldr	r3, [r7, #8]
 8011860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011864:	d306      	bcc.n	8011874 <tcp_update_rcv_ann_wnd+0x90>
 8011866:	4b08      	ldr	r3, [pc, #32]	; (8011888 <tcp_update_rcv_ann_wnd+0xa4>)
 8011868:	f240 32b6 	movw	r2, #950	; 0x3b6
 801186c:	4909      	ldr	r1, [pc, #36]	; (8011894 <tcp_update_rcv_ann_wnd+0xb0>)
 801186e:	4808      	ldr	r0, [pc, #32]	; (8011890 <tcp_update_rcv_ann_wnd+0xac>)
 8011870:	f012 f9b6 	bl	8023be0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8011874:	68bb      	ldr	r3, [r7, #8]
 8011876:	b29a      	uxth	r2, r3
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 801187c:	2300      	movs	r3, #0
  }
}
 801187e:	4618      	mov	r0, r3
 8011880:	3710      	adds	r7, #16
 8011882:	46bd      	mov	sp, r7
 8011884:	bd80      	pop	{r7, pc}
 8011886:	bf00      	nop
 8011888:	08026e98 	.word	0x08026e98
 801188c:	080270f4 	.word	0x080270f4
 8011890:	08026edc 	.word	0x08026edc
 8011894:	08027118 	.word	0x08027118

08011898 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8011898:	b580      	push	{r7, lr}
 801189a:	b084      	sub	sp, #16
 801189c:	af00      	add	r7, sp, #0
 801189e:	6078      	str	r0, [r7, #4]
 80118a0:	460b      	mov	r3, r1
 80118a2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d107      	bne.n	80118ba <tcp_recved+0x22>
 80118aa:	4b1f      	ldr	r3, [pc, #124]	; (8011928 <tcp_recved+0x90>)
 80118ac:	f240 32cf 	movw	r2, #975	; 0x3cf
 80118b0:	491e      	ldr	r1, [pc, #120]	; (801192c <tcp_recved+0x94>)
 80118b2:	481f      	ldr	r0, [pc, #124]	; (8011930 <tcp_recved+0x98>)
 80118b4:	f012 f994 	bl	8023be0 <iprintf>
 80118b8:	e032      	b.n	8011920 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	7d1b      	ldrb	r3, [r3, #20]
 80118be:	2b01      	cmp	r3, #1
 80118c0:	d106      	bne.n	80118d0 <tcp_recved+0x38>
 80118c2:	4b19      	ldr	r3, [pc, #100]	; (8011928 <tcp_recved+0x90>)
 80118c4:	f240 32d2 	movw	r2, #978	; 0x3d2
 80118c8:	491a      	ldr	r1, [pc, #104]	; (8011934 <tcp_recved+0x9c>)
 80118ca:	4819      	ldr	r0, [pc, #100]	; (8011930 <tcp_recved+0x98>)
 80118cc:	f012 f988 	bl	8023be0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80118d4:	887b      	ldrh	r3, [r7, #2]
 80118d6:	4413      	add	r3, r2
 80118d8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80118da:	89fb      	ldrh	r3, [r7, #14]
 80118dc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80118e0:	d804      	bhi.n	80118ec <tcp_recved+0x54>
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80118e6:	89fa      	ldrh	r2, [r7, #14]
 80118e8:	429a      	cmp	r2, r3
 80118ea:	d204      	bcs.n	80118f6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80118f2:	851a      	strh	r2, [r3, #40]	; 0x28
 80118f4:	e002      	b.n	80118fc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	89fa      	ldrh	r2, [r7, #14]
 80118fa:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80118fc:	6878      	ldr	r0, [r7, #4]
 80118fe:	f7ff ff71 	bl	80117e4 <tcp_update_rcv_ann_wnd>
 8011902:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8011904:	68bb      	ldr	r3, [r7, #8]
 8011906:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801190a:	d309      	bcc.n	8011920 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	8b5b      	ldrh	r3, [r3, #26]
 8011910:	f043 0302 	orr.w	r3, r3, #2
 8011914:	b29a      	uxth	r2, r3
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801191a:	6878      	ldr	r0, [r7, #4]
 801191c:	f004 fcc6 	bl	80162ac <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8011920:	3710      	adds	r7, #16
 8011922:	46bd      	mov	sp, r7
 8011924:	bd80      	pop	{r7, pc}
 8011926:	bf00      	nop
 8011928:	08026e98 	.word	0x08026e98
 801192c:	08027134 	.word	0x08027134
 8011930:	08026edc 	.word	0x08026edc
 8011934:	0802714c 	.word	0x0802714c

08011938 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8011938:	b480      	push	{r7}
 801193a:	b083      	sub	sp, #12
 801193c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801193e:	2300      	movs	r3, #0
 8011940:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8011942:	4b1e      	ldr	r3, [pc, #120]	; (80119bc <tcp_new_port+0x84>)
 8011944:	881b      	ldrh	r3, [r3, #0]
 8011946:	3301      	adds	r3, #1
 8011948:	b29a      	uxth	r2, r3
 801194a:	4b1c      	ldr	r3, [pc, #112]	; (80119bc <tcp_new_port+0x84>)
 801194c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801194e:	4b1b      	ldr	r3, [pc, #108]	; (80119bc <tcp_new_port+0x84>)
 8011950:	881b      	ldrh	r3, [r3, #0]
 8011952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011956:	4293      	cmp	r3, r2
 8011958:	d103      	bne.n	8011962 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801195a:	4b18      	ldr	r3, [pc, #96]	; (80119bc <tcp_new_port+0x84>)
 801195c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8011960:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8011962:	2300      	movs	r3, #0
 8011964:	71fb      	strb	r3, [r7, #7]
 8011966:	e01e      	b.n	80119a6 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8011968:	79fb      	ldrb	r3, [r7, #7]
 801196a:	4a15      	ldr	r2, [pc, #84]	; (80119c0 <tcp_new_port+0x88>)
 801196c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	603b      	str	r3, [r7, #0]
 8011974:	e011      	b.n	801199a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8011976:	683b      	ldr	r3, [r7, #0]
 8011978:	8ada      	ldrh	r2, [r3, #22]
 801197a:	4b10      	ldr	r3, [pc, #64]	; (80119bc <tcp_new_port+0x84>)
 801197c:	881b      	ldrh	r3, [r3, #0]
 801197e:	429a      	cmp	r2, r3
 8011980:	d108      	bne.n	8011994 <tcp_new_port+0x5c>
        n++;
 8011982:	88bb      	ldrh	r3, [r7, #4]
 8011984:	3301      	adds	r3, #1
 8011986:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8011988:	88bb      	ldrh	r3, [r7, #4]
 801198a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801198e:	d3d8      	bcc.n	8011942 <tcp_new_port+0xa>
          return 0;
 8011990:	2300      	movs	r3, #0
 8011992:	e00d      	b.n	80119b0 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8011994:	683b      	ldr	r3, [r7, #0]
 8011996:	68db      	ldr	r3, [r3, #12]
 8011998:	603b      	str	r3, [r7, #0]
 801199a:	683b      	ldr	r3, [r7, #0]
 801199c:	2b00      	cmp	r3, #0
 801199e:	d1ea      	bne.n	8011976 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80119a0:	79fb      	ldrb	r3, [r7, #7]
 80119a2:	3301      	adds	r3, #1
 80119a4:	71fb      	strb	r3, [r7, #7]
 80119a6:	79fb      	ldrb	r3, [r7, #7]
 80119a8:	2b03      	cmp	r3, #3
 80119aa:	d9dd      	bls.n	8011968 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80119ac:	4b03      	ldr	r3, [pc, #12]	; (80119bc <tcp_new_port+0x84>)
 80119ae:	881b      	ldrh	r3, [r3, #0]
}
 80119b0:	4618      	mov	r0, r3
 80119b2:	370c      	adds	r7, #12
 80119b4:	46bd      	mov	sp, r7
 80119b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ba:	4770      	bx	lr
 80119bc:	20000014 	.word	0x20000014
 80119c0:	0802930c 	.word	0x0802930c

080119c4 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b08a      	sub	sp, #40	; 0x28
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	60f8      	str	r0, [r7, #12]
 80119cc:	60b9      	str	r1, [r7, #8]
 80119ce:	603b      	str	r3, [r7, #0]
 80119d0:	4613      	mov	r3, r2
 80119d2:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 80119d4:	2300      	movs	r3, #0
 80119d6:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d109      	bne.n	80119f2 <tcp_connect+0x2e>
 80119de:	4b7d      	ldr	r3, [pc, #500]	; (8011bd4 <tcp_connect+0x210>)
 80119e0:	f240 4235 	movw	r2, #1077	; 0x435
 80119e4:	497c      	ldr	r1, [pc, #496]	; (8011bd8 <tcp_connect+0x214>)
 80119e6:	487d      	ldr	r0, [pc, #500]	; (8011bdc <tcp_connect+0x218>)
 80119e8:	f012 f8fa 	bl	8023be0 <iprintf>
 80119ec:	f06f 030f 	mvn.w	r3, #15
 80119f0:	e0ec      	b.n	8011bcc <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80119f2:	68bb      	ldr	r3, [r7, #8]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d109      	bne.n	8011a0c <tcp_connect+0x48>
 80119f8:	4b76      	ldr	r3, [pc, #472]	; (8011bd4 <tcp_connect+0x210>)
 80119fa:	f240 4236 	movw	r2, #1078	; 0x436
 80119fe:	4978      	ldr	r1, [pc, #480]	; (8011be0 <tcp_connect+0x21c>)
 8011a00:	4876      	ldr	r0, [pc, #472]	; (8011bdc <tcp_connect+0x218>)
 8011a02:	f012 f8ed 	bl	8023be0 <iprintf>
 8011a06:	f06f 030f 	mvn.w	r3, #15
 8011a0a:	e0df      	b.n	8011bcc <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	7d1b      	ldrb	r3, [r3, #20]
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d009      	beq.n	8011a28 <tcp_connect+0x64>
 8011a14:	4b6f      	ldr	r3, [pc, #444]	; (8011bd4 <tcp_connect+0x210>)
 8011a16:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8011a1a:	4972      	ldr	r1, [pc, #456]	; (8011be4 <tcp_connect+0x220>)
 8011a1c:	486f      	ldr	r0, [pc, #444]	; (8011bdc <tcp_connect+0x218>)
 8011a1e:	f012 f8df 	bl	8023be0 <iprintf>
 8011a22:	f06f 0309 	mvn.w	r3, #9
 8011a26:	e0d1      	b.n	8011bcc <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8011a28:	68bb      	ldr	r3, [r7, #8]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d002      	beq.n	8011a34 <tcp_connect+0x70>
 8011a2e:	68bb      	ldr	r3, [r7, #8]
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	e000      	b.n	8011a36 <tcp_connect+0x72>
 8011a34:	2300      	movs	r3, #0
 8011a36:	68fa      	ldr	r2, [r7, #12]
 8011a38:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	88fa      	ldrh	r2, [r7, #6]
 8011a3e:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	7a1b      	ldrb	r3, [r3, #8]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d006      	beq.n	8011a56 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	7a1b      	ldrb	r3, [r3, #8]
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	f7fe fb2f 	bl	80100b0 <netif_get_by_index>
 8011a52:	6278      	str	r0, [r7, #36]	; 0x24
 8011a54:	e005      	b.n	8011a62 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	3304      	adds	r3, #4
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	f008 f85c 	bl	8019b18 <ip4_route>
 8011a60:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 8011a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d102      	bne.n	8011a6e <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8011a68:	f06f 0303 	mvn.w	r3, #3
 8011a6c:	e0ae      	b.n	8011bcc <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d003      	beq.n	8011a7c <tcp_connect+0xb8>
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d111      	bne.n	8011aa0 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8011a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d002      	beq.n	8011a88 <tcp_connect+0xc4>
 8011a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a84:	3304      	adds	r3, #4
 8011a86:	e000      	b.n	8011a8a <tcp_connect+0xc6>
 8011a88:	2300      	movs	r3, #0
 8011a8a:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8011a8c:	69fb      	ldr	r3, [r7, #28]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d102      	bne.n	8011a98 <tcp_connect+0xd4>
      return ERR_RTE;
 8011a92:	f06f 0303 	mvn.w	r3, #3
 8011a96:	e099      	b.n	8011bcc <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011a98:	69fb      	ldr	r3, [r7, #28]
 8011a9a:	681a      	ldr	r2, [r3, #0]
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	8adb      	ldrh	r3, [r3, #22]
 8011aa4:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	8adb      	ldrh	r3, [r3, #22]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d10c      	bne.n	8011ac8 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8011aae:	f7ff ff43 	bl	8011938 <tcp_new_port>
 8011ab2:	4603      	mov	r3, r0
 8011ab4:	461a      	mov	r2, r3
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	8adb      	ldrh	r3, [r3, #22]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d102      	bne.n	8011ac8 <tcp_connect+0x104>
      return ERR_BUF;
 8011ac2:	f06f 0301 	mvn.w	r3, #1
 8011ac6:	e081      	b.n	8011bcc <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8011ac8:	68f8      	ldr	r0, [r7, #12]
 8011aca:	f001 f867 	bl	8012b9c <tcp_next_iss>
 8011ace:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	2200      	movs	r2, #0
 8011ad4:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	697a      	ldr	r2, [r7, #20]
 8011ada:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 8011adc:	697b      	ldr	r3, [r7, #20]
 8011ade:	1e5a      	subs	r2, r3, #1
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8011ae4:	697b      	ldr	r3, [r7, #20]
 8011ae6:	1e5a      	subs	r2, r3, #1
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8011aec:	697b      	ldr	r3, [r7, #20]
 8011aee:	1e5a      	subs	r2, r3, #1
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8011afa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8011b12:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011b1c:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	3304      	adds	r3, #4
 8011b26:	461a      	mov	r2, r3
 8011b28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011b2a:	f001 f85d 	bl	8012be8 <tcp_eff_send_mss_netif>
 8011b2e:	4603      	mov	r3, r0
 8011b30:	461a      	mov	r2, r3
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	2201      	movs	r2, #1
 8011b3a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	683a      	ldr	r2, [r7, #0]
 8011b42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8011b46:	2102      	movs	r1, #2
 8011b48:	68f8      	ldr	r0, [r7, #12]
 8011b4a:	f004 fac1 	bl	80160d0 <tcp_enqueue_flags>
 8011b4e:	4603      	mov	r3, r0
 8011b50:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8011b52:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d136      	bne.n	8011bc8 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	2202      	movs	r2, #2
 8011b5e:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8011b60:	8b7b      	ldrh	r3, [r7, #26]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d021      	beq.n	8011baa <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8011b66:	4b20      	ldr	r3, [pc, #128]	; (8011be8 <tcp_connect+0x224>)
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	68fa      	ldr	r2, [r7, #12]
 8011b6c:	429a      	cmp	r2, r3
 8011b6e:	d105      	bne.n	8011b7c <tcp_connect+0x1b8>
 8011b70:	4b1d      	ldr	r3, [pc, #116]	; (8011be8 <tcp_connect+0x224>)
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	68db      	ldr	r3, [r3, #12]
 8011b76:	4a1c      	ldr	r2, [pc, #112]	; (8011be8 <tcp_connect+0x224>)
 8011b78:	6013      	str	r3, [r2, #0]
 8011b7a:	e013      	b.n	8011ba4 <tcp_connect+0x1e0>
 8011b7c:	4b1a      	ldr	r3, [pc, #104]	; (8011be8 <tcp_connect+0x224>)
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	623b      	str	r3, [r7, #32]
 8011b82:	e00c      	b.n	8011b9e <tcp_connect+0x1da>
 8011b84:	6a3b      	ldr	r3, [r7, #32]
 8011b86:	68db      	ldr	r3, [r3, #12]
 8011b88:	68fa      	ldr	r2, [r7, #12]
 8011b8a:	429a      	cmp	r2, r3
 8011b8c:	d104      	bne.n	8011b98 <tcp_connect+0x1d4>
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	68da      	ldr	r2, [r3, #12]
 8011b92:	6a3b      	ldr	r3, [r7, #32]
 8011b94:	60da      	str	r2, [r3, #12]
 8011b96:	e005      	b.n	8011ba4 <tcp_connect+0x1e0>
 8011b98:	6a3b      	ldr	r3, [r7, #32]
 8011b9a:	68db      	ldr	r3, [r3, #12]
 8011b9c:	623b      	str	r3, [r7, #32]
 8011b9e:	6a3b      	ldr	r3, [r7, #32]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d1ef      	bne.n	8011b84 <tcp_connect+0x1c0>
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	2200      	movs	r2, #0
 8011ba8:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8011baa:	4b10      	ldr	r3, [pc, #64]	; (8011bec <tcp_connect+0x228>)
 8011bac:	681a      	ldr	r2, [r3, #0]
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	60da      	str	r2, [r3, #12]
 8011bb2:	4a0e      	ldr	r2, [pc, #56]	; (8011bec <tcp_connect+0x228>)
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	6013      	str	r3, [r2, #0]
 8011bb8:	f005 faee 	bl	8017198 <tcp_timer_needed>
 8011bbc:	4b0c      	ldr	r3, [pc, #48]	; (8011bf0 <tcp_connect+0x22c>)
 8011bbe:	2201      	movs	r2, #1
 8011bc0:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8011bc2:	68f8      	ldr	r0, [r7, #12]
 8011bc4:	f004 fb72 	bl	80162ac <tcp_output>
  }
  return ret;
 8011bc8:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8011bcc:	4618      	mov	r0, r3
 8011bce:	3728      	adds	r7, #40	; 0x28
 8011bd0:	46bd      	mov	sp, r7
 8011bd2:	bd80      	pop	{r7, pc}
 8011bd4:	08026e98 	.word	0x08026e98
 8011bd8:	08027174 	.word	0x08027174
 8011bdc:	08026edc 	.word	0x08026edc
 8011be0:	08027190 	.word	0x08027190
 8011be4:	080271ac 	.word	0x080271ac
 8011be8:	2000fc40 	.word	0x2000fc40
 8011bec:	2000fc48 	.word	0x2000fc48
 8011bf0:	2000fc50 	.word	0x2000fc50

08011bf4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8011bf4:	b5b0      	push	{r4, r5, r7, lr}
 8011bf6:	b090      	sub	sp, #64	; 0x40
 8011bf8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8011c00:	4b94      	ldr	r3, [pc, #592]	; (8011e54 <tcp_slowtmr+0x260>)
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	3301      	adds	r3, #1
 8011c06:	4a93      	ldr	r2, [pc, #588]	; (8011e54 <tcp_slowtmr+0x260>)
 8011c08:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8011c0a:	4b93      	ldr	r3, [pc, #588]	; (8011e58 <tcp_slowtmr+0x264>)
 8011c0c:	781b      	ldrb	r3, [r3, #0]
 8011c0e:	3301      	adds	r3, #1
 8011c10:	b2da      	uxtb	r2, r3
 8011c12:	4b91      	ldr	r3, [pc, #580]	; (8011e58 <tcp_slowtmr+0x264>)
 8011c14:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8011c16:	2300      	movs	r3, #0
 8011c18:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8011c1a:	4b90      	ldr	r3, [pc, #576]	; (8011e5c <tcp_slowtmr+0x268>)
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8011c20:	e29d      	b.n	801215e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8011c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c24:	7d1b      	ldrb	r3, [r3, #20]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d106      	bne.n	8011c38 <tcp_slowtmr+0x44>
 8011c2a:	4b8d      	ldr	r3, [pc, #564]	; (8011e60 <tcp_slowtmr+0x26c>)
 8011c2c:	f240 42be 	movw	r2, #1214	; 0x4be
 8011c30:	498c      	ldr	r1, [pc, #560]	; (8011e64 <tcp_slowtmr+0x270>)
 8011c32:	488d      	ldr	r0, [pc, #564]	; (8011e68 <tcp_slowtmr+0x274>)
 8011c34:	f011 ffd4 	bl	8023be0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8011c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c3a:	7d1b      	ldrb	r3, [r3, #20]
 8011c3c:	2b01      	cmp	r3, #1
 8011c3e:	d106      	bne.n	8011c4e <tcp_slowtmr+0x5a>
 8011c40:	4b87      	ldr	r3, [pc, #540]	; (8011e60 <tcp_slowtmr+0x26c>)
 8011c42:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8011c46:	4989      	ldr	r1, [pc, #548]	; (8011e6c <tcp_slowtmr+0x278>)
 8011c48:	4887      	ldr	r0, [pc, #540]	; (8011e68 <tcp_slowtmr+0x274>)
 8011c4a:	f011 ffc9 	bl	8023be0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8011c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c50:	7d1b      	ldrb	r3, [r3, #20]
 8011c52:	2b0a      	cmp	r3, #10
 8011c54:	d106      	bne.n	8011c64 <tcp_slowtmr+0x70>
 8011c56:	4b82      	ldr	r3, [pc, #520]	; (8011e60 <tcp_slowtmr+0x26c>)
 8011c58:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8011c5c:	4984      	ldr	r1, [pc, #528]	; (8011e70 <tcp_slowtmr+0x27c>)
 8011c5e:	4882      	ldr	r0, [pc, #520]	; (8011e68 <tcp_slowtmr+0x274>)
 8011c60:	f011 ffbe 	bl	8023be0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8011c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c66:	7f9a      	ldrb	r2, [r3, #30]
 8011c68:	4b7b      	ldr	r3, [pc, #492]	; (8011e58 <tcp_slowtmr+0x264>)
 8011c6a:	781b      	ldrb	r3, [r3, #0]
 8011c6c:	429a      	cmp	r2, r3
 8011c6e:	d105      	bne.n	8011c7c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8011c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c72:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c76:	68db      	ldr	r3, [r3, #12]
 8011c78:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8011c7a:	e270      	b.n	801215e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8011c7c:	4b76      	ldr	r3, [pc, #472]	; (8011e58 <tcp_slowtmr+0x264>)
 8011c7e:	781a      	ldrb	r2, [r3, #0]
 8011c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c82:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8011c84:	2300      	movs	r3, #0
 8011c86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8011c8a:	2300      	movs	r3, #0
 8011c8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8011c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c92:	7d1b      	ldrb	r3, [r3, #20]
 8011c94:	2b02      	cmp	r3, #2
 8011c96:	d10a      	bne.n	8011cae <tcp_slowtmr+0xba>
 8011c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011c9e:	2b05      	cmp	r3, #5
 8011ca0:	d905      	bls.n	8011cae <tcp_slowtmr+0xba>
      ++pcb_remove;
 8011ca2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ca6:	3301      	adds	r3, #1
 8011ca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011cac:	e11e      	b.n	8011eec <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8011cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cb0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011cb4:	2b0b      	cmp	r3, #11
 8011cb6:	d905      	bls.n	8011cc4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8011cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011cbc:	3301      	adds	r3, #1
 8011cbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011cc2:	e113      	b.n	8011eec <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8011cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cc6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d075      	beq.n	8011dba <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8011cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d006      	beq.n	8011ce4 <tcp_slowtmr+0xf0>
 8011cd6:	4b62      	ldr	r3, [pc, #392]	; (8011e60 <tcp_slowtmr+0x26c>)
 8011cd8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8011cdc:	4965      	ldr	r1, [pc, #404]	; (8011e74 <tcp_slowtmr+0x280>)
 8011cde:	4862      	ldr	r0, [pc, #392]	; (8011e68 <tcp_slowtmr+0x274>)
 8011ce0:	f011 ff7e 	bl	8023be0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8011ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d106      	bne.n	8011cfa <tcp_slowtmr+0x106>
 8011cec:	4b5c      	ldr	r3, [pc, #368]	; (8011e60 <tcp_slowtmr+0x26c>)
 8011cee:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8011cf2:	4961      	ldr	r1, [pc, #388]	; (8011e78 <tcp_slowtmr+0x284>)
 8011cf4:	485c      	ldr	r0, [pc, #368]	; (8011e68 <tcp_slowtmr+0x274>)
 8011cf6:	f011 ff73 	bl	8023be0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8011cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cfc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011d00:	2b0b      	cmp	r3, #11
 8011d02:	d905      	bls.n	8011d10 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8011d04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011d08:	3301      	adds	r3, #1
 8011d0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011d0e:	e0ed      	b.n	8011eec <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8011d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d12:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011d16:	3b01      	subs	r3, #1
 8011d18:	4a58      	ldr	r2, [pc, #352]	; (8011e7c <tcp_slowtmr+0x288>)
 8011d1a:	5cd3      	ldrb	r3, [r2, r3]
 8011d1c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8011d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d20:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011d24:	7c7a      	ldrb	r2, [r7, #17]
 8011d26:	429a      	cmp	r2, r3
 8011d28:	d907      	bls.n	8011d3a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8011d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d2c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011d30:	3301      	adds	r3, #1
 8011d32:	b2da      	uxtb	r2, r3
 8011d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d36:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8011d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d3c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011d40:	7c7a      	ldrb	r2, [r7, #17]
 8011d42:	429a      	cmp	r2, r3
 8011d44:	f200 80d2 	bhi.w	8011eec <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8011d48:	2301      	movs	r3, #1
 8011d4a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8011d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d108      	bne.n	8011d68 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8011d56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011d58:	f005 f950 	bl	8016ffc <tcp_zero_window_probe>
 8011d5c:	4603      	mov	r3, r0
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d014      	beq.n	8011d8c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8011d62:	2300      	movs	r3, #0
 8011d64:	623b      	str	r3, [r7, #32]
 8011d66:	e011      	b.n	8011d8c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8011d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011d6e:	4619      	mov	r1, r3
 8011d70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011d72:	f004 f815 	bl	8015da0 <tcp_split_unsent_seg>
 8011d76:	4603      	mov	r3, r0
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d107      	bne.n	8011d8c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8011d7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011d7e:	f004 fa95 	bl	80162ac <tcp_output>
 8011d82:	4603      	mov	r3, r0
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d101      	bne.n	8011d8c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8011d88:	2300      	movs	r3, #0
 8011d8a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8011d8c:	6a3b      	ldr	r3, [r7, #32]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	f000 80ac 	beq.w	8011eec <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8011d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d96:	2200      	movs	r2, #0
 8011d98:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8011d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d9e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011da2:	2b06      	cmp	r3, #6
 8011da4:	f200 80a2 	bhi.w	8011eec <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8011da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011daa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011dae:	3301      	adds	r3, #1
 8011db0:	b2da      	uxtb	r2, r3
 8011db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011db4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8011db8:	e098      	b.n	8011eec <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8011dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dbc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	db0f      	blt.n	8011de4 <tcp_slowtmr+0x1f0>
 8011dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dc6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011dca:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011dce:	4293      	cmp	r3, r2
 8011dd0:	d008      	beq.n	8011de4 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8011dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dd4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011dd8:	b29b      	uxth	r3, r3
 8011dda:	3301      	adds	r3, #1
 8011ddc:	b29b      	uxth	r3, r3
 8011dde:	b21a      	sxth	r2, r3
 8011de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011de2:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8011de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011de6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8011dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dec:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011df0:	429a      	cmp	r2, r3
 8011df2:	db7b      	blt.n	8011eec <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8011df4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011df6:	f004 fd4b 	bl	8016890 <tcp_rexmit_rto_prepare>
 8011dfa:	4603      	mov	r3, r0
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d007      	beq.n	8011e10 <tcp_slowtmr+0x21c>
 8011e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d171      	bne.n	8011eec <tcp_slowtmr+0x2f8>
 8011e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d06d      	beq.n	8011eec <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8011e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e12:	7d1b      	ldrb	r3, [r3, #20]
 8011e14:	2b02      	cmp	r3, #2
 8011e16:	d03a      	beq.n	8011e8e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8011e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011e1e:	2b0c      	cmp	r3, #12
 8011e20:	bf28      	it	cs
 8011e22:	230c      	movcs	r3, #12
 8011e24:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8011e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e28:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011e2c:	10db      	asrs	r3, r3, #3
 8011e2e:	b21b      	sxth	r3, r3
 8011e30:	461a      	mov	r2, r3
 8011e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e34:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011e38:	4413      	add	r3, r2
 8011e3a:	7efa      	ldrb	r2, [r7, #27]
 8011e3c:	4910      	ldr	r1, [pc, #64]	; (8011e80 <tcp_slowtmr+0x28c>)
 8011e3e:	5c8a      	ldrb	r2, [r1, r2]
 8011e40:	4093      	lsls	r3, r2
 8011e42:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8011e44:	697b      	ldr	r3, [r7, #20]
 8011e46:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8011e4a:	4293      	cmp	r3, r2
 8011e4c:	dc1a      	bgt.n	8011e84 <tcp_slowtmr+0x290>
 8011e4e:	697b      	ldr	r3, [r7, #20]
 8011e50:	b21a      	sxth	r2, r3
 8011e52:	e019      	b.n	8011e88 <tcp_slowtmr+0x294>
 8011e54:	2000fc3c 	.word	0x2000fc3c
 8011e58:	2000fc52 	.word	0x2000fc52
 8011e5c:	2000fc48 	.word	0x2000fc48
 8011e60:	08026e98 	.word	0x08026e98
 8011e64:	080271dc 	.word	0x080271dc
 8011e68:	08026edc 	.word	0x08026edc
 8011e6c:	08027208 	.word	0x08027208
 8011e70:	08027234 	.word	0x08027234
 8011e74:	08027264 	.word	0x08027264
 8011e78:	08027298 	.word	0x08027298
 8011e7c:	08029304 	.word	0x08029304
 8011e80:	080292f4 	.word	0x080292f4
 8011e84:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8011e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e90:	2200      	movs	r2, #0
 8011e92:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8011e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e96:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e9c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011ea0:	4293      	cmp	r3, r2
 8011ea2:	bf28      	it	cs
 8011ea4:	4613      	movcs	r3, r2
 8011ea6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8011ea8:	8a7b      	ldrh	r3, [r7, #18]
 8011eaa:	085b      	lsrs	r3, r3, #1
 8011eac:	b29a      	uxth	r2, r3
 8011eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eb0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8011eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eb6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ebc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ebe:	005b      	lsls	r3, r3, #1
 8011ec0:	b29b      	uxth	r3, r3
 8011ec2:	429a      	cmp	r2, r3
 8011ec4:	d206      	bcs.n	8011ed4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8011ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ec8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011eca:	005b      	lsls	r3, r3, #1
 8011ecc:	b29a      	uxth	r2, r3
 8011ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ed0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8011ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ed6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8011ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eda:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8011ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ee0:	2200      	movs	r2, #0
 8011ee2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8011ee6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011ee8:	f004 fd42 	bl	8016970 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8011eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eee:	7d1b      	ldrb	r3, [r3, #20]
 8011ef0:	2b06      	cmp	r3, #6
 8011ef2:	d111      	bne.n	8011f18 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8011ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ef6:	8b5b      	ldrh	r3, [r3, #26]
 8011ef8:	f003 0310 	and.w	r3, r3, #16
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d00b      	beq.n	8011f18 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011f00:	4b9c      	ldr	r3, [pc, #624]	; (8012174 <tcp_slowtmr+0x580>)
 8011f02:	681a      	ldr	r2, [r3, #0]
 8011f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f06:	6a1b      	ldr	r3, [r3, #32]
 8011f08:	1ad3      	subs	r3, r2, r3
 8011f0a:	2b28      	cmp	r3, #40	; 0x28
 8011f0c:	d904      	bls.n	8011f18 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8011f0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011f12:	3301      	adds	r3, #1
 8011f14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f1a:	7a5b      	ldrb	r3, [r3, #9]
 8011f1c:	f003 0308 	and.w	r3, r3, #8
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d04a      	beq.n	8011fba <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8011f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f26:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011f28:	2b04      	cmp	r3, #4
 8011f2a:	d003      	beq.n	8011f34 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8011f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f2e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8011f30:	2b07      	cmp	r3, #7
 8011f32:	d142      	bne.n	8011fba <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011f34:	4b8f      	ldr	r3, [pc, #572]	; (8012174 <tcp_slowtmr+0x580>)
 8011f36:	681a      	ldr	r2, [r3, #0]
 8011f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f3a:	6a1b      	ldr	r3, [r3, #32]
 8011f3c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8011f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f40:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011f44:	4b8c      	ldr	r3, [pc, #560]	; (8012178 <tcp_slowtmr+0x584>)
 8011f46:	440b      	add	r3, r1
 8011f48:	498c      	ldr	r1, [pc, #560]	; (801217c <tcp_slowtmr+0x588>)
 8011f4a:	fba1 1303 	umull	r1, r3, r1, r3
 8011f4e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011f50:	429a      	cmp	r2, r3
 8011f52:	d90a      	bls.n	8011f6a <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8011f54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011f58:	3301      	adds	r3, #1
 8011f5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8011f5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011f62:	3301      	adds	r3, #1
 8011f64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011f68:	e027      	b.n	8011fba <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011f6a:	4b82      	ldr	r3, [pc, #520]	; (8012174 <tcp_slowtmr+0x580>)
 8011f6c:	681a      	ldr	r2, [r3, #0]
 8011f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f70:	6a1b      	ldr	r3, [r3, #32]
 8011f72:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8011f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f76:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f7c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011f80:	4618      	mov	r0, r3
 8011f82:	4b7f      	ldr	r3, [pc, #508]	; (8012180 <tcp_slowtmr+0x58c>)
 8011f84:	fb00 f303 	mul.w	r3, r0, r3
 8011f88:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8011f8a:	497c      	ldr	r1, [pc, #496]	; (801217c <tcp_slowtmr+0x588>)
 8011f8c:	fba1 1303 	umull	r1, r3, r1, r3
 8011f90:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011f92:	429a      	cmp	r2, r3
 8011f94:	d911      	bls.n	8011fba <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8011f96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011f98:	f004 fff0 	bl	8016f7c <tcp_keepalive>
 8011f9c:	4603      	mov	r3, r0
 8011f9e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8011fa2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d107      	bne.n	8011fba <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8011faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fac:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011fb0:	3301      	adds	r3, #1
 8011fb2:	b2da      	uxtb	r2, r3
 8011fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fb6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8011fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d011      	beq.n	8011fe6 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8011fc2:	4b6c      	ldr	r3, [pc, #432]	; (8012174 <tcp_slowtmr+0x580>)
 8011fc4:	681a      	ldr	r2, [r3, #0]
 8011fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fc8:	6a1b      	ldr	r3, [r3, #32]
 8011fca:	1ad2      	subs	r2, r2, r3
 8011fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fce:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011fd2:	4619      	mov	r1, r3
 8011fd4:	460b      	mov	r3, r1
 8011fd6:	005b      	lsls	r3, r3, #1
 8011fd8:	440b      	add	r3, r1
 8011fda:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8011fdc:	429a      	cmp	r2, r3
 8011fde:	d302      	bcc.n	8011fe6 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8011fe0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011fe2:	f000 feab 	bl	8012d3c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8011fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fe8:	7d1b      	ldrb	r3, [r3, #20]
 8011fea:	2b03      	cmp	r3, #3
 8011fec:	d10b      	bne.n	8012006 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011fee:	4b61      	ldr	r3, [pc, #388]	; (8012174 <tcp_slowtmr+0x580>)
 8011ff0:	681a      	ldr	r2, [r3, #0]
 8011ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ff4:	6a1b      	ldr	r3, [r3, #32]
 8011ff6:	1ad3      	subs	r3, r2, r3
 8011ff8:	2b28      	cmp	r3, #40	; 0x28
 8011ffa:	d904      	bls.n	8012006 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8011ffc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012000:	3301      	adds	r3, #1
 8012002:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8012006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012008:	7d1b      	ldrb	r3, [r3, #20]
 801200a:	2b09      	cmp	r3, #9
 801200c:	d10b      	bne.n	8012026 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801200e:	4b59      	ldr	r3, [pc, #356]	; (8012174 <tcp_slowtmr+0x580>)
 8012010:	681a      	ldr	r2, [r3, #0]
 8012012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012014:	6a1b      	ldr	r3, [r3, #32]
 8012016:	1ad3      	subs	r3, r2, r3
 8012018:	2bf0      	cmp	r3, #240	; 0xf0
 801201a:	d904      	bls.n	8012026 <tcp_slowtmr+0x432>
        ++pcb_remove;
 801201c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012020:	3301      	adds	r3, #1
 8012022:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012026:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801202a:	2b00      	cmp	r3, #0
 801202c:	d060      	beq.n	80120f0 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801202e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012034:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8012036:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012038:	f000 fccc 	bl	80129d4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801203c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801203e:	2b00      	cmp	r3, #0
 8012040:	d010      	beq.n	8012064 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8012042:	4b50      	ldr	r3, [pc, #320]	; (8012184 <tcp_slowtmr+0x590>)
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012048:	429a      	cmp	r2, r3
 801204a:	d106      	bne.n	801205a <tcp_slowtmr+0x466>
 801204c:	4b4e      	ldr	r3, [pc, #312]	; (8012188 <tcp_slowtmr+0x594>)
 801204e:	f240 526d 	movw	r2, #1389	; 0x56d
 8012052:	494e      	ldr	r1, [pc, #312]	; (801218c <tcp_slowtmr+0x598>)
 8012054:	484e      	ldr	r0, [pc, #312]	; (8012190 <tcp_slowtmr+0x59c>)
 8012056:	f011 fdc3 	bl	8023be0 <iprintf>
        prev->next = pcb->next;
 801205a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801205c:	68da      	ldr	r2, [r3, #12]
 801205e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012060:	60da      	str	r2, [r3, #12]
 8012062:	e00f      	b.n	8012084 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8012064:	4b47      	ldr	r3, [pc, #284]	; (8012184 <tcp_slowtmr+0x590>)
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801206a:	429a      	cmp	r2, r3
 801206c:	d006      	beq.n	801207c <tcp_slowtmr+0x488>
 801206e:	4b46      	ldr	r3, [pc, #280]	; (8012188 <tcp_slowtmr+0x594>)
 8012070:	f240 5271 	movw	r2, #1393	; 0x571
 8012074:	4947      	ldr	r1, [pc, #284]	; (8012194 <tcp_slowtmr+0x5a0>)
 8012076:	4846      	ldr	r0, [pc, #280]	; (8012190 <tcp_slowtmr+0x59c>)
 8012078:	f011 fdb2 	bl	8023be0 <iprintf>
        tcp_active_pcbs = pcb->next;
 801207c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801207e:	68db      	ldr	r3, [r3, #12]
 8012080:	4a40      	ldr	r2, [pc, #256]	; (8012184 <tcp_slowtmr+0x590>)
 8012082:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8012084:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012088:	2b00      	cmp	r3, #0
 801208a:	d013      	beq.n	80120b4 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801208c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801208e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8012090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012092:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8012094:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8012096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012098:	3304      	adds	r3, #4
 801209a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801209c:	8ad2      	ldrh	r2, [r2, #22]
 801209e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80120a0:	8b09      	ldrh	r1, [r1, #24]
 80120a2:	9102      	str	r1, [sp, #8]
 80120a4:	9201      	str	r2, [sp, #4]
 80120a6:	9300      	str	r3, [sp, #0]
 80120a8:	462b      	mov	r3, r5
 80120aa:	4622      	mov	r2, r4
 80120ac:	4601      	mov	r1, r0
 80120ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80120b0:	f004 feb0 	bl	8016e14 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80120b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120b6:	691b      	ldr	r3, [r3, #16]
 80120b8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80120ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120bc:	7d1b      	ldrb	r3, [r3, #20]
 80120be:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80120c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120c2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80120c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120c6:	68db      	ldr	r3, [r3, #12]
 80120c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80120ca:	6838      	ldr	r0, [r7, #0]
 80120cc:	f7ff f820 	bl	8011110 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80120d0:	4b31      	ldr	r3, [pc, #196]	; (8012198 <tcp_slowtmr+0x5a4>)
 80120d2:	2200      	movs	r2, #0
 80120d4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d004      	beq.n	80120e6 <tcp_slowtmr+0x4f2>
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	f06f 010c 	mvn.w	r1, #12
 80120e2:	68b8      	ldr	r0, [r7, #8]
 80120e4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80120e6:	4b2c      	ldr	r3, [pc, #176]	; (8012198 <tcp_slowtmr+0x5a4>)
 80120e8:	781b      	ldrb	r3, [r3, #0]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d037      	beq.n	801215e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 80120ee:	e592      	b.n	8011c16 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80120f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120f2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80120f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120f6:	68db      	ldr	r3, [r3, #12]
 80120f8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80120fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120fc:	7f1b      	ldrb	r3, [r3, #28]
 80120fe:	3301      	adds	r3, #1
 8012100:	b2da      	uxtb	r2, r3
 8012102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012104:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8012106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012108:	7f1a      	ldrb	r2, [r3, #28]
 801210a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801210c:	7f5b      	ldrb	r3, [r3, #29]
 801210e:	429a      	cmp	r2, r3
 8012110:	d325      	bcc.n	801215e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8012112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012114:	2200      	movs	r2, #0
 8012116:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8012118:	4b1f      	ldr	r3, [pc, #124]	; (8012198 <tcp_slowtmr+0x5a4>)
 801211a:	2200      	movs	r2, #0
 801211c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801211e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012120:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012124:	2b00      	cmp	r3, #0
 8012126:	d00b      	beq.n	8012140 <tcp_slowtmr+0x54c>
 8012128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801212a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801212e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012130:	6912      	ldr	r2, [r2, #16]
 8012132:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012134:	4610      	mov	r0, r2
 8012136:	4798      	blx	r3
 8012138:	4603      	mov	r3, r0
 801213a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801213e:	e002      	b.n	8012146 <tcp_slowtmr+0x552>
 8012140:	2300      	movs	r3, #0
 8012142:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8012146:	4b14      	ldr	r3, [pc, #80]	; (8012198 <tcp_slowtmr+0x5a4>)
 8012148:	781b      	ldrb	r3, [r3, #0]
 801214a:	2b00      	cmp	r3, #0
 801214c:	d000      	beq.n	8012150 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 801214e:	e562      	b.n	8011c16 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8012150:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8012154:	2b00      	cmp	r3, #0
 8012156:	d102      	bne.n	801215e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8012158:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801215a:	f004 f8a7 	bl	80162ac <tcp_output>
  while (pcb != NULL) {
 801215e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012160:	2b00      	cmp	r3, #0
 8012162:	f47f ad5e 	bne.w	8011c22 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8012166:	2300      	movs	r3, #0
 8012168:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801216a:	4b0c      	ldr	r3, [pc, #48]	; (801219c <tcp_slowtmr+0x5a8>)
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012170:	e069      	b.n	8012246 <tcp_slowtmr+0x652>
 8012172:	bf00      	nop
 8012174:	2000fc3c 	.word	0x2000fc3c
 8012178:	000a4cb8 	.word	0x000a4cb8
 801217c:	10624dd3 	.word	0x10624dd3
 8012180:	000124f8 	.word	0x000124f8
 8012184:	2000fc48 	.word	0x2000fc48
 8012188:	08026e98 	.word	0x08026e98
 801218c:	080272d0 	.word	0x080272d0
 8012190:	08026edc 	.word	0x08026edc
 8012194:	080272fc 	.word	0x080272fc
 8012198:	2000fc50 	.word	0x2000fc50
 801219c:	2000fc4c 	.word	0x2000fc4c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80121a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121a2:	7d1b      	ldrb	r3, [r3, #20]
 80121a4:	2b0a      	cmp	r3, #10
 80121a6:	d006      	beq.n	80121b6 <tcp_slowtmr+0x5c2>
 80121a8:	4b2b      	ldr	r3, [pc, #172]	; (8012258 <tcp_slowtmr+0x664>)
 80121aa:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80121ae:	492b      	ldr	r1, [pc, #172]	; (801225c <tcp_slowtmr+0x668>)
 80121b0:	482b      	ldr	r0, [pc, #172]	; (8012260 <tcp_slowtmr+0x66c>)
 80121b2:	f011 fd15 	bl	8023be0 <iprintf>
    pcb_remove = 0;
 80121b6:	2300      	movs	r3, #0
 80121b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80121bc:	4b29      	ldr	r3, [pc, #164]	; (8012264 <tcp_slowtmr+0x670>)
 80121be:	681a      	ldr	r2, [r3, #0]
 80121c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121c2:	6a1b      	ldr	r3, [r3, #32]
 80121c4:	1ad3      	subs	r3, r2, r3
 80121c6:	2bf0      	cmp	r3, #240	; 0xf0
 80121c8:	d904      	bls.n	80121d4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80121ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80121ce:	3301      	adds	r3, #1
 80121d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80121d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d02f      	beq.n	801223c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80121dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80121de:	f000 fbf9 	bl	80129d4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80121e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d010      	beq.n	801220a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80121e8:	4b1f      	ldr	r3, [pc, #124]	; (8012268 <tcp_slowtmr+0x674>)
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80121ee:	429a      	cmp	r2, r3
 80121f0:	d106      	bne.n	8012200 <tcp_slowtmr+0x60c>
 80121f2:	4b19      	ldr	r3, [pc, #100]	; (8012258 <tcp_slowtmr+0x664>)
 80121f4:	f240 52af 	movw	r2, #1455	; 0x5af
 80121f8:	491c      	ldr	r1, [pc, #112]	; (801226c <tcp_slowtmr+0x678>)
 80121fa:	4819      	ldr	r0, [pc, #100]	; (8012260 <tcp_slowtmr+0x66c>)
 80121fc:	f011 fcf0 	bl	8023be0 <iprintf>
        prev->next = pcb->next;
 8012200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012202:	68da      	ldr	r2, [r3, #12]
 8012204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012206:	60da      	str	r2, [r3, #12]
 8012208:	e00f      	b.n	801222a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801220a:	4b17      	ldr	r3, [pc, #92]	; (8012268 <tcp_slowtmr+0x674>)
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012210:	429a      	cmp	r2, r3
 8012212:	d006      	beq.n	8012222 <tcp_slowtmr+0x62e>
 8012214:	4b10      	ldr	r3, [pc, #64]	; (8012258 <tcp_slowtmr+0x664>)
 8012216:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801221a:	4915      	ldr	r1, [pc, #84]	; (8012270 <tcp_slowtmr+0x67c>)
 801221c:	4810      	ldr	r0, [pc, #64]	; (8012260 <tcp_slowtmr+0x66c>)
 801221e:	f011 fcdf 	bl	8023be0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8012222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012224:	68db      	ldr	r3, [r3, #12]
 8012226:	4a10      	ldr	r2, [pc, #64]	; (8012268 <tcp_slowtmr+0x674>)
 8012228:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801222a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801222c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801222e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012230:	68db      	ldr	r3, [r3, #12]
 8012232:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8012234:	69f8      	ldr	r0, [r7, #28]
 8012236:	f7fe ff6b 	bl	8011110 <tcp_free>
 801223a:	e004      	b.n	8012246 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 801223c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801223e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012242:	68db      	ldr	r3, [r3, #12]
 8012244:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012248:	2b00      	cmp	r3, #0
 801224a:	d1a9      	bne.n	80121a0 <tcp_slowtmr+0x5ac>
    }
  }
}
 801224c:	bf00      	nop
 801224e:	bf00      	nop
 8012250:	3730      	adds	r7, #48	; 0x30
 8012252:	46bd      	mov	sp, r7
 8012254:	bdb0      	pop	{r4, r5, r7, pc}
 8012256:	bf00      	nop
 8012258:	08026e98 	.word	0x08026e98
 801225c:	08027328 	.word	0x08027328
 8012260:	08026edc 	.word	0x08026edc
 8012264:	2000fc3c 	.word	0x2000fc3c
 8012268:	2000fc4c 	.word	0x2000fc4c
 801226c:	08027358 	.word	0x08027358
 8012270:	08027380 	.word	0x08027380

08012274 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8012274:	b580      	push	{r7, lr}
 8012276:	b082      	sub	sp, #8
 8012278:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801227a:	4b2d      	ldr	r3, [pc, #180]	; (8012330 <tcp_fasttmr+0xbc>)
 801227c:	781b      	ldrb	r3, [r3, #0]
 801227e:	3301      	adds	r3, #1
 8012280:	b2da      	uxtb	r2, r3
 8012282:	4b2b      	ldr	r3, [pc, #172]	; (8012330 <tcp_fasttmr+0xbc>)
 8012284:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8012286:	4b2b      	ldr	r3, [pc, #172]	; (8012334 <tcp_fasttmr+0xc0>)
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801228c:	e048      	b.n	8012320 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	7f9a      	ldrb	r2, [r3, #30]
 8012292:	4b27      	ldr	r3, [pc, #156]	; (8012330 <tcp_fasttmr+0xbc>)
 8012294:	781b      	ldrb	r3, [r3, #0]
 8012296:	429a      	cmp	r2, r3
 8012298:	d03f      	beq.n	801231a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801229a:	4b25      	ldr	r3, [pc, #148]	; (8012330 <tcp_fasttmr+0xbc>)
 801229c:	781a      	ldrb	r2, [r3, #0]
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	8b5b      	ldrh	r3, [r3, #26]
 80122a6:	f003 0301 	and.w	r3, r3, #1
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d010      	beq.n	80122d0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	8b5b      	ldrh	r3, [r3, #26]
 80122b2:	f043 0302 	orr.w	r3, r3, #2
 80122b6:	b29a      	uxth	r2, r3
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80122bc:	6878      	ldr	r0, [r7, #4]
 80122be:	f003 fff5 	bl	80162ac <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	8b5b      	ldrh	r3, [r3, #26]
 80122c6:	f023 0303 	bic.w	r3, r3, #3
 80122ca:	b29a      	uxth	r2, r3
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	8b5b      	ldrh	r3, [r3, #26]
 80122d4:	f003 0308 	and.w	r3, r3, #8
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d009      	beq.n	80122f0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	8b5b      	ldrh	r3, [r3, #26]
 80122e0:	f023 0308 	bic.w	r3, r3, #8
 80122e4:	b29a      	uxth	r2, r3
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80122ea:	6878      	ldr	r0, [r7, #4]
 80122ec:	f7ff f8a4 	bl	8011438 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	68db      	ldr	r3, [r3, #12]
 80122f4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d00a      	beq.n	8012314 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80122fe:	4b0e      	ldr	r3, [pc, #56]	; (8012338 <tcp_fasttmr+0xc4>)
 8012300:	2200      	movs	r2, #0
 8012302:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8012304:	6878      	ldr	r0, [r7, #4]
 8012306:	f000 f819 	bl	801233c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801230a:	4b0b      	ldr	r3, [pc, #44]	; (8012338 <tcp_fasttmr+0xc4>)
 801230c:	781b      	ldrb	r3, [r3, #0]
 801230e:	2b00      	cmp	r3, #0
 8012310:	d000      	beq.n	8012314 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8012312:	e7b8      	b.n	8012286 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8012314:	683b      	ldr	r3, [r7, #0]
 8012316:	607b      	str	r3, [r7, #4]
 8012318:	e002      	b.n	8012320 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	68db      	ldr	r3, [r3, #12]
 801231e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d1b3      	bne.n	801228e <tcp_fasttmr+0x1a>
    }
  }
}
 8012326:	bf00      	nop
 8012328:	bf00      	nop
 801232a:	3708      	adds	r7, #8
 801232c:	46bd      	mov	sp, r7
 801232e:	bd80      	pop	{r7, pc}
 8012330:	2000fc52 	.word	0x2000fc52
 8012334:	2000fc48 	.word	0x2000fc48
 8012338:	2000fc50 	.word	0x2000fc50

0801233c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801233c:	b590      	push	{r4, r7, lr}
 801233e:	b085      	sub	sp, #20
 8012340:	af00      	add	r7, sp, #0
 8012342:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	2b00      	cmp	r3, #0
 8012348:	d109      	bne.n	801235e <tcp_process_refused_data+0x22>
 801234a:	4b37      	ldr	r3, [pc, #220]	; (8012428 <tcp_process_refused_data+0xec>)
 801234c:	f240 6209 	movw	r2, #1545	; 0x609
 8012350:	4936      	ldr	r1, [pc, #216]	; (801242c <tcp_process_refused_data+0xf0>)
 8012352:	4837      	ldr	r0, [pc, #220]	; (8012430 <tcp_process_refused_data+0xf4>)
 8012354:	f011 fc44 	bl	8023be0 <iprintf>
 8012358:	f06f 030f 	mvn.w	r3, #15
 801235c:	e060      	b.n	8012420 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012362:	7b5b      	ldrb	r3, [r3, #13]
 8012364:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801236a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	2200      	movs	r2, #0
 8012370:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012378:	2b00      	cmp	r3, #0
 801237a:	d00b      	beq.n	8012394 <tcp_process_refused_data+0x58>
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	6918      	ldr	r0, [r3, #16]
 8012386:	2300      	movs	r3, #0
 8012388:	68ba      	ldr	r2, [r7, #8]
 801238a:	6879      	ldr	r1, [r7, #4]
 801238c:	47a0      	blx	r4
 801238e:	4603      	mov	r3, r0
 8012390:	73fb      	strb	r3, [r7, #15]
 8012392:	e007      	b.n	80123a4 <tcp_process_refused_data+0x68>
 8012394:	2300      	movs	r3, #0
 8012396:	68ba      	ldr	r2, [r7, #8]
 8012398:	6879      	ldr	r1, [r7, #4]
 801239a:	2000      	movs	r0, #0
 801239c:	f000 f8a4 	bl	80124e8 <tcp_recv_null>
 80123a0:	4603      	mov	r3, r0
 80123a2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80123a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d12a      	bne.n	8012402 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80123ac:	7bbb      	ldrb	r3, [r7, #14]
 80123ae:	f003 0320 	and.w	r3, r3, #32
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d033      	beq.n	801241e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80123ba:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80123be:	d005      	beq.n	80123cc <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80123c4:	3301      	adds	r3, #1
 80123c6:	b29a      	uxth	r2, r3
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d00b      	beq.n	80123ee <tcp_process_refused_data+0xb2>
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	6918      	ldr	r0, [r3, #16]
 80123e0:	2300      	movs	r3, #0
 80123e2:	2200      	movs	r2, #0
 80123e4:	6879      	ldr	r1, [r7, #4]
 80123e6:	47a0      	blx	r4
 80123e8:	4603      	mov	r3, r0
 80123ea:	73fb      	strb	r3, [r7, #15]
 80123ec:	e001      	b.n	80123f2 <tcp_process_refused_data+0xb6>
 80123ee:	2300      	movs	r3, #0
 80123f0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80123f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80123f6:	f113 0f0d 	cmn.w	r3, #13
 80123fa:	d110      	bne.n	801241e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80123fc:	f06f 030c 	mvn.w	r3, #12
 8012400:	e00e      	b.n	8012420 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8012402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012406:	f113 0f0d 	cmn.w	r3, #13
 801240a:	d102      	bne.n	8012412 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801240c:	f06f 030c 	mvn.w	r3, #12
 8012410:	e006      	b.n	8012420 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	68ba      	ldr	r2, [r7, #8]
 8012416:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8012418:	f06f 0304 	mvn.w	r3, #4
 801241c:	e000      	b.n	8012420 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801241e:	2300      	movs	r3, #0
}
 8012420:	4618      	mov	r0, r3
 8012422:	3714      	adds	r7, #20
 8012424:	46bd      	mov	sp, r7
 8012426:	bd90      	pop	{r4, r7, pc}
 8012428:	08026e98 	.word	0x08026e98
 801242c:	080273a8 	.word	0x080273a8
 8012430:	08026edc 	.word	0x08026edc

08012434 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8012434:	b580      	push	{r7, lr}
 8012436:	b084      	sub	sp, #16
 8012438:	af00      	add	r7, sp, #0
 801243a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801243c:	e007      	b.n	801244e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8012444:	6878      	ldr	r0, [r7, #4]
 8012446:	f000 f80a 	bl	801245e <tcp_seg_free>
    seg = next;
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	2b00      	cmp	r3, #0
 8012452:	d1f4      	bne.n	801243e <tcp_segs_free+0xa>
  }
}
 8012454:	bf00      	nop
 8012456:	bf00      	nop
 8012458:	3710      	adds	r7, #16
 801245a:	46bd      	mov	sp, r7
 801245c:	bd80      	pop	{r7, pc}

0801245e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801245e:	b580      	push	{r7, lr}
 8012460:	b082      	sub	sp, #8
 8012462:	af00      	add	r7, sp, #0
 8012464:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	2b00      	cmp	r3, #0
 801246a:	d00c      	beq.n	8012486 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	685b      	ldr	r3, [r3, #4]
 8012470:	2b00      	cmp	r3, #0
 8012472:	d004      	beq.n	801247e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	685b      	ldr	r3, [r3, #4]
 8012478:	4618      	mov	r0, r3
 801247a:	f7fe fa11 	bl	80108a0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801247e:	6879      	ldr	r1, [r7, #4]
 8012480:	2003      	movs	r0, #3
 8012482:	f7fd fae1 	bl	800fa48 <memp_free>
  }
}
 8012486:	bf00      	nop
 8012488:	3708      	adds	r7, #8
 801248a:	46bd      	mov	sp, r7
 801248c:	bd80      	pop	{r7, pc}
	...

08012490 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8012490:	b580      	push	{r7, lr}
 8012492:	b084      	sub	sp, #16
 8012494:	af00      	add	r7, sp, #0
 8012496:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d106      	bne.n	80124ac <tcp_seg_copy+0x1c>
 801249e:	4b0f      	ldr	r3, [pc, #60]	; (80124dc <tcp_seg_copy+0x4c>)
 80124a0:	f240 6282 	movw	r2, #1666	; 0x682
 80124a4:	490e      	ldr	r1, [pc, #56]	; (80124e0 <tcp_seg_copy+0x50>)
 80124a6:	480f      	ldr	r0, [pc, #60]	; (80124e4 <tcp_seg_copy+0x54>)
 80124a8:	f011 fb9a 	bl	8023be0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80124ac:	2003      	movs	r0, #3
 80124ae:	f7fd fa79 	bl	800f9a4 <memp_malloc>
 80124b2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d101      	bne.n	80124be <tcp_seg_copy+0x2e>
    return NULL;
 80124ba:	2300      	movs	r3, #0
 80124bc:	e00a      	b.n	80124d4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80124be:	2210      	movs	r2, #16
 80124c0:	6879      	ldr	r1, [r7, #4]
 80124c2:	68f8      	ldr	r0, [r7, #12]
 80124c4:	f011 fa66 	bl	8023994 <memcpy>
  pbuf_ref(cseg->p);
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	685b      	ldr	r3, [r3, #4]
 80124cc:	4618      	mov	r0, r3
 80124ce:	f7fe fa8d 	bl	80109ec <pbuf_ref>
  return cseg;
 80124d2:	68fb      	ldr	r3, [r7, #12]
}
 80124d4:	4618      	mov	r0, r3
 80124d6:	3710      	adds	r7, #16
 80124d8:	46bd      	mov	sp, r7
 80124da:	bd80      	pop	{r7, pc}
 80124dc:	08026e98 	.word	0x08026e98
 80124e0:	080273ec 	.word	0x080273ec
 80124e4:	08026edc 	.word	0x08026edc

080124e8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80124e8:	b580      	push	{r7, lr}
 80124ea:	b084      	sub	sp, #16
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	60f8      	str	r0, [r7, #12]
 80124f0:	60b9      	str	r1, [r7, #8]
 80124f2:	607a      	str	r2, [r7, #4]
 80124f4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80124f6:	68bb      	ldr	r3, [r7, #8]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d109      	bne.n	8012510 <tcp_recv_null+0x28>
 80124fc:	4b12      	ldr	r3, [pc, #72]	; (8012548 <tcp_recv_null+0x60>)
 80124fe:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012502:	4912      	ldr	r1, [pc, #72]	; (801254c <tcp_recv_null+0x64>)
 8012504:	4812      	ldr	r0, [pc, #72]	; (8012550 <tcp_recv_null+0x68>)
 8012506:	f011 fb6b 	bl	8023be0 <iprintf>
 801250a:	f06f 030f 	mvn.w	r3, #15
 801250e:	e016      	b.n	801253e <tcp_recv_null+0x56>

  if (p != NULL) {
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	2b00      	cmp	r3, #0
 8012514:	d009      	beq.n	801252a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	891b      	ldrh	r3, [r3, #8]
 801251a:	4619      	mov	r1, r3
 801251c:	68b8      	ldr	r0, [r7, #8]
 801251e:	f7ff f9bb 	bl	8011898 <tcp_recved>
    pbuf_free(p);
 8012522:	6878      	ldr	r0, [r7, #4]
 8012524:	f7fe f9bc 	bl	80108a0 <pbuf_free>
 8012528:	e008      	b.n	801253c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801252a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d104      	bne.n	801253c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8012532:	68b8      	ldr	r0, [r7, #8]
 8012534:	f7fe ffea 	bl	801150c <tcp_close>
 8012538:	4603      	mov	r3, r0
 801253a:	e000      	b.n	801253e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801253c:	2300      	movs	r3, #0
}
 801253e:	4618      	mov	r0, r3
 8012540:	3710      	adds	r7, #16
 8012542:	46bd      	mov	sp, r7
 8012544:	bd80      	pop	{r7, pc}
 8012546:	bf00      	nop
 8012548:	08026e98 	.word	0x08026e98
 801254c:	08027408 	.word	0x08027408
 8012550:	08026edc 	.word	0x08026edc

08012554 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8012554:	b580      	push	{r7, lr}
 8012556:	b086      	sub	sp, #24
 8012558:	af00      	add	r7, sp, #0
 801255a:	4603      	mov	r3, r0
 801255c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801255e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012562:	2b00      	cmp	r3, #0
 8012564:	db01      	blt.n	801256a <tcp_kill_prio+0x16>
 8012566:	79fb      	ldrb	r3, [r7, #7]
 8012568:	e000      	b.n	801256c <tcp_kill_prio+0x18>
 801256a:	237f      	movs	r3, #127	; 0x7f
 801256c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801256e:	7afb      	ldrb	r3, [r7, #11]
 8012570:	2b00      	cmp	r3, #0
 8012572:	d034      	beq.n	80125de <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8012574:	7afb      	ldrb	r3, [r7, #11]
 8012576:	3b01      	subs	r3, #1
 8012578:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801257a:	2300      	movs	r3, #0
 801257c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801257e:	2300      	movs	r3, #0
 8012580:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012582:	4b19      	ldr	r3, [pc, #100]	; (80125e8 <tcp_kill_prio+0x94>)
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	617b      	str	r3, [r7, #20]
 8012588:	e01f      	b.n	80125ca <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801258a:	697b      	ldr	r3, [r7, #20]
 801258c:	7d5b      	ldrb	r3, [r3, #21]
 801258e:	7afa      	ldrb	r2, [r7, #11]
 8012590:	429a      	cmp	r2, r3
 8012592:	d80c      	bhi.n	80125ae <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012594:	697b      	ldr	r3, [r7, #20]
 8012596:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8012598:	7afa      	ldrb	r2, [r7, #11]
 801259a:	429a      	cmp	r2, r3
 801259c:	d112      	bne.n	80125c4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801259e:	4b13      	ldr	r3, [pc, #76]	; (80125ec <tcp_kill_prio+0x98>)
 80125a0:	681a      	ldr	r2, [r3, #0]
 80125a2:	697b      	ldr	r3, [r7, #20]
 80125a4:	6a1b      	ldr	r3, [r3, #32]
 80125a6:	1ad3      	subs	r3, r2, r3
 80125a8:	68fa      	ldr	r2, [r7, #12]
 80125aa:	429a      	cmp	r2, r3
 80125ac:	d80a      	bhi.n	80125c4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80125ae:	4b0f      	ldr	r3, [pc, #60]	; (80125ec <tcp_kill_prio+0x98>)
 80125b0:	681a      	ldr	r2, [r3, #0]
 80125b2:	697b      	ldr	r3, [r7, #20]
 80125b4:	6a1b      	ldr	r3, [r3, #32]
 80125b6:	1ad3      	subs	r3, r2, r3
 80125b8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80125ba:	697b      	ldr	r3, [r7, #20]
 80125bc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80125be:	697b      	ldr	r3, [r7, #20]
 80125c0:	7d5b      	ldrb	r3, [r3, #21]
 80125c2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80125c4:	697b      	ldr	r3, [r7, #20]
 80125c6:	68db      	ldr	r3, [r3, #12]
 80125c8:	617b      	str	r3, [r7, #20]
 80125ca:	697b      	ldr	r3, [r7, #20]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d1dc      	bne.n	801258a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80125d0:	693b      	ldr	r3, [r7, #16]
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d004      	beq.n	80125e0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80125d6:	6938      	ldr	r0, [r7, #16]
 80125d8:	f7ff f8de 	bl	8011798 <tcp_abort>
 80125dc:	e000      	b.n	80125e0 <tcp_kill_prio+0x8c>
    return;
 80125de:	bf00      	nop
  }
}
 80125e0:	3718      	adds	r7, #24
 80125e2:	46bd      	mov	sp, r7
 80125e4:	bd80      	pop	{r7, pc}
 80125e6:	bf00      	nop
 80125e8:	2000fc48 	.word	0x2000fc48
 80125ec:	2000fc3c 	.word	0x2000fc3c

080125f0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80125f0:	b580      	push	{r7, lr}
 80125f2:	b086      	sub	sp, #24
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	4603      	mov	r3, r0
 80125f8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80125fa:	79fb      	ldrb	r3, [r7, #7]
 80125fc:	2b08      	cmp	r3, #8
 80125fe:	d009      	beq.n	8012614 <tcp_kill_state+0x24>
 8012600:	79fb      	ldrb	r3, [r7, #7]
 8012602:	2b09      	cmp	r3, #9
 8012604:	d006      	beq.n	8012614 <tcp_kill_state+0x24>
 8012606:	4b1a      	ldr	r3, [pc, #104]	; (8012670 <tcp_kill_state+0x80>)
 8012608:	f240 62dd 	movw	r2, #1757	; 0x6dd
 801260c:	4919      	ldr	r1, [pc, #100]	; (8012674 <tcp_kill_state+0x84>)
 801260e:	481a      	ldr	r0, [pc, #104]	; (8012678 <tcp_kill_state+0x88>)
 8012610:	f011 fae6 	bl	8023be0 <iprintf>

  inactivity = 0;
 8012614:	2300      	movs	r3, #0
 8012616:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012618:	2300      	movs	r3, #0
 801261a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801261c:	4b17      	ldr	r3, [pc, #92]	; (801267c <tcp_kill_state+0x8c>)
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	617b      	str	r3, [r7, #20]
 8012622:	e017      	b.n	8012654 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8012624:	697b      	ldr	r3, [r7, #20]
 8012626:	7d1b      	ldrb	r3, [r3, #20]
 8012628:	79fa      	ldrb	r2, [r7, #7]
 801262a:	429a      	cmp	r2, r3
 801262c:	d10f      	bne.n	801264e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801262e:	4b14      	ldr	r3, [pc, #80]	; (8012680 <tcp_kill_state+0x90>)
 8012630:	681a      	ldr	r2, [r3, #0]
 8012632:	697b      	ldr	r3, [r7, #20]
 8012634:	6a1b      	ldr	r3, [r3, #32]
 8012636:	1ad3      	subs	r3, r2, r3
 8012638:	68fa      	ldr	r2, [r7, #12]
 801263a:	429a      	cmp	r2, r3
 801263c:	d807      	bhi.n	801264e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801263e:	4b10      	ldr	r3, [pc, #64]	; (8012680 <tcp_kill_state+0x90>)
 8012640:	681a      	ldr	r2, [r3, #0]
 8012642:	697b      	ldr	r3, [r7, #20]
 8012644:	6a1b      	ldr	r3, [r3, #32]
 8012646:	1ad3      	subs	r3, r2, r3
 8012648:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801264a:	697b      	ldr	r3, [r7, #20]
 801264c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801264e:	697b      	ldr	r3, [r7, #20]
 8012650:	68db      	ldr	r3, [r3, #12]
 8012652:	617b      	str	r3, [r7, #20]
 8012654:	697b      	ldr	r3, [r7, #20]
 8012656:	2b00      	cmp	r3, #0
 8012658:	d1e4      	bne.n	8012624 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801265a:	693b      	ldr	r3, [r7, #16]
 801265c:	2b00      	cmp	r3, #0
 801265e:	d003      	beq.n	8012668 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8012660:	2100      	movs	r1, #0
 8012662:	6938      	ldr	r0, [r7, #16]
 8012664:	f7fe ffda 	bl	801161c <tcp_abandon>
  }
}
 8012668:	bf00      	nop
 801266a:	3718      	adds	r7, #24
 801266c:	46bd      	mov	sp, r7
 801266e:	bd80      	pop	{r7, pc}
 8012670:	08026e98 	.word	0x08026e98
 8012674:	08027424 	.word	0x08027424
 8012678:	08026edc 	.word	0x08026edc
 801267c:	2000fc48 	.word	0x2000fc48
 8012680:	2000fc3c 	.word	0x2000fc3c

08012684 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8012684:	b580      	push	{r7, lr}
 8012686:	b084      	sub	sp, #16
 8012688:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801268a:	2300      	movs	r3, #0
 801268c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801268e:	2300      	movs	r3, #0
 8012690:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012692:	4b12      	ldr	r3, [pc, #72]	; (80126dc <tcp_kill_timewait+0x58>)
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	60fb      	str	r3, [r7, #12]
 8012698:	e012      	b.n	80126c0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801269a:	4b11      	ldr	r3, [pc, #68]	; (80126e0 <tcp_kill_timewait+0x5c>)
 801269c:	681a      	ldr	r2, [r3, #0]
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	6a1b      	ldr	r3, [r3, #32]
 80126a2:	1ad3      	subs	r3, r2, r3
 80126a4:	687a      	ldr	r2, [r7, #4]
 80126a6:	429a      	cmp	r2, r3
 80126a8:	d807      	bhi.n	80126ba <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80126aa:	4b0d      	ldr	r3, [pc, #52]	; (80126e0 <tcp_kill_timewait+0x5c>)
 80126ac:	681a      	ldr	r2, [r3, #0]
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	6a1b      	ldr	r3, [r3, #32]
 80126b2:	1ad3      	subs	r3, r2, r3
 80126b4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	68db      	ldr	r3, [r3, #12]
 80126be:	60fb      	str	r3, [r7, #12]
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d1e9      	bne.n	801269a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80126c6:	68bb      	ldr	r3, [r7, #8]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d002      	beq.n	80126d2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80126cc:	68b8      	ldr	r0, [r7, #8]
 80126ce:	f7ff f863 	bl	8011798 <tcp_abort>
  }
}
 80126d2:	bf00      	nop
 80126d4:	3710      	adds	r7, #16
 80126d6:	46bd      	mov	sp, r7
 80126d8:	bd80      	pop	{r7, pc}
 80126da:	bf00      	nop
 80126dc:	2000fc4c 	.word	0x2000fc4c
 80126e0:	2000fc3c 	.word	0x2000fc3c

080126e4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80126e4:	b580      	push	{r7, lr}
 80126e6:	b082      	sub	sp, #8
 80126e8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80126ea:	4b10      	ldr	r3, [pc, #64]	; (801272c <tcp_handle_closepend+0x48>)
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80126f0:	e014      	b.n	801271c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	68db      	ldr	r3, [r3, #12]
 80126f6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	8b5b      	ldrh	r3, [r3, #26]
 80126fc:	f003 0308 	and.w	r3, r3, #8
 8012700:	2b00      	cmp	r3, #0
 8012702:	d009      	beq.n	8012718 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	8b5b      	ldrh	r3, [r3, #26]
 8012708:	f023 0308 	bic.w	r3, r3, #8
 801270c:	b29a      	uxth	r2, r3
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8012712:	6878      	ldr	r0, [r7, #4]
 8012714:	f7fe fe90 	bl	8011438 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8012718:	683b      	ldr	r3, [r7, #0]
 801271a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	2b00      	cmp	r3, #0
 8012720:	d1e7      	bne.n	80126f2 <tcp_handle_closepend+0xe>
  }
}
 8012722:	bf00      	nop
 8012724:	bf00      	nop
 8012726:	3708      	adds	r7, #8
 8012728:	46bd      	mov	sp, r7
 801272a:	bd80      	pop	{r7, pc}
 801272c:	2000fc48 	.word	0x2000fc48

08012730 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8012730:	b580      	push	{r7, lr}
 8012732:	b084      	sub	sp, #16
 8012734:	af00      	add	r7, sp, #0
 8012736:	4603      	mov	r3, r0
 8012738:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801273a:	2001      	movs	r0, #1
 801273c:	f7fd f932 	bl	800f9a4 <memp_malloc>
 8012740:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	2b00      	cmp	r3, #0
 8012746:	d126      	bne.n	8012796 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8012748:	f7ff ffcc 	bl	80126e4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801274c:	f7ff ff9a 	bl	8012684 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012750:	2001      	movs	r0, #1
 8012752:	f7fd f927 	bl	800f9a4 <memp_malloc>
 8012756:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d11b      	bne.n	8012796 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801275e:	2009      	movs	r0, #9
 8012760:	f7ff ff46 	bl	80125f0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012764:	2001      	movs	r0, #1
 8012766:	f7fd f91d 	bl	800f9a4 <memp_malloc>
 801276a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	2b00      	cmp	r3, #0
 8012770:	d111      	bne.n	8012796 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8012772:	2008      	movs	r0, #8
 8012774:	f7ff ff3c 	bl	80125f0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012778:	2001      	movs	r0, #1
 801277a:	f7fd f913 	bl	800f9a4 <memp_malloc>
 801277e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d107      	bne.n	8012796 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8012786:	79fb      	ldrb	r3, [r7, #7]
 8012788:	4618      	mov	r0, r3
 801278a:	f7ff fee3 	bl	8012554 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801278e:	2001      	movs	r0, #1
 8012790:	f7fd f908 	bl	800f9a4 <memp_malloc>
 8012794:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d03f      	beq.n	801281c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801279c:	229c      	movs	r2, #156	; 0x9c
 801279e:	2100      	movs	r1, #0
 80127a0:	68f8      	ldr	r0, [r7, #12]
 80127a2:	f011 f91f 	bl	80239e4 <memset>
    pcb->prio = prio;
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	79fa      	ldrb	r2, [r7, #7]
 80127aa:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80127b2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80127bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	22ff      	movs	r2, #255	; 0xff
 80127ca:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	f44f 7206 	mov.w	r2, #536	; 0x218
 80127d2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	2206      	movs	r2, #6
 80127d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	2206      	movs	r2, #6
 80127e0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80127e8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	2201      	movs	r2, #1
 80127ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80127f2:	4b0d      	ldr	r3, [pc, #52]	; (8012828 <tcp_alloc+0xf8>)
 80127f4:	681a      	ldr	r2, [r3, #0]
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80127fa:	4b0c      	ldr	r3, [pc, #48]	; (801282c <tcp_alloc+0xfc>)
 80127fc:	781a      	ldrb	r2, [r3, #0]
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8012808:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	4a08      	ldr	r2, [pc, #32]	; (8012830 <tcp_alloc+0x100>)
 8012810:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	4a07      	ldr	r2, [pc, #28]	; (8012834 <tcp_alloc+0x104>)
 8012818:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801281c:	68fb      	ldr	r3, [r7, #12]
}
 801281e:	4618      	mov	r0, r3
 8012820:	3710      	adds	r7, #16
 8012822:	46bd      	mov	sp, r7
 8012824:	bd80      	pop	{r7, pc}
 8012826:	bf00      	nop
 8012828:	2000fc3c 	.word	0x2000fc3c
 801282c:	2000fc52 	.word	0x2000fc52
 8012830:	080124e9 	.word	0x080124e9
 8012834:	006ddd00 	.word	0x006ddd00

08012838 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8012838:	b580      	push	{r7, lr}
 801283a:	b084      	sub	sp, #16
 801283c:	af00      	add	r7, sp, #0
 801283e:	4603      	mov	r3, r0
 8012840:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8012842:	2040      	movs	r0, #64	; 0x40
 8012844:	f7ff ff74 	bl	8012730 <tcp_alloc>
 8012848:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801284a:	68fb      	ldr	r3, [r7, #12]
}
 801284c:	4618      	mov	r0, r3
 801284e:	3710      	adds	r7, #16
 8012850:	46bd      	mov	sp, r7
 8012852:	bd80      	pop	{r7, pc}

08012854 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8012854:	b480      	push	{r7}
 8012856:	b083      	sub	sp, #12
 8012858:	af00      	add	r7, sp, #0
 801285a:	6078      	str	r0, [r7, #4]
 801285c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	2b00      	cmp	r3, #0
 8012862:	d002      	beq.n	801286a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	683a      	ldr	r2, [r7, #0]
 8012868:	611a      	str	r2, [r3, #16]
  }
}
 801286a:	bf00      	nop
 801286c:	370c      	adds	r7, #12
 801286e:	46bd      	mov	sp, r7
 8012870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012874:	4770      	bx	lr
	...

08012878 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8012878:	b580      	push	{r7, lr}
 801287a:	b082      	sub	sp, #8
 801287c:	af00      	add	r7, sp, #0
 801287e:	6078      	str	r0, [r7, #4]
 8012880:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d00e      	beq.n	80128a6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	7d1b      	ldrb	r3, [r3, #20]
 801288c:	2b01      	cmp	r3, #1
 801288e:	d106      	bne.n	801289e <tcp_recv+0x26>
 8012890:	4b07      	ldr	r3, [pc, #28]	; (80128b0 <tcp_recv+0x38>)
 8012892:	f240 72df 	movw	r2, #2015	; 0x7df
 8012896:	4907      	ldr	r1, [pc, #28]	; (80128b4 <tcp_recv+0x3c>)
 8012898:	4807      	ldr	r0, [pc, #28]	; (80128b8 <tcp_recv+0x40>)
 801289a:	f011 f9a1 	bl	8023be0 <iprintf>
    pcb->recv = recv;
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	683a      	ldr	r2, [r7, #0]
 80128a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80128a6:	bf00      	nop
 80128a8:	3708      	adds	r7, #8
 80128aa:	46bd      	mov	sp, r7
 80128ac:	bd80      	pop	{r7, pc}
 80128ae:	bf00      	nop
 80128b0:	08026e98 	.word	0x08026e98
 80128b4:	08027434 	.word	0x08027434
 80128b8:	08026edc 	.word	0x08026edc

080128bc <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80128bc:	b580      	push	{r7, lr}
 80128be:	b082      	sub	sp, #8
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
 80128c4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d00e      	beq.n	80128ea <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	7d1b      	ldrb	r3, [r3, #20]
 80128d0:	2b01      	cmp	r3, #1
 80128d2:	d106      	bne.n	80128e2 <tcp_sent+0x26>
 80128d4:	4b07      	ldr	r3, [pc, #28]	; (80128f4 <tcp_sent+0x38>)
 80128d6:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80128da:	4907      	ldr	r1, [pc, #28]	; (80128f8 <tcp_sent+0x3c>)
 80128dc:	4807      	ldr	r0, [pc, #28]	; (80128fc <tcp_sent+0x40>)
 80128de:	f011 f97f 	bl	8023be0 <iprintf>
    pcb->sent = sent;
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	683a      	ldr	r2, [r7, #0]
 80128e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80128ea:	bf00      	nop
 80128ec:	3708      	adds	r7, #8
 80128ee:	46bd      	mov	sp, r7
 80128f0:	bd80      	pop	{r7, pc}
 80128f2:	bf00      	nop
 80128f4:	08026e98 	.word	0x08026e98
 80128f8:	0802745c 	.word	0x0802745c
 80128fc:	08026edc 	.word	0x08026edc

08012900 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8012900:	b580      	push	{r7, lr}
 8012902:	b082      	sub	sp, #8
 8012904:	af00      	add	r7, sp, #0
 8012906:	6078      	str	r0, [r7, #4]
 8012908:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	2b00      	cmp	r3, #0
 801290e:	d00e      	beq.n	801292e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	7d1b      	ldrb	r3, [r3, #20]
 8012914:	2b01      	cmp	r3, #1
 8012916:	d106      	bne.n	8012926 <tcp_err+0x26>
 8012918:	4b07      	ldr	r3, [pc, #28]	; (8012938 <tcp_err+0x38>)
 801291a:	f640 020d 	movw	r2, #2061	; 0x80d
 801291e:	4907      	ldr	r1, [pc, #28]	; (801293c <tcp_err+0x3c>)
 8012920:	4807      	ldr	r0, [pc, #28]	; (8012940 <tcp_err+0x40>)
 8012922:	f011 f95d 	bl	8023be0 <iprintf>
    pcb->errf = err;
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	683a      	ldr	r2, [r7, #0]
 801292a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 801292e:	bf00      	nop
 8012930:	3708      	adds	r7, #8
 8012932:	46bd      	mov	sp, r7
 8012934:	bd80      	pop	{r7, pc}
 8012936:	bf00      	nop
 8012938:	08026e98 	.word	0x08026e98
 801293c:	08027484 	.word	0x08027484
 8012940:	08026edc 	.word	0x08026edc

08012944 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8012944:	b480      	push	{r7}
 8012946:	b085      	sub	sp, #20
 8012948:	af00      	add	r7, sp, #0
 801294a:	6078      	str	r0, [r7, #4]
 801294c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d008      	beq.n	8012966 <tcp_accept+0x22>
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	7d1b      	ldrb	r3, [r3, #20]
 8012958:	2b01      	cmp	r3, #1
 801295a:	d104      	bne.n	8012966 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	683a      	ldr	r2, [r7, #0]
 8012964:	619a      	str	r2, [r3, #24]
  }
}
 8012966:	bf00      	nop
 8012968:	3714      	adds	r7, #20
 801296a:	46bd      	mov	sp, r7
 801296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012970:	4770      	bx	lr
	...

08012974 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8012974:	b580      	push	{r7, lr}
 8012976:	b084      	sub	sp, #16
 8012978:	af00      	add	r7, sp, #0
 801297a:	60f8      	str	r0, [r7, #12]
 801297c:	60b9      	str	r1, [r7, #8]
 801297e:	4613      	mov	r3, r2
 8012980:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	2b00      	cmp	r3, #0
 8012986:	d107      	bne.n	8012998 <tcp_poll+0x24>
 8012988:	4b0e      	ldr	r3, [pc, #56]	; (80129c4 <tcp_poll+0x50>)
 801298a:	f640 023d 	movw	r2, #2109	; 0x83d
 801298e:	490e      	ldr	r1, [pc, #56]	; (80129c8 <tcp_poll+0x54>)
 8012990:	480e      	ldr	r0, [pc, #56]	; (80129cc <tcp_poll+0x58>)
 8012992:	f011 f925 	bl	8023be0 <iprintf>
 8012996:	e011      	b.n	80129bc <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	7d1b      	ldrb	r3, [r3, #20]
 801299c:	2b01      	cmp	r3, #1
 801299e:	d106      	bne.n	80129ae <tcp_poll+0x3a>
 80129a0:	4b08      	ldr	r3, [pc, #32]	; (80129c4 <tcp_poll+0x50>)
 80129a2:	f640 023e 	movw	r2, #2110	; 0x83e
 80129a6:	490a      	ldr	r1, [pc, #40]	; (80129d0 <tcp_poll+0x5c>)
 80129a8:	4808      	ldr	r0, [pc, #32]	; (80129cc <tcp_poll+0x58>)
 80129aa:	f011 f919 	bl	8023be0 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	68ba      	ldr	r2, [r7, #8]
 80129b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	79fa      	ldrb	r2, [r7, #7]
 80129ba:	775a      	strb	r2, [r3, #29]
}
 80129bc:	3710      	adds	r7, #16
 80129be:	46bd      	mov	sp, r7
 80129c0:	bd80      	pop	{r7, pc}
 80129c2:	bf00      	nop
 80129c4:	08026e98 	.word	0x08026e98
 80129c8:	080274ac 	.word	0x080274ac
 80129cc:	08026edc 	.word	0x08026edc
 80129d0:	080274c4 	.word	0x080274c4

080129d4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80129d4:	b580      	push	{r7, lr}
 80129d6:	b082      	sub	sp, #8
 80129d8:	af00      	add	r7, sp, #0
 80129da:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d107      	bne.n	80129f2 <tcp_pcb_purge+0x1e>
 80129e2:	4b21      	ldr	r3, [pc, #132]	; (8012a68 <tcp_pcb_purge+0x94>)
 80129e4:	f640 0251 	movw	r2, #2129	; 0x851
 80129e8:	4920      	ldr	r1, [pc, #128]	; (8012a6c <tcp_pcb_purge+0x98>)
 80129ea:	4821      	ldr	r0, [pc, #132]	; (8012a70 <tcp_pcb_purge+0x9c>)
 80129ec:	f011 f8f8 	bl	8023be0 <iprintf>
 80129f0:	e037      	b.n	8012a62 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	7d1b      	ldrb	r3, [r3, #20]
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d033      	beq.n	8012a62 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80129fe:	2b0a      	cmp	r3, #10
 8012a00:	d02f      	beq.n	8012a62 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8012a06:	2b01      	cmp	r3, #1
 8012a08:	d02b      	beq.n	8012a62 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d007      	beq.n	8012a22 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012a16:	4618      	mov	r0, r3
 8012a18:	f7fd ff42 	bl	80108a0 <pbuf_free>
      pcb->refused_data = NULL;
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	2200      	movs	r2, #0
 8012a20:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d002      	beq.n	8012a30 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8012a2a:	6878      	ldr	r0, [r7, #4]
 8012a2c:	f000 f986 	bl	8012d3c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012a36:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	f7ff fcf9 	bl	8012434 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a46:	4618      	mov	r0, r3
 8012a48:	f7ff fcf4 	bl	8012434 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	2200      	movs	r2, #0
 8012a50:	66da      	str	r2, [r3, #108]	; 0x6c
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	2200      	movs	r2, #0
 8012a5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8012a62:	3708      	adds	r7, #8
 8012a64:	46bd      	mov	sp, r7
 8012a66:	bd80      	pop	{r7, pc}
 8012a68:	08026e98 	.word	0x08026e98
 8012a6c:	080274e4 	.word	0x080274e4
 8012a70:	08026edc 	.word	0x08026edc

08012a74 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8012a74:	b580      	push	{r7, lr}
 8012a76:	b084      	sub	sp, #16
 8012a78:	af00      	add	r7, sp, #0
 8012a7a:	6078      	str	r0, [r7, #4]
 8012a7c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8012a7e:	683b      	ldr	r3, [r7, #0]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d106      	bne.n	8012a92 <tcp_pcb_remove+0x1e>
 8012a84:	4b3e      	ldr	r3, [pc, #248]	; (8012b80 <tcp_pcb_remove+0x10c>)
 8012a86:	f640 0283 	movw	r2, #2179	; 0x883
 8012a8a:	493e      	ldr	r1, [pc, #248]	; (8012b84 <tcp_pcb_remove+0x110>)
 8012a8c:	483e      	ldr	r0, [pc, #248]	; (8012b88 <tcp_pcb_remove+0x114>)
 8012a8e:	f011 f8a7 	bl	8023be0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d106      	bne.n	8012aa6 <tcp_pcb_remove+0x32>
 8012a98:	4b39      	ldr	r3, [pc, #228]	; (8012b80 <tcp_pcb_remove+0x10c>)
 8012a9a:	f640 0284 	movw	r2, #2180	; 0x884
 8012a9e:	493b      	ldr	r1, [pc, #236]	; (8012b8c <tcp_pcb_remove+0x118>)
 8012aa0:	4839      	ldr	r0, [pc, #228]	; (8012b88 <tcp_pcb_remove+0x114>)
 8012aa2:	f011 f89d 	bl	8023be0 <iprintf>

  TCP_RMV(pcblist, pcb);
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	683a      	ldr	r2, [r7, #0]
 8012aac:	429a      	cmp	r2, r3
 8012aae:	d105      	bne.n	8012abc <tcp_pcb_remove+0x48>
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	68da      	ldr	r2, [r3, #12]
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	601a      	str	r2, [r3, #0]
 8012aba:	e013      	b.n	8012ae4 <tcp_pcb_remove+0x70>
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	60fb      	str	r3, [r7, #12]
 8012ac2:	e00c      	b.n	8012ade <tcp_pcb_remove+0x6a>
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	68db      	ldr	r3, [r3, #12]
 8012ac8:	683a      	ldr	r2, [r7, #0]
 8012aca:	429a      	cmp	r2, r3
 8012acc:	d104      	bne.n	8012ad8 <tcp_pcb_remove+0x64>
 8012ace:	683b      	ldr	r3, [r7, #0]
 8012ad0:	68da      	ldr	r2, [r3, #12]
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	60da      	str	r2, [r3, #12]
 8012ad6:	e005      	b.n	8012ae4 <tcp_pcb_remove+0x70>
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	68db      	ldr	r3, [r3, #12]
 8012adc:	60fb      	str	r3, [r7, #12]
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d1ef      	bne.n	8012ac4 <tcp_pcb_remove+0x50>
 8012ae4:	683b      	ldr	r3, [r7, #0]
 8012ae6:	2200      	movs	r2, #0
 8012ae8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8012aea:	6838      	ldr	r0, [r7, #0]
 8012aec:	f7ff ff72 	bl	80129d4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8012af0:	683b      	ldr	r3, [r7, #0]
 8012af2:	7d1b      	ldrb	r3, [r3, #20]
 8012af4:	2b0a      	cmp	r3, #10
 8012af6:	d013      	beq.n	8012b20 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8012af8:	683b      	ldr	r3, [r7, #0]
 8012afa:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8012afc:	2b01      	cmp	r3, #1
 8012afe:	d00f      	beq.n	8012b20 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8012b00:	683b      	ldr	r3, [r7, #0]
 8012b02:	8b5b      	ldrh	r3, [r3, #26]
 8012b04:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d009      	beq.n	8012b20 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8012b0c:	683b      	ldr	r3, [r7, #0]
 8012b0e:	8b5b      	ldrh	r3, [r3, #26]
 8012b10:	f043 0302 	orr.w	r3, r3, #2
 8012b14:	b29a      	uxth	r2, r3
 8012b16:	683b      	ldr	r3, [r7, #0]
 8012b18:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012b1a:	6838      	ldr	r0, [r7, #0]
 8012b1c:	f003 fbc6 	bl	80162ac <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8012b20:	683b      	ldr	r3, [r7, #0]
 8012b22:	7d1b      	ldrb	r3, [r3, #20]
 8012b24:	2b01      	cmp	r3, #1
 8012b26:	d020      	beq.n	8012b6a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8012b28:	683b      	ldr	r3, [r7, #0]
 8012b2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d006      	beq.n	8012b3e <tcp_pcb_remove+0xca>
 8012b30:	4b13      	ldr	r3, [pc, #76]	; (8012b80 <tcp_pcb_remove+0x10c>)
 8012b32:	f640 0293 	movw	r2, #2195	; 0x893
 8012b36:	4916      	ldr	r1, [pc, #88]	; (8012b90 <tcp_pcb_remove+0x11c>)
 8012b38:	4813      	ldr	r0, [pc, #76]	; (8012b88 <tcp_pcb_remove+0x114>)
 8012b3a:	f011 f851 	bl	8023be0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8012b3e:	683b      	ldr	r3, [r7, #0]
 8012b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d006      	beq.n	8012b54 <tcp_pcb_remove+0xe0>
 8012b46:	4b0e      	ldr	r3, [pc, #56]	; (8012b80 <tcp_pcb_remove+0x10c>)
 8012b48:	f640 0294 	movw	r2, #2196	; 0x894
 8012b4c:	4911      	ldr	r1, [pc, #68]	; (8012b94 <tcp_pcb_remove+0x120>)
 8012b4e:	480e      	ldr	r0, [pc, #56]	; (8012b88 <tcp_pcb_remove+0x114>)
 8012b50:	f011 f846 	bl	8023be0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8012b54:	683b      	ldr	r3, [r7, #0]
 8012b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d006      	beq.n	8012b6a <tcp_pcb_remove+0xf6>
 8012b5c:	4b08      	ldr	r3, [pc, #32]	; (8012b80 <tcp_pcb_remove+0x10c>)
 8012b5e:	f640 0296 	movw	r2, #2198	; 0x896
 8012b62:	490d      	ldr	r1, [pc, #52]	; (8012b98 <tcp_pcb_remove+0x124>)
 8012b64:	4808      	ldr	r0, [pc, #32]	; (8012b88 <tcp_pcb_remove+0x114>)
 8012b66:	f011 f83b 	bl	8023be0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8012b6a:	683b      	ldr	r3, [r7, #0]
 8012b6c:	2200      	movs	r2, #0
 8012b6e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8012b70:	683b      	ldr	r3, [r7, #0]
 8012b72:	2200      	movs	r2, #0
 8012b74:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8012b76:	bf00      	nop
 8012b78:	3710      	adds	r7, #16
 8012b7a:	46bd      	mov	sp, r7
 8012b7c:	bd80      	pop	{r7, pc}
 8012b7e:	bf00      	nop
 8012b80:	08026e98 	.word	0x08026e98
 8012b84:	08027500 	.word	0x08027500
 8012b88:	08026edc 	.word	0x08026edc
 8012b8c:	0802751c 	.word	0x0802751c
 8012b90:	0802753c 	.word	0x0802753c
 8012b94:	08027554 	.word	0x08027554
 8012b98:	08027570 	.word	0x08027570

08012b9c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8012b9c:	b580      	push	{r7, lr}
 8012b9e:	b082      	sub	sp, #8
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d106      	bne.n	8012bb8 <tcp_next_iss+0x1c>
 8012baa:	4b0a      	ldr	r3, [pc, #40]	; (8012bd4 <tcp_next_iss+0x38>)
 8012bac:	f640 02af 	movw	r2, #2223	; 0x8af
 8012bb0:	4909      	ldr	r1, [pc, #36]	; (8012bd8 <tcp_next_iss+0x3c>)
 8012bb2:	480a      	ldr	r0, [pc, #40]	; (8012bdc <tcp_next_iss+0x40>)
 8012bb4:	f011 f814 	bl	8023be0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8012bb8:	4b09      	ldr	r3, [pc, #36]	; (8012be0 <tcp_next_iss+0x44>)
 8012bba:	681a      	ldr	r2, [r3, #0]
 8012bbc:	4b09      	ldr	r3, [pc, #36]	; (8012be4 <tcp_next_iss+0x48>)
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	4413      	add	r3, r2
 8012bc2:	4a07      	ldr	r2, [pc, #28]	; (8012be0 <tcp_next_iss+0x44>)
 8012bc4:	6013      	str	r3, [r2, #0]
  return iss;
 8012bc6:	4b06      	ldr	r3, [pc, #24]	; (8012be0 <tcp_next_iss+0x44>)
 8012bc8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8012bca:	4618      	mov	r0, r3
 8012bcc:	3708      	adds	r7, #8
 8012bce:	46bd      	mov	sp, r7
 8012bd0:	bd80      	pop	{r7, pc}
 8012bd2:	bf00      	nop
 8012bd4:	08026e98 	.word	0x08026e98
 8012bd8:	08027588 	.word	0x08027588
 8012bdc:	08026edc 	.word	0x08026edc
 8012be0:	20000018 	.word	0x20000018
 8012be4:	2000fc3c 	.word	0x2000fc3c

08012be8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8012be8:	b580      	push	{r7, lr}
 8012bea:	b086      	sub	sp, #24
 8012bec:	af00      	add	r7, sp, #0
 8012bee:	4603      	mov	r3, r0
 8012bf0:	60b9      	str	r1, [r7, #8]
 8012bf2:	607a      	str	r2, [r7, #4]
 8012bf4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d106      	bne.n	8012c0a <tcp_eff_send_mss_netif+0x22>
 8012bfc:	4b14      	ldr	r3, [pc, #80]	; (8012c50 <tcp_eff_send_mss_netif+0x68>)
 8012bfe:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8012c02:	4914      	ldr	r1, [pc, #80]	; (8012c54 <tcp_eff_send_mss_netif+0x6c>)
 8012c04:	4814      	ldr	r0, [pc, #80]	; (8012c58 <tcp_eff_send_mss_netif+0x70>)
 8012c06:	f010 ffeb 	bl	8023be0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8012c0a:	68bb      	ldr	r3, [r7, #8]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d101      	bne.n	8012c14 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8012c10:	89fb      	ldrh	r3, [r7, #14]
 8012c12:	e019      	b.n	8012c48 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8012c14:	68bb      	ldr	r3, [r7, #8]
 8012c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012c18:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8012c1a:	8afb      	ldrh	r3, [r7, #22]
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d012      	beq.n	8012c46 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8012c20:	2328      	movs	r3, #40	; 0x28
 8012c22:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8012c24:	8afa      	ldrh	r2, [r7, #22]
 8012c26:	8abb      	ldrh	r3, [r7, #20]
 8012c28:	429a      	cmp	r2, r3
 8012c2a:	d904      	bls.n	8012c36 <tcp_eff_send_mss_netif+0x4e>
 8012c2c:	8afa      	ldrh	r2, [r7, #22]
 8012c2e:	8abb      	ldrh	r3, [r7, #20]
 8012c30:	1ad3      	subs	r3, r2, r3
 8012c32:	b29b      	uxth	r3, r3
 8012c34:	e000      	b.n	8012c38 <tcp_eff_send_mss_netif+0x50>
 8012c36:	2300      	movs	r3, #0
 8012c38:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8012c3a:	8a7a      	ldrh	r2, [r7, #18]
 8012c3c:	89fb      	ldrh	r3, [r7, #14]
 8012c3e:	4293      	cmp	r3, r2
 8012c40:	bf28      	it	cs
 8012c42:	4613      	movcs	r3, r2
 8012c44:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8012c46:	89fb      	ldrh	r3, [r7, #14]
}
 8012c48:	4618      	mov	r0, r3
 8012c4a:	3718      	adds	r7, #24
 8012c4c:	46bd      	mov	sp, r7
 8012c4e:	bd80      	pop	{r7, pc}
 8012c50:	08026e98 	.word	0x08026e98
 8012c54:	080275a4 	.word	0x080275a4
 8012c58:	08026edc 	.word	0x08026edc

08012c5c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b084      	sub	sp, #16
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	6078      	str	r0, [r7, #4]
 8012c64:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8012c66:	683b      	ldr	r3, [r7, #0]
 8012c68:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d119      	bne.n	8012ca4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8012c70:	4b10      	ldr	r3, [pc, #64]	; (8012cb4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8012c72:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8012c76:	4910      	ldr	r1, [pc, #64]	; (8012cb8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8012c78:	4810      	ldr	r0, [pc, #64]	; (8012cbc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8012c7a:	f010 ffb1 	bl	8023be0 <iprintf>

  while (pcb != NULL) {
 8012c7e:	e011      	b.n	8012ca4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	681a      	ldr	r2, [r3, #0]
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	429a      	cmp	r2, r3
 8012c8a:	d108      	bne.n	8012c9e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	68db      	ldr	r3, [r3, #12]
 8012c90:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8012c92:	68f8      	ldr	r0, [r7, #12]
 8012c94:	f7fe fd80 	bl	8011798 <tcp_abort>
      pcb = next;
 8012c98:	68bb      	ldr	r3, [r7, #8]
 8012c9a:	60fb      	str	r3, [r7, #12]
 8012c9c:	e002      	b.n	8012ca4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	68db      	ldr	r3, [r3, #12]
 8012ca2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d1ea      	bne.n	8012c80 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8012caa:	bf00      	nop
 8012cac:	bf00      	nop
 8012cae:	3710      	adds	r7, #16
 8012cb0:	46bd      	mov	sp, r7
 8012cb2:	bd80      	pop	{r7, pc}
 8012cb4:	08026e98 	.word	0x08026e98
 8012cb8:	080275cc 	.word	0x080275cc
 8012cbc:	08026edc 	.word	0x08026edc

08012cc0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012cc0:	b580      	push	{r7, lr}
 8012cc2:	b084      	sub	sp, #16
 8012cc4:	af00      	add	r7, sp, #0
 8012cc6:	6078      	str	r0, [r7, #4]
 8012cc8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d02a      	beq.n	8012d26 <tcp_netif_ip_addr_changed+0x66>
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d026      	beq.n	8012d26 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8012cd8:	4b15      	ldr	r3, [pc, #84]	; (8012d30 <tcp_netif_ip_addr_changed+0x70>)
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	4619      	mov	r1, r3
 8012cde:	6878      	ldr	r0, [r7, #4]
 8012ce0:	f7ff ffbc 	bl	8012c5c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8012ce4:	4b13      	ldr	r3, [pc, #76]	; (8012d34 <tcp_netif_ip_addr_changed+0x74>)
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	4619      	mov	r1, r3
 8012cea:	6878      	ldr	r0, [r7, #4]
 8012cec:	f7ff ffb6 	bl	8012c5c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8012cf0:	683b      	ldr	r3, [r7, #0]
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d017      	beq.n	8012d26 <tcp_netif_ip_addr_changed+0x66>
 8012cf6:	683b      	ldr	r3, [r7, #0]
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d013      	beq.n	8012d26 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012cfe:	4b0e      	ldr	r3, [pc, #56]	; (8012d38 <tcp_netif_ip_addr_changed+0x78>)
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	60fb      	str	r3, [r7, #12]
 8012d04:	e00c      	b.n	8012d20 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	681a      	ldr	r2, [r3, #0]
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	429a      	cmp	r2, r3
 8012d10:	d103      	bne.n	8012d1a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8012d12:	683b      	ldr	r3, [r7, #0]
 8012d14:	681a      	ldr	r2, [r3, #0]
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	68db      	ldr	r3, [r3, #12]
 8012d1e:	60fb      	str	r3, [r7, #12]
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d1ef      	bne.n	8012d06 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8012d26:	bf00      	nop
 8012d28:	3710      	adds	r7, #16
 8012d2a:	46bd      	mov	sp, r7
 8012d2c:	bd80      	pop	{r7, pc}
 8012d2e:	bf00      	nop
 8012d30:	2000fc48 	.word	0x2000fc48
 8012d34:	2000fc40 	.word	0x2000fc40
 8012d38:	2000fc44 	.word	0x2000fc44

08012d3c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8012d3c:	b580      	push	{r7, lr}
 8012d3e:	b082      	sub	sp, #8
 8012d40:	af00      	add	r7, sp, #0
 8012d42:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d007      	beq.n	8012d5c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012d50:	4618      	mov	r0, r3
 8012d52:	f7ff fb6f 	bl	8012434 <tcp_segs_free>
    pcb->ooseq = NULL;
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	2200      	movs	r2, #0
 8012d5a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8012d5c:	bf00      	nop
 8012d5e:	3708      	adds	r7, #8
 8012d60:	46bd      	mov	sp, r7
 8012d62:	bd80      	pop	{r7, pc}

08012d64 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8012d64:	b590      	push	{r4, r7, lr}
 8012d66:	b08d      	sub	sp, #52	; 0x34
 8012d68:	af04      	add	r7, sp, #16
 8012d6a:	6078      	str	r0, [r7, #4]
 8012d6c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d105      	bne.n	8012d80 <tcp_input+0x1c>
 8012d74:	4b9b      	ldr	r3, [pc, #620]	; (8012fe4 <tcp_input+0x280>)
 8012d76:	2283      	movs	r2, #131	; 0x83
 8012d78:	499b      	ldr	r1, [pc, #620]	; (8012fe8 <tcp_input+0x284>)
 8012d7a:	489c      	ldr	r0, [pc, #624]	; (8012fec <tcp_input+0x288>)
 8012d7c:	f010 ff30 	bl	8023be0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	685b      	ldr	r3, [r3, #4]
 8012d84:	4a9a      	ldr	r2, [pc, #616]	; (8012ff0 <tcp_input+0x28c>)
 8012d86:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	895b      	ldrh	r3, [r3, #10]
 8012d8c:	2b13      	cmp	r3, #19
 8012d8e:	f240 83d1 	bls.w	8013534 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012d92:	4b98      	ldr	r3, [pc, #608]	; (8012ff4 <tcp_input+0x290>)
 8012d94:	695b      	ldr	r3, [r3, #20]
 8012d96:	4a97      	ldr	r2, [pc, #604]	; (8012ff4 <tcp_input+0x290>)
 8012d98:	6812      	ldr	r2, [r2, #0]
 8012d9a:	4611      	mov	r1, r2
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	f007 fa11 	bl	801a1c4 <ip4_addr_isbroadcast_u32>
 8012da2:	4603      	mov	r3, r0
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	f040 83c7 	bne.w	8013538 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8012daa:	4b92      	ldr	r3, [pc, #584]	; (8012ff4 <tcp_input+0x290>)
 8012dac:	695b      	ldr	r3, [r3, #20]
 8012dae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012db2:	2be0      	cmp	r3, #224	; 0xe0
 8012db4:	f000 83c0 	beq.w	8013538 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8012db8:	4b8d      	ldr	r3, [pc, #564]	; (8012ff0 <tcp_input+0x28c>)
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	899b      	ldrh	r3, [r3, #12]
 8012dbe:	b29b      	uxth	r3, r3
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	f7fb f917 	bl	800dff4 <lwip_htons>
 8012dc6:	4603      	mov	r3, r0
 8012dc8:	0b1b      	lsrs	r3, r3, #12
 8012dca:	b29b      	uxth	r3, r3
 8012dcc:	b2db      	uxtb	r3, r3
 8012dce:	009b      	lsls	r3, r3, #2
 8012dd0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8012dd2:	7cbb      	ldrb	r3, [r7, #18]
 8012dd4:	2b13      	cmp	r3, #19
 8012dd6:	f240 83b1 	bls.w	801353c <tcp_input+0x7d8>
 8012dda:	7cbb      	ldrb	r3, [r7, #18]
 8012ddc:	b29a      	uxth	r2, r3
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	891b      	ldrh	r3, [r3, #8]
 8012de2:	429a      	cmp	r2, r3
 8012de4:	f200 83aa 	bhi.w	801353c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8012de8:	7cbb      	ldrb	r3, [r7, #18]
 8012dea:	b29b      	uxth	r3, r3
 8012dec:	3b14      	subs	r3, #20
 8012dee:	b29a      	uxth	r2, r3
 8012df0:	4b81      	ldr	r3, [pc, #516]	; (8012ff8 <tcp_input+0x294>)
 8012df2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8012df4:	4b81      	ldr	r3, [pc, #516]	; (8012ffc <tcp_input+0x298>)
 8012df6:	2200      	movs	r2, #0
 8012df8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	895a      	ldrh	r2, [r3, #10]
 8012dfe:	7cbb      	ldrb	r3, [r7, #18]
 8012e00:	b29b      	uxth	r3, r3
 8012e02:	429a      	cmp	r2, r3
 8012e04:	d309      	bcc.n	8012e1a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8012e06:	4b7c      	ldr	r3, [pc, #496]	; (8012ff8 <tcp_input+0x294>)
 8012e08:	881a      	ldrh	r2, [r3, #0]
 8012e0a:	4b7d      	ldr	r3, [pc, #500]	; (8013000 <tcp_input+0x29c>)
 8012e0c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8012e0e:	7cbb      	ldrb	r3, [r7, #18]
 8012e10:	4619      	mov	r1, r3
 8012e12:	6878      	ldr	r0, [r7, #4]
 8012e14:	f7fd fc8c 	bl	8010730 <pbuf_remove_header>
 8012e18:	e04e      	b.n	8012eb8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d105      	bne.n	8012e2e <tcp_input+0xca>
 8012e22:	4b70      	ldr	r3, [pc, #448]	; (8012fe4 <tcp_input+0x280>)
 8012e24:	22c2      	movs	r2, #194	; 0xc2
 8012e26:	4977      	ldr	r1, [pc, #476]	; (8013004 <tcp_input+0x2a0>)
 8012e28:	4870      	ldr	r0, [pc, #448]	; (8012fec <tcp_input+0x288>)
 8012e2a:	f010 fed9 	bl	8023be0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8012e2e:	2114      	movs	r1, #20
 8012e30:	6878      	ldr	r0, [r7, #4]
 8012e32:	f7fd fc7d 	bl	8010730 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	895a      	ldrh	r2, [r3, #10]
 8012e3a:	4b71      	ldr	r3, [pc, #452]	; (8013000 <tcp_input+0x29c>)
 8012e3c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8012e3e:	4b6e      	ldr	r3, [pc, #440]	; (8012ff8 <tcp_input+0x294>)
 8012e40:	881a      	ldrh	r2, [r3, #0]
 8012e42:	4b6f      	ldr	r3, [pc, #444]	; (8013000 <tcp_input+0x29c>)
 8012e44:	881b      	ldrh	r3, [r3, #0]
 8012e46:	1ad3      	subs	r3, r2, r3
 8012e48:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8012e4a:	4b6d      	ldr	r3, [pc, #436]	; (8013000 <tcp_input+0x29c>)
 8012e4c:	881b      	ldrh	r3, [r3, #0]
 8012e4e:	4619      	mov	r1, r3
 8012e50:	6878      	ldr	r0, [r7, #4]
 8012e52:	f7fd fc6d 	bl	8010730 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	895b      	ldrh	r3, [r3, #10]
 8012e5c:	8a3a      	ldrh	r2, [r7, #16]
 8012e5e:	429a      	cmp	r2, r3
 8012e60:	f200 836e 	bhi.w	8013540 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	685b      	ldr	r3, [r3, #4]
 8012e6a:	4a64      	ldr	r2, [pc, #400]	; (8012ffc <tcp_input+0x298>)
 8012e6c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	8a3a      	ldrh	r2, [r7, #16]
 8012e74:	4611      	mov	r1, r2
 8012e76:	4618      	mov	r0, r3
 8012e78:	f7fd fc5a 	bl	8010730 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	891a      	ldrh	r2, [r3, #8]
 8012e80:	8a3b      	ldrh	r3, [r7, #16]
 8012e82:	1ad3      	subs	r3, r2, r3
 8012e84:	b29a      	uxth	r2, r3
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	895b      	ldrh	r3, [r3, #10]
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d005      	beq.n	8012e9e <tcp_input+0x13a>
 8012e92:	4b54      	ldr	r3, [pc, #336]	; (8012fe4 <tcp_input+0x280>)
 8012e94:	22df      	movs	r2, #223	; 0xdf
 8012e96:	495c      	ldr	r1, [pc, #368]	; (8013008 <tcp_input+0x2a4>)
 8012e98:	4854      	ldr	r0, [pc, #336]	; (8012fec <tcp_input+0x288>)
 8012e9a:	f010 fea1 	bl	8023be0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	891a      	ldrh	r2, [r3, #8]
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	891b      	ldrh	r3, [r3, #8]
 8012ea8:	429a      	cmp	r2, r3
 8012eaa:	d005      	beq.n	8012eb8 <tcp_input+0x154>
 8012eac:	4b4d      	ldr	r3, [pc, #308]	; (8012fe4 <tcp_input+0x280>)
 8012eae:	22e0      	movs	r2, #224	; 0xe0
 8012eb0:	4956      	ldr	r1, [pc, #344]	; (801300c <tcp_input+0x2a8>)
 8012eb2:	484e      	ldr	r0, [pc, #312]	; (8012fec <tcp_input+0x288>)
 8012eb4:	f010 fe94 	bl	8023be0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8012eb8:	4b4d      	ldr	r3, [pc, #308]	; (8012ff0 <tcp_input+0x28c>)
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	881b      	ldrh	r3, [r3, #0]
 8012ebe:	b29b      	uxth	r3, r3
 8012ec0:	4a4b      	ldr	r2, [pc, #300]	; (8012ff0 <tcp_input+0x28c>)
 8012ec2:	6814      	ldr	r4, [r2, #0]
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	f7fb f895 	bl	800dff4 <lwip_htons>
 8012eca:	4603      	mov	r3, r0
 8012ecc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8012ece:	4b48      	ldr	r3, [pc, #288]	; (8012ff0 <tcp_input+0x28c>)
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	885b      	ldrh	r3, [r3, #2]
 8012ed4:	b29b      	uxth	r3, r3
 8012ed6:	4a46      	ldr	r2, [pc, #280]	; (8012ff0 <tcp_input+0x28c>)
 8012ed8:	6814      	ldr	r4, [r2, #0]
 8012eda:	4618      	mov	r0, r3
 8012edc:	f7fb f88a 	bl	800dff4 <lwip_htons>
 8012ee0:	4603      	mov	r3, r0
 8012ee2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8012ee4:	4b42      	ldr	r3, [pc, #264]	; (8012ff0 <tcp_input+0x28c>)
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	685b      	ldr	r3, [r3, #4]
 8012eea:	4a41      	ldr	r2, [pc, #260]	; (8012ff0 <tcp_input+0x28c>)
 8012eec:	6814      	ldr	r4, [r2, #0]
 8012eee:	4618      	mov	r0, r3
 8012ef0:	f7fb f895 	bl	800e01e <lwip_htonl>
 8012ef4:	4603      	mov	r3, r0
 8012ef6:	6063      	str	r3, [r4, #4]
 8012ef8:	6863      	ldr	r3, [r4, #4]
 8012efa:	4a45      	ldr	r2, [pc, #276]	; (8013010 <tcp_input+0x2ac>)
 8012efc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8012efe:	4b3c      	ldr	r3, [pc, #240]	; (8012ff0 <tcp_input+0x28c>)
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	689b      	ldr	r3, [r3, #8]
 8012f04:	4a3a      	ldr	r2, [pc, #232]	; (8012ff0 <tcp_input+0x28c>)
 8012f06:	6814      	ldr	r4, [r2, #0]
 8012f08:	4618      	mov	r0, r3
 8012f0a:	f7fb f888 	bl	800e01e <lwip_htonl>
 8012f0e:	4603      	mov	r3, r0
 8012f10:	60a3      	str	r3, [r4, #8]
 8012f12:	68a3      	ldr	r3, [r4, #8]
 8012f14:	4a3f      	ldr	r2, [pc, #252]	; (8013014 <tcp_input+0x2b0>)
 8012f16:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8012f18:	4b35      	ldr	r3, [pc, #212]	; (8012ff0 <tcp_input+0x28c>)
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	89db      	ldrh	r3, [r3, #14]
 8012f1e:	b29b      	uxth	r3, r3
 8012f20:	4a33      	ldr	r2, [pc, #204]	; (8012ff0 <tcp_input+0x28c>)
 8012f22:	6814      	ldr	r4, [r2, #0]
 8012f24:	4618      	mov	r0, r3
 8012f26:	f7fb f865 	bl	800dff4 <lwip_htons>
 8012f2a:	4603      	mov	r3, r0
 8012f2c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8012f2e:	4b30      	ldr	r3, [pc, #192]	; (8012ff0 <tcp_input+0x28c>)
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	899b      	ldrh	r3, [r3, #12]
 8012f34:	b29b      	uxth	r3, r3
 8012f36:	4618      	mov	r0, r3
 8012f38:	f7fb f85c 	bl	800dff4 <lwip_htons>
 8012f3c:	4603      	mov	r3, r0
 8012f3e:	b2db      	uxtb	r3, r3
 8012f40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012f44:	b2da      	uxtb	r2, r3
 8012f46:	4b34      	ldr	r3, [pc, #208]	; (8013018 <tcp_input+0x2b4>)
 8012f48:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	891a      	ldrh	r2, [r3, #8]
 8012f4e:	4b33      	ldr	r3, [pc, #204]	; (801301c <tcp_input+0x2b8>)
 8012f50:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8012f52:	4b31      	ldr	r3, [pc, #196]	; (8013018 <tcp_input+0x2b4>)
 8012f54:	781b      	ldrb	r3, [r3, #0]
 8012f56:	f003 0303 	and.w	r3, r3, #3
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d00c      	beq.n	8012f78 <tcp_input+0x214>
    tcplen++;
 8012f5e:	4b2f      	ldr	r3, [pc, #188]	; (801301c <tcp_input+0x2b8>)
 8012f60:	881b      	ldrh	r3, [r3, #0]
 8012f62:	3301      	adds	r3, #1
 8012f64:	b29a      	uxth	r2, r3
 8012f66:	4b2d      	ldr	r3, [pc, #180]	; (801301c <tcp_input+0x2b8>)
 8012f68:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	891a      	ldrh	r2, [r3, #8]
 8012f6e:	4b2b      	ldr	r3, [pc, #172]	; (801301c <tcp_input+0x2b8>)
 8012f70:	881b      	ldrh	r3, [r3, #0]
 8012f72:	429a      	cmp	r2, r3
 8012f74:	f200 82e6 	bhi.w	8013544 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8012f78:	2300      	movs	r3, #0
 8012f7a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012f7c:	4b28      	ldr	r3, [pc, #160]	; (8013020 <tcp_input+0x2bc>)
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	61fb      	str	r3, [r7, #28]
 8012f82:	e09d      	b.n	80130c0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8012f84:	69fb      	ldr	r3, [r7, #28]
 8012f86:	7d1b      	ldrb	r3, [r3, #20]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d105      	bne.n	8012f98 <tcp_input+0x234>
 8012f8c:	4b15      	ldr	r3, [pc, #84]	; (8012fe4 <tcp_input+0x280>)
 8012f8e:	22fb      	movs	r2, #251	; 0xfb
 8012f90:	4924      	ldr	r1, [pc, #144]	; (8013024 <tcp_input+0x2c0>)
 8012f92:	4816      	ldr	r0, [pc, #88]	; (8012fec <tcp_input+0x288>)
 8012f94:	f010 fe24 	bl	8023be0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012f98:	69fb      	ldr	r3, [r7, #28]
 8012f9a:	7d1b      	ldrb	r3, [r3, #20]
 8012f9c:	2b0a      	cmp	r3, #10
 8012f9e:	d105      	bne.n	8012fac <tcp_input+0x248>
 8012fa0:	4b10      	ldr	r3, [pc, #64]	; (8012fe4 <tcp_input+0x280>)
 8012fa2:	22fc      	movs	r2, #252	; 0xfc
 8012fa4:	4920      	ldr	r1, [pc, #128]	; (8013028 <tcp_input+0x2c4>)
 8012fa6:	4811      	ldr	r0, [pc, #68]	; (8012fec <tcp_input+0x288>)
 8012fa8:	f010 fe1a 	bl	8023be0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012fac:	69fb      	ldr	r3, [r7, #28]
 8012fae:	7d1b      	ldrb	r3, [r3, #20]
 8012fb0:	2b01      	cmp	r3, #1
 8012fb2:	d105      	bne.n	8012fc0 <tcp_input+0x25c>
 8012fb4:	4b0b      	ldr	r3, [pc, #44]	; (8012fe4 <tcp_input+0x280>)
 8012fb6:	22fd      	movs	r2, #253	; 0xfd
 8012fb8:	491c      	ldr	r1, [pc, #112]	; (801302c <tcp_input+0x2c8>)
 8012fba:	480c      	ldr	r0, [pc, #48]	; (8012fec <tcp_input+0x288>)
 8012fbc:	f010 fe10 	bl	8023be0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012fc0:	69fb      	ldr	r3, [r7, #28]
 8012fc2:	7a1b      	ldrb	r3, [r3, #8]
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d033      	beq.n	8013030 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012fc8:	69fb      	ldr	r3, [r7, #28]
 8012fca:	7a1a      	ldrb	r2, [r3, #8]
 8012fcc:	4b09      	ldr	r3, [pc, #36]	; (8012ff4 <tcp_input+0x290>)
 8012fce:	685b      	ldr	r3, [r3, #4]
 8012fd0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012fd4:	3301      	adds	r3, #1
 8012fd6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012fd8:	429a      	cmp	r2, r3
 8012fda:	d029      	beq.n	8013030 <tcp_input+0x2cc>
      prev = pcb;
 8012fdc:	69fb      	ldr	r3, [r7, #28]
 8012fde:	61bb      	str	r3, [r7, #24]
      continue;
 8012fe0:	e06b      	b.n	80130ba <tcp_input+0x356>
 8012fe2:	bf00      	nop
 8012fe4:	08027600 	.word	0x08027600
 8012fe8:	08027634 	.word	0x08027634
 8012fec:	0802764c 	.word	0x0802764c
 8012ff0:	2000fc64 	.word	0x2000fc64
 8012ff4:	2000c2e4 	.word	0x2000c2e4
 8012ff8:	2000fc68 	.word	0x2000fc68
 8012ffc:	2000fc6c 	.word	0x2000fc6c
 8013000:	2000fc6a 	.word	0x2000fc6a
 8013004:	08027674 	.word	0x08027674
 8013008:	08027684 	.word	0x08027684
 801300c:	08027690 	.word	0x08027690
 8013010:	2000fc74 	.word	0x2000fc74
 8013014:	2000fc78 	.word	0x2000fc78
 8013018:	2000fc80 	.word	0x2000fc80
 801301c:	2000fc7e 	.word	0x2000fc7e
 8013020:	2000fc48 	.word	0x2000fc48
 8013024:	080276b0 	.word	0x080276b0
 8013028:	080276d8 	.word	0x080276d8
 801302c:	08027704 	.word	0x08027704
    }

    if (pcb->remote_port == tcphdr->src &&
 8013030:	69fb      	ldr	r3, [r7, #28]
 8013032:	8b1a      	ldrh	r2, [r3, #24]
 8013034:	4b72      	ldr	r3, [pc, #456]	; (8013200 <tcp_input+0x49c>)
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	881b      	ldrh	r3, [r3, #0]
 801303a:	b29b      	uxth	r3, r3
 801303c:	429a      	cmp	r2, r3
 801303e:	d13a      	bne.n	80130b6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8013040:	69fb      	ldr	r3, [r7, #28]
 8013042:	8ada      	ldrh	r2, [r3, #22]
 8013044:	4b6e      	ldr	r3, [pc, #440]	; (8013200 <tcp_input+0x49c>)
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	885b      	ldrh	r3, [r3, #2]
 801304a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801304c:	429a      	cmp	r2, r3
 801304e:	d132      	bne.n	80130b6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013050:	69fb      	ldr	r3, [r7, #28]
 8013052:	685a      	ldr	r2, [r3, #4]
 8013054:	4b6b      	ldr	r3, [pc, #428]	; (8013204 <tcp_input+0x4a0>)
 8013056:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8013058:	429a      	cmp	r2, r3
 801305a:	d12c      	bne.n	80130b6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801305c:	69fb      	ldr	r3, [r7, #28]
 801305e:	681a      	ldr	r2, [r3, #0]
 8013060:	4b68      	ldr	r3, [pc, #416]	; (8013204 <tcp_input+0x4a0>)
 8013062:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013064:	429a      	cmp	r2, r3
 8013066:	d126      	bne.n	80130b6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8013068:	69fb      	ldr	r3, [r7, #28]
 801306a:	68db      	ldr	r3, [r3, #12]
 801306c:	69fa      	ldr	r2, [r7, #28]
 801306e:	429a      	cmp	r2, r3
 8013070:	d106      	bne.n	8013080 <tcp_input+0x31c>
 8013072:	4b65      	ldr	r3, [pc, #404]	; (8013208 <tcp_input+0x4a4>)
 8013074:	f240 120d 	movw	r2, #269	; 0x10d
 8013078:	4964      	ldr	r1, [pc, #400]	; (801320c <tcp_input+0x4a8>)
 801307a:	4865      	ldr	r0, [pc, #404]	; (8013210 <tcp_input+0x4ac>)
 801307c:	f010 fdb0 	bl	8023be0 <iprintf>
      if (prev != NULL) {
 8013080:	69bb      	ldr	r3, [r7, #24]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d00a      	beq.n	801309c <tcp_input+0x338>
        prev->next = pcb->next;
 8013086:	69fb      	ldr	r3, [r7, #28]
 8013088:	68da      	ldr	r2, [r3, #12]
 801308a:	69bb      	ldr	r3, [r7, #24]
 801308c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801308e:	4b61      	ldr	r3, [pc, #388]	; (8013214 <tcp_input+0x4b0>)
 8013090:	681a      	ldr	r2, [r3, #0]
 8013092:	69fb      	ldr	r3, [r7, #28]
 8013094:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8013096:	4a5f      	ldr	r2, [pc, #380]	; (8013214 <tcp_input+0x4b0>)
 8013098:	69fb      	ldr	r3, [r7, #28]
 801309a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801309c:	69fb      	ldr	r3, [r7, #28]
 801309e:	68db      	ldr	r3, [r3, #12]
 80130a0:	69fa      	ldr	r2, [r7, #28]
 80130a2:	429a      	cmp	r2, r3
 80130a4:	d111      	bne.n	80130ca <tcp_input+0x366>
 80130a6:	4b58      	ldr	r3, [pc, #352]	; (8013208 <tcp_input+0x4a4>)
 80130a8:	f240 1215 	movw	r2, #277	; 0x115
 80130ac:	495a      	ldr	r1, [pc, #360]	; (8013218 <tcp_input+0x4b4>)
 80130ae:	4858      	ldr	r0, [pc, #352]	; (8013210 <tcp_input+0x4ac>)
 80130b0:	f010 fd96 	bl	8023be0 <iprintf>
      break;
 80130b4:	e009      	b.n	80130ca <tcp_input+0x366>
    }
    prev = pcb;
 80130b6:	69fb      	ldr	r3, [r7, #28]
 80130b8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80130ba:	69fb      	ldr	r3, [r7, #28]
 80130bc:	68db      	ldr	r3, [r3, #12]
 80130be:	61fb      	str	r3, [r7, #28]
 80130c0:	69fb      	ldr	r3, [r7, #28]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	f47f af5e 	bne.w	8012f84 <tcp_input+0x220>
 80130c8:	e000      	b.n	80130cc <tcp_input+0x368>
      break;
 80130ca:	bf00      	nop
  }

  if (pcb == NULL) {
 80130cc:	69fb      	ldr	r3, [r7, #28]
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	f040 80aa 	bne.w	8013228 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80130d4:	4b51      	ldr	r3, [pc, #324]	; (801321c <tcp_input+0x4b8>)
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	61fb      	str	r3, [r7, #28]
 80130da:	e03f      	b.n	801315c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80130dc:	69fb      	ldr	r3, [r7, #28]
 80130de:	7d1b      	ldrb	r3, [r3, #20]
 80130e0:	2b0a      	cmp	r3, #10
 80130e2:	d006      	beq.n	80130f2 <tcp_input+0x38e>
 80130e4:	4b48      	ldr	r3, [pc, #288]	; (8013208 <tcp_input+0x4a4>)
 80130e6:	f240 121f 	movw	r2, #287	; 0x11f
 80130ea:	494d      	ldr	r1, [pc, #308]	; (8013220 <tcp_input+0x4bc>)
 80130ec:	4848      	ldr	r0, [pc, #288]	; (8013210 <tcp_input+0x4ac>)
 80130ee:	f010 fd77 	bl	8023be0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80130f2:	69fb      	ldr	r3, [r7, #28]
 80130f4:	7a1b      	ldrb	r3, [r3, #8]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d009      	beq.n	801310e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80130fa:	69fb      	ldr	r3, [r7, #28]
 80130fc:	7a1a      	ldrb	r2, [r3, #8]
 80130fe:	4b41      	ldr	r3, [pc, #260]	; (8013204 <tcp_input+0x4a0>)
 8013100:	685b      	ldr	r3, [r3, #4]
 8013102:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013106:	3301      	adds	r3, #1
 8013108:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801310a:	429a      	cmp	r2, r3
 801310c:	d122      	bne.n	8013154 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801310e:	69fb      	ldr	r3, [r7, #28]
 8013110:	8b1a      	ldrh	r2, [r3, #24]
 8013112:	4b3b      	ldr	r3, [pc, #236]	; (8013200 <tcp_input+0x49c>)
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	881b      	ldrh	r3, [r3, #0]
 8013118:	b29b      	uxth	r3, r3
 801311a:	429a      	cmp	r2, r3
 801311c:	d11b      	bne.n	8013156 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801311e:	69fb      	ldr	r3, [r7, #28]
 8013120:	8ada      	ldrh	r2, [r3, #22]
 8013122:	4b37      	ldr	r3, [pc, #220]	; (8013200 <tcp_input+0x49c>)
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	885b      	ldrh	r3, [r3, #2]
 8013128:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801312a:	429a      	cmp	r2, r3
 801312c:	d113      	bne.n	8013156 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801312e:	69fb      	ldr	r3, [r7, #28]
 8013130:	685a      	ldr	r2, [r3, #4]
 8013132:	4b34      	ldr	r3, [pc, #208]	; (8013204 <tcp_input+0x4a0>)
 8013134:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8013136:	429a      	cmp	r2, r3
 8013138:	d10d      	bne.n	8013156 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801313a:	69fb      	ldr	r3, [r7, #28]
 801313c:	681a      	ldr	r2, [r3, #0]
 801313e:	4b31      	ldr	r3, [pc, #196]	; (8013204 <tcp_input+0x4a0>)
 8013140:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013142:	429a      	cmp	r2, r3
 8013144:	d107      	bne.n	8013156 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8013146:	69f8      	ldr	r0, [r7, #28]
 8013148:	f000 fb56 	bl	80137f8 <tcp_timewait_input>
        }
        pbuf_free(p);
 801314c:	6878      	ldr	r0, [r7, #4]
 801314e:	f7fd fba7 	bl	80108a0 <pbuf_free>
        return;
 8013152:	e1fd      	b.n	8013550 <tcp_input+0x7ec>
        continue;
 8013154:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013156:	69fb      	ldr	r3, [r7, #28]
 8013158:	68db      	ldr	r3, [r3, #12]
 801315a:	61fb      	str	r3, [r7, #28]
 801315c:	69fb      	ldr	r3, [r7, #28]
 801315e:	2b00      	cmp	r3, #0
 8013160:	d1bc      	bne.n	80130dc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8013162:	2300      	movs	r3, #0
 8013164:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013166:	4b2f      	ldr	r3, [pc, #188]	; (8013224 <tcp_input+0x4c0>)
 8013168:	681b      	ldr	r3, [r3, #0]
 801316a:	617b      	str	r3, [r7, #20]
 801316c:	e02a      	b.n	80131c4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801316e:	697b      	ldr	r3, [r7, #20]
 8013170:	7a1b      	ldrb	r3, [r3, #8]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d00c      	beq.n	8013190 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013176:	697b      	ldr	r3, [r7, #20]
 8013178:	7a1a      	ldrb	r2, [r3, #8]
 801317a:	4b22      	ldr	r3, [pc, #136]	; (8013204 <tcp_input+0x4a0>)
 801317c:	685b      	ldr	r3, [r3, #4]
 801317e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013182:	3301      	adds	r3, #1
 8013184:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013186:	429a      	cmp	r2, r3
 8013188:	d002      	beq.n	8013190 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801318a:	697b      	ldr	r3, [r7, #20]
 801318c:	61bb      	str	r3, [r7, #24]
        continue;
 801318e:	e016      	b.n	80131be <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8013190:	697b      	ldr	r3, [r7, #20]
 8013192:	8ada      	ldrh	r2, [r3, #22]
 8013194:	4b1a      	ldr	r3, [pc, #104]	; (8013200 <tcp_input+0x49c>)
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	885b      	ldrh	r3, [r3, #2]
 801319a:	b29b      	uxth	r3, r3
 801319c:	429a      	cmp	r2, r3
 801319e:	d10c      	bne.n	80131ba <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80131a0:	697b      	ldr	r3, [r7, #20]
 80131a2:	681a      	ldr	r2, [r3, #0]
 80131a4:	4b17      	ldr	r3, [pc, #92]	; (8013204 <tcp_input+0x4a0>)
 80131a6:	695b      	ldr	r3, [r3, #20]
 80131a8:	429a      	cmp	r2, r3
 80131aa:	d00f      	beq.n	80131cc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80131ac:	697b      	ldr	r3, [r7, #20]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d00d      	beq.n	80131ce <tcp_input+0x46a>
 80131b2:	697b      	ldr	r3, [r7, #20]
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d009      	beq.n	80131ce <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80131ba:	697b      	ldr	r3, [r7, #20]
 80131bc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80131be:	697b      	ldr	r3, [r7, #20]
 80131c0:	68db      	ldr	r3, [r3, #12]
 80131c2:	617b      	str	r3, [r7, #20]
 80131c4:	697b      	ldr	r3, [r7, #20]
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d1d1      	bne.n	801316e <tcp_input+0x40a>
 80131ca:	e000      	b.n	80131ce <tcp_input+0x46a>
            break;
 80131cc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80131ce:	697b      	ldr	r3, [r7, #20]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d029      	beq.n	8013228 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80131d4:	69bb      	ldr	r3, [r7, #24]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d00a      	beq.n	80131f0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80131da:	697b      	ldr	r3, [r7, #20]
 80131dc:	68da      	ldr	r2, [r3, #12]
 80131de:	69bb      	ldr	r3, [r7, #24]
 80131e0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80131e2:	4b10      	ldr	r3, [pc, #64]	; (8013224 <tcp_input+0x4c0>)
 80131e4:	681a      	ldr	r2, [r3, #0]
 80131e6:	697b      	ldr	r3, [r7, #20]
 80131e8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80131ea:	4a0e      	ldr	r2, [pc, #56]	; (8013224 <tcp_input+0x4c0>)
 80131ec:	697b      	ldr	r3, [r7, #20]
 80131ee:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80131f0:	6978      	ldr	r0, [r7, #20]
 80131f2:	f000 fa03 	bl	80135fc <tcp_listen_input>
      }
      pbuf_free(p);
 80131f6:	6878      	ldr	r0, [r7, #4]
 80131f8:	f7fd fb52 	bl	80108a0 <pbuf_free>
      return;
 80131fc:	e1a8      	b.n	8013550 <tcp_input+0x7ec>
 80131fe:	bf00      	nop
 8013200:	2000fc64 	.word	0x2000fc64
 8013204:	2000c2e4 	.word	0x2000c2e4
 8013208:	08027600 	.word	0x08027600
 801320c:	0802772c 	.word	0x0802772c
 8013210:	0802764c 	.word	0x0802764c
 8013214:	2000fc48 	.word	0x2000fc48
 8013218:	08027758 	.word	0x08027758
 801321c:	2000fc4c 	.word	0x2000fc4c
 8013220:	08027784 	.word	0x08027784
 8013224:	2000fc44 	.word	0x2000fc44
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8013228:	69fb      	ldr	r3, [r7, #28]
 801322a:	2b00      	cmp	r3, #0
 801322c:	f000 8158 	beq.w	80134e0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8013230:	4b95      	ldr	r3, [pc, #596]	; (8013488 <tcp_input+0x724>)
 8013232:	2200      	movs	r2, #0
 8013234:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	891a      	ldrh	r2, [r3, #8]
 801323a:	4b93      	ldr	r3, [pc, #588]	; (8013488 <tcp_input+0x724>)
 801323c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801323e:	4a92      	ldr	r2, [pc, #584]	; (8013488 <tcp_input+0x724>)
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8013244:	4b91      	ldr	r3, [pc, #580]	; (801348c <tcp_input+0x728>)
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	4a8f      	ldr	r2, [pc, #572]	; (8013488 <tcp_input+0x724>)
 801324a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801324c:	4b90      	ldr	r3, [pc, #576]	; (8013490 <tcp_input+0x72c>)
 801324e:	2200      	movs	r2, #0
 8013250:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8013252:	4b90      	ldr	r3, [pc, #576]	; (8013494 <tcp_input+0x730>)
 8013254:	2200      	movs	r2, #0
 8013256:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8013258:	4b8f      	ldr	r3, [pc, #572]	; (8013498 <tcp_input+0x734>)
 801325a:	2200      	movs	r2, #0
 801325c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801325e:	4b8f      	ldr	r3, [pc, #572]	; (801349c <tcp_input+0x738>)
 8013260:	781b      	ldrb	r3, [r3, #0]
 8013262:	f003 0308 	and.w	r3, r3, #8
 8013266:	2b00      	cmp	r3, #0
 8013268:	d006      	beq.n	8013278 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	7b5b      	ldrb	r3, [r3, #13]
 801326e:	f043 0301 	orr.w	r3, r3, #1
 8013272:	b2da      	uxtb	r2, r3
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8013278:	69fb      	ldr	r3, [r7, #28]
 801327a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801327c:	2b00      	cmp	r3, #0
 801327e:	d017      	beq.n	80132b0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013280:	69f8      	ldr	r0, [r7, #28]
 8013282:	f7ff f85b 	bl	801233c <tcp_process_refused_data>
 8013286:	4603      	mov	r3, r0
 8013288:	f113 0f0d 	cmn.w	r3, #13
 801328c:	d007      	beq.n	801329e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801328e:	69fb      	ldr	r3, [r7, #28]
 8013290:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013292:	2b00      	cmp	r3, #0
 8013294:	d00c      	beq.n	80132b0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013296:	4b82      	ldr	r3, [pc, #520]	; (80134a0 <tcp_input+0x73c>)
 8013298:	881b      	ldrh	r3, [r3, #0]
 801329a:	2b00      	cmp	r3, #0
 801329c:	d008      	beq.n	80132b0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801329e:	69fb      	ldr	r3, [r7, #28]
 80132a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	f040 80e3 	bne.w	801346e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80132a8:	69f8      	ldr	r0, [r7, #28]
 80132aa:	f003 fe05 	bl	8016eb8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80132ae:	e0de      	b.n	801346e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80132b0:	4a7c      	ldr	r2, [pc, #496]	; (80134a4 <tcp_input+0x740>)
 80132b2:	69fb      	ldr	r3, [r7, #28]
 80132b4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80132b6:	69f8      	ldr	r0, [r7, #28]
 80132b8:	f000 fb18 	bl	80138ec <tcp_process>
 80132bc:	4603      	mov	r3, r0
 80132be:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80132c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80132c4:	f113 0f0d 	cmn.w	r3, #13
 80132c8:	f000 80d3 	beq.w	8013472 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80132cc:	4b71      	ldr	r3, [pc, #452]	; (8013494 <tcp_input+0x730>)
 80132ce:	781b      	ldrb	r3, [r3, #0]
 80132d0:	f003 0308 	and.w	r3, r3, #8
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d015      	beq.n	8013304 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80132d8:	69fb      	ldr	r3, [r7, #28]
 80132da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d008      	beq.n	80132f4 <tcp_input+0x590>
 80132e2:	69fb      	ldr	r3, [r7, #28]
 80132e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80132e8:	69fa      	ldr	r2, [r7, #28]
 80132ea:	6912      	ldr	r2, [r2, #16]
 80132ec:	f06f 010d 	mvn.w	r1, #13
 80132f0:	4610      	mov	r0, r2
 80132f2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80132f4:	69f9      	ldr	r1, [r7, #28]
 80132f6:	486c      	ldr	r0, [pc, #432]	; (80134a8 <tcp_input+0x744>)
 80132f8:	f7ff fbbc 	bl	8012a74 <tcp_pcb_remove>
        tcp_free(pcb);
 80132fc:	69f8      	ldr	r0, [r7, #28]
 80132fe:	f7fd ff07 	bl	8011110 <tcp_free>
 8013302:	e0da      	b.n	80134ba <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8013304:	2300      	movs	r3, #0
 8013306:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8013308:	4b63      	ldr	r3, [pc, #396]	; (8013498 <tcp_input+0x734>)
 801330a:	881b      	ldrh	r3, [r3, #0]
 801330c:	2b00      	cmp	r3, #0
 801330e:	d01d      	beq.n	801334c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8013310:	4b61      	ldr	r3, [pc, #388]	; (8013498 <tcp_input+0x734>)
 8013312:	881b      	ldrh	r3, [r3, #0]
 8013314:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8013316:	69fb      	ldr	r3, [r7, #28]
 8013318:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801331c:	2b00      	cmp	r3, #0
 801331e:	d00a      	beq.n	8013336 <tcp_input+0x5d2>
 8013320:	69fb      	ldr	r3, [r7, #28]
 8013322:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013326:	69fa      	ldr	r2, [r7, #28]
 8013328:	6910      	ldr	r0, [r2, #16]
 801332a:	89fa      	ldrh	r2, [r7, #14]
 801332c:	69f9      	ldr	r1, [r7, #28]
 801332e:	4798      	blx	r3
 8013330:	4603      	mov	r3, r0
 8013332:	74fb      	strb	r3, [r7, #19]
 8013334:	e001      	b.n	801333a <tcp_input+0x5d6>
 8013336:	2300      	movs	r3, #0
 8013338:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801333a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801333e:	f113 0f0d 	cmn.w	r3, #13
 8013342:	f000 8098 	beq.w	8013476 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8013346:	4b54      	ldr	r3, [pc, #336]	; (8013498 <tcp_input+0x734>)
 8013348:	2200      	movs	r2, #0
 801334a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801334c:	69f8      	ldr	r0, [r7, #28]
 801334e:	f000 f915 	bl	801357c <tcp_input_delayed_close>
 8013352:	4603      	mov	r3, r0
 8013354:	2b00      	cmp	r3, #0
 8013356:	f040 8090 	bne.w	801347a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801335a:	4b4d      	ldr	r3, [pc, #308]	; (8013490 <tcp_input+0x72c>)
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	2b00      	cmp	r3, #0
 8013360:	d041      	beq.n	80133e6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8013362:	69fb      	ldr	r3, [r7, #28]
 8013364:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013366:	2b00      	cmp	r3, #0
 8013368:	d006      	beq.n	8013378 <tcp_input+0x614>
 801336a:	4b50      	ldr	r3, [pc, #320]	; (80134ac <tcp_input+0x748>)
 801336c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013370:	494f      	ldr	r1, [pc, #316]	; (80134b0 <tcp_input+0x74c>)
 8013372:	4850      	ldr	r0, [pc, #320]	; (80134b4 <tcp_input+0x750>)
 8013374:	f010 fc34 	bl	8023be0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8013378:	69fb      	ldr	r3, [r7, #28]
 801337a:	8b5b      	ldrh	r3, [r3, #26]
 801337c:	f003 0310 	and.w	r3, r3, #16
 8013380:	2b00      	cmp	r3, #0
 8013382:	d008      	beq.n	8013396 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8013384:	4b42      	ldr	r3, [pc, #264]	; (8013490 <tcp_input+0x72c>)
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	4618      	mov	r0, r3
 801338a:	f7fd fa89 	bl	80108a0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801338e:	69f8      	ldr	r0, [r7, #28]
 8013390:	f7fe fa02 	bl	8011798 <tcp_abort>
            goto aborted;
 8013394:	e091      	b.n	80134ba <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8013396:	69fb      	ldr	r3, [r7, #28]
 8013398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801339c:	2b00      	cmp	r3, #0
 801339e:	d00c      	beq.n	80133ba <tcp_input+0x656>
 80133a0:	69fb      	ldr	r3, [r7, #28]
 80133a2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80133a6:	69fb      	ldr	r3, [r7, #28]
 80133a8:	6918      	ldr	r0, [r3, #16]
 80133aa:	4b39      	ldr	r3, [pc, #228]	; (8013490 <tcp_input+0x72c>)
 80133ac:	681a      	ldr	r2, [r3, #0]
 80133ae:	2300      	movs	r3, #0
 80133b0:	69f9      	ldr	r1, [r7, #28]
 80133b2:	47a0      	blx	r4
 80133b4:	4603      	mov	r3, r0
 80133b6:	74fb      	strb	r3, [r7, #19]
 80133b8:	e008      	b.n	80133cc <tcp_input+0x668>
 80133ba:	4b35      	ldr	r3, [pc, #212]	; (8013490 <tcp_input+0x72c>)
 80133bc:	681a      	ldr	r2, [r3, #0]
 80133be:	2300      	movs	r3, #0
 80133c0:	69f9      	ldr	r1, [r7, #28]
 80133c2:	2000      	movs	r0, #0
 80133c4:	f7ff f890 	bl	80124e8 <tcp_recv_null>
 80133c8:	4603      	mov	r3, r0
 80133ca:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80133cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80133d0:	f113 0f0d 	cmn.w	r3, #13
 80133d4:	d053      	beq.n	801347e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80133d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d003      	beq.n	80133e6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80133de:	4b2c      	ldr	r3, [pc, #176]	; (8013490 <tcp_input+0x72c>)
 80133e0:	681a      	ldr	r2, [r3, #0]
 80133e2:	69fb      	ldr	r3, [r7, #28]
 80133e4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80133e6:	4b2b      	ldr	r3, [pc, #172]	; (8013494 <tcp_input+0x730>)
 80133e8:	781b      	ldrb	r3, [r3, #0]
 80133ea:	f003 0320 	and.w	r3, r3, #32
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d030      	beq.n	8013454 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80133f2:	69fb      	ldr	r3, [r7, #28]
 80133f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d009      	beq.n	801340e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80133fa:	69fb      	ldr	r3, [r7, #28]
 80133fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80133fe:	7b5a      	ldrb	r2, [r3, #13]
 8013400:	69fb      	ldr	r3, [r7, #28]
 8013402:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013404:	f042 0220 	orr.w	r2, r2, #32
 8013408:	b2d2      	uxtb	r2, r2
 801340a:	735a      	strb	r2, [r3, #13]
 801340c:	e022      	b.n	8013454 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801340e:	69fb      	ldr	r3, [r7, #28]
 8013410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013412:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8013416:	d005      	beq.n	8013424 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8013418:	69fb      	ldr	r3, [r7, #28]
 801341a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801341c:	3301      	adds	r3, #1
 801341e:	b29a      	uxth	r2, r3
 8013420:	69fb      	ldr	r3, [r7, #28]
 8013422:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8013424:	69fb      	ldr	r3, [r7, #28]
 8013426:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801342a:	2b00      	cmp	r3, #0
 801342c:	d00b      	beq.n	8013446 <tcp_input+0x6e2>
 801342e:	69fb      	ldr	r3, [r7, #28]
 8013430:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013434:	69fb      	ldr	r3, [r7, #28]
 8013436:	6918      	ldr	r0, [r3, #16]
 8013438:	2300      	movs	r3, #0
 801343a:	2200      	movs	r2, #0
 801343c:	69f9      	ldr	r1, [r7, #28]
 801343e:	47a0      	blx	r4
 8013440:	4603      	mov	r3, r0
 8013442:	74fb      	strb	r3, [r7, #19]
 8013444:	e001      	b.n	801344a <tcp_input+0x6e6>
 8013446:	2300      	movs	r3, #0
 8013448:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801344a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801344e:	f113 0f0d 	cmn.w	r3, #13
 8013452:	d016      	beq.n	8013482 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8013454:	4b13      	ldr	r3, [pc, #76]	; (80134a4 <tcp_input+0x740>)
 8013456:	2200      	movs	r2, #0
 8013458:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801345a:	69f8      	ldr	r0, [r7, #28]
 801345c:	f000 f88e 	bl	801357c <tcp_input_delayed_close>
 8013460:	4603      	mov	r3, r0
 8013462:	2b00      	cmp	r3, #0
 8013464:	d128      	bne.n	80134b8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8013466:	69f8      	ldr	r0, [r7, #28]
 8013468:	f002 ff20 	bl	80162ac <tcp_output>
 801346c:	e025      	b.n	80134ba <tcp_input+0x756>
        goto aborted;
 801346e:	bf00      	nop
 8013470:	e023      	b.n	80134ba <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8013472:	bf00      	nop
 8013474:	e021      	b.n	80134ba <tcp_input+0x756>
              goto aborted;
 8013476:	bf00      	nop
 8013478:	e01f      	b.n	80134ba <tcp_input+0x756>
          goto aborted;
 801347a:	bf00      	nop
 801347c:	e01d      	b.n	80134ba <tcp_input+0x756>
            goto aborted;
 801347e:	bf00      	nop
 8013480:	e01b      	b.n	80134ba <tcp_input+0x756>
              goto aborted;
 8013482:	bf00      	nop
 8013484:	e019      	b.n	80134ba <tcp_input+0x756>
 8013486:	bf00      	nop
 8013488:	2000fc54 	.word	0x2000fc54
 801348c:	2000fc64 	.word	0x2000fc64
 8013490:	2000fc84 	.word	0x2000fc84
 8013494:	2000fc81 	.word	0x2000fc81
 8013498:	2000fc7c 	.word	0x2000fc7c
 801349c:	2000fc80 	.word	0x2000fc80
 80134a0:	2000fc7e 	.word	0x2000fc7e
 80134a4:	2000fc88 	.word	0x2000fc88
 80134a8:	2000fc48 	.word	0x2000fc48
 80134ac:	08027600 	.word	0x08027600
 80134b0:	080277b4 	.word	0x080277b4
 80134b4:	0802764c 	.word	0x0802764c
          goto aborted;
 80134b8:	bf00      	nop
    tcp_input_pcb = NULL;
 80134ba:	4b27      	ldr	r3, [pc, #156]	; (8013558 <tcp_input+0x7f4>)
 80134bc:	2200      	movs	r2, #0
 80134be:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80134c0:	4b26      	ldr	r3, [pc, #152]	; (801355c <tcp_input+0x7f8>)
 80134c2:	2200      	movs	r2, #0
 80134c4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80134c6:	4b26      	ldr	r3, [pc, #152]	; (8013560 <tcp_input+0x7fc>)
 80134c8:	685b      	ldr	r3, [r3, #4]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d03f      	beq.n	801354e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80134ce:	4b24      	ldr	r3, [pc, #144]	; (8013560 <tcp_input+0x7fc>)
 80134d0:	685b      	ldr	r3, [r3, #4]
 80134d2:	4618      	mov	r0, r3
 80134d4:	f7fd f9e4 	bl	80108a0 <pbuf_free>
      inseg.p = NULL;
 80134d8:	4b21      	ldr	r3, [pc, #132]	; (8013560 <tcp_input+0x7fc>)
 80134da:	2200      	movs	r2, #0
 80134dc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80134de:	e036      	b.n	801354e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80134e0:	4b20      	ldr	r3, [pc, #128]	; (8013564 <tcp_input+0x800>)
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	899b      	ldrh	r3, [r3, #12]
 80134e6:	b29b      	uxth	r3, r3
 80134e8:	4618      	mov	r0, r3
 80134ea:	f7fa fd83 	bl	800dff4 <lwip_htons>
 80134ee:	4603      	mov	r3, r0
 80134f0:	b2db      	uxtb	r3, r3
 80134f2:	f003 0304 	and.w	r3, r3, #4
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d118      	bne.n	801352c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80134fa:	4b1b      	ldr	r3, [pc, #108]	; (8013568 <tcp_input+0x804>)
 80134fc:	6819      	ldr	r1, [r3, #0]
 80134fe:	4b1b      	ldr	r3, [pc, #108]	; (801356c <tcp_input+0x808>)
 8013500:	881b      	ldrh	r3, [r3, #0]
 8013502:	461a      	mov	r2, r3
 8013504:	4b1a      	ldr	r3, [pc, #104]	; (8013570 <tcp_input+0x80c>)
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801350a:	4b16      	ldr	r3, [pc, #88]	; (8013564 <tcp_input+0x800>)
 801350c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801350e:	885b      	ldrh	r3, [r3, #2]
 8013510:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013512:	4a14      	ldr	r2, [pc, #80]	; (8013564 <tcp_input+0x800>)
 8013514:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013516:	8812      	ldrh	r2, [r2, #0]
 8013518:	b292      	uxth	r2, r2
 801351a:	9202      	str	r2, [sp, #8]
 801351c:	9301      	str	r3, [sp, #4]
 801351e:	4b15      	ldr	r3, [pc, #84]	; (8013574 <tcp_input+0x810>)
 8013520:	9300      	str	r3, [sp, #0]
 8013522:	4b15      	ldr	r3, [pc, #84]	; (8013578 <tcp_input+0x814>)
 8013524:	4602      	mov	r2, r0
 8013526:	2000      	movs	r0, #0
 8013528:	f003 fc74 	bl	8016e14 <tcp_rst>
    pbuf_free(p);
 801352c:	6878      	ldr	r0, [r7, #4]
 801352e:	f7fd f9b7 	bl	80108a0 <pbuf_free>
  return;
 8013532:	e00c      	b.n	801354e <tcp_input+0x7ea>
    goto dropped;
 8013534:	bf00      	nop
 8013536:	e006      	b.n	8013546 <tcp_input+0x7e2>
    goto dropped;
 8013538:	bf00      	nop
 801353a:	e004      	b.n	8013546 <tcp_input+0x7e2>
    goto dropped;
 801353c:	bf00      	nop
 801353e:	e002      	b.n	8013546 <tcp_input+0x7e2>
      goto dropped;
 8013540:	bf00      	nop
 8013542:	e000      	b.n	8013546 <tcp_input+0x7e2>
      goto dropped;
 8013544:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8013546:	6878      	ldr	r0, [r7, #4]
 8013548:	f7fd f9aa 	bl	80108a0 <pbuf_free>
 801354c:	e000      	b.n	8013550 <tcp_input+0x7ec>
  return;
 801354e:	bf00      	nop
}
 8013550:	3724      	adds	r7, #36	; 0x24
 8013552:	46bd      	mov	sp, r7
 8013554:	bd90      	pop	{r4, r7, pc}
 8013556:	bf00      	nop
 8013558:	2000fc88 	.word	0x2000fc88
 801355c:	2000fc84 	.word	0x2000fc84
 8013560:	2000fc54 	.word	0x2000fc54
 8013564:	2000fc64 	.word	0x2000fc64
 8013568:	2000fc78 	.word	0x2000fc78
 801356c:	2000fc7e 	.word	0x2000fc7e
 8013570:	2000fc74 	.word	0x2000fc74
 8013574:	2000c2f4 	.word	0x2000c2f4
 8013578:	2000c2f8 	.word	0x2000c2f8

0801357c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801357c:	b580      	push	{r7, lr}
 801357e:	b082      	sub	sp, #8
 8013580:	af00      	add	r7, sp, #0
 8013582:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	2b00      	cmp	r3, #0
 8013588:	d106      	bne.n	8013598 <tcp_input_delayed_close+0x1c>
 801358a:	4b17      	ldr	r3, [pc, #92]	; (80135e8 <tcp_input_delayed_close+0x6c>)
 801358c:	f240 225a 	movw	r2, #602	; 0x25a
 8013590:	4916      	ldr	r1, [pc, #88]	; (80135ec <tcp_input_delayed_close+0x70>)
 8013592:	4817      	ldr	r0, [pc, #92]	; (80135f0 <tcp_input_delayed_close+0x74>)
 8013594:	f010 fb24 	bl	8023be0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8013598:	4b16      	ldr	r3, [pc, #88]	; (80135f4 <tcp_input_delayed_close+0x78>)
 801359a:	781b      	ldrb	r3, [r3, #0]
 801359c:	f003 0310 	and.w	r3, r3, #16
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d01c      	beq.n	80135de <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	8b5b      	ldrh	r3, [r3, #26]
 80135a8:	f003 0310 	and.w	r3, r3, #16
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d10d      	bne.n	80135cc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d008      	beq.n	80135cc <tcp_input_delayed_close+0x50>
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80135c0:	687a      	ldr	r2, [r7, #4]
 80135c2:	6912      	ldr	r2, [r2, #16]
 80135c4:	f06f 010e 	mvn.w	r1, #14
 80135c8:	4610      	mov	r0, r2
 80135ca:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80135cc:	6879      	ldr	r1, [r7, #4]
 80135ce:	480a      	ldr	r0, [pc, #40]	; (80135f8 <tcp_input_delayed_close+0x7c>)
 80135d0:	f7ff fa50 	bl	8012a74 <tcp_pcb_remove>
    tcp_free(pcb);
 80135d4:	6878      	ldr	r0, [r7, #4]
 80135d6:	f7fd fd9b 	bl	8011110 <tcp_free>
    return 1;
 80135da:	2301      	movs	r3, #1
 80135dc:	e000      	b.n	80135e0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80135de:	2300      	movs	r3, #0
}
 80135e0:	4618      	mov	r0, r3
 80135e2:	3708      	adds	r7, #8
 80135e4:	46bd      	mov	sp, r7
 80135e6:	bd80      	pop	{r7, pc}
 80135e8:	08027600 	.word	0x08027600
 80135ec:	080277d0 	.word	0x080277d0
 80135f0:	0802764c 	.word	0x0802764c
 80135f4:	2000fc81 	.word	0x2000fc81
 80135f8:	2000fc48 	.word	0x2000fc48

080135fc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80135fc:	b590      	push	{r4, r7, lr}
 80135fe:	b08b      	sub	sp, #44	; 0x2c
 8013600:	af04      	add	r7, sp, #16
 8013602:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8013604:	4b6f      	ldr	r3, [pc, #444]	; (80137c4 <tcp_listen_input+0x1c8>)
 8013606:	781b      	ldrb	r3, [r3, #0]
 8013608:	f003 0304 	and.w	r3, r3, #4
 801360c:	2b00      	cmp	r3, #0
 801360e:	f040 80d2 	bne.w	80137b6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	2b00      	cmp	r3, #0
 8013616:	d106      	bne.n	8013626 <tcp_listen_input+0x2a>
 8013618:	4b6b      	ldr	r3, [pc, #428]	; (80137c8 <tcp_listen_input+0x1cc>)
 801361a:	f240 2281 	movw	r2, #641	; 0x281
 801361e:	496b      	ldr	r1, [pc, #428]	; (80137cc <tcp_listen_input+0x1d0>)
 8013620:	486b      	ldr	r0, [pc, #428]	; (80137d0 <tcp_listen_input+0x1d4>)
 8013622:	f010 fadd 	bl	8023be0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8013626:	4b67      	ldr	r3, [pc, #412]	; (80137c4 <tcp_listen_input+0x1c8>)
 8013628:	781b      	ldrb	r3, [r3, #0]
 801362a:	f003 0310 	and.w	r3, r3, #16
 801362e:	2b00      	cmp	r3, #0
 8013630:	d019      	beq.n	8013666 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013632:	4b68      	ldr	r3, [pc, #416]	; (80137d4 <tcp_listen_input+0x1d8>)
 8013634:	6819      	ldr	r1, [r3, #0]
 8013636:	4b68      	ldr	r3, [pc, #416]	; (80137d8 <tcp_listen_input+0x1dc>)
 8013638:	881b      	ldrh	r3, [r3, #0]
 801363a:	461a      	mov	r2, r3
 801363c:	4b67      	ldr	r3, [pc, #412]	; (80137dc <tcp_listen_input+0x1e0>)
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013642:	4b67      	ldr	r3, [pc, #412]	; (80137e0 <tcp_listen_input+0x1e4>)
 8013644:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013646:	885b      	ldrh	r3, [r3, #2]
 8013648:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801364a:	4a65      	ldr	r2, [pc, #404]	; (80137e0 <tcp_listen_input+0x1e4>)
 801364c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801364e:	8812      	ldrh	r2, [r2, #0]
 8013650:	b292      	uxth	r2, r2
 8013652:	9202      	str	r2, [sp, #8]
 8013654:	9301      	str	r3, [sp, #4]
 8013656:	4b63      	ldr	r3, [pc, #396]	; (80137e4 <tcp_listen_input+0x1e8>)
 8013658:	9300      	str	r3, [sp, #0]
 801365a:	4b63      	ldr	r3, [pc, #396]	; (80137e8 <tcp_listen_input+0x1ec>)
 801365c:	4602      	mov	r2, r0
 801365e:	6878      	ldr	r0, [r7, #4]
 8013660:	f003 fbd8 	bl	8016e14 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8013664:	e0a9      	b.n	80137ba <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8013666:	4b57      	ldr	r3, [pc, #348]	; (80137c4 <tcp_listen_input+0x1c8>)
 8013668:	781b      	ldrb	r3, [r3, #0]
 801366a:	f003 0302 	and.w	r3, r3, #2
 801366e:	2b00      	cmp	r3, #0
 8013670:	f000 80a3 	beq.w	80137ba <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	7d5b      	ldrb	r3, [r3, #21]
 8013678:	4618      	mov	r0, r3
 801367a:	f7ff f859 	bl	8012730 <tcp_alloc>
 801367e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8013680:	697b      	ldr	r3, [r7, #20]
 8013682:	2b00      	cmp	r3, #0
 8013684:	d111      	bne.n	80136aa <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	699b      	ldr	r3, [r3, #24]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d00a      	beq.n	80136a4 <tcp_listen_input+0xa8>
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	699b      	ldr	r3, [r3, #24]
 8013692:	687a      	ldr	r2, [r7, #4]
 8013694:	6910      	ldr	r0, [r2, #16]
 8013696:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801369a:	2100      	movs	r1, #0
 801369c:	4798      	blx	r3
 801369e:	4603      	mov	r3, r0
 80136a0:	73bb      	strb	r3, [r7, #14]
      return;
 80136a2:	e08b      	b.n	80137bc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80136a4:	23f0      	movs	r3, #240	; 0xf0
 80136a6:	73bb      	strb	r3, [r7, #14]
      return;
 80136a8:	e088      	b.n	80137bc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80136aa:	4b50      	ldr	r3, [pc, #320]	; (80137ec <tcp_listen_input+0x1f0>)
 80136ac:	695a      	ldr	r2, [r3, #20]
 80136ae:	697b      	ldr	r3, [r7, #20]
 80136b0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80136b2:	4b4e      	ldr	r3, [pc, #312]	; (80137ec <tcp_listen_input+0x1f0>)
 80136b4:	691a      	ldr	r2, [r3, #16]
 80136b6:	697b      	ldr	r3, [r7, #20]
 80136b8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	8ada      	ldrh	r2, [r3, #22]
 80136be:	697b      	ldr	r3, [r7, #20]
 80136c0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80136c2:	4b47      	ldr	r3, [pc, #284]	; (80137e0 <tcp_listen_input+0x1e4>)
 80136c4:	681b      	ldr	r3, [r3, #0]
 80136c6:	881b      	ldrh	r3, [r3, #0]
 80136c8:	b29a      	uxth	r2, r3
 80136ca:	697b      	ldr	r3, [r7, #20]
 80136cc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80136ce:	697b      	ldr	r3, [r7, #20]
 80136d0:	2203      	movs	r2, #3
 80136d2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80136d4:	4b41      	ldr	r3, [pc, #260]	; (80137dc <tcp_listen_input+0x1e0>)
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	1c5a      	adds	r2, r3, #1
 80136da:	697b      	ldr	r3, [r7, #20]
 80136dc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80136de:	697b      	ldr	r3, [r7, #20]
 80136e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80136e2:	697b      	ldr	r3, [r7, #20]
 80136e4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80136e6:	6978      	ldr	r0, [r7, #20]
 80136e8:	f7ff fa58 	bl	8012b9c <tcp_next_iss>
 80136ec:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80136ee:	697b      	ldr	r3, [r7, #20]
 80136f0:	693a      	ldr	r2, [r7, #16]
 80136f2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80136f4:	697b      	ldr	r3, [r7, #20]
 80136f6:	693a      	ldr	r2, [r7, #16]
 80136f8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80136fa:	697b      	ldr	r3, [r7, #20]
 80136fc:	693a      	ldr	r2, [r7, #16]
 80136fe:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8013700:	697b      	ldr	r3, [r7, #20]
 8013702:	693a      	ldr	r2, [r7, #16]
 8013704:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8013706:	4b35      	ldr	r3, [pc, #212]	; (80137dc <tcp_listen_input+0x1e0>)
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	1e5a      	subs	r2, r3, #1
 801370c:	697b      	ldr	r3, [r7, #20]
 801370e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	691a      	ldr	r2, [r3, #16]
 8013714:	697b      	ldr	r3, [r7, #20]
 8013716:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8013718:	697b      	ldr	r3, [r7, #20]
 801371a:	687a      	ldr	r2, [r7, #4]
 801371c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	7a5b      	ldrb	r3, [r3, #9]
 8013722:	f003 030c 	and.w	r3, r3, #12
 8013726:	b2da      	uxtb	r2, r3
 8013728:	697b      	ldr	r3, [r7, #20]
 801372a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	7a1a      	ldrb	r2, [r3, #8]
 8013730:	697b      	ldr	r3, [r7, #20]
 8013732:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8013734:	4b2e      	ldr	r3, [pc, #184]	; (80137f0 <tcp_listen_input+0x1f4>)
 8013736:	681a      	ldr	r2, [r3, #0]
 8013738:	697b      	ldr	r3, [r7, #20]
 801373a:	60da      	str	r2, [r3, #12]
 801373c:	4a2c      	ldr	r2, [pc, #176]	; (80137f0 <tcp_listen_input+0x1f4>)
 801373e:	697b      	ldr	r3, [r7, #20]
 8013740:	6013      	str	r3, [r2, #0]
 8013742:	f003 fd29 	bl	8017198 <tcp_timer_needed>
 8013746:	4b2b      	ldr	r3, [pc, #172]	; (80137f4 <tcp_listen_input+0x1f8>)
 8013748:	2201      	movs	r2, #1
 801374a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801374c:	6978      	ldr	r0, [r7, #20]
 801374e:	f001 fd8f 	bl	8015270 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8013752:	4b23      	ldr	r3, [pc, #140]	; (80137e0 <tcp_listen_input+0x1e4>)
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	89db      	ldrh	r3, [r3, #14]
 8013758:	b29a      	uxth	r2, r3
 801375a:	697b      	ldr	r3, [r7, #20]
 801375c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8013760:	697b      	ldr	r3, [r7, #20]
 8013762:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013766:	697b      	ldr	r3, [r7, #20]
 8013768:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801376c:	697b      	ldr	r3, [r7, #20]
 801376e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8013770:	697b      	ldr	r3, [r7, #20]
 8013772:	3304      	adds	r3, #4
 8013774:	4618      	mov	r0, r3
 8013776:	f006 f9cf 	bl	8019b18 <ip4_route>
 801377a:	4601      	mov	r1, r0
 801377c:	697b      	ldr	r3, [r7, #20]
 801377e:	3304      	adds	r3, #4
 8013780:	461a      	mov	r2, r3
 8013782:	4620      	mov	r0, r4
 8013784:	f7ff fa30 	bl	8012be8 <tcp_eff_send_mss_netif>
 8013788:	4603      	mov	r3, r0
 801378a:	461a      	mov	r2, r3
 801378c:	697b      	ldr	r3, [r7, #20]
 801378e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8013790:	2112      	movs	r1, #18
 8013792:	6978      	ldr	r0, [r7, #20]
 8013794:	f002 fc9c 	bl	80160d0 <tcp_enqueue_flags>
 8013798:	4603      	mov	r3, r0
 801379a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801379c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d004      	beq.n	80137ae <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80137a4:	2100      	movs	r1, #0
 80137a6:	6978      	ldr	r0, [r7, #20]
 80137a8:	f7fd ff38 	bl	801161c <tcp_abandon>
      return;
 80137ac:	e006      	b.n	80137bc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80137ae:	6978      	ldr	r0, [r7, #20]
 80137b0:	f002 fd7c 	bl	80162ac <tcp_output>
  return;
 80137b4:	e001      	b.n	80137ba <tcp_listen_input+0x1be>
    return;
 80137b6:	bf00      	nop
 80137b8:	e000      	b.n	80137bc <tcp_listen_input+0x1c0>
  return;
 80137ba:	bf00      	nop
}
 80137bc:	371c      	adds	r7, #28
 80137be:	46bd      	mov	sp, r7
 80137c0:	bd90      	pop	{r4, r7, pc}
 80137c2:	bf00      	nop
 80137c4:	2000fc80 	.word	0x2000fc80
 80137c8:	08027600 	.word	0x08027600
 80137cc:	080277f8 	.word	0x080277f8
 80137d0:	0802764c 	.word	0x0802764c
 80137d4:	2000fc78 	.word	0x2000fc78
 80137d8:	2000fc7e 	.word	0x2000fc7e
 80137dc:	2000fc74 	.word	0x2000fc74
 80137e0:	2000fc64 	.word	0x2000fc64
 80137e4:	2000c2f4 	.word	0x2000c2f4
 80137e8:	2000c2f8 	.word	0x2000c2f8
 80137ec:	2000c2e4 	.word	0x2000c2e4
 80137f0:	2000fc48 	.word	0x2000fc48
 80137f4:	2000fc50 	.word	0x2000fc50

080137f8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80137f8:	b580      	push	{r7, lr}
 80137fa:	b086      	sub	sp, #24
 80137fc:	af04      	add	r7, sp, #16
 80137fe:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8013800:	4b2f      	ldr	r3, [pc, #188]	; (80138c0 <tcp_timewait_input+0xc8>)
 8013802:	781b      	ldrb	r3, [r3, #0]
 8013804:	f003 0304 	and.w	r3, r3, #4
 8013808:	2b00      	cmp	r3, #0
 801380a:	d153      	bne.n	80138b4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	2b00      	cmp	r3, #0
 8013810:	d106      	bne.n	8013820 <tcp_timewait_input+0x28>
 8013812:	4b2c      	ldr	r3, [pc, #176]	; (80138c4 <tcp_timewait_input+0xcc>)
 8013814:	f240 22ee 	movw	r2, #750	; 0x2ee
 8013818:	492b      	ldr	r1, [pc, #172]	; (80138c8 <tcp_timewait_input+0xd0>)
 801381a:	482c      	ldr	r0, [pc, #176]	; (80138cc <tcp_timewait_input+0xd4>)
 801381c:	f010 f9e0 	bl	8023be0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8013820:	4b27      	ldr	r3, [pc, #156]	; (80138c0 <tcp_timewait_input+0xc8>)
 8013822:	781b      	ldrb	r3, [r3, #0]
 8013824:	f003 0302 	and.w	r3, r3, #2
 8013828:	2b00      	cmp	r3, #0
 801382a:	d02a      	beq.n	8013882 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801382c:	4b28      	ldr	r3, [pc, #160]	; (80138d0 <tcp_timewait_input+0xd8>)
 801382e:	681a      	ldr	r2, [r3, #0]
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013834:	1ad3      	subs	r3, r2, r3
 8013836:	2b00      	cmp	r3, #0
 8013838:	db2d      	blt.n	8013896 <tcp_timewait_input+0x9e>
 801383a:	4b25      	ldr	r3, [pc, #148]	; (80138d0 <tcp_timewait_input+0xd8>)
 801383c:	681a      	ldr	r2, [r3, #0]
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013842:	6879      	ldr	r1, [r7, #4]
 8013844:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013846:	440b      	add	r3, r1
 8013848:	1ad3      	subs	r3, r2, r3
 801384a:	2b00      	cmp	r3, #0
 801384c:	dc23      	bgt.n	8013896 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801384e:	4b21      	ldr	r3, [pc, #132]	; (80138d4 <tcp_timewait_input+0xdc>)
 8013850:	6819      	ldr	r1, [r3, #0]
 8013852:	4b21      	ldr	r3, [pc, #132]	; (80138d8 <tcp_timewait_input+0xe0>)
 8013854:	881b      	ldrh	r3, [r3, #0]
 8013856:	461a      	mov	r2, r3
 8013858:	4b1d      	ldr	r3, [pc, #116]	; (80138d0 <tcp_timewait_input+0xd8>)
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801385e:	4b1f      	ldr	r3, [pc, #124]	; (80138dc <tcp_timewait_input+0xe4>)
 8013860:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013862:	885b      	ldrh	r3, [r3, #2]
 8013864:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013866:	4a1d      	ldr	r2, [pc, #116]	; (80138dc <tcp_timewait_input+0xe4>)
 8013868:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801386a:	8812      	ldrh	r2, [r2, #0]
 801386c:	b292      	uxth	r2, r2
 801386e:	9202      	str	r2, [sp, #8]
 8013870:	9301      	str	r3, [sp, #4]
 8013872:	4b1b      	ldr	r3, [pc, #108]	; (80138e0 <tcp_timewait_input+0xe8>)
 8013874:	9300      	str	r3, [sp, #0]
 8013876:	4b1b      	ldr	r3, [pc, #108]	; (80138e4 <tcp_timewait_input+0xec>)
 8013878:	4602      	mov	r2, r0
 801387a:	6878      	ldr	r0, [r7, #4]
 801387c:	f003 faca 	bl	8016e14 <tcp_rst>
      return;
 8013880:	e01b      	b.n	80138ba <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8013882:	4b0f      	ldr	r3, [pc, #60]	; (80138c0 <tcp_timewait_input+0xc8>)
 8013884:	781b      	ldrb	r3, [r3, #0]
 8013886:	f003 0301 	and.w	r3, r3, #1
 801388a:	2b00      	cmp	r3, #0
 801388c:	d003      	beq.n	8013896 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801388e:	4b16      	ldr	r3, [pc, #88]	; (80138e8 <tcp_timewait_input+0xf0>)
 8013890:	681a      	ldr	r2, [r3, #0]
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8013896:	4b10      	ldr	r3, [pc, #64]	; (80138d8 <tcp_timewait_input+0xe0>)
 8013898:	881b      	ldrh	r3, [r3, #0]
 801389a:	2b00      	cmp	r3, #0
 801389c:	d00c      	beq.n	80138b8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	8b5b      	ldrh	r3, [r3, #26]
 80138a2:	f043 0302 	orr.w	r3, r3, #2
 80138a6:	b29a      	uxth	r2, r3
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80138ac:	6878      	ldr	r0, [r7, #4]
 80138ae:	f002 fcfd 	bl	80162ac <tcp_output>
  }
  return;
 80138b2:	e001      	b.n	80138b8 <tcp_timewait_input+0xc0>
    return;
 80138b4:	bf00      	nop
 80138b6:	e000      	b.n	80138ba <tcp_timewait_input+0xc2>
  return;
 80138b8:	bf00      	nop
}
 80138ba:	3708      	adds	r7, #8
 80138bc:	46bd      	mov	sp, r7
 80138be:	bd80      	pop	{r7, pc}
 80138c0:	2000fc80 	.word	0x2000fc80
 80138c4:	08027600 	.word	0x08027600
 80138c8:	08027818 	.word	0x08027818
 80138cc:	0802764c 	.word	0x0802764c
 80138d0:	2000fc74 	.word	0x2000fc74
 80138d4:	2000fc78 	.word	0x2000fc78
 80138d8:	2000fc7e 	.word	0x2000fc7e
 80138dc:	2000fc64 	.word	0x2000fc64
 80138e0:	2000c2f4 	.word	0x2000c2f4
 80138e4:	2000c2f8 	.word	0x2000c2f8
 80138e8:	2000fc3c 	.word	0x2000fc3c

080138ec <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80138ec:	b590      	push	{r4, r7, lr}
 80138ee:	b08d      	sub	sp, #52	; 0x34
 80138f0:	af04      	add	r7, sp, #16
 80138f2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80138f4:	2300      	movs	r3, #0
 80138f6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80138f8:	2300      	movs	r3, #0
 80138fa:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d106      	bne.n	8013910 <tcp_process+0x24>
 8013902:	4b9d      	ldr	r3, [pc, #628]	; (8013b78 <tcp_process+0x28c>)
 8013904:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8013908:	499c      	ldr	r1, [pc, #624]	; (8013b7c <tcp_process+0x290>)
 801390a:	489d      	ldr	r0, [pc, #628]	; (8013b80 <tcp_process+0x294>)
 801390c:	f010 f968 	bl	8023be0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8013910:	4b9c      	ldr	r3, [pc, #624]	; (8013b84 <tcp_process+0x298>)
 8013912:	781b      	ldrb	r3, [r3, #0]
 8013914:	f003 0304 	and.w	r3, r3, #4
 8013918:	2b00      	cmp	r3, #0
 801391a:	d04e      	beq.n	80139ba <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	7d1b      	ldrb	r3, [r3, #20]
 8013920:	2b02      	cmp	r3, #2
 8013922:	d108      	bne.n	8013936 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013928:	4b97      	ldr	r3, [pc, #604]	; (8013b88 <tcp_process+0x29c>)
 801392a:	681b      	ldr	r3, [r3, #0]
 801392c:	429a      	cmp	r2, r3
 801392e:	d123      	bne.n	8013978 <tcp_process+0x8c>
        acceptable = 1;
 8013930:	2301      	movs	r3, #1
 8013932:	76fb      	strb	r3, [r7, #27]
 8013934:	e020      	b.n	8013978 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801393a:	4b94      	ldr	r3, [pc, #592]	; (8013b8c <tcp_process+0x2a0>)
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	429a      	cmp	r2, r3
 8013940:	d102      	bne.n	8013948 <tcp_process+0x5c>
        acceptable = 1;
 8013942:	2301      	movs	r3, #1
 8013944:	76fb      	strb	r3, [r7, #27]
 8013946:	e017      	b.n	8013978 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013948:	4b90      	ldr	r3, [pc, #576]	; (8013b8c <tcp_process+0x2a0>)
 801394a:	681a      	ldr	r2, [r3, #0]
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013950:	1ad3      	subs	r3, r2, r3
 8013952:	2b00      	cmp	r3, #0
 8013954:	db10      	blt.n	8013978 <tcp_process+0x8c>
 8013956:	4b8d      	ldr	r3, [pc, #564]	; (8013b8c <tcp_process+0x2a0>)
 8013958:	681a      	ldr	r2, [r3, #0]
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801395e:	6879      	ldr	r1, [r7, #4]
 8013960:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013962:	440b      	add	r3, r1
 8013964:	1ad3      	subs	r3, r2, r3
 8013966:	2b00      	cmp	r3, #0
 8013968:	dc06      	bgt.n	8013978 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	8b5b      	ldrh	r3, [r3, #26]
 801396e:	f043 0302 	orr.w	r3, r3, #2
 8013972:	b29a      	uxth	r2, r3
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8013978:	7efb      	ldrb	r3, [r7, #27]
 801397a:	2b00      	cmp	r3, #0
 801397c:	d01b      	beq.n	80139b6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	7d1b      	ldrb	r3, [r3, #20]
 8013982:	2b00      	cmp	r3, #0
 8013984:	d106      	bne.n	8013994 <tcp_process+0xa8>
 8013986:	4b7c      	ldr	r3, [pc, #496]	; (8013b78 <tcp_process+0x28c>)
 8013988:	f44f 724e 	mov.w	r2, #824	; 0x338
 801398c:	4980      	ldr	r1, [pc, #512]	; (8013b90 <tcp_process+0x2a4>)
 801398e:	487c      	ldr	r0, [pc, #496]	; (8013b80 <tcp_process+0x294>)
 8013990:	f010 f926 	bl	8023be0 <iprintf>
      recv_flags |= TF_RESET;
 8013994:	4b7f      	ldr	r3, [pc, #508]	; (8013b94 <tcp_process+0x2a8>)
 8013996:	781b      	ldrb	r3, [r3, #0]
 8013998:	f043 0308 	orr.w	r3, r3, #8
 801399c:	b2da      	uxtb	r2, r3
 801399e:	4b7d      	ldr	r3, [pc, #500]	; (8013b94 <tcp_process+0x2a8>)
 80139a0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	8b5b      	ldrh	r3, [r3, #26]
 80139a6:	f023 0301 	bic.w	r3, r3, #1
 80139aa:	b29a      	uxth	r2, r3
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80139b0:	f06f 030d 	mvn.w	r3, #13
 80139b4:	e37a      	b.n	80140ac <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80139b6:	2300      	movs	r3, #0
 80139b8:	e378      	b.n	80140ac <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80139ba:	4b72      	ldr	r3, [pc, #456]	; (8013b84 <tcp_process+0x298>)
 80139bc:	781b      	ldrb	r3, [r3, #0]
 80139be:	f003 0302 	and.w	r3, r3, #2
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d010      	beq.n	80139e8 <tcp_process+0xfc>
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	7d1b      	ldrb	r3, [r3, #20]
 80139ca:	2b02      	cmp	r3, #2
 80139cc:	d00c      	beq.n	80139e8 <tcp_process+0xfc>
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	7d1b      	ldrb	r3, [r3, #20]
 80139d2:	2b03      	cmp	r3, #3
 80139d4:	d008      	beq.n	80139e8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	8b5b      	ldrh	r3, [r3, #26]
 80139da:	f043 0302 	orr.w	r3, r3, #2
 80139de:	b29a      	uxth	r2, r3
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80139e4:	2300      	movs	r3, #0
 80139e6:	e361      	b.n	80140ac <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	8b5b      	ldrh	r3, [r3, #26]
 80139ec:	f003 0310 	and.w	r3, r3, #16
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d103      	bne.n	80139fc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80139f4:	4b68      	ldr	r3, [pc, #416]	; (8013b98 <tcp_process+0x2ac>)
 80139f6:	681a      	ldr	r2, [r3, #0]
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	2200      	movs	r2, #0
 8013a00:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	2200      	movs	r2, #0
 8013a08:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8013a0c:	6878      	ldr	r0, [r7, #4]
 8013a0e:	f001 fc2f 	bl	8015270 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	7d1b      	ldrb	r3, [r3, #20]
 8013a16:	3b02      	subs	r3, #2
 8013a18:	2b07      	cmp	r3, #7
 8013a1a:	f200 8337 	bhi.w	801408c <tcp_process+0x7a0>
 8013a1e:	a201      	add	r2, pc, #4	; (adr r2, 8013a24 <tcp_process+0x138>)
 8013a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a24:	08013a45 	.word	0x08013a45
 8013a28:	08013c75 	.word	0x08013c75
 8013a2c:	08013ded 	.word	0x08013ded
 8013a30:	08013e17 	.word	0x08013e17
 8013a34:	08013f3b 	.word	0x08013f3b
 8013a38:	08013ded 	.word	0x08013ded
 8013a3c:	08013fc7 	.word	0x08013fc7
 8013a40:	08014057 	.word	0x08014057
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8013a44:	4b4f      	ldr	r3, [pc, #316]	; (8013b84 <tcp_process+0x298>)
 8013a46:	781b      	ldrb	r3, [r3, #0]
 8013a48:	f003 0310 	and.w	r3, r3, #16
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	f000 80e4 	beq.w	8013c1a <tcp_process+0x32e>
 8013a52:	4b4c      	ldr	r3, [pc, #304]	; (8013b84 <tcp_process+0x298>)
 8013a54:	781b      	ldrb	r3, [r3, #0]
 8013a56:	f003 0302 	and.w	r3, r3, #2
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	f000 80dd 	beq.w	8013c1a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a64:	1c5a      	adds	r2, r3, #1
 8013a66:	4b48      	ldr	r3, [pc, #288]	; (8013b88 <tcp_process+0x29c>)
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	429a      	cmp	r2, r3
 8013a6c:	f040 80d5 	bne.w	8013c1a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8013a70:	4b46      	ldr	r3, [pc, #280]	; (8013b8c <tcp_process+0x2a0>)
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	1c5a      	adds	r2, r3, #1
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8013a82:	4b41      	ldr	r3, [pc, #260]	; (8013b88 <tcp_process+0x29c>)
 8013a84:	681a      	ldr	r2, [r3, #0]
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8013a8a:	4b44      	ldr	r3, [pc, #272]	; (8013b9c <tcp_process+0x2b0>)
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	89db      	ldrh	r3, [r3, #14]
 8013a90:	b29a      	uxth	r2, r3
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8013aa4:	4b39      	ldr	r3, [pc, #228]	; (8013b8c <tcp_process+0x2a0>)
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	1e5a      	subs	r2, r3, #1
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	2204      	movs	r2, #4
 8013ab2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	3304      	adds	r3, #4
 8013abc:	4618      	mov	r0, r3
 8013abe:	f006 f82b 	bl	8019b18 <ip4_route>
 8013ac2:	4601      	mov	r1, r0
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	3304      	adds	r3, #4
 8013ac8:	461a      	mov	r2, r3
 8013aca:	4620      	mov	r0, r4
 8013acc:	f7ff f88c 	bl	8012be8 <tcp_eff_send_mss_netif>
 8013ad0:	4603      	mov	r3, r0
 8013ad2:	461a      	mov	r2, r3
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013adc:	009a      	lsls	r2, r3, #2
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013ae2:	005b      	lsls	r3, r3, #1
 8013ae4:	f241 111c 	movw	r1, #4380	; 0x111c
 8013ae8:	428b      	cmp	r3, r1
 8013aea:	bf38      	it	cc
 8013aec:	460b      	movcc	r3, r1
 8013aee:	429a      	cmp	r2, r3
 8013af0:	d204      	bcs.n	8013afc <tcp_process+0x210>
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013af6:	009b      	lsls	r3, r3, #2
 8013af8:	b29b      	uxth	r3, r3
 8013afa:	e00d      	b.n	8013b18 <tcp_process+0x22c>
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b00:	005b      	lsls	r3, r3, #1
 8013b02:	f241 121c 	movw	r2, #4380	; 0x111c
 8013b06:	4293      	cmp	r3, r2
 8013b08:	d904      	bls.n	8013b14 <tcp_process+0x228>
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b0e:	005b      	lsls	r3, r3, #1
 8013b10:	b29b      	uxth	r3, r3
 8013b12:	e001      	b.n	8013b18 <tcp_process+0x22c>
 8013b14:	f241 131c 	movw	r3, #4380	; 0x111c
 8013b18:	687a      	ldr	r2, [r7, #4]
 8013b1a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d106      	bne.n	8013b36 <tcp_process+0x24a>
 8013b28:	4b13      	ldr	r3, [pc, #76]	; (8013b78 <tcp_process+0x28c>)
 8013b2a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8013b2e:	491c      	ldr	r1, [pc, #112]	; (8013ba0 <tcp_process+0x2b4>)
 8013b30:	4813      	ldr	r0, [pc, #76]	; (8013b80 <tcp_process+0x294>)
 8013b32:	f010 f855 	bl	8023be0 <iprintf>
        --pcb->snd_queuelen;
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013b3c:	3b01      	subs	r3, #1
 8013b3e:	b29a      	uxth	r2, r3
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b4a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8013b4c:	69fb      	ldr	r3, [r7, #28]
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d12a      	bne.n	8013ba8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b56:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8013b58:	69fb      	ldr	r3, [r7, #28]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d106      	bne.n	8013b6c <tcp_process+0x280>
 8013b5e:	4b06      	ldr	r3, [pc, #24]	; (8013b78 <tcp_process+0x28c>)
 8013b60:	f44f 725d 	mov.w	r2, #884	; 0x374
 8013b64:	490f      	ldr	r1, [pc, #60]	; (8013ba4 <tcp_process+0x2b8>)
 8013b66:	4806      	ldr	r0, [pc, #24]	; (8013b80 <tcp_process+0x294>)
 8013b68:	f010 f83a 	bl	8023be0 <iprintf>
          pcb->unsent = rseg->next;
 8013b6c:	69fb      	ldr	r3, [r7, #28]
 8013b6e:	681a      	ldr	r2, [r3, #0]
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	66da      	str	r2, [r3, #108]	; 0x6c
 8013b74:	e01c      	b.n	8013bb0 <tcp_process+0x2c4>
 8013b76:	bf00      	nop
 8013b78:	08027600 	.word	0x08027600
 8013b7c:	08027838 	.word	0x08027838
 8013b80:	0802764c 	.word	0x0802764c
 8013b84:	2000fc80 	.word	0x2000fc80
 8013b88:	2000fc78 	.word	0x2000fc78
 8013b8c:	2000fc74 	.word	0x2000fc74
 8013b90:	08027854 	.word	0x08027854
 8013b94:	2000fc81 	.word	0x2000fc81
 8013b98:	2000fc3c 	.word	0x2000fc3c
 8013b9c:	2000fc64 	.word	0x2000fc64
 8013ba0:	08027874 	.word	0x08027874
 8013ba4:	0802788c 	.word	0x0802788c
        } else {
          pcb->unacked = rseg->next;
 8013ba8:	69fb      	ldr	r3, [r7, #28]
 8013baa:	681a      	ldr	r2, [r3, #0]
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8013bb0:	69f8      	ldr	r0, [r7, #28]
 8013bb2:	f7fe fc54 	bl	801245e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d104      	bne.n	8013bc8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013bc4:	861a      	strh	r2, [r3, #48]	; 0x30
 8013bc6:	e006      	b.n	8013bd6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	2200      	movs	r2, #0
 8013bcc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	2200      	movs	r2, #0
 8013bd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d00a      	beq.n	8013bf6 <tcp_process+0x30a>
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013be6:	687a      	ldr	r2, [r7, #4]
 8013be8:	6910      	ldr	r0, [r2, #16]
 8013bea:	2200      	movs	r2, #0
 8013bec:	6879      	ldr	r1, [r7, #4]
 8013bee:	4798      	blx	r3
 8013bf0:	4603      	mov	r3, r0
 8013bf2:	76bb      	strb	r3, [r7, #26]
 8013bf4:	e001      	b.n	8013bfa <tcp_process+0x30e>
 8013bf6:	2300      	movs	r3, #0
 8013bf8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8013bfa:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013bfe:	f113 0f0d 	cmn.w	r3, #13
 8013c02:	d102      	bne.n	8013c0a <tcp_process+0x31e>
          return ERR_ABRT;
 8013c04:	f06f 030c 	mvn.w	r3, #12
 8013c08:	e250      	b.n	80140ac <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	8b5b      	ldrh	r3, [r3, #26]
 8013c0e:	f043 0302 	orr.w	r3, r3, #2
 8013c12:	b29a      	uxth	r2, r3
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8013c18:	e23a      	b.n	8014090 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8013c1a:	4b98      	ldr	r3, [pc, #608]	; (8013e7c <tcp_process+0x590>)
 8013c1c:	781b      	ldrb	r3, [r3, #0]
 8013c1e:	f003 0310 	and.w	r3, r3, #16
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	f000 8234 	beq.w	8014090 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013c28:	4b95      	ldr	r3, [pc, #596]	; (8013e80 <tcp_process+0x594>)
 8013c2a:	6819      	ldr	r1, [r3, #0]
 8013c2c:	4b95      	ldr	r3, [pc, #596]	; (8013e84 <tcp_process+0x598>)
 8013c2e:	881b      	ldrh	r3, [r3, #0]
 8013c30:	461a      	mov	r2, r3
 8013c32:	4b95      	ldr	r3, [pc, #596]	; (8013e88 <tcp_process+0x59c>)
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013c38:	4b94      	ldr	r3, [pc, #592]	; (8013e8c <tcp_process+0x5a0>)
 8013c3a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013c3c:	885b      	ldrh	r3, [r3, #2]
 8013c3e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013c40:	4a92      	ldr	r2, [pc, #584]	; (8013e8c <tcp_process+0x5a0>)
 8013c42:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013c44:	8812      	ldrh	r2, [r2, #0]
 8013c46:	b292      	uxth	r2, r2
 8013c48:	9202      	str	r2, [sp, #8]
 8013c4a:	9301      	str	r3, [sp, #4]
 8013c4c:	4b90      	ldr	r3, [pc, #576]	; (8013e90 <tcp_process+0x5a4>)
 8013c4e:	9300      	str	r3, [sp, #0]
 8013c50:	4b90      	ldr	r3, [pc, #576]	; (8013e94 <tcp_process+0x5a8>)
 8013c52:	4602      	mov	r2, r0
 8013c54:	6878      	ldr	r0, [r7, #4]
 8013c56:	f003 f8dd 	bl	8016e14 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013c60:	2b05      	cmp	r3, #5
 8013c62:	f200 8215 	bhi.w	8014090 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	2200      	movs	r2, #0
 8013c6a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8013c6c:	6878      	ldr	r0, [r7, #4]
 8013c6e:	f002 fea7 	bl	80169c0 <tcp_rexmit_rto>
      break;
 8013c72:	e20d      	b.n	8014090 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8013c74:	4b81      	ldr	r3, [pc, #516]	; (8013e7c <tcp_process+0x590>)
 8013c76:	781b      	ldrb	r3, [r3, #0]
 8013c78:	f003 0310 	and.w	r3, r3, #16
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	f000 80a1 	beq.w	8013dc4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013c82:	4b7f      	ldr	r3, [pc, #508]	; (8013e80 <tcp_process+0x594>)
 8013c84:	681a      	ldr	r2, [r3, #0]
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013c8a:	1ad3      	subs	r3, r2, r3
 8013c8c:	3b01      	subs	r3, #1
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	db7e      	blt.n	8013d90 <tcp_process+0x4a4>
 8013c92:	4b7b      	ldr	r3, [pc, #492]	; (8013e80 <tcp_process+0x594>)
 8013c94:	681a      	ldr	r2, [r3, #0]
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013c9a:	1ad3      	subs	r3, r2, r3
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	dc77      	bgt.n	8013d90 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	2204      	movs	r2, #4
 8013ca4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d102      	bne.n	8013cb4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8013cae:	23fa      	movs	r3, #250	; 0xfa
 8013cb0:	76bb      	strb	r3, [r7, #26]
 8013cb2:	e01d      	b.n	8013cf0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013cb8:	699b      	ldr	r3, [r3, #24]
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d106      	bne.n	8013ccc <tcp_process+0x3e0>
 8013cbe:	4b76      	ldr	r3, [pc, #472]	; (8013e98 <tcp_process+0x5ac>)
 8013cc0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8013cc4:	4975      	ldr	r1, [pc, #468]	; (8013e9c <tcp_process+0x5b0>)
 8013cc6:	4876      	ldr	r0, [pc, #472]	; (8013ea0 <tcp_process+0x5b4>)
 8013cc8:	f00f ff8a 	bl	8023be0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013cd0:	699b      	ldr	r3, [r3, #24]
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d00a      	beq.n	8013cec <tcp_process+0x400>
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013cda:	699b      	ldr	r3, [r3, #24]
 8013cdc:	687a      	ldr	r2, [r7, #4]
 8013cde:	6910      	ldr	r0, [r2, #16]
 8013ce0:	2200      	movs	r2, #0
 8013ce2:	6879      	ldr	r1, [r7, #4]
 8013ce4:	4798      	blx	r3
 8013ce6:	4603      	mov	r3, r0
 8013ce8:	76bb      	strb	r3, [r7, #26]
 8013cea:	e001      	b.n	8013cf0 <tcp_process+0x404>
 8013cec:	23f0      	movs	r3, #240	; 0xf0
 8013cee:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8013cf0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d00a      	beq.n	8013d0e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8013cf8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013cfc:	f113 0f0d 	cmn.w	r3, #13
 8013d00:	d002      	beq.n	8013d08 <tcp_process+0x41c>
              tcp_abort(pcb);
 8013d02:	6878      	ldr	r0, [r7, #4]
 8013d04:	f7fd fd48 	bl	8011798 <tcp_abort>
            }
            return ERR_ABRT;
 8013d08:	f06f 030c 	mvn.w	r3, #12
 8013d0c:	e1ce      	b.n	80140ac <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8013d0e:	6878      	ldr	r0, [r7, #4]
 8013d10:	f000 fae0 	bl	80142d4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8013d14:	4b63      	ldr	r3, [pc, #396]	; (8013ea4 <tcp_process+0x5b8>)
 8013d16:	881b      	ldrh	r3, [r3, #0]
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d005      	beq.n	8013d28 <tcp_process+0x43c>
            recv_acked--;
 8013d1c:	4b61      	ldr	r3, [pc, #388]	; (8013ea4 <tcp_process+0x5b8>)
 8013d1e:	881b      	ldrh	r3, [r3, #0]
 8013d20:	3b01      	subs	r3, #1
 8013d22:	b29a      	uxth	r2, r3
 8013d24:	4b5f      	ldr	r3, [pc, #380]	; (8013ea4 <tcp_process+0x5b8>)
 8013d26:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d2c:	009a      	lsls	r2, r3, #2
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d32:	005b      	lsls	r3, r3, #1
 8013d34:	f241 111c 	movw	r1, #4380	; 0x111c
 8013d38:	428b      	cmp	r3, r1
 8013d3a:	bf38      	it	cc
 8013d3c:	460b      	movcc	r3, r1
 8013d3e:	429a      	cmp	r2, r3
 8013d40:	d204      	bcs.n	8013d4c <tcp_process+0x460>
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d46:	009b      	lsls	r3, r3, #2
 8013d48:	b29b      	uxth	r3, r3
 8013d4a:	e00d      	b.n	8013d68 <tcp_process+0x47c>
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d50:	005b      	lsls	r3, r3, #1
 8013d52:	f241 121c 	movw	r2, #4380	; 0x111c
 8013d56:	4293      	cmp	r3, r2
 8013d58:	d904      	bls.n	8013d64 <tcp_process+0x478>
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d5e:	005b      	lsls	r3, r3, #1
 8013d60:	b29b      	uxth	r3, r3
 8013d62:	e001      	b.n	8013d68 <tcp_process+0x47c>
 8013d64:	f241 131c 	movw	r3, #4380	; 0x111c
 8013d68:	687a      	ldr	r2, [r7, #4]
 8013d6a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8013d6e:	4b4e      	ldr	r3, [pc, #312]	; (8013ea8 <tcp_process+0x5bc>)
 8013d70:	781b      	ldrb	r3, [r3, #0]
 8013d72:	f003 0320 	and.w	r3, r3, #32
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d037      	beq.n	8013dea <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	8b5b      	ldrh	r3, [r3, #26]
 8013d7e:	f043 0302 	orr.w	r3, r3, #2
 8013d82:	b29a      	uxth	r2, r3
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	2207      	movs	r2, #7
 8013d8c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8013d8e:	e02c      	b.n	8013dea <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013d90:	4b3b      	ldr	r3, [pc, #236]	; (8013e80 <tcp_process+0x594>)
 8013d92:	6819      	ldr	r1, [r3, #0]
 8013d94:	4b3b      	ldr	r3, [pc, #236]	; (8013e84 <tcp_process+0x598>)
 8013d96:	881b      	ldrh	r3, [r3, #0]
 8013d98:	461a      	mov	r2, r3
 8013d9a:	4b3b      	ldr	r3, [pc, #236]	; (8013e88 <tcp_process+0x59c>)
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013da0:	4b3a      	ldr	r3, [pc, #232]	; (8013e8c <tcp_process+0x5a0>)
 8013da2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013da4:	885b      	ldrh	r3, [r3, #2]
 8013da6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013da8:	4a38      	ldr	r2, [pc, #224]	; (8013e8c <tcp_process+0x5a0>)
 8013daa:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013dac:	8812      	ldrh	r2, [r2, #0]
 8013dae:	b292      	uxth	r2, r2
 8013db0:	9202      	str	r2, [sp, #8]
 8013db2:	9301      	str	r3, [sp, #4]
 8013db4:	4b36      	ldr	r3, [pc, #216]	; (8013e90 <tcp_process+0x5a4>)
 8013db6:	9300      	str	r3, [sp, #0]
 8013db8:	4b36      	ldr	r3, [pc, #216]	; (8013e94 <tcp_process+0x5a8>)
 8013dba:	4602      	mov	r2, r0
 8013dbc:	6878      	ldr	r0, [r7, #4]
 8013dbe:	f003 f829 	bl	8016e14 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8013dc2:	e167      	b.n	8014094 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8013dc4:	4b2d      	ldr	r3, [pc, #180]	; (8013e7c <tcp_process+0x590>)
 8013dc6:	781b      	ldrb	r3, [r3, #0]
 8013dc8:	f003 0302 	and.w	r3, r3, #2
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	f000 8161 	beq.w	8014094 <tcp_process+0x7a8>
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013dd6:	1e5a      	subs	r2, r3, #1
 8013dd8:	4b2b      	ldr	r3, [pc, #172]	; (8013e88 <tcp_process+0x59c>)
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	429a      	cmp	r2, r3
 8013dde:	f040 8159 	bne.w	8014094 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8013de2:	6878      	ldr	r0, [r7, #4]
 8013de4:	f002 fe0e 	bl	8016a04 <tcp_rexmit>
      break;
 8013de8:	e154      	b.n	8014094 <tcp_process+0x7a8>
 8013dea:	e153      	b.n	8014094 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8013dec:	6878      	ldr	r0, [r7, #4]
 8013dee:	f000 fa71 	bl	80142d4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8013df2:	4b2d      	ldr	r3, [pc, #180]	; (8013ea8 <tcp_process+0x5bc>)
 8013df4:	781b      	ldrb	r3, [r3, #0]
 8013df6:	f003 0320 	and.w	r3, r3, #32
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	f000 814c 	beq.w	8014098 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	8b5b      	ldrh	r3, [r3, #26]
 8013e04:	f043 0302 	orr.w	r3, r3, #2
 8013e08:	b29a      	uxth	r2, r3
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	2207      	movs	r2, #7
 8013e12:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013e14:	e140      	b.n	8014098 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8013e16:	6878      	ldr	r0, [r7, #4]
 8013e18:	f000 fa5c 	bl	80142d4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013e1c:	4b22      	ldr	r3, [pc, #136]	; (8013ea8 <tcp_process+0x5bc>)
 8013e1e:	781b      	ldrb	r3, [r3, #0]
 8013e20:	f003 0320 	and.w	r3, r3, #32
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d071      	beq.n	8013f0c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013e28:	4b14      	ldr	r3, [pc, #80]	; (8013e7c <tcp_process+0x590>)
 8013e2a:	781b      	ldrb	r3, [r3, #0]
 8013e2c:	f003 0310 	and.w	r3, r3, #16
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d060      	beq.n	8013ef6 <tcp_process+0x60a>
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013e38:	4b11      	ldr	r3, [pc, #68]	; (8013e80 <tcp_process+0x594>)
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	429a      	cmp	r2, r3
 8013e3e:	d15a      	bne.n	8013ef6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d156      	bne.n	8013ef6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	8b5b      	ldrh	r3, [r3, #26]
 8013e4c:	f043 0302 	orr.w	r3, r3, #2
 8013e50:	b29a      	uxth	r2, r3
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8013e56:	6878      	ldr	r0, [r7, #4]
 8013e58:	f7fe fdbc 	bl	80129d4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8013e5c:	4b13      	ldr	r3, [pc, #76]	; (8013eac <tcp_process+0x5c0>)
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	687a      	ldr	r2, [r7, #4]
 8013e62:	429a      	cmp	r2, r3
 8013e64:	d105      	bne.n	8013e72 <tcp_process+0x586>
 8013e66:	4b11      	ldr	r3, [pc, #68]	; (8013eac <tcp_process+0x5c0>)
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	68db      	ldr	r3, [r3, #12]
 8013e6c:	4a0f      	ldr	r2, [pc, #60]	; (8013eac <tcp_process+0x5c0>)
 8013e6e:	6013      	str	r3, [r2, #0]
 8013e70:	e02e      	b.n	8013ed0 <tcp_process+0x5e4>
 8013e72:	4b0e      	ldr	r3, [pc, #56]	; (8013eac <tcp_process+0x5c0>)
 8013e74:	681b      	ldr	r3, [r3, #0]
 8013e76:	617b      	str	r3, [r7, #20]
 8013e78:	e027      	b.n	8013eca <tcp_process+0x5de>
 8013e7a:	bf00      	nop
 8013e7c:	2000fc80 	.word	0x2000fc80
 8013e80:	2000fc78 	.word	0x2000fc78
 8013e84:	2000fc7e 	.word	0x2000fc7e
 8013e88:	2000fc74 	.word	0x2000fc74
 8013e8c:	2000fc64 	.word	0x2000fc64
 8013e90:	2000c2f4 	.word	0x2000c2f4
 8013e94:	2000c2f8 	.word	0x2000c2f8
 8013e98:	08027600 	.word	0x08027600
 8013e9c:	080278a0 	.word	0x080278a0
 8013ea0:	0802764c 	.word	0x0802764c
 8013ea4:	2000fc7c 	.word	0x2000fc7c
 8013ea8:	2000fc81 	.word	0x2000fc81
 8013eac:	2000fc48 	.word	0x2000fc48
 8013eb0:	697b      	ldr	r3, [r7, #20]
 8013eb2:	68db      	ldr	r3, [r3, #12]
 8013eb4:	687a      	ldr	r2, [r7, #4]
 8013eb6:	429a      	cmp	r2, r3
 8013eb8:	d104      	bne.n	8013ec4 <tcp_process+0x5d8>
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	68da      	ldr	r2, [r3, #12]
 8013ebe:	697b      	ldr	r3, [r7, #20]
 8013ec0:	60da      	str	r2, [r3, #12]
 8013ec2:	e005      	b.n	8013ed0 <tcp_process+0x5e4>
 8013ec4:	697b      	ldr	r3, [r7, #20]
 8013ec6:	68db      	ldr	r3, [r3, #12]
 8013ec8:	617b      	str	r3, [r7, #20]
 8013eca:	697b      	ldr	r3, [r7, #20]
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d1ef      	bne.n	8013eb0 <tcp_process+0x5c4>
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	2200      	movs	r2, #0
 8013ed4:	60da      	str	r2, [r3, #12]
 8013ed6:	4b77      	ldr	r3, [pc, #476]	; (80140b4 <tcp_process+0x7c8>)
 8013ed8:	2201      	movs	r2, #1
 8013eda:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	220a      	movs	r2, #10
 8013ee0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8013ee2:	4b75      	ldr	r3, [pc, #468]	; (80140b8 <tcp_process+0x7cc>)
 8013ee4:	681a      	ldr	r2, [r3, #0]
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	60da      	str	r2, [r3, #12]
 8013eea:	4a73      	ldr	r2, [pc, #460]	; (80140b8 <tcp_process+0x7cc>)
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	6013      	str	r3, [r2, #0]
 8013ef0:	f003 f952 	bl	8017198 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8013ef4:	e0d2      	b.n	801409c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	8b5b      	ldrh	r3, [r3, #26]
 8013efa:	f043 0302 	orr.w	r3, r3, #2
 8013efe:	b29a      	uxth	r2, r3
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	2208      	movs	r2, #8
 8013f08:	751a      	strb	r2, [r3, #20]
      break;
 8013f0a:	e0c7      	b.n	801409c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013f0c:	4b6b      	ldr	r3, [pc, #428]	; (80140bc <tcp_process+0x7d0>)
 8013f0e:	781b      	ldrb	r3, [r3, #0]
 8013f10:	f003 0310 	and.w	r3, r3, #16
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	f000 80c1 	beq.w	801409c <tcp_process+0x7b0>
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013f1e:	4b68      	ldr	r3, [pc, #416]	; (80140c0 <tcp_process+0x7d4>)
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	429a      	cmp	r2, r3
 8013f24:	f040 80ba 	bne.w	801409c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	f040 80b5 	bne.w	801409c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	2206      	movs	r2, #6
 8013f36:	751a      	strb	r2, [r3, #20]
      break;
 8013f38:	e0b0      	b.n	801409c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8013f3a:	6878      	ldr	r0, [r7, #4]
 8013f3c:	f000 f9ca 	bl	80142d4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013f40:	4b60      	ldr	r3, [pc, #384]	; (80140c4 <tcp_process+0x7d8>)
 8013f42:	781b      	ldrb	r3, [r3, #0]
 8013f44:	f003 0320 	and.w	r3, r3, #32
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	f000 80a9 	beq.w	80140a0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	8b5b      	ldrh	r3, [r3, #26]
 8013f52:	f043 0302 	orr.w	r3, r3, #2
 8013f56:	b29a      	uxth	r2, r3
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013f5c:	6878      	ldr	r0, [r7, #4]
 8013f5e:	f7fe fd39 	bl	80129d4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013f62:	4b59      	ldr	r3, [pc, #356]	; (80140c8 <tcp_process+0x7dc>)
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	687a      	ldr	r2, [r7, #4]
 8013f68:	429a      	cmp	r2, r3
 8013f6a:	d105      	bne.n	8013f78 <tcp_process+0x68c>
 8013f6c:	4b56      	ldr	r3, [pc, #344]	; (80140c8 <tcp_process+0x7dc>)
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	68db      	ldr	r3, [r3, #12]
 8013f72:	4a55      	ldr	r2, [pc, #340]	; (80140c8 <tcp_process+0x7dc>)
 8013f74:	6013      	str	r3, [r2, #0]
 8013f76:	e013      	b.n	8013fa0 <tcp_process+0x6b4>
 8013f78:	4b53      	ldr	r3, [pc, #332]	; (80140c8 <tcp_process+0x7dc>)
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	613b      	str	r3, [r7, #16]
 8013f7e:	e00c      	b.n	8013f9a <tcp_process+0x6ae>
 8013f80:	693b      	ldr	r3, [r7, #16]
 8013f82:	68db      	ldr	r3, [r3, #12]
 8013f84:	687a      	ldr	r2, [r7, #4]
 8013f86:	429a      	cmp	r2, r3
 8013f88:	d104      	bne.n	8013f94 <tcp_process+0x6a8>
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	68da      	ldr	r2, [r3, #12]
 8013f8e:	693b      	ldr	r3, [r7, #16]
 8013f90:	60da      	str	r2, [r3, #12]
 8013f92:	e005      	b.n	8013fa0 <tcp_process+0x6b4>
 8013f94:	693b      	ldr	r3, [r7, #16]
 8013f96:	68db      	ldr	r3, [r3, #12]
 8013f98:	613b      	str	r3, [r7, #16]
 8013f9a:	693b      	ldr	r3, [r7, #16]
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d1ef      	bne.n	8013f80 <tcp_process+0x694>
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	2200      	movs	r2, #0
 8013fa4:	60da      	str	r2, [r3, #12]
 8013fa6:	4b43      	ldr	r3, [pc, #268]	; (80140b4 <tcp_process+0x7c8>)
 8013fa8:	2201      	movs	r2, #1
 8013faa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	220a      	movs	r2, #10
 8013fb0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013fb2:	4b41      	ldr	r3, [pc, #260]	; (80140b8 <tcp_process+0x7cc>)
 8013fb4:	681a      	ldr	r2, [r3, #0]
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	60da      	str	r2, [r3, #12]
 8013fba:	4a3f      	ldr	r2, [pc, #252]	; (80140b8 <tcp_process+0x7cc>)
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	6013      	str	r3, [r2, #0]
 8013fc0:	f003 f8ea 	bl	8017198 <tcp_timer_needed>
      }
      break;
 8013fc4:	e06c      	b.n	80140a0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8013fc6:	6878      	ldr	r0, [r7, #4]
 8013fc8:	f000 f984 	bl	80142d4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013fcc:	4b3b      	ldr	r3, [pc, #236]	; (80140bc <tcp_process+0x7d0>)
 8013fce:	781b      	ldrb	r3, [r3, #0]
 8013fd0:	f003 0310 	and.w	r3, r3, #16
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d065      	beq.n	80140a4 <tcp_process+0x7b8>
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013fdc:	4b38      	ldr	r3, [pc, #224]	; (80140c0 <tcp_process+0x7d4>)
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	429a      	cmp	r2, r3
 8013fe2:	d15f      	bne.n	80140a4 <tcp_process+0x7b8>
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d15b      	bne.n	80140a4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8013fec:	6878      	ldr	r0, [r7, #4]
 8013fee:	f7fe fcf1 	bl	80129d4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013ff2:	4b35      	ldr	r3, [pc, #212]	; (80140c8 <tcp_process+0x7dc>)
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	687a      	ldr	r2, [r7, #4]
 8013ff8:	429a      	cmp	r2, r3
 8013ffa:	d105      	bne.n	8014008 <tcp_process+0x71c>
 8013ffc:	4b32      	ldr	r3, [pc, #200]	; (80140c8 <tcp_process+0x7dc>)
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	68db      	ldr	r3, [r3, #12]
 8014002:	4a31      	ldr	r2, [pc, #196]	; (80140c8 <tcp_process+0x7dc>)
 8014004:	6013      	str	r3, [r2, #0]
 8014006:	e013      	b.n	8014030 <tcp_process+0x744>
 8014008:	4b2f      	ldr	r3, [pc, #188]	; (80140c8 <tcp_process+0x7dc>)
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	60fb      	str	r3, [r7, #12]
 801400e:	e00c      	b.n	801402a <tcp_process+0x73e>
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	68db      	ldr	r3, [r3, #12]
 8014014:	687a      	ldr	r2, [r7, #4]
 8014016:	429a      	cmp	r2, r3
 8014018:	d104      	bne.n	8014024 <tcp_process+0x738>
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	68da      	ldr	r2, [r3, #12]
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	60da      	str	r2, [r3, #12]
 8014022:	e005      	b.n	8014030 <tcp_process+0x744>
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	68db      	ldr	r3, [r3, #12]
 8014028:	60fb      	str	r3, [r7, #12]
 801402a:	68fb      	ldr	r3, [r7, #12]
 801402c:	2b00      	cmp	r3, #0
 801402e:	d1ef      	bne.n	8014010 <tcp_process+0x724>
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	2200      	movs	r2, #0
 8014034:	60da      	str	r2, [r3, #12]
 8014036:	4b1f      	ldr	r3, [pc, #124]	; (80140b4 <tcp_process+0x7c8>)
 8014038:	2201      	movs	r2, #1
 801403a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	220a      	movs	r2, #10
 8014040:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8014042:	4b1d      	ldr	r3, [pc, #116]	; (80140b8 <tcp_process+0x7cc>)
 8014044:	681a      	ldr	r2, [r3, #0]
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	60da      	str	r2, [r3, #12]
 801404a:	4a1b      	ldr	r2, [pc, #108]	; (80140b8 <tcp_process+0x7cc>)
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	6013      	str	r3, [r2, #0]
 8014050:	f003 f8a2 	bl	8017198 <tcp_timer_needed>
      }
      break;
 8014054:	e026      	b.n	80140a4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8014056:	6878      	ldr	r0, [r7, #4]
 8014058:	f000 f93c 	bl	80142d4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801405c:	4b17      	ldr	r3, [pc, #92]	; (80140bc <tcp_process+0x7d0>)
 801405e:	781b      	ldrb	r3, [r3, #0]
 8014060:	f003 0310 	and.w	r3, r3, #16
 8014064:	2b00      	cmp	r3, #0
 8014066:	d01f      	beq.n	80140a8 <tcp_process+0x7bc>
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801406c:	4b14      	ldr	r3, [pc, #80]	; (80140c0 <tcp_process+0x7d4>)
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	429a      	cmp	r2, r3
 8014072:	d119      	bne.n	80140a8 <tcp_process+0x7bc>
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014078:	2b00      	cmp	r3, #0
 801407a:	d115      	bne.n	80140a8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801407c:	4b11      	ldr	r3, [pc, #68]	; (80140c4 <tcp_process+0x7d8>)
 801407e:	781b      	ldrb	r3, [r3, #0]
 8014080:	f043 0310 	orr.w	r3, r3, #16
 8014084:	b2da      	uxtb	r2, r3
 8014086:	4b0f      	ldr	r3, [pc, #60]	; (80140c4 <tcp_process+0x7d8>)
 8014088:	701a      	strb	r2, [r3, #0]
      }
      break;
 801408a:	e00d      	b.n	80140a8 <tcp_process+0x7bc>
    default:
      break;
 801408c:	bf00      	nop
 801408e:	e00c      	b.n	80140aa <tcp_process+0x7be>
      break;
 8014090:	bf00      	nop
 8014092:	e00a      	b.n	80140aa <tcp_process+0x7be>
      break;
 8014094:	bf00      	nop
 8014096:	e008      	b.n	80140aa <tcp_process+0x7be>
      break;
 8014098:	bf00      	nop
 801409a:	e006      	b.n	80140aa <tcp_process+0x7be>
      break;
 801409c:	bf00      	nop
 801409e:	e004      	b.n	80140aa <tcp_process+0x7be>
      break;
 80140a0:	bf00      	nop
 80140a2:	e002      	b.n	80140aa <tcp_process+0x7be>
      break;
 80140a4:	bf00      	nop
 80140a6:	e000      	b.n	80140aa <tcp_process+0x7be>
      break;
 80140a8:	bf00      	nop
  }
  return ERR_OK;
 80140aa:	2300      	movs	r3, #0
}
 80140ac:	4618      	mov	r0, r3
 80140ae:	3724      	adds	r7, #36	; 0x24
 80140b0:	46bd      	mov	sp, r7
 80140b2:	bd90      	pop	{r4, r7, pc}
 80140b4:	2000fc50 	.word	0x2000fc50
 80140b8:	2000fc4c 	.word	0x2000fc4c
 80140bc:	2000fc80 	.word	0x2000fc80
 80140c0:	2000fc78 	.word	0x2000fc78
 80140c4:	2000fc81 	.word	0x2000fc81
 80140c8:	2000fc48 	.word	0x2000fc48

080140cc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80140cc:	b590      	push	{r4, r7, lr}
 80140ce:	b085      	sub	sp, #20
 80140d0:	af00      	add	r7, sp, #0
 80140d2:	6078      	str	r0, [r7, #4]
 80140d4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d106      	bne.n	80140ea <tcp_oos_insert_segment+0x1e>
 80140dc:	4b3b      	ldr	r3, [pc, #236]	; (80141cc <tcp_oos_insert_segment+0x100>)
 80140de:	f240 421f 	movw	r2, #1055	; 0x41f
 80140e2:	493b      	ldr	r1, [pc, #236]	; (80141d0 <tcp_oos_insert_segment+0x104>)
 80140e4:	483b      	ldr	r0, [pc, #236]	; (80141d4 <tcp_oos_insert_segment+0x108>)
 80140e6:	f00f fd7b 	bl	8023be0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	68db      	ldr	r3, [r3, #12]
 80140ee:	899b      	ldrh	r3, [r3, #12]
 80140f0:	b29b      	uxth	r3, r3
 80140f2:	4618      	mov	r0, r3
 80140f4:	f7f9 ff7e 	bl	800dff4 <lwip_htons>
 80140f8:	4603      	mov	r3, r0
 80140fa:	b2db      	uxtb	r3, r3
 80140fc:	f003 0301 	and.w	r3, r3, #1
 8014100:	2b00      	cmp	r3, #0
 8014102:	d028      	beq.n	8014156 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8014104:	6838      	ldr	r0, [r7, #0]
 8014106:	f7fe f995 	bl	8012434 <tcp_segs_free>
    next = NULL;
 801410a:	2300      	movs	r3, #0
 801410c:	603b      	str	r3, [r7, #0]
 801410e:	e056      	b.n	80141be <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014110:	683b      	ldr	r3, [r7, #0]
 8014112:	68db      	ldr	r3, [r3, #12]
 8014114:	899b      	ldrh	r3, [r3, #12]
 8014116:	b29b      	uxth	r3, r3
 8014118:	4618      	mov	r0, r3
 801411a:	f7f9 ff6b 	bl	800dff4 <lwip_htons>
 801411e:	4603      	mov	r3, r0
 8014120:	b2db      	uxtb	r3, r3
 8014122:	f003 0301 	and.w	r3, r3, #1
 8014126:	2b00      	cmp	r3, #0
 8014128:	d00d      	beq.n	8014146 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	68db      	ldr	r3, [r3, #12]
 801412e:	899b      	ldrh	r3, [r3, #12]
 8014130:	b29c      	uxth	r4, r3
 8014132:	2001      	movs	r0, #1
 8014134:	f7f9 ff5e 	bl	800dff4 <lwip_htons>
 8014138:	4603      	mov	r3, r0
 801413a:	461a      	mov	r2, r3
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	68db      	ldr	r3, [r3, #12]
 8014140:	4322      	orrs	r2, r4
 8014142:	b292      	uxth	r2, r2
 8014144:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8014146:	683b      	ldr	r3, [r7, #0]
 8014148:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801414a:	683b      	ldr	r3, [r7, #0]
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8014150:	68f8      	ldr	r0, [r7, #12]
 8014152:	f7fe f984 	bl	801245e <tcp_seg_free>
    while (next &&
 8014156:	683b      	ldr	r3, [r7, #0]
 8014158:	2b00      	cmp	r3, #0
 801415a:	d00e      	beq.n	801417a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	891b      	ldrh	r3, [r3, #8]
 8014160:	461a      	mov	r2, r3
 8014162:	4b1d      	ldr	r3, [pc, #116]	; (80141d8 <tcp_oos_insert_segment+0x10c>)
 8014164:	681b      	ldr	r3, [r3, #0]
 8014166:	441a      	add	r2, r3
 8014168:	683b      	ldr	r3, [r7, #0]
 801416a:	68db      	ldr	r3, [r3, #12]
 801416c:	685b      	ldr	r3, [r3, #4]
 801416e:	6839      	ldr	r1, [r7, #0]
 8014170:	8909      	ldrh	r1, [r1, #8]
 8014172:	440b      	add	r3, r1
 8014174:	1ad3      	subs	r3, r2, r3
    while (next &&
 8014176:	2b00      	cmp	r3, #0
 8014178:	daca      	bge.n	8014110 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801417a:	683b      	ldr	r3, [r7, #0]
 801417c:	2b00      	cmp	r3, #0
 801417e:	d01e      	beq.n	80141be <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	891b      	ldrh	r3, [r3, #8]
 8014184:	461a      	mov	r2, r3
 8014186:	4b14      	ldr	r3, [pc, #80]	; (80141d8 <tcp_oos_insert_segment+0x10c>)
 8014188:	681b      	ldr	r3, [r3, #0]
 801418a:	441a      	add	r2, r3
 801418c:	683b      	ldr	r3, [r7, #0]
 801418e:	68db      	ldr	r3, [r3, #12]
 8014190:	685b      	ldr	r3, [r3, #4]
 8014192:	1ad3      	subs	r3, r2, r3
    if (next &&
 8014194:	2b00      	cmp	r3, #0
 8014196:	dd12      	ble.n	80141be <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8014198:	683b      	ldr	r3, [r7, #0]
 801419a:	68db      	ldr	r3, [r3, #12]
 801419c:	685b      	ldr	r3, [r3, #4]
 801419e:	b29a      	uxth	r2, r3
 80141a0:	4b0d      	ldr	r3, [pc, #52]	; (80141d8 <tcp_oos_insert_segment+0x10c>)
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	b29b      	uxth	r3, r3
 80141a6:	1ad3      	subs	r3, r2, r3
 80141a8:	b29a      	uxth	r2, r3
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	685a      	ldr	r2, [r3, #4]
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	891b      	ldrh	r3, [r3, #8]
 80141b6:	4619      	mov	r1, r3
 80141b8:	4610      	mov	r0, r2
 80141ba:	f7fc f9b9 	bl	8010530 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	683a      	ldr	r2, [r7, #0]
 80141c2:	601a      	str	r2, [r3, #0]
}
 80141c4:	bf00      	nop
 80141c6:	3714      	adds	r7, #20
 80141c8:	46bd      	mov	sp, r7
 80141ca:	bd90      	pop	{r4, r7, pc}
 80141cc:	08027600 	.word	0x08027600
 80141d0:	080278c0 	.word	0x080278c0
 80141d4:	0802764c 	.word	0x0802764c
 80141d8:	2000fc74 	.word	0x2000fc74

080141dc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80141dc:	b5b0      	push	{r4, r5, r7, lr}
 80141de:	b086      	sub	sp, #24
 80141e0:	af00      	add	r7, sp, #0
 80141e2:	60f8      	str	r0, [r7, #12]
 80141e4:	60b9      	str	r1, [r7, #8]
 80141e6:	607a      	str	r2, [r7, #4]
 80141e8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80141ea:	e03e      	b.n	801426a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80141ec:	68bb      	ldr	r3, [r7, #8]
 80141ee:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80141f0:	68bb      	ldr	r3, [r7, #8]
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80141f6:	697b      	ldr	r3, [r7, #20]
 80141f8:	685b      	ldr	r3, [r3, #4]
 80141fa:	4618      	mov	r0, r3
 80141fc:	f7fc fbde 	bl	80109bc <pbuf_clen>
 8014200:	4603      	mov	r3, r0
 8014202:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801420a:	8a7a      	ldrh	r2, [r7, #18]
 801420c:	429a      	cmp	r2, r3
 801420e:	d906      	bls.n	801421e <tcp_free_acked_segments+0x42>
 8014210:	4b2a      	ldr	r3, [pc, #168]	; (80142bc <tcp_free_acked_segments+0xe0>)
 8014212:	f240 4257 	movw	r2, #1111	; 0x457
 8014216:	492a      	ldr	r1, [pc, #168]	; (80142c0 <tcp_free_acked_segments+0xe4>)
 8014218:	482a      	ldr	r0, [pc, #168]	; (80142c4 <tcp_free_acked_segments+0xe8>)
 801421a:	f00f fce1 	bl	8023be0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801421e:	68fb      	ldr	r3, [r7, #12]
 8014220:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8014224:	8a7b      	ldrh	r3, [r7, #18]
 8014226:	1ad3      	subs	r3, r2, r3
 8014228:	b29a      	uxth	r2, r3
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8014230:	697b      	ldr	r3, [r7, #20]
 8014232:	891a      	ldrh	r2, [r3, #8]
 8014234:	4b24      	ldr	r3, [pc, #144]	; (80142c8 <tcp_free_acked_segments+0xec>)
 8014236:	881b      	ldrh	r3, [r3, #0]
 8014238:	4413      	add	r3, r2
 801423a:	b29a      	uxth	r2, r3
 801423c:	4b22      	ldr	r3, [pc, #136]	; (80142c8 <tcp_free_acked_segments+0xec>)
 801423e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8014240:	6978      	ldr	r0, [r7, #20]
 8014242:	f7fe f90c 	bl	801245e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8014246:	68fb      	ldr	r3, [r7, #12]
 8014248:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801424c:	2b00      	cmp	r3, #0
 801424e:	d00c      	beq.n	801426a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8014250:	68bb      	ldr	r3, [r7, #8]
 8014252:	2b00      	cmp	r3, #0
 8014254:	d109      	bne.n	801426a <tcp_free_acked_segments+0x8e>
 8014256:	683b      	ldr	r3, [r7, #0]
 8014258:	2b00      	cmp	r3, #0
 801425a:	d106      	bne.n	801426a <tcp_free_acked_segments+0x8e>
 801425c:	4b17      	ldr	r3, [pc, #92]	; (80142bc <tcp_free_acked_segments+0xe0>)
 801425e:	f240 4261 	movw	r2, #1121	; 0x461
 8014262:	491a      	ldr	r1, [pc, #104]	; (80142cc <tcp_free_acked_segments+0xf0>)
 8014264:	4817      	ldr	r0, [pc, #92]	; (80142c4 <tcp_free_acked_segments+0xe8>)
 8014266:	f00f fcbb 	bl	8023be0 <iprintf>
  while (seg_list != NULL &&
 801426a:	68bb      	ldr	r3, [r7, #8]
 801426c:	2b00      	cmp	r3, #0
 801426e:	d020      	beq.n	80142b2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8014270:	68bb      	ldr	r3, [r7, #8]
 8014272:	68db      	ldr	r3, [r3, #12]
 8014274:	685b      	ldr	r3, [r3, #4]
 8014276:	4618      	mov	r0, r3
 8014278:	f7f9 fed1 	bl	800e01e <lwip_htonl>
 801427c:	4604      	mov	r4, r0
 801427e:	68bb      	ldr	r3, [r7, #8]
 8014280:	891b      	ldrh	r3, [r3, #8]
 8014282:	461d      	mov	r5, r3
 8014284:	68bb      	ldr	r3, [r7, #8]
 8014286:	68db      	ldr	r3, [r3, #12]
 8014288:	899b      	ldrh	r3, [r3, #12]
 801428a:	b29b      	uxth	r3, r3
 801428c:	4618      	mov	r0, r3
 801428e:	f7f9 feb1 	bl	800dff4 <lwip_htons>
 8014292:	4603      	mov	r3, r0
 8014294:	b2db      	uxtb	r3, r3
 8014296:	f003 0303 	and.w	r3, r3, #3
 801429a:	2b00      	cmp	r3, #0
 801429c:	d001      	beq.n	80142a2 <tcp_free_acked_segments+0xc6>
 801429e:	2301      	movs	r3, #1
 80142a0:	e000      	b.n	80142a4 <tcp_free_acked_segments+0xc8>
 80142a2:	2300      	movs	r3, #0
 80142a4:	442b      	add	r3, r5
 80142a6:	18e2      	adds	r2, r4, r3
 80142a8:	4b09      	ldr	r3, [pc, #36]	; (80142d0 <tcp_free_acked_segments+0xf4>)
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	dd9c      	ble.n	80141ec <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80142b2:	68bb      	ldr	r3, [r7, #8]
}
 80142b4:	4618      	mov	r0, r3
 80142b6:	3718      	adds	r7, #24
 80142b8:	46bd      	mov	sp, r7
 80142ba:	bdb0      	pop	{r4, r5, r7, pc}
 80142bc:	08027600 	.word	0x08027600
 80142c0:	080278e8 	.word	0x080278e8
 80142c4:	0802764c 	.word	0x0802764c
 80142c8:	2000fc7c 	.word	0x2000fc7c
 80142cc:	08027910 	.word	0x08027910
 80142d0:	2000fc78 	.word	0x2000fc78

080142d4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80142d4:	b5b0      	push	{r4, r5, r7, lr}
 80142d6:	b094      	sub	sp, #80	; 0x50
 80142d8:	af00      	add	r7, sp, #0
 80142da:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80142dc:	2300      	movs	r3, #0
 80142de:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d106      	bne.n	80142f4 <tcp_receive+0x20>
 80142e6:	4b91      	ldr	r3, [pc, #580]	; (801452c <tcp_receive+0x258>)
 80142e8:	f240 427b 	movw	r2, #1147	; 0x47b
 80142ec:	4990      	ldr	r1, [pc, #576]	; (8014530 <tcp_receive+0x25c>)
 80142ee:	4891      	ldr	r0, [pc, #580]	; (8014534 <tcp_receive+0x260>)
 80142f0:	f00f fc76 	bl	8023be0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	7d1b      	ldrb	r3, [r3, #20]
 80142f8:	2b03      	cmp	r3, #3
 80142fa:	d806      	bhi.n	801430a <tcp_receive+0x36>
 80142fc:	4b8b      	ldr	r3, [pc, #556]	; (801452c <tcp_receive+0x258>)
 80142fe:	f240 427c 	movw	r2, #1148	; 0x47c
 8014302:	498d      	ldr	r1, [pc, #564]	; (8014538 <tcp_receive+0x264>)
 8014304:	488b      	ldr	r0, [pc, #556]	; (8014534 <tcp_receive+0x260>)
 8014306:	f00f fc6b 	bl	8023be0 <iprintf>

  if (flags & TCP_ACK) {
 801430a:	4b8c      	ldr	r3, [pc, #560]	; (801453c <tcp_receive+0x268>)
 801430c:	781b      	ldrb	r3, [r3, #0]
 801430e:	f003 0310 	and.w	r3, r3, #16
 8014312:	2b00      	cmp	r3, #0
 8014314:	f000 8264 	beq.w	80147e0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801431e:	461a      	mov	r2, r3
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014324:	4413      	add	r3, r2
 8014326:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801432c:	4b84      	ldr	r3, [pc, #528]	; (8014540 <tcp_receive+0x26c>)
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	1ad3      	subs	r3, r2, r3
 8014332:	2b00      	cmp	r3, #0
 8014334:	db1b      	blt.n	801436e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801433a:	4b81      	ldr	r3, [pc, #516]	; (8014540 <tcp_receive+0x26c>)
 801433c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801433e:	429a      	cmp	r2, r3
 8014340:	d106      	bne.n	8014350 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014346:	4b7f      	ldr	r3, [pc, #508]	; (8014544 <tcp_receive+0x270>)
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	1ad3      	subs	r3, r2, r3
 801434c:	2b00      	cmp	r3, #0
 801434e:	db0e      	blt.n	801436e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014354:	4b7b      	ldr	r3, [pc, #492]	; (8014544 <tcp_receive+0x270>)
 8014356:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014358:	429a      	cmp	r2, r3
 801435a:	d125      	bne.n	80143a8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801435c:	4b7a      	ldr	r3, [pc, #488]	; (8014548 <tcp_receive+0x274>)
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	89db      	ldrh	r3, [r3, #14]
 8014362:	b29a      	uxth	r2, r3
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801436a:	429a      	cmp	r2, r3
 801436c:	d91c      	bls.n	80143a8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801436e:	4b76      	ldr	r3, [pc, #472]	; (8014548 <tcp_receive+0x274>)
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	89db      	ldrh	r3, [r3, #14]
 8014374:	b29a      	uxth	r2, r3
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014388:	429a      	cmp	r2, r3
 801438a:	d205      	bcs.n	8014398 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8014398:	4b69      	ldr	r3, [pc, #420]	; (8014540 <tcp_receive+0x26c>)
 801439a:	681a      	ldr	r2, [r3, #0]
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80143a0:	4b68      	ldr	r3, [pc, #416]	; (8014544 <tcp_receive+0x270>)
 80143a2:	681a      	ldr	r2, [r3, #0]
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80143a8:	4b66      	ldr	r3, [pc, #408]	; (8014544 <tcp_receive+0x270>)
 80143aa:	681a      	ldr	r2, [r3, #0]
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80143b0:	1ad3      	subs	r3, r2, r3
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	dc58      	bgt.n	8014468 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80143b6:	4b65      	ldr	r3, [pc, #404]	; (801454c <tcp_receive+0x278>)
 80143b8:	881b      	ldrh	r3, [r3, #0]
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d14b      	bne.n	8014456 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80143c2:	687a      	ldr	r2, [r7, #4]
 80143c4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80143c8:	4413      	add	r3, r2
 80143ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80143cc:	429a      	cmp	r2, r3
 80143ce:	d142      	bne.n	8014456 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	db3d      	blt.n	8014456 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80143de:	4b59      	ldr	r3, [pc, #356]	; (8014544 <tcp_receive+0x270>)
 80143e0:	681b      	ldr	r3, [r3, #0]
 80143e2:	429a      	cmp	r2, r3
 80143e4:	d137      	bne.n	8014456 <tcp_receive+0x182>
              found_dupack = 1;
 80143e6:	2301      	movs	r3, #1
 80143e8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80143f0:	2bff      	cmp	r3, #255	; 0xff
 80143f2:	d007      	beq.n	8014404 <tcp_receive+0x130>
                ++pcb->dupacks;
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80143fa:	3301      	adds	r3, #1
 80143fc:	b2da      	uxtb	r2, r3
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801440a:	2b03      	cmp	r3, #3
 801440c:	d91b      	bls.n	8014446 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014418:	4413      	add	r3, r2
 801441a:	b29a      	uxth	r2, r3
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014422:	429a      	cmp	r2, r3
 8014424:	d30a      	bcc.n	801443c <tcp_receive+0x168>
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014430:	4413      	add	r3, r2
 8014432:	b29a      	uxth	r2, r3
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801443a:	e004      	b.n	8014446 <tcp_receive+0x172>
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014442:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801444c:	2b02      	cmp	r3, #2
 801444e:	d902      	bls.n	8014456 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8014450:	6878      	ldr	r0, [r7, #4]
 8014452:	f002 fb43 	bl	8016adc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8014456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014458:	2b00      	cmp	r3, #0
 801445a:	f040 8161 	bne.w	8014720 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	2200      	movs	r2, #0
 8014462:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014466:	e15b      	b.n	8014720 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014468:	4b36      	ldr	r3, [pc, #216]	; (8014544 <tcp_receive+0x270>)
 801446a:	681a      	ldr	r2, [r3, #0]
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014470:	1ad3      	subs	r3, r2, r3
 8014472:	3b01      	subs	r3, #1
 8014474:	2b00      	cmp	r3, #0
 8014476:	f2c0 814e 	blt.w	8014716 <tcp_receive+0x442>
 801447a:	4b32      	ldr	r3, [pc, #200]	; (8014544 <tcp_receive+0x270>)
 801447c:	681a      	ldr	r2, [r3, #0]
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014482:	1ad3      	subs	r3, r2, r3
 8014484:	2b00      	cmp	r3, #0
 8014486:	f300 8146 	bgt.w	8014716 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	8b5b      	ldrh	r3, [r3, #26]
 801448e:	f003 0304 	and.w	r3, r3, #4
 8014492:	2b00      	cmp	r3, #0
 8014494:	d010      	beq.n	80144b8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	8b5b      	ldrh	r3, [r3, #26]
 801449a:	f023 0304 	bic.w	r3, r3, #4
 801449e:	b29a      	uxth	r2, r3
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	2200      	movs	r2, #0
 80144b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	2200      	movs	r2, #0
 80144bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80144c6:	10db      	asrs	r3, r3, #3
 80144c8:	b21b      	sxth	r3, r3
 80144ca:	b29a      	uxth	r2, r3
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80144d2:	b29b      	uxth	r3, r3
 80144d4:	4413      	add	r3, r2
 80144d6:	b29b      	uxth	r3, r3
 80144d8:	b21a      	sxth	r2, r3
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80144e0:	4b18      	ldr	r3, [pc, #96]	; (8014544 <tcp_receive+0x270>)
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	b29a      	uxth	r2, r3
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80144ea:	b29b      	uxth	r3, r3
 80144ec:	1ad3      	subs	r3, r2, r3
 80144ee:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	2200      	movs	r2, #0
 80144f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80144f8:	4b12      	ldr	r3, [pc, #72]	; (8014544 <tcp_receive+0x270>)
 80144fa:	681a      	ldr	r2, [r3, #0]
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	7d1b      	ldrb	r3, [r3, #20]
 8014504:	2b03      	cmp	r3, #3
 8014506:	f240 8097 	bls.w	8014638 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014516:	429a      	cmp	r2, r3
 8014518:	d245      	bcs.n	80145a6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	8b5b      	ldrh	r3, [r3, #26]
 801451e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014522:	2b00      	cmp	r3, #0
 8014524:	d014      	beq.n	8014550 <tcp_receive+0x27c>
 8014526:	2301      	movs	r3, #1
 8014528:	e013      	b.n	8014552 <tcp_receive+0x27e>
 801452a:	bf00      	nop
 801452c:	08027600 	.word	0x08027600
 8014530:	08027930 	.word	0x08027930
 8014534:	0802764c 	.word	0x0802764c
 8014538:	0802794c 	.word	0x0802794c
 801453c:	2000fc80 	.word	0x2000fc80
 8014540:	2000fc74 	.word	0x2000fc74
 8014544:	2000fc78 	.word	0x2000fc78
 8014548:	2000fc64 	.word	0x2000fc64
 801454c:	2000fc7e 	.word	0x2000fc7e
 8014550:	2302      	movs	r3, #2
 8014552:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8014556:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801455a:	b29a      	uxth	r2, r3
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014560:	fb12 f303 	smulbb	r3, r2, r3
 8014564:	b29b      	uxth	r3, r3
 8014566:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014568:	4293      	cmp	r3, r2
 801456a:	bf28      	it	cs
 801456c:	4613      	movcs	r3, r2
 801456e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014576:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014578:	4413      	add	r3, r2
 801457a:	b29a      	uxth	r2, r3
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014582:	429a      	cmp	r2, r3
 8014584:	d309      	bcc.n	801459a <tcp_receive+0x2c6>
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801458c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801458e:	4413      	add	r3, r2
 8014590:	b29a      	uxth	r2, r3
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014598:	e04e      	b.n	8014638 <tcp_receive+0x364>
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80145a0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80145a4:	e048      	b.n	8014638 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80145ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80145ae:	4413      	add	r3, r2
 80145b0:	b29a      	uxth	r2, r3
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80145b8:	429a      	cmp	r2, r3
 80145ba:	d309      	bcc.n	80145d0 <tcp_receive+0x2fc>
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80145c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80145c4:	4413      	add	r3, r2
 80145c6:	b29a      	uxth	r2, r3
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80145ce:	e004      	b.n	80145da <tcp_receive+0x306>
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80145d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80145e6:	429a      	cmp	r2, r3
 80145e8:	d326      	bcc.n	8014638 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80145f6:	1ad3      	subs	r3, r2, r3
 80145f8:	b29a      	uxth	r2, r3
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801460a:	4413      	add	r3, r2
 801460c:	b29a      	uxth	r2, r3
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014614:	429a      	cmp	r2, r3
 8014616:	d30a      	bcc.n	801462e <tcp_receive+0x35a>
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014622:	4413      	add	r3, r2
 8014624:	b29a      	uxth	r2, r3
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801462c:	e004      	b.n	8014638 <tcp_receive+0x364>
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014634:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014640:	4a98      	ldr	r2, [pc, #608]	; (80148a4 <tcp_receive+0x5d0>)
 8014642:	6878      	ldr	r0, [r7, #4]
 8014644:	f7ff fdca 	bl	80141dc <tcp_free_acked_segments>
 8014648:	4602      	mov	r2, r0
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014656:	4a94      	ldr	r2, [pc, #592]	; (80148a8 <tcp_receive+0x5d4>)
 8014658:	6878      	ldr	r0, [r7, #4]
 801465a:	f7ff fdbf 	bl	80141dc <tcp_free_acked_segments>
 801465e:	4602      	mov	r2, r0
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014668:	2b00      	cmp	r3, #0
 801466a:	d104      	bne.n	8014676 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014672:	861a      	strh	r2, [r3, #48]	; 0x30
 8014674:	e002      	b.n	801467c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	2200      	movs	r2, #0
 801467a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	2200      	movs	r2, #0
 8014680:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014686:	2b00      	cmp	r3, #0
 8014688:	d103      	bne.n	8014692 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	2200      	movs	r2, #0
 801468e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8014698:	4b84      	ldr	r3, [pc, #528]	; (80148ac <tcp_receive+0x5d8>)
 801469a:	881b      	ldrh	r3, [r3, #0]
 801469c:	4413      	add	r3, r2
 801469e:	b29a      	uxth	r2, r3
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	8b5b      	ldrh	r3, [r3, #26]
 80146aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d035      	beq.n	801471e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d118      	bne.n	80146ec <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d00c      	beq.n	80146dc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80146ca:	68db      	ldr	r3, [r3, #12]
 80146cc:	685b      	ldr	r3, [r3, #4]
 80146ce:	4618      	mov	r0, r3
 80146d0:	f7f9 fca5 	bl	800e01e <lwip_htonl>
 80146d4:	4603      	mov	r3, r0
 80146d6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80146d8:	2b00      	cmp	r3, #0
 80146da:	dc20      	bgt.n	801471e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	8b5b      	ldrh	r3, [r3, #26]
 80146e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80146e4:	b29a      	uxth	r2, r3
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80146ea:	e018      	b.n	801471e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80146f4:	68db      	ldr	r3, [r3, #12]
 80146f6:	685b      	ldr	r3, [r3, #4]
 80146f8:	4618      	mov	r0, r3
 80146fa:	f7f9 fc90 	bl	800e01e <lwip_htonl>
 80146fe:	4603      	mov	r3, r0
 8014700:	1ae3      	subs	r3, r4, r3
 8014702:	2b00      	cmp	r3, #0
 8014704:	dc0b      	bgt.n	801471e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	8b5b      	ldrh	r3, [r3, #26]
 801470a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801470e:	b29a      	uxth	r2, r3
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014714:	e003      	b.n	801471e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8014716:	6878      	ldr	r0, [r7, #4]
 8014718:	f002 fbce 	bl	8016eb8 <tcp_send_empty_ack>
 801471c:	e000      	b.n	8014720 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801471e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014724:	2b00      	cmp	r3, #0
 8014726:	d05b      	beq.n	80147e0 <tcp_receive+0x50c>
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801472c:	4b60      	ldr	r3, [pc, #384]	; (80148b0 <tcp_receive+0x5dc>)
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	1ad3      	subs	r3, r2, r3
 8014732:	2b00      	cmp	r3, #0
 8014734:	da54      	bge.n	80147e0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8014736:	4b5f      	ldr	r3, [pc, #380]	; (80148b4 <tcp_receive+0x5e0>)
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	b29a      	uxth	r2, r3
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014740:	b29b      	uxth	r3, r3
 8014742:	1ad3      	subs	r3, r2, r3
 8014744:	b29b      	uxth	r3, r3
 8014746:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801474a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014754:	10db      	asrs	r3, r3, #3
 8014756:	b21b      	sxth	r3, r3
 8014758:	b29b      	uxth	r3, r3
 801475a:	1ad3      	subs	r3, r2, r3
 801475c:	b29b      	uxth	r3, r3
 801475e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014768:	b29a      	uxth	r2, r3
 801476a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801476e:	4413      	add	r3, r2
 8014770:	b29b      	uxth	r3, r3
 8014772:	b21a      	sxth	r2, r3
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8014778:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801477c:	2b00      	cmp	r3, #0
 801477e:	da05      	bge.n	801478c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8014780:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014784:	425b      	negs	r3, r3
 8014786:	b29b      	uxth	r3, r3
 8014788:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801478c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014796:	109b      	asrs	r3, r3, #2
 8014798:	b21b      	sxth	r3, r3
 801479a:	b29b      	uxth	r3, r3
 801479c:	1ad3      	subs	r3, r2, r3
 801479e:	b29b      	uxth	r3, r3
 80147a0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80147aa:	b29a      	uxth	r2, r3
 80147ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80147b0:	4413      	add	r3, r2
 80147b2:	b29b      	uxth	r3, r3
 80147b4:	b21a      	sxth	r2, r3
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80147c0:	10db      	asrs	r3, r3, #3
 80147c2:	b21b      	sxth	r3, r3
 80147c4:	b29a      	uxth	r2, r3
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80147cc:	b29b      	uxth	r3, r3
 80147ce:	4413      	add	r3, r2
 80147d0:	b29b      	uxth	r3, r3
 80147d2:	b21a      	sxth	r2, r3
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	2200      	movs	r2, #0
 80147de:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80147e0:	4b35      	ldr	r3, [pc, #212]	; (80148b8 <tcp_receive+0x5e4>)
 80147e2:	881b      	ldrh	r3, [r3, #0]
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	f000 84e2 	beq.w	80151ae <tcp_receive+0xeda>
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	7d1b      	ldrb	r3, [r3, #20]
 80147ee:	2b06      	cmp	r3, #6
 80147f0:	f200 84dd 	bhi.w	80151ae <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80147f8:	4b30      	ldr	r3, [pc, #192]	; (80148bc <tcp_receive+0x5e8>)
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	1ad3      	subs	r3, r2, r3
 80147fe:	3b01      	subs	r3, #1
 8014800:	2b00      	cmp	r3, #0
 8014802:	f2c0 808f 	blt.w	8014924 <tcp_receive+0x650>
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801480a:	4b2b      	ldr	r3, [pc, #172]	; (80148b8 <tcp_receive+0x5e4>)
 801480c:	881b      	ldrh	r3, [r3, #0]
 801480e:	4619      	mov	r1, r3
 8014810:	4b2a      	ldr	r3, [pc, #168]	; (80148bc <tcp_receive+0x5e8>)
 8014812:	681b      	ldr	r3, [r3, #0]
 8014814:	440b      	add	r3, r1
 8014816:	1ad3      	subs	r3, r2, r3
 8014818:	3301      	adds	r3, #1
 801481a:	2b00      	cmp	r3, #0
 801481c:	f300 8082 	bgt.w	8014924 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8014820:	4b27      	ldr	r3, [pc, #156]	; (80148c0 <tcp_receive+0x5ec>)
 8014822:	685b      	ldr	r3, [r3, #4]
 8014824:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801482a:	4b24      	ldr	r3, [pc, #144]	; (80148bc <tcp_receive+0x5e8>)
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	1ad3      	subs	r3, r2, r3
 8014830:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8014832:	4b23      	ldr	r3, [pc, #140]	; (80148c0 <tcp_receive+0x5ec>)
 8014834:	685b      	ldr	r3, [r3, #4]
 8014836:	2b00      	cmp	r3, #0
 8014838:	d106      	bne.n	8014848 <tcp_receive+0x574>
 801483a:	4b22      	ldr	r3, [pc, #136]	; (80148c4 <tcp_receive+0x5f0>)
 801483c:	f240 5294 	movw	r2, #1428	; 0x594
 8014840:	4921      	ldr	r1, [pc, #132]	; (80148c8 <tcp_receive+0x5f4>)
 8014842:	4822      	ldr	r0, [pc, #136]	; (80148cc <tcp_receive+0x5f8>)
 8014844:	f00f f9cc 	bl	8023be0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8014848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801484a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801484e:	4293      	cmp	r3, r2
 8014850:	d906      	bls.n	8014860 <tcp_receive+0x58c>
 8014852:	4b1c      	ldr	r3, [pc, #112]	; (80148c4 <tcp_receive+0x5f0>)
 8014854:	f240 5295 	movw	r2, #1429	; 0x595
 8014858:	491d      	ldr	r1, [pc, #116]	; (80148d0 <tcp_receive+0x5fc>)
 801485a:	481c      	ldr	r0, [pc, #112]	; (80148cc <tcp_receive+0x5f8>)
 801485c:	f00f f9c0 	bl	8023be0 <iprintf>
      off = (u16_t)off32;
 8014860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014862:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8014866:	4b16      	ldr	r3, [pc, #88]	; (80148c0 <tcp_receive+0x5ec>)
 8014868:	685b      	ldr	r3, [r3, #4]
 801486a:	891b      	ldrh	r3, [r3, #8]
 801486c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014870:	429a      	cmp	r2, r3
 8014872:	d906      	bls.n	8014882 <tcp_receive+0x5ae>
 8014874:	4b13      	ldr	r3, [pc, #76]	; (80148c4 <tcp_receive+0x5f0>)
 8014876:	f240 5297 	movw	r2, #1431	; 0x597
 801487a:	4916      	ldr	r1, [pc, #88]	; (80148d4 <tcp_receive+0x600>)
 801487c:	4813      	ldr	r0, [pc, #76]	; (80148cc <tcp_receive+0x5f8>)
 801487e:	f00f f9af 	bl	8023be0 <iprintf>
      inseg.len -= off;
 8014882:	4b0f      	ldr	r3, [pc, #60]	; (80148c0 <tcp_receive+0x5ec>)
 8014884:	891a      	ldrh	r2, [r3, #8]
 8014886:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801488a:	1ad3      	subs	r3, r2, r3
 801488c:	b29a      	uxth	r2, r3
 801488e:	4b0c      	ldr	r3, [pc, #48]	; (80148c0 <tcp_receive+0x5ec>)
 8014890:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8014892:	4b0b      	ldr	r3, [pc, #44]	; (80148c0 <tcp_receive+0x5ec>)
 8014894:	685b      	ldr	r3, [r3, #4]
 8014896:	891a      	ldrh	r2, [r3, #8]
 8014898:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801489c:	1ad3      	subs	r3, r2, r3
 801489e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80148a0:	e02a      	b.n	80148f8 <tcp_receive+0x624>
 80148a2:	bf00      	nop
 80148a4:	08027968 	.word	0x08027968
 80148a8:	08027970 	.word	0x08027970
 80148ac:	2000fc7c 	.word	0x2000fc7c
 80148b0:	2000fc78 	.word	0x2000fc78
 80148b4:	2000fc3c 	.word	0x2000fc3c
 80148b8:	2000fc7e 	.word	0x2000fc7e
 80148bc:	2000fc74 	.word	0x2000fc74
 80148c0:	2000fc54 	.word	0x2000fc54
 80148c4:	08027600 	.word	0x08027600
 80148c8:	08027978 	.word	0x08027978
 80148cc:	0802764c 	.word	0x0802764c
 80148d0:	08027988 	.word	0x08027988
 80148d4:	08027998 	.word	0x08027998
        off -= p->len;
 80148d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80148da:	895b      	ldrh	r3, [r3, #10]
 80148dc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80148e0:	1ad3      	subs	r3, r2, r3
 80148e2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80148e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80148e8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80148ea:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80148ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80148ee:	2200      	movs	r2, #0
 80148f0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80148f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80148f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80148fa:	895b      	ldrh	r3, [r3, #10]
 80148fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014900:	429a      	cmp	r2, r3
 8014902:	d8e9      	bhi.n	80148d8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8014904:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014908:	4619      	mov	r1, r3
 801490a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801490c:	f7fb ff10 	bl	8010730 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014914:	4a91      	ldr	r2, [pc, #580]	; (8014b5c <tcp_receive+0x888>)
 8014916:	6013      	str	r3, [r2, #0]
 8014918:	4b91      	ldr	r3, [pc, #580]	; (8014b60 <tcp_receive+0x88c>)
 801491a:	68db      	ldr	r3, [r3, #12]
 801491c:	4a8f      	ldr	r2, [pc, #572]	; (8014b5c <tcp_receive+0x888>)
 801491e:	6812      	ldr	r2, [r2, #0]
 8014920:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014922:	e00d      	b.n	8014940 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8014924:	4b8d      	ldr	r3, [pc, #564]	; (8014b5c <tcp_receive+0x888>)
 8014926:	681a      	ldr	r2, [r3, #0]
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801492c:	1ad3      	subs	r3, r2, r3
 801492e:	2b00      	cmp	r3, #0
 8014930:	da06      	bge.n	8014940 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	8b5b      	ldrh	r3, [r3, #26]
 8014936:	f043 0302 	orr.w	r3, r3, #2
 801493a:	b29a      	uxth	r2, r3
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014940:	4b86      	ldr	r3, [pc, #536]	; (8014b5c <tcp_receive+0x888>)
 8014942:	681a      	ldr	r2, [r3, #0]
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014948:	1ad3      	subs	r3, r2, r3
 801494a:	2b00      	cmp	r3, #0
 801494c:	f2c0 842a 	blt.w	80151a4 <tcp_receive+0xed0>
 8014950:	4b82      	ldr	r3, [pc, #520]	; (8014b5c <tcp_receive+0x888>)
 8014952:	681a      	ldr	r2, [r3, #0]
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014958:	6879      	ldr	r1, [r7, #4]
 801495a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801495c:	440b      	add	r3, r1
 801495e:	1ad3      	subs	r3, r2, r3
 8014960:	3301      	adds	r3, #1
 8014962:	2b00      	cmp	r3, #0
 8014964:	f300 841e 	bgt.w	80151a4 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801496c:	4b7b      	ldr	r3, [pc, #492]	; (8014b5c <tcp_receive+0x888>)
 801496e:	681b      	ldr	r3, [r3, #0]
 8014970:	429a      	cmp	r2, r3
 8014972:	f040 829a 	bne.w	8014eaa <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8014976:	4b7a      	ldr	r3, [pc, #488]	; (8014b60 <tcp_receive+0x88c>)
 8014978:	891c      	ldrh	r4, [r3, #8]
 801497a:	4b79      	ldr	r3, [pc, #484]	; (8014b60 <tcp_receive+0x88c>)
 801497c:	68db      	ldr	r3, [r3, #12]
 801497e:	899b      	ldrh	r3, [r3, #12]
 8014980:	b29b      	uxth	r3, r3
 8014982:	4618      	mov	r0, r3
 8014984:	f7f9 fb36 	bl	800dff4 <lwip_htons>
 8014988:	4603      	mov	r3, r0
 801498a:	b2db      	uxtb	r3, r3
 801498c:	f003 0303 	and.w	r3, r3, #3
 8014990:	2b00      	cmp	r3, #0
 8014992:	d001      	beq.n	8014998 <tcp_receive+0x6c4>
 8014994:	2301      	movs	r3, #1
 8014996:	e000      	b.n	801499a <tcp_receive+0x6c6>
 8014998:	2300      	movs	r3, #0
 801499a:	4423      	add	r3, r4
 801499c:	b29a      	uxth	r2, r3
 801499e:	4b71      	ldr	r3, [pc, #452]	; (8014b64 <tcp_receive+0x890>)
 80149a0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80149a6:	4b6f      	ldr	r3, [pc, #444]	; (8014b64 <tcp_receive+0x890>)
 80149a8:	881b      	ldrh	r3, [r3, #0]
 80149aa:	429a      	cmp	r2, r3
 80149ac:	d275      	bcs.n	8014a9a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80149ae:	4b6c      	ldr	r3, [pc, #432]	; (8014b60 <tcp_receive+0x88c>)
 80149b0:	68db      	ldr	r3, [r3, #12]
 80149b2:	899b      	ldrh	r3, [r3, #12]
 80149b4:	b29b      	uxth	r3, r3
 80149b6:	4618      	mov	r0, r3
 80149b8:	f7f9 fb1c 	bl	800dff4 <lwip_htons>
 80149bc:	4603      	mov	r3, r0
 80149be:	b2db      	uxtb	r3, r3
 80149c0:	f003 0301 	and.w	r3, r3, #1
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d01f      	beq.n	8014a08 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80149c8:	4b65      	ldr	r3, [pc, #404]	; (8014b60 <tcp_receive+0x88c>)
 80149ca:	68db      	ldr	r3, [r3, #12]
 80149cc:	899b      	ldrh	r3, [r3, #12]
 80149ce:	b29b      	uxth	r3, r3
 80149d0:	b21b      	sxth	r3, r3
 80149d2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80149d6:	b21c      	sxth	r4, r3
 80149d8:	4b61      	ldr	r3, [pc, #388]	; (8014b60 <tcp_receive+0x88c>)
 80149da:	68db      	ldr	r3, [r3, #12]
 80149dc:	899b      	ldrh	r3, [r3, #12]
 80149de:	b29b      	uxth	r3, r3
 80149e0:	4618      	mov	r0, r3
 80149e2:	f7f9 fb07 	bl	800dff4 <lwip_htons>
 80149e6:	4603      	mov	r3, r0
 80149e8:	b2db      	uxtb	r3, r3
 80149ea:	b29b      	uxth	r3, r3
 80149ec:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80149f0:	b29b      	uxth	r3, r3
 80149f2:	4618      	mov	r0, r3
 80149f4:	f7f9 fafe 	bl	800dff4 <lwip_htons>
 80149f8:	4603      	mov	r3, r0
 80149fa:	b21b      	sxth	r3, r3
 80149fc:	4323      	orrs	r3, r4
 80149fe:	b21a      	sxth	r2, r3
 8014a00:	4b57      	ldr	r3, [pc, #348]	; (8014b60 <tcp_receive+0x88c>)
 8014a02:	68db      	ldr	r3, [r3, #12]
 8014a04:	b292      	uxth	r2, r2
 8014a06:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014a0c:	4b54      	ldr	r3, [pc, #336]	; (8014b60 <tcp_receive+0x88c>)
 8014a0e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8014a10:	4b53      	ldr	r3, [pc, #332]	; (8014b60 <tcp_receive+0x88c>)
 8014a12:	68db      	ldr	r3, [r3, #12]
 8014a14:	899b      	ldrh	r3, [r3, #12]
 8014a16:	b29b      	uxth	r3, r3
 8014a18:	4618      	mov	r0, r3
 8014a1a:	f7f9 faeb 	bl	800dff4 <lwip_htons>
 8014a1e:	4603      	mov	r3, r0
 8014a20:	b2db      	uxtb	r3, r3
 8014a22:	f003 0302 	and.w	r3, r3, #2
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d005      	beq.n	8014a36 <tcp_receive+0x762>
            inseg.len -= 1;
 8014a2a:	4b4d      	ldr	r3, [pc, #308]	; (8014b60 <tcp_receive+0x88c>)
 8014a2c:	891b      	ldrh	r3, [r3, #8]
 8014a2e:	3b01      	subs	r3, #1
 8014a30:	b29a      	uxth	r2, r3
 8014a32:	4b4b      	ldr	r3, [pc, #300]	; (8014b60 <tcp_receive+0x88c>)
 8014a34:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8014a36:	4b4a      	ldr	r3, [pc, #296]	; (8014b60 <tcp_receive+0x88c>)
 8014a38:	685b      	ldr	r3, [r3, #4]
 8014a3a:	4a49      	ldr	r2, [pc, #292]	; (8014b60 <tcp_receive+0x88c>)
 8014a3c:	8912      	ldrh	r2, [r2, #8]
 8014a3e:	4611      	mov	r1, r2
 8014a40:	4618      	mov	r0, r3
 8014a42:	f7fb fd75 	bl	8010530 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8014a46:	4b46      	ldr	r3, [pc, #280]	; (8014b60 <tcp_receive+0x88c>)
 8014a48:	891c      	ldrh	r4, [r3, #8]
 8014a4a:	4b45      	ldr	r3, [pc, #276]	; (8014b60 <tcp_receive+0x88c>)
 8014a4c:	68db      	ldr	r3, [r3, #12]
 8014a4e:	899b      	ldrh	r3, [r3, #12]
 8014a50:	b29b      	uxth	r3, r3
 8014a52:	4618      	mov	r0, r3
 8014a54:	f7f9 face 	bl	800dff4 <lwip_htons>
 8014a58:	4603      	mov	r3, r0
 8014a5a:	b2db      	uxtb	r3, r3
 8014a5c:	f003 0303 	and.w	r3, r3, #3
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d001      	beq.n	8014a68 <tcp_receive+0x794>
 8014a64:	2301      	movs	r3, #1
 8014a66:	e000      	b.n	8014a6a <tcp_receive+0x796>
 8014a68:	2300      	movs	r3, #0
 8014a6a:	4423      	add	r3, r4
 8014a6c:	b29a      	uxth	r2, r3
 8014a6e:	4b3d      	ldr	r3, [pc, #244]	; (8014b64 <tcp_receive+0x890>)
 8014a70:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014a72:	4b3c      	ldr	r3, [pc, #240]	; (8014b64 <tcp_receive+0x890>)
 8014a74:	881b      	ldrh	r3, [r3, #0]
 8014a76:	461a      	mov	r2, r3
 8014a78:	4b38      	ldr	r3, [pc, #224]	; (8014b5c <tcp_receive+0x888>)
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	441a      	add	r2, r3
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a82:	6879      	ldr	r1, [r7, #4]
 8014a84:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014a86:	440b      	add	r3, r1
 8014a88:	429a      	cmp	r2, r3
 8014a8a:	d006      	beq.n	8014a9a <tcp_receive+0x7c6>
 8014a8c:	4b36      	ldr	r3, [pc, #216]	; (8014b68 <tcp_receive+0x894>)
 8014a8e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8014a92:	4936      	ldr	r1, [pc, #216]	; (8014b6c <tcp_receive+0x898>)
 8014a94:	4836      	ldr	r0, [pc, #216]	; (8014b70 <tcp_receive+0x89c>)
 8014a96:	f00f f8a3 	bl	8023be0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	f000 80e7 	beq.w	8014c72 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014aa4:	4b2e      	ldr	r3, [pc, #184]	; (8014b60 <tcp_receive+0x88c>)
 8014aa6:	68db      	ldr	r3, [r3, #12]
 8014aa8:	899b      	ldrh	r3, [r3, #12]
 8014aaa:	b29b      	uxth	r3, r3
 8014aac:	4618      	mov	r0, r3
 8014aae:	f7f9 faa1 	bl	800dff4 <lwip_htons>
 8014ab2:	4603      	mov	r3, r0
 8014ab4:	b2db      	uxtb	r3, r3
 8014ab6:	f003 0301 	and.w	r3, r3, #1
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d010      	beq.n	8014ae0 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8014abe:	e00a      	b.n	8014ad6 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014ac4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014aca:	681a      	ldr	r2, [r3, #0]
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8014ad0:	68f8      	ldr	r0, [r7, #12]
 8014ad2:	f7fd fcc4 	bl	801245e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d1f0      	bne.n	8014ac0 <tcp_receive+0x7ec>
 8014ade:	e0c8      	b.n	8014c72 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8014ae6:	e052      	b.n	8014b8e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014aea:	68db      	ldr	r3, [r3, #12]
 8014aec:	899b      	ldrh	r3, [r3, #12]
 8014aee:	b29b      	uxth	r3, r3
 8014af0:	4618      	mov	r0, r3
 8014af2:	f7f9 fa7f 	bl	800dff4 <lwip_htons>
 8014af6:	4603      	mov	r3, r0
 8014af8:	b2db      	uxtb	r3, r3
 8014afa:	f003 0301 	and.w	r3, r3, #1
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d03d      	beq.n	8014b7e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8014b02:	4b17      	ldr	r3, [pc, #92]	; (8014b60 <tcp_receive+0x88c>)
 8014b04:	68db      	ldr	r3, [r3, #12]
 8014b06:	899b      	ldrh	r3, [r3, #12]
 8014b08:	b29b      	uxth	r3, r3
 8014b0a:	4618      	mov	r0, r3
 8014b0c:	f7f9 fa72 	bl	800dff4 <lwip_htons>
 8014b10:	4603      	mov	r3, r0
 8014b12:	b2db      	uxtb	r3, r3
 8014b14:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d130      	bne.n	8014b7e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8014b1c:	4b10      	ldr	r3, [pc, #64]	; (8014b60 <tcp_receive+0x88c>)
 8014b1e:	68db      	ldr	r3, [r3, #12]
 8014b20:	899b      	ldrh	r3, [r3, #12]
 8014b22:	b29c      	uxth	r4, r3
 8014b24:	2001      	movs	r0, #1
 8014b26:	f7f9 fa65 	bl	800dff4 <lwip_htons>
 8014b2a:	4603      	mov	r3, r0
 8014b2c:	461a      	mov	r2, r3
 8014b2e:	4b0c      	ldr	r3, [pc, #48]	; (8014b60 <tcp_receive+0x88c>)
 8014b30:	68db      	ldr	r3, [r3, #12]
 8014b32:	4322      	orrs	r2, r4
 8014b34:	b292      	uxth	r2, r2
 8014b36:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8014b38:	4b09      	ldr	r3, [pc, #36]	; (8014b60 <tcp_receive+0x88c>)
 8014b3a:	891c      	ldrh	r4, [r3, #8]
 8014b3c:	4b08      	ldr	r3, [pc, #32]	; (8014b60 <tcp_receive+0x88c>)
 8014b3e:	68db      	ldr	r3, [r3, #12]
 8014b40:	899b      	ldrh	r3, [r3, #12]
 8014b42:	b29b      	uxth	r3, r3
 8014b44:	4618      	mov	r0, r3
 8014b46:	f7f9 fa55 	bl	800dff4 <lwip_htons>
 8014b4a:	4603      	mov	r3, r0
 8014b4c:	b2db      	uxtb	r3, r3
 8014b4e:	f003 0303 	and.w	r3, r3, #3
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d00e      	beq.n	8014b74 <tcp_receive+0x8a0>
 8014b56:	2301      	movs	r3, #1
 8014b58:	e00d      	b.n	8014b76 <tcp_receive+0x8a2>
 8014b5a:	bf00      	nop
 8014b5c:	2000fc74 	.word	0x2000fc74
 8014b60:	2000fc54 	.word	0x2000fc54
 8014b64:	2000fc7e 	.word	0x2000fc7e
 8014b68:	08027600 	.word	0x08027600
 8014b6c:	080279a8 	.word	0x080279a8
 8014b70:	0802764c 	.word	0x0802764c
 8014b74:	2300      	movs	r3, #0
 8014b76:	4423      	add	r3, r4
 8014b78:	b29a      	uxth	r2, r3
 8014b7a:	4b98      	ldr	r3, [pc, #608]	; (8014ddc <tcp_receive+0xb08>)
 8014b7c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8014b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b80:	613b      	str	r3, [r7, #16]
              next = next->next;
 8014b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8014b88:	6938      	ldr	r0, [r7, #16]
 8014b8a:	f7fd fc68 	bl	801245e <tcp_seg_free>
            while (next &&
 8014b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d00e      	beq.n	8014bb2 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8014b94:	4b91      	ldr	r3, [pc, #580]	; (8014ddc <tcp_receive+0xb08>)
 8014b96:	881b      	ldrh	r3, [r3, #0]
 8014b98:	461a      	mov	r2, r3
 8014b9a:	4b91      	ldr	r3, [pc, #580]	; (8014de0 <tcp_receive+0xb0c>)
 8014b9c:	681b      	ldr	r3, [r3, #0]
 8014b9e:	441a      	add	r2, r3
 8014ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ba2:	68db      	ldr	r3, [r3, #12]
 8014ba4:	685b      	ldr	r3, [r3, #4]
 8014ba6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014ba8:	8909      	ldrh	r1, [r1, #8]
 8014baa:	440b      	add	r3, r1
 8014bac:	1ad3      	subs	r3, r2, r3
            while (next &&
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	da9a      	bge.n	8014ae8 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8014bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d059      	beq.n	8014c6c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8014bb8:	4b88      	ldr	r3, [pc, #544]	; (8014ddc <tcp_receive+0xb08>)
 8014bba:	881b      	ldrh	r3, [r3, #0]
 8014bbc:	461a      	mov	r2, r3
 8014bbe:	4b88      	ldr	r3, [pc, #544]	; (8014de0 <tcp_receive+0xb0c>)
 8014bc0:	681b      	ldr	r3, [r3, #0]
 8014bc2:	441a      	add	r2, r3
 8014bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014bc6:	68db      	ldr	r3, [r3, #12]
 8014bc8:	685b      	ldr	r3, [r3, #4]
 8014bca:	1ad3      	subs	r3, r2, r3
            if (next &&
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	dd4d      	ble.n	8014c6c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8014bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014bd2:	68db      	ldr	r3, [r3, #12]
 8014bd4:	685b      	ldr	r3, [r3, #4]
 8014bd6:	b29a      	uxth	r2, r3
 8014bd8:	4b81      	ldr	r3, [pc, #516]	; (8014de0 <tcp_receive+0xb0c>)
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	b29b      	uxth	r3, r3
 8014bde:	1ad3      	subs	r3, r2, r3
 8014be0:	b29a      	uxth	r2, r3
 8014be2:	4b80      	ldr	r3, [pc, #512]	; (8014de4 <tcp_receive+0xb10>)
 8014be4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8014be6:	4b7f      	ldr	r3, [pc, #508]	; (8014de4 <tcp_receive+0xb10>)
 8014be8:	68db      	ldr	r3, [r3, #12]
 8014bea:	899b      	ldrh	r3, [r3, #12]
 8014bec:	b29b      	uxth	r3, r3
 8014bee:	4618      	mov	r0, r3
 8014bf0:	f7f9 fa00 	bl	800dff4 <lwip_htons>
 8014bf4:	4603      	mov	r3, r0
 8014bf6:	b2db      	uxtb	r3, r3
 8014bf8:	f003 0302 	and.w	r3, r3, #2
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d005      	beq.n	8014c0c <tcp_receive+0x938>
                inseg.len -= 1;
 8014c00:	4b78      	ldr	r3, [pc, #480]	; (8014de4 <tcp_receive+0xb10>)
 8014c02:	891b      	ldrh	r3, [r3, #8]
 8014c04:	3b01      	subs	r3, #1
 8014c06:	b29a      	uxth	r2, r3
 8014c08:	4b76      	ldr	r3, [pc, #472]	; (8014de4 <tcp_receive+0xb10>)
 8014c0a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8014c0c:	4b75      	ldr	r3, [pc, #468]	; (8014de4 <tcp_receive+0xb10>)
 8014c0e:	685b      	ldr	r3, [r3, #4]
 8014c10:	4a74      	ldr	r2, [pc, #464]	; (8014de4 <tcp_receive+0xb10>)
 8014c12:	8912      	ldrh	r2, [r2, #8]
 8014c14:	4611      	mov	r1, r2
 8014c16:	4618      	mov	r0, r3
 8014c18:	f7fb fc8a 	bl	8010530 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8014c1c:	4b71      	ldr	r3, [pc, #452]	; (8014de4 <tcp_receive+0xb10>)
 8014c1e:	891c      	ldrh	r4, [r3, #8]
 8014c20:	4b70      	ldr	r3, [pc, #448]	; (8014de4 <tcp_receive+0xb10>)
 8014c22:	68db      	ldr	r3, [r3, #12]
 8014c24:	899b      	ldrh	r3, [r3, #12]
 8014c26:	b29b      	uxth	r3, r3
 8014c28:	4618      	mov	r0, r3
 8014c2a:	f7f9 f9e3 	bl	800dff4 <lwip_htons>
 8014c2e:	4603      	mov	r3, r0
 8014c30:	b2db      	uxtb	r3, r3
 8014c32:	f003 0303 	and.w	r3, r3, #3
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d001      	beq.n	8014c3e <tcp_receive+0x96a>
 8014c3a:	2301      	movs	r3, #1
 8014c3c:	e000      	b.n	8014c40 <tcp_receive+0x96c>
 8014c3e:	2300      	movs	r3, #0
 8014c40:	4423      	add	r3, r4
 8014c42:	b29a      	uxth	r2, r3
 8014c44:	4b65      	ldr	r3, [pc, #404]	; (8014ddc <tcp_receive+0xb08>)
 8014c46:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8014c48:	4b64      	ldr	r3, [pc, #400]	; (8014ddc <tcp_receive+0xb08>)
 8014c4a:	881b      	ldrh	r3, [r3, #0]
 8014c4c:	461a      	mov	r2, r3
 8014c4e:	4b64      	ldr	r3, [pc, #400]	; (8014de0 <tcp_receive+0xb0c>)
 8014c50:	681b      	ldr	r3, [r3, #0]
 8014c52:	441a      	add	r2, r3
 8014c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c56:	68db      	ldr	r3, [r3, #12]
 8014c58:	685b      	ldr	r3, [r3, #4]
 8014c5a:	429a      	cmp	r2, r3
 8014c5c:	d006      	beq.n	8014c6c <tcp_receive+0x998>
 8014c5e:	4b62      	ldr	r3, [pc, #392]	; (8014de8 <tcp_receive+0xb14>)
 8014c60:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8014c64:	4961      	ldr	r1, [pc, #388]	; (8014dec <tcp_receive+0xb18>)
 8014c66:	4862      	ldr	r0, [pc, #392]	; (8014df0 <tcp_receive+0xb1c>)
 8014c68:	f00e ffba 	bl	8023be0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014c70:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8014c72:	4b5a      	ldr	r3, [pc, #360]	; (8014ddc <tcp_receive+0xb08>)
 8014c74:	881b      	ldrh	r3, [r3, #0]
 8014c76:	461a      	mov	r2, r3
 8014c78:	4b59      	ldr	r3, [pc, #356]	; (8014de0 <tcp_receive+0xb0c>)
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	441a      	add	r2, r3
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014c86:	4b55      	ldr	r3, [pc, #340]	; (8014ddc <tcp_receive+0xb08>)
 8014c88:	881b      	ldrh	r3, [r3, #0]
 8014c8a:	429a      	cmp	r2, r3
 8014c8c:	d206      	bcs.n	8014c9c <tcp_receive+0x9c8>
 8014c8e:	4b56      	ldr	r3, [pc, #344]	; (8014de8 <tcp_receive+0xb14>)
 8014c90:	f240 6207 	movw	r2, #1543	; 0x607
 8014c94:	4957      	ldr	r1, [pc, #348]	; (8014df4 <tcp_receive+0xb20>)
 8014c96:	4856      	ldr	r0, [pc, #344]	; (8014df0 <tcp_receive+0xb1c>)
 8014c98:	f00e ffa2 	bl	8023be0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014ca0:	4b4e      	ldr	r3, [pc, #312]	; (8014ddc <tcp_receive+0xb08>)
 8014ca2:	881b      	ldrh	r3, [r3, #0]
 8014ca4:	1ad3      	subs	r3, r2, r3
 8014ca6:	b29a      	uxth	r2, r3
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8014cac:	6878      	ldr	r0, [r7, #4]
 8014cae:	f7fc fd99 	bl	80117e4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8014cb2:	4b4c      	ldr	r3, [pc, #304]	; (8014de4 <tcp_receive+0xb10>)
 8014cb4:	685b      	ldr	r3, [r3, #4]
 8014cb6:	891b      	ldrh	r3, [r3, #8]
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d006      	beq.n	8014cca <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8014cbc:	4b49      	ldr	r3, [pc, #292]	; (8014de4 <tcp_receive+0xb10>)
 8014cbe:	685b      	ldr	r3, [r3, #4]
 8014cc0:	4a4d      	ldr	r2, [pc, #308]	; (8014df8 <tcp_receive+0xb24>)
 8014cc2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8014cc4:	4b47      	ldr	r3, [pc, #284]	; (8014de4 <tcp_receive+0xb10>)
 8014cc6:	2200      	movs	r2, #0
 8014cc8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014cca:	4b46      	ldr	r3, [pc, #280]	; (8014de4 <tcp_receive+0xb10>)
 8014ccc:	68db      	ldr	r3, [r3, #12]
 8014cce:	899b      	ldrh	r3, [r3, #12]
 8014cd0:	b29b      	uxth	r3, r3
 8014cd2:	4618      	mov	r0, r3
 8014cd4:	f7f9 f98e 	bl	800dff4 <lwip_htons>
 8014cd8:	4603      	mov	r3, r0
 8014cda:	b2db      	uxtb	r3, r3
 8014cdc:	f003 0301 	and.w	r3, r3, #1
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	f000 80b8 	beq.w	8014e56 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8014ce6:	4b45      	ldr	r3, [pc, #276]	; (8014dfc <tcp_receive+0xb28>)
 8014ce8:	781b      	ldrb	r3, [r3, #0]
 8014cea:	f043 0320 	orr.w	r3, r3, #32
 8014cee:	b2da      	uxtb	r2, r3
 8014cf0:	4b42      	ldr	r3, [pc, #264]	; (8014dfc <tcp_receive+0xb28>)
 8014cf2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8014cf4:	e0af      	b.n	8014e56 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014cfa:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014d00:	68db      	ldr	r3, [r3, #12]
 8014d02:	685b      	ldr	r3, [r3, #4]
 8014d04:	4a36      	ldr	r2, [pc, #216]	; (8014de0 <tcp_receive+0xb0c>)
 8014d06:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8014d08:	68bb      	ldr	r3, [r7, #8]
 8014d0a:	891b      	ldrh	r3, [r3, #8]
 8014d0c:	461c      	mov	r4, r3
 8014d0e:	68bb      	ldr	r3, [r7, #8]
 8014d10:	68db      	ldr	r3, [r3, #12]
 8014d12:	899b      	ldrh	r3, [r3, #12]
 8014d14:	b29b      	uxth	r3, r3
 8014d16:	4618      	mov	r0, r3
 8014d18:	f7f9 f96c 	bl	800dff4 <lwip_htons>
 8014d1c:	4603      	mov	r3, r0
 8014d1e:	b2db      	uxtb	r3, r3
 8014d20:	f003 0303 	and.w	r3, r3, #3
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d001      	beq.n	8014d2c <tcp_receive+0xa58>
 8014d28:	2301      	movs	r3, #1
 8014d2a:	e000      	b.n	8014d2e <tcp_receive+0xa5a>
 8014d2c:	2300      	movs	r3, #0
 8014d2e:	191a      	adds	r2, r3, r4
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d34:	441a      	add	r2, r3
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014d3e:	461c      	mov	r4, r3
 8014d40:	68bb      	ldr	r3, [r7, #8]
 8014d42:	891b      	ldrh	r3, [r3, #8]
 8014d44:	461d      	mov	r5, r3
 8014d46:	68bb      	ldr	r3, [r7, #8]
 8014d48:	68db      	ldr	r3, [r3, #12]
 8014d4a:	899b      	ldrh	r3, [r3, #12]
 8014d4c:	b29b      	uxth	r3, r3
 8014d4e:	4618      	mov	r0, r3
 8014d50:	f7f9 f950 	bl	800dff4 <lwip_htons>
 8014d54:	4603      	mov	r3, r0
 8014d56:	b2db      	uxtb	r3, r3
 8014d58:	f003 0303 	and.w	r3, r3, #3
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d001      	beq.n	8014d64 <tcp_receive+0xa90>
 8014d60:	2301      	movs	r3, #1
 8014d62:	e000      	b.n	8014d66 <tcp_receive+0xa92>
 8014d64:	2300      	movs	r3, #0
 8014d66:	442b      	add	r3, r5
 8014d68:	429c      	cmp	r4, r3
 8014d6a:	d206      	bcs.n	8014d7a <tcp_receive+0xaa6>
 8014d6c:	4b1e      	ldr	r3, [pc, #120]	; (8014de8 <tcp_receive+0xb14>)
 8014d6e:	f240 622b 	movw	r2, #1579	; 0x62b
 8014d72:	4923      	ldr	r1, [pc, #140]	; (8014e00 <tcp_receive+0xb2c>)
 8014d74:	481e      	ldr	r0, [pc, #120]	; (8014df0 <tcp_receive+0xb1c>)
 8014d76:	f00e ff33 	bl	8023be0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8014d7a:	68bb      	ldr	r3, [r7, #8]
 8014d7c:	891b      	ldrh	r3, [r3, #8]
 8014d7e:	461c      	mov	r4, r3
 8014d80:	68bb      	ldr	r3, [r7, #8]
 8014d82:	68db      	ldr	r3, [r3, #12]
 8014d84:	899b      	ldrh	r3, [r3, #12]
 8014d86:	b29b      	uxth	r3, r3
 8014d88:	4618      	mov	r0, r3
 8014d8a:	f7f9 f933 	bl	800dff4 <lwip_htons>
 8014d8e:	4603      	mov	r3, r0
 8014d90:	b2db      	uxtb	r3, r3
 8014d92:	f003 0303 	and.w	r3, r3, #3
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d001      	beq.n	8014d9e <tcp_receive+0xaca>
 8014d9a:	2301      	movs	r3, #1
 8014d9c:	e000      	b.n	8014da0 <tcp_receive+0xacc>
 8014d9e:	2300      	movs	r3, #0
 8014da0:	1919      	adds	r1, r3, r4
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014da6:	b28b      	uxth	r3, r1
 8014da8:	1ad3      	subs	r3, r2, r3
 8014daa:	b29a      	uxth	r2, r3
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8014db0:	6878      	ldr	r0, [r7, #4]
 8014db2:	f7fc fd17 	bl	80117e4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8014db6:	68bb      	ldr	r3, [r7, #8]
 8014db8:	685b      	ldr	r3, [r3, #4]
 8014dba:	891b      	ldrh	r3, [r3, #8]
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	d028      	beq.n	8014e12 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8014dc0:	4b0d      	ldr	r3, [pc, #52]	; (8014df8 <tcp_receive+0xb24>)
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d01d      	beq.n	8014e04 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8014dc8:	4b0b      	ldr	r3, [pc, #44]	; (8014df8 <tcp_receive+0xb24>)
 8014dca:	681a      	ldr	r2, [r3, #0]
 8014dcc:	68bb      	ldr	r3, [r7, #8]
 8014dce:	685b      	ldr	r3, [r3, #4]
 8014dd0:	4619      	mov	r1, r3
 8014dd2:	4610      	mov	r0, r2
 8014dd4:	f7fb fe32 	bl	8010a3c <pbuf_cat>
 8014dd8:	e018      	b.n	8014e0c <tcp_receive+0xb38>
 8014dda:	bf00      	nop
 8014ddc:	2000fc7e 	.word	0x2000fc7e
 8014de0:	2000fc74 	.word	0x2000fc74
 8014de4:	2000fc54 	.word	0x2000fc54
 8014de8:	08027600 	.word	0x08027600
 8014dec:	080279e0 	.word	0x080279e0
 8014df0:	0802764c 	.word	0x0802764c
 8014df4:	08027a1c 	.word	0x08027a1c
 8014df8:	2000fc84 	.word	0x2000fc84
 8014dfc:	2000fc81 	.word	0x2000fc81
 8014e00:	08027a3c 	.word	0x08027a3c
            } else {
              recv_data = cseg->p;
 8014e04:	68bb      	ldr	r3, [r7, #8]
 8014e06:	685b      	ldr	r3, [r3, #4]
 8014e08:	4a70      	ldr	r2, [pc, #448]	; (8014fcc <tcp_receive+0xcf8>)
 8014e0a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8014e0c:	68bb      	ldr	r3, [r7, #8]
 8014e0e:	2200      	movs	r2, #0
 8014e10:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014e12:	68bb      	ldr	r3, [r7, #8]
 8014e14:	68db      	ldr	r3, [r3, #12]
 8014e16:	899b      	ldrh	r3, [r3, #12]
 8014e18:	b29b      	uxth	r3, r3
 8014e1a:	4618      	mov	r0, r3
 8014e1c:	f7f9 f8ea 	bl	800dff4 <lwip_htons>
 8014e20:	4603      	mov	r3, r0
 8014e22:	b2db      	uxtb	r3, r3
 8014e24:	f003 0301 	and.w	r3, r3, #1
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d00d      	beq.n	8014e48 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8014e2c:	4b68      	ldr	r3, [pc, #416]	; (8014fd0 <tcp_receive+0xcfc>)
 8014e2e:	781b      	ldrb	r3, [r3, #0]
 8014e30:	f043 0320 	orr.w	r3, r3, #32
 8014e34:	b2da      	uxtb	r2, r3
 8014e36:	4b66      	ldr	r3, [pc, #408]	; (8014fd0 <tcp_receive+0xcfc>)
 8014e38:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	7d1b      	ldrb	r3, [r3, #20]
 8014e3e:	2b04      	cmp	r3, #4
 8014e40:	d102      	bne.n	8014e48 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	2207      	movs	r2, #7
 8014e46:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8014e48:	68bb      	ldr	r3, [r7, #8]
 8014e4a:	681a      	ldr	r2, [r3, #0]
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8014e50:	68b8      	ldr	r0, [r7, #8]
 8014e52:	f7fd fb04 	bl	801245e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d008      	beq.n	8014e70 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014e62:	68db      	ldr	r3, [r3, #12]
 8014e64:	685a      	ldr	r2, [r3, #4]
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8014e6a:	429a      	cmp	r2, r3
 8014e6c:	f43f af43 	beq.w	8014cf6 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	8b5b      	ldrh	r3, [r3, #26]
 8014e74:	f003 0301 	and.w	r3, r3, #1
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d00e      	beq.n	8014e9a <tcp_receive+0xbc6>
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	8b5b      	ldrh	r3, [r3, #26]
 8014e80:	f023 0301 	bic.w	r3, r3, #1
 8014e84:	b29a      	uxth	r2, r3
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	835a      	strh	r2, [r3, #26]
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	8b5b      	ldrh	r3, [r3, #26]
 8014e8e:	f043 0302 	orr.w	r3, r3, #2
 8014e92:	b29a      	uxth	r2, r3
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014e98:	e188      	b.n	80151ac <tcp_receive+0xed8>
        tcp_ack(pcb);
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	8b5b      	ldrh	r3, [r3, #26]
 8014e9e:	f043 0301 	orr.w	r3, r3, #1
 8014ea2:	b29a      	uxth	r2, r3
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014ea8:	e180      	b.n	80151ac <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d106      	bne.n	8014ec0 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8014eb2:	4848      	ldr	r0, [pc, #288]	; (8014fd4 <tcp_receive+0xd00>)
 8014eb4:	f7fd faec 	bl	8012490 <tcp_seg_copy>
 8014eb8:	4602      	mov	r2, r0
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	675a      	str	r2, [r3, #116]	; 0x74
 8014ebe:	e16d      	b.n	801519c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8014ec0:	2300      	movs	r3, #0
 8014ec2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014ec8:	63bb      	str	r3, [r7, #56]	; 0x38
 8014eca:	e157      	b.n	801517c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8014ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ece:	68db      	ldr	r3, [r3, #12]
 8014ed0:	685a      	ldr	r2, [r3, #4]
 8014ed2:	4b41      	ldr	r3, [pc, #260]	; (8014fd8 <tcp_receive+0xd04>)
 8014ed4:	681b      	ldr	r3, [r3, #0]
 8014ed6:	429a      	cmp	r2, r3
 8014ed8:	d11d      	bne.n	8014f16 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8014eda:	4b3e      	ldr	r3, [pc, #248]	; (8014fd4 <tcp_receive+0xd00>)
 8014edc:	891a      	ldrh	r2, [r3, #8]
 8014ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ee0:	891b      	ldrh	r3, [r3, #8]
 8014ee2:	429a      	cmp	r2, r3
 8014ee4:	f240 814f 	bls.w	8015186 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014ee8:	483a      	ldr	r0, [pc, #232]	; (8014fd4 <tcp_receive+0xd00>)
 8014eea:	f7fd fad1 	bl	8012490 <tcp_seg_copy>
 8014eee:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8014ef0:	697b      	ldr	r3, [r7, #20]
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	f000 8149 	beq.w	801518a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8014ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d003      	beq.n	8014f06 <tcp_receive+0xc32>
                    prev->next = cseg;
 8014efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f00:	697a      	ldr	r2, [r7, #20]
 8014f02:	601a      	str	r2, [r3, #0]
 8014f04:	e002      	b.n	8014f0c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	697a      	ldr	r2, [r7, #20]
 8014f0a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8014f0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014f0e:	6978      	ldr	r0, [r7, #20]
 8014f10:	f7ff f8dc 	bl	80140cc <tcp_oos_insert_segment>
                }
                break;
 8014f14:	e139      	b.n	801518a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8014f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d117      	bne.n	8014f4c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8014f1c:	4b2e      	ldr	r3, [pc, #184]	; (8014fd8 <tcp_receive+0xd04>)
 8014f1e:	681a      	ldr	r2, [r3, #0]
 8014f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f22:	68db      	ldr	r3, [r3, #12]
 8014f24:	685b      	ldr	r3, [r3, #4]
 8014f26:	1ad3      	subs	r3, r2, r3
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	da57      	bge.n	8014fdc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014f2c:	4829      	ldr	r0, [pc, #164]	; (8014fd4 <tcp_receive+0xd00>)
 8014f2e:	f7fd faaf 	bl	8012490 <tcp_seg_copy>
 8014f32:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8014f34:	69bb      	ldr	r3, [r7, #24]
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	f000 8129 	beq.w	801518e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	69ba      	ldr	r2, [r7, #24]
 8014f40:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8014f42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014f44:	69b8      	ldr	r0, [r7, #24]
 8014f46:	f7ff f8c1 	bl	80140cc <tcp_oos_insert_segment>
                  }
                  break;
 8014f4a:	e120      	b.n	801518e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8014f4c:	4b22      	ldr	r3, [pc, #136]	; (8014fd8 <tcp_receive+0xd04>)
 8014f4e:	681a      	ldr	r2, [r3, #0]
 8014f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f52:	68db      	ldr	r3, [r3, #12]
 8014f54:	685b      	ldr	r3, [r3, #4]
 8014f56:	1ad3      	subs	r3, r2, r3
 8014f58:	3b01      	subs	r3, #1
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	db3e      	blt.n	8014fdc <tcp_receive+0xd08>
 8014f5e:	4b1e      	ldr	r3, [pc, #120]	; (8014fd8 <tcp_receive+0xd04>)
 8014f60:	681a      	ldr	r2, [r3, #0]
 8014f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f64:	68db      	ldr	r3, [r3, #12]
 8014f66:	685b      	ldr	r3, [r3, #4]
 8014f68:	1ad3      	subs	r3, r2, r3
 8014f6a:	3301      	adds	r3, #1
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	dc35      	bgt.n	8014fdc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014f70:	4818      	ldr	r0, [pc, #96]	; (8014fd4 <tcp_receive+0xd00>)
 8014f72:	f7fd fa8d 	bl	8012490 <tcp_seg_copy>
 8014f76:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8014f78:	69fb      	ldr	r3, [r7, #28]
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	f000 8109 	beq.w	8015192 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8014f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f82:	68db      	ldr	r3, [r3, #12]
 8014f84:	685b      	ldr	r3, [r3, #4]
 8014f86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014f88:	8912      	ldrh	r2, [r2, #8]
 8014f8a:	441a      	add	r2, r3
 8014f8c:	4b12      	ldr	r3, [pc, #72]	; (8014fd8 <tcp_receive+0xd04>)
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	1ad3      	subs	r3, r2, r3
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	dd12      	ble.n	8014fbc <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8014f96:	4b10      	ldr	r3, [pc, #64]	; (8014fd8 <tcp_receive+0xd04>)
 8014f98:	681b      	ldr	r3, [r3, #0]
 8014f9a:	b29a      	uxth	r2, r3
 8014f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f9e:	68db      	ldr	r3, [r3, #12]
 8014fa0:	685b      	ldr	r3, [r3, #4]
 8014fa2:	b29b      	uxth	r3, r3
 8014fa4:	1ad3      	subs	r3, r2, r3
 8014fa6:	b29a      	uxth	r2, r3
 8014fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014faa:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8014fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014fae:	685a      	ldr	r2, [r3, #4]
 8014fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014fb2:	891b      	ldrh	r3, [r3, #8]
 8014fb4:	4619      	mov	r1, r3
 8014fb6:	4610      	mov	r0, r2
 8014fb8:	f7fb faba 	bl	8010530 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8014fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014fbe:	69fa      	ldr	r2, [r7, #28]
 8014fc0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8014fc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014fc4:	69f8      	ldr	r0, [r7, #28]
 8014fc6:	f7ff f881 	bl	80140cc <tcp_oos_insert_segment>
                  }
                  break;
 8014fca:	e0e2      	b.n	8015192 <tcp_receive+0xebe>
 8014fcc:	2000fc84 	.word	0x2000fc84
 8014fd0:	2000fc81 	.word	0x2000fc81
 8014fd4:	2000fc54 	.word	0x2000fc54
 8014fd8:	2000fc74 	.word	0x2000fc74
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8014fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fde:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8014fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fe2:	681b      	ldr	r3, [r3, #0]
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	f040 80c6 	bne.w	8015176 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8014fea:	4b80      	ldr	r3, [pc, #512]	; (80151ec <tcp_receive+0xf18>)
 8014fec:	681a      	ldr	r2, [r3, #0]
 8014fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ff0:	68db      	ldr	r3, [r3, #12]
 8014ff2:	685b      	ldr	r3, [r3, #4]
 8014ff4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	f340 80bd 	ble.w	8015176 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ffe:	68db      	ldr	r3, [r3, #12]
 8015000:	899b      	ldrh	r3, [r3, #12]
 8015002:	b29b      	uxth	r3, r3
 8015004:	4618      	mov	r0, r3
 8015006:	f7f8 fff5 	bl	800dff4 <lwip_htons>
 801500a:	4603      	mov	r3, r0
 801500c:	b2db      	uxtb	r3, r3
 801500e:	f003 0301 	and.w	r3, r3, #1
 8015012:	2b00      	cmp	r3, #0
 8015014:	f040 80bf 	bne.w	8015196 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8015018:	4875      	ldr	r0, [pc, #468]	; (80151f0 <tcp_receive+0xf1c>)
 801501a:	f7fd fa39 	bl	8012490 <tcp_seg_copy>
 801501e:	4602      	mov	r2, r0
 8015020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015022:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8015024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015026:	681b      	ldr	r3, [r3, #0]
 8015028:	2b00      	cmp	r3, #0
 801502a:	f000 80b6 	beq.w	801519a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801502e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015030:	68db      	ldr	r3, [r3, #12]
 8015032:	685b      	ldr	r3, [r3, #4]
 8015034:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015036:	8912      	ldrh	r2, [r2, #8]
 8015038:	441a      	add	r2, r3
 801503a:	4b6c      	ldr	r3, [pc, #432]	; (80151ec <tcp_receive+0xf18>)
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	1ad3      	subs	r3, r2, r3
 8015040:	2b00      	cmp	r3, #0
 8015042:	dd12      	ble.n	801506a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8015044:	4b69      	ldr	r3, [pc, #420]	; (80151ec <tcp_receive+0xf18>)
 8015046:	681b      	ldr	r3, [r3, #0]
 8015048:	b29a      	uxth	r2, r3
 801504a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801504c:	68db      	ldr	r3, [r3, #12]
 801504e:	685b      	ldr	r3, [r3, #4]
 8015050:	b29b      	uxth	r3, r3
 8015052:	1ad3      	subs	r3, r2, r3
 8015054:	b29a      	uxth	r2, r3
 8015056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015058:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801505a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801505c:	685a      	ldr	r2, [r3, #4]
 801505e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015060:	891b      	ldrh	r3, [r3, #8]
 8015062:	4619      	mov	r1, r3
 8015064:	4610      	mov	r0, r2
 8015066:	f7fb fa63 	bl	8010530 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801506a:	4b62      	ldr	r3, [pc, #392]	; (80151f4 <tcp_receive+0xf20>)
 801506c:	881b      	ldrh	r3, [r3, #0]
 801506e:	461a      	mov	r2, r3
 8015070:	4b5e      	ldr	r3, [pc, #376]	; (80151ec <tcp_receive+0xf18>)
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	441a      	add	r2, r3
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801507a:	6879      	ldr	r1, [r7, #4]
 801507c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801507e:	440b      	add	r3, r1
 8015080:	1ad3      	subs	r3, r2, r3
 8015082:	2b00      	cmp	r3, #0
 8015084:	f340 8089 	ble.w	801519a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8015088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	68db      	ldr	r3, [r3, #12]
 801508e:	899b      	ldrh	r3, [r3, #12]
 8015090:	b29b      	uxth	r3, r3
 8015092:	4618      	mov	r0, r3
 8015094:	f7f8 ffae 	bl	800dff4 <lwip_htons>
 8015098:	4603      	mov	r3, r0
 801509a:	b2db      	uxtb	r3, r3
 801509c:	f003 0301 	and.w	r3, r3, #1
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d022      	beq.n	80150ea <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80150a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150a6:	681b      	ldr	r3, [r3, #0]
 80150a8:	68db      	ldr	r3, [r3, #12]
 80150aa:	899b      	ldrh	r3, [r3, #12]
 80150ac:	b29b      	uxth	r3, r3
 80150ae:	b21b      	sxth	r3, r3
 80150b0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80150b4:	b21c      	sxth	r4, r3
 80150b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	68db      	ldr	r3, [r3, #12]
 80150bc:	899b      	ldrh	r3, [r3, #12]
 80150be:	b29b      	uxth	r3, r3
 80150c0:	4618      	mov	r0, r3
 80150c2:	f7f8 ff97 	bl	800dff4 <lwip_htons>
 80150c6:	4603      	mov	r3, r0
 80150c8:	b2db      	uxtb	r3, r3
 80150ca:	b29b      	uxth	r3, r3
 80150cc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80150d0:	b29b      	uxth	r3, r3
 80150d2:	4618      	mov	r0, r3
 80150d4:	f7f8 ff8e 	bl	800dff4 <lwip_htons>
 80150d8:	4603      	mov	r3, r0
 80150da:	b21b      	sxth	r3, r3
 80150dc:	4323      	orrs	r3, r4
 80150de:	b21a      	sxth	r2, r3
 80150e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	68db      	ldr	r3, [r3, #12]
 80150e6:	b292      	uxth	r2, r2
 80150e8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150ee:	b29a      	uxth	r2, r3
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80150f4:	4413      	add	r3, r2
 80150f6:	b299      	uxth	r1, r3
 80150f8:	4b3c      	ldr	r3, [pc, #240]	; (80151ec <tcp_receive+0xf18>)
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	b29a      	uxth	r2, r3
 80150fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	1a8a      	subs	r2, r1, r2
 8015104:	b292      	uxth	r2, r2
 8015106:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8015108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	685a      	ldr	r2, [r3, #4]
 801510e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015110:	681b      	ldr	r3, [r3, #0]
 8015112:	891b      	ldrh	r3, [r3, #8]
 8015114:	4619      	mov	r1, r3
 8015116:	4610      	mov	r0, r2
 8015118:	f7fb fa0a 	bl	8010530 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801511c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801511e:	681b      	ldr	r3, [r3, #0]
 8015120:	891c      	ldrh	r4, [r3, #8]
 8015122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015124:	681b      	ldr	r3, [r3, #0]
 8015126:	68db      	ldr	r3, [r3, #12]
 8015128:	899b      	ldrh	r3, [r3, #12]
 801512a:	b29b      	uxth	r3, r3
 801512c:	4618      	mov	r0, r3
 801512e:	f7f8 ff61 	bl	800dff4 <lwip_htons>
 8015132:	4603      	mov	r3, r0
 8015134:	b2db      	uxtb	r3, r3
 8015136:	f003 0303 	and.w	r3, r3, #3
 801513a:	2b00      	cmp	r3, #0
 801513c:	d001      	beq.n	8015142 <tcp_receive+0xe6e>
 801513e:	2301      	movs	r3, #1
 8015140:	e000      	b.n	8015144 <tcp_receive+0xe70>
 8015142:	2300      	movs	r3, #0
 8015144:	4423      	add	r3, r4
 8015146:	b29a      	uxth	r2, r3
 8015148:	4b2a      	ldr	r3, [pc, #168]	; (80151f4 <tcp_receive+0xf20>)
 801514a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801514c:	4b29      	ldr	r3, [pc, #164]	; (80151f4 <tcp_receive+0xf20>)
 801514e:	881b      	ldrh	r3, [r3, #0]
 8015150:	461a      	mov	r2, r3
 8015152:	4b26      	ldr	r3, [pc, #152]	; (80151ec <tcp_receive+0xf18>)
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	441a      	add	r2, r3
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801515c:	6879      	ldr	r1, [r7, #4]
 801515e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015160:	440b      	add	r3, r1
 8015162:	429a      	cmp	r2, r3
 8015164:	d019      	beq.n	801519a <tcp_receive+0xec6>
 8015166:	4b24      	ldr	r3, [pc, #144]	; (80151f8 <tcp_receive+0xf24>)
 8015168:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801516c:	4923      	ldr	r1, [pc, #140]	; (80151fc <tcp_receive+0xf28>)
 801516e:	4824      	ldr	r0, [pc, #144]	; (8015200 <tcp_receive+0xf2c>)
 8015170:	f00e fd36 	bl	8023be0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8015174:	e011      	b.n	801519a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015178:	681b      	ldr	r3, [r3, #0]
 801517a:	63bb      	str	r3, [r7, #56]	; 0x38
 801517c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801517e:	2b00      	cmp	r3, #0
 8015180:	f47f aea4 	bne.w	8014ecc <tcp_receive+0xbf8>
 8015184:	e00a      	b.n	801519c <tcp_receive+0xec8>
                break;
 8015186:	bf00      	nop
 8015188:	e008      	b.n	801519c <tcp_receive+0xec8>
                break;
 801518a:	bf00      	nop
 801518c:	e006      	b.n	801519c <tcp_receive+0xec8>
                  break;
 801518e:	bf00      	nop
 8015190:	e004      	b.n	801519c <tcp_receive+0xec8>
                  break;
 8015192:	bf00      	nop
 8015194:	e002      	b.n	801519c <tcp_receive+0xec8>
                  break;
 8015196:	bf00      	nop
 8015198:	e000      	b.n	801519c <tcp_receive+0xec8>
                break;
 801519a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801519c:	6878      	ldr	r0, [r7, #4]
 801519e:	f001 fe8b 	bl	8016eb8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80151a2:	e003      	b.n	80151ac <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80151a4:	6878      	ldr	r0, [r7, #4]
 80151a6:	f001 fe87 	bl	8016eb8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80151aa:	e01a      	b.n	80151e2 <tcp_receive+0xf0e>
 80151ac:	e019      	b.n	80151e2 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80151ae:	4b0f      	ldr	r3, [pc, #60]	; (80151ec <tcp_receive+0xf18>)
 80151b0:	681a      	ldr	r2, [r3, #0]
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151b6:	1ad3      	subs	r3, r2, r3
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	db0a      	blt.n	80151d2 <tcp_receive+0xefe>
 80151bc:	4b0b      	ldr	r3, [pc, #44]	; (80151ec <tcp_receive+0xf18>)
 80151be:	681a      	ldr	r2, [r3, #0]
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151c4:	6879      	ldr	r1, [r7, #4]
 80151c6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80151c8:	440b      	add	r3, r1
 80151ca:	1ad3      	subs	r3, r2, r3
 80151cc:	3301      	adds	r3, #1
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	dd07      	ble.n	80151e2 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	8b5b      	ldrh	r3, [r3, #26]
 80151d6:	f043 0302 	orr.w	r3, r3, #2
 80151da:	b29a      	uxth	r2, r3
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80151e0:	e7ff      	b.n	80151e2 <tcp_receive+0xf0e>
 80151e2:	bf00      	nop
 80151e4:	3750      	adds	r7, #80	; 0x50
 80151e6:	46bd      	mov	sp, r7
 80151e8:	bdb0      	pop	{r4, r5, r7, pc}
 80151ea:	bf00      	nop
 80151ec:	2000fc74 	.word	0x2000fc74
 80151f0:	2000fc54 	.word	0x2000fc54
 80151f4:	2000fc7e 	.word	0x2000fc7e
 80151f8:	08027600 	.word	0x08027600
 80151fc:	080279a8 	.word	0x080279a8
 8015200:	0802764c 	.word	0x0802764c

08015204 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8015204:	b480      	push	{r7}
 8015206:	b083      	sub	sp, #12
 8015208:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801520a:	4b15      	ldr	r3, [pc, #84]	; (8015260 <tcp_get_next_optbyte+0x5c>)
 801520c:	881b      	ldrh	r3, [r3, #0]
 801520e:	1c5a      	adds	r2, r3, #1
 8015210:	b291      	uxth	r1, r2
 8015212:	4a13      	ldr	r2, [pc, #76]	; (8015260 <tcp_get_next_optbyte+0x5c>)
 8015214:	8011      	strh	r1, [r2, #0]
 8015216:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8015218:	4b12      	ldr	r3, [pc, #72]	; (8015264 <tcp_get_next_optbyte+0x60>)
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	2b00      	cmp	r3, #0
 801521e:	d004      	beq.n	801522a <tcp_get_next_optbyte+0x26>
 8015220:	4b11      	ldr	r3, [pc, #68]	; (8015268 <tcp_get_next_optbyte+0x64>)
 8015222:	881b      	ldrh	r3, [r3, #0]
 8015224:	88fa      	ldrh	r2, [r7, #6]
 8015226:	429a      	cmp	r2, r3
 8015228:	d208      	bcs.n	801523c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801522a:	4b10      	ldr	r3, [pc, #64]	; (801526c <tcp_get_next_optbyte+0x68>)
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	3314      	adds	r3, #20
 8015230:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8015232:	88fb      	ldrh	r3, [r7, #6]
 8015234:	683a      	ldr	r2, [r7, #0]
 8015236:	4413      	add	r3, r2
 8015238:	781b      	ldrb	r3, [r3, #0]
 801523a:	e00b      	b.n	8015254 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801523c:	88fb      	ldrh	r3, [r7, #6]
 801523e:	b2da      	uxtb	r2, r3
 8015240:	4b09      	ldr	r3, [pc, #36]	; (8015268 <tcp_get_next_optbyte+0x64>)
 8015242:	881b      	ldrh	r3, [r3, #0]
 8015244:	b2db      	uxtb	r3, r3
 8015246:	1ad3      	subs	r3, r2, r3
 8015248:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801524a:	4b06      	ldr	r3, [pc, #24]	; (8015264 <tcp_get_next_optbyte+0x60>)
 801524c:	681a      	ldr	r2, [r3, #0]
 801524e:	797b      	ldrb	r3, [r7, #5]
 8015250:	4413      	add	r3, r2
 8015252:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015254:	4618      	mov	r0, r3
 8015256:	370c      	adds	r7, #12
 8015258:	46bd      	mov	sp, r7
 801525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801525e:	4770      	bx	lr
 8015260:	2000fc70 	.word	0x2000fc70
 8015264:	2000fc6c 	.word	0x2000fc6c
 8015268:	2000fc6a 	.word	0x2000fc6a
 801526c:	2000fc64 	.word	0x2000fc64

08015270 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8015270:	b580      	push	{r7, lr}
 8015272:	b084      	sub	sp, #16
 8015274:	af00      	add	r7, sp, #0
 8015276:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	2b00      	cmp	r3, #0
 801527c:	d106      	bne.n	801528c <tcp_parseopt+0x1c>
 801527e:	4b32      	ldr	r3, [pc, #200]	; (8015348 <tcp_parseopt+0xd8>)
 8015280:	f240 727d 	movw	r2, #1917	; 0x77d
 8015284:	4931      	ldr	r1, [pc, #196]	; (801534c <tcp_parseopt+0xdc>)
 8015286:	4832      	ldr	r0, [pc, #200]	; (8015350 <tcp_parseopt+0xe0>)
 8015288:	f00e fcaa 	bl	8023be0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801528c:	4b31      	ldr	r3, [pc, #196]	; (8015354 <tcp_parseopt+0xe4>)
 801528e:	881b      	ldrh	r3, [r3, #0]
 8015290:	2b00      	cmp	r3, #0
 8015292:	d055      	beq.n	8015340 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015294:	4b30      	ldr	r3, [pc, #192]	; (8015358 <tcp_parseopt+0xe8>)
 8015296:	2200      	movs	r2, #0
 8015298:	801a      	strh	r2, [r3, #0]
 801529a:	e045      	b.n	8015328 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801529c:	f7ff ffb2 	bl	8015204 <tcp_get_next_optbyte>
 80152a0:	4603      	mov	r3, r0
 80152a2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80152a4:	7bfb      	ldrb	r3, [r7, #15]
 80152a6:	2b02      	cmp	r3, #2
 80152a8:	d006      	beq.n	80152b8 <tcp_parseopt+0x48>
 80152aa:	2b02      	cmp	r3, #2
 80152ac:	dc2b      	bgt.n	8015306 <tcp_parseopt+0x96>
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d041      	beq.n	8015336 <tcp_parseopt+0xc6>
 80152b2:	2b01      	cmp	r3, #1
 80152b4:	d127      	bne.n	8015306 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80152b6:	e037      	b.n	8015328 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80152b8:	f7ff ffa4 	bl	8015204 <tcp_get_next_optbyte>
 80152bc:	4603      	mov	r3, r0
 80152be:	2b04      	cmp	r3, #4
 80152c0:	d13b      	bne.n	801533a <tcp_parseopt+0xca>
 80152c2:	4b25      	ldr	r3, [pc, #148]	; (8015358 <tcp_parseopt+0xe8>)
 80152c4:	881b      	ldrh	r3, [r3, #0]
 80152c6:	3301      	adds	r3, #1
 80152c8:	4a22      	ldr	r2, [pc, #136]	; (8015354 <tcp_parseopt+0xe4>)
 80152ca:	8812      	ldrh	r2, [r2, #0]
 80152cc:	4293      	cmp	r3, r2
 80152ce:	da34      	bge.n	801533a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80152d0:	f7ff ff98 	bl	8015204 <tcp_get_next_optbyte>
 80152d4:	4603      	mov	r3, r0
 80152d6:	b29b      	uxth	r3, r3
 80152d8:	021b      	lsls	r3, r3, #8
 80152da:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80152dc:	f7ff ff92 	bl	8015204 <tcp_get_next_optbyte>
 80152e0:	4603      	mov	r3, r0
 80152e2:	b29a      	uxth	r2, r3
 80152e4:	89bb      	ldrh	r3, [r7, #12]
 80152e6:	4313      	orrs	r3, r2
 80152e8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80152ea:	89bb      	ldrh	r3, [r7, #12]
 80152ec:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80152f0:	d804      	bhi.n	80152fc <tcp_parseopt+0x8c>
 80152f2:	89bb      	ldrh	r3, [r7, #12]
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	d001      	beq.n	80152fc <tcp_parseopt+0x8c>
 80152f8:	89ba      	ldrh	r2, [r7, #12]
 80152fa:	e001      	b.n	8015300 <tcp_parseopt+0x90>
 80152fc:	f44f 7206 	mov.w	r2, #536	; 0x218
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8015304:	e010      	b.n	8015328 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8015306:	f7ff ff7d 	bl	8015204 <tcp_get_next_optbyte>
 801530a:	4603      	mov	r3, r0
 801530c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801530e:	7afb      	ldrb	r3, [r7, #11]
 8015310:	2b01      	cmp	r3, #1
 8015312:	d914      	bls.n	801533e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8015314:	7afb      	ldrb	r3, [r7, #11]
 8015316:	b29a      	uxth	r2, r3
 8015318:	4b0f      	ldr	r3, [pc, #60]	; (8015358 <tcp_parseopt+0xe8>)
 801531a:	881b      	ldrh	r3, [r3, #0]
 801531c:	4413      	add	r3, r2
 801531e:	b29b      	uxth	r3, r3
 8015320:	3b02      	subs	r3, #2
 8015322:	b29a      	uxth	r2, r3
 8015324:	4b0c      	ldr	r3, [pc, #48]	; (8015358 <tcp_parseopt+0xe8>)
 8015326:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015328:	4b0b      	ldr	r3, [pc, #44]	; (8015358 <tcp_parseopt+0xe8>)
 801532a:	881a      	ldrh	r2, [r3, #0]
 801532c:	4b09      	ldr	r3, [pc, #36]	; (8015354 <tcp_parseopt+0xe4>)
 801532e:	881b      	ldrh	r3, [r3, #0]
 8015330:	429a      	cmp	r2, r3
 8015332:	d3b3      	bcc.n	801529c <tcp_parseopt+0x2c>
 8015334:	e004      	b.n	8015340 <tcp_parseopt+0xd0>
          return;
 8015336:	bf00      	nop
 8015338:	e002      	b.n	8015340 <tcp_parseopt+0xd0>
            return;
 801533a:	bf00      	nop
 801533c:	e000      	b.n	8015340 <tcp_parseopt+0xd0>
            return;
 801533e:	bf00      	nop
      }
    }
  }
}
 8015340:	3710      	adds	r7, #16
 8015342:	46bd      	mov	sp, r7
 8015344:	bd80      	pop	{r7, pc}
 8015346:	bf00      	nop
 8015348:	08027600 	.word	0x08027600
 801534c:	08027a64 	.word	0x08027a64
 8015350:	0802764c 	.word	0x0802764c
 8015354:	2000fc68 	.word	0x2000fc68
 8015358:	2000fc70 	.word	0x2000fc70

0801535c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801535c:	b480      	push	{r7}
 801535e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8015360:	4b05      	ldr	r3, [pc, #20]	; (8015378 <tcp_trigger_input_pcb_close+0x1c>)
 8015362:	781b      	ldrb	r3, [r3, #0]
 8015364:	f043 0310 	orr.w	r3, r3, #16
 8015368:	b2da      	uxtb	r2, r3
 801536a:	4b03      	ldr	r3, [pc, #12]	; (8015378 <tcp_trigger_input_pcb_close+0x1c>)
 801536c:	701a      	strb	r2, [r3, #0]
}
 801536e:	bf00      	nop
 8015370:	46bd      	mov	sp, r7
 8015372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015376:	4770      	bx	lr
 8015378:	2000fc81 	.word	0x2000fc81

0801537c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801537c:	b580      	push	{r7, lr}
 801537e:	b084      	sub	sp, #16
 8015380:	af00      	add	r7, sp, #0
 8015382:	60f8      	str	r0, [r7, #12]
 8015384:	60b9      	str	r1, [r7, #8]
 8015386:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	2b00      	cmp	r3, #0
 801538c:	d00a      	beq.n	80153a4 <tcp_route+0x28>
 801538e:	68fb      	ldr	r3, [r7, #12]
 8015390:	7a1b      	ldrb	r3, [r3, #8]
 8015392:	2b00      	cmp	r3, #0
 8015394:	d006      	beq.n	80153a4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	7a1b      	ldrb	r3, [r3, #8]
 801539a:	4618      	mov	r0, r3
 801539c:	f7fa fe88 	bl	80100b0 <netif_get_by_index>
 80153a0:	4603      	mov	r3, r0
 80153a2:	e003      	b.n	80153ac <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80153a4:	6878      	ldr	r0, [r7, #4]
 80153a6:	f004 fbb7 	bl	8019b18 <ip4_route>
 80153aa:	4603      	mov	r3, r0
  }
}
 80153ac:	4618      	mov	r0, r3
 80153ae:	3710      	adds	r7, #16
 80153b0:	46bd      	mov	sp, r7
 80153b2:	bd80      	pop	{r7, pc}

080153b4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80153b4:	b590      	push	{r4, r7, lr}
 80153b6:	b087      	sub	sp, #28
 80153b8:	af00      	add	r7, sp, #0
 80153ba:	60f8      	str	r0, [r7, #12]
 80153bc:	60b9      	str	r1, [r7, #8]
 80153be:	603b      	str	r3, [r7, #0]
 80153c0:	4613      	mov	r3, r2
 80153c2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d105      	bne.n	80153d6 <tcp_create_segment+0x22>
 80153ca:	4b44      	ldr	r3, [pc, #272]	; (80154dc <tcp_create_segment+0x128>)
 80153cc:	22a3      	movs	r2, #163	; 0xa3
 80153ce:	4944      	ldr	r1, [pc, #272]	; (80154e0 <tcp_create_segment+0x12c>)
 80153d0:	4844      	ldr	r0, [pc, #272]	; (80154e4 <tcp_create_segment+0x130>)
 80153d2:	f00e fc05 	bl	8023be0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80153d6:	68bb      	ldr	r3, [r7, #8]
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d105      	bne.n	80153e8 <tcp_create_segment+0x34>
 80153dc:	4b3f      	ldr	r3, [pc, #252]	; (80154dc <tcp_create_segment+0x128>)
 80153de:	22a4      	movs	r2, #164	; 0xa4
 80153e0:	4941      	ldr	r1, [pc, #260]	; (80154e8 <tcp_create_segment+0x134>)
 80153e2:	4840      	ldr	r0, [pc, #256]	; (80154e4 <tcp_create_segment+0x130>)
 80153e4:	f00e fbfc 	bl	8023be0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80153e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80153ec:	009b      	lsls	r3, r3, #2
 80153ee:	b2db      	uxtb	r3, r3
 80153f0:	f003 0304 	and.w	r3, r3, #4
 80153f4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80153f6:	2003      	movs	r0, #3
 80153f8:	f7fa fad4 	bl	800f9a4 <memp_malloc>
 80153fc:	6138      	str	r0, [r7, #16]
 80153fe:	693b      	ldr	r3, [r7, #16]
 8015400:	2b00      	cmp	r3, #0
 8015402:	d104      	bne.n	801540e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8015404:	68b8      	ldr	r0, [r7, #8]
 8015406:	f7fb fa4b 	bl	80108a0 <pbuf_free>
    return NULL;
 801540a:	2300      	movs	r3, #0
 801540c:	e061      	b.n	80154d2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801540e:	693b      	ldr	r3, [r7, #16]
 8015410:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015414:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8015416:	693b      	ldr	r3, [r7, #16]
 8015418:	2200      	movs	r2, #0
 801541a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801541c:	693b      	ldr	r3, [r7, #16]
 801541e:	68ba      	ldr	r2, [r7, #8]
 8015420:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8015422:	68bb      	ldr	r3, [r7, #8]
 8015424:	891a      	ldrh	r2, [r3, #8]
 8015426:	7dfb      	ldrb	r3, [r7, #23]
 8015428:	b29b      	uxth	r3, r3
 801542a:	429a      	cmp	r2, r3
 801542c:	d205      	bcs.n	801543a <tcp_create_segment+0x86>
 801542e:	4b2b      	ldr	r3, [pc, #172]	; (80154dc <tcp_create_segment+0x128>)
 8015430:	22b0      	movs	r2, #176	; 0xb0
 8015432:	492e      	ldr	r1, [pc, #184]	; (80154ec <tcp_create_segment+0x138>)
 8015434:	482b      	ldr	r0, [pc, #172]	; (80154e4 <tcp_create_segment+0x130>)
 8015436:	f00e fbd3 	bl	8023be0 <iprintf>
  seg->len = p->tot_len - optlen;
 801543a:	68bb      	ldr	r3, [r7, #8]
 801543c:	891a      	ldrh	r2, [r3, #8]
 801543e:	7dfb      	ldrb	r3, [r7, #23]
 8015440:	b29b      	uxth	r3, r3
 8015442:	1ad3      	subs	r3, r2, r3
 8015444:	b29a      	uxth	r2, r3
 8015446:	693b      	ldr	r3, [r7, #16]
 8015448:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801544a:	2114      	movs	r1, #20
 801544c:	68b8      	ldr	r0, [r7, #8]
 801544e:	f7fb f95f 	bl	8010710 <pbuf_add_header>
 8015452:	4603      	mov	r3, r0
 8015454:	2b00      	cmp	r3, #0
 8015456:	d004      	beq.n	8015462 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8015458:	6938      	ldr	r0, [r7, #16]
 801545a:	f7fd f800 	bl	801245e <tcp_seg_free>
    return NULL;
 801545e:	2300      	movs	r3, #0
 8015460:	e037      	b.n	80154d2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8015462:	693b      	ldr	r3, [r7, #16]
 8015464:	685b      	ldr	r3, [r3, #4]
 8015466:	685a      	ldr	r2, [r3, #4]
 8015468:	693b      	ldr	r3, [r7, #16]
 801546a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801546c:	68fb      	ldr	r3, [r7, #12]
 801546e:	8ada      	ldrh	r2, [r3, #22]
 8015470:	693b      	ldr	r3, [r7, #16]
 8015472:	68dc      	ldr	r4, [r3, #12]
 8015474:	4610      	mov	r0, r2
 8015476:	f7f8 fdbd 	bl	800dff4 <lwip_htons>
 801547a:	4603      	mov	r3, r0
 801547c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	8b1a      	ldrh	r2, [r3, #24]
 8015482:	693b      	ldr	r3, [r7, #16]
 8015484:	68dc      	ldr	r4, [r3, #12]
 8015486:	4610      	mov	r0, r2
 8015488:	f7f8 fdb4 	bl	800dff4 <lwip_htons>
 801548c:	4603      	mov	r3, r0
 801548e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8015490:	693b      	ldr	r3, [r7, #16]
 8015492:	68dc      	ldr	r4, [r3, #12]
 8015494:	6838      	ldr	r0, [r7, #0]
 8015496:	f7f8 fdc2 	bl	800e01e <lwip_htonl>
 801549a:	4603      	mov	r3, r0
 801549c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801549e:	7dfb      	ldrb	r3, [r7, #23]
 80154a0:	089b      	lsrs	r3, r3, #2
 80154a2:	b2db      	uxtb	r3, r3
 80154a4:	b29b      	uxth	r3, r3
 80154a6:	3305      	adds	r3, #5
 80154a8:	b29b      	uxth	r3, r3
 80154aa:	031b      	lsls	r3, r3, #12
 80154ac:	b29a      	uxth	r2, r3
 80154ae:	79fb      	ldrb	r3, [r7, #7]
 80154b0:	b29b      	uxth	r3, r3
 80154b2:	4313      	orrs	r3, r2
 80154b4:	b29a      	uxth	r2, r3
 80154b6:	693b      	ldr	r3, [r7, #16]
 80154b8:	68dc      	ldr	r4, [r3, #12]
 80154ba:	4610      	mov	r0, r2
 80154bc:	f7f8 fd9a 	bl	800dff4 <lwip_htons>
 80154c0:	4603      	mov	r3, r0
 80154c2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80154c4:	693b      	ldr	r3, [r7, #16]
 80154c6:	68db      	ldr	r3, [r3, #12]
 80154c8:	2200      	movs	r2, #0
 80154ca:	749a      	strb	r2, [r3, #18]
 80154cc:	2200      	movs	r2, #0
 80154ce:	74da      	strb	r2, [r3, #19]
  return seg;
 80154d0:	693b      	ldr	r3, [r7, #16]
}
 80154d2:	4618      	mov	r0, r3
 80154d4:	371c      	adds	r7, #28
 80154d6:	46bd      	mov	sp, r7
 80154d8:	bd90      	pop	{r4, r7, pc}
 80154da:	bf00      	nop
 80154dc:	08027a80 	.word	0x08027a80
 80154e0:	08027ab4 	.word	0x08027ab4
 80154e4:	08027ad4 	.word	0x08027ad4
 80154e8:	08027afc 	.word	0x08027afc
 80154ec:	08027b20 	.word	0x08027b20

080154f0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80154f0:	b580      	push	{r7, lr}
 80154f2:	b086      	sub	sp, #24
 80154f4:	af00      	add	r7, sp, #0
 80154f6:	607b      	str	r3, [r7, #4]
 80154f8:	4603      	mov	r3, r0
 80154fa:	73fb      	strb	r3, [r7, #15]
 80154fc:	460b      	mov	r3, r1
 80154fe:	81bb      	strh	r3, [r7, #12]
 8015500:	4613      	mov	r3, r2
 8015502:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8015504:	89bb      	ldrh	r3, [r7, #12]
 8015506:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	2b00      	cmp	r3, #0
 801550c:	d105      	bne.n	801551a <tcp_pbuf_prealloc+0x2a>
 801550e:	4b30      	ldr	r3, [pc, #192]	; (80155d0 <tcp_pbuf_prealloc+0xe0>)
 8015510:	22e8      	movs	r2, #232	; 0xe8
 8015512:	4930      	ldr	r1, [pc, #192]	; (80155d4 <tcp_pbuf_prealloc+0xe4>)
 8015514:	4830      	ldr	r0, [pc, #192]	; (80155d8 <tcp_pbuf_prealloc+0xe8>)
 8015516:	f00e fb63 	bl	8023be0 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801551a:	6a3b      	ldr	r3, [r7, #32]
 801551c:	2b00      	cmp	r3, #0
 801551e:	d105      	bne.n	801552c <tcp_pbuf_prealloc+0x3c>
 8015520:	4b2b      	ldr	r3, [pc, #172]	; (80155d0 <tcp_pbuf_prealloc+0xe0>)
 8015522:	22e9      	movs	r2, #233	; 0xe9
 8015524:	492d      	ldr	r1, [pc, #180]	; (80155dc <tcp_pbuf_prealloc+0xec>)
 8015526:	482c      	ldr	r0, [pc, #176]	; (80155d8 <tcp_pbuf_prealloc+0xe8>)
 8015528:	f00e fb5a 	bl	8023be0 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801552c:	89ba      	ldrh	r2, [r7, #12]
 801552e:	897b      	ldrh	r3, [r7, #10]
 8015530:	429a      	cmp	r2, r3
 8015532:	d221      	bcs.n	8015578 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015534:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015538:	f003 0302 	and.w	r3, r3, #2
 801553c:	2b00      	cmp	r3, #0
 801553e:	d111      	bne.n	8015564 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8015540:	6a3b      	ldr	r3, [r7, #32]
 8015542:	8b5b      	ldrh	r3, [r3, #26]
 8015544:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015548:	2b00      	cmp	r3, #0
 801554a:	d115      	bne.n	8015578 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801554c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015550:	2b00      	cmp	r3, #0
 8015552:	d007      	beq.n	8015564 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8015554:	6a3b      	ldr	r3, [r7, #32]
 8015556:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8015558:	2b00      	cmp	r3, #0
 801555a:	d103      	bne.n	8015564 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801555c:	6a3b      	ldr	r3, [r7, #32]
 801555e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8015560:	2b00      	cmp	r3, #0
 8015562:	d009      	beq.n	8015578 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8015564:	89bb      	ldrh	r3, [r7, #12]
 8015566:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801556a:	f023 0203 	bic.w	r2, r3, #3
 801556e:	897b      	ldrh	r3, [r7, #10]
 8015570:	4293      	cmp	r3, r2
 8015572:	bf28      	it	cs
 8015574:	4613      	movcs	r3, r2
 8015576:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8015578:	8af9      	ldrh	r1, [r7, #22]
 801557a:	7bfb      	ldrb	r3, [r7, #15]
 801557c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015580:	4618      	mov	r0, r3
 8015582:	f7fa fe77 	bl	8010274 <pbuf_alloc>
 8015586:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015588:	693b      	ldr	r3, [r7, #16]
 801558a:	2b00      	cmp	r3, #0
 801558c:	d101      	bne.n	8015592 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801558e:	2300      	movs	r3, #0
 8015590:	e019      	b.n	80155c6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8015592:	693b      	ldr	r3, [r7, #16]
 8015594:	681b      	ldr	r3, [r3, #0]
 8015596:	2b00      	cmp	r3, #0
 8015598:	d006      	beq.n	80155a8 <tcp_pbuf_prealloc+0xb8>
 801559a:	4b0d      	ldr	r3, [pc, #52]	; (80155d0 <tcp_pbuf_prealloc+0xe0>)
 801559c:	f240 120b 	movw	r2, #267	; 0x10b
 80155a0:	490f      	ldr	r1, [pc, #60]	; (80155e0 <tcp_pbuf_prealloc+0xf0>)
 80155a2:	480d      	ldr	r0, [pc, #52]	; (80155d8 <tcp_pbuf_prealloc+0xe8>)
 80155a4:	f00e fb1c 	bl	8023be0 <iprintf>
  *oversize = p->len - length;
 80155a8:	693b      	ldr	r3, [r7, #16]
 80155aa:	895a      	ldrh	r2, [r3, #10]
 80155ac:	89bb      	ldrh	r3, [r7, #12]
 80155ae:	1ad3      	subs	r3, r2, r3
 80155b0:	b29a      	uxth	r2, r3
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80155b6:	693b      	ldr	r3, [r7, #16]
 80155b8:	89ba      	ldrh	r2, [r7, #12]
 80155ba:	811a      	strh	r2, [r3, #8]
 80155bc:	693b      	ldr	r3, [r7, #16]
 80155be:	891a      	ldrh	r2, [r3, #8]
 80155c0:	693b      	ldr	r3, [r7, #16]
 80155c2:	815a      	strh	r2, [r3, #10]
  return p;
 80155c4:	693b      	ldr	r3, [r7, #16]
}
 80155c6:	4618      	mov	r0, r3
 80155c8:	3718      	adds	r7, #24
 80155ca:	46bd      	mov	sp, r7
 80155cc:	bd80      	pop	{r7, pc}
 80155ce:	bf00      	nop
 80155d0:	08027a80 	.word	0x08027a80
 80155d4:	08027b38 	.word	0x08027b38
 80155d8:	08027ad4 	.word	0x08027ad4
 80155dc:	08027b5c 	.word	0x08027b5c
 80155e0:	08027b7c 	.word	0x08027b7c

080155e4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80155e4:	b580      	push	{r7, lr}
 80155e6:	b082      	sub	sp, #8
 80155e8:	af00      	add	r7, sp, #0
 80155ea:	6078      	str	r0, [r7, #4]
 80155ec:	460b      	mov	r3, r1
 80155ee:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d106      	bne.n	8015604 <tcp_write_checks+0x20>
 80155f6:	4b33      	ldr	r3, [pc, #204]	; (80156c4 <tcp_write_checks+0xe0>)
 80155f8:	f240 1233 	movw	r2, #307	; 0x133
 80155fc:	4932      	ldr	r1, [pc, #200]	; (80156c8 <tcp_write_checks+0xe4>)
 80155fe:	4833      	ldr	r0, [pc, #204]	; (80156cc <tcp_write_checks+0xe8>)
 8015600:	f00e faee 	bl	8023be0 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	7d1b      	ldrb	r3, [r3, #20]
 8015608:	2b04      	cmp	r3, #4
 801560a:	d00e      	beq.n	801562a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8015610:	2b07      	cmp	r3, #7
 8015612:	d00a      	beq.n	801562a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8015618:	2b02      	cmp	r3, #2
 801561a:	d006      	beq.n	801562a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8015620:	2b03      	cmp	r3, #3
 8015622:	d002      	beq.n	801562a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8015624:	f06f 030a 	mvn.w	r3, #10
 8015628:	e048      	b.n	80156bc <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801562a:	887b      	ldrh	r3, [r7, #2]
 801562c:	2b00      	cmp	r3, #0
 801562e:	d101      	bne.n	8015634 <tcp_write_checks+0x50>
    return ERR_OK;
 8015630:	2300      	movs	r3, #0
 8015632:	e043      	b.n	80156bc <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801563a:	887a      	ldrh	r2, [r7, #2]
 801563c:	429a      	cmp	r2, r3
 801563e:	d909      	bls.n	8015654 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	8b5b      	ldrh	r3, [r3, #26]
 8015644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015648:	b29a      	uxth	r2, r3
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801564e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015652:	e033      	b.n	80156bc <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801565a:	2b08      	cmp	r3, #8
 801565c:	d909      	bls.n	8015672 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	8b5b      	ldrh	r3, [r3, #26]
 8015662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015666:	b29a      	uxth	r2, r3
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801566c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015670:	e024      	b.n	80156bc <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015678:	2b00      	cmp	r3, #0
 801567a:	d00f      	beq.n	801569c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015680:	2b00      	cmp	r3, #0
 8015682:	d11a      	bne.n	80156ba <tcp_write_checks+0xd6>
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015688:	2b00      	cmp	r3, #0
 801568a:	d116      	bne.n	80156ba <tcp_write_checks+0xd6>
 801568c:	4b0d      	ldr	r3, [pc, #52]	; (80156c4 <tcp_write_checks+0xe0>)
 801568e:	f240 1255 	movw	r2, #341	; 0x155
 8015692:	490f      	ldr	r1, [pc, #60]	; (80156d0 <tcp_write_checks+0xec>)
 8015694:	480d      	ldr	r0, [pc, #52]	; (80156cc <tcp_write_checks+0xe8>)
 8015696:	f00e faa3 	bl	8023be0 <iprintf>
 801569a:	e00e      	b.n	80156ba <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d103      	bne.n	80156ac <tcp_write_checks+0xc8>
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d006      	beq.n	80156ba <tcp_write_checks+0xd6>
 80156ac:	4b05      	ldr	r3, [pc, #20]	; (80156c4 <tcp_write_checks+0xe0>)
 80156ae:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80156b2:	4908      	ldr	r1, [pc, #32]	; (80156d4 <tcp_write_checks+0xf0>)
 80156b4:	4805      	ldr	r0, [pc, #20]	; (80156cc <tcp_write_checks+0xe8>)
 80156b6:	f00e fa93 	bl	8023be0 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80156ba:	2300      	movs	r3, #0
}
 80156bc:	4618      	mov	r0, r3
 80156be:	3708      	adds	r7, #8
 80156c0:	46bd      	mov	sp, r7
 80156c2:	bd80      	pop	{r7, pc}
 80156c4:	08027a80 	.word	0x08027a80
 80156c8:	08027b90 	.word	0x08027b90
 80156cc:	08027ad4 	.word	0x08027ad4
 80156d0:	08027bb0 	.word	0x08027bb0
 80156d4:	08027bec 	.word	0x08027bec

080156d8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80156d8:	b590      	push	{r4, r7, lr}
 80156da:	b09b      	sub	sp, #108	; 0x6c
 80156dc:	af04      	add	r7, sp, #16
 80156de:	60f8      	str	r0, [r7, #12]
 80156e0:	60b9      	str	r1, [r7, #8]
 80156e2:	4611      	mov	r1, r2
 80156e4:	461a      	mov	r2, r3
 80156e6:	460b      	mov	r3, r1
 80156e8:	80fb      	strh	r3, [r7, #6]
 80156ea:	4613      	mov	r3, r2
 80156ec:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80156ee:	2300      	movs	r3, #0
 80156f0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80156f2:	2300      	movs	r3, #0
 80156f4:	653b      	str	r3, [r7, #80]	; 0x50
 80156f6:	2300      	movs	r3, #0
 80156f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80156fa:	2300      	movs	r3, #0
 80156fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80156fe:	2300      	movs	r3, #0
 8015700:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8015702:	2300      	movs	r3, #0
 8015704:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8015708:	2300      	movs	r3, #0
 801570a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801570e:	2300      	movs	r3, #0
 8015710:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8015712:	2300      	movs	r3, #0
 8015714:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8015716:	2300      	movs	r3, #0
 8015718:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	2b00      	cmp	r3, #0
 801571e:	d109      	bne.n	8015734 <tcp_write+0x5c>
 8015720:	4ba4      	ldr	r3, [pc, #656]	; (80159b4 <tcp_write+0x2dc>)
 8015722:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8015726:	49a4      	ldr	r1, [pc, #656]	; (80159b8 <tcp_write+0x2e0>)
 8015728:	48a4      	ldr	r0, [pc, #656]	; (80159bc <tcp_write+0x2e4>)
 801572a:	f00e fa59 	bl	8023be0 <iprintf>
 801572e:	f06f 030f 	mvn.w	r3, #15
 8015732:	e32a      	b.n	8015d8a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801573a:	085b      	lsrs	r3, r3, #1
 801573c:	b29a      	uxth	r2, r3
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015742:	4293      	cmp	r3, r2
 8015744:	bf28      	it	cs
 8015746:	4613      	movcs	r3, r2
 8015748:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801574a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801574c:	2b00      	cmp	r3, #0
 801574e:	d102      	bne.n	8015756 <tcp_write+0x7e>
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015754:	e000      	b.n	8015758 <tcp_write+0x80>
 8015756:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015758:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801575a:	68bb      	ldr	r3, [r7, #8]
 801575c:	2b00      	cmp	r3, #0
 801575e:	d109      	bne.n	8015774 <tcp_write+0x9c>
 8015760:	4b94      	ldr	r3, [pc, #592]	; (80159b4 <tcp_write+0x2dc>)
 8015762:	f240 12ad 	movw	r2, #429	; 0x1ad
 8015766:	4996      	ldr	r1, [pc, #600]	; (80159c0 <tcp_write+0x2e8>)
 8015768:	4894      	ldr	r0, [pc, #592]	; (80159bc <tcp_write+0x2e4>)
 801576a:	f00e fa39 	bl	8023be0 <iprintf>
 801576e:	f06f 030f 	mvn.w	r3, #15
 8015772:	e30a      	b.n	8015d8a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8015774:	88fb      	ldrh	r3, [r7, #6]
 8015776:	4619      	mov	r1, r3
 8015778:	68f8      	ldr	r0, [r7, #12]
 801577a:	f7ff ff33 	bl	80155e4 <tcp_write_checks>
 801577e:	4603      	mov	r3, r0
 8015780:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8015784:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8015788:	2b00      	cmp	r3, #0
 801578a:	d002      	beq.n	8015792 <tcp_write+0xba>
    return err;
 801578c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8015790:	e2fb      	b.n	8015d8a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8015792:	68fb      	ldr	r3, [r7, #12]
 8015794:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015798:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801579c:	2300      	movs	r3, #0
 801579e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80157a2:	68fb      	ldr	r3, [r7, #12]
 80157a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	f000 80f6 	beq.w	8015998 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80157b0:	653b      	str	r3, [r7, #80]	; 0x50
 80157b2:	e002      	b.n	80157ba <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80157b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80157b6:	681b      	ldr	r3, [r3, #0]
 80157b8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80157ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80157bc:	681b      	ldr	r3, [r3, #0]
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d1f8      	bne.n	80157b4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80157c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80157c4:	7a9b      	ldrb	r3, [r3, #10]
 80157c6:	009b      	lsls	r3, r3, #2
 80157c8:	b29b      	uxth	r3, r3
 80157ca:	f003 0304 	and.w	r3, r3, #4
 80157ce:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80157d0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80157d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80157d4:	891b      	ldrh	r3, [r3, #8]
 80157d6:	4619      	mov	r1, r3
 80157d8:	8c3b      	ldrh	r3, [r7, #32]
 80157da:	440b      	add	r3, r1
 80157dc:	429a      	cmp	r2, r3
 80157de:	da06      	bge.n	80157ee <tcp_write+0x116>
 80157e0:	4b74      	ldr	r3, [pc, #464]	; (80159b4 <tcp_write+0x2dc>)
 80157e2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80157e6:	4977      	ldr	r1, [pc, #476]	; (80159c4 <tcp_write+0x2ec>)
 80157e8:	4874      	ldr	r0, [pc, #464]	; (80159bc <tcp_write+0x2e4>)
 80157ea:	f00e f9f9 	bl	8023be0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80157ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80157f0:	891a      	ldrh	r2, [r3, #8]
 80157f2:	8c3b      	ldrh	r3, [r7, #32]
 80157f4:	4413      	add	r3, r2
 80157f6:	b29b      	uxth	r3, r3
 80157f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80157fa:	1ad3      	subs	r3, r2, r3
 80157fc:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015804:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8015806:	8a7b      	ldrh	r3, [r7, #18]
 8015808:	2b00      	cmp	r3, #0
 801580a:	d026      	beq.n	801585a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801580c:	8a7b      	ldrh	r3, [r7, #18]
 801580e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015810:	429a      	cmp	r2, r3
 8015812:	d206      	bcs.n	8015822 <tcp_write+0x14a>
 8015814:	4b67      	ldr	r3, [pc, #412]	; (80159b4 <tcp_write+0x2dc>)
 8015816:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801581a:	496b      	ldr	r1, [pc, #428]	; (80159c8 <tcp_write+0x2f0>)
 801581c:	4867      	ldr	r0, [pc, #412]	; (80159bc <tcp_write+0x2e4>)
 801581e:	f00e f9df 	bl	8023be0 <iprintf>
      seg = last_unsent;
 8015822:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015824:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8015826:	8a7b      	ldrh	r3, [r7, #18]
 8015828:	88fa      	ldrh	r2, [r7, #6]
 801582a:	4293      	cmp	r3, r2
 801582c:	bf28      	it	cs
 801582e:	4613      	movcs	r3, r2
 8015830:	b29b      	uxth	r3, r3
 8015832:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015834:	4293      	cmp	r3, r2
 8015836:	bf28      	it	cs
 8015838:	4613      	movcs	r3, r2
 801583a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801583c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015840:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015842:	4413      	add	r3, r2
 8015844:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8015848:	8a7a      	ldrh	r2, [r7, #18]
 801584a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801584c:	1ad3      	subs	r3, r2, r3
 801584e:	b29b      	uxth	r3, r3
 8015850:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8015852:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015854:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015856:	1ad3      	subs	r3, r2, r3
 8015858:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801585a:	8a7b      	ldrh	r3, [r7, #18]
 801585c:	2b00      	cmp	r3, #0
 801585e:	d00b      	beq.n	8015878 <tcp_write+0x1a0>
 8015860:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015864:	88fb      	ldrh	r3, [r7, #6]
 8015866:	429a      	cmp	r2, r3
 8015868:	d006      	beq.n	8015878 <tcp_write+0x1a0>
 801586a:	4b52      	ldr	r3, [pc, #328]	; (80159b4 <tcp_write+0x2dc>)
 801586c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015870:	4956      	ldr	r1, [pc, #344]	; (80159cc <tcp_write+0x2f4>)
 8015872:	4852      	ldr	r0, [pc, #328]	; (80159bc <tcp_write+0x2e4>)
 8015874:	f00e f9b4 	bl	8023be0 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8015878:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801587c:	88fb      	ldrh	r3, [r7, #6]
 801587e:	429a      	cmp	r2, r3
 8015880:	f080 8167 	bcs.w	8015b52 <tcp_write+0x47a>
 8015884:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015886:	2b00      	cmp	r3, #0
 8015888:	f000 8163 	beq.w	8015b52 <tcp_write+0x47a>
 801588c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801588e:	891b      	ldrh	r3, [r3, #8]
 8015890:	2b00      	cmp	r3, #0
 8015892:	f000 815e 	beq.w	8015b52 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8015896:	88fa      	ldrh	r2, [r7, #6]
 8015898:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801589c:	1ad2      	subs	r2, r2, r3
 801589e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80158a0:	4293      	cmp	r3, r2
 80158a2:	bfa8      	it	ge
 80158a4:	4613      	movge	r3, r2
 80158a6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80158a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80158aa:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80158ac:	797b      	ldrb	r3, [r7, #5]
 80158ae:	f003 0301 	and.w	r3, r3, #1
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d027      	beq.n	8015906 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80158b6:	f107 0012 	add.w	r0, r7, #18
 80158ba:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80158bc:	8bf9      	ldrh	r1, [r7, #30]
 80158be:	2301      	movs	r3, #1
 80158c0:	9302      	str	r3, [sp, #8]
 80158c2:	797b      	ldrb	r3, [r7, #5]
 80158c4:	9301      	str	r3, [sp, #4]
 80158c6:	68fb      	ldr	r3, [r7, #12]
 80158c8:	9300      	str	r3, [sp, #0]
 80158ca:	4603      	mov	r3, r0
 80158cc:	2000      	movs	r0, #0
 80158ce:	f7ff fe0f 	bl	80154f0 <tcp_pbuf_prealloc>
 80158d2:	6578      	str	r0, [r7, #84]	; 0x54
 80158d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	f000 8225 	beq.w	8015d26 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80158dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80158de:	6858      	ldr	r0, [r3, #4]
 80158e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80158e4:	68ba      	ldr	r2, [r7, #8]
 80158e6:	4413      	add	r3, r2
 80158e8:	8bfa      	ldrh	r2, [r7, #30]
 80158ea:	4619      	mov	r1, r3
 80158ec:	f00e f852 	bl	8023994 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80158f0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80158f2:	f7fb f863 	bl	80109bc <pbuf_clen>
 80158f6:	4603      	mov	r3, r0
 80158f8:	461a      	mov	r2, r3
 80158fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80158fe:	4413      	add	r3, r2
 8015900:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8015904:	e041      	b.n	801598a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8015906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015908:	685b      	ldr	r3, [r3, #4]
 801590a:	637b      	str	r3, [r7, #52]	; 0x34
 801590c:	e002      	b.n	8015914 <tcp_write+0x23c>
 801590e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015910:	681b      	ldr	r3, [r3, #0]
 8015912:	637b      	str	r3, [r7, #52]	; 0x34
 8015914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015916:	681b      	ldr	r3, [r3, #0]
 8015918:	2b00      	cmp	r3, #0
 801591a:	d1f8      	bne.n	801590e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801591c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801591e:	7b1b      	ldrb	r3, [r3, #12]
 8015920:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8015924:	2b00      	cmp	r3, #0
 8015926:	d115      	bne.n	8015954 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8015928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801592a:	685b      	ldr	r3, [r3, #4]
 801592c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801592e:	8952      	ldrh	r2, [r2, #10]
 8015930:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8015932:	68ba      	ldr	r2, [r7, #8]
 8015934:	429a      	cmp	r2, r3
 8015936:	d10d      	bne.n	8015954 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8015938:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801593c:	2b00      	cmp	r3, #0
 801593e:	d006      	beq.n	801594e <tcp_write+0x276>
 8015940:	4b1c      	ldr	r3, [pc, #112]	; (80159b4 <tcp_write+0x2dc>)
 8015942:	f240 2231 	movw	r2, #561	; 0x231
 8015946:	4922      	ldr	r1, [pc, #136]	; (80159d0 <tcp_write+0x2f8>)
 8015948:	481c      	ldr	r0, [pc, #112]	; (80159bc <tcp_write+0x2e4>)
 801594a:	f00e f949 	bl	8023be0 <iprintf>
          extendlen = seglen;
 801594e:	8bfb      	ldrh	r3, [r7, #30]
 8015950:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8015952:	e01a      	b.n	801598a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8015954:	8bfb      	ldrh	r3, [r7, #30]
 8015956:	2201      	movs	r2, #1
 8015958:	4619      	mov	r1, r3
 801595a:	2000      	movs	r0, #0
 801595c:	f7fa fc8a 	bl	8010274 <pbuf_alloc>
 8015960:	6578      	str	r0, [r7, #84]	; 0x54
 8015962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015964:	2b00      	cmp	r3, #0
 8015966:	f000 81e0 	beq.w	8015d2a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801596a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801596e:	68ba      	ldr	r2, [r7, #8]
 8015970:	441a      	add	r2, r3
 8015972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015974:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8015976:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015978:	f7fb f820 	bl	80109bc <pbuf_clen>
 801597c:	4603      	mov	r3, r0
 801597e:	461a      	mov	r2, r3
 8015980:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015984:	4413      	add	r3, r2
 8015986:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801598a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801598e:	8bfb      	ldrh	r3, [r7, #30]
 8015990:	4413      	add	r3, r2
 8015992:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8015996:	e0dc      	b.n	8015b52 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8015998:	68fb      	ldr	r3, [r7, #12]
 801599a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801599e:	2b00      	cmp	r3, #0
 80159a0:	f000 80d7 	beq.w	8015b52 <tcp_write+0x47a>
 80159a4:	4b03      	ldr	r3, [pc, #12]	; (80159b4 <tcp_write+0x2dc>)
 80159a6:	f240 224a 	movw	r2, #586	; 0x24a
 80159aa:	490a      	ldr	r1, [pc, #40]	; (80159d4 <tcp_write+0x2fc>)
 80159ac:	4803      	ldr	r0, [pc, #12]	; (80159bc <tcp_write+0x2e4>)
 80159ae:	f00e f917 	bl	8023be0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80159b2:	e0ce      	b.n	8015b52 <tcp_write+0x47a>
 80159b4:	08027a80 	.word	0x08027a80
 80159b8:	08027c20 	.word	0x08027c20
 80159bc:	08027ad4 	.word	0x08027ad4
 80159c0:	08027c38 	.word	0x08027c38
 80159c4:	08027c6c 	.word	0x08027c6c
 80159c8:	08027c84 	.word	0x08027c84
 80159cc:	08027ca4 	.word	0x08027ca4
 80159d0:	08027cc4 	.word	0x08027cc4
 80159d4:	08027cf0 	.word	0x08027cf0
    struct pbuf *p;
    u16_t left = len - pos;
 80159d8:	88fa      	ldrh	r2, [r7, #6]
 80159da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80159de:	1ad3      	subs	r3, r2, r3
 80159e0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80159e2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80159e6:	b29b      	uxth	r3, r3
 80159e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80159ea:	1ad3      	subs	r3, r2, r3
 80159ec:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80159ee:	8b7a      	ldrh	r2, [r7, #26]
 80159f0:	8bbb      	ldrh	r3, [r7, #28]
 80159f2:	4293      	cmp	r3, r2
 80159f4:	bf28      	it	cs
 80159f6:	4613      	movcs	r3, r2
 80159f8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80159fa:	797b      	ldrb	r3, [r7, #5]
 80159fc:	f003 0301 	and.w	r3, r3, #1
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d036      	beq.n	8015a72 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8015a04:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015a08:	b29a      	uxth	r2, r3
 8015a0a:	8b3b      	ldrh	r3, [r7, #24]
 8015a0c:	4413      	add	r3, r2
 8015a0e:	b299      	uxth	r1, r3
 8015a10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	bf0c      	ite	eq
 8015a16:	2301      	moveq	r3, #1
 8015a18:	2300      	movne	r3, #0
 8015a1a:	b2db      	uxtb	r3, r3
 8015a1c:	f107 0012 	add.w	r0, r7, #18
 8015a20:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015a22:	9302      	str	r3, [sp, #8]
 8015a24:	797b      	ldrb	r3, [r7, #5]
 8015a26:	9301      	str	r3, [sp, #4]
 8015a28:	68fb      	ldr	r3, [r7, #12]
 8015a2a:	9300      	str	r3, [sp, #0]
 8015a2c:	4603      	mov	r3, r0
 8015a2e:	2036      	movs	r0, #54	; 0x36
 8015a30:	f7ff fd5e 	bl	80154f0 <tcp_pbuf_prealloc>
 8015a34:	6338      	str	r0, [r7, #48]	; 0x30
 8015a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	f000 8178 	beq.w	8015d2e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8015a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a40:	895b      	ldrh	r3, [r3, #10]
 8015a42:	8b3a      	ldrh	r2, [r7, #24]
 8015a44:	429a      	cmp	r2, r3
 8015a46:	d906      	bls.n	8015a56 <tcp_write+0x37e>
 8015a48:	4b8c      	ldr	r3, [pc, #560]	; (8015c7c <tcp_write+0x5a4>)
 8015a4a:	f240 2266 	movw	r2, #614	; 0x266
 8015a4e:	498c      	ldr	r1, [pc, #560]	; (8015c80 <tcp_write+0x5a8>)
 8015a50:	488c      	ldr	r0, [pc, #560]	; (8015c84 <tcp_write+0x5ac>)
 8015a52:	f00e f8c5 	bl	8023be0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8015a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a58:	685a      	ldr	r2, [r3, #4]
 8015a5a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015a5e:	18d0      	adds	r0, r2, r3
 8015a60:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015a64:	68ba      	ldr	r2, [r7, #8]
 8015a66:	4413      	add	r3, r2
 8015a68:	8b3a      	ldrh	r2, [r7, #24]
 8015a6a:	4619      	mov	r1, r3
 8015a6c:	f00d ff92 	bl	8023994 <memcpy>
 8015a70:	e02f      	b.n	8015ad2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8015a72:	8a7b      	ldrh	r3, [r7, #18]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d006      	beq.n	8015a86 <tcp_write+0x3ae>
 8015a78:	4b80      	ldr	r3, [pc, #512]	; (8015c7c <tcp_write+0x5a4>)
 8015a7a:	f240 2271 	movw	r2, #625	; 0x271
 8015a7e:	4982      	ldr	r1, [pc, #520]	; (8015c88 <tcp_write+0x5b0>)
 8015a80:	4880      	ldr	r0, [pc, #512]	; (8015c84 <tcp_write+0x5ac>)
 8015a82:	f00e f8ad 	bl	8023be0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8015a86:	8b3b      	ldrh	r3, [r7, #24]
 8015a88:	2201      	movs	r2, #1
 8015a8a:	4619      	mov	r1, r3
 8015a8c:	2036      	movs	r0, #54	; 0x36
 8015a8e:	f7fa fbf1 	bl	8010274 <pbuf_alloc>
 8015a92:	6178      	str	r0, [r7, #20]
 8015a94:	697b      	ldr	r3, [r7, #20]
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	f000 814b 	beq.w	8015d32 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8015a9c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015aa0:	68ba      	ldr	r2, [r7, #8]
 8015aa2:	441a      	add	r2, r3
 8015aa4:	697b      	ldr	r3, [r7, #20]
 8015aa6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8015aa8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015aac:	b29b      	uxth	r3, r3
 8015aae:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015ab2:	4619      	mov	r1, r3
 8015ab4:	2036      	movs	r0, #54	; 0x36
 8015ab6:	f7fa fbdd 	bl	8010274 <pbuf_alloc>
 8015aba:	6338      	str	r0, [r7, #48]	; 0x30
 8015abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d103      	bne.n	8015aca <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8015ac2:	6978      	ldr	r0, [r7, #20]
 8015ac4:	f7fa feec 	bl	80108a0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8015ac8:	e136      	b.n	8015d38 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8015aca:	6979      	ldr	r1, [r7, #20]
 8015acc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015ace:	f7fa ffb5 	bl	8010a3c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8015ad2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015ad4:	f7fa ff72 	bl	80109bc <pbuf_clen>
 8015ad8:	4603      	mov	r3, r0
 8015ada:	461a      	mov	r2, r3
 8015adc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015ae0:	4413      	add	r3, r2
 8015ae2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8015ae6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015aea:	2b09      	cmp	r3, #9
 8015aec:	d903      	bls.n	8015af6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8015aee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015af0:	f7fa fed6 	bl	80108a0 <pbuf_free>
      goto memerr;
 8015af4:	e120      	b.n	8015d38 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8015afa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015afe:	441a      	add	r2, r3
 8015b00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015b04:	9300      	str	r3, [sp, #0]
 8015b06:	4613      	mov	r3, r2
 8015b08:	2200      	movs	r2, #0
 8015b0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015b0c:	68f8      	ldr	r0, [r7, #12]
 8015b0e:	f7ff fc51 	bl	80153b4 <tcp_create_segment>
 8015b12:	64f8      	str	r0, [r7, #76]	; 0x4c
 8015b14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	f000 810d 	beq.w	8015d36 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8015b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d102      	bne.n	8015b28 <tcp_write+0x450>
      queue = seg;
 8015b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b24:	647b      	str	r3, [r7, #68]	; 0x44
 8015b26:	e00c      	b.n	8015b42 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8015b28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d106      	bne.n	8015b3c <tcp_write+0x464>
 8015b2e:	4b53      	ldr	r3, [pc, #332]	; (8015c7c <tcp_write+0x5a4>)
 8015b30:	f240 22ab 	movw	r2, #683	; 0x2ab
 8015b34:	4955      	ldr	r1, [pc, #340]	; (8015c8c <tcp_write+0x5b4>)
 8015b36:	4853      	ldr	r0, [pc, #332]	; (8015c84 <tcp_write+0x5ac>)
 8015b38:	f00e f852 	bl	8023be0 <iprintf>
      prev_seg->next = seg;
 8015b3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015b3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015b40:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8015b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b44:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8015b46:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015b4a:	8b3b      	ldrh	r3, [r7, #24]
 8015b4c:	4413      	add	r3, r2
 8015b4e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8015b52:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015b56:	88fb      	ldrh	r3, [r7, #6]
 8015b58:	429a      	cmp	r2, r3
 8015b5a:	f4ff af3d 	bcc.w	80159d8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8015b5e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d02c      	beq.n	8015bbe <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8015b64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015b66:	685b      	ldr	r3, [r3, #4]
 8015b68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015b6a:	e01e      	b.n	8015baa <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8015b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b6e:	891a      	ldrh	r2, [r3, #8]
 8015b70:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015b72:	4413      	add	r3, r2
 8015b74:	b29a      	uxth	r2, r3
 8015b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b78:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8015b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b7c:	681b      	ldr	r3, [r3, #0]
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d110      	bne.n	8015ba4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8015b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b84:	685b      	ldr	r3, [r3, #4]
 8015b86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015b88:	8952      	ldrh	r2, [r2, #10]
 8015b8a:	4413      	add	r3, r2
 8015b8c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015b8e:	68b9      	ldr	r1, [r7, #8]
 8015b90:	4618      	mov	r0, r3
 8015b92:	f00d feff 	bl	8023994 <memcpy>
        p->len += oversize_used;
 8015b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b98:	895a      	ldrh	r2, [r3, #10]
 8015b9a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015b9c:	4413      	add	r3, r2
 8015b9e:	b29a      	uxth	r2, r3
 8015ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ba2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8015ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ba6:	681b      	ldr	r3, [r3, #0]
 8015ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d1dd      	bne.n	8015b6c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8015bb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015bb2:	891a      	ldrh	r2, [r3, #8]
 8015bb4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015bb6:	4413      	add	r3, r2
 8015bb8:	b29a      	uxth	r2, r3
 8015bba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015bbc:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8015bbe:	8a7a      	ldrh	r2, [r7, #18]
 8015bc0:	68fb      	ldr	r3, [r7, #12]
 8015bc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8015bc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d018      	beq.n	8015bfe <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8015bcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d106      	bne.n	8015be0 <tcp_write+0x508>
 8015bd2:	4b2a      	ldr	r3, [pc, #168]	; (8015c7c <tcp_write+0x5a4>)
 8015bd4:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8015bd8:	492d      	ldr	r1, [pc, #180]	; (8015c90 <tcp_write+0x5b8>)
 8015bda:	482a      	ldr	r0, [pc, #168]	; (8015c84 <tcp_write+0x5ac>)
 8015bdc:	f00e f800 	bl	8023be0 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8015be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015be2:	685b      	ldr	r3, [r3, #4]
 8015be4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015be6:	4618      	mov	r0, r3
 8015be8:	f7fa ff28 	bl	8010a3c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8015bec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015bee:	891a      	ldrh	r2, [r3, #8]
 8015bf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015bf2:	891b      	ldrh	r3, [r3, #8]
 8015bf4:	4413      	add	r3, r2
 8015bf6:	b29a      	uxth	r2, r3
 8015bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015bfa:	811a      	strh	r2, [r3, #8]
 8015bfc:	e037      	b.n	8015c6e <tcp_write+0x596>
  } else if (extendlen > 0) {
 8015bfe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d034      	beq.n	8015c6e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8015c04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	d003      	beq.n	8015c12 <tcp_write+0x53a>
 8015c0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c0c:	685b      	ldr	r3, [r3, #4]
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d106      	bne.n	8015c20 <tcp_write+0x548>
 8015c12:	4b1a      	ldr	r3, [pc, #104]	; (8015c7c <tcp_write+0x5a4>)
 8015c14:	f240 22e6 	movw	r2, #742	; 0x2e6
 8015c18:	491e      	ldr	r1, [pc, #120]	; (8015c94 <tcp_write+0x5bc>)
 8015c1a:	481a      	ldr	r0, [pc, #104]	; (8015c84 <tcp_write+0x5ac>)
 8015c1c:	f00d ffe0 	bl	8023be0 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8015c20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c22:	685b      	ldr	r3, [r3, #4]
 8015c24:	62bb      	str	r3, [r7, #40]	; 0x28
 8015c26:	e009      	b.n	8015c3c <tcp_write+0x564>
      p->tot_len += extendlen;
 8015c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c2a:	891a      	ldrh	r2, [r3, #8]
 8015c2c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015c2e:	4413      	add	r3, r2
 8015c30:	b29a      	uxth	r2, r3
 8015c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c34:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8015c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8015c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c3e:	681b      	ldr	r3, [r3, #0]
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d1f1      	bne.n	8015c28 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8015c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c46:	891a      	ldrh	r2, [r3, #8]
 8015c48:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015c4a:	4413      	add	r3, r2
 8015c4c:	b29a      	uxth	r2, r3
 8015c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c50:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8015c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c54:	895a      	ldrh	r2, [r3, #10]
 8015c56:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015c58:	4413      	add	r3, r2
 8015c5a:	b29a      	uxth	r2, r3
 8015c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c5e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8015c60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c62:	891a      	ldrh	r2, [r3, #8]
 8015c64:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015c66:	4413      	add	r3, r2
 8015c68:	b29a      	uxth	r2, r3
 8015c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c6c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8015c6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	d111      	bne.n	8015c98 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8015c74:	68fb      	ldr	r3, [r7, #12]
 8015c76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015c78:	66da      	str	r2, [r3, #108]	; 0x6c
 8015c7a:	e010      	b.n	8015c9e <tcp_write+0x5c6>
 8015c7c:	08027a80 	.word	0x08027a80
 8015c80:	08027d20 	.word	0x08027d20
 8015c84:	08027ad4 	.word	0x08027ad4
 8015c88:	08027d60 	.word	0x08027d60
 8015c8c:	08027d70 	.word	0x08027d70
 8015c90:	08027d84 	.word	0x08027d84
 8015c94:	08027dbc 	.word	0x08027dbc
  } else {
    last_unsent->next = queue;
 8015c98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015c9c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8015c9e:	68fb      	ldr	r3, [r7, #12]
 8015ca0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8015ca2:	88fb      	ldrh	r3, [r7, #6]
 8015ca4:	441a      	add	r2, r3
 8015ca6:	68fb      	ldr	r3, [r7, #12]
 8015ca8:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8015caa:	68fb      	ldr	r3, [r7, #12]
 8015cac:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8015cb0:	88fb      	ldrh	r3, [r7, #6]
 8015cb2:	1ad3      	subs	r3, r2, r3
 8015cb4:	b29a      	uxth	r2, r3
 8015cb6:	68fb      	ldr	r3, [r7, #12]
 8015cb8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8015cc2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8015cc6:	68fb      	ldr	r3, [r7, #12]
 8015cc8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d00e      	beq.n	8015cee <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8015cd0:	68fb      	ldr	r3, [r7, #12]
 8015cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d10a      	bne.n	8015cee <tcp_write+0x616>
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d106      	bne.n	8015cee <tcp_write+0x616>
 8015ce0:	4b2c      	ldr	r3, [pc, #176]	; (8015d94 <tcp_write+0x6bc>)
 8015ce2:	f240 3212 	movw	r2, #786	; 0x312
 8015ce6:	492c      	ldr	r1, [pc, #176]	; (8015d98 <tcp_write+0x6c0>)
 8015ce8:	482c      	ldr	r0, [pc, #176]	; (8015d9c <tcp_write+0x6c4>)
 8015cea:	f00d ff79 	bl	8023be0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8015cee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d016      	beq.n	8015d22 <tcp_write+0x64a>
 8015cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015cf6:	68db      	ldr	r3, [r3, #12]
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d012      	beq.n	8015d22 <tcp_write+0x64a>
 8015cfc:	797b      	ldrb	r3, [r7, #5]
 8015cfe:	f003 0302 	and.w	r3, r3, #2
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d10d      	bne.n	8015d22 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8015d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015d08:	68db      	ldr	r3, [r3, #12]
 8015d0a:	899b      	ldrh	r3, [r3, #12]
 8015d0c:	b29c      	uxth	r4, r3
 8015d0e:	2008      	movs	r0, #8
 8015d10:	f7f8 f970 	bl	800dff4 <lwip_htons>
 8015d14:	4603      	mov	r3, r0
 8015d16:	461a      	mov	r2, r3
 8015d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015d1a:	68db      	ldr	r3, [r3, #12]
 8015d1c:	4322      	orrs	r2, r4
 8015d1e:	b292      	uxth	r2, r2
 8015d20:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8015d22:	2300      	movs	r3, #0
 8015d24:	e031      	b.n	8015d8a <tcp_write+0x6b2>
          goto memerr;
 8015d26:	bf00      	nop
 8015d28:	e006      	b.n	8015d38 <tcp_write+0x660>
            goto memerr;
 8015d2a:	bf00      	nop
 8015d2c:	e004      	b.n	8015d38 <tcp_write+0x660>
        goto memerr;
 8015d2e:	bf00      	nop
 8015d30:	e002      	b.n	8015d38 <tcp_write+0x660>
        goto memerr;
 8015d32:	bf00      	nop
 8015d34:	e000      	b.n	8015d38 <tcp_write+0x660>
      goto memerr;
 8015d36:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015d38:	68fb      	ldr	r3, [r7, #12]
 8015d3a:	8b5b      	ldrh	r3, [r3, #26]
 8015d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015d40:	b29a      	uxth	r2, r3
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8015d46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d002      	beq.n	8015d52 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8015d4c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015d4e:	f7fa fda7 	bl	80108a0 <pbuf_free>
  }
  if (queue != NULL) {
 8015d52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d002      	beq.n	8015d5e <tcp_write+0x686>
    tcp_segs_free(queue);
 8015d58:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015d5a:	f7fc fb6b 	bl	8012434 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8015d5e:	68fb      	ldr	r3, [r7, #12]
 8015d60:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d00e      	beq.n	8015d86 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8015d68:	68fb      	ldr	r3, [r7, #12]
 8015d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d10a      	bne.n	8015d86 <tcp_write+0x6ae>
 8015d70:	68fb      	ldr	r3, [r7, #12]
 8015d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d106      	bne.n	8015d86 <tcp_write+0x6ae>
 8015d78:	4b06      	ldr	r3, [pc, #24]	; (8015d94 <tcp_write+0x6bc>)
 8015d7a:	f240 3227 	movw	r2, #807	; 0x327
 8015d7e:	4906      	ldr	r1, [pc, #24]	; (8015d98 <tcp_write+0x6c0>)
 8015d80:	4806      	ldr	r0, [pc, #24]	; (8015d9c <tcp_write+0x6c4>)
 8015d82:	f00d ff2d 	bl	8023be0 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8015d86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8015d8a:	4618      	mov	r0, r3
 8015d8c:	375c      	adds	r7, #92	; 0x5c
 8015d8e:	46bd      	mov	sp, r7
 8015d90:	bd90      	pop	{r4, r7, pc}
 8015d92:	bf00      	nop
 8015d94:	08027a80 	.word	0x08027a80
 8015d98:	08027df4 	.word	0x08027df4
 8015d9c:	08027ad4 	.word	0x08027ad4

08015da0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8015da0:	b590      	push	{r4, r7, lr}
 8015da2:	b08b      	sub	sp, #44	; 0x2c
 8015da4:	af02      	add	r7, sp, #8
 8015da6:	6078      	str	r0, [r7, #4]
 8015da8:	460b      	mov	r3, r1
 8015daa:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8015dac:	2300      	movs	r3, #0
 8015dae:	61fb      	str	r3, [r7, #28]
 8015db0:	2300      	movs	r3, #0
 8015db2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8015db4:	2300      	movs	r3, #0
 8015db6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d106      	bne.n	8015dcc <tcp_split_unsent_seg+0x2c>
 8015dbe:	4b95      	ldr	r3, [pc, #596]	; (8016014 <tcp_split_unsent_seg+0x274>)
 8015dc0:	f240 324b 	movw	r2, #843	; 0x34b
 8015dc4:	4994      	ldr	r1, [pc, #592]	; (8016018 <tcp_split_unsent_seg+0x278>)
 8015dc6:	4895      	ldr	r0, [pc, #596]	; (801601c <tcp_split_unsent_seg+0x27c>)
 8015dc8:	f00d ff0a 	bl	8023be0 <iprintf>

  useg = pcb->unsent;
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015dd0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8015dd2:	697b      	ldr	r3, [r7, #20]
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d102      	bne.n	8015dde <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8015dd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015ddc:	e116      	b.n	801600c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8015dde:	887b      	ldrh	r3, [r7, #2]
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d109      	bne.n	8015df8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8015de4:	4b8b      	ldr	r3, [pc, #556]	; (8016014 <tcp_split_unsent_seg+0x274>)
 8015de6:	f240 3253 	movw	r2, #851	; 0x353
 8015dea:	498d      	ldr	r1, [pc, #564]	; (8016020 <tcp_split_unsent_seg+0x280>)
 8015dec:	488b      	ldr	r0, [pc, #556]	; (801601c <tcp_split_unsent_seg+0x27c>)
 8015dee:	f00d fef7 	bl	8023be0 <iprintf>
    return ERR_VAL;
 8015df2:	f06f 0305 	mvn.w	r3, #5
 8015df6:	e109      	b.n	801600c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8015df8:	697b      	ldr	r3, [r7, #20]
 8015dfa:	891b      	ldrh	r3, [r3, #8]
 8015dfc:	887a      	ldrh	r2, [r7, #2]
 8015dfe:	429a      	cmp	r2, r3
 8015e00:	d301      	bcc.n	8015e06 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8015e02:	2300      	movs	r3, #0
 8015e04:	e102      	b.n	801600c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015e0a:	887a      	ldrh	r2, [r7, #2]
 8015e0c:	429a      	cmp	r2, r3
 8015e0e:	d906      	bls.n	8015e1e <tcp_split_unsent_seg+0x7e>
 8015e10:	4b80      	ldr	r3, [pc, #512]	; (8016014 <tcp_split_unsent_seg+0x274>)
 8015e12:	f240 325b 	movw	r2, #859	; 0x35b
 8015e16:	4983      	ldr	r1, [pc, #524]	; (8016024 <tcp_split_unsent_seg+0x284>)
 8015e18:	4880      	ldr	r0, [pc, #512]	; (801601c <tcp_split_unsent_seg+0x27c>)
 8015e1a:	f00d fee1 	bl	8023be0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8015e1e:	697b      	ldr	r3, [r7, #20]
 8015e20:	891b      	ldrh	r3, [r3, #8]
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d106      	bne.n	8015e34 <tcp_split_unsent_seg+0x94>
 8015e26:	4b7b      	ldr	r3, [pc, #492]	; (8016014 <tcp_split_unsent_seg+0x274>)
 8015e28:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8015e2c:	497e      	ldr	r1, [pc, #504]	; (8016028 <tcp_split_unsent_seg+0x288>)
 8015e2e:	487b      	ldr	r0, [pc, #492]	; (801601c <tcp_split_unsent_seg+0x27c>)
 8015e30:	f00d fed6 	bl	8023be0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8015e34:	697b      	ldr	r3, [r7, #20]
 8015e36:	7a9b      	ldrb	r3, [r3, #10]
 8015e38:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8015e3a:	7bfb      	ldrb	r3, [r7, #15]
 8015e3c:	009b      	lsls	r3, r3, #2
 8015e3e:	b2db      	uxtb	r3, r3
 8015e40:	f003 0304 	and.w	r3, r3, #4
 8015e44:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8015e46:	697b      	ldr	r3, [r7, #20]
 8015e48:	891a      	ldrh	r2, [r3, #8]
 8015e4a:	887b      	ldrh	r3, [r7, #2]
 8015e4c:	1ad3      	subs	r3, r2, r3
 8015e4e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8015e50:	7bbb      	ldrb	r3, [r7, #14]
 8015e52:	b29a      	uxth	r2, r3
 8015e54:	89bb      	ldrh	r3, [r7, #12]
 8015e56:	4413      	add	r3, r2
 8015e58:	b29b      	uxth	r3, r3
 8015e5a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015e5e:	4619      	mov	r1, r3
 8015e60:	2036      	movs	r0, #54	; 0x36
 8015e62:	f7fa fa07 	bl	8010274 <pbuf_alloc>
 8015e66:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015e68:	693b      	ldr	r3, [r7, #16]
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	f000 80b7 	beq.w	8015fde <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8015e70:	697b      	ldr	r3, [r7, #20]
 8015e72:	685b      	ldr	r3, [r3, #4]
 8015e74:	891a      	ldrh	r2, [r3, #8]
 8015e76:	697b      	ldr	r3, [r7, #20]
 8015e78:	891b      	ldrh	r3, [r3, #8]
 8015e7a:	1ad3      	subs	r3, r2, r3
 8015e7c:	b29a      	uxth	r2, r3
 8015e7e:	887b      	ldrh	r3, [r7, #2]
 8015e80:	4413      	add	r3, r2
 8015e82:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8015e84:	697b      	ldr	r3, [r7, #20]
 8015e86:	6858      	ldr	r0, [r3, #4]
 8015e88:	693b      	ldr	r3, [r7, #16]
 8015e8a:	685a      	ldr	r2, [r3, #4]
 8015e8c:	7bbb      	ldrb	r3, [r7, #14]
 8015e8e:	18d1      	adds	r1, r2, r3
 8015e90:	897b      	ldrh	r3, [r7, #10]
 8015e92:	89ba      	ldrh	r2, [r7, #12]
 8015e94:	f7fa ff0a 	bl	8010cac <pbuf_copy_partial>
 8015e98:	4603      	mov	r3, r0
 8015e9a:	461a      	mov	r2, r3
 8015e9c:	89bb      	ldrh	r3, [r7, #12]
 8015e9e:	4293      	cmp	r3, r2
 8015ea0:	f040 809f 	bne.w	8015fe2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8015ea4:	697b      	ldr	r3, [r7, #20]
 8015ea6:	68db      	ldr	r3, [r3, #12]
 8015ea8:	899b      	ldrh	r3, [r3, #12]
 8015eaa:	b29b      	uxth	r3, r3
 8015eac:	4618      	mov	r0, r3
 8015eae:	f7f8 f8a1 	bl	800dff4 <lwip_htons>
 8015eb2:	4603      	mov	r3, r0
 8015eb4:	b2db      	uxtb	r3, r3
 8015eb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015eba:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8015ebc:	2300      	movs	r3, #0
 8015ebe:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8015ec0:	7efb      	ldrb	r3, [r7, #27]
 8015ec2:	f003 0308 	and.w	r3, r3, #8
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d007      	beq.n	8015eda <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8015eca:	7efb      	ldrb	r3, [r7, #27]
 8015ecc:	f023 0308 	bic.w	r3, r3, #8
 8015ed0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8015ed2:	7ebb      	ldrb	r3, [r7, #26]
 8015ed4:	f043 0308 	orr.w	r3, r3, #8
 8015ed8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8015eda:	7efb      	ldrb	r3, [r7, #27]
 8015edc:	f003 0301 	and.w	r3, r3, #1
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d007      	beq.n	8015ef4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8015ee4:	7efb      	ldrb	r3, [r7, #27]
 8015ee6:	f023 0301 	bic.w	r3, r3, #1
 8015eea:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8015eec:	7ebb      	ldrb	r3, [r7, #26]
 8015eee:	f043 0301 	orr.w	r3, r3, #1
 8015ef2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8015ef4:	697b      	ldr	r3, [r7, #20]
 8015ef6:	68db      	ldr	r3, [r3, #12]
 8015ef8:	685b      	ldr	r3, [r3, #4]
 8015efa:	4618      	mov	r0, r3
 8015efc:	f7f8 f88f 	bl	800e01e <lwip_htonl>
 8015f00:	4602      	mov	r2, r0
 8015f02:	887b      	ldrh	r3, [r7, #2]
 8015f04:	18d1      	adds	r1, r2, r3
 8015f06:	7eba      	ldrb	r2, [r7, #26]
 8015f08:	7bfb      	ldrb	r3, [r7, #15]
 8015f0a:	9300      	str	r3, [sp, #0]
 8015f0c:	460b      	mov	r3, r1
 8015f0e:	6939      	ldr	r1, [r7, #16]
 8015f10:	6878      	ldr	r0, [r7, #4]
 8015f12:	f7ff fa4f 	bl	80153b4 <tcp_create_segment>
 8015f16:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8015f18:	69fb      	ldr	r3, [r7, #28]
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d063      	beq.n	8015fe6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8015f1e:	697b      	ldr	r3, [r7, #20]
 8015f20:	685b      	ldr	r3, [r3, #4]
 8015f22:	4618      	mov	r0, r3
 8015f24:	f7fa fd4a 	bl	80109bc <pbuf_clen>
 8015f28:	4603      	mov	r3, r0
 8015f2a:	461a      	mov	r2, r3
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015f32:	1a9b      	subs	r3, r3, r2
 8015f34:	b29a      	uxth	r2, r3
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8015f3c:	697b      	ldr	r3, [r7, #20]
 8015f3e:	6858      	ldr	r0, [r3, #4]
 8015f40:	697b      	ldr	r3, [r7, #20]
 8015f42:	685b      	ldr	r3, [r3, #4]
 8015f44:	891a      	ldrh	r2, [r3, #8]
 8015f46:	89bb      	ldrh	r3, [r7, #12]
 8015f48:	1ad3      	subs	r3, r2, r3
 8015f4a:	b29b      	uxth	r3, r3
 8015f4c:	4619      	mov	r1, r3
 8015f4e:	f7fa faef 	bl	8010530 <pbuf_realloc>
  useg->len -= remainder;
 8015f52:	697b      	ldr	r3, [r7, #20]
 8015f54:	891a      	ldrh	r2, [r3, #8]
 8015f56:	89bb      	ldrh	r3, [r7, #12]
 8015f58:	1ad3      	subs	r3, r2, r3
 8015f5a:	b29a      	uxth	r2, r3
 8015f5c:	697b      	ldr	r3, [r7, #20]
 8015f5e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8015f60:	697b      	ldr	r3, [r7, #20]
 8015f62:	68db      	ldr	r3, [r3, #12]
 8015f64:	899b      	ldrh	r3, [r3, #12]
 8015f66:	b29c      	uxth	r4, r3
 8015f68:	7efb      	ldrb	r3, [r7, #27]
 8015f6a:	b29b      	uxth	r3, r3
 8015f6c:	4618      	mov	r0, r3
 8015f6e:	f7f8 f841 	bl	800dff4 <lwip_htons>
 8015f72:	4603      	mov	r3, r0
 8015f74:	461a      	mov	r2, r3
 8015f76:	697b      	ldr	r3, [r7, #20]
 8015f78:	68db      	ldr	r3, [r3, #12]
 8015f7a:	4322      	orrs	r2, r4
 8015f7c:	b292      	uxth	r2, r2
 8015f7e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8015f80:	697b      	ldr	r3, [r7, #20]
 8015f82:	685b      	ldr	r3, [r3, #4]
 8015f84:	4618      	mov	r0, r3
 8015f86:	f7fa fd19 	bl	80109bc <pbuf_clen>
 8015f8a:	4603      	mov	r3, r0
 8015f8c:	461a      	mov	r2, r3
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015f94:	4413      	add	r3, r2
 8015f96:	b29a      	uxth	r2, r3
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015f9e:	69fb      	ldr	r3, [r7, #28]
 8015fa0:	685b      	ldr	r3, [r3, #4]
 8015fa2:	4618      	mov	r0, r3
 8015fa4:	f7fa fd0a 	bl	80109bc <pbuf_clen>
 8015fa8:	4603      	mov	r3, r0
 8015faa:	461a      	mov	r2, r3
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015fb2:	4413      	add	r3, r2
 8015fb4:	b29a      	uxth	r2, r3
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8015fbc:	697b      	ldr	r3, [r7, #20]
 8015fbe:	681a      	ldr	r2, [r3, #0]
 8015fc0:	69fb      	ldr	r3, [r7, #28]
 8015fc2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8015fc4:	697b      	ldr	r3, [r7, #20]
 8015fc6:	69fa      	ldr	r2, [r7, #28]
 8015fc8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8015fca:	69fb      	ldr	r3, [r7, #28]
 8015fcc:	681b      	ldr	r3, [r3, #0]
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	d103      	bne.n	8015fda <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	2200      	movs	r2, #0
 8015fd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8015fda:	2300      	movs	r3, #0
 8015fdc:	e016      	b.n	801600c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8015fde:	bf00      	nop
 8015fe0:	e002      	b.n	8015fe8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8015fe2:	bf00      	nop
 8015fe4:	e000      	b.n	8015fe8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8015fe6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8015fe8:	69fb      	ldr	r3, [r7, #28]
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d006      	beq.n	8015ffc <tcp_split_unsent_seg+0x25c>
 8015fee:	4b09      	ldr	r3, [pc, #36]	; (8016014 <tcp_split_unsent_seg+0x274>)
 8015ff0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8015ff4:	490d      	ldr	r1, [pc, #52]	; (801602c <tcp_split_unsent_seg+0x28c>)
 8015ff6:	4809      	ldr	r0, [pc, #36]	; (801601c <tcp_split_unsent_seg+0x27c>)
 8015ff8:	f00d fdf2 	bl	8023be0 <iprintf>
  if (p != NULL) {
 8015ffc:	693b      	ldr	r3, [r7, #16]
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d002      	beq.n	8016008 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8016002:	6938      	ldr	r0, [r7, #16]
 8016004:	f7fa fc4c 	bl	80108a0 <pbuf_free>
  }

  return ERR_MEM;
 8016008:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801600c:	4618      	mov	r0, r3
 801600e:	3724      	adds	r7, #36	; 0x24
 8016010:	46bd      	mov	sp, r7
 8016012:	bd90      	pop	{r4, r7, pc}
 8016014:	08027a80 	.word	0x08027a80
 8016018:	08027e14 	.word	0x08027e14
 801601c:	08027ad4 	.word	0x08027ad4
 8016020:	08027e38 	.word	0x08027e38
 8016024:	08027e5c 	.word	0x08027e5c
 8016028:	08027e6c 	.word	0x08027e6c
 801602c:	08027e7c 	.word	0x08027e7c

08016030 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8016030:	b590      	push	{r4, r7, lr}
 8016032:	b085      	sub	sp, #20
 8016034:	af00      	add	r7, sp, #0
 8016036:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	2b00      	cmp	r3, #0
 801603c:	d106      	bne.n	801604c <tcp_send_fin+0x1c>
 801603e:	4b21      	ldr	r3, [pc, #132]	; (80160c4 <tcp_send_fin+0x94>)
 8016040:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8016044:	4920      	ldr	r1, [pc, #128]	; (80160c8 <tcp_send_fin+0x98>)
 8016046:	4821      	ldr	r0, [pc, #132]	; (80160cc <tcp_send_fin+0x9c>)
 8016048:	f00d fdca 	bl	8023be0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016050:	2b00      	cmp	r3, #0
 8016052:	d02e      	beq.n	80160b2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016058:	60fb      	str	r3, [r7, #12]
 801605a:	e002      	b.n	8016062 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801605c:	68fb      	ldr	r3, [r7, #12]
 801605e:	681b      	ldr	r3, [r3, #0]
 8016060:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	681b      	ldr	r3, [r3, #0]
 8016066:	2b00      	cmp	r3, #0
 8016068:	d1f8      	bne.n	801605c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801606a:	68fb      	ldr	r3, [r7, #12]
 801606c:	68db      	ldr	r3, [r3, #12]
 801606e:	899b      	ldrh	r3, [r3, #12]
 8016070:	b29b      	uxth	r3, r3
 8016072:	4618      	mov	r0, r3
 8016074:	f7f7 ffbe 	bl	800dff4 <lwip_htons>
 8016078:	4603      	mov	r3, r0
 801607a:	b2db      	uxtb	r3, r3
 801607c:	f003 0307 	and.w	r3, r3, #7
 8016080:	2b00      	cmp	r3, #0
 8016082:	d116      	bne.n	80160b2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	68db      	ldr	r3, [r3, #12]
 8016088:	899b      	ldrh	r3, [r3, #12]
 801608a:	b29c      	uxth	r4, r3
 801608c:	2001      	movs	r0, #1
 801608e:	f7f7 ffb1 	bl	800dff4 <lwip_htons>
 8016092:	4603      	mov	r3, r0
 8016094:	461a      	mov	r2, r3
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	68db      	ldr	r3, [r3, #12]
 801609a:	4322      	orrs	r2, r4
 801609c:	b292      	uxth	r2, r2
 801609e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	8b5b      	ldrh	r3, [r3, #26]
 80160a4:	f043 0320 	orr.w	r3, r3, #32
 80160a8:	b29a      	uxth	r2, r3
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80160ae:	2300      	movs	r3, #0
 80160b0:	e004      	b.n	80160bc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80160b2:	2101      	movs	r1, #1
 80160b4:	6878      	ldr	r0, [r7, #4]
 80160b6:	f000 f80b 	bl	80160d0 <tcp_enqueue_flags>
 80160ba:	4603      	mov	r3, r0
}
 80160bc:	4618      	mov	r0, r3
 80160be:	3714      	adds	r7, #20
 80160c0:	46bd      	mov	sp, r7
 80160c2:	bd90      	pop	{r4, r7, pc}
 80160c4:	08027a80 	.word	0x08027a80
 80160c8:	08027e88 	.word	0x08027e88
 80160cc:	08027ad4 	.word	0x08027ad4

080160d0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80160d0:	b580      	push	{r7, lr}
 80160d2:	b08a      	sub	sp, #40	; 0x28
 80160d4:	af02      	add	r7, sp, #8
 80160d6:	6078      	str	r0, [r7, #4]
 80160d8:	460b      	mov	r3, r1
 80160da:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80160dc:	2300      	movs	r3, #0
 80160de:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80160e0:	2300      	movs	r3, #0
 80160e2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80160e4:	78fb      	ldrb	r3, [r7, #3]
 80160e6:	f003 0303 	and.w	r3, r3, #3
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d106      	bne.n	80160fc <tcp_enqueue_flags+0x2c>
 80160ee:	4b67      	ldr	r3, [pc, #412]	; (801628c <tcp_enqueue_flags+0x1bc>)
 80160f0:	f240 4211 	movw	r2, #1041	; 0x411
 80160f4:	4966      	ldr	r1, [pc, #408]	; (8016290 <tcp_enqueue_flags+0x1c0>)
 80160f6:	4867      	ldr	r0, [pc, #412]	; (8016294 <tcp_enqueue_flags+0x1c4>)
 80160f8:	f00d fd72 	bl	8023be0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	2b00      	cmp	r3, #0
 8016100:	d106      	bne.n	8016110 <tcp_enqueue_flags+0x40>
 8016102:	4b62      	ldr	r3, [pc, #392]	; (801628c <tcp_enqueue_flags+0x1bc>)
 8016104:	f240 4213 	movw	r2, #1043	; 0x413
 8016108:	4963      	ldr	r1, [pc, #396]	; (8016298 <tcp_enqueue_flags+0x1c8>)
 801610a:	4862      	ldr	r0, [pc, #392]	; (8016294 <tcp_enqueue_flags+0x1c4>)
 801610c:	f00d fd68 	bl	8023be0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8016110:	78fb      	ldrb	r3, [r7, #3]
 8016112:	f003 0302 	and.w	r3, r3, #2
 8016116:	2b00      	cmp	r3, #0
 8016118:	d001      	beq.n	801611e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801611a:	2301      	movs	r3, #1
 801611c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801611e:	7ffb      	ldrb	r3, [r7, #31]
 8016120:	009b      	lsls	r3, r3, #2
 8016122:	b2db      	uxtb	r3, r3
 8016124:	f003 0304 	and.w	r3, r3, #4
 8016128:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801612a:	7dfb      	ldrb	r3, [r7, #23]
 801612c:	b29b      	uxth	r3, r3
 801612e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016132:	4619      	mov	r1, r3
 8016134:	2036      	movs	r0, #54	; 0x36
 8016136:	f7fa f89d 	bl	8010274 <pbuf_alloc>
 801613a:	6138      	str	r0, [r7, #16]
 801613c:	693b      	ldr	r3, [r7, #16]
 801613e:	2b00      	cmp	r3, #0
 8016140:	d109      	bne.n	8016156 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	8b5b      	ldrh	r3, [r3, #26]
 8016146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801614a:	b29a      	uxth	r2, r3
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016150:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016154:	e095      	b.n	8016282 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8016156:	693b      	ldr	r3, [r7, #16]
 8016158:	895a      	ldrh	r2, [r3, #10]
 801615a:	7dfb      	ldrb	r3, [r7, #23]
 801615c:	b29b      	uxth	r3, r3
 801615e:	429a      	cmp	r2, r3
 8016160:	d206      	bcs.n	8016170 <tcp_enqueue_flags+0xa0>
 8016162:	4b4a      	ldr	r3, [pc, #296]	; (801628c <tcp_enqueue_flags+0x1bc>)
 8016164:	f240 4239 	movw	r2, #1081	; 0x439
 8016168:	494c      	ldr	r1, [pc, #304]	; (801629c <tcp_enqueue_flags+0x1cc>)
 801616a:	484a      	ldr	r0, [pc, #296]	; (8016294 <tcp_enqueue_flags+0x1c4>)
 801616c:	f00d fd38 	bl	8023be0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8016174:	78fa      	ldrb	r2, [r7, #3]
 8016176:	7ffb      	ldrb	r3, [r7, #31]
 8016178:	9300      	str	r3, [sp, #0]
 801617a:	460b      	mov	r3, r1
 801617c:	6939      	ldr	r1, [r7, #16]
 801617e:	6878      	ldr	r0, [r7, #4]
 8016180:	f7ff f918 	bl	80153b4 <tcp_create_segment>
 8016184:	60f8      	str	r0, [r7, #12]
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	2b00      	cmp	r3, #0
 801618a:	d109      	bne.n	80161a0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	8b5b      	ldrh	r3, [r3, #26]
 8016190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016194:	b29a      	uxth	r2, r3
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801619a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801619e:	e070      	b.n	8016282 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	68db      	ldr	r3, [r3, #12]
 80161a4:	f003 0303 	and.w	r3, r3, #3
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d006      	beq.n	80161ba <tcp_enqueue_flags+0xea>
 80161ac:	4b37      	ldr	r3, [pc, #220]	; (801628c <tcp_enqueue_flags+0x1bc>)
 80161ae:	f240 4242 	movw	r2, #1090	; 0x442
 80161b2:	493b      	ldr	r1, [pc, #236]	; (80162a0 <tcp_enqueue_flags+0x1d0>)
 80161b4:	4837      	ldr	r0, [pc, #220]	; (8016294 <tcp_enqueue_flags+0x1c4>)
 80161b6:	f00d fd13 	bl	8023be0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80161ba:	68fb      	ldr	r3, [r7, #12]
 80161bc:	891b      	ldrh	r3, [r3, #8]
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d006      	beq.n	80161d0 <tcp_enqueue_flags+0x100>
 80161c2:	4b32      	ldr	r3, [pc, #200]	; (801628c <tcp_enqueue_flags+0x1bc>)
 80161c4:	f240 4243 	movw	r2, #1091	; 0x443
 80161c8:	4936      	ldr	r1, [pc, #216]	; (80162a4 <tcp_enqueue_flags+0x1d4>)
 80161ca:	4832      	ldr	r0, [pc, #200]	; (8016294 <tcp_enqueue_flags+0x1c4>)
 80161cc:	f00d fd08 	bl	8023be0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d103      	bne.n	80161e0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	68fa      	ldr	r2, [r7, #12]
 80161dc:	66da      	str	r2, [r3, #108]	; 0x6c
 80161de:	e00d      	b.n	80161fc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80161e4:	61bb      	str	r3, [r7, #24]
 80161e6:	e002      	b.n	80161ee <tcp_enqueue_flags+0x11e>
 80161e8:	69bb      	ldr	r3, [r7, #24]
 80161ea:	681b      	ldr	r3, [r3, #0]
 80161ec:	61bb      	str	r3, [r7, #24]
 80161ee:	69bb      	ldr	r3, [r7, #24]
 80161f0:	681b      	ldr	r3, [r3, #0]
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	d1f8      	bne.n	80161e8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80161f6:	69bb      	ldr	r3, [r7, #24]
 80161f8:	68fa      	ldr	r2, [r7, #12]
 80161fa:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	2200      	movs	r2, #0
 8016200:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8016204:	78fb      	ldrb	r3, [r7, #3]
 8016206:	f003 0302 	and.w	r3, r3, #2
 801620a:	2b00      	cmp	r3, #0
 801620c:	d104      	bne.n	8016218 <tcp_enqueue_flags+0x148>
 801620e:	78fb      	ldrb	r3, [r7, #3]
 8016210:	f003 0301 	and.w	r3, r3, #1
 8016214:	2b00      	cmp	r3, #0
 8016216:	d004      	beq.n	8016222 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801621c:	1c5a      	adds	r2, r3, #1
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8016222:	78fb      	ldrb	r3, [r7, #3]
 8016224:	f003 0301 	and.w	r3, r3, #1
 8016228:	2b00      	cmp	r3, #0
 801622a:	d006      	beq.n	801623a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	8b5b      	ldrh	r3, [r3, #26]
 8016230:	f043 0320 	orr.w	r3, r3, #32
 8016234:	b29a      	uxth	r2, r3
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801623a:	68fb      	ldr	r3, [r7, #12]
 801623c:	685b      	ldr	r3, [r3, #4]
 801623e:	4618      	mov	r0, r3
 8016240:	f7fa fbbc 	bl	80109bc <pbuf_clen>
 8016244:	4603      	mov	r3, r0
 8016246:	461a      	mov	r2, r3
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801624e:	4413      	add	r3, r2
 8016250:	b29a      	uxth	r2, r3
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801625e:	2b00      	cmp	r3, #0
 8016260:	d00e      	beq.n	8016280 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016266:	2b00      	cmp	r3, #0
 8016268:	d10a      	bne.n	8016280 <tcp_enqueue_flags+0x1b0>
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801626e:	2b00      	cmp	r3, #0
 8016270:	d106      	bne.n	8016280 <tcp_enqueue_flags+0x1b0>
 8016272:	4b06      	ldr	r3, [pc, #24]	; (801628c <tcp_enqueue_flags+0x1bc>)
 8016274:	f240 4265 	movw	r2, #1125	; 0x465
 8016278:	490b      	ldr	r1, [pc, #44]	; (80162a8 <tcp_enqueue_flags+0x1d8>)
 801627a:	4806      	ldr	r0, [pc, #24]	; (8016294 <tcp_enqueue_flags+0x1c4>)
 801627c:	f00d fcb0 	bl	8023be0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8016280:	2300      	movs	r3, #0
}
 8016282:	4618      	mov	r0, r3
 8016284:	3720      	adds	r7, #32
 8016286:	46bd      	mov	sp, r7
 8016288:	bd80      	pop	{r7, pc}
 801628a:	bf00      	nop
 801628c:	08027a80 	.word	0x08027a80
 8016290:	08027ea4 	.word	0x08027ea4
 8016294:	08027ad4 	.word	0x08027ad4
 8016298:	08027efc 	.word	0x08027efc
 801629c:	08027f1c 	.word	0x08027f1c
 80162a0:	08027f58 	.word	0x08027f58
 80162a4:	08027f70 	.word	0x08027f70
 80162a8:	08027f9c 	.word	0x08027f9c

080162ac <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80162ac:	b5b0      	push	{r4, r5, r7, lr}
 80162ae:	b08a      	sub	sp, #40	; 0x28
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d106      	bne.n	80162c8 <tcp_output+0x1c>
 80162ba:	4b8a      	ldr	r3, [pc, #552]	; (80164e4 <tcp_output+0x238>)
 80162bc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80162c0:	4989      	ldr	r1, [pc, #548]	; (80164e8 <tcp_output+0x23c>)
 80162c2:	488a      	ldr	r0, [pc, #552]	; (80164ec <tcp_output+0x240>)
 80162c4:	f00d fc8c 	bl	8023be0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	7d1b      	ldrb	r3, [r3, #20]
 80162cc:	2b01      	cmp	r3, #1
 80162ce:	d106      	bne.n	80162de <tcp_output+0x32>
 80162d0:	4b84      	ldr	r3, [pc, #528]	; (80164e4 <tcp_output+0x238>)
 80162d2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80162d6:	4986      	ldr	r1, [pc, #536]	; (80164f0 <tcp_output+0x244>)
 80162d8:	4884      	ldr	r0, [pc, #528]	; (80164ec <tcp_output+0x240>)
 80162da:	f00d fc81 	bl	8023be0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80162de:	4b85      	ldr	r3, [pc, #532]	; (80164f4 <tcp_output+0x248>)
 80162e0:	681b      	ldr	r3, [r3, #0]
 80162e2:	687a      	ldr	r2, [r7, #4]
 80162e4:	429a      	cmp	r2, r3
 80162e6:	d101      	bne.n	80162ec <tcp_output+0x40>
    return ERR_OK;
 80162e8:	2300      	movs	r3, #0
 80162ea:	e1ce      	b.n	801668a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80162f8:	4293      	cmp	r3, r2
 80162fa:	bf28      	it	cs
 80162fc:	4613      	movcs	r3, r2
 80162fe:	b29b      	uxth	r3, r3
 8016300:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016306:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8016308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801630a:	2b00      	cmp	r3, #0
 801630c:	d10b      	bne.n	8016326 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	8b5b      	ldrh	r3, [r3, #26]
 8016312:	f003 0302 	and.w	r3, r3, #2
 8016316:	2b00      	cmp	r3, #0
 8016318:	f000 81aa 	beq.w	8016670 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801631c:	6878      	ldr	r0, [r7, #4]
 801631e:	f000 fdcb 	bl	8016eb8 <tcp_send_empty_ack>
 8016322:	4603      	mov	r3, r0
 8016324:	e1b1      	b.n	801668a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8016326:	6879      	ldr	r1, [r7, #4]
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	3304      	adds	r3, #4
 801632c:	461a      	mov	r2, r3
 801632e:	6878      	ldr	r0, [r7, #4]
 8016330:	f7ff f824 	bl	801537c <tcp_route>
 8016334:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8016336:	697b      	ldr	r3, [r7, #20]
 8016338:	2b00      	cmp	r3, #0
 801633a:	d102      	bne.n	8016342 <tcp_output+0x96>
    return ERR_RTE;
 801633c:	f06f 0303 	mvn.w	r3, #3
 8016340:	e1a3      	b.n	801668a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	2b00      	cmp	r3, #0
 8016346:	d003      	beq.n	8016350 <tcp_output+0xa4>
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	681b      	ldr	r3, [r3, #0]
 801634c:	2b00      	cmp	r3, #0
 801634e:	d111      	bne.n	8016374 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8016350:	697b      	ldr	r3, [r7, #20]
 8016352:	2b00      	cmp	r3, #0
 8016354:	d002      	beq.n	801635c <tcp_output+0xb0>
 8016356:	697b      	ldr	r3, [r7, #20]
 8016358:	3304      	adds	r3, #4
 801635a:	e000      	b.n	801635e <tcp_output+0xb2>
 801635c:	2300      	movs	r3, #0
 801635e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8016360:	693b      	ldr	r3, [r7, #16]
 8016362:	2b00      	cmp	r3, #0
 8016364:	d102      	bne.n	801636c <tcp_output+0xc0>
      return ERR_RTE;
 8016366:	f06f 0303 	mvn.w	r3, #3
 801636a:	e18e      	b.n	801668a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801636c:	693b      	ldr	r3, [r7, #16]
 801636e:	681a      	ldr	r2, [r3, #0]
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8016374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016376:	68db      	ldr	r3, [r3, #12]
 8016378:	685b      	ldr	r3, [r3, #4]
 801637a:	4618      	mov	r0, r3
 801637c:	f7f7 fe4f 	bl	800e01e <lwip_htonl>
 8016380:	4602      	mov	r2, r0
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016386:	1ad3      	subs	r3, r2, r3
 8016388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801638a:	8912      	ldrh	r2, [r2, #8]
 801638c:	4413      	add	r3, r2
 801638e:	69ba      	ldr	r2, [r7, #24]
 8016390:	429a      	cmp	r2, r3
 8016392:	d227      	bcs.n	80163e4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801639a:	461a      	mov	r2, r3
 801639c:	69bb      	ldr	r3, [r7, #24]
 801639e:	4293      	cmp	r3, r2
 80163a0:	d114      	bne.n	80163cc <tcp_output+0x120>
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d110      	bne.n	80163cc <tcp_output+0x120>
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d10b      	bne.n	80163cc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	2200      	movs	r2, #0
 80163b8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	2201      	movs	r2, #1
 80163c0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	2200      	movs	r2, #0
 80163c8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	8b5b      	ldrh	r3, [r3, #26]
 80163d0:	f003 0302 	and.w	r3, r3, #2
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	f000 814d 	beq.w	8016674 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80163da:	6878      	ldr	r0, [r7, #4]
 80163dc:	f000 fd6c 	bl	8016eb8 <tcp_send_empty_ack>
 80163e0:	4603      	mov	r3, r0
 80163e2:	e152      	b.n	801668a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	2200      	movs	r2, #0
 80163e8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80163f0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80163f2:	6a3b      	ldr	r3, [r7, #32]
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	f000 811c 	beq.w	8016632 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80163fa:	e002      	b.n	8016402 <tcp_output+0x156>
 80163fc:	6a3b      	ldr	r3, [r7, #32]
 80163fe:	681b      	ldr	r3, [r3, #0]
 8016400:	623b      	str	r3, [r7, #32]
 8016402:	6a3b      	ldr	r3, [r7, #32]
 8016404:	681b      	ldr	r3, [r3, #0]
 8016406:	2b00      	cmp	r3, #0
 8016408:	d1f8      	bne.n	80163fc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801640a:	e112      	b.n	8016632 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801640e:	68db      	ldr	r3, [r3, #12]
 8016410:	899b      	ldrh	r3, [r3, #12]
 8016412:	b29b      	uxth	r3, r3
 8016414:	4618      	mov	r0, r3
 8016416:	f7f7 fded 	bl	800dff4 <lwip_htons>
 801641a:	4603      	mov	r3, r0
 801641c:	b2db      	uxtb	r3, r3
 801641e:	f003 0304 	and.w	r3, r3, #4
 8016422:	2b00      	cmp	r3, #0
 8016424:	d006      	beq.n	8016434 <tcp_output+0x188>
 8016426:	4b2f      	ldr	r3, [pc, #188]	; (80164e4 <tcp_output+0x238>)
 8016428:	f240 5236 	movw	r2, #1334	; 0x536
 801642c:	4932      	ldr	r1, [pc, #200]	; (80164f8 <tcp_output+0x24c>)
 801642e:	482f      	ldr	r0, [pc, #188]	; (80164ec <tcp_output+0x240>)
 8016430:	f00d fbd6 	bl	8023be0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016438:	2b00      	cmp	r3, #0
 801643a:	d01f      	beq.n	801647c <tcp_output+0x1d0>
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	8b5b      	ldrh	r3, [r3, #26]
 8016440:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8016444:	2b00      	cmp	r3, #0
 8016446:	d119      	bne.n	801647c <tcp_output+0x1d0>
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801644c:	2b00      	cmp	r3, #0
 801644e:	d00b      	beq.n	8016468 <tcp_output+0x1bc>
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016454:	681b      	ldr	r3, [r3, #0]
 8016456:	2b00      	cmp	r3, #0
 8016458:	d110      	bne.n	801647c <tcp_output+0x1d0>
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801645e:	891a      	ldrh	r2, [r3, #8]
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016464:	429a      	cmp	r2, r3
 8016466:	d209      	bcs.n	801647c <tcp_output+0x1d0>
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801646e:	2b00      	cmp	r3, #0
 8016470:	d004      	beq.n	801647c <tcp_output+0x1d0>
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016478:	2b08      	cmp	r3, #8
 801647a:	d901      	bls.n	8016480 <tcp_output+0x1d4>
 801647c:	2301      	movs	r3, #1
 801647e:	e000      	b.n	8016482 <tcp_output+0x1d6>
 8016480:	2300      	movs	r3, #0
 8016482:	2b00      	cmp	r3, #0
 8016484:	d106      	bne.n	8016494 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	8b5b      	ldrh	r3, [r3, #26]
 801648a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801648e:	2b00      	cmp	r3, #0
 8016490:	f000 80e4 	beq.w	801665c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	7d1b      	ldrb	r3, [r3, #20]
 8016498:	2b02      	cmp	r3, #2
 801649a:	d00d      	beq.n	80164b8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801649c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801649e:	68db      	ldr	r3, [r3, #12]
 80164a0:	899b      	ldrh	r3, [r3, #12]
 80164a2:	b29c      	uxth	r4, r3
 80164a4:	2010      	movs	r0, #16
 80164a6:	f7f7 fda5 	bl	800dff4 <lwip_htons>
 80164aa:	4603      	mov	r3, r0
 80164ac:	461a      	mov	r2, r3
 80164ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164b0:	68db      	ldr	r3, [r3, #12]
 80164b2:	4322      	orrs	r2, r4
 80164b4:	b292      	uxth	r2, r2
 80164b6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80164b8:	697a      	ldr	r2, [r7, #20]
 80164ba:	6879      	ldr	r1, [r7, #4]
 80164bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80164be:	f000 f909 	bl	80166d4 <tcp_output_segment>
 80164c2:	4603      	mov	r3, r0
 80164c4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80164c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d016      	beq.n	80164fc <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	8b5b      	ldrh	r3, [r3, #26]
 80164d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80164d6:	b29a      	uxth	r2, r3
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	835a      	strh	r2, [r3, #26]
      return err;
 80164dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80164e0:	e0d3      	b.n	801668a <tcp_output+0x3de>
 80164e2:	bf00      	nop
 80164e4:	08027a80 	.word	0x08027a80
 80164e8:	08027fc4 	.word	0x08027fc4
 80164ec:	08027ad4 	.word	0x08027ad4
 80164f0:	08027fdc 	.word	0x08027fdc
 80164f4:	2000fc88 	.word	0x2000fc88
 80164f8:	08028004 	.word	0x08028004
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80164fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164fe:	681a      	ldr	r2, [r3, #0]
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	7d1b      	ldrb	r3, [r3, #20]
 8016508:	2b02      	cmp	r3, #2
 801650a:	d006      	beq.n	801651a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	8b5b      	ldrh	r3, [r3, #26]
 8016510:	f023 0303 	bic.w	r3, r3, #3
 8016514:	b29a      	uxth	r2, r3
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801651c:	68db      	ldr	r3, [r3, #12]
 801651e:	685b      	ldr	r3, [r3, #4]
 8016520:	4618      	mov	r0, r3
 8016522:	f7f7 fd7c 	bl	800e01e <lwip_htonl>
 8016526:	4604      	mov	r4, r0
 8016528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801652a:	891b      	ldrh	r3, [r3, #8]
 801652c:	461d      	mov	r5, r3
 801652e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016530:	68db      	ldr	r3, [r3, #12]
 8016532:	899b      	ldrh	r3, [r3, #12]
 8016534:	b29b      	uxth	r3, r3
 8016536:	4618      	mov	r0, r3
 8016538:	f7f7 fd5c 	bl	800dff4 <lwip_htons>
 801653c:	4603      	mov	r3, r0
 801653e:	b2db      	uxtb	r3, r3
 8016540:	f003 0303 	and.w	r3, r3, #3
 8016544:	2b00      	cmp	r3, #0
 8016546:	d001      	beq.n	801654c <tcp_output+0x2a0>
 8016548:	2301      	movs	r3, #1
 801654a:	e000      	b.n	801654e <tcp_output+0x2a2>
 801654c:	2300      	movs	r3, #0
 801654e:	442b      	add	r3, r5
 8016550:	4423      	add	r3, r4
 8016552:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016558:	68bb      	ldr	r3, [r7, #8]
 801655a:	1ad3      	subs	r3, r2, r3
 801655c:	2b00      	cmp	r3, #0
 801655e:	da02      	bge.n	8016566 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	68ba      	ldr	r2, [r7, #8]
 8016564:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8016566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016568:	891b      	ldrh	r3, [r3, #8]
 801656a:	461c      	mov	r4, r3
 801656c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801656e:	68db      	ldr	r3, [r3, #12]
 8016570:	899b      	ldrh	r3, [r3, #12]
 8016572:	b29b      	uxth	r3, r3
 8016574:	4618      	mov	r0, r3
 8016576:	f7f7 fd3d 	bl	800dff4 <lwip_htons>
 801657a:	4603      	mov	r3, r0
 801657c:	b2db      	uxtb	r3, r3
 801657e:	f003 0303 	and.w	r3, r3, #3
 8016582:	2b00      	cmp	r3, #0
 8016584:	d001      	beq.n	801658a <tcp_output+0x2de>
 8016586:	2301      	movs	r3, #1
 8016588:	e000      	b.n	801658c <tcp_output+0x2e0>
 801658a:	2300      	movs	r3, #0
 801658c:	4423      	add	r3, r4
 801658e:	2b00      	cmp	r3, #0
 8016590:	d049      	beq.n	8016626 <tcp_output+0x37a>
      seg->next = NULL;
 8016592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016594:	2200      	movs	r2, #0
 8016596:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801659c:	2b00      	cmp	r3, #0
 801659e:	d105      	bne.n	80165ac <tcp_output+0x300>
        pcb->unacked = seg;
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80165a4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80165a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165a8:	623b      	str	r3, [r7, #32]
 80165aa:	e03f      	b.n	801662c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80165ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165ae:	68db      	ldr	r3, [r3, #12]
 80165b0:	685b      	ldr	r3, [r3, #4]
 80165b2:	4618      	mov	r0, r3
 80165b4:	f7f7 fd33 	bl	800e01e <lwip_htonl>
 80165b8:	4604      	mov	r4, r0
 80165ba:	6a3b      	ldr	r3, [r7, #32]
 80165bc:	68db      	ldr	r3, [r3, #12]
 80165be:	685b      	ldr	r3, [r3, #4]
 80165c0:	4618      	mov	r0, r3
 80165c2:	f7f7 fd2c 	bl	800e01e <lwip_htonl>
 80165c6:	4603      	mov	r3, r0
 80165c8:	1ae3      	subs	r3, r4, r3
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	da24      	bge.n	8016618 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	3370      	adds	r3, #112	; 0x70
 80165d2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80165d4:	e002      	b.n	80165dc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80165d6:	69fb      	ldr	r3, [r7, #28]
 80165d8:	681b      	ldr	r3, [r3, #0]
 80165da:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80165dc:	69fb      	ldr	r3, [r7, #28]
 80165de:	681b      	ldr	r3, [r3, #0]
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	d011      	beq.n	8016608 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80165e4:	69fb      	ldr	r3, [r7, #28]
 80165e6:	681b      	ldr	r3, [r3, #0]
 80165e8:	68db      	ldr	r3, [r3, #12]
 80165ea:	685b      	ldr	r3, [r3, #4]
 80165ec:	4618      	mov	r0, r3
 80165ee:	f7f7 fd16 	bl	800e01e <lwip_htonl>
 80165f2:	4604      	mov	r4, r0
 80165f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165f6:	68db      	ldr	r3, [r3, #12]
 80165f8:	685b      	ldr	r3, [r3, #4]
 80165fa:	4618      	mov	r0, r3
 80165fc:	f7f7 fd0f 	bl	800e01e <lwip_htonl>
 8016600:	4603      	mov	r3, r0
 8016602:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8016604:	2b00      	cmp	r3, #0
 8016606:	dbe6      	blt.n	80165d6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8016608:	69fb      	ldr	r3, [r7, #28]
 801660a:	681a      	ldr	r2, [r3, #0]
 801660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801660e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8016610:	69fb      	ldr	r3, [r7, #28]
 8016612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016614:	601a      	str	r2, [r3, #0]
 8016616:	e009      	b.n	801662c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8016618:	6a3b      	ldr	r3, [r7, #32]
 801661a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801661c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801661e:	6a3b      	ldr	r3, [r7, #32]
 8016620:	681b      	ldr	r3, [r3, #0]
 8016622:	623b      	str	r3, [r7, #32]
 8016624:	e002      	b.n	801662c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8016626:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016628:	f7fb ff19 	bl	801245e <tcp_seg_free>
    }
    seg = pcb->unsent;
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016630:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8016632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016634:	2b00      	cmp	r3, #0
 8016636:	d012      	beq.n	801665e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8016638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801663a:	68db      	ldr	r3, [r3, #12]
 801663c:	685b      	ldr	r3, [r3, #4]
 801663e:	4618      	mov	r0, r3
 8016640:	f7f7 fced 	bl	800e01e <lwip_htonl>
 8016644:	4602      	mov	r2, r0
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801664a:	1ad3      	subs	r3, r2, r3
 801664c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801664e:	8912      	ldrh	r2, [r2, #8]
 8016650:	4413      	add	r3, r2
  while (seg != NULL &&
 8016652:	69ba      	ldr	r2, [r7, #24]
 8016654:	429a      	cmp	r2, r3
 8016656:	f4bf aed9 	bcs.w	801640c <tcp_output+0x160>
 801665a:	e000      	b.n	801665e <tcp_output+0x3b2>
      break;
 801665c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016662:	2b00      	cmp	r3, #0
 8016664:	d108      	bne.n	8016678 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	2200      	movs	r2, #0
 801666a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801666e:	e004      	b.n	801667a <tcp_output+0x3ce>
    goto output_done;
 8016670:	bf00      	nop
 8016672:	e002      	b.n	801667a <tcp_output+0x3ce>
    goto output_done;
 8016674:	bf00      	nop
 8016676:	e000      	b.n	801667a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8016678:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	8b5b      	ldrh	r3, [r3, #26]
 801667e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016682:	b29a      	uxth	r2, r3
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8016688:	2300      	movs	r3, #0
}
 801668a:	4618      	mov	r0, r3
 801668c:	3728      	adds	r7, #40	; 0x28
 801668e:	46bd      	mov	sp, r7
 8016690:	bdb0      	pop	{r4, r5, r7, pc}
 8016692:	bf00      	nop

08016694 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8016694:	b580      	push	{r7, lr}
 8016696:	b082      	sub	sp, #8
 8016698:	af00      	add	r7, sp, #0
 801669a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d106      	bne.n	80166b0 <tcp_output_segment_busy+0x1c>
 80166a2:	4b09      	ldr	r3, [pc, #36]	; (80166c8 <tcp_output_segment_busy+0x34>)
 80166a4:	f240 529a 	movw	r2, #1434	; 0x59a
 80166a8:	4908      	ldr	r1, [pc, #32]	; (80166cc <tcp_output_segment_busy+0x38>)
 80166aa:	4809      	ldr	r0, [pc, #36]	; (80166d0 <tcp_output_segment_busy+0x3c>)
 80166ac:	f00d fa98 	bl	8023be0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	685b      	ldr	r3, [r3, #4]
 80166b4:	7b9b      	ldrb	r3, [r3, #14]
 80166b6:	2b01      	cmp	r3, #1
 80166b8:	d001      	beq.n	80166be <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80166ba:	2301      	movs	r3, #1
 80166bc:	e000      	b.n	80166c0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80166be:	2300      	movs	r3, #0
}
 80166c0:	4618      	mov	r0, r3
 80166c2:	3708      	adds	r7, #8
 80166c4:	46bd      	mov	sp, r7
 80166c6:	bd80      	pop	{r7, pc}
 80166c8:	08027a80 	.word	0x08027a80
 80166cc:	0802801c 	.word	0x0802801c
 80166d0:	08027ad4 	.word	0x08027ad4

080166d4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80166d4:	b5b0      	push	{r4, r5, r7, lr}
 80166d6:	b08c      	sub	sp, #48	; 0x30
 80166d8:	af04      	add	r7, sp, #16
 80166da:	60f8      	str	r0, [r7, #12]
 80166dc:	60b9      	str	r1, [r7, #8]
 80166de:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80166e0:	68fb      	ldr	r3, [r7, #12]
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	d106      	bne.n	80166f4 <tcp_output_segment+0x20>
 80166e6:	4b63      	ldr	r3, [pc, #396]	; (8016874 <tcp_output_segment+0x1a0>)
 80166e8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80166ec:	4962      	ldr	r1, [pc, #392]	; (8016878 <tcp_output_segment+0x1a4>)
 80166ee:	4863      	ldr	r0, [pc, #396]	; (801687c <tcp_output_segment+0x1a8>)
 80166f0:	f00d fa76 	bl	8023be0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80166f4:	68bb      	ldr	r3, [r7, #8]
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d106      	bne.n	8016708 <tcp_output_segment+0x34>
 80166fa:	4b5e      	ldr	r3, [pc, #376]	; (8016874 <tcp_output_segment+0x1a0>)
 80166fc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8016700:	495f      	ldr	r1, [pc, #380]	; (8016880 <tcp_output_segment+0x1ac>)
 8016702:	485e      	ldr	r0, [pc, #376]	; (801687c <tcp_output_segment+0x1a8>)
 8016704:	f00d fa6c 	bl	8023be0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	2b00      	cmp	r3, #0
 801670c:	d106      	bne.n	801671c <tcp_output_segment+0x48>
 801670e:	4b59      	ldr	r3, [pc, #356]	; (8016874 <tcp_output_segment+0x1a0>)
 8016710:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8016714:	495b      	ldr	r1, [pc, #364]	; (8016884 <tcp_output_segment+0x1b0>)
 8016716:	4859      	ldr	r0, [pc, #356]	; (801687c <tcp_output_segment+0x1a8>)
 8016718:	f00d fa62 	bl	8023be0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801671c:	68f8      	ldr	r0, [r7, #12]
 801671e:	f7ff ffb9 	bl	8016694 <tcp_output_segment_busy>
 8016722:	4603      	mov	r3, r0
 8016724:	2b00      	cmp	r3, #0
 8016726:	d001      	beq.n	801672c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8016728:	2300      	movs	r3, #0
 801672a:	e09f      	b.n	801686c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801672c:	68bb      	ldr	r3, [r7, #8]
 801672e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016730:	68fb      	ldr	r3, [r7, #12]
 8016732:	68dc      	ldr	r4, [r3, #12]
 8016734:	4610      	mov	r0, r2
 8016736:	f7f7 fc72 	bl	800e01e <lwip_htonl>
 801673a:	4603      	mov	r3, r0
 801673c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801673e:	68bb      	ldr	r3, [r7, #8]
 8016740:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8016742:	68fb      	ldr	r3, [r7, #12]
 8016744:	68dc      	ldr	r4, [r3, #12]
 8016746:	4610      	mov	r0, r2
 8016748:	f7f7 fc54 	bl	800dff4 <lwip_htons>
 801674c:	4603      	mov	r3, r0
 801674e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8016750:	68bb      	ldr	r3, [r7, #8]
 8016752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016754:	68ba      	ldr	r2, [r7, #8]
 8016756:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8016758:	441a      	add	r2, r3
 801675a:	68bb      	ldr	r3, [r7, #8]
 801675c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801675e:	68fb      	ldr	r3, [r7, #12]
 8016760:	68db      	ldr	r3, [r3, #12]
 8016762:	3314      	adds	r3, #20
 8016764:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8016766:	68fb      	ldr	r3, [r7, #12]
 8016768:	7a9b      	ldrb	r3, [r3, #10]
 801676a:	f003 0301 	and.w	r3, r3, #1
 801676e:	2b00      	cmp	r3, #0
 8016770:	d015      	beq.n	801679e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8016772:	68bb      	ldr	r3, [r7, #8]
 8016774:	3304      	adds	r3, #4
 8016776:	461a      	mov	r2, r3
 8016778:	6879      	ldr	r1, [r7, #4]
 801677a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801677e:	f7fc fa33 	bl	8012be8 <tcp_eff_send_mss_netif>
 8016782:	4603      	mov	r3, r0
 8016784:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8016786:	8b7b      	ldrh	r3, [r7, #26]
 8016788:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801678c:	4618      	mov	r0, r3
 801678e:	f7f7 fc46 	bl	800e01e <lwip_htonl>
 8016792:	4602      	mov	r2, r0
 8016794:	69fb      	ldr	r3, [r7, #28]
 8016796:	601a      	str	r2, [r3, #0]
    opts += 1;
 8016798:	69fb      	ldr	r3, [r7, #28]
 801679a:	3304      	adds	r3, #4
 801679c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801679e:	68bb      	ldr	r3, [r7, #8]
 80167a0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	da02      	bge.n	80167ae <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80167a8:	68bb      	ldr	r3, [r7, #8]
 80167aa:	2200      	movs	r2, #0
 80167ac:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80167ae:	68bb      	ldr	r3, [r7, #8]
 80167b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d10c      	bne.n	80167d0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80167b6:	4b34      	ldr	r3, [pc, #208]	; (8016888 <tcp_output_segment+0x1b4>)
 80167b8:	681a      	ldr	r2, [r3, #0]
 80167ba:	68bb      	ldr	r3, [r7, #8]
 80167bc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80167be:	68fb      	ldr	r3, [r7, #12]
 80167c0:	68db      	ldr	r3, [r3, #12]
 80167c2:	685b      	ldr	r3, [r3, #4]
 80167c4:	4618      	mov	r0, r3
 80167c6:	f7f7 fc2a 	bl	800e01e <lwip_htonl>
 80167ca:	4602      	mov	r2, r0
 80167cc:	68bb      	ldr	r3, [r7, #8]
 80167ce:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80167d0:	68fb      	ldr	r3, [r7, #12]
 80167d2:	68da      	ldr	r2, [r3, #12]
 80167d4:	68fb      	ldr	r3, [r7, #12]
 80167d6:	685b      	ldr	r3, [r3, #4]
 80167d8:	685b      	ldr	r3, [r3, #4]
 80167da:	1ad3      	subs	r3, r2, r3
 80167dc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80167de:	68fb      	ldr	r3, [r7, #12]
 80167e0:	685b      	ldr	r3, [r3, #4]
 80167e2:	8959      	ldrh	r1, [r3, #10]
 80167e4:	68fb      	ldr	r3, [r7, #12]
 80167e6:	685b      	ldr	r3, [r3, #4]
 80167e8:	8b3a      	ldrh	r2, [r7, #24]
 80167ea:	1a8a      	subs	r2, r1, r2
 80167ec:	b292      	uxth	r2, r2
 80167ee:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80167f0:	68fb      	ldr	r3, [r7, #12]
 80167f2:	685b      	ldr	r3, [r3, #4]
 80167f4:	8919      	ldrh	r1, [r3, #8]
 80167f6:	68fb      	ldr	r3, [r7, #12]
 80167f8:	685b      	ldr	r3, [r3, #4]
 80167fa:	8b3a      	ldrh	r2, [r7, #24]
 80167fc:	1a8a      	subs	r2, r1, r2
 80167fe:	b292      	uxth	r2, r2
 8016800:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8016802:	68fb      	ldr	r3, [r7, #12]
 8016804:	685b      	ldr	r3, [r3, #4]
 8016806:	68fa      	ldr	r2, [r7, #12]
 8016808:	68d2      	ldr	r2, [r2, #12]
 801680a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801680c:	68fb      	ldr	r3, [r7, #12]
 801680e:	68db      	ldr	r3, [r3, #12]
 8016810:	2200      	movs	r2, #0
 8016812:	741a      	strb	r2, [r3, #16]
 8016814:	2200      	movs	r2, #0
 8016816:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8016818:	68fb      	ldr	r3, [r7, #12]
 801681a:	68db      	ldr	r3, [r3, #12]
 801681c:	f103 0214 	add.w	r2, r3, #20
 8016820:	68fb      	ldr	r3, [r7, #12]
 8016822:	7a9b      	ldrb	r3, [r3, #10]
 8016824:	009b      	lsls	r3, r3, #2
 8016826:	f003 0304 	and.w	r3, r3, #4
 801682a:	4413      	add	r3, r2
 801682c:	69fa      	ldr	r2, [r7, #28]
 801682e:	429a      	cmp	r2, r3
 8016830:	d006      	beq.n	8016840 <tcp_output_segment+0x16c>
 8016832:	4b10      	ldr	r3, [pc, #64]	; (8016874 <tcp_output_segment+0x1a0>)
 8016834:	f240 621c 	movw	r2, #1564	; 0x61c
 8016838:	4914      	ldr	r1, [pc, #80]	; (801688c <tcp_output_segment+0x1b8>)
 801683a:	4810      	ldr	r0, [pc, #64]	; (801687c <tcp_output_segment+0x1a8>)
 801683c:	f00d f9d0 	bl	8023be0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8016840:	68fb      	ldr	r3, [r7, #12]
 8016842:	6858      	ldr	r0, [r3, #4]
 8016844:	68b9      	ldr	r1, [r7, #8]
 8016846:	68bb      	ldr	r3, [r7, #8]
 8016848:	1d1c      	adds	r4, r3, #4
 801684a:	68bb      	ldr	r3, [r7, #8]
 801684c:	7add      	ldrb	r5, [r3, #11]
 801684e:	68bb      	ldr	r3, [r7, #8]
 8016850:	7a9b      	ldrb	r3, [r3, #10]
 8016852:	687a      	ldr	r2, [r7, #4]
 8016854:	9202      	str	r2, [sp, #8]
 8016856:	2206      	movs	r2, #6
 8016858:	9201      	str	r2, [sp, #4]
 801685a:	9300      	str	r3, [sp, #0]
 801685c:	462b      	mov	r3, r5
 801685e:	4622      	mov	r2, r4
 8016860:	f003 fb62 	bl	8019f28 <ip4_output_if>
 8016864:	4603      	mov	r3, r0
 8016866:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8016868:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801686c:	4618      	mov	r0, r3
 801686e:	3720      	adds	r7, #32
 8016870:	46bd      	mov	sp, r7
 8016872:	bdb0      	pop	{r4, r5, r7, pc}
 8016874:	08027a80 	.word	0x08027a80
 8016878:	08028044 	.word	0x08028044
 801687c:	08027ad4 	.word	0x08027ad4
 8016880:	08028064 	.word	0x08028064
 8016884:	08028084 	.word	0x08028084
 8016888:	2000fc3c 	.word	0x2000fc3c
 801688c:	080280a8 	.word	0x080280a8

08016890 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8016890:	b5b0      	push	{r4, r5, r7, lr}
 8016892:	b084      	sub	sp, #16
 8016894:	af00      	add	r7, sp, #0
 8016896:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	2b00      	cmp	r3, #0
 801689c:	d106      	bne.n	80168ac <tcp_rexmit_rto_prepare+0x1c>
 801689e:	4b31      	ldr	r3, [pc, #196]	; (8016964 <tcp_rexmit_rto_prepare+0xd4>)
 80168a0:	f240 6263 	movw	r2, #1635	; 0x663
 80168a4:	4930      	ldr	r1, [pc, #192]	; (8016968 <tcp_rexmit_rto_prepare+0xd8>)
 80168a6:	4831      	ldr	r0, [pc, #196]	; (801696c <tcp_rexmit_rto_prepare+0xdc>)
 80168a8:	f00d f99a 	bl	8023be0 <iprintf>

  if (pcb->unacked == NULL) {
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	d102      	bne.n	80168ba <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80168b4:	f06f 0305 	mvn.w	r3, #5
 80168b8:	e050      	b.n	801695c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80168be:	60fb      	str	r3, [r7, #12]
 80168c0:	e00b      	b.n	80168da <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80168c2:	68f8      	ldr	r0, [r7, #12]
 80168c4:	f7ff fee6 	bl	8016694 <tcp_output_segment_busy>
 80168c8:	4603      	mov	r3, r0
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d002      	beq.n	80168d4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80168ce:	f06f 0305 	mvn.w	r3, #5
 80168d2:	e043      	b.n	801695c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	681b      	ldr	r3, [r3, #0]
 80168d8:	60fb      	str	r3, [r7, #12]
 80168da:	68fb      	ldr	r3, [r7, #12]
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d1ef      	bne.n	80168c2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80168e2:	68f8      	ldr	r0, [r7, #12]
 80168e4:	f7ff fed6 	bl	8016694 <tcp_output_segment_busy>
 80168e8:	4603      	mov	r3, r0
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d002      	beq.n	80168f4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80168ee:	f06f 0305 	mvn.w	r3, #5
 80168f2:	e033      	b.n	801695c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80168f8:	68fb      	ldr	r3, [r7, #12]
 80168fa:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	2200      	movs	r2, #0
 8016908:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	8b5b      	ldrh	r3, [r3, #26]
 801690e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8016912:	b29a      	uxth	r2, r3
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016918:	68fb      	ldr	r3, [r7, #12]
 801691a:	68db      	ldr	r3, [r3, #12]
 801691c:	685b      	ldr	r3, [r3, #4]
 801691e:	4618      	mov	r0, r3
 8016920:	f7f7 fb7d 	bl	800e01e <lwip_htonl>
 8016924:	4604      	mov	r4, r0
 8016926:	68fb      	ldr	r3, [r7, #12]
 8016928:	891b      	ldrh	r3, [r3, #8]
 801692a:	461d      	mov	r5, r3
 801692c:	68fb      	ldr	r3, [r7, #12]
 801692e:	68db      	ldr	r3, [r3, #12]
 8016930:	899b      	ldrh	r3, [r3, #12]
 8016932:	b29b      	uxth	r3, r3
 8016934:	4618      	mov	r0, r3
 8016936:	f7f7 fb5d 	bl	800dff4 <lwip_htons>
 801693a:	4603      	mov	r3, r0
 801693c:	b2db      	uxtb	r3, r3
 801693e:	f003 0303 	and.w	r3, r3, #3
 8016942:	2b00      	cmp	r3, #0
 8016944:	d001      	beq.n	801694a <tcp_rexmit_rto_prepare+0xba>
 8016946:	2301      	movs	r3, #1
 8016948:	e000      	b.n	801694c <tcp_rexmit_rto_prepare+0xbc>
 801694a:	2300      	movs	r3, #0
 801694c:	442b      	add	r3, r5
 801694e:	18e2      	adds	r2, r4, r3
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	2200      	movs	r2, #0
 8016958:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801695a:	2300      	movs	r3, #0
}
 801695c:	4618      	mov	r0, r3
 801695e:	3710      	adds	r7, #16
 8016960:	46bd      	mov	sp, r7
 8016962:	bdb0      	pop	{r4, r5, r7, pc}
 8016964:	08027a80 	.word	0x08027a80
 8016968:	080280bc 	.word	0x080280bc
 801696c:	08027ad4 	.word	0x08027ad4

08016970 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8016970:	b580      	push	{r7, lr}
 8016972:	b082      	sub	sp, #8
 8016974:	af00      	add	r7, sp, #0
 8016976:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	2b00      	cmp	r3, #0
 801697c:	d106      	bne.n	801698c <tcp_rexmit_rto_commit+0x1c>
 801697e:	4b0d      	ldr	r3, [pc, #52]	; (80169b4 <tcp_rexmit_rto_commit+0x44>)
 8016980:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8016984:	490c      	ldr	r1, [pc, #48]	; (80169b8 <tcp_rexmit_rto_commit+0x48>)
 8016986:	480d      	ldr	r0, [pc, #52]	; (80169bc <tcp_rexmit_rto_commit+0x4c>)
 8016988:	f00d f92a 	bl	8023be0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016992:	2bff      	cmp	r3, #255	; 0xff
 8016994:	d007      	beq.n	80169a6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801699c:	3301      	adds	r3, #1
 801699e:	b2da      	uxtb	r2, r3
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80169a6:	6878      	ldr	r0, [r7, #4]
 80169a8:	f7ff fc80 	bl	80162ac <tcp_output>
}
 80169ac:	bf00      	nop
 80169ae:	3708      	adds	r7, #8
 80169b0:	46bd      	mov	sp, r7
 80169b2:	bd80      	pop	{r7, pc}
 80169b4:	08027a80 	.word	0x08027a80
 80169b8:	080280e0 	.word	0x080280e0
 80169bc:	08027ad4 	.word	0x08027ad4

080169c0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80169c0:	b580      	push	{r7, lr}
 80169c2:	b082      	sub	sp, #8
 80169c4:	af00      	add	r7, sp, #0
 80169c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d106      	bne.n	80169dc <tcp_rexmit_rto+0x1c>
 80169ce:	4b0a      	ldr	r3, [pc, #40]	; (80169f8 <tcp_rexmit_rto+0x38>)
 80169d0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80169d4:	4909      	ldr	r1, [pc, #36]	; (80169fc <tcp_rexmit_rto+0x3c>)
 80169d6:	480a      	ldr	r0, [pc, #40]	; (8016a00 <tcp_rexmit_rto+0x40>)
 80169d8:	f00d f902 	bl	8023be0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80169dc:	6878      	ldr	r0, [r7, #4]
 80169de:	f7ff ff57 	bl	8016890 <tcp_rexmit_rto_prepare>
 80169e2:	4603      	mov	r3, r0
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	d102      	bne.n	80169ee <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80169e8:	6878      	ldr	r0, [r7, #4]
 80169ea:	f7ff ffc1 	bl	8016970 <tcp_rexmit_rto_commit>
  }
}
 80169ee:	bf00      	nop
 80169f0:	3708      	adds	r7, #8
 80169f2:	46bd      	mov	sp, r7
 80169f4:	bd80      	pop	{r7, pc}
 80169f6:	bf00      	nop
 80169f8:	08027a80 	.word	0x08027a80
 80169fc:	08028104 	.word	0x08028104
 8016a00:	08027ad4 	.word	0x08027ad4

08016a04 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8016a04:	b590      	push	{r4, r7, lr}
 8016a06:	b085      	sub	sp, #20
 8016a08:	af00      	add	r7, sp, #0
 8016a0a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d106      	bne.n	8016a20 <tcp_rexmit+0x1c>
 8016a12:	4b2f      	ldr	r3, [pc, #188]	; (8016ad0 <tcp_rexmit+0xcc>)
 8016a14:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8016a18:	492e      	ldr	r1, [pc, #184]	; (8016ad4 <tcp_rexmit+0xd0>)
 8016a1a:	482f      	ldr	r0, [pc, #188]	; (8016ad8 <tcp_rexmit+0xd4>)
 8016a1c:	f00d f8e0 	bl	8023be0 <iprintf>

  if (pcb->unacked == NULL) {
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016a24:	2b00      	cmp	r3, #0
 8016a26:	d102      	bne.n	8016a2e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8016a28:	f06f 0305 	mvn.w	r3, #5
 8016a2c:	e04c      	b.n	8016ac8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016a32:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8016a34:	68b8      	ldr	r0, [r7, #8]
 8016a36:	f7ff fe2d 	bl	8016694 <tcp_output_segment_busy>
 8016a3a:	4603      	mov	r3, r0
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d002      	beq.n	8016a46 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8016a40:	f06f 0305 	mvn.w	r3, #5
 8016a44:	e040      	b.n	8016ac8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8016a46:	68bb      	ldr	r3, [r7, #8]
 8016a48:	681a      	ldr	r2, [r3, #0]
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	336c      	adds	r3, #108	; 0x6c
 8016a52:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016a54:	e002      	b.n	8016a5c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8016a56:	68fb      	ldr	r3, [r7, #12]
 8016a58:	681b      	ldr	r3, [r3, #0]
 8016a5a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016a5c:	68fb      	ldr	r3, [r7, #12]
 8016a5e:	681b      	ldr	r3, [r3, #0]
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	d011      	beq.n	8016a88 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016a64:	68fb      	ldr	r3, [r7, #12]
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	68db      	ldr	r3, [r3, #12]
 8016a6a:	685b      	ldr	r3, [r3, #4]
 8016a6c:	4618      	mov	r0, r3
 8016a6e:	f7f7 fad6 	bl	800e01e <lwip_htonl>
 8016a72:	4604      	mov	r4, r0
 8016a74:	68bb      	ldr	r3, [r7, #8]
 8016a76:	68db      	ldr	r3, [r3, #12]
 8016a78:	685b      	ldr	r3, [r3, #4]
 8016a7a:	4618      	mov	r0, r3
 8016a7c:	f7f7 facf 	bl	800e01e <lwip_htonl>
 8016a80:	4603      	mov	r3, r0
 8016a82:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	dbe6      	blt.n	8016a56 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8016a88:	68fb      	ldr	r3, [r7, #12]
 8016a8a:	681a      	ldr	r2, [r3, #0]
 8016a8c:	68bb      	ldr	r3, [r7, #8]
 8016a8e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8016a90:	68fb      	ldr	r3, [r7, #12]
 8016a92:	68ba      	ldr	r2, [r7, #8]
 8016a94:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8016a96:	68bb      	ldr	r3, [r7, #8]
 8016a98:	681b      	ldr	r3, [r3, #0]
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d103      	bne.n	8016aa6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	2200      	movs	r2, #0
 8016aa2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016aac:	2bff      	cmp	r3, #255	; 0xff
 8016aae:	d007      	beq.n	8016ac0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016ab6:	3301      	adds	r3, #1
 8016ab8:	b2da      	uxtb	r2, r3
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	2200      	movs	r2, #0
 8016ac4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8016ac6:	2300      	movs	r3, #0
}
 8016ac8:	4618      	mov	r0, r3
 8016aca:	3714      	adds	r7, #20
 8016acc:	46bd      	mov	sp, r7
 8016ace:	bd90      	pop	{r4, r7, pc}
 8016ad0:	08027a80 	.word	0x08027a80
 8016ad4:	08028120 	.word	0x08028120
 8016ad8:	08027ad4 	.word	0x08027ad4

08016adc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8016adc:	b580      	push	{r7, lr}
 8016ade:	b082      	sub	sp, #8
 8016ae0:	af00      	add	r7, sp, #0
 8016ae2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	d106      	bne.n	8016af8 <tcp_rexmit_fast+0x1c>
 8016aea:	4b2a      	ldr	r3, [pc, #168]	; (8016b94 <tcp_rexmit_fast+0xb8>)
 8016aec:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8016af0:	4929      	ldr	r1, [pc, #164]	; (8016b98 <tcp_rexmit_fast+0xbc>)
 8016af2:	482a      	ldr	r0, [pc, #168]	; (8016b9c <tcp_rexmit_fast+0xc0>)
 8016af4:	f00d f874 	bl	8023be0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d045      	beq.n	8016b8c <tcp_rexmit_fast+0xb0>
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	8b5b      	ldrh	r3, [r3, #26]
 8016b04:	f003 0304 	and.w	r3, r3, #4
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d13f      	bne.n	8016b8c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8016b0c:	6878      	ldr	r0, [r7, #4]
 8016b0e:	f7ff ff79 	bl	8016a04 <tcp_rexmit>
 8016b12:	4603      	mov	r3, r0
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d139      	bne.n	8016b8c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016b24:	4293      	cmp	r3, r2
 8016b26:	bf28      	it	cs
 8016b28:	4613      	movcs	r3, r2
 8016b2a:	b29b      	uxth	r3, r3
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	da00      	bge.n	8016b32 <tcp_rexmit_fast+0x56>
 8016b30:	3301      	adds	r3, #1
 8016b32:	105b      	asrs	r3, r3, #1
 8016b34:	b29a      	uxth	r2, r3
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8016b42:	461a      	mov	r2, r3
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016b48:	005b      	lsls	r3, r3, #1
 8016b4a:	429a      	cmp	r2, r3
 8016b4c:	d206      	bcs.n	8016b5c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016b52:	005b      	lsls	r3, r3, #1
 8016b54:	b29a      	uxth	r2, r3
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016b66:	4619      	mov	r1, r3
 8016b68:	0049      	lsls	r1, r1, #1
 8016b6a:	440b      	add	r3, r1
 8016b6c:	b29b      	uxth	r3, r3
 8016b6e:	4413      	add	r3, r2
 8016b70:	b29a      	uxth	r2, r3
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	8b5b      	ldrh	r3, [r3, #26]
 8016b7c:	f043 0304 	orr.w	r3, r3, #4
 8016b80:	b29a      	uxth	r2, r3
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	2200      	movs	r2, #0
 8016b8a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8016b8c:	bf00      	nop
 8016b8e:	3708      	adds	r7, #8
 8016b90:	46bd      	mov	sp, r7
 8016b92:	bd80      	pop	{r7, pc}
 8016b94:	08027a80 	.word	0x08027a80
 8016b98:	08028138 	.word	0x08028138
 8016b9c:	08027ad4 	.word	0x08027ad4

08016ba0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8016ba0:	b580      	push	{r7, lr}
 8016ba2:	b086      	sub	sp, #24
 8016ba4:	af00      	add	r7, sp, #0
 8016ba6:	60f8      	str	r0, [r7, #12]
 8016ba8:	607b      	str	r3, [r7, #4]
 8016baa:	460b      	mov	r3, r1
 8016bac:	817b      	strh	r3, [r7, #10]
 8016bae:	4613      	mov	r3, r2
 8016bb0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8016bb2:	897a      	ldrh	r2, [r7, #10]
 8016bb4:	893b      	ldrh	r3, [r7, #8]
 8016bb6:	4413      	add	r3, r2
 8016bb8:	b29b      	uxth	r3, r3
 8016bba:	3314      	adds	r3, #20
 8016bbc:	b29b      	uxth	r3, r3
 8016bbe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016bc2:	4619      	mov	r1, r3
 8016bc4:	2022      	movs	r0, #34	; 0x22
 8016bc6:	f7f9 fb55 	bl	8010274 <pbuf_alloc>
 8016bca:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8016bcc:	697b      	ldr	r3, [r7, #20]
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	d04d      	beq.n	8016c6e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8016bd2:	897b      	ldrh	r3, [r7, #10]
 8016bd4:	3313      	adds	r3, #19
 8016bd6:	697a      	ldr	r2, [r7, #20]
 8016bd8:	8952      	ldrh	r2, [r2, #10]
 8016bda:	4293      	cmp	r3, r2
 8016bdc:	db06      	blt.n	8016bec <tcp_output_alloc_header_common+0x4c>
 8016bde:	4b26      	ldr	r3, [pc, #152]	; (8016c78 <tcp_output_alloc_header_common+0xd8>)
 8016be0:	f240 7223 	movw	r2, #1827	; 0x723
 8016be4:	4925      	ldr	r1, [pc, #148]	; (8016c7c <tcp_output_alloc_header_common+0xdc>)
 8016be6:	4826      	ldr	r0, [pc, #152]	; (8016c80 <tcp_output_alloc_header_common+0xe0>)
 8016be8:	f00c fffa 	bl	8023be0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8016bec:	697b      	ldr	r3, [r7, #20]
 8016bee:	685b      	ldr	r3, [r3, #4]
 8016bf0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8016bf2:	8c3b      	ldrh	r3, [r7, #32]
 8016bf4:	4618      	mov	r0, r3
 8016bf6:	f7f7 f9fd 	bl	800dff4 <lwip_htons>
 8016bfa:	4603      	mov	r3, r0
 8016bfc:	461a      	mov	r2, r3
 8016bfe:	693b      	ldr	r3, [r7, #16]
 8016c00:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8016c02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016c04:	4618      	mov	r0, r3
 8016c06:	f7f7 f9f5 	bl	800dff4 <lwip_htons>
 8016c0a:	4603      	mov	r3, r0
 8016c0c:	461a      	mov	r2, r3
 8016c0e:	693b      	ldr	r3, [r7, #16]
 8016c10:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8016c12:	693b      	ldr	r3, [r7, #16]
 8016c14:	687a      	ldr	r2, [r7, #4]
 8016c16:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8016c18:	68f8      	ldr	r0, [r7, #12]
 8016c1a:	f7f7 fa00 	bl	800e01e <lwip_htonl>
 8016c1e:	4602      	mov	r2, r0
 8016c20:	693b      	ldr	r3, [r7, #16]
 8016c22:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8016c24:	897b      	ldrh	r3, [r7, #10]
 8016c26:	089b      	lsrs	r3, r3, #2
 8016c28:	b29b      	uxth	r3, r3
 8016c2a:	3305      	adds	r3, #5
 8016c2c:	b29b      	uxth	r3, r3
 8016c2e:	031b      	lsls	r3, r3, #12
 8016c30:	b29a      	uxth	r2, r3
 8016c32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016c36:	b29b      	uxth	r3, r3
 8016c38:	4313      	orrs	r3, r2
 8016c3a:	b29b      	uxth	r3, r3
 8016c3c:	4618      	mov	r0, r3
 8016c3e:	f7f7 f9d9 	bl	800dff4 <lwip_htons>
 8016c42:	4603      	mov	r3, r0
 8016c44:	461a      	mov	r2, r3
 8016c46:	693b      	ldr	r3, [r7, #16]
 8016c48:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8016c4a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016c4c:	4618      	mov	r0, r3
 8016c4e:	f7f7 f9d1 	bl	800dff4 <lwip_htons>
 8016c52:	4603      	mov	r3, r0
 8016c54:	461a      	mov	r2, r3
 8016c56:	693b      	ldr	r3, [r7, #16]
 8016c58:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8016c5a:	693b      	ldr	r3, [r7, #16]
 8016c5c:	2200      	movs	r2, #0
 8016c5e:	741a      	strb	r2, [r3, #16]
 8016c60:	2200      	movs	r2, #0
 8016c62:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8016c64:	693b      	ldr	r3, [r7, #16]
 8016c66:	2200      	movs	r2, #0
 8016c68:	749a      	strb	r2, [r3, #18]
 8016c6a:	2200      	movs	r2, #0
 8016c6c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8016c6e:	697b      	ldr	r3, [r7, #20]
}
 8016c70:	4618      	mov	r0, r3
 8016c72:	3718      	adds	r7, #24
 8016c74:	46bd      	mov	sp, r7
 8016c76:	bd80      	pop	{r7, pc}
 8016c78:	08027a80 	.word	0x08027a80
 8016c7c:	08028158 	.word	0x08028158
 8016c80:	08027ad4 	.word	0x08027ad4

08016c84 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8016c84:	b5b0      	push	{r4, r5, r7, lr}
 8016c86:	b08a      	sub	sp, #40	; 0x28
 8016c88:	af04      	add	r7, sp, #16
 8016c8a:	60f8      	str	r0, [r7, #12]
 8016c8c:	607b      	str	r3, [r7, #4]
 8016c8e:	460b      	mov	r3, r1
 8016c90:	817b      	strh	r3, [r7, #10]
 8016c92:	4613      	mov	r3, r2
 8016c94:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8016c96:	68fb      	ldr	r3, [r7, #12]
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	d106      	bne.n	8016caa <tcp_output_alloc_header+0x26>
 8016c9c:	4b15      	ldr	r3, [pc, #84]	; (8016cf4 <tcp_output_alloc_header+0x70>)
 8016c9e:	f240 7242 	movw	r2, #1858	; 0x742
 8016ca2:	4915      	ldr	r1, [pc, #84]	; (8016cf8 <tcp_output_alloc_header+0x74>)
 8016ca4:	4815      	ldr	r0, [pc, #84]	; (8016cfc <tcp_output_alloc_header+0x78>)
 8016ca6:	f00c ff9b 	bl	8023be0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8016caa:	68fb      	ldr	r3, [r7, #12]
 8016cac:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016cae:	68fb      	ldr	r3, [r7, #12]
 8016cb0:	8adb      	ldrh	r3, [r3, #22]
 8016cb2:	68fa      	ldr	r2, [r7, #12]
 8016cb4:	8b12      	ldrh	r2, [r2, #24]
 8016cb6:	68f9      	ldr	r1, [r7, #12]
 8016cb8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8016cba:	893d      	ldrh	r5, [r7, #8]
 8016cbc:	897c      	ldrh	r4, [r7, #10]
 8016cbe:	9103      	str	r1, [sp, #12]
 8016cc0:	2110      	movs	r1, #16
 8016cc2:	9102      	str	r1, [sp, #8]
 8016cc4:	9201      	str	r2, [sp, #4]
 8016cc6:	9300      	str	r3, [sp, #0]
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	462a      	mov	r2, r5
 8016ccc:	4621      	mov	r1, r4
 8016cce:	f7ff ff67 	bl	8016ba0 <tcp_output_alloc_header_common>
 8016cd2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8016cd4:	697b      	ldr	r3, [r7, #20]
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d006      	beq.n	8016ce8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8016cda:	68fb      	ldr	r3, [r7, #12]
 8016cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016cde:	68fa      	ldr	r2, [r7, #12]
 8016ce0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8016ce2:	441a      	add	r2, r3
 8016ce4:	68fb      	ldr	r3, [r7, #12]
 8016ce6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8016ce8:	697b      	ldr	r3, [r7, #20]
}
 8016cea:	4618      	mov	r0, r3
 8016cec:	3718      	adds	r7, #24
 8016cee:	46bd      	mov	sp, r7
 8016cf0:	bdb0      	pop	{r4, r5, r7, pc}
 8016cf2:	bf00      	nop
 8016cf4:	08027a80 	.word	0x08027a80
 8016cf8:	08028188 	.word	0x08028188
 8016cfc:	08027ad4 	.word	0x08027ad4

08016d00 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8016d00:	b580      	push	{r7, lr}
 8016d02:	b088      	sub	sp, #32
 8016d04:	af00      	add	r7, sp, #0
 8016d06:	60f8      	str	r0, [r7, #12]
 8016d08:	60b9      	str	r1, [r7, #8]
 8016d0a:	4611      	mov	r1, r2
 8016d0c:	461a      	mov	r2, r3
 8016d0e:	460b      	mov	r3, r1
 8016d10:	71fb      	strb	r3, [r7, #7]
 8016d12:	4613      	mov	r3, r2
 8016d14:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8016d16:	2300      	movs	r3, #0
 8016d18:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8016d1a:	68bb      	ldr	r3, [r7, #8]
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	d106      	bne.n	8016d2e <tcp_output_fill_options+0x2e>
 8016d20:	4b13      	ldr	r3, [pc, #76]	; (8016d70 <tcp_output_fill_options+0x70>)
 8016d22:	f240 7256 	movw	r2, #1878	; 0x756
 8016d26:	4913      	ldr	r1, [pc, #76]	; (8016d74 <tcp_output_fill_options+0x74>)
 8016d28:	4813      	ldr	r0, [pc, #76]	; (8016d78 <tcp_output_fill_options+0x78>)
 8016d2a:	f00c ff59 	bl	8023be0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8016d2e:	68bb      	ldr	r3, [r7, #8]
 8016d30:	685b      	ldr	r3, [r3, #4]
 8016d32:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8016d34:	69bb      	ldr	r3, [r7, #24]
 8016d36:	3314      	adds	r3, #20
 8016d38:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8016d3a:	69bb      	ldr	r3, [r7, #24]
 8016d3c:	f103 0214 	add.w	r2, r3, #20
 8016d40:	8bfb      	ldrh	r3, [r7, #30]
 8016d42:	009b      	lsls	r3, r3, #2
 8016d44:	4619      	mov	r1, r3
 8016d46:	79fb      	ldrb	r3, [r7, #7]
 8016d48:	009b      	lsls	r3, r3, #2
 8016d4a:	f003 0304 	and.w	r3, r3, #4
 8016d4e:	440b      	add	r3, r1
 8016d50:	4413      	add	r3, r2
 8016d52:	697a      	ldr	r2, [r7, #20]
 8016d54:	429a      	cmp	r2, r3
 8016d56:	d006      	beq.n	8016d66 <tcp_output_fill_options+0x66>
 8016d58:	4b05      	ldr	r3, [pc, #20]	; (8016d70 <tcp_output_fill_options+0x70>)
 8016d5a:	f240 7275 	movw	r2, #1909	; 0x775
 8016d5e:	4907      	ldr	r1, [pc, #28]	; (8016d7c <tcp_output_fill_options+0x7c>)
 8016d60:	4805      	ldr	r0, [pc, #20]	; (8016d78 <tcp_output_fill_options+0x78>)
 8016d62:	f00c ff3d 	bl	8023be0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8016d66:	bf00      	nop
 8016d68:	3720      	adds	r7, #32
 8016d6a:	46bd      	mov	sp, r7
 8016d6c:	bd80      	pop	{r7, pc}
 8016d6e:	bf00      	nop
 8016d70:	08027a80 	.word	0x08027a80
 8016d74:	080281b0 	.word	0x080281b0
 8016d78:	08027ad4 	.word	0x08027ad4
 8016d7c:	080280a8 	.word	0x080280a8

08016d80 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8016d80:	b580      	push	{r7, lr}
 8016d82:	b08a      	sub	sp, #40	; 0x28
 8016d84:	af04      	add	r7, sp, #16
 8016d86:	60f8      	str	r0, [r7, #12]
 8016d88:	60b9      	str	r1, [r7, #8]
 8016d8a:	607a      	str	r2, [r7, #4]
 8016d8c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8016d8e:	68bb      	ldr	r3, [r7, #8]
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	d106      	bne.n	8016da2 <tcp_output_control_segment+0x22>
 8016d94:	4b1c      	ldr	r3, [pc, #112]	; (8016e08 <tcp_output_control_segment+0x88>)
 8016d96:	f240 7287 	movw	r2, #1927	; 0x787
 8016d9a:	491c      	ldr	r1, [pc, #112]	; (8016e0c <tcp_output_control_segment+0x8c>)
 8016d9c:	481c      	ldr	r0, [pc, #112]	; (8016e10 <tcp_output_control_segment+0x90>)
 8016d9e:	f00c ff1f 	bl	8023be0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8016da2:	683a      	ldr	r2, [r7, #0]
 8016da4:	6879      	ldr	r1, [r7, #4]
 8016da6:	68f8      	ldr	r0, [r7, #12]
 8016da8:	f7fe fae8 	bl	801537c <tcp_route>
 8016dac:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8016dae:	693b      	ldr	r3, [r7, #16]
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	d102      	bne.n	8016dba <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8016db4:	23fc      	movs	r3, #252	; 0xfc
 8016db6:	75fb      	strb	r3, [r7, #23]
 8016db8:	e01c      	b.n	8016df4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8016dba:	68fb      	ldr	r3, [r7, #12]
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	d006      	beq.n	8016dce <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8016dc0:	68fb      	ldr	r3, [r7, #12]
 8016dc2:	7adb      	ldrb	r3, [r3, #11]
 8016dc4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8016dc6:	68fb      	ldr	r3, [r7, #12]
 8016dc8:	7a9b      	ldrb	r3, [r3, #10]
 8016dca:	757b      	strb	r3, [r7, #21]
 8016dcc:	e003      	b.n	8016dd6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8016dce:	23ff      	movs	r3, #255	; 0xff
 8016dd0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8016dd2:	2300      	movs	r3, #0
 8016dd4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8016dd6:	7dba      	ldrb	r2, [r7, #22]
 8016dd8:	693b      	ldr	r3, [r7, #16]
 8016dda:	9302      	str	r3, [sp, #8]
 8016ddc:	2306      	movs	r3, #6
 8016dde:	9301      	str	r3, [sp, #4]
 8016de0:	7d7b      	ldrb	r3, [r7, #21]
 8016de2:	9300      	str	r3, [sp, #0]
 8016de4:	4613      	mov	r3, r2
 8016de6:	683a      	ldr	r2, [r7, #0]
 8016de8:	6879      	ldr	r1, [r7, #4]
 8016dea:	68b8      	ldr	r0, [r7, #8]
 8016dec:	f003 f89c 	bl	8019f28 <ip4_output_if>
 8016df0:	4603      	mov	r3, r0
 8016df2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8016df4:	68b8      	ldr	r0, [r7, #8]
 8016df6:	f7f9 fd53 	bl	80108a0 <pbuf_free>
  return err;
 8016dfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016dfe:	4618      	mov	r0, r3
 8016e00:	3718      	adds	r7, #24
 8016e02:	46bd      	mov	sp, r7
 8016e04:	bd80      	pop	{r7, pc}
 8016e06:	bf00      	nop
 8016e08:	08027a80 	.word	0x08027a80
 8016e0c:	080281d8 	.word	0x080281d8
 8016e10:	08027ad4 	.word	0x08027ad4

08016e14 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8016e14:	b590      	push	{r4, r7, lr}
 8016e16:	b08b      	sub	sp, #44	; 0x2c
 8016e18:	af04      	add	r7, sp, #16
 8016e1a:	60f8      	str	r0, [r7, #12]
 8016e1c:	60b9      	str	r1, [r7, #8]
 8016e1e:	607a      	str	r2, [r7, #4]
 8016e20:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8016e22:	683b      	ldr	r3, [r7, #0]
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	d106      	bne.n	8016e36 <tcp_rst+0x22>
 8016e28:	4b1f      	ldr	r3, [pc, #124]	; (8016ea8 <tcp_rst+0x94>)
 8016e2a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8016e2e:	491f      	ldr	r1, [pc, #124]	; (8016eac <tcp_rst+0x98>)
 8016e30:	481f      	ldr	r0, [pc, #124]	; (8016eb0 <tcp_rst+0x9c>)
 8016e32:	f00c fed5 	bl	8023be0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8016e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e38:	2b00      	cmp	r3, #0
 8016e3a:	d106      	bne.n	8016e4a <tcp_rst+0x36>
 8016e3c:	4b1a      	ldr	r3, [pc, #104]	; (8016ea8 <tcp_rst+0x94>)
 8016e3e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8016e42:	491c      	ldr	r1, [pc, #112]	; (8016eb4 <tcp_rst+0xa0>)
 8016e44:	481a      	ldr	r0, [pc, #104]	; (8016eb0 <tcp_rst+0x9c>)
 8016e46:	f00c fecb 	bl	8023be0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016e4a:	2300      	movs	r3, #0
 8016e4c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8016e4e:	f246 0308 	movw	r3, #24584	; 0x6008
 8016e52:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8016e54:	7dfb      	ldrb	r3, [r7, #23]
 8016e56:	b29c      	uxth	r4, r3
 8016e58:	68b8      	ldr	r0, [r7, #8]
 8016e5a:	f7f7 f8e0 	bl	800e01e <lwip_htonl>
 8016e5e:	4602      	mov	r2, r0
 8016e60:	8abb      	ldrh	r3, [r7, #20]
 8016e62:	9303      	str	r3, [sp, #12]
 8016e64:	2314      	movs	r3, #20
 8016e66:	9302      	str	r3, [sp, #8]
 8016e68:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8016e6a:	9301      	str	r3, [sp, #4]
 8016e6c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016e6e:	9300      	str	r3, [sp, #0]
 8016e70:	4613      	mov	r3, r2
 8016e72:	2200      	movs	r2, #0
 8016e74:	4621      	mov	r1, r4
 8016e76:	6878      	ldr	r0, [r7, #4]
 8016e78:	f7ff fe92 	bl	8016ba0 <tcp_output_alloc_header_common>
 8016e7c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8016e7e:	693b      	ldr	r3, [r7, #16]
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	d00c      	beq.n	8016e9e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016e84:	7dfb      	ldrb	r3, [r7, #23]
 8016e86:	2200      	movs	r2, #0
 8016e88:	6939      	ldr	r1, [r7, #16]
 8016e8a:	68f8      	ldr	r0, [r7, #12]
 8016e8c:	f7ff ff38 	bl	8016d00 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8016e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e92:	683a      	ldr	r2, [r7, #0]
 8016e94:	6939      	ldr	r1, [r7, #16]
 8016e96:	68f8      	ldr	r0, [r7, #12]
 8016e98:	f7ff ff72 	bl	8016d80 <tcp_output_control_segment>
 8016e9c:	e000      	b.n	8016ea0 <tcp_rst+0x8c>
    return;
 8016e9e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8016ea0:	371c      	adds	r7, #28
 8016ea2:	46bd      	mov	sp, r7
 8016ea4:	bd90      	pop	{r4, r7, pc}
 8016ea6:	bf00      	nop
 8016ea8:	08027a80 	.word	0x08027a80
 8016eac:	08028204 	.word	0x08028204
 8016eb0:	08027ad4 	.word	0x08027ad4
 8016eb4:	08028220 	.word	0x08028220

08016eb8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8016eb8:	b590      	push	{r4, r7, lr}
 8016eba:	b087      	sub	sp, #28
 8016ebc:	af00      	add	r7, sp, #0
 8016ebe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8016ec0:	2300      	movs	r3, #0
 8016ec2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8016ec4:	2300      	movs	r3, #0
 8016ec6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	d106      	bne.n	8016edc <tcp_send_empty_ack+0x24>
 8016ece:	4b28      	ldr	r3, [pc, #160]	; (8016f70 <tcp_send_empty_ack+0xb8>)
 8016ed0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8016ed4:	4927      	ldr	r1, [pc, #156]	; (8016f74 <tcp_send_empty_ack+0xbc>)
 8016ed6:	4828      	ldr	r0, [pc, #160]	; (8016f78 <tcp_send_empty_ack+0xc0>)
 8016ed8:	f00c fe82 	bl	8023be0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016edc:	7dfb      	ldrb	r3, [r7, #23]
 8016ede:	009b      	lsls	r3, r3, #2
 8016ee0:	b2db      	uxtb	r3, r3
 8016ee2:	f003 0304 	and.w	r3, r3, #4
 8016ee6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8016ee8:	7d7b      	ldrb	r3, [r7, #21]
 8016eea:	b29c      	uxth	r4, r3
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016ef0:	4618      	mov	r0, r3
 8016ef2:	f7f7 f894 	bl	800e01e <lwip_htonl>
 8016ef6:	4603      	mov	r3, r0
 8016ef8:	2200      	movs	r2, #0
 8016efa:	4621      	mov	r1, r4
 8016efc:	6878      	ldr	r0, [r7, #4]
 8016efe:	f7ff fec1 	bl	8016c84 <tcp_output_alloc_header>
 8016f02:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016f04:	693b      	ldr	r3, [r7, #16]
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d109      	bne.n	8016f1e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	8b5b      	ldrh	r3, [r3, #26]
 8016f0e:	f043 0303 	orr.w	r3, r3, #3
 8016f12:	b29a      	uxth	r2, r3
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8016f18:	f06f 0301 	mvn.w	r3, #1
 8016f1c:	e023      	b.n	8016f66 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8016f1e:	7dbb      	ldrb	r3, [r7, #22]
 8016f20:	7dfa      	ldrb	r2, [r7, #23]
 8016f22:	6939      	ldr	r1, [r7, #16]
 8016f24:	6878      	ldr	r0, [r7, #4]
 8016f26:	f7ff feeb 	bl	8016d00 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016f2a:	687a      	ldr	r2, [r7, #4]
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	3304      	adds	r3, #4
 8016f30:	6939      	ldr	r1, [r7, #16]
 8016f32:	6878      	ldr	r0, [r7, #4]
 8016f34:	f7ff ff24 	bl	8016d80 <tcp_output_control_segment>
 8016f38:	4603      	mov	r3, r0
 8016f3a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8016f3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	d007      	beq.n	8016f54 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	8b5b      	ldrh	r3, [r3, #26]
 8016f48:	f043 0303 	orr.w	r3, r3, #3
 8016f4c:	b29a      	uxth	r2, r3
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	835a      	strh	r2, [r3, #26]
 8016f52:	e006      	b.n	8016f62 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	8b5b      	ldrh	r3, [r3, #26]
 8016f58:	f023 0303 	bic.w	r3, r3, #3
 8016f5c:	b29a      	uxth	r2, r3
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8016f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016f66:	4618      	mov	r0, r3
 8016f68:	371c      	adds	r7, #28
 8016f6a:	46bd      	mov	sp, r7
 8016f6c:	bd90      	pop	{r4, r7, pc}
 8016f6e:	bf00      	nop
 8016f70:	08027a80 	.word	0x08027a80
 8016f74:	0802823c 	.word	0x0802823c
 8016f78:	08027ad4 	.word	0x08027ad4

08016f7c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8016f7c:	b590      	push	{r4, r7, lr}
 8016f7e:	b087      	sub	sp, #28
 8016f80:	af00      	add	r7, sp, #0
 8016f82:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016f84:	2300      	movs	r3, #0
 8016f86:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d106      	bne.n	8016f9c <tcp_keepalive+0x20>
 8016f8e:	4b18      	ldr	r3, [pc, #96]	; (8016ff0 <tcp_keepalive+0x74>)
 8016f90:	f640 0224 	movw	r2, #2084	; 0x824
 8016f94:	4917      	ldr	r1, [pc, #92]	; (8016ff4 <tcp_keepalive+0x78>)
 8016f96:	4818      	ldr	r0, [pc, #96]	; (8016ff8 <tcp_keepalive+0x7c>)
 8016f98:	f00c fe22 	bl	8023be0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8016f9c:	7dfb      	ldrb	r3, [r7, #23]
 8016f9e:	b29c      	uxth	r4, r3
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016fa4:	3b01      	subs	r3, #1
 8016fa6:	4618      	mov	r0, r3
 8016fa8:	f7f7 f839 	bl	800e01e <lwip_htonl>
 8016fac:	4603      	mov	r3, r0
 8016fae:	2200      	movs	r2, #0
 8016fb0:	4621      	mov	r1, r4
 8016fb2:	6878      	ldr	r0, [r7, #4]
 8016fb4:	f7ff fe66 	bl	8016c84 <tcp_output_alloc_header>
 8016fb8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016fba:	693b      	ldr	r3, [r7, #16]
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	d102      	bne.n	8016fc6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8016fc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016fc4:	e010      	b.n	8016fe8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016fc6:	7dfb      	ldrb	r3, [r7, #23]
 8016fc8:	2200      	movs	r2, #0
 8016fca:	6939      	ldr	r1, [r7, #16]
 8016fcc:	6878      	ldr	r0, [r7, #4]
 8016fce:	f7ff fe97 	bl	8016d00 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016fd2:	687a      	ldr	r2, [r7, #4]
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	3304      	adds	r3, #4
 8016fd8:	6939      	ldr	r1, [r7, #16]
 8016fda:	6878      	ldr	r0, [r7, #4]
 8016fdc:	f7ff fed0 	bl	8016d80 <tcp_output_control_segment>
 8016fe0:	4603      	mov	r3, r0
 8016fe2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016fe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016fe8:	4618      	mov	r0, r3
 8016fea:	371c      	adds	r7, #28
 8016fec:	46bd      	mov	sp, r7
 8016fee:	bd90      	pop	{r4, r7, pc}
 8016ff0:	08027a80 	.word	0x08027a80
 8016ff4:	0802825c 	.word	0x0802825c
 8016ff8:	08027ad4 	.word	0x08027ad4

08016ffc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8016ffc:	b590      	push	{r4, r7, lr}
 8016ffe:	b08b      	sub	sp, #44	; 0x2c
 8017000:	af00      	add	r7, sp, #0
 8017002:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017004:	2300      	movs	r3, #0
 8017006:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	2b00      	cmp	r3, #0
 801700e:	d106      	bne.n	801701e <tcp_zero_window_probe+0x22>
 8017010:	4b4c      	ldr	r3, [pc, #304]	; (8017144 <tcp_zero_window_probe+0x148>)
 8017012:	f640 024f 	movw	r2, #2127	; 0x84f
 8017016:	494c      	ldr	r1, [pc, #304]	; (8017148 <tcp_zero_window_probe+0x14c>)
 8017018:	484c      	ldr	r0, [pc, #304]	; (801714c <tcp_zero_window_probe+0x150>)
 801701a:	f00c fde1 	bl	8023be0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017022:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8017024:	6a3b      	ldr	r3, [r7, #32]
 8017026:	2b00      	cmp	r3, #0
 8017028:	d101      	bne.n	801702e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801702a:	2300      	movs	r3, #0
 801702c:	e086      	b.n	801713c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8017034:	2bff      	cmp	r3, #255	; 0xff
 8017036:	d007      	beq.n	8017048 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801703e:	3301      	adds	r3, #1
 8017040:	b2da      	uxtb	r2, r3
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8017048:	6a3b      	ldr	r3, [r7, #32]
 801704a:	68db      	ldr	r3, [r3, #12]
 801704c:	899b      	ldrh	r3, [r3, #12]
 801704e:	b29b      	uxth	r3, r3
 8017050:	4618      	mov	r0, r3
 8017052:	f7f6 ffcf 	bl	800dff4 <lwip_htons>
 8017056:	4603      	mov	r3, r0
 8017058:	b2db      	uxtb	r3, r3
 801705a:	f003 0301 	and.w	r3, r3, #1
 801705e:	2b00      	cmp	r3, #0
 8017060:	d005      	beq.n	801706e <tcp_zero_window_probe+0x72>
 8017062:	6a3b      	ldr	r3, [r7, #32]
 8017064:	891b      	ldrh	r3, [r3, #8]
 8017066:	2b00      	cmp	r3, #0
 8017068:	d101      	bne.n	801706e <tcp_zero_window_probe+0x72>
 801706a:	2301      	movs	r3, #1
 801706c:	e000      	b.n	8017070 <tcp_zero_window_probe+0x74>
 801706e:	2300      	movs	r3, #0
 8017070:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8017072:	7ffb      	ldrb	r3, [r7, #31]
 8017074:	2b00      	cmp	r3, #0
 8017076:	bf0c      	ite	eq
 8017078:	2301      	moveq	r3, #1
 801707a:	2300      	movne	r3, #0
 801707c:	b2db      	uxtb	r3, r3
 801707e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8017080:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017084:	b299      	uxth	r1, r3
 8017086:	6a3b      	ldr	r3, [r7, #32]
 8017088:	68db      	ldr	r3, [r3, #12]
 801708a:	685b      	ldr	r3, [r3, #4]
 801708c:	8bba      	ldrh	r2, [r7, #28]
 801708e:	6878      	ldr	r0, [r7, #4]
 8017090:	f7ff fdf8 	bl	8016c84 <tcp_output_alloc_header>
 8017094:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8017096:	69bb      	ldr	r3, [r7, #24]
 8017098:	2b00      	cmp	r3, #0
 801709a:	d102      	bne.n	80170a2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801709c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80170a0:	e04c      	b.n	801713c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80170a2:	69bb      	ldr	r3, [r7, #24]
 80170a4:	685b      	ldr	r3, [r3, #4]
 80170a6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80170a8:	7ffb      	ldrb	r3, [r7, #31]
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d011      	beq.n	80170d2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80170ae:	697b      	ldr	r3, [r7, #20]
 80170b0:	899b      	ldrh	r3, [r3, #12]
 80170b2:	b29b      	uxth	r3, r3
 80170b4:	b21b      	sxth	r3, r3
 80170b6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80170ba:	b21c      	sxth	r4, r3
 80170bc:	2011      	movs	r0, #17
 80170be:	f7f6 ff99 	bl	800dff4 <lwip_htons>
 80170c2:	4603      	mov	r3, r0
 80170c4:	b21b      	sxth	r3, r3
 80170c6:	4323      	orrs	r3, r4
 80170c8:	b21b      	sxth	r3, r3
 80170ca:	b29a      	uxth	r2, r3
 80170cc:	697b      	ldr	r3, [r7, #20]
 80170ce:	819a      	strh	r2, [r3, #12]
 80170d0:	e010      	b.n	80170f4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80170d2:	69bb      	ldr	r3, [r7, #24]
 80170d4:	685b      	ldr	r3, [r3, #4]
 80170d6:	3314      	adds	r3, #20
 80170d8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80170da:	6a3b      	ldr	r3, [r7, #32]
 80170dc:	6858      	ldr	r0, [r3, #4]
 80170de:	6a3b      	ldr	r3, [r7, #32]
 80170e0:	685b      	ldr	r3, [r3, #4]
 80170e2:	891a      	ldrh	r2, [r3, #8]
 80170e4:	6a3b      	ldr	r3, [r7, #32]
 80170e6:	891b      	ldrh	r3, [r3, #8]
 80170e8:	1ad3      	subs	r3, r2, r3
 80170ea:	b29b      	uxth	r3, r3
 80170ec:	2201      	movs	r2, #1
 80170ee:	6939      	ldr	r1, [r7, #16]
 80170f0:	f7f9 fddc 	bl	8010cac <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80170f4:	6a3b      	ldr	r3, [r7, #32]
 80170f6:	68db      	ldr	r3, [r3, #12]
 80170f8:	685b      	ldr	r3, [r3, #4]
 80170fa:	4618      	mov	r0, r3
 80170fc:	f7f6 ff8f 	bl	800e01e <lwip_htonl>
 8017100:	4603      	mov	r3, r0
 8017102:	3301      	adds	r3, #1
 8017104:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801710a:	68fb      	ldr	r3, [r7, #12]
 801710c:	1ad3      	subs	r3, r2, r3
 801710e:	2b00      	cmp	r3, #0
 8017110:	da02      	bge.n	8017118 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	68fa      	ldr	r2, [r7, #12]
 8017116:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017118:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801711c:	2200      	movs	r2, #0
 801711e:	69b9      	ldr	r1, [r7, #24]
 8017120:	6878      	ldr	r0, [r7, #4]
 8017122:	f7ff fded 	bl	8016d00 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017126:	687a      	ldr	r2, [r7, #4]
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	3304      	adds	r3, #4
 801712c:	69b9      	ldr	r1, [r7, #24]
 801712e:	6878      	ldr	r0, [r7, #4]
 8017130:	f7ff fe26 	bl	8016d80 <tcp_output_control_segment>
 8017134:	4603      	mov	r3, r0
 8017136:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017138:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801713c:	4618      	mov	r0, r3
 801713e:	372c      	adds	r7, #44	; 0x2c
 8017140:	46bd      	mov	sp, r7
 8017142:	bd90      	pop	{r4, r7, pc}
 8017144:	08027a80 	.word	0x08027a80
 8017148:	08028278 	.word	0x08028278
 801714c:	08027ad4 	.word	0x08027ad4

08017150 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8017150:	b580      	push	{r7, lr}
 8017152:	b082      	sub	sp, #8
 8017154:	af00      	add	r7, sp, #0
 8017156:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8017158:	f7fa f812 	bl	8011180 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801715c:	4b0a      	ldr	r3, [pc, #40]	; (8017188 <tcpip_tcp_timer+0x38>)
 801715e:	681b      	ldr	r3, [r3, #0]
 8017160:	2b00      	cmp	r3, #0
 8017162:	d103      	bne.n	801716c <tcpip_tcp_timer+0x1c>
 8017164:	4b09      	ldr	r3, [pc, #36]	; (801718c <tcpip_tcp_timer+0x3c>)
 8017166:	681b      	ldr	r3, [r3, #0]
 8017168:	2b00      	cmp	r3, #0
 801716a:	d005      	beq.n	8017178 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801716c:	2200      	movs	r2, #0
 801716e:	4908      	ldr	r1, [pc, #32]	; (8017190 <tcpip_tcp_timer+0x40>)
 8017170:	20fa      	movs	r0, #250	; 0xfa
 8017172:	f000 f8f3 	bl	801735c <sys_timeout>
 8017176:	e003      	b.n	8017180 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8017178:	4b06      	ldr	r3, [pc, #24]	; (8017194 <tcpip_tcp_timer+0x44>)
 801717a:	2200      	movs	r2, #0
 801717c:	601a      	str	r2, [r3, #0]
  }
}
 801717e:	bf00      	nop
 8017180:	bf00      	nop
 8017182:	3708      	adds	r7, #8
 8017184:	46bd      	mov	sp, r7
 8017186:	bd80      	pop	{r7, pc}
 8017188:	2000fc48 	.word	0x2000fc48
 801718c:	2000fc4c 	.word	0x2000fc4c
 8017190:	08017151 	.word	0x08017151
 8017194:	2000fc94 	.word	0x2000fc94

08017198 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8017198:	b580      	push	{r7, lr}
 801719a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801719c:	4b0a      	ldr	r3, [pc, #40]	; (80171c8 <tcp_timer_needed+0x30>)
 801719e:	681b      	ldr	r3, [r3, #0]
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d10f      	bne.n	80171c4 <tcp_timer_needed+0x2c>
 80171a4:	4b09      	ldr	r3, [pc, #36]	; (80171cc <tcp_timer_needed+0x34>)
 80171a6:	681b      	ldr	r3, [r3, #0]
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	d103      	bne.n	80171b4 <tcp_timer_needed+0x1c>
 80171ac:	4b08      	ldr	r3, [pc, #32]	; (80171d0 <tcp_timer_needed+0x38>)
 80171ae:	681b      	ldr	r3, [r3, #0]
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	d007      	beq.n	80171c4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80171b4:	4b04      	ldr	r3, [pc, #16]	; (80171c8 <tcp_timer_needed+0x30>)
 80171b6:	2201      	movs	r2, #1
 80171b8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80171ba:	2200      	movs	r2, #0
 80171bc:	4905      	ldr	r1, [pc, #20]	; (80171d4 <tcp_timer_needed+0x3c>)
 80171be:	20fa      	movs	r0, #250	; 0xfa
 80171c0:	f000 f8cc 	bl	801735c <sys_timeout>
  }
}
 80171c4:	bf00      	nop
 80171c6:	bd80      	pop	{r7, pc}
 80171c8:	2000fc94 	.word	0x2000fc94
 80171cc:	2000fc48 	.word	0x2000fc48
 80171d0:	2000fc4c 	.word	0x2000fc4c
 80171d4:	08017151 	.word	0x08017151

080171d8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80171d8:	b580      	push	{r7, lr}
 80171da:	b086      	sub	sp, #24
 80171dc:	af00      	add	r7, sp, #0
 80171de:	60f8      	str	r0, [r7, #12]
 80171e0:	60b9      	str	r1, [r7, #8]
 80171e2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80171e4:	200b      	movs	r0, #11
 80171e6:	f7f8 fbdd 	bl	800f9a4 <memp_malloc>
 80171ea:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80171ec:	693b      	ldr	r3, [r7, #16]
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	d109      	bne.n	8017206 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80171f2:	693b      	ldr	r3, [r7, #16]
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	d151      	bne.n	801729c <sys_timeout_abs+0xc4>
 80171f8:	4b2a      	ldr	r3, [pc, #168]	; (80172a4 <sys_timeout_abs+0xcc>)
 80171fa:	22be      	movs	r2, #190	; 0xbe
 80171fc:	492a      	ldr	r1, [pc, #168]	; (80172a8 <sys_timeout_abs+0xd0>)
 80171fe:	482b      	ldr	r0, [pc, #172]	; (80172ac <sys_timeout_abs+0xd4>)
 8017200:	f00c fcee 	bl	8023be0 <iprintf>
    return;
 8017204:	e04a      	b.n	801729c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8017206:	693b      	ldr	r3, [r7, #16]
 8017208:	2200      	movs	r2, #0
 801720a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801720c:	693b      	ldr	r3, [r7, #16]
 801720e:	68ba      	ldr	r2, [r7, #8]
 8017210:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8017212:	693b      	ldr	r3, [r7, #16]
 8017214:	687a      	ldr	r2, [r7, #4]
 8017216:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8017218:	693b      	ldr	r3, [r7, #16]
 801721a:	68fa      	ldr	r2, [r7, #12]
 801721c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801721e:	4b24      	ldr	r3, [pc, #144]	; (80172b0 <sys_timeout_abs+0xd8>)
 8017220:	681b      	ldr	r3, [r3, #0]
 8017222:	2b00      	cmp	r3, #0
 8017224:	d103      	bne.n	801722e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8017226:	4a22      	ldr	r2, [pc, #136]	; (80172b0 <sys_timeout_abs+0xd8>)
 8017228:	693b      	ldr	r3, [r7, #16]
 801722a:	6013      	str	r3, [r2, #0]
    return;
 801722c:	e037      	b.n	801729e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801722e:	693b      	ldr	r3, [r7, #16]
 8017230:	685a      	ldr	r2, [r3, #4]
 8017232:	4b1f      	ldr	r3, [pc, #124]	; (80172b0 <sys_timeout_abs+0xd8>)
 8017234:	681b      	ldr	r3, [r3, #0]
 8017236:	685b      	ldr	r3, [r3, #4]
 8017238:	1ad3      	subs	r3, r2, r3
 801723a:	0fdb      	lsrs	r3, r3, #31
 801723c:	f003 0301 	and.w	r3, r3, #1
 8017240:	b2db      	uxtb	r3, r3
 8017242:	2b00      	cmp	r3, #0
 8017244:	d007      	beq.n	8017256 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8017246:	4b1a      	ldr	r3, [pc, #104]	; (80172b0 <sys_timeout_abs+0xd8>)
 8017248:	681a      	ldr	r2, [r3, #0]
 801724a:	693b      	ldr	r3, [r7, #16]
 801724c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801724e:	4a18      	ldr	r2, [pc, #96]	; (80172b0 <sys_timeout_abs+0xd8>)
 8017250:	693b      	ldr	r3, [r7, #16]
 8017252:	6013      	str	r3, [r2, #0]
 8017254:	e023      	b.n	801729e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8017256:	4b16      	ldr	r3, [pc, #88]	; (80172b0 <sys_timeout_abs+0xd8>)
 8017258:	681b      	ldr	r3, [r3, #0]
 801725a:	617b      	str	r3, [r7, #20]
 801725c:	e01a      	b.n	8017294 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801725e:	697b      	ldr	r3, [r7, #20]
 8017260:	681b      	ldr	r3, [r3, #0]
 8017262:	2b00      	cmp	r3, #0
 8017264:	d00b      	beq.n	801727e <sys_timeout_abs+0xa6>
 8017266:	693b      	ldr	r3, [r7, #16]
 8017268:	685a      	ldr	r2, [r3, #4]
 801726a:	697b      	ldr	r3, [r7, #20]
 801726c:	681b      	ldr	r3, [r3, #0]
 801726e:	685b      	ldr	r3, [r3, #4]
 8017270:	1ad3      	subs	r3, r2, r3
 8017272:	0fdb      	lsrs	r3, r3, #31
 8017274:	f003 0301 	and.w	r3, r3, #1
 8017278:	b2db      	uxtb	r3, r3
 801727a:	2b00      	cmp	r3, #0
 801727c:	d007      	beq.n	801728e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801727e:	697b      	ldr	r3, [r7, #20]
 8017280:	681a      	ldr	r2, [r3, #0]
 8017282:	693b      	ldr	r3, [r7, #16]
 8017284:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8017286:	697b      	ldr	r3, [r7, #20]
 8017288:	693a      	ldr	r2, [r7, #16]
 801728a:	601a      	str	r2, [r3, #0]
        break;
 801728c:	e007      	b.n	801729e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801728e:	697b      	ldr	r3, [r7, #20]
 8017290:	681b      	ldr	r3, [r3, #0]
 8017292:	617b      	str	r3, [r7, #20]
 8017294:	697b      	ldr	r3, [r7, #20]
 8017296:	2b00      	cmp	r3, #0
 8017298:	d1e1      	bne.n	801725e <sys_timeout_abs+0x86>
 801729a:	e000      	b.n	801729e <sys_timeout_abs+0xc6>
    return;
 801729c:	bf00      	nop
      }
    }
  }
}
 801729e:	3718      	adds	r7, #24
 80172a0:	46bd      	mov	sp, r7
 80172a2:	bd80      	pop	{r7, pc}
 80172a4:	0802829c 	.word	0x0802829c
 80172a8:	080282d0 	.word	0x080282d0
 80172ac:	08028310 	.word	0x08028310
 80172b0:	2000fc8c 	.word	0x2000fc8c

080172b4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80172b4:	b580      	push	{r7, lr}
 80172b6:	b086      	sub	sp, #24
 80172b8:	af00      	add	r7, sp, #0
 80172ba:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80172c0:	697b      	ldr	r3, [r7, #20]
 80172c2:	685b      	ldr	r3, [r3, #4]
 80172c4:	4798      	blx	r3

  now = sys_now();
 80172c6:	f7ef f84d 	bl	8006364 <sys_now>
 80172ca:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80172cc:	697b      	ldr	r3, [r7, #20]
 80172ce:	681a      	ldr	r2, [r3, #0]
 80172d0:	4b0f      	ldr	r3, [pc, #60]	; (8017310 <lwip_cyclic_timer+0x5c>)
 80172d2:	681b      	ldr	r3, [r3, #0]
 80172d4:	4413      	add	r3, r2
 80172d6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80172d8:	68fa      	ldr	r2, [r7, #12]
 80172da:	693b      	ldr	r3, [r7, #16]
 80172dc:	1ad3      	subs	r3, r2, r3
 80172de:	0fdb      	lsrs	r3, r3, #31
 80172e0:	f003 0301 	and.w	r3, r3, #1
 80172e4:	b2db      	uxtb	r3, r3
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d009      	beq.n	80172fe <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80172ea:	697b      	ldr	r3, [r7, #20]
 80172ec:	681a      	ldr	r2, [r3, #0]
 80172ee:	693b      	ldr	r3, [r7, #16]
 80172f0:	4413      	add	r3, r2
 80172f2:	687a      	ldr	r2, [r7, #4]
 80172f4:	4907      	ldr	r1, [pc, #28]	; (8017314 <lwip_cyclic_timer+0x60>)
 80172f6:	4618      	mov	r0, r3
 80172f8:	f7ff ff6e 	bl	80171d8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80172fc:	e004      	b.n	8017308 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80172fe:	687a      	ldr	r2, [r7, #4]
 8017300:	4904      	ldr	r1, [pc, #16]	; (8017314 <lwip_cyclic_timer+0x60>)
 8017302:	68f8      	ldr	r0, [r7, #12]
 8017304:	f7ff ff68 	bl	80171d8 <sys_timeout_abs>
}
 8017308:	bf00      	nop
 801730a:	3718      	adds	r7, #24
 801730c:	46bd      	mov	sp, r7
 801730e:	bd80      	pop	{r7, pc}
 8017310:	2000fc90 	.word	0x2000fc90
 8017314:	080172b5 	.word	0x080172b5

08017318 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8017318:	b580      	push	{r7, lr}
 801731a:	b082      	sub	sp, #8
 801731c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801731e:	2301      	movs	r3, #1
 8017320:	607b      	str	r3, [r7, #4]
 8017322:	e00e      	b.n	8017342 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8017324:	4a0b      	ldr	r2, [pc, #44]	; (8017354 <sys_timeouts_init+0x3c>)
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	00db      	lsls	r3, r3, #3
 8017330:	4a08      	ldr	r2, [pc, #32]	; (8017354 <sys_timeouts_init+0x3c>)
 8017332:	4413      	add	r3, r2
 8017334:	461a      	mov	r2, r3
 8017336:	4908      	ldr	r1, [pc, #32]	; (8017358 <sys_timeouts_init+0x40>)
 8017338:	f000 f810 	bl	801735c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	3301      	adds	r3, #1
 8017340:	607b      	str	r3, [r7, #4]
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	2b04      	cmp	r3, #4
 8017346:	d9ed      	bls.n	8017324 <sys_timeouts_init+0xc>
  }
}
 8017348:	bf00      	nop
 801734a:	bf00      	nop
 801734c:	3708      	adds	r7, #8
 801734e:	46bd      	mov	sp, r7
 8017350:	bd80      	pop	{r7, pc}
 8017352:	bf00      	nop
 8017354:	0802931c 	.word	0x0802931c
 8017358:	080172b5 	.word	0x080172b5

0801735c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801735c:	b580      	push	{r7, lr}
 801735e:	b086      	sub	sp, #24
 8017360:	af00      	add	r7, sp, #0
 8017362:	60f8      	str	r0, [r7, #12]
 8017364:	60b9      	str	r1, [r7, #8]
 8017366:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8017368:	68fb      	ldr	r3, [r7, #12]
 801736a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801736e:	d306      	bcc.n	801737e <sys_timeout+0x22>
 8017370:	4b0a      	ldr	r3, [pc, #40]	; (801739c <sys_timeout+0x40>)
 8017372:	f240 1229 	movw	r2, #297	; 0x129
 8017376:	490a      	ldr	r1, [pc, #40]	; (80173a0 <sys_timeout+0x44>)
 8017378:	480a      	ldr	r0, [pc, #40]	; (80173a4 <sys_timeout+0x48>)
 801737a:	f00c fc31 	bl	8023be0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801737e:	f7ee fff1 	bl	8006364 <sys_now>
 8017382:	4602      	mov	r2, r0
 8017384:	68fb      	ldr	r3, [r7, #12]
 8017386:	4413      	add	r3, r2
 8017388:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801738a:	687a      	ldr	r2, [r7, #4]
 801738c:	68b9      	ldr	r1, [r7, #8]
 801738e:	6978      	ldr	r0, [r7, #20]
 8017390:	f7ff ff22 	bl	80171d8 <sys_timeout_abs>
#endif
}
 8017394:	bf00      	nop
 8017396:	3718      	adds	r7, #24
 8017398:	46bd      	mov	sp, r7
 801739a:	bd80      	pop	{r7, pc}
 801739c:	0802829c 	.word	0x0802829c
 80173a0:	08028338 	.word	0x08028338
 80173a4:	08028310 	.word	0x08028310

080173a8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80173a8:	b580      	push	{r7, lr}
 80173aa:	b084      	sub	sp, #16
 80173ac:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80173ae:	f7ee ffd9 	bl	8006364 <sys_now>
 80173b2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80173b4:	4b17      	ldr	r3, [pc, #92]	; (8017414 <sys_check_timeouts+0x6c>)
 80173b6:	681b      	ldr	r3, [r3, #0]
 80173b8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80173ba:	68bb      	ldr	r3, [r7, #8]
 80173bc:	2b00      	cmp	r3, #0
 80173be:	d022      	beq.n	8017406 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80173c0:	68bb      	ldr	r3, [r7, #8]
 80173c2:	685b      	ldr	r3, [r3, #4]
 80173c4:	68fa      	ldr	r2, [r7, #12]
 80173c6:	1ad3      	subs	r3, r2, r3
 80173c8:	0fdb      	lsrs	r3, r3, #31
 80173ca:	f003 0301 	and.w	r3, r3, #1
 80173ce:	b2db      	uxtb	r3, r3
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d11a      	bne.n	801740a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80173d4:	68bb      	ldr	r3, [r7, #8]
 80173d6:	681b      	ldr	r3, [r3, #0]
 80173d8:	4a0e      	ldr	r2, [pc, #56]	; (8017414 <sys_check_timeouts+0x6c>)
 80173da:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80173dc:	68bb      	ldr	r3, [r7, #8]
 80173de:	689b      	ldr	r3, [r3, #8]
 80173e0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80173e2:	68bb      	ldr	r3, [r7, #8]
 80173e4:	68db      	ldr	r3, [r3, #12]
 80173e6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80173e8:	68bb      	ldr	r3, [r7, #8]
 80173ea:	685b      	ldr	r3, [r3, #4]
 80173ec:	4a0a      	ldr	r2, [pc, #40]	; (8017418 <sys_check_timeouts+0x70>)
 80173ee:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80173f0:	68b9      	ldr	r1, [r7, #8]
 80173f2:	200b      	movs	r0, #11
 80173f4:	f7f8 fb28 	bl	800fa48 <memp_free>
    if (handler != NULL) {
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	d0da      	beq.n	80173b4 <sys_check_timeouts+0xc>
      handler(arg);
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	6838      	ldr	r0, [r7, #0]
 8017402:	4798      	blx	r3
  do {
 8017404:	e7d6      	b.n	80173b4 <sys_check_timeouts+0xc>
      return;
 8017406:	bf00      	nop
 8017408:	e000      	b.n	801740c <sys_check_timeouts+0x64>
      return;
 801740a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801740c:	3710      	adds	r7, #16
 801740e:	46bd      	mov	sp, r7
 8017410:	bd80      	pop	{r7, pc}
 8017412:	bf00      	nop
 8017414:	2000fc8c 	.word	0x2000fc8c
 8017418:	2000fc90 	.word	0x2000fc90

0801741c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801741c:	b580      	push	{r7, lr}
 801741e:	b082      	sub	sp, #8
 8017420:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8017422:	4b16      	ldr	r3, [pc, #88]	; (801747c <sys_timeouts_sleeptime+0x60>)
 8017424:	681b      	ldr	r3, [r3, #0]
 8017426:	2b00      	cmp	r3, #0
 8017428:	d102      	bne.n	8017430 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801742a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801742e:	e020      	b.n	8017472 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8017430:	f7ee ff98 	bl	8006364 <sys_now>
 8017434:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8017436:	4b11      	ldr	r3, [pc, #68]	; (801747c <sys_timeouts_sleeptime+0x60>)
 8017438:	681b      	ldr	r3, [r3, #0]
 801743a:	685a      	ldr	r2, [r3, #4]
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	1ad3      	subs	r3, r2, r3
 8017440:	0fdb      	lsrs	r3, r3, #31
 8017442:	f003 0301 	and.w	r3, r3, #1
 8017446:	b2db      	uxtb	r3, r3
 8017448:	2b00      	cmp	r3, #0
 801744a:	d001      	beq.n	8017450 <sys_timeouts_sleeptime+0x34>
    return 0;
 801744c:	2300      	movs	r3, #0
 801744e:	e010      	b.n	8017472 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8017450:	4b0a      	ldr	r3, [pc, #40]	; (801747c <sys_timeouts_sleeptime+0x60>)
 8017452:	681b      	ldr	r3, [r3, #0]
 8017454:	685a      	ldr	r2, [r3, #4]
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	1ad3      	subs	r3, r2, r3
 801745a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801745c:	683b      	ldr	r3, [r7, #0]
 801745e:	2b00      	cmp	r3, #0
 8017460:	da06      	bge.n	8017470 <sys_timeouts_sleeptime+0x54>
 8017462:	4b07      	ldr	r3, [pc, #28]	; (8017480 <sys_timeouts_sleeptime+0x64>)
 8017464:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8017468:	4906      	ldr	r1, [pc, #24]	; (8017484 <sys_timeouts_sleeptime+0x68>)
 801746a:	4807      	ldr	r0, [pc, #28]	; (8017488 <sys_timeouts_sleeptime+0x6c>)
 801746c:	f00c fbb8 	bl	8023be0 <iprintf>
    return ret;
 8017470:	683b      	ldr	r3, [r7, #0]
  }
}
 8017472:	4618      	mov	r0, r3
 8017474:	3708      	adds	r7, #8
 8017476:	46bd      	mov	sp, r7
 8017478:	bd80      	pop	{r7, pc}
 801747a:	bf00      	nop
 801747c:	2000fc8c 	.word	0x2000fc8c
 8017480:	0802829c 	.word	0x0802829c
 8017484:	08028370 	.word	0x08028370
 8017488:	08028310 	.word	0x08028310

0801748c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801748c:	b580      	push	{r7, lr}
 801748e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8017490:	f00c fc62 	bl	8023d58 <rand>
 8017494:	4603      	mov	r3, r0
 8017496:	b29b      	uxth	r3, r3
 8017498:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801749c:	b29b      	uxth	r3, r3
 801749e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80174a2:	b29a      	uxth	r2, r3
 80174a4:	4b01      	ldr	r3, [pc, #4]	; (80174ac <udp_init+0x20>)
 80174a6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80174a8:	bf00      	nop
 80174aa:	bd80      	pop	{r7, pc}
 80174ac:	2000001c 	.word	0x2000001c

080174b0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80174b0:	b480      	push	{r7}
 80174b2:	b083      	sub	sp, #12
 80174b4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80174b6:	2300      	movs	r3, #0
 80174b8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80174ba:	4b17      	ldr	r3, [pc, #92]	; (8017518 <udp_new_port+0x68>)
 80174bc:	881b      	ldrh	r3, [r3, #0]
 80174be:	1c5a      	adds	r2, r3, #1
 80174c0:	b291      	uxth	r1, r2
 80174c2:	4a15      	ldr	r2, [pc, #84]	; (8017518 <udp_new_port+0x68>)
 80174c4:	8011      	strh	r1, [r2, #0]
 80174c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80174ca:	4293      	cmp	r3, r2
 80174cc:	d103      	bne.n	80174d6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80174ce:	4b12      	ldr	r3, [pc, #72]	; (8017518 <udp_new_port+0x68>)
 80174d0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80174d4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80174d6:	4b11      	ldr	r3, [pc, #68]	; (801751c <udp_new_port+0x6c>)
 80174d8:	681b      	ldr	r3, [r3, #0]
 80174da:	603b      	str	r3, [r7, #0]
 80174dc:	e011      	b.n	8017502 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80174de:	683b      	ldr	r3, [r7, #0]
 80174e0:	8a5a      	ldrh	r2, [r3, #18]
 80174e2:	4b0d      	ldr	r3, [pc, #52]	; (8017518 <udp_new_port+0x68>)
 80174e4:	881b      	ldrh	r3, [r3, #0]
 80174e6:	429a      	cmp	r2, r3
 80174e8:	d108      	bne.n	80174fc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80174ea:	88fb      	ldrh	r3, [r7, #6]
 80174ec:	3301      	adds	r3, #1
 80174ee:	80fb      	strh	r3, [r7, #6]
 80174f0:	88fb      	ldrh	r3, [r7, #6]
 80174f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80174f6:	d3e0      	bcc.n	80174ba <udp_new_port+0xa>
        return 0;
 80174f8:	2300      	movs	r3, #0
 80174fa:	e007      	b.n	801750c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80174fc:	683b      	ldr	r3, [r7, #0]
 80174fe:	68db      	ldr	r3, [r3, #12]
 8017500:	603b      	str	r3, [r7, #0]
 8017502:	683b      	ldr	r3, [r7, #0]
 8017504:	2b00      	cmp	r3, #0
 8017506:	d1ea      	bne.n	80174de <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8017508:	4b03      	ldr	r3, [pc, #12]	; (8017518 <udp_new_port+0x68>)
 801750a:	881b      	ldrh	r3, [r3, #0]
}
 801750c:	4618      	mov	r0, r3
 801750e:	370c      	adds	r7, #12
 8017510:	46bd      	mov	sp, r7
 8017512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017516:	4770      	bx	lr
 8017518:	2000001c 	.word	0x2000001c
 801751c:	2000fc98 	.word	0x2000fc98

08017520 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8017520:	b580      	push	{r7, lr}
 8017522:	b084      	sub	sp, #16
 8017524:	af00      	add	r7, sp, #0
 8017526:	60f8      	str	r0, [r7, #12]
 8017528:	60b9      	str	r1, [r7, #8]
 801752a:	4613      	mov	r3, r2
 801752c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801752e:	68fb      	ldr	r3, [r7, #12]
 8017530:	2b00      	cmp	r3, #0
 8017532:	d105      	bne.n	8017540 <udp_input_local_match+0x20>
 8017534:	4b27      	ldr	r3, [pc, #156]	; (80175d4 <udp_input_local_match+0xb4>)
 8017536:	2287      	movs	r2, #135	; 0x87
 8017538:	4927      	ldr	r1, [pc, #156]	; (80175d8 <udp_input_local_match+0xb8>)
 801753a:	4828      	ldr	r0, [pc, #160]	; (80175dc <udp_input_local_match+0xbc>)
 801753c:	f00c fb50 	bl	8023be0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8017540:	68bb      	ldr	r3, [r7, #8]
 8017542:	2b00      	cmp	r3, #0
 8017544:	d105      	bne.n	8017552 <udp_input_local_match+0x32>
 8017546:	4b23      	ldr	r3, [pc, #140]	; (80175d4 <udp_input_local_match+0xb4>)
 8017548:	2288      	movs	r2, #136	; 0x88
 801754a:	4925      	ldr	r1, [pc, #148]	; (80175e0 <udp_input_local_match+0xc0>)
 801754c:	4823      	ldr	r0, [pc, #140]	; (80175dc <udp_input_local_match+0xbc>)
 801754e:	f00c fb47 	bl	8023be0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017552:	68fb      	ldr	r3, [r7, #12]
 8017554:	7a1b      	ldrb	r3, [r3, #8]
 8017556:	2b00      	cmp	r3, #0
 8017558:	d00b      	beq.n	8017572 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801755a:	68fb      	ldr	r3, [r7, #12]
 801755c:	7a1a      	ldrb	r2, [r3, #8]
 801755e:	4b21      	ldr	r3, [pc, #132]	; (80175e4 <udp_input_local_match+0xc4>)
 8017560:	685b      	ldr	r3, [r3, #4]
 8017562:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017566:	3301      	adds	r3, #1
 8017568:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801756a:	429a      	cmp	r2, r3
 801756c:	d001      	beq.n	8017572 <udp_input_local_match+0x52>
    return 0;
 801756e:	2300      	movs	r3, #0
 8017570:	e02b      	b.n	80175ca <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8017572:	79fb      	ldrb	r3, [r7, #7]
 8017574:	2b00      	cmp	r3, #0
 8017576:	d018      	beq.n	80175aa <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017578:	68fb      	ldr	r3, [r7, #12]
 801757a:	2b00      	cmp	r3, #0
 801757c:	d013      	beq.n	80175a6 <udp_input_local_match+0x86>
 801757e:	68fb      	ldr	r3, [r7, #12]
 8017580:	681b      	ldr	r3, [r3, #0]
 8017582:	2b00      	cmp	r3, #0
 8017584:	d00f      	beq.n	80175a6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017586:	4b17      	ldr	r3, [pc, #92]	; (80175e4 <udp_input_local_match+0xc4>)
 8017588:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801758a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801758e:	d00a      	beq.n	80175a6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8017590:	68fb      	ldr	r3, [r7, #12]
 8017592:	681a      	ldr	r2, [r3, #0]
 8017594:	4b13      	ldr	r3, [pc, #76]	; (80175e4 <udp_input_local_match+0xc4>)
 8017596:	695b      	ldr	r3, [r3, #20]
 8017598:	405a      	eors	r2, r3
 801759a:	68bb      	ldr	r3, [r7, #8]
 801759c:	3308      	adds	r3, #8
 801759e:	681b      	ldr	r3, [r3, #0]
 80175a0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	d110      	bne.n	80175c8 <udp_input_local_match+0xa8>
          return 1;
 80175a6:	2301      	movs	r3, #1
 80175a8:	e00f      	b.n	80175ca <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80175aa:	68fb      	ldr	r3, [r7, #12]
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	d009      	beq.n	80175c4 <udp_input_local_match+0xa4>
 80175b0:	68fb      	ldr	r3, [r7, #12]
 80175b2:	681b      	ldr	r3, [r3, #0]
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d005      	beq.n	80175c4 <udp_input_local_match+0xa4>
 80175b8:	68fb      	ldr	r3, [r7, #12]
 80175ba:	681a      	ldr	r2, [r3, #0]
 80175bc:	4b09      	ldr	r3, [pc, #36]	; (80175e4 <udp_input_local_match+0xc4>)
 80175be:	695b      	ldr	r3, [r3, #20]
 80175c0:	429a      	cmp	r2, r3
 80175c2:	d101      	bne.n	80175c8 <udp_input_local_match+0xa8>
        return 1;
 80175c4:	2301      	movs	r3, #1
 80175c6:	e000      	b.n	80175ca <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80175c8:	2300      	movs	r3, #0
}
 80175ca:	4618      	mov	r0, r3
 80175cc:	3710      	adds	r7, #16
 80175ce:	46bd      	mov	sp, r7
 80175d0:	bd80      	pop	{r7, pc}
 80175d2:	bf00      	nop
 80175d4:	08028384 	.word	0x08028384
 80175d8:	080283b4 	.word	0x080283b4
 80175dc:	080283d8 	.word	0x080283d8
 80175e0:	08028400 	.word	0x08028400
 80175e4:	2000c2e4 	.word	0x2000c2e4

080175e8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80175e8:	b590      	push	{r4, r7, lr}
 80175ea:	b08d      	sub	sp, #52	; 0x34
 80175ec:	af02      	add	r7, sp, #8
 80175ee:	6078      	str	r0, [r7, #4]
 80175f0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80175f2:	2300      	movs	r3, #0
 80175f4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d105      	bne.n	8017608 <udp_input+0x20>
 80175fc:	4b7c      	ldr	r3, [pc, #496]	; (80177f0 <udp_input+0x208>)
 80175fe:	22cf      	movs	r2, #207	; 0xcf
 8017600:	497c      	ldr	r1, [pc, #496]	; (80177f4 <udp_input+0x20c>)
 8017602:	487d      	ldr	r0, [pc, #500]	; (80177f8 <udp_input+0x210>)
 8017604:	f00c faec 	bl	8023be0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8017608:	683b      	ldr	r3, [r7, #0]
 801760a:	2b00      	cmp	r3, #0
 801760c:	d105      	bne.n	801761a <udp_input+0x32>
 801760e:	4b78      	ldr	r3, [pc, #480]	; (80177f0 <udp_input+0x208>)
 8017610:	22d0      	movs	r2, #208	; 0xd0
 8017612:	497a      	ldr	r1, [pc, #488]	; (80177fc <udp_input+0x214>)
 8017614:	4878      	ldr	r0, [pc, #480]	; (80177f8 <udp_input+0x210>)
 8017616:	f00c fae3 	bl	8023be0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	895b      	ldrh	r3, [r3, #10]
 801761e:	2b07      	cmp	r3, #7
 8017620:	d803      	bhi.n	801762a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8017622:	6878      	ldr	r0, [r7, #4]
 8017624:	f7f9 f93c 	bl	80108a0 <pbuf_free>
    goto end;
 8017628:	e0de      	b.n	80177e8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801762a:	687b      	ldr	r3, [r7, #4]
 801762c:	685b      	ldr	r3, [r3, #4]
 801762e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8017630:	4b73      	ldr	r3, [pc, #460]	; (8017800 <udp_input+0x218>)
 8017632:	695b      	ldr	r3, [r3, #20]
 8017634:	4a72      	ldr	r2, [pc, #456]	; (8017800 <udp_input+0x218>)
 8017636:	6812      	ldr	r2, [r2, #0]
 8017638:	4611      	mov	r1, r2
 801763a:	4618      	mov	r0, r3
 801763c:	f002 fdc2 	bl	801a1c4 <ip4_addr_isbroadcast_u32>
 8017640:	4603      	mov	r3, r0
 8017642:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8017644:	697b      	ldr	r3, [r7, #20]
 8017646:	881b      	ldrh	r3, [r3, #0]
 8017648:	b29b      	uxth	r3, r3
 801764a:	4618      	mov	r0, r3
 801764c:	f7f6 fcd2 	bl	800dff4 <lwip_htons>
 8017650:	4603      	mov	r3, r0
 8017652:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8017654:	697b      	ldr	r3, [r7, #20]
 8017656:	885b      	ldrh	r3, [r3, #2]
 8017658:	b29b      	uxth	r3, r3
 801765a:	4618      	mov	r0, r3
 801765c:	f7f6 fcca 	bl	800dff4 <lwip_htons>
 8017660:	4603      	mov	r3, r0
 8017662:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8017664:	2300      	movs	r3, #0
 8017666:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8017668:	2300      	movs	r3, #0
 801766a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801766c:	2300      	movs	r3, #0
 801766e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017670:	4b64      	ldr	r3, [pc, #400]	; (8017804 <udp_input+0x21c>)
 8017672:	681b      	ldr	r3, [r3, #0]
 8017674:	627b      	str	r3, [r7, #36]	; 0x24
 8017676:	e054      	b.n	8017722 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8017678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801767a:	8a5b      	ldrh	r3, [r3, #18]
 801767c:	89fa      	ldrh	r2, [r7, #14]
 801767e:	429a      	cmp	r2, r3
 8017680:	d14a      	bne.n	8017718 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8017682:	7cfb      	ldrb	r3, [r7, #19]
 8017684:	461a      	mov	r2, r3
 8017686:	6839      	ldr	r1, [r7, #0]
 8017688:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801768a:	f7ff ff49 	bl	8017520 <udp_input_local_match>
 801768e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8017690:	2b00      	cmp	r3, #0
 8017692:	d041      	beq.n	8017718 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8017694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017696:	7c1b      	ldrb	r3, [r3, #16]
 8017698:	f003 0304 	and.w	r3, r3, #4
 801769c:	2b00      	cmp	r3, #0
 801769e:	d11d      	bne.n	80176dc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80176a0:	69fb      	ldr	r3, [r7, #28]
 80176a2:	2b00      	cmp	r3, #0
 80176a4:	d102      	bne.n	80176ac <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80176a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176a8:	61fb      	str	r3, [r7, #28]
 80176aa:	e017      	b.n	80176dc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80176ac:	7cfb      	ldrb	r3, [r7, #19]
 80176ae:	2b00      	cmp	r3, #0
 80176b0:	d014      	beq.n	80176dc <udp_input+0xf4>
 80176b2:	4b53      	ldr	r3, [pc, #332]	; (8017800 <udp_input+0x218>)
 80176b4:	695b      	ldr	r3, [r3, #20]
 80176b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80176ba:	d10f      	bne.n	80176dc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80176bc:	69fb      	ldr	r3, [r7, #28]
 80176be:	681a      	ldr	r2, [r3, #0]
 80176c0:	683b      	ldr	r3, [r7, #0]
 80176c2:	3304      	adds	r3, #4
 80176c4:	681b      	ldr	r3, [r3, #0]
 80176c6:	429a      	cmp	r2, r3
 80176c8:	d008      	beq.n	80176dc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80176ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176cc:	681a      	ldr	r2, [r3, #0]
 80176ce:	683b      	ldr	r3, [r7, #0]
 80176d0:	3304      	adds	r3, #4
 80176d2:	681b      	ldr	r3, [r3, #0]
 80176d4:	429a      	cmp	r2, r3
 80176d6:	d101      	bne.n	80176dc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80176d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176da:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80176dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176de:	8a9b      	ldrh	r3, [r3, #20]
 80176e0:	8a3a      	ldrh	r2, [r7, #16]
 80176e2:	429a      	cmp	r2, r3
 80176e4:	d118      	bne.n	8017718 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80176e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176e8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	d005      	beq.n	80176fa <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80176ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176f0:	685a      	ldr	r2, [r3, #4]
 80176f2:	4b43      	ldr	r3, [pc, #268]	; (8017800 <udp_input+0x218>)
 80176f4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80176f6:	429a      	cmp	r2, r3
 80176f8:	d10e      	bne.n	8017718 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80176fa:	6a3b      	ldr	r3, [r7, #32]
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	d014      	beq.n	801772a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8017700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017702:	68da      	ldr	r2, [r3, #12]
 8017704:	6a3b      	ldr	r3, [r7, #32]
 8017706:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8017708:	4b3e      	ldr	r3, [pc, #248]	; (8017804 <udp_input+0x21c>)
 801770a:	681a      	ldr	r2, [r3, #0]
 801770c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801770e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8017710:	4a3c      	ldr	r2, [pc, #240]	; (8017804 <udp_input+0x21c>)
 8017712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017714:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8017716:	e008      	b.n	801772a <udp_input+0x142>
      }
    }

    prev = pcb;
 8017718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801771a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801771c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801771e:	68db      	ldr	r3, [r3, #12]
 8017720:	627b      	str	r3, [r7, #36]	; 0x24
 8017722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017724:	2b00      	cmp	r3, #0
 8017726:	d1a7      	bne.n	8017678 <udp_input+0x90>
 8017728:	e000      	b.n	801772c <udp_input+0x144>
        break;
 801772a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801772c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801772e:	2b00      	cmp	r3, #0
 8017730:	d101      	bne.n	8017736 <udp_input+0x14e>
    pcb = uncon_pcb;
 8017732:	69fb      	ldr	r3, [r7, #28]
 8017734:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8017736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017738:	2b00      	cmp	r3, #0
 801773a:	d002      	beq.n	8017742 <udp_input+0x15a>
    for_us = 1;
 801773c:	2301      	movs	r3, #1
 801773e:	76fb      	strb	r3, [r7, #27]
 8017740:	e00a      	b.n	8017758 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8017742:	683b      	ldr	r3, [r7, #0]
 8017744:	3304      	adds	r3, #4
 8017746:	681a      	ldr	r2, [r3, #0]
 8017748:	4b2d      	ldr	r3, [pc, #180]	; (8017800 <udp_input+0x218>)
 801774a:	695b      	ldr	r3, [r3, #20]
 801774c:	429a      	cmp	r2, r3
 801774e:	bf0c      	ite	eq
 8017750:	2301      	moveq	r3, #1
 8017752:	2300      	movne	r3, #0
 8017754:	b2db      	uxtb	r3, r3
 8017756:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8017758:	7efb      	ldrb	r3, [r7, #27]
 801775a:	2b00      	cmp	r3, #0
 801775c:	d041      	beq.n	80177e2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801775e:	2108      	movs	r1, #8
 8017760:	6878      	ldr	r0, [r7, #4]
 8017762:	f7f8 ffe5 	bl	8010730 <pbuf_remove_header>
 8017766:	4603      	mov	r3, r0
 8017768:	2b00      	cmp	r3, #0
 801776a:	d00a      	beq.n	8017782 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801776c:	4b20      	ldr	r3, [pc, #128]	; (80177f0 <udp_input+0x208>)
 801776e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8017772:	4925      	ldr	r1, [pc, #148]	; (8017808 <udp_input+0x220>)
 8017774:	4820      	ldr	r0, [pc, #128]	; (80177f8 <udp_input+0x210>)
 8017776:	f00c fa33 	bl	8023be0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801777a:	6878      	ldr	r0, [r7, #4]
 801777c:	f7f9 f890 	bl	80108a0 <pbuf_free>
      goto end;
 8017780:	e032      	b.n	80177e8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8017782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017784:	2b00      	cmp	r3, #0
 8017786:	d012      	beq.n	80177ae <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8017788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801778a:	6a1b      	ldr	r3, [r3, #32]
 801778c:	2b00      	cmp	r3, #0
 801778e:	d00a      	beq.n	80177a6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8017790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017792:	6a1c      	ldr	r4, [r3, #32]
 8017794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017796:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8017798:	8a3b      	ldrh	r3, [r7, #16]
 801779a:	9300      	str	r3, [sp, #0]
 801779c:	4b1b      	ldr	r3, [pc, #108]	; (801780c <udp_input+0x224>)
 801779e:	687a      	ldr	r2, [r7, #4]
 80177a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80177a2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80177a4:	e021      	b.n	80177ea <udp_input+0x202>
        pbuf_free(p);
 80177a6:	6878      	ldr	r0, [r7, #4]
 80177a8:	f7f9 f87a 	bl	80108a0 <pbuf_free>
        goto end;
 80177ac:	e01c      	b.n	80177e8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80177ae:	7cfb      	ldrb	r3, [r7, #19]
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	d112      	bne.n	80177da <udp_input+0x1f2>
 80177b4:	4b12      	ldr	r3, [pc, #72]	; (8017800 <udp_input+0x218>)
 80177b6:	695b      	ldr	r3, [r3, #20]
 80177b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80177bc:	2be0      	cmp	r3, #224	; 0xe0
 80177be:	d00c      	beq.n	80177da <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80177c0:	4b0f      	ldr	r3, [pc, #60]	; (8017800 <udp_input+0x218>)
 80177c2:	899b      	ldrh	r3, [r3, #12]
 80177c4:	3308      	adds	r3, #8
 80177c6:	b29b      	uxth	r3, r3
 80177c8:	b21b      	sxth	r3, r3
 80177ca:	4619      	mov	r1, r3
 80177cc:	6878      	ldr	r0, [r7, #4]
 80177ce:	f7f9 f822 	bl	8010816 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80177d2:	2103      	movs	r1, #3
 80177d4:	6878      	ldr	r0, [r7, #4]
 80177d6:	f001 fc8b 	bl	80190f0 <icmp_dest_unreach>
      pbuf_free(p);
 80177da:	6878      	ldr	r0, [r7, #4]
 80177dc:	f7f9 f860 	bl	80108a0 <pbuf_free>
  return;
 80177e0:	e003      	b.n	80177ea <udp_input+0x202>
    pbuf_free(p);
 80177e2:	6878      	ldr	r0, [r7, #4]
 80177e4:	f7f9 f85c 	bl	80108a0 <pbuf_free>
  return;
 80177e8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80177ea:	372c      	adds	r7, #44	; 0x2c
 80177ec:	46bd      	mov	sp, r7
 80177ee:	bd90      	pop	{r4, r7, pc}
 80177f0:	08028384 	.word	0x08028384
 80177f4:	08028428 	.word	0x08028428
 80177f8:	080283d8 	.word	0x080283d8
 80177fc:	08028440 	.word	0x08028440
 8017800:	2000c2e4 	.word	0x2000c2e4
 8017804:	2000fc98 	.word	0x2000fc98
 8017808:	0802845c 	.word	0x0802845c
 801780c:	2000c2f4 	.word	0x2000c2f4

08017810 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8017810:	b580      	push	{r7, lr}
 8017812:	b082      	sub	sp, #8
 8017814:	af00      	add	r7, sp, #0
 8017816:	6078      	str	r0, [r7, #4]
 8017818:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	2b00      	cmp	r3, #0
 801781e:	d109      	bne.n	8017834 <udp_send+0x24>
 8017820:	4b11      	ldr	r3, [pc, #68]	; (8017868 <udp_send+0x58>)
 8017822:	f240 12d5 	movw	r2, #469	; 0x1d5
 8017826:	4911      	ldr	r1, [pc, #68]	; (801786c <udp_send+0x5c>)
 8017828:	4811      	ldr	r0, [pc, #68]	; (8017870 <udp_send+0x60>)
 801782a:	f00c f9d9 	bl	8023be0 <iprintf>
 801782e:	f06f 030f 	mvn.w	r3, #15
 8017832:	e015      	b.n	8017860 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8017834:	683b      	ldr	r3, [r7, #0]
 8017836:	2b00      	cmp	r3, #0
 8017838:	d109      	bne.n	801784e <udp_send+0x3e>
 801783a:	4b0b      	ldr	r3, [pc, #44]	; (8017868 <udp_send+0x58>)
 801783c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8017840:	490c      	ldr	r1, [pc, #48]	; (8017874 <udp_send+0x64>)
 8017842:	480b      	ldr	r0, [pc, #44]	; (8017870 <udp_send+0x60>)
 8017844:	f00c f9cc 	bl	8023be0 <iprintf>
 8017848:	f06f 030f 	mvn.w	r3, #15
 801784c:	e008      	b.n	8017860 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	1d1a      	adds	r2, r3, #4
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	8a9b      	ldrh	r3, [r3, #20]
 8017856:	6839      	ldr	r1, [r7, #0]
 8017858:	6878      	ldr	r0, [r7, #4]
 801785a:	f000 f80d 	bl	8017878 <udp_sendto>
 801785e:	4603      	mov	r3, r0
}
 8017860:	4618      	mov	r0, r3
 8017862:	3708      	adds	r7, #8
 8017864:	46bd      	mov	sp, r7
 8017866:	bd80      	pop	{r7, pc}
 8017868:	08028384 	.word	0x08028384
 801786c:	08028478 	.word	0x08028478
 8017870:	080283d8 	.word	0x080283d8
 8017874:	08028490 	.word	0x08028490

08017878 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8017878:	b580      	push	{r7, lr}
 801787a:	b088      	sub	sp, #32
 801787c:	af02      	add	r7, sp, #8
 801787e:	60f8      	str	r0, [r7, #12]
 8017880:	60b9      	str	r1, [r7, #8]
 8017882:	607a      	str	r2, [r7, #4]
 8017884:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8017886:	68fb      	ldr	r3, [r7, #12]
 8017888:	2b00      	cmp	r3, #0
 801788a:	d109      	bne.n	80178a0 <udp_sendto+0x28>
 801788c:	4b36      	ldr	r3, [pc, #216]	; (8017968 <udp_sendto+0xf0>)
 801788e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8017892:	4936      	ldr	r1, [pc, #216]	; (801796c <udp_sendto+0xf4>)
 8017894:	4836      	ldr	r0, [pc, #216]	; (8017970 <udp_sendto+0xf8>)
 8017896:	f00c f9a3 	bl	8023be0 <iprintf>
 801789a:	f06f 030f 	mvn.w	r3, #15
 801789e:	e05e      	b.n	801795e <udp_sendto+0xe6>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80178a0:	68bb      	ldr	r3, [r7, #8]
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d109      	bne.n	80178ba <udp_sendto+0x42>
 80178a6:	4b30      	ldr	r3, [pc, #192]	; (8017968 <udp_sendto+0xf0>)
 80178a8:	f240 2219 	movw	r2, #537	; 0x219
 80178ac:	4931      	ldr	r1, [pc, #196]	; (8017974 <udp_sendto+0xfc>)
 80178ae:	4830      	ldr	r0, [pc, #192]	; (8017970 <udp_sendto+0xf8>)
 80178b0:	f00c f996 	bl	8023be0 <iprintf>
 80178b4:	f06f 030f 	mvn.w	r3, #15
 80178b8:	e051      	b.n	801795e <udp_sendto+0xe6>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	2b00      	cmp	r3, #0
 80178be:	d109      	bne.n	80178d4 <udp_sendto+0x5c>
 80178c0:	4b29      	ldr	r3, [pc, #164]	; (8017968 <udp_sendto+0xf0>)
 80178c2:	f240 221a 	movw	r2, #538	; 0x21a
 80178c6:	492c      	ldr	r1, [pc, #176]	; (8017978 <udp_sendto+0x100>)
 80178c8:	4829      	ldr	r0, [pc, #164]	; (8017970 <udp_sendto+0xf8>)
 80178ca:	f00c f989 	bl	8023be0 <iprintf>
 80178ce:	f06f 030f 	mvn.w	r3, #15
 80178d2:	e044      	b.n	801795e <udp_sendto+0xe6>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80178d4:	68fb      	ldr	r3, [r7, #12]
 80178d6:	7a1b      	ldrb	r3, [r3, #8]
 80178d8:	2b00      	cmp	r3, #0
 80178da:	d006      	beq.n	80178ea <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80178dc:	68fb      	ldr	r3, [r7, #12]
 80178de:	7a1b      	ldrb	r3, [r3, #8]
 80178e0:	4618      	mov	r0, r3
 80178e2:	f7f8 fbe5 	bl	80100b0 <netif_get_by_index>
 80178e6:	6178      	str	r0, [r7, #20]
 80178e8:	e029      	b.n	801793e <udp_sendto+0xc6>
  } else {
#if LWIP_MULTICAST_TX_OPTIONS
    netif = NULL;
 80178ea:	2300      	movs	r3, #0
 80178ec:	617b      	str	r3, [r7, #20]
    if (ip_addr_ismulticast(dst_ip)) {
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	681b      	ldr	r3, [r3, #0]
 80178f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80178f6:	2be0      	cmp	r3, #224	; 0xe0
 80178f8:	d11a      	bne.n	8017930 <udp_sendto+0xb8>
       * is specified using an interface index. The same approach may be used for
       * IPv4 as well, in which case it overrides the IPv4 multicast override
       * address below. Here we have to look up the netif by going through the
       * list, but by doing so we skip a route lookup. If the interface index has
       * gone stale, we fall through and do the regular route lookup after all. */
      if (pcb->mcast_ifindex != NETIF_NO_INDEX) {
 80178fa:	68fb      	ldr	r3, [r7, #12]
 80178fc:	7f1b      	ldrb	r3, [r3, #28]
 80178fe:	2b00      	cmp	r3, #0
 8017900:	d006      	beq.n	8017910 <udp_sendto+0x98>
        netif = netif_get_by_index(pcb->mcast_ifindex);
 8017902:	68fb      	ldr	r3, [r7, #12]
 8017904:	7f1b      	ldrb	r3, [r3, #28]
 8017906:	4618      	mov	r0, r3
 8017908:	f7f8 fbd2 	bl	80100b0 <netif_get_by_index>
 801790c:	6178      	str	r0, [r7, #20]
 801790e:	e00f      	b.n	8017930 <udp_sendto+0xb8>
          /* IPv4 does not use source-based routing by default, so we use an
             administratively selected interface for multicast by default.
             However, this can be overridden by setting an interface address
             in pcb->mcast_ip4 that is used for routing. If this routing lookup
             fails, we try regular routing as though no override was set. */
          if (!ip4_addr_isany_val(pcb->mcast_ip4) &&
 8017910:	68fb      	ldr	r3, [r7, #12]
 8017912:	699b      	ldr	r3, [r3, #24]
 8017914:	2b00      	cmp	r3, #0
 8017916:	d00b      	beq.n	8017930 <udp_sendto+0xb8>
              !ip4_addr_cmp(&pcb->mcast_ip4, IP4_ADDR_BROADCAST)) {
 8017918:	68fb      	ldr	r3, [r7, #12]
 801791a:	699a      	ldr	r2, [r3, #24]
 801791c:	4b17      	ldr	r3, [pc, #92]	; (801797c <udp_sendto+0x104>)
 801791e:	681b      	ldr	r3, [r3, #0]
          if (!ip4_addr_isany_val(pcb->mcast_ip4) &&
 8017920:	429a      	cmp	r2, r3
 8017922:	d005      	beq.n	8017930 <udp_sendto+0xb8>
            netif = ip4_route_src(ip_2_ip4(&pcb->local_ip), &pcb->mcast_ip4);
 8017924:	68fb      	ldr	r3, [r7, #12]
 8017926:	3318      	adds	r3, #24
 8017928:	4618      	mov	r0, r3
 801792a:	f002 f8f5 	bl	8019b18 <ip4_route>
 801792e:	6178      	str	r0, [r7, #20]
          }
        }
#endif /* LWIP_IPV4 */
    }

    if (netif == NULL)
 8017930:	697b      	ldr	r3, [r7, #20]
 8017932:	2b00      	cmp	r3, #0
 8017934:	d103      	bne.n	801793e <udp_sendto+0xc6>
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8017936:	6878      	ldr	r0, [r7, #4]
 8017938:	f002 f8ee 	bl	8019b18 <ip4_route>
 801793c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801793e:	697b      	ldr	r3, [r7, #20]
 8017940:	2b00      	cmp	r3, #0
 8017942:	d102      	bne.n	801794a <udp_sendto+0xd2>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8017944:	f06f 0303 	mvn.w	r3, #3
 8017948:	e009      	b.n	801795e <udp_sendto+0xe6>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801794a:	887a      	ldrh	r2, [r7, #2]
 801794c:	697b      	ldr	r3, [r7, #20]
 801794e:	9300      	str	r3, [sp, #0]
 8017950:	4613      	mov	r3, r2
 8017952:	687a      	ldr	r2, [r7, #4]
 8017954:	68b9      	ldr	r1, [r7, #8]
 8017956:	68f8      	ldr	r0, [r7, #12]
 8017958:	f000 f812 	bl	8017980 <udp_sendto_if>
 801795c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801795e:	4618      	mov	r0, r3
 8017960:	3718      	adds	r7, #24
 8017962:	46bd      	mov	sp, r7
 8017964:	bd80      	pop	{r7, pc}
 8017966:	bf00      	nop
 8017968:	08028384 	.word	0x08028384
 801796c:	080284a8 	.word	0x080284a8
 8017970:	080283d8 	.word	0x080283d8
 8017974:	080284c0 	.word	0x080284c0
 8017978:	080284dc 	.word	0x080284dc
 801797c:	08029348 	.word	0x08029348

08017980 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8017980:	b580      	push	{r7, lr}
 8017982:	b088      	sub	sp, #32
 8017984:	af02      	add	r7, sp, #8
 8017986:	60f8      	str	r0, [r7, #12]
 8017988:	60b9      	str	r1, [r7, #8]
 801798a:	607a      	str	r2, [r7, #4]
 801798c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801798e:	68fb      	ldr	r3, [r7, #12]
 8017990:	2b00      	cmp	r3, #0
 8017992:	d109      	bne.n	80179a8 <udp_sendto_if+0x28>
 8017994:	4b2e      	ldr	r3, [pc, #184]	; (8017a50 <udp_sendto_if+0xd0>)
 8017996:	f44f 7220 	mov.w	r2, #640	; 0x280
 801799a:	492e      	ldr	r1, [pc, #184]	; (8017a54 <udp_sendto_if+0xd4>)
 801799c:	482e      	ldr	r0, [pc, #184]	; (8017a58 <udp_sendto_if+0xd8>)
 801799e:	f00c f91f 	bl	8023be0 <iprintf>
 80179a2:	f06f 030f 	mvn.w	r3, #15
 80179a6:	e04f      	b.n	8017a48 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80179a8:	68bb      	ldr	r3, [r7, #8]
 80179aa:	2b00      	cmp	r3, #0
 80179ac:	d109      	bne.n	80179c2 <udp_sendto_if+0x42>
 80179ae:	4b28      	ldr	r3, [pc, #160]	; (8017a50 <udp_sendto_if+0xd0>)
 80179b0:	f240 2281 	movw	r2, #641	; 0x281
 80179b4:	4929      	ldr	r1, [pc, #164]	; (8017a5c <udp_sendto_if+0xdc>)
 80179b6:	4828      	ldr	r0, [pc, #160]	; (8017a58 <udp_sendto_if+0xd8>)
 80179b8:	f00c f912 	bl	8023be0 <iprintf>
 80179bc:	f06f 030f 	mvn.w	r3, #15
 80179c0:	e042      	b.n	8017a48 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80179c2:	687b      	ldr	r3, [r7, #4]
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	d109      	bne.n	80179dc <udp_sendto_if+0x5c>
 80179c8:	4b21      	ldr	r3, [pc, #132]	; (8017a50 <udp_sendto_if+0xd0>)
 80179ca:	f240 2282 	movw	r2, #642	; 0x282
 80179ce:	4924      	ldr	r1, [pc, #144]	; (8017a60 <udp_sendto_if+0xe0>)
 80179d0:	4821      	ldr	r0, [pc, #132]	; (8017a58 <udp_sendto_if+0xd8>)
 80179d2:	f00c f905 	bl	8023be0 <iprintf>
 80179d6:	f06f 030f 	mvn.w	r3, #15
 80179da:	e035      	b.n	8017a48 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80179dc:	6a3b      	ldr	r3, [r7, #32]
 80179de:	2b00      	cmp	r3, #0
 80179e0:	d109      	bne.n	80179f6 <udp_sendto_if+0x76>
 80179e2:	4b1b      	ldr	r3, [pc, #108]	; (8017a50 <udp_sendto_if+0xd0>)
 80179e4:	f240 2283 	movw	r2, #643	; 0x283
 80179e8:	491e      	ldr	r1, [pc, #120]	; (8017a64 <udp_sendto_if+0xe4>)
 80179ea:	481b      	ldr	r0, [pc, #108]	; (8017a58 <udp_sendto_if+0xd8>)
 80179ec:	f00c f8f8 	bl	8023be0 <iprintf>
 80179f0:	f06f 030f 	mvn.w	r3, #15
 80179f4:	e028      	b.n	8017a48 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80179f6:	68fb      	ldr	r3, [r7, #12]
 80179f8:	2b00      	cmp	r3, #0
 80179fa:	d009      	beq.n	8017a10 <udp_sendto_if+0x90>
 80179fc:	68fb      	ldr	r3, [r7, #12]
 80179fe:	681b      	ldr	r3, [r3, #0]
 8017a00:	2b00      	cmp	r3, #0
 8017a02:	d005      	beq.n	8017a10 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8017a04:	68fb      	ldr	r3, [r7, #12]
 8017a06:	681b      	ldr	r3, [r3, #0]
 8017a08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017a0c:	2be0      	cmp	r3, #224	; 0xe0
 8017a0e:	d103      	bne.n	8017a18 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8017a10:	6a3b      	ldr	r3, [r7, #32]
 8017a12:	3304      	adds	r3, #4
 8017a14:	617b      	str	r3, [r7, #20]
 8017a16:	e00b      	b.n	8017a30 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8017a18:	68fb      	ldr	r3, [r7, #12]
 8017a1a:	681a      	ldr	r2, [r3, #0]
 8017a1c:	6a3b      	ldr	r3, [r7, #32]
 8017a1e:	3304      	adds	r3, #4
 8017a20:	681b      	ldr	r3, [r3, #0]
 8017a22:	429a      	cmp	r2, r3
 8017a24:	d002      	beq.n	8017a2c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8017a26:	f06f 0303 	mvn.w	r3, #3
 8017a2a:	e00d      	b.n	8017a48 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8017a2c:	68fb      	ldr	r3, [r7, #12]
 8017a2e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8017a30:	887a      	ldrh	r2, [r7, #2]
 8017a32:	697b      	ldr	r3, [r7, #20]
 8017a34:	9301      	str	r3, [sp, #4]
 8017a36:	6a3b      	ldr	r3, [r7, #32]
 8017a38:	9300      	str	r3, [sp, #0]
 8017a3a:	4613      	mov	r3, r2
 8017a3c:	687a      	ldr	r2, [r7, #4]
 8017a3e:	68b9      	ldr	r1, [r7, #8]
 8017a40:	68f8      	ldr	r0, [r7, #12]
 8017a42:	f000 f811 	bl	8017a68 <udp_sendto_if_src>
 8017a46:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8017a48:	4618      	mov	r0, r3
 8017a4a:	3718      	adds	r7, #24
 8017a4c:	46bd      	mov	sp, r7
 8017a4e:	bd80      	pop	{r7, pc}
 8017a50:	08028384 	.word	0x08028384
 8017a54:	080284f8 	.word	0x080284f8
 8017a58:	080283d8 	.word	0x080283d8
 8017a5c:	08028514 	.word	0x08028514
 8017a60:	08028530 	.word	0x08028530
 8017a64:	08028550 	.word	0x08028550

08017a68 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8017a68:	b580      	push	{r7, lr}
 8017a6a:	b08c      	sub	sp, #48	; 0x30
 8017a6c:	af04      	add	r7, sp, #16
 8017a6e:	60f8      	str	r0, [r7, #12]
 8017a70:	60b9      	str	r1, [r7, #8]
 8017a72:	607a      	str	r2, [r7, #4]
 8017a74:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8017a76:	68fb      	ldr	r3, [r7, #12]
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	d109      	bne.n	8017a90 <udp_sendto_if_src+0x28>
 8017a7c:	4b73      	ldr	r3, [pc, #460]	; (8017c4c <udp_sendto_if_src+0x1e4>)
 8017a7e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8017a82:	4973      	ldr	r1, [pc, #460]	; (8017c50 <udp_sendto_if_src+0x1e8>)
 8017a84:	4873      	ldr	r0, [pc, #460]	; (8017c54 <udp_sendto_if_src+0x1ec>)
 8017a86:	f00c f8ab 	bl	8023be0 <iprintf>
 8017a8a:	f06f 030f 	mvn.w	r3, #15
 8017a8e:	e0d8      	b.n	8017c42 <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8017a90:	68bb      	ldr	r3, [r7, #8]
 8017a92:	2b00      	cmp	r3, #0
 8017a94:	d109      	bne.n	8017aaa <udp_sendto_if_src+0x42>
 8017a96:	4b6d      	ldr	r3, [pc, #436]	; (8017c4c <udp_sendto_if_src+0x1e4>)
 8017a98:	f240 22d2 	movw	r2, #722	; 0x2d2
 8017a9c:	496e      	ldr	r1, [pc, #440]	; (8017c58 <udp_sendto_if_src+0x1f0>)
 8017a9e:	486d      	ldr	r0, [pc, #436]	; (8017c54 <udp_sendto_if_src+0x1ec>)
 8017aa0:	f00c f89e 	bl	8023be0 <iprintf>
 8017aa4:	f06f 030f 	mvn.w	r3, #15
 8017aa8:	e0cb      	b.n	8017c42 <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	d109      	bne.n	8017ac4 <udp_sendto_if_src+0x5c>
 8017ab0:	4b66      	ldr	r3, [pc, #408]	; (8017c4c <udp_sendto_if_src+0x1e4>)
 8017ab2:	f240 22d3 	movw	r2, #723	; 0x2d3
 8017ab6:	4969      	ldr	r1, [pc, #420]	; (8017c5c <udp_sendto_if_src+0x1f4>)
 8017ab8:	4866      	ldr	r0, [pc, #408]	; (8017c54 <udp_sendto_if_src+0x1ec>)
 8017aba:	f00c f891 	bl	8023be0 <iprintf>
 8017abe:	f06f 030f 	mvn.w	r3, #15
 8017ac2:	e0be      	b.n	8017c42 <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8017ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ac6:	2b00      	cmp	r3, #0
 8017ac8:	d109      	bne.n	8017ade <udp_sendto_if_src+0x76>
 8017aca:	4b60      	ldr	r3, [pc, #384]	; (8017c4c <udp_sendto_if_src+0x1e4>)
 8017acc:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8017ad0:	4963      	ldr	r1, [pc, #396]	; (8017c60 <udp_sendto_if_src+0x1f8>)
 8017ad2:	4860      	ldr	r0, [pc, #384]	; (8017c54 <udp_sendto_if_src+0x1ec>)
 8017ad4:	f00c f884 	bl	8023be0 <iprintf>
 8017ad8:	f06f 030f 	mvn.w	r3, #15
 8017adc:	e0b1      	b.n	8017c42 <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8017ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	d109      	bne.n	8017af8 <udp_sendto_if_src+0x90>
 8017ae4:	4b59      	ldr	r3, [pc, #356]	; (8017c4c <udp_sendto_if_src+0x1e4>)
 8017ae6:	f240 22d5 	movw	r2, #725	; 0x2d5
 8017aea:	495e      	ldr	r1, [pc, #376]	; (8017c64 <udp_sendto_if_src+0x1fc>)
 8017aec:	4859      	ldr	r0, [pc, #356]	; (8017c54 <udp_sendto_if_src+0x1ec>)
 8017aee:	f00c f877 	bl	8023be0 <iprintf>
 8017af2:	f06f 030f 	mvn.w	r3, #15
 8017af6:	e0a4      	b.n	8017c42 <udp_sendto_if_src+0x1da>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8017af8:	68fb      	ldr	r3, [r7, #12]
 8017afa:	8a5b      	ldrh	r3, [r3, #18]
 8017afc:	2b00      	cmp	r3, #0
 8017afe:	d10f      	bne.n	8017b20 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8017b00:	68f9      	ldr	r1, [r7, #12]
 8017b02:	68fb      	ldr	r3, [r7, #12]
 8017b04:	8a5b      	ldrh	r3, [r3, #18]
 8017b06:	461a      	mov	r2, r3
 8017b08:	68f8      	ldr	r0, [r7, #12]
 8017b0a:	f000 f8af 	bl	8017c6c <udp_bind>
 8017b0e:	4603      	mov	r3, r0
 8017b10:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8017b12:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	d002      	beq.n	8017b20 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8017b1a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8017b1e:	e090      	b.n	8017c42 <udp_sendto_if_src+0x1da>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8017b20:	68bb      	ldr	r3, [r7, #8]
 8017b22:	891b      	ldrh	r3, [r3, #8]
 8017b24:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8017b28:	4293      	cmp	r3, r2
 8017b2a:	d902      	bls.n	8017b32 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8017b2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017b30:	e087      	b.n	8017c42 <udp_sendto_if_src+0x1da>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8017b32:	2108      	movs	r1, #8
 8017b34:	68b8      	ldr	r0, [r7, #8]
 8017b36:	f7f8 fdeb 	bl	8010710 <pbuf_add_header>
 8017b3a:	4603      	mov	r3, r0
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	d015      	beq.n	8017b6c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8017b40:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017b44:	2108      	movs	r1, #8
 8017b46:	2022      	movs	r0, #34	; 0x22
 8017b48:	f7f8 fb94 	bl	8010274 <pbuf_alloc>
 8017b4c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8017b4e:	69fb      	ldr	r3, [r7, #28]
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	d102      	bne.n	8017b5a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8017b54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017b58:	e073      	b.n	8017c42 <udp_sendto_if_src+0x1da>
    }
    if (p->tot_len != 0) {
 8017b5a:	68bb      	ldr	r3, [r7, #8]
 8017b5c:	891b      	ldrh	r3, [r3, #8]
 8017b5e:	2b00      	cmp	r3, #0
 8017b60:	d006      	beq.n	8017b70 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8017b62:	68b9      	ldr	r1, [r7, #8]
 8017b64:	69f8      	ldr	r0, [r7, #28]
 8017b66:	f7f8 ffbf 	bl	8010ae8 <pbuf_chain>
 8017b6a:	e001      	b.n	8017b70 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8017b6c:	68bb      	ldr	r3, [r7, #8]
 8017b6e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8017b70:	69fb      	ldr	r3, [r7, #28]
 8017b72:	895b      	ldrh	r3, [r3, #10]
 8017b74:	2b07      	cmp	r3, #7
 8017b76:	d806      	bhi.n	8017b86 <udp_sendto_if_src+0x11e>
 8017b78:	4b34      	ldr	r3, [pc, #208]	; (8017c4c <udp_sendto_if_src+0x1e4>)
 8017b7a:	f240 320d 	movw	r2, #781	; 0x30d
 8017b7e:	493a      	ldr	r1, [pc, #232]	; (8017c68 <udp_sendto_if_src+0x200>)
 8017b80:	4834      	ldr	r0, [pc, #208]	; (8017c54 <udp_sendto_if_src+0x1ec>)
 8017b82:	f00c f82d 	bl	8023be0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8017b86:	69fb      	ldr	r3, [r7, #28]
 8017b88:	685b      	ldr	r3, [r3, #4]
 8017b8a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8017b8c:	68fb      	ldr	r3, [r7, #12]
 8017b8e:	8a5b      	ldrh	r3, [r3, #18]
 8017b90:	4618      	mov	r0, r3
 8017b92:	f7f6 fa2f 	bl	800dff4 <lwip_htons>
 8017b96:	4603      	mov	r3, r0
 8017b98:	461a      	mov	r2, r3
 8017b9a:	697b      	ldr	r3, [r7, #20]
 8017b9c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8017b9e:	887b      	ldrh	r3, [r7, #2]
 8017ba0:	4618      	mov	r0, r3
 8017ba2:	f7f6 fa27 	bl	800dff4 <lwip_htons>
 8017ba6:	4603      	mov	r3, r0
 8017ba8:	461a      	mov	r2, r3
 8017baa:	697b      	ldr	r3, [r7, #20]
 8017bac:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8017bae:	697b      	ldr	r3, [r7, #20]
 8017bb0:	2200      	movs	r2, #0
 8017bb2:	719a      	strb	r2, [r3, #6]
 8017bb4:	2200      	movs	r2, #0
 8017bb6:	71da      	strb	r2, [r3, #7]

  /* Multicast Loop? */
#if LWIP_MULTICAST_TX_OPTIONS
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
 8017bb8:	68fb      	ldr	r3, [r7, #12]
 8017bba:	7c1b      	ldrb	r3, [r3, #16]
 8017bbc:	f003 0308 	and.w	r3, r3, #8
 8017bc0:	2b00      	cmp	r3, #0
 8017bc2:	d00c      	beq.n	8017bde <udp_sendto_if_src+0x176>
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	681b      	ldr	r3, [r3, #0]
 8017bc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017bcc:	2be0      	cmp	r3, #224	; 0xe0
 8017bce:	d106      	bne.n	8017bde <udp_sendto_if_src+0x176>
    q->flags |= PBUF_FLAG_MCASTLOOP;
 8017bd0:	69fb      	ldr	r3, [r7, #28]
 8017bd2:	7b5b      	ldrb	r3, [r3, #13]
 8017bd4:	f043 0304 	orr.w	r3, r3, #4
 8017bd8:	b2da      	uxtb	r2, r3
 8017bda:	69fb      	ldr	r3, [r7, #28]
 8017bdc:	735a      	strb	r2, [r3, #13]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8017bde:	69fb      	ldr	r3, [r7, #28]
 8017be0:	891b      	ldrh	r3, [r3, #8]
 8017be2:	4618      	mov	r0, r3
 8017be4:	f7f6 fa06 	bl	800dff4 <lwip_htons>
 8017be8:	4603      	mov	r3, r0
 8017bea:	461a      	mov	r2, r3
 8017bec:	697b      	ldr	r3, [r7, #20]
 8017bee:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8017bf0:	2311      	movs	r3, #17
 8017bf2:	74fb      	strb	r3, [r7, #19]
  }

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	681b      	ldr	r3, [r3, #0]
 8017bf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017bfc:	2be0      	cmp	r3, #224	; 0xe0
 8017bfe:	d102      	bne.n	8017c06 <udp_sendto_if_src+0x19e>
 8017c00:	68fb      	ldr	r3, [r7, #12]
 8017c02:	7f5b      	ldrb	r3, [r3, #29]
 8017c04:	e001      	b.n	8017c0a <udp_sendto_if_src+0x1a2>
 8017c06:	68fb      	ldr	r3, [r7, #12]
 8017c08:	7adb      	ldrb	r3, [r3, #11]
 8017c0a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8017c0c:	68fb      	ldr	r3, [r7, #12]
 8017c0e:	7a9b      	ldrb	r3, [r3, #10]
 8017c10:	7cb9      	ldrb	r1, [r7, #18]
 8017c12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017c14:	9202      	str	r2, [sp, #8]
 8017c16:	7cfa      	ldrb	r2, [r7, #19]
 8017c18:	9201      	str	r2, [sp, #4]
 8017c1a:	9300      	str	r3, [sp, #0]
 8017c1c:	460b      	mov	r3, r1
 8017c1e:	687a      	ldr	r2, [r7, #4]
 8017c20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017c22:	69f8      	ldr	r0, [r7, #28]
 8017c24:	f002 f9cb 	bl	8019fbe <ip4_output_if_src>
 8017c28:	4603      	mov	r3, r0
 8017c2a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8017c2c:	69fa      	ldr	r2, [r7, #28]
 8017c2e:	68bb      	ldr	r3, [r7, #8]
 8017c30:	429a      	cmp	r2, r3
 8017c32:	d004      	beq.n	8017c3e <udp_sendto_if_src+0x1d6>
    /* free the header pbuf */
    pbuf_free(q);
 8017c34:	69f8      	ldr	r0, [r7, #28]
 8017c36:	f7f8 fe33 	bl	80108a0 <pbuf_free>
    q = NULL;
 8017c3a:	2300      	movs	r3, #0
 8017c3c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8017c3e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8017c42:	4618      	mov	r0, r3
 8017c44:	3720      	adds	r7, #32
 8017c46:	46bd      	mov	sp, r7
 8017c48:	bd80      	pop	{r7, pc}
 8017c4a:	bf00      	nop
 8017c4c:	08028384 	.word	0x08028384
 8017c50:	08028570 	.word	0x08028570
 8017c54:	080283d8 	.word	0x080283d8
 8017c58:	08028590 	.word	0x08028590
 8017c5c:	080285b0 	.word	0x080285b0
 8017c60:	080285d4 	.word	0x080285d4
 8017c64:	080285f8 	.word	0x080285f8
 8017c68:	0802861c 	.word	0x0802861c

08017c6c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8017c6c:	b580      	push	{r7, lr}
 8017c6e:	b086      	sub	sp, #24
 8017c70:	af00      	add	r7, sp, #0
 8017c72:	60f8      	str	r0, [r7, #12]
 8017c74:	60b9      	str	r1, [r7, #8]
 8017c76:	4613      	mov	r3, r2
 8017c78:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8017c7a:	68bb      	ldr	r3, [r7, #8]
 8017c7c:	2b00      	cmp	r3, #0
 8017c7e:	d101      	bne.n	8017c84 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8017c80:	4b39      	ldr	r3, [pc, #228]	; (8017d68 <udp_bind+0xfc>)
 8017c82:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8017c84:	68fb      	ldr	r3, [r7, #12]
 8017c86:	2b00      	cmp	r3, #0
 8017c88:	d109      	bne.n	8017c9e <udp_bind+0x32>
 8017c8a:	4b38      	ldr	r3, [pc, #224]	; (8017d6c <udp_bind+0x100>)
 8017c8c:	f240 32b7 	movw	r2, #951	; 0x3b7
 8017c90:	4937      	ldr	r1, [pc, #220]	; (8017d70 <udp_bind+0x104>)
 8017c92:	4838      	ldr	r0, [pc, #224]	; (8017d74 <udp_bind+0x108>)
 8017c94:	f00b ffa4 	bl	8023be0 <iprintf>
 8017c98:	f06f 030f 	mvn.w	r3, #15
 8017c9c:	e060      	b.n	8017d60 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8017c9e:	2300      	movs	r3, #0
 8017ca0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017ca2:	4b35      	ldr	r3, [pc, #212]	; (8017d78 <udp_bind+0x10c>)
 8017ca4:	681b      	ldr	r3, [r3, #0]
 8017ca6:	617b      	str	r3, [r7, #20]
 8017ca8:	e009      	b.n	8017cbe <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8017caa:	68fa      	ldr	r2, [r7, #12]
 8017cac:	697b      	ldr	r3, [r7, #20]
 8017cae:	429a      	cmp	r2, r3
 8017cb0:	d102      	bne.n	8017cb8 <udp_bind+0x4c>
      rebind = 1;
 8017cb2:	2301      	movs	r3, #1
 8017cb4:	74fb      	strb	r3, [r7, #19]
      break;
 8017cb6:	e005      	b.n	8017cc4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017cb8:	697b      	ldr	r3, [r7, #20]
 8017cba:	68db      	ldr	r3, [r3, #12]
 8017cbc:	617b      	str	r3, [r7, #20]
 8017cbe:	697b      	ldr	r3, [r7, #20]
 8017cc0:	2b00      	cmp	r3, #0
 8017cc2:	d1f2      	bne.n	8017caa <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8017cc4:	88fb      	ldrh	r3, [r7, #6]
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d109      	bne.n	8017cde <udp_bind+0x72>
    port = udp_new_port();
 8017cca:	f7ff fbf1 	bl	80174b0 <udp_new_port>
 8017cce:	4603      	mov	r3, r0
 8017cd0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8017cd2:	88fb      	ldrh	r3, [r7, #6]
 8017cd4:	2b00      	cmp	r3, #0
 8017cd6:	d12c      	bne.n	8017d32 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8017cd8:	f06f 0307 	mvn.w	r3, #7
 8017cdc:	e040      	b.n	8017d60 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017cde:	4b26      	ldr	r3, [pc, #152]	; (8017d78 <udp_bind+0x10c>)
 8017ce0:	681b      	ldr	r3, [r3, #0]
 8017ce2:	617b      	str	r3, [r7, #20]
 8017ce4:	e022      	b.n	8017d2c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8017ce6:	68fa      	ldr	r2, [r7, #12]
 8017ce8:	697b      	ldr	r3, [r7, #20]
 8017cea:	429a      	cmp	r2, r3
 8017cec:	d01b      	beq.n	8017d26 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8017cee:	697b      	ldr	r3, [r7, #20]
 8017cf0:	8a5b      	ldrh	r3, [r3, #18]
 8017cf2:	88fa      	ldrh	r2, [r7, #6]
 8017cf4:	429a      	cmp	r2, r3
 8017cf6:	d116      	bne.n	8017d26 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8017cf8:	697b      	ldr	r3, [r7, #20]
 8017cfa:	681a      	ldr	r2, [r3, #0]
 8017cfc:	68bb      	ldr	r3, [r7, #8]
 8017cfe:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8017d00:	429a      	cmp	r2, r3
 8017d02:	d00d      	beq.n	8017d20 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8017d04:	68bb      	ldr	r3, [r7, #8]
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	d00a      	beq.n	8017d20 <udp_bind+0xb4>
 8017d0a:	68bb      	ldr	r3, [r7, #8]
 8017d0c:	681b      	ldr	r3, [r3, #0]
 8017d0e:	2b00      	cmp	r3, #0
 8017d10:	d006      	beq.n	8017d20 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8017d12:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8017d14:	2b00      	cmp	r3, #0
 8017d16:	d003      	beq.n	8017d20 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8017d18:	697b      	ldr	r3, [r7, #20]
 8017d1a:	681b      	ldr	r3, [r3, #0]
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	d102      	bne.n	8017d26 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8017d20:	f06f 0307 	mvn.w	r3, #7
 8017d24:	e01c      	b.n	8017d60 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017d26:	697b      	ldr	r3, [r7, #20]
 8017d28:	68db      	ldr	r3, [r3, #12]
 8017d2a:	617b      	str	r3, [r7, #20]
 8017d2c:	697b      	ldr	r3, [r7, #20]
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	d1d9      	bne.n	8017ce6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8017d32:	68bb      	ldr	r3, [r7, #8]
 8017d34:	2b00      	cmp	r3, #0
 8017d36:	d002      	beq.n	8017d3e <udp_bind+0xd2>
 8017d38:	68bb      	ldr	r3, [r7, #8]
 8017d3a:	681b      	ldr	r3, [r3, #0]
 8017d3c:	e000      	b.n	8017d40 <udp_bind+0xd4>
 8017d3e:	2300      	movs	r3, #0
 8017d40:	68fa      	ldr	r2, [r7, #12]
 8017d42:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8017d44:	68fb      	ldr	r3, [r7, #12]
 8017d46:	88fa      	ldrh	r2, [r7, #6]
 8017d48:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8017d4a:	7cfb      	ldrb	r3, [r7, #19]
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	d106      	bne.n	8017d5e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8017d50:	4b09      	ldr	r3, [pc, #36]	; (8017d78 <udp_bind+0x10c>)
 8017d52:	681a      	ldr	r2, [r3, #0]
 8017d54:	68fb      	ldr	r3, [r7, #12]
 8017d56:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8017d58:	4a07      	ldr	r2, [pc, #28]	; (8017d78 <udp_bind+0x10c>)
 8017d5a:	68fb      	ldr	r3, [r7, #12]
 8017d5c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8017d5e:	2300      	movs	r3, #0
}
 8017d60:	4618      	mov	r0, r3
 8017d62:	3718      	adds	r7, #24
 8017d64:	46bd      	mov	sp, r7
 8017d66:	bd80      	pop	{r7, pc}
 8017d68:	08029344 	.word	0x08029344
 8017d6c:	08028384 	.word	0x08028384
 8017d70:	0802864c 	.word	0x0802864c
 8017d74:	080283d8 	.word	0x080283d8
 8017d78:	2000fc98 	.word	0x2000fc98

08017d7c <udp_bind_netif>:
 *
 * @see udp_disconnect()
 */
void
udp_bind_netif(struct udp_pcb *pcb, const struct netif *netif)
{
 8017d7c:	b480      	push	{r7}
 8017d7e:	b083      	sub	sp, #12
 8017d80:	af00      	add	r7, sp, #0
 8017d82:	6078      	str	r0, [r7, #4]
 8017d84:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif != NULL) {
 8017d86:	683b      	ldr	r3, [r7, #0]
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d007      	beq.n	8017d9c <udp_bind_netif+0x20>
    pcb->netif_idx = netif_get_index(netif);
 8017d8c:	683b      	ldr	r3, [r7, #0]
 8017d8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017d92:	3301      	adds	r3, #1
 8017d94:	b2da      	uxtb	r2, r3
 8017d96:	687b      	ldr	r3, [r7, #4]
 8017d98:	721a      	strb	r2, [r3, #8]
  } else {
    pcb->netif_idx = NETIF_NO_INDEX;
  }
}
 8017d9a:	e002      	b.n	8017da2 <udp_bind_netif+0x26>
    pcb->netif_idx = NETIF_NO_INDEX;
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	2200      	movs	r2, #0
 8017da0:	721a      	strb	r2, [r3, #8]
}
 8017da2:	bf00      	nop
 8017da4:	370c      	adds	r7, #12
 8017da6:	46bd      	mov	sp, r7
 8017da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dac:	4770      	bx	lr
	...

08017db0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8017db0:	b580      	push	{r7, lr}
 8017db2:	b086      	sub	sp, #24
 8017db4:	af00      	add	r7, sp, #0
 8017db6:	60f8      	str	r0, [r7, #12]
 8017db8:	60b9      	str	r1, [r7, #8]
 8017dba:	4613      	mov	r3, r2
 8017dbc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8017dbe:	68fb      	ldr	r3, [r7, #12]
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d109      	bne.n	8017dd8 <udp_connect+0x28>
 8017dc4:	4b2c      	ldr	r3, [pc, #176]	; (8017e78 <udp_connect+0xc8>)
 8017dc6:	f240 4235 	movw	r2, #1077	; 0x435
 8017dca:	492c      	ldr	r1, [pc, #176]	; (8017e7c <udp_connect+0xcc>)
 8017dcc:	482c      	ldr	r0, [pc, #176]	; (8017e80 <udp_connect+0xd0>)
 8017dce:	f00b ff07 	bl	8023be0 <iprintf>
 8017dd2:	f06f 030f 	mvn.w	r3, #15
 8017dd6:	e04b      	b.n	8017e70 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8017dd8:	68bb      	ldr	r3, [r7, #8]
 8017dda:	2b00      	cmp	r3, #0
 8017ddc:	d109      	bne.n	8017df2 <udp_connect+0x42>
 8017dde:	4b26      	ldr	r3, [pc, #152]	; (8017e78 <udp_connect+0xc8>)
 8017de0:	f240 4236 	movw	r2, #1078	; 0x436
 8017de4:	4927      	ldr	r1, [pc, #156]	; (8017e84 <udp_connect+0xd4>)
 8017de6:	4826      	ldr	r0, [pc, #152]	; (8017e80 <udp_connect+0xd0>)
 8017de8:	f00b fefa 	bl	8023be0 <iprintf>
 8017dec:	f06f 030f 	mvn.w	r3, #15
 8017df0:	e03e      	b.n	8017e70 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8017df2:	68fb      	ldr	r3, [r7, #12]
 8017df4:	8a5b      	ldrh	r3, [r3, #18]
 8017df6:	2b00      	cmp	r3, #0
 8017df8:	d10f      	bne.n	8017e1a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8017dfa:	68f9      	ldr	r1, [r7, #12]
 8017dfc:	68fb      	ldr	r3, [r7, #12]
 8017dfe:	8a5b      	ldrh	r3, [r3, #18]
 8017e00:	461a      	mov	r2, r3
 8017e02:	68f8      	ldr	r0, [r7, #12]
 8017e04:	f7ff ff32 	bl	8017c6c <udp_bind>
 8017e08:	4603      	mov	r3, r0
 8017e0a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8017e0c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	d002      	beq.n	8017e1a <udp_connect+0x6a>
      return err;
 8017e14:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017e18:	e02a      	b.n	8017e70 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8017e1a:	68bb      	ldr	r3, [r7, #8]
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	d002      	beq.n	8017e26 <udp_connect+0x76>
 8017e20:	68bb      	ldr	r3, [r7, #8]
 8017e22:	681b      	ldr	r3, [r3, #0]
 8017e24:	e000      	b.n	8017e28 <udp_connect+0x78>
 8017e26:	2300      	movs	r3, #0
 8017e28:	68fa      	ldr	r2, [r7, #12]
 8017e2a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8017e2c:	68fb      	ldr	r3, [r7, #12]
 8017e2e:	88fa      	ldrh	r2, [r7, #6]
 8017e30:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8017e32:	68fb      	ldr	r3, [r7, #12]
 8017e34:	7c1b      	ldrb	r3, [r3, #16]
 8017e36:	f043 0304 	orr.w	r3, r3, #4
 8017e3a:	b2da      	uxtb	r2, r3
 8017e3c:	68fb      	ldr	r3, [r7, #12]
 8017e3e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017e40:	4b11      	ldr	r3, [pc, #68]	; (8017e88 <udp_connect+0xd8>)
 8017e42:	681b      	ldr	r3, [r3, #0]
 8017e44:	617b      	str	r3, [r7, #20]
 8017e46:	e008      	b.n	8017e5a <udp_connect+0xaa>
    if (pcb == ipcb) {
 8017e48:	68fa      	ldr	r2, [r7, #12]
 8017e4a:	697b      	ldr	r3, [r7, #20]
 8017e4c:	429a      	cmp	r2, r3
 8017e4e:	d101      	bne.n	8017e54 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8017e50:	2300      	movs	r3, #0
 8017e52:	e00d      	b.n	8017e70 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017e54:	697b      	ldr	r3, [r7, #20]
 8017e56:	68db      	ldr	r3, [r3, #12]
 8017e58:	617b      	str	r3, [r7, #20]
 8017e5a:	697b      	ldr	r3, [r7, #20]
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	d1f3      	bne.n	8017e48 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8017e60:	4b09      	ldr	r3, [pc, #36]	; (8017e88 <udp_connect+0xd8>)
 8017e62:	681a      	ldr	r2, [r3, #0]
 8017e64:	68fb      	ldr	r3, [r7, #12]
 8017e66:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8017e68:	4a07      	ldr	r2, [pc, #28]	; (8017e88 <udp_connect+0xd8>)
 8017e6a:	68fb      	ldr	r3, [r7, #12]
 8017e6c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8017e6e:	2300      	movs	r3, #0
}
 8017e70:	4618      	mov	r0, r3
 8017e72:	3718      	adds	r7, #24
 8017e74:	46bd      	mov	sp, r7
 8017e76:	bd80      	pop	{r7, pc}
 8017e78:	08028384 	.word	0x08028384
 8017e7c:	08028664 	.word	0x08028664
 8017e80:	080283d8 	.word	0x080283d8
 8017e84:	08028680 	.word	0x08028680
 8017e88:	2000fc98 	.word	0x2000fc98

08017e8c <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8017e8c:	b580      	push	{r7, lr}
 8017e8e:	b082      	sub	sp, #8
 8017e90:	af00      	add	r7, sp, #0
 8017e92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	d107      	bne.n	8017eaa <udp_disconnect+0x1e>
 8017e9a:	4b0d      	ldr	r3, [pc, #52]	; (8017ed0 <udp_disconnect+0x44>)
 8017e9c:	f240 426a 	movw	r2, #1130	; 0x46a
 8017ea0:	490c      	ldr	r1, [pc, #48]	; (8017ed4 <udp_disconnect+0x48>)
 8017ea2:	480d      	ldr	r0, [pc, #52]	; (8017ed8 <udp_disconnect+0x4c>)
 8017ea4:	f00b fe9c 	bl	8023be0 <iprintf>
 8017ea8:	e00f      	b.n	8017eca <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8017eaa:	687b      	ldr	r3, [r7, #4]
 8017eac:	2200      	movs	r2, #0
 8017eae:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8017eb0:	687b      	ldr	r3, [r7, #4]
 8017eb2:	2200      	movs	r2, #0
 8017eb4:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	2200      	movs	r2, #0
 8017eba:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	7c1b      	ldrb	r3, [r3, #16]
 8017ec0:	f023 0304 	bic.w	r3, r3, #4
 8017ec4:	b2da      	uxtb	r2, r3
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	741a      	strb	r2, [r3, #16]
}
 8017eca:	3708      	adds	r7, #8
 8017ecc:	46bd      	mov	sp, r7
 8017ece:	bd80      	pop	{r7, pc}
 8017ed0:	08028384 	.word	0x08028384
 8017ed4:	0802869c 	.word	0x0802869c
 8017ed8:	080283d8 	.word	0x080283d8

08017edc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8017edc:	b580      	push	{r7, lr}
 8017ede:	b084      	sub	sp, #16
 8017ee0:	af00      	add	r7, sp, #0
 8017ee2:	60f8      	str	r0, [r7, #12]
 8017ee4:	60b9      	str	r1, [r7, #8]
 8017ee6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8017ee8:	68fb      	ldr	r3, [r7, #12]
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	d107      	bne.n	8017efe <udp_recv+0x22>
 8017eee:	4b08      	ldr	r3, [pc, #32]	; (8017f10 <udp_recv+0x34>)
 8017ef0:	f240 428a 	movw	r2, #1162	; 0x48a
 8017ef4:	4907      	ldr	r1, [pc, #28]	; (8017f14 <udp_recv+0x38>)
 8017ef6:	4808      	ldr	r0, [pc, #32]	; (8017f18 <udp_recv+0x3c>)
 8017ef8:	f00b fe72 	bl	8023be0 <iprintf>
 8017efc:	e005      	b.n	8017f0a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8017efe:	68fb      	ldr	r3, [r7, #12]
 8017f00:	68ba      	ldr	r2, [r7, #8]
 8017f02:	621a      	str	r2, [r3, #32]
  pcb->recv_arg = recv_arg;
 8017f04:	68fb      	ldr	r3, [r7, #12]
 8017f06:	687a      	ldr	r2, [r7, #4]
 8017f08:	625a      	str	r2, [r3, #36]	; 0x24
}
 8017f0a:	3710      	adds	r7, #16
 8017f0c:	46bd      	mov	sp, r7
 8017f0e:	bd80      	pop	{r7, pc}
 8017f10:	08028384 	.word	0x08028384
 8017f14:	080286b8 	.word	0x080286b8
 8017f18:	080283d8 	.word	0x080283d8

08017f1c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8017f1c:	b580      	push	{r7, lr}
 8017f1e:	b084      	sub	sp, #16
 8017f20:	af00      	add	r7, sp, #0
 8017f22:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8017f24:	687b      	ldr	r3, [r7, #4]
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d107      	bne.n	8017f3a <udp_remove+0x1e>
 8017f2a:	4b19      	ldr	r3, [pc, #100]	; (8017f90 <udp_remove+0x74>)
 8017f2c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8017f30:	4918      	ldr	r1, [pc, #96]	; (8017f94 <udp_remove+0x78>)
 8017f32:	4819      	ldr	r0, [pc, #100]	; (8017f98 <udp_remove+0x7c>)
 8017f34:	f00b fe54 	bl	8023be0 <iprintf>
 8017f38:	e026      	b.n	8017f88 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8017f3a:	4b18      	ldr	r3, [pc, #96]	; (8017f9c <udp_remove+0x80>)
 8017f3c:	681b      	ldr	r3, [r3, #0]
 8017f3e:	687a      	ldr	r2, [r7, #4]
 8017f40:	429a      	cmp	r2, r3
 8017f42:	d105      	bne.n	8017f50 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8017f44:	4b15      	ldr	r3, [pc, #84]	; (8017f9c <udp_remove+0x80>)
 8017f46:	681b      	ldr	r3, [r3, #0]
 8017f48:	68db      	ldr	r3, [r3, #12]
 8017f4a:	4a14      	ldr	r2, [pc, #80]	; (8017f9c <udp_remove+0x80>)
 8017f4c:	6013      	str	r3, [r2, #0]
 8017f4e:	e017      	b.n	8017f80 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8017f50:	4b12      	ldr	r3, [pc, #72]	; (8017f9c <udp_remove+0x80>)
 8017f52:	681b      	ldr	r3, [r3, #0]
 8017f54:	60fb      	str	r3, [r7, #12]
 8017f56:	e010      	b.n	8017f7a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8017f58:	68fb      	ldr	r3, [r7, #12]
 8017f5a:	68db      	ldr	r3, [r3, #12]
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	d009      	beq.n	8017f74 <udp_remove+0x58>
 8017f60:	68fb      	ldr	r3, [r7, #12]
 8017f62:	68db      	ldr	r3, [r3, #12]
 8017f64:	687a      	ldr	r2, [r7, #4]
 8017f66:	429a      	cmp	r2, r3
 8017f68:	d104      	bne.n	8017f74 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8017f6a:	687b      	ldr	r3, [r7, #4]
 8017f6c:	68da      	ldr	r2, [r3, #12]
 8017f6e:	68fb      	ldr	r3, [r7, #12]
 8017f70:	60da      	str	r2, [r3, #12]
        break;
 8017f72:	e005      	b.n	8017f80 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8017f74:	68fb      	ldr	r3, [r7, #12]
 8017f76:	68db      	ldr	r3, [r3, #12]
 8017f78:	60fb      	str	r3, [r7, #12]
 8017f7a:	68fb      	ldr	r3, [r7, #12]
 8017f7c:	2b00      	cmp	r3, #0
 8017f7e:	d1eb      	bne.n	8017f58 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8017f80:	6879      	ldr	r1, [r7, #4]
 8017f82:	2000      	movs	r0, #0
 8017f84:	f7f7 fd60 	bl	800fa48 <memp_free>
}
 8017f88:	3710      	adds	r7, #16
 8017f8a:	46bd      	mov	sp, r7
 8017f8c:	bd80      	pop	{r7, pc}
 8017f8e:	bf00      	nop
 8017f90:	08028384 	.word	0x08028384
 8017f94:	080286d0 	.word	0x080286d0
 8017f98:	080283d8 	.word	0x080283d8
 8017f9c:	2000fc98 	.word	0x2000fc98

08017fa0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8017fa0:	b580      	push	{r7, lr}
 8017fa2:	b082      	sub	sp, #8
 8017fa4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8017fa6:	2000      	movs	r0, #0
 8017fa8:	f7f7 fcfc 	bl	800f9a4 <memp_malloc>
 8017fac:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8017fae:	687b      	ldr	r3, [r7, #4]
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	d00a      	beq.n	8017fca <udp_new+0x2a>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8017fb4:	2228      	movs	r2, #40	; 0x28
 8017fb6:	2100      	movs	r1, #0
 8017fb8:	6878      	ldr	r0, [r7, #4]
 8017fba:	f00b fd13 	bl	80239e4 <memset>
    pcb->ttl = UDP_TTL;
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	22ff      	movs	r2, #255	; 0xff
 8017fc2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
 8017fc4:	687b      	ldr	r3, [r7, #4]
 8017fc6:	22ff      	movs	r2, #255	; 0xff
 8017fc8:	775a      	strb	r2, [r3, #29]
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8017fca:	687b      	ldr	r3, [r7, #4]
}
 8017fcc:	4618      	mov	r0, r3
 8017fce:	3708      	adds	r7, #8
 8017fd0:	46bd      	mov	sp, r7
 8017fd2:	bd80      	pop	{r7, pc}

08017fd4 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8017fd4:	b580      	push	{r7, lr}
 8017fd6:	b084      	sub	sp, #16
 8017fd8:	af00      	add	r7, sp, #0
 8017fda:	4603      	mov	r3, r0
 8017fdc:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8017fde:	f7ff ffdf 	bl	8017fa0 <udp_new>
 8017fe2:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8017fe4:	68fb      	ldr	r3, [r7, #12]
}
 8017fe6:	4618      	mov	r0, r3
 8017fe8:	3710      	adds	r7, #16
 8017fea:	46bd      	mov	sp, r7
 8017fec:	bd80      	pop	{r7, pc}
	...

08017ff0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8017ff0:	b480      	push	{r7}
 8017ff2:	b085      	sub	sp, #20
 8017ff4:	af00      	add	r7, sp, #0
 8017ff6:	6078      	str	r0, [r7, #4]
 8017ff8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	d01e      	beq.n	801803e <udp_netif_ip_addr_changed+0x4e>
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	681b      	ldr	r3, [r3, #0]
 8018004:	2b00      	cmp	r3, #0
 8018006:	d01a      	beq.n	801803e <udp_netif_ip_addr_changed+0x4e>
 8018008:	683b      	ldr	r3, [r7, #0]
 801800a:	2b00      	cmp	r3, #0
 801800c:	d017      	beq.n	801803e <udp_netif_ip_addr_changed+0x4e>
 801800e:	683b      	ldr	r3, [r7, #0]
 8018010:	681b      	ldr	r3, [r3, #0]
 8018012:	2b00      	cmp	r3, #0
 8018014:	d013      	beq.n	801803e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8018016:	4b0d      	ldr	r3, [pc, #52]	; (801804c <udp_netif_ip_addr_changed+0x5c>)
 8018018:	681b      	ldr	r3, [r3, #0]
 801801a:	60fb      	str	r3, [r7, #12]
 801801c:	e00c      	b.n	8018038 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801801e:	68fb      	ldr	r3, [r7, #12]
 8018020:	681a      	ldr	r2, [r3, #0]
 8018022:	687b      	ldr	r3, [r7, #4]
 8018024:	681b      	ldr	r3, [r3, #0]
 8018026:	429a      	cmp	r2, r3
 8018028:	d103      	bne.n	8018032 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801802a:	683b      	ldr	r3, [r7, #0]
 801802c:	681a      	ldr	r2, [r3, #0]
 801802e:	68fb      	ldr	r3, [r7, #12]
 8018030:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8018032:	68fb      	ldr	r3, [r7, #12]
 8018034:	68db      	ldr	r3, [r3, #12]
 8018036:	60fb      	str	r3, [r7, #12]
 8018038:	68fb      	ldr	r3, [r7, #12]
 801803a:	2b00      	cmp	r3, #0
 801803c:	d1ef      	bne.n	801801e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801803e:	bf00      	nop
 8018040:	3714      	adds	r7, #20
 8018042:	46bd      	mov	sp, r7
 8018044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018048:	4770      	bx	lr
 801804a:	bf00      	nop
 801804c:	2000fc98 	.word	0x2000fc98

08018050 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8018050:	b580      	push	{r7, lr}
 8018052:	b082      	sub	sp, #8
 8018054:	af00      	add	r7, sp, #0
 8018056:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8018058:	4915      	ldr	r1, [pc, #84]	; (80180b0 <etharp_free_entry+0x60>)
 801805a:	687a      	ldr	r2, [r7, #4]
 801805c:	4613      	mov	r3, r2
 801805e:	005b      	lsls	r3, r3, #1
 8018060:	4413      	add	r3, r2
 8018062:	00db      	lsls	r3, r3, #3
 8018064:	440b      	add	r3, r1
 8018066:	681b      	ldr	r3, [r3, #0]
 8018068:	2b00      	cmp	r3, #0
 801806a:	d013      	beq.n	8018094 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801806c:	4910      	ldr	r1, [pc, #64]	; (80180b0 <etharp_free_entry+0x60>)
 801806e:	687a      	ldr	r2, [r7, #4]
 8018070:	4613      	mov	r3, r2
 8018072:	005b      	lsls	r3, r3, #1
 8018074:	4413      	add	r3, r2
 8018076:	00db      	lsls	r3, r3, #3
 8018078:	440b      	add	r3, r1
 801807a:	681b      	ldr	r3, [r3, #0]
 801807c:	4618      	mov	r0, r3
 801807e:	f7f8 fc0f 	bl	80108a0 <pbuf_free>
    arp_table[i].q = NULL;
 8018082:	490b      	ldr	r1, [pc, #44]	; (80180b0 <etharp_free_entry+0x60>)
 8018084:	687a      	ldr	r2, [r7, #4]
 8018086:	4613      	mov	r3, r2
 8018088:	005b      	lsls	r3, r3, #1
 801808a:	4413      	add	r3, r2
 801808c:	00db      	lsls	r3, r3, #3
 801808e:	440b      	add	r3, r1
 8018090:	2200      	movs	r2, #0
 8018092:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8018094:	4906      	ldr	r1, [pc, #24]	; (80180b0 <etharp_free_entry+0x60>)
 8018096:	687a      	ldr	r2, [r7, #4]
 8018098:	4613      	mov	r3, r2
 801809a:	005b      	lsls	r3, r3, #1
 801809c:	4413      	add	r3, r2
 801809e:	00db      	lsls	r3, r3, #3
 80180a0:	440b      	add	r3, r1
 80180a2:	3314      	adds	r3, #20
 80180a4:	2200      	movs	r2, #0
 80180a6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80180a8:	bf00      	nop
 80180aa:	3708      	adds	r7, #8
 80180ac:	46bd      	mov	sp, r7
 80180ae:	bd80      	pop	{r7, pc}
 80180b0:	2000fc9c 	.word	0x2000fc9c

080180b4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80180b4:	b580      	push	{r7, lr}
 80180b6:	b082      	sub	sp, #8
 80180b8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80180ba:	2300      	movs	r3, #0
 80180bc:	607b      	str	r3, [r7, #4]
 80180be:	e096      	b.n	80181ee <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80180c0:	494f      	ldr	r1, [pc, #316]	; (8018200 <etharp_tmr+0x14c>)
 80180c2:	687a      	ldr	r2, [r7, #4]
 80180c4:	4613      	mov	r3, r2
 80180c6:	005b      	lsls	r3, r3, #1
 80180c8:	4413      	add	r3, r2
 80180ca:	00db      	lsls	r3, r3, #3
 80180cc:	440b      	add	r3, r1
 80180ce:	3314      	adds	r3, #20
 80180d0:	781b      	ldrb	r3, [r3, #0]
 80180d2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80180d4:	78fb      	ldrb	r3, [r7, #3]
 80180d6:	2b00      	cmp	r3, #0
 80180d8:	f000 8086 	beq.w	80181e8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80180dc:	4948      	ldr	r1, [pc, #288]	; (8018200 <etharp_tmr+0x14c>)
 80180de:	687a      	ldr	r2, [r7, #4]
 80180e0:	4613      	mov	r3, r2
 80180e2:	005b      	lsls	r3, r3, #1
 80180e4:	4413      	add	r3, r2
 80180e6:	00db      	lsls	r3, r3, #3
 80180e8:	440b      	add	r3, r1
 80180ea:	3312      	adds	r3, #18
 80180ec:	881b      	ldrh	r3, [r3, #0]
 80180ee:	3301      	adds	r3, #1
 80180f0:	b298      	uxth	r0, r3
 80180f2:	4943      	ldr	r1, [pc, #268]	; (8018200 <etharp_tmr+0x14c>)
 80180f4:	687a      	ldr	r2, [r7, #4]
 80180f6:	4613      	mov	r3, r2
 80180f8:	005b      	lsls	r3, r3, #1
 80180fa:	4413      	add	r3, r2
 80180fc:	00db      	lsls	r3, r3, #3
 80180fe:	440b      	add	r3, r1
 8018100:	3312      	adds	r3, #18
 8018102:	4602      	mov	r2, r0
 8018104:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018106:	493e      	ldr	r1, [pc, #248]	; (8018200 <etharp_tmr+0x14c>)
 8018108:	687a      	ldr	r2, [r7, #4]
 801810a:	4613      	mov	r3, r2
 801810c:	005b      	lsls	r3, r3, #1
 801810e:	4413      	add	r3, r2
 8018110:	00db      	lsls	r3, r3, #3
 8018112:	440b      	add	r3, r1
 8018114:	3312      	adds	r3, #18
 8018116:	881b      	ldrh	r3, [r3, #0]
 8018118:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801811c:	d215      	bcs.n	801814a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801811e:	4938      	ldr	r1, [pc, #224]	; (8018200 <etharp_tmr+0x14c>)
 8018120:	687a      	ldr	r2, [r7, #4]
 8018122:	4613      	mov	r3, r2
 8018124:	005b      	lsls	r3, r3, #1
 8018126:	4413      	add	r3, r2
 8018128:	00db      	lsls	r3, r3, #3
 801812a:	440b      	add	r3, r1
 801812c:	3314      	adds	r3, #20
 801812e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018130:	2b01      	cmp	r3, #1
 8018132:	d10e      	bne.n	8018152 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8018134:	4932      	ldr	r1, [pc, #200]	; (8018200 <etharp_tmr+0x14c>)
 8018136:	687a      	ldr	r2, [r7, #4]
 8018138:	4613      	mov	r3, r2
 801813a:	005b      	lsls	r3, r3, #1
 801813c:	4413      	add	r3, r2
 801813e:	00db      	lsls	r3, r3, #3
 8018140:	440b      	add	r3, r1
 8018142:	3312      	adds	r3, #18
 8018144:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018146:	2b04      	cmp	r3, #4
 8018148:	d903      	bls.n	8018152 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801814a:	6878      	ldr	r0, [r7, #4]
 801814c:	f7ff ff80 	bl	8018050 <etharp_free_entry>
 8018150:	e04a      	b.n	80181e8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8018152:	492b      	ldr	r1, [pc, #172]	; (8018200 <etharp_tmr+0x14c>)
 8018154:	687a      	ldr	r2, [r7, #4]
 8018156:	4613      	mov	r3, r2
 8018158:	005b      	lsls	r3, r3, #1
 801815a:	4413      	add	r3, r2
 801815c:	00db      	lsls	r3, r3, #3
 801815e:	440b      	add	r3, r1
 8018160:	3314      	adds	r3, #20
 8018162:	781b      	ldrb	r3, [r3, #0]
 8018164:	2b03      	cmp	r3, #3
 8018166:	d10a      	bne.n	801817e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8018168:	4925      	ldr	r1, [pc, #148]	; (8018200 <etharp_tmr+0x14c>)
 801816a:	687a      	ldr	r2, [r7, #4]
 801816c:	4613      	mov	r3, r2
 801816e:	005b      	lsls	r3, r3, #1
 8018170:	4413      	add	r3, r2
 8018172:	00db      	lsls	r3, r3, #3
 8018174:	440b      	add	r3, r1
 8018176:	3314      	adds	r3, #20
 8018178:	2204      	movs	r2, #4
 801817a:	701a      	strb	r2, [r3, #0]
 801817c:	e034      	b.n	80181e8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801817e:	4920      	ldr	r1, [pc, #128]	; (8018200 <etharp_tmr+0x14c>)
 8018180:	687a      	ldr	r2, [r7, #4]
 8018182:	4613      	mov	r3, r2
 8018184:	005b      	lsls	r3, r3, #1
 8018186:	4413      	add	r3, r2
 8018188:	00db      	lsls	r3, r3, #3
 801818a:	440b      	add	r3, r1
 801818c:	3314      	adds	r3, #20
 801818e:	781b      	ldrb	r3, [r3, #0]
 8018190:	2b04      	cmp	r3, #4
 8018192:	d10a      	bne.n	80181aa <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8018194:	491a      	ldr	r1, [pc, #104]	; (8018200 <etharp_tmr+0x14c>)
 8018196:	687a      	ldr	r2, [r7, #4]
 8018198:	4613      	mov	r3, r2
 801819a:	005b      	lsls	r3, r3, #1
 801819c:	4413      	add	r3, r2
 801819e:	00db      	lsls	r3, r3, #3
 80181a0:	440b      	add	r3, r1
 80181a2:	3314      	adds	r3, #20
 80181a4:	2202      	movs	r2, #2
 80181a6:	701a      	strb	r2, [r3, #0]
 80181a8:	e01e      	b.n	80181e8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80181aa:	4915      	ldr	r1, [pc, #84]	; (8018200 <etharp_tmr+0x14c>)
 80181ac:	687a      	ldr	r2, [r7, #4]
 80181ae:	4613      	mov	r3, r2
 80181b0:	005b      	lsls	r3, r3, #1
 80181b2:	4413      	add	r3, r2
 80181b4:	00db      	lsls	r3, r3, #3
 80181b6:	440b      	add	r3, r1
 80181b8:	3314      	adds	r3, #20
 80181ba:	781b      	ldrb	r3, [r3, #0]
 80181bc:	2b01      	cmp	r3, #1
 80181be:	d113      	bne.n	80181e8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80181c0:	490f      	ldr	r1, [pc, #60]	; (8018200 <etharp_tmr+0x14c>)
 80181c2:	687a      	ldr	r2, [r7, #4]
 80181c4:	4613      	mov	r3, r2
 80181c6:	005b      	lsls	r3, r3, #1
 80181c8:	4413      	add	r3, r2
 80181ca:	00db      	lsls	r3, r3, #3
 80181cc:	440b      	add	r3, r1
 80181ce:	3308      	adds	r3, #8
 80181d0:	6818      	ldr	r0, [r3, #0]
 80181d2:	687a      	ldr	r2, [r7, #4]
 80181d4:	4613      	mov	r3, r2
 80181d6:	005b      	lsls	r3, r3, #1
 80181d8:	4413      	add	r3, r2
 80181da:	00db      	lsls	r3, r3, #3
 80181dc:	4a08      	ldr	r2, [pc, #32]	; (8018200 <etharp_tmr+0x14c>)
 80181de:	4413      	add	r3, r2
 80181e0:	3304      	adds	r3, #4
 80181e2:	4619      	mov	r1, r3
 80181e4:	f000 fe6e 	bl	8018ec4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	3301      	adds	r3, #1
 80181ec:	607b      	str	r3, [r7, #4]
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	2b09      	cmp	r3, #9
 80181f2:	f77f af65 	ble.w	80180c0 <etharp_tmr+0xc>
      }
    }
  }
}
 80181f6:	bf00      	nop
 80181f8:	bf00      	nop
 80181fa:	3708      	adds	r7, #8
 80181fc:	46bd      	mov	sp, r7
 80181fe:	bd80      	pop	{r7, pc}
 8018200:	2000fc9c 	.word	0x2000fc9c

08018204 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8018204:	b580      	push	{r7, lr}
 8018206:	b08a      	sub	sp, #40	; 0x28
 8018208:	af00      	add	r7, sp, #0
 801820a:	60f8      	str	r0, [r7, #12]
 801820c:	460b      	mov	r3, r1
 801820e:	607a      	str	r2, [r7, #4]
 8018210:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8018212:	230a      	movs	r3, #10
 8018214:	84fb      	strh	r3, [r7, #38]	; 0x26
 8018216:	230a      	movs	r3, #10
 8018218:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801821a:	230a      	movs	r3, #10
 801821c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801821e:	2300      	movs	r3, #0
 8018220:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8018222:	230a      	movs	r3, #10
 8018224:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8018226:	2300      	movs	r3, #0
 8018228:	83bb      	strh	r3, [r7, #28]
 801822a:	2300      	movs	r3, #0
 801822c:	837b      	strh	r3, [r7, #26]
 801822e:	2300      	movs	r3, #0
 8018230:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018232:	2300      	movs	r3, #0
 8018234:	843b      	strh	r3, [r7, #32]
 8018236:	e0ae      	b.n	8018396 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8018238:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801823c:	49a6      	ldr	r1, [pc, #664]	; (80184d8 <etharp_find_entry+0x2d4>)
 801823e:	4613      	mov	r3, r2
 8018240:	005b      	lsls	r3, r3, #1
 8018242:	4413      	add	r3, r2
 8018244:	00db      	lsls	r3, r3, #3
 8018246:	440b      	add	r3, r1
 8018248:	3314      	adds	r3, #20
 801824a:	781b      	ldrb	r3, [r3, #0]
 801824c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801824e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018252:	2b0a      	cmp	r3, #10
 8018254:	d105      	bne.n	8018262 <etharp_find_entry+0x5e>
 8018256:	7dfb      	ldrb	r3, [r7, #23]
 8018258:	2b00      	cmp	r3, #0
 801825a:	d102      	bne.n	8018262 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801825c:	8c3b      	ldrh	r3, [r7, #32]
 801825e:	847b      	strh	r3, [r7, #34]	; 0x22
 8018260:	e095      	b.n	801838e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8018262:	7dfb      	ldrb	r3, [r7, #23]
 8018264:	2b00      	cmp	r3, #0
 8018266:	f000 8092 	beq.w	801838e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801826a:	7dfb      	ldrb	r3, [r7, #23]
 801826c:	2b01      	cmp	r3, #1
 801826e:	d009      	beq.n	8018284 <etharp_find_entry+0x80>
 8018270:	7dfb      	ldrb	r3, [r7, #23]
 8018272:	2b01      	cmp	r3, #1
 8018274:	d806      	bhi.n	8018284 <etharp_find_entry+0x80>
 8018276:	4b99      	ldr	r3, [pc, #612]	; (80184dc <etharp_find_entry+0x2d8>)
 8018278:	f240 1223 	movw	r2, #291	; 0x123
 801827c:	4998      	ldr	r1, [pc, #608]	; (80184e0 <etharp_find_entry+0x2dc>)
 801827e:	4899      	ldr	r0, [pc, #612]	; (80184e4 <etharp_find_entry+0x2e0>)
 8018280:	f00b fcae 	bl	8023be0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8018284:	68fb      	ldr	r3, [r7, #12]
 8018286:	2b00      	cmp	r3, #0
 8018288:	d020      	beq.n	80182cc <etharp_find_entry+0xc8>
 801828a:	68fb      	ldr	r3, [r7, #12]
 801828c:	6819      	ldr	r1, [r3, #0]
 801828e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018292:	4891      	ldr	r0, [pc, #580]	; (80184d8 <etharp_find_entry+0x2d4>)
 8018294:	4613      	mov	r3, r2
 8018296:	005b      	lsls	r3, r3, #1
 8018298:	4413      	add	r3, r2
 801829a:	00db      	lsls	r3, r3, #3
 801829c:	4403      	add	r3, r0
 801829e:	3304      	adds	r3, #4
 80182a0:	681b      	ldr	r3, [r3, #0]
 80182a2:	4299      	cmp	r1, r3
 80182a4:	d112      	bne.n	80182cc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80182a6:	687b      	ldr	r3, [r7, #4]
 80182a8:	2b00      	cmp	r3, #0
 80182aa:	d00c      	beq.n	80182c6 <etharp_find_entry+0xc2>
 80182ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80182b0:	4989      	ldr	r1, [pc, #548]	; (80184d8 <etharp_find_entry+0x2d4>)
 80182b2:	4613      	mov	r3, r2
 80182b4:	005b      	lsls	r3, r3, #1
 80182b6:	4413      	add	r3, r2
 80182b8:	00db      	lsls	r3, r3, #3
 80182ba:	440b      	add	r3, r1
 80182bc:	3308      	adds	r3, #8
 80182be:	681b      	ldr	r3, [r3, #0]
 80182c0:	687a      	ldr	r2, [r7, #4]
 80182c2:	429a      	cmp	r2, r3
 80182c4:	d102      	bne.n	80182cc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80182c6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80182ca:	e100      	b.n	80184ce <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80182cc:	7dfb      	ldrb	r3, [r7, #23]
 80182ce:	2b01      	cmp	r3, #1
 80182d0:	d140      	bne.n	8018354 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80182d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80182d6:	4980      	ldr	r1, [pc, #512]	; (80184d8 <etharp_find_entry+0x2d4>)
 80182d8:	4613      	mov	r3, r2
 80182da:	005b      	lsls	r3, r3, #1
 80182dc:	4413      	add	r3, r2
 80182de:	00db      	lsls	r3, r3, #3
 80182e0:	440b      	add	r3, r1
 80182e2:	681b      	ldr	r3, [r3, #0]
 80182e4:	2b00      	cmp	r3, #0
 80182e6:	d01a      	beq.n	801831e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80182e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80182ec:	497a      	ldr	r1, [pc, #488]	; (80184d8 <etharp_find_entry+0x2d4>)
 80182ee:	4613      	mov	r3, r2
 80182f0:	005b      	lsls	r3, r3, #1
 80182f2:	4413      	add	r3, r2
 80182f4:	00db      	lsls	r3, r3, #3
 80182f6:	440b      	add	r3, r1
 80182f8:	3312      	adds	r3, #18
 80182fa:	881b      	ldrh	r3, [r3, #0]
 80182fc:	8bba      	ldrh	r2, [r7, #28]
 80182fe:	429a      	cmp	r2, r3
 8018300:	d845      	bhi.n	801838e <etharp_find_entry+0x18a>
            old_queue = i;
 8018302:	8c3b      	ldrh	r3, [r7, #32]
 8018304:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8018306:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801830a:	4973      	ldr	r1, [pc, #460]	; (80184d8 <etharp_find_entry+0x2d4>)
 801830c:	4613      	mov	r3, r2
 801830e:	005b      	lsls	r3, r3, #1
 8018310:	4413      	add	r3, r2
 8018312:	00db      	lsls	r3, r3, #3
 8018314:	440b      	add	r3, r1
 8018316:	3312      	adds	r3, #18
 8018318:	881b      	ldrh	r3, [r3, #0]
 801831a:	83bb      	strh	r3, [r7, #28]
 801831c:	e037      	b.n	801838e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801831e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018322:	496d      	ldr	r1, [pc, #436]	; (80184d8 <etharp_find_entry+0x2d4>)
 8018324:	4613      	mov	r3, r2
 8018326:	005b      	lsls	r3, r3, #1
 8018328:	4413      	add	r3, r2
 801832a:	00db      	lsls	r3, r3, #3
 801832c:	440b      	add	r3, r1
 801832e:	3312      	adds	r3, #18
 8018330:	881b      	ldrh	r3, [r3, #0]
 8018332:	8b7a      	ldrh	r2, [r7, #26]
 8018334:	429a      	cmp	r2, r3
 8018336:	d82a      	bhi.n	801838e <etharp_find_entry+0x18a>
            old_pending = i;
 8018338:	8c3b      	ldrh	r3, [r7, #32]
 801833a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801833c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018340:	4965      	ldr	r1, [pc, #404]	; (80184d8 <etharp_find_entry+0x2d4>)
 8018342:	4613      	mov	r3, r2
 8018344:	005b      	lsls	r3, r3, #1
 8018346:	4413      	add	r3, r2
 8018348:	00db      	lsls	r3, r3, #3
 801834a:	440b      	add	r3, r1
 801834c:	3312      	adds	r3, #18
 801834e:	881b      	ldrh	r3, [r3, #0]
 8018350:	837b      	strh	r3, [r7, #26]
 8018352:	e01c      	b.n	801838e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8018354:	7dfb      	ldrb	r3, [r7, #23]
 8018356:	2b01      	cmp	r3, #1
 8018358:	d919      	bls.n	801838e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801835a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801835e:	495e      	ldr	r1, [pc, #376]	; (80184d8 <etharp_find_entry+0x2d4>)
 8018360:	4613      	mov	r3, r2
 8018362:	005b      	lsls	r3, r3, #1
 8018364:	4413      	add	r3, r2
 8018366:	00db      	lsls	r3, r3, #3
 8018368:	440b      	add	r3, r1
 801836a:	3312      	adds	r3, #18
 801836c:	881b      	ldrh	r3, [r3, #0]
 801836e:	8b3a      	ldrh	r2, [r7, #24]
 8018370:	429a      	cmp	r2, r3
 8018372:	d80c      	bhi.n	801838e <etharp_find_entry+0x18a>
            old_stable = i;
 8018374:	8c3b      	ldrh	r3, [r7, #32]
 8018376:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8018378:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801837c:	4956      	ldr	r1, [pc, #344]	; (80184d8 <etharp_find_entry+0x2d4>)
 801837e:	4613      	mov	r3, r2
 8018380:	005b      	lsls	r3, r3, #1
 8018382:	4413      	add	r3, r2
 8018384:	00db      	lsls	r3, r3, #3
 8018386:	440b      	add	r3, r1
 8018388:	3312      	adds	r3, #18
 801838a:	881b      	ldrh	r3, [r3, #0]
 801838c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801838e:	8c3b      	ldrh	r3, [r7, #32]
 8018390:	3301      	adds	r3, #1
 8018392:	b29b      	uxth	r3, r3
 8018394:	843b      	strh	r3, [r7, #32]
 8018396:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801839a:	2b09      	cmp	r3, #9
 801839c:	f77f af4c 	ble.w	8018238 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80183a0:	7afb      	ldrb	r3, [r7, #11]
 80183a2:	f003 0302 	and.w	r3, r3, #2
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d108      	bne.n	80183bc <etharp_find_entry+0x1b8>
 80183aa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80183ae:	2b0a      	cmp	r3, #10
 80183b0:	d107      	bne.n	80183c2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80183b2:	7afb      	ldrb	r3, [r7, #11]
 80183b4:	f003 0301 	and.w	r3, r3, #1
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	d102      	bne.n	80183c2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80183bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80183c0:	e085      	b.n	80184ce <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80183c2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80183c6:	2b09      	cmp	r3, #9
 80183c8:	dc02      	bgt.n	80183d0 <etharp_find_entry+0x1cc>
    i = empty;
 80183ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80183cc:	843b      	strh	r3, [r7, #32]
 80183ce:	e039      	b.n	8018444 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80183d0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80183d4:	2b09      	cmp	r3, #9
 80183d6:	dc14      	bgt.n	8018402 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80183d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80183da:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80183dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80183e0:	493d      	ldr	r1, [pc, #244]	; (80184d8 <etharp_find_entry+0x2d4>)
 80183e2:	4613      	mov	r3, r2
 80183e4:	005b      	lsls	r3, r3, #1
 80183e6:	4413      	add	r3, r2
 80183e8:	00db      	lsls	r3, r3, #3
 80183ea:	440b      	add	r3, r1
 80183ec:	681b      	ldr	r3, [r3, #0]
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	d018      	beq.n	8018424 <etharp_find_entry+0x220>
 80183f2:	4b3a      	ldr	r3, [pc, #232]	; (80184dc <etharp_find_entry+0x2d8>)
 80183f4:	f240 126d 	movw	r2, #365	; 0x16d
 80183f8:	493b      	ldr	r1, [pc, #236]	; (80184e8 <etharp_find_entry+0x2e4>)
 80183fa:	483a      	ldr	r0, [pc, #232]	; (80184e4 <etharp_find_entry+0x2e0>)
 80183fc:	f00b fbf0 	bl	8023be0 <iprintf>
 8018400:	e010      	b.n	8018424 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8018402:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8018406:	2b09      	cmp	r3, #9
 8018408:	dc02      	bgt.n	8018410 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801840a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801840c:	843b      	strh	r3, [r7, #32]
 801840e:	e009      	b.n	8018424 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8018410:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8018414:	2b09      	cmp	r3, #9
 8018416:	dc02      	bgt.n	801841e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8018418:	8bfb      	ldrh	r3, [r7, #30]
 801841a:	843b      	strh	r3, [r7, #32]
 801841c:	e002      	b.n	8018424 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801841e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018422:	e054      	b.n	80184ce <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018424:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018428:	2b09      	cmp	r3, #9
 801842a:	dd06      	ble.n	801843a <etharp_find_entry+0x236>
 801842c:	4b2b      	ldr	r3, [pc, #172]	; (80184dc <etharp_find_entry+0x2d8>)
 801842e:	f240 127f 	movw	r2, #383	; 0x17f
 8018432:	492e      	ldr	r1, [pc, #184]	; (80184ec <etharp_find_entry+0x2e8>)
 8018434:	482b      	ldr	r0, [pc, #172]	; (80184e4 <etharp_find_entry+0x2e0>)
 8018436:	f00b fbd3 	bl	8023be0 <iprintf>
    etharp_free_entry(i);
 801843a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801843e:	4618      	mov	r0, r3
 8018440:	f7ff fe06 	bl	8018050 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018444:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018448:	2b09      	cmp	r3, #9
 801844a:	dd06      	ble.n	801845a <etharp_find_entry+0x256>
 801844c:	4b23      	ldr	r3, [pc, #140]	; (80184dc <etharp_find_entry+0x2d8>)
 801844e:	f240 1283 	movw	r2, #387	; 0x183
 8018452:	4926      	ldr	r1, [pc, #152]	; (80184ec <etharp_find_entry+0x2e8>)
 8018454:	4823      	ldr	r0, [pc, #140]	; (80184e4 <etharp_find_entry+0x2e0>)
 8018456:	f00b fbc3 	bl	8023be0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801845a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801845e:	491e      	ldr	r1, [pc, #120]	; (80184d8 <etharp_find_entry+0x2d4>)
 8018460:	4613      	mov	r3, r2
 8018462:	005b      	lsls	r3, r3, #1
 8018464:	4413      	add	r3, r2
 8018466:	00db      	lsls	r3, r3, #3
 8018468:	440b      	add	r3, r1
 801846a:	3314      	adds	r3, #20
 801846c:	781b      	ldrb	r3, [r3, #0]
 801846e:	2b00      	cmp	r3, #0
 8018470:	d006      	beq.n	8018480 <etharp_find_entry+0x27c>
 8018472:	4b1a      	ldr	r3, [pc, #104]	; (80184dc <etharp_find_entry+0x2d8>)
 8018474:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8018478:	491d      	ldr	r1, [pc, #116]	; (80184f0 <etharp_find_entry+0x2ec>)
 801847a:	481a      	ldr	r0, [pc, #104]	; (80184e4 <etharp_find_entry+0x2e0>)
 801847c:	f00b fbb0 	bl	8023be0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8018480:	68fb      	ldr	r3, [r7, #12]
 8018482:	2b00      	cmp	r3, #0
 8018484:	d00b      	beq.n	801849e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8018486:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801848a:	68fb      	ldr	r3, [r7, #12]
 801848c:	6819      	ldr	r1, [r3, #0]
 801848e:	4812      	ldr	r0, [pc, #72]	; (80184d8 <etharp_find_entry+0x2d4>)
 8018490:	4613      	mov	r3, r2
 8018492:	005b      	lsls	r3, r3, #1
 8018494:	4413      	add	r3, r2
 8018496:	00db      	lsls	r3, r3, #3
 8018498:	4403      	add	r3, r0
 801849a:	3304      	adds	r3, #4
 801849c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801849e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80184a2:	490d      	ldr	r1, [pc, #52]	; (80184d8 <etharp_find_entry+0x2d4>)
 80184a4:	4613      	mov	r3, r2
 80184a6:	005b      	lsls	r3, r3, #1
 80184a8:	4413      	add	r3, r2
 80184aa:	00db      	lsls	r3, r3, #3
 80184ac:	440b      	add	r3, r1
 80184ae:	3312      	adds	r3, #18
 80184b0:	2200      	movs	r2, #0
 80184b2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80184b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80184b8:	4907      	ldr	r1, [pc, #28]	; (80184d8 <etharp_find_entry+0x2d4>)
 80184ba:	4613      	mov	r3, r2
 80184bc:	005b      	lsls	r3, r3, #1
 80184be:	4413      	add	r3, r2
 80184c0:	00db      	lsls	r3, r3, #3
 80184c2:	440b      	add	r3, r1
 80184c4:	3308      	adds	r3, #8
 80184c6:	687a      	ldr	r2, [r7, #4]
 80184c8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80184ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80184ce:	4618      	mov	r0, r3
 80184d0:	3728      	adds	r7, #40	; 0x28
 80184d2:	46bd      	mov	sp, r7
 80184d4:	bd80      	pop	{r7, pc}
 80184d6:	bf00      	nop
 80184d8:	2000fc9c 	.word	0x2000fc9c
 80184dc:	080286e8 	.word	0x080286e8
 80184e0:	08028720 	.word	0x08028720
 80184e4:	08028760 	.word	0x08028760
 80184e8:	08028788 	.word	0x08028788
 80184ec:	080287a0 	.word	0x080287a0
 80184f0:	080287b4 	.word	0x080287b4

080184f4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80184f4:	b580      	push	{r7, lr}
 80184f6:	b088      	sub	sp, #32
 80184f8:	af02      	add	r7, sp, #8
 80184fa:	60f8      	str	r0, [r7, #12]
 80184fc:	60b9      	str	r1, [r7, #8]
 80184fe:	607a      	str	r2, [r7, #4]
 8018500:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8018502:	68fb      	ldr	r3, [r7, #12]
 8018504:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018508:	2b06      	cmp	r3, #6
 801850a:	d006      	beq.n	801851a <etharp_update_arp_entry+0x26>
 801850c:	4b48      	ldr	r3, [pc, #288]	; (8018630 <etharp_update_arp_entry+0x13c>)
 801850e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8018512:	4948      	ldr	r1, [pc, #288]	; (8018634 <etharp_update_arp_entry+0x140>)
 8018514:	4848      	ldr	r0, [pc, #288]	; (8018638 <etharp_update_arp_entry+0x144>)
 8018516:	f00b fb63 	bl	8023be0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801851a:	68bb      	ldr	r3, [r7, #8]
 801851c:	2b00      	cmp	r3, #0
 801851e:	d012      	beq.n	8018546 <etharp_update_arp_entry+0x52>
 8018520:	68bb      	ldr	r3, [r7, #8]
 8018522:	681b      	ldr	r3, [r3, #0]
 8018524:	2b00      	cmp	r3, #0
 8018526:	d00e      	beq.n	8018546 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018528:	68bb      	ldr	r3, [r7, #8]
 801852a:	681b      	ldr	r3, [r3, #0]
 801852c:	68f9      	ldr	r1, [r7, #12]
 801852e:	4618      	mov	r0, r3
 8018530:	f001 fe48 	bl	801a1c4 <ip4_addr_isbroadcast_u32>
 8018534:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8018536:	2b00      	cmp	r3, #0
 8018538:	d105      	bne.n	8018546 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801853a:	68bb      	ldr	r3, [r7, #8]
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018542:	2be0      	cmp	r3, #224	; 0xe0
 8018544:	d102      	bne.n	801854c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018546:	f06f 030f 	mvn.w	r3, #15
 801854a:	e06c      	b.n	8018626 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801854c:	78fb      	ldrb	r3, [r7, #3]
 801854e:	68fa      	ldr	r2, [r7, #12]
 8018550:	4619      	mov	r1, r3
 8018552:	68b8      	ldr	r0, [r7, #8]
 8018554:	f7ff fe56 	bl	8018204 <etharp_find_entry>
 8018558:	4603      	mov	r3, r0
 801855a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801855c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018560:	2b00      	cmp	r3, #0
 8018562:	da02      	bge.n	801856a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8018564:	8afb      	ldrh	r3, [r7, #22]
 8018566:	b25b      	sxtb	r3, r3
 8018568:	e05d      	b.n	8018626 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801856a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801856e:	4933      	ldr	r1, [pc, #204]	; (801863c <etharp_update_arp_entry+0x148>)
 8018570:	4613      	mov	r3, r2
 8018572:	005b      	lsls	r3, r3, #1
 8018574:	4413      	add	r3, r2
 8018576:	00db      	lsls	r3, r3, #3
 8018578:	440b      	add	r3, r1
 801857a:	3314      	adds	r3, #20
 801857c:	2202      	movs	r2, #2
 801857e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8018580:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018584:	492d      	ldr	r1, [pc, #180]	; (801863c <etharp_update_arp_entry+0x148>)
 8018586:	4613      	mov	r3, r2
 8018588:	005b      	lsls	r3, r3, #1
 801858a:	4413      	add	r3, r2
 801858c:	00db      	lsls	r3, r3, #3
 801858e:	440b      	add	r3, r1
 8018590:	3308      	adds	r3, #8
 8018592:	68fa      	ldr	r2, [r7, #12]
 8018594:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8018596:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801859a:	4613      	mov	r3, r2
 801859c:	005b      	lsls	r3, r3, #1
 801859e:	4413      	add	r3, r2
 80185a0:	00db      	lsls	r3, r3, #3
 80185a2:	3308      	adds	r3, #8
 80185a4:	4a25      	ldr	r2, [pc, #148]	; (801863c <etharp_update_arp_entry+0x148>)
 80185a6:	4413      	add	r3, r2
 80185a8:	3304      	adds	r3, #4
 80185aa:	2206      	movs	r2, #6
 80185ac:	6879      	ldr	r1, [r7, #4]
 80185ae:	4618      	mov	r0, r3
 80185b0:	f00b f9f0 	bl	8023994 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80185b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80185b8:	4920      	ldr	r1, [pc, #128]	; (801863c <etharp_update_arp_entry+0x148>)
 80185ba:	4613      	mov	r3, r2
 80185bc:	005b      	lsls	r3, r3, #1
 80185be:	4413      	add	r3, r2
 80185c0:	00db      	lsls	r3, r3, #3
 80185c2:	440b      	add	r3, r1
 80185c4:	3312      	adds	r3, #18
 80185c6:	2200      	movs	r2, #0
 80185c8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80185ca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80185ce:	491b      	ldr	r1, [pc, #108]	; (801863c <etharp_update_arp_entry+0x148>)
 80185d0:	4613      	mov	r3, r2
 80185d2:	005b      	lsls	r3, r3, #1
 80185d4:	4413      	add	r3, r2
 80185d6:	00db      	lsls	r3, r3, #3
 80185d8:	440b      	add	r3, r1
 80185da:	681b      	ldr	r3, [r3, #0]
 80185dc:	2b00      	cmp	r3, #0
 80185de:	d021      	beq.n	8018624 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80185e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80185e4:	4915      	ldr	r1, [pc, #84]	; (801863c <etharp_update_arp_entry+0x148>)
 80185e6:	4613      	mov	r3, r2
 80185e8:	005b      	lsls	r3, r3, #1
 80185ea:	4413      	add	r3, r2
 80185ec:	00db      	lsls	r3, r3, #3
 80185ee:	440b      	add	r3, r1
 80185f0:	681b      	ldr	r3, [r3, #0]
 80185f2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80185f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80185f8:	4910      	ldr	r1, [pc, #64]	; (801863c <etharp_update_arp_entry+0x148>)
 80185fa:	4613      	mov	r3, r2
 80185fc:	005b      	lsls	r3, r3, #1
 80185fe:	4413      	add	r3, r2
 8018600:	00db      	lsls	r3, r3, #3
 8018602:	440b      	add	r3, r1
 8018604:	2200      	movs	r2, #0
 8018606:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8018608:	68fb      	ldr	r3, [r7, #12]
 801860a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801860e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018612:	9300      	str	r3, [sp, #0]
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	6939      	ldr	r1, [r7, #16]
 8018618:	68f8      	ldr	r0, [r7, #12]
 801861a:	f002 fe9b 	bl	801b354 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801861e:	6938      	ldr	r0, [r7, #16]
 8018620:	f7f8 f93e 	bl	80108a0 <pbuf_free>
  }
  return ERR_OK;
 8018624:	2300      	movs	r3, #0
}
 8018626:	4618      	mov	r0, r3
 8018628:	3718      	adds	r7, #24
 801862a:	46bd      	mov	sp, r7
 801862c:	bd80      	pop	{r7, pc}
 801862e:	bf00      	nop
 8018630:	080286e8 	.word	0x080286e8
 8018634:	080287e0 	.word	0x080287e0
 8018638:	08028760 	.word	0x08028760
 801863c:	2000fc9c 	.word	0x2000fc9c

08018640 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8018640:	b580      	push	{r7, lr}
 8018642:	b084      	sub	sp, #16
 8018644:	af00      	add	r7, sp, #0
 8018646:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018648:	2300      	movs	r3, #0
 801864a:	60fb      	str	r3, [r7, #12]
 801864c:	e01e      	b.n	801868c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801864e:	4913      	ldr	r1, [pc, #76]	; (801869c <etharp_cleanup_netif+0x5c>)
 8018650:	68fa      	ldr	r2, [r7, #12]
 8018652:	4613      	mov	r3, r2
 8018654:	005b      	lsls	r3, r3, #1
 8018656:	4413      	add	r3, r2
 8018658:	00db      	lsls	r3, r3, #3
 801865a:	440b      	add	r3, r1
 801865c:	3314      	adds	r3, #20
 801865e:	781b      	ldrb	r3, [r3, #0]
 8018660:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8018662:	7afb      	ldrb	r3, [r7, #11]
 8018664:	2b00      	cmp	r3, #0
 8018666:	d00e      	beq.n	8018686 <etharp_cleanup_netif+0x46>
 8018668:	490c      	ldr	r1, [pc, #48]	; (801869c <etharp_cleanup_netif+0x5c>)
 801866a:	68fa      	ldr	r2, [r7, #12]
 801866c:	4613      	mov	r3, r2
 801866e:	005b      	lsls	r3, r3, #1
 8018670:	4413      	add	r3, r2
 8018672:	00db      	lsls	r3, r3, #3
 8018674:	440b      	add	r3, r1
 8018676:	3308      	adds	r3, #8
 8018678:	681b      	ldr	r3, [r3, #0]
 801867a:	687a      	ldr	r2, [r7, #4]
 801867c:	429a      	cmp	r2, r3
 801867e:	d102      	bne.n	8018686 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8018680:	68f8      	ldr	r0, [r7, #12]
 8018682:	f7ff fce5 	bl	8018050 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018686:	68fb      	ldr	r3, [r7, #12]
 8018688:	3301      	adds	r3, #1
 801868a:	60fb      	str	r3, [r7, #12]
 801868c:	68fb      	ldr	r3, [r7, #12]
 801868e:	2b09      	cmp	r3, #9
 8018690:	dddd      	ble.n	801864e <etharp_cleanup_netif+0xe>
    }
  }
}
 8018692:	bf00      	nop
 8018694:	bf00      	nop
 8018696:	3710      	adds	r7, #16
 8018698:	46bd      	mov	sp, r7
 801869a:	bd80      	pop	{r7, pc}
 801869c:	2000fc9c 	.word	0x2000fc9c

080186a0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80186a0:	b5b0      	push	{r4, r5, r7, lr}
 80186a2:	b08a      	sub	sp, #40	; 0x28
 80186a4:	af04      	add	r7, sp, #16
 80186a6:	6078      	str	r0, [r7, #4]
 80186a8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80186aa:	683b      	ldr	r3, [r7, #0]
 80186ac:	2b00      	cmp	r3, #0
 80186ae:	d107      	bne.n	80186c0 <etharp_input+0x20>
 80186b0:	4b3d      	ldr	r3, [pc, #244]	; (80187a8 <etharp_input+0x108>)
 80186b2:	f240 228a 	movw	r2, #650	; 0x28a
 80186b6:	493d      	ldr	r1, [pc, #244]	; (80187ac <etharp_input+0x10c>)
 80186b8:	483d      	ldr	r0, [pc, #244]	; (80187b0 <etharp_input+0x110>)
 80186ba:	f00b fa91 	bl	8023be0 <iprintf>
 80186be:	e06f      	b.n	80187a0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80186c0:	687b      	ldr	r3, [r7, #4]
 80186c2:	685b      	ldr	r3, [r3, #4]
 80186c4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80186c6:	693b      	ldr	r3, [r7, #16]
 80186c8:	881b      	ldrh	r3, [r3, #0]
 80186ca:	b29b      	uxth	r3, r3
 80186cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80186d0:	d10c      	bne.n	80186ec <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80186d2:	693b      	ldr	r3, [r7, #16]
 80186d4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80186d6:	2b06      	cmp	r3, #6
 80186d8:	d108      	bne.n	80186ec <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80186da:	693b      	ldr	r3, [r7, #16]
 80186dc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80186de:	2b04      	cmp	r3, #4
 80186e0:	d104      	bne.n	80186ec <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80186e2:	693b      	ldr	r3, [r7, #16]
 80186e4:	885b      	ldrh	r3, [r3, #2]
 80186e6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80186e8:	2b08      	cmp	r3, #8
 80186ea:	d003      	beq.n	80186f4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80186ec:	6878      	ldr	r0, [r7, #4]
 80186ee:	f7f8 f8d7 	bl	80108a0 <pbuf_free>
    return;
 80186f2:	e055      	b.n	80187a0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80186f4:	693b      	ldr	r3, [r7, #16]
 80186f6:	330e      	adds	r3, #14
 80186f8:	681b      	ldr	r3, [r3, #0]
 80186fa:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80186fc:	693b      	ldr	r3, [r7, #16]
 80186fe:	3318      	adds	r3, #24
 8018700:	681b      	ldr	r3, [r3, #0]
 8018702:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018704:	683b      	ldr	r3, [r7, #0]
 8018706:	3304      	adds	r3, #4
 8018708:	681b      	ldr	r3, [r3, #0]
 801870a:	2b00      	cmp	r3, #0
 801870c:	d102      	bne.n	8018714 <etharp_input+0x74>
    for_us = 0;
 801870e:	2300      	movs	r3, #0
 8018710:	75fb      	strb	r3, [r7, #23]
 8018712:	e009      	b.n	8018728 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8018714:	68ba      	ldr	r2, [r7, #8]
 8018716:	683b      	ldr	r3, [r7, #0]
 8018718:	3304      	adds	r3, #4
 801871a:	681b      	ldr	r3, [r3, #0]
 801871c:	429a      	cmp	r2, r3
 801871e:	bf0c      	ite	eq
 8018720:	2301      	moveq	r3, #1
 8018722:	2300      	movne	r3, #0
 8018724:	b2db      	uxtb	r3, r3
 8018726:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8018728:	693b      	ldr	r3, [r7, #16]
 801872a:	f103 0208 	add.w	r2, r3, #8
 801872e:	7dfb      	ldrb	r3, [r7, #23]
 8018730:	2b00      	cmp	r3, #0
 8018732:	d001      	beq.n	8018738 <etharp_input+0x98>
 8018734:	2301      	movs	r3, #1
 8018736:	e000      	b.n	801873a <etharp_input+0x9a>
 8018738:	2302      	movs	r3, #2
 801873a:	f107 010c 	add.w	r1, r7, #12
 801873e:	6838      	ldr	r0, [r7, #0]
 8018740:	f7ff fed8 	bl	80184f4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8018744:	693b      	ldr	r3, [r7, #16]
 8018746:	88db      	ldrh	r3, [r3, #6]
 8018748:	b29b      	uxth	r3, r3
 801874a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801874e:	d003      	beq.n	8018758 <etharp_input+0xb8>
 8018750:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018754:	d01e      	beq.n	8018794 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8018756:	e020      	b.n	801879a <etharp_input+0xfa>
      if (for_us) {
 8018758:	7dfb      	ldrb	r3, [r7, #23]
 801875a:	2b00      	cmp	r3, #0
 801875c:	d01c      	beq.n	8018798 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801875e:	683b      	ldr	r3, [r7, #0]
 8018760:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8018764:	693b      	ldr	r3, [r7, #16]
 8018766:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801876a:	683b      	ldr	r3, [r7, #0]
 801876c:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8018770:	683b      	ldr	r3, [r7, #0]
 8018772:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8018774:	693a      	ldr	r2, [r7, #16]
 8018776:	3208      	adds	r2, #8
        etharp_raw(netif,
 8018778:	2102      	movs	r1, #2
 801877a:	9103      	str	r1, [sp, #12]
 801877c:	f107 010c 	add.w	r1, r7, #12
 8018780:	9102      	str	r1, [sp, #8]
 8018782:	9201      	str	r2, [sp, #4]
 8018784:	9300      	str	r3, [sp, #0]
 8018786:	462b      	mov	r3, r5
 8018788:	4622      	mov	r2, r4
 801878a:	4601      	mov	r1, r0
 801878c:	6838      	ldr	r0, [r7, #0]
 801878e:	f000 faeb 	bl	8018d68 <etharp_raw>
      break;
 8018792:	e001      	b.n	8018798 <etharp_input+0xf8>
      break;
 8018794:	bf00      	nop
 8018796:	e000      	b.n	801879a <etharp_input+0xfa>
      break;
 8018798:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801879a:	6878      	ldr	r0, [r7, #4]
 801879c:	f7f8 f880 	bl	80108a0 <pbuf_free>
}
 80187a0:	3718      	adds	r7, #24
 80187a2:	46bd      	mov	sp, r7
 80187a4:	bdb0      	pop	{r4, r5, r7, pc}
 80187a6:	bf00      	nop
 80187a8:	080286e8 	.word	0x080286e8
 80187ac:	08028838 	.word	0x08028838
 80187b0:	08028760 	.word	0x08028760

080187b4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80187b4:	b580      	push	{r7, lr}
 80187b6:	b086      	sub	sp, #24
 80187b8:	af02      	add	r7, sp, #8
 80187ba:	60f8      	str	r0, [r7, #12]
 80187bc:	60b9      	str	r1, [r7, #8]
 80187be:	4613      	mov	r3, r2
 80187c0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80187c2:	79fa      	ldrb	r2, [r7, #7]
 80187c4:	4944      	ldr	r1, [pc, #272]	; (80188d8 <etharp_output_to_arp_index+0x124>)
 80187c6:	4613      	mov	r3, r2
 80187c8:	005b      	lsls	r3, r3, #1
 80187ca:	4413      	add	r3, r2
 80187cc:	00db      	lsls	r3, r3, #3
 80187ce:	440b      	add	r3, r1
 80187d0:	3314      	adds	r3, #20
 80187d2:	781b      	ldrb	r3, [r3, #0]
 80187d4:	2b01      	cmp	r3, #1
 80187d6:	d806      	bhi.n	80187e6 <etharp_output_to_arp_index+0x32>
 80187d8:	4b40      	ldr	r3, [pc, #256]	; (80188dc <etharp_output_to_arp_index+0x128>)
 80187da:	f240 22ee 	movw	r2, #750	; 0x2ee
 80187de:	4940      	ldr	r1, [pc, #256]	; (80188e0 <etharp_output_to_arp_index+0x12c>)
 80187e0:	4840      	ldr	r0, [pc, #256]	; (80188e4 <etharp_output_to_arp_index+0x130>)
 80187e2:	f00b f9fd 	bl	8023be0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80187e6:	79fa      	ldrb	r2, [r7, #7]
 80187e8:	493b      	ldr	r1, [pc, #236]	; (80188d8 <etharp_output_to_arp_index+0x124>)
 80187ea:	4613      	mov	r3, r2
 80187ec:	005b      	lsls	r3, r3, #1
 80187ee:	4413      	add	r3, r2
 80187f0:	00db      	lsls	r3, r3, #3
 80187f2:	440b      	add	r3, r1
 80187f4:	3314      	adds	r3, #20
 80187f6:	781b      	ldrb	r3, [r3, #0]
 80187f8:	2b02      	cmp	r3, #2
 80187fa:	d153      	bne.n	80188a4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80187fc:	79fa      	ldrb	r2, [r7, #7]
 80187fe:	4936      	ldr	r1, [pc, #216]	; (80188d8 <etharp_output_to_arp_index+0x124>)
 8018800:	4613      	mov	r3, r2
 8018802:	005b      	lsls	r3, r3, #1
 8018804:	4413      	add	r3, r2
 8018806:	00db      	lsls	r3, r3, #3
 8018808:	440b      	add	r3, r1
 801880a:	3312      	adds	r3, #18
 801880c:	881b      	ldrh	r3, [r3, #0]
 801880e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8018812:	d919      	bls.n	8018848 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8018814:	79fa      	ldrb	r2, [r7, #7]
 8018816:	4613      	mov	r3, r2
 8018818:	005b      	lsls	r3, r3, #1
 801881a:	4413      	add	r3, r2
 801881c:	00db      	lsls	r3, r3, #3
 801881e:	4a2e      	ldr	r2, [pc, #184]	; (80188d8 <etharp_output_to_arp_index+0x124>)
 8018820:	4413      	add	r3, r2
 8018822:	3304      	adds	r3, #4
 8018824:	4619      	mov	r1, r3
 8018826:	68f8      	ldr	r0, [r7, #12]
 8018828:	f000 fb4c 	bl	8018ec4 <etharp_request>
 801882c:	4603      	mov	r3, r0
 801882e:	2b00      	cmp	r3, #0
 8018830:	d138      	bne.n	80188a4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018832:	79fa      	ldrb	r2, [r7, #7]
 8018834:	4928      	ldr	r1, [pc, #160]	; (80188d8 <etharp_output_to_arp_index+0x124>)
 8018836:	4613      	mov	r3, r2
 8018838:	005b      	lsls	r3, r3, #1
 801883a:	4413      	add	r3, r2
 801883c:	00db      	lsls	r3, r3, #3
 801883e:	440b      	add	r3, r1
 8018840:	3314      	adds	r3, #20
 8018842:	2203      	movs	r2, #3
 8018844:	701a      	strb	r2, [r3, #0]
 8018846:	e02d      	b.n	80188a4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8018848:	79fa      	ldrb	r2, [r7, #7]
 801884a:	4923      	ldr	r1, [pc, #140]	; (80188d8 <etharp_output_to_arp_index+0x124>)
 801884c:	4613      	mov	r3, r2
 801884e:	005b      	lsls	r3, r3, #1
 8018850:	4413      	add	r3, r2
 8018852:	00db      	lsls	r3, r3, #3
 8018854:	440b      	add	r3, r1
 8018856:	3312      	adds	r3, #18
 8018858:	881b      	ldrh	r3, [r3, #0]
 801885a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801885e:	d321      	bcc.n	80188a4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8018860:	79fa      	ldrb	r2, [r7, #7]
 8018862:	4613      	mov	r3, r2
 8018864:	005b      	lsls	r3, r3, #1
 8018866:	4413      	add	r3, r2
 8018868:	00db      	lsls	r3, r3, #3
 801886a:	4a1b      	ldr	r2, [pc, #108]	; (80188d8 <etharp_output_to_arp_index+0x124>)
 801886c:	4413      	add	r3, r2
 801886e:	1d19      	adds	r1, r3, #4
 8018870:	79fa      	ldrb	r2, [r7, #7]
 8018872:	4613      	mov	r3, r2
 8018874:	005b      	lsls	r3, r3, #1
 8018876:	4413      	add	r3, r2
 8018878:	00db      	lsls	r3, r3, #3
 801887a:	3308      	adds	r3, #8
 801887c:	4a16      	ldr	r2, [pc, #88]	; (80188d8 <etharp_output_to_arp_index+0x124>)
 801887e:	4413      	add	r3, r2
 8018880:	3304      	adds	r3, #4
 8018882:	461a      	mov	r2, r3
 8018884:	68f8      	ldr	r0, [r7, #12]
 8018886:	f000 fafb 	bl	8018e80 <etharp_request_dst>
 801888a:	4603      	mov	r3, r0
 801888c:	2b00      	cmp	r3, #0
 801888e:	d109      	bne.n	80188a4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018890:	79fa      	ldrb	r2, [r7, #7]
 8018892:	4911      	ldr	r1, [pc, #68]	; (80188d8 <etharp_output_to_arp_index+0x124>)
 8018894:	4613      	mov	r3, r2
 8018896:	005b      	lsls	r3, r3, #1
 8018898:	4413      	add	r3, r2
 801889a:	00db      	lsls	r3, r3, #3
 801889c:	440b      	add	r3, r1
 801889e:	3314      	adds	r3, #20
 80188a0:	2203      	movs	r2, #3
 80188a2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80188a4:	68fb      	ldr	r3, [r7, #12]
 80188a6:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 80188aa:	79fa      	ldrb	r2, [r7, #7]
 80188ac:	4613      	mov	r3, r2
 80188ae:	005b      	lsls	r3, r3, #1
 80188b0:	4413      	add	r3, r2
 80188b2:	00db      	lsls	r3, r3, #3
 80188b4:	3308      	adds	r3, #8
 80188b6:	4a08      	ldr	r2, [pc, #32]	; (80188d8 <etharp_output_to_arp_index+0x124>)
 80188b8:	4413      	add	r3, r2
 80188ba:	3304      	adds	r3, #4
 80188bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80188c0:	9200      	str	r2, [sp, #0]
 80188c2:	460a      	mov	r2, r1
 80188c4:	68b9      	ldr	r1, [r7, #8]
 80188c6:	68f8      	ldr	r0, [r7, #12]
 80188c8:	f002 fd44 	bl	801b354 <ethernet_output>
 80188cc:	4603      	mov	r3, r0
}
 80188ce:	4618      	mov	r0, r3
 80188d0:	3710      	adds	r7, #16
 80188d2:	46bd      	mov	sp, r7
 80188d4:	bd80      	pop	{r7, pc}
 80188d6:	bf00      	nop
 80188d8:	2000fc9c 	.word	0x2000fc9c
 80188dc:	080286e8 	.word	0x080286e8
 80188e0:	08028858 	.word	0x08028858
 80188e4:	08028760 	.word	0x08028760

080188e8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80188e8:	b580      	push	{r7, lr}
 80188ea:	b08a      	sub	sp, #40	; 0x28
 80188ec:	af02      	add	r7, sp, #8
 80188ee:	60f8      	str	r0, [r7, #12]
 80188f0:	60b9      	str	r1, [r7, #8]
 80188f2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80188f8:	68fb      	ldr	r3, [r7, #12]
 80188fa:	2b00      	cmp	r3, #0
 80188fc:	d106      	bne.n	801890c <etharp_output+0x24>
 80188fe:	4b73      	ldr	r3, [pc, #460]	; (8018acc <etharp_output+0x1e4>)
 8018900:	f240 321e 	movw	r2, #798	; 0x31e
 8018904:	4972      	ldr	r1, [pc, #456]	; (8018ad0 <etharp_output+0x1e8>)
 8018906:	4873      	ldr	r0, [pc, #460]	; (8018ad4 <etharp_output+0x1ec>)
 8018908:	f00b f96a 	bl	8023be0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801890c:	68bb      	ldr	r3, [r7, #8]
 801890e:	2b00      	cmp	r3, #0
 8018910:	d106      	bne.n	8018920 <etharp_output+0x38>
 8018912:	4b6e      	ldr	r3, [pc, #440]	; (8018acc <etharp_output+0x1e4>)
 8018914:	f240 321f 	movw	r2, #799	; 0x31f
 8018918:	496f      	ldr	r1, [pc, #444]	; (8018ad8 <etharp_output+0x1f0>)
 801891a:	486e      	ldr	r0, [pc, #440]	; (8018ad4 <etharp_output+0x1ec>)
 801891c:	f00b f960 	bl	8023be0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	2b00      	cmp	r3, #0
 8018924:	d106      	bne.n	8018934 <etharp_output+0x4c>
 8018926:	4b69      	ldr	r3, [pc, #420]	; (8018acc <etharp_output+0x1e4>)
 8018928:	f44f 7248 	mov.w	r2, #800	; 0x320
 801892c:	496b      	ldr	r1, [pc, #428]	; (8018adc <etharp_output+0x1f4>)
 801892e:	4869      	ldr	r0, [pc, #420]	; (8018ad4 <etharp_output+0x1ec>)
 8018930:	f00b f956 	bl	8023be0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	681b      	ldr	r3, [r3, #0]
 8018938:	68f9      	ldr	r1, [r7, #12]
 801893a:	4618      	mov	r0, r3
 801893c:	f001 fc42 	bl	801a1c4 <ip4_addr_isbroadcast_u32>
 8018940:	4603      	mov	r3, r0
 8018942:	2b00      	cmp	r3, #0
 8018944:	d002      	beq.n	801894c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8018946:	4b66      	ldr	r3, [pc, #408]	; (8018ae0 <etharp_output+0x1f8>)
 8018948:	61fb      	str	r3, [r7, #28]
 801894a:	e0af      	b.n	8018aac <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801894c:	687b      	ldr	r3, [r7, #4]
 801894e:	681b      	ldr	r3, [r3, #0]
 8018950:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018954:	2be0      	cmp	r3, #224	; 0xe0
 8018956:	d118      	bne.n	801898a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8018958:	2301      	movs	r3, #1
 801895a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801895c:	2300      	movs	r3, #0
 801895e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8018960:	235e      	movs	r3, #94	; 0x5e
 8018962:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	3301      	adds	r3, #1
 8018968:	781b      	ldrb	r3, [r3, #0]
 801896a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801896e:	b2db      	uxtb	r3, r3
 8018970:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8018972:	687b      	ldr	r3, [r7, #4]
 8018974:	3302      	adds	r3, #2
 8018976:	781b      	ldrb	r3, [r3, #0]
 8018978:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	3303      	adds	r3, #3
 801897e:	781b      	ldrb	r3, [r3, #0]
 8018980:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8018982:	f107 0310 	add.w	r3, r7, #16
 8018986:	61fb      	str	r3, [r7, #28]
 8018988:	e090      	b.n	8018aac <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801898a:	687b      	ldr	r3, [r7, #4]
 801898c:	681a      	ldr	r2, [r3, #0]
 801898e:	68fb      	ldr	r3, [r7, #12]
 8018990:	3304      	adds	r3, #4
 8018992:	681b      	ldr	r3, [r3, #0]
 8018994:	405a      	eors	r2, r3
 8018996:	68fb      	ldr	r3, [r7, #12]
 8018998:	3308      	adds	r3, #8
 801899a:	681b      	ldr	r3, [r3, #0]
 801899c:	4013      	ands	r3, r2
 801899e:	2b00      	cmp	r3, #0
 80189a0:	d012      	beq.n	80189c8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80189a2:	687b      	ldr	r3, [r7, #4]
 80189a4:	681b      	ldr	r3, [r3, #0]
 80189a6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80189a8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80189ac:	4293      	cmp	r3, r2
 80189ae:	d00b      	beq.n	80189c8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80189b0:	68fb      	ldr	r3, [r7, #12]
 80189b2:	330c      	adds	r3, #12
 80189b4:	681b      	ldr	r3, [r3, #0]
 80189b6:	2b00      	cmp	r3, #0
 80189b8:	d003      	beq.n	80189c2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80189ba:	68fb      	ldr	r3, [r7, #12]
 80189bc:	330c      	adds	r3, #12
 80189be:	61bb      	str	r3, [r7, #24]
 80189c0:	e002      	b.n	80189c8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80189c2:	f06f 0303 	mvn.w	r3, #3
 80189c6:	e07d      	b.n	8018ac4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80189c8:	4b46      	ldr	r3, [pc, #280]	; (8018ae4 <etharp_output+0x1fc>)
 80189ca:	781b      	ldrb	r3, [r3, #0]
 80189cc:	4619      	mov	r1, r3
 80189ce:	4a46      	ldr	r2, [pc, #280]	; (8018ae8 <etharp_output+0x200>)
 80189d0:	460b      	mov	r3, r1
 80189d2:	005b      	lsls	r3, r3, #1
 80189d4:	440b      	add	r3, r1
 80189d6:	00db      	lsls	r3, r3, #3
 80189d8:	4413      	add	r3, r2
 80189da:	3314      	adds	r3, #20
 80189dc:	781b      	ldrb	r3, [r3, #0]
 80189de:	2b01      	cmp	r3, #1
 80189e0:	d925      	bls.n	8018a2e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80189e2:	4b40      	ldr	r3, [pc, #256]	; (8018ae4 <etharp_output+0x1fc>)
 80189e4:	781b      	ldrb	r3, [r3, #0]
 80189e6:	4619      	mov	r1, r3
 80189e8:	4a3f      	ldr	r2, [pc, #252]	; (8018ae8 <etharp_output+0x200>)
 80189ea:	460b      	mov	r3, r1
 80189ec:	005b      	lsls	r3, r3, #1
 80189ee:	440b      	add	r3, r1
 80189f0:	00db      	lsls	r3, r3, #3
 80189f2:	4413      	add	r3, r2
 80189f4:	3308      	adds	r3, #8
 80189f6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80189f8:	68fa      	ldr	r2, [r7, #12]
 80189fa:	429a      	cmp	r2, r3
 80189fc:	d117      	bne.n	8018a2e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80189fe:	69bb      	ldr	r3, [r7, #24]
 8018a00:	681a      	ldr	r2, [r3, #0]
 8018a02:	4b38      	ldr	r3, [pc, #224]	; (8018ae4 <etharp_output+0x1fc>)
 8018a04:	781b      	ldrb	r3, [r3, #0]
 8018a06:	4618      	mov	r0, r3
 8018a08:	4937      	ldr	r1, [pc, #220]	; (8018ae8 <etharp_output+0x200>)
 8018a0a:	4603      	mov	r3, r0
 8018a0c:	005b      	lsls	r3, r3, #1
 8018a0e:	4403      	add	r3, r0
 8018a10:	00db      	lsls	r3, r3, #3
 8018a12:	440b      	add	r3, r1
 8018a14:	3304      	adds	r3, #4
 8018a16:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018a18:	429a      	cmp	r2, r3
 8018a1a:	d108      	bne.n	8018a2e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8018a1c:	4b31      	ldr	r3, [pc, #196]	; (8018ae4 <etharp_output+0x1fc>)
 8018a1e:	781b      	ldrb	r3, [r3, #0]
 8018a20:	461a      	mov	r2, r3
 8018a22:	68b9      	ldr	r1, [r7, #8]
 8018a24:	68f8      	ldr	r0, [r7, #12]
 8018a26:	f7ff fec5 	bl	80187b4 <etharp_output_to_arp_index>
 8018a2a:	4603      	mov	r3, r0
 8018a2c:	e04a      	b.n	8018ac4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018a2e:	2300      	movs	r3, #0
 8018a30:	75fb      	strb	r3, [r7, #23]
 8018a32:	e031      	b.n	8018a98 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018a34:	7dfa      	ldrb	r2, [r7, #23]
 8018a36:	492c      	ldr	r1, [pc, #176]	; (8018ae8 <etharp_output+0x200>)
 8018a38:	4613      	mov	r3, r2
 8018a3a:	005b      	lsls	r3, r3, #1
 8018a3c:	4413      	add	r3, r2
 8018a3e:	00db      	lsls	r3, r3, #3
 8018a40:	440b      	add	r3, r1
 8018a42:	3314      	adds	r3, #20
 8018a44:	781b      	ldrb	r3, [r3, #0]
 8018a46:	2b01      	cmp	r3, #1
 8018a48:	d923      	bls.n	8018a92 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8018a4a:	7dfa      	ldrb	r2, [r7, #23]
 8018a4c:	4926      	ldr	r1, [pc, #152]	; (8018ae8 <etharp_output+0x200>)
 8018a4e:	4613      	mov	r3, r2
 8018a50:	005b      	lsls	r3, r3, #1
 8018a52:	4413      	add	r3, r2
 8018a54:	00db      	lsls	r3, r3, #3
 8018a56:	440b      	add	r3, r1
 8018a58:	3308      	adds	r3, #8
 8018a5a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018a5c:	68fa      	ldr	r2, [r7, #12]
 8018a5e:	429a      	cmp	r2, r3
 8018a60:	d117      	bne.n	8018a92 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8018a62:	69bb      	ldr	r3, [r7, #24]
 8018a64:	6819      	ldr	r1, [r3, #0]
 8018a66:	7dfa      	ldrb	r2, [r7, #23]
 8018a68:	481f      	ldr	r0, [pc, #124]	; (8018ae8 <etharp_output+0x200>)
 8018a6a:	4613      	mov	r3, r2
 8018a6c:	005b      	lsls	r3, r3, #1
 8018a6e:	4413      	add	r3, r2
 8018a70:	00db      	lsls	r3, r3, #3
 8018a72:	4403      	add	r3, r0
 8018a74:	3304      	adds	r3, #4
 8018a76:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8018a78:	4299      	cmp	r1, r3
 8018a7a:	d10a      	bne.n	8018a92 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8018a7c:	4a19      	ldr	r2, [pc, #100]	; (8018ae4 <etharp_output+0x1fc>)
 8018a7e:	7dfb      	ldrb	r3, [r7, #23]
 8018a80:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8018a82:	7dfb      	ldrb	r3, [r7, #23]
 8018a84:	461a      	mov	r2, r3
 8018a86:	68b9      	ldr	r1, [r7, #8]
 8018a88:	68f8      	ldr	r0, [r7, #12]
 8018a8a:	f7ff fe93 	bl	80187b4 <etharp_output_to_arp_index>
 8018a8e:	4603      	mov	r3, r0
 8018a90:	e018      	b.n	8018ac4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018a92:	7dfb      	ldrb	r3, [r7, #23]
 8018a94:	3301      	adds	r3, #1
 8018a96:	75fb      	strb	r3, [r7, #23]
 8018a98:	7dfb      	ldrb	r3, [r7, #23]
 8018a9a:	2b09      	cmp	r3, #9
 8018a9c:	d9ca      	bls.n	8018a34 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8018a9e:	68ba      	ldr	r2, [r7, #8]
 8018aa0:	69b9      	ldr	r1, [r7, #24]
 8018aa2:	68f8      	ldr	r0, [r7, #12]
 8018aa4:	f000 f822 	bl	8018aec <etharp_query>
 8018aa8:	4603      	mov	r3, r0
 8018aaa:	e00b      	b.n	8018ac4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8018aac:	68fb      	ldr	r3, [r7, #12]
 8018aae:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8018ab2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018ab6:	9300      	str	r3, [sp, #0]
 8018ab8:	69fb      	ldr	r3, [r7, #28]
 8018aba:	68b9      	ldr	r1, [r7, #8]
 8018abc:	68f8      	ldr	r0, [r7, #12]
 8018abe:	f002 fc49 	bl	801b354 <ethernet_output>
 8018ac2:	4603      	mov	r3, r0
}
 8018ac4:	4618      	mov	r0, r3
 8018ac6:	3720      	adds	r7, #32
 8018ac8:	46bd      	mov	sp, r7
 8018aca:	bd80      	pop	{r7, pc}
 8018acc:	080286e8 	.word	0x080286e8
 8018ad0:	08028838 	.word	0x08028838
 8018ad4:	08028760 	.word	0x08028760
 8018ad8:	08028888 	.word	0x08028888
 8018adc:	08028828 	.word	0x08028828
 8018ae0:	0802934c 	.word	0x0802934c
 8018ae4:	2000fd8c 	.word	0x2000fd8c
 8018ae8:	2000fc9c 	.word	0x2000fc9c

08018aec <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8018aec:	b580      	push	{r7, lr}
 8018aee:	b08c      	sub	sp, #48	; 0x30
 8018af0:	af02      	add	r7, sp, #8
 8018af2:	60f8      	str	r0, [r7, #12]
 8018af4:	60b9      	str	r1, [r7, #8]
 8018af6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8018af8:	68fb      	ldr	r3, [r7, #12]
 8018afa:	332a      	adds	r3, #42	; 0x2a
 8018afc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8018afe:	23ff      	movs	r3, #255	; 0xff
 8018b00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8018b04:	2300      	movs	r3, #0
 8018b06:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018b08:	68bb      	ldr	r3, [r7, #8]
 8018b0a:	681b      	ldr	r3, [r3, #0]
 8018b0c:	68f9      	ldr	r1, [r7, #12]
 8018b0e:	4618      	mov	r0, r3
 8018b10:	f001 fb58 	bl	801a1c4 <ip4_addr_isbroadcast_u32>
 8018b14:	4603      	mov	r3, r0
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	d10c      	bne.n	8018b34 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018b1a:	68bb      	ldr	r3, [r7, #8]
 8018b1c:	681b      	ldr	r3, [r3, #0]
 8018b1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018b22:	2be0      	cmp	r3, #224	; 0xe0
 8018b24:	d006      	beq.n	8018b34 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018b26:	68bb      	ldr	r3, [r7, #8]
 8018b28:	2b00      	cmp	r3, #0
 8018b2a:	d003      	beq.n	8018b34 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8018b2c:	68bb      	ldr	r3, [r7, #8]
 8018b2e:	681b      	ldr	r3, [r3, #0]
 8018b30:	2b00      	cmp	r3, #0
 8018b32:	d102      	bne.n	8018b3a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018b34:	f06f 030f 	mvn.w	r3, #15
 8018b38:	e101      	b.n	8018d3e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8018b3a:	68fa      	ldr	r2, [r7, #12]
 8018b3c:	2101      	movs	r1, #1
 8018b3e:	68b8      	ldr	r0, [r7, #8]
 8018b40:	f7ff fb60 	bl	8018204 <etharp_find_entry>
 8018b44:	4603      	mov	r3, r0
 8018b46:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8018b48:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018b4c:	2b00      	cmp	r3, #0
 8018b4e:	da02      	bge.n	8018b56 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8018b50:	8a7b      	ldrh	r3, [r7, #18]
 8018b52:	b25b      	sxtb	r3, r3
 8018b54:	e0f3      	b.n	8018d3e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8018b56:	8a7b      	ldrh	r3, [r7, #18]
 8018b58:	2b7e      	cmp	r3, #126	; 0x7e
 8018b5a:	d906      	bls.n	8018b6a <etharp_query+0x7e>
 8018b5c:	4b7a      	ldr	r3, [pc, #488]	; (8018d48 <etharp_query+0x25c>)
 8018b5e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8018b62:	497a      	ldr	r1, [pc, #488]	; (8018d4c <etharp_query+0x260>)
 8018b64:	487a      	ldr	r0, [pc, #488]	; (8018d50 <etharp_query+0x264>)
 8018b66:	f00b f83b 	bl	8023be0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8018b6a:	8a7b      	ldrh	r3, [r7, #18]
 8018b6c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8018b6e:	7c7a      	ldrb	r2, [r7, #17]
 8018b70:	4978      	ldr	r1, [pc, #480]	; (8018d54 <etharp_query+0x268>)
 8018b72:	4613      	mov	r3, r2
 8018b74:	005b      	lsls	r3, r3, #1
 8018b76:	4413      	add	r3, r2
 8018b78:	00db      	lsls	r3, r3, #3
 8018b7a:	440b      	add	r3, r1
 8018b7c:	3314      	adds	r3, #20
 8018b7e:	781b      	ldrb	r3, [r3, #0]
 8018b80:	2b00      	cmp	r3, #0
 8018b82:	d115      	bne.n	8018bb0 <etharp_query+0xc4>
    is_new_entry = 1;
 8018b84:	2301      	movs	r3, #1
 8018b86:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8018b88:	7c7a      	ldrb	r2, [r7, #17]
 8018b8a:	4972      	ldr	r1, [pc, #456]	; (8018d54 <etharp_query+0x268>)
 8018b8c:	4613      	mov	r3, r2
 8018b8e:	005b      	lsls	r3, r3, #1
 8018b90:	4413      	add	r3, r2
 8018b92:	00db      	lsls	r3, r3, #3
 8018b94:	440b      	add	r3, r1
 8018b96:	3314      	adds	r3, #20
 8018b98:	2201      	movs	r2, #1
 8018b9a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8018b9c:	7c7a      	ldrb	r2, [r7, #17]
 8018b9e:	496d      	ldr	r1, [pc, #436]	; (8018d54 <etharp_query+0x268>)
 8018ba0:	4613      	mov	r3, r2
 8018ba2:	005b      	lsls	r3, r3, #1
 8018ba4:	4413      	add	r3, r2
 8018ba6:	00db      	lsls	r3, r3, #3
 8018ba8:	440b      	add	r3, r1
 8018baa:	3308      	adds	r3, #8
 8018bac:	68fa      	ldr	r2, [r7, #12]
 8018bae:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8018bb0:	7c7a      	ldrb	r2, [r7, #17]
 8018bb2:	4968      	ldr	r1, [pc, #416]	; (8018d54 <etharp_query+0x268>)
 8018bb4:	4613      	mov	r3, r2
 8018bb6:	005b      	lsls	r3, r3, #1
 8018bb8:	4413      	add	r3, r2
 8018bba:	00db      	lsls	r3, r3, #3
 8018bbc:	440b      	add	r3, r1
 8018bbe:	3314      	adds	r3, #20
 8018bc0:	781b      	ldrb	r3, [r3, #0]
 8018bc2:	2b01      	cmp	r3, #1
 8018bc4:	d011      	beq.n	8018bea <etharp_query+0xfe>
 8018bc6:	7c7a      	ldrb	r2, [r7, #17]
 8018bc8:	4962      	ldr	r1, [pc, #392]	; (8018d54 <etharp_query+0x268>)
 8018bca:	4613      	mov	r3, r2
 8018bcc:	005b      	lsls	r3, r3, #1
 8018bce:	4413      	add	r3, r2
 8018bd0:	00db      	lsls	r3, r3, #3
 8018bd2:	440b      	add	r3, r1
 8018bd4:	3314      	adds	r3, #20
 8018bd6:	781b      	ldrb	r3, [r3, #0]
 8018bd8:	2b01      	cmp	r3, #1
 8018bda:	d806      	bhi.n	8018bea <etharp_query+0xfe>
 8018bdc:	4b5a      	ldr	r3, [pc, #360]	; (8018d48 <etharp_query+0x25c>)
 8018bde:	f240 32cd 	movw	r2, #973	; 0x3cd
 8018be2:	495d      	ldr	r1, [pc, #372]	; (8018d58 <etharp_query+0x26c>)
 8018be4:	485a      	ldr	r0, [pc, #360]	; (8018d50 <etharp_query+0x264>)
 8018be6:	f00a fffb 	bl	8023be0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8018bea:	6a3b      	ldr	r3, [r7, #32]
 8018bec:	2b00      	cmp	r3, #0
 8018bee:	d102      	bne.n	8018bf6 <etharp_query+0x10a>
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	2b00      	cmp	r3, #0
 8018bf4:	d10c      	bne.n	8018c10 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8018bf6:	68b9      	ldr	r1, [r7, #8]
 8018bf8:	68f8      	ldr	r0, [r7, #12]
 8018bfa:	f000 f963 	bl	8018ec4 <etharp_request>
 8018bfe:	4603      	mov	r3, r0
 8018c00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	2b00      	cmp	r3, #0
 8018c08:	d102      	bne.n	8018c10 <etharp_query+0x124>
      return result;
 8018c0a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018c0e:	e096      	b.n	8018d3e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	2b00      	cmp	r3, #0
 8018c14:	d106      	bne.n	8018c24 <etharp_query+0x138>
 8018c16:	4b4c      	ldr	r3, [pc, #304]	; (8018d48 <etharp_query+0x25c>)
 8018c18:	f240 32e1 	movw	r2, #993	; 0x3e1
 8018c1c:	494f      	ldr	r1, [pc, #316]	; (8018d5c <etharp_query+0x270>)
 8018c1e:	484c      	ldr	r0, [pc, #304]	; (8018d50 <etharp_query+0x264>)
 8018c20:	f00a ffde 	bl	8023be0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8018c24:	7c7a      	ldrb	r2, [r7, #17]
 8018c26:	494b      	ldr	r1, [pc, #300]	; (8018d54 <etharp_query+0x268>)
 8018c28:	4613      	mov	r3, r2
 8018c2a:	005b      	lsls	r3, r3, #1
 8018c2c:	4413      	add	r3, r2
 8018c2e:	00db      	lsls	r3, r3, #3
 8018c30:	440b      	add	r3, r1
 8018c32:	3314      	adds	r3, #20
 8018c34:	781b      	ldrb	r3, [r3, #0]
 8018c36:	2b01      	cmp	r3, #1
 8018c38:	d917      	bls.n	8018c6a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8018c3a:	4a49      	ldr	r2, [pc, #292]	; (8018d60 <etharp_query+0x274>)
 8018c3c:	7c7b      	ldrb	r3, [r7, #17]
 8018c3e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8018c40:	7c7a      	ldrb	r2, [r7, #17]
 8018c42:	4613      	mov	r3, r2
 8018c44:	005b      	lsls	r3, r3, #1
 8018c46:	4413      	add	r3, r2
 8018c48:	00db      	lsls	r3, r3, #3
 8018c4a:	3308      	adds	r3, #8
 8018c4c:	4a41      	ldr	r2, [pc, #260]	; (8018d54 <etharp_query+0x268>)
 8018c4e:	4413      	add	r3, r2
 8018c50:	3304      	adds	r3, #4
 8018c52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018c56:	9200      	str	r2, [sp, #0]
 8018c58:	697a      	ldr	r2, [r7, #20]
 8018c5a:	6879      	ldr	r1, [r7, #4]
 8018c5c:	68f8      	ldr	r0, [r7, #12]
 8018c5e:	f002 fb79 	bl	801b354 <ethernet_output>
 8018c62:	4603      	mov	r3, r0
 8018c64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018c68:	e067      	b.n	8018d3a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018c6a:	7c7a      	ldrb	r2, [r7, #17]
 8018c6c:	4939      	ldr	r1, [pc, #228]	; (8018d54 <etharp_query+0x268>)
 8018c6e:	4613      	mov	r3, r2
 8018c70:	005b      	lsls	r3, r3, #1
 8018c72:	4413      	add	r3, r2
 8018c74:	00db      	lsls	r3, r3, #3
 8018c76:	440b      	add	r3, r1
 8018c78:	3314      	adds	r3, #20
 8018c7a:	781b      	ldrb	r3, [r3, #0]
 8018c7c:	2b01      	cmp	r3, #1
 8018c7e:	d15c      	bne.n	8018d3a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8018c80:	2300      	movs	r3, #0
 8018c82:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018c88:	e01c      	b.n	8018cc4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8018c8a:	69fb      	ldr	r3, [r7, #28]
 8018c8c:	895a      	ldrh	r2, [r3, #10]
 8018c8e:	69fb      	ldr	r3, [r7, #28]
 8018c90:	891b      	ldrh	r3, [r3, #8]
 8018c92:	429a      	cmp	r2, r3
 8018c94:	d10a      	bne.n	8018cac <etharp_query+0x1c0>
 8018c96:	69fb      	ldr	r3, [r7, #28]
 8018c98:	681b      	ldr	r3, [r3, #0]
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	d006      	beq.n	8018cac <etharp_query+0x1c0>
 8018c9e:	4b2a      	ldr	r3, [pc, #168]	; (8018d48 <etharp_query+0x25c>)
 8018ca0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8018ca4:	492f      	ldr	r1, [pc, #188]	; (8018d64 <etharp_query+0x278>)
 8018ca6:	482a      	ldr	r0, [pc, #168]	; (8018d50 <etharp_query+0x264>)
 8018ca8:	f00a ff9a 	bl	8023be0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8018cac:	69fb      	ldr	r3, [r7, #28]
 8018cae:	7b1b      	ldrb	r3, [r3, #12]
 8018cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018cb4:	2b00      	cmp	r3, #0
 8018cb6:	d002      	beq.n	8018cbe <etharp_query+0x1d2>
        copy_needed = 1;
 8018cb8:	2301      	movs	r3, #1
 8018cba:	61bb      	str	r3, [r7, #24]
        break;
 8018cbc:	e005      	b.n	8018cca <etharp_query+0x1de>
      }
      p = p->next;
 8018cbe:	69fb      	ldr	r3, [r7, #28]
 8018cc0:	681b      	ldr	r3, [r3, #0]
 8018cc2:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018cc4:	69fb      	ldr	r3, [r7, #28]
 8018cc6:	2b00      	cmp	r3, #0
 8018cc8:	d1df      	bne.n	8018c8a <etharp_query+0x19e>
    }
    if (copy_needed) {
 8018cca:	69bb      	ldr	r3, [r7, #24]
 8018ccc:	2b00      	cmp	r3, #0
 8018cce:	d007      	beq.n	8018ce0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8018cd0:	687a      	ldr	r2, [r7, #4]
 8018cd2:	f44f 7120 	mov.w	r1, #640	; 0x280
 8018cd6:	200e      	movs	r0, #14
 8018cd8:	f7f8 f992 	bl	8011000 <pbuf_clone>
 8018cdc:	61f8      	str	r0, [r7, #28]
 8018cde:	e004      	b.n	8018cea <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8018ce0:	687b      	ldr	r3, [r7, #4]
 8018ce2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8018ce4:	69f8      	ldr	r0, [r7, #28]
 8018ce6:	f7f7 fe81 	bl	80109ec <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8018cea:	69fb      	ldr	r3, [r7, #28]
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	d021      	beq.n	8018d34 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8018cf0:	7c7a      	ldrb	r2, [r7, #17]
 8018cf2:	4918      	ldr	r1, [pc, #96]	; (8018d54 <etharp_query+0x268>)
 8018cf4:	4613      	mov	r3, r2
 8018cf6:	005b      	lsls	r3, r3, #1
 8018cf8:	4413      	add	r3, r2
 8018cfa:	00db      	lsls	r3, r3, #3
 8018cfc:	440b      	add	r3, r1
 8018cfe:	681b      	ldr	r3, [r3, #0]
 8018d00:	2b00      	cmp	r3, #0
 8018d02:	d00a      	beq.n	8018d1a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8018d04:	7c7a      	ldrb	r2, [r7, #17]
 8018d06:	4913      	ldr	r1, [pc, #76]	; (8018d54 <etharp_query+0x268>)
 8018d08:	4613      	mov	r3, r2
 8018d0a:	005b      	lsls	r3, r3, #1
 8018d0c:	4413      	add	r3, r2
 8018d0e:	00db      	lsls	r3, r3, #3
 8018d10:	440b      	add	r3, r1
 8018d12:	681b      	ldr	r3, [r3, #0]
 8018d14:	4618      	mov	r0, r3
 8018d16:	f7f7 fdc3 	bl	80108a0 <pbuf_free>
      }
      arp_table[i].q = p;
 8018d1a:	7c7a      	ldrb	r2, [r7, #17]
 8018d1c:	490d      	ldr	r1, [pc, #52]	; (8018d54 <etharp_query+0x268>)
 8018d1e:	4613      	mov	r3, r2
 8018d20:	005b      	lsls	r3, r3, #1
 8018d22:	4413      	add	r3, r2
 8018d24:	00db      	lsls	r3, r3, #3
 8018d26:	440b      	add	r3, r1
 8018d28:	69fa      	ldr	r2, [r7, #28]
 8018d2a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8018d2c:	2300      	movs	r3, #0
 8018d2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018d32:	e002      	b.n	8018d3a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8018d34:	23ff      	movs	r3, #255	; 0xff
 8018d36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8018d3a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8018d3e:	4618      	mov	r0, r3
 8018d40:	3728      	adds	r7, #40	; 0x28
 8018d42:	46bd      	mov	sp, r7
 8018d44:	bd80      	pop	{r7, pc}
 8018d46:	bf00      	nop
 8018d48:	080286e8 	.word	0x080286e8
 8018d4c:	08028894 	.word	0x08028894
 8018d50:	08028760 	.word	0x08028760
 8018d54:	2000fc9c 	.word	0x2000fc9c
 8018d58:	080288a4 	.word	0x080288a4
 8018d5c:	08028888 	.word	0x08028888
 8018d60:	2000fd8c 	.word	0x2000fd8c
 8018d64:	080288cc 	.word	0x080288cc

08018d68 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8018d68:	b580      	push	{r7, lr}
 8018d6a:	b08a      	sub	sp, #40	; 0x28
 8018d6c:	af02      	add	r7, sp, #8
 8018d6e:	60f8      	str	r0, [r7, #12]
 8018d70:	60b9      	str	r1, [r7, #8]
 8018d72:	607a      	str	r2, [r7, #4]
 8018d74:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8018d76:	2300      	movs	r3, #0
 8018d78:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018d7a:	68fb      	ldr	r3, [r7, #12]
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	d106      	bne.n	8018d8e <etharp_raw+0x26>
 8018d80:	4b3a      	ldr	r3, [pc, #232]	; (8018e6c <etharp_raw+0x104>)
 8018d82:	f240 4257 	movw	r2, #1111	; 0x457
 8018d86:	493a      	ldr	r1, [pc, #232]	; (8018e70 <etharp_raw+0x108>)
 8018d88:	483a      	ldr	r0, [pc, #232]	; (8018e74 <etharp_raw+0x10c>)
 8018d8a:	f00a ff29 	bl	8023be0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8018d8e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018d92:	211c      	movs	r1, #28
 8018d94:	200e      	movs	r0, #14
 8018d96:	f7f7 fa6d 	bl	8010274 <pbuf_alloc>
 8018d9a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8018d9c:	69bb      	ldr	r3, [r7, #24]
 8018d9e:	2b00      	cmp	r3, #0
 8018da0:	d102      	bne.n	8018da8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8018da2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018da6:	e05d      	b.n	8018e64 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8018da8:	69bb      	ldr	r3, [r7, #24]
 8018daa:	895b      	ldrh	r3, [r3, #10]
 8018dac:	2b1b      	cmp	r3, #27
 8018dae:	d806      	bhi.n	8018dbe <etharp_raw+0x56>
 8018db0:	4b2e      	ldr	r3, [pc, #184]	; (8018e6c <etharp_raw+0x104>)
 8018db2:	f240 4262 	movw	r2, #1122	; 0x462
 8018db6:	4930      	ldr	r1, [pc, #192]	; (8018e78 <etharp_raw+0x110>)
 8018db8:	482e      	ldr	r0, [pc, #184]	; (8018e74 <etharp_raw+0x10c>)
 8018dba:	f00a ff11 	bl	8023be0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8018dbe:	69bb      	ldr	r3, [r7, #24]
 8018dc0:	685b      	ldr	r3, [r3, #4]
 8018dc2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8018dc4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018dc6:	4618      	mov	r0, r3
 8018dc8:	f7f5 f914 	bl	800dff4 <lwip_htons>
 8018dcc:	4603      	mov	r3, r0
 8018dce:	461a      	mov	r2, r3
 8018dd0:	697b      	ldr	r3, [r7, #20]
 8018dd2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8018dd4:	68fb      	ldr	r3, [r7, #12]
 8018dd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018dda:	2b06      	cmp	r3, #6
 8018ddc:	d006      	beq.n	8018dec <etharp_raw+0x84>
 8018dde:	4b23      	ldr	r3, [pc, #140]	; (8018e6c <etharp_raw+0x104>)
 8018de0:	f240 4269 	movw	r2, #1129	; 0x469
 8018de4:	4925      	ldr	r1, [pc, #148]	; (8018e7c <etharp_raw+0x114>)
 8018de6:	4823      	ldr	r0, [pc, #140]	; (8018e74 <etharp_raw+0x10c>)
 8018de8:	f00a fefa 	bl	8023be0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8018dec:	697b      	ldr	r3, [r7, #20]
 8018dee:	3308      	adds	r3, #8
 8018df0:	2206      	movs	r2, #6
 8018df2:	6839      	ldr	r1, [r7, #0]
 8018df4:	4618      	mov	r0, r3
 8018df6:	f00a fdcd 	bl	8023994 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8018dfa:	697b      	ldr	r3, [r7, #20]
 8018dfc:	3312      	adds	r3, #18
 8018dfe:	2206      	movs	r2, #6
 8018e00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018e02:	4618      	mov	r0, r3
 8018e04:	f00a fdc6 	bl	8023994 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8018e08:	697b      	ldr	r3, [r7, #20]
 8018e0a:	330e      	adds	r3, #14
 8018e0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018e0e:	6812      	ldr	r2, [r2, #0]
 8018e10:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8018e12:	697b      	ldr	r3, [r7, #20]
 8018e14:	3318      	adds	r3, #24
 8018e16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018e18:	6812      	ldr	r2, [r2, #0]
 8018e1a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8018e1c:	697b      	ldr	r3, [r7, #20]
 8018e1e:	2200      	movs	r2, #0
 8018e20:	701a      	strb	r2, [r3, #0]
 8018e22:	2200      	movs	r2, #0
 8018e24:	f042 0201 	orr.w	r2, r2, #1
 8018e28:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8018e2a:	697b      	ldr	r3, [r7, #20]
 8018e2c:	2200      	movs	r2, #0
 8018e2e:	f042 0208 	orr.w	r2, r2, #8
 8018e32:	709a      	strb	r2, [r3, #2]
 8018e34:	2200      	movs	r2, #0
 8018e36:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8018e38:	697b      	ldr	r3, [r7, #20]
 8018e3a:	2206      	movs	r2, #6
 8018e3c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8018e3e:	697b      	ldr	r3, [r7, #20]
 8018e40:	2204      	movs	r2, #4
 8018e42:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8018e44:	f640 0306 	movw	r3, #2054	; 0x806
 8018e48:	9300      	str	r3, [sp, #0]
 8018e4a:	687b      	ldr	r3, [r7, #4]
 8018e4c:	68ba      	ldr	r2, [r7, #8]
 8018e4e:	69b9      	ldr	r1, [r7, #24]
 8018e50:	68f8      	ldr	r0, [r7, #12]
 8018e52:	f002 fa7f 	bl	801b354 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8018e56:	69b8      	ldr	r0, [r7, #24]
 8018e58:	f7f7 fd22 	bl	80108a0 <pbuf_free>
  p = NULL;
 8018e5c:	2300      	movs	r3, #0
 8018e5e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8018e60:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018e64:	4618      	mov	r0, r3
 8018e66:	3720      	adds	r7, #32
 8018e68:	46bd      	mov	sp, r7
 8018e6a:	bd80      	pop	{r7, pc}
 8018e6c:	080286e8 	.word	0x080286e8
 8018e70:	08028838 	.word	0x08028838
 8018e74:	08028760 	.word	0x08028760
 8018e78:	080288e8 	.word	0x080288e8
 8018e7c:	0802891c 	.word	0x0802891c

08018e80 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8018e80:	b580      	push	{r7, lr}
 8018e82:	b088      	sub	sp, #32
 8018e84:	af04      	add	r7, sp, #16
 8018e86:	60f8      	str	r0, [r7, #12]
 8018e88:	60b9      	str	r1, [r7, #8]
 8018e8a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018e8c:	68fb      	ldr	r3, [r7, #12]
 8018e8e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8018e92:	68fb      	ldr	r3, [r7, #12]
 8018e94:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8018e98:	68fb      	ldr	r3, [r7, #12]
 8018e9a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018e9c:	2201      	movs	r2, #1
 8018e9e:	9203      	str	r2, [sp, #12]
 8018ea0:	68ba      	ldr	r2, [r7, #8]
 8018ea2:	9202      	str	r2, [sp, #8]
 8018ea4:	4a06      	ldr	r2, [pc, #24]	; (8018ec0 <etharp_request_dst+0x40>)
 8018ea6:	9201      	str	r2, [sp, #4]
 8018ea8:	9300      	str	r3, [sp, #0]
 8018eaa:	4603      	mov	r3, r0
 8018eac:	687a      	ldr	r2, [r7, #4]
 8018eae:	68f8      	ldr	r0, [r7, #12]
 8018eb0:	f7ff ff5a 	bl	8018d68 <etharp_raw>
 8018eb4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8018eb6:	4618      	mov	r0, r3
 8018eb8:	3710      	adds	r7, #16
 8018eba:	46bd      	mov	sp, r7
 8018ebc:	bd80      	pop	{r7, pc}
 8018ebe:	bf00      	nop
 8018ec0:	08029354 	.word	0x08029354

08018ec4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8018ec4:	b580      	push	{r7, lr}
 8018ec6:	b082      	sub	sp, #8
 8018ec8:	af00      	add	r7, sp, #0
 8018eca:	6078      	str	r0, [r7, #4]
 8018ecc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8018ece:	4a05      	ldr	r2, [pc, #20]	; (8018ee4 <etharp_request+0x20>)
 8018ed0:	6839      	ldr	r1, [r7, #0]
 8018ed2:	6878      	ldr	r0, [r7, #4]
 8018ed4:	f7ff ffd4 	bl	8018e80 <etharp_request_dst>
 8018ed8:	4603      	mov	r3, r0
}
 8018eda:	4618      	mov	r0, r3
 8018edc:	3708      	adds	r7, #8
 8018ede:	46bd      	mov	sp, r7
 8018ee0:	bd80      	pop	{r7, pc}
 8018ee2:	bf00      	nop
 8018ee4:	0802934c 	.word	0x0802934c

08018ee8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8018ee8:	b580      	push	{r7, lr}
 8018eea:	b08e      	sub	sp, #56	; 0x38
 8018eec:	af04      	add	r7, sp, #16
 8018eee:	6078      	str	r0, [r7, #4]
 8018ef0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8018ef2:	4b79      	ldr	r3, [pc, #484]	; (80190d8 <icmp_input+0x1f0>)
 8018ef4:	689b      	ldr	r3, [r3, #8]
 8018ef6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8018ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018efa:	781b      	ldrb	r3, [r3, #0]
 8018efc:	f003 030f 	and.w	r3, r3, #15
 8018f00:	b2db      	uxtb	r3, r3
 8018f02:	009b      	lsls	r3, r3, #2
 8018f04:	b2db      	uxtb	r3, r3
 8018f06:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8018f08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018f0a:	2b13      	cmp	r3, #19
 8018f0c:	f240 80cd 	bls.w	80190aa <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8018f10:	687b      	ldr	r3, [r7, #4]
 8018f12:	895b      	ldrh	r3, [r3, #10]
 8018f14:	2b03      	cmp	r3, #3
 8018f16:	f240 80ca 	bls.w	80190ae <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	685b      	ldr	r3, [r3, #4]
 8018f1e:	781b      	ldrb	r3, [r3, #0]
 8018f20:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8018f24:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8018f28:	2b00      	cmp	r3, #0
 8018f2a:	f000 80b7 	beq.w	801909c <icmp_input+0x1b4>
 8018f2e:	2b08      	cmp	r3, #8
 8018f30:	f040 80b7 	bne.w	80190a2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8018f34:	4b69      	ldr	r3, [pc, #420]	; (80190dc <icmp_input+0x1f4>)
 8018f36:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018f38:	4b67      	ldr	r3, [pc, #412]	; (80190d8 <icmp_input+0x1f0>)
 8018f3a:	695b      	ldr	r3, [r3, #20]
 8018f3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018f40:	2be0      	cmp	r3, #224	; 0xe0
 8018f42:	f000 80bb 	beq.w	80190bc <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8018f46:	4b64      	ldr	r3, [pc, #400]	; (80190d8 <icmp_input+0x1f0>)
 8018f48:	695b      	ldr	r3, [r3, #20]
 8018f4a:	4a63      	ldr	r2, [pc, #396]	; (80190d8 <icmp_input+0x1f0>)
 8018f4c:	6812      	ldr	r2, [r2, #0]
 8018f4e:	4611      	mov	r1, r2
 8018f50:	4618      	mov	r0, r3
 8018f52:	f001 f937 	bl	801a1c4 <ip4_addr_isbroadcast_u32>
 8018f56:	4603      	mov	r3, r0
 8018f58:	2b00      	cmp	r3, #0
 8018f5a:	f040 80b1 	bne.w	80190c0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	891b      	ldrh	r3, [r3, #8]
 8018f62:	2b07      	cmp	r3, #7
 8018f64:	f240 80a5 	bls.w	80190b2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8018f68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018f6a:	330e      	adds	r3, #14
 8018f6c:	4619      	mov	r1, r3
 8018f6e:	6878      	ldr	r0, [r7, #4]
 8018f70:	f7f7 fbce 	bl	8010710 <pbuf_add_header>
 8018f74:	4603      	mov	r3, r0
 8018f76:	2b00      	cmp	r3, #0
 8018f78:	d04b      	beq.n	8019012 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	891a      	ldrh	r2, [r3, #8]
 8018f7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018f80:	4413      	add	r3, r2
 8018f82:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8018f84:	687b      	ldr	r3, [r7, #4]
 8018f86:	891b      	ldrh	r3, [r3, #8]
 8018f88:	8b7a      	ldrh	r2, [r7, #26]
 8018f8a:	429a      	cmp	r2, r3
 8018f8c:	f0c0 809a 	bcc.w	80190c4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8018f90:	8b7b      	ldrh	r3, [r7, #26]
 8018f92:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018f96:	4619      	mov	r1, r3
 8018f98:	200e      	movs	r0, #14
 8018f9a:	f7f7 f96b 	bl	8010274 <pbuf_alloc>
 8018f9e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8018fa0:	697b      	ldr	r3, [r7, #20]
 8018fa2:	2b00      	cmp	r3, #0
 8018fa4:	f000 8090 	beq.w	80190c8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8018fa8:	697b      	ldr	r3, [r7, #20]
 8018faa:	895b      	ldrh	r3, [r3, #10]
 8018fac:	461a      	mov	r2, r3
 8018fae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018fb0:	3308      	adds	r3, #8
 8018fb2:	429a      	cmp	r2, r3
 8018fb4:	d203      	bcs.n	8018fbe <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8018fb6:	6978      	ldr	r0, [r7, #20]
 8018fb8:	f7f7 fc72 	bl	80108a0 <pbuf_free>
          goto icmperr;
 8018fbc:	e085      	b.n	80190ca <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8018fbe:	697b      	ldr	r3, [r7, #20]
 8018fc0:	685b      	ldr	r3, [r3, #4]
 8018fc2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8018fc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018fc6:	4618      	mov	r0, r3
 8018fc8:	f00a fce4 	bl	8023994 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8018fcc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018fce:	4619      	mov	r1, r3
 8018fd0:	6978      	ldr	r0, [r7, #20]
 8018fd2:	f7f7 fbad 	bl	8010730 <pbuf_remove_header>
 8018fd6:	4603      	mov	r3, r0
 8018fd8:	2b00      	cmp	r3, #0
 8018fda:	d009      	beq.n	8018ff0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8018fdc:	4b40      	ldr	r3, [pc, #256]	; (80190e0 <icmp_input+0x1f8>)
 8018fde:	22b6      	movs	r2, #182	; 0xb6
 8018fe0:	4940      	ldr	r1, [pc, #256]	; (80190e4 <icmp_input+0x1fc>)
 8018fe2:	4841      	ldr	r0, [pc, #260]	; (80190e8 <icmp_input+0x200>)
 8018fe4:	f00a fdfc 	bl	8023be0 <iprintf>
          pbuf_free(r);
 8018fe8:	6978      	ldr	r0, [r7, #20]
 8018fea:	f7f7 fc59 	bl	80108a0 <pbuf_free>
          goto icmperr;
 8018fee:	e06c      	b.n	80190ca <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8018ff0:	6879      	ldr	r1, [r7, #4]
 8018ff2:	6978      	ldr	r0, [r7, #20]
 8018ff4:	f7f7 fd88 	bl	8010b08 <pbuf_copy>
 8018ff8:	4603      	mov	r3, r0
 8018ffa:	2b00      	cmp	r3, #0
 8018ffc:	d003      	beq.n	8019006 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8018ffe:	6978      	ldr	r0, [r7, #20]
 8019000:	f7f7 fc4e 	bl	80108a0 <pbuf_free>
          goto icmperr;
 8019004:	e061      	b.n	80190ca <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8019006:	6878      	ldr	r0, [r7, #4]
 8019008:	f7f7 fc4a 	bl	80108a0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801900c:	697b      	ldr	r3, [r7, #20]
 801900e:	607b      	str	r3, [r7, #4]
 8019010:	e00f      	b.n	8019032 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019012:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019014:	330e      	adds	r3, #14
 8019016:	4619      	mov	r1, r3
 8019018:	6878      	ldr	r0, [r7, #4]
 801901a:	f7f7 fb89 	bl	8010730 <pbuf_remove_header>
 801901e:	4603      	mov	r3, r0
 8019020:	2b00      	cmp	r3, #0
 8019022:	d006      	beq.n	8019032 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8019024:	4b2e      	ldr	r3, [pc, #184]	; (80190e0 <icmp_input+0x1f8>)
 8019026:	22c7      	movs	r2, #199	; 0xc7
 8019028:	4930      	ldr	r1, [pc, #192]	; (80190ec <icmp_input+0x204>)
 801902a:	482f      	ldr	r0, [pc, #188]	; (80190e8 <icmp_input+0x200>)
 801902c:	f00a fdd8 	bl	8023be0 <iprintf>
          goto icmperr;
 8019030:	e04b      	b.n	80190ca <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8019032:	687b      	ldr	r3, [r7, #4]
 8019034:	685b      	ldr	r3, [r3, #4]
 8019036:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8019038:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801903a:	4619      	mov	r1, r3
 801903c:	6878      	ldr	r0, [r7, #4]
 801903e:	f7f7 fb67 	bl	8010710 <pbuf_add_header>
 8019042:	4603      	mov	r3, r0
 8019044:	2b00      	cmp	r3, #0
 8019046:	d12b      	bne.n	80190a0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8019048:	687b      	ldr	r3, [r7, #4]
 801904a:	685b      	ldr	r3, [r3, #4]
 801904c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801904e:	69fb      	ldr	r3, [r7, #28]
 8019050:	681a      	ldr	r2, [r3, #0]
 8019052:	68fb      	ldr	r3, [r7, #12]
 8019054:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8019056:	4b20      	ldr	r3, [pc, #128]	; (80190d8 <icmp_input+0x1f0>)
 8019058:	691a      	ldr	r2, [r3, #16]
 801905a:	68fb      	ldr	r3, [r7, #12]
 801905c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801905e:	693b      	ldr	r3, [r7, #16]
 8019060:	2200      	movs	r2, #0
 8019062:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8019064:	693b      	ldr	r3, [r7, #16]
 8019066:	2200      	movs	r2, #0
 8019068:	709a      	strb	r2, [r3, #2]
 801906a:	2200      	movs	r2, #0
 801906c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801906e:	68fb      	ldr	r3, [r7, #12]
 8019070:	22ff      	movs	r2, #255	; 0xff
 8019072:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8019074:	68fb      	ldr	r3, [r7, #12]
 8019076:	2200      	movs	r2, #0
 8019078:	729a      	strb	r2, [r3, #10]
 801907a:	2200      	movs	r2, #0
 801907c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801907e:	683b      	ldr	r3, [r7, #0]
 8019080:	9302      	str	r3, [sp, #8]
 8019082:	2301      	movs	r3, #1
 8019084:	9301      	str	r3, [sp, #4]
 8019086:	2300      	movs	r3, #0
 8019088:	9300      	str	r3, [sp, #0]
 801908a:	23ff      	movs	r3, #255	; 0xff
 801908c:	2200      	movs	r2, #0
 801908e:	69f9      	ldr	r1, [r7, #28]
 8019090:	6878      	ldr	r0, [r7, #4]
 8019092:	f000 ff49 	bl	8019f28 <ip4_output_if>
 8019096:	4603      	mov	r3, r0
 8019098:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801909a:	e001      	b.n	80190a0 <icmp_input+0x1b8>
      break;
 801909c:	bf00      	nop
 801909e:	e000      	b.n	80190a2 <icmp_input+0x1ba>
      break;
 80190a0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80190a2:	6878      	ldr	r0, [r7, #4]
 80190a4:	f7f7 fbfc 	bl	80108a0 <pbuf_free>
  return;
 80190a8:	e013      	b.n	80190d2 <icmp_input+0x1ea>
    goto lenerr;
 80190aa:	bf00      	nop
 80190ac:	e002      	b.n	80190b4 <icmp_input+0x1cc>
    goto lenerr;
 80190ae:	bf00      	nop
 80190b0:	e000      	b.n	80190b4 <icmp_input+0x1cc>
        goto lenerr;
 80190b2:	bf00      	nop
lenerr:
  pbuf_free(p);
 80190b4:	6878      	ldr	r0, [r7, #4]
 80190b6:	f7f7 fbf3 	bl	80108a0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80190ba:	e00a      	b.n	80190d2 <icmp_input+0x1ea>
        goto icmperr;
 80190bc:	bf00      	nop
 80190be:	e004      	b.n	80190ca <icmp_input+0x1e2>
        goto icmperr;
 80190c0:	bf00      	nop
 80190c2:	e002      	b.n	80190ca <icmp_input+0x1e2>
          goto icmperr;
 80190c4:	bf00      	nop
 80190c6:	e000      	b.n	80190ca <icmp_input+0x1e2>
          goto icmperr;
 80190c8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80190ca:	6878      	ldr	r0, [r7, #4]
 80190cc:	f7f7 fbe8 	bl	80108a0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80190d0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80190d2:	3728      	adds	r7, #40	; 0x28
 80190d4:	46bd      	mov	sp, r7
 80190d6:	bd80      	pop	{r7, pc}
 80190d8:	2000c2e4 	.word	0x2000c2e4
 80190dc:	2000c2f8 	.word	0x2000c2f8
 80190e0:	08028960 	.word	0x08028960
 80190e4:	08028998 	.word	0x08028998
 80190e8:	080289d0 	.word	0x080289d0
 80190ec:	080289f8 	.word	0x080289f8

080190f0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80190f0:	b580      	push	{r7, lr}
 80190f2:	b082      	sub	sp, #8
 80190f4:	af00      	add	r7, sp, #0
 80190f6:	6078      	str	r0, [r7, #4]
 80190f8:	460b      	mov	r3, r1
 80190fa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80190fc:	78fb      	ldrb	r3, [r7, #3]
 80190fe:	461a      	mov	r2, r3
 8019100:	2103      	movs	r1, #3
 8019102:	6878      	ldr	r0, [r7, #4]
 8019104:	f000 f814 	bl	8019130 <icmp_send_response>
}
 8019108:	bf00      	nop
 801910a:	3708      	adds	r7, #8
 801910c:	46bd      	mov	sp, r7
 801910e:	bd80      	pop	{r7, pc}

08019110 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8019110:	b580      	push	{r7, lr}
 8019112:	b082      	sub	sp, #8
 8019114:	af00      	add	r7, sp, #0
 8019116:	6078      	str	r0, [r7, #4]
 8019118:	460b      	mov	r3, r1
 801911a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801911c:	78fb      	ldrb	r3, [r7, #3]
 801911e:	461a      	mov	r2, r3
 8019120:	210b      	movs	r1, #11
 8019122:	6878      	ldr	r0, [r7, #4]
 8019124:	f000 f804 	bl	8019130 <icmp_send_response>
}
 8019128:	bf00      	nop
 801912a:	3708      	adds	r7, #8
 801912c:	46bd      	mov	sp, r7
 801912e:	bd80      	pop	{r7, pc}

08019130 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8019130:	b580      	push	{r7, lr}
 8019132:	b08c      	sub	sp, #48	; 0x30
 8019134:	af04      	add	r7, sp, #16
 8019136:	6078      	str	r0, [r7, #4]
 8019138:	460b      	mov	r3, r1
 801913a:	70fb      	strb	r3, [r7, #3]
 801913c:	4613      	mov	r3, r2
 801913e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8019140:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019144:	2124      	movs	r1, #36	; 0x24
 8019146:	2022      	movs	r0, #34	; 0x22
 8019148:	f7f7 f894 	bl	8010274 <pbuf_alloc>
 801914c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801914e:	69fb      	ldr	r3, [r7, #28]
 8019150:	2b00      	cmp	r3, #0
 8019152:	d04c      	beq.n	80191ee <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8019154:	69fb      	ldr	r3, [r7, #28]
 8019156:	895b      	ldrh	r3, [r3, #10]
 8019158:	2b23      	cmp	r3, #35	; 0x23
 801915a:	d806      	bhi.n	801916a <icmp_send_response+0x3a>
 801915c:	4b26      	ldr	r3, [pc, #152]	; (80191f8 <icmp_send_response+0xc8>)
 801915e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8019162:	4926      	ldr	r1, [pc, #152]	; (80191fc <icmp_send_response+0xcc>)
 8019164:	4826      	ldr	r0, [pc, #152]	; (8019200 <icmp_send_response+0xd0>)
 8019166:	f00a fd3b 	bl	8023be0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801916a:	687b      	ldr	r3, [r7, #4]
 801916c:	685b      	ldr	r3, [r3, #4]
 801916e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8019170:	69fb      	ldr	r3, [r7, #28]
 8019172:	685b      	ldr	r3, [r3, #4]
 8019174:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8019176:	697b      	ldr	r3, [r7, #20]
 8019178:	78fa      	ldrb	r2, [r7, #3]
 801917a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801917c:	697b      	ldr	r3, [r7, #20]
 801917e:	78ba      	ldrb	r2, [r7, #2]
 8019180:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8019182:	697b      	ldr	r3, [r7, #20]
 8019184:	2200      	movs	r2, #0
 8019186:	711a      	strb	r2, [r3, #4]
 8019188:	2200      	movs	r2, #0
 801918a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801918c:	697b      	ldr	r3, [r7, #20]
 801918e:	2200      	movs	r2, #0
 8019190:	719a      	strb	r2, [r3, #6]
 8019192:	2200      	movs	r2, #0
 8019194:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8019196:	69fb      	ldr	r3, [r7, #28]
 8019198:	685b      	ldr	r3, [r3, #4]
 801919a:	f103 0008 	add.w	r0, r3, #8
 801919e:	687b      	ldr	r3, [r7, #4]
 80191a0:	685b      	ldr	r3, [r3, #4]
 80191a2:	221c      	movs	r2, #28
 80191a4:	4619      	mov	r1, r3
 80191a6:	f00a fbf5 	bl	8023994 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80191aa:	69bb      	ldr	r3, [r7, #24]
 80191ac:	68db      	ldr	r3, [r3, #12]
 80191ae:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80191b0:	f107 030c 	add.w	r3, r7, #12
 80191b4:	4618      	mov	r0, r3
 80191b6:	f000 fcaf 	bl	8019b18 <ip4_route>
 80191ba:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80191bc:	693b      	ldr	r3, [r7, #16]
 80191be:	2b00      	cmp	r3, #0
 80191c0:	d011      	beq.n	80191e6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80191c2:	697b      	ldr	r3, [r7, #20]
 80191c4:	2200      	movs	r2, #0
 80191c6:	709a      	strb	r2, [r3, #2]
 80191c8:	2200      	movs	r2, #0
 80191ca:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80191cc:	f107 020c 	add.w	r2, r7, #12
 80191d0:	693b      	ldr	r3, [r7, #16]
 80191d2:	9302      	str	r3, [sp, #8]
 80191d4:	2301      	movs	r3, #1
 80191d6:	9301      	str	r3, [sp, #4]
 80191d8:	2300      	movs	r3, #0
 80191da:	9300      	str	r3, [sp, #0]
 80191dc:	23ff      	movs	r3, #255	; 0xff
 80191de:	2100      	movs	r1, #0
 80191e0:	69f8      	ldr	r0, [r7, #28]
 80191e2:	f000 fea1 	bl	8019f28 <ip4_output_if>
  }
  pbuf_free(q);
 80191e6:	69f8      	ldr	r0, [r7, #28]
 80191e8:	f7f7 fb5a 	bl	80108a0 <pbuf_free>
 80191ec:	e000      	b.n	80191f0 <icmp_send_response+0xc0>
    return;
 80191ee:	bf00      	nop
}
 80191f0:	3720      	adds	r7, #32
 80191f2:	46bd      	mov	sp, r7
 80191f4:	bd80      	pop	{r7, pc}
 80191f6:	bf00      	nop
 80191f8:	08028960 	.word	0x08028960
 80191fc:	08028a2c 	.word	0x08028a2c
 8019200:	080289d0 	.word	0x080289d0

08019204 <igmp_init>:
/**
 * Initialize the IGMP module
 */
void
igmp_init(void)
{
 8019204:	b480      	push	{r7}
 8019206:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_init: initializing\n"));

  IP4_ADDR(&allsystems, 224, 0, 0, 1);
 8019208:	4b05      	ldr	r3, [pc, #20]	; (8019220 <igmp_init+0x1c>)
 801920a:	4a06      	ldr	r2, [pc, #24]	; (8019224 <igmp_init+0x20>)
 801920c:	601a      	str	r2, [r3, #0]
  IP4_ADDR(&allrouters, 224, 0, 0, 2);
 801920e:	4b06      	ldr	r3, [pc, #24]	; (8019228 <igmp_init+0x24>)
 8019210:	4a06      	ldr	r2, [pc, #24]	; (801922c <igmp_init+0x28>)
 8019212:	601a      	str	r2, [r3, #0]
}
 8019214:	bf00      	nop
 8019216:	46bd      	mov	sp, r7
 8019218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801921c:	4770      	bx	lr
 801921e:	bf00      	nop
 8019220:	2000fd90 	.word	0x2000fd90
 8019224:	010000e0 	.word	0x010000e0
 8019228:	2000fd94 	.word	0x2000fd94
 801922c:	020000e0 	.word	0x020000e0

08019230 <igmp_start>:
 *
 * @param netif network interface on which start IGMP processing
 */
err_t
igmp_start(struct netif *netif)
{
 8019230:	b580      	push	{r7, lr}
 8019232:	b084      	sub	sp, #16
 8019234:	af00      	add	r7, sp, #0
 8019236:	6078      	str	r0, [r7, #4]
  struct igmp_group *group;

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: starting IGMP processing on if %p\n", (void *)netif));

  group = igmp_lookup_group(netif, &allsystems);
 8019238:	4911      	ldr	r1, [pc, #68]	; (8019280 <igmp_start+0x50>)
 801923a:	6878      	ldr	r0, [r7, #4]
 801923c:	f000 f85e 	bl	80192fc <igmp_lookup_group>
 8019240:	60f8      	str	r0, [r7, #12]

  if (group != NULL) {
 8019242:	68fb      	ldr	r3, [r7, #12]
 8019244:	2b00      	cmp	r3, #0
 8019246:	d014      	beq.n	8019272 <igmp_start+0x42>
    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 8019248:	68fb      	ldr	r3, [r7, #12]
 801924a:	2202      	movs	r2, #2
 801924c:	725a      	strb	r2, [r3, #9]
    group->use++;
 801924e:	68fb      	ldr	r3, [r7, #12]
 8019250:	7b1b      	ldrb	r3, [r3, #12]
 8019252:	3301      	adds	r3, #1
 8019254:	b2da      	uxtb	r2, r3
 8019256:	68fb      	ldr	r3, [r7, #12]
 8019258:	731a      	strb	r2, [r3, #12]

    /* Allow the igmp messages at the MAC level */
    if (netif->igmp_mac_filter != NULL) {
 801925a:	687b      	ldr	r3, [r7, #4]
 801925c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801925e:	2b00      	cmp	r3, #0
 8019260:	d005      	beq.n	801926e <igmp_start+0x3e>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: igmp_mac_filter(ADD "));
      ip4_addr_debug_print_val(IGMP_DEBUG, allsystems);
      LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void *)netif));
      netif->igmp_mac_filter(netif, &allsystems, NETIF_ADD_MAC_FILTER);
 8019262:	687b      	ldr	r3, [r7, #4]
 8019264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019266:	2201      	movs	r2, #1
 8019268:	4905      	ldr	r1, [pc, #20]	; (8019280 <igmp_start+0x50>)
 801926a:	6878      	ldr	r0, [r7, #4]
 801926c:	4798      	blx	r3
    }

    return ERR_OK;
 801926e:	2300      	movs	r3, #0
 8019270:	e001      	b.n	8019276 <igmp_start+0x46>
  }

  return ERR_MEM;
 8019272:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8019276:	4618      	mov	r0, r3
 8019278:	3710      	adds	r7, #16
 801927a:	46bd      	mov	sp, r7
 801927c:	bd80      	pop	{r7, pc}
 801927e:	bf00      	nop
 8019280:	2000fd90 	.word	0x2000fd90

08019284 <igmp_report_groups>:
 *
 * @param netif network interface on which report IGMP memberships
 */
void
igmp_report_groups(struct netif *netif)
{
 8019284:	b580      	push	{r7, lr}
 8019286:	b084      	sub	sp, #16
 8019288:	af00      	add	r7, sp, #0
 801928a:	6078      	str	r0, [r7, #4]
  struct igmp_group *group = netif_igmp_data(netif);
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019290:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_report_groups: sending IGMP reports on if %p\n", (void *)netif));

  /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
  if (group != NULL) {
 8019292:	68fb      	ldr	r3, [r7, #12]
 8019294:	2b00      	cmp	r3, #0
 8019296:	d00a      	beq.n	80192ae <igmp_report_groups+0x2a>
    group = group->next;
 8019298:	68fb      	ldr	r3, [r7, #12]
 801929a:	681b      	ldr	r3, [r3, #0]
 801929c:	60fb      	str	r3, [r7, #12]
  }

  while (group != NULL) {
 801929e:	e006      	b.n	80192ae <igmp_report_groups+0x2a>
    igmp_delaying_member(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
 80192a0:	2105      	movs	r1, #5
 80192a2:	68f8      	ldr	r0, [r7, #12]
 80192a4:	f000 fb7d 	bl	80199a2 <igmp_delaying_member>
    group = group->next;
 80192a8:	68fb      	ldr	r3, [r7, #12]
 80192aa:	681b      	ldr	r3, [r3, #0]
 80192ac:	60fb      	str	r3, [r7, #12]
  while (group != NULL) {
 80192ae:	68fb      	ldr	r3, [r7, #12]
 80192b0:	2b00      	cmp	r3, #0
 80192b2:	d1f5      	bne.n	80192a0 <igmp_report_groups+0x1c>
  }
}
 80192b4:	bf00      	nop
 80192b6:	bf00      	nop
 80192b8:	3710      	adds	r7, #16
 80192ba:	46bd      	mov	sp, r7
 80192bc:	bd80      	pop	{r7, pc}

080192be <igmp_lookfor_group>:
 * @return a struct igmp_group* if the group has been found,
 *         NULL if the group wasn't found.
 */
struct igmp_group *
igmp_lookfor_group(struct netif *ifp, const ip4_addr_t *addr)
{
 80192be:	b480      	push	{r7}
 80192c0:	b085      	sub	sp, #20
 80192c2:	af00      	add	r7, sp, #0
 80192c4:	6078      	str	r0, [r7, #4]
 80192c6:	6039      	str	r1, [r7, #0]
  struct igmp_group *group = netif_igmp_data(ifp);
 80192c8:	687b      	ldr	r3, [r7, #4]
 80192ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192cc:	60fb      	str	r3, [r7, #12]

  while (group != NULL) {
 80192ce:	e00a      	b.n	80192e6 <igmp_lookfor_group+0x28>
    if (ip4_addr_cmp(&(group->group_address), addr)) {
 80192d0:	68fb      	ldr	r3, [r7, #12]
 80192d2:	685a      	ldr	r2, [r3, #4]
 80192d4:	683b      	ldr	r3, [r7, #0]
 80192d6:	681b      	ldr	r3, [r3, #0]
 80192d8:	429a      	cmp	r2, r3
 80192da:	d101      	bne.n	80192e0 <igmp_lookfor_group+0x22>
      return group;
 80192dc:	68fb      	ldr	r3, [r7, #12]
 80192de:	e006      	b.n	80192ee <igmp_lookfor_group+0x30>
    }
    group = group->next;
 80192e0:	68fb      	ldr	r3, [r7, #12]
 80192e2:	681b      	ldr	r3, [r3, #0]
 80192e4:	60fb      	str	r3, [r7, #12]
  while (group != NULL) {
 80192e6:	68fb      	ldr	r3, [r7, #12]
 80192e8:	2b00      	cmp	r3, #0
 80192ea:	d1f1      	bne.n	80192d0 <igmp_lookfor_group+0x12>
  }

  /* to be clearer, we return NULL here instead of
   * 'group' (which is also NULL at this point).
   */
  return NULL;
 80192ec:	2300      	movs	r3, #0
}
 80192ee:	4618      	mov	r0, r3
 80192f0:	3714      	adds	r7, #20
 80192f2:	46bd      	mov	sp, r7
 80192f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192f8:	4770      	bx	lr
	...

080192fc <igmp_lookup_group>:
 * @return a struct igmp_group*,
 *         NULL on memory error.
 */
static struct igmp_group *
igmp_lookup_group(struct netif *ifp, const ip4_addr_t *addr)
{
 80192fc:	b580      	push	{r7, lr}
 80192fe:	b084      	sub	sp, #16
 8019300:	af00      	add	r7, sp, #0
 8019302:	6078      	str	r0, [r7, #4]
 8019304:	6039      	str	r1, [r7, #0]
  struct igmp_group *group;
  struct igmp_group *list_head = netif_igmp_data(ifp);
 8019306:	687b      	ldr	r3, [r7, #4]
 8019308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801930a:	60fb      	str	r3, [r7, #12]

  /* Search if the group already exists */
  group = igmp_lookfor_group(ifp, addr);
 801930c:	6839      	ldr	r1, [r7, #0]
 801930e:	6878      	ldr	r0, [r7, #4]
 8019310:	f7ff ffd5 	bl	80192be <igmp_lookfor_group>
 8019314:	60b8      	str	r0, [r7, #8]
  if (group != NULL) {
 8019316:	68bb      	ldr	r3, [r7, #8]
 8019318:	2b00      	cmp	r3, #0
 801931a:	d001      	beq.n	8019320 <igmp_lookup_group+0x24>
    /* Group already exists. */
    return group;
 801931c:	68bb      	ldr	r3, [r7, #8]
 801931e:	e047      	b.n	80193b0 <igmp_lookup_group+0xb4>
  }

  /* Group doesn't exist yet, create a new one */
  group = (struct igmp_group *)memp_malloc(MEMP_IGMP_GROUP);
 8019320:	200a      	movs	r0, #10
 8019322:	f7f6 fb3f 	bl	800f9a4 <memp_malloc>
 8019326:	60b8      	str	r0, [r7, #8]
  if (group != NULL) {
 8019328:	68bb      	ldr	r3, [r7, #8]
 801932a:	2b00      	cmp	r3, #0
 801932c:	d03f      	beq.n	80193ae <igmp_lookup_group+0xb2>
    ip4_addr_set(&(group->group_address), addr);
 801932e:	683b      	ldr	r3, [r7, #0]
 8019330:	2b00      	cmp	r3, #0
 8019332:	d002      	beq.n	801933a <igmp_lookup_group+0x3e>
 8019334:	683b      	ldr	r3, [r7, #0]
 8019336:	681b      	ldr	r3, [r3, #0]
 8019338:	e000      	b.n	801933c <igmp_lookup_group+0x40>
 801933a:	2300      	movs	r3, #0
 801933c:	68ba      	ldr	r2, [r7, #8]
 801933e:	6053      	str	r3, [r2, #4]
    group->timer              = 0; /* Not running */
 8019340:	68bb      	ldr	r3, [r7, #8]
 8019342:	2200      	movs	r2, #0
 8019344:	815a      	strh	r2, [r3, #10]
    group->group_state        = IGMP_GROUP_NON_MEMBER;
 8019346:	68bb      	ldr	r3, [r7, #8]
 8019348:	2200      	movs	r2, #0
 801934a:	725a      	strb	r2, [r3, #9]
    group->last_reporter_flag = 0;
 801934c:	68bb      	ldr	r3, [r7, #8]
 801934e:	2200      	movs	r2, #0
 8019350:	721a      	strb	r2, [r3, #8]
    group->use                = 0;
 8019352:	68bb      	ldr	r3, [r7, #8]
 8019354:	2200      	movs	r2, #0
 8019356:	731a      	strb	r2, [r3, #12]

    /* Ensure allsystems group is always first in list */
    if (list_head == NULL) {
 8019358:	68fb      	ldr	r3, [r7, #12]
 801935a:	2b00      	cmp	r3, #0
 801935c:	d113      	bne.n	8019386 <igmp_lookup_group+0x8a>
      /* this is the first entry in linked list */
      LWIP_ASSERT("igmp_lookup_group: first group must be allsystems",
 801935e:	683b      	ldr	r3, [r7, #0]
 8019360:	681a      	ldr	r2, [r3, #0]
 8019362:	4b15      	ldr	r3, [pc, #84]	; (80193b8 <igmp_lookup_group+0xbc>)
 8019364:	681b      	ldr	r3, [r3, #0]
 8019366:	429a      	cmp	r2, r3
 8019368:	d006      	beq.n	8019378 <igmp_lookup_group+0x7c>
 801936a:	4b14      	ldr	r3, [pc, #80]	; (80193bc <igmp_lookup_group+0xc0>)
 801936c:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8019370:	4913      	ldr	r1, [pc, #76]	; (80193c0 <igmp_lookup_group+0xc4>)
 8019372:	4814      	ldr	r0, [pc, #80]	; (80193c4 <igmp_lookup_group+0xc8>)
 8019374:	f00a fc34 	bl	8023be0 <iprintf>
                  (ip4_addr_cmp(addr, &allsystems) != 0));
      group->next = NULL;
 8019378:	68bb      	ldr	r3, [r7, #8]
 801937a:	2200      	movs	r2, #0
 801937c:	601a      	str	r2, [r3, #0]
      netif_set_client_data(ifp, LWIP_NETIF_CLIENT_DATA_INDEX_IGMP, group);
 801937e:	687b      	ldr	r3, [r7, #4]
 8019380:	68ba      	ldr	r2, [r7, #8]
 8019382:	625a      	str	r2, [r3, #36]	; 0x24
 8019384:	e013      	b.n	80193ae <igmp_lookup_group+0xb2>
    } else {
      /* append _after_ first entry */
      LWIP_ASSERT("igmp_lookup_group: all except first group must not be allsystems",
 8019386:	683b      	ldr	r3, [r7, #0]
 8019388:	681a      	ldr	r2, [r3, #0]
 801938a:	4b0b      	ldr	r3, [pc, #44]	; (80193b8 <igmp_lookup_group+0xbc>)
 801938c:	681b      	ldr	r3, [r3, #0]
 801938e:	429a      	cmp	r2, r3
 8019390:	d106      	bne.n	80193a0 <igmp_lookup_group+0xa4>
 8019392:	4b0a      	ldr	r3, [pc, #40]	; (80193bc <igmp_lookup_group+0xc0>)
 8019394:	f44f 7289 	mov.w	r2, #274	; 0x112
 8019398:	490b      	ldr	r1, [pc, #44]	; (80193c8 <igmp_lookup_group+0xcc>)
 801939a:	480a      	ldr	r0, [pc, #40]	; (80193c4 <igmp_lookup_group+0xc8>)
 801939c:	f00a fc20 	bl	8023be0 <iprintf>
                  (ip4_addr_cmp(addr, &allsystems) == 0));
      group->next = list_head->next;
 80193a0:	68fb      	ldr	r3, [r7, #12]
 80193a2:	681a      	ldr	r2, [r3, #0]
 80193a4:	68bb      	ldr	r3, [r7, #8]
 80193a6:	601a      	str	r2, [r3, #0]
      list_head->next = group;
 80193a8:	68fb      	ldr	r3, [r7, #12]
 80193aa:	68ba      	ldr	r2, [r7, #8]
 80193ac:	601a      	str	r2, [r3, #0]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_lookup_group: %sallocated a new group with address ", (group ? "" : "impossible to ")));
  ip4_addr_debug_print(IGMP_DEBUG, addr);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)ifp));

  return group;
 80193ae:	68bb      	ldr	r3, [r7, #8]
}
 80193b0:	4618      	mov	r0, r3
 80193b2:	3710      	adds	r7, #16
 80193b4:	46bd      	mov	sp, r7
 80193b6:	bd80      	pop	{r7, pc}
 80193b8:	2000fd90 	.word	0x2000fd90
 80193bc:	08028a58 	.word	0x08028a58
 80193c0:	08028a90 	.word	0x08028a90
 80193c4:	08028ac4 	.word	0x08028ac4
 80193c8:	08028aec 	.word	0x08028aec

080193cc <igmp_remove_group>:
 * @param group the group to remove from the netif's igmp group list
 * @return ERR_OK if group was removed from the list, an err_t otherwise
 */
static err_t
igmp_remove_group(struct netif *netif, struct igmp_group *group)
{
 80193cc:	b480      	push	{r7}
 80193ce:	b085      	sub	sp, #20
 80193d0:	af00      	add	r7, sp, #0
 80193d2:	6078      	str	r0, [r7, #4]
 80193d4:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 80193d6:	2300      	movs	r3, #0
 80193d8:	73fb      	strb	r3, [r7, #15]
  struct igmp_group *tmp_group;

  /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
  for (tmp_group = netif_igmp_data(netif); tmp_group != NULL; tmp_group = tmp_group->next) {
 80193da:	687b      	ldr	r3, [r7, #4]
 80193dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80193de:	60bb      	str	r3, [r7, #8]
 80193e0:	e00c      	b.n	80193fc <igmp_remove_group+0x30>
    if (tmp_group->next == group) {
 80193e2:	68bb      	ldr	r3, [r7, #8]
 80193e4:	681b      	ldr	r3, [r3, #0]
 80193e6:	683a      	ldr	r2, [r7, #0]
 80193e8:	429a      	cmp	r2, r3
 80193ea:	d104      	bne.n	80193f6 <igmp_remove_group+0x2a>
      tmp_group->next = group->next;
 80193ec:	683b      	ldr	r3, [r7, #0]
 80193ee:	681a      	ldr	r2, [r3, #0]
 80193f0:	68bb      	ldr	r3, [r7, #8]
 80193f2:	601a      	str	r2, [r3, #0]
      break;
 80193f4:	e005      	b.n	8019402 <igmp_remove_group+0x36>
  for (tmp_group = netif_igmp_data(netif); tmp_group != NULL; tmp_group = tmp_group->next) {
 80193f6:	68bb      	ldr	r3, [r7, #8]
 80193f8:	681b      	ldr	r3, [r3, #0]
 80193fa:	60bb      	str	r3, [r7, #8]
 80193fc:	68bb      	ldr	r3, [r7, #8]
 80193fe:	2b00      	cmp	r3, #0
 8019400:	d1ef      	bne.n	80193e2 <igmp_remove_group+0x16>
    }
  }
  /* Group not found in netif's igmp group list */
  if (tmp_group == NULL) {
 8019402:	68bb      	ldr	r3, [r7, #8]
 8019404:	2b00      	cmp	r3, #0
 8019406:	d101      	bne.n	801940c <igmp_remove_group+0x40>
    err = ERR_ARG;
 8019408:	23f0      	movs	r3, #240	; 0xf0
 801940a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 801940c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019410:	4618      	mov	r0, r3
 8019412:	3714      	adds	r7, #20
 8019414:	46bd      	mov	sp, r7
 8019416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801941a:	4770      	bx	lr

0801941c <igmp_input>:
 * @param inp network interface on which the packet was received
 * @param dest destination ip address of the igmp packet
 */
void
igmp_input(struct pbuf *p, struct netif *inp, const ip4_addr_t *dest)
{
 801941c:	b580      	push	{r7, lr}
 801941e:	b088      	sub	sp, #32
 8019420:	af00      	add	r7, sp, #0
 8019422:	60f8      	str	r0, [r7, #12]
 8019424:	60b9      	str	r1, [r7, #8]
 8019426:	607a      	str	r2, [r7, #4]
  struct igmp_group *groupref;

  IGMP_STATS_INC(igmp.recv);

  /* Note that the length CAN be greater than 8 but only 8 are used - All are included in the checksum */
  if (p->len < IGMP_MINLEN) {
 8019428:	68fb      	ldr	r3, [r7, #12]
 801942a:	895b      	ldrh	r3, [r3, #10]
 801942c:	2b07      	cmp	r3, #7
 801942e:	d803      	bhi.n	8019438 <igmp_input+0x1c>
    pbuf_free(p);
 8019430:	68f8      	ldr	r0, [r7, #12]
 8019432:	f7f7 fa35 	bl	80108a0 <pbuf_free>
    IGMP_STATS_INC(igmp.lenerr);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: length error\n"));
    return;
 8019436:	e086      	b.n	8019546 <igmp_input+0x12a>
  LWIP_DEBUGF(IGMP_DEBUG, (" to address "));
  ip4_addr_debug_print_val(IGMP_DEBUG, ip4_current_header()->dest);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)inp));

  /* Now calculate and check the checksum */
  igmp = (struct igmp_msg *)p->payload;
 8019438:	68fb      	ldr	r3, [r7, #12]
 801943a:	685b      	ldr	r3, [r3, #4]
 801943c:	617b      	str	r3, [r7, #20]
  if (inet_chksum(igmp, p->len)) {
 801943e:	68fb      	ldr	r3, [r7, #12]
 8019440:	895b      	ldrh	r3, [r3, #10]
 8019442:	4619      	mov	r1, r3
 8019444:	6978      	ldr	r0, [r7, #20]
 8019446:	f7f5 fe10 	bl	800f06a <inet_chksum>
 801944a:	4603      	mov	r3, r0
 801944c:	2b00      	cmp	r3, #0
 801944e:	d003      	beq.n	8019458 <igmp_input+0x3c>
    pbuf_free(p);
 8019450:	68f8      	ldr	r0, [r7, #12]
 8019452:	f7f7 fa25 	bl	80108a0 <pbuf_free>
    IGMP_STATS_INC(igmp.chkerr);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: checksum error\n"));
    return;
 8019456:	e076      	b.n	8019546 <igmp_input+0x12a>
  }

  /* Packet is ok so find an existing group */
  group = igmp_lookfor_group(inp, dest); /* use the destination IP address of incoming packet */
 8019458:	6879      	ldr	r1, [r7, #4]
 801945a:	68b8      	ldr	r0, [r7, #8]
 801945c:	f7ff ff2f 	bl	80192be <igmp_lookfor_group>
 8019460:	61f8      	str	r0, [r7, #28]

  /* If group can be found or create... */
  if (!group) {
 8019462:	69fb      	ldr	r3, [r7, #28]
 8019464:	2b00      	cmp	r3, #0
 8019466:	d103      	bne.n	8019470 <igmp_input+0x54>
    pbuf_free(p);
 8019468:	68f8      	ldr	r0, [r7, #12]
 801946a:	f7f7 fa19 	bl	80108a0 <pbuf_free>
    IGMP_STATS_INC(igmp.drop);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP frame not for us\n"));
    return;
 801946e:	e06a      	b.n	8019546 <igmp_input+0x12a>
  }

  /* NOW ACT ON THE INCOMING MESSAGE TYPE... */
  switch (igmp->igmp_msgtype) {
 8019470:	697b      	ldr	r3, [r7, #20]
 8019472:	781b      	ldrb	r3, [r3, #0]
 8019474:	2b11      	cmp	r3, #17
 8019476:	d002      	beq.n	801947e <igmp_input+0x62>
 8019478:	2b16      	cmp	r3, #22
 801947a:	d04f      	beq.n	801951c <igmp_input+0x100>
      break;
    default:
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: unexpected msg %d in state %d on group %p on if %p\n",
                               igmp->igmp_msgtype, group->group_state, (void *)&group, (void *)inp));
      IGMP_STATS_INC(igmp.proterr);
      break;
 801947c:	e05f      	b.n	801953e <igmp_input+0x122>
      if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
 801947e:	687b      	ldr	r3, [r7, #4]
 8019480:	681a      	ldr	r2, [r3, #0]
 8019482:	4b32      	ldr	r3, [pc, #200]	; (801954c <igmp_input+0x130>)
 8019484:	681b      	ldr	r3, [r3, #0]
 8019486:	429a      	cmp	r2, r3
 8019488:	d125      	bne.n	80194d6 <igmp_input+0xba>
 801948a:	697b      	ldr	r3, [r7, #20]
 801948c:	3304      	adds	r3, #4
 801948e:	2b00      	cmp	r3, #0
 8019490:	d003      	beq.n	801949a <igmp_input+0x7e>
 8019492:	697b      	ldr	r3, [r7, #20]
 8019494:	685b      	ldr	r3, [r3, #4]
 8019496:	2b00      	cmp	r3, #0
 8019498:	d11d      	bne.n	80194d6 <igmp_input+0xba>
        if (igmp->igmp_maxresp == 0) {
 801949a:	697b      	ldr	r3, [r7, #20]
 801949c:	785b      	ldrb	r3, [r3, #1]
 801949e:	2b00      	cmp	r3, #0
 80194a0:	d102      	bne.n	80194a8 <igmp_input+0x8c>
          igmp->igmp_maxresp = IGMP_V1_DELAYING_MEMBER_TMR;
 80194a2:	697b      	ldr	r3, [r7, #20]
 80194a4:	220a      	movs	r2, #10
 80194a6:	705a      	strb	r2, [r3, #1]
        groupref = netif_igmp_data(inp);
 80194a8:	68bb      	ldr	r3, [r7, #8]
 80194aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194ac:	61bb      	str	r3, [r7, #24]
        if (groupref != NULL) {
 80194ae:	69bb      	ldr	r3, [r7, #24]
 80194b0:	2b00      	cmp	r3, #0
 80194b2:	d00c      	beq.n	80194ce <igmp_input+0xb2>
          groupref = groupref->next;
 80194b4:	69bb      	ldr	r3, [r7, #24]
 80194b6:	681b      	ldr	r3, [r3, #0]
 80194b8:	61bb      	str	r3, [r7, #24]
        while (groupref) {
 80194ba:	e008      	b.n	80194ce <igmp_input+0xb2>
          igmp_delaying_member(groupref, igmp->igmp_maxresp);
 80194bc:	697b      	ldr	r3, [r7, #20]
 80194be:	785b      	ldrb	r3, [r3, #1]
 80194c0:	4619      	mov	r1, r3
 80194c2:	69b8      	ldr	r0, [r7, #24]
 80194c4:	f000 fa6d 	bl	80199a2 <igmp_delaying_member>
          groupref = groupref->next;
 80194c8:	69bb      	ldr	r3, [r7, #24]
 80194ca:	681b      	ldr	r3, [r3, #0]
 80194cc:	61bb      	str	r3, [r7, #24]
        while (groupref) {
 80194ce:	69bb      	ldr	r3, [r7, #24]
 80194d0:	2b00      	cmp	r3, #0
 80194d2:	d1f3      	bne.n	80194bc <igmp_input+0xa0>
      if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
 80194d4:	e021      	b.n	801951a <igmp_input+0xfe>
        if (!ip4_addr_isany(&igmp->igmp_group_address)) {
 80194d6:	697b      	ldr	r3, [r7, #20]
 80194d8:	3304      	adds	r3, #4
 80194da:	2b00      	cmp	r3, #0
 80194dc:	d02c      	beq.n	8019538 <igmp_input+0x11c>
 80194de:	697b      	ldr	r3, [r7, #20]
 80194e0:	685b      	ldr	r3, [r3, #4]
 80194e2:	2b00      	cmp	r3, #0
 80194e4:	d028      	beq.n	8019538 <igmp_input+0x11c>
          if (ip4_addr_cmp(dest, &allsystems)) {
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	681a      	ldr	r2, [r3, #0]
 80194ea:	4b18      	ldr	r3, [pc, #96]	; (801954c <igmp_input+0x130>)
 80194ec:	681b      	ldr	r3, [r3, #0]
 80194ee:	429a      	cmp	r2, r3
 80194f0:	d109      	bne.n	8019506 <igmp_input+0xea>
            ip4_addr_copy(groupaddr, igmp->igmp_group_address);
 80194f2:	697b      	ldr	r3, [r7, #20]
 80194f4:	685b      	ldr	r3, [r3, #4]
 80194f6:	613b      	str	r3, [r7, #16]
            group = igmp_lookfor_group(inp, &groupaddr);
 80194f8:	f107 0310 	add.w	r3, r7, #16
 80194fc:	4619      	mov	r1, r3
 80194fe:	68b8      	ldr	r0, [r7, #8]
 8019500:	f7ff fedd 	bl	80192be <igmp_lookfor_group>
 8019504:	61f8      	str	r0, [r7, #28]
          if (group != NULL) {
 8019506:	69fb      	ldr	r3, [r7, #28]
 8019508:	2b00      	cmp	r3, #0
 801950a:	d015      	beq.n	8019538 <igmp_input+0x11c>
            igmp_delaying_member(group, igmp->igmp_maxresp);
 801950c:	697b      	ldr	r3, [r7, #20]
 801950e:	785b      	ldrb	r3, [r3, #1]
 8019510:	4619      	mov	r1, r3
 8019512:	69f8      	ldr	r0, [r7, #28]
 8019514:	f000 fa45 	bl	80199a2 <igmp_delaying_member>
      break;
 8019518:	e00e      	b.n	8019538 <igmp_input+0x11c>
 801951a:	e00d      	b.n	8019538 <igmp_input+0x11c>
      if (group->group_state == IGMP_GROUP_DELAYING_MEMBER) {
 801951c:	69fb      	ldr	r3, [r7, #28]
 801951e:	7a5b      	ldrb	r3, [r3, #9]
 8019520:	2b01      	cmp	r3, #1
 8019522:	d10b      	bne.n	801953c <igmp_input+0x120>
        group->timer = 0; /* stopped */
 8019524:	69fb      	ldr	r3, [r7, #28]
 8019526:	2200      	movs	r2, #0
 8019528:	815a      	strh	r2, [r3, #10]
        group->group_state = IGMP_GROUP_IDLE_MEMBER;
 801952a:	69fb      	ldr	r3, [r7, #28]
 801952c:	2202      	movs	r2, #2
 801952e:	725a      	strb	r2, [r3, #9]
        group->last_reporter_flag = 0;
 8019530:	69fb      	ldr	r3, [r7, #28]
 8019532:	2200      	movs	r2, #0
 8019534:	721a      	strb	r2, [r3, #8]
      break;
 8019536:	e001      	b.n	801953c <igmp_input+0x120>
      break;
 8019538:	bf00      	nop
 801953a:	e000      	b.n	801953e <igmp_input+0x122>
      break;
 801953c:	bf00      	nop
  }

  pbuf_free(p);
 801953e:	68f8      	ldr	r0, [r7, #12]
 8019540:	f7f7 f9ae 	bl	80108a0 <pbuf_free>
  return;
 8019544:	bf00      	nop
}
 8019546:	3720      	adds	r7, #32
 8019548:	46bd      	mov	sp, r7
 801954a:	bd80      	pop	{r7, pc}
 801954c:	2000fd90 	.word	0x2000fd90

08019550 <igmp_joingroup>:
 * @param groupaddr the ip address of the group which to join
 * @return ERR_OK if group was joined on the netif(s), an err_t otherwise
 */
err_t
igmp_joingroup(const ip4_addr_t *ifaddr, const ip4_addr_t *groupaddr)
{
 8019550:	b580      	push	{r7, lr}
 8019552:	b084      	sub	sp, #16
 8019554:	af00      	add	r7, sp, #0
 8019556:	6078      	str	r0, [r7, #4]
 8019558:	6039      	str	r1, [r7, #0]
  err_t err = ERR_VAL; /* no matching interface */
 801955a:	23fa      	movs	r3, #250	; 0xfa
 801955c:	73fb      	strb	r3, [r7, #15]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_joingroup: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 801955e:	683b      	ldr	r3, [r7, #0]
 8019560:	681b      	ldr	r3, [r3, #0]
 8019562:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019566:	2be0      	cmp	r3, #224	; 0xe0
 8019568:	d009      	beq.n	801957e <igmp_joingroup+0x2e>
 801956a:	4b26      	ldr	r3, [pc, #152]	; (8019604 <igmp_joingroup+0xb4>)
 801956c:	f240 12c9 	movw	r2, #457	; 0x1c9
 8019570:	4925      	ldr	r1, [pc, #148]	; (8019608 <igmp_joingroup+0xb8>)
 8019572:	4826      	ldr	r0, [pc, #152]	; (801960c <igmp_joingroup+0xbc>)
 8019574:	f00a fb34 	bl	8023be0 <iprintf>
 8019578:	f06f 0305 	mvn.w	r3, #5
 801957c:	e03d      	b.n	80195fa <igmp_joingroup+0xaa>
  LWIP_ERROR("igmp_joingroup: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
 801957e:	683b      	ldr	r3, [r7, #0]
 8019580:	681a      	ldr	r2, [r3, #0]
 8019582:	4b23      	ldr	r3, [pc, #140]	; (8019610 <igmp_joingroup+0xc0>)
 8019584:	681b      	ldr	r3, [r3, #0]
 8019586:	429a      	cmp	r2, r3
 8019588:	d109      	bne.n	801959e <igmp_joingroup+0x4e>
 801958a:	4b1e      	ldr	r3, [pc, #120]	; (8019604 <igmp_joingroup+0xb4>)
 801958c:	f44f 72e5 	mov.w	r2, #458	; 0x1ca
 8019590:	4920      	ldr	r1, [pc, #128]	; (8019614 <igmp_joingroup+0xc4>)
 8019592:	481e      	ldr	r0, [pc, #120]	; (801960c <igmp_joingroup+0xbc>)
 8019594:	f00a fb24 	bl	8023be0 <iprintf>
 8019598:	f06f 0305 	mvn.w	r3, #5
 801959c:	e02d      	b.n	80195fa <igmp_joingroup+0xaa>

  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801959e:	4b1e      	ldr	r3, [pc, #120]	; (8019618 <igmp_joingroup+0xc8>)
 80195a0:	681b      	ldr	r3, [r3, #0]
 80195a2:	60bb      	str	r3, [r7, #8]
 80195a4:	e024      	b.n	80195f0 <igmp_joingroup+0xa0>
    /* Should we join this interface ? */
    if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
 80195a6:	68bb      	ldr	r3, [r7, #8]
 80195a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80195ac:	f003 0320 	and.w	r3, r3, #32
 80195b0:	2b00      	cmp	r3, #0
 80195b2:	d01a      	beq.n	80195ea <igmp_joingroup+0x9a>
 80195b4:	687b      	ldr	r3, [r7, #4]
 80195b6:	2b00      	cmp	r3, #0
 80195b8:	d00a      	beq.n	80195d0 <igmp_joingroup+0x80>
 80195ba:	687b      	ldr	r3, [r7, #4]
 80195bc:	681b      	ldr	r3, [r3, #0]
 80195be:	2b00      	cmp	r3, #0
 80195c0:	d006      	beq.n	80195d0 <igmp_joingroup+0x80>
 80195c2:	68bb      	ldr	r3, [r7, #8]
 80195c4:	3304      	adds	r3, #4
 80195c6:	681a      	ldr	r2, [r3, #0]
 80195c8:	687b      	ldr	r3, [r7, #4]
 80195ca:	681b      	ldr	r3, [r3, #0]
 80195cc:	429a      	cmp	r2, r3
 80195ce:	d10c      	bne.n	80195ea <igmp_joingroup+0x9a>
      err = igmp_joingroup_netif(netif, groupaddr);
 80195d0:	6839      	ldr	r1, [r7, #0]
 80195d2:	68b8      	ldr	r0, [r7, #8]
 80195d4:	f000 f822 	bl	801961c <igmp_joingroup_netif>
 80195d8:	4603      	mov	r3, r0
 80195da:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 80195dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80195e0:	2b00      	cmp	r3, #0
 80195e2:	d002      	beq.n	80195ea <igmp_joingroup+0x9a>
        /* Return an error even if some network interfaces are joined */
        /** @todo undo any other netif already joined */
        return err;
 80195e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80195e8:	e007      	b.n	80195fa <igmp_joingroup+0xaa>
  NETIF_FOREACH(netif) {
 80195ea:	68bb      	ldr	r3, [r7, #8]
 80195ec:	681b      	ldr	r3, [r3, #0]
 80195ee:	60bb      	str	r3, [r7, #8]
 80195f0:	68bb      	ldr	r3, [r7, #8]
 80195f2:	2b00      	cmp	r3, #0
 80195f4:	d1d7      	bne.n	80195a6 <igmp_joingroup+0x56>
      }
    }
  }

  return err;
 80195f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80195fa:	4618      	mov	r0, r3
 80195fc:	3710      	adds	r7, #16
 80195fe:	46bd      	mov	sp, r7
 8019600:	bd80      	pop	{r7, pc}
 8019602:	bf00      	nop
 8019604:	08028a58 	.word	0x08028a58
 8019608:	08028b30 	.word	0x08028b30
 801960c:	08028ac4 	.word	0x08028ac4
 8019610:	2000fd90 	.word	0x2000fd90
 8019614:	08028b68 	.word	0x08028b68
 8019618:	2000fc30 	.word	0x2000fc30

0801961c <igmp_joingroup_netif>:
 * @param groupaddr the ip address of the group which to join
 * @return ERR_OK if group was joined on the netif, an err_t otherwise
 */
err_t
igmp_joingroup_netif(struct netif *netif, const ip4_addr_t *groupaddr)
{
 801961c:	b580      	push	{r7, lr}
 801961e:	b084      	sub	sp, #16
 8019620:	af00      	add	r7, sp, #0
 8019622:	6078      	str	r0, [r7, #4]
 8019624:	6039      	str	r1, [r7, #0]
  struct igmp_group *group;

  LWIP_ASSERT_CORE_LOCKED();

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_joingroup_netif: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 8019626:	683b      	ldr	r3, [r7, #0]
 8019628:	681b      	ldr	r3, [r3, #0]
 801962a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801962e:	2be0      	cmp	r3, #224	; 0xe0
 8019630:	d009      	beq.n	8019646 <igmp_joingroup_netif+0x2a>
 8019632:	4b2f      	ldr	r3, [pc, #188]	; (80196f0 <igmp_joingroup_netif+0xd4>)
 8019634:	f44f 72f6 	mov.w	r2, #492	; 0x1ec
 8019638:	492e      	ldr	r1, [pc, #184]	; (80196f4 <igmp_joingroup_netif+0xd8>)
 801963a:	482f      	ldr	r0, [pc, #188]	; (80196f8 <igmp_joingroup_netif+0xdc>)
 801963c:	f00a fad0 	bl	8023be0 <iprintf>
 8019640:	f06f 0305 	mvn.w	r3, #5
 8019644:	e050      	b.n	80196e8 <igmp_joingroup_netif+0xcc>
  LWIP_ERROR("igmp_joingroup_netif: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
 8019646:	683b      	ldr	r3, [r7, #0]
 8019648:	681a      	ldr	r2, [r3, #0]
 801964a:	4b2c      	ldr	r3, [pc, #176]	; (80196fc <igmp_joingroup_netif+0xe0>)
 801964c:	681b      	ldr	r3, [r3, #0]
 801964e:	429a      	cmp	r2, r3
 8019650:	d109      	bne.n	8019666 <igmp_joingroup_netif+0x4a>
 8019652:	4b27      	ldr	r3, [pc, #156]	; (80196f0 <igmp_joingroup_netif+0xd4>)
 8019654:	f240 12ed 	movw	r2, #493	; 0x1ed
 8019658:	4929      	ldr	r1, [pc, #164]	; (8019700 <igmp_joingroup_netif+0xe4>)
 801965a:	4827      	ldr	r0, [pc, #156]	; (80196f8 <igmp_joingroup_netif+0xdc>)
 801965c:	f00a fac0 	bl	8023be0 <iprintf>
 8019660:	f06f 0305 	mvn.w	r3, #5
 8019664:	e040      	b.n	80196e8 <igmp_joingroup_netif+0xcc>

  /* make sure it is an igmp-enabled netif */
  LWIP_ERROR("igmp_joingroup_netif: attempt to join on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
 8019666:	687b      	ldr	r3, [r7, #4]
 8019668:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801966c:	f003 0320 	and.w	r3, r3, #32
 8019670:	2b00      	cmp	r3, #0
 8019672:	d109      	bne.n	8019688 <igmp_joingroup_netif+0x6c>
 8019674:	4b1e      	ldr	r3, [pc, #120]	; (80196f0 <igmp_joingroup_netif+0xd4>)
 8019676:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 801967a:	4922      	ldr	r1, [pc, #136]	; (8019704 <igmp_joingroup_netif+0xe8>)
 801967c:	481e      	ldr	r0, [pc, #120]	; (80196f8 <igmp_joingroup_netif+0xdc>)
 801967e:	f00a faaf 	bl	8023be0 <iprintf>
 8019682:	f06f 0305 	mvn.w	r3, #5
 8019686:	e02f      	b.n	80196e8 <igmp_joingroup_netif+0xcc>

  /* find group or create a new one if not found */
  group = igmp_lookup_group(netif, groupaddr);
 8019688:	6839      	ldr	r1, [r7, #0]
 801968a:	6878      	ldr	r0, [r7, #4]
 801968c:	f7ff fe36 	bl	80192fc <igmp_lookup_group>
 8019690:	60f8      	str	r0, [r7, #12]

  if (group != NULL) {
 8019692:	68fb      	ldr	r3, [r7, #12]
 8019694:	2b00      	cmp	r3, #0
 8019696:	d025      	beq.n	80196e4 <igmp_joingroup_netif+0xc8>
    /* This should create a new group, check the state to make sure */
    if (group->group_state != IGMP_GROUP_NON_MEMBER) {
 8019698:	68fb      	ldr	r3, [r7, #12]
 801969a:	7a5b      	ldrb	r3, [r3, #9]
 801969c:	2b00      	cmp	r3, #0
 801969e:	d119      	bne.n	80196d4 <igmp_joingroup_netif+0xb8>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: join to new group: "));
      ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
      LWIP_DEBUGF(IGMP_DEBUG, ("\n"));

      /* If first use of the group, allow the group at the MAC level */
      if ((group->use == 0) && (netif->igmp_mac_filter != NULL)) {
 80196a0:	68fb      	ldr	r3, [r7, #12]
 80196a2:	7b1b      	ldrb	r3, [r3, #12]
 80196a4:	2b00      	cmp	r3, #0
 80196a6:	d109      	bne.n	80196bc <igmp_joingroup_netif+0xa0>
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80196ac:	2b00      	cmp	r3, #0
 80196ae:	d005      	beq.n	80196bc <igmp_joingroup_netif+0xa0>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: igmp_mac_filter(ADD "));
        ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
        LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void *)netif));
        netif->igmp_mac_filter(netif, groupaddr, NETIF_ADD_MAC_FILTER);
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80196b4:	2201      	movs	r2, #1
 80196b6:	6839      	ldr	r1, [r7, #0]
 80196b8:	6878      	ldr	r0, [r7, #4]
 80196ba:	4798      	blx	r3
      }

      IGMP_STATS_INC(igmp.tx_join);
      igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
 80196bc:	2216      	movs	r2, #22
 80196be:	68f9      	ldr	r1, [r7, #12]
 80196c0:	6878      	ldr	r0, [r7, #4]
 80196c2:	f000 f9b5 	bl	8019a30 <igmp_send>

      igmp_start_timer(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
 80196c6:	2105      	movs	r1, #5
 80196c8:	68f8      	ldr	r0, [r7, #12]
 80196ca:	f000 f947 	bl	801995c <igmp_start_timer>

      /* Need to work out where this timer comes from */
      group->group_state = IGMP_GROUP_DELAYING_MEMBER;
 80196ce:	68fb      	ldr	r3, [r7, #12]
 80196d0:	2201      	movs	r2, #1
 80196d2:	725a      	strb	r2, [r3, #9]
    }
    /* Increment group use */
    group->use++;
 80196d4:	68fb      	ldr	r3, [r7, #12]
 80196d6:	7b1b      	ldrb	r3, [r3, #12]
 80196d8:	3301      	adds	r3, #1
 80196da:	b2da      	uxtb	r2, r3
 80196dc:	68fb      	ldr	r3, [r7, #12]
 80196de:	731a      	strb	r2, [r3, #12]
    /* Join on this interface */
    return ERR_OK;
 80196e0:	2300      	movs	r3, #0
 80196e2:	e001      	b.n	80196e8 <igmp_joingroup_netif+0xcc>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: Not enough memory to join to group\n"));
    return ERR_MEM;
 80196e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 80196e8:	4618      	mov	r0, r3
 80196ea:	3710      	adds	r7, #16
 80196ec:	46bd      	mov	sp, r7
 80196ee:	bd80      	pop	{r7, pc}
 80196f0:	08028a58 	.word	0x08028a58
 80196f4:	08028b9c 	.word	0x08028b9c
 80196f8:	08028ac4 	.word	0x08028ac4
 80196fc:	2000fd90 	.word	0x2000fd90
 8019700:	08028bd8 	.word	0x08028bd8
 8019704:	08028c14 	.word	0x08028c14

08019708 <igmp_leavegroup>:
 * @param groupaddr the ip address of the group which to leave
 * @return ERR_OK if group was left on the netif(s), an err_t otherwise
 */
err_t
igmp_leavegroup(const ip4_addr_t *ifaddr, const ip4_addr_t *groupaddr)
{
 8019708:	b580      	push	{r7, lr}
 801970a:	b086      	sub	sp, #24
 801970c:	af00      	add	r7, sp, #0
 801970e:	6078      	str	r0, [r7, #4]
 8019710:	6039      	str	r1, [r7, #0]
  err_t err = ERR_VAL; /* no matching interface */
 8019712:	23fa      	movs	r3, #250	; 0xfa
 8019714:	75fb      	strb	r3, [r7, #23]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_leavegroup: attempt to leave non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 8019716:	683b      	ldr	r3, [r7, #0]
 8019718:	681b      	ldr	r3, [r3, #0]
 801971a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801971e:	2be0      	cmp	r3, #224	; 0xe0
 8019720:	d009      	beq.n	8019736 <igmp_leavegroup+0x2e>
 8019722:	4b25      	ldr	r3, [pc, #148]	; (80197b8 <igmp_leavegroup+0xb0>)
 8019724:	f240 222a 	movw	r2, #554	; 0x22a
 8019728:	4924      	ldr	r1, [pc, #144]	; (80197bc <igmp_leavegroup+0xb4>)
 801972a:	4825      	ldr	r0, [pc, #148]	; (80197c0 <igmp_leavegroup+0xb8>)
 801972c:	f00a fa58 	bl	8023be0 <iprintf>
 8019730:	f06f 0305 	mvn.w	r3, #5
 8019734:	e03c      	b.n	80197b0 <igmp_leavegroup+0xa8>
  LWIP_ERROR("igmp_leavegroup: attempt to leave allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
 8019736:	683b      	ldr	r3, [r7, #0]
 8019738:	681a      	ldr	r2, [r3, #0]
 801973a:	4b22      	ldr	r3, [pc, #136]	; (80197c4 <igmp_leavegroup+0xbc>)
 801973c:	681b      	ldr	r3, [r3, #0]
 801973e:	429a      	cmp	r2, r3
 8019740:	d109      	bne.n	8019756 <igmp_leavegroup+0x4e>
 8019742:	4b1d      	ldr	r3, [pc, #116]	; (80197b8 <igmp_leavegroup+0xb0>)
 8019744:	f240 222b 	movw	r2, #555	; 0x22b
 8019748:	491f      	ldr	r1, [pc, #124]	; (80197c8 <igmp_leavegroup+0xc0>)
 801974a:	481d      	ldr	r0, [pc, #116]	; (80197c0 <igmp_leavegroup+0xb8>)
 801974c:	f00a fa48 	bl	8023be0 <iprintf>
 8019750:	f06f 0305 	mvn.w	r3, #5
 8019754:	e02c      	b.n	80197b0 <igmp_leavegroup+0xa8>

  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8019756:	4b1d      	ldr	r3, [pc, #116]	; (80197cc <igmp_leavegroup+0xc4>)
 8019758:	681b      	ldr	r3, [r3, #0]
 801975a:	613b      	str	r3, [r7, #16]
 801975c:	e023      	b.n	80197a6 <igmp_leavegroup+0x9e>
    /* Should we leave this interface ? */
    if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
 801975e:	693b      	ldr	r3, [r7, #16]
 8019760:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019764:	f003 0320 	and.w	r3, r3, #32
 8019768:	2b00      	cmp	r3, #0
 801976a:	d019      	beq.n	80197a0 <igmp_leavegroup+0x98>
 801976c:	687b      	ldr	r3, [r7, #4]
 801976e:	2b00      	cmp	r3, #0
 8019770:	d00a      	beq.n	8019788 <igmp_leavegroup+0x80>
 8019772:	687b      	ldr	r3, [r7, #4]
 8019774:	681b      	ldr	r3, [r3, #0]
 8019776:	2b00      	cmp	r3, #0
 8019778:	d006      	beq.n	8019788 <igmp_leavegroup+0x80>
 801977a:	693b      	ldr	r3, [r7, #16]
 801977c:	3304      	adds	r3, #4
 801977e:	681a      	ldr	r2, [r3, #0]
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	681b      	ldr	r3, [r3, #0]
 8019784:	429a      	cmp	r2, r3
 8019786:	d10b      	bne.n	80197a0 <igmp_leavegroup+0x98>
      err_t res = igmp_leavegroup_netif(netif, groupaddr);
 8019788:	6839      	ldr	r1, [r7, #0]
 801978a:	6938      	ldr	r0, [r7, #16]
 801978c:	f000 f820 	bl	80197d0 <igmp_leavegroup_netif>
 8019790:	4603      	mov	r3, r0
 8019792:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8019794:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8019798:	2b00      	cmp	r3, #0
 801979a:	d001      	beq.n	80197a0 <igmp_leavegroup+0x98>
        /* Store this result if we have not yet gotten a success */
        err = res;
 801979c:	7bfb      	ldrb	r3, [r7, #15]
 801979e:	75fb      	strb	r3, [r7, #23]
  NETIF_FOREACH(netif) {
 80197a0:	693b      	ldr	r3, [r7, #16]
 80197a2:	681b      	ldr	r3, [r3, #0]
 80197a4:	613b      	str	r3, [r7, #16]
 80197a6:	693b      	ldr	r3, [r7, #16]
 80197a8:	2b00      	cmp	r3, #0
 80197aa:	d1d8      	bne.n	801975e <igmp_leavegroup+0x56>
      }
    }
  }

  return err;
 80197ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80197b0:	4618      	mov	r0, r3
 80197b2:	3718      	adds	r7, #24
 80197b4:	46bd      	mov	sp, r7
 80197b6:	bd80      	pop	{r7, pc}
 80197b8:	08028a58 	.word	0x08028a58
 80197bc:	08028c4c 	.word	0x08028c4c
 80197c0:	08028ac4 	.word	0x08028ac4
 80197c4:	2000fd90 	.word	0x2000fd90
 80197c8:	08028c84 	.word	0x08028c84
 80197cc:	2000fc30 	.word	0x2000fc30

080197d0 <igmp_leavegroup_netif>:
 * @param groupaddr the ip address of the group which to leave
 * @return ERR_OK if group was left on the netif, an err_t otherwise
 */
err_t
igmp_leavegroup_netif(struct netif *netif, const ip4_addr_t *groupaddr)
{
 80197d0:	b580      	push	{r7, lr}
 80197d2:	b084      	sub	sp, #16
 80197d4:	af00      	add	r7, sp, #0
 80197d6:	6078      	str	r0, [r7, #4]
 80197d8:	6039      	str	r1, [r7, #0]
  struct igmp_group *group;

  LWIP_ASSERT_CORE_LOCKED();

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 80197da:	683b      	ldr	r3, [r7, #0]
 80197dc:	681b      	ldr	r3, [r3, #0]
 80197de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80197e2:	2be0      	cmp	r3, #224	; 0xe0
 80197e4:	d009      	beq.n	80197fa <igmp_leavegroup_netif+0x2a>
 80197e6:	4b30      	ldr	r3, [pc, #192]	; (80198a8 <igmp_leavegroup_netif+0xd8>)
 80197e8:	f44f 7213 	mov.w	r2, #588	; 0x24c
 80197ec:	492f      	ldr	r1, [pc, #188]	; (80198ac <igmp_leavegroup_netif+0xdc>)
 80197ee:	4830      	ldr	r0, [pc, #192]	; (80198b0 <igmp_leavegroup_netif+0xe0>)
 80197f0:	f00a f9f6 	bl	8023be0 <iprintf>
 80197f4:	f06f 0305 	mvn.w	r3, #5
 80197f8:	e052      	b.n	80198a0 <igmp_leavegroup_netif+0xd0>
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
 80197fa:	683b      	ldr	r3, [r7, #0]
 80197fc:	681a      	ldr	r2, [r3, #0]
 80197fe:	4b2d      	ldr	r3, [pc, #180]	; (80198b4 <igmp_leavegroup_netif+0xe4>)
 8019800:	681b      	ldr	r3, [r3, #0]
 8019802:	429a      	cmp	r2, r3
 8019804:	d109      	bne.n	801981a <igmp_leavegroup_netif+0x4a>
 8019806:	4b28      	ldr	r3, [pc, #160]	; (80198a8 <igmp_leavegroup_netif+0xd8>)
 8019808:	f240 224d 	movw	r2, #589	; 0x24d
 801980c:	492a      	ldr	r1, [pc, #168]	; (80198b8 <igmp_leavegroup_netif+0xe8>)
 801980e:	4828      	ldr	r0, [pc, #160]	; (80198b0 <igmp_leavegroup_netif+0xe0>)
 8019810:	f00a f9e6 	bl	8023be0 <iprintf>
 8019814:	f06f 0305 	mvn.w	r3, #5
 8019818:	e042      	b.n	80198a0 <igmp_leavegroup_netif+0xd0>

  /* make sure it is an igmp-enabled netif */
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
 801981a:	687b      	ldr	r3, [r7, #4]
 801981c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019820:	f003 0320 	and.w	r3, r3, #32
 8019824:	2b00      	cmp	r3, #0
 8019826:	d109      	bne.n	801983c <igmp_leavegroup_netif+0x6c>
 8019828:	4b1f      	ldr	r3, [pc, #124]	; (80198a8 <igmp_leavegroup_netif+0xd8>)
 801982a:	f44f 7214 	mov.w	r2, #592	; 0x250
 801982e:	4923      	ldr	r1, [pc, #140]	; (80198bc <igmp_leavegroup_netif+0xec>)
 8019830:	481f      	ldr	r0, [pc, #124]	; (80198b0 <igmp_leavegroup_netif+0xe0>)
 8019832:	f00a f9d5 	bl	8023be0 <iprintf>
 8019836:	f06f 0305 	mvn.w	r3, #5
 801983a:	e031      	b.n	80198a0 <igmp_leavegroup_netif+0xd0>

  /* find group */
  group = igmp_lookfor_group(netif, groupaddr);
 801983c:	6839      	ldr	r1, [r7, #0]
 801983e:	6878      	ldr	r0, [r7, #4]
 8019840:	f7ff fd3d 	bl	80192be <igmp_lookfor_group>
 8019844:	60f8      	str	r0, [r7, #12]

  if (group != NULL) {
 8019846:	68fb      	ldr	r3, [r7, #12]
 8019848:	2b00      	cmp	r3, #0
 801984a:	d027      	beq.n	801989c <igmp_leavegroup_netif+0xcc>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: Leaving group: "));
    ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
    LWIP_DEBUGF(IGMP_DEBUG, ("\n"));

    /* If there is no other use of the group */
    if (group->use <= 1) {
 801984c:	68fb      	ldr	r3, [r7, #12]
 801984e:	7b1b      	ldrb	r3, [r3, #12]
 8019850:	2b01      	cmp	r3, #1
 8019852:	d81b      	bhi.n	801988c <igmp_leavegroup_netif+0xbc>
      /* Remove the group from the list */
      igmp_remove_group(netif, group);
 8019854:	68f9      	ldr	r1, [r7, #12]
 8019856:	6878      	ldr	r0, [r7, #4]
 8019858:	f7ff fdb8 	bl	80193cc <igmp_remove_group>

      /* If we are the last reporter for this group */
      if (group->last_reporter_flag) {
 801985c:	68fb      	ldr	r3, [r7, #12]
 801985e:	7a1b      	ldrb	r3, [r3, #8]
 8019860:	2b00      	cmp	r3, #0
 8019862:	d004      	beq.n	801986e <igmp_leavegroup_netif+0x9e>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: sending leaving group\n"));
        IGMP_STATS_INC(igmp.tx_leave);
        igmp_send(netif, group, IGMP_LEAVE_GROUP);
 8019864:	2217      	movs	r2, #23
 8019866:	68f9      	ldr	r1, [r7, #12]
 8019868:	6878      	ldr	r0, [r7, #4]
 801986a:	f000 f8e1 	bl	8019a30 <igmp_send>
      }

      /* Disable the group at the MAC level */
      if (netif->igmp_mac_filter != NULL) {
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019872:	2b00      	cmp	r3, #0
 8019874:	d005      	beq.n	8019882 <igmp_leavegroup_netif+0xb2>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: igmp_mac_filter(DEL "));
        ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
        LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void *)netif));
        netif->igmp_mac_filter(netif, groupaddr, NETIF_DEL_MAC_FILTER);
 8019876:	687b      	ldr	r3, [r7, #4]
 8019878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801987a:	2200      	movs	r2, #0
 801987c:	6839      	ldr	r1, [r7, #0]
 801987e:	6878      	ldr	r0, [r7, #4]
 8019880:	4798      	blx	r3
      }

      /* Free group struct */
      memp_free(MEMP_IGMP_GROUP, group);
 8019882:	68f9      	ldr	r1, [r7, #12]
 8019884:	200a      	movs	r0, #10
 8019886:	f7f6 f8df 	bl	800fa48 <memp_free>
 801988a:	e005      	b.n	8019898 <igmp_leavegroup_netif+0xc8>
    } else {
      /* Decrement group use */
      group->use--;
 801988c:	68fb      	ldr	r3, [r7, #12]
 801988e:	7b1b      	ldrb	r3, [r3, #12]
 8019890:	3b01      	subs	r3, #1
 8019892:	b2da      	uxtb	r2, r3
 8019894:	68fb      	ldr	r3, [r7, #12]
 8019896:	731a      	strb	r2, [r3, #12]
    }
    return ERR_OK;
 8019898:	2300      	movs	r3, #0
 801989a:	e001      	b.n	80198a0 <igmp_leavegroup_netif+0xd0>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: not member of group\n"));
    return ERR_VAL;
 801989c:	f06f 0305 	mvn.w	r3, #5
  }
}
 80198a0:	4618      	mov	r0, r3
 80198a2:	3710      	adds	r7, #16
 80198a4:	46bd      	mov	sp, r7
 80198a6:	bd80      	pop	{r7, pc}
 80198a8:	08028a58 	.word	0x08028a58
 80198ac:	08028cbc 	.word	0x08028cbc
 80198b0:	08028ac4 	.word	0x08028ac4
 80198b4:	2000fd90 	.word	0x2000fd90
 80198b8:	08028cfc 	.word	0x08028cfc
 80198bc:	08028d38 	.word	0x08028d38

080198c0 <igmp_tmr>:
 * The igmp timer function (both for NO_SYS=1 and =0)
 * Should be called every IGMP_TMR_INTERVAL milliseconds (100 ms is default).
 */
void
igmp_tmr(void)
{
 80198c0:	b580      	push	{r7, lr}
 80198c2:	b082      	sub	sp, #8
 80198c4:	af00      	add	r7, sp, #0
  struct netif *netif;

  NETIF_FOREACH(netif) {
 80198c6:	4b15      	ldr	r3, [pc, #84]	; (801991c <igmp_tmr+0x5c>)
 80198c8:	681b      	ldr	r3, [r3, #0]
 80198ca:	607b      	str	r3, [r7, #4]
 80198cc:	e01e      	b.n	801990c <igmp_tmr+0x4c>
    struct igmp_group *group = netif_igmp_data(netif);
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198d2:	603b      	str	r3, [r7, #0]

    while (group != NULL) {
 80198d4:	e014      	b.n	8019900 <igmp_tmr+0x40>
      if (group->timer > 0) {
 80198d6:	683b      	ldr	r3, [r7, #0]
 80198d8:	895b      	ldrh	r3, [r3, #10]
 80198da:	2b00      	cmp	r3, #0
 80198dc:	d00d      	beq.n	80198fa <igmp_tmr+0x3a>
        group->timer--;
 80198de:	683b      	ldr	r3, [r7, #0]
 80198e0:	895b      	ldrh	r3, [r3, #10]
 80198e2:	3b01      	subs	r3, #1
 80198e4:	b29a      	uxth	r2, r3
 80198e6:	683b      	ldr	r3, [r7, #0]
 80198e8:	815a      	strh	r2, [r3, #10]
        if (group->timer == 0) {
 80198ea:	683b      	ldr	r3, [r7, #0]
 80198ec:	895b      	ldrh	r3, [r3, #10]
 80198ee:	2b00      	cmp	r3, #0
 80198f0:	d103      	bne.n	80198fa <igmp_tmr+0x3a>
          igmp_timeout(netif, group);
 80198f2:	6839      	ldr	r1, [r7, #0]
 80198f4:	6878      	ldr	r0, [r7, #4]
 80198f6:	f000 f813 	bl	8019920 <igmp_timeout>
        }
      }
      group = group->next;
 80198fa:	683b      	ldr	r3, [r7, #0]
 80198fc:	681b      	ldr	r3, [r3, #0]
 80198fe:	603b      	str	r3, [r7, #0]
    while (group != NULL) {
 8019900:	683b      	ldr	r3, [r7, #0]
 8019902:	2b00      	cmp	r3, #0
 8019904:	d1e7      	bne.n	80198d6 <igmp_tmr+0x16>
  NETIF_FOREACH(netif) {
 8019906:	687b      	ldr	r3, [r7, #4]
 8019908:	681b      	ldr	r3, [r3, #0]
 801990a:	607b      	str	r3, [r7, #4]
 801990c:	687b      	ldr	r3, [r7, #4]
 801990e:	2b00      	cmp	r3, #0
 8019910:	d1dd      	bne.n	80198ce <igmp_tmr+0xe>
    }
  }
}
 8019912:	bf00      	nop
 8019914:	bf00      	nop
 8019916:	3708      	adds	r7, #8
 8019918:	46bd      	mov	sp, r7
 801991a:	bd80      	pop	{r7, pc}
 801991c:	2000fc30 	.word	0x2000fc30

08019920 <igmp_timeout>:
 *
 * @param group an igmp_group for which a timeout is reached
 */
static void
igmp_timeout(struct netif *netif, struct igmp_group *group)
{
 8019920:	b580      	push	{r7, lr}
 8019922:	b082      	sub	sp, #8
 8019924:	af00      	add	r7, sp, #0
 8019926:	6078      	str	r0, [r7, #4]
 8019928:	6039      	str	r1, [r7, #0]
  /* If the state is IGMP_GROUP_DELAYING_MEMBER then we send a report for this group
     (unless it is the allsystems group) */
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 801992a:	683b      	ldr	r3, [r7, #0]
 801992c:	7a5b      	ldrb	r3, [r3, #9]
 801992e:	2b01      	cmp	r3, #1
 8019930:	d10d      	bne.n	801994e <igmp_timeout+0x2e>
      (!(ip4_addr_cmp(&(group->group_address), &allsystems)))) {
 8019932:	683b      	ldr	r3, [r7, #0]
 8019934:	685a      	ldr	r2, [r3, #4]
 8019936:	4b08      	ldr	r3, [pc, #32]	; (8019958 <igmp_timeout+0x38>)
 8019938:	681b      	ldr	r3, [r3, #0]
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 801993a:	429a      	cmp	r2, r3
 801993c:	d007      	beq.n	801994e <igmp_timeout+0x2e>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_timeout: report membership for group with address "));
    ip4_addr_debug_print_val(IGMP_DEBUG, group->group_address);
    LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)netif));

    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 801993e:	683b      	ldr	r3, [r7, #0]
 8019940:	2202      	movs	r2, #2
 8019942:	725a      	strb	r2, [r3, #9]

    IGMP_STATS_INC(igmp.tx_report);
    igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
 8019944:	2216      	movs	r2, #22
 8019946:	6839      	ldr	r1, [r7, #0]
 8019948:	6878      	ldr	r0, [r7, #4]
 801994a:	f000 f871 	bl	8019a30 <igmp_send>
  }
}
 801994e:	bf00      	nop
 8019950:	3708      	adds	r7, #8
 8019952:	46bd      	mov	sp, r7
 8019954:	bd80      	pop	{r7, pc}
 8019956:	bf00      	nop
 8019958:	2000fd90 	.word	0x2000fd90

0801995c <igmp_start_timer>:
 * @param max_time the time in multiples of IGMP_TMR_INTERVAL (decrease with
 *        every call to igmp_tmr())
 */
static void
igmp_start_timer(struct igmp_group *group, u8_t max_time)
{
 801995c:	b580      	push	{r7, lr}
 801995e:	b082      	sub	sp, #8
 8019960:	af00      	add	r7, sp, #0
 8019962:	6078      	str	r0, [r7, #4]
 8019964:	460b      	mov	r3, r1
 8019966:	70fb      	strb	r3, [r7, #3]
#ifdef LWIP_RAND
  group->timer = (u16_t)(max_time > 2 ? (LWIP_RAND() % max_time) : 1);
 8019968:	78fb      	ldrb	r3, [r7, #3]
 801996a:	2b02      	cmp	r3, #2
 801996c:	d90b      	bls.n	8019986 <igmp_start_timer+0x2a>
 801996e:	f00a f9f3 	bl	8023d58 <rand>
 8019972:	4603      	mov	r3, r0
 8019974:	461a      	mov	r2, r3
 8019976:	78fb      	ldrb	r3, [r7, #3]
 8019978:	fbb2 f1f3 	udiv	r1, r2, r3
 801997c:	fb01 f303 	mul.w	r3, r1, r3
 8019980:	1ad3      	subs	r3, r2, r3
 8019982:	b29a      	uxth	r2, r3
 8019984:	e000      	b.n	8019988 <igmp_start_timer+0x2c>
 8019986:	2201      	movs	r2, #1
 8019988:	687b      	ldr	r3, [r7, #4]
 801998a:	815a      	strh	r2, [r3, #10]
#else /* LWIP_RAND */
  /* ATTENTION: use this only if absolutely necessary! */
  group->timer = max_time / 2;
#endif /* LWIP_RAND */

  if (group->timer == 0) {
 801998c:	687b      	ldr	r3, [r7, #4]
 801998e:	895b      	ldrh	r3, [r3, #10]
 8019990:	2b00      	cmp	r3, #0
 8019992:	d102      	bne.n	801999a <igmp_start_timer+0x3e>
    group->timer = 1;
 8019994:	687b      	ldr	r3, [r7, #4]
 8019996:	2201      	movs	r2, #1
 8019998:	815a      	strh	r2, [r3, #10]
  }
}
 801999a:	bf00      	nop
 801999c:	3708      	adds	r7, #8
 801999e:	46bd      	mov	sp, r7
 80199a0:	bd80      	pop	{r7, pc}

080199a2 <igmp_delaying_member>:
 * @param group the igmp_group for which "delaying" membership report
 * @param maxresp query delay
 */
static void
igmp_delaying_member(struct igmp_group *group, u8_t maxresp)
{
 80199a2:	b580      	push	{r7, lr}
 80199a4:	b082      	sub	sp, #8
 80199a6:	af00      	add	r7, sp, #0
 80199a8:	6078      	str	r0, [r7, #4]
 80199aa:	460b      	mov	r3, r1
 80199ac:	70fb      	strb	r3, [r7, #3]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 80199ae:	687b      	ldr	r3, [r7, #4]
 80199b0:	7a5b      	ldrb	r3, [r3, #9]
 80199b2:	2b02      	cmp	r3, #2
 80199b4:	d00d      	beq.n	80199d2 <igmp_delaying_member+0x30>
      ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 80199b6:	687b      	ldr	r3, [r7, #4]
 80199b8:	7a5b      	ldrb	r3, [r3, #9]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 80199ba:	2b01      	cmp	r3, #1
 80199bc:	d111      	bne.n	80199e2 <igmp_delaying_member+0x40>
       ((group->timer == 0) || (maxresp < group->timer)))) {
 80199be:	687b      	ldr	r3, [r7, #4]
 80199c0:	895b      	ldrh	r3, [r3, #10]
      ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 80199c2:	2b00      	cmp	r3, #0
 80199c4:	d005      	beq.n	80199d2 <igmp_delaying_member+0x30>
       ((group->timer == 0) || (maxresp < group->timer)))) {
 80199c6:	78fb      	ldrb	r3, [r7, #3]
 80199c8:	b29a      	uxth	r2, r3
 80199ca:	687b      	ldr	r3, [r7, #4]
 80199cc:	895b      	ldrh	r3, [r3, #10]
 80199ce:	429a      	cmp	r2, r3
 80199d0:	d207      	bcs.n	80199e2 <igmp_delaying_member+0x40>
    igmp_start_timer(group, maxresp);
 80199d2:	78fb      	ldrb	r3, [r7, #3]
 80199d4:	4619      	mov	r1, r3
 80199d6:	6878      	ldr	r0, [r7, #4]
 80199d8:	f7ff ffc0 	bl	801995c <igmp_start_timer>
    group->group_state = IGMP_GROUP_DELAYING_MEMBER;
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	2201      	movs	r2, #1
 80199e0:	725a      	strb	r2, [r3, #9]
  }
}
 80199e2:	bf00      	nop
 80199e4:	3708      	adds	r7, #8
 80199e6:	46bd      	mov	sp, r7
 80199e8:	bd80      	pop	{r7, pc}

080199ea <igmp_ip_output_if>:
 *         ERR_BUF if p doesn't have enough space for IP/LINK headers
 *         returns errors returned by netif->output
 */
static err_t
igmp_ip_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest, struct netif *netif)
{
 80199ea:	b580      	push	{r7, lr}
 80199ec:	b08c      	sub	sp, #48	; 0x30
 80199ee:	af06      	add	r7, sp, #24
 80199f0:	60f8      	str	r0, [r7, #12]
 80199f2:	60b9      	str	r1, [r7, #8]
 80199f4:	607a      	str	r2, [r7, #4]
 80199f6:	603b      	str	r3, [r7, #0]
  /* This is the "router alert" option */
  u16_t ra[2];
  ra[0] = PP_HTONS(ROUTER_ALERT);
 80199f8:	f240 4394 	movw	r3, #1172	; 0x494
 80199fc:	82bb      	strh	r3, [r7, #20]
  ra[1] = 0x0000; /* Router shall examine packet */
 80199fe:	2300      	movs	r3, #0
 8019a00:	82fb      	strh	r3, [r7, #22]
  IGMP_STATS_INC(igmp.xmit);
  return ip4_output_if_opt(p, src, dest, IGMP_TTL, 0, IP_PROTO_IGMP, netif, ra, ROUTER_ALERTLEN);
 8019a02:	2304      	movs	r3, #4
 8019a04:	9304      	str	r3, [sp, #16]
 8019a06:	f107 0314 	add.w	r3, r7, #20
 8019a0a:	9303      	str	r3, [sp, #12]
 8019a0c:	683b      	ldr	r3, [r7, #0]
 8019a0e:	9302      	str	r3, [sp, #8]
 8019a10:	2302      	movs	r3, #2
 8019a12:	9301      	str	r3, [sp, #4]
 8019a14:	2300      	movs	r3, #0
 8019a16:	9300      	str	r3, [sp, #0]
 8019a18:	2301      	movs	r3, #1
 8019a1a:	687a      	ldr	r2, [r7, #4]
 8019a1c:	68b9      	ldr	r1, [r7, #8]
 8019a1e:	68f8      	ldr	r0, [r7, #12]
 8019a20:	f000 fa9f 	bl	8019f62 <ip4_output_if_opt>
 8019a24:	4603      	mov	r3, r0
}
 8019a26:	4618      	mov	r0, r3
 8019a28:	3718      	adds	r7, #24
 8019a2a:	46bd      	mov	sp, r7
 8019a2c:	bd80      	pop	{r7, pc}
	...

08019a30 <igmp_send>:
 * @param group the group to which to send the packet
 * @param type the type of igmp packet to send
 */
static void
igmp_send(struct netif *netif, struct igmp_group *group, u8_t type)
{
 8019a30:	b580      	push	{r7, lr}
 8019a32:	b088      	sub	sp, #32
 8019a34:	af00      	add	r7, sp, #0
 8019a36:	60f8      	str	r0, [r7, #12]
 8019a38:	60b9      	str	r1, [r7, #8]
 8019a3a:	4613      	mov	r3, r2
 8019a3c:	71fb      	strb	r3, [r7, #7]
  struct pbuf     *p    = NULL;
 8019a3e:	2300      	movs	r3, #0
 8019a40:	61bb      	str	r3, [r7, #24]
  struct igmp_msg *igmp = NULL;
 8019a42:	2300      	movs	r3, #0
 8019a44:	617b      	str	r3, [r7, #20]
  ip4_addr_t   src  = *IP4_ADDR_ANY4;
 8019a46:	4b2f      	ldr	r3, [pc, #188]	; (8019b04 <igmp_send+0xd4>)
 8019a48:	681b      	ldr	r3, [r3, #0]
 8019a4a:	613b      	str	r3, [r7, #16]
  ip4_addr_t  *dest = NULL;
 8019a4c:	2300      	movs	r3, #0
 8019a4e:	61fb      	str	r3, [r7, #28]

  /* IP header + "router alert" option + IGMP header */
  p = pbuf_alloc(PBUF_TRANSPORT, IGMP_MINLEN, PBUF_RAM);
 8019a50:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019a54:	2108      	movs	r1, #8
 8019a56:	2036      	movs	r0, #54	; 0x36
 8019a58:	f7f6 fc0c 	bl	8010274 <pbuf_alloc>
 8019a5c:	61b8      	str	r0, [r7, #24]

  if (p) {
 8019a5e:	69bb      	ldr	r3, [r7, #24]
 8019a60:	2b00      	cmp	r3, #0
 8019a62:	d04b      	beq.n	8019afc <igmp_send+0xcc>
    igmp = (struct igmp_msg *)p->payload;
 8019a64:	69bb      	ldr	r3, [r7, #24]
 8019a66:	685b      	ldr	r3, [r3, #4]
 8019a68:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("igmp_send: check that first pbuf can hold struct igmp_msg",
 8019a6a:	69bb      	ldr	r3, [r7, #24]
 8019a6c:	895b      	ldrh	r3, [r3, #10]
 8019a6e:	2b07      	cmp	r3, #7
 8019a70:	d806      	bhi.n	8019a80 <igmp_send+0x50>
 8019a72:	4b25      	ldr	r3, [pc, #148]	; (8019b08 <igmp_send+0xd8>)
 8019a74:	f240 3202 	movw	r2, #770	; 0x302
 8019a78:	4924      	ldr	r1, [pc, #144]	; (8019b0c <igmp_send+0xdc>)
 8019a7a:	4825      	ldr	r0, [pc, #148]	; (8019b10 <igmp_send+0xe0>)
 8019a7c:	f00a f8b0 	bl	8023be0 <iprintf>
                (p->len >= sizeof(struct igmp_msg)));
    ip4_addr_copy(src, *netif_ip4_addr(netif));
 8019a80:	68fb      	ldr	r3, [r7, #12]
 8019a82:	3304      	adds	r3, #4
 8019a84:	681b      	ldr	r3, [r3, #0]
 8019a86:	613b      	str	r3, [r7, #16]

    if (type == IGMP_V2_MEMB_REPORT) {
 8019a88:	79fb      	ldrb	r3, [r7, #7]
 8019a8a:	2b16      	cmp	r3, #22
 8019a8c:	d10a      	bne.n	8019aa4 <igmp_send+0x74>
      dest = &(group->group_address);
 8019a8e:	68bb      	ldr	r3, [r7, #8]
 8019a90:	3304      	adds	r3, #4
 8019a92:	61fb      	str	r3, [r7, #28]
      ip4_addr_copy(igmp->igmp_group_address, group->group_address);
 8019a94:	68bb      	ldr	r3, [r7, #8]
 8019a96:	685a      	ldr	r2, [r3, #4]
 8019a98:	697b      	ldr	r3, [r7, #20]
 8019a9a:	605a      	str	r2, [r3, #4]
      group->last_reporter_flag = 1; /* Remember we were the last to report */
 8019a9c:	68bb      	ldr	r3, [r7, #8]
 8019a9e:	2201      	movs	r2, #1
 8019aa0:	721a      	strb	r2, [r3, #8]
 8019aa2:	e008      	b.n	8019ab6 <igmp_send+0x86>
    } else {
      if (type == IGMP_LEAVE_GROUP) {
 8019aa4:	79fb      	ldrb	r3, [r7, #7]
 8019aa6:	2b17      	cmp	r3, #23
 8019aa8:	d105      	bne.n	8019ab6 <igmp_send+0x86>
        dest = &allrouters;
 8019aaa:	4b1a      	ldr	r3, [pc, #104]	; (8019b14 <igmp_send+0xe4>)
 8019aac:	61fb      	str	r3, [r7, #28]
        ip4_addr_copy(igmp->igmp_group_address, group->group_address);
 8019aae:	68bb      	ldr	r3, [r7, #8]
 8019ab0:	685a      	ldr	r2, [r3, #4]
 8019ab2:	697b      	ldr	r3, [r7, #20]
 8019ab4:	605a      	str	r2, [r3, #4]
      }
    }

    if ((type == IGMP_V2_MEMB_REPORT) || (type == IGMP_LEAVE_GROUP)) {
 8019ab6:	79fb      	ldrb	r3, [r7, #7]
 8019ab8:	2b16      	cmp	r3, #22
 8019aba:	d002      	beq.n	8019ac2 <igmp_send+0x92>
 8019abc:	79fb      	ldrb	r3, [r7, #7]
 8019abe:	2b17      	cmp	r3, #23
 8019ac0:	d119      	bne.n	8019af6 <igmp_send+0xc6>
      igmp->igmp_msgtype  = type;
 8019ac2:	697b      	ldr	r3, [r7, #20]
 8019ac4:	79fa      	ldrb	r2, [r7, #7]
 8019ac6:	701a      	strb	r2, [r3, #0]
      igmp->igmp_maxresp  = 0;
 8019ac8:	697b      	ldr	r3, [r7, #20]
 8019aca:	2200      	movs	r2, #0
 8019acc:	705a      	strb	r2, [r3, #1]
      igmp->igmp_checksum = 0;
 8019ace:	697b      	ldr	r3, [r7, #20]
 8019ad0:	2200      	movs	r2, #0
 8019ad2:	709a      	strb	r2, [r3, #2]
 8019ad4:	2200      	movs	r2, #0
 8019ad6:	70da      	strb	r2, [r3, #3]
      igmp->igmp_checksum = inet_chksum(igmp, IGMP_MINLEN);
 8019ad8:	2108      	movs	r1, #8
 8019ada:	6978      	ldr	r0, [r7, #20]
 8019adc:	f7f5 fac5 	bl	800f06a <inet_chksum>
 8019ae0:	4603      	mov	r3, r0
 8019ae2:	461a      	mov	r2, r3
 8019ae4:	697b      	ldr	r3, [r7, #20]
 8019ae6:	805a      	strh	r2, [r3, #2]

      igmp_ip_output_if(p, &src, dest, netif);
 8019ae8:	f107 0110 	add.w	r1, r7, #16
 8019aec:	68fb      	ldr	r3, [r7, #12]
 8019aee:	69fa      	ldr	r2, [r7, #28]
 8019af0:	69b8      	ldr	r0, [r7, #24]
 8019af2:	f7ff ff7a 	bl	80199ea <igmp_ip_output_if>
    }

    pbuf_free(p);
 8019af6:	69b8      	ldr	r0, [r7, #24]
 8019af8:	f7f6 fed2 	bl	80108a0 <pbuf_free>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_send: not enough memory for igmp_send\n"));
    IGMP_STATS_INC(igmp.memerr);
  }
}
 8019afc:	bf00      	nop
 8019afe:	3720      	adds	r7, #32
 8019b00:	46bd      	mov	sp, r7
 8019b02:	bd80      	pop	{r7, pc}
 8019b04:	08029344 	.word	0x08029344
 8019b08:	08028a58 	.word	0x08028a58
 8019b0c:	08028d74 	.word	0x08028d74
 8019b10:	08028ac4 	.word	0x08028ac4
 8019b14:	2000fd94 	.word	0x2000fd94

08019b18 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8019b18:	b480      	push	{r7}
 8019b1a:	b085      	sub	sp, #20
 8019b1c:	af00      	add	r7, sp, #0
 8019b1e:	6078      	str	r0, [r7, #4]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_MULTICAST_TX_OPTIONS
  /* Use administratively selected interface for multicast by default */
  if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
 8019b20:	687b      	ldr	r3, [r7, #4]
 8019b22:	681b      	ldr	r3, [r3, #0]
 8019b24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019b28:	2be0      	cmp	r3, #224	; 0xe0
 8019b2a:	d106      	bne.n	8019b3a <ip4_route+0x22>
 8019b2c:	4b36      	ldr	r3, [pc, #216]	; (8019c08 <ip4_route+0xf0>)
 8019b2e:	681b      	ldr	r3, [r3, #0]
 8019b30:	2b00      	cmp	r3, #0
 8019b32:	d002      	beq.n	8019b3a <ip4_route+0x22>
    return ip4_default_multicast_netif;
 8019b34:	4b34      	ldr	r3, [pc, #208]	; (8019c08 <ip4_route+0xf0>)
 8019b36:	681b      	ldr	r3, [r3, #0]
 8019b38:	e060      	b.n	8019bfc <ip4_route+0xe4>

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8019b3a:	4b34      	ldr	r3, [pc, #208]	; (8019c0c <ip4_route+0xf4>)
 8019b3c:	681b      	ldr	r3, [r3, #0]
 8019b3e:	60fb      	str	r3, [r7, #12]
 8019b40:	e036      	b.n	8019bb0 <ip4_route+0x98>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8019b42:	68fb      	ldr	r3, [r7, #12]
 8019b44:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019b48:	f003 0301 	and.w	r3, r3, #1
 8019b4c:	b2db      	uxtb	r3, r3
 8019b4e:	2b00      	cmp	r3, #0
 8019b50:	d02b      	beq.n	8019baa <ip4_route+0x92>
 8019b52:	68fb      	ldr	r3, [r7, #12]
 8019b54:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019b58:	089b      	lsrs	r3, r3, #2
 8019b5a:	f003 0301 	and.w	r3, r3, #1
 8019b5e:	b2db      	uxtb	r3, r3
 8019b60:	2b00      	cmp	r3, #0
 8019b62:	d022      	beq.n	8019baa <ip4_route+0x92>
 8019b64:	68fb      	ldr	r3, [r7, #12]
 8019b66:	3304      	adds	r3, #4
 8019b68:	681b      	ldr	r3, [r3, #0]
 8019b6a:	2b00      	cmp	r3, #0
 8019b6c:	d01d      	beq.n	8019baa <ip4_route+0x92>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8019b6e:	687b      	ldr	r3, [r7, #4]
 8019b70:	681a      	ldr	r2, [r3, #0]
 8019b72:	68fb      	ldr	r3, [r7, #12]
 8019b74:	3304      	adds	r3, #4
 8019b76:	681b      	ldr	r3, [r3, #0]
 8019b78:	405a      	eors	r2, r3
 8019b7a:	68fb      	ldr	r3, [r7, #12]
 8019b7c:	3308      	adds	r3, #8
 8019b7e:	681b      	ldr	r3, [r3, #0]
 8019b80:	4013      	ands	r3, r2
 8019b82:	2b00      	cmp	r3, #0
 8019b84:	d101      	bne.n	8019b8a <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 8019b86:	68fb      	ldr	r3, [r7, #12]
 8019b88:	e038      	b.n	8019bfc <ip4_route+0xe4>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8019b8a:	68fb      	ldr	r3, [r7, #12]
 8019b8c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019b90:	f003 0302 	and.w	r3, r3, #2
 8019b94:	2b00      	cmp	r3, #0
 8019b96:	d108      	bne.n	8019baa <ip4_route+0x92>
 8019b98:	687b      	ldr	r3, [r7, #4]
 8019b9a:	681a      	ldr	r2, [r3, #0]
 8019b9c:	68fb      	ldr	r3, [r7, #12]
 8019b9e:	330c      	adds	r3, #12
 8019ba0:	681b      	ldr	r3, [r3, #0]
 8019ba2:	429a      	cmp	r2, r3
 8019ba4:	d101      	bne.n	8019baa <ip4_route+0x92>
        /* return netif on which to forward IP packet */
        return netif;
 8019ba6:	68fb      	ldr	r3, [r7, #12]
 8019ba8:	e028      	b.n	8019bfc <ip4_route+0xe4>
  NETIF_FOREACH(netif) {
 8019baa:	68fb      	ldr	r3, [r7, #12]
 8019bac:	681b      	ldr	r3, [r3, #0]
 8019bae:	60fb      	str	r3, [r7, #12]
 8019bb0:	68fb      	ldr	r3, [r7, #12]
 8019bb2:	2b00      	cmp	r3, #0
 8019bb4:	d1c5      	bne.n	8019b42 <ip4_route+0x2a>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019bb6:	4b16      	ldr	r3, [pc, #88]	; (8019c10 <ip4_route+0xf8>)
 8019bb8:	681b      	ldr	r3, [r3, #0]
 8019bba:	2b00      	cmp	r3, #0
 8019bbc:	d01a      	beq.n	8019bf4 <ip4_route+0xdc>
 8019bbe:	4b14      	ldr	r3, [pc, #80]	; (8019c10 <ip4_route+0xf8>)
 8019bc0:	681b      	ldr	r3, [r3, #0]
 8019bc2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019bc6:	f003 0301 	and.w	r3, r3, #1
 8019bca:	2b00      	cmp	r3, #0
 8019bcc:	d012      	beq.n	8019bf4 <ip4_route+0xdc>
 8019bce:	4b10      	ldr	r3, [pc, #64]	; (8019c10 <ip4_route+0xf8>)
 8019bd0:	681b      	ldr	r3, [r3, #0]
 8019bd2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019bd6:	f003 0304 	and.w	r3, r3, #4
 8019bda:	2b00      	cmp	r3, #0
 8019bdc:	d00a      	beq.n	8019bf4 <ip4_route+0xdc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019bde:	4b0c      	ldr	r3, [pc, #48]	; (8019c10 <ip4_route+0xf8>)
 8019be0:	681b      	ldr	r3, [r3, #0]
 8019be2:	3304      	adds	r3, #4
 8019be4:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019be6:	2b00      	cmp	r3, #0
 8019be8:	d004      	beq.n	8019bf4 <ip4_route+0xdc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	681b      	ldr	r3, [r3, #0]
 8019bee:	b2db      	uxtb	r3, r3
 8019bf0:	2b7f      	cmp	r3, #127	; 0x7f
 8019bf2:	d101      	bne.n	8019bf8 <ip4_route+0xe0>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8019bf4:	2300      	movs	r3, #0
 8019bf6:	e001      	b.n	8019bfc <ip4_route+0xe4>
  }

  return netif_default;
 8019bf8:	4b05      	ldr	r3, [pc, #20]	; (8019c10 <ip4_route+0xf8>)
 8019bfa:	681b      	ldr	r3, [r3, #0]
}
 8019bfc:	4618      	mov	r0, r3
 8019bfe:	3714      	adds	r7, #20
 8019c00:	46bd      	mov	sp, r7
 8019c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c06:	4770      	bx	lr
 8019c08:	2000fd9c 	.word	0x2000fd9c
 8019c0c:	2000fc30 	.word	0x2000fc30
 8019c10:	2000fc34 	.word	0x2000fc34

08019c14 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8019c14:	b580      	push	{r7, lr}
 8019c16:	b082      	sub	sp, #8
 8019c18:	af00      	add	r7, sp, #0
 8019c1a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8019c1c:	687b      	ldr	r3, [r7, #4]
 8019c1e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019c22:	f003 0301 	and.w	r3, r3, #1
 8019c26:	b2db      	uxtb	r3, r3
 8019c28:	2b00      	cmp	r3, #0
 8019c2a:	d016      	beq.n	8019c5a <ip4_input_accept+0x46>
 8019c2c:	687b      	ldr	r3, [r7, #4]
 8019c2e:	3304      	adds	r3, #4
 8019c30:	681b      	ldr	r3, [r3, #0]
 8019c32:	2b00      	cmp	r3, #0
 8019c34:	d011      	beq.n	8019c5a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019c36:	4b0b      	ldr	r3, [pc, #44]	; (8019c64 <ip4_input_accept+0x50>)
 8019c38:	695a      	ldr	r2, [r3, #20]
 8019c3a:	687b      	ldr	r3, [r7, #4]
 8019c3c:	3304      	adds	r3, #4
 8019c3e:	681b      	ldr	r3, [r3, #0]
 8019c40:	429a      	cmp	r2, r3
 8019c42:	d008      	beq.n	8019c56 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8019c44:	4b07      	ldr	r3, [pc, #28]	; (8019c64 <ip4_input_accept+0x50>)
 8019c46:	695b      	ldr	r3, [r3, #20]
 8019c48:	6879      	ldr	r1, [r7, #4]
 8019c4a:	4618      	mov	r0, r3
 8019c4c:	f000 faba 	bl	801a1c4 <ip4_addr_isbroadcast_u32>
 8019c50:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	d001      	beq.n	8019c5a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8019c56:	2301      	movs	r3, #1
 8019c58:	e000      	b.n	8019c5c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8019c5a:	2300      	movs	r3, #0
}
 8019c5c:	4618      	mov	r0, r3
 8019c5e:	3708      	adds	r7, #8
 8019c60:	46bd      	mov	sp, r7
 8019c62:	bd80      	pop	{r7, pc}
 8019c64:	2000c2e4 	.word	0x2000c2e4

08019c68 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8019c68:	b580      	push	{r7, lr}
 8019c6a:	b088      	sub	sp, #32
 8019c6c:	af00      	add	r7, sp, #0
 8019c6e:	6078      	str	r0, [r7, #4]
 8019c70:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8019c72:	2301      	movs	r3, #1
 8019c74:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8019c76:	687b      	ldr	r3, [r7, #4]
 8019c78:	685b      	ldr	r3, [r3, #4]
 8019c7a:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8019c7c:	69fb      	ldr	r3, [r7, #28]
 8019c7e:	781b      	ldrb	r3, [r3, #0]
 8019c80:	091b      	lsrs	r3, r3, #4
 8019c82:	b2db      	uxtb	r3, r3
 8019c84:	2b04      	cmp	r3, #4
 8019c86:	d004      	beq.n	8019c92 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8019c88:	6878      	ldr	r0, [r7, #4]
 8019c8a:	f7f6 fe09 	bl	80108a0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8019c8e:	2300      	movs	r3, #0
 8019c90:	e13d      	b.n	8019f0e <ip4_input+0x2a6>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8019c92:	69fb      	ldr	r3, [r7, #28]
 8019c94:	781b      	ldrb	r3, [r3, #0]
 8019c96:	f003 030f 	and.w	r3, r3, #15
 8019c9a:	b2db      	uxtb	r3, r3
 8019c9c:	009b      	lsls	r3, r3, #2
 8019c9e:	b2db      	uxtb	r3, r3
 8019ca0:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8019ca2:	69fb      	ldr	r3, [r7, #28]
 8019ca4:	885b      	ldrh	r3, [r3, #2]
 8019ca6:	b29b      	uxth	r3, r3
 8019ca8:	4618      	mov	r0, r3
 8019caa:	f7f4 f9a3 	bl	800dff4 <lwip_htons>
 8019cae:	4603      	mov	r3, r0
 8019cb0:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8019cb2:	687b      	ldr	r3, [r7, #4]
 8019cb4:	891b      	ldrh	r3, [r3, #8]
 8019cb6:	8a3a      	ldrh	r2, [r7, #16]
 8019cb8:	429a      	cmp	r2, r3
 8019cba:	d204      	bcs.n	8019cc6 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8019cbc:	8a3b      	ldrh	r3, [r7, #16]
 8019cbe:	4619      	mov	r1, r3
 8019cc0:	6878      	ldr	r0, [r7, #4]
 8019cc2:	f7f6 fc35 	bl	8010530 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8019cc6:	687b      	ldr	r3, [r7, #4]
 8019cc8:	895b      	ldrh	r3, [r3, #10]
 8019cca:	8a7a      	ldrh	r2, [r7, #18]
 8019ccc:	429a      	cmp	r2, r3
 8019cce:	d807      	bhi.n	8019ce0 <ip4_input+0x78>
 8019cd0:	687b      	ldr	r3, [r7, #4]
 8019cd2:	891b      	ldrh	r3, [r3, #8]
 8019cd4:	8a3a      	ldrh	r2, [r7, #16]
 8019cd6:	429a      	cmp	r2, r3
 8019cd8:	d802      	bhi.n	8019ce0 <ip4_input+0x78>
 8019cda:	8a7b      	ldrh	r3, [r7, #18]
 8019cdc:	2b13      	cmp	r3, #19
 8019cde:	d804      	bhi.n	8019cea <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8019ce0:	6878      	ldr	r0, [r7, #4]
 8019ce2:	f7f6 fddd 	bl	80108a0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8019ce6:	2300      	movs	r3, #0
 8019ce8:	e111      	b.n	8019f0e <ip4_input+0x2a6>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8019cea:	69fb      	ldr	r3, [r7, #28]
 8019cec:	691b      	ldr	r3, [r3, #16]
 8019cee:	4a8a      	ldr	r2, [pc, #552]	; (8019f18 <ip4_input+0x2b0>)
 8019cf0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8019cf2:	69fb      	ldr	r3, [r7, #28]
 8019cf4:	68db      	ldr	r3, [r3, #12]
 8019cf6:	4a88      	ldr	r2, [pc, #544]	; (8019f18 <ip4_input+0x2b0>)
 8019cf8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019cfa:	4b87      	ldr	r3, [pc, #540]	; (8019f18 <ip4_input+0x2b0>)
 8019cfc:	695b      	ldr	r3, [r3, #20]
 8019cfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019d02:	2be0      	cmp	r3, #224	; 0xe0
 8019d04:	d120      	bne.n	8019d48 <ip4_input+0xe0>
#if LWIP_IGMP
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 8019d06:	683b      	ldr	r3, [r7, #0]
 8019d08:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019d0c:	f003 0320 	and.w	r3, r3, #32
 8019d10:	2b00      	cmp	r3, #0
 8019d12:	d016      	beq.n	8019d42 <ip4_input+0xda>
 8019d14:	4981      	ldr	r1, [pc, #516]	; (8019f1c <ip4_input+0x2b4>)
 8019d16:	6838      	ldr	r0, [r7, #0]
 8019d18:	f7ff fad1 	bl	80192be <igmp_lookfor_group>
 8019d1c:	4603      	mov	r3, r0
 8019d1e:	2b00      	cmp	r3, #0
 8019d20:	d00f      	beq.n	8019d42 <ip4_input+0xda>
      /* IGMP snooping switches need 0.0.0.0 to be allowed as source address (RFC 4541) */
      ip4_addr_t allsystems;
      IP4_ADDR(&allsystems, 224, 0, 0, 1);
 8019d22:	4b7f      	ldr	r3, [pc, #508]	; (8019f20 <ip4_input+0x2b8>)
 8019d24:	60fb      	str	r3, [r7, #12]
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
 8019d26:	4b7c      	ldr	r3, [pc, #496]	; (8019f18 <ip4_input+0x2b0>)
 8019d28:	695a      	ldr	r2, [r3, #20]
 8019d2a:	68fb      	ldr	r3, [r7, #12]
 8019d2c:	429a      	cmp	r2, r3
 8019d2e:	d105      	bne.n	8019d3c <ip4_input+0xd4>
          ip4_addr_isany(ip4_current_src_addr())) {
 8019d30:	4b79      	ldr	r3, [pc, #484]	; (8019f18 <ip4_input+0x2b0>)
 8019d32:	691b      	ldr	r3, [r3, #16]
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
 8019d34:	2b00      	cmp	r3, #0
 8019d36:	d101      	bne.n	8019d3c <ip4_input+0xd4>
        check_ip_src = 0;
 8019d38:	2300      	movs	r3, #0
 8019d3a:	617b      	str	r3, [r7, #20]
      }
      netif = inp;
 8019d3c:	683b      	ldr	r3, [r7, #0]
 8019d3e:	61bb      	str	r3, [r7, #24]
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 8019d40:	e02a      	b.n	8019d98 <ip4_input+0x130>
    } else {
      netif = NULL;
 8019d42:	2300      	movs	r3, #0
 8019d44:	61bb      	str	r3, [r7, #24]
 8019d46:	e027      	b.n	8019d98 <ip4_input+0x130>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8019d48:	6838      	ldr	r0, [r7, #0]
 8019d4a:	f7ff ff63 	bl	8019c14 <ip4_input_accept>
 8019d4e:	4603      	mov	r3, r0
 8019d50:	2b00      	cmp	r3, #0
 8019d52:	d002      	beq.n	8019d5a <ip4_input+0xf2>
      netif = inp;
 8019d54:	683b      	ldr	r3, [r7, #0]
 8019d56:	61bb      	str	r3, [r7, #24]
 8019d58:	e01e      	b.n	8019d98 <ip4_input+0x130>
    } else {
      netif = NULL;
 8019d5a:	2300      	movs	r3, #0
 8019d5c:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8019d5e:	4b6e      	ldr	r3, [pc, #440]	; (8019f18 <ip4_input+0x2b0>)
 8019d60:	695b      	ldr	r3, [r3, #20]
 8019d62:	b2db      	uxtb	r3, r3
 8019d64:	2b7f      	cmp	r3, #127	; 0x7f
 8019d66:	d017      	beq.n	8019d98 <ip4_input+0x130>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8019d68:	4b6e      	ldr	r3, [pc, #440]	; (8019f24 <ip4_input+0x2bc>)
 8019d6a:	681b      	ldr	r3, [r3, #0]
 8019d6c:	61bb      	str	r3, [r7, #24]
 8019d6e:	e00e      	b.n	8019d8e <ip4_input+0x126>
          if (netif == inp) {
 8019d70:	69ba      	ldr	r2, [r7, #24]
 8019d72:	683b      	ldr	r3, [r7, #0]
 8019d74:	429a      	cmp	r2, r3
 8019d76:	d006      	beq.n	8019d86 <ip4_input+0x11e>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8019d78:	69b8      	ldr	r0, [r7, #24]
 8019d7a:	f7ff ff4b 	bl	8019c14 <ip4_input_accept>
 8019d7e:	4603      	mov	r3, r0
 8019d80:	2b00      	cmp	r3, #0
 8019d82:	d108      	bne.n	8019d96 <ip4_input+0x12e>
 8019d84:	e000      	b.n	8019d88 <ip4_input+0x120>
            continue;
 8019d86:	bf00      	nop
        NETIF_FOREACH(netif) {
 8019d88:	69bb      	ldr	r3, [r7, #24]
 8019d8a:	681b      	ldr	r3, [r3, #0]
 8019d8c:	61bb      	str	r3, [r7, #24]
 8019d8e:	69bb      	ldr	r3, [r7, #24]
 8019d90:	2b00      	cmp	r3, #0
 8019d92:	d1ed      	bne.n	8019d70 <ip4_input+0x108>
 8019d94:	e000      	b.n	8019d98 <ip4_input+0x130>
            break;
 8019d96:	bf00      	nop
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8019d98:	697b      	ldr	r3, [r7, #20]
 8019d9a:	2b00      	cmp	r3, #0
 8019d9c:	d013      	beq.n	8019dc6 <ip4_input+0x15e>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019d9e:	4b5e      	ldr	r3, [pc, #376]	; (8019f18 <ip4_input+0x2b0>)
 8019da0:	691b      	ldr	r3, [r3, #16]
 8019da2:	6839      	ldr	r1, [r7, #0]
 8019da4:	4618      	mov	r0, r3
 8019da6:	f000 fa0d 	bl	801a1c4 <ip4_addr_isbroadcast_u32>
 8019daa:	4603      	mov	r3, r0
 8019dac:	2b00      	cmp	r3, #0
 8019dae:	d105      	bne.n	8019dbc <ip4_input+0x154>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8019db0:	4b59      	ldr	r3, [pc, #356]	; (8019f18 <ip4_input+0x2b0>)
 8019db2:	691b      	ldr	r3, [r3, #16]
 8019db4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019db8:	2be0      	cmp	r3, #224	; 0xe0
 8019dba:	d104      	bne.n	8019dc6 <ip4_input+0x15e>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8019dbc:	6878      	ldr	r0, [r7, #4]
 8019dbe:	f7f6 fd6f 	bl	80108a0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8019dc2:	2300      	movs	r3, #0
 8019dc4:	e0a3      	b.n	8019f0e <ip4_input+0x2a6>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8019dc6:	69bb      	ldr	r3, [r7, #24]
 8019dc8:	2b00      	cmp	r3, #0
 8019dca:	d104      	bne.n	8019dd6 <ip4_input+0x16e>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8019dcc:	6878      	ldr	r0, [r7, #4]
 8019dce:	f7f6 fd67 	bl	80108a0 <pbuf_free>
    return ERR_OK;
 8019dd2:	2300      	movs	r3, #0
 8019dd4:	e09b      	b.n	8019f0e <ip4_input+0x2a6>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8019dd6:	69fb      	ldr	r3, [r7, #28]
 8019dd8:	88db      	ldrh	r3, [r3, #6]
 8019dda:	b29b      	uxth	r3, r3
 8019ddc:	461a      	mov	r2, r3
 8019dde:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8019de2:	4013      	ands	r3, r2
 8019de4:	2b00      	cmp	r3, #0
 8019de6:	d00b      	beq.n	8019e00 <ip4_input+0x198>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8019de8:	6878      	ldr	r0, [r7, #4]
 8019dea:	f000 feeb 	bl	801abc4 <ip4_reass>
 8019dee:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8019df0:	687b      	ldr	r3, [r7, #4]
 8019df2:	2b00      	cmp	r3, #0
 8019df4:	d101      	bne.n	8019dfa <ip4_input+0x192>
      return ERR_OK;
 8019df6:	2300      	movs	r3, #0
 8019df8:	e089      	b.n	8019f0e <ip4_input+0x2a6>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8019dfa:	687b      	ldr	r3, [r7, #4]
 8019dfc:	685b      	ldr	r3, [r3, #4]
 8019dfe:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8019e00:	4a45      	ldr	r2, [pc, #276]	; (8019f18 <ip4_input+0x2b0>)
 8019e02:	69bb      	ldr	r3, [r7, #24]
 8019e04:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8019e06:	4a44      	ldr	r2, [pc, #272]	; (8019f18 <ip4_input+0x2b0>)
 8019e08:	683b      	ldr	r3, [r7, #0]
 8019e0a:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8019e0c:	4a42      	ldr	r2, [pc, #264]	; (8019f18 <ip4_input+0x2b0>)
 8019e0e:	69fb      	ldr	r3, [r7, #28]
 8019e10:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8019e12:	69fb      	ldr	r3, [r7, #28]
 8019e14:	781b      	ldrb	r3, [r3, #0]
 8019e16:	f003 030f 	and.w	r3, r3, #15
 8019e1a:	b2db      	uxtb	r3, r3
 8019e1c:	009b      	lsls	r3, r3, #2
 8019e1e:	b2db      	uxtb	r3, r3
 8019e20:	b29a      	uxth	r2, r3
 8019e22:	4b3d      	ldr	r3, [pc, #244]	; (8019f18 <ip4_input+0x2b0>)
 8019e24:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8019e26:	8a7b      	ldrh	r3, [r7, #18]
 8019e28:	4619      	mov	r1, r3
 8019e2a:	6878      	ldr	r0, [r7, #4]
 8019e2c:	f7f6 fc80 	bl	8010730 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8019e30:	69fb      	ldr	r3, [r7, #28]
 8019e32:	7a5b      	ldrb	r3, [r3, #9]
 8019e34:	3b01      	subs	r3, #1
 8019e36:	2b10      	cmp	r3, #16
 8019e38:	d839      	bhi.n	8019eae <ip4_input+0x246>
 8019e3a:	a201      	add	r2, pc, #4	; (adr r2, 8019e40 <ip4_input+0x1d8>)
 8019e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019e40:	08019e99 	.word	0x08019e99
 8019e44:	08019ea3 	.word	0x08019ea3
 8019e48:	08019eaf 	.word	0x08019eaf
 8019e4c:	08019eaf 	.word	0x08019eaf
 8019e50:	08019eaf 	.word	0x08019eaf
 8019e54:	08019e8f 	.word	0x08019e8f
 8019e58:	08019eaf 	.word	0x08019eaf
 8019e5c:	08019eaf 	.word	0x08019eaf
 8019e60:	08019eaf 	.word	0x08019eaf
 8019e64:	08019eaf 	.word	0x08019eaf
 8019e68:	08019eaf 	.word	0x08019eaf
 8019e6c:	08019eaf 	.word	0x08019eaf
 8019e70:	08019eaf 	.word	0x08019eaf
 8019e74:	08019eaf 	.word	0x08019eaf
 8019e78:	08019eaf 	.word	0x08019eaf
 8019e7c:	08019eaf 	.word	0x08019eaf
 8019e80:	08019e85 	.word	0x08019e85
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8019e84:	6839      	ldr	r1, [r7, #0]
 8019e86:	6878      	ldr	r0, [r7, #4]
 8019e88:	f7fd fbae 	bl	80175e8 <udp_input>
        break;
 8019e8c:	e02c      	b.n	8019ee8 <ip4_input+0x280>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8019e8e:	6839      	ldr	r1, [r7, #0]
 8019e90:	6878      	ldr	r0, [r7, #4]
 8019e92:	f7f8 ff67 	bl	8012d64 <tcp_input>
        break;
 8019e96:	e027      	b.n	8019ee8 <ip4_input+0x280>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8019e98:	6839      	ldr	r1, [r7, #0]
 8019e9a:	6878      	ldr	r0, [r7, #4]
 8019e9c:	f7ff f824 	bl	8018ee8 <icmp_input>
        break;
 8019ea0:	e022      	b.n	8019ee8 <ip4_input+0x280>
#endif /* LWIP_ICMP */
#if LWIP_IGMP
      case IP_PROTO_IGMP:
        igmp_input(p, inp, ip4_current_dest_addr());
 8019ea2:	4a1e      	ldr	r2, [pc, #120]	; (8019f1c <ip4_input+0x2b4>)
 8019ea4:	6839      	ldr	r1, [r7, #0]
 8019ea6:	6878      	ldr	r0, [r7, #4]
 8019ea8:	f7ff fab8 	bl	801941c <igmp_input>
        break;
 8019eac:	e01c      	b.n	8019ee8 <ip4_input+0x280>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019eae:	4b1a      	ldr	r3, [pc, #104]	; (8019f18 <ip4_input+0x2b0>)
 8019eb0:	695b      	ldr	r3, [r3, #20]
 8019eb2:	69b9      	ldr	r1, [r7, #24]
 8019eb4:	4618      	mov	r0, r3
 8019eb6:	f000 f985 	bl	801a1c4 <ip4_addr_isbroadcast_u32>
 8019eba:	4603      	mov	r3, r0
 8019ebc:	2b00      	cmp	r3, #0
 8019ebe:	d10f      	bne.n	8019ee0 <ip4_input+0x278>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019ec0:	4b15      	ldr	r3, [pc, #84]	; (8019f18 <ip4_input+0x2b0>)
 8019ec2:	695b      	ldr	r3, [r3, #20]
 8019ec4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019ec8:	2be0      	cmp	r3, #224	; 0xe0
 8019eca:	d009      	beq.n	8019ee0 <ip4_input+0x278>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8019ecc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8019ed0:	4619      	mov	r1, r3
 8019ed2:	6878      	ldr	r0, [r7, #4]
 8019ed4:	f7f6 fc9f 	bl	8010816 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8019ed8:	2102      	movs	r1, #2
 8019eda:	6878      	ldr	r0, [r7, #4]
 8019edc:	f7ff f908 	bl	80190f0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8019ee0:	6878      	ldr	r0, [r7, #4]
 8019ee2:	f7f6 fcdd 	bl	80108a0 <pbuf_free>
        break;
 8019ee6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8019ee8:	4b0b      	ldr	r3, [pc, #44]	; (8019f18 <ip4_input+0x2b0>)
 8019eea:	2200      	movs	r2, #0
 8019eec:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8019eee:	4b0a      	ldr	r3, [pc, #40]	; (8019f18 <ip4_input+0x2b0>)
 8019ef0:	2200      	movs	r2, #0
 8019ef2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8019ef4:	4b08      	ldr	r3, [pc, #32]	; (8019f18 <ip4_input+0x2b0>)
 8019ef6:	2200      	movs	r2, #0
 8019ef8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8019efa:	4b07      	ldr	r3, [pc, #28]	; (8019f18 <ip4_input+0x2b0>)
 8019efc:	2200      	movs	r2, #0
 8019efe:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8019f00:	4b05      	ldr	r3, [pc, #20]	; (8019f18 <ip4_input+0x2b0>)
 8019f02:	2200      	movs	r2, #0
 8019f04:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8019f06:	4b04      	ldr	r3, [pc, #16]	; (8019f18 <ip4_input+0x2b0>)
 8019f08:	2200      	movs	r2, #0
 8019f0a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8019f0c:	2300      	movs	r3, #0
}
 8019f0e:	4618      	mov	r0, r3
 8019f10:	3720      	adds	r7, #32
 8019f12:	46bd      	mov	sp, r7
 8019f14:	bd80      	pop	{r7, pc}
 8019f16:	bf00      	nop
 8019f18:	2000c2e4 	.word	0x2000c2e4
 8019f1c:	2000c2f8 	.word	0x2000c2f8
 8019f20:	010000e0 	.word	0x010000e0
 8019f24:	2000fc30 	.word	0x2000fc30

08019f28 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8019f28:	b580      	push	{r7, lr}
 8019f2a:	b08a      	sub	sp, #40	; 0x28
 8019f2c:	af06      	add	r7, sp, #24
 8019f2e:	60f8      	str	r0, [r7, #12]
 8019f30:	60b9      	str	r1, [r7, #8]
 8019f32:	607a      	str	r2, [r7, #4]
 8019f34:	70fb      	strb	r3, [r7, #3]
#if IP_OPTIONS_SEND
  return ip4_output_if_opt(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 8019f36:	78fa      	ldrb	r2, [r7, #3]
 8019f38:	2300      	movs	r3, #0
 8019f3a:	9304      	str	r3, [sp, #16]
 8019f3c:	2300      	movs	r3, #0
 8019f3e:	9303      	str	r3, [sp, #12]
 8019f40:	6a3b      	ldr	r3, [r7, #32]
 8019f42:	9302      	str	r3, [sp, #8]
 8019f44:	7f3b      	ldrb	r3, [r7, #28]
 8019f46:	9301      	str	r3, [sp, #4]
 8019f48:	7e3b      	ldrb	r3, [r7, #24]
 8019f4a:	9300      	str	r3, [sp, #0]
 8019f4c:	4613      	mov	r3, r2
 8019f4e:	687a      	ldr	r2, [r7, #4]
 8019f50:	68b9      	ldr	r1, [r7, #8]
 8019f52:	68f8      	ldr	r0, [r7, #12]
 8019f54:	f000 f805 	bl	8019f62 <ip4_output_if_opt>
 8019f58:	4603      	mov	r3, r0
}
 8019f5a:	4618      	mov	r0, r3
 8019f5c:	3710      	adds	r7, #16
 8019f5e:	46bd      	mov	sp, r7
 8019f60:	bd80      	pop	{r7, pc}

08019f62 <ip4_output_if_opt>:
 */
err_t
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
 8019f62:	b580      	push	{r7, lr}
 8019f64:	b08c      	sub	sp, #48	; 0x30
 8019f66:	af06      	add	r7, sp, #24
 8019f68:	60f8      	str	r0, [r7, #12]
 8019f6a:	60b9      	str	r1, [r7, #8]
 8019f6c:	607a      	str	r2, [r7, #4]
 8019f6e:	70fb      	strb	r3, [r7, #3]
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8019f70:	68bb      	ldr	r3, [r7, #8]
 8019f72:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8019f74:	687b      	ldr	r3, [r7, #4]
 8019f76:	2b00      	cmp	r3, #0
 8019f78:	d009      	beq.n	8019f8e <ip4_output_if_opt+0x2c>
    if (ip4_addr_isany(src)) {
 8019f7a:	68bb      	ldr	r3, [r7, #8]
 8019f7c:	2b00      	cmp	r3, #0
 8019f7e:	d003      	beq.n	8019f88 <ip4_output_if_opt+0x26>
 8019f80:	68bb      	ldr	r3, [r7, #8]
 8019f82:	681b      	ldr	r3, [r3, #0]
 8019f84:	2b00      	cmp	r3, #0
 8019f86:	d102      	bne.n	8019f8e <ip4_output_if_opt+0x2c>
      src_used = netif_ip4_addr(netif);
 8019f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f8a:	3304      	adds	r3, #4
 8019f8c:	617b      	str	r3, [r7, #20]
    }
  }

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
 8019f8e:	78fa      	ldrb	r2, [r7, #3]
 8019f90:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8019f92:	9304      	str	r3, [sp, #16]
 8019f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f96:	9303      	str	r3, [sp, #12]
 8019f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f9a:	9302      	str	r3, [sp, #8]
 8019f9c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019fa0:	9301      	str	r3, [sp, #4]
 8019fa2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019fa6:	9300      	str	r3, [sp, #0]
 8019fa8:	4613      	mov	r3, r2
 8019faa:	687a      	ldr	r2, [r7, #4]
 8019fac:	6979      	ldr	r1, [r7, #20]
 8019fae:	68f8      	ldr	r0, [r7, #12]
 8019fb0:	f000 f822 	bl	8019ff8 <ip4_output_if_opt_src>
 8019fb4:	4603      	mov	r3, r0
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
#endif /* IP_OPTIONS_SEND */
}
 8019fb6:	4618      	mov	r0, r3
 8019fb8:	3718      	adds	r7, #24
 8019fba:	46bd      	mov	sp, r7
 8019fbc:	bd80      	pop	{r7, pc}

08019fbe <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8019fbe:	b580      	push	{r7, lr}
 8019fc0:	b08a      	sub	sp, #40	; 0x28
 8019fc2:	af06      	add	r7, sp, #24
 8019fc4:	60f8      	str	r0, [r7, #12]
 8019fc6:	60b9      	str	r1, [r7, #8]
 8019fc8:	607a      	str	r2, [r7, #4]
 8019fca:	70fb      	strb	r3, [r7, #3]
#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 8019fcc:	78fa      	ldrb	r2, [r7, #3]
 8019fce:	2300      	movs	r3, #0
 8019fd0:	9304      	str	r3, [sp, #16]
 8019fd2:	2300      	movs	r3, #0
 8019fd4:	9303      	str	r3, [sp, #12]
 8019fd6:	6a3b      	ldr	r3, [r7, #32]
 8019fd8:	9302      	str	r3, [sp, #8]
 8019fda:	7f3b      	ldrb	r3, [r7, #28]
 8019fdc:	9301      	str	r3, [sp, #4]
 8019fde:	7e3b      	ldrb	r3, [r7, #24]
 8019fe0:	9300      	str	r3, [sp, #0]
 8019fe2:	4613      	mov	r3, r2
 8019fe4:	687a      	ldr	r2, [r7, #4]
 8019fe6:	68b9      	ldr	r1, [r7, #8]
 8019fe8:	68f8      	ldr	r0, [r7, #12]
 8019fea:	f000 f805 	bl	8019ff8 <ip4_output_if_opt_src>
 8019fee:	4603      	mov	r3, r0
}
 8019ff0:	4618      	mov	r0, r3
 8019ff2:	3710      	adds	r7, #16
 8019ff4:	46bd      	mov	sp, r7
 8019ff6:	bd80      	pop	{r7, pc}

08019ff8 <ip4_output_if_opt_src>:
 */
err_t
ip4_output_if_opt_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                      u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                      u16_t optlen)
{
 8019ff8:	b580      	push	{r7, lr}
 8019ffa:	b088      	sub	sp, #32
 8019ffc:	af00      	add	r7, sp, #0
 8019ffe:	60f8      	str	r0, [r7, #12]
 801a000:	60b9      	str	r1, [r7, #8]
 801a002:	607a      	str	r2, [r7, #4]
 801a004:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801a006:	68fb      	ldr	r3, [r7, #12]
 801a008:	7b9b      	ldrb	r3, [r3, #14]
 801a00a:	2b01      	cmp	r3, #1
 801a00c:	d006      	beq.n	801a01c <ip4_output_if_opt_src+0x24>
 801a00e:	4b67      	ldr	r3, [pc, #412]	; (801a1ac <ip4_output_if_opt_src+0x1b4>)
 801a010:	f44f 7255 	mov.w	r2, #852	; 0x354
 801a014:	4966      	ldr	r1, [pc, #408]	; (801a1b0 <ip4_output_if_opt_src+0x1b8>)
 801a016:	4867      	ldr	r0, [pc, #412]	; (801a1b4 <ip4_output_if_opt_src+0x1bc>)
 801a018:	f009 fde2 	bl	8023be0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801a01c:	687b      	ldr	r3, [r7, #4]
 801a01e:	2b00      	cmp	r3, #0
 801a020:	f000 8097 	beq.w	801a152 <ip4_output_if_opt_src+0x15a>
    u16_t ip_hlen = IP_HLEN;
 801a024:	2314      	movs	r3, #20
 801a026:	83fb      	strh	r3, [r7, #30]
#if IP_OPTIONS_SEND
    u16_t optlen_aligned = 0;
 801a028:	2300      	movs	r3, #0
 801a02a:	82fb      	strh	r3, [r7, #22]
    if (optlen != 0) {
 801a02c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801a02e:	2b00      	cmp	r3, #0
 801a030:	d030      	beq.n	801a094 <ip4_output_if_opt_src+0x9c>
#if CHECKSUM_GEN_IP_INLINE
      int i;
#endif /* CHECKSUM_GEN_IP_INLINE */
      if (optlen > (IP_HLEN_MAX - IP_HLEN)) {
 801a032:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801a034:	2b28      	cmp	r3, #40	; 0x28
 801a036:	d902      	bls.n	801a03e <ip4_output_if_opt_src+0x46>
        /* optlen too long */
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: optlen too long\n"));
        IP_STATS_INC(ip.err);
        MIB2_STATS_INC(mib2.ipoutdiscards);
        return ERR_VAL;
 801a038:	f06f 0305 	mvn.w	r3, #5
 801a03c:	e0b1      	b.n	801a1a2 <ip4_output_if_opt_src+0x1aa>
      }
      /* round up to a multiple of 4 */
      optlen_aligned = (u16_t)((optlen + 3) & ~3);
 801a03e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801a040:	3303      	adds	r3, #3
 801a042:	b29b      	uxth	r3, r3
 801a044:	f023 0303 	bic.w	r3, r3, #3
 801a048:	82fb      	strh	r3, [r7, #22]
      ip_hlen = (u16_t)(ip_hlen + optlen_aligned);
 801a04a:	8bfa      	ldrh	r2, [r7, #30]
 801a04c:	8afb      	ldrh	r3, [r7, #22]
 801a04e:	4413      	add	r3, r2
 801a050:	83fb      	strh	r3, [r7, #30]
      /* First write in the IP options */
      if (pbuf_add_header(p, optlen_aligned)) {
 801a052:	8afb      	ldrh	r3, [r7, #22]
 801a054:	4619      	mov	r1, r3
 801a056:	68f8      	ldr	r0, [r7, #12]
 801a058:	f7f6 fb5a 	bl	8010710 <pbuf_add_header>
 801a05c:	4603      	mov	r3, r0
 801a05e:	2b00      	cmp	r3, #0
 801a060:	d002      	beq.n	801a068 <ip4_output_if_opt_src+0x70>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: not enough room for IP options in pbuf\n"));
        IP_STATS_INC(ip.err);
        MIB2_STATS_INC(mib2.ipoutdiscards);
        return ERR_BUF;
 801a062:	f06f 0301 	mvn.w	r3, #1
 801a066:	e09c      	b.n	801a1a2 <ip4_output_if_opt_src+0x1aa>
      }
      MEMCPY(p->payload, ip_options, optlen);
 801a068:	68fb      	ldr	r3, [r7, #12]
 801a06a:	685b      	ldr	r3, [r3, #4]
 801a06c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801a06e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a070:	4618      	mov	r0, r3
 801a072:	f009 fc8f 	bl	8023994 <memcpy>
      if (optlen < optlen_aligned) {
 801a076:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801a078:	8afb      	ldrh	r3, [r7, #22]
 801a07a:	429a      	cmp	r2, r3
 801a07c:	d20a      	bcs.n	801a094 <ip4_output_if_opt_src+0x9c>
        /* zero the remaining bytes */
        memset(((char *)p->payload) + optlen, 0, (size_t)(optlen_aligned - optlen));
 801a07e:	68fb      	ldr	r3, [r7, #12]
 801a080:	685a      	ldr	r2, [r3, #4]
 801a082:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801a084:	18d0      	adds	r0, r2, r3
 801a086:	8afa      	ldrh	r2, [r7, #22]
 801a088:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801a08a:	1ad3      	subs	r3, r2, r3
 801a08c:	461a      	mov	r2, r3
 801a08e:	2100      	movs	r1, #0
 801a090:	f009 fca8 	bl	80239e4 <memset>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801a094:	2114      	movs	r1, #20
 801a096:	68f8      	ldr	r0, [r7, #12]
 801a098:	f7f6 fb3a 	bl	8010710 <pbuf_add_header>
 801a09c:	4603      	mov	r3, r0
 801a09e:	2b00      	cmp	r3, #0
 801a0a0:	d002      	beq.n	801a0a8 <ip4_output_if_opt_src+0xb0>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801a0a2:	f06f 0301 	mvn.w	r3, #1
 801a0a6:	e07c      	b.n	801a1a2 <ip4_output_if_opt_src+0x1aa>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801a0a8:	68fb      	ldr	r3, [r7, #12]
 801a0aa:	685b      	ldr	r3, [r3, #4]
 801a0ac:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801a0ae:	68fb      	ldr	r3, [r7, #12]
 801a0b0:	895b      	ldrh	r3, [r3, #10]
 801a0b2:	2b13      	cmp	r3, #19
 801a0b4:	d806      	bhi.n	801a0c4 <ip4_output_if_opt_src+0xcc>
 801a0b6:	4b3d      	ldr	r3, [pc, #244]	; (801a1ac <ip4_output_if_opt_src+0x1b4>)
 801a0b8:	f44f 7262 	mov.w	r2, #904	; 0x388
 801a0bc:	493e      	ldr	r1, [pc, #248]	; (801a1b8 <ip4_output_if_opt_src+0x1c0>)
 801a0be:	483d      	ldr	r0, [pc, #244]	; (801a1b4 <ip4_output_if_opt_src+0x1bc>)
 801a0c0:	f009 fd8e 	bl	8023be0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801a0c4:	69bb      	ldr	r3, [r7, #24]
 801a0c6:	78fa      	ldrb	r2, [r7, #3]
 801a0c8:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801a0ca:	69bb      	ldr	r3, [r7, #24]
 801a0cc:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801a0d0:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801a0d2:	687b      	ldr	r3, [r7, #4]
 801a0d4:	681a      	ldr	r2, [r3, #0]
 801a0d6:	69bb      	ldr	r3, [r7, #24]
 801a0d8:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801a0da:	8bfb      	ldrh	r3, [r7, #30]
 801a0dc:	089b      	lsrs	r3, r3, #2
 801a0de:	b29b      	uxth	r3, r3
 801a0e0:	b2db      	uxtb	r3, r3
 801a0e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a0e6:	b2da      	uxtb	r2, r3
 801a0e8:	69bb      	ldr	r3, [r7, #24]
 801a0ea:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801a0ec:	69bb      	ldr	r3, [r7, #24]
 801a0ee:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801a0f2:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801a0f4:	68fb      	ldr	r3, [r7, #12]
 801a0f6:	891b      	ldrh	r3, [r3, #8]
 801a0f8:	4618      	mov	r0, r3
 801a0fa:	f7f3 ff7b 	bl	800dff4 <lwip_htons>
 801a0fe:	4603      	mov	r3, r0
 801a100:	461a      	mov	r2, r3
 801a102:	69bb      	ldr	r3, [r7, #24]
 801a104:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801a106:	69bb      	ldr	r3, [r7, #24]
 801a108:	2200      	movs	r2, #0
 801a10a:	719a      	strb	r2, [r3, #6]
 801a10c:	2200      	movs	r2, #0
 801a10e:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801a110:	4b2a      	ldr	r3, [pc, #168]	; (801a1bc <ip4_output_if_opt_src+0x1c4>)
 801a112:	881b      	ldrh	r3, [r3, #0]
 801a114:	4618      	mov	r0, r3
 801a116:	f7f3 ff6d 	bl	800dff4 <lwip_htons>
 801a11a:	4603      	mov	r3, r0
 801a11c:	461a      	mov	r2, r3
 801a11e:	69bb      	ldr	r3, [r7, #24]
 801a120:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801a122:	4b26      	ldr	r3, [pc, #152]	; (801a1bc <ip4_output_if_opt_src+0x1c4>)
 801a124:	881b      	ldrh	r3, [r3, #0]
 801a126:	3301      	adds	r3, #1
 801a128:	b29a      	uxth	r2, r3
 801a12a:	4b24      	ldr	r3, [pc, #144]	; (801a1bc <ip4_output_if_opt_src+0x1c4>)
 801a12c:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801a12e:	68bb      	ldr	r3, [r7, #8]
 801a130:	2b00      	cmp	r3, #0
 801a132:	d104      	bne.n	801a13e <ip4_output_if_opt_src+0x146>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801a134:	4b22      	ldr	r3, [pc, #136]	; (801a1c0 <ip4_output_if_opt_src+0x1c8>)
 801a136:	681a      	ldr	r2, [r3, #0]
 801a138:	69bb      	ldr	r3, [r7, #24]
 801a13a:	60da      	str	r2, [r3, #12]
 801a13c:	e003      	b.n	801a146 <ip4_output_if_opt_src+0x14e>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801a13e:	68bb      	ldr	r3, [r7, #8]
 801a140:	681a      	ldr	r2, [r3, #0]
 801a142:	69bb      	ldr	r3, [r7, #24]
 801a144:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801a146:	69bb      	ldr	r3, [r7, #24]
 801a148:	2200      	movs	r2, #0
 801a14a:	729a      	strb	r2, [r3, #10]
 801a14c:	2200      	movs	r2, #0
 801a14e:	72da      	strb	r2, [r3, #11]
 801a150:	e00f      	b.n	801a172 <ip4_output_if_opt_src+0x17a>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801a152:	68fb      	ldr	r3, [r7, #12]
 801a154:	895b      	ldrh	r3, [r3, #10]
 801a156:	2b13      	cmp	r3, #19
 801a158:	d802      	bhi.n	801a160 <ip4_output_if_opt_src+0x168>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801a15a:	f06f 0301 	mvn.w	r3, #1
 801a15e:	e020      	b.n	801a1a2 <ip4_output_if_opt_src+0x1aa>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801a160:	68fb      	ldr	r3, [r7, #12]
 801a162:	685b      	ldr	r3, [r3, #4]
 801a164:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801a166:	69bb      	ldr	r3, [r7, #24]
 801a168:	691b      	ldr	r3, [r3, #16]
 801a16a:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 801a16c:	f107 0310 	add.w	r3, r7, #16
 801a170:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801a172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a176:	2b00      	cmp	r3, #0
 801a178:	d00c      	beq.n	801a194 <ip4_output_if_opt_src+0x19c>
 801a17a:	68fb      	ldr	r3, [r7, #12]
 801a17c:	891a      	ldrh	r2, [r3, #8]
 801a17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a182:	429a      	cmp	r2, r3
 801a184:	d906      	bls.n	801a194 <ip4_output_if_opt_src+0x19c>
    return ip4_frag(p, netif, dest);
 801a186:	687a      	ldr	r2, [r7, #4]
 801a188:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a18a:	68f8      	ldr	r0, [r7, #12]
 801a18c:	f000 ff0e 	bl	801afac <ip4_frag>
 801a190:	4603      	mov	r3, r0
 801a192:	e006      	b.n	801a1a2 <ip4_output_if_opt_src+0x1aa>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801a194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a196:	695b      	ldr	r3, [r3, #20]
 801a198:	687a      	ldr	r2, [r7, #4]
 801a19a:	68f9      	ldr	r1, [r7, #12]
 801a19c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a19e:	4798      	blx	r3
 801a1a0:	4603      	mov	r3, r0
}
 801a1a2:	4618      	mov	r0, r3
 801a1a4:	3720      	adds	r7, #32
 801a1a6:	46bd      	mov	sp, r7
 801a1a8:	bd80      	pop	{r7, pc}
 801a1aa:	bf00      	nop
 801a1ac:	08028db0 	.word	0x08028db0
 801a1b0:	08028de4 	.word	0x08028de4
 801a1b4:	08028df0 	.word	0x08028df0
 801a1b8:	08028e18 	.word	0x08028e18
 801a1bc:	2000fd98 	.word	0x2000fd98
 801a1c0:	08029344 	.word	0x08029344

0801a1c4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801a1c4:	b480      	push	{r7}
 801a1c6:	b085      	sub	sp, #20
 801a1c8:	af00      	add	r7, sp, #0
 801a1ca:	6078      	str	r0, [r7, #4]
 801a1cc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801a1ce:	687b      	ldr	r3, [r7, #4]
 801a1d0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801a1d2:	687b      	ldr	r3, [r7, #4]
 801a1d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a1d8:	d002      	beq.n	801a1e0 <ip4_addr_isbroadcast_u32+0x1c>
 801a1da:	687b      	ldr	r3, [r7, #4]
 801a1dc:	2b00      	cmp	r3, #0
 801a1de:	d101      	bne.n	801a1e4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801a1e0:	2301      	movs	r3, #1
 801a1e2:	e02a      	b.n	801a23a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801a1e4:	683b      	ldr	r3, [r7, #0]
 801a1e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a1ea:	f003 0302 	and.w	r3, r3, #2
 801a1ee:	2b00      	cmp	r3, #0
 801a1f0:	d101      	bne.n	801a1f6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801a1f2:	2300      	movs	r3, #0
 801a1f4:	e021      	b.n	801a23a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801a1f6:	683b      	ldr	r3, [r7, #0]
 801a1f8:	3304      	adds	r3, #4
 801a1fa:	681b      	ldr	r3, [r3, #0]
 801a1fc:	687a      	ldr	r2, [r7, #4]
 801a1fe:	429a      	cmp	r2, r3
 801a200:	d101      	bne.n	801a206 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801a202:	2300      	movs	r3, #0
 801a204:	e019      	b.n	801a23a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801a206:	68fa      	ldr	r2, [r7, #12]
 801a208:	683b      	ldr	r3, [r7, #0]
 801a20a:	3304      	adds	r3, #4
 801a20c:	681b      	ldr	r3, [r3, #0]
 801a20e:	405a      	eors	r2, r3
 801a210:	683b      	ldr	r3, [r7, #0]
 801a212:	3308      	adds	r3, #8
 801a214:	681b      	ldr	r3, [r3, #0]
 801a216:	4013      	ands	r3, r2
 801a218:	2b00      	cmp	r3, #0
 801a21a:	d10d      	bne.n	801a238 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801a21c:	683b      	ldr	r3, [r7, #0]
 801a21e:	3308      	adds	r3, #8
 801a220:	681b      	ldr	r3, [r3, #0]
 801a222:	43da      	mvns	r2, r3
 801a224:	687b      	ldr	r3, [r7, #4]
 801a226:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801a228:	683b      	ldr	r3, [r7, #0]
 801a22a:	3308      	adds	r3, #8
 801a22c:	681b      	ldr	r3, [r3, #0]
 801a22e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801a230:	429a      	cmp	r2, r3
 801a232:	d101      	bne.n	801a238 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801a234:	2301      	movs	r3, #1
 801a236:	e000      	b.n	801a23a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801a238:	2300      	movs	r3, #0
  }
}
 801a23a:	4618      	mov	r0, r3
 801a23c:	3714      	adds	r7, #20
 801a23e:	46bd      	mov	sp, r7
 801a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a244:	4770      	bx	lr
	...

0801a248 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 801a248:	b580      	push	{r7, lr}
 801a24a:	b08a      	sub	sp, #40	; 0x28
 801a24c:	af00      	add	r7, sp, #0
 801a24e:	6078      	str	r0, [r7, #4]
 801a250:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 801a252:	f107 030c 	add.w	r3, r7, #12
 801a256:	61fb      	str	r3, [r7, #28]

  c = *cp;
 801a258:	687b      	ldr	r3, [r7, #4]
 801a25a:	781b      	ldrb	r3, [r3, #0]
 801a25c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 801a260:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a264:	3301      	adds	r3, #1
 801a266:	4a89      	ldr	r2, [pc, #548]	; (801a48c <ip4addr_aton+0x244>)
 801a268:	4413      	add	r3, r2
 801a26a:	781b      	ldrb	r3, [r3, #0]
 801a26c:	f003 0304 	and.w	r3, r3, #4
 801a270:	2b00      	cmp	r3, #0
 801a272:	d101      	bne.n	801a278 <ip4addr_aton+0x30>
      return 0;
 801a274:	2300      	movs	r3, #0
 801a276:	e105      	b.n	801a484 <ip4addr_aton+0x23c>
    }
    val = 0;
 801a278:	2300      	movs	r3, #0
 801a27a:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 801a27c:	230a      	movs	r3, #10
 801a27e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 801a282:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a286:	2b30      	cmp	r3, #48	; 0x30
 801a288:	d11c      	bne.n	801a2c4 <ip4addr_aton+0x7c>
      c = *++cp;
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	3301      	adds	r3, #1
 801a28e:	607b      	str	r3, [r7, #4]
 801a290:	687b      	ldr	r3, [r7, #4]
 801a292:	781b      	ldrb	r3, [r3, #0]
 801a294:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 801a298:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a29c:	2b78      	cmp	r3, #120	; 0x78
 801a29e:	d003      	beq.n	801a2a8 <ip4addr_aton+0x60>
 801a2a0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a2a4:	2b58      	cmp	r3, #88	; 0x58
 801a2a6:	d10a      	bne.n	801a2be <ip4addr_aton+0x76>
        base = 16;
 801a2a8:	2310      	movs	r3, #16
 801a2aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 801a2ae:	687b      	ldr	r3, [r7, #4]
 801a2b0:	3301      	adds	r3, #1
 801a2b2:	607b      	str	r3, [r7, #4]
 801a2b4:	687b      	ldr	r3, [r7, #4]
 801a2b6:	781b      	ldrb	r3, [r3, #0]
 801a2b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801a2bc:	e002      	b.n	801a2c4 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 801a2be:	2308      	movs	r3, #8
 801a2c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 801a2c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a2c8:	3301      	adds	r3, #1
 801a2ca:	4a70      	ldr	r2, [pc, #448]	; (801a48c <ip4addr_aton+0x244>)
 801a2cc:	4413      	add	r3, r2
 801a2ce:	781b      	ldrb	r3, [r3, #0]
 801a2d0:	f003 0304 	and.w	r3, r3, #4
 801a2d4:	2b00      	cmp	r3, #0
 801a2d6:	d011      	beq.n	801a2fc <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 801a2d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a2dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a2de:	fb03 f202 	mul.w	r2, r3, r2
 801a2e2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a2e6:	4413      	add	r3, r2
 801a2e8:	3b30      	subs	r3, #48	; 0x30
 801a2ea:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801a2ec:	687b      	ldr	r3, [r7, #4]
 801a2ee:	3301      	adds	r3, #1
 801a2f0:	607b      	str	r3, [r7, #4]
 801a2f2:	687b      	ldr	r3, [r7, #4]
 801a2f4:	781b      	ldrb	r3, [r3, #0]
 801a2f6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801a2fa:	e7e3      	b.n	801a2c4 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 801a2fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a300:	2b10      	cmp	r3, #16
 801a302:	d127      	bne.n	801a354 <ip4addr_aton+0x10c>
 801a304:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a308:	3301      	adds	r3, #1
 801a30a:	4a60      	ldr	r2, [pc, #384]	; (801a48c <ip4addr_aton+0x244>)
 801a30c:	4413      	add	r3, r2
 801a30e:	781b      	ldrb	r3, [r3, #0]
 801a310:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801a314:	2b00      	cmp	r3, #0
 801a316:	d01d      	beq.n	801a354 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801a318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a31a:	011b      	lsls	r3, r3, #4
 801a31c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801a320:	f102 010a 	add.w	r1, r2, #10
 801a324:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801a328:	3201      	adds	r2, #1
 801a32a:	4858      	ldr	r0, [pc, #352]	; (801a48c <ip4addr_aton+0x244>)
 801a32c:	4402      	add	r2, r0
 801a32e:	7812      	ldrb	r2, [r2, #0]
 801a330:	f002 0203 	and.w	r2, r2, #3
 801a334:	2a02      	cmp	r2, #2
 801a336:	d101      	bne.n	801a33c <ip4addr_aton+0xf4>
 801a338:	2261      	movs	r2, #97	; 0x61
 801a33a:	e000      	b.n	801a33e <ip4addr_aton+0xf6>
 801a33c:	2241      	movs	r2, #65	; 0x41
 801a33e:	1a8a      	subs	r2, r1, r2
 801a340:	4313      	orrs	r3, r2
 801a342:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801a344:	687b      	ldr	r3, [r7, #4]
 801a346:	3301      	adds	r3, #1
 801a348:	607b      	str	r3, [r7, #4]
 801a34a:	687b      	ldr	r3, [r7, #4]
 801a34c:	781b      	ldrb	r3, [r3, #0]
 801a34e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 801a352:	e7b7      	b.n	801a2c4 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 801a354:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a358:	2b2e      	cmp	r3, #46	; 0x2e
 801a35a:	d114      	bne.n	801a386 <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801a35c:	f107 030c 	add.w	r3, r7, #12
 801a360:	330c      	adds	r3, #12
 801a362:	69fa      	ldr	r2, [r7, #28]
 801a364:	429a      	cmp	r2, r3
 801a366:	d301      	bcc.n	801a36c <ip4addr_aton+0x124>
        return 0;
 801a368:	2300      	movs	r3, #0
 801a36a:	e08b      	b.n	801a484 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 801a36c:	69fb      	ldr	r3, [r7, #28]
 801a36e:	1d1a      	adds	r2, r3, #4
 801a370:	61fa      	str	r2, [r7, #28]
 801a372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a374:	601a      	str	r2, [r3, #0]
      c = *++cp;
 801a376:	687b      	ldr	r3, [r7, #4]
 801a378:	3301      	adds	r3, #1
 801a37a:	607b      	str	r3, [r7, #4]
 801a37c:	687b      	ldr	r3, [r7, #4]
 801a37e:	781b      	ldrb	r3, [r3, #0]
 801a380:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 801a384:	e76c      	b.n	801a260 <ip4addr_aton+0x18>
    } else {
      break;
 801a386:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 801a388:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a38c:	2b00      	cmp	r3, #0
 801a38e:	d00b      	beq.n	801a3a8 <ip4addr_aton+0x160>
 801a390:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a394:	3301      	adds	r3, #1
 801a396:	4a3d      	ldr	r2, [pc, #244]	; (801a48c <ip4addr_aton+0x244>)
 801a398:	4413      	add	r3, r2
 801a39a:	781b      	ldrb	r3, [r3, #0]
 801a39c:	f003 0308 	and.w	r3, r3, #8
 801a3a0:	2b00      	cmp	r3, #0
 801a3a2:	d101      	bne.n	801a3a8 <ip4addr_aton+0x160>
    return 0;
 801a3a4:	2300      	movs	r3, #0
 801a3a6:	e06d      	b.n	801a484 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 801a3a8:	f107 030c 	add.w	r3, r7, #12
 801a3ac:	69fa      	ldr	r2, [r7, #28]
 801a3ae:	1ad3      	subs	r3, r2, r3
 801a3b0:	109b      	asrs	r3, r3, #2
 801a3b2:	3301      	adds	r3, #1
 801a3b4:	2b04      	cmp	r3, #4
 801a3b6:	d853      	bhi.n	801a460 <ip4addr_aton+0x218>
 801a3b8:	a201      	add	r2, pc, #4	; (adr r2, 801a3c0 <ip4addr_aton+0x178>)
 801a3ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a3be:	bf00      	nop
 801a3c0:	0801a3d5 	.word	0x0801a3d5
 801a3c4:	0801a46f 	.word	0x0801a46f
 801a3c8:	0801a3d9 	.word	0x0801a3d9
 801a3cc:	0801a3fb 	.word	0x0801a3fb
 801a3d0:	0801a429 	.word	0x0801a429

    case 0:
      return 0;       /* initial nondigit */
 801a3d4:	2300      	movs	r3, #0
 801a3d6:	e055      	b.n	801a484 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 801a3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801a3de:	d301      	bcc.n	801a3e4 <ip4addr_aton+0x19c>
        return 0;
 801a3e0:	2300      	movs	r3, #0
 801a3e2:	e04f      	b.n	801a484 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 801a3e4:	68fb      	ldr	r3, [r7, #12]
 801a3e6:	2bff      	cmp	r3, #255	; 0xff
 801a3e8:	d901      	bls.n	801a3ee <ip4addr_aton+0x1a6>
        return 0;
 801a3ea:	2300      	movs	r3, #0
 801a3ec:	e04a      	b.n	801a484 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 801a3ee:	68fb      	ldr	r3, [r7, #12]
 801a3f0:	061b      	lsls	r3, r3, #24
 801a3f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a3f4:	4313      	orrs	r3, r2
 801a3f6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801a3f8:	e03a      	b.n	801a470 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 801a3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a400:	d301      	bcc.n	801a406 <ip4addr_aton+0x1be>
        return 0;
 801a402:	2300      	movs	r3, #0
 801a404:	e03e      	b.n	801a484 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801a406:	68fb      	ldr	r3, [r7, #12]
 801a408:	2bff      	cmp	r3, #255	; 0xff
 801a40a:	d802      	bhi.n	801a412 <ip4addr_aton+0x1ca>
 801a40c:	693b      	ldr	r3, [r7, #16]
 801a40e:	2bff      	cmp	r3, #255	; 0xff
 801a410:	d901      	bls.n	801a416 <ip4addr_aton+0x1ce>
        return 0;
 801a412:	2300      	movs	r3, #0
 801a414:	e036      	b.n	801a484 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 801a416:	68fb      	ldr	r3, [r7, #12]
 801a418:	061a      	lsls	r2, r3, #24
 801a41a:	693b      	ldr	r3, [r7, #16]
 801a41c:	041b      	lsls	r3, r3, #16
 801a41e:	4313      	orrs	r3, r2
 801a420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a422:	4313      	orrs	r3, r2
 801a424:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801a426:	e023      	b.n	801a470 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 801a428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a42a:	2bff      	cmp	r3, #255	; 0xff
 801a42c:	d901      	bls.n	801a432 <ip4addr_aton+0x1ea>
        return 0;
 801a42e:	2300      	movs	r3, #0
 801a430:	e028      	b.n	801a484 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801a432:	68fb      	ldr	r3, [r7, #12]
 801a434:	2bff      	cmp	r3, #255	; 0xff
 801a436:	d805      	bhi.n	801a444 <ip4addr_aton+0x1fc>
 801a438:	693b      	ldr	r3, [r7, #16]
 801a43a:	2bff      	cmp	r3, #255	; 0xff
 801a43c:	d802      	bhi.n	801a444 <ip4addr_aton+0x1fc>
 801a43e:	697b      	ldr	r3, [r7, #20]
 801a440:	2bff      	cmp	r3, #255	; 0xff
 801a442:	d901      	bls.n	801a448 <ip4addr_aton+0x200>
        return 0;
 801a444:	2300      	movs	r3, #0
 801a446:	e01d      	b.n	801a484 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 801a448:	68fb      	ldr	r3, [r7, #12]
 801a44a:	061a      	lsls	r2, r3, #24
 801a44c:	693b      	ldr	r3, [r7, #16]
 801a44e:	041b      	lsls	r3, r3, #16
 801a450:	431a      	orrs	r2, r3
 801a452:	697b      	ldr	r3, [r7, #20]
 801a454:	021b      	lsls	r3, r3, #8
 801a456:	4313      	orrs	r3, r2
 801a458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a45a:	4313      	orrs	r3, r2
 801a45c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801a45e:	e007      	b.n	801a470 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 801a460:	4b0b      	ldr	r3, [pc, #44]	; (801a490 <ip4addr_aton+0x248>)
 801a462:	22f9      	movs	r2, #249	; 0xf9
 801a464:	490b      	ldr	r1, [pc, #44]	; (801a494 <ip4addr_aton+0x24c>)
 801a466:	480c      	ldr	r0, [pc, #48]	; (801a498 <ip4addr_aton+0x250>)
 801a468:	f009 fbba 	bl	8023be0 <iprintf>
      break;
 801a46c:	e000      	b.n	801a470 <ip4addr_aton+0x228>
      break;
 801a46e:	bf00      	nop
  }
  if (addr) {
 801a470:	683b      	ldr	r3, [r7, #0]
 801a472:	2b00      	cmp	r3, #0
 801a474:	d005      	beq.n	801a482 <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801a476:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a478:	f7f3 fdd1 	bl	800e01e <lwip_htonl>
 801a47c:	4602      	mov	r2, r0
 801a47e:	683b      	ldr	r3, [r7, #0]
 801a480:	601a      	str	r2, [r3, #0]
  }
  return 1;
 801a482:	2301      	movs	r3, #1
}
 801a484:	4618      	mov	r0, r3
 801a486:	3728      	adds	r7, #40	; 0x28
 801a488:	46bd      	mov	sp, r7
 801a48a:	bd80      	pop	{r7, pc}
 801a48c:	08029a9c 	.word	0x08029a9c
 801a490:	08028e48 	.word	0x08028e48
 801a494:	08028e84 	.word	0x08028e84
 801a498:	08028e90 	.word	0x08028e90

0801a49c <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 801a49c:	b580      	push	{r7, lr}
 801a49e:	b082      	sub	sp, #8
 801a4a0:	af00      	add	r7, sp, #0
 801a4a2:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 801a4a4:	2210      	movs	r2, #16
 801a4a6:	4904      	ldr	r1, [pc, #16]	; (801a4b8 <ip4addr_ntoa+0x1c>)
 801a4a8:	6878      	ldr	r0, [r7, #4]
 801a4aa:	f000 f807 	bl	801a4bc <ip4addr_ntoa_r>
 801a4ae:	4603      	mov	r3, r0
}
 801a4b0:	4618      	mov	r0, r3
 801a4b2:	3708      	adds	r7, #8
 801a4b4:	46bd      	mov	sp, r7
 801a4b6:	bd80      	pop	{r7, pc}
 801a4b8:	2000fda0 	.word	0x2000fda0

0801a4bc <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 801a4bc:	b480      	push	{r7}
 801a4be:	b08d      	sub	sp, #52	; 0x34
 801a4c0:	af00      	add	r7, sp, #0
 801a4c2:	60f8      	str	r0, [r7, #12]
 801a4c4:	60b9      	str	r1, [r7, #8]
 801a4c6:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 801a4c8:	2300      	movs	r3, #0
 801a4ca:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 801a4cc:	68fb      	ldr	r3, [r7, #12]
 801a4ce:	681b      	ldr	r3, [r3, #0]
 801a4d0:	61bb      	str	r3, [r7, #24]

  rp = buf;
 801a4d2:	68bb      	ldr	r3, [r7, #8]
 801a4d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 801a4d6:	f107 0318 	add.w	r3, r7, #24
 801a4da:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 801a4dc:	2300      	movs	r3, #0
 801a4de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a4e2:	e058      	b.n	801a596 <ip4addr_ntoa_r+0xda>
    i = 0;
 801a4e4:	2300      	movs	r3, #0
 801a4e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 801a4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4ec:	781a      	ldrb	r2, [r3, #0]
 801a4ee:	4b32      	ldr	r3, [pc, #200]	; (801a5b8 <ip4addr_ntoa_r+0xfc>)
 801a4f0:	fba3 1302 	umull	r1, r3, r3, r2
 801a4f4:	08d9      	lsrs	r1, r3, #3
 801a4f6:	460b      	mov	r3, r1
 801a4f8:	009b      	lsls	r3, r3, #2
 801a4fa:	440b      	add	r3, r1
 801a4fc:	005b      	lsls	r3, r3, #1
 801a4fe:	1ad3      	subs	r3, r2, r3
 801a500:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 801a502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a504:	781b      	ldrb	r3, [r3, #0]
 801a506:	4a2c      	ldr	r2, [pc, #176]	; (801a5b8 <ip4addr_ntoa_r+0xfc>)
 801a508:	fba2 2303 	umull	r2, r3, r2, r3
 801a50c:	08db      	lsrs	r3, r3, #3
 801a50e:	b2da      	uxtb	r2, r3
 801a510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a512:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 801a514:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a518:	1c5a      	adds	r2, r3, #1
 801a51a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801a51e:	4619      	mov	r1, r3
 801a520:	7ffb      	ldrb	r3, [r7, #31]
 801a522:	3330      	adds	r3, #48	; 0x30
 801a524:	b2da      	uxtb	r2, r3
 801a526:	f101 0330 	add.w	r3, r1, #48	; 0x30
 801a52a:	443b      	add	r3, r7
 801a52c:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 801a530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a532:	781b      	ldrb	r3, [r3, #0]
 801a534:	2b00      	cmp	r3, #0
 801a536:	d1d8      	bne.n	801a4ea <ip4addr_ntoa_r+0x2e>
    while (i--) {
 801a538:	e011      	b.n	801a55e <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 801a53a:	6a3b      	ldr	r3, [r7, #32]
 801a53c:	1c5a      	adds	r2, r3, #1
 801a53e:	623a      	str	r2, [r7, #32]
 801a540:	687a      	ldr	r2, [r7, #4]
 801a542:	429a      	cmp	r2, r3
 801a544:	dc01      	bgt.n	801a54a <ip4addr_ntoa_r+0x8e>
        return NULL;
 801a546:	2300      	movs	r3, #0
 801a548:	e030      	b.n	801a5ac <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 801a54a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801a54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a550:	1c59      	adds	r1, r3, #1
 801a552:	62f9      	str	r1, [r7, #44]	; 0x2c
 801a554:	3230      	adds	r2, #48	; 0x30
 801a556:	443a      	add	r2, r7
 801a558:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 801a55c:	701a      	strb	r2, [r3, #0]
    while (i--) {
 801a55e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a562:	1e5a      	subs	r2, r3, #1
 801a564:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801a568:	2b00      	cmp	r3, #0
 801a56a:	d1e6      	bne.n	801a53a <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 801a56c:	6a3b      	ldr	r3, [r7, #32]
 801a56e:	1c5a      	adds	r2, r3, #1
 801a570:	623a      	str	r2, [r7, #32]
 801a572:	687a      	ldr	r2, [r7, #4]
 801a574:	429a      	cmp	r2, r3
 801a576:	dc01      	bgt.n	801a57c <ip4addr_ntoa_r+0xc0>
      return NULL;
 801a578:	2300      	movs	r3, #0
 801a57a:	e017      	b.n	801a5ac <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 801a57c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a57e:	1c5a      	adds	r2, r3, #1
 801a580:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a582:	222e      	movs	r2, #46	; 0x2e
 801a584:	701a      	strb	r2, [r3, #0]
    ap++;
 801a586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a588:	3301      	adds	r3, #1
 801a58a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 801a58c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a590:	3301      	adds	r3, #1
 801a592:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a596:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a59a:	2b03      	cmp	r3, #3
 801a59c:	d9a2      	bls.n	801a4e4 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 801a59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5a0:	3b01      	subs	r3, #1
 801a5a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5a6:	2200      	movs	r2, #0
 801a5a8:	701a      	strb	r2, [r3, #0]
  return buf;
 801a5aa:	68bb      	ldr	r3, [r7, #8]
}
 801a5ac:	4618      	mov	r0, r3
 801a5ae:	3734      	adds	r7, #52	; 0x34
 801a5b0:	46bd      	mov	sp, r7
 801a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5b6:	4770      	bx	lr
 801a5b8:	cccccccd 	.word	0xcccccccd

0801a5bc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801a5bc:	b580      	push	{r7, lr}
 801a5be:	b084      	sub	sp, #16
 801a5c0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801a5c2:	2300      	movs	r3, #0
 801a5c4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801a5c6:	4b12      	ldr	r3, [pc, #72]	; (801a610 <ip_reass_tmr+0x54>)
 801a5c8:	681b      	ldr	r3, [r3, #0]
 801a5ca:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801a5cc:	e018      	b.n	801a600 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801a5ce:	68fb      	ldr	r3, [r7, #12]
 801a5d0:	7fdb      	ldrb	r3, [r3, #31]
 801a5d2:	2b00      	cmp	r3, #0
 801a5d4:	d00b      	beq.n	801a5ee <ip_reass_tmr+0x32>
      r->timer--;
 801a5d6:	68fb      	ldr	r3, [r7, #12]
 801a5d8:	7fdb      	ldrb	r3, [r3, #31]
 801a5da:	3b01      	subs	r3, #1
 801a5dc:	b2da      	uxtb	r2, r3
 801a5de:	68fb      	ldr	r3, [r7, #12]
 801a5e0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801a5e2:	68fb      	ldr	r3, [r7, #12]
 801a5e4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801a5e6:	68fb      	ldr	r3, [r7, #12]
 801a5e8:	681b      	ldr	r3, [r3, #0]
 801a5ea:	60fb      	str	r3, [r7, #12]
 801a5ec:	e008      	b.n	801a600 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801a5ee:	68fb      	ldr	r3, [r7, #12]
 801a5f0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801a5f2:	68fb      	ldr	r3, [r7, #12]
 801a5f4:	681b      	ldr	r3, [r3, #0]
 801a5f6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801a5f8:	68b9      	ldr	r1, [r7, #8]
 801a5fa:	6878      	ldr	r0, [r7, #4]
 801a5fc:	f000 f80a 	bl	801a614 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801a600:	68fb      	ldr	r3, [r7, #12]
 801a602:	2b00      	cmp	r3, #0
 801a604:	d1e3      	bne.n	801a5ce <ip_reass_tmr+0x12>
    }
  }
}
 801a606:	bf00      	nop
 801a608:	bf00      	nop
 801a60a:	3710      	adds	r7, #16
 801a60c:	46bd      	mov	sp, r7
 801a60e:	bd80      	pop	{r7, pc}
 801a610:	2000fdb0 	.word	0x2000fdb0

0801a614 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a614:	b580      	push	{r7, lr}
 801a616:	b088      	sub	sp, #32
 801a618:	af00      	add	r7, sp, #0
 801a61a:	6078      	str	r0, [r7, #4]
 801a61c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801a61e:	2300      	movs	r3, #0
 801a620:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801a622:	683a      	ldr	r2, [r7, #0]
 801a624:	687b      	ldr	r3, [r7, #4]
 801a626:	429a      	cmp	r2, r3
 801a628:	d105      	bne.n	801a636 <ip_reass_free_complete_datagram+0x22>
 801a62a:	4b45      	ldr	r3, [pc, #276]	; (801a740 <ip_reass_free_complete_datagram+0x12c>)
 801a62c:	22ab      	movs	r2, #171	; 0xab
 801a62e:	4945      	ldr	r1, [pc, #276]	; (801a744 <ip_reass_free_complete_datagram+0x130>)
 801a630:	4845      	ldr	r0, [pc, #276]	; (801a748 <ip_reass_free_complete_datagram+0x134>)
 801a632:	f009 fad5 	bl	8023be0 <iprintf>
  if (prev != NULL) {
 801a636:	683b      	ldr	r3, [r7, #0]
 801a638:	2b00      	cmp	r3, #0
 801a63a:	d00a      	beq.n	801a652 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801a63c:	683b      	ldr	r3, [r7, #0]
 801a63e:	681b      	ldr	r3, [r3, #0]
 801a640:	687a      	ldr	r2, [r7, #4]
 801a642:	429a      	cmp	r2, r3
 801a644:	d005      	beq.n	801a652 <ip_reass_free_complete_datagram+0x3e>
 801a646:	4b3e      	ldr	r3, [pc, #248]	; (801a740 <ip_reass_free_complete_datagram+0x12c>)
 801a648:	22ad      	movs	r2, #173	; 0xad
 801a64a:	4940      	ldr	r1, [pc, #256]	; (801a74c <ip_reass_free_complete_datagram+0x138>)
 801a64c:	483e      	ldr	r0, [pc, #248]	; (801a748 <ip_reass_free_complete_datagram+0x134>)
 801a64e:	f009 fac7 	bl	8023be0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801a652:	687b      	ldr	r3, [r7, #4]
 801a654:	685b      	ldr	r3, [r3, #4]
 801a656:	685b      	ldr	r3, [r3, #4]
 801a658:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801a65a:	697b      	ldr	r3, [r7, #20]
 801a65c:	889b      	ldrh	r3, [r3, #4]
 801a65e:	b29b      	uxth	r3, r3
 801a660:	2b00      	cmp	r3, #0
 801a662:	d12a      	bne.n	801a6ba <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801a664:	687b      	ldr	r3, [r7, #4]
 801a666:	685b      	ldr	r3, [r3, #4]
 801a668:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801a66a:	697b      	ldr	r3, [r7, #20]
 801a66c:	681a      	ldr	r2, [r3, #0]
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801a672:	69bb      	ldr	r3, [r7, #24]
 801a674:	6858      	ldr	r0, [r3, #4]
 801a676:	687b      	ldr	r3, [r7, #4]
 801a678:	3308      	adds	r3, #8
 801a67a:	2214      	movs	r2, #20
 801a67c:	4619      	mov	r1, r3
 801a67e:	f009 f989 	bl	8023994 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801a682:	2101      	movs	r1, #1
 801a684:	69b8      	ldr	r0, [r7, #24]
 801a686:	f7fe fd43 	bl	8019110 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801a68a:	69b8      	ldr	r0, [r7, #24]
 801a68c:	f7f6 f996 	bl	80109bc <pbuf_clen>
 801a690:	4603      	mov	r3, r0
 801a692:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a694:	8bfa      	ldrh	r2, [r7, #30]
 801a696:	8a7b      	ldrh	r3, [r7, #18]
 801a698:	4413      	add	r3, r2
 801a69a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a69e:	db05      	blt.n	801a6ac <ip_reass_free_complete_datagram+0x98>
 801a6a0:	4b27      	ldr	r3, [pc, #156]	; (801a740 <ip_reass_free_complete_datagram+0x12c>)
 801a6a2:	22bc      	movs	r2, #188	; 0xbc
 801a6a4:	492a      	ldr	r1, [pc, #168]	; (801a750 <ip_reass_free_complete_datagram+0x13c>)
 801a6a6:	4828      	ldr	r0, [pc, #160]	; (801a748 <ip_reass_free_complete_datagram+0x134>)
 801a6a8:	f009 fa9a 	bl	8023be0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a6ac:	8bfa      	ldrh	r2, [r7, #30]
 801a6ae:	8a7b      	ldrh	r3, [r7, #18]
 801a6b0:	4413      	add	r3, r2
 801a6b2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801a6b4:	69b8      	ldr	r0, [r7, #24]
 801a6b6:	f7f6 f8f3 	bl	80108a0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801a6ba:	687b      	ldr	r3, [r7, #4]
 801a6bc:	685b      	ldr	r3, [r3, #4]
 801a6be:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801a6c0:	e01f      	b.n	801a702 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801a6c2:	69bb      	ldr	r3, [r7, #24]
 801a6c4:	685b      	ldr	r3, [r3, #4]
 801a6c6:	617b      	str	r3, [r7, #20]
    pcur = p;
 801a6c8:	69bb      	ldr	r3, [r7, #24]
 801a6ca:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801a6cc:	697b      	ldr	r3, [r7, #20]
 801a6ce:	681b      	ldr	r3, [r3, #0]
 801a6d0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801a6d2:	68f8      	ldr	r0, [r7, #12]
 801a6d4:	f7f6 f972 	bl	80109bc <pbuf_clen>
 801a6d8:	4603      	mov	r3, r0
 801a6da:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a6dc:	8bfa      	ldrh	r2, [r7, #30]
 801a6de:	8a7b      	ldrh	r3, [r7, #18]
 801a6e0:	4413      	add	r3, r2
 801a6e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a6e6:	db05      	blt.n	801a6f4 <ip_reass_free_complete_datagram+0xe0>
 801a6e8:	4b15      	ldr	r3, [pc, #84]	; (801a740 <ip_reass_free_complete_datagram+0x12c>)
 801a6ea:	22cc      	movs	r2, #204	; 0xcc
 801a6ec:	4918      	ldr	r1, [pc, #96]	; (801a750 <ip_reass_free_complete_datagram+0x13c>)
 801a6ee:	4816      	ldr	r0, [pc, #88]	; (801a748 <ip_reass_free_complete_datagram+0x134>)
 801a6f0:	f009 fa76 	bl	8023be0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a6f4:	8bfa      	ldrh	r2, [r7, #30]
 801a6f6:	8a7b      	ldrh	r3, [r7, #18]
 801a6f8:	4413      	add	r3, r2
 801a6fa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801a6fc:	68f8      	ldr	r0, [r7, #12]
 801a6fe:	f7f6 f8cf 	bl	80108a0 <pbuf_free>
  while (p != NULL) {
 801a702:	69bb      	ldr	r3, [r7, #24]
 801a704:	2b00      	cmp	r3, #0
 801a706:	d1dc      	bne.n	801a6c2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801a708:	6839      	ldr	r1, [r7, #0]
 801a70a:	6878      	ldr	r0, [r7, #4]
 801a70c:	f000 f8c2 	bl	801a894 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801a710:	4b10      	ldr	r3, [pc, #64]	; (801a754 <ip_reass_free_complete_datagram+0x140>)
 801a712:	881b      	ldrh	r3, [r3, #0]
 801a714:	8bfa      	ldrh	r2, [r7, #30]
 801a716:	429a      	cmp	r2, r3
 801a718:	d905      	bls.n	801a726 <ip_reass_free_complete_datagram+0x112>
 801a71a:	4b09      	ldr	r3, [pc, #36]	; (801a740 <ip_reass_free_complete_datagram+0x12c>)
 801a71c:	22d2      	movs	r2, #210	; 0xd2
 801a71e:	490e      	ldr	r1, [pc, #56]	; (801a758 <ip_reass_free_complete_datagram+0x144>)
 801a720:	4809      	ldr	r0, [pc, #36]	; (801a748 <ip_reass_free_complete_datagram+0x134>)
 801a722:	f009 fa5d 	bl	8023be0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801a726:	4b0b      	ldr	r3, [pc, #44]	; (801a754 <ip_reass_free_complete_datagram+0x140>)
 801a728:	881a      	ldrh	r2, [r3, #0]
 801a72a:	8bfb      	ldrh	r3, [r7, #30]
 801a72c:	1ad3      	subs	r3, r2, r3
 801a72e:	b29a      	uxth	r2, r3
 801a730:	4b08      	ldr	r3, [pc, #32]	; (801a754 <ip_reass_free_complete_datagram+0x140>)
 801a732:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801a734:	8bfb      	ldrh	r3, [r7, #30]
}
 801a736:	4618      	mov	r0, r3
 801a738:	3720      	adds	r7, #32
 801a73a:	46bd      	mov	sp, r7
 801a73c:	bd80      	pop	{r7, pc}
 801a73e:	bf00      	nop
 801a740:	08028eb8 	.word	0x08028eb8
 801a744:	08028ef4 	.word	0x08028ef4
 801a748:	08028f00 	.word	0x08028f00
 801a74c:	08028f28 	.word	0x08028f28
 801a750:	08028f3c 	.word	0x08028f3c
 801a754:	2000fdb4 	.word	0x2000fdb4
 801a758:	08028f5c 	.word	0x08028f5c

0801a75c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801a75c:	b580      	push	{r7, lr}
 801a75e:	b08a      	sub	sp, #40	; 0x28
 801a760:	af00      	add	r7, sp, #0
 801a762:	6078      	str	r0, [r7, #4]
 801a764:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801a766:	2300      	movs	r3, #0
 801a768:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801a76a:	2300      	movs	r3, #0
 801a76c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801a76e:	2300      	movs	r3, #0
 801a770:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801a772:	2300      	movs	r3, #0
 801a774:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801a776:	2300      	movs	r3, #0
 801a778:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801a77a:	4b28      	ldr	r3, [pc, #160]	; (801a81c <ip_reass_remove_oldest_datagram+0xc0>)
 801a77c:	681b      	ldr	r3, [r3, #0]
 801a77e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801a780:	e030      	b.n	801a7e4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801a782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a784:	695a      	ldr	r2, [r3, #20]
 801a786:	687b      	ldr	r3, [r7, #4]
 801a788:	68db      	ldr	r3, [r3, #12]
 801a78a:	429a      	cmp	r2, r3
 801a78c:	d10c      	bne.n	801a7a8 <ip_reass_remove_oldest_datagram+0x4c>
 801a78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a790:	699a      	ldr	r2, [r3, #24]
 801a792:	687b      	ldr	r3, [r7, #4]
 801a794:	691b      	ldr	r3, [r3, #16]
 801a796:	429a      	cmp	r2, r3
 801a798:	d106      	bne.n	801a7a8 <ip_reass_remove_oldest_datagram+0x4c>
 801a79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a79c:	899a      	ldrh	r2, [r3, #12]
 801a79e:	687b      	ldr	r3, [r7, #4]
 801a7a0:	889b      	ldrh	r3, [r3, #4]
 801a7a2:	b29b      	uxth	r3, r3
 801a7a4:	429a      	cmp	r2, r3
 801a7a6:	d014      	beq.n	801a7d2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801a7a8:	693b      	ldr	r3, [r7, #16]
 801a7aa:	3301      	adds	r3, #1
 801a7ac:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801a7ae:	6a3b      	ldr	r3, [r7, #32]
 801a7b0:	2b00      	cmp	r3, #0
 801a7b2:	d104      	bne.n	801a7be <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801a7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7b6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a7b8:	69fb      	ldr	r3, [r7, #28]
 801a7ba:	61bb      	str	r3, [r7, #24]
 801a7bc:	e009      	b.n	801a7d2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801a7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7c0:	7fda      	ldrb	r2, [r3, #31]
 801a7c2:	6a3b      	ldr	r3, [r7, #32]
 801a7c4:	7fdb      	ldrb	r3, [r3, #31]
 801a7c6:	429a      	cmp	r2, r3
 801a7c8:	d803      	bhi.n	801a7d2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801a7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7cc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a7ce:	69fb      	ldr	r3, [r7, #28]
 801a7d0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801a7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7d4:	681b      	ldr	r3, [r3, #0]
 801a7d6:	2b00      	cmp	r3, #0
 801a7d8:	d001      	beq.n	801a7de <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801a7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7dc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801a7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7e0:	681b      	ldr	r3, [r3, #0]
 801a7e2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801a7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7e6:	2b00      	cmp	r3, #0
 801a7e8:	d1cb      	bne.n	801a782 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801a7ea:	6a3b      	ldr	r3, [r7, #32]
 801a7ec:	2b00      	cmp	r3, #0
 801a7ee:	d008      	beq.n	801a802 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801a7f0:	69b9      	ldr	r1, [r7, #24]
 801a7f2:	6a38      	ldr	r0, [r7, #32]
 801a7f4:	f7ff ff0e 	bl	801a614 <ip_reass_free_complete_datagram>
 801a7f8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801a7fa:	697a      	ldr	r2, [r7, #20]
 801a7fc:	68fb      	ldr	r3, [r7, #12]
 801a7fe:	4413      	add	r3, r2
 801a800:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801a802:	697a      	ldr	r2, [r7, #20]
 801a804:	683b      	ldr	r3, [r7, #0]
 801a806:	429a      	cmp	r2, r3
 801a808:	da02      	bge.n	801a810 <ip_reass_remove_oldest_datagram+0xb4>
 801a80a:	693b      	ldr	r3, [r7, #16]
 801a80c:	2b01      	cmp	r3, #1
 801a80e:	dcac      	bgt.n	801a76a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801a810:	697b      	ldr	r3, [r7, #20]
}
 801a812:	4618      	mov	r0, r3
 801a814:	3728      	adds	r7, #40	; 0x28
 801a816:	46bd      	mov	sp, r7
 801a818:	bd80      	pop	{r7, pc}
 801a81a:	bf00      	nop
 801a81c:	2000fdb0 	.word	0x2000fdb0

0801a820 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801a820:	b580      	push	{r7, lr}
 801a822:	b084      	sub	sp, #16
 801a824:	af00      	add	r7, sp, #0
 801a826:	6078      	str	r0, [r7, #4]
 801a828:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a82a:	2004      	movs	r0, #4
 801a82c:	f7f5 f8ba 	bl	800f9a4 <memp_malloc>
 801a830:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801a832:	68fb      	ldr	r3, [r7, #12]
 801a834:	2b00      	cmp	r3, #0
 801a836:	d110      	bne.n	801a85a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801a838:	6839      	ldr	r1, [r7, #0]
 801a83a:	6878      	ldr	r0, [r7, #4]
 801a83c:	f7ff ff8e 	bl	801a75c <ip_reass_remove_oldest_datagram>
 801a840:	4602      	mov	r2, r0
 801a842:	683b      	ldr	r3, [r7, #0]
 801a844:	4293      	cmp	r3, r2
 801a846:	dc03      	bgt.n	801a850 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a848:	2004      	movs	r0, #4
 801a84a:	f7f5 f8ab 	bl	800f9a4 <memp_malloc>
 801a84e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801a850:	68fb      	ldr	r3, [r7, #12]
 801a852:	2b00      	cmp	r3, #0
 801a854:	d101      	bne.n	801a85a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801a856:	2300      	movs	r3, #0
 801a858:	e016      	b.n	801a888 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801a85a:	2220      	movs	r2, #32
 801a85c:	2100      	movs	r1, #0
 801a85e:	68f8      	ldr	r0, [r7, #12]
 801a860:	f009 f8c0 	bl	80239e4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801a864:	68fb      	ldr	r3, [r7, #12]
 801a866:	220f      	movs	r2, #15
 801a868:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801a86a:	4b09      	ldr	r3, [pc, #36]	; (801a890 <ip_reass_enqueue_new_datagram+0x70>)
 801a86c:	681a      	ldr	r2, [r3, #0]
 801a86e:	68fb      	ldr	r3, [r7, #12]
 801a870:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801a872:	4a07      	ldr	r2, [pc, #28]	; (801a890 <ip_reass_enqueue_new_datagram+0x70>)
 801a874:	68fb      	ldr	r3, [r7, #12]
 801a876:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801a878:	68fb      	ldr	r3, [r7, #12]
 801a87a:	3308      	adds	r3, #8
 801a87c:	2214      	movs	r2, #20
 801a87e:	6879      	ldr	r1, [r7, #4]
 801a880:	4618      	mov	r0, r3
 801a882:	f009 f887 	bl	8023994 <memcpy>
  return ipr;
 801a886:	68fb      	ldr	r3, [r7, #12]
}
 801a888:	4618      	mov	r0, r3
 801a88a:	3710      	adds	r7, #16
 801a88c:	46bd      	mov	sp, r7
 801a88e:	bd80      	pop	{r7, pc}
 801a890:	2000fdb0 	.word	0x2000fdb0

0801a894 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a894:	b580      	push	{r7, lr}
 801a896:	b082      	sub	sp, #8
 801a898:	af00      	add	r7, sp, #0
 801a89a:	6078      	str	r0, [r7, #4]
 801a89c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801a89e:	4b10      	ldr	r3, [pc, #64]	; (801a8e0 <ip_reass_dequeue_datagram+0x4c>)
 801a8a0:	681b      	ldr	r3, [r3, #0]
 801a8a2:	687a      	ldr	r2, [r7, #4]
 801a8a4:	429a      	cmp	r2, r3
 801a8a6:	d104      	bne.n	801a8b2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801a8a8:	687b      	ldr	r3, [r7, #4]
 801a8aa:	681b      	ldr	r3, [r3, #0]
 801a8ac:	4a0c      	ldr	r2, [pc, #48]	; (801a8e0 <ip_reass_dequeue_datagram+0x4c>)
 801a8ae:	6013      	str	r3, [r2, #0]
 801a8b0:	e00d      	b.n	801a8ce <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801a8b2:	683b      	ldr	r3, [r7, #0]
 801a8b4:	2b00      	cmp	r3, #0
 801a8b6:	d106      	bne.n	801a8c6 <ip_reass_dequeue_datagram+0x32>
 801a8b8:	4b0a      	ldr	r3, [pc, #40]	; (801a8e4 <ip_reass_dequeue_datagram+0x50>)
 801a8ba:	f240 1245 	movw	r2, #325	; 0x145
 801a8be:	490a      	ldr	r1, [pc, #40]	; (801a8e8 <ip_reass_dequeue_datagram+0x54>)
 801a8c0:	480a      	ldr	r0, [pc, #40]	; (801a8ec <ip_reass_dequeue_datagram+0x58>)
 801a8c2:	f009 f98d 	bl	8023be0 <iprintf>
    prev->next = ipr->next;
 801a8c6:	687b      	ldr	r3, [r7, #4]
 801a8c8:	681a      	ldr	r2, [r3, #0]
 801a8ca:	683b      	ldr	r3, [r7, #0]
 801a8cc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801a8ce:	6879      	ldr	r1, [r7, #4]
 801a8d0:	2004      	movs	r0, #4
 801a8d2:	f7f5 f8b9 	bl	800fa48 <memp_free>
}
 801a8d6:	bf00      	nop
 801a8d8:	3708      	adds	r7, #8
 801a8da:	46bd      	mov	sp, r7
 801a8dc:	bd80      	pop	{r7, pc}
 801a8de:	bf00      	nop
 801a8e0:	2000fdb0 	.word	0x2000fdb0
 801a8e4:	08028eb8 	.word	0x08028eb8
 801a8e8:	08028f80 	.word	0x08028f80
 801a8ec:	08028f00 	.word	0x08028f00

0801a8f0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801a8f0:	b580      	push	{r7, lr}
 801a8f2:	b08c      	sub	sp, #48	; 0x30
 801a8f4:	af00      	add	r7, sp, #0
 801a8f6:	60f8      	str	r0, [r7, #12]
 801a8f8:	60b9      	str	r1, [r7, #8]
 801a8fa:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801a8fc:	2300      	movs	r3, #0
 801a8fe:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801a900:	2301      	movs	r3, #1
 801a902:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801a904:	68bb      	ldr	r3, [r7, #8]
 801a906:	685b      	ldr	r3, [r3, #4]
 801a908:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a90a:	69fb      	ldr	r3, [r7, #28]
 801a90c:	885b      	ldrh	r3, [r3, #2]
 801a90e:	b29b      	uxth	r3, r3
 801a910:	4618      	mov	r0, r3
 801a912:	f7f3 fb6f 	bl	800dff4 <lwip_htons>
 801a916:	4603      	mov	r3, r0
 801a918:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801a91a:	69fb      	ldr	r3, [r7, #28]
 801a91c:	781b      	ldrb	r3, [r3, #0]
 801a91e:	f003 030f 	and.w	r3, r3, #15
 801a922:	b2db      	uxtb	r3, r3
 801a924:	009b      	lsls	r3, r3, #2
 801a926:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801a928:	7e7b      	ldrb	r3, [r7, #25]
 801a92a:	b29b      	uxth	r3, r3
 801a92c:	8b7a      	ldrh	r2, [r7, #26]
 801a92e:	429a      	cmp	r2, r3
 801a930:	d202      	bcs.n	801a938 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a932:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a936:	e135      	b.n	801aba4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801a938:	7e7b      	ldrb	r3, [r7, #25]
 801a93a:	b29b      	uxth	r3, r3
 801a93c:	8b7a      	ldrh	r2, [r7, #26]
 801a93e:	1ad3      	subs	r3, r2, r3
 801a940:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801a942:	69fb      	ldr	r3, [r7, #28]
 801a944:	88db      	ldrh	r3, [r3, #6]
 801a946:	b29b      	uxth	r3, r3
 801a948:	4618      	mov	r0, r3
 801a94a:	f7f3 fb53 	bl	800dff4 <lwip_htons>
 801a94e:	4603      	mov	r3, r0
 801a950:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a954:	b29b      	uxth	r3, r3
 801a956:	00db      	lsls	r3, r3, #3
 801a958:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801a95a:	68bb      	ldr	r3, [r7, #8]
 801a95c:	685b      	ldr	r3, [r3, #4]
 801a95e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801a960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a962:	2200      	movs	r2, #0
 801a964:	701a      	strb	r2, [r3, #0]
 801a966:	2200      	movs	r2, #0
 801a968:	705a      	strb	r2, [r3, #1]
 801a96a:	2200      	movs	r2, #0
 801a96c:	709a      	strb	r2, [r3, #2]
 801a96e:	2200      	movs	r2, #0
 801a970:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801a972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a974:	8afa      	ldrh	r2, [r7, #22]
 801a976:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801a978:	8afa      	ldrh	r2, [r7, #22]
 801a97a:	8b7b      	ldrh	r3, [r7, #26]
 801a97c:	4413      	add	r3, r2
 801a97e:	b29a      	uxth	r2, r3
 801a980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a982:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801a984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a986:	88db      	ldrh	r3, [r3, #6]
 801a988:	b29b      	uxth	r3, r3
 801a98a:	8afa      	ldrh	r2, [r7, #22]
 801a98c:	429a      	cmp	r2, r3
 801a98e:	d902      	bls.n	801a996 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a990:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a994:	e106      	b.n	801aba4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801a996:	68fb      	ldr	r3, [r7, #12]
 801a998:	685b      	ldr	r3, [r3, #4]
 801a99a:	627b      	str	r3, [r7, #36]	; 0x24
 801a99c:	e068      	b.n	801aa70 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801a99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a9a0:	685b      	ldr	r3, [r3, #4]
 801a9a2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801a9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9a6:	889b      	ldrh	r3, [r3, #4]
 801a9a8:	b29a      	uxth	r2, r3
 801a9aa:	693b      	ldr	r3, [r7, #16]
 801a9ac:	889b      	ldrh	r3, [r3, #4]
 801a9ae:	b29b      	uxth	r3, r3
 801a9b0:	429a      	cmp	r2, r3
 801a9b2:	d235      	bcs.n	801aa20 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801a9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a9b8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801a9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9bc:	2b00      	cmp	r3, #0
 801a9be:	d020      	beq.n	801aa02 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801a9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9c2:	889b      	ldrh	r3, [r3, #4]
 801a9c4:	b29a      	uxth	r2, r3
 801a9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9c8:	88db      	ldrh	r3, [r3, #6]
 801a9ca:	b29b      	uxth	r3, r3
 801a9cc:	429a      	cmp	r2, r3
 801a9ce:	d307      	bcc.n	801a9e0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801a9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9d2:	88db      	ldrh	r3, [r3, #6]
 801a9d4:	b29a      	uxth	r2, r3
 801a9d6:	693b      	ldr	r3, [r7, #16]
 801a9d8:	889b      	ldrh	r3, [r3, #4]
 801a9da:	b29b      	uxth	r3, r3
 801a9dc:	429a      	cmp	r2, r3
 801a9de:	d902      	bls.n	801a9e6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a9e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a9e4:	e0de      	b.n	801aba4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801a9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9e8:	68ba      	ldr	r2, [r7, #8]
 801a9ea:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801a9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9ee:	88db      	ldrh	r3, [r3, #6]
 801a9f0:	b29a      	uxth	r2, r3
 801a9f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9f4:	889b      	ldrh	r3, [r3, #4]
 801a9f6:	b29b      	uxth	r3, r3
 801a9f8:	429a      	cmp	r2, r3
 801a9fa:	d03d      	beq.n	801aa78 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801a9fc:	2300      	movs	r3, #0
 801a9fe:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801aa00:	e03a      	b.n	801aa78 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801aa02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa04:	88db      	ldrh	r3, [r3, #6]
 801aa06:	b29a      	uxth	r2, r3
 801aa08:	693b      	ldr	r3, [r7, #16]
 801aa0a:	889b      	ldrh	r3, [r3, #4]
 801aa0c:	b29b      	uxth	r3, r3
 801aa0e:	429a      	cmp	r2, r3
 801aa10:	d902      	bls.n	801aa18 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801aa12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801aa16:	e0c5      	b.n	801aba4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801aa18:	68fb      	ldr	r3, [r7, #12]
 801aa1a:	68ba      	ldr	r2, [r7, #8]
 801aa1c:	605a      	str	r2, [r3, #4]
      break;
 801aa1e:	e02b      	b.n	801aa78 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801aa20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa22:	889b      	ldrh	r3, [r3, #4]
 801aa24:	b29a      	uxth	r2, r3
 801aa26:	693b      	ldr	r3, [r7, #16]
 801aa28:	889b      	ldrh	r3, [r3, #4]
 801aa2a:	b29b      	uxth	r3, r3
 801aa2c:	429a      	cmp	r2, r3
 801aa2e:	d102      	bne.n	801aa36 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801aa30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801aa34:	e0b6      	b.n	801aba4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801aa36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa38:	889b      	ldrh	r3, [r3, #4]
 801aa3a:	b29a      	uxth	r2, r3
 801aa3c:	693b      	ldr	r3, [r7, #16]
 801aa3e:	88db      	ldrh	r3, [r3, #6]
 801aa40:	b29b      	uxth	r3, r3
 801aa42:	429a      	cmp	r2, r3
 801aa44:	d202      	bcs.n	801aa4c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801aa46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801aa4a:	e0ab      	b.n	801aba4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801aa4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa4e:	2b00      	cmp	r3, #0
 801aa50:	d009      	beq.n	801aa66 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801aa52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa54:	88db      	ldrh	r3, [r3, #6]
 801aa56:	b29a      	uxth	r2, r3
 801aa58:	693b      	ldr	r3, [r7, #16]
 801aa5a:	889b      	ldrh	r3, [r3, #4]
 801aa5c:	b29b      	uxth	r3, r3
 801aa5e:	429a      	cmp	r2, r3
 801aa60:	d001      	beq.n	801aa66 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801aa62:	2300      	movs	r3, #0
 801aa64:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801aa66:	693b      	ldr	r3, [r7, #16]
 801aa68:	681b      	ldr	r3, [r3, #0]
 801aa6a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801aa6c:	693b      	ldr	r3, [r7, #16]
 801aa6e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801aa70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa72:	2b00      	cmp	r3, #0
 801aa74:	d193      	bne.n	801a99e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801aa76:	e000      	b.n	801aa7a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801aa78:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801aa7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa7c:	2b00      	cmp	r3, #0
 801aa7e:	d12d      	bne.n	801aadc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801aa80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa82:	2b00      	cmp	r3, #0
 801aa84:	d01c      	beq.n	801aac0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801aa86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa88:	88db      	ldrh	r3, [r3, #6]
 801aa8a:	b29a      	uxth	r2, r3
 801aa8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa8e:	889b      	ldrh	r3, [r3, #4]
 801aa90:	b29b      	uxth	r3, r3
 801aa92:	429a      	cmp	r2, r3
 801aa94:	d906      	bls.n	801aaa4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801aa96:	4b45      	ldr	r3, [pc, #276]	; (801abac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801aa98:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801aa9c:	4944      	ldr	r1, [pc, #272]	; (801abb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801aa9e:	4845      	ldr	r0, [pc, #276]	; (801abb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801aaa0:	f009 f89e 	bl	8023be0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801aaa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aaa6:	68ba      	ldr	r2, [r7, #8]
 801aaa8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801aaaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aaac:	88db      	ldrh	r3, [r3, #6]
 801aaae:	b29a      	uxth	r2, r3
 801aab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aab2:	889b      	ldrh	r3, [r3, #4]
 801aab4:	b29b      	uxth	r3, r3
 801aab6:	429a      	cmp	r2, r3
 801aab8:	d010      	beq.n	801aadc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801aaba:	2300      	movs	r3, #0
 801aabc:	623b      	str	r3, [r7, #32]
 801aabe:	e00d      	b.n	801aadc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801aac0:	68fb      	ldr	r3, [r7, #12]
 801aac2:	685b      	ldr	r3, [r3, #4]
 801aac4:	2b00      	cmp	r3, #0
 801aac6:	d006      	beq.n	801aad6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801aac8:	4b38      	ldr	r3, [pc, #224]	; (801abac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801aaca:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801aace:	493a      	ldr	r1, [pc, #232]	; (801abb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801aad0:	4838      	ldr	r0, [pc, #224]	; (801abb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801aad2:	f009 f885 	bl	8023be0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801aad6:	68fb      	ldr	r3, [r7, #12]
 801aad8:	68ba      	ldr	r2, [r7, #8]
 801aada:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801aadc:	687b      	ldr	r3, [r7, #4]
 801aade:	2b00      	cmp	r3, #0
 801aae0:	d105      	bne.n	801aaee <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801aae2:	68fb      	ldr	r3, [r7, #12]
 801aae4:	7f9b      	ldrb	r3, [r3, #30]
 801aae6:	f003 0301 	and.w	r3, r3, #1
 801aaea:	2b00      	cmp	r3, #0
 801aaec:	d059      	beq.n	801aba2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801aaee:	6a3b      	ldr	r3, [r7, #32]
 801aaf0:	2b00      	cmp	r3, #0
 801aaf2:	d04f      	beq.n	801ab94 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801aaf4:	68fb      	ldr	r3, [r7, #12]
 801aaf6:	685b      	ldr	r3, [r3, #4]
 801aaf8:	2b00      	cmp	r3, #0
 801aafa:	d006      	beq.n	801ab0a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801aafc:	68fb      	ldr	r3, [r7, #12]
 801aafe:	685b      	ldr	r3, [r3, #4]
 801ab00:	685b      	ldr	r3, [r3, #4]
 801ab02:	889b      	ldrh	r3, [r3, #4]
 801ab04:	b29b      	uxth	r3, r3
 801ab06:	2b00      	cmp	r3, #0
 801ab08:	d002      	beq.n	801ab10 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801ab0a:	2300      	movs	r3, #0
 801ab0c:	623b      	str	r3, [r7, #32]
 801ab0e:	e041      	b.n	801ab94 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801ab10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab12:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801ab14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab16:	681b      	ldr	r3, [r3, #0]
 801ab18:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801ab1a:	e012      	b.n	801ab42 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801ab1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab1e:	685b      	ldr	r3, [r3, #4]
 801ab20:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801ab22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab24:	88db      	ldrh	r3, [r3, #6]
 801ab26:	b29a      	uxth	r2, r3
 801ab28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab2a:	889b      	ldrh	r3, [r3, #4]
 801ab2c:	b29b      	uxth	r3, r3
 801ab2e:	429a      	cmp	r2, r3
 801ab30:	d002      	beq.n	801ab38 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801ab32:	2300      	movs	r3, #0
 801ab34:	623b      	str	r3, [r7, #32]
            break;
 801ab36:	e007      	b.n	801ab48 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801ab38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab3a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801ab3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab3e:	681b      	ldr	r3, [r3, #0]
 801ab40:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801ab42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab44:	2b00      	cmp	r3, #0
 801ab46:	d1e9      	bne.n	801ab1c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801ab48:	6a3b      	ldr	r3, [r7, #32]
 801ab4a:	2b00      	cmp	r3, #0
 801ab4c:	d022      	beq.n	801ab94 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801ab4e:	68fb      	ldr	r3, [r7, #12]
 801ab50:	685b      	ldr	r3, [r3, #4]
 801ab52:	2b00      	cmp	r3, #0
 801ab54:	d106      	bne.n	801ab64 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801ab56:	4b15      	ldr	r3, [pc, #84]	; (801abac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ab58:	f240 12df 	movw	r2, #479	; 0x1df
 801ab5c:	4917      	ldr	r1, [pc, #92]	; (801abbc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801ab5e:	4815      	ldr	r0, [pc, #84]	; (801abb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ab60:	f009 f83e 	bl	8023be0 <iprintf>
          LWIP_ASSERT("sanity check",
 801ab64:	68fb      	ldr	r3, [r7, #12]
 801ab66:	685b      	ldr	r3, [r3, #4]
 801ab68:	685b      	ldr	r3, [r3, #4]
 801ab6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ab6c:	429a      	cmp	r2, r3
 801ab6e:	d106      	bne.n	801ab7e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801ab70:	4b0e      	ldr	r3, [pc, #56]	; (801abac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ab72:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801ab76:	4911      	ldr	r1, [pc, #68]	; (801abbc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801ab78:	480e      	ldr	r0, [pc, #56]	; (801abb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ab7a:	f009 f831 	bl	8023be0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801ab7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab80:	681b      	ldr	r3, [r3, #0]
 801ab82:	2b00      	cmp	r3, #0
 801ab84:	d006      	beq.n	801ab94 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801ab86:	4b09      	ldr	r3, [pc, #36]	; (801abac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ab88:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801ab8c:	490c      	ldr	r1, [pc, #48]	; (801abc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801ab8e:	4809      	ldr	r0, [pc, #36]	; (801abb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ab90:	f009 f826 	bl	8023be0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801ab94:	6a3b      	ldr	r3, [r7, #32]
 801ab96:	2b00      	cmp	r3, #0
 801ab98:	bf14      	ite	ne
 801ab9a:	2301      	movne	r3, #1
 801ab9c:	2300      	moveq	r3, #0
 801ab9e:	b2db      	uxtb	r3, r3
 801aba0:	e000      	b.n	801aba4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801aba2:	2300      	movs	r3, #0
}
 801aba4:	4618      	mov	r0, r3
 801aba6:	3730      	adds	r7, #48	; 0x30
 801aba8:	46bd      	mov	sp, r7
 801abaa:	bd80      	pop	{r7, pc}
 801abac:	08028eb8 	.word	0x08028eb8
 801abb0:	08028f9c 	.word	0x08028f9c
 801abb4:	08028f00 	.word	0x08028f00
 801abb8:	08028fbc 	.word	0x08028fbc
 801abbc:	08028ff4 	.word	0x08028ff4
 801abc0:	08029004 	.word	0x08029004

0801abc4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801abc4:	b580      	push	{r7, lr}
 801abc6:	b08e      	sub	sp, #56	; 0x38
 801abc8:	af00      	add	r7, sp, #0
 801abca:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	685b      	ldr	r3, [r3, #4]
 801abd0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801abd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abd4:	781b      	ldrb	r3, [r3, #0]
 801abd6:	f003 030f 	and.w	r3, r3, #15
 801abda:	b2db      	uxtb	r3, r3
 801abdc:	009b      	lsls	r3, r3, #2
 801abde:	b2db      	uxtb	r3, r3
 801abe0:	2b14      	cmp	r3, #20
 801abe2:	f040 8171 	bne.w	801aec8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801abe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abe8:	88db      	ldrh	r3, [r3, #6]
 801abea:	b29b      	uxth	r3, r3
 801abec:	4618      	mov	r0, r3
 801abee:	f7f3 fa01 	bl	800dff4 <lwip_htons>
 801abf2:	4603      	mov	r3, r0
 801abf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801abf8:	b29b      	uxth	r3, r3
 801abfa:	00db      	lsls	r3, r3, #3
 801abfc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801abfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac00:	885b      	ldrh	r3, [r3, #2]
 801ac02:	b29b      	uxth	r3, r3
 801ac04:	4618      	mov	r0, r3
 801ac06:	f7f3 f9f5 	bl	800dff4 <lwip_htons>
 801ac0a:	4603      	mov	r3, r0
 801ac0c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801ac0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac10:	781b      	ldrb	r3, [r3, #0]
 801ac12:	f003 030f 	and.w	r3, r3, #15
 801ac16:	b2db      	uxtb	r3, r3
 801ac18:	009b      	lsls	r3, r3, #2
 801ac1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801ac1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801ac22:	b29b      	uxth	r3, r3
 801ac24:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801ac26:	429a      	cmp	r2, r3
 801ac28:	f0c0 8150 	bcc.w	801aecc <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801ac2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801ac30:	b29b      	uxth	r3, r3
 801ac32:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801ac34:	1ad3      	subs	r3, r2, r3
 801ac36:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801ac38:	6878      	ldr	r0, [r7, #4]
 801ac3a:	f7f5 febf 	bl	80109bc <pbuf_clen>
 801ac3e:	4603      	mov	r3, r0
 801ac40:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801ac42:	4b8c      	ldr	r3, [pc, #560]	; (801ae74 <ip4_reass+0x2b0>)
 801ac44:	881b      	ldrh	r3, [r3, #0]
 801ac46:	461a      	mov	r2, r3
 801ac48:	8c3b      	ldrh	r3, [r7, #32]
 801ac4a:	4413      	add	r3, r2
 801ac4c:	2b0a      	cmp	r3, #10
 801ac4e:	dd10      	ble.n	801ac72 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801ac50:	8c3b      	ldrh	r3, [r7, #32]
 801ac52:	4619      	mov	r1, r3
 801ac54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ac56:	f7ff fd81 	bl	801a75c <ip_reass_remove_oldest_datagram>
 801ac5a:	4603      	mov	r3, r0
 801ac5c:	2b00      	cmp	r3, #0
 801ac5e:	f000 8137 	beq.w	801aed0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801ac62:	4b84      	ldr	r3, [pc, #528]	; (801ae74 <ip4_reass+0x2b0>)
 801ac64:	881b      	ldrh	r3, [r3, #0]
 801ac66:	461a      	mov	r2, r3
 801ac68:	8c3b      	ldrh	r3, [r7, #32]
 801ac6a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801ac6c:	2b0a      	cmp	r3, #10
 801ac6e:	f300 812f 	bgt.w	801aed0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801ac72:	4b81      	ldr	r3, [pc, #516]	; (801ae78 <ip4_reass+0x2b4>)
 801ac74:	681b      	ldr	r3, [r3, #0]
 801ac76:	633b      	str	r3, [r7, #48]	; 0x30
 801ac78:	e015      	b.n	801aca6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801ac7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac7c:	695a      	ldr	r2, [r3, #20]
 801ac7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac80:	68db      	ldr	r3, [r3, #12]
 801ac82:	429a      	cmp	r2, r3
 801ac84:	d10c      	bne.n	801aca0 <ip4_reass+0xdc>
 801ac86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac88:	699a      	ldr	r2, [r3, #24]
 801ac8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac8c:	691b      	ldr	r3, [r3, #16]
 801ac8e:	429a      	cmp	r2, r3
 801ac90:	d106      	bne.n	801aca0 <ip4_reass+0xdc>
 801ac92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac94:	899a      	ldrh	r2, [r3, #12]
 801ac96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac98:	889b      	ldrh	r3, [r3, #4]
 801ac9a:	b29b      	uxth	r3, r3
 801ac9c:	429a      	cmp	r2, r3
 801ac9e:	d006      	beq.n	801acae <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801aca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aca2:	681b      	ldr	r3, [r3, #0]
 801aca4:	633b      	str	r3, [r7, #48]	; 0x30
 801aca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aca8:	2b00      	cmp	r3, #0
 801acaa:	d1e6      	bne.n	801ac7a <ip4_reass+0xb6>
 801acac:	e000      	b.n	801acb0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801acae:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801acb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801acb2:	2b00      	cmp	r3, #0
 801acb4:	d109      	bne.n	801acca <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801acb6:	8c3b      	ldrh	r3, [r7, #32]
 801acb8:	4619      	mov	r1, r3
 801acba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801acbc:	f7ff fdb0 	bl	801a820 <ip_reass_enqueue_new_datagram>
 801acc0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801acc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801acc4:	2b00      	cmp	r3, #0
 801acc6:	d11c      	bne.n	801ad02 <ip4_reass+0x13e>
      goto nullreturn;
 801acc8:	e105      	b.n	801aed6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801acca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801accc:	88db      	ldrh	r3, [r3, #6]
 801acce:	b29b      	uxth	r3, r3
 801acd0:	4618      	mov	r0, r3
 801acd2:	f7f3 f98f 	bl	800dff4 <lwip_htons>
 801acd6:	4603      	mov	r3, r0
 801acd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801acdc:	2b00      	cmp	r3, #0
 801acde:	d110      	bne.n	801ad02 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801ace0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ace2:	89db      	ldrh	r3, [r3, #14]
 801ace4:	4618      	mov	r0, r3
 801ace6:	f7f3 f985 	bl	800dff4 <lwip_htons>
 801acea:	4603      	mov	r3, r0
 801acec:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801acf0:	2b00      	cmp	r3, #0
 801acf2:	d006      	beq.n	801ad02 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801acf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801acf6:	3308      	adds	r3, #8
 801acf8:	2214      	movs	r2, #20
 801acfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801acfc:	4618      	mov	r0, r3
 801acfe:	f008 fe49 	bl	8023994 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801ad02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad04:	88db      	ldrh	r3, [r3, #6]
 801ad06:	b29b      	uxth	r3, r3
 801ad08:	f003 0320 	and.w	r3, r3, #32
 801ad0c:	2b00      	cmp	r3, #0
 801ad0e:	bf0c      	ite	eq
 801ad10:	2301      	moveq	r3, #1
 801ad12:	2300      	movne	r3, #0
 801ad14:	b2db      	uxtb	r3, r3
 801ad16:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801ad18:	69fb      	ldr	r3, [r7, #28]
 801ad1a:	2b00      	cmp	r3, #0
 801ad1c:	d00e      	beq.n	801ad3c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801ad1e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801ad20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ad22:	4413      	add	r3, r2
 801ad24:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801ad26:	8b7a      	ldrh	r2, [r7, #26]
 801ad28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801ad2a:	429a      	cmp	r2, r3
 801ad2c:	f0c0 80a0 	bcc.w	801ae70 <ip4_reass+0x2ac>
 801ad30:	8b7b      	ldrh	r3, [r7, #26]
 801ad32:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801ad36:	4293      	cmp	r3, r2
 801ad38:	f200 809a 	bhi.w	801ae70 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801ad3c:	69fa      	ldr	r2, [r7, #28]
 801ad3e:	6879      	ldr	r1, [r7, #4]
 801ad40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ad42:	f7ff fdd5 	bl	801a8f0 <ip_reass_chain_frag_into_datagram_and_validate>
 801ad46:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801ad48:	697b      	ldr	r3, [r7, #20]
 801ad4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801ad4e:	f000 809b 	beq.w	801ae88 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801ad52:	4b48      	ldr	r3, [pc, #288]	; (801ae74 <ip4_reass+0x2b0>)
 801ad54:	881a      	ldrh	r2, [r3, #0]
 801ad56:	8c3b      	ldrh	r3, [r7, #32]
 801ad58:	4413      	add	r3, r2
 801ad5a:	b29a      	uxth	r2, r3
 801ad5c:	4b45      	ldr	r3, [pc, #276]	; (801ae74 <ip4_reass+0x2b0>)
 801ad5e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801ad60:	69fb      	ldr	r3, [r7, #28]
 801ad62:	2b00      	cmp	r3, #0
 801ad64:	d00d      	beq.n	801ad82 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801ad66:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801ad68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ad6a:	4413      	add	r3, r2
 801ad6c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801ad6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad70:	8a7a      	ldrh	r2, [r7, #18]
 801ad72:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801ad74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad76:	7f9b      	ldrb	r3, [r3, #30]
 801ad78:	f043 0301 	orr.w	r3, r3, #1
 801ad7c:	b2da      	uxtb	r2, r3
 801ad7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad80:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801ad82:	697b      	ldr	r3, [r7, #20]
 801ad84:	2b01      	cmp	r3, #1
 801ad86:	d171      	bne.n	801ae6c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801ad88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad8a:	8b9b      	ldrh	r3, [r3, #28]
 801ad8c:	3314      	adds	r3, #20
 801ad8e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801ad90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad92:	685b      	ldr	r3, [r3, #4]
 801ad94:	685b      	ldr	r3, [r3, #4]
 801ad96:	681b      	ldr	r3, [r3, #0]
 801ad98:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801ad9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad9c:	685b      	ldr	r3, [r3, #4]
 801ad9e:	685b      	ldr	r3, [r3, #4]
 801ada0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801ada2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ada4:	3308      	adds	r3, #8
 801ada6:	2214      	movs	r2, #20
 801ada8:	4619      	mov	r1, r3
 801adaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801adac:	f008 fdf2 	bl	8023994 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801adb0:	8a3b      	ldrh	r3, [r7, #16]
 801adb2:	4618      	mov	r0, r3
 801adb4:	f7f3 f91e 	bl	800dff4 <lwip_htons>
 801adb8:	4603      	mov	r3, r0
 801adba:	461a      	mov	r2, r3
 801adbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801adbe:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801adc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801adc2:	2200      	movs	r2, #0
 801adc4:	719a      	strb	r2, [r3, #6]
 801adc6:	2200      	movs	r2, #0
 801adc8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801adca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801adcc:	2200      	movs	r2, #0
 801adce:	729a      	strb	r2, [r3, #10]
 801add0:	2200      	movs	r2, #0
 801add2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801add4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801add6:	685b      	ldr	r3, [r3, #4]
 801add8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801adda:	e00d      	b.n	801adf8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801addc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801adde:	685b      	ldr	r3, [r3, #4]
 801ade0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801ade2:	2114      	movs	r1, #20
 801ade4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801ade6:	f7f5 fca3 	bl	8010730 <pbuf_remove_header>
      pbuf_cat(p, r);
 801adea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801adec:	6878      	ldr	r0, [r7, #4]
 801adee:	f7f5 fe25 	bl	8010a3c <pbuf_cat>
      r = iprh->next_pbuf;
 801adf2:	68fb      	ldr	r3, [r7, #12]
 801adf4:	681b      	ldr	r3, [r3, #0]
 801adf6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801adf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801adfa:	2b00      	cmp	r3, #0
 801adfc:	d1ee      	bne.n	801addc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801adfe:	4b1e      	ldr	r3, [pc, #120]	; (801ae78 <ip4_reass+0x2b4>)
 801ae00:	681b      	ldr	r3, [r3, #0]
 801ae02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ae04:	429a      	cmp	r2, r3
 801ae06:	d102      	bne.n	801ae0e <ip4_reass+0x24a>
      ipr_prev = NULL;
 801ae08:	2300      	movs	r3, #0
 801ae0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ae0c:	e010      	b.n	801ae30 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801ae0e:	4b1a      	ldr	r3, [pc, #104]	; (801ae78 <ip4_reass+0x2b4>)
 801ae10:	681b      	ldr	r3, [r3, #0]
 801ae12:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ae14:	e007      	b.n	801ae26 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801ae16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae18:	681b      	ldr	r3, [r3, #0]
 801ae1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ae1c:	429a      	cmp	r2, r3
 801ae1e:	d006      	beq.n	801ae2e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801ae20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae22:	681b      	ldr	r3, [r3, #0]
 801ae24:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ae26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae28:	2b00      	cmp	r3, #0
 801ae2a:	d1f4      	bne.n	801ae16 <ip4_reass+0x252>
 801ae2c:	e000      	b.n	801ae30 <ip4_reass+0x26c>
          break;
 801ae2e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801ae30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801ae32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ae34:	f7ff fd2e 	bl	801a894 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801ae38:	6878      	ldr	r0, [r7, #4]
 801ae3a:	f7f5 fdbf 	bl	80109bc <pbuf_clen>
 801ae3e:	4603      	mov	r3, r0
 801ae40:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801ae42:	4b0c      	ldr	r3, [pc, #48]	; (801ae74 <ip4_reass+0x2b0>)
 801ae44:	881b      	ldrh	r3, [r3, #0]
 801ae46:	8c3a      	ldrh	r2, [r7, #32]
 801ae48:	429a      	cmp	r2, r3
 801ae4a:	d906      	bls.n	801ae5a <ip4_reass+0x296>
 801ae4c:	4b0b      	ldr	r3, [pc, #44]	; (801ae7c <ip4_reass+0x2b8>)
 801ae4e:	f240 229b 	movw	r2, #667	; 0x29b
 801ae52:	490b      	ldr	r1, [pc, #44]	; (801ae80 <ip4_reass+0x2bc>)
 801ae54:	480b      	ldr	r0, [pc, #44]	; (801ae84 <ip4_reass+0x2c0>)
 801ae56:	f008 fec3 	bl	8023be0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801ae5a:	4b06      	ldr	r3, [pc, #24]	; (801ae74 <ip4_reass+0x2b0>)
 801ae5c:	881a      	ldrh	r2, [r3, #0]
 801ae5e:	8c3b      	ldrh	r3, [r7, #32]
 801ae60:	1ad3      	subs	r3, r2, r3
 801ae62:	b29a      	uxth	r2, r3
 801ae64:	4b03      	ldr	r3, [pc, #12]	; (801ae74 <ip4_reass+0x2b0>)
 801ae66:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801ae68:	687b      	ldr	r3, [r7, #4]
 801ae6a:	e038      	b.n	801aede <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801ae6c:	2300      	movs	r3, #0
 801ae6e:	e036      	b.n	801aede <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801ae70:	bf00      	nop
 801ae72:	e00a      	b.n	801ae8a <ip4_reass+0x2c6>
 801ae74:	2000fdb4 	.word	0x2000fdb4
 801ae78:	2000fdb0 	.word	0x2000fdb0
 801ae7c:	08028eb8 	.word	0x08028eb8
 801ae80:	08029028 	.word	0x08029028
 801ae84:	08028f00 	.word	0x08028f00
    goto nullreturn_ipr;
 801ae88:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801ae8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae8c:	2b00      	cmp	r3, #0
 801ae8e:	d106      	bne.n	801ae9e <ip4_reass+0x2da>
 801ae90:	4b15      	ldr	r3, [pc, #84]	; (801aee8 <ip4_reass+0x324>)
 801ae92:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801ae96:	4915      	ldr	r1, [pc, #84]	; (801aeec <ip4_reass+0x328>)
 801ae98:	4815      	ldr	r0, [pc, #84]	; (801aef0 <ip4_reass+0x32c>)
 801ae9a:	f008 fea1 	bl	8023be0 <iprintf>
  if (ipr->p == NULL) {
 801ae9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aea0:	685b      	ldr	r3, [r3, #4]
 801aea2:	2b00      	cmp	r3, #0
 801aea4:	d116      	bne.n	801aed4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801aea6:	4b13      	ldr	r3, [pc, #76]	; (801aef4 <ip4_reass+0x330>)
 801aea8:	681b      	ldr	r3, [r3, #0]
 801aeaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801aeac:	429a      	cmp	r2, r3
 801aeae:	d006      	beq.n	801aebe <ip4_reass+0x2fa>
 801aeb0:	4b0d      	ldr	r3, [pc, #52]	; (801aee8 <ip4_reass+0x324>)
 801aeb2:	f240 22ab 	movw	r2, #683	; 0x2ab
 801aeb6:	4910      	ldr	r1, [pc, #64]	; (801aef8 <ip4_reass+0x334>)
 801aeb8:	480d      	ldr	r0, [pc, #52]	; (801aef0 <ip4_reass+0x32c>)
 801aeba:	f008 fe91 	bl	8023be0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801aebe:	2100      	movs	r1, #0
 801aec0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801aec2:	f7ff fce7 	bl	801a894 <ip_reass_dequeue_datagram>
 801aec6:	e006      	b.n	801aed6 <ip4_reass+0x312>
    goto nullreturn;
 801aec8:	bf00      	nop
 801aeca:	e004      	b.n	801aed6 <ip4_reass+0x312>
    goto nullreturn;
 801aecc:	bf00      	nop
 801aece:	e002      	b.n	801aed6 <ip4_reass+0x312>
      goto nullreturn;
 801aed0:	bf00      	nop
 801aed2:	e000      	b.n	801aed6 <ip4_reass+0x312>
  }

nullreturn:
 801aed4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801aed6:	6878      	ldr	r0, [r7, #4]
 801aed8:	f7f5 fce2 	bl	80108a0 <pbuf_free>
  return NULL;
 801aedc:	2300      	movs	r3, #0
}
 801aede:	4618      	mov	r0, r3
 801aee0:	3738      	adds	r7, #56	; 0x38
 801aee2:	46bd      	mov	sp, r7
 801aee4:	bd80      	pop	{r7, pc}
 801aee6:	bf00      	nop
 801aee8:	08028eb8 	.word	0x08028eb8
 801aeec:	08029044 	.word	0x08029044
 801aef0:	08028f00 	.word	0x08028f00
 801aef4:	2000fdb0 	.word	0x2000fdb0
 801aef8:	08029050 	.word	0x08029050

0801aefc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801aefc:	b580      	push	{r7, lr}
 801aefe:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801af00:	2005      	movs	r0, #5
 801af02:	f7f4 fd4f 	bl	800f9a4 <memp_malloc>
 801af06:	4603      	mov	r3, r0
}
 801af08:	4618      	mov	r0, r3
 801af0a:	bd80      	pop	{r7, pc}

0801af0c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801af0c:	b580      	push	{r7, lr}
 801af0e:	b082      	sub	sp, #8
 801af10:	af00      	add	r7, sp, #0
 801af12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801af14:	687b      	ldr	r3, [r7, #4]
 801af16:	2b00      	cmp	r3, #0
 801af18:	d106      	bne.n	801af28 <ip_frag_free_pbuf_custom_ref+0x1c>
 801af1a:	4b07      	ldr	r3, [pc, #28]	; (801af38 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801af1c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801af20:	4906      	ldr	r1, [pc, #24]	; (801af3c <ip_frag_free_pbuf_custom_ref+0x30>)
 801af22:	4807      	ldr	r0, [pc, #28]	; (801af40 <ip_frag_free_pbuf_custom_ref+0x34>)
 801af24:	f008 fe5c 	bl	8023be0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801af28:	6879      	ldr	r1, [r7, #4]
 801af2a:	2005      	movs	r0, #5
 801af2c:	f7f4 fd8c 	bl	800fa48 <memp_free>
}
 801af30:	bf00      	nop
 801af32:	3708      	adds	r7, #8
 801af34:	46bd      	mov	sp, r7
 801af36:	bd80      	pop	{r7, pc}
 801af38:	08028eb8 	.word	0x08028eb8
 801af3c:	08029070 	.word	0x08029070
 801af40:	08028f00 	.word	0x08028f00

0801af44 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801af44:	b580      	push	{r7, lr}
 801af46:	b084      	sub	sp, #16
 801af48:	af00      	add	r7, sp, #0
 801af4a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801af4c:	687b      	ldr	r3, [r7, #4]
 801af4e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801af50:	68fb      	ldr	r3, [r7, #12]
 801af52:	2b00      	cmp	r3, #0
 801af54:	d106      	bne.n	801af64 <ipfrag_free_pbuf_custom+0x20>
 801af56:	4b11      	ldr	r3, [pc, #68]	; (801af9c <ipfrag_free_pbuf_custom+0x58>)
 801af58:	f240 22ce 	movw	r2, #718	; 0x2ce
 801af5c:	4910      	ldr	r1, [pc, #64]	; (801afa0 <ipfrag_free_pbuf_custom+0x5c>)
 801af5e:	4811      	ldr	r0, [pc, #68]	; (801afa4 <ipfrag_free_pbuf_custom+0x60>)
 801af60:	f008 fe3e 	bl	8023be0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801af64:	68fa      	ldr	r2, [r7, #12]
 801af66:	687b      	ldr	r3, [r7, #4]
 801af68:	429a      	cmp	r2, r3
 801af6a:	d006      	beq.n	801af7a <ipfrag_free_pbuf_custom+0x36>
 801af6c:	4b0b      	ldr	r3, [pc, #44]	; (801af9c <ipfrag_free_pbuf_custom+0x58>)
 801af6e:	f240 22cf 	movw	r2, #719	; 0x2cf
 801af72:	490d      	ldr	r1, [pc, #52]	; (801afa8 <ipfrag_free_pbuf_custom+0x64>)
 801af74:	480b      	ldr	r0, [pc, #44]	; (801afa4 <ipfrag_free_pbuf_custom+0x60>)
 801af76:	f008 fe33 	bl	8023be0 <iprintf>
  if (pcr->original != NULL) {
 801af7a:	68fb      	ldr	r3, [r7, #12]
 801af7c:	695b      	ldr	r3, [r3, #20]
 801af7e:	2b00      	cmp	r3, #0
 801af80:	d004      	beq.n	801af8c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801af82:	68fb      	ldr	r3, [r7, #12]
 801af84:	695b      	ldr	r3, [r3, #20]
 801af86:	4618      	mov	r0, r3
 801af88:	f7f5 fc8a 	bl	80108a0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801af8c:	68f8      	ldr	r0, [r7, #12]
 801af8e:	f7ff ffbd 	bl	801af0c <ip_frag_free_pbuf_custom_ref>
}
 801af92:	bf00      	nop
 801af94:	3710      	adds	r7, #16
 801af96:	46bd      	mov	sp, r7
 801af98:	bd80      	pop	{r7, pc}
 801af9a:	bf00      	nop
 801af9c:	08028eb8 	.word	0x08028eb8
 801afa0:	0802907c 	.word	0x0802907c
 801afa4:	08028f00 	.word	0x08028f00
 801afa8:	08029088 	.word	0x08029088

0801afac <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801afac:	b580      	push	{r7, lr}
 801afae:	b094      	sub	sp, #80	; 0x50
 801afb0:	af02      	add	r7, sp, #8
 801afb2:	60f8      	str	r0, [r7, #12]
 801afb4:	60b9      	str	r1, [r7, #8]
 801afb6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801afb8:	2300      	movs	r3, #0
 801afba:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801afbe:	68bb      	ldr	r3, [r7, #8]
 801afc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801afc2:	3b14      	subs	r3, #20
 801afc4:	2b00      	cmp	r3, #0
 801afc6:	da00      	bge.n	801afca <ip4_frag+0x1e>
 801afc8:	3307      	adds	r3, #7
 801afca:	10db      	asrs	r3, r3, #3
 801afcc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801afce:	2314      	movs	r3, #20
 801afd0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801afd2:	68fb      	ldr	r3, [r7, #12]
 801afd4:	685b      	ldr	r3, [r3, #4]
 801afd6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801afd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801afda:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801afdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801afde:	781b      	ldrb	r3, [r3, #0]
 801afe0:	f003 030f 	and.w	r3, r3, #15
 801afe4:	b2db      	uxtb	r3, r3
 801afe6:	009b      	lsls	r3, r3, #2
 801afe8:	b2db      	uxtb	r3, r3
 801afea:	2b14      	cmp	r3, #20
 801afec:	d002      	beq.n	801aff4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801afee:	f06f 0305 	mvn.w	r3, #5
 801aff2:	e110      	b.n	801b216 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801aff4:	68fb      	ldr	r3, [r7, #12]
 801aff6:	895b      	ldrh	r3, [r3, #10]
 801aff8:	2b13      	cmp	r3, #19
 801affa:	d809      	bhi.n	801b010 <ip4_frag+0x64>
 801affc:	4b88      	ldr	r3, [pc, #544]	; (801b220 <ip4_frag+0x274>)
 801affe:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801b002:	4988      	ldr	r1, [pc, #544]	; (801b224 <ip4_frag+0x278>)
 801b004:	4888      	ldr	r0, [pc, #544]	; (801b228 <ip4_frag+0x27c>)
 801b006:	f008 fdeb 	bl	8023be0 <iprintf>
 801b00a:	f06f 0305 	mvn.w	r3, #5
 801b00e:	e102      	b.n	801b216 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801b010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b012:	88db      	ldrh	r3, [r3, #6]
 801b014:	b29b      	uxth	r3, r3
 801b016:	4618      	mov	r0, r3
 801b018:	f7f2 ffec 	bl	800dff4 <lwip_htons>
 801b01c:	4603      	mov	r3, r0
 801b01e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801b020:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b022:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b026:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801b02a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b02c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b030:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801b032:	68fb      	ldr	r3, [r7, #12]
 801b034:	891b      	ldrh	r3, [r3, #8]
 801b036:	3b14      	subs	r3, #20
 801b038:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801b03c:	e0e1      	b.n	801b202 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801b03e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b040:	00db      	lsls	r3, r3, #3
 801b042:	b29b      	uxth	r3, r3
 801b044:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b048:	4293      	cmp	r3, r2
 801b04a:	bf28      	it	cs
 801b04c:	4613      	movcs	r3, r2
 801b04e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801b050:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b054:	2114      	movs	r1, #20
 801b056:	200e      	movs	r0, #14
 801b058:	f7f5 f90c 	bl	8010274 <pbuf_alloc>
 801b05c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801b05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b060:	2b00      	cmp	r3, #0
 801b062:	f000 80d5 	beq.w	801b210 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801b066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b068:	895b      	ldrh	r3, [r3, #10]
 801b06a:	2b13      	cmp	r3, #19
 801b06c:	d806      	bhi.n	801b07c <ip4_frag+0xd0>
 801b06e:	4b6c      	ldr	r3, [pc, #432]	; (801b220 <ip4_frag+0x274>)
 801b070:	f44f 7249 	mov.w	r2, #804	; 0x324
 801b074:	496d      	ldr	r1, [pc, #436]	; (801b22c <ip4_frag+0x280>)
 801b076:	486c      	ldr	r0, [pc, #432]	; (801b228 <ip4_frag+0x27c>)
 801b078:	f008 fdb2 	bl	8023be0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801b07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b07e:	685b      	ldr	r3, [r3, #4]
 801b080:	2214      	movs	r2, #20
 801b082:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801b084:	4618      	mov	r0, r3
 801b086:	f008 fc85 	bl	8023994 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801b08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b08c:	685b      	ldr	r3, [r3, #4]
 801b08e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801b090:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b092:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801b096:	e064      	b.n	801b162 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801b098:	68fb      	ldr	r3, [r7, #12]
 801b09a:	895a      	ldrh	r2, [r3, #10]
 801b09c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b09e:	1ad3      	subs	r3, r2, r3
 801b0a0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801b0a2:	68fb      	ldr	r3, [r7, #12]
 801b0a4:	895b      	ldrh	r3, [r3, #10]
 801b0a6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801b0a8:	429a      	cmp	r2, r3
 801b0aa:	d906      	bls.n	801b0ba <ip4_frag+0x10e>
 801b0ac:	4b5c      	ldr	r3, [pc, #368]	; (801b220 <ip4_frag+0x274>)
 801b0ae:	f240 322d 	movw	r2, #813	; 0x32d
 801b0b2:	495f      	ldr	r1, [pc, #380]	; (801b230 <ip4_frag+0x284>)
 801b0b4:	485c      	ldr	r0, [pc, #368]	; (801b228 <ip4_frag+0x27c>)
 801b0b6:	f008 fd93 	bl	8023be0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801b0ba:	8bfa      	ldrh	r2, [r7, #30]
 801b0bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801b0c0:	4293      	cmp	r3, r2
 801b0c2:	bf28      	it	cs
 801b0c4:	4613      	movcs	r3, r2
 801b0c6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801b0ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801b0ce:	2b00      	cmp	r3, #0
 801b0d0:	d105      	bne.n	801b0de <ip4_frag+0x132>
        poff = 0;
 801b0d2:	2300      	movs	r3, #0
 801b0d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801b0d6:	68fb      	ldr	r3, [r7, #12]
 801b0d8:	681b      	ldr	r3, [r3, #0]
 801b0da:	60fb      	str	r3, [r7, #12]
        continue;
 801b0dc:	e041      	b.n	801b162 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801b0de:	f7ff ff0d 	bl	801aefc <ip_frag_alloc_pbuf_custom_ref>
 801b0e2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801b0e4:	69bb      	ldr	r3, [r7, #24]
 801b0e6:	2b00      	cmp	r3, #0
 801b0e8:	d103      	bne.n	801b0f2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801b0ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b0ec:	f7f5 fbd8 	bl	80108a0 <pbuf_free>
        goto memerr;
 801b0f0:	e08f      	b.n	801b212 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801b0f2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801b0f4:	68fb      	ldr	r3, [r7, #12]
 801b0f6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801b0f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b0fa:	4413      	add	r3, r2
 801b0fc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801b100:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801b104:	9201      	str	r2, [sp, #4]
 801b106:	9300      	str	r3, [sp, #0]
 801b108:	4603      	mov	r3, r0
 801b10a:	2241      	movs	r2, #65	; 0x41
 801b10c:	2000      	movs	r0, #0
 801b10e:	f7f5 f9db 	bl	80104c8 <pbuf_alloced_custom>
 801b112:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801b114:	697b      	ldr	r3, [r7, #20]
 801b116:	2b00      	cmp	r3, #0
 801b118:	d106      	bne.n	801b128 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801b11a:	69b8      	ldr	r0, [r7, #24]
 801b11c:	f7ff fef6 	bl	801af0c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801b120:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b122:	f7f5 fbbd 	bl	80108a0 <pbuf_free>
        goto memerr;
 801b126:	e074      	b.n	801b212 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801b128:	68f8      	ldr	r0, [r7, #12]
 801b12a:	f7f5 fc5f 	bl	80109ec <pbuf_ref>
      pcr->original = p;
 801b12e:	69bb      	ldr	r3, [r7, #24]
 801b130:	68fa      	ldr	r2, [r7, #12]
 801b132:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801b134:	69bb      	ldr	r3, [r7, #24]
 801b136:	4a3f      	ldr	r2, [pc, #252]	; (801b234 <ip4_frag+0x288>)
 801b138:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801b13a:	6979      	ldr	r1, [r7, #20]
 801b13c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b13e:	f7f5 fc7d 	bl	8010a3c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801b142:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801b146:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801b14a:	1ad3      	subs	r3, r2, r3
 801b14c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801b150:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801b154:	2b00      	cmp	r3, #0
 801b156:	d004      	beq.n	801b162 <ip4_frag+0x1b6>
        poff = 0;
 801b158:	2300      	movs	r3, #0
 801b15a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801b15c:	68fb      	ldr	r3, [r7, #12]
 801b15e:	681b      	ldr	r3, [r3, #0]
 801b160:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801b162:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801b166:	2b00      	cmp	r3, #0
 801b168:	d196      	bne.n	801b098 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801b16a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801b16c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801b170:	4413      	add	r3, r2
 801b172:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801b174:	68bb      	ldr	r3, [r7, #8]
 801b176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b178:	f1a3 0213 	sub.w	r2, r3, #19
 801b17c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b180:	429a      	cmp	r2, r3
 801b182:	bfcc      	ite	gt
 801b184:	2301      	movgt	r3, #1
 801b186:	2300      	movle	r3, #0
 801b188:	b2db      	uxtb	r3, r3
 801b18a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801b18c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801b190:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b194:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801b196:	6a3b      	ldr	r3, [r7, #32]
 801b198:	2b00      	cmp	r3, #0
 801b19a:	d002      	beq.n	801b1a2 <ip4_frag+0x1f6>
 801b19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b19e:	2b00      	cmp	r3, #0
 801b1a0:	d003      	beq.n	801b1aa <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801b1a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b1a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801b1a8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801b1aa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b1ac:	4618      	mov	r0, r3
 801b1ae:	f7f2 ff21 	bl	800dff4 <lwip_htons>
 801b1b2:	4603      	mov	r3, r0
 801b1b4:	461a      	mov	r2, r3
 801b1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b1b8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801b1ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b1bc:	3314      	adds	r3, #20
 801b1be:	b29b      	uxth	r3, r3
 801b1c0:	4618      	mov	r0, r3
 801b1c2:	f7f2 ff17 	bl	800dff4 <lwip_htons>
 801b1c6:	4603      	mov	r3, r0
 801b1c8:	461a      	mov	r2, r3
 801b1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b1cc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801b1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b1d0:	2200      	movs	r2, #0
 801b1d2:	729a      	strb	r2, [r3, #10]
 801b1d4:	2200      	movs	r2, #0
 801b1d6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801b1d8:	68bb      	ldr	r3, [r7, #8]
 801b1da:	695b      	ldr	r3, [r3, #20]
 801b1dc:	687a      	ldr	r2, [r7, #4]
 801b1de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b1e0:	68b8      	ldr	r0, [r7, #8]
 801b1e2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801b1e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b1e6:	f7f5 fb5b 	bl	80108a0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801b1ea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b1ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b1f0:	1ad3      	subs	r3, r2, r3
 801b1f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801b1f6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801b1fa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b1fc:	4413      	add	r3, r2
 801b1fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801b202:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b206:	2b00      	cmp	r3, #0
 801b208:	f47f af19 	bne.w	801b03e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801b20c:	2300      	movs	r3, #0
 801b20e:	e002      	b.n	801b216 <ip4_frag+0x26a>
      goto memerr;
 801b210:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801b212:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801b216:	4618      	mov	r0, r3
 801b218:	3748      	adds	r7, #72	; 0x48
 801b21a:	46bd      	mov	sp, r7
 801b21c:	bd80      	pop	{r7, pc}
 801b21e:	bf00      	nop
 801b220:	08028eb8 	.word	0x08028eb8
 801b224:	08029094 	.word	0x08029094
 801b228:	08028f00 	.word	0x08028f00
 801b22c:	080290b0 	.word	0x080290b0
 801b230:	080290d0 	.word	0x080290d0
 801b234:	0801af45 	.word	0x0801af45

0801b238 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801b238:	b580      	push	{r7, lr}
 801b23a:	b086      	sub	sp, #24
 801b23c:	af00      	add	r7, sp, #0
 801b23e:	6078      	str	r0, [r7, #4]
 801b240:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801b242:	230e      	movs	r3, #14
 801b244:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801b246:	687b      	ldr	r3, [r7, #4]
 801b248:	895b      	ldrh	r3, [r3, #10]
 801b24a:	2b0e      	cmp	r3, #14
 801b24c:	d96e      	bls.n	801b32c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801b24e:	687b      	ldr	r3, [r7, #4]
 801b250:	7bdb      	ldrb	r3, [r3, #15]
 801b252:	2b00      	cmp	r3, #0
 801b254:	d106      	bne.n	801b264 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801b256:	683b      	ldr	r3, [r7, #0]
 801b258:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801b25c:	3301      	adds	r3, #1
 801b25e:	b2da      	uxtb	r2, r3
 801b260:	687b      	ldr	r3, [r7, #4]
 801b262:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801b264:	687b      	ldr	r3, [r7, #4]
 801b266:	685b      	ldr	r3, [r3, #4]
 801b268:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801b26a:	693b      	ldr	r3, [r7, #16]
 801b26c:	7b1a      	ldrb	r2, [r3, #12]
 801b26e:	7b5b      	ldrb	r3, [r3, #13]
 801b270:	021b      	lsls	r3, r3, #8
 801b272:	4313      	orrs	r3, r2
 801b274:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801b276:	693b      	ldr	r3, [r7, #16]
 801b278:	781b      	ldrb	r3, [r3, #0]
 801b27a:	f003 0301 	and.w	r3, r3, #1
 801b27e:	2b00      	cmp	r3, #0
 801b280:	d023      	beq.n	801b2ca <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801b282:	693b      	ldr	r3, [r7, #16]
 801b284:	781b      	ldrb	r3, [r3, #0]
 801b286:	2b01      	cmp	r3, #1
 801b288:	d10f      	bne.n	801b2aa <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801b28a:	693b      	ldr	r3, [r7, #16]
 801b28c:	785b      	ldrb	r3, [r3, #1]
 801b28e:	2b00      	cmp	r3, #0
 801b290:	d11b      	bne.n	801b2ca <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801b292:	693b      	ldr	r3, [r7, #16]
 801b294:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801b296:	2b5e      	cmp	r3, #94	; 0x5e
 801b298:	d117      	bne.n	801b2ca <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801b29a:	687b      	ldr	r3, [r7, #4]
 801b29c:	7b5b      	ldrb	r3, [r3, #13]
 801b29e:	f043 0310 	orr.w	r3, r3, #16
 801b2a2:	b2da      	uxtb	r2, r3
 801b2a4:	687b      	ldr	r3, [r7, #4]
 801b2a6:	735a      	strb	r2, [r3, #13]
 801b2a8:	e00f      	b.n	801b2ca <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801b2aa:	693b      	ldr	r3, [r7, #16]
 801b2ac:	2206      	movs	r2, #6
 801b2ae:	4928      	ldr	r1, [pc, #160]	; (801b350 <ethernet_input+0x118>)
 801b2b0:	4618      	mov	r0, r3
 801b2b2:	f008 fb5f 	bl	8023974 <memcmp>
 801b2b6:	4603      	mov	r3, r0
 801b2b8:	2b00      	cmp	r3, #0
 801b2ba:	d106      	bne.n	801b2ca <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801b2bc:	687b      	ldr	r3, [r7, #4]
 801b2be:	7b5b      	ldrb	r3, [r3, #13]
 801b2c0:	f043 0308 	orr.w	r3, r3, #8
 801b2c4:	b2da      	uxtb	r2, r3
 801b2c6:	687b      	ldr	r3, [r7, #4]
 801b2c8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801b2ca:	89fb      	ldrh	r3, [r7, #14]
 801b2cc:	2b08      	cmp	r3, #8
 801b2ce:	d003      	beq.n	801b2d8 <ethernet_input+0xa0>
 801b2d0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801b2d4:	d014      	beq.n	801b300 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801b2d6:	e032      	b.n	801b33e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801b2d8:	683b      	ldr	r3, [r7, #0]
 801b2da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b2de:	f003 0308 	and.w	r3, r3, #8
 801b2e2:	2b00      	cmp	r3, #0
 801b2e4:	d024      	beq.n	801b330 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801b2e6:	8afb      	ldrh	r3, [r7, #22]
 801b2e8:	4619      	mov	r1, r3
 801b2ea:	6878      	ldr	r0, [r7, #4]
 801b2ec:	f7f5 fa20 	bl	8010730 <pbuf_remove_header>
 801b2f0:	4603      	mov	r3, r0
 801b2f2:	2b00      	cmp	r3, #0
 801b2f4:	d11e      	bne.n	801b334 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801b2f6:	6839      	ldr	r1, [r7, #0]
 801b2f8:	6878      	ldr	r0, [r7, #4]
 801b2fa:	f7fe fcb5 	bl	8019c68 <ip4_input>
      break;
 801b2fe:	e013      	b.n	801b328 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801b300:	683b      	ldr	r3, [r7, #0]
 801b302:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b306:	f003 0308 	and.w	r3, r3, #8
 801b30a:	2b00      	cmp	r3, #0
 801b30c:	d014      	beq.n	801b338 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801b30e:	8afb      	ldrh	r3, [r7, #22]
 801b310:	4619      	mov	r1, r3
 801b312:	6878      	ldr	r0, [r7, #4]
 801b314:	f7f5 fa0c 	bl	8010730 <pbuf_remove_header>
 801b318:	4603      	mov	r3, r0
 801b31a:	2b00      	cmp	r3, #0
 801b31c:	d10e      	bne.n	801b33c <ethernet_input+0x104>
        etharp_input(p, netif);
 801b31e:	6839      	ldr	r1, [r7, #0]
 801b320:	6878      	ldr	r0, [r7, #4]
 801b322:	f7fd f9bd 	bl	80186a0 <etharp_input>
      break;
 801b326:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801b328:	2300      	movs	r3, #0
 801b32a:	e00c      	b.n	801b346 <ethernet_input+0x10e>
    goto free_and_return;
 801b32c:	bf00      	nop
 801b32e:	e006      	b.n	801b33e <ethernet_input+0x106>
        goto free_and_return;
 801b330:	bf00      	nop
 801b332:	e004      	b.n	801b33e <ethernet_input+0x106>
        goto free_and_return;
 801b334:	bf00      	nop
 801b336:	e002      	b.n	801b33e <ethernet_input+0x106>
        goto free_and_return;
 801b338:	bf00      	nop
 801b33a:	e000      	b.n	801b33e <ethernet_input+0x106>
        goto free_and_return;
 801b33c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801b33e:	6878      	ldr	r0, [r7, #4]
 801b340:	f7f5 faae 	bl	80108a0 <pbuf_free>
  return ERR_OK;
 801b344:	2300      	movs	r3, #0
}
 801b346:	4618      	mov	r0, r3
 801b348:	3718      	adds	r7, #24
 801b34a:	46bd      	mov	sp, r7
 801b34c:	bd80      	pop	{r7, pc}
 801b34e:	bf00      	nop
 801b350:	0802934c 	.word	0x0802934c

0801b354 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801b354:	b580      	push	{r7, lr}
 801b356:	b086      	sub	sp, #24
 801b358:	af00      	add	r7, sp, #0
 801b35a:	60f8      	str	r0, [r7, #12]
 801b35c:	60b9      	str	r1, [r7, #8]
 801b35e:	607a      	str	r2, [r7, #4]
 801b360:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801b362:	8c3b      	ldrh	r3, [r7, #32]
 801b364:	4618      	mov	r0, r3
 801b366:	f7f2 fe45 	bl	800dff4 <lwip_htons>
 801b36a:	4603      	mov	r3, r0
 801b36c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801b36e:	210e      	movs	r1, #14
 801b370:	68b8      	ldr	r0, [r7, #8]
 801b372:	f7f5 f9cd 	bl	8010710 <pbuf_add_header>
 801b376:	4603      	mov	r3, r0
 801b378:	2b00      	cmp	r3, #0
 801b37a:	d125      	bne.n	801b3c8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801b37c:	68bb      	ldr	r3, [r7, #8]
 801b37e:	685b      	ldr	r3, [r3, #4]
 801b380:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801b382:	693b      	ldr	r3, [r7, #16]
 801b384:	8afa      	ldrh	r2, [r7, #22]
 801b386:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801b388:	693b      	ldr	r3, [r7, #16]
 801b38a:	2206      	movs	r2, #6
 801b38c:	6839      	ldr	r1, [r7, #0]
 801b38e:	4618      	mov	r0, r3
 801b390:	f008 fb00 	bl	8023994 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801b394:	693b      	ldr	r3, [r7, #16]
 801b396:	3306      	adds	r3, #6
 801b398:	2206      	movs	r2, #6
 801b39a:	6879      	ldr	r1, [r7, #4]
 801b39c:	4618      	mov	r0, r3
 801b39e:	f008 faf9 	bl	8023994 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801b3a2:	68fb      	ldr	r3, [r7, #12]
 801b3a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b3a8:	2b06      	cmp	r3, #6
 801b3aa:	d006      	beq.n	801b3ba <ethernet_output+0x66>
 801b3ac:	4b0a      	ldr	r3, [pc, #40]	; (801b3d8 <ethernet_output+0x84>)
 801b3ae:	f44f 7299 	mov.w	r2, #306	; 0x132
 801b3b2:	490a      	ldr	r1, [pc, #40]	; (801b3dc <ethernet_output+0x88>)
 801b3b4:	480a      	ldr	r0, [pc, #40]	; (801b3e0 <ethernet_output+0x8c>)
 801b3b6:	f008 fc13 	bl	8023be0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801b3ba:	68fb      	ldr	r3, [r7, #12]
 801b3bc:	699b      	ldr	r3, [r3, #24]
 801b3be:	68b9      	ldr	r1, [r7, #8]
 801b3c0:	68f8      	ldr	r0, [r7, #12]
 801b3c2:	4798      	blx	r3
 801b3c4:	4603      	mov	r3, r0
 801b3c6:	e002      	b.n	801b3ce <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801b3c8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801b3ca:	f06f 0301 	mvn.w	r3, #1
}
 801b3ce:	4618      	mov	r0, r3
 801b3d0:	3718      	adds	r7, #24
 801b3d2:	46bd      	mov	sp, r7
 801b3d4:	bd80      	pop	{r7, pc}
 801b3d6:	bf00      	nop
 801b3d8:	080290e0 	.word	0x080290e0
 801b3dc:	08029118 	.word	0x08029118
 801b3e0:	0802914c 	.word	0x0802914c

0801b3e4 <sys_mbox_new>:
//#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801b3e4:	b580      	push	{r7, lr}
 801b3e6:	b082      	sub	sp, #8
 801b3e8:	af00      	add	r7, sp, #0
 801b3ea:	6078      	str	r0, [r7, #4]
 801b3ec:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801b3ee:	683b      	ldr	r3, [r7, #0]
 801b3f0:	2200      	movs	r2, #0
 801b3f2:	2104      	movs	r1, #4
 801b3f4:	4618      	mov	r0, r3
 801b3f6:	f7eb fcc5 	bl	8006d84 <osMessageQueueNew>
 801b3fa:	4602      	mov	r2, r0
 801b3fc:	687b      	ldr	r3, [r7, #4]
 801b3fe:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801b400:	687b      	ldr	r3, [r7, #4]
 801b402:	681b      	ldr	r3, [r3, #0]
 801b404:	2b00      	cmp	r3, #0
 801b406:	d102      	bne.n	801b40e <sys_mbox_new+0x2a>
    return ERR_MEM;
 801b408:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b40c:	e000      	b.n	801b410 <sys_mbox_new+0x2c>

  return ERR_OK;
 801b40e:	2300      	movs	r3, #0
}
 801b410:	4618      	mov	r0, r3
 801b412:	3708      	adds	r7, #8
 801b414:	46bd      	mov	sp, r7
 801b416:	bd80      	pop	{r7, pc}

0801b418 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801b418:	b580      	push	{r7, lr}
 801b41a:	b082      	sub	sp, #8
 801b41c:	af00      	add	r7, sp, #0
 801b41e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801b420:	687b      	ldr	r3, [r7, #4]
 801b422:	681b      	ldr	r3, [r3, #0]
 801b424:	4618      	mov	r0, r3
 801b426:	f7eb fe19 	bl	800705c <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801b42a:	687b      	ldr	r3, [r7, #4]
 801b42c:	681b      	ldr	r3, [r3, #0]
 801b42e:	4618      	mov	r0, r3
 801b430:	f7eb fe46 	bl	80070c0 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801b434:	bf00      	nop
 801b436:	3708      	adds	r7, #8
 801b438:	46bd      	mov	sp, r7
 801b43a:	bd80      	pop	{r7, pc}

0801b43c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801b43c:	b580      	push	{r7, lr}
 801b43e:	b084      	sub	sp, #16
 801b440:	af00      	add	r7, sp, #0
 801b442:	6078      	str	r0, [r7, #4]
 801b444:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801b446:	687b      	ldr	r3, [r7, #4]
 801b448:	6818      	ldr	r0, [r3, #0]
 801b44a:	4639      	mov	r1, r7
 801b44c:	2300      	movs	r3, #0
 801b44e:	2200      	movs	r2, #0
 801b450:	f7eb fd1e 	bl	8006e90 <osMessageQueuePut>
 801b454:	4603      	mov	r3, r0
 801b456:	2b00      	cmp	r3, #0
 801b458:	d102      	bne.n	801b460 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801b45a:	2300      	movs	r3, #0
 801b45c:	73fb      	strb	r3, [r7, #15]
 801b45e:	e001      	b.n	801b464 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801b460:	23ff      	movs	r3, #255	; 0xff
 801b462:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801b464:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b468:	4618      	mov	r0, r3
 801b46a:	3710      	adds	r7, #16
 801b46c:	46bd      	mov	sp, r7
 801b46e:	bd80      	pop	{r7, pc}

0801b470 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801b470:	b580      	push	{r7, lr}
 801b472:	b086      	sub	sp, #24
 801b474:	af00      	add	r7, sp, #0
 801b476:	60f8      	str	r0, [r7, #12]
 801b478:	60b9      	str	r1, [r7, #8]
 801b47a:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801b47c:	f7eb f8ae 	bl	80065dc <osKernelGetTickCount>
 801b480:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801b482:	687b      	ldr	r3, [r7, #4]
 801b484:	2b00      	cmp	r3, #0
 801b486:	d013      	beq.n	801b4b0 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801b488:	68fb      	ldr	r3, [r7, #12]
 801b48a:	6818      	ldr	r0, [r3, #0]
 801b48c:	687b      	ldr	r3, [r7, #4]
 801b48e:	2200      	movs	r2, #0
 801b490:	68b9      	ldr	r1, [r7, #8]
 801b492:	f7eb fd71 	bl	8006f78 <osMessageQueueGet>
 801b496:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801b498:	693b      	ldr	r3, [r7, #16]
 801b49a:	2b00      	cmp	r3, #0
 801b49c:	d105      	bne.n	801b4aa <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801b49e:	f7eb f89d 	bl	80065dc <osKernelGetTickCount>
 801b4a2:	4602      	mov	r2, r0
 801b4a4:	697b      	ldr	r3, [r7, #20]
 801b4a6:	1ad3      	subs	r3, r2, r3
 801b4a8:	e00f      	b.n	801b4ca <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801b4aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b4ae:	e00c      	b.n	801b4ca <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801b4b0:	68fb      	ldr	r3, [r7, #12]
 801b4b2:	6818      	ldr	r0, [r3, #0]
 801b4b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b4b8:	2200      	movs	r2, #0
 801b4ba:	68b9      	ldr	r1, [r7, #8]
 801b4bc:	f7eb fd5c 	bl	8006f78 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801b4c0:	f7eb f88c 	bl	80065dc <osKernelGetTickCount>
 801b4c4:	4602      	mov	r2, r0
 801b4c6:	697b      	ldr	r3, [r7, #20]
 801b4c8:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801b4ca:	4618      	mov	r0, r3
 801b4cc:	3718      	adds	r7, #24
 801b4ce:	46bd      	mov	sp, r7
 801b4d0:	bd80      	pop	{r7, pc}

0801b4d2 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801b4d2:	b580      	push	{r7, lr}
 801b4d4:	b082      	sub	sp, #8
 801b4d6:	af00      	add	r7, sp, #0
 801b4d8:	6078      	str	r0, [r7, #4]
 801b4da:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801b4dc:	687b      	ldr	r3, [r7, #4]
 801b4de:	6818      	ldr	r0, [r3, #0]
 801b4e0:	2300      	movs	r3, #0
 801b4e2:	2200      	movs	r2, #0
 801b4e4:	6839      	ldr	r1, [r7, #0]
 801b4e6:	f7eb fd47 	bl	8006f78 <osMessageQueueGet>
 801b4ea:	4603      	mov	r3, r0
 801b4ec:	2b00      	cmp	r3, #0
 801b4ee:	d101      	bne.n	801b4f4 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801b4f0:	2300      	movs	r3, #0
 801b4f2:	e001      	b.n	801b4f8 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801b4f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 801b4f8:	4618      	mov	r0, r3
 801b4fa:	3708      	adds	r7, #8
 801b4fc:	46bd      	mov	sp, r7
 801b4fe:	bd80      	pop	{r7, pc}

0801b500 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801b500:	b480      	push	{r7}
 801b502:	b083      	sub	sp, #12
 801b504:	af00      	add	r7, sp, #0
 801b506:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801b508:	687b      	ldr	r3, [r7, #4]
 801b50a:	681b      	ldr	r3, [r3, #0]
 801b50c:	2b00      	cmp	r3, #0
 801b50e:	d101      	bne.n	801b514 <sys_mbox_valid+0x14>
    return 0;
 801b510:	2300      	movs	r3, #0
 801b512:	e000      	b.n	801b516 <sys_mbox_valid+0x16>
  else
    return 1;
 801b514:	2301      	movs	r3, #1
}
 801b516:	4618      	mov	r0, r3
 801b518:	370c      	adds	r7, #12
 801b51a:	46bd      	mov	sp, r7
 801b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b520:	4770      	bx	lr

0801b522 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801b522:	b480      	push	{r7}
 801b524:	b083      	sub	sp, #12
 801b526:	af00      	add	r7, sp, #0
 801b528:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801b52a:	687b      	ldr	r3, [r7, #4]
 801b52c:	2200      	movs	r2, #0
 801b52e:	601a      	str	r2, [r3, #0]
}
 801b530:	bf00      	nop
 801b532:	370c      	adds	r7, #12
 801b534:	46bd      	mov	sp, r7
 801b536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b53a:	4770      	bx	lr

0801b53c <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801b53c:	b580      	push	{r7, lr}
 801b53e:	b082      	sub	sp, #8
 801b540:	af00      	add	r7, sp, #0
 801b542:	6078      	str	r0, [r7, #4]
 801b544:	460b      	mov	r3, r1
 801b546:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801b548:	78fb      	ldrb	r3, [r7, #3]
 801b54a:	2200      	movs	r2, #0
 801b54c:	4619      	mov	r1, r3
 801b54e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801b552:	f7eb fa87 	bl	8006a64 <osSemaphoreNew>
 801b556:	4602      	mov	r2, r0
 801b558:	687b      	ldr	r3, [r7, #4]
 801b55a:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801b55c:	687b      	ldr	r3, [r7, #4]
 801b55e:	681b      	ldr	r3, [r3, #0]
 801b560:	2b00      	cmp	r3, #0
 801b562:	d102      	bne.n	801b56a <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801b564:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b568:	e009      	b.n	801b57e <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801b56a:	78fb      	ldrb	r3, [r7, #3]
 801b56c:	2b00      	cmp	r3, #0
 801b56e:	d105      	bne.n	801b57c <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 801b570:	687b      	ldr	r3, [r7, #4]
 801b572:	681b      	ldr	r3, [r3, #0]
 801b574:	2100      	movs	r1, #0
 801b576:	4618      	mov	r0, r3
 801b578:	f7eb fb10 	bl	8006b9c <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801b57c:	2300      	movs	r3, #0
}
 801b57e:	4618      	mov	r0, r3
 801b580:	3708      	adds	r7, #8
 801b582:	46bd      	mov	sp, r7
 801b584:	bd80      	pop	{r7, pc}

0801b586 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801b586:	b580      	push	{r7, lr}
 801b588:	b084      	sub	sp, #16
 801b58a:	af00      	add	r7, sp, #0
 801b58c:	6078      	str	r0, [r7, #4]
 801b58e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801b590:	f7eb f824 	bl	80065dc <osKernelGetTickCount>
 801b594:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801b596:	683b      	ldr	r3, [r7, #0]
 801b598:	2b00      	cmp	r3, #0
 801b59a:	d011      	beq.n	801b5c0 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 801b59c:	687b      	ldr	r3, [r7, #4]
 801b59e:	681b      	ldr	r3, [r3, #0]
 801b5a0:	6839      	ldr	r1, [r7, #0]
 801b5a2:	4618      	mov	r0, r3
 801b5a4:	f7eb fafa 	bl	8006b9c <osSemaphoreAcquire>
 801b5a8:	4603      	mov	r3, r0
 801b5aa:	2b00      	cmp	r3, #0
 801b5ac:	d105      	bne.n	801b5ba <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801b5ae:	f7eb f815 	bl	80065dc <osKernelGetTickCount>
 801b5b2:	4602      	mov	r2, r0
 801b5b4:	68fb      	ldr	r3, [r7, #12]
 801b5b6:	1ad3      	subs	r3, r2, r3
 801b5b8:	e012      	b.n	801b5e0 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801b5ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b5be:	e00f      	b.n	801b5e0 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801b5c0:	bf00      	nop
 801b5c2:	687b      	ldr	r3, [r7, #4]
 801b5c4:	681b      	ldr	r3, [r3, #0]
 801b5c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801b5ca:	4618      	mov	r0, r3
 801b5cc:	f7eb fae6 	bl	8006b9c <osSemaphoreAcquire>
 801b5d0:	4603      	mov	r3, r0
 801b5d2:	2b00      	cmp	r3, #0
 801b5d4:	d1f5      	bne.n	801b5c2 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801b5d6:	f7eb f801 	bl	80065dc <osKernelGetTickCount>
 801b5da:	4602      	mov	r2, r0
 801b5dc:	68fb      	ldr	r3, [r7, #12]
 801b5de:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801b5e0:	4618      	mov	r0, r3
 801b5e2:	3710      	adds	r7, #16
 801b5e4:	46bd      	mov	sp, r7
 801b5e6:	bd80      	pop	{r7, pc}

0801b5e8 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801b5e8:	b580      	push	{r7, lr}
 801b5ea:	b082      	sub	sp, #8
 801b5ec:	af00      	add	r7, sp, #0
 801b5ee:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801b5f0:	687b      	ldr	r3, [r7, #4]
 801b5f2:	681b      	ldr	r3, [r3, #0]
 801b5f4:	4618      	mov	r0, r3
 801b5f6:	f7eb fb37 	bl	8006c68 <osSemaphoreRelease>
}
 801b5fa:	bf00      	nop
 801b5fc:	3708      	adds	r7, #8
 801b5fe:	46bd      	mov	sp, r7
 801b600:	bd80      	pop	{r7, pc}

0801b602 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801b602:	b580      	push	{r7, lr}
 801b604:	b082      	sub	sp, #8
 801b606:	af00      	add	r7, sp, #0
 801b608:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801b60a:	687b      	ldr	r3, [r7, #4]
 801b60c:	681b      	ldr	r3, [r3, #0]
 801b60e:	4618      	mov	r0, r3
 801b610:	f7eb fb82 	bl	8006d18 <osSemaphoreDelete>
}
 801b614:	bf00      	nop
 801b616:	3708      	adds	r7, #8
 801b618:	46bd      	mov	sp, r7
 801b61a:	bd80      	pop	{r7, pc}

0801b61c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801b61c:	b480      	push	{r7}
 801b61e:	b083      	sub	sp, #12
 801b620:	af00      	add	r7, sp, #0
 801b622:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801b624:	687b      	ldr	r3, [r7, #4]
 801b626:	681b      	ldr	r3, [r3, #0]
 801b628:	2b00      	cmp	r3, #0
 801b62a:	d101      	bne.n	801b630 <sys_sem_valid+0x14>
    return 0;
 801b62c:	2300      	movs	r3, #0
 801b62e:	e000      	b.n	801b632 <sys_sem_valid+0x16>
  else
    return 1;
 801b630:	2301      	movs	r3, #1
}
 801b632:	4618      	mov	r0, r3
 801b634:	370c      	adds	r7, #12
 801b636:	46bd      	mov	sp, r7
 801b638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b63c:	4770      	bx	lr

0801b63e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801b63e:	b480      	push	{r7}
 801b640:	b083      	sub	sp, #12
 801b642:	af00      	add	r7, sp, #0
 801b644:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801b646:	687b      	ldr	r3, [r7, #4]
 801b648:	2200      	movs	r2, #0
 801b64a:	601a      	str	r2, [r3, #0]
}
 801b64c:	bf00      	nop
 801b64e:	370c      	adds	r7, #12
 801b650:	46bd      	mov	sp, r7
 801b652:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b656:	4770      	bx	lr

0801b658 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801b658:	b580      	push	{r7, lr}
 801b65a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801b65c:	2000      	movs	r0, #0
 801b65e:	f7eb f8b9 	bl	80067d4 <osMutexNew>
 801b662:	4603      	mov	r3, r0
 801b664:	4a01      	ldr	r2, [pc, #4]	; (801b66c <sys_init+0x14>)
 801b666:	6013      	str	r3, [r2, #0]
#endif
}
 801b668:	bf00      	nop
 801b66a:	bd80      	pop	{r7, pc}
 801b66c:	2000fdb8 	.word	0x2000fdb8

0801b670 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801b670:	b580      	push	{r7, lr}
 801b672:	b082      	sub	sp, #8
 801b674:	af00      	add	r7, sp, #0
 801b676:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801b678:	2000      	movs	r0, #0
 801b67a:	f7eb f8ab 	bl	80067d4 <osMutexNew>
 801b67e:	4602      	mov	r2, r0
 801b680:	687b      	ldr	r3, [r7, #4]
 801b682:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801b684:	687b      	ldr	r3, [r7, #4]
 801b686:	681b      	ldr	r3, [r3, #0]
 801b688:	2b00      	cmp	r3, #0
 801b68a:	d102      	bne.n	801b692 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801b68c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b690:	e000      	b.n	801b694 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801b692:	2300      	movs	r3, #0
}
 801b694:	4618      	mov	r0, r3
 801b696:	3708      	adds	r7, #8
 801b698:	46bd      	mov	sp, r7
 801b69a:	bd80      	pop	{r7, pc}

0801b69c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801b69c:	b580      	push	{r7, lr}
 801b69e:	b082      	sub	sp, #8
 801b6a0:	af00      	add	r7, sp, #0
 801b6a2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801b6a4:	687b      	ldr	r3, [r7, #4]
 801b6a6:	681b      	ldr	r3, [r3, #0]
 801b6a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801b6ac:	4618      	mov	r0, r3
 801b6ae:	f7eb f92b 	bl	8006908 <osMutexAcquire>
#endif
}
 801b6b2:	bf00      	nop
 801b6b4:	3708      	adds	r7, #8
 801b6b6:	46bd      	mov	sp, r7
 801b6b8:	bd80      	pop	{r7, pc}

0801b6ba <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801b6ba:	b580      	push	{r7, lr}
 801b6bc:	b082      	sub	sp, #8
 801b6be:	af00      	add	r7, sp, #0
 801b6c0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801b6c2:	687b      	ldr	r3, [r7, #4]
 801b6c4:	681b      	ldr	r3, [r3, #0]
 801b6c6:	4618      	mov	r0, r3
 801b6c8:	f7eb f97c 	bl	80069c4 <osMutexRelease>
}
 801b6cc:	bf00      	nop
 801b6ce:	3708      	adds	r7, #8
 801b6d0:	46bd      	mov	sp, r7
 801b6d2:	bd80      	pop	{r7, pc}

0801b6d4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801b6d4:	b580      	push	{r7, lr}
 801b6d6:	b08e      	sub	sp, #56	; 0x38
 801b6d8:	af00      	add	r7, sp, #0
 801b6da:	60f8      	str	r0, [r7, #12]
 801b6dc:	60b9      	str	r1, [r7, #8]
 801b6de:	607a      	str	r2, [r7, #4]
 801b6e0:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801b6e2:	f107 0314 	add.w	r3, r7, #20
 801b6e6:	2224      	movs	r2, #36	; 0x24
 801b6e8:	2100      	movs	r1, #0
 801b6ea:	4618      	mov	r0, r3
 801b6ec:	f008 f97a 	bl	80239e4 <memset>
 801b6f0:	68fb      	ldr	r3, [r7, #12]
 801b6f2:	617b      	str	r3, [r7, #20]
 801b6f4:	683b      	ldr	r3, [r7, #0]
 801b6f6:	62bb      	str	r3, [r7, #40]	; 0x28
 801b6f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b6fa:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801b6fc:	f107 0314 	add.w	r3, r7, #20
 801b700:	461a      	mov	r2, r3
 801b702:	6879      	ldr	r1, [r7, #4]
 801b704:	68b8      	ldr	r0, [r7, #8]
 801b706:	f7ea ff91 	bl	800662c <osThreadNew>
 801b70a:	4603      	mov	r3, r0
#endif
}
 801b70c:	4618      	mov	r0, r3
 801b70e:	3738      	adds	r7, #56	; 0x38
 801b710:	46bd      	mov	sp, r7
 801b712:	bd80      	pop	{r7, pc}

0801b714 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801b714:	b580      	push	{r7, lr}
 801b716:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801b718:	4b04      	ldr	r3, [pc, #16]	; (801b72c <sys_arch_protect+0x18>)
 801b71a:	681b      	ldr	r3, [r3, #0]
 801b71c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801b720:	4618      	mov	r0, r3
 801b722:	f7eb f8f1 	bl	8006908 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801b726:	2301      	movs	r3, #1
}
 801b728:	4618      	mov	r0, r3
 801b72a:	bd80      	pop	{r7, pc}
 801b72c:	2000fdb8 	.word	0x2000fdb8

0801b730 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801b730:	b580      	push	{r7, lr}
 801b732:	b082      	sub	sp, #8
 801b734:	af00      	add	r7, sp, #0
 801b736:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801b738:	4b04      	ldr	r3, [pc, #16]	; (801b74c <sys_arch_unprotect+0x1c>)
 801b73a:	681b      	ldr	r3, [r3, #0]
 801b73c:	4618      	mov	r0, r3
 801b73e:	f7eb f941 	bl	80069c4 <osMutexRelease>
}
 801b742:	bf00      	nop
 801b744:	3708      	adds	r7, #8
 801b746:	46bd      	mov	sp, r7
 801b748:	bd80      	pop	{r7, pc}
 801b74a:	bf00      	nop
 801b74c:	2000fdb8 	.word	0x2000fdb8

0801b750 <rcl_get_zero_initialized_publisher>:
 801b750:	4b01      	ldr	r3, [pc, #4]	; (801b758 <rcl_get_zero_initialized_publisher+0x8>)
 801b752:	6818      	ldr	r0, [r3, #0]
 801b754:	4770      	bx	lr
 801b756:	bf00      	nop
 801b758:	0802935c 	.word	0x0802935c

0801b75c <rcl_publisher_init>:
 801b75c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b760:	b089      	sub	sp, #36	; 0x24
 801b762:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801b764:	2d00      	cmp	r5, #0
 801b766:	d068      	beq.n	801b83a <rcl_publisher_init+0xde>
 801b768:	f105 0950 	add.w	r9, r5, #80	; 0x50
 801b76c:	4604      	mov	r4, r0
 801b76e:	460e      	mov	r6, r1
 801b770:	4690      	mov	r8, r2
 801b772:	4648      	mov	r0, r9
 801b774:	461f      	mov	r7, r3
 801b776:	f000 f9e3 	bl	801bb40 <rcutils_allocator_is_valid>
 801b77a:	f080 0001 	eor.w	r0, r0, #1
 801b77e:	f010 0fff 	tst.w	r0, #255	; 0xff
 801b782:	d15a      	bne.n	801b83a <rcl_publisher_init+0xde>
 801b784:	2c00      	cmp	r4, #0
 801b786:	d058      	beq.n	801b83a <rcl_publisher_init+0xde>
 801b788:	6823      	ldr	r3, [r4, #0]
 801b78a:	b123      	cbz	r3, 801b796 <rcl_publisher_init+0x3a>
 801b78c:	2764      	movs	r7, #100	; 0x64
 801b78e:	4638      	mov	r0, r7
 801b790:	b009      	add	sp, #36	; 0x24
 801b792:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b796:	4630      	mov	r0, r6
 801b798:	f004 fcc6 	bl	8020128 <rcl_node_is_valid>
 801b79c:	2800      	cmp	r0, #0
 801b79e:	d051      	beq.n	801b844 <rcl_publisher_init+0xe8>
 801b7a0:	f1b8 0f00 	cmp.w	r8, #0
 801b7a4:	d049      	beq.n	801b83a <rcl_publisher_init+0xde>
 801b7a6:	fab7 f387 	clz	r3, r7
 801b7aa:	095b      	lsrs	r3, r3, #5
 801b7ac:	2f00      	cmp	r7, #0
 801b7ae:	d044      	beq.n	801b83a <rcl_publisher_init+0xde>
 801b7b0:	a907      	add	r1, sp, #28
 801b7b2:	f105 0258 	add.w	r2, r5, #88	; 0x58
 801b7b6:	9307      	str	r3, [sp, #28]
 801b7b8:	9105      	str	r1, [sp, #20]
 801b7ba:	e9cd 3303 	strd	r3, r3, [sp, #12]
 801b7be:	ca07      	ldmia	r2, {r0, r1, r2}
 801b7c0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b7c4:	4639      	mov	r1, r7
 801b7c6:	4630      	mov	r0, r6
 801b7c8:	e899 000c 	ldmia.w	r9, {r2, r3}
 801b7cc:	f004 fd0a 	bl	80201e4 <rcl_node_resolve_name>
 801b7d0:	2800      	cmp	r0, #0
 801b7d2:	d14f      	bne.n	801b874 <rcl_publisher_init+0x118>
 801b7d4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801b7d6:	20c8      	movs	r0, #200	; 0xc8
 801b7d8:	6e29      	ldr	r1, [r5, #96]	; 0x60
 801b7da:	4798      	blx	r3
 801b7dc:	6020      	str	r0, [r4, #0]
 801b7de:	2800      	cmp	r0, #0
 801b7e0:	d050      	beq.n	801b884 <rcl_publisher_init+0x128>
 801b7e2:	4630      	mov	r0, r6
 801b7e4:	f004 fcc2 	bl	802016c <rcl_node_get_rmw_handle>
 801b7e8:	f105 0264 	add.w	r2, r5, #100	; 0x64
 801b7ec:	4641      	mov	r1, r8
 801b7ee:	462b      	mov	r3, r5
 801b7f0:	9200      	str	r2, [sp, #0]
 801b7f2:	9a07      	ldr	r2, [sp, #28]
 801b7f4:	6827      	ldr	r7, [r4, #0]
 801b7f6:	f000 fa47 	bl	801bc88 <rmw_create_publisher>
 801b7fa:	6821      	ldr	r1, [r4, #0]
 801b7fc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 801b800:	f8d1 00c4 	ldr.w	r0, [r1, #196]	; 0xc4
 801b804:	b370      	cbz	r0, 801b864 <rcl_publisher_init+0x108>
 801b806:	3170      	adds	r1, #112	; 0x70
 801b808:	f000 fb2a 	bl	801be60 <rmw_publisher_get_actual_qos>
 801b80c:	4607      	mov	r7, r0
 801b80e:	b9d8      	cbnz	r0, 801b848 <rcl_publisher_init+0xec>
 801b810:	6823      	ldr	r3, [r4, #0]
 801b812:	2270      	movs	r2, #112	; 0x70
 801b814:	f895 4048 	ldrb.w	r4, [r5, #72]	; 0x48
 801b818:	4629      	mov	r1, r5
 801b81a:	4618      	mov	r0, r3
 801b81c:	f883 40b8 	strb.w	r4, [r3, #184]	; 0xb8
 801b820:	f008 f8b8 	bl	8023994 <memcpy>
 801b824:	6832      	ldr	r2, [r6, #0]
 801b826:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 801b82a:	9807      	ldr	r0, [sp, #28]
 801b82c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 801b82e:	6e29      	ldr	r1, [r5, #96]	; 0x60
 801b830:	4798      	blx	r3
 801b832:	4638      	mov	r0, r7
 801b834:	b009      	add	sp, #36	; 0x24
 801b836:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b83a:	270b      	movs	r7, #11
 801b83c:	4638      	mov	r0, r7
 801b83e:	b009      	add	sp, #36	; 0x24
 801b840:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b844:	27c8      	movs	r7, #200	; 0xc8
 801b846:	e7a2      	b.n	801b78e <rcl_publisher_init+0x32>
 801b848:	6821      	ldr	r1, [r4, #0]
 801b84a:	b1c9      	cbz	r1, 801b880 <rcl_publisher_init+0x124>
 801b84c:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
 801b850:	b143      	cbz	r3, 801b864 <rcl_publisher_init+0x108>
 801b852:	4630      	mov	r0, r6
 801b854:	f004 fc8a 	bl	802016c <rcl_node_get_rmw_handle>
 801b858:	6823      	ldr	r3, [r4, #0]
 801b85a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 801b85e:	f000 fb01 	bl	801be64 <rmw_destroy_publisher>
 801b862:	6821      	ldr	r1, [r4, #0]
 801b864:	4608      	mov	r0, r1
 801b866:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 801b868:	6e29      	ldr	r1, [r5, #96]	; 0x60
 801b86a:	2701      	movs	r7, #1
 801b86c:	4798      	blx	r3
 801b86e:	2300      	movs	r3, #0
 801b870:	6023      	str	r3, [r4, #0]
 801b872:	e7da      	b.n	801b82a <rcl_publisher_init+0xce>
 801b874:	2867      	cmp	r0, #103	; 0x67
 801b876:	d007      	beq.n	801b888 <rcl_publisher_init+0x12c>
 801b878:	2869      	cmp	r0, #105	; 0x69
 801b87a:	d005      	beq.n	801b888 <rcl_publisher_init+0x12c>
 801b87c:	280a      	cmp	r0, #10
 801b87e:	d001      	beq.n	801b884 <rcl_publisher_init+0x128>
 801b880:	2701      	movs	r7, #1
 801b882:	e7d2      	b.n	801b82a <rcl_publisher_init+0xce>
 801b884:	270a      	movs	r7, #10
 801b886:	e7d0      	b.n	801b82a <rcl_publisher_init+0xce>
 801b888:	2767      	movs	r7, #103	; 0x67
 801b88a:	e7ce      	b.n	801b82a <rcl_publisher_init+0xce>

0801b88c <rcl_publisher_get_default_options>:
 801b88c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b890:	4f12      	ldr	r7, [pc, #72]	; (801b8dc <rcl_publisher_get_default_options+0x50>)
 801b892:	b088      	sub	sp, #32
 801b894:	4606      	mov	r6, r0
 801b896:	2250      	movs	r2, #80	; 0x50
 801b898:	4911      	ldr	r1, [pc, #68]	; (801b8e0 <rcl_publisher_get_default_options+0x54>)
 801b89a:	4638      	mov	r0, r7
 801b89c:	ac02      	add	r4, sp, #8
 801b89e:	f008 f879 	bl	8023994 <memcpy>
 801b8a2:	a802      	add	r0, sp, #8
 801b8a4:	46e8      	mov	r8, sp
 801b8a6:	f000 f93d 	bl	801bb24 <rcutils_get_default_allocator>
 801b8aa:	f107 0550 	add.w	r5, r7, #80	; 0x50
 801b8ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b8b0:	6824      	ldr	r4, [r4, #0]
 801b8b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801b8b4:	4640      	mov	r0, r8
 801b8b6:	602c      	str	r4, [r5, #0]
 801b8b8:	f000 f97e 	bl	801bbb8 <rmw_get_default_publisher_options>
 801b8bc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801b8c0:	2270      	movs	r2, #112	; 0x70
 801b8c2:	e898 0003 	ldmia.w	r8, {r0, r1}
 801b8c6:	e883 0003 	stmia.w	r3, {r0, r1}
 801b8ca:	4639      	mov	r1, r7
 801b8cc:	4630      	mov	r0, r6
 801b8ce:	f008 f861 	bl	8023994 <memcpy>
 801b8d2:	4630      	mov	r0, r6
 801b8d4:	b008      	add	sp, #32
 801b8d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b8da:	bf00      	nop
 801b8dc:	2000fdc0 	.word	0x2000fdc0
 801b8e0:	08029360 	.word	0x08029360

0801b8e4 <rcl_publish>:
 801b8e4:	b1f8      	cbz	r0, 801b926 <rcl_publish+0x42>
 801b8e6:	6803      	ldr	r3, [r0, #0]
 801b8e8:	b570      	push	{r4, r5, r6, lr}
 801b8ea:	4604      	mov	r4, r0
 801b8ec:	b1b3      	cbz	r3, 801b91c <rcl_publish+0x38>
 801b8ee:	4616      	mov	r6, r2
 801b8f0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 801b8f4:	b192      	cbz	r2, 801b91c <rcl_publish+0x38>
 801b8f6:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 801b8fa:	460d      	mov	r5, r1
 801b8fc:	f004 f830 	bl	801f960 <rcl_context_is_valid>
 801b900:	b160      	cbz	r0, 801b91c <rcl_publish+0x38>
 801b902:	6823      	ldr	r3, [r4, #0]
 801b904:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 801b908:	b140      	cbz	r0, 801b91c <rcl_publish+0x38>
 801b90a:	b155      	cbz	r5, 801b922 <rcl_publish+0x3e>
 801b90c:	4632      	mov	r2, r6
 801b90e:	4629      	mov	r1, r5
 801b910:	f000 f95a 	bl	801bbc8 <rmw_publish>
 801b914:	3800      	subs	r0, #0
 801b916:	bf18      	it	ne
 801b918:	2001      	movne	r0, #1
 801b91a:	bd70      	pop	{r4, r5, r6, pc}
 801b91c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 801b920:	bd70      	pop	{r4, r5, r6, pc}
 801b922:	200b      	movs	r0, #11
 801b924:	bd70      	pop	{r4, r5, r6, pc}
 801b926:	f44f 7096 	mov.w	r0, #300	; 0x12c
 801b92a:	4770      	bx	lr

0801b92c <rclc_support_init>:
 801b92c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b930:	b089      	sub	sp, #36	; 0x24
 801b932:	2b00      	cmp	r3, #0
 801b934:	d045      	beq.n	801b9c2 <rclc_support_init+0x96>
 801b936:	4606      	mov	r6, r0
 801b938:	2800      	cmp	r0, #0
 801b93a:	d042      	beq.n	801b9c2 <rclc_support_init+0x96>
 801b93c:	461c      	mov	r4, r3
 801b93e:	460f      	mov	r7, r1
 801b940:	4690      	mov	r8, r2
 801b942:	f004 f993 	bl	801fc6c <rcl_get_zero_initialized_init_options>
 801b946:	4603      	mov	r3, r0
 801b948:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 801b94c:	9307      	str	r3, [sp, #28]
 801b94e:	e88d 0003 	stmia.w	sp, {r0, r1}
 801b952:	a807      	add	r0, sp, #28
 801b954:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801b958:	f004 f98a 	bl	801fc70 <rcl_init_options_init>
 801b95c:	4605      	mov	r5, r0
 801b95e:	bb50      	cbnz	r0, 801b9b6 <rclc_support_init+0x8a>
 801b960:	f004 f984 	bl	801fc6c <rcl_get_zero_initialized_init_options>
 801b964:	4631      	mov	r1, r6
 801b966:	6030      	str	r0, [r6, #0]
 801b968:	a807      	add	r0, sp, #28
 801b96a:	f004 fa03 	bl	801fd74 <rcl_init_options_copy>
 801b96e:	4605      	mov	r5, r0
 801b970:	b9d8      	cbnz	r0, 801b9aa <rclc_support_init+0x7e>
 801b972:	f10d 0908 	add.w	r9, sp, #8
 801b976:	f106 0508 	add.w	r5, r6, #8
 801b97a:	4648      	mov	r0, r9
 801b97c:	f003 ffe0 	bl	801f940 <rcl_get_zero_initialized_context>
 801b980:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
 801b984:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801b988:	462b      	mov	r3, r5
 801b98a:	4641      	mov	r1, r8
 801b98c:	4638      	mov	r0, r7
 801b98e:	4632      	mov	r2, r6
 801b990:	f004 f864 	bl	801fa5c <rcl_init>
 801b994:	4605      	mov	r5, r0
 801b996:	b940      	cbnz	r0, 801b9aa <rclc_support_init+0x7e>
 801b998:	4622      	mov	r2, r4
 801b99a:	f106 011c 	add.w	r1, r6, #28
 801b99e:	2003      	movs	r0, #3
 801b9a0:	61b4      	str	r4, [r6, #24]
 801b9a2:	f004 fe0f 	bl	80205c4 <rcl_clock_init>
 801b9a6:	4605      	mov	r5, r0
 801b9a8:	b108      	cbz	r0, 801b9ae <rclc_support_init+0x82>
 801b9aa:	f000 f8ed 	bl	801bb88 <rcutils_reset_error>
 801b9ae:	a807      	add	r0, sp, #28
 801b9b0:	f004 f9bc 	bl	801fd2c <rcl_init_options_fini>
 801b9b4:	b108      	cbz	r0, 801b9ba <rclc_support_init+0x8e>
 801b9b6:	f000 f8e7 	bl	801bb88 <rcutils_reset_error>
 801b9ba:	4628      	mov	r0, r5
 801b9bc:	b009      	add	sp, #36	; 0x24
 801b9be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b9c2:	250b      	movs	r5, #11
 801b9c4:	4628      	mov	r0, r5
 801b9c6:	b009      	add	sp, #36	; 0x24
 801b9c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801b9cc <rclc_node_init_default>:
 801b9cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b9d0:	fab3 f483 	clz	r4, r3
 801b9d4:	b0a1      	sub	sp, #132	; 0x84
 801b9d6:	0964      	lsrs	r4, r4, #5
 801b9d8:	2a00      	cmp	r2, #0
 801b9da:	bf08      	it	eq
 801b9dc:	2401      	moveq	r4, #1
 801b9de:	2900      	cmp	r1, #0
 801b9e0:	bf08      	it	eq
 801b9e2:	2401      	moveq	r4, #1
 801b9e4:	bb2c      	cbnz	r4, 801ba32 <rclc_node_init_default+0x66>
 801b9e6:	4605      	mov	r5, r0
 801b9e8:	b318      	cbz	r0, 801ba32 <rclc_node_init_default+0x66>
 801b9ea:	ac04      	add	r4, sp, #16
 801b9ec:	4698      	mov	r8, r3
 801b9ee:	4617      	mov	r7, r2
 801b9f0:	460e      	mov	r6, r1
 801b9f2:	4620      	mov	r0, r4
 801b9f4:	f10d 0918 	add.w	r9, sp, #24
 801b9f8:	f004 fa48 	bl	801fe8c <rcl_get_zero_initialized_node>
 801b9fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 801ba00:	e885 0003 	stmia.w	r5, {r0, r1}
 801ba04:	4648      	mov	r0, r9
 801ba06:	f004 fbb7 	bl	8020178 <rcl_node_get_default_options>
 801ba0a:	4620      	mov	r0, r4
 801ba0c:	f004 fa3e 	bl	801fe8c <rcl_get_zero_initialized_node>
 801ba10:	f8cd 9000 	str.w	r9, [sp]
 801ba14:	f108 0308 	add.w	r3, r8, #8
 801ba18:	463a      	mov	r2, r7
 801ba1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801ba1e:	e885 0003 	stmia.w	r5, {r0, r1}
 801ba22:	4631      	mov	r1, r6
 801ba24:	4628      	mov	r0, r5
 801ba26:	f004 fa3b 	bl	801fea0 <rcl_node_init>
 801ba2a:	b930      	cbnz	r0, 801ba3a <rclc_node_init_default+0x6e>
 801ba2c:	b021      	add	sp, #132	; 0x84
 801ba2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ba32:	200b      	movs	r0, #11
 801ba34:	b021      	add	sp, #132	; 0x84
 801ba36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ba3a:	9003      	str	r0, [sp, #12]
 801ba3c:	f000 f8a4 	bl	801bb88 <rcutils_reset_error>
 801ba40:	f000 f8a2 	bl	801bb88 <rcutils_reset_error>
 801ba44:	9803      	ldr	r0, [sp, #12]
 801ba46:	b021      	add	sp, #132	; 0x84
 801ba48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801ba4c <rclc_publisher_init_default>:
 801ba4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba50:	fab3 f483 	clz	r4, r3
 801ba54:	b0a0      	sub	sp, #128	; 0x80
 801ba56:	0964      	lsrs	r4, r4, #5
 801ba58:	2a00      	cmp	r2, #0
 801ba5a:	bf08      	it	eq
 801ba5c:	2401      	moveq	r4, #1
 801ba5e:	2900      	cmp	r1, #0
 801ba60:	bf08      	it	eq
 801ba62:	2401      	moveq	r4, #1
 801ba64:	bb14      	cbnz	r4, 801baac <rclc_publisher_init_default+0x60>
 801ba66:	4605      	mov	r5, r0
 801ba68:	b300      	cbz	r0, 801baac <rclc_publisher_init_default+0x60>
 801ba6a:	ac04      	add	r4, sp, #16
 801ba6c:	4698      	mov	r8, r3
 801ba6e:	4617      	mov	r7, r2
 801ba70:	460e      	mov	r6, r1
 801ba72:	f7ff fe6d 	bl	801b750 <rcl_get_zero_initialized_publisher>
 801ba76:	6028      	str	r0, [r5, #0]
 801ba78:	4620      	mov	r0, r4
 801ba7a:	f7ff ff07 	bl	801b88c <rcl_publisher_get_default_options>
 801ba7e:	2250      	movs	r2, #80	; 0x50
 801ba80:	490c      	ldr	r1, [pc, #48]	; (801bab4 <rclc_publisher_init_default+0x68>)
 801ba82:	4620      	mov	r0, r4
 801ba84:	f007 ff86 	bl	8023994 <memcpy>
 801ba88:	4643      	mov	r3, r8
 801ba8a:	463a      	mov	r2, r7
 801ba8c:	4631      	mov	r1, r6
 801ba8e:	4628      	mov	r0, r5
 801ba90:	9400      	str	r4, [sp, #0]
 801ba92:	f7ff fe63 	bl	801b75c <rcl_publisher_init>
 801ba96:	b910      	cbnz	r0, 801ba9e <rclc_publisher_init_default+0x52>
 801ba98:	b020      	add	sp, #128	; 0x80
 801ba9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ba9e:	9003      	str	r0, [sp, #12]
 801baa0:	f000 f872 	bl	801bb88 <rcutils_reset_error>
 801baa4:	9803      	ldr	r0, [sp, #12]
 801baa6:	b020      	add	sp, #128	; 0x80
 801baa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801baac:	200b      	movs	r0, #11
 801baae:	b020      	add	sp, #128	; 0x80
 801bab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bab4:	080293b0 	.word	0x080293b0

0801bab8 <__default_zero_allocate>:
 801bab8:	f007 bdde 	b.w	8023678 <calloc>

0801babc <__default_reallocate>:
 801babc:	f008 b98a 	b.w	8023dd4 <realloc>

0801bac0 <__default_deallocate>:
 801bac0:	f007 bf50 	b.w	8023964 <free>

0801bac4 <__default_allocate>:
 801bac4:	f007 bf46 	b.w	8023954 <malloc>

0801bac8 <rcutils_get_zero_initialized_allocator>:
 801bac8:	b470      	push	{r4, r5, r6}
 801baca:	4d05      	ldr	r5, [pc, #20]	; (801bae0 <rcutils_get_zero_initialized_allocator+0x18>)
 801bacc:	4606      	mov	r6, r0
 801bace:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801bad0:	4634      	mov	r4, r6
 801bad2:	682d      	ldr	r5, [r5, #0]
 801bad4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801bad6:	4630      	mov	r0, r6
 801bad8:	6025      	str	r5, [r4, #0]
 801bada:	bc70      	pop	{r4, r5, r6}
 801badc:	4770      	bx	lr
 801bade:	bf00      	nop
 801bae0:	08029400 	.word	0x08029400

0801bae4 <rcutils_set_default_allocator>:
 801bae4:	b1a0      	cbz	r0, 801bb10 <rcutils_set_default_allocator+0x2c>
 801bae6:	6802      	ldr	r2, [r0, #0]
 801bae8:	b19a      	cbz	r2, 801bb12 <rcutils_set_default_allocator+0x2e>
 801baea:	6841      	ldr	r1, [r0, #4]
 801baec:	b199      	cbz	r1, 801bb16 <rcutils_set_default_allocator+0x32>
 801baee:	b470      	push	{r4, r5, r6}
 801baf0:	68c4      	ldr	r4, [r0, #12]
 801baf2:	b15c      	cbz	r4, 801bb0c <rcutils_set_default_allocator+0x28>
 801baf4:	6885      	ldr	r5, [r0, #8]
 801baf6:	b185      	cbz	r5, 801bb1a <rcutils_set_default_allocator+0x36>
 801baf8:	4b09      	ldr	r3, [pc, #36]	; (801bb20 <rcutils_set_default_allocator+0x3c>)
 801bafa:	2600      	movs	r6, #0
 801bafc:	2001      	movs	r0, #1
 801bafe:	601a      	str	r2, [r3, #0]
 801bb00:	e9c3 1501 	strd	r1, r5, [r3, #4]
 801bb04:	e9c3 4603 	strd	r4, r6, [r3, #12]
 801bb08:	bc70      	pop	{r4, r5, r6}
 801bb0a:	4770      	bx	lr
 801bb0c:	4620      	mov	r0, r4
 801bb0e:	e7fb      	b.n	801bb08 <rcutils_set_default_allocator+0x24>
 801bb10:	4770      	bx	lr
 801bb12:	4610      	mov	r0, r2
 801bb14:	4770      	bx	lr
 801bb16:	4608      	mov	r0, r1
 801bb18:	4770      	bx	lr
 801bb1a:	4628      	mov	r0, r5
 801bb1c:	e7f4      	b.n	801bb08 <rcutils_set_default_allocator+0x24>
 801bb1e:	bf00      	nop
 801bb20:	20000020 	.word	0x20000020

0801bb24 <rcutils_get_default_allocator>:
 801bb24:	b470      	push	{r4, r5, r6}
 801bb26:	4d05      	ldr	r5, [pc, #20]	; (801bb3c <rcutils_get_default_allocator+0x18>)
 801bb28:	4606      	mov	r6, r0
 801bb2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801bb2c:	4634      	mov	r4, r6
 801bb2e:	682d      	ldr	r5, [r5, #0]
 801bb30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801bb32:	4630      	mov	r0, r6
 801bb34:	6025      	str	r5, [r4, #0]
 801bb36:	bc70      	pop	{r4, r5, r6}
 801bb38:	4770      	bx	lr
 801bb3a:	bf00      	nop
 801bb3c:	20000020 	.word	0x20000020

0801bb40 <rcutils_allocator_is_valid>:
 801bb40:	b158      	cbz	r0, 801bb5a <rcutils_allocator_is_valid+0x1a>
 801bb42:	6803      	ldr	r3, [r0, #0]
 801bb44:	b143      	cbz	r3, 801bb58 <rcutils_allocator_is_valid+0x18>
 801bb46:	6843      	ldr	r3, [r0, #4]
 801bb48:	b133      	cbz	r3, 801bb58 <rcutils_allocator_is_valid+0x18>
 801bb4a:	68c3      	ldr	r3, [r0, #12]
 801bb4c:	b123      	cbz	r3, 801bb58 <rcutils_allocator_is_valid+0x18>
 801bb4e:	6880      	ldr	r0, [r0, #8]
 801bb50:	3800      	subs	r0, #0
 801bb52:	bf18      	it	ne
 801bb54:	2001      	movne	r0, #1
 801bb56:	4770      	bx	lr
 801bb58:	4618      	mov	r0, r3
 801bb5a:	4770      	bx	lr

0801bb5c <rcutils_get_error_string>:
 801bb5c:	4b06      	ldr	r3, [pc, #24]	; (801bb78 <rcutils_get_error_string+0x1c>)
 801bb5e:	781b      	ldrb	r3, [r3, #0]
 801bb60:	b13b      	cbz	r3, 801bb72 <rcutils_get_error_string+0x16>
 801bb62:	4b06      	ldr	r3, [pc, #24]	; (801bb7c <rcutils_get_error_string+0x20>)
 801bb64:	781a      	ldrb	r2, [r3, #0]
 801bb66:	b90a      	cbnz	r2, 801bb6c <rcutils_get_error_string+0x10>
 801bb68:	2201      	movs	r2, #1
 801bb6a:	701a      	strb	r2, [r3, #0]
 801bb6c:	4b04      	ldr	r3, [pc, #16]	; (801bb80 <rcutils_get_error_string+0x24>)
 801bb6e:	7818      	ldrb	r0, [r3, #0]
 801bb70:	4770      	bx	lr
 801bb72:	4b04      	ldr	r3, [pc, #16]	; (801bb84 <rcutils_get_error_string+0x28>)
 801bb74:	7818      	ldrb	r0, [r3, #0]
 801bb76:	4770      	bx	lr
 801bb78:	2000fe30 	.word	0x2000fe30
 801bb7c:	2000fe31 	.word	0x2000fe31
 801bb80:	2000ff68 	.word	0x2000ff68
 801bb84:	08029414 	.word	0x08029414

0801bb88 <rcutils_reset_error>:
 801bb88:	b430      	push	{r4, r5}
 801bb8a:	2300      	movs	r3, #0
 801bb8c:	4c06      	ldr	r4, [pc, #24]	; (801bba8 <rcutils_reset_error+0x20>)
 801bb8e:	4a07      	ldr	r2, [pc, #28]	; (801bbac <rcutils_reset_error+0x24>)
 801bb90:	2000      	movs	r0, #0
 801bb92:	4d07      	ldr	r5, [pc, #28]	; (801bbb0 <rcutils_reset_error+0x28>)
 801bb94:	2100      	movs	r1, #0
 801bb96:	7023      	strb	r3, [r4, #0]
 801bb98:	4c06      	ldr	r4, [pc, #24]	; (801bbb4 <rcutils_reset_error+0x2c>)
 801bb9a:	8013      	strh	r3, [r2, #0]
 801bb9c:	702b      	strb	r3, [r5, #0]
 801bb9e:	7023      	strb	r3, [r4, #0]
 801bba0:	e9c2 0102 	strd	r0, r1, [r2, #8]
 801bba4:	bc30      	pop	{r4, r5}
 801bba6:	4770      	bx	lr
 801bba8:	2000fe31 	.word	0x2000fe31
 801bbac:	2000ff70 	.word	0x2000ff70
 801bbb0:	2000ff68 	.word	0x2000ff68
 801bbb4:	2000fe30 	.word	0x2000fe30

0801bbb8 <rmw_get_default_publisher_options>:
 801bbb8:	2200      	movs	r2, #0
 801bbba:	6002      	str	r2, [r0, #0]
 801bbbc:	7102      	strb	r2, [r0, #4]
 801bbbe:	4770      	bx	lr

0801bbc0 <flush_session>:
 801bbc0:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 801bbc2:	f002 bbad 	b.w	801e320 <uxr_run_session_until_confirm_delivery>
 801bbc6:	bf00      	nop

0801bbc8 <rmw_publish>:
 801bbc8:	2800      	cmp	r0, #0
 801bbca:	d053      	beq.n	801bc74 <rmw_publish+0xac>
 801bbcc:	b570      	push	{r4, r5, r6, lr}
 801bbce:	460d      	mov	r5, r1
 801bbd0:	b08e      	sub	sp, #56	; 0x38
 801bbd2:	2900      	cmp	r1, #0
 801bbd4:	d04b      	beq.n	801bc6e <rmw_publish+0xa6>
 801bbd6:	4604      	mov	r4, r0
 801bbd8:	6800      	ldr	r0, [r0, #0]
 801bbda:	f000 fc2f 	bl	801c43c <is_uxrce_rmw_identifier_valid>
 801bbde:	2800      	cmp	r0, #0
 801bbe0:	d045      	beq.n	801bc6e <rmw_publish+0xa6>
 801bbe2:	6866      	ldr	r6, [r4, #4]
 801bbe4:	2e00      	cmp	r6, #0
 801bbe6:	d042      	beq.n	801bc6e <rmw_publish+0xa6>
 801bbe8:	69b4      	ldr	r4, [r6, #24]
 801bbea:	4628      	mov	r0, r5
 801bbec:	6923      	ldr	r3, [r4, #16]
 801bbee:	4798      	blx	r3
 801bbf0:	69f3      	ldr	r3, [r6, #28]
 801bbf2:	9005      	str	r0, [sp, #20]
 801bbf4:	b113      	cbz	r3, 801bbfc <rmw_publish+0x34>
 801bbf6:	a805      	add	r0, sp, #20
 801bbf8:	4798      	blx	r3
 801bbfa:	9805      	ldr	r0, [sp, #20]
 801bbfc:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 801bc00:	691a      	ldr	r2, [r3, #16]
 801bc02:	ab06      	add	r3, sp, #24
 801bc04:	9000      	str	r0, [sp, #0]
 801bc06:	f502 700a 	add.w	r0, r2, #552	; 0x228
 801bc0a:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 801bc0c:	6972      	ldr	r2, [r6, #20]
 801bc0e:	f002 ffa9 	bl	801eb64 <uxr_prepare_output_stream>
 801bc12:	b1d8      	cbz	r0, 801bc4c <rmw_publish+0x84>
 801bc14:	68a3      	ldr	r3, [r4, #8]
 801bc16:	4628      	mov	r0, r5
 801bc18:	a906      	add	r1, sp, #24
 801bc1a:	4798      	blx	r3
 801bc1c:	6a33      	ldr	r3, [r6, #32]
 801bc1e:	4604      	mov	r4, r0
 801bc20:	b10b      	cbz	r3, 801bc26 <rmw_publish+0x5e>
 801bc22:	a806      	add	r0, sp, #24
 801bc24:	4798      	blx	r3
 801bc26:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 801bc2a:	2b01      	cmp	r3, #1
 801bc2c:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 801bc30:	d022      	beq.n	801bc78 <rmw_publish+0xb0>
 801bc32:	6918      	ldr	r0, [r3, #16]
 801bc34:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 801bc36:	f500 700a 	add.w	r0, r0, #552	; 0x228
 801bc3a:	f002 fb71 	bl	801e320 <uxr_run_session_until_confirm_delivery>
 801bc3e:	4020      	ands	r0, r4
 801bc40:	b2c4      	uxtb	r4, r0
 801bc42:	f084 0001 	eor.w	r0, r4, #1
 801bc46:	b2c0      	uxtb	r0, r0
 801bc48:	b00e      	add	sp, #56	; 0x38
 801bc4a:	bd70      	pop	{r4, r5, r6, pc}
 801bc4c:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
 801bc50:	ab06      	add	r3, sp, #24
 801bc52:	490c      	ldr	r1, [pc, #48]	; (801bc84 <rmw_publish+0xbc>)
 801bc54:	6910      	ldr	r0, [r2, #16]
 801bc56:	9a05      	ldr	r2, [sp, #20]
 801bc58:	f500 700a 	add.w	r0, r0, #552	; 0x228
 801bc5c:	9200      	str	r2, [sp, #0]
 801bc5e:	e9cd 1601 	strd	r1, r6, [sp, #4]
 801bc62:	6972      	ldr	r2, [r6, #20]
 801bc64:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 801bc66:	f002 ffad 	bl	801ebc4 <uxr_prepare_output_stream_fragmented>
 801bc6a:	2800      	cmp	r0, #0
 801bc6c:	d1d2      	bne.n	801bc14 <rmw_publish+0x4c>
 801bc6e:	2001      	movs	r0, #1
 801bc70:	b00e      	add	sp, #56	; 0x38
 801bc72:	bd70      	pop	{r4, r5, r6, pc}
 801bc74:	2001      	movs	r0, #1
 801bc76:	4770      	bx	lr
 801bc78:	6918      	ldr	r0, [r3, #16]
 801bc7a:	f500 700a 	add.w	r0, r0, #552	; 0x228
 801bc7e:	f002 fadb 	bl	801e238 <uxr_flash_output_streams>
 801bc82:	e7de      	b.n	801bc42 <rmw_publish+0x7a>
 801bc84:	0801bbc1 	.word	0x0801bbc1

0801bc88 <rmw_create_publisher>:
 801bc88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc8c:	b087      	sub	sp, #28
 801bc8e:	2800      	cmp	r0, #0
 801bc90:	f000 80d9 	beq.w	801be46 <rmw_create_publisher+0x1be>
 801bc94:	460f      	mov	r7, r1
 801bc96:	2900      	cmp	r1, #0
 801bc98:	f000 80d5 	beq.w	801be46 <rmw_create_publisher+0x1be>
 801bc9c:	4615      	mov	r5, r2
 801bc9e:	4604      	mov	r4, r0
 801bca0:	6800      	ldr	r0, [r0, #0]
 801bca2:	461e      	mov	r6, r3
 801bca4:	f000 fbca 	bl	801c43c <is_uxrce_rmw_identifier_valid>
 801bca8:	2d00      	cmp	r5, #0
 801bcaa:	f000 80cc 	beq.w	801be46 <rmw_create_publisher+0x1be>
 801bcae:	f080 0001 	eor.w	r0, r0, #1
 801bcb2:	f010 0fff 	tst.w	r0, #255	; 0xff
 801bcb6:	f040 80c6 	bne.w	801be46 <rmw_create_publisher+0x1be>
 801bcba:	782b      	ldrb	r3, [r5, #0]
 801bcbc:	2b00      	cmp	r3, #0
 801bcbe:	f000 80c2 	beq.w	801be46 <rmw_create_publisher+0x1be>
 801bcc2:	fab6 f886 	clz	r8, r6
 801bcc6:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801bcca:	2e00      	cmp	r6, #0
 801bccc:	f000 80bb 	beq.w	801be46 <rmw_create_publisher+0x1be>
 801bcd0:	4860      	ldr	r0, [pc, #384]	; (801be54 <rmw_create_publisher+0x1cc>)
 801bcd2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801bcd6:	f005 fa9d 	bl	8021214 <get_memory>
 801bcda:	2800      	cmp	r0, #0
 801bcdc:	f000 80b3 	beq.w	801be46 <rmw_create_publisher+0x1be>
 801bce0:	6884      	ldr	r4, [r0, #8]
 801bce2:	f8c4 8088 	str.w	r8, [r4, #136]	; 0x88
 801bce6:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 801bcea:	f005 fab7 	bl	802125c <rmw_get_implementation_identifier>
 801bcee:	4603      	mov	r3, r0
 801bcf0:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 801bcf4:	4628      	mov	r0, r5
 801bcf6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 801bcfa:	f104 0884 	add.w	r8, r4, #132	; 0x84
 801bcfe:	f7e4 fa91 	bl	8000224 <strlen>
 801bd02:	3001      	adds	r0, #1
 801bd04:	283c      	cmp	r0, #60	; 0x3c
 801bd06:	f200 8095 	bhi.w	801be34 <rmw_create_publisher+0x1ac>
 801bd0a:	462b      	mov	r3, r5
 801bd0c:	4a52      	ldr	r2, [pc, #328]	; (801be58 <rmw_create_publisher+0x1d0>)
 801bd0e:	213c      	movs	r1, #60	; 0x3c
 801bd10:	4650      	mov	r0, sl
 801bd12:	f008 f8e1 	bl	8023ed8 <sniprintf>
 801bd16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801bd1a:	4631      	mov	r1, r6
 801bd1c:	2250      	movs	r2, #80	; 0x50
 801bd1e:	67e3      	str	r3, [r4, #124]	; 0x7c
 801bd20:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801bd24:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 801bd28:	f007 fe34 	bl	8023994 <memcpy>
 801bd2c:	7a33      	ldrb	r3, [r6, #8]
 801bd2e:	4638      	mov	r0, r7
 801bd30:	494a      	ldr	r1, [pc, #296]	; (801be5c <rmw_create_publisher+0x1d4>)
 801bd32:	2b02      	cmp	r3, #2
 801bd34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801bd38:	bf0c      	ite	eq
 801bd3a:	f8d3 3304 	ldreq.w	r3, [r3, #772]	; 0x304
 801bd3e:	f8d3 3300 	ldrne.w	r3, [r3, #768]	; 0x300
 801bd42:	67a3      	str	r3, [r4, #120]	; 0x78
 801bd44:	2300      	movs	r3, #0
 801bd46:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801bd4a:	f000 fb85 	bl	801c458 <get_message_typesupport_handle>
 801bd4e:	2800      	cmp	r0, #0
 801bd50:	d070      	beq.n	801be34 <rmw_create_publisher+0x1ac>
 801bd52:	6842      	ldr	r2, [r0, #4]
 801bd54:	61a2      	str	r2, [r4, #24]
 801bd56:	2a00      	cmp	r2, #0
 801bd58:	d06c      	beq.n	801be34 <rmw_create_publisher+0x1ac>
 801bd5a:	4629      	mov	r1, r5
 801bd5c:	4633      	mov	r3, r6
 801bd5e:	4648      	mov	r0, r9
 801bd60:	f005 fcd0 	bl	8021704 <create_topic>
 801bd64:	6260      	str	r0, [r4, #36]	; 0x24
 801bd66:	2800      	cmp	r0, #0
 801bd68:	d064      	beq.n	801be34 <rmw_create_publisher+0x1ac>
 801bd6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801bd6e:	2103      	movs	r1, #3
 801bd70:	2506      	movs	r5, #6
 801bd72:	f503 53a9 	add.w	r3, r3, #5408	; 0x1520
 801bd76:	8818      	ldrh	r0, [r3, #0]
 801bd78:	1c42      	adds	r2, r0, #1
 801bd7a:	801a      	strh	r2, [r3, #0]
 801bd7c:	f001 fd7a 	bl	801d874 <uxr_object_id>
 801bd80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801bd84:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 801bd88:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
 801bd8c:	6912      	ldr	r2, [r2, #16]
 801bd8e:	6120      	str	r0, [r4, #16]
 801bd90:	9500      	str	r5, [sp, #0]
 801bd92:	f502 700a 	add.w	r0, r2, #552	; 0x228
 801bd96:	6819      	ldr	r1, [r3, #0]
 801bd98:	6922      	ldr	r2, [r4, #16]
 801bd9a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801bd9e:	f001 fcc1 	bl	801d724 <uxr_buffer_create_publisher_bin>
 801bda2:	4602      	mov	r2, r0
 801bda4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801bda8:	f8d0 3314 	ldr.w	r3, [r0, #788]	; 0x314
 801bdac:	f8d0 130c 	ldr.w	r1, [r0, #780]	; 0x30c
 801bdb0:	f000 fabe 	bl	801c330 <run_xrce_session>
 801bdb4:	2800      	cmp	r0, #0
 801bdb6:	d039      	beq.n	801be2c <rmw_create_publisher+0x1a4>
 801bdb8:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801bdbc:	f241 5322 	movw	r3, #5410	; 0x1522
 801bdc0:	2105      	movs	r1, #5
 801bdc2:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 801bdc6:	5ad0      	ldrh	r0, [r2, r3]
 801bdc8:	af04      	add	r7, sp, #16
 801bdca:	f100 0c01 	add.w	ip, r0, #1
 801bdce:	f822 c003 	strh.w	ip, [r2, r3]
 801bdd2:	f001 fd4f 	bl	801d874 <uxr_object_id>
 801bdd6:	4631      	mov	r1, r6
 801bdd8:	4602      	mov	r2, r0
 801bdda:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 801bdde:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801bde2:	4638      	mov	r0, r7
 801bde4:	6936      	ldr	r6, [r6, #16]
 801bde6:	6162      	str	r2, [r4, #20]
 801bde8:	f8d3 a30c 	ldr.w	sl, [r3, #780]	; 0x30c
 801bdec:	f506 760a 	add.w	r6, r6, #552	; 0x228
 801bdf0:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 801bdf4:	f000 fab8 	bl	801c368 <convert_qos_profile>
 801bdf8:	9503      	str	r5, [sp, #12]
 801bdfa:	e897 0003 	ldmia.w	r7, {r0, r1}
 801bdfe:	9001      	str	r0, [sp, #4]
 801be00:	4630      	mov	r0, r6
 801be02:	f8ad 1008 	strh.w	r1, [sp, #8]
 801be06:	f8db 3010 	ldr.w	r3, [fp, #16]
 801be0a:	9300      	str	r3, [sp, #0]
 801be0c:	f8da 1000 	ldr.w	r1, [sl]
 801be10:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801be14:	f001 fcb4 	bl	801d780 <uxr_buffer_create_datawriter_bin>
 801be18:	4602      	mov	r2, r0
 801be1a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801be1e:	f8d0 3314 	ldr.w	r3, [r0, #788]	; 0x314
 801be22:	f8d0 130c 	ldr.w	r1, [r0, #780]	; 0x30c
 801be26:	f000 fa83 	bl	801c330 <run_xrce_session>
 801be2a:	b970      	cbnz	r0, 801be4a <rmw_create_publisher+0x1c2>
 801be2c:	4621      	mov	r1, r4
 801be2e:	4809      	ldr	r0, [pc, #36]	; (801be54 <rmw_create_publisher+0x1cc>)
 801be30:	f005 fa00 	bl	8021234 <put_memory>
 801be34:	4640      	mov	r0, r8
 801be36:	f04f 0800 	mov.w	r8, #0
 801be3a:	f000 f9c5 	bl	801c1c8 <rmw_uxrce_fini_publisher_memory>
 801be3e:	4640      	mov	r0, r8
 801be40:	b007      	add	sp, #28
 801be42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be46:	f04f 0800 	mov.w	r8, #0
 801be4a:	4640      	mov	r0, r8
 801be4c:	b007      	add	sp, #28
 801be4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be52:	bf00      	nop
 801be54:	2000ff90 	.word	0x2000ff90
 801be58:	0802944c 	.word	0x0802944c
 801be5c:	08029418 	.word	0x08029418

0801be60 <rmw_publisher_get_actual_qos>:
 801be60:	2000      	movs	r0, #0
 801be62:	4770      	bx	lr

0801be64 <rmw_destroy_publisher>:
 801be64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be66:	b128      	cbz	r0, 801be74 <rmw_destroy_publisher+0x10>
 801be68:	4604      	mov	r4, r0
 801be6a:	6800      	ldr	r0, [r0, #0]
 801be6c:	460d      	mov	r5, r1
 801be6e:	f000 fae5 	bl	801c43c <is_uxrce_rmw_identifier_valid>
 801be72:	b910      	cbnz	r0, 801be7a <rmw_destroy_publisher+0x16>
 801be74:	2401      	movs	r4, #1
 801be76:	4620      	mov	r0, r4
 801be78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801be7a:	6863      	ldr	r3, [r4, #4]
 801be7c:	2b00      	cmp	r3, #0
 801be7e:	d0f9      	beq.n	801be74 <rmw_destroy_publisher+0x10>
 801be80:	fab5 f485 	clz	r4, r5
 801be84:	0964      	lsrs	r4, r4, #5
 801be86:	2d00      	cmp	r5, #0
 801be88:	d0f4      	beq.n	801be74 <rmw_destroy_publisher+0x10>
 801be8a:	6828      	ldr	r0, [r5, #0]
 801be8c:	f000 fad6 	bl	801c43c <is_uxrce_rmw_identifier_valid>
 801be90:	2800      	cmp	r0, #0
 801be92:	d0ef      	beq.n	801be74 <rmw_destroy_publisher+0x10>
 801be94:	686e      	ldr	r6, [r5, #4]
 801be96:	2e00      	cmp	r6, #0
 801be98:	d0ec      	beq.n	801be74 <rmw_destroy_publisher+0x10>
 801be9a:	6a70      	ldr	r0, [r6, #36]	; 0x24
 801be9c:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 801bea0:	f005 fc80 	bl	80217a4 <destroy_topic>
 801bea4:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 801bea8:	6972      	ldr	r2, [r6, #20]
 801beaa:	6918      	ldr	r0, [r3, #16]
 801beac:	f8d0 3310 	ldr.w	r3, [r0, #784]	; 0x310
 801beb0:	f500 700a 	add.w	r0, r0, #552	; 0x228
 801beb4:	6819      	ldr	r1, [r3, #0]
 801beb6:	f001 fb83 	bl	801d5c0 <uxr_buffer_delete_entity>
 801beba:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 801bebe:	6932      	ldr	r2, [r6, #16]
 801bec0:	4606      	mov	r6, r0
 801bec2:	6918      	ldr	r0, [r3, #16]
 801bec4:	f8d0 3310 	ldr.w	r3, [r0, #784]	; 0x310
 801bec8:	f500 700a 	add.w	r0, r0, #552	; 0x228
 801becc:	6819      	ldr	r1, [r3, #0]
 801bece:	f001 fb77 	bl	801d5c0 <uxr_buffer_delete_entity>
 801bed2:	6939      	ldr	r1, [r7, #16]
 801bed4:	4632      	mov	r2, r6
 801bed6:	4606      	mov	r6, r0
 801bed8:	f8d1 3318 	ldr.w	r3, [r1, #792]	; 0x318
 801bedc:	4608      	mov	r0, r1
 801bede:	f8d1 1310 	ldr.w	r1, [r1, #784]	; 0x310
 801bee2:	f000 fa25 	bl	801c330 <run_xrce_session>
 801bee6:	6939      	ldr	r1, [r7, #16]
 801bee8:	4632      	mov	r2, r6
 801beea:	4606      	mov	r6, r0
 801beec:	f8d1 3318 	ldr.w	r3, [r1, #792]	; 0x318
 801bef0:	4608      	mov	r0, r1
 801bef2:	f8d1 1310 	ldr.w	r1, [r1, #784]	; 0x310
 801bef6:	f000 fa1b 	bl	801c330 <run_xrce_session>
 801befa:	b126      	cbz	r6, 801bf06 <rmw_destroy_publisher+0xa2>
 801befc:	b118      	cbz	r0, 801bf06 <rmw_destroy_publisher+0xa2>
 801befe:	4628      	mov	r0, r5
 801bf00:	f000 f962 	bl	801c1c8 <rmw_uxrce_fini_publisher_memory>
 801bf04:	e7b7      	b.n	801be76 <rmw_destroy_publisher+0x12>
 801bf06:	2402      	movs	r4, #2
 801bf08:	e7f9      	b.n	801befe <rmw_destroy_publisher+0x9a>
 801bf0a:	bf00      	nop

0801bf0c <rmw_uxrce_init_service_memory>:
 801bf0c:	b1c2      	cbz	r2, 801bf40 <rmw_uxrce_init_service_memory+0x34>
 801bf0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf10:	7b03      	ldrb	r3, [r0, #12]
 801bf12:	4605      	mov	r5, r0
 801bf14:	b99b      	cbnz	r3, 801bf3e <rmw_uxrce_init_service_memory+0x32>
 801bf16:	460c      	mov	r4, r1
 801bf18:	21c8      	movs	r1, #200	; 0xc8
 801bf1a:	461f      	mov	r7, r3
 801bf1c:	6003      	str	r3, [r0, #0]
 801bf1e:	fb01 4602 	mla	r6, r1, r2, r4
 801bf22:	f240 1201 	movw	r2, #257	; 0x101
 801bf26:	e9c0 3101 	strd	r3, r1, [r0, #4]
 801bf2a:	8182      	strh	r2, [r0, #12]
 801bf2c:	4621      	mov	r1, r4
 801bf2e:	4628      	mov	r0, r5
 801bf30:	f005 f980 	bl	8021234 <put_memory>
 801bf34:	7327      	strb	r7, [r4, #12]
 801bf36:	60a4      	str	r4, [r4, #8]
 801bf38:	34c8      	adds	r4, #200	; 0xc8
 801bf3a:	42a6      	cmp	r6, r4
 801bf3c:	d1f6      	bne.n	801bf2c <rmw_uxrce_init_service_memory+0x20>
 801bf3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bf40:	4770      	bx	lr
 801bf42:	bf00      	nop

0801bf44 <rmw_uxrce_init_client_memory>:
 801bf44:	b1c2      	cbz	r2, 801bf78 <rmw_uxrce_init_client_memory+0x34>
 801bf46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf48:	7b03      	ldrb	r3, [r0, #12]
 801bf4a:	4605      	mov	r5, r0
 801bf4c:	b99b      	cbnz	r3, 801bf76 <rmw_uxrce_init_client_memory+0x32>
 801bf4e:	460c      	mov	r4, r1
 801bf50:	21c8      	movs	r1, #200	; 0xc8
 801bf52:	461f      	mov	r7, r3
 801bf54:	6003      	str	r3, [r0, #0]
 801bf56:	fb01 4602 	mla	r6, r1, r2, r4
 801bf5a:	f240 1201 	movw	r2, #257	; 0x101
 801bf5e:	e9c0 3101 	strd	r3, r1, [r0, #4]
 801bf62:	8182      	strh	r2, [r0, #12]
 801bf64:	4621      	mov	r1, r4
 801bf66:	4628      	mov	r0, r5
 801bf68:	f005 f964 	bl	8021234 <put_memory>
 801bf6c:	7327      	strb	r7, [r4, #12]
 801bf6e:	60a4      	str	r4, [r4, #8]
 801bf70:	34c8      	adds	r4, #200	; 0xc8
 801bf72:	42a6      	cmp	r6, r4
 801bf74:	d1f6      	bne.n	801bf64 <rmw_uxrce_init_client_memory+0x20>
 801bf76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bf78:	4770      	bx	lr
 801bf7a:	bf00      	nop

0801bf7c <rmw_uxrce_init_publisher_memory>:
 801bf7c:	b1c2      	cbz	r2, 801bfb0 <rmw_uxrce_init_publisher_memory+0x34>
 801bf7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf80:	7b03      	ldrb	r3, [r0, #12]
 801bf82:	4605      	mov	r5, r0
 801bf84:	b99b      	cbnz	r3, 801bfae <rmw_uxrce_init_publisher_memory+0x32>
 801bf86:	460c      	mov	r4, r1
 801bf88:	21d8      	movs	r1, #216	; 0xd8
 801bf8a:	461f      	mov	r7, r3
 801bf8c:	6003      	str	r3, [r0, #0]
 801bf8e:	fb01 4602 	mla	r6, r1, r2, r4
 801bf92:	f240 1201 	movw	r2, #257	; 0x101
 801bf96:	e9c0 3101 	strd	r3, r1, [r0, #4]
 801bf9a:	8182      	strh	r2, [r0, #12]
 801bf9c:	4621      	mov	r1, r4
 801bf9e:	4628      	mov	r0, r5
 801bfa0:	f005 f948 	bl	8021234 <put_memory>
 801bfa4:	7327      	strb	r7, [r4, #12]
 801bfa6:	60a4      	str	r4, [r4, #8]
 801bfa8:	34d8      	adds	r4, #216	; 0xd8
 801bfaa:	42a6      	cmp	r6, r4
 801bfac:	d1f6      	bne.n	801bf9c <rmw_uxrce_init_publisher_memory+0x20>
 801bfae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bfb0:	4770      	bx	lr
 801bfb2:	bf00      	nop

0801bfb4 <rmw_uxrce_init_subscription_memory>:
 801bfb4:	b1c2      	cbz	r2, 801bfe8 <rmw_uxrce_init_subscription_memory+0x34>
 801bfb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bfb8:	7b03      	ldrb	r3, [r0, #12]
 801bfba:	4605      	mov	r5, r0
 801bfbc:	b99b      	cbnz	r3, 801bfe6 <rmw_uxrce_init_subscription_memory+0x32>
 801bfbe:	460c      	mov	r4, r1
 801bfc0:	21d0      	movs	r1, #208	; 0xd0
 801bfc2:	461f      	mov	r7, r3
 801bfc4:	6003      	str	r3, [r0, #0]
 801bfc6:	fb01 4602 	mla	r6, r1, r2, r4
 801bfca:	f240 1201 	movw	r2, #257	; 0x101
 801bfce:	e9c0 3101 	strd	r3, r1, [r0, #4]
 801bfd2:	8182      	strh	r2, [r0, #12]
 801bfd4:	4621      	mov	r1, r4
 801bfd6:	4628      	mov	r0, r5
 801bfd8:	f005 f92c 	bl	8021234 <put_memory>
 801bfdc:	7327      	strb	r7, [r4, #12]
 801bfde:	60a4      	str	r4, [r4, #8]
 801bfe0:	34d0      	adds	r4, #208	; 0xd0
 801bfe2:	42a6      	cmp	r6, r4
 801bfe4:	d1f6      	bne.n	801bfd4 <rmw_uxrce_init_subscription_memory+0x20>
 801bfe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bfe8:	4770      	bx	lr
 801bfea:	bf00      	nop

0801bfec <rmw_uxrce_init_node_memory>:
 801bfec:	b1c2      	cbz	r2, 801c020 <rmw_uxrce_init_node_memory+0x34>
 801bfee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bff0:	7b03      	ldrb	r3, [r0, #12]
 801bff2:	4605      	mov	r5, r0
 801bff4:	b99b      	cbnz	r3, 801c01e <rmw_uxrce_init_node_memory+0x32>
 801bff6:	460c      	mov	r4, r1
 801bff8:	21a4      	movs	r1, #164	; 0xa4
 801bffa:	461f      	mov	r7, r3
 801bffc:	6003      	str	r3, [r0, #0]
 801bffe:	fb01 4602 	mla	r6, r1, r2, r4
 801c002:	f240 1201 	movw	r2, #257	; 0x101
 801c006:	e9c0 3101 	strd	r3, r1, [r0, #4]
 801c00a:	8182      	strh	r2, [r0, #12]
 801c00c:	4621      	mov	r1, r4
 801c00e:	4628      	mov	r0, r5
 801c010:	f005 f910 	bl	8021234 <put_memory>
 801c014:	7327      	strb	r7, [r4, #12]
 801c016:	60a4      	str	r4, [r4, #8]
 801c018:	34a4      	adds	r4, #164	; 0xa4
 801c01a:	42a6      	cmp	r6, r4
 801c01c:	d1f6      	bne.n	801c00c <rmw_uxrce_init_node_memory+0x20>
 801c01e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c020:	4770      	bx	lr
 801c022:	bf00      	nop

0801c024 <rmw_uxrce_init_session_memory>:
 801c024:	b1ea      	cbz	r2, 801c062 <rmw_uxrce_init_session_memory+0x3e>
 801c026:	7b03      	ldrb	r3, [r0, #12]
 801c028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c02c:	4605      	mov	r5, r0
 801c02e:	b9b3      	cbnz	r3, 801c05e <rmw_uxrce_init_session_memory+0x3a>
 801c030:	460c      	mov	r4, r1
 801c032:	f241 5130 	movw	r1, #5424	; 0x1530
 801c036:	f240 1001 	movw	r0, #257	; 0x101
 801c03a:	4698      	mov	r8, r3
 801c03c:	fb01 4602 	mla	r6, r1, r2, r4
 801c040:	460f      	mov	r7, r1
 801c042:	60a9      	str	r1, [r5, #8]
 801c044:	81a8      	strh	r0, [r5, #12]
 801c046:	e9c5 3300 	strd	r3, r3, [r5]
 801c04a:	4621      	mov	r1, r4
 801c04c:	4628      	mov	r0, r5
 801c04e:	f005 f8f1 	bl	8021234 <put_memory>
 801c052:	60a4      	str	r4, [r4, #8]
 801c054:	f884 800c 	strb.w	r8, [r4, #12]
 801c058:	443c      	add	r4, r7
 801c05a:	42a6      	cmp	r6, r4
 801c05c:	d1f5      	bne.n	801c04a <rmw_uxrce_init_session_memory+0x26>
 801c05e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c062:	4770      	bx	lr

0801c064 <rmw_uxrce_init_topic_memory>:
 801c064:	b1d2      	cbz	r2, 801c09c <rmw_uxrce_init_topic_memory+0x38>
 801c066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c068:	7b03      	ldrb	r3, [r0, #12]
 801c06a:	4606      	mov	r6, r0
 801c06c:	b9ab      	cbnz	r3, 801c09a <rmw_uxrce_init_topic_memory+0x36>
 801c06e:	460c      	mov	r4, r1
 801c070:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801c074:	211c      	movs	r1, #28
 801c076:	461f      	mov	r7, r3
 801c078:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801c07c:	f240 1201 	movw	r2, #257	; 0x101
 801c080:	6081      	str	r1, [r0, #8]
 801c082:	8182      	strh	r2, [r0, #12]
 801c084:	e9c0 3300 	strd	r3, r3, [r0]
 801c088:	4621      	mov	r1, r4
 801c08a:	4630      	mov	r0, r6
 801c08c:	f005 f8d2 	bl	8021234 <put_memory>
 801c090:	7327      	strb	r7, [r4, #12]
 801c092:	60a4      	str	r4, [r4, #8]
 801c094:	341c      	adds	r4, #28
 801c096:	42a5      	cmp	r5, r4
 801c098:	d1f6      	bne.n	801c088 <rmw_uxrce_init_topic_memory+0x24>
 801c09a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c09c:	4770      	bx	lr
 801c09e:	bf00      	nop

0801c0a0 <rmw_uxrce_init_static_input_buffer_memory>:
 801c0a0:	b1e2      	cbz	r2, 801c0dc <rmw_uxrce_init_static_input_buffer_memory+0x3c>
 801c0a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c0a4:	7b03      	ldrb	r3, [r0, #12]
 801c0a6:	4606      	mov	r6, r0
 801c0a8:	b9bb      	cbnz	r3, 801c0da <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 801c0aa:	460c      	mov	r4, r1
 801c0ac:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 801c0b0:	f44f 6104 	mov.w	r1, #2112	; 0x840
 801c0b4:	461f      	mov	r7, r3
 801c0b6:	eb04 1582 	add.w	r5, r4, r2, lsl #6
 801c0ba:	f240 1201 	movw	r2, #257	; 0x101
 801c0be:	6081      	str	r1, [r0, #8]
 801c0c0:	8182      	strh	r2, [r0, #12]
 801c0c2:	e9c0 3300 	strd	r3, r3, [r0]
 801c0c6:	4621      	mov	r1, r4
 801c0c8:	4630      	mov	r0, r6
 801c0ca:	f005 f8b3 	bl	8021234 <put_memory>
 801c0ce:	60a4      	str	r4, [r4, #8]
 801c0d0:	7327      	strb	r7, [r4, #12]
 801c0d2:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 801c0d6:	42a5      	cmp	r5, r4
 801c0d8:	d1f5      	bne.n	801c0c6 <rmw_uxrce_init_static_input_buffer_memory+0x26>
 801c0da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c0dc:	4770      	bx	lr
 801c0de:	bf00      	nop

0801c0e0 <rmw_uxrce_init_init_options_impl_memory>:
 801c0e0:	b1c2      	cbz	r2, 801c114 <rmw_uxrce_init_init_options_impl_memory+0x34>
 801c0e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c0e4:	7b03      	ldrb	r3, [r0, #12]
 801c0e6:	4605      	mov	r5, r0
 801c0e8:	b99b      	cbnz	r3, 801c112 <rmw_uxrce_init_init_options_impl_memory+0x32>
 801c0ea:	460c      	mov	r4, r1
 801c0ec:	212c      	movs	r1, #44	; 0x2c
 801c0ee:	461f      	mov	r7, r3
 801c0f0:	6003      	str	r3, [r0, #0]
 801c0f2:	fb01 4602 	mla	r6, r1, r2, r4
 801c0f6:	f240 1201 	movw	r2, #257	; 0x101
 801c0fa:	e9c0 3101 	strd	r3, r1, [r0, #4]
 801c0fe:	8182      	strh	r2, [r0, #12]
 801c100:	4621      	mov	r1, r4
 801c102:	4628      	mov	r0, r5
 801c104:	f005 f896 	bl	8021234 <put_memory>
 801c108:	7327      	strb	r7, [r4, #12]
 801c10a:	60a4      	str	r4, [r4, #8]
 801c10c:	342c      	adds	r4, #44	; 0x2c
 801c10e:	42a6      	cmp	r6, r4
 801c110:	d1f6      	bne.n	801c100 <rmw_uxrce_init_init_options_impl_memory+0x20>
 801c112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c114:	4770      	bx	lr
 801c116:	bf00      	nop

0801c118 <rmw_uxrce_init_wait_set_memory>:
 801c118:	b1d2      	cbz	r2, 801c150 <rmw_uxrce_init_wait_set_memory+0x38>
 801c11a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c11c:	7b03      	ldrb	r3, [r0, #12]
 801c11e:	4606      	mov	r6, r0
 801c120:	b9ab      	cbnz	r3, 801c14e <rmw_uxrce_init_wait_set_memory+0x36>
 801c122:	460c      	mov	r4, r1
 801c124:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801c128:	211c      	movs	r1, #28
 801c12a:	461f      	mov	r7, r3
 801c12c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801c130:	f240 1201 	movw	r2, #257	; 0x101
 801c134:	6081      	str	r1, [r0, #8]
 801c136:	8182      	strh	r2, [r0, #12]
 801c138:	e9c0 3300 	strd	r3, r3, [r0]
 801c13c:	4621      	mov	r1, r4
 801c13e:	4630      	mov	r0, r6
 801c140:	f005 f878 	bl	8021234 <put_memory>
 801c144:	7327      	strb	r7, [r4, #12]
 801c146:	60a4      	str	r4, [r4, #8]
 801c148:	341c      	adds	r4, #28
 801c14a:	42a5      	cmp	r5, r4
 801c14c:	d1f6      	bne.n	801c13c <rmw_uxrce_init_wait_set_memory+0x24>
 801c14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c150:	4770      	bx	lr
 801c152:	bf00      	nop

0801c154 <rmw_uxrce_init_guard_condition_memory>:
 801c154:	b1c2      	cbz	r2, 801c188 <rmw_uxrce_init_guard_condition_memory+0x34>
 801c156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c158:	7b03      	ldrb	r3, [r0, #12]
 801c15a:	4605      	mov	r5, r0
 801c15c:	b99b      	cbnz	r3, 801c186 <rmw_uxrce_init_guard_condition_memory+0x32>
 801c15e:	460c      	mov	r4, r1
 801c160:	461f      	mov	r7, r3
 801c162:	2120      	movs	r1, #32
 801c164:	6003      	str	r3, [r0, #0]
 801c166:	6043      	str	r3, [r0, #4]
 801c168:	eb04 1642 	add.w	r6, r4, r2, lsl #5
 801c16c:	f240 1301 	movw	r3, #257	; 0x101
 801c170:	6081      	str	r1, [r0, #8]
 801c172:	8183      	strh	r3, [r0, #12]
 801c174:	4621      	mov	r1, r4
 801c176:	4628      	mov	r0, r5
 801c178:	f005 f85c 	bl	8021234 <put_memory>
 801c17c:	7327      	strb	r7, [r4, #12]
 801c17e:	60a4      	str	r4, [r4, #8]
 801c180:	3420      	adds	r4, #32
 801c182:	42a6      	cmp	r6, r4
 801c184:	d1f6      	bne.n	801c174 <rmw_uxrce_init_guard_condition_memory+0x20>
 801c186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c188:	4770      	bx	lr
 801c18a:	bf00      	nop

0801c18c <rmw_uxrce_fini_session_memory>:
 801c18c:	4601      	mov	r1, r0
 801c18e:	4801      	ldr	r0, [pc, #4]	; (801c194 <rmw_uxrce_fini_session_memory+0x8>)
 801c190:	f005 b850 	b.w	8021234 <put_memory>
 801c194:	20013128 	.word	0x20013128

0801c198 <rmw_uxrce_fini_node_memory>:
 801c198:	b538      	push	{r3, r4, r5, lr}
 801c19a:	4604      	mov	r4, r0
 801c19c:	6800      	ldr	r0, [r0, #0]
 801c19e:	b128      	cbz	r0, 801c1ac <rmw_uxrce_fini_node_memory+0x14>
 801c1a0:	4b07      	ldr	r3, [pc, #28]	; (801c1c0 <rmw_uxrce_fini_node_memory+0x28>)
 801c1a2:	6819      	ldr	r1, [r3, #0]
 801c1a4:	f7e4 f834 	bl	8000210 <strcmp>
 801c1a8:	b940      	cbnz	r0, 801c1bc <rmw_uxrce_fini_node_memory+0x24>
 801c1aa:	6020      	str	r0, [r4, #0]
 801c1ac:	6861      	ldr	r1, [r4, #4]
 801c1ae:	b129      	cbz	r1, 801c1bc <rmw_uxrce_fini_node_memory+0x24>
 801c1b0:	2500      	movs	r5, #0
 801c1b2:	4804      	ldr	r0, [pc, #16]	; (801c1c4 <rmw_uxrce_fini_node_memory+0x2c>)
 801c1b4:	610d      	str	r5, [r1, #16]
 801c1b6:	f005 f83d 	bl	8021234 <put_memory>
 801c1ba:	6065      	str	r5, [r4, #4]
 801c1bc:	bd38      	pop	{r3, r4, r5, pc}
 801c1be:	bf00      	nop
 801c1c0:	08029a2c 	.word	0x08029a2c
 801c1c4:	20012f54 	.word	0x20012f54

0801c1c8 <rmw_uxrce_fini_publisher_memory>:
 801c1c8:	b510      	push	{r4, lr}
 801c1ca:	4604      	mov	r4, r0
 801c1cc:	6800      	ldr	r0, [r0, #0]
 801c1ce:	b128      	cbz	r0, 801c1dc <rmw_uxrce_fini_publisher_memory+0x14>
 801c1d0:	4b06      	ldr	r3, [pc, #24]	; (801c1ec <rmw_uxrce_fini_publisher_memory+0x24>)
 801c1d2:	6819      	ldr	r1, [r3, #0]
 801c1d4:	f7e4 f81c 	bl	8000210 <strcmp>
 801c1d8:	b938      	cbnz	r0, 801c1ea <rmw_uxrce_fini_publisher_memory+0x22>
 801c1da:	6020      	str	r0, [r4, #0]
 801c1dc:	6861      	ldr	r1, [r4, #4]
 801c1de:	b121      	cbz	r1, 801c1ea <rmw_uxrce_fini_publisher_memory+0x22>
 801c1e0:	4803      	ldr	r0, [pc, #12]	; (801c1f0 <rmw_uxrce_fini_publisher_memory+0x28>)
 801c1e2:	f005 f827 	bl	8021234 <put_memory>
 801c1e6:	2300      	movs	r3, #0
 801c1e8:	6063      	str	r3, [r4, #4]
 801c1ea:	bd10      	pop	{r4, pc}
 801c1ec:	08029a2c 	.word	0x08029a2c
 801c1f0:	2000ff90 	.word	0x2000ff90

0801c1f4 <rmw_uxrce_fini_subscription_memory>:
 801c1f4:	b510      	push	{r4, lr}
 801c1f6:	4604      	mov	r4, r0
 801c1f8:	6800      	ldr	r0, [r0, #0]
 801c1fa:	b128      	cbz	r0, 801c208 <rmw_uxrce_fini_subscription_memory+0x14>
 801c1fc:	4b06      	ldr	r3, [pc, #24]	; (801c218 <rmw_uxrce_fini_subscription_memory+0x24>)
 801c1fe:	6819      	ldr	r1, [r3, #0]
 801c200:	f7e4 f806 	bl	8000210 <strcmp>
 801c204:	b938      	cbnz	r0, 801c216 <rmw_uxrce_fini_subscription_memory+0x22>
 801c206:	6020      	str	r0, [r4, #0]
 801c208:	6861      	ldr	r1, [r4, #4]
 801c20a:	b121      	cbz	r1, 801c216 <rmw_uxrce_fini_subscription_memory+0x22>
 801c20c:	4803      	ldr	r0, [pc, #12]	; (801c21c <rmw_uxrce_fini_subscription_memory+0x28>)
 801c20e:	f005 f811 	bl	8021234 <put_memory>
 801c212:	2300      	movs	r3, #0
 801c214:	6063      	str	r3, [r4, #4]
 801c216:	bd10      	pop	{r4, pc}
 801c218:	08029a2c 	.word	0x08029a2c
 801c21c:	200131ec 	.word	0x200131ec

0801c220 <rmw_uxrce_fini_service_memory>:
 801c220:	b510      	push	{r4, lr}
 801c222:	4604      	mov	r4, r0
 801c224:	6800      	ldr	r0, [r0, #0]
 801c226:	b128      	cbz	r0, 801c234 <rmw_uxrce_fini_service_memory+0x14>
 801c228:	4b06      	ldr	r3, [pc, #24]	; (801c244 <rmw_uxrce_fini_service_memory+0x24>)
 801c22a:	6819      	ldr	r1, [r3, #0]
 801c22c:	f7e3 fff0 	bl	8000210 <strcmp>
 801c230:	b938      	cbnz	r0, 801c242 <rmw_uxrce_fini_service_memory+0x22>
 801c232:	6020      	str	r0, [r4, #0]
 801c234:	6861      	ldr	r1, [r4, #4]
 801c236:	b121      	cbz	r1, 801c242 <rmw_uxrce_fini_service_memory+0x22>
 801c238:	4803      	ldr	r0, [pc, #12]	; (801c248 <rmw_uxrce_fini_service_memory+0x28>)
 801c23a:	f004 fffb 	bl	8021234 <put_memory>
 801c23e:	2300      	movs	r3, #0
 801c240:	6063      	str	r3, [r4, #4]
 801c242:	bd10      	pop	{r4, pc}
 801c244:	08029a2c 	.word	0x08029a2c
 801c248:	200131dc 	.word	0x200131dc

0801c24c <rmw_uxrce_fini_client_memory>:
 801c24c:	b510      	push	{r4, lr}
 801c24e:	4604      	mov	r4, r0
 801c250:	6800      	ldr	r0, [r0, #0]
 801c252:	b128      	cbz	r0, 801c260 <rmw_uxrce_fini_client_memory+0x14>
 801c254:	4b06      	ldr	r3, [pc, #24]	; (801c270 <rmw_uxrce_fini_client_memory+0x24>)
 801c256:	6819      	ldr	r1, [r3, #0]
 801c258:	f7e3 ffda 	bl	8000210 <strcmp>
 801c25c:	b938      	cbnz	r0, 801c26e <rmw_uxrce_fini_client_memory+0x22>
 801c25e:	6020      	str	r0, [r4, #0]
 801c260:	6861      	ldr	r1, [r4, #4]
 801c262:	b121      	cbz	r1, 801c26e <rmw_uxrce_fini_client_memory+0x22>
 801c264:	4803      	ldr	r0, [pc, #12]	; (801c274 <rmw_uxrce_fini_client_memory+0x28>)
 801c266:	f004 ffe5 	bl	8021234 <put_memory>
 801c26a:	2300      	movs	r3, #0
 801c26c:	6063      	str	r3, [r4, #4]
 801c26e:	bd10      	pop	{r4, pc}
 801c270:	08029a2c 	.word	0x08029a2c
 801c274:	20010810 	.word	0x20010810

0801c278 <rmw_uxrce_fini_topic_memory>:
 801c278:	b510      	push	{r4, lr}
 801c27a:	4604      	mov	r4, r0
 801c27c:	4803      	ldr	r0, [pc, #12]	; (801c28c <rmw_uxrce_fini_topic_memory+0x14>)
 801c27e:	4621      	mov	r1, r4
 801c280:	f004 ffd8 	bl	8021234 <put_memory>
 801c284:	2300      	movs	r3, #0
 801c286:	61a3      	str	r3, [r4, #24]
 801c288:	bd10      	pop	{r4, pc}
 801c28a:	bf00      	nop
 801c28c:	20013118 	.word	0x20013118

0801c290 <rmw_uxrce_get_static_input_buffer_for_entity>:
 801c290:	b082      	sub	sp, #8
 801c292:	4926      	ldr	r1, [pc, #152]	; (801c32c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 801c294:	b4f0      	push	{r4, r5, r6, r7}
 801c296:	6809      	ldr	r1, [r1, #0]
 801c298:	ac04      	add	r4, sp, #16
 801c29a:	e884 000c 	stmia.w	r4, {r2, r3}
 801c29e:	9d05      	ldr	r5, [sp, #20]
 801c2a0:	2900      	cmp	r1, #0
 801c2a2:	d041      	beq.n	801c328 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 801c2a4:	460b      	mov	r3, r1
 801c2a6:	2400      	movs	r4, #0
 801c2a8:	689a      	ldr	r2, [r3, #8]
 801c2aa:	685b      	ldr	r3, [r3, #4]
 801c2ac:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 801c2b0:	4290      	cmp	r0, r2
 801c2b2:	bf08      	it	eq
 801c2b4:	3401      	addeq	r4, #1
 801c2b6:	2b00      	cmp	r3, #0
 801c2b8:	d1f6      	bne.n	801c2a8 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 801c2ba:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801c2be:	2b02      	cmp	r3, #2
 801c2c0:	d026      	beq.n	801c310 <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
 801c2c2:	d81e      	bhi.n	801c302 <rmw_uxrce_get_static_input_buffer_for_entity+0x72>
 801c2c4:	42a5      	cmp	r5, r4
 801c2c6:	d82a      	bhi.n	801c31e <rmw_uxrce_get_static_input_buffer_for_entity+0x8e>
 801c2c8:	fab5 f385 	clz	r3, r5
 801c2cc:	095b      	lsrs	r3, r3, #5
 801c2ce:	b335      	cbz	r5, 801c31e <rmw_uxrce_get_static_input_buffer_for_entity+0x8e>
 801c2d0:	b1c9      	cbz	r1, 801c306 <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 801c2d2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801c2d6:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 801c2da:	e001      	b.n	801c2e0 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 801c2dc:	6849      	ldr	r1, [r1, #4]
 801c2de:	b199      	cbz	r1, 801c308 <rmw_uxrce_get_static_input_buffer_for_entity+0x78>
 801c2e0:	688a      	ldr	r2, [r1, #8]
 801c2e2:	f8d2 6814 	ldr.w	r6, [r2, #2068]	; 0x814
 801c2e6:	42b0      	cmp	r0, r6
 801c2e8:	d1f8      	bne.n	801c2dc <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 801c2ea:	f602 0218 	addw	r2, r2, #2072	; 0x818
 801c2ee:	e9d2 6700 	ldrd	r6, r7, [r2]
 801c2f2:	42a6      	cmp	r6, r4
 801c2f4:	eb77 0205 	sbcs.w	r2, r7, r5
 801c2f8:	daf0      	bge.n	801c2dc <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 801c2fa:	4634      	mov	r4, r6
 801c2fc:	463d      	mov	r5, r7
 801c2fe:	460b      	mov	r3, r1
 801c300:	e7ec      	b.n	801c2dc <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 801c302:	2b03      	cmp	r3, #3
 801c304:	d0de      	beq.n	801c2c4 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 801c306:	2300      	movs	r3, #0
 801c308:	4618      	mov	r0, r3
 801c30a:	bcf0      	pop	{r4, r5, r6, r7}
 801c30c:	b002      	add	sp, #8
 801c30e:	4770      	bx	lr
 801c310:	42a5      	cmp	r5, r4
 801c312:	d804      	bhi.n	801c31e <rmw_uxrce_get_static_input_buffer_for_entity+0x8e>
 801c314:	fab5 f385 	clz	r3, r5
 801c318:	095b      	lsrs	r3, r3, #5
 801c31a:	2d00      	cmp	r5, #0
 801c31c:	d1f4      	bne.n	801c308 <rmw_uxrce_get_static_input_buffer_for_entity+0x78>
 801c31e:	4803      	ldr	r0, [pc, #12]	; (801c32c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 801c320:	bcf0      	pop	{r4, r5, r6, r7}
 801c322:	b002      	add	sp, #8
 801c324:	f004 bf76 	b.w	8021214 <get_memory>
 801c328:	460c      	mov	r4, r1
 801c32a:	e7c6      	b.n	801c2ba <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 801c32c:	2000ff80 	.word	0x2000ff80

0801c330 <run_xrce_session>:
 801c330:	b510      	push	{r4, lr}
 801c332:	788c      	ldrb	r4, [r1, #2]
 801c334:	b086      	sub	sp, #24
 801c336:	2c01      	cmp	r4, #1
 801c338:	f8ad 200e 	strh.w	r2, [sp, #14]
 801c33c:	d00c      	beq.n	801c358 <run_xrce_session+0x28>
 801c33e:	2201      	movs	r2, #1
 801c340:	4619      	mov	r1, r3
 801c342:	f10d 0317 	add.w	r3, sp, #23
 801c346:	f500 700a 	add.w	r0, r0, #552	; 0x228
 801c34a:	9200      	str	r2, [sp, #0]
 801c34c:	f10d 020e 	add.w	r2, sp, #14
 801c350:	f002 f80a 	bl	801e368 <uxr_run_session_until_all_status>
 801c354:	b006      	add	sp, #24
 801c356:	bd10      	pop	{r4, pc}
 801c358:	f500 700a 	add.w	r0, r0, #552	; 0x228
 801c35c:	f001 ff6c 	bl	801e238 <uxr_flash_output_streams>
 801c360:	4620      	mov	r0, r4
 801c362:	b006      	add	sp, #24
 801c364:	bd10      	pop	{r4, pc}
 801c366:	bf00      	nop

0801c368 <convert_qos_profile>:
 801c368:	b470      	push	{r4, r5, r6}
 801c36a:	7a0d      	ldrb	r5, [r1, #8]
 801c36c:	780c      	ldrb	r4, [r1, #0]
 801c36e:	7a4a      	ldrb	r2, [r1, #9]
 801c370:	f1a5 0502 	sub.w	r5, r5, #2
 801c374:	888e      	ldrh	r6, [r1, #4]
 801c376:	f1a4 0102 	sub.w	r1, r4, #2
 801c37a:	2a02      	cmp	r2, #2
 801c37c:	fab5 f585 	clz	r5, r5
 801c380:	fab1 f181 	clz	r1, r1
 801c384:	8086      	strh	r6, [r0, #4]
 801c386:	ea4f 1555 	mov.w	r5, r5, lsr #5
 801c38a:	bf18      	it	ne
 801c38c:	2200      	movne	r2, #0
 801c38e:	0949      	lsrs	r1, r1, #5
 801c390:	7045      	strb	r5, [r0, #1]
 801c392:	7002      	strb	r2, [r0, #0]
 801c394:	7081      	strb	r1, [r0, #2]
 801c396:	bc70      	pop	{r4, r5, r6}
 801c398:	4770      	bx	lr
 801c39a:	bf00      	nop

0801c39c <generate_type_name>:
 801c39c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c39e:	4607      	mov	r7, r0
 801c3a0:	b087      	sub	sp, #28
 801c3a2:	6840      	ldr	r0, [r0, #4]
 801c3a4:	460d      	mov	r5, r1
 801c3a6:	4616      	mov	r6, r2
 801c3a8:	f7e3 ff3c 	bl	8000224 <strlen>
 801c3ac:	683b      	ldr	r3, [r7, #0]
 801c3ae:	4604      	mov	r4, r0
 801c3b0:	b11b      	cbz	r3, 801c3ba <generate_type_name+0x1e>
 801c3b2:	4618      	mov	r0, r3
 801c3b4:	f7e3 ff36 	bl	8000224 <strlen>
 801c3b8:	4603      	mov	r3, r0
 801c3ba:	2200      	movs	r2, #0
 801c3bc:	3408      	adds	r4, #8
 801c3be:	702a      	strb	r2, [r5, #0]
 801c3c0:	441c      	add	r4, r3
 801c3c2:	683b      	ldr	r3, [r7, #0]
 801c3c4:	b1ab      	cbz	r3, 801c3f2 <generate_type_name+0x56>
 801c3c6:	f8df c044 	ldr.w	ip, [pc, #68]	; 801c40c <generate_type_name+0x70>
 801c3ca:	46e6      	mov	lr, ip
 801c3cc:	6878      	ldr	r0, [r7, #4]
 801c3ce:	4631      	mov	r1, r6
 801c3d0:	4a0a      	ldr	r2, [pc, #40]	; (801c3fc <generate_type_name+0x60>)
 801c3d2:	9004      	str	r0, [sp, #16]
 801c3d4:	4628      	mov	r0, r5
 801c3d6:	4d0a      	ldr	r5, [pc, #40]	; (801c400 <generate_type_name+0x64>)
 801c3d8:	9205      	str	r2, [sp, #20]
 801c3da:	f8cd c00c 	str.w	ip, [sp, #12]
 801c3de:	f8cd e000 	str.w	lr, [sp]
 801c3e2:	e9cd 5201 	strd	r5, r2, [sp, #4]
 801c3e6:	4a07      	ldr	r2, [pc, #28]	; (801c404 <generate_type_name+0x68>)
 801c3e8:	f007 fd76 	bl	8023ed8 <sniprintf>
 801c3ec:	4620      	mov	r0, r4
 801c3ee:	b007      	add	sp, #28
 801c3f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c3f2:	4b05      	ldr	r3, [pc, #20]	; (801c408 <generate_type_name+0x6c>)
 801c3f4:	f8df c014 	ldr.w	ip, [pc, #20]	; 801c40c <generate_type_name+0x70>
 801c3f8:	469e      	mov	lr, r3
 801c3fa:	e7e7      	b.n	801c3cc <generate_type_name+0x30>
 801c3fc:	08029450 	.word	0x08029450
 801c400:	08029454 	.word	0x08029454
 801c404:	08029440 	.word	0x08029440
 801c408:	08029804 	.word	0x08029804
 801c40c:	0802943c 	.word	0x0802943c

0801c410 <generate_topic_name>:
 801c410:	b510      	push	{r4, lr}
 801c412:	4614      	mov	r4, r2
 801c414:	b082      	sub	sp, #8
 801c416:	4b07      	ldr	r3, [pc, #28]	; (801c434 <generate_topic_name+0x24>)
 801c418:	9000      	str	r0, [sp, #0]
 801c41a:	4608      	mov	r0, r1
 801c41c:	4a06      	ldr	r2, [pc, #24]	; (801c438 <generate_topic_name+0x28>)
 801c41e:	4621      	mov	r1, r4
 801c420:	f007 fd5a 	bl	8023ed8 <sniprintf>
 801c424:	2800      	cmp	r0, #0
 801c426:	da02      	bge.n	801c42e <generate_topic_name+0x1e>
 801c428:	4284      	cmp	r4, r0
 801c42a:	bfd8      	it	le
 801c42c:	2000      	movle	r0, #0
 801c42e:	b002      	add	sp, #8
 801c430:	bd10      	pop	{r4, pc}
 801c432:	bf00      	nop
 801c434:	08029460 	.word	0x08029460
 801c438:	08029458 	.word	0x08029458

0801c43c <is_uxrce_rmw_identifier_valid>:
 801c43c:	b510      	push	{r4, lr}
 801c43e:	4604      	mov	r4, r0
 801c440:	b140      	cbz	r0, 801c454 <is_uxrce_rmw_identifier_valid+0x18>
 801c442:	f004 ff0b 	bl	802125c <rmw_get_implementation_identifier>
 801c446:	4601      	mov	r1, r0
 801c448:	4620      	mov	r0, r4
 801c44a:	f7e3 fee1 	bl	8000210 <strcmp>
 801c44e:	fab0 f080 	clz	r0, r0
 801c452:	0940      	lsrs	r0, r0, #5
 801c454:	bd10      	pop	{r4, pc}
 801c456:	bf00      	nop

0801c458 <get_message_typesupport_handle>:
 801c458:	6883      	ldr	r3, [r0, #8]
 801c45a:	4718      	bx	r3

0801c45c <get_message_typesupport_handle_function>:
 801c45c:	b510      	push	{r4, lr}
 801c45e:	4604      	mov	r4, r0
 801c460:	6800      	ldr	r0, [r0, #0]
 801c462:	f7e3 fed5 	bl	8000210 <strcmp>
 801c466:	2800      	cmp	r0, #0
 801c468:	bf0c      	ite	eq
 801c46a:	4620      	moveq	r0, r4
 801c46c:	2000      	movne	r0, #0
 801c46e:	bd10      	pop	{r4, pc}

0801c470 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 801c470:	4b04      	ldr	r3, [pc, #16]	; (801c484 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 801c472:	681a      	ldr	r2, [r3, #0]
 801c474:	b10a      	cbz	r2, 801c47a <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 801c476:	4803      	ldr	r0, [pc, #12]	; (801c484 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 801c478:	4770      	bx	lr
 801c47a:	4a03      	ldr	r2, [pc, #12]	; (801c488 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 801c47c:	4801      	ldr	r0, [pc, #4]	; (801c484 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 801c47e:	6812      	ldr	r2, [r2, #0]
 801c480:	601a      	str	r2, [r3, #0]
 801c482:	4770      	bx	lr
 801c484:	2000003c 	.word	0x2000003c
 801c488:	200000b8 	.word	0x200000b8

0801c48c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 801c48c:	4a02      	ldr	r2, [pc, #8]	; (801c498 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 801c48e:	4b03      	ldr	r3, [pc, #12]	; (801c49c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 801c490:	6812      	ldr	r2, [r2, #0]
 801c492:	601a      	str	r2, [r3, #0]
 801c494:	4770      	bx	lr
 801c496:	bf00      	nop
 801c498:	200000b8 	.word	0x200000b8
 801c49c:	2000003c 	.word	0x2000003c

0801c4a0 <Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 801c4a0:	f005 bbac 	b.w	8021bfc <std_msgs__msg__Int32__init>

0801c4a4 <Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 801c4a4:	f005 bbae 	b.w	8021c04 <std_msgs__msg__Int32__fini>

0801c4a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 801c4a8:	4b04      	ldr	r3, [pc, #16]	; (801c4bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 801c4aa:	681a      	ldr	r2, [r3, #0]
 801c4ac:	b10a      	cbz	r2, 801c4b2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 801c4ae:	4803      	ldr	r0, [pc, #12]	; (801c4bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 801c4b0:	4770      	bx	lr
 801c4b2:	4a03      	ldr	r2, [pc, #12]	; (801c4c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 801c4b4:	4801      	ldr	r0, [pc, #4]	; (801c4bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 801c4b6:	6812      	ldr	r2, [r2, #0]
 801c4b8:	601a      	str	r2, [r3, #0]
 801c4ba:	4770      	bx	lr
 801c4bc:	2000007c 	.word	0x2000007c
 801c4c0:	200000bc 	.word	0x200000bc

0801c4c4 <_Int32__max_serialized_size>:
 801c4c4:	2104      	movs	r1, #4
 801c4c6:	2000      	movs	r0, #0
 801c4c8:	b508      	push	{r3, lr}
 801c4ca:	f001 f809 	bl	801d4e0 <ucdr_alignment>
 801c4ce:	3004      	adds	r0, #4
 801c4d0:	bd08      	pop	{r3, pc}
 801c4d2:	bf00      	nop

0801c4d4 <_Int32__cdr_deserialize>:
 801c4d4:	b109      	cbz	r1, 801c4da <_Int32__cdr_deserialize+0x6>
 801c4d6:	f000 bf1d 	b.w	801d314 <ucdr_deserialize_int32_t>
 801c4da:	4608      	mov	r0, r1
 801c4dc:	4770      	bx	lr
 801c4de:	bf00      	nop

0801c4e0 <get_serialized_size_std_msgs__msg__Int32>:
 801c4e0:	b130      	cbz	r0, 801c4f0 <get_serialized_size_std_msgs__msg__Int32+0x10>
 801c4e2:	4608      	mov	r0, r1
 801c4e4:	2104      	movs	r1, #4
 801c4e6:	b508      	push	{r3, lr}
 801c4e8:	f000 fffa 	bl	801d4e0 <ucdr_alignment>
 801c4ec:	3004      	adds	r0, #4
 801c4ee:	bd08      	pop	{r3, pc}
 801c4f0:	4770      	bx	lr
 801c4f2:	bf00      	nop

0801c4f4 <_Int32__cdr_serialize>:
 801c4f4:	460a      	mov	r2, r1
 801c4f6:	b118      	cbz	r0, 801c500 <_Int32__cdr_serialize+0xc>
 801c4f8:	6801      	ldr	r1, [r0, #0]
 801c4fa:	4610      	mov	r0, r2
 801c4fc:	f000 be72 	b.w	801d1e4 <ucdr_serialize_int32_t>
 801c500:	4770      	bx	lr
 801c502:	bf00      	nop

0801c504 <_Int32__get_serialized_size>:
 801c504:	b130      	cbz	r0, 801c514 <_Int32__get_serialized_size+0x10>
 801c506:	2104      	movs	r1, #4
 801c508:	2000      	movs	r0, #0
 801c50a:	b508      	push	{r3, lr}
 801c50c:	f000 ffe8 	bl	801d4e0 <ucdr_alignment>
 801c510:	3004      	adds	r0, #4
 801c512:	bd08      	pop	{r3, pc}
 801c514:	4770      	bx	lr
 801c516:	bf00      	nop

0801c518 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 801c518:	4800      	ldr	r0, [pc, #0]	; (801c51c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 801c51a:	4770      	bx	lr
 801c51c:	20000088 	.word	0x20000088

0801c520 <ucdr_serialize_bool>:
 801c520:	b538      	push	{r3, r4, r5, lr}
 801c522:	460d      	mov	r5, r1
 801c524:	2101      	movs	r1, #1
 801c526:	4604      	mov	r4, r0
 801c528:	f000 ff90 	bl	801d44c <ucdr_check_final_buffer_behavior>
 801c52c:	b148      	cbz	r0, 801c542 <ucdr_serialize_bool+0x22>
 801c52e:	68a3      	ldr	r3, [r4, #8]
 801c530:	2101      	movs	r1, #1
 801c532:	701d      	strb	r5, [r3, #0]
 801c534:	68a2      	ldr	r2, [r4, #8]
 801c536:	6923      	ldr	r3, [r4, #16]
 801c538:	440a      	add	r2, r1
 801c53a:	7561      	strb	r1, [r4, #21]
 801c53c:	440b      	add	r3, r1
 801c53e:	60a2      	str	r2, [r4, #8]
 801c540:	6123      	str	r3, [r4, #16]
 801c542:	7da0      	ldrb	r0, [r4, #22]
 801c544:	f080 0001 	eor.w	r0, r0, #1
 801c548:	bd38      	pop	{r3, r4, r5, pc}
 801c54a:	bf00      	nop

0801c54c <ucdr_deserialize_bool>:
 801c54c:	b538      	push	{r3, r4, r5, lr}
 801c54e:	460d      	mov	r5, r1
 801c550:	2101      	movs	r1, #1
 801c552:	4604      	mov	r4, r0
 801c554:	f000 ff7a 	bl	801d44c <ucdr_check_final_buffer_behavior>
 801c558:	b160      	cbz	r0, 801c574 <ucdr_deserialize_bool+0x28>
 801c55a:	68a2      	ldr	r2, [r4, #8]
 801c55c:	2001      	movs	r0, #1
 801c55e:	6923      	ldr	r3, [r4, #16]
 801c560:	f812 1b01 	ldrb.w	r1, [r2], #1
 801c564:	4403      	add	r3, r0
 801c566:	3900      	subs	r1, #0
 801c568:	bf18      	it	ne
 801c56a:	2101      	movne	r1, #1
 801c56c:	7029      	strb	r1, [r5, #0]
 801c56e:	60a2      	str	r2, [r4, #8]
 801c570:	6123      	str	r3, [r4, #16]
 801c572:	7560      	strb	r0, [r4, #21]
 801c574:	7da0      	ldrb	r0, [r4, #22]
 801c576:	f080 0001 	eor.w	r0, r0, #1
 801c57a:	bd38      	pop	{r3, r4, r5, pc}

0801c57c <ucdr_serialize_uint8_t>:
 801c57c:	b538      	push	{r3, r4, r5, lr}
 801c57e:	460d      	mov	r5, r1
 801c580:	2101      	movs	r1, #1
 801c582:	4604      	mov	r4, r0
 801c584:	f000 ff62 	bl	801d44c <ucdr_check_final_buffer_behavior>
 801c588:	b148      	cbz	r0, 801c59e <ucdr_serialize_uint8_t+0x22>
 801c58a:	68a3      	ldr	r3, [r4, #8]
 801c58c:	2101      	movs	r1, #1
 801c58e:	701d      	strb	r5, [r3, #0]
 801c590:	68a2      	ldr	r2, [r4, #8]
 801c592:	6923      	ldr	r3, [r4, #16]
 801c594:	440a      	add	r2, r1
 801c596:	7561      	strb	r1, [r4, #21]
 801c598:	440b      	add	r3, r1
 801c59a:	60a2      	str	r2, [r4, #8]
 801c59c:	6123      	str	r3, [r4, #16]
 801c59e:	7da0      	ldrb	r0, [r4, #22]
 801c5a0:	f080 0001 	eor.w	r0, r0, #1
 801c5a4:	bd38      	pop	{r3, r4, r5, pc}
 801c5a6:	bf00      	nop

0801c5a8 <ucdr_deserialize_uint8_t>:
 801c5a8:	b538      	push	{r3, r4, r5, lr}
 801c5aa:	460d      	mov	r5, r1
 801c5ac:	2101      	movs	r1, #1
 801c5ae:	4604      	mov	r4, r0
 801c5b0:	f000 ff4c 	bl	801d44c <ucdr_check_final_buffer_behavior>
 801c5b4:	b150      	cbz	r0, 801c5cc <ucdr_deserialize_uint8_t+0x24>
 801c5b6:	68a3      	ldr	r3, [r4, #8]
 801c5b8:	2101      	movs	r1, #1
 801c5ba:	781b      	ldrb	r3, [r3, #0]
 801c5bc:	702b      	strb	r3, [r5, #0]
 801c5be:	68a2      	ldr	r2, [r4, #8]
 801c5c0:	6923      	ldr	r3, [r4, #16]
 801c5c2:	440a      	add	r2, r1
 801c5c4:	7561      	strb	r1, [r4, #21]
 801c5c6:	440b      	add	r3, r1
 801c5c8:	60a2      	str	r2, [r4, #8]
 801c5ca:	6123      	str	r3, [r4, #16]
 801c5cc:	7da0      	ldrb	r0, [r4, #22]
 801c5ce:	f080 0001 	eor.w	r0, r0, #1
 801c5d2:	bd38      	pop	{r3, r4, r5, pc}

0801c5d4 <ucdr_serialize_uint16_t>:
 801c5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c5d8:	460b      	mov	r3, r1
 801c5da:	b082      	sub	sp, #8
 801c5dc:	4604      	mov	r4, r0
 801c5de:	2102      	movs	r1, #2
 801c5e0:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c5e4:	f000 ff84 	bl	801d4f0 <ucdr_buffer_alignment>
 801c5e8:	4601      	mov	r1, r0
 801c5ea:	4620      	mov	r0, r4
 801c5ec:	7d67      	ldrb	r7, [r4, #21]
 801c5ee:	f000 ffc7 	bl	801d580 <ucdr_advance_buffer>
 801c5f2:	4620      	mov	r0, r4
 801c5f4:	2102      	movs	r1, #2
 801c5f6:	f000 ff1d 	bl	801d434 <ucdr_check_buffer_available_for>
 801c5fa:	bb78      	cbnz	r0, 801c65c <ucdr_serialize_uint16_t+0x88>
 801c5fc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801c600:	42ab      	cmp	r3, r5
 801c602:	d926      	bls.n	801c652 <ucdr_serialize_uint16_t+0x7e>
 801c604:	1b5e      	subs	r6, r3, r5
 801c606:	6922      	ldr	r2, [r4, #16]
 801c608:	4620      	mov	r0, r4
 801c60a:	60a3      	str	r3, [r4, #8]
 801c60c:	4432      	add	r2, r6
 801c60e:	f1c6 0802 	rsb	r8, r6, #2
 801c612:	6122      	str	r2, [r4, #16]
 801c614:	4641      	mov	r1, r8
 801c616:	f000 ff19 	bl	801d44c <ucdr_check_final_buffer_behavior>
 801c61a:	2800      	cmp	r0, #0
 801c61c:	d03b      	beq.n	801c696 <ucdr_serialize_uint16_t+0xc2>
 801c61e:	7d23      	ldrb	r3, [r4, #20]
 801c620:	2b01      	cmp	r3, #1
 801c622:	d04a      	beq.n	801c6ba <ucdr_serialize_uint16_t+0xe6>
 801c624:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801c628:	702b      	strb	r3, [r5, #0]
 801c62a:	2e00      	cmp	r6, #0
 801c62c:	d040      	beq.n	801c6b0 <ucdr_serialize_uint16_t+0xdc>
 801c62e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801c632:	706b      	strb	r3, [r5, #1]
 801c634:	6923      	ldr	r3, [r4, #16]
 801c636:	2102      	movs	r1, #2
 801c638:	68a2      	ldr	r2, [r4, #8]
 801c63a:	440b      	add	r3, r1
 801c63c:	7da0      	ldrb	r0, [r4, #22]
 801c63e:	4442      	add	r2, r8
 801c640:	7561      	strb	r1, [r4, #21]
 801c642:	1b9e      	subs	r6, r3, r6
 801c644:	f080 0001 	eor.w	r0, r0, #1
 801c648:	60a2      	str	r2, [r4, #8]
 801c64a:	6126      	str	r6, [r4, #16]
 801c64c:	b002      	add	sp, #8
 801c64e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c652:	2102      	movs	r1, #2
 801c654:	4620      	mov	r0, r4
 801c656:	f000 fef9 	bl	801d44c <ucdr_check_final_buffer_behavior>
 801c65a:	b190      	cbz	r0, 801c682 <ucdr_serialize_uint16_t+0xae>
 801c65c:	7d23      	ldrb	r3, [r4, #20]
 801c65e:	2b01      	cmp	r3, #1
 801c660:	68a3      	ldr	r3, [r4, #8]
 801c662:	d014      	beq.n	801c68e <ucdr_serialize_uint16_t+0xba>
 801c664:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801c668:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801c66c:	7019      	strb	r1, [r3, #0]
 801c66e:	68a3      	ldr	r3, [r4, #8]
 801c670:	705a      	strb	r2, [r3, #1]
 801c672:	2102      	movs	r1, #2
 801c674:	68a2      	ldr	r2, [r4, #8]
 801c676:	6923      	ldr	r3, [r4, #16]
 801c678:	440a      	add	r2, r1
 801c67a:	7561      	strb	r1, [r4, #21]
 801c67c:	440b      	add	r3, r1
 801c67e:	60a2      	str	r2, [r4, #8]
 801c680:	6123      	str	r3, [r4, #16]
 801c682:	7da0      	ldrb	r0, [r4, #22]
 801c684:	f080 0001 	eor.w	r0, r0, #1
 801c688:	b002      	add	sp, #8
 801c68a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c68e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801c692:	801a      	strh	r2, [r3, #0]
 801c694:	e7ed      	b.n	801c672 <ucdr_serialize_uint16_t+0x9e>
 801c696:	68a2      	ldr	r2, [r4, #8]
 801c698:	6923      	ldr	r3, [r4, #16]
 801c69a:	7da0      	ldrb	r0, [r4, #22]
 801c69c:	1b92      	subs	r2, r2, r6
 801c69e:	1b9e      	subs	r6, r3, r6
 801c6a0:	7567      	strb	r7, [r4, #21]
 801c6a2:	f080 0001 	eor.w	r0, r0, #1
 801c6a6:	60a2      	str	r2, [r4, #8]
 801c6a8:	6126      	str	r6, [r4, #16]
 801c6aa:	b002      	add	sp, #8
 801c6ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c6b0:	68a3      	ldr	r3, [r4, #8]
 801c6b2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801c6b6:	701a      	strb	r2, [r3, #0]
 801c6b8:	e7bc      	b.n	801c634 <ucdr_serialize_uint16_t+0x60>
 801c6ba:	4628      	mov	r0, r5
 801c6bc:	f10d 0506 	add.w	r5, sp, #6
 801c6c0:	4632      	mov	r2, r6
 801c6c2:	4629      	mov	r1, r5
 801c6c4:	f007 f966 	bl	8023994 <memcpy>
 801c6c8:	4642      	mov	r2, r8
 801c6ca:	19a9      	adds	r1, r5, r6
 801c6cc:	68a0      	ldr	r0, [r4, #8]
 801c6ce:	f007 f961 	bl	8023994 <memcpy>
 801c6d2:	e7af      	b.n	801c634 <ucdr_serialize_uint16_t+0x60>

0801c6d4 <ucdr_serialize_endian_uint16_t>:
 801c6d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c6d8:	4604      	mov	r4, r0
 801c6da:	b083      	sub	sp, #12
 801c6dc:	460d      	mov	r5, r1
 801c6de:	2102      	movs	r1, #2
 801c6e0:	f8ad 2006 	strh.w	r2, [sp, #6]
 801c6e4:	f000 ff04 	bl	801d4f0 <ucdr_buffer_alignment>
 801c6e8:	4601      	mov	r1, r0
 801c6ea:	4620      	mov	r0, r4
 801c6ec:	f894 8015 	ldrb.w	r8, [r4, #21]
 801c6f0:	f000 ff46 	bl	801d580 <ucdr_advance_buffer>
 801c6f4:	4620      	mov	r0, r4
 801c6f6:	2102      	movs	r1, #2
 801c6f8:	f000 fe9c 	bl	801d434 <ucdr_check_buffer_available_for>
 801c6fc:	bb70      	cbnz	r0, 801c75c <ucdr_serialize_endian_uint16_t+0x88>
 801c6fe:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 801c702:	42b3      	cmp	r3, r6
 801c704:	d925      	bls.n	801c752 <ucdr_serialize_endian_uint16_t+0x7e>
 801c706:	1b9f      	subs	r7, r3, r6
 801c708:	6922      	ldr	r2, [r4, #16]
 801c70a:	4620      	mov	r0, r4
 801c70c:	60a3      	str	r3, [r4, #8]
 801c70e:	443a      	add	r2, r7
 801c710:	f1c7 0902 	rsb	r9, r7, #2
 801c714:	6122      	str	r2, [r4, #16]
 801c716:	4649      	mov	r1, r9
 801c718:	f000 fe98 	bl	801d44c <ucdr_check_final_buffer_behavior>
 801c71c:	2800      	cmp	r0, #0
 801c71e:	d039      	beq.n	801c794 <ucdr_serialize_endian_uint16_t+0xc0>
 801c720:	2d01      	cmp	r5, #1
 801c722:	d04a      	beq.n	801c7ba <ucdr_serialize_endian_uint16_t+0xe6>
 801c724:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801c728:	7033      	strb	r3, [r6, #0]
 801c72a:	2f00      	cmp	r7, #0
 801c72c:	d040      	beq.n	801c7b0 <ucdr_serialize_endian_uint16_t+0xdc>
 801c72e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801c732:	7073      	strb	r3, [r6, #1]
 801c734:	6923      	ldr	r3, [r4, #16]
 801c736:	2102      	movs	r1, #2
 801c738:	68a2      	ldr	r2, [r4, #8]
 801c73a:	440b      	add	r3, r1
 801c73c:	7da0      	ldrb	r0, [r4, #22]
 801c73e:	444a      	add	r2, r9
 801c740:	7561      	strb	r1, [r4, #21]
 801c742:	1bdf      	subs	r7, r3, r7
 801c744:	f080 0001 	eor.w	r0, r0, #1
 801c748:	60a2      	str	r2, [r4, #8]
 801c74a:	6127      	str	r7, [r4, #16]
 801c74c:	b003      	add	sp, #12
 801c74e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c752:	2102      	movs	r1, #2
 801c754:	4620      	mov	r0, r4
 801c756:	f000 fe79 	bl	801d44c <ucdr_check_final_buffer_behavior>
 801c75a:	b188      	cbz	r0, 801c780 <ucdr_serialize_endian_uint16_t+0xac>
 801c75c:	2d01      	cmp	r5, #1
 801c75e:	68a3      	ldr	r3, [r4, #8]
 801c760:	d014      	beq.n	801c78c <ucdr_serialize_endian_uint16_t+0xb8>
 801c762:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801c766:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801c76a:	7019      	strb	r1, [r3, #0]
 801c76c:	68a3      	ldr	r3, [r4, #8]
 801c76e:	705a      	strb	r2, [r3, #1]
 801c770:	2102      	movs	r1, #2
 801c772:	68a2      	ldr	r2, [r4, #8]
 801c774:	6923      	ldr	r3, [r4, #16]
 801c776:	440a      	add	r2, r1
 801c778:	7561      	strb	r1, [r4, #21]
 801c77a:	440b      	add	r3, r1
 801c77c:	60a2      	str	r2, [r4, #8]
 801c77e:	6123      	str	r3, [r4, #16]
 801c780:	7da0      	ldrb	r0, [r4, #22]
 801c782:	f080 0001 	eor.w	r0, r0, #1
 801c786:	b003      	add	sp, #12
 801c788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c78c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801c790:	801a      	strh	r2, [r3, #0]
 801c792:	e7ed      	b.n	801c770 <ucdr_serialize_endian_uint16_t+0x9c>
 801c794:	68a2      	ldr	r2, [r4, #8]
 801c796:	6923      	ldr	r3, [r4, #16]
 801c798:	7da0      	ldrb	r0, [r4, #22]
 801c79a:	1bd2      	subs	r2, r2, r7
 801c79c:	1bdf      	subs	r7, r3, r7
 801c79e:	f884 8015 	strb.w	r8, [r4, #21]
 801c7a2:	f080 0001 	eor.w	r0, r0, #1
 801c7a6:	60a2      	str	r2, [r4, #8]
 801c7a8:	6127      	str	r7, [r4, #16]
 801c7aa:	b003      	add	sp, #12
 801c7ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c7b0:	68a3      	ldr	r3, [r4, #8]
 801c7b2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801c7b6:	701a      	strb	r2, [r3, #0]
 801c7b8:	e7bc      	b.n	801c734 <ucdr_serialize_endian_uint16_t+0x60>
 801c7ba:	f10d 0506 	add.w	r5, sp, #6
 801c7be:	463a      	mov	r2, r7
 801c7c0:	4630      	mov	r0, r6
 801c7c2:	4629      	mov	r1, r5
 801c7c4:	f007 f8e6 	bl	8023994 <memcpy>
 801c7c8:	464a      	mov	r2, r9
 801c7ca:	19e9      	adds	r1, r5, r7
 801c7cc:	68a0      	ldr	r0, [r4, #8]
 801c7ce:	f007 f8e1 	bl	8023994 <memcpy>
 801c7d2:	e7af      	b.n	801c734 <ucdr_serialize_endian_uint16_t+0x60>

0801c7d4 <ucdr_deserialize_uint16_t>:
 801c7d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c7d8:	4604      	mov	r4, r0
 801c7da:	460d      	mov	r5, r1
 801c7dc:	2102      	movs	r1, #2
 801c7de:	f000 fe87 	bl	801d4f0 <ucdr_buffer_alignment>
 801c7e2:	4601      	mov	r1, r0
 801c7e4:	4620      	mov	r0, r4
 801c7e6:	f894 8015 	ldrb.w	r8, [r4, #21]
 801c7ea:	f000 fec9 	bl	801d580 <ucdr_advance_buffer>
 801c7ee:	4620      	mov	r0, r4
 801c7f0:	2102      	movs	r1, #2
 801c7f2:	f000 fe1f 	bl	801d434 <ucdr_check_buffer_available_for>
 801c7f6:	bb60      	cbnz	r0, 801c852 <ucdr_deserialize_uint16_t+0x7e>
 801c7f8:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 801c7fc:	42b3      	cmp	r3, r6
 801c7fe:	d923      	bls.n	801c848 <ucdr_deserialize_uint16_t+0x74>
 801c800:	1b9f      	subs	r7, r3, r6
 801c802:	6922      	ldr	r2, [r4, #16]
 801c804:	4620      	mov	r0, r4
 801c806:	60a3      	str	r3, [r4, #8]
 801c808:	443a      	add	r2, r7
 801c80a:	f1c7 0902 	rsb	r9, r7, #2
 801c80e:	6122      	str	r2, [r4, #16]
 801c810:	4649      	mov	r1, r9
 801c812:	f000 fe1b 	bl	801d44c <ucdr_check_final_buffer_behavior>
 801c816:	2800      	cmp	r0, #0
 801c818:	d034      	beq.n	801c884 <ucdr_deserialize_uint16_t+0xb0>
 801c81a:	7d23      	ldrb	r3, [r4, #20]
 801c81c:	2b01      	cmp	r3, #1
 801c81e:	d042      	beq.n	801c8a6 <ucdr_deserialize_uint16_t+0xd2>
 801c820:	7873      	ldrb	r3, [r6, #1]
 801c822:	702b      	strb	r3, [r5, #0]
 801c824:	2f00      	cmp	r7, #0
 801c826:	d03a      	beq.n	801c89e <ucdr_deserialize_uint16_t+0xca>
 801c828:	7833      	ldrb	r3, [r6, #0]
 801c82a:	706b      	strb	r3, [r5, #1]
 801c82c:	6923      	ldr	r3, [r4, #16]
 801c82e:	2102      	movs	r1, #2
 801c830:	68a2      	ldr	r2, [r4, #8]
 801c832:	440b      	add	r3, r1
 801c834:	7da0      	ldrb	r0, [r4, #22]
 801c836:	444a      	add	r2, r9
 801c838:	7561      	strb	r1, [r4, #21]
 801c83a:	1bdf      	subs	r7, r3, r7
 801c83c:	f080 0001 	eor.w	r0, r0, #1
 801c840:	60a2      	str	r2, [r4, #8]
 801c842:	6127      	str	r7, [r4, #16]
 801c844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c848:	2102      	movs	r1, #2
 801c84a:	4620      	mov	r0, r4
 801c84c:	f000 fdfe 	bl	801d44c <ucdr_check_final_buffer_behavior>
 801c850:	b180      	cbz	r0, 801c874 <ucdr_deserialize_uint16_t+0xa0>
 801c852:	7d23      	ldrb	r3, [r4, #20]
 801c854:	2b01      	cmp	r3, #1
 801c856:	68a3      	ldr	r3, [r4, #8]
 801c858:	d011      	beq.n	801c87e <ucdr_deserialize_uint16_t+0xaa>
 801c85a:	785b      	ldrb	r3, [r3, #1]
 801c85c:	702b      	strb	r3, [r5, #0]
 801c85e:	68a3      	ldr	r3, [r4, #8]
 801c860:	781b      	ldrb	r3, [r3, #0]
 801c862:	706b      	strb	r3, [r5, #1]
 801c864:	2102      	movs	r1, #2
 801c866:	68a2      	ldr	r2, [r4, #8]
 801c868:	6923      	ldr	r3, [r4, #16]
 801c86a:	440a      	add	r2, r1
 801c86c:	7561      	strb	r1, [r4, #21]
 801c86e:	440b      	add	r3, r1
 801c870:	60a2      	str	r2, [r4, #8]
 801c872:	6123      	str	r3, [r4, #16]
 801c874:	7da0      	ldrb	r0, [r4, #22]
 801c876:	f080 0001 	eor.w	r0, r0, #1
 801c87a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c87e:	881b      	ldrh	r3, [r3, #0]
 801c880:	802b      	strh	r3, [r5, #0]
 801c882:	e7ef      	b.n	801c864 <ucdr_deserialize_uint16_t+0x90>
 801c884:	68a2      	ldr	r2, [r4, #8]
 801c886:	6923      	ldr	r3, [r4, #16]
 801c888:	1bd2      	subs	r2, r2, r7
 801c88a:	7da0      	ldrb	r0, [r4, #22]
 801c88c:	1bdf      	subs	r7, r3, r7
 801c88e:	f884 8015 	strb.w	r8, [r4, #21]
 801c892:	f080 0001 	eor.w	r0, r0, #1
 801c896:	60a2      	str	r2, [r4, #8]
 801c898:	6127      	str	r7, [r4, #16]
 801c89a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c89e:	68a3      	ldr	r3, [r4, #8]
 801c8a0:	781b      	ldrb	r3, [r3, #0]
 801c8a2:	706b      	strb	r3, [r5, #1]
 801c8a4:	e7c2      	b.n	801c82c <ucdr_deserialize_uint16_t+0x58>
 801c8a6:	4631      	mov	r1, r6
 801c8a8:	463a      	mov	r2, r7
 801c8aa:	4628      	mov	r0, r5
 801c8ac:	f007 f872 	bl	8023994 <memcpy>
 801c8b0:	464a      	mov	r2, r9
 801c8b2:	19e8      	adds	r0, r5, r7
 801c8b4:	68a1      	ldr	r1, [r4, #8]
 801c8b6:	f007 f86d 	bl	8023994 <memcpy>
 801c8ba:	e7b7      	b.n	801c82c <ucdr_deserialize_uint16_t+0x58>

0801c8bc <ucdr_deserialize_endian_uint16_t>:
 801c8bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c8c0:	4604      	mov	r4, r0
 801c8c2:	460e      	mov	r6, r1
 801c8c4:	2102      	movs	r1, #2
 801c8c6:	4615      	mov	r5, r2
 801c8c8:	f000 fe12 	bl	801d4f0 <ucdr_buffer_alignment>
 801c8cc:	4601      	mov	r1, r0
 801c8ce:	4620      	mov	r0, r4
 801c8d0:	f894 8015 	ldrb.w	r8, [r4, #21]
 801c8d4:	f000 fe54 	bl	801d580 <ucdr_advance_buffer>
 801c8d8:	4620      	mov	r0, r4
 801c8da:	2102      	movs	r1, #2
 801c8dc:	f000 fdaa 	bl	801d434 <ucdr_check_buffer_available_for>
 801c8e0:	bb70      	cbnz	r0, 801c940 <ucdr_deserialize_endian_uint16_t+0x84>
 801c8e2:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 801c8e6:	42bb      	cmp	r3, r7
 801c8e8:	d925      	bls.n	801c936 <ucdr_deserialize_endian_uint16_t+0x7a>
 801c8ea:	eba3 0907 	sub.w	r9, r3, r7
 801c8ee:	6922      	ldr	r2, [r4, #16]
 801c8f0:	4620      	mov	r0, r4
 801c8f2:	60a3      	str	r3, [r4, #8]
 801c8f4:	444a      	add	r2, r9
 801c8f6:	f1c9 0a02 	rsb	sl, r9, #2
 801c8fa:	6122      	str	r2, [r4, #16]
 801c8fc:	4651      	mov	r1, sl
 801c8fe:	f000 fda5 	bl	801d44c <ucdr_check_final_buffer_behavior>
 801c902:	2800      	cmp	r0, #0
 801c904:	d034      	beq.n	801c970 <ucdr_deserialize_endian_uint16_t+0xb4>
 801c906:	2e01      	cmp	r6, #1
 801c908:	d045      	beq.n	801c996 <ucdr_deserialize_endian_uint16_t+0xda>
 801c90a:	787b      	ldrb	r3, [r7, #1]
 801c90c:	702b      	strb	r3, [r5, #0]
 801c90e:	f1b9 0f00 	cmp.w	r9, #0
 801c912:	d03c      	beq.n	801c98e <ucdr_deserialize_endian_uint16_t+0xd2>
 801c914:	783b      	ldrb	r3, [r7, #0]
 801c916:	706b      	strb	r3, [r5, #1]
 801c918:	6923      	ldr	r3, [r4, #16]
 801c91a:	2102      	movs	r1, #2
 801c91c:	68a2      	ldr	r2, [r4, #8]
 801c91e:	440b      	add	r3, r1
 801c920:	7da0      	ldrb	r0, [r4, #22]
 801c922:	4452      	add	r2, sl
 801c924:	7561      	strb	r1, [r4, #21]
 801c926:	eba3 0309 	sub.w	r3, r3, r9
 801c92a:	f080 0001 	eor.w	r0, r0, #1
 801c92e:	60a2      	str	r2, [r4, #8]
 801c930:	6123      	str	r3, [r4, #16]
 801c932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c936:	2102      	movs	r1, #2
 801c938:	4620      	mov	r0, r4
 801c93a:	f000 fd87 	bl	801d44c <ucdr_check_final_buffer_behavior>
 801c93e:	b178      	cbz	r0, 801c960 <ucdr_deserialize_endian_uint16_t+0xa4>
 801c940:	2e01      	cmp	r6, #1
 801c942:	68a3      	ldr	r3, [r4, #8]
 801c944:	d011      	beq.n	801c96a <ucdr_deserialize_endian_uint16_t+0xae>
 801c946:	785b      	ldrb	r3, [r3, #1]
 801c948:	702b      	strb	r3, [r5, #0]
 801c94a:	68a3      	ldr	r3, [r4, #8]
 801c94c:	781b      	ldrb	r3, [r3, #0]
 801c94e:	706b      	strb	r3, [r5, #1]
 801c950:	2102      	movs	r1, #2
 801c952:	68a2      	ldr	r2, [r4, #8]
 801c954:	6923      	ldr	r3, [r4, #16]
 801c956:	440a      	add	r2, r1
 801c958:	7561      	strb	r1, [r4, #21]
 801c95a:	440b      	add	r3, r1
 801c95c:	60a2      	str	r2, [r4, #8]
 801c95e:	6123      	str	r3, [r4, #16]
 801c960:	7da0      	ldrb	r0, [r4, #22]
 801c962:	f080 0001 	eor.w	r0, r0, #1
 801c966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c96a:	881b      	ldrh	r3, [r3, #0]
 801c96c:	802b      	strh	r3, [r5, #0]
 801c96e:	e7ef      	b.n	801c950 <ucdr_deserialize_endian_uint16_t+0x94>
 801c970:	68a2      	ldr	r2, [r4, #8]
 801c972:	6923      	ldr	r3, [r4, #16]
 801c974:	eba2 0209 	sub.w	r2, r2, r9
 801c978:	7da0      	ldrb	r0, [r4, #22]
 801c97a:	eba3 0309 	sub.w	r3, r3, r9
 801c97e:	f884 8015 	strb.w	r8, [r4, #21]
 801c982:	f080 0001 	eor.w	r0, r0, #1
 801c986:	60a2      	str	r2, [r4, #8]
 801c988:	6123      	str	r3, [r4, #16]
 801c98a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c98e:	68a3      	ldr	r3, [r4, #8]
 801c990:	781b      	ldrb	r3, [r3, #0]
 801c992:	706b      	strb	r3, [r5, #1]
 801c994:	e7c0      	b.n	801c918 <ucdr_deserialize_endian_uint16_t+0x5c>
 801c996:	4639      	mov	r1, r7
 801c998:	464a      	mov	r2, r9
 801c99a:	4628      	mov	r0, r5
 801c99c:	f006 fffa 	bl	8023994 <memcpy>
 801c9a0:	4652      	mov	r2, sl
 801c9a2:	eb05 0009 	add.w	r0, r5, r9
 801c9a6:	68a1      	ldr	r1, [r4, #8]
 801c9a8:	f006 fff4 	bl	8023994 <memcpy>
 801c9ac:	e7b4      	b.n	801c918 <ucdr_deserialize_endian_uint16_t+0x5c>
 801c9ae:	bf00      	nop

0801c9b0 <ucdr_serialize_uint32_t>:
 801c9b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c9b4:	b082      	sub	sp, #8
 801c9b6:	4604      	mov	r4, r0
 801c9b8:	9101      	str	r1, [sp, #4]
 801c9ba:	2104      	movs	r1, #4
 801c9bc:	f000 fd98 	bl	801d4f0 <ucdr_buffer_alignment>
 801c9c0:	4601      	mov	r1, r0
 801c9c2:	4620      	mov	r0, r4
 801c9c4:	7d67      	ldrb	r7, [r4, #21]
 801c9c6:	f000 fddb 	bl	801d580 <ucdr_advance_buffer>
 801c9ca:	4620      	mov	r0, r4
 801c9cc:	2104      	movs	r1, #4
 801c9ce:	f000 fd31 	bl	801d434 <ucdr_check_buffer_available_for>
 801c9d2:	2800      	cmp	r0, #0
 801c9d4:	d139      	bne.n	801ca4a <ucdr_serialize_uint32_t+0x9a>
 801c9d6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801c9da:	42ab      	cmp	r3, r5
 801c9dc:	d930      	bls.n	801ca40 <ucdr_serialize_uint32_t+0x90>
 801c9de:	1b5e      	subs	r6, r3, r5
 801c9e0:	6922      	ldr	r2, [r4, #16]
 801c9e2:	4620      	mov	r0, r4
 801c9e4:	60a3      	str	r3, [r4, #8]
 801c9e6:	4432      	add	r2, r6
 801c9e8:	f1c6 0804 	rsb	r8, r6, #4
 801c9ec:	6122      	str	r2, [r4, #16]
 801c9ee:	4641      	mov	r1, r8
 801c9f0:	f000 fd2c 	bl	801d44c <ucdr_check_final_buffer_behavior>
 801c9f4:	2800      	cmp	r0, #0
 801c9f6:	d04c      	beq.n	801ca92 <ucdr_serialize_uint32_t+0xe2>
 801c9f8:	7d23      	ldrb	r3, [r4, #20]
 801c9fa:	2b01      	cmp	r3, #1
 801c9fc:	d063      	beq.n	801cac6 <ucdr_serialize_uint32_t+0x116>
 801c9fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801ca02:	702b      	strb	r3, [r5, #0]
 801ca04:	2e00      	cmp	r6, #0
 801ca06:	d051      	beq.n	801caac <ucdr_serialize_uint32_t+0xfc>
 801ca08:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801ca0c:	2e01      	cmp	r6, #1
 801ca0e:	706b      	strb	r3, [r5, #1]
 801ca10:	d050      	beq.n	801cab4 <ucdr_serialize_uint32_t+0x104>
 801ca12:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801ca16:	2e02      	cmp	r6, #2
 801ca18:	70ab      	strb	r3, [r5, #2]
 801ca1a:	d04f      	beq.n	801cabc <ucdr_serialize_uint32_t+0x10c>
 801ca1c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801ca20:	70eb      	strb	r3, [r5, #3]
 801ca22:	6923      	ldr	r3, [r4, #16]
 801ca24:	2104      	movs	r1, #4
 801ca26:	68a2      	ldr	r2, [r4, #8]
 801ca28:	440b      	add	r3, r1
 801ca2a:	7da0      	ldrb	r0, [r4, #22]
 801ca2c:	4442      	add	r2, r8
 801ca2e:	7561      	strb	r1, [r4, #21]
 801ca30:	1b9e      	subs	r6, r3, r6
 801ca32:	f080 0001 	eor.w	r0, r0, #1
 801ca36:	60a2      	str	r2, [r4, #8]
 801ca38:	6126      	str	r6, [r4, #16]
 801ca3a:	b002      	add	sp, #8
 801ca3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ca40:	2104      	movs	r1, #4
 801ca42:	4620      	mov	r0, r4
 801ca44:	f000 fd02 	bl	801d44c <ucdr_check_final_buffer_behavior>
 801ca48:	b1d0      	cbz	r0, 801ca80 <ucdr_serialize_uint32_t+0xd0>
 801ca4a:	7d23      	ldrb	r3, [r4, #20]
 801ca4c:	2b01      	cmp	r3, #1
 801ca4e:	68a3      	ldr	r3, [r4, #8]
 801ca50:	d01c      	beq.n	801ca8c <ucdr_serialize_uint32_t+0xdc>
 801ca52:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801ca56:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801ca5a:	7019      	strb	r1, [r3, #0]
 801ca5c:	68a3      	ldr	r3, [r4, #8]
 801ca5e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801ca62:	705a      	strb	r2, [r3, #1]
 801ca64:	68a3      	ldr	r3, [r4, #8]
 801ca66:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801ca6a:	7099      	strb	r1, [r3, #2]
 801ca6c:	68a3      	ldr	r3, [r4, #8]
 801ca6e:	70da      	strb	r2, [r3, #3]
 801ca70:	2104      	movs	r1, #4
 801ca72:	68a2      	ldr	r2, [r4, #8]
 801ca74:	6923      	ldr	r3, [r4, #16]
 801ca76:	440a      	add	r2, r1
 801ca78:	7561      	strb	r1, [r4, #21]
 801ca7a:	440b      	add	r3, r1
 801ca7c:	60a2      	str	r2, [r4, #8]
 801ca7e:	6123      	str	r3, [r4, #16]
 801ca80:	7da0      	ldrb	r0, [r4, #22]
 801ca82:	f080 0001 	eor.w	r0, r0, #1
 801ca86:	b002      	add	sp, #8
 801ca88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ca8c:	9a01      	ldr	r2, [sp, #4]
 801ca8e:	601a      	str	r2, [r3, #0]
 801ca90:	e7ee      	b.n	801ca70 <ucdr_serialize_uint32_t+0xc0>
 801ca92:	68a2      	ldr	r2, [r4, #8]
 801ca94:	6923      	ldr	r3, [r4, #16]
 801ca96:	7da0      	ldrb	r0, [r4, #22]
 801ca98:	1b92      	subs	r2, r2, r6
 801ca9a:	1b9e      	subs	r6, r3, r6
 801ca9c:	7567      	strb	r7, [r4, #21]
 801ca9e:	f080 0001 	eor.w	r0, r0, #1
 801caa2:	60a2      	str	r2, [r4, #8]
 801caa4:	6126      	str	r6, [r4, #16]
 801caa6:	b002      	add	sp, #8
 801caa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801caac:	68a3      	ldr	r3, [r4, #8]
 801caae:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801cab2:	701a      	strb	r2, [r3, #0]
 801cab4:	68a3      	ldr	r3, [r4, #8]
 801cab6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801caba:	701a      	strb	r2, [r3, #0]
 801cabc:	68a3      	ldr	r3, [r4, #8]
 801cabe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801cac2:	701a      	strb	r2, [r3, #0]
 801cac4:	e7ad      	b.n	801ca22 <ucdr_serialize_uint32_t+0x72>
 801cac6:	4628      	mov	r0, r5
 801cac8:	ad01      	add	r5, sp, #4
 801caca:	4632      	mov	r2, r6
 801cacc:	4629      	mov	r1, r5
 801cace:	f006 ff61 	bl	8023994 <memcpy>
 801cad2:	4642      	mov	r2, r8
 801cad4:	19a9      	adds	r1, r5, r6
 801cad6:	68a0      	ldr	r0, [r4, #8]
 801cad8:	f006 ff5c 	bl	8023994 <memcpy>
 801cadc:	e7a1      	b.n	801ca22 <ucdr_serialize_uint32_t+0x72>
 801cade:	bf00      	nop

0801cae0 <ucdr_serialize_endian_uint32_t>:
 801cae0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cae4:	4604      	mov	r4, r0
 801cae6:	b083      	sub	sp, #12
 801cae8:	460d      	mov	r5, r1
 801caea:	2104      	movs	r1, #4
 801caec:	9201      	str	r2, [sp, #4]
 801caee:	f000 fcff 	bl	801d4f0 <ucdr_buffer_alignment>
 801caf2:	4601      	mov	r1, r0
 801caf4:	4620      	mov	r0, r4
 801caf6:	f894 8015 	ldrb.w	r8, [r4, #21]
 801cafa:	f000 fd41 	bl	801d580 <ucdr_advance_buffer>
 801cafe:	4620      	mov	r0, r4
 801cb00:	2104      	movs	r1, #4
 801cb02:	f000 fc97 	bl	801d434 <ucdr_check_buffer_available_for>
 801cb06:	2800      	cmp	r0, #0
 801cb08:	d138      	bne.n	801cb7c <ucdr_serialize_endian_uint32_t+0x9c>
 801cb0a:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 801cb0e:	42b3      	cmp	r3, r6
 801cb10:	d92f      	bls.n	801cb72 <ucdr_serialize_endian_uint32_t+0x92>
 801cb12:	1b9f      	subs	r7, r3, r6
 801cb14:	6922      	ldr	r2, [r4, #16]
 801cb16:	4620      	mov	r0, r4
 801cb18:	60a3      	str	r3, [r4, #8]
 801cb1a:	443a      	add	r2, r7
 801cb1c:	f1c7 0904 	rsb	r9, r7, #4
 801cb20:	6122      	str	r2, [r4, #16]
 801cb22:	4649      	mov	r1, r9
 801cb24:	f000 fc92 	bl	801d44c <ucdr_check_final_buffer_behavior>
 801cb28:	2800      	cmp	r0, #0
 801cb2a:	d04a      	beq.n	801cbc2 <ucdr_serialize_endian_uint32_t+0xe2>
 801cb2c:	2d01      	cmp	r5, #1
 801cb2e:	d063      	beq.n	801cbf8 <ucdr_serialize_endian_uint32_t+0x118>
 801cb30:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801cb34:	7033      	strb	r3, [r6, #0]
 801cb36:	2f00      	cmp	r7, #0
 801cb38:	d051      	beq.n	801cbde <ucdr_serialize_endian_uint32_t+0xfe>
 801cb3a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801cb3e:	2f01      	cmp	r7, #1
 801cb40:	7073      	strb	r3, [r6, #1]
 801cb42:	d050      	beq.n	801cbe6 <ucdr_serialize_endian_uint32_t+0x106>
 801cb44:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801cb48:	2f02      	cmp	r7, #2
 801cb4a:	70b3      	strb	r3, [r6, #2]
 801cb4c:	d04f      	beq.n	801cbee <ucdr_serialize_endian_uint32_t+0x10e>
 801cb4e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801cb52:	70f3      	strb	r3, [r6, #3]
 801cb54:	6923      	ldr	r3, [r4, #16]
 801cb56:	2104      	movs	r1, #4
 801cb58:	68a2      	ldr	r2, [r4, #8]
 801cb5a:	440b      	add	r3, r1
 801cb5c:	7da0      	ldrb	r0, [r4, #22]
 801cb5e:	444a      	add	r2, r9
 801cb60:	7561      	strb	r1, [r4, #21]
 801cb62:	1bdf      	subs	r7, r3, r7
 801cb64:	f080 0001 	eor.w	r0, r0, #1
 801cb68:	60a2      	str	r2, [r4, #8]
 801cb6a:	6127      	str	r7, [r4, #16]
 801cb6c:	b003      	add	sp, #12
 801cb6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cb72:	2104      	movs	r1, #4
 801cb74:	4620      	mov	r0, r4
 801cb76:	f000 fc69 	bl	801d44c <ucdr_check_final_buffer_behavior>
 801cb7a:	b1c8      	cbz	r0, 801cbb0 <ucdr_serialize_endian_uint32_t+0xd0>
 801cb7c:	2d01      	cmp	r5, #1
 801cb7e:	68a3      	ldr	r3, [r4, #8]
 801cb80:	d01c      	beq.n	801cbbc <ucdr_serialize_endian_uint32_t+0xdc>
 801cb82:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801cb86:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801cb8a:	7019      	strb	r1, [r3, #0]
 801cb8c:	68a3      	ldr	r3, [r4, #8]
 801cb8e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801cb92:	705a      	strb	r2, [r3, #1]
 801cb94:	68a3      	ldr	r3, [r4, #8]
 801cb96:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801cb9a:	7099      	strb	r1, [r3, #2]
 801cb9c:	68a3      	ldr	r3, [r4, #8]
 801cb9e:	70da      	strb	r2, [r3, #3]
 801cba0:	2104      	movs	r1, #4
 801cba2:	68a2      	ldr	r2, [r4, #8]
 801cba4:	6923      	ldr	r3, [r4, #16]
 801cba6:	440a      	add	r2, r1
 801cba8:	7561      	strb	r1, [r4, #21]
 801cbaa:	440b      	add	r3, r1
 801cbac:	60a2      	str	r2, [r4, #8]
 801cbae:	6123      	str	r3, [r4, #16]
 801cbb0:	7da0      	ldrb	r0, [r4, #22]
 801cbb2:	f080 0001 	eor.w	r0, r0, #1
 801cbb6:	b003      	add	sp, #12
 801cbb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cbbc:	9a01      	ldr	r2, [sp, #4]
 801cbbe:	601a      	str	r2, [r3, #0]
 801cbc0:	e7ee      	b.n	801cba0 <ucdr_serialize_endian_uint32_t+0xc0>
 801cbc2:	68a2      	ldr	r2, [r4, #8]
 801cbc4:	6923      	ldr	r3, [r4, #16]
 801cbc6:	7da0      	ldrb	r0, [r4, #22]
 801cbc8:	1bd2      	subs	r2, r2, r7
 801cbca:	1bdf      	subs	r7, r3, r7
 801cbcc:	f884 8015 	strb.w	r8, [r4, #21]
 801cbd0:	f080 0001 	eor.w	r0, r0, #1
 801cbd4:	60a2      	str	r2, [r4, #8]
 801cbd6:	6127      	str	r7, [r4, #16]
 801cbd8:	b003      	add	sp, #12
 801cbda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cbde:	68a3      	ldr	r3, [r4, #8]
 801cbe0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801cbe4:	701a      	strb	r2, [r3, #0]
 801cbe6:	68a3      	ldr	r3, [r4, #8]
 801cbe8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801cbec:	701a      	strb	r2, [r3, #0]
 801cbee:	68a3      	ldr	r3, [r4, #8]
 801cbf0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801cbf4:	701a      	strb	r2, [r3, #0]
 801cbf6:	e7ad      	b.n	801cb54 <ucdr_serialize_endian_uint32_t+0x74>
 801cbf8:	ad01      	add	r5, sp, #4
 801cbfa:	463a      	mov	r2, r7
 801cbfc:	4630      	mov	r0, r6
 801cbfe:	4629      	mov	r1, r5
 801cc00:	f006 fec8 	bl	8023994 <memcpy>
 801cc04:	464a      	mov	r2, r9
 801cc06:	19e9      	adds	r1, r5, r7
 801cc08:	68a0      	ldr	r0, [r4, #8]
 801cc0a:	f006 fec3 	bl	8023994 <memcpy>
 801cc0e:	e7a1      	b.n	801cb54 <ucdr_serialize_endian_uint32_t+0x74>

0801cc10 <ucdr_deserialize_uint32_t>:
 801cc10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cc14:	4604      	mov	r4, r0
 801cc16:	460d      	mov	r5, r1
 801cc18:	2104      	movs	r1, #4
 801cc1a:	f000 fc69 	bl	801d4f0 <ucdr_buffer_alignment>
 801cc1e:	4601      	mov	r1, r0
 801cc20:	4620      	mov	r0, r4
 801cc22:	f894 8015 	ldrb.w	r8, [r4, #21]
 801cc26:	f000 fcab 	bl	801d580 <ucdr_advance_buffer>
 801cc2a:	4620      	mov	r0, r4
 801cc2c:	2104      	movs	r1, #4
 801cc2e:	f000 fc01 	bl	801d434 <ucdr_check_buffer_available_for>
 801cc32:	2800      	cmp	r0, #0
 801cc34:	d138      	bne.n	801cca8 <ucdr_deserialize_uint32_t+0x98>
 801cc36:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 801cc3a:	42b3      	cmp	r3, r6
 801cc3c:	d92f      	bls.n	801cc9e <ucdr_deserialize_uint32_t+0x8e>
 801cc3e:	1b9f      	subs	r7, r3, r6
 801cc40:	6922      	ldr	r2, [r4, #16]
 801cc42:	4620      	mov	r0, r4
 801cc44:	60a3      	str	r3, [r4, #8]
 801cc46:	443a      	add	r2, r7
 801cc48:	f1c7 0904 	rsb	r9, r7, #4
 801cc4c:	6122      	str	r2, [r4, #16]
 801cc4e:	4649      	mov	r1, r9
 801cc50:	f000 fbfc 	bl	801d44c <ucdr_check_final_buffer_behavior>
 801cc54:	2800      	cmp	r0, #0
 801cc56:	d046      	beq.n	801cce6 <ucdr_deserialize_uint32_t+0xd6>
 801cc58:	7d23      	ldrb	r3, [r4, #20]
 801cc5a:	2b01      	cmp	r3, #1
 801cc5c:	d05c      	beq.n	801cd18 <ucdr_deserialize_uint32_t+0x108>
 801cc5e:	78f3      	ldrb	r3, [r6, #3]
 801cc60:	702b      	strb	r3, [r5, #0]
 801cc62:	2f00      	cmp	r7, #0
 801cc64:	d04c      	beq.n	801cd00 <ucdr_deserialize_uint32_t+0xf0>
 801cc66:	78b2      	ldrb	r2, [r6, #2]
 801cc68:	2f01      	cmp	r7, #1
 801cc6a:	f105 0302 	add.w	r3, r5, #2
 801cc6e:	706a      	strb	r2, [r5, #1]
 801cc70:	d04a      	beq.n	801cd08 <ucdr_deserialize_uint32_t+0xf8>
 801cc72:	7872      	ldrb	r2, [r6, #1]
 801cc74:	2f02      	cmp	r7, #2
 801cc76:	f105 0303 	add.w	r3, r5, #3
 801cc7a:	70aa      	strb	r2, [r5, #2]
 801cc7c:	d048      	beq.n	801cd10 <ucdr_deserialize_uint32_t+0x100>
 801cc7e:	7833      	ldrb	r3, [r6, #0]
 801cc80:	70eb      	strb	r3, [r5, #3]
 801cc82:	6923      	ldr	r3, [r4, #16]
 801cc84:	2104      	movs	r1, #4
 801cc86:	68a2      	ldr	r2, [r4, #8]
 801cc88:	440b      	add	r3, r1
 801cc8a:	7da0      	ldrb	r0, [r4, #22]
 801cc8c:	444a      	add	r2, r9
 801cc8e:	7561      	strb	r1, [r4, #21]
 801cc90:	1bdf      	subs	r7, r3, r7
 801cc92:	f080 0001 	eor.w	r0, r0, #1
 801cc96:	60a2      	str	r2, [r4, #8]
 801cc98:	6127      	str	r7, [r4, #16]
 801cc9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cc9e:	2104      	movs	r1, #4
 801cca0:	4620      	mov	r0, r4
 801cca2:	f000 fbd3 	bl	801d44c <ucdr_check_final_buffer_behavior>
 801cca6:	b1b0      	cbz	r0, 801ccd6 <ucdr_deserialize_uint32_t+0xc6>
 801cca8:	7d23      	ldrb	r3, [r4, #20]
 801ccaa:	2b01      	cmp	r3, #1
 801ccac:	68a3      	ldr	r3, [r4, #8]
 801ccae:	d017      	beq.n	801cce0 <ucdr_deserialize_uint32_t+0xd0>
 801ccb0:	78db      	ldrb	r3, [r3, #3]
 801ccb2:	702b      	strb	r3, [r5, #0]
 801ccb4:	68a3      	ldr	r3, [r4, #8]
 801ccb6:	789b      	ldrb	r3, [r3, #2]
 801ccb8:	706b      	strb	r3, [r5, #1]
 801ccba:	68a3      	ldr	r3, [r4, #8]
 801ccbc:	785b      	ldrb	r3, [r3, #1]
 801ccbe:	70ab      	strb	r3, [r5, #2]
 801ccc0:	68a3      	ldr	r3, [r4, #8]
 801ccc2:	781b      	ldrb	r3, [r3, #0]
 801ccc4:	70eb      	strb	r3, [r5, #3]
 801ccc6:	2104      	movs	r1, #4
 801ccc8:	68a2      	ldr	r2, [r4, #8]
 801ccca:	6923      	ldr	r3, [r4, #16]
 801cccc:	440a      	add	r2, r1
 801ccce:	7561      	strb	r1, [r4, #21]
 801ccd0:	440b      	add	r3, r1
 801ccd2:	60a2      	str	r2, [r4, #8]
 801ccd4:	6123      	str	r3, [r4, #16]
 801ccd6:	7da0      	ldrb	r0, [r4, #22]
 801ccd8:	f080 0001 	eor.w	r0, r0, #1
 801ccdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cce0:	681b      	ldr	r3, [r3, #0]
 801cce2:	602b      	str	r3, [r5, #0]
 801cce4:	e7ef      	b.n	801ccc6 <ucdr_deserialize_uint32_t+0xb6>
 801cce6:	68a2      	ldr	r2, [r4, #8]
 801cce8:	6923      	ldr	r3, [r4, #16]
 801ccea:	1bd2      	subs	r2, r2, r7
 801ccec:	7da0      	ldrb	r0, [r4, #22]
 801ccee:	1bdf      	subs	r7, r3, r7
 801ccf0:	f884 8015 	strb.w	r8, [r4, #21]
 801ccf4:	f080 0001 	eor.w	r0, r0, #1
 801ccf8:	60a2      	str	r2, [r4, #8]
 801ccfa:	6127      	str	r7, [r4, #16]
 801ccfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cd00:	68a2      	ldr	r2, [r4, #8]
 801cd02:	1cab      	adds	r3, r5, #2
 801cd04:	7892      	ldrb	r2, [r2, #2]
 801cd06:	706a      	strb	r2, [r5, #1]
 801cd08:	68a2      	ldr	r2, [r4, #8]
 801cd0a:	7852      	ldrb	r2, [r2, #1]
 801cd0c:	f803 2b01 	strb.w	r2, [r3], #1
 801cd10:	68a2      	ldr	r2, [r4, #8]
 801cd12:	7812      	ldrb	r2, [r2, #0]
 801cd14:	701a      	strb	r2, [r3, #0]
 801cd16:	e7b4      	b.n	801cc82 <ucdr_deserialize_uint32_t+0x72>
 801cd18:	4631      	mov	r1, r6
 801cd1a:	463a      	mov	r2, r7
 801cd1c:	4628      	mov	r0, r5
 801cd1e:	f006 fe39 	bl	8023994 <memcpy>
 801cd22:	464a      	mov	r2, r9
 801cd24:	19e8      	adds	r0, r5, r7
 801cd26:	68a1      	ldr	r1, [r4, #8]
 801cd28:	f006 fe34 	bl	8023994 <memcpy>
 801cd2c:	e7a9      	b.n	801cc82 <ucdr_deserialize_uint32_t+0x72>
 801cd2e:	bf00      	nop

0801cd30 <ucdr_deserialize_endian_uint32_t>:
 801cd30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cd34:	4604      	mov	r4, r0
 801cd36:	460e      	mov	r6, r1
 801cd38:	2104      	movs	r1, #4
 801cd3a:	4615      	mov	r5, r2
 801cd3c:	f000 fbd8 	bl	801d4f0 <ucdr_buffer_alignment>
 801cd40:	4601      	mov	r1, r0
 801cd42:	4620      	mov	r0, r4
 801cd44:	f894 8015 	ldrb.w	r8, [r4, #21]
 801cd48:	f000 fc1a 	bl	801d580 <ucdr_advance_buffer>
 801cd4c:	4620      	mov	r0, r4
 801cd4e:	2104      	movs	r1, #4
 801cd50:	f000 fb70 	bl	801d434 <ucdr_check_buffer_available_for>
 801cd54:	2800      	cmp	r0, #0
 801cd56:	d13c      	bne.n	801cdd2 <ucdr_deserialize_endian_uint32_t+0xa2>
 801cd58:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 801cd5c:	42bb      	cmp	r3, r7
 801cd5e:	d933      	bls.n	801cdc8 <ucdr_deserialize_endian_uint32_t+0x98>
 801cd60:	eba3 0907 	sub.w	r9, r3, r7
 801cd64:	6922      	ldr	r2, [r4, #16]
 801cd66:	4620      	mov	r0, r4
 801cd68:	60a3      	str	r3, [r4, #8]
 801cd6a:	444a      	add	r2, r9
 801cd6c:	f1c9 0a04 	rsb	sl, r9, #4
 801cd70:	6122      	str	r2, [r4, #16]
 801cd72:	4651      	mov	r1, sl
 801cd74:	f000 fb6a 	bl	801d44c <ucdr_check_final_buffer_behavior>
 801cd78:	2800      	cmp	r0, #0
 801cd7a:	d048      	beq.n	801ce0e <ucdr_deserialize_endian_uint32_t+0xde>
 801cd7c:	2e01      	cmp	r6, #1
 801cd7e:	d061      	beq.n	801ce44 <ucdr_deserialize_endian_uint32_t+0x114>
 801cd80:	78fb      	ldrb	r3, [r7, #3]
 801cd82:	702b      	strb	r3, [r5, #0]
 801cd84:	f1b9 0f00 	cmp.w	r9, #0
 801cd88:	d050      	beq.n	801ce2c <ucdr_deserialize_endian_uint32_t+0xfc>
 801cd8a:	78ba      	ldrb	r2, [r7, #2]
 801cd8c:	f1b9 0f01 	cmp.w	r9, #1
 801cd90:	f105 0302 	add.w	r3, r5, #2
 801cd94:	706a      	strb	r2, [r5, #1]
 801cd96:	d04d      	beq.n	801ce34 <ucdr_deserialize_endian_uint32_t+0x104>
 801cd98:	787a      	ldrb	r2, [r7, #1]
 801cd9a:	f1b9 0f02 	cmp.w	r9, #2
 801cd9e:	f105 0303 	add.w	r3, r5, #3
 801cda2:	70aa      	strb	r2, [r5, #2]
 801cda4:	d04a      	beq.n	801ce3c <ucdr_deserialize_endian_uint32_t+0x10c>
 801cda6:	783b      	ldrb	r3, [r7, #0]
 801cda8:	70eb      	strb	r3, [r5, #3]
 801cdaa:	6923      	ldr	r3, [r4, #16]
 801cdac:	2104      	movs	r1, #4
 801cdae:	68a2      	ldr	r2, [r4, #8]
 801cdb0:	440b      	add	r3, r1
 801cdb2:	7da0      	ldrb	r0, [r4, #22]
 801cdb4:	4452      	add	r2, sl
 801cdb6:	7561      	strb	r1, [r4, #21]
 801cdb8:	eba3 0309 	sub.w	r3, r3, r9
 801cdbc:	f080 0001 	eor.w	r0, r0, #1
 801cdc0:	60a2      	str	r2, [r4, #8]
 801cdc2:	6123      	str	r3, [r4, #16]
 801cdc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cdc8:	2104      	movs	r1, #4
 801cdca:	4620      	mov	r0, r4
 801cdcc:	f000 fb3e 	bl	801d44c <ucdr_check_final_buffer_behavior>
 801cdd0:	b1a8      	cbz	r0, 801cdfe <ucdr_deserialize_endian_uint32_t+0xce>
 801cdd2:	2e01      	cmp	r6, #1
 801cdd4:	68a3      	ldr	r3, [r4, #8]
 801cdd6:	d017      	beq.n	801ce08 <ucdr_deserialize_endian_uint32_t+0xd8>
 801cdd8:	78db      	ldrb	r3, [r3, #3]
 801cdda:	702b      	strb	r3, [r5, #0]
 801cddc:	68a3      	ldr	r3, [r4, #8]
 801cdde:	789b      	ldrb	r3, [r3, #2]
 801cde0:	706b      	strb	r3, [r5, #1]
 801cde2:	68a3      	ldr	r3, [r4, #8]
 801cde4:	785b      	ldrb	r3, [r3, #1]
 801cde6:	70ab      	strb	r3, [r5, #2]
 801cde8:	68a3      	ldr	r3, [r4, #8]
 801cdea:	781b      	ldrb	r3, [r3, #0]
 801cdec:	70eb      	strb	r3, [r5, #3]
 801cdee:	2104      	movs	r1, #4
 801cdf0:	68a2      	ldr	r2, [r4, #8]
 801cdf2:	6923      	ldr	r3, [r4, #16]
 801cdf4:	440a      	add	r2, r1
 801cdf6:	7561      	strb	r1, [r4, #21]
 801cdf8:	440b      	add	r3, r1
 801cdfa:	60a2      	str	r2, [r4, #8]
 801cdfc:	6123      	str	r3, [r4, #16]
 801cdfe:	7da0      	ldrb	r0, [r4, #22]
 801ce00:	f080 0001 	eor.w	r0, r0, #1
 801ce04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ce08:	681b      	ldr	r3, [r3, #0]
 801ce0a:	602b      	str	r3, [r5, #0]
 801ce0c:	e7ef      	b.n	801cdee <ucdr_deserialize_endian_uint32_t+0xbe>
 801ce0e:	68a2      	ldr	r2, [r4, #8]
 801ce10:	6923      	ldr	r3, [r4, #16]
 801ce12:	eba2 0209 	sub.w	r2, r2, r9
 801ce16:	7da0      	ldrb	r0, [r4, #22]
 801ce18:	eba3 0309 	sub.w	r3, r3, r9
 801ce1c:	f884 8015 	strb.w	r8, [r4, #21]
 801ce20:	f080 0001 	eor.w	r0, r0, #1
 801ce24:	60a2      	str	r2, [r4, #8]
 801ce26:	6123      	str	r3, [r4, #16]
 801ce28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ce2c:	68a2      	ldr	r2, [r4, #8]
 801ce2e:	1cab      	adds	r3, r5, #2
 801ce30:	7892      	ldrb	r2, [r2, #2]
 801ce32:	706a      	strb	r2, [r5, #1]
 801ce34:	68a2      	ldr	r2, [r4, #8]
 801ce36:	7852      	ldrb	r2, [r2, #1]
 801ce38:	f803 2b01 	strb.w	r2, [r3], #1
 801ce3c:	68a2      	ldr	r2, [r4, #8]
 801ce3e:	7812      	ldrb	r2, [r2, #0]
 801ce40:	701a      	strb	r2, [r3, #0]
 801ce42:	e7b2      	b.n	801cdaa <ucdr_deserialize_endian_uint32_t+0x7a>
 801ce44:	4639      	mov	r1, r7
 801ce46:	464a      	mov	r2, r9
 801ce48:	4628      	mov	r0, r5
 801ce4a:	f006 fda3 	bl	8023994 <memcpy>
 801ce4e:	4652      	mov	r2, sl
 801ce50:	eb05 0009 	add.w	r0, r5, r9
 801ce54:	68a1      	ldr	r1, [r4, #8]
 801ce56:	f006 fd9d 	bl	8023994 <memcpy>
 801ce5a:	e7a6      	b.n	801cdaa <ucdr_deserialize_endian_uint32_t+0x7a>

0801ce5c <ucdr_serialize_uint64_t>:
 801ce5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ce60:	4604      	mov	r4, r0
 801ce62:	b082      	sub	sp, #8
 801ce64:	2108      	movs	r1, #8
 801ce66:	e9cd 2300 	strd	r2, r3, [sp]
 801ce6a:	f000 fb41 	bl	801d4f0 <ucdr_buffer_alignment>
 801ce6e:	4601      	mov	r1, r0
 801ce70:	4620      	mov	r0, r4
 801ce72:	7d67      	ldrb	r7, [r4, #21]
 801ce74:	f000 fb84 	bl	801d580 <ucdr_advance_buffer>
 801ce78:	4620      	mov	r0, r4
 801ce7a:	2108      	movs	r1, #8
 801ce7c:	f000 fada 	bl	801d434 <ucdr_check_buffer_available_for>
 801ce80:	2800      	cmp	r0, #0
 801ce82:	d14e      	bne.n	801cf22 <ucdr_serialize_uint64_t+0xc6>
 801ce84:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801ce88:	42ab      	cmp	r3, r5
 801ce8a:	d945      	bls.n	801cf18 <ucdr_serialize_uint64_t+0xbc>
 801ce8c:	1b5e      	subs	r6, r3, r5
 801ce8e:	6922      	ldr	r2, [r4, #16]
 801ce90:	4620      	mov	r0, r4
 801ce92:	60a3      	str	r3, [r4, #8]
 801ce94:	4432      	add	r2, r6
 801ce96:	f1c6 0808 	rsb	r8, r6, #8
 801ce9a:	6122      	str	r2, [r4, #16]
 801ce9c:	4641      	mov	r1, r8
 801ce9e:	f000 fad5 	bl	801d44c <ucdr_check_final_buffer_behavior>
 801cea2:	2800      	cmp	r0, #0
 801cea4:	d074      	beq.n	801cf90 <ucdr_serialize_uint64_t+0x134>
 801cea6:	7d23      	ldrb	r3, [r4, #20]
 801cea8:	2b01      	cmp	r3, #1
 801ceaa:	f000 809b 	beq.w	801cfe4 <ucdr_serialize_uint64_t+0x188>
 801ceae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801ceb2:	702b      	strb	r3, [r5, #0]
 801ceb4:	2e00      	cmp	r6, #0
 801ceb6:	d078      	beq.n	801cfaa <ucdr_serialize_uint64_t+0x14e>
 801ceb8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801cebc:	2e01      	cmp	r6, #1
 801cebe:	706b      	strb	r3, [r5, #1]
 801cec0:	d077      	beq.n	801cfb2 <ucdr_serialize_uint64_t+0x156>
 801cec2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801cec6:	2e02      	cmp	r6, #2
 801cec8:	70ab      	strb	r3, [r5, #2]
 801ceca:	d076      	beq.n	801cfba <ucdr_serialize_uint64_t+0x15e>
 801cecc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801ced0:	2e03      	cmp	r6, #3
 801ced2:	70eb      	strb	r3, [r5, #3]
 801ced4:	d075      	beq.n	801cfc2 <ucdr_serialize_uint64_t+0x166>
 801ced6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801ceda:	2e04      	cmp	r6, #4
 801cedc:	712b      	strb	r3, [r5, #4]
 801cede:	d074      	beq.n	801cfca <ucdr_serialize_uint64_t+0x16e>
 801cee0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 801cee4:	2e05      	cmp	r6, #5
 801cee6:	716b      	strb	r3, [r5, #5]
 801cee8:	d073      	beq.n	801cfd2 <ucdr_serialize_uint64_t+0x176>
 801ceea:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801ceee:	2e06      	cmp	r6, #6
 801cef0:	71ab      	strb	r3, [r5, #6]
 801cef2:	d072      	beq.n	801cfda <ucdr_serialize_uint64_t+0x17e>
 801cef4:	f89d 3000 	ldrb.w	r3, [sp]
 801cef8:	71eb      	strb	r3, [r5, #7]
 801cefa:	6923      	ldr	r3, [r4, #16]
 801cefc:	2108      	movs	r1, #8
 801cefe:	68a2      	ldr	r2, [r4, #8]
 801cf00:	440b      	add	r3, r1
 801cf02:	7da0      	ldrb	r0, [r4, #22]
 801cf04:	4442      	add	r2, r8
 801cf06:	7561      	strb	r1, [r4, #21]
 801cf08:	1b9e      	subs	r6, r3, r6
 801cf0a:	f080 0001 	eor.w	r0, r0, #1
 801cf0e:	60a2      	str	r2, [r4, #8]
 801cf10:	6126      	str	r6, [r4, #16]
 801cf12:	b002      	add	sp, #8
 801cf14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cf18:	2108      	movs	r1, #8
 801cf1a:	4620      	mov	r0, r4
 801cf1c:	f000 fa96 	bl	801d44c <ucdr_check_final_buffer_behavior>
 801cf20:	b350      	cbz	r0, 801cf78 <ucdr_serialize_uint64_t+0x11c>
 801cf22:	7d23      	ldrb	r3, [r4, #20]
 801cf24:	2b01      	cmp	r3, #1
 801cf26:	d02d      	beq.n	801cf84 <ucdr_serialize_uint64_t+0x128>
 801cf28:	68a3      	ldr	r3, [r4, #8]
 801cf2a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801cf2e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801cf32:	7019      	strb	r1, [r3, #0]
 801cf34:	68a3      	ldr	r3, [r4, #8]
 801cf36:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801cf3a:	705a      	strb	r2, [r3, #1]
 801cf3c:	68a3      	ldr	r3, [r4, #8]
 801cf3e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801cf42:	7099      	strb	r1, [r3, #2]
 801cf44:	68a3      	ldr	r3, [r4, #8]
 801cf46:	f89d 1003 	ldrb.w	r1, [sp, #3]
 801cf4a:	70da      	strb	r2, [r3, #3]
 801cf4c:	68a3      	ldr	r3, [r4, #8]
 801cf4e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801cf52:	7119      	strb	r1, [r3, #4]
 801cf54:	68a3      	ldr	r3, [r4, #8]
 801cf56:	f89d 1001 	ldrb.w	r1, [sp, #1]
 801cf5a:	715a      	strb	r2, [r3, #5]
 801cf5c:	68a3      	ldr	r3, [r4, #8]
 801cf5e:	f89d 2000 	ldrb.w	r2, [sp]
 801cf62:	7199      	strb	r1, [r3, #6]
 801cf64:	68a3      	ldr	r3, [r4, #8]
 801cf66:	71da      	strb	r2, [r3, #7]
 801cf68:	2108      	movs	r1, #8
 801cf6a:	68a2      	ldr	r2, [r4, #8]
 801cf6c:	6923      	ldr	r3, [r4, #16]
 801cf6e:	440a      	add	r2, r1
 801cf70:	7561      	strb	r1, [r4, #21]
 801cf72:	440b      	add	r3, r1
 801cf74:	60a2      	str	r2, [r4, #8]
 801cf76:	6123      	str	r3, [r4, #16]
 801cf78:	7da0      	ldrb	r0, [r4, #22]
 801cf7a:	f080 0001 	eor.w	r0, r0, #1
 801cf7e:	b002      	add	sp, #8
 801cf80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cf84:	466b      	mov	r3, sp
 801cf86:	68a2      	ldr	r2, [r4, #8]
 801cf88:	cb03      	ldmia	r3!, {r0, r1}
 801cf8a:	6010      	str	r0, [r2, #0]
 801cf8c:	6051      	str	r1, [r2, #4]
 801cf8e:	e7eb      	b.n	801cf68 <ucdr_serialize_uint64_t+0x10c>
 801cf90:	68a2      	ldr	r2, [r4, #8]
 801cf92:	6923      	ldr	r3, [r4, #16]
 801cf94:	7da0      	ldrb	r0, [r4, #22]
 801cf96:	1b92      	subs	r2, r2, r6
 801cf98:	1b9e      	subs	r6, r3, r6
 801cf9a:	7567      	strb	r7, [r4, #21]
 801cf9c:	f080 0001 	eor.w	r0, r0, #1
 801cfa0:	60a2      	str	r2, [r4, #8]
 801cfa2:	6126      	str	r6, [r4, #16]
 801cfa4:	b002      	add	sp, #8
 801cfa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cfaa:	68a3      	ldr	r3, [r4, #8]
 801cfac:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801cfb0:	701a      	strb	r2, [r3, #0]
 801cfb2:	68a3      	ldr	r3, [r4, #8]
 801cfb4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801cfb8:	701a      	strb	r2, [r3, #0]
 801cfba:	68a3      	ldr	r3, [r4, #8]
 801cfbc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801cfc0:	701a      	strb	r2, [r3, #0]
 801cfc2:	68a3      	ldr	r3, [r4, #8]
 801cfc4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801cfc8:	701a      	strb	r2, [r3, #0]
 801cfca:	68a3      	ldr	r3, [r4, #8]
 801cfcc:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801cfd0:	701a      	strb	r2, [r3, #0]
 801cfd2:	68a3      	ldr	r3, [r4, #8]
 801cfd4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801cfd8:	701a      	strb	r2, [r3, #0]
 801cfda:	68a3      	ldr	r3, [r4, #8]
 801cfdc:	f89d 2000 	ldrb.w	r2, [sp]
 801cfe0:	701a      	strb	r2, [r3, #0]
 801cfe2:	e78a      	b.n	801cefa <ucdr_serialize_uint64_t+0x9e>
 801cfe4:	4628      	mov	r0, r5
 801cfe6:	466d      	mov	r5, sp
 801cfe8:	4632      	mov	r2, r6
 801cfea:	4629      	mov	r1, r5
 801cfec:	f006 fcd2 	bl	8023994 <memcpy>
 801cff0:	4642      	mov	r2, r8
 801cff2:	19a9      	adds	r1, r5, r6
 801cff4:	68a0      	ldr	r0, [r4, #8]
 801cff6:	f006 fccd 	bl	8023994 <memcpy>
 801cffa:	e77e      	b.n	801cefa <ucdr_serialize_uint64_t+0x9e>

0801cffc <ucdr_serialize_int16_t>:
 801cffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d000:	460b      	mov	r3, r1
 801d002:	b082      	sub	sp, #8
 801d004:	4604      	mov	r4, r0
 801d006:	2102      	movs	r1, #2
 801d008:	f8ad 3006 	strh.w	r3, [sp, #6]
 801d00c:	f000 fa70 	bl	801d4f0 <ucdr_buffer_alignment>
 801d010:	4601      	mov	r1, r0
 801d012:	4620      	mov	r0, r4
 801d014:	7d67      	ldrb	r7, [r4, #21]
 801d016:	f000 fab3 	bl	801d580 <ucdr_advance_buffer>
 801d01a:	4620      	mov	r0, r4
 801d01c:	2102      	movs	r1, #2
 801d01e:	f000 fa09 	bl	801d434 <ucdr_check_buffer_available_for>
 801d022:	bb78      	cbnz	r0, 801d084 <ucdr_serialize_int16_t+0x88>
 801d024:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801d028:	42ab      	cmp	r3, r5
 801d02a:	d926      	bls.n	801d07a <ucdr_serialize_int16_t+0x7e>
 801d02c:	1b5e      	subs	r6, r3, r5
 801d02e:	6922      	ldr	r2, [r4, #16]
 801d030:	4620      	mov	r0, r4
 801d032:	60a3      	str	r3, [r4, #8]
 801d034:	4432      	add	r2, r6
 801d036:	f1c6 0802 	rsb	r8, r6, #2
 801d03a:	6122      	str	r2, [r4, #16]
 801d03c:	4641      	mov	r1, r8
 801d03e:	f000 fa05 	bl	801d44c <ucdr_check_final_buffer_behavior>
 801d042:	2800      	cmp	r0, #0
 801d044:	d03b      	beq.n	801d0be <ucdr_serialize_int16_t+0xc2>
 801d046:	7d23      	ldrb	r3, [r4, #20]
 801d048:	2b01      	cmp	r3, #1
 801d04a:	d04a      	beq.n	801d0e2 <ucdr_serialize_int16_t+0xe6>
 801d04c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801d050:	702b      	strb	r3, [r5, #0]
 801d052:	2e00      	cmp	r6, #0
 801d054:	d040      	beq.n	801d0d8 <ucdr_serialize_int16_t+0xdc>
 801d056:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801d05a:	706b      	strb	r3, [r5, #1]
 801d05c:	6923      	ldr	r3, [r4, #16]
 801d05e:	2102      	movs	r1, #2
 801d060:	68a2      	ldr	r2, [r4, #8]
 801d062:	440b      	add	r3, r1
 801d064:	7da0      	ldrb	r0, [r4, #22]
 801d066:	4442      	add	r2, r8
 801d068:	7561      	strb	r1, [r4, #21]
 801d06a:	1b9e      	subs	r6, r3, r6
 801d06c:	f080 0001 	eor.w	r0, r0, #1
 801d070:	60a2      	str	r2, [r4, #8]
 801d072:	6126      	str	r6, [r4, #16]
 801d074:	b002      	add	sp, #8
 801d076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d07a:	2102      	movs	r1, #2
 801d07c:	4620      	mov	r0, r4
 801d07e:	f000 f9e5 	bl	801d44c <ucdr_check_final_buffer_behavior>
 801d082:	b190      	cbz	r0, 801d0aa <ucdr_serialize_int16_t+0xae>
 801d084:	7d23      	ldrb	r3, [r4, #20]
 801d086:	2b01      	cmp	r3, #1
 801d088:	68a3      	ldr	r3, [r4, #8]
 801d08a:	d014      	beq.n	801d0b6 <ucdr_serialize_int16_t+0xba>
 801d08c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801d090:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801d094:	7019      	strb	r1, [r3, #0]
 801d096:	68a3      	ldr	r3, [r4, #8]
 801d098:	705a      	strb	r2, [r3, #1]
 801d09a:	2102      	movs	r1, #2
 801d09c:	68a2      	ldr	r2, [r4, #8]
 801d09e:	6923      	ldr	r3, [r4, #16]
 801d0a0:	440a      	add	r2, r1
 801d0a2:	7561      	strb	r1, [r4, #21]
 801d0a4:	440b      	add	r3, r1
 801d0a6:	60a2      	str	r2, [r4, #8]
 801d0a8:	6123      	str	r3, [r4, #16]
 801d0aa:	7da0      	ldrb	r0, [r4, #22]
 801d0ac:	f080 0001 	eor.w	r0, r0, #1
 801d0b0:	b002      	add	sp, #8
 801d0b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d0b6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801d0ba:	801a      	strh	r2, [r3, #0]
 801d0bc:	e7ed      	b.n	801d09a <ucdr_serialize_int16_t+0x9e>
 801d0be:	68a2      	ldr	r2, [r4, #8]
 801d0c0:	6923      	ldr	r3, [r4, #16]
 801d0c2:	7da0      	ldrb	r0, [r4, #22]
 801d0c4:	1b92      	subs	r2, r2, r6
 801d0c6:	1b9e      	subs	r6, r3, r6
 801d0c8:	7567      	strb	r7, [r4, #21]
 801d0ca:	f080 0001 	eor.w	r0, r0, #1
 801d0ce:	60a2      	str	r2, [r4, #8]
 801d0d0:	6126      	str	r6, [r4, #16]
 801d0d2:	b002      	add	sp, #8
 801d0d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d0d8:	68a3      	ldr	r3, [r4, #8]
 801d0da:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801d0de:	701a      	strb	r2, [r3, #0]
 801d0e0:	e7bc      	b.n	801d05c <ucdr_serialize_int16_t+0x60>
 801d0e2:	4628      	mov	r0, r5
 801d0e4:	f10d 0506 	add.w	r5, sp, #6
 801d0e8:	4632      	mov	r2, r6
 801d0ea:	4629      	mov	r1, r5
 801d0ec:	f006 fc52 	bl	8023994 <memcpy>
 801d0f0:	4642      	mov	r2, r8
 801d0f2:	19a9      	adds	r1, r5, r6
 801d0f4:	68a0      	ldr	r0, [r4, #8]
 801d0f6:	f006 fc4d 	bl	8023994 <memcpy>
 801d0fa:	e7af      	b.n	801d05c <ucdr_serialize_int16_t+0x60>

0801d0fc <ucdr_deserialize_int16_t>:
 801d0fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d100:	4604      	mov	r4, r0
 801d102:	460d      	mov	r5, r1
 801d104:	2102      	movs	r1, #2
 801d106:	f000 f9f3 	bl	801d4f0 <ucdr_buffer_alignment>
 801d10a:	4601      	mov	r1, r0
 801d10c:	4620      	mov	r0, r4
 801d10e:	f894 8015 	ldrb.w	r8, [r4, #21]
 801d112:	f000 fa35 	bl	801d580 <ucdr_advance_buffer>
 801d116:	4620      	mov	r0, r4
 801d118:	2102      	movs	r1, #2
 801d11a:	f000 f98b 	bl	801d434 <ucdr_check_buffer_available_for>
 801d11e:	bb60      	cbnz	r0, 801d17a <ucdr_deserialize_int16_t+0x7e>
 801d120:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 801d124:	42b3      	cmp	r3, r6
 801d126:	d923      	bls.n	801d170 <ucdr_deserialize_int16_t+0x74>
 801d128:	1b9f      	subs	r7, r3, r6
 801d12a:	6922      	ldr	r2, [r4, #16]
 801d12c:	4620      	mov	r0, r4
 801d12e:	60a3      	str	r3, [r4, #8]
 801d130:	443a      	add	r2, r7
 801d132:	f1c7 0902 	rsb	r9, r7, #2
 801d136:	6122      	str	r2, [r4, #16]
 801d138:	4649      	mov	r1, r9
 801d13a:	f000 f987 	bl	801d44c <ucdr_check_final_buffer_behavior>
 801d13e:	2800      	cmp	r0, #0
 801d140:	d034      	beq.n	801d1ac <ucdr_deserialize_int16_t+0xb0>
 801d142:	7d23      	ldrb	r3, [r4, #20]
 801d144:	2b01      	cmp	r3, #1
 801d146:	d042      	beq.n	801d1ce <ucdr_deserialize_int16_t+0xd2>
 801d148:	7873      	ldrb	r3, [r6, #1]
 801d14a:	702b      	strb	r3, [r5, #0]
 801d14c:	2f00      	cmp	r7, #0
 801d14e:	d03a      	beq.n	801d1c6 <ucdr_deserialize_int16_t+0xca>
 801d150:	7833      	ldrb	r3, [r6, #0]
 801d152:	706b      	strb	r3, [r5, #1]
 801d154:	6923      	ldr	r3, [r4, #16]
 801d156:	2102      	movs	r1, #2
 801d158:	68a2      	ldr	r2, [r4, #8]
 801d15a:	440b      	add	r3, r1
 801d15c:	7da0      	ldrb	r0, [r4, #22]
 801d15e:	444a      	add	r2, r9
 801d160:	7561      	strb	r1, [r4, #21]
 801d162:	1bdf      	subs	r7, r3, r7
 801d164:	f080 0001 	eor.w	r0, r0, #1
 801d168:	60a2      	str	r2, [r4, #8]
 801d16a:	6127      	str	r7, [r4, #16]
 801d16c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d170:	2102      	movs	r1, #2
 801d172:	4620      	mov	r0, r4
 801d174:	f000 f96a 	bl	801d44c <ucdr_check_final_buffer_behavior>
 801d178:	b180      	cbz	r0, 801d19c <ucdr_deserialize_int16_t+0xa0>
 801d17a:	7d23      	ldrb	r3, [r4, #20]
 801d17c:	2b01      	cmp	r3, #1
 801d17e:	68a3      	ldr	r3, [r4, #8]
 801d180:	d011      	beq.n	801d1a6 <ucdr_deserialize_int16_t+0xaa>
 801d182:	785b      	ldrb	r3, [r3, #1]
 801d184:	702b      	strb	r3, [r5, #0]
 801d186:	68a3      	ldr	r3, [r4, #8]
 801d188:	781b      	ldrb	r3, [r3, #0]
 801d18a:	706b      	strb	r3, [r5, #1]
 801d18c:	2102      	movs	r1, #2
 801d18e:	68a2      	ldr	r2, [r4, #8]
 801d190:	6923      	ldr	r3, [r4, #16]
 801d192:	440a      	add	r2, r1
 801d194:	7561      	strb	r1, [r4, #21]
 801d196:	440b      	add	r3, r1
 801d198:	60a2      	str	r2, [r4, #8]
 801d19a:	6123      	str	r3, [r4, #16]
 801d19c:	7da0      	ldrb	r0, [r4, #22]
 801d19e:	f080 0001 	eor.w	r0, r0, #1
 801d1a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d1a6:	881b      	ldrh	r3, [r3, #0]
 801d1a8:	802b      	strh	r3, [r5, #0]
 801d1aa:	e7ef      	b.n	801d18c <ucdr_deserialize_int16_t+0x90>
 801d1ac:	68a2      	ldr	r2, [r4, #8]
 801d1ae:	6923      	ldr	r3, [r4, #16]
 801d1b0:	1bd2      	subs	r2, r2, r7
 801d1b2:	7da0      	ldrb	r0, [r4, #22]
 801d1b4:	1bdf      	subs	r7, r3, r7
 801d1b6:	f884 8015 	strb.w	r8, [r4, #21]
 801d1ba:	f080 0001 	eor.w	r0, r0, #1
 801d1be:	60a2      	str	r2, [r4, #8]
 801d1c0:	6127      	str	r7, [r4, #16]
 801d1c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d1c6:	68a3      	ldr	r3, [r4, #8]
 801d1c8:	781b      	ldrb	r3, [r3, #0]
 801d1ca:	706b      	strb	r3, [r5, #1]
 801d1cc:	e7c2      	b.n	801d154 <ucdr_deserialize_int16_t+0x58>
 801d1ce:	4631      	mov	r1, r6
 801d1d0:	463a      	mov	r2, r7
 801d1d2:	4628      	mov	r0, r5
 801d1d4:	f006 fbde 	bl	8023994 <memcpy>
 801d1d8:	464a      	mov	r2, r9
 801d1da:	19e8      	adds	r0, r5, r7
 801d1dc:	68a1      	ldr	r1, [r4, #8]
 801d1de:	f006 fbd9 	bl	8023994 <memcpy>
 801d1e2:	e7b7      	b.n	801d154 <ucdr_deserialize_int16_t+0x58>

0801d1e4 <ucdr_serialize_int32_t>:
 801d1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d1e8:	b082      	sub	sp, #8
 801d1ea:	4604      	mov	r4, r0
 801d1ec:	9101      	str	r1, [sp, #4]
 801d1ee:	2104      	movs	r1, #4
 801d1f0:	f000 f97e 	bl	801d4f0 <ucdr_buffer_alignment>
 801d1f4:	4601      	mov	r1, r0
 801d1f6:	4620      	mov	r0, r4
 801d1f8:	7d67      	ldrb	r7, [r4, #21]
 801d1fa:	f000 f9c1 	bl	801d580 <ucdr_advance_buffer>
 801d1fe:	4620      	mov	r0, r4
 801d200:	2104      	movs	r1, #4
 801d202:	f000 f917 	bl	801d434 <ucdr_check_buffer_available_for>
 801d206:	2800      	cmp	r0, #0
 801d208:	d139      	bne.n	801d27e <ucdr_serialize_int32_t+0x9a>
 801d20a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801d20e:	42ab      	cmp	r3, r5
 801d210:	d930      	bls.n	801d274 <ucdr_serialize_int32_t+0x90>
 801d212:	1b5e      	subs	r6, r3, r5
 801d214:	6922      	ldr	r2, [r4, #16]
 801d216:	4620      	mov	r0, r4
 801d218:	60a3      	str	r3, [r4, #8]
 801d21a:	4432      	add	r2, r6
 801d21c:	f1c6 0804 	rsb	r8, r6, #4
 801d220:	6122      	str	r2, [r4, #16]
 801d222:	4641      	mov	r1, r8
 801d224:	f000 f912 	bl	801d44c <ucdr_check_final_buffer_behavior>
 801d228:	2800      	cmp	r0, #0
 801d22a:	d04c      	beq.n	801d2c6 <ucdr_serialize_int32_t+0xe2>
 801d22c:	7d23      	ldrb	r3, [r4, #20]
 801d22e:	2b01      	cmp	r3, #1
 801d230:	d063      	beq.n	801d2fa <ucdr_serialize_int32_t+0x116>
 801d232:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801d236:	702b      	strb	r3, [r5, #0]
 801d238:	2e00      	cmp	r6, #0
 801d23a:	d051      	beq.n	801d2e0 <ucdr_serialize_int32_t+0xfc>
 801d23c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801d240:	2e01      	cmp	r6, #1
 801d242:	706b      	strb	r3, [r5, #1]
 801d244:	d050      	beq.n	801d2e8 <ucdr_serialize_int32_t+0x104>
 801d246:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801d24a:	2e02      	cmp	r6, #2
 801d24c:	70ab      	strb	r3, [r5, #2]
 801d24e:	d04f      	beq.n	801d2f0 <ucdr_serialize_int32_t+0x10c>
 801d250:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801d254:	70eb      	strb	r3, [r5, #3]
 801d256:	6923      	ldr	r3, [r4, #16]
 801d258:	2104      	movs	r1, #4
 801d25a:	68a2      	ldr	r2, [r4, #8]
 801d25c:	440b      	add	r3, r1
 801d25e:	7da0      	ldrb	r0, [r4, #22]
 801d260:	4442      	add	r2, r8
 801d262:	7561      	strb	r1, [r4, #21]
 801d264:	1b9e      	subs	r6, r3, r6
 801d266:	f080 0001 	eor.w	r0, r0, #1
 801d26a:	60a2      	str	r2, [r4, #8]
 801d26c:	6126      	str	r6, [r4, #16]
 801d26e:	b002      	add	sp, #8
 801d270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d274:	2104      	movs	r1, #4
 801d276:	4620      	mov	r0, r4
 801d278:	f000 f8e8 	bl	801d44c <ucdr_check_final_buffer_behavior>
 801d27c:	b1d0      	cbz	r0, 801d2b4 <ucdr_serialize_int32_t+0xd0>
 801d27e:	7d23      	ldrb	r3, [r4, #20]
 801d280:	2b01      	cmp	r3, #1
 801d282:	68a3      	ldr	r3, [r4, #8]
 801d284:	d01c      	beq.n	801d2c0 <ucdr_serialize_int32_t+0xdc>
 801d286:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801d28a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801d28e:	7019      	strb	r1, [r3, #0]
 801d290:	68a3      	ldr	r3, [r4, #8]
 801d292:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801d296:	705a      	strb	r2, [r3, #1]
 801d298:	68a3      	ldr	r3, [r4, #8]
 801d29a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801d29e:	7099      	strb	r1, [r3, #2]
 801d2a0:	68a3      	ldr	r3, [r4, #8]
 801d2a2:	70da      	strb	r2, [r3, #3]
 801d2a4:	2104      	movs	r1, #4
 801d2a6:	68a2      	ldr	r2, [r4, #8]
 801d2a8:	6923      	ldr	r3, [r4, #16]
 801d2aa:	440a      	add	r2, r1
 801d2ac:	7561      	strb	r1, [r4, #21]
 801d2ae:	440b      	add	r3, r1
 801d2b0:	60a2      	str	r2, [r4, #8]
 801d2b2:	6123      	str	r3, [r4, #16]
 801d2b4:	7da0      	ldrb	r0, [r4, #22]
 801d2b6:	f080 0001 	eor.w	r0, r0, #1
 801d2ba:	b002      	add	sp, #8
 801d2bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d2c0:	9a01      	ldr	r2, [sp, #4]
 801d2c2:	601a      	str	r2, [r3, #0]
 801d2c4:	e7ee      	b.n	801d2a4 <ucdr_serialize_int32_t+0xc0>
 801d2c6:	68a2      	ldr	r2, [r4, #8]
 801d2c8:	6923      	ldr	r3, [r4, #16]
 801d2ca:	7da0      	ldrb	r0, [r4, #22]
 801d2cc:	1b92      	subs	r2, r2, r6
 801d2ce:	1b9e      	subs	r6, r3, r6
 801d2d0:	7567      	strb	r7, [r4, #21]
 801d2d2:	f080 0001 	eor.w	r0, r0, #1
 801d2d6:	60a2      	str	r2, [r4, #8]
 801d2d8:	6126      	str	r6, [r4, #16]
 801d2da:	b002      	add	sp, #8
 801d2dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d2e0:	68a3      	ldr	r3, [r4, #8]
 801d2e2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801d2e6:	701a      	strb	r2, [r3, #0]
 801d2e8:	68a3      	ldr	r3, [r4, #8]
 801d2ea:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801d2ee:	701a      	strb	r2, [r3, #0]
 801d2f0:	68a3      	ldr	r3, [r4, #8]
 801d2f2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801d2f6:	701a      	strb	r2, [r3, #0]
 801d2f8:	e7ad      	b.n	801d256 <ucdr_serialize_int32_t+0x72>
 801d2fa:	4628      	mov	r0, r5
 801d2fc:	ad01      	add	r5, sp, #4
 801d2fe:	4632      	mov	r2, r6
 801d300:	4629      	mov	r1, r5
 801d302:	f006 fb47 	bl	8023994 <memcpy>
 801d306:	4642      	mov	r2, r8
 801d308:	19a9      	adds	r1, r5, r6
 801d30a:	68a0      	ldr	r0, [r4, #8]
 801d30c:	f006 fb42 	bl	8023994 <memcpy>
 801d310:	e7a1      	b.n	801d256 <ucdr_serialize_int32_t+0x72>
 801d312:	bf00      	nop

0801d314 <ucdr_deserialize_int32_t>:
 801d314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d318:	4604      	mov	r4, r0
 801d31a:	460d      	mov	r5, r1
 801d31c:	2104      	movs	r1, #4
 801d31e:	f000 f8e7 	bl	801d4f0 <ucdr_buffer_alignment>
 801d322:	4601      	mov	r1, r0
 801d324:	4620      	mov	r0, r4
 801d326:	f894 8015 	ldrb.w	r8, [r4, #21]
 801d32a:	f000 f929 	bl	801d580 <ucdr_advance_buffer>
 801d32e:	4620      	mov	r0, r4
 801d330:	2104      	movs	r1, #4
 801d332:	f000 f87f 	bl	801d434 <ucdr_check_buffer_available_for>
 801d336:	2800      	cmp	r0, #0
 801d338:	d138      	bne.n	801d3ac <ucdr_deserialize_int32_t+0x98>
 801d33a:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 801d33e:	42b3      	cmp	r3, r6
 801d340:	d92f      	bls.n	801d3a2 <ucdr_deserialize_int32_t+0x8e>
 801d342:	1b9f      	subs	r7, r3, r6
 801d344:	6922      	ldr	r2, [r4, #16]
 801d346:	4620      	mov	r0, r4
 801d348:	60a3      	str	r3, [r4, #8]
 801d34a:	443a      	add	r2, r7
 801d34c:	f1c7 0904 	rsb	r9, r7, #4
 801d350:	6122      	str	r2, [r4, #16]
 801d352:	4649      	mov	r1, r9
 801d354:	f000 f87a 	bl	801d44c <ucdr_check_final_buffer_behavior>
 801d358:	2800      	cmp	r0, #0
 801d35a:	d046      	beq.n	801d3ea <ucdr_deserialize_int32_t+0xd6>
 801d35c:	7d23      	ldrb	r3, [r4, #20]
 801d35e:	2b01      	cmp	r3, #1
 801d360:	d05c      	beq.n	801d41c <ucdr_deserialize_int32_t+0x108>
 801d362:	78f3      	ldrb	r3, [r6, #3]
 801d364:	702b      	strb	r3, [r5, #0]
 801d366:	2f00      	cmp	r7, #0
 801d368:	d04c      	beq.n	801d404 <ucdr_deserialize_int32_t+0xf0>
 801d36a:	78b2      	ldrb	r2, [r6, #2]
 801d36c:	2f01      	cmp	r7, #1
 801d36e:	f105 0302 	add.w	r3, r5, #2
 801d372:	706a      	strb	r2, [r5, #1]
 801d374:	d04a      	beq.n	801d40c <ucdr_deserialize_int32_t+0xf8>
 801d376:	7872      	ldrb	r2, [r6, #1]
 801d378:	2f02      	cmp	r7, #2
 801d37a:	f105 0303 	add.w	r3, r5, #3
 801d37e:	70aa      	strb	r2, [r5, #2]
 801d380:	d048      	beq.n	801d414 <ucdr_deserialize_int32_t+0x100>
 801d382:	7833      	ldrb	r3, [r6, #0]
 801d384:	70eb      	strb	r3, [r5, #3]
 801d386:	6923      	ldr	r3, [r4, #16]
 801d388:	2104      	movs	r1, #4
 801d38a:	68a2      	ldr	r2, [r4, #8]
 801d38c:	440b      	add	r3, r1
 801d38e:	7da0      	ldrb	r0, [r4, #22]
 801d390:	444a      	add	r2, r9
 801d392:	7561      	strb	r1, [r4, #21]
 801d394:	1bdf      	subs	r7, r3, r7
 801d396:	f080 0001 	eor.w	r0, r0, #1
 801d39a:	60a2      	str	r2, [r4, #8]
 801d39c:	6127      	str	r7, [r4, #16]
 801d39e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d3a2:	2104      	movs	r1, #4
 801d3a4:	4620      	mov	r0, r4
 801d3a6:	f000 f851 	bl	801d44c <ucdr_check_final_buffer_behavior>
 801d3aa:	b1b0      	cbz	r0, 801d3da <ucdr_deserialize_int32_t+0xc6>
 801d3ac:	7d23      	ldrb	r3, [r4, #20]
 801d3ae:	2b01      	cmp	r3, #1
 801d3b0:	68a3      	ldr	r3, [r4, #8]
 801d3b2:	d017      	beq.n	801d3e4 <ucdr_deserialize_int32_t+0xd0>
 801d3b4:	78db      	ldrb	r3, [r3, #3]
 801d3b6:	702b      	strb	r3, [r5, #0]
 801d3b8:	68a3      	ldr	r3, [r4, #8]
 801d3ba:	789b      	ldrb	r3, [r3, #2]
 801d3bc:	706b      	strb	r3, [r5, #1]
 801d3be:	68a3      	ldr	r3, [r4, #8]
 801d3c0:	785b      	ldrb	r3, [r3, #1]
 801d3c2:	70ab      	strb	r3, [r5, #2]
 801d3c4:	68a3      	ldr	r3, [r4, #8]
 801d3c6:	781b      	ldrb	r3, [r3, #0]
 801d3c8:	70eb      	strb	r3, [r5, #3]
 801d3ca:	2104      	movs	r1, #4
 801d3cc:	68a2      	ldr	r2, [r4, #8]
 801d3ce:	6923      	ldr	r3, [r4, #16]
 801d3d0:	440a      	add	r2, r1
 801d3d2:	7561      	strb	r1, [r4, #21]
 801d3d4:	440b      	add	r3, r1
 801d3d6:	60a2      	str	r2, [r4, #8]
 801d3d8:	6123      	str	r3, [r4, #16]
 801d3da:	7da0      	ldrb	r0, [r4, #22]
 801d3dc:	f080 0001 	eor.w	r0, r0, #1
 801d3e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d3e4:	681b      	ldr	r3, [r3, #0]
 801d3e6:	602b      	str	r3, [r5, #0]
 801d3e8:	e7ef      	b.n	801d3ca <ucdr_deserialize_int32_t+0xb6>
 801d3ea:	68a2      	ldr	r2, [r4, #8]
 801d3ec:	6923      	ldr	r3, [r4, #16]
 801d3ee:	1bd2      	subs	r2, r2, r7
 801d3f0:	7da0      	ldrb	r0, [r4, #22]
 801d3f2:	1bdf      	subs	r7, r3, r7
 801d3f4:	f884 8015 	strb.w	r8, [r4, #21]
 801d3f8:	f080 0001 	eor.w	r0, r0, #1
 801d3fc:	60a2      	str	r2, [r4, #8]
 801d3fe:	6127      	str	r7, [r4, #16]
 801d400:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d404:	68a2      	ldr	r2, [r4, #8]
 801d406:	1cab      	adds	r3, r5, #2
 801d408:	7892      	ldrb	r2, [r2, #2]
 801d40a:	706a      	strb	r2, [r5, #1]
 801d40c:	68a2      	ldr	r2, [r4, #8]
 801d40e:	7852      	ldrb	r2, [r2, #1]
 801d410:	f803 2b01 	strb.w	r2, [r3], #1
 801d414:	68a2      	ldr	r2, [r4, #8]
 801d416:	7812      	ldrb	r2, [r2, #0]
 801d418:	701a      	strb	r2, [r3, #0]
 801d41a:	e7b4      	b.n	801d386 <ucdr_deserialize_int32_t+0x72>
 801d41c:	4631      	mov	r1, r6
 801d41e:	463a      	mov	r2, r7
 801d420:	4628      	mov	r0, r5
 801d422:	f006 fab7 	bl	8023994 <memcpy>
 801d426:	464a      	mov	r2, r9
 801d428:	19e8      	adds	r0, r5, r7
 801d42a:	68a1      	ldr	r1, [r4, #8]
 801d42c:	f006 fab2 	bl	8023994 <memcpy>
 801d430:	e7a9      	b.n	801d386 <ucdr_deserialize_int32_t+0x72>
 801d432:	bf00      	nop

0801d434 <ucdr_check_buffer_available_for>:
 801d434:	7d83      	ldrb	r3, [r0, #22]
 801d436:	b93b      	cbnz	r3, 801d448 <ucdr_check_buffer_available_for+0x14>
 801d438:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 801d43c:	4419      	add	r1, r3
 801d43e:	4288      	cmp	r0, r1
 801d440:	bf34      	ite	cc
 801d442:	2000      	movcc	r0, #0
 801d444:	2001      	movcs	r0, #1
 801d446:	4770      	bx	lr
 801d448:	2000      	movs	r0, #0
 801d44a:	4770      	bx	lr

0801d44c <ucdr_check_final_buffer_behavior>:
 801d44c:	7d83      	ldrb	r3, [r0, #22]
 801d44e:	b943      	cbnz	r3, 801d462 <ucdr_check_final_buffer_behavior+0x16>
 801d450:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 801d454:	b510      	push	{r4, lr}
 801d456:	4291      	cmp	r1, r2
 801d458:	4604      	mov	r4, r0
 801d45a:	d205      	bcs.n	801d468 <ucdr_check_final_buffer_behavior+0x1c>
 801d45c:	2301      	movs	r3, #1
 801d45e:	4618      	mov	r0, r3
 801d460:	bd10      	pop	{r4, pc}
 801d462:	2300      	movs	r3, #0
 801d464:	4618      	mov	r0, r3
 801d466:	4770      	bx	lr
 801d468:	6982      	ldr	r2, [r0, #24]
 801d46a:	b13a      	cbz	r2, 801d47c <ucdr_check_final_buffer_behavior+0x30>
 801d46c:	69c1      	ldr	r1, [r0, #28]
 801d46e:	4790      	blx	r2
 801d470:	f080 0301 	eor.w	r3, r0, #1
 801d474:	75a0      	strb	r0, [r4, #22]
 801d476:	b2db      	uxtb	r3, r3
 801d478:	4618      	mov	r0, r3
 801d47a:	bd10      	pop	{r4, pc}
 801d47c:	2001      	movs	r0, #1
 801d47e:	75a0      	strb	r0, [r4, #22]
 801d480:	e7fa      	b.n	801d478 <ucdr_check_final_buffer_behavior+0x2c>
 801d482:	bf00      	nop

0801d484 <ucdr_set_on_full_buffer_callback>:
 801d484:	e9c0 1206 	strd	r1, r2, [r0, #24]
 801d488:	4770      	bx	lr
 801d48a:	bf00      	nop

0801d48c <ucdr_init_buffer_origin_offset_endian>:
 801d48c:	b470      	push	{r4, r5, r6}
 801d48e:	9c03      	ldr	r4, [sp, #12]
 801d490:	440a      	add	r2, r1
 801d492:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801d496:	190e      	adds	r6, r1, r4
 801d498:	6001      	str	r1, [r0, #0]
 801d49a:	441c      	add	r4, r3
 801d49c:	2100      	movs	r1, #0
 801d49e:	7505      	strb	r5, [r0, #20]
 801d4a0:	6104      	str	r4, [r0, #16]
 801d4a2:	60c3      	str	r3, [r0, #12]
 801d4a4:	7541      	strb	r1, [r0, #21]
 801d4a6:	7581      	strb	r1, [r0, #22]
 801d4a8:	e9c0 2601 	strd	r2, r6, [r0, #4]
 801d4ac:	e9c0 1106 	strd	r1, r1, [r0, #24]
 801d4b0:	bc70      	pop	{r4, r5, r6}
 801d4b2:	4770      	bx	lr

0801d4b4 <ucdr_init_buffer_origin_offset>:
 801d4b4:	b530      	push	{r4, r5, lr}
 801d4b6:	b083      	sub	sp, #12
 801d4b8:	2401      	movs	r4, #1
 801d4ba:	9d06      	ldr	r5, [sp, #24]
 801d4bc:	e9cd 5400 	strd	r5, r4, [sp]
 801d4c0:	f7ff ffe4 	bl	801d48c <ucdr_init_buffer_origin_offset_endian>
 801d4c4:	b003      	add	sp, #12
 801d4c6:	bd30      	pop	{r4, r5, pc}

0801d4c8 <ucdr_init_buffer_origin>:
 801d4c8:	b510      	push	{r4, lr}
 801d4ca:	2400      	movs	r4, #0
 801d4cc:	b082      	sub	sp, #8
 801d4ce:	9400      	str	r4, [sp, #0]
 801d4d0:	f7ff fff0 	bl	801d4b4 <ucdr_init_buffer_origin_offset>
 801d4d4:	b002      	add	sp, #8
 801d4d6:	bd10      	pop	{r4, pc}

0801d4d8 <ucdr_init_buffer>:
 801d4d8:	2300      	movs	r3, #0
 801d4da:	f7ff bff5 	b.w	801d4c8 <ucdr_init_buffer_origin>
 801d4de:	bf00      	nop

0801d4e0 <ucdr_alignment>:
 801d4e0:	fbb0 f3f1 	udiv	r3, r0, r1
 801d4e4:	fb03 0311 	mls	r3, r3, r1, r0
 801d4e8:	1e48      	subs	r0, r1, #1
 801d4ea:	1ac9      	subs	r1, r1, r3
 801d4ec:	4008      	ands	r0, r1
 801d4ee:	4770      	bx	lr

0801d4f0 <ucdr_buffer_alignment>:
 801d4f0:	7d43      	ldrb	r3, [r0, #21]
 801d4f2:	428b      	cmp	r3, r1
 801d4f4:	d209      	bcs.n	801d50a <ucdr_buffer_alignment+0x1a>
 801d4f6:	6903      	ldr	r3, [r0, #16]
 801d4f8:	1e4a      	subs	r2, r1, #1
 801d4fa:	fbb3 f0f1 	udiv	r0, r3, r1
 801d4fe:	fb01 3010 	mls	r0, r1, r0, r3
 801d502:	1a09      	subs	r1, r1, r0
 801d504:	ea01 0002 	and.w	r0, r1, r2
 801d508:	4770      	bx	lr
 801d50a:	2000      	movs	r0, #0
 801d50c:	4770      	bx	lr
 801d50e:	bf00      	nop

0801d510 <ucdr_align_to>:
 801d510:	b570      	push	{r4, r5, r6, lr}
 801d512:	4604      	mov	r4, r0
 801d514:	460e      	mov	r6, r1
 801d516:	f7ff ffeb 	bl	801d4f0 <ucdr_buffer_alignment>
 801d51a:	68a5      	ldr	r5, [r4, #8]
 801d51c:	6863      	ldr	r3, [r4, #4]
 801d51e:	4405      	add	r5, r0
 801d520:	6922      	ldr	r2, [r4, #16]
 801d522:	7566      	strb	r6, [r4, #21]
 801d524:	42ab      	cmp	r3, r5
 801d526:	4410      	add	r0, r2
 801d528:	bf28      	it	cs
 801d52a:	462b      	movcs	r3, r5
 801d52c:	6120      	str	r0, [r4, #16]
 801d52e:	60a3      	str	r3, [r4, #8]
 801d530:	bd70      	pop	{r4, r5, r6, pc}
 801d532:	bf00      	nop

0801d534 <ucdr_buffer_length>:
 801d534:	6882      	ldr	r2, [r0, #8]
 801d536:	6800      	ldr	r0, [r0, #0]
 801d538:	1a10      	subs	r0, r2, r0
 801d53a:	4770      	bx	lr

0801d53c <ucdr_buffer_remaining>:
 801d53c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 801d540:	1a10      	subs	r0, r2, r0
 801d542:	4770      	bx	lr

0801d544 <ucdr_check_final_buffer_behavior_array>:
 801d544:	b538      	push	{r3, r4, r5, lr}
 801d546:	7d83      	ldrb	r3, [r0, #22]
 801d548:	b9a3      	cbnz	r3, 801d574 <ucdr_check_final_buffer_behavior_array+0x30>
 801d54a:	4604      	mov	r4, r0
 801d54c:	460d      	mov	r5, r1
 801d54e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 801d552:	429a      	cmp	r2, r3
 801d554:	d300      	bcc.n	801d558 <ucdr_check_final_buffer_behavior_array+0x14>
 801d556:	b931      	cbnz	r1, 801d566 <ucdr_check_final_buffer_behavior_array+0x22>
 801d558:	4620      	mov	r0, r4
 801d55a:	f7ff ffef 	bl	801d53c <ucdr_buffer_remaining>
 801d55e:	42a8      	cmp	r0, r5
 801d560:	bf28      	it	cs
 801d562:	4628      	movcs	r0, r5
 801d564:	bd38      	pop	{r3, r4, r5, pc}
 801d566:	6983      	ldr	r3, [r0, #24]
 801d568:	b133      	cbz	r3, 801d578 <ucdr_check_final_buffer_behavior_array+0x34>
 801d56a:	69c1      	ldr	r1, [r0, #28]
 801d56c:	4798      	blx	r3
 801d56e:	75a0      	strb	r0, [r4, #22]
 801d570:	2800      	cmp	r0, #0
 801d572:	d0f1      	beq.n	801d558 <ucdr_check_final_buffer_behavior_array+0x14>
 801d574:	2000      	movs	r0, #0
 801d576:	bd38      	pop	{r3, r4, r5, pc}
 801d578:	2301      	movs	r3, #1
 801d57a:	7583      	strb	r3, [r0, #22]
 801d57c:	e7fa      	b.n	801d574 <ucdr_check_final_buffer_behavior_array+0x30>
 801d57e:	bf00      	nop

0801d580 <ucdr_advance_buffer>:
 801d580:	b538      	push	{r3, r4, r5, lr}
 801d582:	4604      	mov	r4, r0
 801d584:	460d      	mov	r5, r1
 801d586:	f7ff ff55 	bl	801d434 <ucdr_check_buffer_available_for>
 801d58a:	b178      	cbz	r0, 801d5ac <ucdr_advance_buffer+0x2c>
 801d58c:	68a3      	ldr	r3, [r4, #8]
 801d58e:	6921      	ldr	r1, [r4, #16]
 801d590:	442b      	add	r3, r5
 801d592:	4429      	add	r1, r5
 801d594:	60a3      	str	r3, [r4, #8]
 801d596:	2301      	movs	r3, #1
 801d598:	6121      	str	r1, [r4, #16]
 801d59a:	7563      	strb	r3, [r4, #21]
 801d59c:	bd38      	pop	{r3, r4, r5, pc}
 801d59e:	68a2      	ldr	r2, [r4, #8]
 801d5a0:	1a2d      	subs	r5, r5, r0
 801d5a2:	6923      	ldr	r3, [r4, #16]
 801d5a4:	4402      	add	r2, r0
 801d5a6:	4418      	add	r0, r3
 801d5a8:	60a2      	str	r2, [r4, #8]
 801d5aa:	6120      	str	r0, [r4, #16]
 801d5ac:	2201      	movs	r2, #1
 801d5ae:	4629      	mov	r1, r5
 801d5b0:	4620      	mov	r0, r4
 801d5b2:	f7ff ffc7 	bl	801d544 <ucdr_check_final_buffer_behavior_array>
 801d5b6:	2800      	cmp	r0, #0
 801d5b8:	d1f1      	bne.n	801d59e <ucdr_advance_buffer+0x1e>
 801d5ba:	2301      	movs	r3, #1
 801d5bc:	7563      	strb	r3, [r4, #21]
 801d5be:	bd38      	pop	{r3, r4, r5, pc}

0801d5c0 <uxr_buffer_delete_entity>:
 801d5c0:	b530      	push	{r4, r5, lr}
 801d5c2:	2403      	movs	r4, #3
 801d5c4:	b08f      	sub	sp, #60	; 0x3c
 801d5c6:	2500      	movs	r5, #0
 801d5c8:	9202      	str	r2, [sp, #8]
 801d5ca:	ab06      	add	r3, sp, #24
 801d5cc:	9400      	str	r4, [sp, #0]
 801d5ce:	2204      	movs	r2, #4
 801d5d0:	9501      	str	r5, [sp, #4]
 801d5d2:	4604      	mov	r4, r0
 801d5d4:	9103      	str	r1, [sp, #12]
 801d5d6:	f000 ff21 	bl	801e41c <uxr_prepare_stream_to_write_submessage>
 801d5da:	b918      	cbnz	r0, 801d5e4 <uxr_buffer_delete_entity+0x24>
 801d5dc:	4604      	mov	r4, r0
 801d5de:	4620      	mov	r0, r4
 801d5e0:	b00f      	add	sp, #60	; 0x3c
 801d5e2:	bd30      	pop	{r4, r5, pc}
 801d5e4:	9902      	ldr	r1, [sp, #8]
 801d5e6:	aa05      	add	r2, sp, #20
 801d5e8:	4620      	mov	r0, r4
 801d5ea:	f001 f84d 	bl	801e688 <uxr_init_base_object_request>
 801d5ee:	4604      	mov	r4, r0
 801d5f0:	a905      	add	r1, sp, #20
 801d5f2:	a806      	add	r0, sp, #24
 801d5f4:	f002 f860 	bl	801f6b8 <uxr_serialize_DELETE_Payload>
 801d5f8:	4620      	mov	r0, r4
 801d5fa:	b00f      	add	sp, #60	; 0x3c
 801d5fc:	bd30      	pop	{r4, r5, pc}
 801d5fe:	bf00      	nop

0801d600 <uxr_common_create_entity>:
 801d600:	b510      	push	{r4, lr}
 801d602:	b08c      	sub	sp, #48	; 0x30
 801d604:	4604      	mov	r4, r0
 801d606:	9103      	str	r1, [sp, #12]
 801d608:	f3c2 4107 	ubfx	r1, r2, #16, #8
 801d60c:	9202      	str	r2, [sp, #8]
 801d60e:	2901      	cmp	r1, #1
 801d610:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 801d614:	f04f 0101 	mov.w	r1, #1
 801d618:	bf0c      	ite	eq
 801d61a:	f003 0201 	andeq.w	r2, r3, #1
 801d61e:	2200      	movne	r2, #0
 801d620:	330e      	adds	r3, #14
 801d622:	9001      	str	r0, [sp, #4]
 801d624:	9100      	str	r1, [sp, #0]
 801d626:	4620      	mov	r0, r4
 801d628:	441a      	add	r2, r3
 801d62a:	9903      	ldr	r1, [sp, #12]
 801d62c:	ab04      	add	r3, sp, #16
 801d62e:	b292      	uxth	r2, r2
 801d630:	f000 fef4 	bl	801e41c <uxr_prepare_stream_to_write_submessage>
 801d634:	b918      	cbnz	r0, 801d63e <uxr_common_create_entity+0x3e>
 801d636:	4604      	mov	r4, r0
 801d638:	4620      	mov	r0, r4
 801d63a:	b00c      	add	sp, #48	; 0x30
 801d63c:	bd10      	pop	{r4, pc}
 801d63e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d640:	4620      	mov	r0, r4
 801d642:	9902      	ldr	r1, [sp, #8]
 801d644:	f001 f820 	bl	801e688 <uxr_init_base_object_request>
 801d648:	4604      	mov	r4, r0
 801d64a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801d64c:	a804      	add	r0, sp, #16
 801d64e:	f001 ff9b 	bl	801f588 <uxr_serialize_CREATE_Payload>
 801d652:	4620      	mov	r0, r4
 801d654:	b00c      	add	sp, #48	; 0x30
 801d656:	bd10      	pop	{r4, pc}

0801d658 <uxr_buffer_create_participant_bin>:
 801d658:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d65a:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 801d65e:	2703      	movs	r7, #3
 801d660:	2601      	movs	r6, #1
 801d662:	4605      	mov	r5, r0
 801d664:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 801d668:	2000      	movs	r0, #0
 801d66a:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 801d66c:	ac11      	add	r4, sp, #68	; 0x44
 801d66e:	f88d 0014 	strb.w	r0, [sp, #20]
 801d672:	7227      	strb	r7, [r4, #8]
 801d674:	7126      	strb	r6, [r4, #4]
 801d676:	f89d 7274 	ldrb.w	r7, [sp, #628]	; 0x274
 801d67a:	9103      	str	r1, [sp, #12]
 801d67c:	9202      	str	r2, [sp, #8]
 801d67e:	b1cb      	cbz	r3, 801d6b4 <uxr_buffer_create_participant_bin+0x5c>
 801d680:	f88d 601c 	strb.w	r6, [sp, #28]
 801d684:	9308      	str	r3, [sp, #32]
 801d686:	f44f 7200 	mov.w	r2, #512	; 0x200
 801d68a:	a915      	add	r1, sp, #84	; 0x54
 801d68c:	a809      	add	r0, sp, #36	; 0x24
 801d68e:	f7ff ff23 	bl	801d4d8 <ucdr_init_buffer>
 801d692:	a905      	add	r1, sp, #20
 801d694:	a809      	add	r0, sp, #36	; 0x24
 801d696:	f001 fcdd 	bl	801f054 <uxr_serialize_OBJK_DomainParticipant_Binary>
 801d69a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801d69c:	9401      	str	r4, [sp, #4]
 801d69e:	4628      	mov	r0, r5
 801d6a0:	b2b3      	uxth	r3, r6
 801d6a2:	9700      	str	r7, [sp, #0]
 801d6a4:	60e6      	str	r6, [r4, #12]
 801d6a6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801d6aa:	f7ff ffa9 	bl	801d600 <uxr_common_create_entity>
 801d6ae:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 801d6b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d6b4:	f88d 301c 	strb.w	r3, [sp, #28]
 801d6b8:	e7e5      	b.n	801d686 <uxr_buffer_create_participant_bin+0x2e>
 801d6ba:	bf00      	nop

0801d6bc <uxr_buffer_create_topic_bin>:
 801d6bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d6be:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801d6c2:	2602      	movs	r6, #2
 801d6c4:	4605      	mov	r5, r0
 801d6c6:	4618      	mov	r0, r3
 801d6c8:	9105      	str	r1, [sp, #20]
 801d6ca:	a997      	add	r1, sp, #604	; 0x25c
 801d6cc:	f89d 7280 	ldrb.w	r7, [sp, #640]	; 0x280
 801d6d0:	ac13      	add	r4, sp, #76	; 0x4c
 801d6d2:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
 801d6d6:	9e9f      	ldr	r6, [sp, #636]	; 0x27c
 801d6d8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801d6dc:	f000 f8ec 	bl	801d8b8 <uxr_object_id_to_raw>
 801d6e0:	9b9e      	ldr	r3, [sp, #632]	; 0x278
 801d6e2:	2203      	movs	r2, #3
 801d6e4:	2101      	movs	r1, #1
 801d6e6:	9306      	str	r3, [sp, #24]
 801d6e8:	2300      	movs	r3, #0
 801d6ea:	a80b      	add	r0, sp, #44	; 0x2c
 801d6ec:	7222      	strb	r2, [r4, #8]
 801d6ee:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801d6f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 801d6f6:	a917      	add	r1, sp, #92	; 0x5c
 801d6f8:	f88d 301c 	strb.w	r3, [sp, #28]
 801d6fc:	960a      	str	r6, [sp, #40]	; 0x28
 801d6fe:	f7ff feeb 	bl	801d4d8 <ucdr_init_buffer>
 801d702:	a906      	add	r1, sp, #24
 801d704:	a80b      	add	r0, sp, #44	; 0x2c
 801d706:	f001 fcc7 	bl	801f098 <uxr_serialize_OBJK_Topic_Binary>
 801d70a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801d70c:	9401      	str	r4, [sp, #4]
 801d70e:	4628      	mov	r0, r5
 801d710:	b2b3      	uxth	r3, r6
 801d712:	9700      	str	r7, [sp, #0]
 801d714:	60e6      	str	r6, [r4, #12]
 801d716:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801d71a:	f7ff ff71 	bl	801d600 <uxr_common_create_entity>
 801d71e:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801d722:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d724 <uxr_buffer_create_publisher_bin>:
 801d724:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d726:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 801d72a:	2603      	movs	r6, #3
 801d72c:	4605      	mov	r5, r0
 801d72e:	4618      	mov	r0, r3
 801d730:	9105      	str	r1, [sp, #20]
 801d732:	a992      	add	r1, sp, #584	; 0x248
 801d734:	ac0e      	add	r4, sp, #56	; 0x38
 801d736:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 801d73a:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 801d73e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801d742:	f000 f8b9 	bl	801d8b8 <uxr_object_id_to_raw>
 801d746:	2300      	movs	r3, #0
 801d748:	a806      	add	r0, sp, #24
 801d74a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801d74e:	a912      	add	r1, sp, #72	; 0x48
 801d750:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 801d754:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 801d758:	7226      	strb	r6, [r4, #8]
 801d75a:	f7ff febd 	bl	801d4d8 <ucdr_init_buffer>
 801d75e:	a993      	add	r1, sp, #588	; 0x24c
 801d760:	a806      	add	r0, sp, #24
 801d762:	f001 fd4d 	bl	801f200 <uxr_serialize_OBJK_Publisher_Binary>
 801d766:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801d768:	9700      	str	r7, [sp, #0]
 801d76a:	4628      	mov	r0, r5
 801d76c:	b2b3      	uxth	r3, r6
 801d76e:	9401      	str	r4, [sp, #4]
 801d770:	60e6      	str	r6, [r4, #12]
 801d772:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801d776:	f7ff ff43 	bl	801d600 <uxr_common_create_entity>
 801d77a:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 801d77e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d780 <uxr_buffer_create_datawriter_bin>:
 801d780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d784:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801d788:	2705      	movs	r7, #5
 801d78a:	4605      	mov	r5, r0
 801d78c:	2603      	movs	r6, #3
 801d78e:	ac1d      	add	r4, sp, #116	; 0x74
 801d790:	4618      	mov	r0, r3
 801d792:	f8bd 82a8 	ldrh.w	r8, [sp, #680]	; 0x2a8
 801d796:	9105      	str	r1, [sp, #20]
 801d798:	a9a1      	add	r1, sp, #644	; 0x284
 801d79a:	9204      	str	r2, [sp, #16]
 801d79c:	9303      	str	r3, [sp, #12]
 801d79e:	7127      	strb	r7, [r4, #4]
 801d7a0:	f89d 72ac 	ldrb.w	r7, [sp, #684]	; 0x2ac
 801d7a4:	f000 f888 	bl	801d8b8 <uxr_object_id_to_raw>
 801d7a8:	a90e      	add	r1, sp, #56	; 0x38
 801d7aa:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 801d7ac:	7226      	strb	r6, [r4, #8]
 801d7ae:	f000 f883 	bl	801d8b8 <uxr_object_id_to_raw>
 801d7b2:	f1b8 0000 	subs.w	r0, r8, #0
 801d7b6:	f04f 0300 	mov.w	r3, #0
 801d7ba:	f04f 0201 	mov.w	r2, #1
 801d7be:	f89d 12a5 	ldrb.w	r1, [sp, #677]	; 0x2a5
 801d7c2:	bf18      	it	ne
 801d7c4:	2001      	movne	r0, #1
 801d7c6:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 801d7ca:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 801d7ce:	f88d 0042 	strb.w	r0, [sp, #66]	; 0x42
 801d7d2:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 801d7d6:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 801d7da:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 801d7de:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 801d7e2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801d7e6:	bb89      	cbnz	r1, 801d84c <uxr_buffer_create_datawriter_bin+0xcc>
 801d7e8:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801d7ec:	f04f 0823 	mov.w	r8, #35	; 0x23
 801d7f0:	f04f 0e13 	mov.w	lr, #19
 801d7f4:	f04f 0c0b 	mov.w	ip, #11
 801d7f8:	2221      	movs	r2, #33	; 0x21
 801d7fa:	2111      	movs	r1, #17
 801d7fc:	2009      	movs	r0, #9
 801d7fe:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 801d802:	b923      	cbnz	r3, 801d80e <uxr_buffer_create_datawriter_bin+0x8e>
 801d804:	4642      	mov	r2, r8
 801d806:	4671      	mov	r1, lr
 801d808:	4660      	mov	r0, ip
 801d80a:	f8ad 6040 	strh.w	r6, [sp, #64]	; 0x40
 801d80e:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 801d812:	2b01      	cmp	r3, #1
 801d814:	d025      	beq.n	801d862 <uxr_buffer_create_datawriter_bin+0xe2>
 801d816:	2b03      	cmp	r3, #3
 801d818:	d029      	beq.n	801d86e <uxr_buffer_create_datawriter_bin+0xee>
 801d81a:	b32b      	cbz	r3, 801d868 <uxr_buffer_create_datawriter_bin+0xe8>
 801d81c:	f44f 7200 	mov.w	r2, #512	; 0x200
 801d820:	a921      	add	r1, sp, #132	; 0x84
 801d822:	a806      	add	r0, sp, #24
 801d824:	f7ff fe58 	bl	801d4d8 <ucdr_init_buffer>
 801d828:	a90e      	add	r1, sp, #56	; 0x38
 801d82a:	a806      	add	r0, sp, #24
 801d82c:	f001 fd5e 	bl	801f2ec <uxr_serialize_OBJK_DataWriter_Binary>
 801d830:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801d832:	9401      	str	r4, [sp, #4]
 801d834:	4628      	mov	r0, r5
 801d836:	b2b3      	uxth	r3, r6
 801d838:	9700      	str	r7, [sp, #0]
 801d83a:	60e6      	str	r6, [r4, #12]
 801d83c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801d840:	f7ff fede 	bl	801d600 <uxr_common_create_entity>
 801d844:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801d848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d84c:	f04f 0822 	mov.w	r8, #34	; 0x22
 801d850:	f04f 0e12 	mov.w	lr, #18
 801d854:	f04f 0c0a 	mov.w	ip, #10
 801d858:	2220      	movs	r2, #32
 801d85a:	2110      	movs	r1, #16
 801d85c:	2008      	movs	r0, #8
 801d85e:	2602      	movs	r6, #2
 801d860:	e7cd      	b.n	801d7fe <uxr_buffer_create_datawriter_bin+0x7e>
 801d862:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 801d866:	e7d9      	b.n	801d81c <uxr_buffer_create_datawriter_bin+0x9c>
 801d868:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 801d86c:	e7d6      	b.n	801d81c <uxr_buffer_create_datawriter_bin+0x9c>
 801d86e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801d872:	e7d3      	b.n	801d81c <uxr_buffer_create_datawriter_bin+0x9c>

0801d874 <uxr_object_id>:
 801d874:	b082      	sub	sp, #8
 801d876:	2300      	movs	r3, #0
 801d878:	f88d 1006 	strb.w	r1, [sp, #6]
 801d87c:	f360 030f 	bfi	r3, r0, #0, #16
 801d880:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801d884:	f362 431f 	bfi	r3, r2, #16, #16
 801d888:	4618      	mov	r0, r3
 801d88a:	b002      	add	sp, #8
 801d88c:	4770      	bx	lr
 801d88e:	bf00      	nop

0801d890 <uxr_object_id_from_raw>:
 801d890:	7843      	ldrb	r3, [r0, #1]
 801d892:	b082      	sub	sp, #8
 801d894:	7800      	ldrb	r0, [r0, #0]
 801d896:	2200      	movs	r2, #0
 801d898:	0919      	lsrs	r1, r3, #4
 801d89a:	f003 030f 	and.w	r3, r3, #15
 801d89e:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 801d8a2:	f88d 3006 	strb.w	r3, [sp, #6]
 801d8a6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801d8aa:	f361 020f 	bfi	r2, r1, #0, #16
 801d8ae:	f363 421f 	bfi	r2, r3, #16, #16
 801d8b2:	4610      	mov	r0, r2
 801d8b4:	b002      	add	sp, #8
 801d8b6:	4770      	bx	lr

0801d8b8 <uxr_object_id_to_raw>:
 801d8b8:	4602      	mov	r2, r0
 801d8ba:	f3c0 4303 	ubfx	r3, r0, #16, #4
 801d8be:	b410      	push	{r4}
 801d8c0:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 801d8c4:	b083      	sub	sp, #12
 801d8c6:	f3c2 140b 	ubfx	r4, r2, #4, #12
 801d8ca:	7048      	strb	r0, [r1, #1]
 801d8cc:	700c      	strb	r4, [r1, #0]
 801d8ce:	b003      	add	sp, #12
 801d8d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d8d4:	4770      	bx	lr
 801d8d6:	bf00      	nop

0801d8d8 <on_get_fragmentation_info>:
 801d8d8:	b500      	push	{lr}
 801d8da:	b08b      	sub	sp, #44	; 0x2c
 801d8dc:	4601      	mov	r1, r0
 801d8de:	2204      	movs	r2, #4
 801d8e0:	a802      	add	r0, sp, #8
 801d8e2:	f7ff fdf9 	bl	801d4d8 <ucdr_init_buffer>
 801d8e6:	f10d 0305 	add.w	r3, sp, #5
 801d8ea:	a802      	add	r0, sp, #8
 801d8ec:	f10d 0206 	add.w	r2, sp, #6
 801d8f0:	a901      	add	r1, sp, #4
 801d8f2:	f001 f849 	bl	801e988 <uxr_read_submessage_header>
 801d8f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801d8fa:	2b0d      	cmp	r3, #13
 801d8fc:	d003      	beq.n	801d906 <on_get_fragmentation_info+0x2e>
 801d8fe:	2000      	movs	r0, #0
 801d900:	b00b      	add	sp, #44	; 0x2c
 801d902:	f85d fb04 	ldr.w	pc, [sp], #4
 801d906:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801d90a:	f013 0f02 	tst.w	r3, #2
 801d90e:	bf14      	ite	ne
 801d910:	2002      	movne	r0, #2
 801d912:	2001      	moveq	r0, #1
 801d914:	b00b      	add	sp, #44	; 0x2c
 801d916:	f85d fb04 	ldr.w	pc, [sp], #4
 801d91a:	bf00      	nop

0801d91c <write_submessage_acknack.isra.0>:
 801d91c:	b570      	push	{r4, r5, r6, lr}
 801d91e:	b092      	sub	sp, #72	; 0x48
 801d920:	4605      	mov	r5, r0
 801d922:	460e      	mov	r6, r1
 801d924:	4614      	mov	r4, r2
 801d926:	f000 fea7 	bl	801e678 <uxr_session_header_offset>
 801d92a:	4603      	mov	r3, r0
 801d92c:	a905      	add	r1, sp, #20
 801d92e:	a80a      	add	r0, sp, #40	; 0x28
 801d930:	9300      	str	r3, [sp, #0]
 801d932:	2211      	movs	r2, #17
 801d934:	2300      	movs	r3, #0
 801d936:	f7ff fdbd 	bl	801d4b4 <ucdr_init_buffer_origin_offset>
 801d93a:	2218      	movs	r2, #24
 801d93c:	2300      	movs	r3, #0
 801d93e:	a80a      	add	r0, sp, #40	; 0x28
 801d940:	fb02 5404 	mla	r4, r2, r4, r5
 801d944:	210a      	movs	r1, #10
 801d946:	2205      	movs	r2, #5
 801d948:	3450      	adds	r4, #80	; 0x50
 801d94a:	f001 f803 	bl	801e954 <uxr_buffer_submessage_header>
 801d94e:	a903      	add	r1, sp, #12
 801d950:	4620      	mov	r0, r4
 801d952:	f004 fc97 	bl	8022284 <uxr_compute_acknack>
 801d956:	4603      	mov	r3, r0
 801d958:	a903      	add	r1, sp, #12
 801d95a:	a80a      	add	r0, sp, #40	; 0x28
 801d95c:	ba5b      	rev16	r3, r3
 801d95e:	f88d 6010 	strb.w	r6, [sp, #16]
 801d962:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d966:	f001 ff2b 	bl	801f7c0 <uxr_serialize_ACKNACK_Payload>
 801d96a:	2200      	movs	r2, #0
 801d96c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d96e:	4628      	mov	r0, r5
 801d970:	4611      	mov	r1, r2
 801d972:	f000 fe2b 	bl	801e5cc <uxr_stamp_session_header>
 801d976:	a80a      	add	r0, sp, #40	; 0x28
 801d978:	f7ff fddc 	bl	801d534 <ucdr_buffer_length>
 801d97c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 801d97e:	4602      	mov	r2, r0
 801d980:	a905      	add	r1, sp, #20
 801d982:	e9d3 0400 	ldrd	r0, r4, [r3]
 801d986:	47a0      	blx	r4
 801d988:	b012      	add	sp, #72	; 0x48
 801d98a:	bd70      	pop	{r4, r5, r6, pc}

0801d98c <uxr_acknack_pong.part.0>:
 801d98c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d98e:	f5ad 7d27 	sub.w	sp, sp, #668	; 0x29c
 801d992:	2500      	movs	r5, #0
 801d994:	4604      	mov	r4, r0
 801d996:	f10d 0306 	add.w	r3, sp, #6
 801d99a:	a901      	add	r1, sp, #4
 801d99c:	f10d 0205 	add.w	r2, sp, #5
 801d9a0:	f88d 5004 	strb.w	r5, [sp, #4]
 801d9a4:	f88d 5005 	strb.w	r5, [sp, #5]
 801d9a8:	f8ad 5006 	strh.w	r5, [sp, #6]
 801d9ac:	f001 fa26 	bl	801edfc <uxr_deserialize_submessage_header>
 801d9b0:	4620      	mov	r0, r4
 801d9b2:	f7ff fdc3 	bl	801d53c <ucdr_buffer_remaining>
 801d9b6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801d9ba:	4298      	cmp	r0, r3
 801d9bc:	d303      	bcc.n	801d9c6 <uxr_acknack_pong.part.0+0x3a>
 801d9be:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801d9c2:	2b06      	cmp	r3, #6
 801d9c4:	d003      	beq.n	801d9ce <uxr_acknack_pong.part.0+0x42>
 801d9c6:	2000      	movs	r0, #0
 801d9c8:	f50d 7d27 	add.w	sp, sp, #668	; 0x29c
 801d9cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d9ce:	a902      	add	r1, sp, #8
 801d9d0:	4620      	mov	r0, r4
 801d9d2:	f001 fd75 	bl	801f4c0 <uxr_deserialize_BaseObjectReply>
 801d9d6:	4605      	mov	r5, r0
 801d9d8:	a904      	add	r1, sp, #16
 801d9da:	4620      	mov	r0, r4
 801d9dc:	f89d 700d 	ldrb.w	r7, [sp, #13]
 801d9e0:	f7fe fdb4 	bl	801c54c <ucdr_deserialize_bool>
 801d9e4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801d9e8:	4028      	ands	r0, r5
 801d9ea:	b2c5      	uxtb	r5, r0
 801d9ec:	bb1b      	cbnz	r3, 801da36 <uxr_acknack_pong.part.0+0xaa>
 801d9ee:	a989      	add	r1, sp, #548	; 0x224
 801d9f0:	4620      	mov	r0, r4
 801d9f2:	f7fe fdab 	bl	801c54c <ucdr_deserialize_bool>
 801d9f6:	f89d 3224 	ldrb.w	r3, [sp, #548]	; 0x224
 801d9fa:	4606      	mov	r6, r0
 801d9fc:	2b00      	cmp	r3, #0
 801d9fe:	d0e2      	beq.n	801d9c6 <uxr_acknack_pong.part.0+0x3a>
 801da00:	a98a      	add	r1, sp, #552	; 0x228
 801da02:	4620      	mov	r0, r4
 801da04:	f7fe fdd0 	bl	801c5a8 <ucdr_deserialize_uint8_t>
 801da08:	422e      	tst	r6, r5
 801da0a:	d0dc      	beq.n	801d9c6 <uxr_acknack_pong.part.0+0x3a>
 801da0c:	2800      	cmp	r0, #0
 801da0e:	d0da      	beq.n	801d9c6 <uxr_acknack_pong.part.0+0x3a>
 801da10:	f89d 3228 	ldrb.w	r3, [sp, #552]	; 0x228
 801da14:	2b0d      	cmp	r3, #13
 801da16:	d1d6      	bne.n	801d9c6 <uxr_acknack_pong.part.0+0x3a>
 801da18:	4620      	mov	r0, r4
 801da1a:	a98c      	add	r1, sp, #560	; 0x230
 801da1c:	f7ff fb6e 	bl	801d0fc <ucdr_deserialize_int16_t>
 801da20:	2800      	cmp	r0, #0
 801da22:	d0d0      	beq.n	801d9c6 <uxr_acknack_pong.part.0+0x3a>
 801da24:	f9bd 3230 	ldrsh.w	r3, [sp, #560]	; 0x230
 801da28:	2b00      	cmp	r3, #0
 801da2a:	ddcc      	ble.n	801d9c6 <uxr_acknack_pong.part.0+0x3a>
 801da2c:	2f00      	cmp	r7, #0
 801da2e:	bf14      	ite	ne
 801da30:	2001      	movne	r0, #1
 801da32:	2002      	moveq	r0, #2
 801da34:	e7c8      	b.n	801d9c8 <uxr_acknack_pong.part.0+0x3c>
 801da36:	a905      	add	r1, sp, #20
 801da38:	4620      	mov	r0, r4
 801da3a:	f001 fc83 	bl	801f344 <uxr_deserialize_ObjectVariant>
 801da3e:	4005      	ands	r5, r0
 801da40:	e7d5      	b.n	801d9ee <uxr_acknack_pong.part.0+0x62>
 801da42:	bf00      	nop

0801da44 <read_submessage_list>:
 801da44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da48:	4604      	mov	r4, r0
 801da4a:	b09b      	sub	sp, #108	; 0x6c
 801da4c:	460d      	mov	r5, r1
 801da4e:	f8df 9304 	ldr.w	r9, [pc, #772]	; 801dd54 <read_submessage_list+0x310>
 801da52:	920d      	str	r2, [sp, #52]	; 0x34
 801da54:	f10d 033f 	add.w	r3, sp, #63	; 0x3f
 801da58:	aa10      	add	r2, sp, #64	; 0x40
 801da5a:	f10d 013e 	add.w	r1, sp, #62	; 0x3e
 801da5e:	4628      	mov	r0, r5
 801da60:	f000 ff92 	bl	801e988 <uxr_read_submessage_header>
 801da64:	2800      	cmp	r0, #0
 801da66:	f000 810a 	beq.w	801dc7e <read_submessage_list+0x23a>
 801da6a:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 801da6e:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
 801da72:	3b04      	subs	r3, #4
 801da74:	2b0b      	cmp	r3, #11
 801da76:	d8ed      	bhi.n	801da54 <read_submessage_list+0x10>
 801da78:	a101      	add	r1, pc, #4	; (adr r1, 801da80 <read_submessage_list+0x3c>)
 801da7a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801da7e:	bf00      	nop
 801da80:	0801dc6f 	.word	0x0801dc6f
 801da84:	0801dc63 	.word	0x0801dc63
 801da88:	0801da55 	.word	0x0801da55
 801da8c:	0801da55 	.word	0x0801da55
 801da90:	0801da55 	.word	0x0801da55
 801da94:	0801dbc3 	.word	0x0801dbc3
 801da98:	0801db53 	.word	0x0801db53
 801da9c:	0801db11 	.word	0x0801db11
 801daa0:	0801da55 	.word	0x0801da55
 801daa4:	0801da55 	.word	0x0801da55
 801daa8:	0801da55 	.word	0x0801da55
 801daac:	0801dab1 	.word	0x0801dab1
 801dab0:	a914      	add	r1, sp, #80	; 0x50
 801dab2:	4628      	mov	r0, r5
 801dab4:	f001 fed8 	bl	801f868 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 801dab8:	f8d4 8090 	ldr.w	r8, [r4, #144]	; 0x90
 801dabc:	f1b8 0f00 	cmp.w	r8, #0
 801dac0:	f000 810d 	beq.w	801dcde <read_submessage_list+0x29a>
 801dac4:	f000 ffa8 	bl	801ea18 <uxr_nanos>
 801dac8:	2700      	movs	r7, #0
 801daca:	460b      	mov	r3, r1
 801dacc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 801dace:	9918      	ldr	r1, [sp, #96]	; 0x60
 801dad0:	f04f 0b00 	mov.w	fp, #0
 801dad4:	4602      	mov	r2, r0
 801dad6:	4620      	mov	r0, r4
 801dad8:	fbc9 6701 	smlal	r6, r7, r9, r1
 801dadc:	9915      	ldr	r1, [sp, #84]	; 0x54
 801dade:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801dae2:	460e      	mov	r6, r1
 801dae4:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801dae6:	2700      	movs	r7, #0
 801dae8:	468a      	mov	sl, r1
 801daea:	9914      	ldr	r1, [sp, #80]	; 0x50
 801daec:	fbc9 6701 	smlal	r6, r7, r9, r1
 801daf0:	9916      	ldr	r1, [sp, #88]	; 0x58
 801daf2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801daf6:	fbc9 ab01 	smlal	sl, fp, r9, r1
 801dafa:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
 801dafe:	e9cd ab00 	strd	sl, fp, [sp]
 801db02:	9606      	str	r6, [sp, #24]
 801db04:	47c0      	blx	r8
 801db06:	f04f 0301 	mov.w	r3, #1
 801db0a:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 801db0e:	e7a1      	b.n	801da54 <read_submessage_list+0x10>
 801db10:	a914      	add	r1, sp, #80	; 0x50
 801db12:	4628      	mov	r0, r5
 801db14:	f001 fe94 	bl	801f840 <uxr_deserialize_HEARTBEAT_Payload>
 801db18:	2100      	movs	r1, #0
 801db1a:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
 801db1e:	f000 fe0d 	bl	801e73c <uxr_stream_id_from_raw>
 801db22:	4603      	mov	r3, r0
 801db24:	f104 0008 	add.w	r0, r4, #8
 801db28:	f3c3 2607 	ubfx	r6, r3, #8, #8
 801db2c:	9313      	str	r3, [sp, #76]	; 0x4c
 801db2e:	4631      	mov	r1, r6
 801db30:	f000 feee 	bl	801e910 <uxr_get_input_reliable_stream>
 801db34:	2800      	cmp	r0, #0
 801db36:	d08d      	beq.n	801da54 <read_submessage_list+0x10>
 801db38:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 801db3c:	f8bd 1050 	ldrh.w	r1, [sp, #80]	; 0x50
 801db40:	f004 fb94 	bl	802226c <uxr_process_heartbeat>
 801db44:	4632      	mov	r2, r6
 801db46:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
 801db4a:	4620      	mov	r0, r4
 801db4c:	f7ff fee6 	bl	801d91c <write_submessage_acknack.isra.0>
 801db50:	e780      	b.n	801da54 <read_submessage_list+0x10>
 801db52:	a914      	add	r1, sp, #80	; 0x50
 801db54:	4628      	mov	r0, r5
 801db56:	f001 fe4b 	bl	801f7f0 <uxr_deserialize_ACKNACK_Payload>
 801db5a:	2100      	movs	r1, #0
 801db5c:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
 801db60:	f000 fdec 	bl	801e73c <uxr_stream_id_from_raw>
 801db64:	4603      	mov	r3, r0
 801db66:	f104 0008 	add.w	r0, r4, #8
 801db6a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801db6e:	9311      	str	r3, [sp, #68]	; 0x44
 801db70:	f000 feb8 	bl	801e8e4 <uxr_get_output_reliable_stream>
 801db74:	4606      	mov	r6, r0
 801db76:	2800      	cmp	r0, #0
 801db78:	f43f af6c 	beq.w	801da54 <read_submessage_list+0x10>
 801db7c:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 801db80:	f10d 0848 	add.w	r8, sp, #72	; 0x48
 801db84:	f89d 1053 	ldrb.w	r1, [sp, #83]	; 0x53
 801db88:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801db8c:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 801db90:	b289      	uxth	r1, r1
 801db92:	f004 febd 	bl	8022910 <uxr_process_acknack>
 801db96:	4630      	mov	r0, r6
 801db98:	f004 fe7e 	bl	8022898 <uxr_begin_output_nack_buffer_it>
 801db9c:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 801dba0:	e005      	b.n	801dbae <read_submessage_list+0x16a>
 801dba2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801dba4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801dba6:	9912      	ldr	r1, [sp, #72]	; 0x48
 801dba8:	e9d3 0700 	ldrd	r0, r7, [r3]
 801dbac:	47b8      	blx	r7
 801dbae:	f10d 0342 	add.w	r3, sp, #66	; 0x42
 801dbb2:	aa13      	add	r2, sp, #76	; 0x4c
 801dbb4:	4641      	mov	r1, r8
 801dbb6:	4630      	mov	r0, r6
 801dbb8:	f004 fe70 	bl	802289c <uxr_next_reliable_nack_buffer_to_send>
 801dbbc:	2800      	cmp	r0, #0
 801dbbe:	d1f0      	bne.n	801dba2 <read_submessage_list+0x15e>
 801dbc0:	e748      	b.n	801da54 <read_submessage_list+0x10>
 801dbc2:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
 801dbc6:	f10d 0848 	add.w	r8, sp, #72	; 0x48
 801dbca:	f89d 6037 	ldrb.w	r6, [sp, #55]	; 0x37
 801dbce:	4628      	mov	r0, r5
 801dbd0:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
 801dbd4:	4641      	mov	r1, r8
 801dbd6:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 801dbda:	f88d 6047 	strb.w	r6, [sp, #71]	; 0x47
 801dbde:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 801dbe2:	f89d 703f 	ldrb.w	r7, [sp, #63]	; 0x3f
 801dbe6:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
 801dbea:	3e04      	subs	r6, #4
 801dbec:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 801dbf0:	f001 fc56 	bl	801f4a0 <uxr_deserialize_BaseObjectRequest>
 801dbf4:	4640      	mov	r0, r8
 801dbf6:	a913      	add	r1, sp, #76	; 0x4c
 801dbf8:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801dbfc:	f007 070e 	and.w	r7, r7, #14
 801dc00:	f000 fd60 	bl	801e6c4 <uxr_parse_base_object_request>
 801dc04:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801dc06:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 801dc0a:	b2b6      	uxth	r6, r6
 801dc0c:	f8bd 8042 	ldrh.w	r8, [sp, #66]	; 0x42
 801dc10:	9114      	str	r1, [sp, #80]	; 0x50
 801dc12:	f1ba 0f00 	cmp.w	sl, #0
 801dc16:	d006      	beq.n	801dc26 <read_submessage_list+0x1e2>
 801dc18:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 801dc1c:	2300      	movs	r3, #0
 801dc1e:	4642      	mov	r2, r8
 801dc20:	9000      	str	r0, [sp, #0]
 801dc22:	4620      	mov	r0, r4
 801dc24:	47d0      	blx	sl
 801dc26:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 801dc28:	b168      	cbz	r0, 801dc46 <read_submessage_list+0x202>
 801dc2a:	6f61      	ldr	r1, [r4, #116]	; 0x74
 801dc2c:	2300      	movs	r3, #0
 801dc2e:	3902      	subs	r1, #2
 801dc30:	e002      	b.n	801dc38 <read_submessage_list+0x1f4>
 801dc32:	3301      	adds	r3, #1
 801dc34:	4283      	cmp	r3, r0
 801dc36:	d006      	beq.n	801dc46 <read_submessage_list+0x202>
 801dc38:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 801dc3c:	4542      	cmp	r2, r8
 801dc3e:	d1f8      	bne.n	801dc32 <read_submessage_list+0x1ee>
 801dc40:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801dc42:	2100      	movs	r1, #0
 801dc44:	54d1      	strb	r1, [r2, r3]
 801dc46:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
 801dc4a:	4632      	mov	r2, r6
 801dc4c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801dc4e:	463b      	mov	r3, r7
 801dc50:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801dc52:	9102      	str	r1, [sp, #8]
 801dc54:	4629      	mov	r1, r5
 801dc56:	9001      	str	r0, [sp, #4]
 801dc58:	4620      	mov	r0, r4
 801dc5a:	9600      	str	r6, [sp, #0]
 801dc5c:	f004 fee2 	bl	8022a24 <read_submessage_format>
 801dc60:	e6f8      	b.n	801da54 <read_submessage_list+0x10>
 801dc62:	b97a      	cbnz	r2, 801dc84 <read_submessage_list+0x240>
 801dc64:	4629      	mov	r1, r5
 801dc66:	4620      	mov	r0, r4
 801dc68:	f000 fc7e 	bl	801e568 <uxr_read_delete_session_status>
 801dc6c:	e6f2      	b.n	801da54 <read_submessage_list+0x10>
 801dc6e:	2a00      	cmp	r2, #0
 801dc70:	f47f aef0 	bne.w	801da54 <read_submessage_list+0x10>
 801dc74:	4629      	mov	r1, r5
 801dc76:	4620      	mov	r0, r4
 801dc78:	f000 fc68 	bl	801e54c <uxr_read_create_session_status>
 801dc7c:	e6ea      	b.n	801da54 <read_submessage_list+0x10>
 801dc7e:	b01b      	add	sp, #108	; 0x6c
 801dc80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc84:	a914      	add	r1, sp, #80	; 0x50
 801dc86:	4628      	mov	r0, r5
 801dc88:	f001 fd56 	bl	801f738 <uxr_deserialize_STATUS_Payload>
 801dc8c:	a912      	add	r1, sp, #72	; 0x48
 801dc8e:	aa11      	add	r2, sp, #68	; 0x44
 801dc90:	a814      	add	r0, sp, #80	; 0x50
 801dc92:	f000 fd17 	bl	801e6c4 <uxr_parse_base_object_request>
 801dc96:	9912      	ldr	r1, [sp, #72]	; 0x48
 801dc98:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 801dc9c:	f89d 8054 	ldrb.w	r8, [sp, #84]	; 0x54
 801dca0:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 801dca4:	9113      	str	r1, [sp, #76]	; 0x4c
 801dca6:	b136      	cbz	r6, 801dcb6 <read_submessage_list+0x272>
 801dca8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 801dcac:	4643      	mov	r3, r8
 801dcae:	463a      	mov	r2, r7
 801dcb0:	9000      	str	r0, [sp, #0]
 801dcb2:	4620      	mov	r0, r4
 801dcb4:	47b0      	blx	r6
 801dcb6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 801dcb8:	2b00      	cmp	r3, #0
 801dcba:	f43f aecb 	beq.w	801da54 <read_submessage_list+0x10>
 801dcbe:	6f60      	ldr	r0, [r4, #116]	; 0x74
 801dcc0:	2100      	movs	r1, #0
 801dcc2:	3802      	subs	r0, #2
 801dcc4:	e003      	b.n	801dcce <read_submessage_list+0x28a>
 801dcc6:	3101      	adds	r1, #1
 801dcc8:	4299      	cmp	r1, r3
 801dcca:	f43f aec3 	beq.w	801da54 <read_submessage_list+0x10>
 801dcce:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 801dcd2:	42ba      	cmp	r2, r7
 801dcd4:	d1f7      	bne.n	801dcc6 <read_submessage_list+0x282>
 801dcd6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801dcd8:	f803 8001 	strb.w	r8, [r3, r1]
 801dcdc:	e6ba      	b.n	801da54 <read_submessage_list+0x10>
 801dcde:	f000 fe9b 	bl	801ea18 <uxr_nanos>
 801dce2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801dce4:	2700      	movs	r7, #0
 801dce6:	f04f 0b00 	mov.w	fp, #0
 801dcea:	4692      	mov	sl, r2
 801dcec:	e9dd 3618 	ldrd	r3, r6, [sp, #96]	; 0x60
 801dcf0:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801dcf4:	fbc9 6703 	smlal	r6, r7, r9, r3
 801dcf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801dcfa:	1830      	adds	r0, r6, r0
 801dcfc:	f04f 0b00 	mov.w	fp, #0
 801dd00:	469a      	mov	sl, r3
 801dd02:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801dd04:	eb47 0101 	adc.w	r1, r7, r1
 801dd08:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801dd0a:	fbc9 ab06 	smlal	sl, fp, r9, r6
 801dd0e:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	; 0x28
 801dd12:	fbc9 7803 	smlal	r7, r8, r9, r3
 801dd16:	eb17 020a 	adds.w	r2, r7, sl
 801dd1a:	eb48 030b 	adc.w	r3, r8, fp
 801dd1e:	1a82      	subs	r2, r0, r2
 801dd20:	eb61 0303 	sbc.w	r3, r1, r3
 801dd24:	9208      	str	r2, [sp, #32]
 801dd26:	9309      	str	r3, [sp, #36]	; 0x24
 801dd28:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801dd2c:	2a00      	cmp	r2, #0
 801dd2e:	f173 0100 	sbcs.w	r1, r3, #0
 801dd32:	da05      	bge.n	801dd40 <read_submessage_list+0x2fc>
 801dd34:	1c53      	adds	r3, r2, #1
 801dd36:	9308      	str	r3, [sp, #32]
 801dd38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dd3a:	f143 0300 	adc.w	r3, r3, #0
 801dd3e:	9309      	str	r3, [sp, #36]	; 0x24
 801dd40:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801dd44:	0843      	lsrs	r3, r0, #1
 801dd46:	104a      	asrs	r2, r1, #1
 801dd48:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
 801dd4c:	e9c4 3226 	strd	r3, r2, [r4, #152]	; 0x98
 801dd50:	e6d9      	b.n	801db06 <read_submessage_list+0xc2>
 801dd52:	bf00      	nop
 801dd54:	3b9aca00 	.word	0x3b9aca00

0801dd58 <listen_message>:
 801dd58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dd5c:	6f04      	ldr	r4, [r0, #112]	; 0x70
 801dd5e:	b09a      	sub	sp, #104	; 0x68
 801dd60:	460b      	mov	r3, r1
 801dd62:	4605      	mov	r5, r0
 801dd64:	68a6      	ldr	r6, [r4, #8]
 801dd66:	aa07      	add	r2, sp, #28
 801dd68:	6820      	ldr	r0, [r4, #0]
 801dd6a:	a906      	add	r1, sp, #24
 801dd6c:	47b0      	blx	r6
 801dd6e:	4604      	mov	r4, r0
 801dd70:	b918      	cbnz	r0, 801dd7a <listen_message+0x22>
 801dd72:	4620      	mov	r0, r4
 801dd74:	b01a      	add	sp, #104	; 0x68
 801dd76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dd7a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801dd7e:	a80a      	add	r0, sp, #40	; 0x28
 801dd80:	2700      	movs	r7, #0
 801dd82:	f7ff fba9 	bl	801d4d8 <ucdr_init_buffer>
 801dd86:	a90a      	add	r1, sp, #40	; 0x28
 801dd88:	f10d 0316 	add.w	r3, sp, #22
 801dd8c:	aa05      	add	r2, sp, #20
 801dd8e:	4628      	mov	r0, r5
 801dd90:	f88d 7014 	strb.w	r7, [sp, #20]
 801dd94:	f000 fc30 	bl	801e5f8 <uxr_read_session_header>
 801dd98:	4606      	mov	r6, r0
 801dd9a:	b1e8      	cbz	r0, 801ddd8 <listen_message+0x80>
 801dd9c:	4639      	mov	r1, r7
 801dd9e:	f89d 0014 	ldrb.w	r0, [sp, #20]
 801dda2:	f000 fccb 	bl	801e73c <uxr_stream_id_from_raw>
 801dda6:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801ddaa:	f8bd 9016 	ldrh.w	r9, [sp, #22]
 801ddae:	fa5f f880 	uxtb.w	r8, r0
 801ddb2:	2f01      	cmp	r7, #1
 801ddb4:	f3c0 2607 	ubfx	r6, r0, #8, #8
 801ddb8:	9009      	str	r0, [sp, #36]	; 0x24
 801ddba:	d01d      	beq.n	801ddf8 <listen_message+0xa0>
 801ddbc:	2f02      	cmp	r7, #2
 801ddbe:	d033      	beq.n	801de28 <listen_message+0xd0>
 801ddc0:	2f00      	cmp	r7, #0
 801ddc2:	d1d6      	bne.n	801dd72 <listen_message+0x1a>
 801ddc4:	4639      	mov	r1, r7
 801ddc6:	4638      	mov	r0, r7
 801ddc8:	f000 fcb8 	bl	801e73c <uxr_stream_id_from_raw>
 801ddcc:	a90a      	add	r1, sp, #40	; 0x28
 801ddce:	4602      	mov	r2, r0
 801ddd0:	4628      	mov	r0, r5
 801ddd2:	f7ff fe37 	bl	801da44 <read_submessage_list>
 801ddd6:	e7cc      	b.n	801dd72 <listen_message+0x1a>
 801ddd8:	a80a      	add	r0, sp, #40	; 0x28
 801ddda:	f7ff fbaf 	bl	801d53c <ucdr_buffer_remaining>
 801ddde:	2804      	cmp	r0, #4
 801dde0:	d806      	bhi.n	801ddf0 <listen_message+0x98>
 801dde2:	4630      	mov	r0, r6
 801dde4:	f885 00b5 	strb.w	r0, [r5, #181]	; 0xb5
 801dde8:	4620      	mov	r0, r4
 801ddea:	b01a      	add	sp, #104	; 0x68
 801ddec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ddf0:	a80a      	add	r0, sp, #40	; 0x28
 801ddf2:	f7ff fdcb 	bl	801d98c <uxr_acknack_pong.part.0>
 801ddf6:	e7f5      	b.n	801dde4 <listen_message+0x8c>
 801ddf8:	4631      	mov	r1, r6
 801ddfa:	f105 0008 	add.w	r0, r5, #8
 801ddfe:	f000 fd7d 	bl	801e8fc <uxr_get_input_best_effort_stream>
 801de02:	2800      	cmp	r0, #0
 801de04:	d0b5      	beq.n	801dd72 <listen_message+0x1a>
 801de06:	4649      	mov	r1, r9
 801de08:	f004 f8a8 	bl	8021f5c <uxr_receive_best_effort_message>
 801de0c:	2800      	cmp	r0, #0
 801de0e:	d0b0      	beq.n	801dd72 <listen_message+0x1a>
 801de10:	f88d 8024 	strb.w	r8, [sp, #36]	; 0x24
 801de14:	a90a      	add	r1, sp, #40	; 0x28
 801de16:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 801de1a:	4628      	mov	r0, r5
 801de1c:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 801de20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801de22:	f7ff fe0f 	bl	801da44 <read_submessage_list>
 801de26:	e7a4      	b.n	801dd72 <listen_message+0x1a>
 801de28:	4631      	mov	r1, r6
 801de2a:	f105 0008 	add.w	r0, r5, #8
 801de2e:	f000 fd6f 	bl	801e910 <uxr_get_input_reliable_stream>
 801de32:	4682      	mov	sl, r0
 801de34:	b330      	cbz	r0, 801de84 <listen_message+0x12c>
 801de36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801de38:	a80a      	add	r0, sp, #40	; 0x28
 801de3a:	9203      	str	r2, [sp, #12]
 801de3c:	f7ff fb7e 	bl	801d53c <ucdr_buffer_remaining>
 801de40:	4603      	mov	r3, r0
 801de42:	f10d 0015 	add.w	r0, sp, #21
 801de46:	9a03      	ldr	r2, [sp, #12]
 801de48:	4649      	mov	r1, r9
 801de4a:	9000      	str	r0, [sp, #0]
 801de4c:	4650      	mov	r0, sl
 801de4e:	f004 f909 	bl	8022064 <uxr_receive_reliable_message>
 801de52:	b1b8      	cbz	r0, 801de84 <listen_message+0x12c>
 801de54:	f89d 3015 	ldrb.w	r3, [sp, #21]
 801de58:	b1d3      	cbz	r3, 801de90 <listen_message+0x138>
 801de5a:	2702      	movs	r7, #2
 801de5c:	e008      	b.n	801de70 <listen_message+0x118>
 801de5e:	f88d 8024 	strb.w	r8, [sp, #36]	; 0x24
 801de62:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 801de66:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 801de6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801de6c:	f7ff fdea 	bl	801da44 <read_submessage_list>
 801de70:	a912      	add	r1, sp, #72	; 0x48
 801de72:	2204      	movs	r2, #4
 801de74:	4650      	mov	r0, sl
 801de76:	f004 f979 	bl	802216c <uxr_next_input_reliable_buffer_available>
 801de7a:	4603      	mov	r3, r0
 801de7c:	a912      	add	r1, sp, #72	; 0x48
 801de7e:	4628      	mov	r0, r5
 801de80:	2b00      	cmp	r3, #0
 801de82:	d1ec      	bne.n	801de5e <listen_message+0x106>
 801de84:	4632      	mov	r2, r6
 801de86:	4641      	mov	r1, r8
 801de88:	4628      	mov	r0, r5
 801de8a:	f7ff fd47 	bl	801d91c <write_submessage_acknack.isra.0>
 801de8e:	e770      	b.n	801dd72 <listen_message+0x1a>
 801de90:	f88d 8024 	strb.w	r8, [sp, #36]	; 0x24
 801de94:	a90a      	add	r1, sp, #40	; 0x28
 801de96:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 801de9a:	4628      	mov	r0, r5
 801de9c:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 801dea0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dea2:	f7ff fdcf 	bl	801da44 <read_submessage_list>
 801dea6:	e7d8      	b.n	801de5a <listen_message+0x102>

0801dea8 <listen_message_reliably>:
 801dea8:	1e0b      	subs	r3, r1, #0
 801deaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801deae:	bfb8      	it	lt
 801deb0:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 801deb4:	b095      	sub	sp, #84	; 0x54
 801deb6:	4683      	mov	fp, r0
 801deb8:	9303      	str	r3, [sp, #12]
 801deba:	f000 fd91 	bl	801e9e0 <uxr_millis>
 801debe:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 801dec2:	4607      	mov	r7, r0
 801dec4:	4688      	mov	r8, r1
 801dec6:	2b00      	cmp	r3, #0
 801dec8:	f000 809b 	beq.w	801e002 <listen_message_reliably+0x15a>
 801decc:	2600      	movs	r6, #0
 801dece:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 801ded2:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801ded6:	4630      	mov	r0, r6
 801ded8:	e00d      	b.n	801def6 <listen_message_reliably+0x4e>
 801deda:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801dede:	3601      	adds	r6, #1
 801dee0:	454a      	cmp	r2, r9
 801dee2:	b2f0      	uxtb	r0, r6
 801dee4:	eb73 010a 	sbcs.w	r1, r3, sl
 801dee8:	da01      	bge.n	801deee <listen_message_reliably+0x46>
 801deea:	4691      	mov	r9, r2
 801deec:	469a      	mov	sl, r3
 801deee:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 801def2:	4283      	cmp	r3, r0
 801def4:	d95d      	bls.n	801dfb2 <listen_message_reliably+0x10a>
 801def6:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 801defa:	2201      	movs	r2, #1
 801defc:	2102      	movs	r1, #2
 801defe:	00e4      	lsls	r4, r4, #3
 801df00:	f000 fbf2 	bl	801e6e8 <uxr_stream_id>
 801df04:	4601      	mov	r1, r0
 801df06:	f104 0520 	add.w	r5, r4, #32
 801df0a:	4643      	mov	r3, r8
 801df0c:	463a      	mov	r2, r7
 801df0e:	9104      	str	r1, [sp, #16]
 801df10:	445d      	add	r5, fp
 801df12:	4628      	mov	r0, r5
 801df14:	f004 fc94 	bl	8022840 <uxr_update_output_stream_heartbeat_timestamp>
 801df18:	eb0b 0304 	add.w	r3, fp, r4
 801df1c:	2800      	cmp	r0, #0
 801df1e:	d0dc      	beq.n	801deda <listen_message_reliably+0x32>
 801df20:	f89d 5011 	ldrb.w	r5, [sp, #17]
 801df24:	4658      	mov	r0, fp
 801df26:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801df2a:	445c      	add	r4, fp
 801df2c:	3501      	adds	r5, #1
 801df2e:	3601      	adds	r6, #1
 801df30:	9302      	str	r3, [sp, #8]
 801df32:	f000 fba1 	bl	801e678 <uxr_session_header_offset>
 801df36:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 801df3a:	4602      	mov	r2, r0
 801df3c:	2300      	movs	r3, #0
 801df3e:	a80c      	add	r0, sp, #48	; 0x30
 801df40:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 801df44:	a907      	add	r1, sp, #28
 801df46:	9200      	str	r2, [sp, #0]
 801df48:	2211      	movs	r2, #17
 801df4a:	f7ff fab3 	bl	801d4b4 <ucdr_init_buffer_origin_offset>
 801df4e:	2300      	movs	r3, #0
 801df50:	2205      	movs	r2, #5
 801df52:	210b      	movs	r1, #11
 801df54:	a80c      	add	r0, sp, #48	; 0x30
 801df56:	f000 fcfd 	bl	801e954 <uxr_buffer_submessage_header>
 801df5a:	2101      	movs	r1, #1
 801df5c:	8968      	ldrh	r0, [r5, #10]
 801df5e:	f004 fe1b 	bl	8022b98 <uxr_seq_num_add>
 801df62:	892a      	ldrh	r2, [r5, #8]
 801df64:	4603      	mov	r3, r0
 801df66:	9d02      	ldr	r5, [sp, #8]
 801df68:	a905      	add	r1, sp, #20
 801df6a:	a80c      	add	r0, sp, #48	; 0x30
 801df6c:	f88d 5018 	strb.w	r5, [sp, #24]
 801df70:	f8ad 2016 	strh.w	r2, [sp, #22]
 801df74:	f8ad 3014 	strh.w	r3, [sp, #20]
 801df78:	f001 fc4e 	bl	801f818 <uxr_serialize_HEARTBEAT_Payload>
 801df7c:	2200      	movs	r2, #0
 801df7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801df80:	4658      	mov	r0, fp
 801df82:	4611      	mov	r1, r2
 801df84:	f000 fb22 	bl	801e5cc <uxr_stamp_session_header>
 801df88:	a80c      	add	r0, sp, #48	; 0x30
 801df8a:	f7ff fad3 	bl	801d534 <ucdr_buffer_length>
 801df8e:	f8db 3070 	ldr.w	r3, [fp, #112]	; 0x70
 801df92:	4602      	mov	r2, r0
 801df94:	a907      	add	r1, sp, #28
 801df96:	e9d3 0500 	ldrd	r0, r5, [r3]
 801df9a:	47a8      	blx	r5
 801df9c:	b2f0      	uxtb	r0, r6
 801df9e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 801dfa2:	454a      	cmp	r2, r9
 801dfa4:	eb73 010a 	sbcs.w	r1, r3, sl
 801dfa8:	db9f      	blt.n	801deea <listen_message_reliably+0x42>
 801dfaa:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 801dfae:	4283      	cmp	r3, r0
 801dfb0:	d8a1      	bhi.n	801def6 <listen_message_reliably+0x4e>
 801dfb2:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 801dfb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801dfba:	45a2      	cmp	sl, r4
 801dfbc:	bf08      	it	eq
 801dfbe:	4599      	cmpeq	r9, r3
 801dfc0:	d01f      	beq.n	801e002 <listen_message_reliably+0x15a>
 801dfc2:	eba9 0107 	sub.w	r1, r9, r7
 801dfc6:	2900      	cmp	r1, #0
 801dfc8:	9c03      	ldr	r4, [sp, #12]
 801dfca:	4658      	mov	r0, fp
 801dfcc:	bf08      	it	eq
 801dfce:	2101      	moveq	r1, #1
 801dfd0:	4623      	mov	r3, r4
 801dfd2:	428c      	cmp	r4, r1
 801dfd4:	bfa8      	it	ge
 801dfd6:	460b      	movge	r3, r1
 801dfd8:	4619      	mov	r1, r3
 801dfda:	461f      	mov	r7, r3
 801dfdc:	f7ff febc 	bl	801dd58 <listen_message>
 801dfe0:	b110      	cbz	r0, 801dfe8 <listen_message_reliably+0x140>
 801dfe2:	b015      	add	sp, #84	; 0x54
 801dfe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dfe8:	1be3      	subs	r3, r4, r7
 801dfea:	2b00      	cmp	r3, #0
 801dfec:	9303      	str	r3, [sp, #12]
 801dfee:	ddf8      	ble.n	801dfe2 <listen_message_reliably+0x13a>
 801dff0:	f000 fcf6 	bl	801e9e0 <uxr_millis>
 801dff4:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 801dff8:	4607      	mov	r7, r0
 801dffa:	4688      	mov	r8, r1
 801dffc:	2b00      	cmp	r3, #0
 801dffe:	f47f af65 	bne.w	801decc <listen_message_reliably+0x24>
 801e002:	9903      	ldr	r1, [sp, #12]
 801e004:	e7df      	b.n	801dfc6 <listen_message_reliably+0x11e>
 801e006:	bf00      	nop

0801e008 <uxr_init_session>:
 801e008:	b5d0      	push	{r4, r6, r7, lr}
 801e00a:	2300      	movs	r3, #0
 801e00c:	2600      	movs	r6, #0
 801e00e:	2700      	movs	r7, #0
 801e010:	4604      	mov	r4, r0
 801e012:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 801e016:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 801e01a:	e9c0 6726 	strd	r6, r7, [r0, #152]	; 0x98
 801e01e:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 801e022:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 801e026:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 801e02a:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 801e02e:	2181      	movs	r1, #129	; 0x81
 801e030:	f000 fa38 	bl	801e4a4 <uxr_init_session_info>
 801e034:	f104 0008 	add.w	r0, r4, #8
 801e038:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 801e03c:	f000 bbaa 	b.w	801e794 <uxr_init_stream_storage>

0801e040 <uxr_set_status_callback>:
 801e040:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 801e044:	4770      	bx	lr
 801e046:	bf00      	nop

0801e048 <uxr_set_topic_callback>:
 801e048:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 801e04c:	4770      	bx	lr
 801e04e:	bf00      	nop

0801e050 <uxr_set_request_callback>:
 801e050:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 801e054:	4770      	bx	lr
 801e056:	bf00      	nop

0801e058 <uxr_set_reply_callback>:
 801e058:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 801e05c:	4770      	bx	lr
 801e05e:	bf00      	nop

0801e060 <uxr_create_session>:
 801e060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e064:	f100 0708 	add.w	r7, r0, #8
 801e068:	4604      	mov	r4, r0
 801e06a:	b092      	sub	sp, #72	; 0x48
 801e06c:	260a      	movs	r6, #10
 801e06e:	4638      	mov	r0, r7
 801e070:	f000 fb9a 	bl	801e7a8 <uxr_reset_stream_storage>
 801e074:	4620      	mov	r0, r4
 801e076:	f000 faff 	bl	801e678 <uxr_session_header_offset>
 801e07a:	4603      	mov	r3, r0
 801e07c:	a903      	add	r1, sp, #12
 801e07e:	a80a      	add	r0, sp, #40	; 0x28
 801e080:	221c      	movs	r2, #28
 801e082:	9300      	str	r3, [sp, #0]
 801e084:	2300      	movs	r3, #0
 801e086:	f7ff fa15 	bl	801d4b4 <ucdr_init_buffer_origin_offset>
 801e08a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801e08c:	4620      	mov	r0, r4
 801e08e:	a90a      	add	r1, sp, #40	; 0x28
 801e090:	8a1a      	ldrh	r2, [r3, #16]
 801e092:	3a04      	subs	r2, #4
 801e094:	b292      	uxth	r2, r2
 801e096:	f000 fa17 	bl	801e4c8 <uxr_buffer_create_session>
 801e09a:	4620      	mov	r0, r4
 801e09c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e09e:	f000 fa81 	bl	801e5a4 <uxr_stamp_create_session_header>
 801e0a2:	a80a      	add	r0, sp, #40	; 0x28
 801e0a4:	f7ff fa46 	bl	801d534 <ucdr_buffer_length>
 801e0a8:	23ff      	movs	r3, #255	; 0xff
 801e0aa:	4605      	mov	r5, r0
 801e0ac:	7163      	strb	r3, [r4, #5]
 801e0ae:	e001      	b.n	801e0b4 <uxr_create_session+0x54>
 801e0b0:	2bff      	cmp	r3, #255	; 0xff
 801e0b2:	d10d      	bne.n	801e0d0 <uxr_create_session+0x70>
 801e0b4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801e0b6:	462a      	mov	r2, r5
 801e0b8:	a903      	add	r1, sp, #12
 801e0ba:	e9d3 0800 	ldrd	r0, r8, [r3]
 801e0be:	47c0      	blx	r8
 801e0c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801e0c4:	4620      	mov	r0, r4
 801e0c6:	f7ff fe47 	bl	801dd58 <listen_message>
 801e0ca:	3e01      	subs	r6, #1
 801e0cc:	7963      	ldrb	r3, [r4, #5]
 801e0ce:	d1ef      	bne.n	801e0b0 <uxr_create_session+0x50>
 801e0d0:	b11b      	cbz	r3, 801e0da <uxr_create_session+0x7a>
 801e0d2:	2000      	movs	r0, #0
 801e0d4:	b012      	add	sp, #72	; 0x48
 801e0d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e0da:	4638      	mov	r0, r7
 801e0dc:	f000 fb64 	bl	801e7a8 <uxr_reset_stream_storage>
 801e0e0:	2001      	movs	r0, #1
 801e0e2:	b012      	add	sp, #72	; 0x48
 801e0e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e0e8 <uxr_delete_session_retries>:
 801e0e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e0ea:	b091      	sub	sp, #68	; 0x44
 801e0ec:	4604      	mov	r4, r0
 801e0ee:	460d      	mov	r5, r1
 801e0f0:	f000 fac2 	bl	801e678 <uxr_session_header_offset>
 801e0f4:	4603      	mov	r3, r0
 801e0f6:	2210      	movs	r2, #16
 801e0f8:	a904      	add	r1, sp, #16
 801e0fa:	a808      	add	r0, sp, #32
 801e0fc:	9300      	str	r3, [sp, #0]
 801e0fe:	2300      	movs	r3, #0
 801e100:	f7ff f9d8 	bl	801d4b4 <ucdr_init_buffer_origin_offset>
 801e104:	a908      	add	r1, sp, #32
 801e106:	4620      	mov	r0, r4
 801e108:	f000 fa04 	bl	801e514 <uxr_buffer_delete_session>
 801e10c:	2200      	movs	r2, #0
 801e10e:	9b08      	ldr	r3, [sp, #32]
 801e110:	4620      	mov	r0, r4
 801e112:	4611      	mov	r1, r2
 801e114:	f000 fa5a 	bl	801e5cc <uxr_stamp_session_header>
 801e118:	a808      	add	r0, sp, #32
 801e11a:	f7ff fa0b 	bl	801d534 <ucdr_buffer_length>
 801e11e:	23ff      	movs	r3, #255	; 0xff
 801e120:	4602      	mov	r2, r0
 801e122:	7163      	strb	r3, [r4, #5]
 801e124:	b1e5      	cbz	r5, 801e160 <uxr_delete_session_retries+0x78>
 801e126:	2600      	movs	r6, #0
 801e128:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801e12a:	a904      	add	r1, sp, #16
 801e12c:	3601      	adds	r6, #1
 801e12e:	9203      	str	r2, [sp, #12]
 801e130:	e9d3 0700 	ldrd	r0, r7, [r3]
 801e134:	47b8      	blx	r7
 801e136:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801e13a:	4620      	mov	r0, r4
 801e13c:	f7ff fe0c 	bl	801dd58 <listen_message>
 801e140:	42b5      	cmp	r5, r6
 801e142:	7963      	ldrb	r3, [r4, #5]
 801e144:	d007      	beq.n	801e156 <uxr_delete_session_retries+0x6e>
 801e146:	2bff      	cmp	r3, #255	; 0xff
 801e148:	9a03      	ldr	r2, [sp, #12]
 801e14a:	d0ed      	beq.n	801e128 <uxr_delete_session_retries+0x40>
 801e14c:	fab3 f083 	clz	r0, r3
 801e150:	0940      	lsrs	r0, r0, #5
 801e152:	b011      	add	sp, #68	; 0x44
 801e154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e156:	2bff      	cmp	r3, #255	; 0xff
 801e158:	d1f8      	bne.n	801e14c <uxr_delete_session_retries+0x64>
 801e15a:	2000      	movs	r0, #0
 801e15c:	b011      	add	sp, #68	; 0x44
 801e15e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e160:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801e162:	a904      	add	r1, sp, #16
 801e164:	e9d3 0500 	ldrd	r0, r5, [r3]
 801e168:	47a8      	blx	r5
 801e16a:	7963      	ldrb	r3, [r4, #5]
 801e16c:	fab3 f083 	clz	r0, r3
 801e170:	0940      	lsrs	r0, r0, #5
 801e172:	e7ee      	b.n	801e152 <uxr_delete_session_retries+0x6a>

0801e174 <uxr_create_output_best_effort_stream>:
 801e174:	b510      	push	{r4, lr}
 801e176:	4604      	mov	r4, r0
 801e178:	b084      	sub	sp, #16
 801e17a:	e9cd 2100 	strd	r2, r1, [sp]
 801e17e:	f000 fa7b 	bl	801e678 <uxr_session_header_offset>
 801e182:	4603      	mov	r3, r0
 801e184:	f104 0008 	add.w	r0, r4, #8
 801e188:	e9dd 2100 	ldrd	r2, r1, [sp]
 801e18c:	b004      	add	sp, #16
 801e18e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e192:	f000 bb45 	b.w	801e820 <uxr_add_output_best_effort_buffer>
 801e196:	bf00      	nop

0801e198 <uxr_create_output_reliable_stream>:
 801e198:	b530      	push	{r4, r5, lr}
 801e19a:	b089      	sub	sp, #36	; 0x24
 801e19c:	4604      	mov	r4, r0
 801e19e:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801e1a2:	9303      	str	r3, [sp, #12]
 801e1a4:	f000 fa68 	bl	801e678 <uxr_session_header_offset>
 801e1a8:	4605      	mov	r5, r0
 801e1aa:	9905      	ldr	r1, [sp, #20]
 801e1ac:	f104 0008 	add.w	r0, r4, #8
 801e1b0:	9500      	str	r5, [sp, #0]
 801e1b2:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 801e1b6:	f000 fb45 	bl	801e844 <uxr_add_output_reliable_buffer>
 801e1ba:	2200      	movs	r2, #0
 801e1bc:	b2c5      	uxtb	r5, r0
 801e1be:	f3c0 2407 	ubfx	r4, r0, #8, #8
 801e1c2:	f3c0 4107 	ubfx	r1, r0, #16, #8
 801e1c6:	0e03      	lsrs	r3, r0, #24
 801e1c8:	f365 0207 	bfi	r2, r5, #0, #8
 801e1cc:	f364 220f 	bfi	r2, r4, #8, #8
 801e1d0:	f361 4217 	bfi	r2, r1, #16, #8
 801e1d4:	f363 621f 	bfi	r2, r3, #24, #8
 801e1d8:	4610      	mov	r0, r2
 801e1da:	b009      	add	sp, #36	; 0x24
 801e1dc:	bd30      	pop	{r4, r5, pc}
 801e1de:	bf00      	nop

0801e1e0 <uxr_create_input_best_effort_stream>:
 801e1e0:	b082      	sub	sp, #8
 801e1e2:	3008      	adds	r0, #8
 801e1e4:	b002      	add	sp, #8
 801e1e6:	f000 bb47 	b.w	801e878 <uxr_add_input_best_effort_buffer>
 801e1ea:	bf00      	nop

0801e1ec <uxr_create_input_reliable_stream>:
 801e1ec:	b530      	push	{r4, r5, lr}
 801e1ee:	4c0c      	ldr	r4, [pc, #48]	; (801e220 <uxr_create_input_reliable_stream+0x34>)
 801e1f0:	b085      	sub	sp, #20
 801e1f2:	3008      	adds	r0, #8
 801e1f4:	9400      	str	r4, [sp, #0]
 801e1f6:	f000 fb55 	bl	801e8a4 <uxr_add_input_reliable_buffer>
 801e1fa:	2200      	movs	r2, #0
 801e1fc:	b2c5      	uxtb	r5, r0
 801e1fe:	f3c0 2407 	ubfx	r4, r0, #8, #8
 801e202:	f3c0 4107 	ubfx	r1, r0, #16, #8
 801e206:	0e03      	lsrs	r3, r0, #24
 801e208:	f365 0207 	bfi	r2, r5, #0, #8
 801e20c:	f364 220f 	bfi	r2, r4, #8, #8
 801e210:	f361 4217 	bfi	r2, r1, #16, #8
 801e214:	f363 621f 	bfi	r2, r3, #24, #8
 801e218:	4610      	mov	r0, r2
 801e21a:	b005      	add	sp, #20
 801e21c:	bd30      	pop	{r4, r5, pc}
 801e21e:	bf00      	nop
 801e220:	0801d8d9 	.word	0x0801d8d9

0801e224 <uxr_epoch_nanos>:
 801e224:	b510      	push	{r4, lr}
 801e226:	4604      	mov	r4, r0
 801e228:	f000 fbf6 	bl	801ea18 <uxr_nanos>
 801e22c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 801e230:	1ac0      	subs	r0, r0, r3
 801e232:	eb61 0102 	sbc.w	r1, r1, r2
 801e236:	bd10      	pop	{r4, pc}

0801e238 <uxr_flash_output_streams>:
 801e238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e23c:	7e03      	ldrb	r3, [r0, #24]
 801e23e:	b084      	sub	sp, #16
 801e240:	4604      	mov	r4, r0
 801e242:	b1fb      	cbz	r3, 801e284 <uxr_flash_output_streams+0x4c>
 801e244:	f04f 0900 	mov.w	r9, #0
 801e248:	f10d 0802 	add.w	r8, sp, #2
 801e24c:	af03      	add	r7, sp, #12
 801e24e:	ae02      	add	r6, sp, #8
 801e250:	4648      	mov	r0, r9
 801e252:	2201      	movs	r2, #1
 801e254:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 801e258:	4611      	mov	r1, r2
 801e25a:	3508      	adds	r5, #8
 801e25c:	f000 fa44 	bl	801e6e8 <uxr_stream_id>
 801e260:	4684      	mov	ip, r0
 801e262:	4643      	mov	r3, r8
 801e264:	4628      	mov	r0, r5
 801e266:	463a      	mov	r2, r7
 801e268:	4631      	mov	r1, r6
 801e26a:	f8cd c004 	str.w	ip, [sp, #4]
 801e26e:	f004 f893 	bl	8022398 <uxr_prepare_best_effort_buffer_to_send>
 801e272:	2800      	cmp	r0, #0
 801e274:	d13d      	bne.n	801e2f2 <uxr_flash_output_streams+0xba>
 801e276:	f109 0901 	add.w	r9, r9, #1
 801e27a:	7e23      	ldrb	r3, [r4, #24]
 801e27c:	fa5f f089 	uxtb.w	r0, r9
 801e280:	4283      	cmp	r3, r0
 801e282:	d8e6      	bhi.n	801e252 <uxr_flash_output_streams+0x1a>
 801e284:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801e288:	b383      	cbz	r3, 801e2ec <uxr_flash_output_streams+0xb4>
 801e28a:	f04f 0900 	mov.w	r9, #0
 801e28e:	f10d 0802 	add.w	r8, sp, #2
 801e292:	af03      	add	r7, sp, #12
 801e294:	ae02      	add	r6, sp, #8
 801e296:	4648      	mov	r0, r9
 801e298:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 801e29c:	2201      	movs	r2, #1
 801e29e:	2102      	movs	r1, #2
 801e2a0:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 801e2a4:	f000 fa20 	bl	801e6e8 <uxr_stream_id>
 801e2a8:	9001      	str	r0, [sp, #4]
 801e2aa:	3520      	adds	r5, #32
 801e2ac:	e00c      	b.n	801e2c8 <uxr_flash_output_streams+0x90>
 801e2ae:	9b02      	ldr	r3, [sp, #8]
 801e2b0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801e2b4:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801e2b8:	f000 f988 	bl	801e5cc <uxr_stamp_session_header>
 801e2bc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801e2be:	9a03      	ldr	r2, [sp, #12]
 801e2c0:	9902      	ldr	r1, [sp, #8]
 801e2c2:	e9d3 0a00 	ldrd	r0, sl, [r3]
 801e2c6:	47d0      	blx	sl
 801e2c8:	4643      	mov	r3, r8
 801e2ca:	463a      	mov	r2, r7
 801e2cc:	4631      	mov	r1, r6
 801e2ce:	4628      	mov	r0, r5
 801e2d0:	f004 fa70 	bl	80227b4 <uxr_prepare_next_reliable_buffer_to_send>
 801e2d4:	4603      	mov	r3, r0
 801e2d6:	4620      	mov	r0, r4
 801e2d8:	2b00      	cmp	r3, #0
 801e2da:	d1e8      	bne.n	801e2ae <uxr_flash_output_streams+0x76>
 801e2dc:	f109 0901 	add.w	r9, r9, #1
 801e2e0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801e2e4:	fa5f f089 	uxtb.w	r0, r9
 801e2e8:	4283      	cmp	r3, r0
 801e2ea:	d8d5      	bhi.n	801e298 <uxr_flash_output_streams+0x60>
 801e2ec:	b004      	add	sp, #16
 801e2ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e2f2:	9b02      	ldr	r3, [sp, #8]
 801e2f4:	4620      	mov	r0, r4
 801e2f6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801e2fa:	f109 0901 	add.w	r9, r9, #1
 801e2fe:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801e302:	f000 f963 	bl	801e5cc <uxr_stamp_session_header>
 801e306:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801e308:	9a03      	ldr	r2, [sp, #12]
 801e30a:	9902      	ldr	r1, [sp, #8]
 801e30c:	e9d3 0500 	ldrd	r0, r5, [r3]
 801e310:	47a8      	blx	r5
 801e312:	7e23      	ldrb	r3, [r4, #24]
 801e314:	fa5f f089 	uxtb.w	r0, r9
 801e318:	4283      	cmp	r3, r0
 801e31a:	d89a      	bhi.n	801e252 <uxr_flash_output_streams+0x1a>
 801e31c:	e7b2      	b.n	801e284 <uxr_flash_output_streams+0x4c>
 801e31e:	bf00      	nop

0801e320 <uxr_run_session_until_confirm_delivery>:
 801e320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e324:	4606      	mov	r6, r0
 801e326:	460d      	mov	r5, r1
 801e328:	f000 fb5a 	bl	801e9e0 <uxr_millis>
 801e32c:	4607      	mov	r7, r0
 801e32e:	4630      	mov	r0, r6
 801e330:	f106 0808 	add.w	r8, r6, #8
 801e334:	f7ff ff80 	bl	801e238 <uxr_flash_output_streams>
 801e338:	2d00      	cmp	r5, #0
 801e33a:	db10      	blt.n	801e35e <uxr_run_session_until_confirm_delivery+0x3e>
 801e33c:	462c      	mov	r4, r5
 801e33e:	e006      	b.n	801e34e <uxr_run_session_until_confirm_delivery+0x2e>
 801e340:	f7ff fdb2 	bl	801dea8 <listen_message_reliably>
 801e344:	f000 fb4c 	bl	801e9e0 <uxr_millis>
 801e348:	1bc3      	subs	r3, r0, r7
 801e34a:	1aec      	subs	r4, r5, r3
 801e34c:	d407      	bmi.n	801e35e <uxr_run_session_until_confirm_delivery+0x3e>
 801e34e:	4640      	mov	r0, r8
 801e350:	f000 faea 	bl	801e928 <uxr_output_streams_confirmed>
 801e354:	4603      	mov	r3, r0
 801e356:	4621      	mov	r1, r4
 801e358:	4630      	mov	r0, r6
 801e35a:	2b00      	cmp	r3, #0
 801e35c:	d0f0      	beq.n	801e340 <uxr_run_session_until_confirm_delivery+0x20>
 801e35e:	4640      	mov	r0, r8
 801e360:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e364:	f000 bae0 	b.w	801e928 <uxr_output_streams_confirmed>

0801e368 <uxr_run_session_until_all_status>:
 801e368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e36c:	b083      	sub	sp, #12
 801e36e:	468a      	mov	sl, r1
 801e370:	4617      	mov	r7, r2
 801e372:	4699      	mov	r9, r3
 801e374:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 801e378:	4680      	mov	r8, r0
 801e37a:	f7ff ff5d 	bl	801e238 <uxr_flash_output_streams>
 801e37e:	f1bb 0f00 	cmp.w	fp, #0
 801e382:	d004      	beq.n	801e38e <uxr_run_session_until_all_status+0x26>
 801e384:	465a      	mov	r2, fp
 801e386:	21ff      	movs	r1, #255	; 0xff
 801e388:	4648      	mov	r0, r9
 801e38a:	f005 fb2b 	bl	80239e4 <memset>
 801e38e:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 801e392:	f8c8 7074 	str.w	r7, [r8, #116]	; 0x74
 801e396:	e9c8 9b1e 	strd	r9, fp, [r8, #120]	; 0x78
 801e39a:	9301      	str	r3, [sp, #4]
 801e39c:	f000 fb20 	bl	801e9e0 <uxr_millis>
 801e3a0:	4651      	mov	r1, sl
 801e3a2:	9000      	str	r0, [sp, #0]
 801e3a4:	4640      	mov	r0, r8
 801e3a6:	f7ff fd7f 	bl	801dea8 <listen_message_reliably>
 801e3aa:	f000 fb19 	bl	801e9e0 <uxr_millis>
 801e3ae:	9b00      	ldr	r3, [sp, #0]
 801e3b0:	1ac0      	subs	r0, r0, r3
 801e3b2:	ebaa 0100 	sub.w	r1, sl, r0
 801e3b6:	f1bb 0f00 	cmp.w	fp, #0
 801e3ba:	d029      	beq.n	801e410 <uxr_run_session_until_all_status+0xa8>
 801e3bc:	9d01      	ldr	r5, [sp, #4]
 801e3be:	2400      	movs	r4, #0
 801e3c0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801e3c4:	2eff      	cmp	r6, #255	; 0xff
 801e3c6:	d017      	beq.n	801e3f8 <uxr_run_session_until_all_status+0x90>
 801e3c8:	3401      	adds	r4, #1
 801e3ca:	45a3      	cmp	fp, r4
 801e3cc:	d8f8      	bhi.n	801e3c0 <uxr_run_session_until_all_status+0x58>
 801e3ce:	2300      	movs	r3, #0
 801e3d0:	9f01      	ldr	r7, [sp, #4]
 801e3d2:	f8c8 307c 	str.w	r3, [r8, #124]	; 0x7c
 801e3d6:	e000      	b.n	801e3da <uxr_run_session_until_all_status+0x72>
 801e3d8:	b158      	cbz	r0, 801e3f2 <uxr_run_session_until_all_status+0x8a>
 801e3da:	463b      	mov	r3, r7
 801e3dc:	f817 0f01 	ldrb.w	r0, [r7, #1]!
 801e3e0:	3302      	adds	r3, #2
 801e3e2:	2801      	cmp	r0, #1
 801e3e4:	eba3 0309 	sub.w	r3, r3, r9
 801e3e8:	bf8c      	ite	hi
 801e3ea:	2000      	movhi	r0, #0
 801e3ec:	2001      	movls	r0, #1
 801e3ee:	459b      	cmp	fp, r3
 801e3f0:	d8f2      	bhi.n	801e3d8 <uxr_run_session_until_all_status+0x70>
 801e3f2:	b003      	add	sp, #12
 801e3f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e3f8:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 801e3fc:	3401      	adds	r4, #1
 801e3fe:	455c      	cmp	r4, fp
 801e400:	d201      	bcs.n	801e406 <uxr_run_session_until_all_status+0x9e>
 801e402:	2b00      	cmp	r3, #0
 801e404:	d0dc      	beq.n	801e3c0 <uxr_run_session_until_all_status+0x58>
 801e406:	2900      	cmp	r1, #0
 801e408:	dde1      	ble.n	801e3ce <uxr_run_session_until_all_status+0x66>
 801e40a:	2b00      	cmp	r3, #0
 801e40c:	d1ca      	bne.n	801e3a4 <uxr_run_session_until_all_status+0x3c>
 801e40e:	e7de      	b.n	801e3ce <uxr_run_session_until_all_status+0x66>
 801e410:	2001      	movs	r0, #1
 801e412:	f8c8 b07c 	str.w	fp, [r8, #124]	; 0x7c
 801e416:	b003      	add	sp, #12
 801e418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e41c <uxr_prepare_stream_to_write_submessage>:
 801e41c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e420:	b082      	sub	sp, #8
 801e422:	4682      	mov	sl, r0
 801e424:	4610      	mov	r0, r2
 801e426:	4615      	mov	r5, r2
 801e428:	461e      	mov	r6, r3
 801e42a:	f3c1 2407 	ubfx	r4, r1, #8, #8
 801e42e:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 801e432:	f105 0904 	add.w	r9, r5, #4
 801e436:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 801e43a:	9101      	str	r1, [sp, #4]
 801e43c:	f000 faca 	bl	801e9d4 <uxr_submessage_padding>
 801e440:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801e444:	4481      	add	r9, r0
 801e446:	2b01      	cmp	r3, #1
 801e448:	d01d      	beq.n	801e486 <uxr_prepare_stream_to_write_submessage+0x6a>
 801e44a:	2b02      	cmp	r3, #2
 801e44c:	d116      	bne.n	801e47c <uxr_prepare_stream_to_write_submessage+0x60>
 801e44e:	4621      	mov	r1, r4
 801e450:	f10a 0008 	add.w	r0, sl, #8
 801e454:	f000 fa46 	bl	801e8e4 <uxr_get_output_reliable_stream>
 801e458:	4604      	mov	r4, r0
 801e45a:	b158      	cbz	r0, 801e474 <uxr_prepare_stream_to_write_submessage+0x58>
 801e45c:	4649      	mov	r1, r9
 801e45e:	4632      	mov	r2, r6
 801e460:	f004 f840 	bl	80224e4 <uxr_prepare_reliable_buffer_to_write>
 801e464:	4604      	mov	r4, r0
 801e466:	b12c      	cbz	r4, 801e474 <uxr_prepare_stream_to_write_submessage+0x58>
 801e468:	4643      	mov	r3, r8
 801e46a:	b2aa      	uxth	r2, r5
 801e46c:	4639      	mov	r1, r7
 801e46e:	4630      	mov	r0, r6
 801e470:	f000 fa70 	bl	801e954 <uxr_buffer_submessage_header>
 801e474:	4620      	mov	r0, r4
 801e476:	b002      	add	sp, #8
 801e478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e47c:	2400      	movs	r4, #0
 801e47e:	4620      	mov	r0, r4
 801e480:	b002      	add	sp, #8
 801e482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e486:	4621      	mov	r1, r4
 801e488:	f10a 0008 	add.w	r0, sl, #8
 801e48c:	f000 fa22 	bl	801e8d4 <uxr_get_output_best_effort_stream>
 801e490:	4604      	mov	r4, r0
 801e492:	2800      	cmp	r0, #0
 801e494:	d0ee      	beq.n	801e474 <uxr_prepare_stream_to_write_submessage+0x58>
 801e496:	4649      	mov	r1, r9
 801e498:	4632      	mov	r2, r6
 801e49a:	f003 ff5d 	bl	8022358 <uxr_prepare_best_effort_buffer_to_write>
 801e49e:	4604      	mov	r4, r0
 801e4a0:	e7e1      	b.n	801e466 <uxr_prepare_stream_to_write_submessage+0x4a>
 801e4a2:	bf00      	nop

0801e4a4 <uxr_init_session_info>:
 801e4a4:	b430      	push	{r4, r5}
 801e4a6:	23ff      	movs	r3, #255	; 0xff
 801e4a8:	0e15      	lsrs	r5, r2, #24
 801e4aa:	2409      	movs	r4, #9
 801e4ac:	7102      	strb	r2, [r0, #4]
 801e4ae:	7001      	strb	r1, [r0, #0]
 801e4b0:	f3c2 4107 	ubfx	r1, r2, #16, #8
 801e4b4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801e4b8:	7045      	strb	r5, [r0, #1]
 801e4ba:	80c4      	strh	r4, [r0, #6]
 801e4bc:	7081      	strb	r1, [r0, #2]
 801e4be:	70c2      	strb	r2, [r0, #3]
 801e4c0:	7143      	strb	r3, [r0, #5]
 801e4c2:	bc30      	pop	{r4, r5}
 801e4c4:	4770      	bx	lr
 801e4c6:	bf00      	nop

0801e4c8 <uxr_buffer_create_session>:
 801e4c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e4ca:	4604      	mov	r4, r0
 801e4cc:	b089      	sub	sp, #36	; 0x24
 801e4ce:	2701      	movs	r7, #1
 801e4d0:	4e0f      	ldr	r6, [pc, #60]	; (801e510 <uxr_buffer_create_session+0x48>)
 801e4d2:	f8ad 201c 	strh.w	r2, [sp, #28]
 801e4d6:	2300      	movs	r3, #0
 801e4d8:	80c7      	strh	r7, [r0, #6]
 801e4da:	460d      	mov	r5, r1
 801e4dc:	7822      	ldrb	r2, [r4, #0]
 801e4de:	4608      	mov	r0, r1
 801e4e0:	f8d4 1001 	ldr.w	r1, [r4, #1]
 801e4e4:	f88d 200c 	strb.w	r2, [sp, #12]
 801e4e8:	6832      	ldr	r2, [r6, #0]
 801e4ea:	88b4      	ldrh	r4, [r6, #4]
 801e4ec:	9102      	str	r1, [sp, #8]
 801e4ee:	4619      	mov	r1, r3
 801e4f0:	9200      	str	r2, [sp, #0]
 801e4f2:	2210      	movs	r2, #16
 801e4f4:	f88d 300d 	strb.w	r3, [sp, #13]
 801e4f8:	f8ad 7004 	strh.w	r7, [sp, #4]
 801e4fc:	f8ad 4006 	strh.w	r4, [sp, #6]
 801e500:	f000 fa28 	bl	801e954 <uxr_buffer_submessage_header>
 801e504:	4669      	mov	r1, sp
 801e506:	4628      	mov	r0, r5
 801e508:	f001 f83c 	bl	801f584 <uxr_serialize_CREATE_CLIENT_Payload>
 801e50c:	b009      	add	sp, #36	; 0x24
 801e50e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e510:	08029174 	.word	0x08029174

0801e514 <uxr_buffer_delete_session>:
 801e514:	4a0c      	ldr	r2, [pc, #48]	; (801e548 <uxr_buffer_delete_session+0x34>)
 801e516:	2302      	movs	r3, #2
 801e518:	b530      	push	{r4, r5, lr}
 801e51a:	460c      	mov	r4, r1
 801e51c:	b083      	sub	sp, #12
 801e51e:	8911      	ldrh	r1, [r2, #8]
 801e520:	f44f 7500 	mov.w	r5, #512	; 0x200
 801e524:	2204      	movs	r2, #4
 801e526:	80c3      	strh	r3, [r0, #6]
 801e528:	f8ad 1006 	strh.w	r1, [sp, #6]
 801e52c:	2300      	movs	r3, #0
 801e52e:	4620      	mov	r0, r4
 801e530:	2103      	movs	r1, #3
 801e532:	f8ad 5004 	strh.w	r5, [sp, #4]
 801e536:	f000 fa0d 	bl	801e954 <uxr_buffer_submessage_header>
 801e53a:	a901      	add	r1, sp, #4
 801e53c:	4620      	mov	r0, r4
 801e53e:	f001 f8bb 	bl	801f6b8 <uxr_serialize_DELETE_Payload>
 801e542:	b003      	add	sp, #12
 801e544:	bd30      	pop	{r4, r5, pc}
 801e546:	bf00      	nop
 801e548:	08029174 	.word	0x08029174

0801e54c <uxr_read_create_session_status>:
 801e54c:	b510      	push	{r4, lr}
 801e54e:	460b      	mov	r3, r1
 801e550:	b088      	sub	sp, #32
 801e552:	4604      	mov	r4, r0
 801e554:	a901      	add	r1, sp, #4
 801e556:	4618      	mov	r0, r3
 801e558:	f001 f8be 	bl	801f6d8 <uxr_deserialize_STATUS_AGENT_Payload>
 801e55c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801e560:	7163      	strb	r3, [r4, #5]
 801e562:	b008      	add	sp, #32
 801e564:	bd10      	pop	{r4, pc}
 801e566:	bf00      	nop

0801e568 <uxr_read_delete_session_status>:
 801e568:	b510      	push	{r4, lr}
 801e56a:	b084      	sub	sp, #16
 801e56c:	4604      	mov	r4, r0
 801e56e:	4608      	mov	r0, r1
 801e570:	a902      	add	r1, sp, #8
 801e572:	f001 f8e1 	bl	801f738 <uxr_deserialize_STATUS_Payload>
 801e576:	88e3      	ldrh	r3, [r4, #6]
 801e578:	2b02      	cmp	r3, #2
 801e57a:	d001      	beq.n	801e580 <uxr_read_delete_session_status+0x18>
 801e57c:	b004      	add	sp, #16
 801e57e:	bd10      	pop	{r4, pc}
 801e580:	f10d 000a 	add.w	r0, sp, #10
 801e584:	f7ff f984 	bl	801d890 <uxr_object_id_from_raw>
 801e588:	f89d 2008 	ldrb.w	r2, [sp, #8]
 801e58c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 801e590:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801e594:	b29b      	uxth	r3, r3
 801e596:	2b02      	cmp	r3, #2
 801e598:	d1f0      	bne.n	801e57c <uxr_read_delete_session_status+0x14>
 801e59a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801e59e:	7163      	strb	r3, [r4, #5]
 801e5a0:	e7ec      	b.n	801e57c <uxr_read_delete_session_status+0x14>
 801e5a2:	bf00      	nop

0801e5a4 <uxr_stamp_create_session_header>:
 801e5a4:	b510      	push	{r4, lr}
 801e5a6:	2208      	movs	r2, #8
 801e5a8:	b08a      	sub	sp, #40	; 0x28
 801e5aa:	4604      	mov	r4, r0
 801e5ac:	eb0d 0002 	add.w	r0, sp, r2
 801e5b0:	f7fe ff92 	bl	801d4d8 <ucdr_init_buffer>
 801e5b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e5b8:	2300      	movs	r3, #0
 801e5ba:	a802      	add	r0, sp, #8
 801e5bc:	f001 0180 	and.w	r1, r1, #128	; 0x80
 801e5c0:	9400      	str	r4, [sp, #0]
 801e5c2:	461a      	mov	r2, r3
 801e5c4:	f000 fbc8 	bl	801ed58 <uxr_serialize_message_header>
 801e5c8:	b00a      	add	sp, #40	; 0x28
 801e5ca:	bd10      	pop	{r4, pc}

0801e5cc <uxr_stamp_session_header>:
 801e5cc:	b570      	push	{r4, r5, r6, lr}
 801e5ce:	b08c      	sub	sp, #48	; 0x30
 801e5d0:	4604      	mov	r4, r0
 801e5d2:	4615      	mov	r5, r2
 801e5d4:	460e      	mov	r6, r1
 801e5d6:	a804      	add	r0, sp, #16
 801e5d8:	4619      	mov	r1, r3
 801e5da:	2208      	movs	r2, #8
 801e5dc:	9503      	str	r5, [sp, #12]
 801e5de:	f7fe ff7b 	bl	801d4d8 <ucdr_init_buffer>
 801e5e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e5e6:	4632      	mov	r2, r6
 801e5e8:	9b03      	ldr	r3, [sp, #12]
 801e5ea:	a804      	add	r0, sp, #16
 801e5ec:	9400      	str	r4, [sp, #0]
 801e5ee:	f000 fbb3 	bl	801ed58 <uxr_serialize_message_header>
 801e5f2:	b00c      	add	sp, #48	; 0x30
 801e5f4:	bd70      	pop	{r4, r5, r6, pc}
 801e5f6:	bf00      	nop

0801e5f8 <uxr_read_session_header>:
 801e5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e5fc:	4607      	mov	r7, r0
 801e5fe:	b084      	sub	sp, #16
 801e600:	4608      	mov	r0, r1
 801e602:	460c      	mov	r4, r1
 801e604:	4615      	mov	r5, r2
 801e606:	461e      	mov	r6, r3
 801e608:	f7fe ff98 	bl	801d53c <ucdr_buffer_remaining>
 801e60c:	2808      	cmp	r0, #8
 801e60e:	d803      	bhi.n	801e618 <uxr_read_session_header+0x20>
 801e610:	2000      	movs	r0, #0
 801e612:	b004      	add	sp, #16
 801e614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e618:	f10d 080c 	add.w	r8, sp, #12
 801e61c:	4633      	mov	r3, r6
 801e61e:	462a      	mov	r2, r5
 801e620:	4620      	mov	r0, r4
 801e622:	f10d 010b 	add.w	r1, sp, #11
 801e626:	f8cd 8000 	str.w	r8, [sp]
 801e62a:	f000 fbb3 	bl	801ed94 <uxr_deserialize_message_header>
 801e62e:	783a      	ldrb	r2, [r7, #0]
 801e630:	f89d 300b 	ldrb.w	r3, [sp, #11]
 801e634:	4293      	cmp	r3, r2
 801e636:	d1eb      	bne.n	801e610 <uxr_read_session_header+0x18>
 801e638:	061b      	lsls	r3, r3, #24
 801e63a:	d41b      	bmi.n	801e674 <uxr_read_session_header+0x7c>
 801e63c:	f898 2000 	ldrb.w	r2, [r8]
 801e640:	787b      	ldrb	r3, [r7, #1]
 801e642:	429a      	cmp	r2, r3
 801e644:	d003      	beq.n	801e64e <uxr_read_session_header+0x56>
 801e646:	2001      	movs	r0, #1
 801e648:	f080 0001 	eor.w	r0, r0, #1
 801e64c:	e7e1      	b.n	801e612 <uxr_read_session_header+0x1a>
 801e64e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801e652:	1cb8      	adds	r0, r7, #2
 801e654:	78bb      	ldrb	r3, [r7, #2]
 801e656:	429a      	cmp	r2, r3
 801e658:	d1f5      	bne.n	801e646 <uxr_read_session_header+0x4e>
 801e65a:	f89d 200e 	ldrb.w	r2, [sp, #14]
 801e65e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801e662:	429a      	cmp	r2, r3
 801e664:	d1ef      	bne.n	801e646 <uxr_read_session_header+0x4e>
 801e666:	7843      	ldrb	r3, [r0, #1]
 801e668:	f89d 200f 	ldrb.w	r2, [sp, #15]
 801e66c:	429a      	cmp	r2, r3
 801e66e:	d1ea      	bne.n	801e646 <uxr_read_session_header+0x4e>
 801e670:	2000      	movs	r0, #0
 801e672:	e7e9      	b.n	801e648 <uxr_read_session_header+0x50>
 801e674:	2001      	movs	r0, #1
 801e676:	e7cc      	b.n	801e612 <uxr_read_session_header+0x1a>

0801e678 <uxr_session_header_offset>:
 801e678:	f990 3000 	ldrsb.w	r3, [r0]
 801e67c:	2b00      	cmp	r3, #0
 801e67e:	bfac      	ite	ge
 801e680:	2008      	movge	r0, #8
 801e682:	2004      	movlt	r0, #4
 801e684:	4770      	bx	lr
 801e686:	bf00      	nop

0801e688 <uxr_init_base_object_request>:
 801e688:	b530      	push	{r4, r5, lr}
 801e68a:	b083      	sub	sp, #12
 801e68c:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 801e690:	9101      	str	r1, [sp, #4]
 801e692:	88c3      	ldrh	r3, [r0, #6]
 801e694:	f1a3 010a 	sub.w	r1, r3, #10
 801e698:	b289      	uxth	r1, r1
 801e69a:	42a1      	cmp	r1, r4
 801e69c:	d80e      	bhi.n	801e6bc <uxr_init_base_object_request+0x34>
 801e69e:	3301      	adds	r3, #1
 801e6a0:	b29c      	uxth	r4, r3
 801e6a2:	f3c3 2507 	ubfx	r5, r3, #8, #8
 801e6a6:	b2db      	uxtb	r3, r3
 801e6a8:	80c4      	strh	r4, [r0, #6]
 801e6aa:	1c91      	adds	r1, r2, #2
 801e6ac:	9801      	ldr	r0, [sp, #4]
 801e6ae:	7015      	strb	r5, [r2, #0]
 801e6b0:	7053      	strb	r3, [r2, #1]
 801e6b2:	f7ff f901 	bl	801d8b8 <uxr_object_id_to_raw>
 801e6b6:	4620      	mov	r0, r4
 801e6b8:	b003      	add	sp, #12
 801e6ba:	bd30      	pop	{r4, r5, pc}
 801e6bc:	230a      	movs	r3, #10
 801e6be:	2500      	movs	r5, #0
 801e6c0:	461c      	mov	r4, r3
 801e6c2:	e7f1      	b.n	801e6a8 <uxr_init_base_object_request+0x20>

0801e6c4 <uxr_parse_base_object_request>:
 801e6c4:	b570      	push	{r4, r5, r6, lr}
 801e6c6:	4604      	mov	r4, r0
 801e6c8:	3002      	adds	r0, #2
 801e6ca:	460d      	mov	r5, r1
 801e6cc:	4616      	mov	r6, r2
 801e6ce:	f7ff f8df 	bl	801d890 <uxr_object_id_from_raw>
 801e6d2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 801e6d6:	8028      	strh	r0, [r5, #0]
 801e6d8:	806b      	strh	r3, [r5, #2]
 801e6da:	7822      	ldrb	r2, [r4, #0]
 801e6dc:	7863      	ldrb	r3, [r4, #1]
 801e6de:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801e6e2:	8033      	strh	r3, [r6, #0]
 801e6e4:	bd70      	pop	{r4, r5, r6, pc}
 801e6e6:	bf00      	nop

0801e6e8 <uxr_stream_id>:
 801e6e8:	2901      	cmp	r1, #1
 801e6ea:	b430      	push	{r4, r5}
 801e6ec:	4604      	mov	r4, r0
 801e6ee:	b082      	sub	sp, #8
 801e6f0:	d01e      	beq.n	801e730 <uxr_stream_id+0x48>
 801e6f2:	2902      	cmp	r1, #2
 801e6f4:	f04f 0500 	mov.w	r5, #0
 801e6f8:	d01d      	beq.n	801e736 <uxr_stream_id+0x4e>
 801e6fa:	2300      	movs	r3, #0
 801e6fc:	4618      	mov	r0, r3
 801e6fe:	f365 0307 	bfi	r3, r5, #0, #8
 801e702:	f364 230f 	bfi	r3, r4, #8, #8
 801e706:	f361 4317 	bfi	r3, r1, #16, #8
 801e70a:	f362 631f 	bfi	r3, r2, #24, #8
 801e70e:	b2dc      	uxtb	r4, r3
 801e710:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801e714:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801e718:	0e1b      	lsrs	r3, r3, #24
 801e71a:	f364 0007 	bfi	r0, r4, #0, #8
 801e71e:	f361 200f 	bfi	r0, r1, #8, #8
 801e722:	f362 4017 	bfi	r0, r2, #16, #8
 801e726:	f363 601f 	bfi	r0, r3, #24, #8
 801e72a:	b002      	add	sp, #8
 801e72c:	bc30      	pop	{r4, r5}
 801e72e:	4770      	bx	lr
 801e730:	1c45      	adds	r5, r0, #1
 801e732:	b2ed      	uxtb	r5, r5
 801e734:	e7e1      	b.n	801e6fa <uxr_stream_id+0x12>
 801e736:	f080 0580 	eor.w	r5, r0, #128	; 0x80
 801e73a:	e7de      	b.n	801e6fa <uxr_stream_id+0x12>

0801e73c <uxr_stream_id_from_raw>:
 801e73c:	b430      	push	{r4, r5}
 801e73e:	b082      	sub	sp, #8
 801e740:	b128      	cbz	r0, 801e74e <uxr_stream_id_from_raw+0x12>
 801e742:	0603      	lsls	r3, r0, #24
 801e744:	d421      	bmi.n	801e78a <uxr_stream_id_from_raw+0x4e>
 801e746:	1e44      	subs	r4, r0, #1
 801e748:	2501      	movs	r5, #1
 801e74a:	b2e4      	uxtb	r4, r4
 801e74c:	e001      	b.n	801e752 <uxr_stream_id_from_raw+0x16>
 801e74e:	4605      	mov	r5, r0
 801e750:	4604      	mov	r4, r0
 801e752:	2300      	movs	r3, #0
 801e754:	461a      	mov	r2, r3
 801e756:	f360 0307 	bfi	r3, r0, #0, #8
 801e75a:	f364 230f 	bfi	r3, r4, #8, #8
 801e75e:	f365 4317 	bfi	r3, r5, #16, #8
 801e762:	f361 631f 	bfi	r3, r1, #24, #8
 801e766:	b2dc      	uxtb	r4, r3
 801e768:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801e76c:	f3c3 4107 	ubfx	r1, r3, #16, #8
 801e770:	0e1b      	lsrs	r3, r3, #24
 801e772:	f364 0207 	bfi	r2, r4, #0, #8
 801e776:	f360 220f 	bfi	r2, r0, #8, #8
 801e77a:	f361 4217 	bfi	r2, r1, #16, #8
 801e77e:	f363 621f 	bfi	r2, r3, #24, #8
 801e782:	4610      	mov	r0, r2
 801e784:	b002      	add	sp, #8
 801e786:	bc30      	pop	{r4, r5}
 801e788:	4770      	bx	lr
 801e78a:	f080 0480 	eor.w	r4, r0, #128	; 0x80
 801e78e:	2502      	movs	r5, #2
 801e790:	e7df      	b.n	801e752 <uxr_stream_id_from_raw+0x16>
 801e792:	bf00      	nop

0801e794 <uxr_init_stream_storage>:
 801e794:	2300      	movs	r3, #0
 801e796:	7403      	strb	r3, [r0, #16]
 801e798:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 801e79c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 801e7a0:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 801e7a4:	4770      	bx	lr
 801e7a6:	bf00      	nop

0801e7a8 <uxr_reset_stream_storage>:
 801e7a8:	b570      	push	{r4, r5, r6, lr}
 801e7aa:	7c03      	ldrb	r3, [r0, #16]
 801e7ac:	4604      	mov	r4, r0
 801e7ae:	b14b      	cbz	r3, 801e7c4 <uxr_reset_stream_storage+0x1c>
 801e7b0:	4606      	mov	r6, r0
 801e7b2:	2500      	movs	r5, #0
 801e7b4:	4630      	mov	r0, r6
 801e7b6:	3501      	adds	r5, #1
 801e7b8:	f003 fdc8 	bl	802234c <uxr_reset_output_best_effort_stream>
 801e7bc:	7c23      	ldrb	r3, [r4, #16]
 801e7be:	3610      	adds	r6, #16
 801e7c0:	42ab      	cmp	r3, r5
 801e7c2:	d8f7      	bhi.n	801e7b4 <uxr_reset_stream_storage+0xc>
 801e7c4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801e7c8:	b15b      	cbz	r3, 801e7e2 <uxr_reset_stream_storage+0x3a>
 801e7ca:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801e7ce:	2500      	movs	r5, #0
 801e7d0:	4630      	mov	r0, r6
 801e7d2:	3501      	adds	r5, #1
 801e7d4:	f003 fbbe 	bl	8021f54 <uxr_reset_input_best_effort_stream>
 801e7d8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801e7dc:	3602      	adds	r6, #2
 801e7de:	42ab      	cmp	r3, r5
 801e7e0:	d8f6      	bhi.n	801e7d0 <uxr_reset_stream_storage+0x28>
 801e7e2:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 801e7e6:	b15b      	cbz	r3, 801e800 <uxr_reset_stream_storage+0x58>
 801e7e8:	f104 0618 	add.w	r6, r4, #24
 801e7ec:	2500      	movs	r5, #0
 801e7ee:	4630      	mov	r0, r6
 801e7f0:	3501      	adds	r5, #1
 801e7f2:	f003 fe4d 	bl	8022490 <uxr_reset_output_reliable_stream>
 801e7f6:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 801e7fa:	3628      	adds	r6, #40	; 0x28
 801e7fc:	42ab      	cmp	r3, r5
 801e7fe:	d8f6      	bhi.n	801e7ee <uxr_reset_stream_storage+0x46>
 801e800:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 801e804:	b15b      	cbz	r3, 801e81e <uxr_reset_stream_storage+0x76>
 801e806:	f104 0648 	add.w	r6, r4, #72	; 0x48
 801e80a:	2500      	movs	r5, #0
 801e80c:	4630      	mov	r0, r6
 801e80e:	3501      	adds	r5, #1
 801e810:	f003 fc08 	bl	8022024 <uxr_reset_input_reliable_stream>
 801e814:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 801e818:	3618      	adds	r6, #24
 801e81a:	42ab      	cmp	r3, r5
 801e81c:	d8f6      	bhi.n	801e80c <uxr_reset_stream_storage+0x64>
 801e81e:	bd70      	pop	{r4, r5, r6, pc}

0801e820 <uxr_add_output_best_effort_buffer>:
 801e820:	b570      	push	{r4, r5, r6, lr}
 801e822:	7c05      	ldrb	r5, [r0, #16]
 801e824:	4604      	mov	r4, r0
 801e826:	b082      	sub	sp, #8
 801e828:	1c6e      	adds	r6, r5, #1
 801e82a:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 801e82e:	7426      	strb	r6, [r4, #16]
 801e830:	f003 fd80 	bl	8022334 <uxr_init_output_best_effort_stream>
 801e834:	2201      	movs	r2, #1
 801e836:	4628      	mov	r0, r5
 801e838:	4611      	mov	r1, r2
 801e83a:	b002      	add	sp, #8
 801e83c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e840:	f7ff bf52 	b.w	801e6e8 <uxr_stream_id>

0801e844 <uxr_add_output_reliable_buffer>:
 801e844:	b570      	push	{r4, r5, r6, lr}
 801e846:	b084      	sub	sp, #16
 801e848:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 801e84c:	2528      	movs	r5, #40	; 0x28
 801e84e:	f89d 6020 	ldrb.w	r6, [sp, #32]
 801e852:	fb05 0504 	mla	r5, r5, r4, r0
 801e856:	9600      	str	r6, [sp, #0]
 801e858:	1c66      	adds	r6, r4, #1
 801e85a:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
 801e85e:	f105 0018 	add.w	r0, r5, #24
 801e862:	f003 fde3 	bl	802242c <uxr_init_output_reliable_stream>
 801e866:	4620      	mov	r0, r4
 801e868:	2201      	movs	r2, #1
 801e86a:	2102      	movs	r1, #2
 801e86c:	b004      	add	sp, #16
 801e86e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e872:	f7ff bf39 	b.w	801e6e8 <uxr_stream_id>
 801e876:	bf00      	nop

0801e878 <uxr_add_input_best_effort_buffer>:
 801e878:	b510      	push	{r4, lr}
 801e87a:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 801e87e:	b082      	sub	sp, #8
 801e880:	1c62      	adds	r2, r4, #1
 801e882:	f104 0321 	add.w	r3, r4, #33	; 0x21
 801e886:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 801e88a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e88e:	f003 fb5d 	bl	8021f4c <uxr_init_input_best_effort_stream>
 801e892:	4620      	mov	r0, r4
 801e894:	2200      	movs	r2, #0
 801e896:	2101      	movs	r1, #1
 801e898:	b002      	add	sp, #8
 801e89a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e89e:	f7ff bf23 	b.w	801e6e8 <uxr_stream_id>
 801e8a2:	bf00      	nop

0801e8a4 <uxr_add_input_reliable_buffer>:
 801e8a4:	b570      	push	{r4, r5, r6, lr}
 801e8a6:	b084      	sub	sp, #16
 801e8a8:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 801e8ac:	2518      	movs	r5, #24
 801e8ae:	9e08      	ldr	r6, [sp, #32]
 801e8b0:	fb05 0504 	mla	r5, r5, r4, r0
 801e8b4:	9600      	str	r6, [sp, #0]
 801e8b6:	1c66      	adds	r6, r4, #1
 801e8b8:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
 801e8bc:	f105 0048 	add.w	r0, r5, #72	; 0x48
 801e8c0:	f003 fb8c 	bl	8021fdc <uxr_init_input_reliable_stream>
 801e8c4:	4620      	mov	r0, r4
 801e8c6:	2200      	movs	r2, #0
 801e8c8:	2102      	movs	r1, #2
 801e8ca:	b004      	add	sp, #16
 801e8cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e8d0:	f7ff bf0a 	b.w	801e6e8 <uxr_stream_id>

0801e8d4 <uxr_get_output_best_effort_stream>:
 801e8d4:	7c03      	ldrb	r3, [r0, #16]
 801e8d6:	428b      	cmp	r3, r1
 801e8d8:	bf8c      	ite	hi
 801e8da:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801e8de:	2000      	movls	r0, #0
 801e8e0:	4770      	bx	lr
 801e8e2:	bf00      	nop

0801e8e4 <uxr_get_output_reliable_stream>:
 801e8e4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 801e8e8:	428b      	cmp	r3, r1
 801e8ea:	d905      	bls.n	801e8f8 <uxr_get_output_reliable_stream+0x14>
 801e8ec:	2328      	movs	r3, #40	; 0x28
 801e8ee:	fb03 0101 	mla	r1, r3, r1, r0
 801e8f2:	f101 0018 	add.w	r0, r1, #24
 801e8f6:	4770      	bx	lr
 801e8f8:	2000      	movs	r0, #0
 801e8fa:	4770      	bx	lr

0801e8fc <uxr_get_input_best_effort_stream>:
 801e8fc:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 801e900:	428b      	cmp	r3, r1
 801e902:	d903      	bls.n	801e90c <uxr_get_input_best_effort_stream+0x10>
 801e904:	3121      	adds	r1, #33	; 0x21
 801e906:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801e90a:	4770      	bx	lr
 801e90c:	2000      	movs	r0, #0
 801e90e:	4770      	bx	lr

0801e910 <uxr_get_input_reliable_stream>:
 801e910:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 801e914:	428b      	cmp	r3, r1
 801e916:	d905      	bls.n	801e924 <uxr_get_input_reliable_stream+0x14>
 801e918:	2318      	movs	r3, #24
 801e91a:	fb03 0101 	mla	r1, r3, r1, r0
 801e91e:	f101 0048 	add.w	r0, r1, #72	; 0x48
 801e922:	4770      	bx	lr
 801e924:	2000      	movs	r0, #0
 801e926:	4770      	bx	lr

0801e928 <uxr_output_streams_confirmed>:
 801e928:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 801e92c:	b183      	cbz	r3, 801e950 <uxr_output_streams_confirmed+0x28>
 801e92e:	b570      	push	{r4, r5, r6, lr}
 801e930:	4606      	mov	r6, r0
 801e932:	f100 0518 	add.w	r5, r0, #24
 801e936:	2400      	movs	r4, #0
 801e938:	e000      	b.n	801e93c <uxr_output_streams_confirmed+0x14>
 801e93a:	b140      	cbz	r0, 801e94e <uxr_output_streams_confirmed+0x26>
 801e93c:	4628      	mov	r0, r5
 801e93e:	3401      	adds	r4, #1
 801e940:	f004 f81a 	bl	8022978 <uxr_is_output_up_to_date>
 801e944:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 801e948:	3528      	adds	r5, #40	; 0x28
 801e94a:	42a3      	cmp	r3, r4
 801e94c:	d8f5      	bhi.n	801e93a <uxr_output_streams_confirmed+0x12>
 801e94e:	bd70      	pop	{r4, r5, r6, pc}
 801e950:	2001      	movs	r0, #1
 801e952:	4770      	bx	lr

0801e954 <uxr_buffer_submessage_header>:
 801e954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e956:	460e      	mov	r6, r1
 801e958:	2104      	movs	r1, #4
 801e95a:	4604      	mov	r4, r0
 801e95c:	4615      	mov	r5, r2
 801e95e:	461f      	mov	r7, r3
 801e960:	f7fe fdd6 	bl	801d510 <ucdr_align_to>
 801e964:	2001      	movs	r0, #1
 801e966:	4631      	mov	r1, r6
 801e968:	462b      	mov	r3, r5
 801e96a:	ea47 0200 	orr.w	r2, r7, r0
 801e96e:	7520      	strb	r0, [r4, #20]
 801e970:	4620      	mov	r0, r4
 801e972:	f000 fa2f 	bl	801edd4 <uxr_serialize_submessage_header>
 801e976:	4620      	mov	r0, r4
 801e978:	f7fe fde0 	bl	801d53c <ucdr_buffer_remaining>
 801e97c:	42a8      	cmp	r0, r5
 801e97e:	bf34      	ite	cc
 801e980:	2000      	movcc	r0, #0
 801e982:	2001      	movcs	r0, #1
 801e984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e986:	bf00      	nop

0801e988 <uxr_read_submessage_header>:
 801e988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e98c:	4604      	mov	r4, r0
 801e98e:	460d      	mov	r5, r1
 801e990:	2104      	movs	r1, #4
 801e992:	4616      	mov	r6, r2
 801e994:	4698      	mov	r8, r3
 801e996:	f7fe fdbb 	bl	801d510 <ucdr_align_to>
 801e99a:	4620      	mov	r0, r4
 801e99c:	f7fe fdce 	bl	801d53c <ucdr_buffer_remaining>
 801e9a0:	2803      	cmp	r0, #3
 801e9a2:	bf8c      	ite	hi
 801e9a4:	2701      	movhi	r7, #1
 801e9a6:	2700      	movls	r7, #0
 801e9a8:	d802      	bhi.n	801e9b0 <uxr_read_submessage_header+0x28>
 801e9aa:	4638      	mov	r0, r7
 801e9ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e9b0:	4633      	mov	r3, r6
 801e9b2:	4642      	mov	r2, r8
 801e9b4:	4620      	mov	r0, r4
 801e9b6:	4629      	mov	r1, r5
 801e9b8:	f000 fa20 	bl	801edfc <uxr_deserialize_submessage_header>
 801e9bc:	f898 3000 	ldrb.w	r3, [r8]
 801e9c0:	4638      	mov	r0, r7
 801e9c2:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 801e9c6:	f003 0301 	and.w	r3, r3, #1
 801e9ca:	f888 2000 	strb.w	r2, [r8]
 801e9ce:	7523      	strb	r3, [r4, #20]
 801e9d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e9d4 <uxr_submessage_padding>:
 801e9d4:	f010 0003 	ands.w	r0, r0, #3
 801e9d8:	bf18      	it	ne
 801e9da:	f1c0 0004 	rsbne	r0, r0, #4
 801e9de:	4770      	bx	lr

0801e9e0 <uxr_millis>:
 801e9e0:	b570      	push	{r4, r5, r6, lr}
 801e9e2:	b084      	sub	sp, #16
 801e9e4:	2001      	movs	r0, #1
 801e9e6:	4c0a      	ldr	r4, [pc, #40]	; (801ea10 <uxr_millis+0x30>)
 801e9e8:	4669      	mov	r1, sp
 801e9ea:	f7e2 fbb1 	bl	8001150 <clock_gettime>
 801e9ee:	9800      	ldr	r0, [sp, #0]
 801e9f0:	9d02      	ldr	r5, [sp, #8]
 801e9f2:	2300      	movs	r3, #0
 801e9f4:	fba0 0104 	umull	r0, r1, r0, r4
 801e9f8:	9e01      	ldr	r6, [sp, #4]
 801e9fa:	4a06      	ldr	r2, [pc, #24]	; (801ea14 <uxr_millis+0x34>)
 801e9fc:	1940      	adds	r0, r0, r5
 801e9fe:	fb04 1106 	mla	r1, r4, r6, r1
 801ea02:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
 801ea06:	f7e1 fc6b 	bl	80002e0 <__aeabi_ldivmod>
 801ea0a:	b004      	add	sp, #16
 801ea0c:	bd70      	pop	{r4, r5, r6, pc}
 801ea0e:	bf00      	nop
 801ea10:	3b9aca00 	.word	0x3b9aca00
 801ea14:	000f4240 	.word	0x000f4240

0801ea18 <uxr_nanos>:
 801ea18:	b510      	push	{r4, lr}
 801ea1a:	b084      	sub	sp, #16
 801ea1c:	2001      	movs	r0, #1
 801ea1e:	4669      	mov	r1, sp
 801ea20:	f7e2 fb96 	bl	8001150 <clock_gettime>
 801ea24:	4906      	ldr	r1, [pc, #24]	; (801ea40 <uxr_nanos+0x28>)
 801ea26:	9802      	ldr	r0, [sp, #8]
 801ea28:	e9dd 2400 	ldrd	r2, r4, [sp]
 801ea2c:	fba2 2301 	umull	r2, r3, r2, r1
 801ea30:	fb01 3304 	mla	r3, r1, r4, r3
 801ea34:	4604      	mov	r4, r0
 801ea36:	1810      	adds	r0, r2, r0
 801ea38:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 801ea3c:	b004      	add	sp, #16
 801ea3e:	bd10      	pop	{r4, pc}
 801ea40:	3b9aca00 	.word	0x3b9aca00

0801ea44 <on_full_output_buffer_fragmented>:
 801ea44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ea48:	460c      	mov	r4, r1
 801ea4a:	b08a      	sub	sp, #40	; 0x28
 801ea4c:	4680      	mov	r8, r0
 801ea4e:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 801ea52:	f104 0008 	add.w	r0, r4, #8
 801ea56:	f7ff ff45 	bl	801e8e4 <uxr_get_output_reliable_stream>
 801ea5a:	4605      	mov	r5, r0
 801ea5c:	f003 ff96 	bl	802298c <get_available_free_slots>
 801ea60:	b978      	cbnz	r0, 801ea82 <on_full_output_buffer_fragmented+0x3e>
 801ea62:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 801ea66:	4620      	mov	r0, r4
 801ea68:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
 801ea6c:	4798      	blx	r3
 801ea6e:	b918      	cbnz	r0, 801ea78 <on_full_output_buffer_fragmented+0x34>
 801ea70:	2001      	movs	r0, #1
 801ea72:	b00a      	add	sp, #40	; 0x28
 801ea74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ea78:	4628      	mov	r0, r5
 801ea7a:	f003 ff87 	bl	802298c <get_available_free_slots>
 801ea7e:	2800      	cmp	r0, #0
 801ea80:	d0f6      	beq.n	801ea70 <on_full_output_buffer_fragmented+0x2c>
 801ea82:	8929      	ldrh	r1, [r5, #8]
 801ea84:	f64f 7afc 	movw	sl, #65532	; 0xfffc
 801ea88:	89e8      	ldrh	r0, [r5, #14]
 801ea8a:	2300      	movs	r3, #0
 801ea8c:	686e      	ldr	r6, [r5, #4]
 801ea8e:	7b2f      	ldrb	r7, [r5, #12]
 801ea90:	fbb0 f2f1 	udiv	r2, r0, r1
 801ea94:	fbb6 f6f1 	udiv	r6, r6, r1
 801ea98:	fb01 0212 	mls	r2, r1, r2, r0
 801ea9c:	f1a6 0904 	sub.w	r9, r6, #4
 801eaa0:	ebaa 0a07 	sub.w	sl, sl, r7
 801eaa4:	6829      	ldr	r1, [r5, #0]
 801eaa6:	b292      	uxth	r2, r2
 801eaa8:	f8d4 70c4 	ldr.w	r7, [r4, #196]	; 0xc4
 801eaac:	44ca      	add	sl, r9
 801eaae:	a802      	add	r0, sp, #8
 801eab0:	fb06 f602 	mul.w	r6, r6, r2
 801eab4:	464a      	mov	r2, r9
 801eab6:	fa1f fa8a 	uxth.w	sl, sl
 801eaba:	3604      	adds	r6, #4
 801eabc:	eba7 070a 	sub.w	r7, r7, sl
 801eac0:	4431      	add	r1, r6
 801eac2:	f8c4 70c4 	str.w	r7, [r4, #196]	; 0xc4
 801eac6:	f851 6c04 	ldr.w	r6, [r1, #-4]
 801eaca:	9600      	str	r6, [sp, #0]
 801eacc:	f7fe fcf2 	bl	801d4b4 <ucdr_init_buffer_origin_offset>
 801ead0:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 801ead4:	f102 0308 	add.w	r3, r2, #8
 801ead8:	454b      	cmp	r3, r9
 801eada:	d929      	bls.n	801eb30 <on_full_output_buffer_fragmented+0xec>
 801eadc:	4652      	mov	r2, sl
 801eade:	2300      	movs	r3, #0
 801eae0:	210d      	movs	r1, #13
 801eae2:	a802      	add	r0, sp, #8
 801eae4:	f7ff ff36 	bl	801e954 <uxr_buffer_submessage_header>
 801eae8:	8928      	ldrh	r0, [r5, #8]
 801eaea:	89ee      	ldrh	r6, [r5, #14]
 801eaec:	fbb6 f1f0 	udiv	r1, r6, r0
 801eaf0:	e9d5 2300 	ldrd	r2, r3, [r5]
 801eaf4:	fb00 6111 	mls	r1, r0, r1, r6
 801eaf8:	fbb3 f3f0 	udiv	r3, r3, r0
 801eafc:	b289      	uxth	r1, r1
 801eafe:	fb03 f301 	mul.w	r3, r3, r1
 801eb02:	f842 9003 	str.w	r9, [r2, r3]
 801eb06:	2101      	movs	r1, #1
 801eb08:	89e8      	ldrh	r0, [r5, #14]
 801eb0a:	f004 f845 	bl	8022b98 <uxr_seq_num_add>
 801eb0e:	9904      	ldr	r1, [sp, #16]
 801eb10:	4603      	mov	r3, r0
 801eb12:	9a03      	ldr	r2, [sp, #12]
 801eb14:	4640      	mov	r0, r8
 801eb16:	1a52      	subs	r2, r2, r1
 801eb18:	81eb      	strh	r3, [r5, #14]
 801eb1a:	f7fe fcdd 	bl	801d4d8 <ucdr_init_buffer>
 801eb1e:	4640      	mov	r0, r8
 801eb20:	4622      	mov	r2, r4
 801eb22:	490f      	ldr	r1, [pc, #60]	; (801eb60 <on_full_output_buffer_fragmented+0x11c>)
 801eb24:	f7fe fcae 	bl	801d484 <ucdr_set_on_full_buffer_callback>
 801eb28:	2000      	movs	r0, #0
 801eb2a:	b00a      	add	sp, #40	; 0x28
 801eb2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eb30:	b292      	uxth	r2, r2
 801eb32:	2302      	movs	r3, #2
 801eb34:	210d      	movs	r1, #13
 801eb36:	a802      	add	r0, sp, #8
 801eb38:	f7ff ff0c 	bl	801e954 <uxr_buffer_submessage_header>
 801eb3c:	8928      	ldrh	r0, [r5, #8]
 801eb3e:	89ee      	ldrh	r6, [r5, #14]
 801eb40:	686b      	ldr	r3, [r5, #4]
 801eb42:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 801eb46:	fbb6 f2f0 	udiv	r2, r6, r0
 801eb4a:	fbb3 f3f0 	udiv	r3, r3, r0
 801eb4e:	fb00 6212 	mls	r2, r0, r2, r6
 801eb52:	3108      	adds	r1, #8
 801eb54:	6828      	ldr	r0, [r5, #0]
 801eb56:	b292      	uxth	r2, r2
 801eb58:	fb03 f302 	mul.w	r3, r3, r2
 801eb5c:	50c1      	str	r1, [r0, r3]
 801eb5e:	e7d2      	b.n	801eb06 <on_full_output_buffer_fragmented+0xc2>
 801eb60:	0801ea45 	.word	0x0801ea45

0801eb64 <uxr_prepare_output_stream>:
 801eb64:	b5f0      	push	{r4, r5, r6, r7, lr}
 801eb66:	b087      	sub	sp, #28
 801eb68:	2607      	movs	r6, #7
 801eb6a:	2500      	movs	r5, #0
 801eb6c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801eb6e:	9202      	str	r2, [sp, #8]
 801eb70:	1d22      	adds	r2, r4, #4
 801eb72:	9103      	str	r1, [sp, #12]
 801eb74:	461c      	mov	r4, r3
 801eb76:	e9cd 6500 	strd	r6, r5, [sp]
 801eb7a:	4606      	mov	r6, r0
 801eb7c:	f7ff fc4e 	bl	801e41c <uxr_prepare_stream_to_write_submessage>
 801eb80:	f080 0201 	eor.w	r2, r0, #1
 801eb84:	b2d2      	uxtb	r2, r2
 801eb86:	75a2      	strb	r2, [r4, #22]
 801eb88:	b112      	cbz	r2, 801eb90 <uxr_prepare_output_stream+0x2c>
 801eb8a:	4628      	mov	r0, r5
 801eb8c:	b007      	add	sp, #28
 801eb8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eb90:	aa05      	add	r2, sp, #20
 801eb92:	9902      	ldr	r1, [sp, #8]
 801eb94:	4630      	mov	r0, r6
 801eb96:	f7ff fd77 	bl	801e688 <uxr_init_base_object_request>
 801eb9a:	a905      	add	r1, sp, #20
 801eb9c:	4605      	mov	r5, r0
 801eb9e:	4620      	mov	r0, r4
 801eba0:	f000 fdfe 	bl	801f7a0 <uxr_serialize_WRITE_DATA_Payload_Data>
 801eba4:	68a1      	ldr	r1, [r4, #8]
 801eba6:	6862      	ldr	r2, [r4, #4]
 801eba8:	4620      	mov	r0, r4
 801ebaa:	69a6      	ldr	r6, [r4, #24]
 801ebac:	69e7      	ldr	r7, [r4, #28]
 801ebae:	1a52      	subs	r2, r2, r1
 801ebb0:	f7fe fc92 	bl	801d4d8 <ucdr_init_buffer>
 801ebb4:	4620      	mov	r0, r4
 801ebb6:	463a      	mov	r2, r7
 801ebb8:	4631      	mov	r1, r6
 801ebba:	f7fe fc63 	bl	801d484 <ucdr_set_on_full_buffer_callback>
 801ebbe:	4628      	mov	r0, r5
 801ebc0:	b007      	add	sp, #28
 801ebc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ebc4 <uxr_prepare_output_stream_fragmented>:
 801ebc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ebc8:	b091      	sub	sp, #68	; 0x44
 801ebca:	4605      	mov	r5, r0
 801ebcc:	3008      	adds	r0, #8
 801ebce:	461e      	mov	r6, r3
 801ebd0:	9105      	str	r1, [sp, #20]
 801ebd2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801ebd6:	9204      	str	r2, [sp, #16]
 801ebd8:	f7ff fe84 	bl	801e8e4 <uxr_get_output_reliable_stream>
 801ebdc:	f89d 3016 	ldrb.w	r3, [sp, #22]
 801ebe0:	2b01      	cmp	r3, #1
 801ebe2:	f000 8092 	beq.w	801ed0a <uxr_prepare_output_stream_fragmented+0x146>
 801ebe6:	4604      	mov	r4, r0
 801ebe8:	2800      	cmp	r0, #0
 801ebea:	f000 808e 	beq.w	801ed0a <uxr_prepare_output_stream_fragmented+0x146>
 801ebee:	f003 fecd 	bl	802298c <get_available_free_slots>
 801ebf2:	2800      	cmp	r0, #0
 801ebf4:	f000 8084 	beq.w	801ed00 <uxr_prepare_output_stream_fragmented+0x13c>
 801ebf8:	8920      	ldrh	r0, [r4, #8]
 801ebfa:	89e7      	ldrh	r7, [r4, #14]
 801ebfc:	7b21      	ldrb	r1, [r4, #12]
 801ebfe:	fbb7 f8f0 	udiv	r8, r7, r0
 801ec02:	e9d4 3200 	ldrd	r3, r2, [r4]
 801ec06:	fb00 7818 	mls	r8, r0, r8, r7
 801ec0a:	fbb2 f2f0 	udiv	r2, r2, r0
 801ec0e:	fa1f f888 	uxth.w	r8, r8
 801ec12:	f1a2 0b04 	sub.w	fp, r2, #4
 801ec16:	9203      	str	r2, [sp, #12]
 801ec18:	fb02 f808 	mul.w	r8, r2, r8
 801ec1c:	f108 0804 	add.w	r8, r8, #4
 801ec20:	4498      	add	r8, r3
 801ec22:	f858 ac04 	ldr.w	sl, [r8, #-4]
 801ec26:	4551      	cmp	r1, sl
 801ec28:	d37b      	bcc.n	801ed22 <uxr_prepare_output_stream_fragmented+0x15e>
 801ec2a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801ec2c:	f1ab 0904 	sub.w	r9, fp, #4
 801ec30:	2300      	movs	r3, #0
 801ec32:	a808      	add	r0, sp, #32
 801ec34:	3208      	adds	r2, #8
 801ec36:	eba9 0901 	sub.w	r9, r9, r1
 801ec3a:	f8cd a000 	str.w	sl, [sp]
 801ec3e:	4641      	mov	r1, r8
 801ec40:	9202      	str	r2, [sp, #8]
 801ec42:	465a      	mov	r2, fp
 801ec44:	f7fe fc36 	bl	801d4b4 <ucdr_init_buffer_origin_offset>
 801ec48:	9b02      	ldr	r3, [sp, #8]
 801ec4a:	fa1f f989 	uxth.w	r9, r9
 801ec4e:	210d      	movs	r1, #13
 801ec50:	455b      	cmp	r3, fp
 801ec52:	bf34      	ite	cc
 801ec54:	2302      	movcc	r3, #2
 801ec56:	2300      	movcs	r3, #0
 801ec58:	a808      	add	r0, sp, #32
 801ec5a:	464a      	mov	r2, r9
 801ec5c:	f7ff fe7a 	bl	801e954 <uxr_buffer_submessage_header>
 801ec60:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801ec64:	6862      	ldr	r2, [r4, #4]
 801ec66:	4638      	mov	r0, r7
 801ec68:	6823      	ldr	r3, [r4, #0]
 801ec6a:	fbb7 f1fc 	udiv	r1, r7, ip
 801ec6e:	fbb2 f2fc 	udiv	r2, r2, ip
 801ec72:	fb0c 7711 	mls	r7, ip, r1, r7
 801ec76:	2101      	movs	r1, #1
 801ec78:	b2bf      	uxth	r7, r7
 801ec7a:	fb07 f702 	mul.w	r7, r7, r2
 801ec7e:	f843 b007 	str.w	fp, [r3, r7]
 801ec82:	f003 ff89 	bl	8022b98 <uxr_seq_num_add>
 801ec86:	9b03      	ldr	r3, [sp, #12]
 801ec88:	f10a 0104 	add.w	r1, sl, #4
 801ec8c:	4607      	mov	r7, r0
 801ec8e:	f1a3 0208 	sub.w	r2, r3, #8
 801ec92:	4630      	mov	r0, r6
 801ec94:	4441      	add	r1, r8
 801ec96:	eba2 020a 	sub.w	r2, r2, sl
 801ec9a:	f7fe fc1d 	bl	801d4d8 <ucdr_init_buffer>
 801ec9e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801eca0:	2107      	movs	r1, #7
 801eca2:	81e7      	strh	r7, [r4, #14]
 801eca4:	1d1a      	adds	r2, r3, #4
 801eca6:	2300      	movs	r3, #0
 801eca8:	4630      	mov	r0, r6
 801ecaa:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 801ecae:	bf28      	it	cs
 801ecb0:	461a      	movcs	r2, r3
 801ecb2:	b292      	uxth	r2, r2
 801ecb4:	f7ff fe4e 	bl	801e954 <uxr_buffer_submessage_header>
 801ecb8:	aa07      	add	r2, sp, #28
 801ecba:	9904      	ldr	r1, [sp, #16]
 801ecbc:	4628      	mov	r0, r5
 801ecbe:	f7ff fce3 	bl	801e688 <uxr_init_base_object_request>
 801ecc2:	4604      	mov	r4, r0
 801ecc4:	b310      	cbz	r0, 801ed0c <uxr_prepare_output_stream_fragmented+0x148>
 801ecc6:	a907      	add	r1, sp, #28
 801ecc8:	4630      	mov	r0, r6
 801ecca:	f000 fd69 	bl	801f7a0 <uxr_serialize_WRITE_DATA_Payload_Data>
 801ecce:	4630      	mov	r0, r6
 801ecd0:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801ecd4:	1a52      	subs	r2, r2, r1
 801ecd6:	f7fe fbff 	bl	801d4d8 <ucdr_init_buffer>
 801ecda:	9a02      	ldr	r2, [sp, #8]
 801ecdc:	991c      	ldr	r1, [sp, #112]	; 0x70
 801ecde:	4630      	mov	r0, r6
 801ece0:	9b05      	ldr	r3, [sp, #20]
 801ece2:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 801ece6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801ece8:	e9c5 132f 	strd	r1, r3, [r5, #188]	; 0xbc
 801ecec:	f8c5 20b8 	str.w	r2, [r5, #184]	; 0xb8
 801ecf0:	462a      	mov	r2, r5
 801ecf2:	4918      	ldr	r1, [pc, #96]	; (801ed54 <uxr_prepare_output_stream_fragmented+0x190>)
 801ecf4:	f7fe fbc6 	bl	801d484 <ucdr_set_on_full_buffer_callback>
 801ecf8:	4620      	mov	r0, r4
 801ecfa:	b011      	add	sp, #68	; 0x44
 801ecfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed00:	991c      	ldr	r1, [sp, #112]	; 0x70
 801ed02:	4628      	mov	r0, r5
 801ed04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ed06:	4798      	blx	r3
 801ed08:	b920      	cbnz	r0, 801ed14 <uxr_prepare_output_stream_fragmented+0x150>
 801ed0a:	2400      	movs	r4, #0
 801ed0c:	4620      	mov	r0, r4
 801ed0e:	b011      	add	sp, #68	; 0x44
 801ed10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed14:	4620      	mov	r0, r4
 801ed16:	f003 fe39 	bl	802298c <get_available_free_slots>
 801ed1a:	2800      	cmp	r0, #0
 801ed1c:	f47f af6c 	bne.w	801ebf8 <uxr_prepare_output_stream_fragmented+0x34>
 801ed20:	e7f3      	b.n	801ed0a <uxr_prepare_output_stream_fragmented+0x146>
 801ed22:	4638      	mov	r0, r7
 801ed24:	2101      	movs	r1, #1
 801ed26:	f003 ff37 	bl	8022b98 <uxr_seq_num_add>
 801ed2a:	8921      	ldrh	r1, [r4, #8]
 801ed2c:	4607      	mov	r7, r0
 801ed2e:	fbb0 f8f1 	udiv	r8, r0, r1
 801ed32:	e9d4 3200 	ldrd	r3, r2, [r4]
 801ed36:	fb01 0818 	mls	r8, r1, r8, r0
 801ed3a:	fbb2 f2f1 	udiv	r2, r2, r1
 801ed3e:	fa1f f888 	uxth.w	r8, r8
 801ed42:	7b21      	ldrb	r1, [r4, #12]
 801ed44:	fb08 f802 	mul.w	r8, r8, r2
 801ed48:	f108 0804 	add.w	r8, r8, #4
 801ed4c:	4498      	add	r8, r3
 801ed4e:	f858 ac04 	ldr.w	sl, [r8, #-4]
 801ed52:	e76a      	b.n	801ec2a <uxr_prepare_output_stream_fragmented+0x66>
 801ed54:	0801ea45 	.word	0x0801ea45

0801ed58 <uxr_serialize_message_header>:
 801ed58:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ed5a:	4616      	mov	r6, r2
 801ed5c:	b083      	sub	sp, #12
 801ed5e:	4604      	mov	r4, r0
 801ed60:	460d      	mov	r5, r1
 801ed62:	9301      	str	r3, [sp, #4]
 801ed64:	9f08      	ldr	r7, [sp, #32]
 801ed66:	f7fd fc09 	bl	801c57c <ucdr_serialize_uint8_t>
 801ed6a:	4631      	mov	r1, r6
 801ed6c:	4620      	mov	r0, r4
 801ed6e:	f7fd fc05 	bl	801c57c <ucdr_serialize_uint8_t>
 801ed72:	9a01      	ldr	r2, [sp, #4]
 801ed74:	4620      	mov	r0, r4
 801ed76:	2101      	movs	r1, #1
 801ed78:	f7fd fcac 	bl	801c6d4 <ucdr_serialize_endian_uint16_t>
 801ed7c:	062b      	lsls	r3, r5, #24
 801ed7e:	d501      	bpl.n	801ed84 <uxr_serialize_message_header+0x2c>
 801ed80:	b003      	add	sp, #12
 801ed82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ed84:	4639      	mov	r1, r7
 801ed86:	4620      	mov	r0, r4
 801ed88:	2204      	movs	r2, #4
 801ed8a:	b003      	add	sp, #12
 801ed8c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ed90:	f002 bfa0 	b.w	8021cd4 <ucdr_serialize_array_uint8_t>

0801ed94 <uxr_deserialize_message_header>:
 801ed94:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ed96:	4616      	mov	r6, r2
 801ed98:	b083      	sub	sp, #12
 801ed9a:	4604      	mov	r4, r0
 801ed9c:	460d      	mov	r5, r1
 801ed9e:	9301      	str	r3, [sp, #4]
 801eda0:	9f08      	ldr	r7, [sp, #32]
 801eda2:	f7fd fc01 	bl	801c5a8 <ucdr_deserialize_uint8_t>
 801eda6:	4631      	mov	r1, r6
 801eda8:	4620      	mov	r0, r4
 801edaa:	f7fd fbfd 	bl	801c5a8 <ucdr_deserialize_uint8_t>
 801edae:	9a01      	ldr	r2, [sp, #4]
 801edb0:	4620      	mov	r0, r4
 801edb2:	2101      	movs	r1, #1
 801edb4:	f7fd fd82 	bl	801c8bc <ucdr_deserialize_endian_uint16_t>
 801edb8:	f995 3000 	ldrsb.w	r3, [r5]
 801edbc:	2b00      	cmp	r3, #0
 801edbe:	da01      	bge.n	801edc4 <uxr_deserialize_message_header+0x30>
 801edc0:	b003      	add	sp, #12
 801edc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801edc4:	4639      	mov	r1, r7
 801edc6:	4620      	mov	r0, r4
 801edc8:	2204      	movs	r2, #4
 801edca:	b003      	add	sp, #12
 801edcc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801edd0:	f002 bfe4 	b.w	8021d9c <ucdr_deserialize_array_uint8_t>

0801edd4 <uxr_serialize_submessage_header>:
 801edd4:	b530      	push	{r4, r5, lr}
 801edd6:	4615      	mov	r5, r2
 801edd8:	b083      	sub	sp, #12
 801edda:	4604      	mov	r4, r0
 801eddc:	9301      	str	r3, [sp, #4]
 801edde:	f7fd fbcd 	bl	801c57c <ucdr_serialize_uint8_t>
 801ede2:	4629      	mov	r1, r5
 801ede4:	4620      	mov	r0, r4
 801ede6:	f7fd fbc9 	bl	801c57c <ucdr_serialize_uint8_t>
 801edea:	9a01      	ldr	r2, [sp, #4]
 801edec:	4620      	mov	r0, r4
 801edee:	2101      	movs	r1, #1
 801edf0:	b003      	add	sp, #12
 801edf2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801edf6:	f7fd bc6d 	b.w	801c6d4 <ucdr_serialize_endian_uint16_t>
 801edfa:	bf00      	nop

0801edfc <uxr_deserialize_submessage_header>:
 801edfc:	b530      	push	{r4, r5, lr}
 801edfe:	4615      	mov	r5, r2
 801ee00:	b083      	sub	sp, #12
 801ee02:	4604      	mov	r4, r0
 801ee04:	9301      	str	r3, [sp, #4]
 801ee06:	f7fd fbcf 	bl	801c5a8 <ucdr_deserialize_uint8_t>
 801ee0a:	4629      	mov	r1, r5
 801ee0c:	4620      	mov	r0, r4
 801ee0e:	f7fd fbcb 	bl	801c5a8 <ucdr_deserialize_uint8_t>
 801ee12:	9a01      	ldr	r2, [sp, #4]
 801ee14:	4620      	mov	r0, r4
 801ee16:	2101      	movs	r1, #1
 801ee18:	b003      	add	sp, #12
 801ee1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ee1e:	f7fd bd4d 	b.w	801c8bc <ucdr_deserialize_endian_uint16_t>
 801ee22:	bf00      	nop

0801ee24 <uxr_serialize_CLIENT_Representation>:
 801ee24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ee28:	460c      	mov	r4, r1
 801ee2a:	4605      	mov	r5, r0
 801ee2c:	2204      	movs	r2, #4
 801ee2e:	f002 ff51 	bl	8021cd4 <ucdr_serialize_array_uint8_t>
 801ee32:	1d21      	adds	r1, r4, #4
 801ee34:	4680      	mov	r8, r0
 801ee36:	2202      	movs	r2, #2
 801ee38:	4628      	mov	r0, r5
 801ee3a:	f002 ff4b 	bl	8021cd4 <ucdr_serialize_array_uint8_t>
 801ee3e:	4607      	mov	r7, r0
 801ee40:	1da1      	adds	r1, r4, #6
 801ee42:	2202      	movs	r2, #2
 801ee44:	ea07 0708 	and.w	r7, r7, r8
 801ee48:	4628      	mov	r0, r5
 801ee4a:	f002 ff43 	bl	8021cd4 <ucdr_serialize_array_uint8_t>
 801ee4e:	2204      	movs	r2, #4
 801ee50:	fa5f f887 	uxtb.w	r8, r7
 801ee54:	4607      	mov	r7, r0
 801ee56:	f104 0108 	add.w	r1, r4, #8
 801ee5a:	4628      	mov	r0, r5
 801ee5c:	f002 ff3a 	bl	8021cd4 <ucdr_serialize_array_uint8_t>
 801ee60:	ea08 0707 	and.w	r7, r8, r7
 801ee64:	4680      	mov	r8, r0
 801ee66:	7b21      	ldrb	r1, [r4, #12]
 801ee68:	4628      	mov	r0, r5
 801ee6a:	f7fd fb87 	bl	801c57c <ucdr_serialize_uint8_t>
 801ee6e:	ea08 0807 	and.w	r8, r8, r7
 801ee72:	4607      	mov	r7, r0
 801ee74:	7b61      	ldrb	r1, [r4, #13]
 801ee76:	4628      	mov	r0, r5
 801ee78:	f7fd fb52 	bl	801c520 <ucdr_serialize_bool>
 801ee7c:	ea08 0707 	and.w	r7, r8, r7
 801ee80:	7b63      	ldrb	r3, [r4, #13]
 801ee82:	ea07 0600 	and.w	r6, r7, r0
 801ee86:	b933      	cbnz	r3, 801ee96 <uxr_serialize_CLIENT_Representation+0x72>
 801ee88:	8ba1      	ldrh	r1, [r4, #28]
 801ee8a:	4628      	mov	r0, r5
 801ee8c:	f7fd fba2 	bl	801c5d4 <ucdr_serialize_uint16_t>
 801ee90:	4030      	ands	r0, r6
 801ee92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ee96:	6921      	ldr	r1, [r4, #16]
 801ee98:	4628      	mov	r0, r5
 801ee9a:	f7fd fd89 	bl	801c9b0 <ucdr_serialize_uint32_t>
 801ee9e:	6923      	ldr	r3, [r4, #16]
 801eea0:	b1cb      	cbz	r3, 801eed6 <uxr_serialize_CLIENT_Representation+0xb2>
 801eea2:	b1d0      	cbz	r0, 801eeda <uxr_serialize_CLIENT_Representation+0xb6>
 801eea4:	46a0      	mov	r8, r4
 801eea6:	f04f 0900 	mov.w	r9, #0
 801eeaa:	e000      	b.n	801eeae <uxr_serialize_CLIENT_Representation+0x8a>
 801eeac:	b1a8      	cbz	r0, 801eeda <uxr_serialize_CLIENT_Representation+0xb6>
 801eeae:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801eeb2:	4628      	mov	r0, r5
 801eeb4:	f003 f832 	bl	8021f1c <ucdr_serialize_string>
 801eeb8:	f8d8 1018 	ldr.w	r1, [r8, #24]
 801eebc:	4607      	mov	r7, r0
 801eebe:	4628      	mov	r0, r5
 801eec0:	f003 f82c 	bl	8021f1c <ucdr_serialize_string>
 801eec4:	f109 0901 	add.w	r9, r9, #1
 801eec8:	6923      	ldr	r3, [r4, #16]
 801eeca:	4038      	ands	r0, r7
 801eecc:	f108 0808 	add.w	r8, r8, #8
 801eed0:	4599      	cmp	r9, r3
 801eed2:	b2c0      	uxtb	r0, r0
 801eed4:	d3ea      	bcc.n	801eeac <uxr_serialize_CLIENT_Representation+0x88>
 801eed6:	4006      	ands	r6, r0
 801eed8:	e7d6      	b.n	801ee88 <uxr_serialize_CLIENT_Representation+0x64>
 801eeda:	2600      	movs	r6, #0
 801eedc:	e7d4      	b.n	801ee88 <uxr_serialize_CLIENT_Representation+0x64>
 801eede:	bf00      	nop

0801eee0 <uxr_deserialize_CLIENT_Representation>:
 801eee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801eee4:	460c      	mov	r4, r1
 801eee6:	4605      	mov	r5, r0
 801eee8:	2204      	movs	r2, #4
 801eeea:	f002 ff57 	bl	8021d9c <ucdr_deserialize_array_uint8_t>
 801eeee:	1d21      	adds	r1, r4, #4
 801eef0:	4680      	mov	r8, r0
 801eef2:	2202      	movs	r2, #2
 801eef4:	4628      	mov	r0, r5
 801eef6:	f002 ff51 	bl	8021d9c <ucdr_deserialize_array_uint8_t>
 801eefa:	4607      	mov	r7, r0
 801eefc:	1da1      	adds	r1, r4, #6
 801eefe:	2202      	movs	r2, #2
 801ef00:	ea07 0708 	and.w	r7, r7, r8
 801ef04:	4628      	mov	r0, r5
 801ef06:	f002 ff49 	bl	8021d9c <ucdr_deserialize_array_uint8_t>
 801ef0a:	2204      	movs	r2, #4
 801ef0c:	fa5f f887 	uxtb.w	r8, r7
 801ef10:	4607      	mov	r7, r0
 801ef12:	f104 0108 	add.w	r1, r4, #8
 801ef16:	4628      	mov	r0, r5
 801ef18:	f002 ff40 	bl	8021d9c <ucdr_deserialize_array_uint8_t>
 801ef1c:	ea08 0707 	and.w	r7, r8, r7
 801ef20:	4680      	mov	r8, r0
 801ef22:	f104 010c 	add.w	r1, r4, #12
 801ef26:	4628      	mov	r0, r5
 801ef28:	f7fd fb3e 	bl	801c5a8 <ucdr_deserialize_uint8_t>
 801ef2c:	ea08 0807 	and.w	r8, r8, r7
 801ef30:	4607      	mov	r7, r0
 801ef32:	f104 010d 	add.w	r1, r4, #13
 801ef36:	4628      	mov	r0, r5
 801ef38:	f7fd fb08 	bl	801c54c <ucdr_deserialize_bool>
 801ef3c:	ea08 0707 	and.w	r7, r8, r7
 801ef40:	7b63      	ldrb	r3, [r4, #13]
 801ef42:	ea07 0600 	and.w	r6, r7, r0
 801ef46:	b93b      	cbnz	r3, 801ef58 <uxr_deserialize_CLIENT_Representation+0x78>
 801ef48:	f104 011c 	add.w	r1, r4, #28
 801ef4c:	4628      	mov	r0, r5
 801ef4e:	f7fd fc41 	bl	801c7d4 <ucdr_deserialize_uint16_t>
 801ef52:	4030      	ands	r0, r6
 801ef54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ef58:	f104 0110 	add.w	r1, r4, #16
 801ef5c:	4628      	mov	r0, r5
 801ef5e:	f7fd fe57 	bl	801cc10 <ucdr_deserialize_uint32_t>
 801ef62:	6923      	ldr	r3, [r4, #16]
 801ef64:	2b01      	cmp	r3, #1
 801ef66:	d903      	bls.n	801ef70 <uxr_deserialize_CLIENT_Representation+0x90>
 801ef68:	2301      	movs	r3, #1
 801ef6a:	2600      	movs	r6, #0
 801ef6c:	75ab      	strb	r3, [r5, #22]
 801ef6e:	e7eb      	b.n	801ef48 <uxr_deserialize_CLIENT_Representation+0x68>
 801ef70:	b1eb      	cbz	r3, 801efae <uxr_deserialize_CLIENT_Representation+0xce>
 801ef72:	b1f0      	cbz	r0, 801efb2 <uxr_deserialize_CLIENT_Representation+0xd2>
 801ef74:	46a0      	mov	r8, r4
 801ef76:	f04f 0900 	mov.w	r9, #0
 801ef7a:	e000      	b.n	801ef7e <uxr_deserialize_CLIENT_Representation+0x9e>
 801ef7c:	b1c8      	cbz	r0, 801efb2 <uxr_deserialize_CLIENT_Representation+0xd2>
 801ef7e:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801ef82:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ef86:	4628      	mov	r0, r5
 801ef88:	f109 0901 	add.w	r9, r9, #1
 801ef8c:	f002 ffd6 	bl	8021f3c <ucdr_deserialize_string>
 801ef90:	f8d8 1018 	ldr.w	r1, [r8, #24]
 801ef94:	4607      	mov	r7, r0
 801ef96:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ef9a:	4628      	mov	r0, r5
 801ef9c:	f108 0808 	add.w	r8, r8, #8
 801efa0:	f002 ffcc 	bl	8021f3c <ucdr_deserialize_string>
 801efa4:	6923      	ldr	r3, [r4, #16]
 801efa6:	4038      	ands	r0, r7
 801efa8:	4599      	cmp	r9, r3
 801efaa:	b2c0      	uxtb	r0, r0
 801efac:	d3e6      	bcc.n	801ef7c <uxr_deserialize_CLIENT_Representation+0x9c>
 801efae:	4006      	ands	r6, r0
 801efb0:	e7ca      	b.n	801ef48 <uxr_deserialize_CLIENT_Representation+0x68>
 801efb2:	2600      	movs	r6, #0
 801efb4:	e7c8      	b.n	801ef48 <uxr_deserialize_CLIENT_Representation+0x68>
 801efb6:	bf00      	nop

0801efb8 <uxr_serialize_AGENT_Representation>:
 801efb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801efbc:	460c      	mov	r4, r1
 801efbe:	4605      	mov	r5, r0
 801efc0:	2204      	movs	r2, #4
 801efc2:	f002 fe87 	bl	8021cd4 <ucdr_serialize_array_uint8_t>
 801efc6:	1d21      	adds	r1, r4, #4
 801efc8:	4607      	mov	r7, r0
 801efca:	2202      	movs	r2, #2
 801efcc:	4628      	mov	r0, r5
 801efce:	f002 fe81 	bl	8021cd4 <ucdr_serialize_array_uint8_t>
 801efd2:	4606      	mov	r6, r0
 801efd4:	1da1      	adds	r1, r4, #6
 801efd6:	2202      	movs	r2, #2
 801efd8:	403e      	ands	r6, r7
 801efda:	4628      	mov	r0, r5
 801efdc:	f002 fe7a 	bl	8021cd4 <ucdr_serialize_array_uint8_t>
 801efe0:	4603      	mov	r3, r0
 801efe2:	b2f6      	uxtb	r6, r6
 801efe4:	7a21      	ldrb	r1, [r4, #8]
 801efe6:	4628      	mov	r0, r5
 801efe8:	401e      	ands	r6, r3
 801efea:	f7fd fa99 	bl	801c520 <ucdr_serialize_bool>
 801efee:	7a23      	ldrb	r3, [r4, #8]
 801eff0:	ea00 0706 	and.w	r7, r0, r6
 801eff4:	b913      	cbnz	r3, 801effc <uxr_serialize_AGENT_Representation+0x44>
 801eff6:	4638      	mov	r0, r7
 801eff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801effc:	68e1      	ldr	r1, [r4, #12]
 801effe:	4628      	mov	r0, r5
 801f000:	f7fd fcd6 	bl	801c9b0 <ucdr_serialize_uint32_t>
 801f004:	68e3      	ldr	r3, [r4, #12]
 801f006:	b313      	cbz	r3, 801f04e <uxr_serialize_AGENT_Representation+0x96>
 801f008:	b1e8      	cbz	r0, 801f046 <uxr_serialize_AGENT_Representation+0x8e>
 801f00a:	46a0      	mov	r8, r4
 801f00c:	f04f 0900 	mov.w	r9, #0
 801f010:	e000      	b.n	801f014 <uxr_serialize_AGENT_Representation+0x5c>
 801f012:	b1c3      	cbz	r3, 801f046 <uxr_serialize_AGENT_Representation+0x8e>
 801f014:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801f018:	4628      	mov	r0, r5
 801f01a:	f002 ff7f 	bl	8021f1c <ucdr_serialize_string>
 801f01e:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801f022:	4606      	mov	r6, r0
 801f024:	4628      	mov	r0, r5
 801f026:	f002 ff79 	bl	8021f1c <ucdr_serialize_string>
 801f02a:	f109 0901 	add.w	r9, r9, #1
 801f02e:	68e2      	ldr	r2, [r4, #12]
 801f030:	ea06 0300 	and.w	r3, r6, r0
 801f034:	f108 0808 	add.w	r8, r8, #8
 801f038:	4591      	cmp	r9, r2
 801f03a:	b2db      	uxtb	r3, r3
 801f03c:	d3e9      	bcc.n	801f012 <uxr_serialize_AGENT_Representation+0x5a>
 801f03e:	401f      	ands	r7, r3
 801f040:	4638      	mov	r0, r7
 801f042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f046:	2700      	movs	r7, #0
 801f048:	4638      	mov	r0, r7
 801f04a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f04e:	4007      	ands	r7, r0
 801f050:	e7d1      	b.n	801eff6 <uxr_serialize_AGENT_Representation+0x3e>
 801f052:	bf00      	nop

0801f054 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 801f054:	b570      	push	{r4, r5, r6, lr}
 801f056:	460d      	mov	r5, r1
 801f058:	7809      	ldrb	r1, [r1, #0]
 801f05a:	4606      	mov	r6, r0
 801f05c:	f7fd fa60 	bl	801c520 <ucdr_serialize_bool>
 801f060:	782b      	ldrb	r3, [r5, #0]
 801f062:	4604      	mov	r4, r0
 801f064:	b94b      	cbnz	r3, 801f07a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801f066:	7a29      	ldrb	r1, [r5, #8]
 801f068:	4630      	mov	r0, r6
 801f06a:	f7fd fa59 	bl	801c520 <ucdr_serialize_bool>
 801f06e:	7a2b      	ldrb	r3, [r5, #8]
 801f070:	4004      	ands	r4, r0
 801f072:	b2e4      	uxtb	r4, r4
 801f074:	b943      	cbnz	r3, 801f088 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801f076:	4620      	mov	r0, r4
 801f078:	bd70      	pop	{r4, r5, r6, pc}
 801f07a:	6869      	ldr	r1, [r5, #4]
 801f07c:	4630      	mov	r0, r6
 801f07e:	f002 ff4d 	bl	8021f1c <ucdr_serialize_string>
 801f082:	4004      	ands	r4, r0
 801f084:	b2e4      	uxtb	r4, r4
 801f086:	e7ee      	b.n	801f066 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 801f088:	68e9      	ldr	r1, [r5, #12]
 801f08a:	4630      	mov	r0, r6
 801f08c:	f002 ff46 	bl	8021f1c <ucdr_serialize_string>
 801f090:	4004      	ands	r4, r0
 801f092:	4620      	mov	r0, r4
 801f094:	bd70      	pop	{r4, r5, r6, pc}
 801f096:	bf00      	nop

0801f098 <uxr_serialize_OBJK_Topic_Binary>:
 801f098:	b570      	push	{r4, r5, r6, lr}
 801f09a:	460d      	mov	r5, r1
 801f09c:	4606      	mov	r6, r0
 801f09e:	6809      	ldr	r1, [r1, #0]
 801f0a0:	f002 ff3c 	bl	8021f1c <ucdr_serialize_string>
 801f0a4:	4604      	mov	r4, r0
 801f0a6:	7929      	ldrb	r1, [r5, #4]
 801f0a8:	4630      	mov	r0, r6
 801f0aa:	f7fd fa39 	bl	801c520 <ucdr_serialize_bool>
 801f0ae:	792b      	ldrb	r3, [r5, #4]
 801f0b0:	4004      	ands	r4, r0
 801f0b2:	b2e4      	uxtb	r4, r4
 801f0b4:	b943      	cbnz	r3, 801f0c8 <uxr_serialize_OBJK_Topic_Binary+0x30>
 801f0b6:	7b29      	ldrb	r1, [r5, #12]
 801f0b8:	4630      	mov	r0, r6
 801f0ba:	f7fd fa31 	bl	801c520 <ucdr_serialize_bool>
 801f0be:	7b2b      	ldrb	r3, [r5, #12]
 801f0c0:	4004      	ands	r4, r0
 801f0c2:	b93b      	cbnz	r3, 801f0d4 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 801f0c4:	4620      	mov	r0, r4
 801f0c6:	bd70      	pop	{r4, r5, r6, pc}
 801f0c8:	68a9      	ldr	r1, [r5, #8]
 801f0ca:	4630      	mov	r0, r6
 801f0cc:	f002 ff26 	bl	8021f1c <ucdr_serialize_string>
 801f0d0:	4004      	ands	r4, r0
 801f0d2:	e7f0      	b.n	801f0b6 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 801f0d4:	6929      	ldr	r1, [r5, #16]
 801f0d6:	4630      	mov	r0, r6
 801f0d8:	f002 ff20 	bl	8021f1c <ucdr_serialize_string>
 801f0dc:	4004      	ands	r4, r0
 801f0de:	b2e4      	uxtb	r4, r4
 801f0e0:	4620      	mov	r0, r4
 801f0e2:	bd70      	pop	{r4, r5, r6, pc}

0801f0e4 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 801f0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f0e8:	460c      	mov	r4, r1
 801f0ea:	7809      	ldrb	r1, [r1, #0]
 801f0ec:	4606      	mov	r6, r0
 801f0ee:	f7fd fa17 	bl	801c520 <ucdr_serialize_bool>
 801f0f2:	7823      	ldrb	r3, [r4, #0]
 801f0f4:	4605      	mov	r5, r0
 801f0f6:	b96b      	cbnz	r3, 801f114 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 801f0f8:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 801f0fc:	4630      	mov	r0, r6
 801f0fe:	f7fd fa0f 	bl	801c520 <ucdr_serialize_bool>
 801f102:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801f106:	4005      	ands	r5, r0
 801f108:	b2ed      	uxtb	r5, r5
 801f10a:	2b00      	cmp	r3, #0
 801f10c:	d169      	bne.n	801f1e2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801f10e:	4628      	mov	r0, r5
 801f110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f114:	6861      	ldr	r1, [r4, #4]
 801f116:	4630      	mov	r0, r6
 801f118:	f7fd fc4a 	bl	801c9b0 <ucdr_serialize_uint32_t>
 801f11c:	6863      	ldr	r3, [r4, #4]
 801f11e:	2b00      	cmp	r3, #0
 801f120:	d06b      	beq.n	801f1fa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 801f122:	2800      	cmp	r0, #0
 801f124:	d067      	beq.n	801f1f6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801f126:	68a1      	ldr	r1, [r4, #8]
 801f128:	4630      	mov	r0, r6
 801f12a:	f002 fef7 	bl	8021f1c <ucdr_serialize_string>
 801f12e:	6863      	ldr	r3, [r4, #4]
 801f130:	2b01      	cmp	r3, #1
 801f132:	d953      	bls.n	801f1dc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801f134:	2800      	cmp	r0, #0
 801f136:	d05e      	beq.n	801f1f6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801f138:	68e1      	ldr	r1, [r4, #12]
 801f13a:	4630      	mov	r0, r6
 801f13c:	f002 feee 	bl	8021f1c <ucdr_serialize_string>
 801f140:	6863      	ldr	r3, [r4, #4]
 801f142:	2b02      	cmp	r3, #2
 801f144:	d94a      	bls.n	801f1dc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801f146:	2800      	cmp	r0, #0
 801f148:	d055      	beq.n	801f1f6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801f14a:	6921      	ldr	r1, [r4, #16]
 801f14c:	4630      	mov	r0, r6
 801f14e:	f002 fee5 	bl	8021f1c <ucdr_serialize_string>
 801f152:	6863      	ldr	r3, [r4, #4]
 801f154:	2b03      	cmp	r3, #3
 801f156:	d941      	bls.n	801f1dc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801f158:	2800      	cmp	r0, #0
 801f15a:	d04c      	beq.n	801f1f6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801f15c:	6961      	ldr	r1, [r4, #20]
 801f15e:	4630      	mov	r0, r6
 801f160:	f002 fedc 	bl	8021f1c <ucdr_serialize_string>
 801f164:	6863      	ldr	r3, [r4, #4]
 801f166:	2b04      	cmp	r3, #4
 801f168:	d938      	bls.n	801f1dc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801f16a:	2800      	cmp	r0, #0
 801f16c:	d043      	beq.n	801f1f6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801f16e:	69a1      	ldr	r1, [r4, #24]
 801f170:	4630      	mov	r0, r6
 801f172:	f002 fed3 	bl	8021f1c <ucdr_serialize_string>
 801f176:	6863      	ldr	r3, [r4, #4]
 801f178:	2b05      	cmp	r3, #5
 801f17a:	d92f      	bls.n	801f1dc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801f17c:	2800      	cmp	r0, #0
 801f17e:	d03a      	beq.n	801f1f6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801f180:	69e1      	ldr	r1, [r4, #28]
 801f182:	4630      	mov	r0, r6
 801f184:	f002 feca 	bl	8021f1c <ucdr_serialize_string>
 801f188:	6863      	ldr	r3, [r4, #4]
 801f18a:	2b06      	cmp	r3, #6
 801f18c:	d926      	bls.n	801f1dc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801f18e:	b390      	cbz	r0, 801f1f6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801f190:	6a21      	ldr	r1, [r4, #32]
 801f192:	4630      	mov	r0, r6
 801f194:	f002 fec2 	bl	8021f1c <ucdr_serialize_string>
 801f198:	6863      	ldr	r3, [r4, #4]
 801f19a:	2b07      	cmp	r3, #7
 801f19c:	d91e      	bls.n	801f1dc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801f19e:	b350      	cbz	r0, 801f1f6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801f1a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801f1a2:	4630      	mov	r0, r6
 801f1a4:	f002 feba 	bl	8021f1c <ucdr_serialize_string>
 801f1a8:	6863      	ldr	r3, [r4, #4]
 801f1aa:	2b08      	cmp	r3, #8
 801f1ac:	d916      	bls.n	801f1dc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801f1ae:	b310      	cbz	r0, 801f1f6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801f1b0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801f1b2:	4630      	mov	r0, r6
 801f1b4:	f002 feb2 	bl	8021f1c <ucdr_serialize_string>
 801f1b8:	6863      	ldr	r3, [r4, #4]
 801f1ba:	2b09      	cmp	r3, #9
 801f1bc:	d90e      	bls.n	801f1dc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801f1be:	b1d0      	cbz	r0, 801f1f6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801f1c0:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 801f1c4:	2709      	movs	r7, #9
 801f1c6:	e000      	b.n	801f1ca <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 801f1c8:	b1a8      	cbz	r0, 801f1f6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801f1ca:	f858 1b04 	ldr.w	r1, [r8], #4
 801f1ce:	4630      	mov	r0, r6
 801f1d0:	f002 fea4 	bl	8021f1c <ucdr_serialize_string>
 801f1d4:	3701      	adds	r7, #1
 801f1d6:	6862      	ldr	r2, [r4, #4]
 801f1d8:	4297      	cmp	r7, r2
 801f1da:	d3f5      	bcc.n	801f1c8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 801f1dc:	4005      	ands	r5, r0
 801f1de:	b2ed      	uxtb	r5, r5
 801f1e0:	e78a      	b.n	801f0f8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801f1e2:	4630      	mov	r0, r6
 801f1e4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801f1e6:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801f1ea:	f002 fe6b 	bl	8021ec4 <ucdr_serialize_sequence_uint8_t>
 801f1ee:	4005      	ands	r5, r0
 801f1f0:	4628      	mov	r0, r5
 801f1f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f1f6:	2500      	movs	r5, #0
 801f1f8:	e77e      	b.n	801f0f8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801f1fa:	4028      	ands	r0, r5
 801f1fc:	b2c5      	uxtb	r5, r0
 801f1fe:	e77b      	b.n	801f0f8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0801f200 <uxr_serialize_OBJK_Publisher_Binary>:
 801f200:	b570      	push	{r4, r5, r6, lr}
 801f202:	460d      	mov	r5, r1
 801f204:	7809      	ldrb	r1, [r1, #0]
 801f206:	4606      	mov	r6, r0
 801f208:	f7fd f98a 	bl	801c520 <ucdr_serialize_bool>
 801f20c:	782b      	ldrb	r3, [r5, #0]
 801f20e:	4604      	mov	r4, r0
 801f210:	b94b      	cbnz	r3, 801f226 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 801f212:	7a29      	ldrb	r1, [r5, #8]
 801f214:	4630      	mov	r0, r6
 801f216:	f7fd f983 	bl	801c520 <ucdr_serialize_bool>
 801f21a:	7a2b      	ldrb	r3, [r5, #8]
 801f21c:	4004      	ands	r4, r0
 801f21e:	b2e4      	uxtb	r4, r4
 801f220:	b943      	cbnz	r3, 801f234 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 801f222:	4620      	mov	r0, r4
 801f224:	bd70      	pop	{r4, r5, r6, pc}
 801f226:	6869      	ldr	r1, [r5, #4]
 801f228:	4630      	mov	r0, r6
 801f22a:	f002 fe77 	bl	8021f1c <ucdr_serialize_string>
 801f22e:	4004      	ands	r4, r0
 801f230:	b2e4      	uxtb	r4, r4
 801f232:	e7ee      	b.n	801f212 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 801f234:	f105 010c 	add.w	r1, r5, #12
 801f238:	4630      	mov	r0, r6
 801f23a:	f7ff ff53 	bl	801f0e4 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801f23e:	4004      	ands	r4, r0
 801f240:	4620      	mov	r0, r4
 801f242:	bd70      	pop	{r4, r5, r6, pc}

0801f244 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 801f244:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 801f248:	4688      	mov	r8, r1
 801f24a:	4681      	mov	r9, r0
 801f24c:	8809      	ldrh	r1, [r1, #0]
 801f24e:	f7fd f9c1 	bl	801c5d4 <ucdr_serialize_uint16_t>
 801f252:	4606      	mov	r6, r0
 801f254:	f898 1002 	ldrb.w	r1, [r8, #2]
 801f258:	4648      	mov	r0, r9
 801f25a:	f7fd f961 	bl	801c520 <ucdr_serialize_bool>
 801f25e:	f898 3002 	ldrb.w	r3, [r8, #2]
 801f262:	4030      	ands	r0, r6
 801f264:	b2c5      	uxtb	r5, r0
 801f266:	b9eb      	cbnz	r3, 801f2a4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 801f268:	f898 1006 	ldrb.w	r1, [r8, #6]
 801f26c:	4648      	mov	r0, r9
 801f26e:	f7fd f957 	bl	801c520 <ucdr_serialize_bool>
 801f272:	f898 3006 	ldrb.w	r3, [r8, #6]
 801f276:	4005      	ands	r5, r0
 801f278:	bb7b      	cbnz	r3, 801f2da <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801f27a:	f898 100c 	ldrb.w	r1, [r8, #12]
 801f27e:	4648      	mov	r0, r9
 801f280:	f7fd f94e 	bl	801c520 <ucdr_serialize_bool>
 801f284:	f898 300c 	ldrb.w	r3, [r8, #12]
 801f288:	4005      	ands	r5, r0
 801f28a:	b9f3      	cbnz	r3, 801f2ca <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 801f28c:	f898 1014 	ldrb.w	r1, [r8, #20]
 801f290:	4648      	mov	r0, r9
 801f292:	f7fd f945 	bl	801c520 <ucdr_serialize_bool>
 801f296:	f898 3014 	ldrb.w	r3, [r8, #20]
 801f29a:	4005      	ands	r5, r0
 801f29c:	b94b      	cbnz	r3, 801f2b2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801f29e:	4628      	mov	r0, r5
 801f2a0:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801f2a4:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 801f2a8:	4648      	mov	r0, r9
 801f2aa:	f7fd f993 	bl	801c5d4 <ucdr_serialize_uint16_t>
 801f2ae:	4005      	ands	r5, r0
 801f2b0:	e7da      	b.n	801f268 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 801f2b2:	4648      	mov	r0, r9
 801f2b4:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801f2b8:	f108 011c 	add.w	r1, r8, #28
 801f2bc:	f002 fe02 	bl	8021ec4 <ucdr_serialize_sequence_uint8_t>
 801f2c0:	4028      	ands	r0, r5
 801f2c2:	b2c5      	uxtb	r5, r0
 801f2c4:	4628      	mov	r0, r5
 801f2c6:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801f2ca:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801f2ce:	4648      	mov	r0, r9
 801f2d0:	f7fd fb6e 	bl	801c9b0 <ucdr_serialize_uint32_t>
 801f2d4:	4028      	ands	r0, r5
 801f2d6:	b2c5      	uxtb	r5, r0
 801f2d8:	e7d8      	b.n	801f28c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801f2da:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801f2de:	4648      	mov	r0, r9
 801f2e0:	f7fd fb66 	bl	801c9b0 <ucdr_serialize_uint32_t>
 801f2e4:	4028      	ands	r0, r5
 801f2e6:	b2c5      	uxtb	r5, r0
 801f2e8:	e7c7      	b.n	801f27a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801f2ea:	bf00      	nop

0801f2ec <uxr_serialize_OBJK_DataWriter_Binary>:
 801f2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f2ee:	2202      	movs	r2, #2
 801f2f0:	460d      	mov	r5, r1
 801f2f2:	4606      	mov	r6, r0
 801f2f4:	f002 fcee 	bl	8021cd4 <ucdr_serialize_array_uint8_t>
 801f2f8:	4604      	mov	r4, r0
 801f2fa:	78a9      	ldrb	r1, [r5, #2]
 801f2fc:	4630      	mov	r0, r6
 801f2fe:	f7fd f90f 	bl	801c520 <ucdr_serialize_bool>
 801f302:	78ab      	ldrb	r3, [r5, #2]
 801f304:	4004      	ands	r4, r0
 801f306:	b2e4      	uxtb	r4, r4
 801f308:	b90b      	cbnz	r3, 801f30e <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801f30a:	4620      	mov	r0, r4
 801f30c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f30e:	f105 0108 	add.w	r1, r5, #8
 801f312:	4630      	mov	r0, r6
 801f314:	f7ff ff96 	bl	801f244 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801f318:	4607      	mov	r7, r0
 801f31a:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 801f31e:	4630      	mov	r0, r6
 801f320:	f7fd f8fe 	bl	801c520 <ucdr_serialize_bool>
 801f324:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 801f328:	4007      	ands	r7, r0
 801f32a:	b2ff      	uxtb	r7, r7
 801f32c:	b913      	cbnz	r3, 801f334 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801f32e:	403c      	ands	r4, r7
 801f330:	4620      	mov	r0, r4
 801f332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f334:	4630      	mov	r0, r6
 801f336:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 801f33a:	f7fd fd8f 	bl	801ce5c <ucdr_serialize_uint64_t>
 801f33e:	4007      	ands	r7, r0
 801f340:	e7f5      	b.n	801f32e <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801f342:	bf00      	nop

0801f344 <uxr_deserialize_ObjectVariant>:
 801f344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f346:	4605      	mov	r5, r0
 801f348:	460e      	mov	r6, r1
 801f34a:	f7fd f92d 	bl	801c5a8 <ucdr_deserialize_uint8_t>
 801f34e:	b320      	cbz	r0, 801f39a <uxr_deserialize_ObjectVariant+0x56>
 801f350:	7833      	ldrb	r3, [r6, #0]
 801f352:	4604      	mov	r4, r0
 801f354:	3b01      	subs	r3, #1
 801f356:	2b0d      	cmp	r3, #13
 801f358:	d81d      	bhi.n	801f396 <uxr_deserialize_ObjectVariant+0x52>
 801f35a:	e8df f003 	tbb	[pc, r3]
 801f35e:	2107      	.short	0x2107
 801f360:	21214b4b 	.word	0x21214b4b
 801f364:	381c2121 	.word	0x381c2121
 801f368:	876a3838 	.word	0x876a3838
 801f36c:	1d31      	adds	r1, r6, #4
 801f36e:	4628      	mov	r0, r5
 801f370:	f7fd f91a 	bl	801c5a8 <ucdr_deserialize_uint8_t>
 801f374:	4607      	mov	r7, r0
 801f376:	b138      	cbz	r0, 801f388 <uxr_deserialize_ObjectVariant+0x44>
 801f378:	7933      	ldrb	r3, [r6, #4]
 801f37a:	2b02      	cmp	r3, #2
 801f37c:	d07c      	beq.n	801f478 <uxr_deserialize_ObjectVariant+0x134>
 801f37e:	2b03      	cmp	r3, #3
 801f380:	f000 8082 	beq.w	801f488 <uxr_deserialize_ObjectVariant+0x144>
 801f384:	2b01      	cmp	r3, #1
 801f386:	d077      	beq.n	801f478 <uxr_deserialize_ObjectVariant+0x134>
 801f388:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 801f38c:	4628      	mov	r0, r5
 801f38e:	f7fd feb5 	bl	801d0fc <ucdr_deserialize_int16_t>
 801f392:	4038      	ands	r0, r7
 801f394:	b2c4      	uxtb	r4, r0
 801f396:	4620      	mov	r0, r4
 801f398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f39a:	2400      	movs	r4, #0
 801f39c:	4620      	mov	r0, r4
 801f39e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f3a0:	1d31      	adds	r1, r6, #4
 801f3a2:	4628      	mov	r0, r5
 801f3a4:	f7fd f900 	bl	801c5a8 <ucdr_deserialize_uint8_t>
 801f3a8:	4607      	mov	r7, r0
 801f3aa:	b130      	cbz	r0, 801f3ba <uxr_deserialize_ObjectVariant+0x76>
 801f3ac:	7933      	ldrb	r3, [r6, #4]
 801f3ae:	2b02      	cmp	r3, #2
 801f3b0:	d037      	beq.n	801f422 <uxr_deserialize_ObjectVariant+0xde>
 801f3b2:	2b03      	cmp	r3, #3
 801f3b4:	d02a      	beq.n	801f40c <uxr_deserialize_ObjectVariant+0xc8>
 801f3b6:	2b01      	cmp	r3, #1
 801f3b8:	d033      	beq.n	801f422 <uxr_deserialize_ObjectVariant+0xde>
 801f3ba:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 801f3be:	4628      	mov	r0, r5
 801f3c0:	2202      	movs	r2, #2
 801f3c2:	f002 fceb 	bl	8021d9c <ucdr_deserialize_array_uint8_t>
 801f3c6:	4038      	ands	r0, r7
 801f3c8:	b2c4      	uxtb	r4, r0
 801f3ca:	4620      	mov	r0, r4
 801f3cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f3ce:	1d31      	adds	r1, r6, #4
 801f3d0:	4628      	mov	r0, r5
 801f3d2:	f7fd f8e9 	bl	801c5a8 <ucdr_deserialize_uint8_t>
 801f3d6:	2800      	cmp	r0, #0
 801f3d8:	d0df      	beq.n	801f39a <uxr_deserialize_ObjectVariant+0x56>
 801f3da:	7933      	ldrb	r3, [r6, #4]
 801f3dc:	2b01      	cmp	r3, #1
 801f3de:	d001      	beq.n	801f3e4 <uxr_deserialize_ObjectVariant+0xa0>
 801f3e0:	2b02      	cmp	r3, #2
 801f3e2:	d1d8      	bne.n	801f396 <uxr_deserialize_ObjectVariant+0x52>
 801f3e4:	68b1      	ldr	r1, [r6, #8]
 801f3e6:	4628      	mov	r0, r5
 801f3e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 801f3ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801f3f0:	f002 bda4 	b.w	8021f3c <ucdr_deserialize_string>
 801f3f4:	1d31      	adds	r1, r6, #4
 801f3f6:	4628      	mov	r0, r5
 801f3f8:	f7fd f8d6 	bl	801c5a8 <ucdr_deserialize_uint8_t>
 801f3fc:	4607      	mov	r7, r0
 801f3fe:	2800      	cmp	r0, #0
 801f400:	d0db      	beq.n	801f3ba <uxr_deserialize_ObjectVariant+0x76>
 801f402:	7933      	ldrb	r3, [r6, #4]
 801f404:	2b02      	cmp	r3, #2
 801f406:	d00c      	beq.n	801f422 <uxr_deserialize_ObjectVariant+0xde>
 801f408:	2b03      	cmp	r3, #3
 801f40a:	d1d6      	bne.n	801f3ba <uxr_deserialize_ObjectVariant+0x76>
 801f40c:	f106 0308 	add.w	r3, r6, #8
 801f410:	f44f 7200 	mov.w	r2, #512	; 0x200
 801f414:	f106 010c 	add.w	r1, r6, #12
 801f418:	4628      	mov	r0, r5
 801f41a:	f002 fd65 	bl	8021ee8 <ucdr_deserialize_sequence_uint8_t>
 801f41e:	4607      	mov	r7, r0
 801f420:	e7cb      	b.n	801f3ba <uxr_deserialize_ObjectVariant+0x76>
 801f422:	f44f 7200 	mov.w	r2, #512	; 0x200
 801f426:	68b1      	ldr	r1, [r6, #8]
 801f428:	4628      	mov	r0, r5
 801f42a:	f002 fd87 	bl	8021f3c <ucdr_deserialize_string>
 801f42e:	4607      	mov	r7, r0
 801f430:	e7c3      	b.n	801f3ba <uxr_deserialize_ObjectVariant+0x76>
 801f432:	2204      	movs	r2, #4
 801f434:	4628      	mov	r0, r5
 801f436:	18b1      	adds	r1, r6, r2
 801f438:	f002 fcb0 	bl	8021d9c <ucdr_deserialize_array_uint8_t>
 801f43c:	4604      	mov	r4, r0
 801f43e:	2202      	movs	r2, #2
 801f440:	f106 0108 	add.w	r1, r6, #8
 801f444:	4628      	mov	r0, r5
 801f446:	f002 fca9 	bl	8021d9c <ucdr_deserialize_array_uint8_t>
 801f44a:	4004      	ands	r4, r0
 801f44c:	2202      	movs	r2, #2
 801f44e:	f106 010a 	add.w	r1, r6, #10
 801f452:	4628      	mov	r0, r5
 801f454:	b2e4      	uxtb	r4, r4
 801f456:	f002 fca1 	bl	8021d9c <ucdr_deserialize_array_uint8_t>
 801f45a:	4603      	mov	r3, r0
 801f45c:	f106 010c 	add.w	r1, r6, #12
 801f460:	4628      	mov	r0, r5
 801f462:	401c      	ands	r4, r3
 801f464:	f7fd f872 	bl	801c54c <ucdr_deserialize_bool>
 801f468:	4004      	ands	r4, r0
 801f46a:	e794      	b.n	801f396 <uxr_deserialize_ObjectVariant+0x52>
 801f46c:	1d31      	adds	r1, r6, #4
 801f46e:	4628      	mov	r0, r5
 801f470:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801f474:	f7ff bd34 	b.w	801eee0 <uxr_deserialize_CLIENT_Representation>
 801f478:	f44f 7200 	mov.w	r2, #512	; 0x200
 801f47c:	68b1      	ldr	r1, [r6, #8]
 801f47e:	4628      	mov	r0, r5
 801f480:	f002 fd5c 	bl	8021f3c <ucdr_deserialize_string>
 801f484:	4607      	mov	r7, r0
 801f486:	e77f      	b.n	801f388 <uxr_deserialize_ObjectVariant+0x44>
 801f488:	f106 0308 	add.w	r3, r6, #8
 801f48c:	f44f 7200 	mov.w	r2, #512	; 0x200
 801f490:	f106 010c 	add.w	r1, r6, #12
 801f494:	4628      	mov	r0, r5
 801f496:	f002 fd27 	bl	8021ee8 <ucdr_deserialize_sequence_uint8_t>
 801f49a:	4607      	mov	r7, r0
 801f49c:	e774      	b.n	801f388 <uxr_deserialize_ObjectVariant+0x44>
 801f49e:	bf00      	nop

0801f4a0 <uxr_deserialize_BaseObjectRequest>:
 801f4a0:	b570      	push	{r4, r5, r6, lr}
 801f4a2:	2202      	movs	r2, #2
 801f4a4:	4605      	mov	r5, r0
 801f4a6:	460e      	mov	r6, r1
 801f4a8:	f002 fc78 	bl	8021d9c <ucdr_deserialize_array_uint8_t>
 801f4ac:	4604      	mov	r4, r0
 801f4ae:	2202      	movs	r2, #2
 801f4b0:	1cb1      	adds	r1, r6, #2
 801f4b2:	4628      	mov	r0, r5
 801f4b4:	f002 fc72 	bl	8021d9c <ucdr_deserialize_array_uint8_t>
 801f4b8:	4020      	ands	r0, r4
 801f4ba:	b2c0      	uxtb	r0, r0
 801f4bc:	bd70      	pop	{r4, r5, r6, pc}
 801f4be:	bf00      	nop

0801f4c0 <uxr_deserialize_BaseObjectReply>:
 801f4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f4c4:	4606      	mov	r6, r0
 801f4c6:	460f      	mov	r7, r1
 801f4c8:	2202      	movs	r2, #2
 801f4ca:	f002 fc67 	bl	8021d9c <ucdr_deserialize_array_uint8_t>
 801f4ce:	2202      	movs	r2, #2
 801f4d0:	1cb9      	adds	r1, r7, #2
 801f4d2:	4605      	mov	r5, r0
 801f4d4:	4630      	mov	r0, r6
 801f4d6:	f002 fc61 	bl	8021d9c <ucdr_deserialize_array_uint8_t>
 801f4da:	4680      	mov	r8, r0
 801f4dc:	1d39      	adds	r1, r7, #4
 801f4de:	4630      	mov	r0, r6
 801f4e0:	f7fd f862 	bl	801c5a8 <ucdr_deserialize_uint8_t>
 801f4e4:	ea05 0508 	and.w	r5, r5, r8
 801f4e8:	4604      	mov	r4, r0
 801f4ea:	1d79      	adds	r1, r7, #5
 801f4ec:	4630      	mov	r0, r6
 801f4ee:	402c      	ands	r4, r5
 801f4f0:	f7fd f85a 	bl	801c5a8 <ucdr_deserialize_uint8_t>
 801f4f4:	4020      	ands	r0, r4
 801f4f6:	b2c0      	uxtb	r0, r0
 801f4f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801f4fc <uxr_serialize_ReadSpecification>:
 801f4fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f500:	460e      	mov	r6, r1
 801f502:	4607      	mov	r7, r0
 801f504:	7809      	ldrb	r1, [r1, #0]
 801f506:	f7fd f839 	bl	801c57c <ucdr_serialize_uint8_t>
 801f50a:	7871      	ldrb	r1, [r6, #1]
 801f50c:	4604      	mov	r4, r0
 801f50e:	4638      	mov	r0, r7
 801f510:	f7fd f834 	bl	801c57c <ucdr_serialize_uint8_t>
 801f514:	4605      	mov	r5, r0
 801f516:	78b1      	ldrb	r1, [r6, #2]
 801f518:	4638      	mov	r0, r7
 801f51a:	402c      	ands	r4, r5
 801f51c:	f7fd f800 	bl	801c520 <ucdr_serialize_bool>
 801f520:	78b3      	ldrb	r3, [r6, #2]
 801f522:	b2e4      	uxtb	r4, r4
 801f524:	4004      	ands	r4, r0
 801f526:	b94b      	cbnz	r3, 801f53c <uxr_serialize_ReadSpecification+0x40>
 801f528:	7a31      	ldrb	r1, [r6, #8]
 801f52a:	4638      	mov	r0, r7
 801f52c:	f7fc fff8 	bl	801c520 <ucdr_serialize_bool>
 801f530:	7a33      	ldrb	r3, [r6, #8]
 801f532:	4004      	ands	r4, r0
 801f534:	b943      	cbnz	r3, 801f548 <uxr_serialize_ReadSpecification+0x4c>
 801f536:	4620      	mov	r0, r4
 801f538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f53c:	6871      	ldr	r1, [r6, #4]
 801f53e:	4638      	mov	r0, r7
 801f540:	f002 fcec 	bl	8021f1c <ucdr_serialize_string>
 801f544:	4004      	ands	r4, r0
 801f546:	e7ef      	b.n	801f528 <uxr_serialize_ReadSpecification+0x2c>
 801f548:	8971      	ldrh	r1, [r6, #10]
 801f54a:	4638      	mov	r0, r7
 801f54c:	f7fd f842 	bl	801c5d4 <ucdr_serialize_uint16_t>
 801f550:	89b1      	ldrh	r1, [r6, #12]
 801f552:	4605      	mov	r5, r0
 801f554:	4638      	mov	r0, r7
 801f556:	f7fd f83d 	bl	801c5d4 <ucdr_serialize_uint16_t>
 801f55a:	4680      	mov	r8, r0
 801f55c:	89f1      	ldrh	r1, [r6, #14]
 801f55e:	4638      	mov	r0, r7
 801f560:	ea05 0508 	and.w	r5, r5, r8
 801f564:	f7fd f836 	bl	801c5d4 <ucdr_serialize_uint16_t>
 801f568:	8a31      	ldrh	r1, [r6, #16]
 801f56a:	4606      	mov	r6, r0
 801f56c:	b2ed      	uxtb	r5, r5
 801f56e:	4638      	mov	r0, r7
 801f570:	f7fd f830 	bl	801c5d4 <ucdr_serialize_uint16_t>
 801f574:	4025      	ands	r5, r4
 801f576:	4035      	ands	r5, r6
 801f578:	ea00 0405 	and.w	r4, r0, r5
 801f57c:	4620      	mov	r0, r4
 801f57e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f582:	bf00      	nop

0801f584 <uxr_serialize_CREATE_CLIENT_Payload>:
 801f584:	f7ff bc4e 	b.w	801ee24 <uxr_serialize_CLIENT_Representation>

0801f588 <uxr_serialize_CREATE_Payload>:
 801f588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f58a:	4606      	mov	r6, r0
 801f58c:	460d      	mov	r5, r1
 801f58e:	2202      	movs	r2, #2
 801f590:	f002 fba0 	bl	8021cd4 <ucdr_serialize_array_uint8_t>
 801f594:	1ca9      	adds	r1, r5, #2
 801f596:	4604      	mov	r4, r0
 801f598:	2202      	movs	r2, #2
 801f59a:	4630      	mov	r0, r6
 801f59c:	f002 fb9a 	bl	8021cd4 <ucdr_serialize_array_uint8_t>
 801f5a0:	7929      	ldrb	r1, [r5, #4]
 801f5a2:	4607      	mov	r7, r0
 801f5a4:	4630      	mov	r0, r6
 801f5a6:	f7fc ffe9 	bl	801c57c <ucdr_serialize_uint8_t>
 801f5aa:	b328      	cbz	r0, 801f5f8 <uxr_serialize_CREATE_Payload+0x70>
 801f5ac:	792b      	ldrb	r3, [r5, #4]
 801f5ae:	403c      	ands	r4, r7
 801f5b0:	3b01      	subs	r3, #1
 801f5b2:	b2e4      	uxtb	r4, r4
 801f5b4:	2b0d      	cmp	r3, #13
 801f5b6:	d81d      	bhi.n	801f5f4 <uxr_serialize_CREATE_Payload+0x6c>
 801f5b8:	e8df f003 	tbb	[pc, r3]
 801f5bc:	32320753 	.word	0x32320753
 801f5c0:	07070707 	.word	0x07070707
 801f5c4:	2121211c 	.word	0x2121211c
 801f5c8:	684c      	.short	0x684c
 801f5ca:	7a29      	ldrb	r1, [r5, #8]
 801f5cc:	4630      	mov	r0, r6
 801f5ce:	f7fc ffd5 	bl	801c57c <ucdr_serialize_uint8_t>
 801f5d2:	4607      	mov	r7, r0
 801f5d4:	b130      	cbz	r0, 801f5e4 <uxr_serialize_CREATE_Payload+0x5c>
 801f5d6:	7a2b      	ldrb	r3, [r5, #8]
 801f5d8:	2b02      	cmp	r3, #2
 801f5da:	d035      	beq.n	801f648 <uxr_serialize_CREATE_Payload+0xc0>
 801f5dc:	2b03      	cmp	r3, #3
 801f5de:	d02b      	beq.n	801f638 <uxr_serialize_CREATE_Payload+0xb0>
 801f5e0:	2b01      	cmp	r3, #1
 801f5e2:	d031      	beq.n	801f648 <uxr_serialize_CREATE_Payload+0xc0>
 801f5e4:	f505 7104 	add.w	r1, r5, #528	; 0x210
 801f5e8:	4630      	mov	r0, r6
 801f5ea:	2202      	movs	r2, #2
 801f5ec:	f002 fb72 	bl	8021cd4 <ucdr_serialize_array_uint8_t>
 801f5f0:	4038      	ands	r0, r7
 801f5f2:	4004      	ands	r4, r0
 801f5f4:	4620      	mov	r0, r4
 801f5f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f5f8:	2400      	movs	r4, #0
 801f5fa:	4620      	mov	r0, r4
 801f5fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f5fe:	7a29      	ldrb	r1, [r5, #8]
 801f600:	4630      	mov	r0, r6
 801f602:	f7fc ffbb 	bl	801c57c <ucdr_serialize_uint8_t>
 801f606:	2800      	cmp	r0, #0
 801f608:	d0f6      	beq.n	801f5f8 <uxr_serialize_CREATE_Payload+0x70>
 801f60a:	7a2b      	ldrb	r3, [r5, #8]
 801f60c:	2b01      	cmp	r3, #1
 801f60e:	d001      	beq.n	801f614 <uxr_serialize_CREATE_Payload+0x8c>
 801f610:	2b02      	cmp	r3, #2
 801f612:	d1ef      	bne.n	801f5f4 <uxr_serialize_CREATE_Payload+0x6c>
 801f614:	68e9      	ldr	r1, [r5, #12]
 801f616:	4630      	mov	r0, r6
 801f618:	f002 fc80 	bl	8021f1c <ucdr_serialize_string>
 801f61c:	4004      	ands	r4, r0
 801f61e:	e7e9      	b.n	801f5f4 <uxr_serialize_CREATE_Payload+0x6c>
 801f620:	7a29      	ldrb	r1, [r5, #8]
 801f622:	4630      	mov	r0, r6
 801f624:	f7fc ffaa 	bl	801c57c <ucdr_serialize_uint8_t>
 801f628:	4607      	mov	r7, r0
 801f62a:	2800      	cmp	r0, #0
 801f62c:	d0da      	beq.n	801f5e4 <uxr_serialize_CREATE_Payload+0x5c>
 801f62e:	7a2b      	ldrb	r3, [r5, #8]
 801f630:	2b02      	cmp	r3, #2
 801f632:	d009      	beq.n	801f648 <uxr_serialize_CREATE_Payload+0xc0>
 801f634:	2b03      	cmp	r3, #3
 801f636:	d1d5      	bne.n	801f5e4 <uxr_serialize_CREATE_Payload+0x5c>
 801f638:	68ea      	ldr	r2, [r5, #12]
 801f63a:	f105 0110 	add.w	r1, r5, #16
 801f63e:	4630      	mov	r0, r6
 801f640:	f002 fc40 	bl	8021ec4 <ucdr_serialize_sequence_uint8_t>
 801f644:	4607      	mov	r7, r0
 801f646:	e7cd      	b.n	801f5e4 <uxr_serialize_CREATE_Payload+0x5c>
 801f648:	68e9      	ldr	r1, [r5, #12]
 801f64a:	4630      	mov	r0, r6
 801f64c:	f002 fc66 	bl	8021f1c <ucdr_serialize_string>
 801f650:	4607      	mov	r7, r0
 801f652:	e7c7      	b.n	801f5e4 <uxr_serialize_CREATE_Payload+0x5c>
 801f654:	f105 0108 	add.w	r1, r5, #8
 801f658:	4630      	mov	r0, r6
 801f65a:	f7ff fcad 	bl	801efb8 <uxr_serialize_AGENT_Representation>
 801f65e:	4004      	ands	r4, r0
 801f660:	e7c8      	b.n	801f5f4 <uxr_serialize_CREATE_Payload+0x6c>
 801f662:	7a29      	ldrb	r1, [r5, #8]
 801f664:	4630      	mov	r0, r6
 801f666:	f7fc ff89 	bl	801c57c <ucdr_serialize_uint8_t>
 801f66a:	4607      	mov	r7, r0
 801f66c:	b130      	cbz	r0, 801f67c <uxr_serialize_CREATE_Payload+0xf4>
 801f66e:	7a2b      	ldrb	r3, [r5, #8]
 801f670:	2b02      	cmp	r3, #2
 801f672:	d012      	beq.n	801f69a <uxr_serialize_CREATE_Payload+0x112>
 801f674:	2b03      	cmp	r3, #3
 801f676:	d016      	beq.n	801f6a6 <uxr_serialize_CREATE_Payload+0x11e>
 801f678:	2b01      	cmp	r3, #1
 801f67a:	d00e      	beq.n	801f69a <uxr_serialize_CREATE_Payload+0x112>
 801f67c:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	; 0x210
 801f680:	4630      	mov	r0, r6
 801f682:	f7fd fcbb 	bl	801cffc <ucdr_serialize_int16_t>
 801f686:	4038      	ands	r0, r7
 801f688:	4004      	ands	r4, r0
 801f68a:	e7b3      	b.n	801f5f4 <uxr_serialize_CREATE_Payload+0x6c>
 801f68c:	f105 0108 	add.w	r1, r5, #8
 801f690:	4630      	mov	r0, r6
 801f692:	f7ff fbc7 	bl	801ee24 <uxr_serialize_CLIENT_Representation>
 801f696:	4004      	ands	r4, r0
 801f698:	e7ac      	b.n	801f5f4 <uxr_serialize_CREATE_Payload+0x6c>
 801f69a:	68e9      	ldr	r1, [r5, #12]
 801f69c:	4630      	mov	r0, r6
 801f69e:	f002 fc3d 	bl	8021f1c <ucdr_serialize_string>
 801f6a2:	4607      	mov	r7, r0
 801f6a4:	e7ea      	b.n	801f67c <uxr_serialize_CREATE_Payload+0xf4>
 801f6a6:	68ea      	ldr	r2, [r5, #12]
 801f6a8:	f105 0110 	add.w	r1, r5, #16
 801f6ac:	4630      	mov	r0, r6
 801f6ae:	f002 fc09 	bl	8021ec4 <ucdr_serialize_sequence_uint8_t>
 801f6b2:	4607      	mov	r7, r0
 801f6b4:	e7e2      	b.n	801f67c <uxr_serialize_CREATE_Payload+0xf4>
 801f6b6:	bf00      	nop

0801f6b8 <uxr_serialize_DELETE_Payload>:
 801f6b8:	b570      	push	{r4, r5, r6, lr}
 801f6ba:	2202      	movs	r2, #2
 801f6bc:	4605      	mov	r5, r0
 801f6be:	460e      	mov	r6, r1
 801f6c0:	f002 fb08 	bl	8021cd4 <ucdr_serialize_array_uint8_t>
 801f6c4:	4604      	mov	r4, r0
 801f6c6:	2202      	movs	r2, #2
 801f6c8:	1cb1      	adds	r1, r6, #2
 801f6ca:	4628      	mov	r0, r5
 801f6cc:	f002 fb02 	bl	8021cd4 <ucdr_serialize_array_uint8_t>
 801f6d0:	4020      	ands	r0, r4
 801f6d2:	b2c0      	uxtb	r0, r0
 801f6d4:	bd70      	pop	{r4, r5, r6, pc}
 801f6d6:	bf00      	nop

0801f6d8 <uxr_deserialize_STATUS_AGENT_Payload>:
 801f6d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f6dc:	4606      	mov	r6, r0
 801f6de:	460f      	mov	r7, r1
 801f6e0:	f7fc ff62 	bl	801c5a8 <ucdr_deserialize_uint8_t>
 801f6e4:	4605      	mov	r5, r0
 801f6e6:	1c79      	adds	r1, r7, #1
 801f6e8:	4630      	mov	r0, r6
 801f6ea:	f7fc ff5d 	bl	801c5a8 <ucdr_deserialize_uint8_t>
 801f6ee:	4682      	mov	sl, r0
 801f6f0:	1d39      	adds	r1, r7, #4
 801f6f2:	4630      	mov	r0, r6
 801f6f4:	ea05 050a 	and.w	r5, r5, sl
 801f6f8:	2204      	movs	r2, #4
 801f6fa:	f002 fb4f 	bl	8021d9c <ucdr_deserialize_array_uint8_t>
 801f6fe:	4681      	mov	r9, r0
 801f700:	b2ec      	uxtb	r4, r5
 801f702:	f107 0108 	add.w	r1, r7, #8
 801f706:	4630      	mov	r0, r6
 801f708:	2202      	movs	r2, #2
 801f70a:	f002 fb47 	bl	8021d9c <ucdr_deserialize_array_uint8_t>
 801f70e:	ea04 0409 	and.w	r4, r4, r9
 801f712:	4680      	mov	r8, r0
 801f714:	f107 010a 	add.w	r1, r7, #10
 801f718:	2202      	movs	r2, #2
 801f71a:	4630      	mov	r0, r6
 801f71c:	f002 fb3e 	bl	8021d9c <ucdr_deserialize_array_uint8_t>
 801f720:	ea08 0404 	and.w	r4, r8, r4
 801f724:	4605      	mov	r5, r0
 801f726:	f107 010c 	add.w	r1, r7, #12
 801f72a:	4630      	mov	r0, r6
 801f72c:	4025      	ands	r5, r4
 801f72e:	f7fc ff0d 	bl	801c54c <ucdr_deserialize_bool>
 801f732:	4028      	ands	r0, r5
 801f734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801f738 <uxr_deserialize_STATUS_Payload>:
 801f738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f73c:	4606      	mov	r6, r0
 801f73e:	460f      	mov	r7, r1
 801f740:	2202      	movs	r2, #2
 801f742:	f002 fb2b 	bl	8021d9c <ucdr_deserialize_array_uint8_t>
 801f746:	2202      	movs	r2, #2
 801f748:	1cb9      	adds	r1, r7, #2
 801f74a:	4605      	mov	r5, r0
 801f74c:	4630      	mov	r0, r6
 801f74e:	f002 fb25 	bl	8021d9c <ucdr_deserialize_array_uint8_t>
 801f752:	4680      	mov	r8, r0
 801f754:	1d39      	adds	r1, r7, #4
 801f756:	4630      	mov	r0, r6
 801f758:	f7fc ff26 	bl	801c5a8 <ucdr_deserialize_uint8_t>
 801f75c:	ea05 0508 	and.w	r5, r5, r8
 801f760:	4604      	mov	r4, r0
 801f762:	1d79      	adds	r1, r7, #5
 801f764:	4630      	mov	r0, r6
 801f766:	402c      	ands	r4, r5
 801f768:	f7fc ff1e 	bl	801c5a8 <ucdr_deserialize_uint8_t>
 801f76c:	4020      	ands	r0, r4
 801f76e:	b2c0      	uxtb	r0, r0
 801f770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801f774 <uxr_serialize_READ_DATA_Payload>:
 801f774:	b570      	push	{r4, r5, r6, lr}
 801f776:	4605      	mov	r5, r0
 801f778:	460e      	mov	r6, r1
 801f77a:	2202      	movs	r2, #2
 801f77c:	f002 faaa 	bl	8021cd4 <ucdr_serialize_array_uint8_t>
 801f780:	1cb1      	adds	r1, r6, #2
 801f782:	2202      	movs	r2, #2
 801f784:	4604      	mov	r4, r0
 801f786:	4628      	mov	r0, r5
 801f788:	f002 faa4 	bl	8021cd4 <ucdr_serialize_array_uint8_t>
 801f78c:	4603      	mov	r3, r0
 801f78e:	1d31      	adds	r1, r6, #4
 801f790:	4628      	mov	r0, r5
 801f792:	401c      	ands	r4, r3
 801f794:	f7ff feb2 	bl	801f4fc <uxr_serialize_ReadSpecification>
 801f798:	b2e4      	uxtb	r4, r4
 801f79a:	4020      	ands	r0, r4
 801f79c:	bd70      	pop	{r4, r5, r6, pc}
 801f79e:	bf00      	nop

0801f7a0 <uxr_serialize_WRITE_DATA_Payload_Data>:
 801f7a0:	b570      	push	{r4, r5, r6, lr}
 801f7a2:	2202      	movs	r2, #2
 801f7a4:	4605      	mov	r5, r0
 801f7a6:	460e      	mov	r6, r1
 801f7a8:	f002 fa94 	bl	8021cd4 <ucdr_serialize_array_uint8_t>
 801f7ac:	4604      	mov	r4, r0
 801f7ae:	2202      	movs	r2, #2
 801f7b0:	1cb1      	adds	r1, r6, #2
 801f7b2:	4628      	mov	r0, r5
 801f7b4:	f002 fa8e 	bl	8021cd4 <ucdr_serialize_array_uint8_t>
 801f7b8:	4020      	ands	r0, r4
 801f7ba:	b2c0      	uxtb	r0, r0
 801f7bc:	bd70      	pop	{r4, r5, r6, pc}
 801f7be:	bf00      	nop

0801f7c0 <uxr_serialize_ACKNACK_Payload>:
 801f7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f7c2:	460f      	mov	r7, r1
 801f7c4:	4605      	mov	r5, r0
 801f7c6:	460e      	mov	r6, r1
 801f7c8:	f837 1b02 	ldrh.w	r1, [r7], #2
 801f7cc:	f7fc ff02 	bl	801c5d4 <ucdr_serialize_uint16_t>
 801f7d0:	2202      	movs	r2, #2
 801f7d2:	4639      	mov	r1, r7
 801f7d4:	4604      	mov	r4, r0
 801f7d6:	4628      	mov	r0, r5
 801f7d8:	f002 fa7c 	bl	8021cd4 <ucdr_serialize_array_uint8_t>
 801f7dc:	4603      	mov	r3, r0
 801f7de:	7931      	ldrb	r1, [r6, #4]
 801f7e0:	4628      	mov	r0, r5
 801f7e2:	401c      	ands	r4, r3
 801f7e4:	f7fc feca 	bl	801c57c <ucdr_serialize_uint8_t>
 801f7e8:	b2e4      	uxtb	r4, r4
 801f7ea:	4020      	ands	r0, r4
 801f7ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f7ee:	bf00      	nop

0801f7f0 <uxr_deserialize_ACKNACK_Payload>:
 801f7f0:	b570      	push	{r4, r5, r6, lr}
 801f7f2:	4605      	mov	r5, r0
 801f7f4:	460e      	mov	r6, r1
 801f7f6:	f7fc ffed 	bl	801c7d4 <ucdr_deserialize_uint16_t>
 801f7fa:	2202      	movs	r2, #2
 801f7fc:	1cb1      	adds	r1, r6, #2
 801f7fe:	4604      	mov	r4, r0
 801f800:	4628      	mov	r0, r5
 801f802:	f002 facb 	bl	8021d9c <ucdr_deserialize_array_uint8_t>
 801f806:	4603      	mov	r3, r0
 801f808:	1d31      	adds	r1, r6, #4
 801f80a:	4628      	mov	r0, r5
 801f80c:	401c      	ands	r4, r3
 801f80e:	f7fc fecb 	bl	801c5a8 <ucdr_deserialize_uint8_t>
 801f812:	b2e4      	uxtb	r4, r4
 801f814:	4020      	ands	r0, r4
 801f816:	bd70      	pop	{r4, r5, r6, pc}

0801f818 <uxr_serialize_HEARTBEAT_Payload>:
 801f818:	b570      	push	{r4, r5, r6, lr}
 801f81a:	460d      	mov	r5, r1
 801f81c:	4606      	mov	r6, r0
 801f81e:	8809      	ldrh	r1, [r1, #0]
 801f820:	f7fc fed8 	bl	801c5d4 <ucdr_serialize_uint16_t>
 801f824:	8869      	ldrh	r1, [r5, #2]
 801f826:	4604      	mov	r4, r0
 801f828:	4630      	mov	r0, r6
 801f82a:	f7fc fed3 	bl	801c5d4 <ucdr_serialize_uint16_t>
 801f82e:	4603      	mov	r3, r0
 801f830:	7929      	ldrb	r1, [r5, #4]
 801f832:	4630      	mov	r0, r6
 801f834:	401c      	ands	r4, r3
 801f836:	f7fc fea1 	bl	801c57c <ucdr_serialize_uint8_t>
 801f83a:	b2e4      	uxtb	r4, r4
 801f83c:	4020      	ands	r0, r4
 801f83e:	bd70      	pop	{r4, r5, r6, pc}

0801f840 <uxr_deserialize_HEARTBEAT_Payload>:
 801f840:	b570      	push	{r4, r5, r6, lr}
 801f842:	4605      	mov	r5, r0
 801f844:	460e      	mov	r6, r1
 801f846:	f7fc ffc5 	bl	801c7d4 <ucdr_deserialize_uint16_t>
 801f84a:	4604      	mov	r4, r0
 801f84c:	1cb1      	adds	r1, r6, #2
 801f84e:	4628      	mov	r0, r5
 801f850:	f7fc ffc0 	bl	801c7d4 <ucdr_deserialize_uint16_t>
 801f854:	4603      	mov	r3, r0
 801f856:	1d31      	adds	r1, r6, #4
 801f858:	4628      	mov	r0, r5
 801f85a:	401c      	ands	r4, r3
 801f85c:	f7fc fea4 	bl	801c5a8 <ucdr_deserialize_uint8_t>
 801f860:	b2e4      	uxtb	r4, r4
 801f862:	4020      	ands	r0, r4
 801f864:	bd70      	pop	{r4, r5, r6, pc}
 801f866:	bf00      	nop

0801f868 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801f868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f86c:	4605      	mov	r5, r0
 801f86e:	460e      	mov	r6, r1
 801f870:	f7fd fd50 	bl	801d314 <ucdr_deserialize_int32_t>
 801f874:	4680      	mov	r8, r0
 801f876:	1d31      	adds	r1, r6, #4
 801f878:	4628      	mov	r0, r5
 801f87a:	f7fd f9c9 	bl	801cc10 <ucdr_deserialize_uint32_t>
 801f87e:	4681      	mov	r9, r0
 801f880:	f106 0108 	add.w	r1, r6, #8
 801f884:	4628      	mov	r0, r5
 801f886:	f7fd fd45 	bl	801d314 <ucdr_deserialize_int32_t>
 801f88a:	ea08 0809 	and.w	r8, r8, r9
 801f88e:	4607      	mov	r7, r0
 801f890:	f106 010c 	add.w	r1, r6, #12
 801f894:	4628      	mov	r0, r5
 801f896:	f7fd f9bb 	bl	801cc10 <ucdr_deserialize_uint32_t>
 801f89a:	ea07 0708 	and.w	r7, r7, r8
 801f89e:	4604      	mov	r4, r0
 801f8a0:	f106 0110 	add.w	r1, r6, #16
 801f8a4:	4628      	mov	r0, r5
 801f8a6:	f7fd fd35 	bl	801d314 <ucdr_deserialize_int32_t>
 801f8aa:	403c      	ands	r4, r7
 801f8ac:	4603      	mov	r3, r0
 801f8ae:	4628      	mov	r0, r5
 801f8b0:	b2e4      	uxtb	r4, r4
 801f8b2:	f106 0114 	add.w	r1, r6, #20
 801f8b6:	461d      	mov	r5, r3
 801f8b8:	f7fd f9aa 	bl	801cc10 <ucdr_deserialize_uint32_t>
 801f8bc:	402c      	ands	r4, r5
 801f8be:	4020      	ands	r0, r4
 801f8c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801f8c4 <uxr_deserialize_SampleIdentity>:
 801f8c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f8c8:	4604      	mov	r4, r0
 801f8ca:	460d      	mov	r5, r1
 801f8cc:	220c      	movs	r2, #12
 801f8ce:	f002 fa65 	bl	8021d9c <ucdr_deserialize_array_uint8_t>
 801f8d2:	2203      	movs	r2, #3
 801f8d4:	f105 010c 	add.w	r1, r5, #12
 801f8d8:	4607      	mov	r7, r0
 801f8da:	4620      	mov	r0, r4
 801f8dc:	f002 fa5e 	bl	8021d9c <ucdr_deserialize_array_uint8_t>
 801f8e0:	f105 010f 	add.w	r1, r5, #15
 801f8e4:	4680      	mov	r8, r0
 801f8e6:	4620      	mov	r0, r4
 801f8e8:	f7fc fe5e 	bl	801c5a8 <ucdr_deserialize_uint8_t>
 801f8ec:	f105 0110 	add.w	r1, r5, #16
 801f8f0:	4606      	mov	r6, r0
 801f8f2:	4620      	mov	r0, r4
 801f8f4:	f7fd fd0e 	bl	801d314 <ucdr_deserialize_int32_t>
 801f8f8:	ea07 0708 	and.w	r7, r7, r8
 801f8fc:	4603      	mov	r3, r0
 801f8fe:	4620      	mov	r0, r4
 801f900:	403e      	ands	r6, r7
 801f902:	f105 0114 	add.w	r1, r5, #20
 801f906:	461c      	mov	r4, r3
 801f908:	f7fd f982 	bl	801cc10 <ucdr_deserialize_uint32_t>
 801f90c:	4034      	ands	r4, r6
 801f90e:	4020      	ands	r0, r4
 801f910:	b2c0      	uxtb	r0, r0
 801f912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f916:	bf00      	nop

0801f918 <rcl_convert_rmw_ret_to_rcl_ret>:
 801f918:	280b      	cmp	r0, #11
 801f91a:	dc0d      	bgt.n	801f938 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 801f91c:	2800      	cmp	r0, #0
 801f91e:	db09      	blt.n	801f934 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801f920:	280b      	cmp	r0, #11
 801f922:	d807      	bhi.n	801f934 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801f924:	e8df f000 	tbb	[pc, r0]
 801f928:	07060607 	.word	0x07060607
 801f92c:	06060606 	.word	0x06060606
 801f930:	07070606 	.word	0x07070606
 801f934:	2001      	movs	r0, #1
 801f936:	4770      	bx	lr
 801f938:	28cb      	cmp	r0, #203	; 0xcb
 801f93a:	bf18      	it	ne
 801f93c:	2001      	movne	r0, #1
 801f93e:	4770      	bx	lr

0801f940 <rcl_get_zero_initialized_context>:
 801f940:	b4d0      	push	{r4, r6, r7}
 801f942:	4b06      	ldr	r3, [pc, #24]	; (801f95c <rcl_get_zero_initialized_context+0x1c>)
 801f944:	2600      	movs	r6, #0
 801f946:	2700      	movs	r7, #0
 801f948:	4604      	mov	r4, r0
 801f94a:	e9c3 6702 	strd	r6, r7, [r3, #8]
 801f94e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801f950:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801f954:	4620      	mov	r0, r4
 801f956:	bcd0      	pop	{r4, r6, r7}
 801f958:	4770      	bx	lr
 801f95a:	bf00      	nop
 801f95c:	2000fe38 	.word	0x2000fe38

0801f960 <rcl_context_is_valid>:
 801f960:	b150      	cbz	r0, 801f978 <rcl_context_is_valid+0x18>
 801f962:	3008      	adds	r0, #8
 801f964:	2105      	movs	r1, #5
 801f966:	b508      	push	{r3, lr}
 801f968:	f000 ff1e 	bl	80207a8 <__atomic_load_8>
 801f96c:	ea51 0300 	orrs.w	r3, r1, r0
 801f970:	bf14      	ite	ne
 801f972:	2001      	movne	r0, #1
 801f974:	2000      	moveq	r0, #0
 801f976:	bd08      	pop	{r3, pc}
 801f978:	4770      	bx	lr
 801f97a:	bf00      	nop

0801f97c <__cleanup_context>:
 801f97c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f980:	2105      	movs	r1, #5
 801f982:	b087      	sub	sp, #28
 801f984:	4606      	mov	r6, r0
 801f986:	2200      	movs	r2, #0
 801f988:	3008      	adds	r0, #8
 801f98a:	2300      	movs	r3, #0
 801f98c:	9100      	str	r1, [sp, #0]
 801f98e:	f000 ff3f 	bl	8020810 <__atomic_store_8>
 801f992:	6830      	ldr	r0, [r6, #0]
 801f994:	2800      	cmp	r0, #0
 801f996:	d056      	beq.n	801fa46 <__cleanup_context+0xca>
 801f998:	6947      	ldr	r7, [r0, #20]
 801f99a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801f99e:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801f9a2:	b137      	cbz	r7, 801f9b2 <__cleanup_context+0x36>
 801f9a4:	3014      	adds	r0, #20
 801f9a6:	f000 f9c1 	bl	801fd2c <rcl_init_options_fini>
 801f9aa:	4607      	mov	r7, r0
 801f9ac:	2800      	cmp	r0, #0
 801f9ae:	d14c      	bne.n	801fa4a <__cleanup_context+0xce>
 801f9b0:	6830      	ldr	r0, [r6, #0]
 801f9b2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801f9b4:	b143      	cbz	r3, 801f9c8 <__cleanup_context+0x4c>
 801f9b6:	3028      	adds	r0, #40	; 0x28
 801f9b8:	f001 fe72 	bl	80216a0 <rmw_context_fini>
 801f9bc:	b118      	cbz	r0, 801f9c6 <__cleanup_context+0x4a>
 801f9be:	2f00      	cmp	r7, #0
 801f9c0:	d046      	beq.n	801fa50 <__cleanup_context+0xd4>
 801f9c2:	f7fc f8e1 	bl	801bb88 <rcutils_reset_error>
 801f9c6:	6830      	ldr	r0, [r6, #0]
 801f9c8:	f8d0 c020 	ldr.w	ip, [r0, #32]
 801f9cc:	f1bc 0f00 	cmp.w	ip, #0
 801f9d0:	d01c      	beq.n	801fa0c <__cleanup_context+0x90>
 801f9d2:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 801f9d6:	2a01      	cmp	r2, #1
 801f9d8:	f173 0100 	sbcs.w	r1, r3, #0
 801f9dc:	db12      	blt.n	801fa04 <__cleanup_context+0x88>
 801f9de:	2400      	movs	r4, #0
 801f9e0:	2500      	movs	r5, #0
 801f9e2:	f85c 0024 	ldr.w	r0, [ip, r4, lsl #2]
 801f9e6:	4649      	mov	r1, r9
 801f9e8:	b308      	cbz	r0, 801fa2e <__cleanup_context+0xb2>
 801f9ea:	47c0      	blx	r8
 801f9ec:	6833      	ldr	r3, [r6, #0]
 801f9ee:	3401      	adds	r4, #1
 801f9f0:	f8d3 c020 	ldr.w	ip, [r3, #32]
 801f9f4:	f145 0500 	adc.w	r5, r5, #0
 801f9f8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801f9fc:	4294      	cmp	r4, r2
 801f9fe:	eb75 0103 	sbcs.w	r1, r5, r3
 801fa02:	dbee      	blt.n	801f9e2 <__cleanup_context+0x66>
 801fa04:	4660      	mov	r0, ip
 801fa06:	4649      	mov	r1, r9
 801fa08:	47c0      	blx	r8
 801fa0a:	6830      	ldr	r0, [r6, #0]
 801fa0c:	4649      	mov	r1, r9
 801fa0e:	47c0      	blx	r8
 801fa10:	4b11      	ldr	r3, [pc, #68]	; (801fa58 <__cleanup_context+0xdc>)
 801fa12:	2000      	movs	r0, #0
 801fa14:	2100      	movs	r1, #0
 801fa16:	ac02      	add	r4, sp, #8
 801fa18:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801fa1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801fa1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801fa22:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 801fa26:	4638      	mov	r0, r7
 801fa28:	b007      	add	sp, #28
 801fa2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fa2e:	3401      	adds	r4, #1
 801fa30:	f145 0500 	adc.w	r5, r5, #0
 801fa34:	4294      	cmp	r4, r2
 801fa36:	eb75 0103 	sbcs.w	r1, r5, r3
 801fa3a:	dbd2      	blt.n	801f9e2 <__cleanup_context+0x66>
 801fa3c:	4660      	mov	r0, ip
 801fa3e:	4649      	mov	r1, r9
 801fa40:	47c0      	blx	r8
 801fa42:	6830      	ldr	r0, [r6, #0]
 801fa44:	e7e2      	b.n	801fa0c <__cleanup_context+0x90>
 801fa46:	4607      	mov	r7, r0
 801fa48:	e7e2      	b.n	801fa10 <__cleanup_context+0x94>
 801fa4a:	f7fc f89d 	bl	801bb88 <rcutils_reset_error>
 801fa4e:	e7af      	b.n	801f9b0 <__cleanup_context+0x34>
 801fa50:	f7ff ff62 	bl	801f918 <rcl_convert_rmw_ret_to_rcl_ret>
 801fa54:	4607      	mov	r7, r0
 801fa56:	e7b4      	b.n	801f9c2 <__cleanup_context+0x46>
 801fa58:	2000fe38 	.word	0x2000fe38

0801fa5c <rcl_init>:
 801fa5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa60:	f1b0 0b00 	subs.w	fp, r0, #0
 801fa64:	b0a1      	sub	sp, #132	; 0x84
 801fa66:	468a      	mov	sl, r1
 801fa68:	4690      	mov	r8, r2
 801fa6a:	461f      	mov	r7, r3
 801fa6c:	f340 8091 	ble.w	801fb92 <rcl_init+0x136>
 801fa70:	2900      	cmp	r1, #0
 801fa72:	f000 8091 	beq.w	801fb98 <rcl_init+0x13c>
 801fa76:	1f0d      	subs	r5, r1, #4
 801fa78:	2400      	movs	r4, #0
 801fa7a:	f855 6f04 	ldr.w	r6, [r5, #4]!
 801fa7e:	3401      	adds	r4, #1
 801fa80:	2e00      	cmp	r6, #0
 801fa82:	f000 8089 	beq.w	801fb98 <rcl_init+0x13c>
 801fa86:	45a3      	cmp	fp, r4
 801fa88:	d1f7      	bne.n	801fa7a <rcl_init+0x1e>
 801fa8a:	f1b8 0f00 	cmp.w	r8, #0
 801fa8e:	f000 8083 	beq.w	801fb98 <rcl_init+0x13c>
 801fa92:	f8d8 4000 	ldr.w	r4, [r8]
 801fa96:	2c00      	cmp	r4, #0
 801fa98:	d07e      	beq.n	801fb98 <rcl_init+0x13c>
 801fa9a:	ad1b      	add	r5, sp, #108	; 0x6c
 801fa9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801fa9e:	6824      	ldr	r4, [r4, #0]
 801faa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801faa2:	a81b      	add	r0, sp, #108	; 0x6c
 801faa4:	602c      	str	r4, [r5, #0]
 801faa6:	f7fc f84b 	bl	801bb40 <rcutils_allocator_is_valid>
 801faaa:	f080 0001 	eor.w	r0, r0, #1
 801faae:	f010 0fff 	tst.w	r0, #255	; 0xff
 801fab2:	d171      	bne.n	801fb98 <rcl_init+0x13c>
 801fab4:	2f00      	cmp	r7, #0
 801fab6:	d06f      	beq.n	801fb98 <rcl_init+0x13c>
 801fab8:	683b      	ldr	r3, [r7, #0]
 801faba:	2b00      	cmp	r3, #0
 801fabc:	d171      	bne.n	801fba2 <rcl_init+0x146>
 801fabe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801fac0:	2178      	movs	r1, #120	; 0x78
 801fac2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801fac4:	2001      	movs	r0, #1
 801fac6:	4798      	blx	r3
 801fac8:	4604      	mov	r4, r0
 801faca:	6038      	str	r0, [r7, #0]
 801facc:	2800      	cmp	r0, #0
 801face:	f000 80bd 	beq.w	801fc4c <rcl_init+0x1f0>
 801fad2:	a804      	add	r0, sp, #16
 801fad4:	f001 fa28 	bl	8020f28 <rmw_get_zero_initialized_context>
 801fad8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801fadc:	ac1b      	add	r4, sp, #108	; 0x6c
 801fade:	a904      	add	r1, sp, #16
 801fae0:	2250      	movs	r2, #80	; 0x50
 801fae2:	f003 ff57 	bl	8023994 <memcpy>
 801fae6:	683e      	ldr	r6, [r7, #0]
 801fae8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801faea:	4635      	mov	r5, r6
 801faec:	6824      	ldr	r4, [r4, #0]
 801faee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801faf0:	f106 0114 	add.w	r1, r6, #20
 801faf4:	602c      	str	r4, [r5, #0]
 801faf6:	4640      	mov	r0, r8
 801faf8:	f000 f93c 	bl	801fd74 <rcl_init_options_copy>
 801fafc:	4604      	mov	r4, r0
 801fafe:	2800      	cmp	r0, #0
 801fb00:	d140      	bne.n	801fb84 <rcl_init+0x128>
 801fb02:	683d      	ldr	r5, [r7, #0]
 801fb04:	46d8      	mov	r8, fp
 801fb06:	ea4f 79eb 	mov.w	r9, fp, asr #31
 801fb0a:	6228      	str	r0, [r5, #32]
 801fb0c:	e9c5 8906 	strd	r8, r9, [r5, #24]
 801fb10:	f1bb 0f00 	cmp.w	fp, #0
 801fb14:	d04a      	beq.n	801fbac <rcl_init+0x150>
 801fb16:	f1ba 0f00 	cmp.w	sl, #0
 801fb1a:	d047      	beq.n	801fbac <rcl_init+0x150>
 801fb1c:	4658      	mov	r0, fp
 801fb1e:	2104      	movs	r1, #4
 801fb20:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	; 0x78
 801fb24:	4798      	blx	r3
 801fb26:	683e      	ldr	r6, [r7, #0]
 801fb28:	6228      	str	r0, [r5, #32]
 801fb2a:	6a33      	ldr	r3, [r6, #32]
 801fb2c:	b34b      	cbz	r3, 801fb82 <rcl_init+0x126>
 801fb2e:	f1bb 0f01 	cmp.w	fp, #1
 801fb32:	f179 0300 	sbcs.w	r3, r9, #0
 801fb36:	db39      	blt.n	801fbac <rcl_init+0x150>
 801fb38:	f1aa 0404 	sub.w	r4, sl, #4
 801fb3c:	f04f 0b00 	mov.w	fp, #0
 801fb40:	f04f 0a00 	mov.w	sl, #0
 801fb44:	e00b      	b.n	801fb5e <rcl_init+0x102>
 801fb46:	6821      	ldr	r1, [r4, #0]
 801fb48:	f003 ff24 	bl	8023994 <memcpy>
 801fb4c:	f11a 0a01 	adds.w	sl, sl, #1
 801fb50:	f14b 0b00 	adc.w	fp, fp, #0
 801fb54:	45d9      	cmp	r9, fp
 801fb56:	bf08      	it	eq
 801fb58:	45d0      	cmpeq	r8, sl
 801fb5a:	d027      	beq.n	801fbac <rcl_init+0x150>
 801fb5c:	683e      	ldr	r6, [r7, #0]
 801fb5e:	f854 0f04 	ldr.w	r0, [r4, #4]!
 801fb62:	ea4f 058a 	mov.w	r5, sl, lsl #2
 801fb66:	f7e0 fb5d 	bl	8000224 <strlen>
 801fb6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801fb6c:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801fb6e:	6a36      	ldr	r6, [r6, #32]
 801fb70:	9003      	str	r0, [sp, #12]
 801fb72:	4798      	blx	r3
 801fb74:	683b      	ldr	r3, [r7, #0]
 801fb76:	5170      	str	r0, [r6, r5]
 801fb78:	6a1b      	ldr	r3, [r3, #32]
 801fb7a:	9a03      	ldr	r2, [sp, #12]
 801fb7c:	5958      	ldr	r0, [r3, r5]
 801fb7e:	2800      	cmp	r0, #0
 801fb80:	d1e1      	bne.n	801fb46 <rcl_init+0xea>
 801fb82:	240a      	movs	r4, #10
 801fb84:	4638      	mov	r0, r7
 801fb86:	f7ff fef9 	bl	801f97c <__cleanup_context>
 801fb8a:	4620      	mov	r0, r4
 801fb8c:	b021      	add	sp, #132	; 0x84
 801fb8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb92:	2900      	cmp	r1, #0
 801fb94:	f43f af79 	beq.w	801fa8a <rcl_init+0x2e>
 801fb98:	240b      	movs	r4, #11
 801fb9a:	4620      	mov	r0, r4
 801fb9c:	b021      	add	sp, #132	; 0x84
 801fb9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fba2:	2464      	movs	r4, #100	; 0x64
 801fba4:	4620      	mov	r0, r4
 801fba6:	b021      	add	sp, #132	; 0x84
 801fba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fbac:	2605      	movs	r6, #5
 801fbae:	2300      	movs	r3, #0
 801fbb0:	2201      	movs	r2, #1
 801fbb2:	482d      	ldr	r0, [pc, #180]	; (801fc68 <rcl_init+0x20c>)
 801fbb4:	9600      	str	r6, [sp, #0]
 801fbb6:	f000 fe5f 	bl	8020878 <__atomic_fetch_add_8>
 801fbba:	4604      	mov	r4, r0
 801fbbc:	460d      	mov	r5, r1
 801fbbe:	ea54 0305 	orrs.w	r3, r4, r5
 801fbc2:	d039      	beq.n	801fc38 <rcl_init+0x1dc>
 801fbc4:	4602      	mov	r2, r0
 801fbc6:	460b      	mov	r3, r1
 801fbc8:	f107 0008 	add.w	r0, r7, #8
 801fbcc:	9600      	str	r6, [sp, #0]
 801fbce:	f000 fe1f 	bl	8020810 <__atomic_store_8>
 801fbd2:	683b      	ldr	r3, [r7, #0]
 801fbd4:	6958      	ldr	r0, [r3, #20]
 801fbd6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801fbd8:	3301      	adds	r3, #1
 801fbda:	e9c0 4506 	strd	r4, r5, [r0, #24]
 801fbde:	d039      	beq.n	801fc54 <rcl_init+0x1f8>
 801fbe0:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 801fbe4:	b93b      	cbnz	r3, 801fbf6 <rcl_init+0x19a>
 801fbe6:	3030      	adds	r0, #48	; 0x30
 801fbe8:	f000 f92e 	bl	801fe48 <rcl_get_localhost_only>
 801fbec:	4604      	mov	r4, r0
 801fbee:	2800      	cmp	r0, #0
 801fbf0:	d1c8      	bne.n	801fb84 <rcl_init+0x128>
 801fbf2:	683b      	ldr	r3, [r7, #0]
 801fbf4:	6958      	ldr	r0, [r3, #20]
 801fbf6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801fbf8:	aa1a      	add	r2, sp, #104	; 0x68
 801fbfa:	a919      	add	r1, sp, #100	; 0x64
 801fbfc:	f000 fdc2 	bl	8020784 <rcl_validate_enclave_name>
 801fc00:	4604      	mov	r4, r0
 801fc02:	2800      	cmp	r0, #0
 801fc04:	d1be      	bne.n	801fb84 <rcl_init+0x128>
 801fc06:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801fc08:	bb13      	cbnz	r3, 801fc50 <rcl_init+0x1f4>
 801fc0a:	6839      	ldr	r1, [r7, #0]
 801fc0c:	694b      	ldr	r3, [r1, #20]
 801fc0e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 801fc12:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801fc14:	f000 fc6a 	bl	80204ec <rcl_get_security_options_from_environment>
 801fc18:	4604      	mov	r4, r0
 801fc1a:	2800      	cmp	r0, #0
 801fc1c:	d1b2      	bne.n	801fb84 <rcl_init+0x128>
 801fc1e:	6839      	ldr	r1, [r7, #0]
 801fc20:	6948      	ldr	r0, [r1, #20]
 801fc22:	3128      	adds	r1, #40	; 0x28
 801fc24:	3018      	adds	r0, #24
 801fc26:	f001 fc0f 	bl	8021448 <rmw_init>
 801fc2a:	4604      	mov	r4, r0
 801fc2c:	2800      	cmp	r0, #0
 801fc2e:	d0b4      	beq.n	801fb9a <rcl_init+0x13e>
 801fc30:	f7ff fe72 	bl	801f918 <rcl_convert_rmw_ret_to_rcl_ret>
 801fc34:	4604      	mov	r4, r0
 801fc36:	e7a5      	b.n	801fb84 <rcl_init+0x128>
 801fc38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801fc3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fc40:	4809      	ldr	r0, [pc, #36]	; (801fc68 <rcl_init+0x20c>)
 801fc42:	2401      	movs	r4, #1
 801fc44:	9600      	str	r6, [sp, #0]
 801fc46:	f000 fde3 	bl	8020810 <__atomic_store_8>
 801fc4a:	e79b      	b.n	801fb84 <rcl_init+0x128>
 801fc4c:	240a      	movs	r4, #10
 801fc4e:	e7a4      	b.n	801fb9a <rcl_init+0x13e>
 801fc50:	2401      	movs	r4, #1
 801fc52:	e797      	b.n	801fb84 <rcl_init+0x128>
 801fc54:	3024      	adds	r0, #36	; 0x24
 801fc56:	f003 f8bf 	bl	8022dd8 <rcl_get_default_domain_id>
 801fc5a:	4604      	mov	r4, r0
 801fc5c:	2800      	cmp	r0, #0
 801fc5e:	d191      	bne.n	801fb84 <rcl_init+0x128>
 801fc60:	683b      	ldr	r3, [r7, #0]
 801fc62:	6958      	ldr	r0, [r3, #20]
 801fc64:	e7bc      	b.n	801fbe0 <rcl_init+0x184>
 801fc66:	bf00      	nop
 801fc68:	200000b0 	.word	0x200000b0

0801fc6c <rcl_get_zero_initialized_init_options>:
 801fc6c:	2000      	movs	r0, #0
 801fc6e:	4770      	bx	lr

0801fc70 <rcl_init_options_init>:
 801fc70:	b084      	sub	sp, #16
 801fc72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fc76:	b097      	sub	sp, #92	; 0x5c
 801fc78:	ae1f      	add	r6, sp, #124	; 0x7c
 801fc7a:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 801fc7e:	2800      	cmp	r0, #0
 801fc80:	d04f      	beq.n	801fd22 <rcl_init_options_init+0xb2>
 801fc82:	6803      	ldr	r3, [r0, #0]
 801fc84:	4605      	mov	r5, r0
 801fc86:	b133      	cbz	r3, 801fc96 <rcl_init_options_init+0x26>
 801fc88:	2464      	movs	r4, #100	; 0x64
 801fc8a:	4620      	mov	r0, r4
 801fc8c:	b017      	add	sp, #92	; 0x5c
 801fc8e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fc92:	b004      	add	sp, #16
 801fc94:	4770      	bx	lr
 801fc96:	4630      	mov	r0, r6
 801fc98:	f7fb ff52 	bl	801bb40 <rcutils_allocator_is_valid>
 801fc9c:	2800      	cmp	r0, #0
 801fc9e:	d040      	beq.n	801fd22 <rcl_init_options_init+0xb2>
 801fca0:	4637      	mov	r7, r6
 801fca2:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 801fca6:	ac11      	add	r4, sp, #68	; 0x44
 801fca8:	f8dd 907c 	ldr.w	r9, [sp, #124]	; 0x7c
 801fcac:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801fcae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801fcb0:	4641      	mov	r1, r8
 801fcb2:	2050      	movs	r0, #80	; 0x50
 801fcb4:	47c8      	blx	r9
 801fcb6:	4604      	mov	r4, r0
 801fcb8:	6028      	str	r0, [r5, #0]
 801fcba:	2800      	cmp	r0, #0
 801fcbc:	d033      	beq.n	801fd26 <rcl_init_options_init+0xb6>
 801fcbe:	af11      	add	r7, sp, #68	; 0x44
 801fcc0:	4684      	mov	ip, r0
 801fcc2:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 801fcc6:	3418      	adds	r4, #24
 801fcc8:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
 801fccc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801fcce:	af02      	add	r7, sp, #8
 801fcd0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801fcd4:	a802      	add	r0, sp, #8
 801fcd6:	f8cc 8000 	str.w	r8, [ip]
 801fcda:	f001 f935 	bl	8020f48 <rmw_get_zero_initialized_init_options>
 801fcde:	f8d5 c000 	ldr.w	ip, [r5]
 801fce2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801fce4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801fce6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801fce8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801fcea:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801fcec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801fcee:	e897 0003 	ldmia.w	r7, {r0, r1}
 801fcf2:	e884 0003 	stmia.w	r4, {r0, r1}
 801fcf6:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 801fcfa:	e88d 0003 	stmia.w	sp, {r0, r1}
 801fcfe:	f10c 0018 	add.w	r0, ip, #24
 801fd02:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 801fd06:	f001 faaf 	bl	8021268 <rmw_init_options_init>
 801fd0a:	4604      	mov	r4, r0
 801fd0c:	2800      	cmp	r0, #0
 801fd0e:	d0bc      	beq.n	801fc8a <rcl_init_options_init+0x1a>
 801fd10:	6828      	ldr	r0, [r5, #0]
 801fd12:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fd14:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801fd16:	4798      	blx	r3
 801fd18:	4620      	mov	r0, r4
 801fd1a:	f7ff fdfd 	bl	801f918 <rcl_convert_rmw_ret_to_rcl_ret>
 801fd1e:	4604      	mov	r4, r0
 801fd20:	e7b3      	b.n	801fc8a <rcl_init_options_init+0x1a>
 801fd22:	240b      	movs	r4, #11
 801fd24:	e7b1      	b.n	801fc8a <rcl_init_options_init+0x1a>
 801fd26:	240a      	movs	r4, #10
 801fd28:	e7af      	b.n	801fc8a <rcl_init_options_init+0x1a>
 801fd2a:	bf00      	nop

0801fd2c <rcl_init_options_fini>:
 801fd2c:	b570      	push	{r4, r5, r6, lr}
 801fd2e:	b086      	sub	sp, #24
 801fd30:	b1c0      	cbz	r0, 801fd64 <rcl_init_options_fini+0x38>
 801fd32:	6804      	ldr	r4, [r0, #0]
 801fd34:	4606      	mov	r6, r0
 801fd36:	b1ac      	cbz	r4, 801fd64 <rcl_init_options_fini+0x38>
 801fd38:	ad01      	add	r5, sp, #4
 801fd3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801fd3c:	6824      	ldr	r4, [r4, #0]
 801fd3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801fd40:	a801      	add	r0, sp, #4
 801fd42:	602c      	str	r4, [r5, #0]
 801fd44:	f7fb fefc 	bl	801bb40 <rcutils_allocator_is_valid>
 801fd48:	b160      	cbz	r0, 801fd64 <rcl_init_options_fini+0x38>
 801fd4a:	6830      	ldr	r0, [r6, #0]
 801fd4c:	3018      	adds	r0, #24
 801fd4e:	f001 fb3f 	bl	80213d0 <rmw_init_options_fini>
 801fd52:	4604      	mov	r4, r0
 801fd54:	b950      	cbnz	r0, 801fd6c <rcl_init_options_fini+0x40>
 801fd56:	6830      	ldr	r0, [r6, #0]
 801fd58:	9b02      	ldr	r3, [sp, #8]
 801fd5a:	9905      	ldr	r1, [sp, #20]
 801fd5c:	4798      	blx	r3
 801fd5e:	4620      	mov	r0, r4
 801fd60:	b006      	add	sp, #24
 801fd62:	bd70      	pop	{r4, r5, r6, pc}
 801fd64:	240b      	movs	r4, #11
 801fd66:	4620      	mov	r0, r4
 801fd68:	b006      	add	sp, #24
 801fd6a:	bd70      	pop	{r4, r5, r6, pc}
 801fd6c:	f7ff fdd4 	bl	801f918 <rcl_convert_rmw_ret_to_rcl_ret>
 801fd70:	4604      	mov	r4, r0
 801fd72:	e7f8      	b.n	801fd66 <rcl_init_options_fini+0x3a>

0801fd74 <rcl_init_options_copy>:
 801fd74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fd78:	b095      	sub	sp, #84	; 0x54
 801fd7a:	2800      	cmp	r0, #0
 801fd7c:	d056      	beq.n	801fe2c <rcl_init_options_copy+0xb8>
 801fd7e:	4604      	mov	r4, r0
 801fd80:	6800      	ldr	r0, [r0, #0]
 801fd82:	2800      	cmp	r0, #0
 801fd84:	d052      	beq.n	801fe2c <rcl_init_options_copy+0xb8>
 801fd86:	460e      	mov	r6, r1
 801fd88:	f7fb feda 	bl	801bb40 <rcutils_allocator_is_valid>
 801fd8c:	2e00      	cmp	r6, #0
 801fd8e:	d04d      	beq.n	801fe2c <rcl_init_options_copy+0xb8>
 801fd90:	f080 0001 	eor.w	r0, r0, #1
 801fd94:	f010 0fff 	tst.w	r0, #255	; 0xff
 801fd98:	d148      	bne.n	801fe2c <rcl_init_options_copy+0xb8>
 801fd9a:	6833      	ldr	r3, [r6, #0]
 801fd9c:	b123      	cbz	r3, 801fda8 <rcl_init_options_copy+0x34>
 801fd9e:	2464      	movs	r4, #100	; 0x64
 801fda0:	4620      	mov	r0, r4
 801fda2:	b015      	add	sp, #84	; 0x54
 801fda4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fda8:	6823      	ldr	r3, [r4, #0]
 801fdaa:	af0f      	add	r7, sp, #60	; 0x3c
 801fdac:	461d      	mov	r5, r3
 801fdae:	f8d3 8010 	ldr.w	r8, [r3, #16]
 801fdb2:	f8d3 9000 	ldr.w	r9, [r3]
 801fdb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801fdb8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801fdba:	4641      	mov	r1, r8
 801fdbc:	2050      	movs	r0, #80	; 0x50
 801fdbe:	f8c7 8000 	str.w	r8, [r7]
 801fdc2:	47c8      	blx	r9
 801fdc4:	4605      	mov	r5, r0
 801fdc6:	6030      	str	r0, [r6, #0]
 801fdc8:	2800      	cmp	r0, #0
 801fdca:	d034      	beq.n	801fe36 <rcl_init_options_copy+0xc2>
 801fdcc:	af0f      	add	r7, sp, #60	; 0x3c
 801fdce:	4684      	mov	ip, r0
 801fdd0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 801fdd4:	3518      	adds	r5, #24
 801fdd6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 801fdda:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801fddc:	466f      	mov	r7, sp
 801fdde:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801fde2:	4668      	mov	r0, sp
 801fde4:	f8cc 8000 	str.w	r8, [ip]
 801fde8:	f001 f8ae 	bl	8020f48 <rmw_get_zero_initialized_init_options>
 801fdec:	f8d4 c000 	ldr.w	ip, [r4]
 801fdf0:	6834      	ldr	r4, [r6, #0]
 801fdf2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801fdf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801fdf6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801fdf8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801fdfa:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801fdfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801fdfe:	e897 0003 	ldmia.w	r7, {r0, r1}
 801fe02:	e885 0003 	stmia.w	r5, {r0, r1}
 801fe06:	f104 0118 	add.w	r1, r4, #24
 801fe0a:	f10c 0018 	add.w	r0, ip, #24
 801fe0e:	f001 fa97 	bl	8021340 <rmw_init_options_copy>
 801fe12:	4604      	mov	r4, r0
 801fe14:	2800      	cmp	r0, #0
 801fe16:	d0c3      	beq.n	801fda0 <rcl_init_options_copy+0x2c>
 801fe18:	f7fb fea0 	bl	801bb5c <rcutils_get_error_string>
 801fe1c:	f7fb feb4 	bl	801bb88 <rcutils_reset_error>
 801fe20:	4630      	mov	r0, r6
 801fe22:	f7ff ff83 	bl	801fd2c <rcl_init_options_fini>
 801fe26:	b140      	cbz	r0, 801fe3a <rcl_init_options_copy+0xc6>
 801fe28:	4604      	mov	r4, r0
 801fe2a:	e7b9      	b.n	801fda0 <rcl_init_options_copy+0x2c>
 801fe2c:	240b      	movs	r4, #11
 801fe2e:	4620      	mov	r0, r4
 801fe30:	b015      	add	sp, #84	; 0x54
 801fe32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fe36:	240a      	movs	r4, #10
 801fe38:	e7b2      	b.n	801fda0 <rcl_init_options_copy+0x2c>
 801fe3a:	4620      	mov	r0, r4
 801fe3c:	b015      	add	sp, #84	; 0x54
 801fe3e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fe42:	f7ff bd69 	b.w	801f918 <rcl_convert_rmw_ret_to_rcl_ret>
 801fe46:	bf00      	nop

0801fe48 <rcl_get_localhost_only>:
 801fe48:	b510      	push	{r4, lr}
 801fe4a:	2300      	movs	r3, #0
 801fe4c:	b082      	sub	sp, #8
 801fe4e:	9301      	str	r3, [sp, #4]
 801fe50:	b1b8      	cbz	r0, 801fe82 <rcl_get_localhost_only+0x3a>
 801fe52:	4604      	mov	r4, r0
 801fe54:	a901      	add	r1, sp, #4
 801fe56:	480c      	ldr	r0, [pc, #48]	; (801fe88 <rcl_get_localhost_only+0x40>)
 801fe58:	f000 fd94 	bl	8020984 <rcutils_get_env>
 801fe5c:	b110      	cbz	r0, 801fe64 <rcl_get_localhost_only+0x1c>
 801fe5e:	2001      	movs	r0, #1
 801fe60:	b002      	add	sp, #8
 801fe62:	bd10      	pop	{r4, pc}
 801fe64:	9b01      	ldr	r3, [sp, #4]
 801fe66:	b113      	cbz	r3, 801fe6e <rcl_get_localhost_only+0x26>
 801fe68:	781a      	ldrb	r2, [r3, #0]
 801fe6a:	2a31      	cmp	r2, #49	; 0x31
 801fe6c:	d004      	beq.n	801fe78 <rcl_get_localhost_only+0x30>
 801fe6e:	2302      	movs	r3, #2
 801fe70:	2000      	movs	r0, #0
 801fe72:	7023      	strb	r3, [r4, #0]
 801fe74:	b002      	add	sp, #8
 801fe76:	bd10      	pop	{r4, pc}
 801fe78:	785b      	ldrb	r3, [r3, #1]
 801fe7a:	2b00      	cmp	r3, #0
 801fe7c:	d1f7      	bne.n	801fe6e <rcl_get_localhost_only+0x26>
 801fe7e:	2301      	movs	r3, #1
 801fe80:	e7f6      	b.n	801fe70 <rcl_get_localhost_only+0x28>
 801fe82:	200b      	movs	r0, #11
 801fe84:	b002      	add	sp, #8
 801fe86:	bd10      	pop	{r4, pc}
 801fe88:	080295b4 	.word	0x080295b4

0801fe8c <rcl_get_zero_initialized_node>:
 801fe8c:	4a03      	ldr	r2, [pc, #12]	; (801fe9c <rcl_get_zero_initialized_node+0x10>)
 801fe8e:	4603      	mov	r3, r0
 801fe90:	e892 0003 	ldmia.w	r2, {r0, r1}
 801fe94:	e883 0003 	stmia.w	r3, {r0, r1}
 801fe98:	4618      	mov	r0, r3
 801fe9a:	4770      	bx	lr
 801fe9c:	080295dc 	.word	0x080295dc

0801fea0 <rcl_node_init>:
 801fea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fea4:	b0a9      	sub	sp, #164	; 0xa4
 801fea6:	4605      	mov	r5, r0
 801fea8:	460f      	mov	r7, r1
 801feaa:	4616      	mov	r6, r2
 801feac:	f8dd 90c8 	ldr.w	r9, [sp, #200]	; 0xc8
 801feb0:	a823      	add	r0, sp, #140	; 0x8c
 801feb2:	4698      	mov	r8, r3
 801feb4:	f003 f9a8 	bl	8023208 <rcl_guard_condition_get_default_options>
 801feb8:	f1b9 0f00 	cmp.w	r9, #0
 801febc:	f000 80f0 	beq.w	80200a0 <rcl_node_init+0x200>
 801fec0:	fab6 f486 	clz	r4, r6
 801fec4:	4648      	mov	r0, r9
 801fec6:	f7fb fe3b 	bl	801bb40 <rcutils_allocator_is_valid>
 801feca:	f080 0001 	eor.w	r0, r0, #1
 801fece:	0964      	lsrs	r4, r4, #5
 801fed0:	2d00      	cmp	r5, #0
 801fed2:	bf08      	it	eq
 801fed4:	2401      	moveq	r4, #1
 801fed6:	2f00      	cmp	r7, #0
 801fed8:	bf08      	it	eq
 801feda:	2401      	moveq	r4, #1
 801fedc:	4304      	orrs	r4, r0
 801fede:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 801fee2:	f040 80dd 	bne.w	80200a0 <rcl_node_init+0x200>
 801fee6:	f8d5 a004 	ldr.w	sl, [r5, #4]
 801feea:	f1ba 0f00 	cmp.w	sl, #0
 801feee:	f040 80fd 	bne.w	80200ec <rcl_node_init+0x24c>
 801fef2:	f1b8 0f00 	cmp.w	r8, #0
 801fef6:	f000 80d3 	beq.w	80200a0 <rcl_node_init+0x200>
 801fefa:	4640      	mov	r0, r8
 801fefc:	f7ff fd30 	bl	801f960 <rcl_context_is_valid>
 801ff00:	4683      	mov	fp, r0
 801ff02:	2800      	cmp	r0, #0
 801ff04:	f000 80d2 	beq.w	80200ac <rcl_node_init+0x20c>
 801ff08:	4652      	mov	r2, sl
 801ff0a:	4638      	mov	r0, r7
 801ff0c:	a922      	add	r1, sp, #136	; 0x88
 801ff0e:	f8cd a088 	str.w	sl, [sp, #136]	; 0x88
 801ff12:	f001 f923 	bl	802115c <rmw_validate_node_name>
 801ff16:	4682      	mov	sl, r0
 801ff18:	2800      	cmp	r0, #0
 801ff1a:	f040 80c3 	bne.w	80200a4 <rcl_node_init+0x204>
 801ff1e:	9822      	ldr	r0, [sp, #136]	; 0x88
 801ff20:	2800      	cmp	r0, #0
 801ff22:	f040 80f1 	bne.w	8020108 <rcl_node_init+0x268>
 801ff26:	4630      	mov	r0, r6
 801ff28:	f7e0 f97c 	bl	8000224 <strlen>
 801ff2c:	2800      	cmp	r0, #0
 801ff2e:	f040 80c0 	bne.w	80200b2 <rcl_node_init+0x212>
 801ff32:	4e79      	ldr	r6, [pc, #484]	; (8020118 <rcl_node_init+0x278>)
 801ff34:	a922      	add	r1, sp, #136	; 0x88
 801ff36:	2200      	movs	r2, #0
 801ff38:	4630      	mov	r0, r6
 801ff3a:	f001 f8f1 	bl	8021120 <rmw_validate_namespace>
 801ff3e:	4682      	mov	sl, r0
 801ff40:	2800      	cmp	r0, #0
 801ff42:	f040 80af 	bne.w	80200a4 <rcl_node_init+0x204>
 801ff46:	9822      	ldr	r0, [sp, #136]	; 0x88
 801ff48:	2800      	cmp	r0, #0
 801ff4a:	f040 80d5 	bne.w	80200f8 <rcl_node_init+0x258>
 801ff4e:	f8d9 3000 	ldr.w	r3, [r9]
 801ff52:	2078      	movs	r0, #120	; 0x78
 801ff54:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801ff58:	4798      	blx	r3
 801ff5a:	4682      	mov	sl, r0
 801ff5c:	6068      	str	r0, [r5, #4]
 801ff5e:	2800      	cmp	r0, #0
 801ff60:	f000 80cf 	beq.w	8020102 <rcl_node_init+0x262>
 801ff64:	2200      	movs	r2, #0
 801ff66:	2300      	movs	r3, #0
 801ff68:	e9c0 231a 	strd	r2, r3, [r0, #104]	; 0x68
 801ff6c:	e9c0 231c 	strd	r2, r3, [r0, #112]	; 0x70
 801ff70:	a808      	add	r0, sp, #32
 801ff72:	f000 f901 	bl	8020178 <rcl_node_get_default_options>
 801ff76:	a908      	add	r1, sp, #32
 801ff78:	4650      	mov	r0, sl
 801ff7a:	2268      	movs	r2, #104	; 0x68
 801ff7c:	f003 fd0a 	bl	8023994 <memcpy>
 801ff80:	6869      	ldr	r1, [r5, #4]
 801ff82:	4648      	mov	r0, r9
 801ff84:	f8c5 8000 	str.w	r8, [r5]
 801ff88:	f000 f904 	bl	8020194 <rcl_node_options_copy>
 801ff8c:	2800      	cmp	r0, #0
 801ff8e:	d159      	bne.n	8020044 <rcl_node_init+0x1a4>
 801ff90:	4630      	mov	r0, r6
 801ff92:	f7e0 f947 	bl	8000224 <strlen>
 801ff96:	4430      	add	r0, r6
 801ff98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801ff9c:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 801ffa0:	2b2f      	cmp	r3, #47	; 0x2f
 801ffa2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801ffa6:	bf0c      	ite	eq
 801ffa8:	495c      	ldreq	r1, [pc, #368]	; (802011c <rcl_node_init+0x27c>)
 801ffaa:	495d      	ldrne	r1, [pc, #372]	; (8020120 <rcl_node_init+0x280>)
 801ffac:	9300      	str	r3, [sp, #0]
 801ffae:	e9cd 6703 	strd	r6, r7, [sp, #12]
 801ffb2:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801ffb6:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
 801ffba:	f8d5 a004 	ldr.w	sl, [r5, #4]
 801ffbe:	f000 fca7 	bl	8020910 <rcutils_format_string_limit>
 801ffc2:	682b      	ldr	r3, [r5, #0]
 801ffc4:	4639      	mov	r1, r7
 801ffc6:	f8ca 0074 	str.w	r0, [sl, #116]	; 0x74
 801ffca:	4632      	mov	r2, r6
 801ffcc:	6818      	ldr	r0, [r3, #0]
 801ffce:	686f      	ldr	r7, [r5, #4]
 801ffd0:	3028      	adds	r0, #40	; 0x28
 801ffd2:	f001 fc89 	bl	80218e8 <rmw_create_node>
 801ffd6:	686b      	ldr	r3, [r5, #4]
 801ffd8:	66b8      	str	r0, [r7, #104]	; 0x68
 801ffda:	6e98      	ldr	r0, [r3, #104]	; 0x68
 801ffdc:	2800      	cmp	r0, #0
 801ffde:	d033      	beq.n	8020048 <rcl_node_init+0x1a8>
 801ffe0:	f001 fd0a 	bl	80219f8 <rmw_node_get_graph_guard_condition>
 801ffe4:	4682      	mov	sl, r0
 801ffe6:	b368      	cbz	r0, 8020044 <rcl_node_init+0x1a4>
 801ffe8:	f8d9 3000 	ldr.w	r3, [r9]
 801ffec:	2008      	movs	r0, #8
 801ffee:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801fff2:	686f      	ldr	r7, [r5, #4]
 801fff4:	4798      	blx	r3
 801fff6:	686b      	ldr	r3, [r5, #4]
 801fff8:	66f8      	str	r0, [r7, #108]	; 0x6c
 801fffa:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 801fffe:	f1bb 0f00 	cmp.w	fp, #0
 8020002:	d021      	beq.n	8020048 <rcl_node_init+0x1a8>
 8020004:	a806      	add	r0, sp, #24
 8020006:	af23      	add	r7, sp, #140	; 0x8c
 8020008:	f003 f87a 	bl	8023100 <rcl_get_zero_initialized_guard_condition>
 802000c:	a806      	add	r0, sp, #24
 802000e:	686b      	ldr	r3, [r5, #4]
 8020010:	46cc      	mov	ip, r9
 8020012:	c803      	ldmia	r0, {r0, r1}
 8020014:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 8020018:	e88b 0003 	stmia.w	fp, {r0, r1}
 802001c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8020020:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8020022:	f8dc c000 	ldr.w	ip, [ip]
 8020026:	ab28      	add	r3, sp, #160	; 0xa0
 8020028:	f8c7 c000 	str.w	ip, [r7]
 802002c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8020030:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8020034:	4651      	mov	r1, sl
 8020036:	4670      	mov	r0, lr
 8020038:	4642      	mov	r2, r8
 802003a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802003c:	f003 f86a 	bl	8023114 <rcl_guard_condition_init_from_rmw>
 8020040:	4682      	mov	sl, r0
 8020042:	b328      	cbz	r0, 8020090 <rcl_node_init+0x1f0>
 8020044:	686b      	ldr	r3, [r5, #4]
 8020046:	b1f3      	cbz	r3, 8020086 <rcl_node_init+0x1e6>
 8020048:	6f58      	ldr	r0, [r3, #116]	; 0x74
 802004a:	b128      	cbz	r0, 8020058 <rcl_node_init+0x1b8>
 802004c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8020050:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8020054:	4798      	blx	r3
 8020056:	686b      	ldr	r3, [r5, #4]
 8020058:	6e98      	ldr	r0, [r3, #104]	; 0x68
 802005a:	b110      	cbz	r0, 8020062 <rcl_node_init+0x1c2>
 802005c:	f001 fc52 	bl	8021904 <rmw_destroy_node>
 8020060:	686b      	ldr	r3, [r5, #4]
 8020062:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8020064:	b148      	cbz	r0, 802007a <rcl_node_init+0x1da>
 8020066:	f003 f8a9 	bl	80231bc <rcl_guard_condition_fini>
 802006a:	686a      	ldr	r2, [r5, #4]
 802006c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8020070:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8020072:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8020076:	4798      	blx	r3
 8020078:	686b      	ldr	r3, [r5, #4]
 802007a:	4618      	mov	r0, r3
 802007c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8020080:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8020084:	4798      	blx	r3
 8020086:	2300      	movs	r3, #0
 8020088:	f04f 0a01 	mov.w	sl, #1
 802008c:	e9c5 3300 	strd	r3, r3, [r5]
 8020090:	b144      	cbz	r4, 80200a4 <rcl_node_init+0x204>
 8020092:	4630      	mov	r0, r6
 8020094:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8020098:	f8d9 1010 	ldr.w	r1, [r9, #16]
 802009c:	4798      	blx	r3
 802009e:	e001      	b.n	80200a4 <rcl_node_init+0x204>
 80200a0:	f04f 0a0b 	mov.w	sl, #11
 80200a4:	4650      	mov	r0, sl
 80200a6:	b029      	add	sp, #164	; 0xa4
 80200a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80200ac:	f04f 0a65 	mov.w	sl, #101	; 0x65
 80200b0:	e7f8      	b.n	80200a4 <rcl_node_init+0x204>
 80200b2:	7833      	ldrb	r3, [r6, #0]
 80200b4:	2b2f      	cmp	r3, #47	; 0x2f
 80200b6:	f43f af3d 	beq.w	801ff34 <rcl_node_init+0x94>
 80200ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80200be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80200c2:	4918      	ldr	r1, [pc, #96]	; (8020124 <rcl_node_init+0x284>)
 80200c4:	e9cd 3200 	strd	r3, r2, [sp]
 80200c8:	e9cd 1602 	strd	r1, r6, [sp, #8]
 80200cc:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
 80200d0:	f000 fc1e 	bl	8020910 <rcutils_format_string_limit>
 80200d4:	4606      	mov	r6, r0
 80200d6:	b1e0      	cbz	r0, 8020112 <rcl_node_init+0x272>
 80200d8:	2200      	movs	r2, #0
 80200da:	a922      	add	r1, sp, #136	; 0x88
 80200dc:	9222      	str	r2, [sp, #136]	; 0x88
 80200de:	f001 f81f 	bl	8021120 <rmw_validate_namespace>
 80200e2:	4682      	mov	sl, r0
 80200e4:	2800      	cmp	r0, #0
 80200e6:	d1d4      	bne.n	8020092 <rcl_node_init+0x1f2>
 80200e8:	465c      	mov	r4, fp
 80200ea:	e72c      	b.n	801ff46 <rcl_node_init+0xa6>
 80200ec:	f04f 0a64 	mov.w	sl, #100	; 0x64
 80200f0:	4650      	mov	r0, sl
 80200f2:	b029      	add	sp, #164	; 0xa4
 80200f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80200f8:	f04f 0aca 	mov.w	sl, #202	; 0xca
 80200fc:	f001 f822 	bl	8021144 <rmw_namespace_validation_result_string>
 8020100:	e7c6      	b.n	8020090 <rcl_node_init+0x1f0>
 8020102:	f04f 0a0a 	mov.w	sl, #10
 8020106:	e7c3      	b.n	8020090 <rcl_node_init+0x1f0>
 8020108:	f04f 0ac9 	mov.w	sl, #201	; 0xc9
 802010c:	f001 f876 	bl	80211fc <rmw_node_name_validation_result_string>
 8020110:	e7c8      	b.n	80200a4 <rcl_node_init+0x204>
 8020112:	f04f 0a0a 	mov.w	sl, #10
 8020116:	e7c5      	b.n	80200a4 <rcl_node_init+0x204>
 8020118:	080295cc 	.word	0x080295cc
 802011c:	08029458 	.word	0x08029458
 8020120:	080295d4 	.word	0x080295d4
 8020124:	080295d0 	.word	0x080295d0

08020128 <rcl_node_is_valid>:
 8020128:	b130      	cbz	r0, 8020138 <rcl_node_is_valid+0x10>
 802012a:	6843      	ldr	r3, [r0, #4]
 802012c:	b123      	cbz	r3, 8020138 <rcl_node_is_valid+0x10>
 802012e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8020130:	b113      	cbz	r3, 8020138 <rcl_node_is_valid+0x10>
 8020132:	6800      	ldr	r0, [r0, #0]
 8020134:	f7ff bc14 	b.w	801f960 <rcl_context_is_valid>
 8020138:	2000      	movs	r0, #0
 802013a:	4770      	bx	lr

0802013c <rcl_node_get_name>:
 802013c:	b120      	cbz	r0, 8020148 <rcl_node_get_name+0xc>
 802013e:	6840      	ldr	r0, [r0, #4]
 8020140:	b110      	cbz	r0, 8020148 <rcl_node_get_name+0xc>
 8020142:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8020144:	b100      	cbz	r0, 8020148 <rcl_node_get_name+0xc>
 8020146:	6880      	ldr	r0, [r0, #8]
 8020148:	4770      	bx	lr
 802014a:	bf00      	nop

0802014c <rcl_node_get_namespace>:
 802014c:	b120      	cbz	r0, 8020158 <rcl_node_get_namespace+0xc>
 802014e:	6840      	ldr	r0, [r0, #4]
 8020150:	b110      	cbz	r0, 8020158 <rcl_node_get_namespace+0xc>
 8020152:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8020154:	b100      	cbz	r0, 8020158 <rcl_node_get_namespace+0xc>
 8020156:	68c0      	ldr	r0, [r0, #12]
 8020158:	4770      	bx	lr
 802015a:	bf00      	nop

0802015c <rcl_node_get_options>:
 802015c:	b128      	cbz	r0, 802016a <rcl_node_get_options+0xe>
 802015e:	6840      	ldr	r0, [r0, #4]
 8020160:	b118      	cbz	r0, 802016a <rcl_node_get_options+0xe>
 8020162:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8020164:	2b00      	cmp	r3, #0
 8020166:	bf08      	it	eq
 8020168:	2000      	moveq	r0, #0
 802016a:	4770      	bx	lr

0802016c <rcl_node_get_rmw_handle>:
 802016c:	b110      	cbz	r0, 8020174 <rcl_node_get_rmw_handle+0x8>
 802016e:	6840      	ldr	r0, [r0, #4]
 8020170:	b100      	cbz	r0, 8020174 <rcl_node_get_rmw_handle+0x8>
 8020172:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8020174:	4770      	bx	lr
 8020176:	bf00      	nop

08020178 <rcl_node_get_default_options>:
 8020178:	b510      	push	{r4, lr}
 802017a:	4604      	mov	r4, r0
 802017c:	2268      	movs	r2, #104	; 0x68
 802017e:	2100      	movs	r1, #0
 8020180:	f003 fc30 	bl	80239e4 <memset>
 8020184:	4620      	mov	r0, r4
 8020186:	f7fb fccd 	bl	801bb24 <rcutils_get_default_allocator>
 802018a:	2301      	movs	r3, #1
 802018c:	4620      	mov	r0, r4
 802018e:	7523      	strb	r3, [r4, #20]
 8020190:	bd10      	pop	{r4, pc}
 8020192:	bf00      	nop

08020194 <rcl_node_options_copy>:
 8020194:	2800      	cmp	r0, #0
 8020196:	bf18      	it	ne
 8020198:	4288      	cmpne	r0, r1
 802019a:	d021      	beq.n	80201e0 <rcl_node_options_copy+0x4c>
 802019c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80201a0:	fab1 f881 	clz	r8, r1
 80201a4:	460c      	mov	r4, r1
 80201a6:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80201aa:	b1b1      	cbz	r1, 80201da <rcl_node_options_copy+0x46>
 80201ac:	4607      	mov	r7, r0
 80201ae:	f890 c014 	ldrb.w	ip, [r0, #20]
 80201b2:	4605      	mov	r5, r0
 80201b4:	460e      	mov	r6, r1
 80201b6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80201b8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80201ba:	7d6b      	ldrb	r3, [r5, #21]
 80201bc:	f105 0118 	add.w	r1, r5, #24
 80201c0:	683d      	ldr	r5, [r7, #0]
 80201c2:	f104 0018 	add.w	r0, r4, #24
 80201c6:	2250      	movs	r2, #80	; 0x50
 80201c8:	6035      	str	r5, [r6, #0]
 80201ca:	f884 c014 	strb.w	ip, [r4, #20]
 80201ce:	7563      	strb	r3, [r4, #21]
 80201d0:	f003 fbe0 	bl	8023994 <memcpy>
 80201d4:	4640      	mov	r0, r8
 80201d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80201da:	200b      	movs	r0, #11
 80201dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80201e0:	200b      	movs	r0, #11
 80201e2:	4770      	bx	lr

080201e4 <rcl_node_resolve_name>:
 80201e4:	b082      	sub	sp, #8
 80201e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201ea:	b091      	sub	sp, #68	; 0x44
 80201ec:	460c      	mov	r4, r1
 80201ee:	a91a      	add	r1, sp, #104	; 0x68
 80201f0:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 80201f4:	e881 000c 	stmia.w	r1, {r2, r3}
 80201f8:	2800      	cmp	r0, #0
 80201fa:	d03d      	beq.n	8020278 <rcl_node_resolve_name+0x94>
 80201fc:	4607      	mov	r7, r0
 80201fe:	f7ff ffad 	bl	802015c <rcl_node_get_options>
 8020202:	2800      	cmp	r0, #0
 8020204:	d03b      	beq.n	802027e <rcl_node_resolve_name+0x9a>
 8020206:	4638      	mov	r0, r7
 8020208:	ad0b      	add	r5, sp, #44	; 0x2c
 802020a:	f7ff ff97 	bl	802013c <rcl_node_get_name>
 802020e:	4606      	mov	r6, r0
 8020210:	4638      	mov	r0, r7
 8020212:	f7ff ff9b 	bl	802014c <rcl_node_get_namespace>
 8020216:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 802021a:	46ac      	mov	ip, r5
 802021c:	4607      	mov	r7, r0
 802021e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8020222:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8020226:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020228:	b333      	cbz	r3, 8020278 <rcl_node_resolve_name+0x94>
 802022a:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 802022e:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 8020232:	f000 fcf7 	bl	8020c24 <rcutils_get_zero_initialized_string_map>
 8020236:	ab10      	add	r3, sp, #64	; 0x40
 8020238:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 802023c:	9008      	str	r0, [sp, #32]
 802023e:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8020242:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8020246:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 802024a:	a808      	add	r0, sp, #32
 802024c:	2100      	movs	r1, #0
 802024e:	e895 000c 	ldmia.w	r5, {r2, r3}
 8020252:	f000 fd61 	bl	8020d18 <rcutils_string_map_init>
 8020256:	4683      	mov	fp, r0
 8020258:	b1a0      	cbz	r0, 8020284 <rcl_node_resolve_name+0xa0>
 802025a:	f7fb fc7f 	bl	801bb5c <rcutils_get_error_string>
 802025e:	f7fb fc93 	bl	801bb88 <rcutils_reset_error>
 8020262:	f1bb 0f0a 	cmp.w	fp, #10
 8020266:	bf18      	it	ne
 8020268:	f04f 0b01 	movne.w	fp, #1
 802026c:	4658      	mov	r0, fp
 802026e:	b011      	add	sp, #68	; 0x44
 8020270:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020274:	b002      	add	sp, #8
 8020276:	4770      	bx	lr
 8020278:	f04f 0b0b 	mov.w	fp, #11
 802027c:	e7f6      	b.n	802026c <rcl_node_resolve_name+0x88>
 802027e:	f04f 0b01 	mov.w	fp, #1
 8020282:	e7f3      	b.n	802026c <rcl_node_resolve_name+0x88>
 8020284:	a808      	add	r0, sp, #32
 8020286:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 802028a:	f002 ff33 	bl	80230f4 <rcl_get_default_topic_name_substitutions>
 802028e:	f8cd b01c 	str.w	fp, [sp, #28]
 8020292:	4683      	mov	fp, r0
 8020294:	b180      	cbz	r0, 80202b8 <rcl_node_resolve_name+0xd4>
 8020296:	280a      	cmp	r0, #10
 8020298:	a808      	add	r0, sp, #32
 802029a:	bf18      	it	ne
 802029c:	f04f 0b01 	movne.w	fp, #1
 80202a0:	f000 fd78 	bl	8020d94 <rcutils_string_map_fini>
 80202a4:	4604      	mov	r4, r0
 80202a6:	2800      	cmp	r0, #0
 80202a8:	d15b      	bne.n	8020362 <rcl_node_resolve_name+0x17e>
 80202aa:	4651      	mov	r1, sl
 80202ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80202ae:	47c8      	blx	r9
 80202b0:	4651      	mov	r1, sl
 80202b2:	4620      	mov	r0, r4
 80202b4:	47c8      	blx	r9
 80202b6:	e7d9      	b.n	802026c <rcl_node_resolve_name+0x88>
 80202b8:	ab09      	add	r3, sp, #36	; 0x24
 80202ba:	46ec      	mov	ip, sp
 80202bc:	9305      	str	r3, [sp, #20]
 80202be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80202c0:	682d      	ldr	r5, [r5, #0]
 80202c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80202c6:	463a      	mov	r2, r7
 80202c8:	4631      	mov	r1, r6
 80202ca:	4620      	mov	r0, r4
 80202cc:	ab08      	add	r3, sp, #32
 80202ce:	f8cc 5000 	str.w	r5, [ip]
 80202d2:	f002 fdb3 	bl	8022e3c <rcl_expand_topic_name>
 80202d6:	4683      	mov	fp, r0
 80202d8:	b9d8      	cbnz	r0, 8020312 <rcl_node_resolve_name+0x12e>
 80202da:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80202dc:	4602      	mov	r2, r0
 80202de:	9009      	str	r0, [sp, #36]	; 0x24
 80202e0:	a90a      	add	r1, sp, #40	; 0x28
 80202e2:	4620      	mov	r0, r4
 80202e4:	f000 fe44 	bl	8020f70 <rmw_validate_full_topic_name>
 80202e8:	bb50      	cbnz	r0, 8020340 <rcl_node_resolve_name+0x15c>
 80202ea:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80202ec:	2d00      	cmp	r5, #0
 80202ee:	d140      	bne.n	8020372 <rcl_node_resolve_name+0x18e>
 80202f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80202f2:	a808      	add	r0, sp, #32
 80202f4:	601c      	str	r4, [r3, #0]
 80202f6:	f000 fd4d 	bl	8020d94 <rcutils_string_map_fini>
 80202fa:	4683      	mov	fp, r0
 80202fc:	2800      	cmp	r0, #0
 80202fe:	d043      	beq.n	8020388 <rcl_node_resolve_name+0x1a4>
 8020300:	f7fb fc2c 	bl	801bb5c <rcutils_get_error_string>
 8020304:	46a8      	mov	r8, r5
 8020306:	f04f 0b01 	mov.w	fp, #1
 802030a:	462c      	mov	r4, r5
 802030c:	f7fb fc3c 	bl	801bb88 <rcutils_reset_error>
 8020310:	e00a      	b.n	8020328 <rcl_node_resolve_name+0x144>
 8020312:	2867      	cmp	r0, #103	; 0x67
 8020314:	bf14      	ite	ne
 8020316:	f04f 0800 	movne.w	r8, #0
 802031a:	f008 0801 	andeq.w	r8, r8, #1
 802031e:	9c07      	ldr	r4, [sp, #28]
 8020320:	a808      	add	r0, sp, #32
 8020322:	f000 fd37 	bl	8020d94 <rcutils_string_map_fini>
 8020326:	bb50      	cbnz	r0, 802037e <rcl_node_resolve_name+0x19a>
 8020328:	4651      	mov	r1, sl
 802032a:	9809      	ldr	r0, [sp, #36]	; 0x24
 802032c:	47c8      	blx	r9
 802032e:	4651      	mov	r1, sl
 8020330:	4620      	mov	r0, r4
 8020332:	47c8      	blx	r9
 8020334:	f1b8 0f00 	cmp.w	r8, #0
 8020338:	bf18      	it	ne
 802033a:	f04f 0b68 	movne.w	fp, #104	; 0x68
 802033e:	e795      	b.n	802026c <rcl_node_resolve_name+0x88>
 8020340:	f7fb fc0c 	bl	801bb5c <rcutils_get_error_string>
 8020344:	f7fb fc20 	bl	801bb88 <rcutils_reset_error>
 8020348:	a808      	add	r0, sp, #32
 802034a:	f000 fd23 	bl	8020d94 <rcutils_string_map_fini>
 802034e:	b998      	cbnz	r0, 8020378 <rcl_node_resolve_name+0x194>
 8020350:	4651      	mov	r1, sl
 8020352:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020354:	47c8      	blx	r9
 8020356:	4651      	mov	r1, sl
 8020358:	4620      	mov	r0, r4
 802035a:	f04f 0b01 	mov.w	fp, #1
 802035e:	47c8      	blx	r9
 8020360:	e784      	b.n	802026c <rcl_node_resolve_name+0x88>
 8020362:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8020366:	f7fb fbf9 	bl	801bb5c <rcutils_get_error_string>
 802036a:	f7fb fc0d 	bl	801bb88 <rcutils_reset_error>
 802036e:	4644      	mov	r4, r8
 8020370:	e7da      	b.n	8020328 <rcl_node_resolve_name+0x144>
 8020372:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8020376:	e7d3      	b.n	8020320 <rcl_node_resolve_name+0x13c>
 8020378:	46d8      	mov	r8, fp
 802037a:	f04f 0b01 	mov.w	fp, #1
 802037e:	f7fb fbed 	bl	801bb5c <rcutils_get_error_string>
 8020382:	f7fb fc01 	bl	801bb88 <rcutils_reset_error>
 8020386:	e7cf      	b.n	8020328 <rcl_node_resolve_name+0x144>
 8020388:	4651      	mov	r1, sl
 802038a:	9809      	ldr	r0, [sp, #36]	; 0x24
 802038c:	47c8      	blx	r9
 802038e:	4651      	mov	r1, sl
 8020390:	4658      	mov	r0, fp
 8020392:	47c8      	blx	r9
 8020394:	e76a      	b.n	802026c <rcl_node_resolve_name+0x88>
 8020396:	bf00      	nop

08020398 <exact_match_lookup>:
 8020398:	b5f0      	push	{r4, r5, r6, r7, lr}
 802039a:	f102 0608 	add.w	r6, r2, #8
 802039e:	460b      	mov	r3, r1
 80203a0:	b085      	sub	sp, #20
 80203a2:	4614      	mov	r4, r2
 80203a4:	4607      	mov	r7, r0
 80203a6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80203aa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80203ae:	4618      	mov	r0, r3
 80203b0:	4918      	ldr	r1, [pc, #96]	; (8020414 <exact_match_lookup+0x7c>)
 80203b2:	e894 000c 	ldmia.w	r4, {r2, r3}
 80203b6:	f000 fa9b 	bl	80208f0 <rcutils_join_path>
 80203ba:	783b      	ldrb	r3, [r7, #0]
 80203bc:	4605      	mov	r5, r0
 80203be:	2b2f      	cmp	r3, #47	; 0x2f
 80203c0:	d022      	beq.n	8020408 <exact_match_lookup+0x70>
 80203c2:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 80203c6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80203ca:	1c78      	adds	r0, r7, #1
 80203cc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80203d0:	f000 fa94 	bl	80208fc <rcutils_to_native_path>
 80203d4:	4603      	mov	r3, r0
 80203d6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80203da:	461e      	mov	r6, r3
 80203dc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80203e0:	4619      	mov	r1, r3
 80203e2:	4628      	mov	r0, r5
 80203e4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80203e8:	f000 fa82 	bl	80208f0 <rcutils_join_path>
 80203ec:	4603      	mov	r3, r0
 80203ee:	4630      	mov	r0, r6
 80203f0:	6862      	ldr	r2, [r4, #4]
 80203f2:	461e      	mov	r6, r3
 80203f4:	6921      	ldr	r1, [r4, #16]
 80203f6:	4790      	blx	r2
 80203f8:	4628      	mov	r0, r5
 80203fa:	4635      	mov	r5, r6
 80203fc:	6863      	ldr	r3, [r4, #4]
 80203fe:	6921      	ldr	r1, [r4, #16]
 8020400:	4798      	blx	r3
 8020402:	4628      	mov	r0, r5
 8020404:	b005      	add	sp, #20
 8020406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020408:	787b      	ldrb	r3, [r7, #1]
 802040a:	2b00      	cmp	r3, #0
 802040c:	d1d9      	bne.n	80203c2 <exact_match_lookup+0x2a>
 802040e:	4628      	mov	r0, r5
 8020410:	b005      	add	sp, #20
 8020412:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020414:	08029620 	.word	0x08029620

08020418 <rcl_get_secure_root>:
 8020418:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802041c:	b085      	sub	sp, #20
 802041e:	b168      	cbz	r0, 802043c <rcl_get_secure_root+0x24>
 8020420:	4607      	mov	r7, r0
 8020422:	4608      	mov	r0, r1
 8020424:	460c      	mov	r4, r1
 8020426:	f7fb fb8b 	bl	801bb40 <rcutils_allocator_is_valid>
 802042a:	b138      	cbz	r0, 802043c <rcl_get_secure_root+0x24>
 802042c:	2300      	movs	r3, #0
 802042e:	482d      	ldr	r0, [pc, #180]	; (80204e4 <rcl_get_secure_root+0xcc>)
 8020430:	a903      	add	r1, sp, #12
 8020432:	9303      	str	r3, [sp, #12]
 8020434:	f000 faa6 	bl	8020984 <rcutils_get_env>
 8020438:	4605      	mov	r5, r0
 802043a:	b120      	cbz	r0, 8020446 <rcl_get_secure_root+0x2e>
 802043c:	2500      	movs	r5, #0
 802043e:	4628      	mov	r0, r5
 8020440:	b005      	add	sp, #20
 8020442:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020446:	9b03      	ldr	r3, [sp, #12]
 8020448:	781a      	ldrb	r2, [r3, #0]
 802044a:	2a00      	cmp	r2, #0
 802044c:	d0f6      	beq.n	802043c <rcl_get_secure_root+0x24>
 802044e:	f104 090c 	add.w	r9, r4, #12
 8020452:	e899 0003 	ldmia.w	r9, {r0, r1}
 8020456:	e88d 0003 	stmia.w	sp, {r0, r1}
 802045a:	4618      	mov	r0, r3
 802045c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8020460:	f000 fba2 	bl	8020ba8 <rcutils_strdup>
 8020464:	4680      	mov	r8, r0
 8020466:	2800      	cmp	r0, #0
 8020468:	d0e8      	beq.n	802043c <rcl_get_secure_root+0x24>
 802046a:	a903      	add	r1, sp, #12
 802046c:	481e      	ldr	r0, [pc, #120]	; (80204e8 <rcl_get_secure_root+0xd0>)
 802046e:	9503      	str	r5, [sp, #12]
 8020470:	f000 fa88 	bl	8020984 <rcutils_get_env>
 8020474:	b160      	cbz	r0, 8020490 <rcl_get_secure_root+0x78>
 8020476:	2600      	movs	r6, #0
 8020478:	4630      	mov	r0, r6
 802047a:	6863      	ldr	r3, [r4, #4]
 802047c:	6921      	ldr	r1, [r4, #16]
 802047e:	4798      	blx	r3
 8020480:	4640      	mov	r0, r8
 8020482:	6863      	ldr	r3, [r4, #4]
 8020484:	6921      	ldr	r1, [r4, #16]
 8020486:	4798      	blx	r3
 8020488:	4628      	mov	r0, r5
 802048a:	b005      	add	sp, #20
 802048c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020490:	9b03      	ldr	r3, [sp, #12]
 8020492:	781e      	ldrb	r6, [r3, #0]
 8020494:	b1f6      	cbz	r6, 80204d4 <rcl_get_secure_root+0xbc>
 8020496:	e899 0003 	ldmia.w	r9, {r0, r1}
 802049a:	e88d 0003 	stmia.w	sp, {r0, r1}
 802049e:	4618      	mov	r0, r3
 80204a0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80204a4:	f000 fb80 	bl	8020ba8 <rcutils_strdup>
 80204a8:	4606      	mov	r6, r0
 80204aa:	2800      	cmp	r0, #0
 80204ac:	d0e3      	beq.n	8020476 <rcl_get_secure_root+0x5e>
 80204ae:	4622      	mov	r2, r4
 80204b0:	4641      	mov	r1, r8
 80204b2:	f7ff ff71 	bl	8020398 <exact_match_lookup>
 80204b6:	4605      	mov	r5, r0
 80204b8:	2d00      	cmp	r5, #0
 80204ba:	d0dd      	beq.n	8020478 <rcl_get_secure_root+0x60>
 80204bc:	4628      	mov	r0, r5
 80204be:	f000 fa15 	bl	80208ec <rcutils_is_directory>
 80204c2:	4603      	mov	r3, r0
 80204c4:	2800      	cmp	r0, #0
 80204c6:	d1d7      	bne.n	8020478 <rcl_get_secure_root+0x60>
 80204c8:	4628      	mov	r0, r5
 80204ca:	6921      	ldr	r1, [r4, #16]
 80204cc:	461d      	mov	r5, r3
 80204ce:	6863      	ldr	r3, [r4, #4]
 80204d0:	4798      	blx	r3
 80204d2:	e7d1      	b.n	8020478 <rcl_get_secure_root+0x60>
 80204d4:	4638      	mov	r0, r7
 80204d6:	4622      	mov	r2, r4
 80204d8:	4641      	mov	r1, r8
 80204da:	f7ff ff5d 	bl	8020398 <exact_match_lookup>
 80204de:	4605      	mov	r5, r0
 80204e0:	e7ea      	b.n	80204b8 <rcl_get_secure_root+0xa0>
 80204e2:	bf00      	nop
 80204e4:	0802962c 	.word	0x0802962c
 80204e8:	08029644 	.word	0x08029644

080204ec <rcl_get_security_options_from_environment>:
 80204ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80204f0:	b082      	sub	sp, #8
 80204f2:	2300      	movs	r3, #0
 80204f4:	4606      	mov	r6, r0
 80204f6:	460f      	mov	r7, r1
 80204f8:	4821      	ldr	r0, [pc, #132]	; (8020580 <rcl_get_security_options_from_environment+0x94>)
 80204fa:	a901      	add	r1, sp, #4
 80204fc:	4690      	mov	r8, r2
 80204fe:	9301      	str	r3, [sp, #4]
 8020500:	f000 fa40 	bl	8020984 <rcutils_get_env>
 8020504:	b120      	cbz	r0, 8020510 <rcl_get_security_options_from_environment+0x24>
 8020506:	2501      	movs	r5, #1
 8020508:	4628      	mov	r0, r5
 802050a:	b002      	add	sp, #8
 802050c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020510:	4604      	mov	r4, r0
 8020512:	491c      	ldr	r1, [pc, #112]	; (8020584 <rcl_get_security_options_from_environment+0x98>)
 8020514:	9801      	ldr	r0, [sp, #4]
 8020516:	f7df fe7b 	bl	8000210 <strcmp>
 802051a:	4605      	mov	r5, r0
 802051c:	b9f0      	cbnz	r0, 802055c <rcl_get_security_options_from_environment+0x70>
 802051e:	9001      	str	r0, [sp, #4]
 8020520:	f1b8 0f00 	cmp.w	r8, #0
 8020524:	d021      	beq.n	802056a <rcl_get_security_options_from_environment+0x7e>
 8020526:	a901      	add	r1, sp, #4
 8020528:	4817      	ldr	r0, [pc, #92]	; (8020588 <rcl_get_security_options_from_environment+0x9c>)
 802052a:	f000 fa2b 	bl	8020984 <rcutils_get_env>
 802052e:	2800      	cmp	r0, #0
 8020530:	d1e9      	bne.n	8020506 <rcl_get_security_options_from_environment+0x1a>
 8020532:	4916      	ldr	r1, [pc, #88]	; (802058c <rcl_get_security_options_from_environment+0xa0>)
 8020534:	9801      	ldr	r0, [sp, #4]
 8020536:	f7df fe6b 	bl	8000210 <strcmp>
 802053a:	4603      	mov	r3, r0
 802053c:	4639      	mov	r1, r7
 802053e:	4630      	mov	r0, r6
 8020540:	fab3 f383 	clz	r3, r3
 8020544:	095b      	lsrs	r3, r3, #5
 8020546:	f888 3000 	strb.w	r3, [r8]
 802054a:	f7ff ff65 	bl	8020418 <rcl_get_secure_root>
 802054e:	b170      	cbz	r0, 802056e <rcl_get_security_options_from_environment+0x82>
 8020550:	f8c8 0004 	str.w	r0, [r8, #4]
 8020554:	4628      	mov	r0, r5
 8020556:	b002      	add	sp, #8
 8020558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802055c:	4625      	mov	r5, r4
 802055e:	f888 4000 	strb.w	r4, [r8]
 8020562:	4628      	mov	r0, r5
 8020564:	b002      	add	sp, #8
 8020566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802056a:	250b      	movs	r5, #11
 802056c:	e7cc      	b.n	8020508 <rcl_get_security_options_from_environment+0x1c>
 802056e:	f898 5000 	ldrb.w	r5, [r8]
 8020572:	f1a5 0501 	sub.w	r5, r5, #1
 8020576:	fab5 f585 	clz	r5, r5
 802057a:	096d      	lsrs	r5, r5, #5
 802057c:	e7c4      	b.n	8020508 <rcl_get_security_options_from_environment+0x1c>
 802057e:	bf00      	nop
 8020580:	080295e4 	.word	0x080295e4
 8020584:	080295f8 	.word	0x080295f8
 8020588:	08029600 	.word	0x08029600
 802058c:	08029618 	.word	0x08029618

08020590 <rcl_get_system_time>:
 8020590:	4608      	mov	r0, r1
 8020592:	f000 bc79 	b.w	8020e88 <rcutils_system_time_now>
 8020596:	bf00      	nop

08020598 <rcl_get_steady_time>:
 8020598:	4608      	mov	r0, r1
 802059a:	f000 bc9d 	b.w	8020ed8 <rcutils_steady_time_now>
 802059e:	bf00      	nop

080205a0 <rcl_get_ros_time>:
 80205a0:	7a03      	ldrb	r3, [r0, #8]
 80205a2:	b510      	push	{r4, lr}
 80205a4:	460c      	mov	r4, r1
 80205a6:	b143      	cbz	r3, 80205ba <rcl_get_ros_time+0x1a>
 80205a8:	2105      	movs	r1, #5
 80205aa:	f000 f8fd 	bl	80207a8 <__atomic_load_8>
 80205ae:	4602      	mov	r2, r0
 80205b0:	460b      	mov	r3, r1
 80205b2:	2000      	movs	r0, #0
 80205b4:	e9c4 2300 	strd	r2, r3, [r4]
 80205b8:	bd10      	pop	{r4, pc}
 80205ba:	4608      	mov	r0, r1
 80205bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80205c0:	f000 bc62 	b.w	8020e88 <rcutils_system_time_now>

080205c4 <rcl_clock_init>:
 80205c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80205c8:	4605      	mov	r5, r0
 80205ca:	4610      	mov	r0, r2
 80205cc:	4614      	mov	r4, r2
 80205ce:	460e      	mov	r6, r1
 80205d0:	f7fb fab6 	bl	801bb40 <rcutils_allocator_is_valid>
 80205d4:	b128      	cbz	r0, 80205e2 <rcl_clock_init+0x1e>
 80205d6:	2d03      	cmp	r5, #3
 80205d8:	d803      	bhi.n	80205e2 <rcl_clock_init+0x1e>
 80205da:	e8df f005 	tbb	[pc, r5]
 80205de:	3321      	.short	0x3321
 80205e0:	065c      	.short	0x065c
 80205e2:	250b      	movs	r5, #11
 80205e4:	4628      	mov	r0, r5
 80205e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80205ea:	2c00      	cmp	r4, #0
 80205ec:	d0f9      	beq.n	80205e2 <rcl_clock_init+0x1e>
 80205ee:	fab6 f386 	clz	r3, r6
 80205f2:	095b      	lsrs	r3, r3, #5
 80205f4:	2e00      	cmp	r6, #0
 80205f6:	d0f4      	beq.n	80205e2 <rcl_clock_init+0x1e>
 80205f8:	7033      	strb	r3, [r6, #0]
 80205fa:	461d      	mov	r5, r3
 80205fc:	6133      	str	r3, [r6, #16]
 80205fe:	f106 0714 	add.w	r7, r6, #20
 8020602:	f04f 0c03 	mov.w	ip, #3
 8020606:	e9c6 3301 	strd	r3, r3, [r6, #4]
 802060a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802060c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 802060e:	4b30      	ldr	r3, [pc, #192]	; (80206d0 <rcl_clock_init+0x10c>)
 8020610:	4628      	mov	r0, r5
 8020612:	6822      	ldr	r2, [r4, #0]
 8020614:	603a      	str	r2, [r7, #0]
 8020616:	60f3      	str	r3, [r6, #12]
 8020618:	f886 c000 	strb.w	ip, [r6]
 802061c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020620:	2e00      	cmp	r6, #0
 8020622:	d0de      	beq.n	80205e2 <rcl_clock_init+0x1e>
 8020624:	2300      	movs	r3, #0
 8020626:	f106 0714 	add.w	r7, r6, #20
 802062a:	7033      	strb	r3, [r6, #0]
 802062c:	461d      	mov	r5, r3
 802062e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8020632:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8020636:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8020638:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 802063a:	6823      	ldr	r3, [r4, #0]
 802063c:	4628      	mov	r0, r5
 802063e:	603b      	str	r3, [r7, #0]
 8020640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020644:	2c00      	cmp	r4, #0
 8020646:	d0cc      	beq.n	80205e2 <rcl_clock_init+0x1e>
 8020648:	fab6 f586 	clz	r5, r6
 802064c:	096d      	lsrs	r5, r5, #5
 802064e:	2e00      	cmp	r6, #0
 8020650:	d0c7      	beq.n	80205e2 <rcl_clock_init+0x1e>
 8020652:	46a4      	mov	ip, r4
 8020654:	7035      	strb	r5, [r6, #0]
 8020656:	f106 0714 	add.w	r7, r6, #20
 802065a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 802065e:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8020662:	e9c6 5503 	strd	r5, r5, [r6, #12]
 8020666:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8020668:	f8dc 2000 	ldr.w	r2, [ip]
 802066c:	2010      	movs	r0, #16
 802066e:	6823      	ldr	r3, [r4, #0]
 8020670:	603a      	str	r2, [r7, #0]
 8020672:	6921      	ldr	r1, [r4, #16]
 8020674:	4798      	blx	r3
 8020676:	6130      	str	r0, [r6, #16]
 8020678:	b340      	cbz	r0, 80206cc <rcl_clock_init+0x108>
 802067a:	f04f 0800 	mov.w	r8, #0
 802067e:	f04f 0900 	mov.w	r9, #0
 8020682:	4a14      	ldr	r2, [pc, #80]	; (80206d4 <rcl_clock_init+0x110>)
 8020684:	2301      	movs	r3, #1
 8020686:	7205      	strb	r5, [r0, #8]
 8020688:	e9c0 8900 	strd	r8, r9, [r0]
 802068c:	4628      	mov	r0, r5
 802068e:	60f2      	str	r2, [r6, #12]
 8020690:	7033      	strb	r3, [r6, #0]
 8020692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020696:	2c00      	cmp	r4, #0
 8020698:	d0a3      	beq.n	80205e2 <rcl_clock_init+0x1e>
 802069a:	fab6 f386 	clz	r3, r6
 802069e:	095b      	lsrs	r3, r3, #5
 80206a0:	2e00      	cmp	r6, #0
 80206a2:	d09e      	beq.n	80205e2 <rcl_clock_init+0x1e>
 80206a4:	7033      	strb	r3, [r6, #0]
 80206a6:	461d      	mov	r5, r3
 80206a8:	6133      	str	r3, [r6, #16]
 80206aa:	f106 0714 	add.w	r7, r6, #20
 80206ae:	f04f 0c02 	mov.w	ip, #2
 80206b2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80206b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80206b8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80206ba:	4b07      	ldr	r3, [pc, #28]	; (80206d8 <rcl_clock_init+0x114>)
 80206bc:	4628      	mov	r0, r5
 80206be:	6822      	ldr	r2, [r4, #0]
 80206c0:	603a      	str	r2, [r7, #0]
 80206c2:	60f3      	str	r3, [r6, #12]
 80206c4:	f886 c000 	strb.w	ip, [r6]
 80206c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80206cc:	250a      	movs	r5, #10
 80206ce:	e789      	b.n	80205e4 <rcl_clock_init+0x20>
 80206d0:	08020599 	.word	0x08020599
 80206d4:	080205a1 	.word	0x080205a1
 80206d8:	08020591 	.word	0x08020591

080206dc <rcl_validate_enclave_name_with_size>:
 80206dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80206de:	b0c3      	sub	sp, #268	; 0x10c
 80206e0:	b1a8      	cbz	r0, 802070e <rcl_validate_enclave_name_with_size+0x32>
 80206e2:	4615      	mov	r5, r2
 80206e4:	b19a      	cbz	r2, 802070e <rcl_validate_enclave_name_with_size+0x32>
 80206e6:	461f      	mov	r7, r3
 80206e8:	466a      	mov	r2, sp
 80206ea:	ab01      	add	r3, sp, #4
 80206ec:	460e      	mov	r6, r1
 80206ee:	f000 fcc7 	bl	8021080 <rmw_validate_namespace_with_size>
 80206f2:	4604      	mov	r4, r0
 80206f4:	b9b0      	cbnz	r0, 8020724 <rcl_validate_enclave_name_with_size+0x48>
 80206f6:	9b00      	ldr	r3, [sp, #0]
 80206f8:	b16b      	cbz	r3, 8020716 <rcl_validate_enclave_name_with_size+0x3a>
 80206fa:	2b07      	cmp	r3, #7
 80206fc:	d018      	beq.n	8020730 <rcl_validate_enclave_name_with_size+0x54>
 80206fe:	1e5a      	subs	r2, r3, #1
 8020700:	2a05      	cmp	r2, #5
 8020702:	d835      	bhi.n	8020770 <rcl_validate_enclave_name_with_size+0x94>
 8020704:	e8df f002 	tbb	[pc, r2]
 8020708:	2e2b2825 	.word	0x2e2b2825
 802070c:	1c31      	.short	0x1c31
 802070e:	240b      	movs	r4, #11
 8020710:	4620      	mov	r0, r4
 8020712:	b043      	add	sp, #268	; 0x10c
 8020714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020716:	2b07      	cmp	r3, #7
 8020718:	d00a      	beq.n	8020730 <rcl_validate_enclave_name_with_size+0x54>
 802071a:	2300      	movs	r3, #0
 802071c:	4620      	mov	r0, r4
 802071e:	602b      	str	r3, [r5, #0]
 8020720:	b043      	add	sp, #268	; 0x10c
 8020722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020724:	f7ff f8f8 	bl	801f918 <rcl_convert_rmw_ret_to_rcl_ret>
 8020728:	4604      	mov	r4, r0
 802072a:	4620      	mov	r0, r4
 802072c:	b043      	add	sp, #268	; 0x10c
 802072e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020730:	2eff      	cmp	r6, #255	; 0xff
 8020732:	d9f2      	bls.n	802071a <rcl_validate_enclave_name_with_size+0x3e>
 8020734:	602b      	str	r3, [r5, #0]
 8020736:	2f00      	cmp	r7, #0
 8020738:	d0ea      	beq.n	8020710 <rcl_validate_enclave_name_with_size+0x34>
 802073a:	23fe      	movs	r3, #254	; 0xfe
 802073c:	603b      	str	r3, [r7, #0]
 802073e:	e7e7      	b.n	8020710 <rcl_validate_enclave_name_with_size+0x34>
 8020740:	2306      	movs	r3, #6
 8020742:	602b      	str	r3, [r5, #0]
 8020744:	2f00      	cmp	r7, #0
 8020746:	d0e3      	beq.n	8020710 <rcl_validate_enclave_name_with_size+0x34>
 8020748:	9b01      	ldr	r3, [sp, #4]
 802074a:	4620      	mov	r0, r4
 802074c:	603b      	str	r3, [r7, #0]
 802074e:	b043      	add	sp, #268	; 0x10c
 8020750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020752:	2301      	movs	r3, #1
 8020754:	602b      	str	r3, [r5, #0]
 8020756:	e7f5      	b.n	8020744 <rcl_validate_enclave_name_with_size+0x68>
 8020758:	2302      	movs	r3, #2
 802075a:	602b      	str	r3, [r5, #0]
 802075c:	e7f2      	b.n	8020744 <rcl_validate_enclave_name_with_size+0x68>
 802075e:	2303      	movs	r3, #3
 8020760:	602b      	str	r3, [r5, #0]
 8020762:	e7ef      	b.n	8020744 <rcl_validate_enclave_name_with_size+0x68>
 8020764:	2304      	movs	r3, #4
 8020766:	602b      	str	r3, [r5, #0]
 8020768:	e7ec      	b.n	8020744 <rcl_validate_enclave_name_with_size+0x68>
 802076a:	2305      	movs	r3, #5
 802076c:	602b      	str	r3, [r5, #0]
 802076e:	e7e9      	b.n	8020744 <rcl_validate_enclave_name_with_size+0x68>
 8020770:	4a03      	ldr	r2, [pc, #12]	; (8020780 <rcl_validate_enclave_name_with_size+0xa4>)
 8020772:	f44f 7180 	mov.w	r1, #256	; 0x100
 8020776:	a802      	add	r0, sp, #8
 8020778:	2401      	movs	r4, #1
 802077a:	f000 f9c1 	bl	8020b00 <rcutils_snprintf>
 802077e:	e7c7      	b.n	8020710 <rcl_validate_enclave_name_with_size+0x34>
 8020780:	08029664 	.word	0x08029664

08020784 <rcl_validate_enclave_name>:
 8020784:	b168      	cbz	r0, 80207a2 <rcl_validate_enclave_name+0x1e>
 8020786:	b570      	push	{r4, r5, r6, lr}
 8020788:	460d      	mov	r5, r1
 802078a:	4616      	mov	r6, r2
 802078c:	4604      	mov	r4, r0
 802078e:	f7df fd49 	bl	8000224 <strlen>
 8020792:	4633      	mov	r3, r6
 8020794:	4601      	mov	r1, r0
 8020796:	462a      	mov	r2, r5
 8020798:	4620      	mov	r0, r4
 802079a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802079e:	f7ff bf9d 	b.w	80206dc <rcl_validate_enclave_name_with_size>
 80207a2:	200b      	movs	r0, #11
 80207a4:	4770      	bx	lr
 80207a6:	bf00      	nop

080207a8 <__atomic_load_8>:
 80207a8:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80207ac:	4b15      	ldr	r3, [pc, #84]	; (8020804 <__atomic_load_8+0x5c>)
 80207ae:	4a16      	ldr	r2, [pc, #88]	; (8020808 <__atomic_load_8+0x60>)
 80207b0:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 80207b4:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80207b8:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80207bc:	fb03 f301 	mul.w	r3, r3, r1
 80207c0:	ea83 33d3 	eor.w	r3, r3, r3, lsr #15
 80207c4:	fba2 1203 	umull	r1, r2, r2, r3
 80207c8:	0912      	lsrs	r2, r2, #4
 80207ca:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80207ce:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
 80207d2:	b430      	push	{r4, r5}
 80207d4:	1a9b      	subs	r3, r3, r2
 80207d6:	4c0d      	ldr	r4, [pc, #52]	; (802080c <__atomic_load_8+0x64>)
 80207d8:	f04f 0501 	mov.w	r5, #1
 80207dc:	18e1      	adds	r1, r4, r3
 80207de:	e8d1 2f4f 	ldrexb	r2, [r1]
 80207e2:	e8c1 5f4c 	strexb	ip, r5, [r1]
 80207e6:	f1bc 0f00 	cmp.w	ip, #0
 80207ea:	d1f8      	bne.n	80207de <__atomic_load_8+0x36>
 80207ec:	b2d2      	uxtb	r2, r2
 80207ee:	f3bf 8f5b 	dmb	ish
 80207f2:	2a00      	cmp	r2, #0
 80207f4:	d1f3      	bne.n	80207de <__atomic_load_8+0x36>
 80207f6:	e9d0 0100 	ldrd	r0, r1, [r0]
 80207fa:	f3bf 8f5b 	dmb	ish
 80207fe:	54e2      	strb	r2, [r4, r3]
 8020800:	bc30      	pop	{r4, r5}
 8020802:	4770      	bx	lr
 8020804:	27d4eb2d 	.word	0x27d4eb2d
 8020808:	b21642c9 	.word	0xb21642c9
 802080c:	2000fe48 	.word	0x2000fe48

08020810 <__atomic_store_8>:
 8020810:	b4f0      	push	{r4, r5, r6, r7}
 8020812:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 8020816:	4915      	ldr	r1, [pc, #84]	; (802086c <__atomic_store_8+0x5c>)
 8020818:	4c15      	ldr	r4, [pc, #84]	; (8020870 <__atomic_store_8+0x60>)
 802081a:	f04f 0701 	mov.w	r7, #1
 802081e:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 8020822:	4e14      	ldr	r6, [pc, #80]	; (8020874 <__atomic_store_8+0x64>)
 8020824:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8020828:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 802082c:	fb01 f105 	mul.w	r1, r1, r5
 8020830:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8020834:	fba4 5401 	umull	r5, r4, r4, r1
 8020838:	0924      	lsrs	r4, r4, #4
 802083a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 802083e:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 8020842:	1b09      	subs	r1, r1, r4
 8020844:	1875      	adds	r5, r6, r1
 8020846:	e8d5 4f4f 	ldrexb	r4, [r5]
 802084a:	e8c5 7f4c 	strexb	ip, r7, [r5]
 802084e:	f1bc 0f00 	cmp.w	ip, #0
 8020852:	d1f8      	bne.n	8020846 <__atomic_store_8+0x36>
 8020854:	b2e4      	uxtb	r4, r4
 8020856:	f3bf 8f5b 	dmb	ish
 802085a:	2c00      	cmp	r4, #0
 802085c:	d1f3      	bne.n	8020846 <__atomic_store_8+0x36>
 802085e:	e9c0 2300 	strd	r2, r3, [r0]
 8020862:	f3bf 8f5b 	dmb	ish
 8020866:	5474      	strb	r4, [r6, r1]
 8020868:	bcf0      	pop	{r4, r5, r6, r7}
 802086a:	4770      	bx	lr
 802086c:	27d4eb2d 	.word	0x27d4eb2d
 8020870:	b21642c9 	.word	0xb21642c9
 8020874:	2000fe48 	.word	0x2000fe48

08020878 <__atomic_fetch_add_8>:
 8020878:	b4f0      	push	{r4, r5, r6, r7}
 802087a:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 802087e:	4c18      	ldr	r4, [pc, #96]	; (80208e0 <__atomic_fetch_add_8+0x68>)
 8020880:	4918      	ldr	r1, [pc, #96]	; (80208e4 <__atomic_fetch_add_8+0x6c>)
 8020882:	4606      	mov	r6, r0
 8020884:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 8020888:	4f17      	ldr	r7, [pc, #92]	; (80208e8 <__atomic_fetch_add_8+0x70>)
 802088a:	f04f 0001 	mov.w	r0, #1
 802088e:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8020892:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 8020896:	fb04 f505 	mul.w	r5, r4, r5
 802089a:	ea85 35d5 	eor.w	r5, r5, r5, lsr #15
 802089e:	fba1 4105 	umull	r4, r1, r1, r5
 80208a2:	0909      	lsrs	r1, r1, #4
 80208a4:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 80208a8:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 80208ac:	1a6c      	subs	r4, r5, r1
 80208ae:	1939      	adds	r1, r7, r4
 80208b0:	e8d1 5f4f 	ldrexb	r5, [r1]
 80208b4:	e8c1 0f4c 	strexb	ip, r0, [r1]
 80208b8:	f1bc 0f00 	cmp.w	ip, #0
 80208bc:	d1f8      	bne.n	80208b0 <__atomic_fetch_add_8+0x38>
 80208be:	b2ed      	uxtb	r5, r5
 80208c0:	f3bf 8f5b 	dmb	ish
 80208c4:	2d00      	cmp	r5, #0
 80208c6:	d1f3      	bne.n	80208b0 <__atomic_fetch_add_8+0x38>
 80208c8:	e9d6 0100 	ldrd	r0, r1, [r6]
 80208cc:	1882      	adds	r2, r0, r2
 80208ce:	eb41 0303 	adc.w	r3, r1, r3
 80208d2:	e9c6 2300 	strd	r2, r3, [r6]
 80208d6:	f3bf 8f5b 	dmb	ish
 80208da:	553d      	strb	r5, [r7, r4]
 80208dc:	bcf0      	pop	{r4, r5, r6, r7}
 80208de:	4770      	bx	lr
 80208e0:	27d4eb2d 	.word	0x27d4eb2d
 80208e4:	b21642c9 	.word	0xb21642c9
 80208e8:	2000fe48 	.word	0x2000fe48

080208ec <rcutils_is_directory>:
 80208ec:	2000      	movs	r0, #0
 80208ee:	4770      	bx	lr

080208f0 <rcutils_join_path>:
 80208f0:	b082      	sub	sp, #8
 80208f2:	2000      	movs	r0, #0
 80208f4:	e88d 000c 	stmia.w	sp, {r2, r3}
 80208f8:	b002      	add	sp, #8
 80208fa:	4770      	bx	lr

080208fc <rcutils_to_native_path>:
 80208fc:	b084      	sub	sp, #16
 80208fe:	2000      	movs	r0, #0
 8020900:	b410      	push	{r4}
 8020902:	ac02      	add	r4, sp, #8
 8020904:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8020908:	f85d 4b04 	ldr.w	r4, [sp], #4
 802090c:	b004      	add	sp, #16
 802090e:	4770      	bx	lr

08020910 <rcutils_format_string_limit>:
 8020910:	b40f      	push	{r0, r1, r2, r3}
 8020912:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020914:	b083      	sub	sp, #12
 8020916:	ac08      	add	r4, sp, #32
 8020918:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 802091a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 802091e:	b326      	cbz	r6, 802096a <rcutils_format_string_limit+0x5a>
 8020920:	a808      	add	r0, sp, #32
 8020922:	f7fb f90d 	bl	801bb40 <rcutils_allocator_is_valid>
 8020926:	b300      	cbz	r0, 802096a <rcutils_format_string_limit+0x5a>
 8020928:	2100      	movs	r1, #0
 802092a:	ab0f      	add	r3, sp, #60	; 0x3c
 802092c:	4632      	mov	r2, r6
 802092e:	4608      	mov	r0, r1
 8020930:	e9cd 3300 	strd	r3, r3, [sp]
 8020934:	f000 f912 	bl	8020b5c <rcutils_vsnprintf>
 8020938:	1c43      	adds	r3, r0, #1
 802093a:	4605      	mov	r5, r0
 802093c:	d015      	beq.n	802096a <rcutils_format_string_limit+0x5a>
 802093e:	1c47      	adds	r7, r0, #1
 8020940:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020942:	429f      	cmp	r7, r3
 8020944:	d901      	bls.n	802094a <rcutils_format_string_limit+0x3a>
 8020946:	1e5d      	subs	r5, r3, #1
 8020948:	461f      	mov	r7, r3
 802094a:	9b08      	ldr	r3, [sp, #32]
 802094c:	4638      	mov	r0, r7
 802094e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020950:	4798      	blx	r3
 8020952:	4604      	mov	r4, r0
 8020954:	b148      	cbz	r0, 802096a <rcutils_format_string_limit+0x5a>
 8020956:	4632      	mov	r2, r6
 8020958:	4639      	mov	r1, r7
 802095a:	9b01      	ldr	r3, [sp, #4]
 802095c:	f000 f8fe 	bl	8020b5c <rcutils_vsnprintf>
 8020960:	2800      	cmp	r0, #0
 8020962:	db09      	blt.n	8020978 <rcutils_format_string_limit+0x68>
 8020964:	2300      	movs	r3, #0
 8020966:	5563      	strb	r3, [r4, r5]
 8020968:	e000      	b.n	802096c <rcutils_format_string_limit+0x5c>
 802096a:	2400      	movs	r4, #0
 802096c:	4620      	mov	r0, r4
 802096e:	b003      	add	sp, #12
 8020970:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8020974:	b004      	add	sp, #16
 8020976:	4770      	bx	lr
 8020978:	4620      	mov	r0, r4
 802097a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802097c:	990c      	ldr	r1, [sp, #48]	; 0x30
 802097e:	2400      	movs	r4, #0
 8020980:	4798      	blx	r3
 8020982:	e7f3      	b.n	802096c <rcutils_format_string_limit+0x5c>

08020984 <rcutils_get_env>:
 8020984:	b168      	cbz	r0, 80209a2 <rcutils_get_env+0x1e>
 8020986:	b510      	push	{r4, lr}
 8020988:	460c      	mov	r4, r1
 802098a:	b129      	cbz	r1, 8020998 <rcutils_get_env+0x14>
 802098c:	f002 ff72 	bl	8023874 <getenv>
 8020990:	b120      	cbz	r0, 802099c <rcutils_get_env+0x18>
 8020992:	6020      	str	r0, [r4, #0]
 8020994:	2000      	movs	r0, #0
 8020996:	bd10      	pop	{r4, pc}
 8020998:	4803      	ldr	r0, [pc, #12]	; (80209a8 <rcutils_get_env+0x24>)
 802099a:	bd10      	pop	{r4, pc}
 802099c:	4b03      	ldr	r3, [pc, #12]	; (80209ac <rcutils_get_env+0x28>)
 802099e:	6023      	str	r3, [r4, #0]
 80209a0:	bd10      	pop	{r4, pc}
 80209a2:	4803      	ldr	r0, [pc, #12]	; (80209b0 <rcutils_get_env+0x2c>)
 80209a4:	4770      	bx	lr
 80209a6:	bf00      	nop
 80209a8:	080296e0 	.word	0x080296e0
 80209ac:	08029804 	.word	0x08029804
 80209b0:	080296c4 	.word	0x080296c4

080209b4 <rcutils_repl_str>:
 80209b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80209b8:	ed2d 8b02 	vpush	{d8}
 80209bc:	b087      	sub	sp, #28
 80209be:	2600      	movs	r6, #0
 80209c0:	4680      	mov	r8, r0
 80209c2:	468a      	mov	sl, r1
 80209c4:	9001      	str	r0, [sp, #4]
 80209c6:	4608      	mov	r0, r1
 80209c8:	ee08 2a10 	vmov	s16, r2
 80209cc:	4699      	mov	r9, r3
 80209ce:	4637      	mov	r7, r6
 80209d0:	f7df fc28 	bl	8000224 <strlen>
 80209d4:	46b3      	mov	fp, r6
 80209d6:	2510      	movs	r5, #16
 80209d8:	9002      	str	r0, [sp, #8]
 80209da:	e01d      	b.n	8020a18 <rcutils_repl_str+0x64>
 80209dc:	f10b 0b01 	add.w	fp, fp, #1
 80209e0:	9b02      	ldr	r3, [sp, #8]
 80209e2:	455e      	cmp	r6, fp
 80209e4:	eb04 0803 	add.w	r8, r4, r3
 80209e8:	d210      	bcs.n	8020a0c <rcutils_repl_str+0x58>
 80209ea:	442e      	add	r6, r5
 80209ec:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80209f0:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80209f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80209f8:	00b1      	lsls	r1, r6, #2
 80209fa:	4798      	blx	r3
 80209fc:	2800      	cmp	r0, #0
 80209fe:	d07c      	beq.n	8020afa <rcutils_repl_str+0x146>
 8020a00:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8020a04:	4607      	mov	r7, r0
 8020a06:	bf28      	it	cs
 8020a08:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8020a0c:	9b01      	ldr	r3, [sp, #4]
 8020a0e:	1ae4      	subs	r4, r4, r3
 8020a10:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8020a14:	f843 4c04 	str.w	r4, [r3, #-4]
 8020a18:	4651      	mov	r1, sl
 8020a1a:	4640      	mov	r0, r8
 8020a1c:	f003 fafc 	bl	8024018 <strstr>
 8020a20:	4604      	mov	r4, r0
 8020a22:	4638      	mov	r0, r7
 8020a24:	2c00      	cmp	r4, #0
 8020a26:	d1d9      	bne.n	80209dc <rcutils_repl_str+0x28>
 8020a28:	4640      	mov	r0, r8
 8020a2a:	f7df fbfb 	bl	8000224 <strlen>
 8020a2e:	9b01      	ldr	r3, [sp, #4]
 8020a30:	eba8 0803 	sub.w	r8, r8, r3
 8020a34:	eb08 0500 	add.w	r5, r8, r0
 8020a38:	9504      	str	r5, [sp, #16]
 8020a3a:	f1bb 0f00 	cmp.w	fp, #0
 8020a3e:	d03b      	beq.n	8020ab8 <rcutils_repl_str+0x104>
 8020a40:	ee18 0a10 	vmov	r0, s16
 8020a44:	f7df fbee 	bl	8000224 <strlen>
 8020a48:	9a02      	ldr	r2, [sp, #8]
 8020a4a:	f8d9 3000 	ldr.w	r3, [r9]
 8020a4e:	4606      	mov	r6, r0
 8020a50:	1a82      	subs	r2, r0, r2
 8020a52:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8020a56:	fb0b 5202 	mla	r2, fp, r2, r5
 8020a5a:	1c50      	adds	r0, r2, #1
 8020a5c:	9205      	str	r2, [sp, #20]
 8020a5e:	4798      	blx	r3
 8020a60:	4682      	mov	sl, r0
 8020a62:	2800      	cmp	r0, #0
 8020a64:	d049      	beq.n	8020afa <rcutils_repl_str+0x146>
 8020a66:	683a      	ldr	r2, [r7, #0]
 8020a68:	46b8      	mov	r8, r7
 8020a6a:	9901      	ldr	r1, [sp, #4]
 8020a6c:	f002 ff92 	bl	8023994 <memcpy>
 8020a70:	683d      	ldr	r5, [r7, #0]
 8020a72:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8020a76:	4455      	add	r5, sl
 8020a78:	9303      	str	r3, [sp, #12]
 8020a7a:	4632      	mov	r2, r6
 8020a7c:	ee18 1a10 	vmov	r1, s16
 8020a80:	4628      	mov	r0, r5
 8020a82:	4435      	add	r5, r6
 8020a84:	f002 ff86 	bl	8023994 <memcpy>
 8020a88:	9b02      	ldr	r3, [sp, #8]
 8020a8a:	f858 2b04 	ldr.w	r2, [r8], #4
 8020a8e:	4628      	mov	r0, r5
 8020a90:	441a      	add	r2, r3
 8020a92:	9b01      	ldr	r3, [sp, #4]
 8020a94:	1899      	adds	r1, r3, r2
 8020a96:	9b03      	ldr	r3, [sp, #12]
 8020a98:	429c      	cmp	r4, r3
 8020a9a:	d025      	beq.n	8020ae8 <rcutils_repl_str+0x134>
 8020a9c:	f8d8 3000 	ldr.w	r3, [r8]
 8020aa0:	3401      	adds	r4, #1
 8020aa2:	1a9a      	subs	r2, r3, r2
 8020aa4:	4415      	add	r5, r2
 8020aa6:	f002 ff75 	bl	8023994 <memcpy>
 8020aaa:	455c      	cmp	r4, fp
 8020aac:	d3e5      	bcc.n	8020a7a <rcutils_repl_str+0xc6>
 8020aae:	2300      	movs	r3, #0
 8020ab0:	9a05      	ldr	r2, [sp, #20]
 8020ab2:	f80a 3002 	strb.w	r3, [sl, r2]
 8020ab6:	e00b      	b.n	8020ad0 <rcutils_repl_str+0x11c>
 8020ab8:	4628      	mov	r0, r5
 8020aba:	f8d9 3000 	ldr.w	r3, [r9]
 8020abe:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8020ac2:	3001      	adds	r0, #1
 8020ac4:	4798      	blx	r3
 8020ac6:	4682      	mov	sl, r0
 8020ac8:	b110      	cbz	r0, 8020ad0 <rcutils_repl_str+0x11c>
 8020aca:	9901      	ldr	r1, [sp, #4]
 8020acc:	f003 fa88 	bl	8023fe0 <strcpy>
 8020ad0:	4638      	mov	r0, r7
 8020ad2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8020ad6:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8020ada:	4798      	blx	r3
 8020adc:	4650      	mov	r0, sl
 8020ade:	b007      	add	sp, #28
 8020ae0:	ecbd 8b02 	vpop	{d8}
 8020ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020ae8:	9b04      	ldr	r3, [sp, #16]
 8020aea:	3401      	adds	r4, #1
 8020aec:	1a9a      	subs	r2, r3, r2
 8020aee:	4415      	add	r5, r2
 8020af0:	f002 ff50 	bl	8023994 <memcpy>
 8020af4:	455c      	cmp	r4, fp
 8020af6:	d3c0      	bcc.n	8020a7a <rcutils_repl_str+0xc6>
 8020af8:	e7d9      	b.n	8020aae <rcutils_repl_str+0xfa>
 8020afa:	f04f 0a00 	mov.w	sl, #0
 8020afe:	e7e7      	b.n	8020ad0 <rcutils_repl_str+0x11c>

08020b00 <rcutils_snprintf>:
 8020b00:	b40c      	push	{r2, r3}
 8020b02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020b04:	b083      	sub	sp, #12
 8020b06:	ab08      	add	r3, sp, #32
 8020b08:	f853 2b04 	ldr.w	r2, [r3], #4
 8020b0c:	9301      	str	r3, [sp, #4]
 8020b0e:	b1e2      	cbz	r2, 8020b4a <rcutils_snprintf+0x4a>
 8020b10:	fab0 f680 	clz	r6, r0
 8020b14:	fab1 f781 	clz	r7, r1
 8020b18:	ea50 0401 	orrs.w	r4, r0, r1
 8020b1c:	ea4f 1656 	mov.w	r6, r6, lsr #5
 8020b20:	ea4f 1757 	mov.w	r7, r7, lsr #5
 8020b24:	d008      	beq.n	8020b38 <rcutils_snprintf+0x38>
 8020b26:	b986      	cbnz	r6, 8020b4a <rcutils_snprintf+0x4a>
 8020b28:	b97f      	cbnz	r7, 8020b4a <rcutils_snprintf+0x4a>
 8020b2a:	f003 fbbf 	bl	80242ac <vsniprintf>
 8020b2e:	b003      	add	sp, #12
 8020b30:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8020b34:	b002      	add	sp, #8
 8020b36:	4770      	bx	lr
 8020b38:	4621      	mov	r1, r4
 8020b3a:	4620      	mov	r0, r4
 8020b3c:	f003 fbb6 	bl	80242ac <vsniprintf>
 8020b40:	b003      	add	sp, #12
 8020b42:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8020b46:	b002      	add	sp, #8
 8020b48:	4770      	bx	lr
 8020b4a:	4b03      	ldr	r3, [pc, #12]	; (8020b58 <rcutils_snprintf+0x58>)
 8020b4c:	2216      	movs	r2, #22
 8020b4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020b52:	601a      	str	r2, [r3, #0]
 8020b54:	e7eb      	b.n	8020b2e <rcutils_snprintf+0x2e>
 8020b56:	bf00      	nop
 8020b58:	2000ff64 	.word	0x2000ff64

08020b5c <rcutils_vsnprintf>:
 8020b5c:	b1e2      	cbz	r2, 8020b98 <rcutils_vsnprintf+0x3c>
 8020b5e:	b4f0      	push	{r4, r5, r6, r7}
 8020b60:	fab0 f680 	clz	r6, r0
 8020b64:	fab1 f781 	clz	r7, r1
 8020b68:	ea50 0401 	orrs.w	r4, r0, r1
 8020b6c:	ea4f 1656 	mov.w	r6, r6, lsr #5
 8020b70:	ea4f 1757 	mov.w	r7, r7, lsr #5
 8020b74:	d004      	beq.n	8020b80 <rcutils_vsnprintf+0x24>
 8020b76:	b946      	cbnz	r6, 8020b8a <rcutils_vsnprintf+0x2e>
 8020b78:	b93f      	cbnz	r7, 8020b8a <rcutils_vsnprintf+0x2e>
 8020b7a:	bcf0      	pop	{r4, r5, r6, r7}
 8020b7c:	f003 bb96 	b.w	80242ac <vsniprintf>
 8020b80:	4621      	mov	r1, r4
 8020b82:	4620      	mov	r0, r4
 8020b84:	bcf0      	pop	{r4, r5, r6, r7}
 8020b86:	f003 bb91 	b.w	80242ac <vsniprintf>
 8020b8a:	4b06      	ldr	r3, [pc, #24]	; (8020ba4 <rcutils_vsnprintf+0x48>)
 8020b8c:	2216      	movs	r2, #22
 8020b8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020b92:	601a      	str	r2, [r3, #0]
 8020b94:	bcf0      	pop	{r4, r5, r6, r7}
 8020b96:	4770      	bx	lr
 8020b98:	4b02      	ldr	r3, [pc, #8]	; (8020ba4 <rcutils_vsnprintf+0x48>)
 8020b9a:	2216      	movs	r2, #22
 8020b9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020ba0:	601a      	str	r2, [r3, #0]
 8020ba2:	4770      	bx	lr
 8020ba4:	2000ff64 	.word	0x2000ff64

08020ba8 <rcutils_strdup>:
 8020ba8:	b084      	sub	sp, #16
 8020baa:	b570      	push	{r4, r5, r6, lr}
 8020bac:	b082      	sub	sp, #8
 8020bae:	4605      	mov	r5, r0
 8020bb0:	ac07      	add	r4, sp, #28
 8020bb2:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8020bb6:	b1b0      	cbz	r0, 8020be6 <rcutils_strdup+0x3e>
 8020bb8:	f7df fb34 	bl	8000224 <strlen>
 8020bbc:	1c42      	adds	r2, r0, #1
 8020bbe:	9b07      	ldr	r3, [sp, #28]
 8020bc0:	4606      	mov	r6, r0
 8020bc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8020bc4:	4610      	mov	r0, r2
 8020bc6:	9201      	str	r2, [sp, #4]
 8020bc8:	4798      	blx	r3
 8020bca:	4604      	mov	r4, r0
 8020bcc:	b128      	cbz	r0, 8020bda <rcutils_strdup+0x32>
 8020bce:	9a01      	ldr	r2, [sp, #4]
 8020bd0:	4629      	mov	r1, r5
 8020bd2:	f002 fedf 	bl	8023994 <memcpy>
 8020bd6:	2300      	movs	r3, #0
 8020bd8:	55a3      	strb	r3, [r4, r6]
 8020bda:	4620      	mov	r0, r4
 8020bdc:	b002      	add	sp, #8
 8020bde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8020be2:	b004      	add	sp, #16
 8020be4:	4770      	bx	lr
 8020be6:	4604      	mov	r4, r0
 8020be8:	e7f7      	b.n	8020bda <rcutils_strdup+0x32>
 8020bea:	bf00      	nop

08020bec <rcutils_strndup>:
 8020bec:	b082      	sub	sp, #8
 8020bee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020bf0:	ac06      	add	r4, sp, #24
 8020bf2:	4605      	mov	r5, r0
 8020bf4:	e884 000c 	stmia.w	r4, {r2, r3}
 8020bf8:	b188      	cbz	r0, 8020c1e <rcutils_strndup+0x32>
 8020bfa:	1c4f      	adds	r7, r1, #1
 8020bfc:	460e      	mov	r6, r1
 8020bfe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8020c00:	4638      	mov	r0, r7
 8020c02:	4790      	blx	r2
 8020c04:	4604      	mov	r4, r0
 8020c06:	b128      	cbz	r0, 8020c14 <rcutils_strndup+0x28>
 8020c08:	463a      	mov	r2, r7
 8020c0a:	4629      	mov	r1, r5
 8020c0c:	f002 fec2 	bl	8023994 <memcpy>
 8020c10:	2300      	movs	r3, #0
 8020c12:	55a3      	strb	r3, [r4, r6]
 8020c14:	4620      	mov	r0, r4
 8020c16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8020c1a:	b002      	add	sp, #8
 8020c1c:	4770      	bx	lr
 8020c1e:	4604      	mov	r4, r0
 8020c20:	e7f8      	b.n	8020c14 <rcutils_strndup+0x28>
 8020c22:	bf00      	nop

08020c24 <rcutils_get_zero_initialized_string_map>:
 8020c24:	4b01      	ldr	r3, [pc, #4]	; (8020c2c <rcutils_get_zero_initialized_string_map+0x8>)
 8020c26:	2000      	movs	r0, #0
 8020c28:	6018      	str	r0, [r3, #0]
 8020c2a:	4770      	bx	lr
 8020c2c:	2000fe60 	.word	0x2000fe60

08020c30 <rcutils_string_map_reserve>:
 8020c30:	2800      	cmp	r0, #0
 8020c32:	d061      	beq.n	8020cf8 <rcutils_string_map_reserve+0xc8>
 8020c34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020c38:	6805      	ldr	r5, [r0, #0]
 8020c3a:	b083      	sub	sp, #12
 8020c3c:	4606      	mov	r6, r0
 8020c3e:	460c      	mov	r4, r1
 8020c40:	b12d      	cbz	r5, 8020c4e <rcutils_string_map_reserve+0x1e>
 8020c42:	68eb      	ldr	r3, [r5, #12]
 8020c44:	42a3      	cmp	r3, r4
 8020c46:	d906      	bls.n	8020c56 <rcutils_string_map_reserve+0x26>
 8020c48:	461c      	mov	r4, r3
 8020c4a:	2d00      	cmp	r5, #0
 8020c4c:	d1f9      	bne.n	8020c42 <rcutils_string_map_reserve+0x12>
 8020c4e:	201f      	movs	r0, #31
 8020c50:	b003      	add	sp, #12
 8020c52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020c56:	68ab      	ldr	r3, [r5, #8]
 8020c58:	42a3      	cmp	r3, r4
 8020c5a:	d049      	beq.n	8020cf0 <rcutils_string_map_reserve+0xc0>
 8020c5c:	6a2f      	ldr	r7, [r5, #32]
 8020c5e:	2c00      	cmp	r4, #0
 8020c60:	d035      	beq.n	8020cce <rcutils_string_map_reserve+0x9e>
 8020c62:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8020c66:	d245      	bcs.n	8020cf4 <rcutils_string_map_reserve+0xc4>
 8020c68:	ea4f 0884 	mov.w	r8, r4, lsl #2
 8020c6c:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8020c70:	6828      	ldr	r0, [r5, #0]
 8020c72:	463a      	mov	r2, r7
 8020c74:	4641      	mov	r1, r8
 8020c76:	47c8      	blx	r9
 8020c78:	2800      	cmp	r0, #0
 8020c7a:	d03b      	beq.n	8020cf4 <rcutils_string_map_reserve+0xc4>
 8020c7c:	6833      	ldr	r3, [r6, #0]
 8020c7e:	463a      	mov	r2, r7
 8020c80:	4641      	mov	r1, r8
 8020c82:	6018      	str	r0, [r3, #0]
 8020c84:	6858      	ldr	r0, [r3, #4]
 8020c86:	47c8      	blx	r9
 8020c88:	2800      	cmp	r0, #0
 8020c8a:	d033      	beq.n	8020cf4 <rcutils_string_map_reserve+0xc4>
 8020c8c:	6835      	ldr	r5, [r6, #0]
 8020c8e:	68ab      	ldr	r3, [r5, #8]
 8020c90:	6068      	str	r0, [r5, #4]
 8020c92:	42a3      	cmp	r3, r4
 8020c94:	d227      	bcs.n	8020ce6 <rcutils_string_map_reserve+0xb6>
 8020c96:	682a      	ldr	r2, [r5, #0]
 8020c98:	eb00 0108 	add.w	r1, r0, r8
 8020c9c:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8020ca0:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8020ca4:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8020ca8:	428f      	cmp	r7, r1
 8020caa:	d203      	bcs.n	8020cb4 <rcutils_string_map_reserve+0x84>
 8020cac:	eb02 0108 	add.w	r1, r2, r8
 8020cb0:	428e      	cmp	r6, r1
 8020cb2:	d323      	bcc.n	8020cfc <rcutils_string_map_reserve+0xcc>
 8020cb4:	1ae3      	subs	r3, r4, r3
 8020cb6:	4638      	mov	r0, r7
 8020cb8:	2100      	movs	r1, #0
 8020cba:	009a      	lsls	r2, r3, #2
 8020cbc:	9201      	str	r2, [sp, #4]
 8020cbe:	f002 fe91 	bl	80239e4 <memset>
 8020cc2:	9a01      	ldr	r2, [sp, #4]
 8020cc4:	4630      	mov	r0, r6
 8020cc6:	2100      	movs	r1, #0
 8020cc8:	f002 fe8c 	bl	80239e4 <memset>
 8020ccc:	e00b      	b.n	8020ce6 <rcutils_string_map_reserve+0xb6>
 8020cce:	f8d5 8014 	ldr.w	r8, [r5, #20]
 8020cd2:	4639      	mov	r1, r7
 8020cd4:	6828      	ldr	r0, [r5, #0]
 8020cd6:	47c0      	blx	r8
 8020cd8:	6833      	ldr	r3, [r6, #0]
 8020cda:	4639      	mov	r1, r7
 8020cdc:	6858      	ldr	r0, [r3, #4]
 8020cde:	601c      	str	r4, [r3, #0]
 8020ce0:	47c0      	blx	r8
 8020ce2:	6835      	ldr	r5, [r6, #0]
 8020ce4:	606c      	str	r4, [r5, #4]
 8020ce6:	2000      	movs	r0, #0
 8020ce8:	60ac      	str	r4, [r5, #8]
 8020cea:	b003      	add	sp, #12
 8020cec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020cf0:	2000      	movs	r0, #0
 8020cf2:	e7ad      	b.n	8020c50 <rcutils_string_map_reserve+0x20>
 8020cf4:	200a      	movs	r0, #10
 8020cf6:	e7ab      	b.n	8020c50 <rcutils_string_map_reserve+0x20>
 8020cf8:	200b      	movs	r0, #11
 8020cfa:	4770      	bx	lr
 8020cfc:	1f13      	subs	r3, r2, #4
 8020cfe:	f1ac 0c04 	sub.w	ip, ip, #4
 8020d02:	4498      	add	r8, r3
 8020d04:	4460      	add	r0, ip
 8020d06:	4462      	add	r2, ip
 8020d08:	2300      	movs	r3, #0
 8020d0a:	f842 3f04 	str.w	r3, [r2, #4]!
 8020d0e:	4542      	cmp	r2, r8
 8020d10:	f840 3f04 	str.w	r3, [r0, #4]!
 8020d14:	d1f9      	bne.n	8020d0a <rcutils_string_map_reserve+0xda>
 8020d16:	e7e6      	b.n	8020ce6 <rcutils_string_map_reserve+0xb6>

08020d18 <rcutils_string_map_init>:
 8020d18:	b082      	sub	sp, #8
 8020d1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020d1c:	ac06      	add	r4, sp, #24
 8020d1e:	e884 000c 	stmia.w	r4, {r2, r3}
 8020d22:	b378      	cbz	r0, 8020d84 <rcutils_string_map_init+0x6c>
 8020d24:	6806      	ldr	r6, [r0, #0]
 8020d26:	4604      	mov	r4, r0
 8020d28:	b12e      	cbz	r6, 8020d36 <rcutils_string_map_init+0x1e>
 8020d2a:	251e      	movs	r5, #30
 8020d2c:	4628      	mov	r0, r5
 8020d2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8020d32:	b002      	add	sp, #8
 8020d34:	4770      	bx	lr
 8020d36:	a806      	add	r0, sp, #24
 8020d38:	460d      	mov	r5, r1
 8020d3a:	f7fa ff01 	bl	801bb40 <rcutils_allocator_is_valid>
 8020d3e:	b308      	cbz	r0, 8020d84 <rcutils_string_map_init+0x6c>
 8020d40:	9b06      	ldr	r3, [sp, #24]
 8020d42:	2024      	movs	r0, #36	; 0x24
 8020d44:	990a      	ldr	r1, [sp, #40]	; 0x28
 8020d46:	4798      	blx	r3
 8020d48:	6020      	str	r0, [r4, #0]
 8020d4a:	b308      	cbz	r0, 8020d90 <rcutils_string_map_init+0x78>
 8020d4c:	f10d 0c18 	add.w	ip, sp, #24
 8020d50:	f100 0710 	add.w	r7, r0, #16
 8020d54:	e9c0 6600 	strd	r6, r6, [r0]
 8020d58:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8020d5c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8020d60:	f8dc c000 	ldr.w	ip, [ip]
 8020d64:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8020d66:	4629      	mov	r1, r5
 8020d68:	4620      	mov	r0, r4
 8020d6a:	f8c7 c000 	str.w	ip, [r7]
 8020d6e:	f7ff ff5f 	bl	8020c30 <rcutils_string_map_reserve>
 8020d72:	4605      	mov	r5, r0
 8020d74:	2800      	cmp	r0, #0
 8020d76:	d0d9      	beq.n	8020d2c <rcutils_string_map_init+0x14>
 8020d78:	9b07      	ldr	r3, [sp, #28]
 8020d7a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8020d7c:	6820      	ldr	r0, [r4, #0]
 8020d7e:	4798      	blx	r3
 8020d80:	6026      	str	r6, [r4, #0]
 8020d82:	e7d3      	b.n	8020d2c <rcutils_string_map_init+0x14>
 8020d84:	250b      	movs	r5, #11
 8020d86:	4628      	mov	r0, r5
 8020d88:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8020d8c:	b002      	add	sp, #8
 8020d8e:	4770      	bx	lr
 8020d90:	250a      	movs	r5, #10
 8020d92:	e7cb      	b.n	8020d2c <rcutils_string_map_init+0x14>

08020d94 <rcutils_string_map_fini>:
 8020d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020d98:	b082      	sub	sp, #8
 8020d9a:	2800      	cmp	r0, #0
 8020d9c:	d039      	beq.n	8020e12 <rcutils_string_map_fini+0x7e>
 8020d9e:	6804      	ldr	r4, [r0, #0]
 8020da0:	4606      	mov	r6, r0
 8020da2:	2c00      	cmp	r4, #0
 8020da4:	d031      	beq.n	8020e0a <rcutils_string_map_fini+0x76>
 8020da6:	68a3      	ldr	r3, [r4, #8]
 8020da8:	b323      	cbz	r3, 8020df4 <rcutils_string_map_fini+0x60>
 8020daa:	2500      	movs	r5, #0
 8020dac:	6822      	ldr	r2, [r4, #0]
 8020dae:	46a8      	mov	r8, r5
 8020db0:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8020db4:	b1d8      	cbz	r0, 8020dee <rcutils_string_map_fini+0x5a>
 8020db6:	6a21      	ldr	r1, [r4, #32]
 8020db8:	6967      	ldr	r7, [r4, #20]
 8020dba:	9101      	str	r1, [sp, #4]
 8020dbc:	47b8      	blx	r7
 8020dbe:	9901      	ldr	r1, [sp, #4]
 8020dc0:	e9d4 3200 	ldrd	r3, r2, [r4]
 8020dc4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8020dc8:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8020dcc:	47b8      	blx	r7
 8020dce:	68e3      	ldr	r3, [r4, #12]
 8020dd0:	6862      	ldr	r2, [r4, #4]
 8020dd2:	3b01      	subs	r3, #1
 8020dd4:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 8020dd8:	3501      	adds	r5, #1
 8020dda:	60e3      	str	r3, [r4, #12]
 8020ddc:	6834      	ldr	r4, [r6, #0]
 8020dde:	68a3      	ldr	r3, [r4, #8]
 8020de0:	429d      	cmp	r5, r3
 8020de2:	d207      	bcs.n	8020df4 <rcutils_string_map_fini+0x60>
 8020de4:	6822      	ldr	r2, [r4, #0]
 8020de6:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8020dea:	2800      	cmp	r0, #0
 8020dec:	d1e3      	bne.n	8020db6 <rcutils_string_map_fini+0x22>
 8020dee:	3501      	adds	r5, #1
 8020df0:	429d      	cmp	r5, r3
 8020df2:	d3dd      	bcc.n	8020db0 <rcutils_string_map_fini+0x1c>
 8020df4:	2100      	movs	r1, #0
 8020df6:	4630      	mov	r0, r6
 8020df8:	f7ff ff1a 	bl	8020c30 <rcutils_string_map_reserve>
 8020dfc:	4604      	mov	r4, r0
 8020dfe:	b920      	cbnz	r0, 8020e0a <rcutils_string_map_fini+0x76>
 8020e00:	6830      	ldr	r0, [r6, #0]
 8020e02:	6943      	ldr	r3, [r0, #20]
 8020e04:	6a01      	ldr	r1, [r0, #32]
 8020e06:	4798      	blx	r3
 8020e08:	6034      	str	r4, [r6, #0]
 8020e0a:	4620      	mov	r0, r4
 8020e0c:	b002      	add	sp, #8
 8020e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020e12:	240b      	movs	r4, #11
 8020e14:	4620      	mov	r0, r4
 8020e16:	b002      	add	sp, #8
 8020e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08020e1c <rcutils_string_map_getn>:
 8020e1c:	b398      	cbz	r0, 8020e86 <rcutils_string_map_getn+0x6a>
 8020e1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020e22:	f8d0 9000 	ldr.w	r9, [r0]
 8020e26:	b082      	sub	sp, #8
 8020e28:	f1b9 0f00 	cmp.w	r9, #0
 8020e2c:	d020      	beq.n	8020e70 <rcutils_string_map_getn+0x54>
 8020e2e:	fab1 f581 	clz	r5, r1
 8020e32:	460e      	mov	r6, r1
 8020e34:	096d      	lsrs	r5, r5, #5
 8020e36:	b1d9      	cbz	r1, 8020e70 <rcutils_string_map_getn+0x54>
 8020e38:	f8d9 4008 	ldr.w	r4, [r9, #8]
 8020e3c:	f8d9 7000 	ldr.w	r7, [r9]
 8020e40:	b1b4      	cbz	r4, 8020e70 <rcutils_string_map_getn+0x54>
 8020e42:	4690      	mov	r8, r2
 8020e44:	3f04      	subs	r7, #4
 8020e46:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8020e4a:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 8020e4e:	3501      	adds	r5, #1
 8020e50:	4608      	mov	r0, r1
 8020e52:	9101      	str	r1, [sp, #4]
 8020e54:	b151      	cbz	r1, 8020e6c <rcutils_string_map_getn+0x50>
 8020e56:	f7df f9e5 	bl	8000224 <strlen>
 8020e5a:	4602      	mov	r2, r0
 8020e5c:	9901      	ldr	r1, [sp, #4]
 8020e5e:	4630      	mov	r0, r6
 8020e60:	4542      	cmp	r2, r8
 8020e62:	bf38      	it	cc
 8020e64:	4642      	movcc	r2, r8
 8020e66:	f003 f8c3 	bl	8023ff0 <strncmp>
 8020e6a:	b128      	cbz	r0, 8020e78 <rcutils_string_map_getn+0x5c>
 8020e6c:	42ac      	cmp	r4, r5
 8020e6e:	d1ea      	bne.n	8020e46 <rcutils_string_map_getn+0x2a>
 8020e70:	2000      	movs	r0, #0
 8020e72:	b002      	add	sp, #8
 8020e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020e78:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8020e7c:	f853 000a 	ldr.w	r0, [r3, sl]
 8020e80:	b002      	add	sp, #8
 8020e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020e86:	4770      	bx	lr

08020e88 <rcutils_system_time_now>:
 8020e88:	b310      	cbz	r0, 8020ed0 <rcutils_system_time_now+0x48>
 8020e8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020e8c:	b085      	sub	sp, #20
 8020e8e:	4604      	mov	r4, r0
 8020e90:	2001      	movs	r0, #1
 8020e92:	4669      	mov	r1, sp
 8020e94:	f7e0 f95c 	bl	8001150 <clock_gettime>
 8020e98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020e9c:	2a00      	cmp	r2, #0
 8020e9e:	f173 0100 	sbcs.w	r1, r3, #0
 8020ea2:	db12      	blt.n	8020eca <rcutils_system_time_now+0x42>
 8020ea4:	ea52 0103 	orrs.w	r1, r2, r3
 8020ea8:	9d02      	ldr	r5, [sp, #8]
 8020eaa:	d101      	bne.n	8020eb0 <rcutils_system_time_now+0x28>
 8020eac:	2d00      	cmp	r5, #0
 8020eae:	db0c      	blt.n	8020eca <rcutils_system_time_now+0x42>
 8020eb0:	4908      	ldr	r1, [pc, #32]	; (8020ed4 <rcutils_system_time_now+0x4c>)
 8020eb2:	2000      	movs	r0, #0
 8020eb4:	fba2 6701 	umull	r6, r7, r2, r1
 8020eb8:	1976      	adds	r6, r6, r5
 8020eba:	fb01 7703 	mla	r7, r1, r3, r7
 8020ebe:	eb47 77e5 	adc.w	r7, r7, r5, asr #31
 8020ec2:	e9c4 6700 	strd	r6, r7, [r4]
 8020ec6:	b005      	add	sp, #20
 8020ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020eca:	2002      	movs	r0, #2
 8020ecc:	b005      	add	sp, #20
 8020ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020ed0:	200b      	movs	r0, #11
 8020ed2:	4770      	bx	lr
 8020ed4:	3b9aca00 	.word	0x3b9aca00

08020ed8 <rcutils_steady_time_now>:
 8020ed8:	b310      	cbz	r0, 8020f20 <rcutils_steady_time_now+0x48>
 8020eda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020edc:	b085      	sub	sp, #20
 8020ede:	4604      	mov	r4, r0
 8020ee0:	2000      	movs	r0, #0
 8020ee2:	4669      	mov	r1, sp
 8020ee4:	f7e0 f934 	bl	8001150 <clock_gettime>
 8020ee8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020eec:	2a00      	cmp	r2, #0
 8020eee:	f173 0100 	sbcs.w	r1, r3, #0
 8020ef2:	db12      	blt.n	8020f1a <rcutils_steady_time_now+0x42>
 8020ef4:	ea52 0103 	orrs.w	r1, r2, r3
 8020ef8:	9d02      	ldr	r5, [sp, #8]
 8020efa:	d101      	bne.n	8020f00 <rcutils_steady_time_now+0x28>
 8020efc:	2d00      	cmp	r5, #0
 8020efe:	db0c      	blt.n	8020f1a <rcutils_steady_time_now+0x42>
 8020f00:	4908      	ldr	r1, [pc, #32]	; (8020f24 <rcutils_steady_time_now+0x4c>)
 8020f02:	2000      	movs	r0, #0
 8020f04:	fba2 6701 	umull	r6, r7, r2, r1
 8020f08:	1976      	adds	r6, r6, r5
 8020f0a:	fb01 7703 	mla	r7, r1, r3, r7
 8020f0e:	eb47 77e5 	adc.w	r7, r7, r5, asr #31
 8020f12:	e9c4 6700 	strd	r6, r7, [r4]
 8020f16:	b005      	add	sp, #20
 8020f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020f1a:	2002      	movs	r0, #2
 8020f1c:	b005      	add	sp, #20
 8020f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020f20:	200b      	movs	r0, #11
 8020f22:	4770      	bx	lr
 8020f24:	3b9aca00 	.word	0x3b9aca00

08020f28 <rmw_get_zero_initialized_context>:
 8020f28:	b5d0      	push	{r4, r6, r7, lr}
 8020f2a:	4604      	mov	r4, r0
 8020f2c:	3010      	adds	r0, #16
 8020f2e:	f000 f80b 	bl	8020f48 <rmw_get_zero_initialized_init_options>
 8020f32:	2600      	movs	r6, #0
 8020f34:	2300      	movs	r3, #0
 8020f36:	2700      	movs	r7, #0
 8020f38:	4620      	mov	r0, r4
 8020f3a:	60a3      	str	r3, [r4, #8]
 8020f3c:	e9c4 6700 	strd	r6, r7, [r4]
 8020f40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8020f44:	bdd0      	pop	{r4, r6, r7, pc}
 8020f46:	bf00      	nop

08020f48 <rmw_get_zero_initialized_init_options>:
 8020f48:	b510      	push	{r4, lr}
 8020f4a:	4604      	mov	r4, r0
 8020f4c:	2238      	movs	r2, #56	; 0x38
 8020f4e:	2100      	movs	r1, #0
 8020f50:	f002 fd48 	bl	80239e4 <memset>
 8020f54:	f104 0010 	add.w	r0, r4, #16
 8020f58:	f000 f806 	bl	8020f68 <rmw_get_default_security_options>
 8020f5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020f60:	4620      	mov	r0, r4
 8020f62:	60e3      	str	r3, [r4, #12]
 8020f64:	bd10      	pop	{r4, pc}
 8020f66:	bf00      	nop

08020f68 <rmw_get_default_security_options>:
 8020f68:	2200      	movs	r2, #0
 8020f6a:	7002      	strb	r2, [r0, #0]
 8020f6c:	6042      	str	r2, [r0, #4]
 8020f6e:	4770      	bx	lr

08020f70 <rmw_validate_full_topic_name>:
 8020f70:	2800      	cmp	r0, #0
 8020f72:	d064      	beq.n	802103e <rmw_validate_full_topic_name+0xce>
 8020f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020f78:	460d      	mov	r5, r1
 8020f7a:	2900      	cmp	r1, #0
 8020f7c:	d061      	beq.n	8021042 <rmw_validate_full_topic_name+0xd2>
 8020f7e:	4616      	mov	r6, r2
 8020f80:	4604      	mov	r4, r0
 8020f82:	f7df f94f 	bl	8000224 <strlen>
 8020f86:	b148      	cbz	r0, 8020f9c <rmw_validate_full_topic_name+0x2c>
 8020f88:	7823      	ldrb	r3, [r4, #0]
 8020f8a:	2b2f      	cmp	r3, #47	; 0x2f
 8020f8c:	d00d      	beq.n	8020faa <rmw_validate_full_topic_name+0x3a>
 8020f8e:	2302      	movs	r3, #2
 8020f90:	602b      	str	r3, [r5, #0]
 8020f92:	b13e      	cbz	r6, 8020fa4 <rmw_validate_full_topic_name+0x34>
 8020f94:	2000      	movs	r0, #0
 8020f96:	6030      	str	r0, [r6, #0]
 8020f98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020f9c:	2301      	movs	r3, #1
 8020f9e:	602b      	str	r3, [r5, #0]
 8020fa0:	2e00      	cmp	r6, #0
 8020fa2:	d1f7      	bne.n	8020f94 <rmw_validate_full_topic_name+0x24>
 8020fa4:	2000      	movs	r0, #0
 8020fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020faa:	1e47      	subs	r7, r0, #1
 8020fac:	5de3      	ldrb	r3, [r4, r7]
 8020fae:	2b2f      	cmp	r3, #47	; 0x2f
 8020fb0:	d049      	beq.n	8021046 <rmw_validate_full_topic_name+0xd6>
 8020fb2:	1e62      	subs	r2, r4, #1
 8020fb4:	f1c4 0e01 	rsb	lr, r4, #1
 8020fb8:	eb02 0900 	add.w	r9, r2, r0
 8020fbc:	eb0e 0802 	add.w	r8, lr, r2
 8020fc0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8020fc4:	f023 0120 	bic.w	r1, r3, #32
 8020fc8:	f1a3 0c2f 	sub.w	ip, r3, #47	; 0x2f
 8020fcc:	3941      	subs	r1, #65	; 0x41
 8020fce:	2919      	cmp	r1, #25
 8020fd0:	d910      	bls.n	8020ff4 <rmw_validate_full_topic_name+0x84>
 8020fd2:	f1bc 0f0a 	cmp.w	ip, #10
 8020fd6:	d90d      	bls.n	8020ff4 <rmw_validate_full_topic_name+0x84>
 8020fd8:	f1a3 035f 	sub.w	r3, r3, #95	; 0x5f
 8020fdc:	fab3 f383 	clz	r3, r3
 8020fe0:	095b      	lsrs	r3, r3, #5
 8020fe2:	b93b      	cbnz	r3, 8020ff4 <rmw_validate_full_topic_name+0x84>
 8020fe4:	2204      	movs	r2, #4
 8020fe6:	602a      	str	r2, [r5, #0]
 8020fe8:	2e00      	cmp	r6, #0
 8020fea:	d0db      	beq.n	8020fa4 <rmw_validate_full_topic_name+0x34>
 8020fec:	4618      	mov	r0, r3
 8020fee:	f8c6 8000 	str.w	r8, [r6]
 8020ff2:	e7d1      	b.n	8020f98 <rmw_validate_full_topic_name+0x28>
 8020ff4:	454a      	cmp	r2, r9
 8020ff6:	d1e1      	bne.n	8020fbc <rmw_validate_full_topic_name+0x4c>
 8020ff8:	2200      	movs	r2, #0
 8020ffa:	f107 0801 	add.w	r8, r7, #1
 8020ffe:	f8df e07c 	ldr.w	lr, [pc, #124]	; 802107c <rmw_validate_full_topic_name+0x10c>
 8021002:	e004      	b.n	802100e <rmw_validate_full_topic_name+0x9e>
 8021004:	4288      	cmp	r0, r1
 8021006:	f104 0401 	add.w	r4, r4, #1
 802100a:	461a      	mov	r2, r3
 802100c:	d924      	bls.n	8021058 <rmw_validate_full_topic_name+0xe8>
 802100e:	4297      	cmp	r7, r2
 8021010:	f102 0301 	add.w	r3, r2, #1
 8021014:	d01d      	beq.n	8021052 <rmw_validate_full_topic_name+0xe2>
 8021016:	f894 c000 	ldrb.w	ip, [r4]
 802101a:	4619      	mov	r1, r3
 802101c:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 8021020:	d1f0      	bne.n	8021004 <rmw_validate_full_topic_name+0x94>
 8021022:	7862      	ldrb	r2, [r4, #1]
 8021024:	2a2f      	cmp	r2, #47	; 0x2f
 8021026:	d024      	beq.n	8021072 <rmw_validate_full_topic_name+0x102>
 8021028:	f812 200e 	ldrb.w	r2, [r2, lr]
 802102c:	0752      	lsls	r2, r2, #29
 802102e:	d5e9      	bpl.n	8021004 <rmw_validate_full_topic_name+0x94>
 8021030:	2206      	movs	r2, #6
 8021032:	602a      	str	r2, [r5, #0]
 8021034:	2e00      	cmp	r6, #0
 8021036:	d0b5      	beq.n	8020fa4 <rmw_validate_full_topic_name+0x34>
 8021038:	2000      	movs	r0, #0
 802103a:	6033      	str	r3, [r6, #0]
 802103c:	e7ac      	b.n	8020f98 <rmw_validate_full_topic_name+0x28>
 802103e:	200b      	movs	r0, #11
 8021040:	4770      	bx	lr
 8021042:	200b      	movs	r0, #11
 8021044:	e7a8      	b.n	8020f98 <rmw_validate_full_topic_name+0x28>
 8021046:	2303      	movs	r3, #3
 8021048:	602b      	str	r3, [r5, #0]
 802104a:	2e00      	cmp	r6, #0
 802104c:	d0aa      	beq.n	8020fa4 <rmw_validate_full_topic_name+0x34>
 802104e:	6037      	str	r7, [r6, #0]
 8021050:	e7a8      	b.n	8020fa4 <rmw_validate_full_topic_name+0x34>
 8021052:	4641      	mov	r1, r8
 8021054:	1c7b      	adds	r3, r7, #1
 8021056:	e7d5      	b.n	8021004 <rmw_validate_full_topic_name+0x94>
 8021058:	28f7      	cmp	r0, #247	; 0xf7
 802105a:	d802      	bhi.n	8021062 <rmw_validate_full_topic_name+0xf2>
 802105c:	2000      	movs	r0, #0
 802105e:	6028      	str	r0, [r5, #0]
 8021060:	e79a      	b.n	8020f98 <rmw_validate_full_topic_name+0x28>
 8021062:	2307      	movs	r3, #7
 8021064:	602b      	str	r3, [r5, #0]
 8021066:	2e00      	cmp	r6, #0
 8021068:	d09c      	beq.n	8020fa4 <rmw_validate_full_topic_name+0x34>
 802106a:	23f6      	movs	r3, #246	; 0xf6
 802106c:	2000      	movs	r0, #0
 802106e:	6033      	str	r3, [r6, #0]
 8021070:	e792      	b.n	8020f98 <rmw_validate_full_topic_name+0x28>
 8021072:	2205      	movs	r2, #5
 8021074:	602a      	str	r2, [r5, #0]
 8021076:	2e00      	cmp	r6, #0
 8021078:	d1de      	bne.n	8021038 <rmw_validate_full_topic_name+0xc8>
 802107a:	e793      	b.n	8020fa4 <rmw_validate_full_topic_name+0x34>
 802107c:	08029a9d 	.word	0x08029a9d

08021080 <rmw_validate_namespace_with_size>:
 8021080:	2800      	cmp	r0, #0
 8021082:	d041      	beq.n	8021108 <rmw_validate_namespace_with_size+0x88>
 8021084:	b5e0      	push	{r5, r6, r7, lr}
 8021086:	4615      	mov	r5, r2
 8021088:	b0c2      	sub	sp, #264	; 0x108
 802108a:	b35a      	cbz	r2, 80210e4 <rmw_validate_namespace_with_size+0x64>
 802108c:	2901      	cmp	r1, #1
 802108e:	460e      	mov	r6, r1
 8021090:	461f      	mov	r7, r3
 8021092:	d102      	bne.n	802109a <rmw_validate_namespace_with_size+0x1a>
 8021094:	7802      	ldrb	r2, [r0, #0]
 8021096:	2a2f      	cmp	r2, #47	; 0x2f
 8021098:	d019      	beq.n	80210ce <rmw_validate_namespace_with_size+0x4e>
 802109a:	aa01      	add	r2, sp, #4
 802109c:	4669      	mov	r1, sp
 802109e:	f7ff ff67 	bl	8020f70 <rmw_validate_full_topic_name>
 80210a2:	b980      	cbnz	r0, 80210c6 <rmw_validate_namespace_with_size+0x46>
 80210a4:	9b00      	ldr	r3, [sp, #0]
 80210a6:	b183      	cbz	r3, 80210ca <rmw_validate_namespace_with_size+0x4a>
 80210a8:	2b07      	cmp	r3, #7
 80210aa:	d00e      	beq.n	80210ca <rmw_validate_namespace_with_size+0x4a>
 80210ac:	1e59      	subs	r1, r3, #1
 80210ae:	2905      	cmp	r1, #5
 80210b0:	d82c      	bhi.n	802110c <rmw_validate_namespace_with_size+0x8c>
 80210b2:	e8df f001 	tbb	[pc, r1]
 80210b6:	201d      	.short	0x201d
 80210b8:	1a032623 	.word	0x1a032623
 80210bc:	2305      	movs	r3, #5
 80210be:	602b      	str	r3, [r5, #0]
 80210c0:	b10f      	cbz	r7, 80210c6 <rmw_validate_namespace_with_size+0x46>
 80210c2:	9b01      	ldr	r3, [sp, #4]
 80210c4:	603b      	str	r3, [r7, #0]
 80210c6:	b042      	add	sp, #264	; 0x108
 80210c8:	bde0      	pop	{r5, r6, r7, pc}
 80210ca:	2ef5      	cmp	r6, #245	; 0xf5
 80210cc:	d803      	bhi.n	80210d6 <rmw_validate_namespace_with_size+0x56>
 80210ce:	2000      	movs	r0, #0
 80210d0:	6028      	str	r0, [r5, #0]
 80210d2:	b042      	add	sp, #264	; 0x108
 80210d4:	bde0      	pop	{r5, r6, r7, pc}
 80210d6:	2307      	movs	r3, #7
 80210d8:	602b      	str	r3, [r5, #0]
 80210da:	2f00      	cmp	r7, #0
 80210dc:	d0f3      	beq.n	80210c6 <rmw_validate_namespace_with_size+0x46>
 80210de:	23f4      	movs	r3, #244	; 0xf4
 80210e0:	603b      	str	r3, [r7, #0]
 80210e2:	e7f0      	b.n	80210c6 <rmw_validate_namespace_with_size+0x46>
 80210e4:	200b      	movs	r0, #11
 80210e6:	b042      	add	sp, #264	; 0x108
 80210e8:	bde0      	pop	{r5, r6, r7, pc}
 80210ea:	2306      	movs	r3, #6
 80210ec:	602b      	str	r3, [r5, #0]
 80210ee:	e7e7      	b.n	80210c0 <rmw_validate_namespace_with_size+0x40>
 80210f0:	2301      	movs	r3, #1
 80210f2:	602b      	str	r3, [r5, #0]
 80210f4:	e7e4      	b.n	80210c0 <rmw_validate_namespace_with_size+0x40>
 80210f6:	2302      	movs	r3, #2
 80210f8:	602b      	str	r3, [r5, #0]
 80210fa:	e7e1      	b.n	80210c0 <rmw_validate_namespace_with_size+0x40>
 80210fc:	2303      	movs	r3, #3
 80210fe:	602b      	str	r3, [r5, #0]
 8021100:	e7de      	b.n	80210c0 <rmw_validate_namespace_with_size+0x40>
 8021102:	2304      	movs	r3, #4
 8021104:	602b      	str	r3, [r5, #0]
 8021106:	e7db      	b.n	80210c0 <rmw_validate_namespace_with_size+0x40>
 8021108:	200b      	movs	r0, #11
 802110a:	4770      	bx	lr
 802110c:	4a03      	ldr	r2, [pc, #12]	; (802111c <rmw_validate_namespace_with_size+0x9c>)
 802110e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8021112:	a802      	add	r0, sp, #8
 8021114:	f7ff fcf4 	bl	8020b00 <rcutils_snprintf>
 8021118:	2001      	movs	r0, #1
 802111a:	e7d4      	b.n	80210c6 <rmw_validate_namespace_with_size+0x46>
 802111c:	080296fc 	.word	0x080296fc

08021120 <rmw_validate_namespace>:
 8021120:	b168      	cbz	r0, 802113e <rmw_validate_namespace+0x1e>
 8021122:	b570      	push	{r4, r5, r6, lr}
 8021124:	460d      	mov	r5, r1
 8021126:	4616      	mov	r6, r2
 8021128:	4604      	mov	r4, r0
 802112a:	f7df f87b 	bl	8000224 <strlen>
 802112e:	4633      	mov	r3, r6
 8021130:	4601      	mov	r1, r0
 8021132:	462a      	mov	r2, r5
 8021134:	4620      	mov	r0, r4
 8021136:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802113a:	f7ff bfa1 	b.w	8021080 <rmw_validate_namespace_with_size>
 802113e:	200b      	movs	r0, #11
 8021140:	4770      	bx	lr
 8021142:	bf00      	nop

08021144 <rmw_namespace_validation_result_string>:
 8021144:	2807      	cmp	r0, #7
 8021146:	d803      	bhi.n	8021150 <rmw_namespace_validation_result_string+0xc>
 8021148:	4b02      	ldr	r3, [pc, #8]	; (8021154 <rmw_namespace_validation_result_string+0x10>)
 802114a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 802114e:	4770      	bx	lr
 8021150:	4801      	ldr	r0, [pc, #4]	; (8021158 <rmw_namespace_validation_result_string+0x14>)
 8021152:	4770      	bx	lr
 8021154:	080298f4 	.word	0x080298f4
 8021158:	0802974c 	.word	0x0802974c

0802115c <rmw_validate_node_name>:
 802115c:	2800      	cmp	r0, #0
 802115e:	d039      	beq.n	80211d4 <rmw_validate_node_name+0x78>
 8021160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021164:	460f      	mov	r7, r1
 8021166:	b3b9      	cbz	r1, 80211d8 <rmw_validate_node_name+0x7c>
 8021168:	4615      	mov	r5, r2
 802116a:	4604      	mov	r4, r0
 802116c:	f7df f85a 	bl	8000224 <strlen>
 8021170:	b308      	cbz	r0, 80211b6 <rmw_validate_node_name+0x5a>
 8021172:	1e63      	subs	r3, r4, #1
 8021174:	f1c4 0e01 	rsb	lr, r4, #1
 8021178:	eb03 0c00 	add.w	ip, r3, r0
 802117c:	eb0e 0803 	add.w	r8, lr, r3
 8021180:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 8021184:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 8021188:	f026 0220 	bic.w	r2, r6, #32
 802118c:	2909      	cmp	r1, #9
 802118e:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
 8021192:	d903      	bls.n	802119c <rmw_validate_node_name+0x40>
 8021194:	2a19      	cmp	r2, #25
 8021196:	d901      	bls.n	802119c <rmw_validate_node_name+0x40>
 8021198:	2e5f      	cmp	r6, #95	; 0x5f
 802119a:	d113      	bne.n	80211c4 <rmw_validate_node_name+0x68>
 802119c:	459c      	cmp	ip, r3
 802119e:	d1ed      	bne.n	802117c <rmw_validate_node_name+0x20>
 80211a0:	7822      	ldrb	r2, [r4, #0]
 80211a2:	4b15      	ldr	r3, [pc, #84]	; (80211f8 <rmw_validate_node_name+0x9c>)
 80211a4:	5cd3      	ldrb	r3, [r2, r3]
 80211a6:	f013 0304 	ands.w	r3, r3, #4
 80211aa:	d11f      	bne.n	80211ec <rmw_validate_node_name+0x90>
 80211ac:	28ff      	cmp	r0, #255	; 0xff
 80211ae:	d815      	bhi.n	80211dc <rmw_validate_node_name+0x80>
 80211b0:	4618      	mov	r0, r3
 80211b2:	603b      	str	r3, [r7, #0]
 80211b4:	e00c      	b.n	80211d0 <rmw_validate_node_name+0x74>
 80211b6:	2301      	movs	r3, #1
 80211b8:	603b      	str	r3, [r7, #0]
 80211ba:	b145      	cbz	r5, 80211ce <rmw_validate_node_name+0x72>
 80211bc:	2000      	movs	r0, #0
 80211be:	6028      	str	r0, [r5, #0]
 80211c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80211c4:	2302      	movs	r3, #2
 80211c6:	603b      	str	r3, [r7, #0]
 80211c8:	b10d      	cbz	r5, 80211ce <rmw_validate_node_name+0x72>
 80211ca:	f8c5 8000 	str.w	r8, [r5]
 80211ce:	2000      	movs	r0, #0
 80211d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80211d4:	200b      	movs	r0, #11
 80211d6:	4770      	bx	lr
 80211d8:	200b      	movs	r0, #11
 80211da:	e7f9      	b.n	80211d0 <rmw_validate_node_name+0x74>
 80211dc:	2204      	movs	r2, #4
 80211de:	603a      	str	r2, [r7, #0]
 80211e0:	2d00      	cmp	r5, #0
 80211e2:	d0f4      	beq.n	80211ce <rmw_validate_node_name+0x72>
 80211e4:	22fe      	movs	r2, #254	; 0xfe
 80211e6:	4618      	mov	r0, r3
 80211e8:	602a      	str	r2, [r5, #0]
 80211ea:	e7f1      	b.n	80211d0 <rmw_validate_node_name+0x74>
 80211ec:	2303      	movs	r3, #3
 80211ee:	603b      	str	r3, [r7, #0]
 80211f0:	2d00      	cmp	r5, #0
 80211f2:	d1e3      	bne.n	80211bc <rmw_validate_node_name+0x60>
 80211f4:	e7eb      	b.n	80211ce <rmw_validate_node_name+0x72>
 80211f6:	bf00      	nop
 80211f8:	08029a9d 	.word	0x08029a9d

080211fc <rmw_node_name_validation_result_string>:
 80211fc:	2804      	cmp	r0, #4
 80211fe:	d803      	bhi.n	8021208 <rmw_node_name_validation_result_string+0xc>
 8021200:	4b02      	ldr	r3, [pc, #8]	; (802120c <rmw_node_name_validation_result_string+0x10>)
 8021202:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8021206:	4770      	bx	lr
 8021208:	4801      	ldr	r0, [pc, #4]	; (8021210 <rmw_node_name_validation_result_string+0x14>)
 802120a:	4770      	bx	lr
 802120c:	08029a00 	.word	0x08029a00
 8021210:	08029914 	.word	0x08029914

08021214 <get_memory>:
 8021214:	4603      	mov	r3, r0
 8021216:	6840      	ldr	r0, [r0, #4]
 8021218:	b158      	cbz	r0, 8021232 <get_memory+0x1e>
 802121a:	6842      	ldr	r2, [r0, #4]
 802121c:	605a      	str	r2, [r3, #4]
 802121e:	b10a      	cbz	r2, 8021224 <get_memory+0x10>
 8021220:	2100      	movs	r1, #0
 8021222:	6011      	str	r1, [r2, #0]
 8021224:	681a      	ldr	r2, [r3, #0]
 8021226:	6042      	str	r2, [r0, #4]
 8021228:	b102      	cbz	r2, 802122c <get_memory+0x18>
 802122a:	6010      	str	r0, [r2, #0]
 802122c:	2200      	movs	r2, #0
 802122e:	6002      	str	r2, [r0, #0]
 8021230:	6018      	str	r0, [r3, #0]
 8021232:	4770      	bx	lr

08021234 <put_memory>:
 8021234:	680b      	ldr	r3, [r1, #0]
 8021236:	b10b      	cbz	r3, 802123c <put_memory+0x8>
 8021238:	684a      	ldr	r2, [r1, #4]
 802123a:	605a      	str	r2, [r3, #4]
 802123c:	684a      	ldr	r2, [r1, #4]
 802123e:	b102      	cbz	r2, 8021242 <put_memory+0xe>
 8021240:	6013      	str	r3, [r2, #0]
 8021242:	6803      	ldr	r3, [r0, #0]
 8021244:	428b      	cmp	r3, r1
 8021246:	6843      	ldr	r3, [r0, #4]
 8021248:	bf08      	it	eq
 802124a:	6002      	streq	r2, [r0, #0]
 802124c:	604b      	str	r3, [r1, #4]
 802124e:	b103      	cbz	r3, 8021252 <put_memory+0x1e>
 8021250:	6019      	str	r1, [r3, #0]
 8021252:	2300      	movs	r3, #0
 8021254:	600b      	str	r3, [r1, #0]
 8021256:	6041      	str	r1, [r0, #4]
 8021258:	4770      	bx	lr
 802125a:	bf00      	nop

0802125c <rmw_get_implementation_identifier>:
 802125c:	4b01      	ldr	r3, [pc, #4]	; (8021264 <rmw_get_implementation_identifier+0x8>)
 802125e:	6818      	ldr	r0, [r3, #0]
 8021260:	4770      	bx	lr
 8021262:	bf00      	nop
 8021264:	08029a2c 	.word	0x08029a2c

08021268 <rmw_init_options_init>:
 8021268:	b084      	sub	sp, #16
 802126a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802126e:	b082      	sub	sp, #8
 8021270:	ad0b      	add	r5, sp, #44	; 0x2c
 8021272:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8021276:	b130      	cbz	r0, 8021286 <rmw_init_options_init+0x1e>
 8021278:	4604      	mov	r4, r0
 802127a:	4628      	mov	r0, r5
 802127c:	f7fa fc60 	bl	801bb40 <rcutils_allocator_is_valid>
 8021280:	b108      	cbz	r0, 8021286 <rmw_init_options_init+0x1e>
 8021282:	68a7      	ldr	r7, [r4, #8]
 8021284:	b12f      	cbz	r7, 8021292 <rmw_init_options_init+0x2a>
 8021286:	200b      	movs	r0, #11
 8021288:	b002      	add	sp, #8
 802128a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802128e:	b004      	add	sp, #16
 8021290:	4770      	bx	lr
 8021292:	4b25      	ldr	r3, [pc, #148]	; (8021328 <rmw_init_options_init+0xc0>)
 8021294:	46ea      	mov	sl, sp
 8021296:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 802133c <rmw_init_options_init+0xd4>
 802129a:	f04f 0800 	mov.w	r8, #0
 802129e:	681b      	ldr	r3, [r3, #0]
 80212a0:	f04f 0900 	mov.w	r9, #0
 80212a4:	f104 0620 	add.w	r6, r4, #32
 80212a8:	60a3      	str	r3, [r4, #8]
 80212aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80212ac:	682d      	ldr	r5, [r5, #0]
 80212ae:	e9c4 8900 	strd	r8, r9, [r4]
 80212b2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80212b4:	4650      	mov	r0, sl
 80212b6:	6035      	str	r5, [r6, #0]
 80212b8:	f8c4 c01c 	str.w	ip, [r4, #28]
 80212bc:	60e7      	str	r7, [r4, #12]
 80212be:	f7ff fe53 	bl	8020f68 <rmw_get_default_security_options>
 80212c2:	f104 0310 	add.w	r3, r4, #16
 80212c6:	2203      	movs	r2, #3
 80212c8:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80212cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80212d0:	4816      	ldr	r0, [pc, #88]	; (802132c <rmw_init_options_init+0xc4>)
 80212d2:	4917      	ldr	r1, [pc, #92]	; (8021330 <rmw_init_options_init+0xc8>)
 80212d4:	7627      	strb	r7, [r4, #24]
 80212d6:	f7fa ff03 	bl	801c0e0 <rmw_uxrce_init_init_options_impl_memory>
 80212da:	4814      	ldr	r0, [pc, #80]	; (802132c <rmw_init_options_init+0xc4>)
 80212dc:	f7ff ff9a 	bl	8021214 <get_memory>
 80212e0:	b1f8      	cbz	r0, 8021322 <rmw_init_options_init+0xba>
 80212e2:	4b14      	ldr	r3, [pc, #80]	; (8021334 <rmw_init_options_init+0xcc>)
 80212e4:	6885      	ldr	r5, [r0, #8]
 80212e6:	4e14      	ldr	r6, [pc, #80]	; (8021338 <rmw_init_options_init+0xd0>)
 80212e8:	6365      	str	r5, [r4, #52]	; 0x34
 80212ea:	cb07      	ldmia	r3!, {r0, r1, r2}
 80212ec:	781b      	ldrb	r3, [r3, #0]
 80212ee:	6128      	str	r0, [r5, #16]
 80212f0:	61aa      	str	r2, [r5, #24]
 80212f2:	772b      	strb	r3, [r5, #28]
 80212f4:	6169      	str	r1, [r5, #20]
 80212f6:	7932      	ldrb	r2, [r6, #4]
 80212f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80212fa:	6830      	ldr	r0, [r6, #0]
 80212fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8021300:	6218      	str	r0, [r3, #32]
 8021302:	f7fd fb89 	bl	801ea18 <uxr_nanos>
 8021306:	f002 fcf9 	bl	8023cfc <srand>
 802130a:	f002 fd25 	bl	8023d58 <rand>
 802130e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8021310:	6298      	str	r0, [r3, #40]	; 0x28
 8021312:	2800      	cmp	r0, #0
 8021314:	d0f9      	beq.n	802130a <rmw_init_options_init+0xa2>
 8021316:	2000      	movs	r0, #0
 8021318:	b002      	add	sp, #8
 802131a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802131e:	b004      	add	sp, #16
 8021320:	4770      	bx	lr
 8021322:	2001      	movs	r0, #1
 8021324:	e7b0      	b.n	8021288 <rmw_init_options_init+0x20>
 8021326:	bf00      	nop
 8021328:	08029a2c 	.word	0x08029a2c
 802132c:	2001327c 	.word	0x2001327c
 8021330:	20012ed0 	.word	0x20012ed0
 8021334:	08029a30 	.word	0x08029a30
 8021338:	08029a40 	.word	0x08029a40
 802133c:	080295cc 	.word	0x080295cc

08021340 <rmw_init_options_copy>:
 8021340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021342:	b158      	cbz	r0, 802135c <rmw_init_options_copy+0x1c>
 8021344:	460d      	mov	r5, r1
 8021346:	b149      	cbz	r1, 802135c <rmw_init_options_copy+0x1c>
 8021348:	4604      	mov	r4, r0
 802134a:	6880      	ldr	r0, [r0, #8]
 802134c:	b120      	cbz	r0, 8021358 <rmw_init_options_copy+0x18>
 802134e:	4b1e      	ldr	r3, [pc, #120]	; (80213c8 <rmw_init_options_copy+0x88>)
 8021350:	6819      	ldr	r1, [r3, #0]
 8021352:	f7de ff5d 	bl	8000210 <strcmp>
 8021356:	bb90      	cbnz	r0, 80213be <rmw_init_options_copy+0x7e>
 8021358:	68ab      	ldr	r3, [r5, #8]
 802135a:	b113      	cbz	r3, 8021362 <rmw_init_options_copy+0x22>
 802135c:	260b      	movs	r6, #11
 802135e:	4630      	mov	r0, r6
 8021360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021362:	4623      	mov	r3, r4
 8021364:	462a      	mov	r2, r5
 8021366:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 802136a:	681f      	ldr	r7, [r3, #0]
 802136c:	3310      	adds	r3, #16
 802136e:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 8021372:	3210      	adds	r2, #16
 8021374:	f853 0c08 	ldr.w	r0, [r3, #-8]
 8021378:	f853 1c04 	ldr.w	r1, [r3, #-4]
 802137c:	4563      	cmp	r3, ip
 802137e:	f842 7c10 	str.w	r7, [r2, #-16]
 8021382:	f842 6c0c 	str.w	r6, [r2, #-12]
 8021386:	f842 0c08 	str.w	r0, [r2, #-8]
 802138a:	f842 1c04 	str.w	r1, [r2, #-4]
 802138e:	d1ec      	bne.n	802136a <rmw_init_options_copy+0x2a>
 8021390:	6819      	ldr	r1, [r3, #0]
 8021392:	685b      	ldr	r3, [r3, #4]
 8021394:	480d      	ldr	r0, [pc, #52]	; (80213cc <rmw_init_options_copy+0x8c>)
 8021396:	6011      	str	r1, [r2, #0]
 8021398:	6053      	str	r3, [r2, #4]
 802139a:	f7ff ff3b 	bl	8021214 <get_memory>
 802139e:	b188      	cbz	r0, 80213c4 <rmw_init_options_copy+0x84>
 80213a0:	6883      	ldr	r3, [r0, #8]
 80213a2:	2600      	movs	r6, #0
 80213a4:	636b      	str	r3, [r5, #52]	; 0x34
 80213a6:	f103 0510 	add.w	r5, r3, #16
 80213aa:	6b64      	ldr	r4, [r4, #52]	; 0x34
 80213ac:	3410      	adds	r4, #16
 80213ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80213b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80213b2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80213b6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80213ba:	4630      	mov	r0, r6
 80213bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80213be:	260c      	movs	r6, #12
 80213c0:	4630      	mov	r0, r6
 80213c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80213c4:	2601      	movs	r6, #1
 80213c6:	e7ca      	b.n	802135e <rmw_init_options_copy+0x1e>
 80213c8:	08029a2c 	.word	0x08029a2c
 80213cc:	2001327c 	.word	0x2001327c

080213d0 <rmw_init_options_fini>:
 80213d0:	b570      	push	{r4, r5, r6, lr}
 80213d2:	b08e      	sub	sp, #56	; 0x38
 80213d4:	b350      	cbz	r0, 802142c <rmw_init_options_fini+0x5c>
 80213d6:	4604      	mov	r4, r0
 80213d8:	3020      	adds	r0, #32
 80213da:	f7fa fbb1 	bl	801bb40 <rcutils_allocator_is_valid>
 80213de:	b328      	cbz	r0, 802142c <rmw_init_options_fini+0x5c>
 80213e0:	68a0      	ldr	r0, [r4, #8]
 80213e2:	b120      	cbz	r0, 80213ee <rmw_init_options_fini+0x1e>
 80213e4:	4b16      	ldr	r3, [pc, #88]	; (8021440 <rmw_init_options_fini+0x70>)
 80213e6:	6819      	ldr	r1, [r3, #0]
 80213e8:	f7de ff12 	bl	8000210 <strcmp>
 80213ec:	bb30      	cbnz	r0, 802143c <rmw_init_options_fini+0x6c>
 80213ee:	4b15      	ldr	r3, [pc, #84]	; (8021444 <rmw_init_options_fini+0x74>)
 80213f0:	6819      	ldr	r1, [r3, #0]
 80213f2:	b1f9      	cbz	r1, 8021434 <rmw_init_options_fini+0x64>
 80213f4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80213f6:	e001      	b.n	80213fc <rmw_init_options_fini+0x2c>
 80213f8:	6849      	ldr	r1, [r1, #4]
 80213fa:	b1d9      	cbz	r1, 8021434 <rmw_init_options_fini+0x64>
 80213fc:	688b      	ldr	r3, [r1, #8]
 80213fe:	429a      	cmp	r2, r3
 8021400:	d1fa      	bne.n	80213f8 <rmw_init_options_fini+0x28>
 8021402:	4810      	ldr	r0, [pc, #64]	; (8021444 <rmw_init_options_fini+0x74>)
 8021404:	466d      	mov	r5, sp
 8021406:	f7ff ff15 	bl	8021234 <put_memory>
 802140a:	4668      	mov	r0, sp
 802140c:	f7ff fd9c 	bl	8020f48 <rmw_get_zero_initialized_init_options>
 8021410:	2600      	movs	r6, #0
 8021412:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8021414:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8021416:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8021418:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802141a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802141c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802141e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8021422:	e884 0003 	stmia.w	r4, {r0, r1}
 8021426:	4630      	mov	r0, r6
 8021428:	b00e      	add	sp, #56	; 0x38
 802142a:	bd70      	pop	{r4, r5, r6, pc}
 802142c:	260b      	movs	r6, #11
 802142e:	4630      	mov	r0, r6
 8021430:	b00e      	add	sp, #56	; 0x38
 8021432:	bd70      	pop	{r4, r5, r6, pc}
 8021434:	2601      	movs	r6, #1
 8021436:	4630      	mov	r0, r6
 8021438:	b00e      	add	sp, #56	; 0x38
 802143a:	bd70      	pop	{r4, r5, r6, pc}
 802143c:	260c      	movs	r6, #12
 802143e:	e7f2      	b.n	8021426 <rmw_init_options_fini+0x56>
 8021440:	08029a2c 	.word	0x08029a2c
 8021444:	2001327c 	.word	0x2001327c

08021448 <rmw_init>:
 8021448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802144c:	2800      	cmp	r0, #0
 802144e:	f000 80cd 	beq.w	80215ec <rmw_init+0x1a4>
 8021452:	460e      	mov	r6, r1
 8021454:	2900      	cmp	r1, #0
 8021456:	f000 80c9 	beq.w	80215ec <rmw_init+0x1a4>
 802145a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 802145c:	4605      	mov	r5, r0
 802145e:	2b00      	cmp	r3, #0
 8021460:	f000 80c4 	beq.w	80215ec <rmw_init+0x1a4>
 8021464:	4b73      	ldr	r3, [pc, #460]	; (8021634 <rmw_init+0x1ec>)
 8021466:	6880      	ldr	r0, [r0, #8]
 8021468:	681f      	ldr	r7, [r3, #0]
 802146a:	b128      	cbz	r0, 8021478 <rmw_init+0x30>
 802146c:	4639      	mov	r1, r7
 802146e:	f7de fecf 	bl	8000210 <strcmp>
 8021472:	2800      	cmp	r0, #0
 8021474:	f040 80c2 	bne.w	80215fc <rmw_init+0x1b4>
 8021478:	68eb      	ldr	r3, [r5, #12]
 802147a:	2201      	movs	r2, #1
 802147c:	4c6e      	ldr	r4, [pc, #440]	; (8021638 <rmw_init+0x1f0>)
 802147e:	f04f 0800 	mov.w	r8, #0
 8021482:	e9d5 0100 	ldrd	r0, r1, [r5]
 8021486:	64b3      	str	r3, [r6, #72]	; 0x48
 8021488:	60b7      	str	r7, [r6, #8]
 802148a:	e9c6 0100 	strd	r0, r1, [r6]
 802148e:	496b      	ldr	r1, [pc, #428]	; (802163c <rmw_init+0x1f4>)
 8021490:	486b      	ldr	r0, [pc, #428]	; (8021640 <rmw_init+0x1f8>)
 8021492:	f7fa fdc7 	bl	801c024 <rmw_uxrce_init_session_memory>
 8021496:	4620      	mov	r0, r4
 8021498:	2204      	movs	r2, #4
 802149a:	496a      	ldr	r1, [pc, #424]	; (8021644 <rmw_init+0x1fc>)
 802149c:	f7fa fe00 	bl	801c0a0 <rmw_uxrce_init_static_input_buffer_memory>
 80214a0:	4867      	ldr	r0, [pc, #412]	; (8021640 <rmw_init+0x1f8>)
 80214a2:	f884 800d 	strb.w	r8, [r4, #13]
 80214a6:	f7ff feb5 	bl	8021214 <get_memory>
 80214aa:	2800      	cmp	r0, #0
 80214ac:	f000 80a2 	beq.w	80215f4 <rmw_init+0x1ac>
 80214b0:	6884      	ldr	r4, [r0, #8]
 80214b2:	f241 531c 	movw	r3, #5404	; 0x151c
 80214b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80214ba:	f241 5024 	movw	r0, #5412	; 0x1524
 80214be:	f504 5ca9 	add.w	ip, r4, #5408	; 0x1520
 80214c2:	f844 8003 	str.w	r8, [r4, r3]
 80214c6:	f241 5128 	movw	r1, #5416	; 0x1528
 80214ca:	f504 7340 	add.w	r3, r4, #768	; 0x300
 80214ce:	e9c4 22c5 	strd	r2, r2, [r4, #788]	; 0x314
 80214d2:	e9c4 33c3 	strd	r3, r3, [r4, #780]	; 0x30c
 80214d6:	2201      	movs	r2, #1
 80214d8:	f8cc 8000 	str.w	r8, [ip]
 80214dc:	e9c4 78bc 	strd	r7, r8, [r4, #752]	; 0x2f0
 80214e0:	f844 8000 	str.w	r8, [r4, r0]
 80214e4:	f844 8001 	str.w	r8, [r4, r1]
 80214e8:	4857      	ldr	r0, [pc, #348]	; (8021648 <rmw_init+0x200>)
 80214ea:	4958      	ldr	r1, [pc, #352]	; (802164c <rmw_init+0x204>)
 80214ec:	64f4      	str	r4, [r6, #76]	; 0x4c
 80214ee:	f7fa fd7d 	bl	801bfec <rmw_uxrce_init_node_memory>
 80214f2:	2205      	movs	r2, #5
 80214f4:	4956      	ldr	r1, [pc, #344]	; (8021650 <rmw_init+0x208>)
 80214f6:	4857      	ldr	r0, [pc, #348]	; (8021654 <rmw_init+0x20c>)
 80214f8:	f7fa fd5c 	bl	801bfb4 <rmw_uxrce_init_subscription_memory>
 80214fc:	220a      	movs	r2, #10
 80214fe:	4956      	ldr	r1, [pc, #344]	; (8021658 <rmw_init+0x210>)
 8021500:	4856      	ldr	r0, [pc, #344]	; (802165c <rmw_init+0x214>)
 8021502:	f7fa fd3b 	bl	801bf7c <rmw_uxrce_init_publisher_memory>
 8021506:	2201      	movs	r2, #1
 8021508:	4955      	ldr	r1, [pc, #340]	; (8021660 <rmw_init+0x218>)
 802150a:	4856      	ldr	r0, [pc, #344]	; (8021664 <rmw_init+0x21c>)
 802150c:	f7fa fcfe 	bl	801bf0c <rmw_uxrce_init_service_memory>
 8021510:	2201      	movs	r2, #1
 8021512:	4955      	ldr	r1, [pc, #340]	; (8021668 <rmw_init+0x220>)
 8021514:	4855      	ldr	r0, [pc, #340]	; (802166c <rmw_init+0x224>)
 8021516:	f7fa fd15 	bl	801bf44 <rmw_uxrce_init_client_memory>
 802151a:	220f      	movs	r2, #15
 802151c:	4954      	ldr	r1, [pc, #336]	; (8021670 <rmw_init+0x228>)
 802151e:	4855      	ldr	r0, [pc, #340]	; (8021674 <rmw_init+0x22c>)
 8021520:	f7fa fda0 	bl	801c064 <rmw_uxrce_init_topic_memory>
 8021524:	2203      	movs	r2, #3
 8021526:	4954      	ldr	r1, [pc, #336]	; (8021678 <rmw_init+0x230>)
 8021528:	4854      	ldr	r0, [pc, #336]	; (802167c <rmw_init+0x234>)
 802152a:	f7fa fdd9 	bl	801c0e0 <rmw_uxrce_init_init_options_impl_memory>
 802152e:	2204      	movs	r2, #4
 8021530:	4953      	ldr	r1, [pc, #332]	; (8021680 <rmw_init+0x238>)
 8021532:	4854      	ldr	r0, [pc, #336]	; (8021684 <rmw_init+0x23c>)
 8021534:	f7fa fdf0 	bl	801c118 <rmw_uxrce_init_wait_set_memory>
 8021538:	2204      	movs	r2, #4
 802153a:	4953      	ldr	r1, [pc, #332]	; (8021688 <rmw_init+0x240>)
 802153c:	4853      	ldr	r0, [pc, #332]	; (802168c <rmw_init+0x244>)
 802153e:	f7fa fe09 	bl	801c154 <rmw_uxrce_init_guard_condition_memory>
 8021542:	4642      	mov	r2, r8
 8021544:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8021546:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8021548:	f000 fb02 	bl	8021b50 <rmw_uxrce_transport_init>
 802154c:	4607      	mov	r7, r0
 802154e:	2800      	cmp	r0, #0
 8021550:	d158      	bne.n	8021604 <rmw_init+0x1bc>
 8021552:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8021554:	f504 750a 	add.w	r5, r4, #552	; 0x228
 8021558:	f504 7104 	add.w	r1, r4, #528	; 0x210
 802155c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802155e:	4628      	mov	r0, r5
 8021560:	f7fc fd52 	bl	801e008 <uxr_init_session>
 8021564:	4622      	mov	r2, r4
 8021566:	4628      	mov	r0, r5
 8021568:	4949      	ldr	r1, [pc, #292]	; (8021690 <rmw_init+0x248>)
 802156a:	f7fc fd6d 	bl	801e048 <uxr_set_topic_callback>
 802156e:	463a      	mov	r2, r7
 8021570:	4628      	mov	r0, r5
 8021572:	4948      	ldr	r1, [pc, #288]	; (8021694 <rmw_init+0x24c>)
 8021574:	f7fc fd64 	bl	801e040 <uxr_set_status_callback>
 8021578:	463a      	mov	r2, r7
 802157a:	4628      	mov	r0, r5
 802157c:	4946      	ldr	r1, [pc, #280]	; (8021698 <rmw_init+0x250>)
 802157e:	f7fc fd67 	bl	801e050 <uxr_set_request_callback>
 8021582:	463a      	mov	r2, r7
 8021584:	4628      	mov	r0, r5
 8021586:	4945      	ldr	r1, [pc, #276]	; (802169c <rmw_init+0x254>)
 8021588:	f7fc fd66 	bl	801e058 <uxr_set_reply_callback>
 802158c:	f8b4 2220 	ldrh.w	r2, [r4, #544]	; 0x220
 8021590:	2304      	movs	r3, #4
 8021592:	f504 7147 	add.w	r1, r4, #796	; 0x31c
 8021596:	0092      	lsls	r2, r2, #2
 8021598:	4628      	mov	r0, r5
 802159a:	f7fc fe27 	bl	801e1ec <uxr_create_input_reliable_stream>
 802159e:	f8b4 2220 	ldrh.w	r2, [r4, #544]	; 0x220
 80215a2:	4603      	mov	r3, r0
 80215a4:	f604 311c 	addw	r1, r4, #2844	; 0xb1c
 80215a8:	0092      	lsls	r2, r2, #2
 80215aa:	4628      	mov	r0, r5
 80215ac:	f8c4 32fc 	str.w	r3, [r4, #764]	; 0x2fc
 80215b0:	2304      	movs	r3, #4
 80215b2:	f7fc fdf1 	bl	801e198 <uxr_create_output_reliable_stream>
 80215b6:	4603      	mov	r3, r0
 80215b8:	4628      	mov	r0, r5
 80215ba:	f8c4 3300 	str.w	r3, [r4, #768]	; 0x300
 80215be:	f7fc fe0f 	bl	801e1e0 <uxr_create_input_best_effort_stream>
 80215c2:	f241 311c 	movw	r1, #4892	; 0x131c
 80215c6:	4603      	mov	r3, r0
 80215c8:	f8b4 2220 	ldrh.w	r2, [r4, #544]	; 0x220
 80215cc:	4628      	mov	r0, r5
 80215ce:	4421      	add	r1, r4
 80215d0:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
 80215d4:	f7fc fdce 	bl	801e174 <uxr_create_output_best_effort_stream>
 80215d8:	4603      	mov	r3, r0
 80215da:	4628      	mov	r0, r5
 80215dc:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
 80215e0:	f7fc fd3e 	bl	801e060 <uxr_create_session>
 80215e4:	b1d8      	cbz	r0, 802161e <rmw_init+0x1d6>
 80215e6:	4638      	mov	r0, r7
 80215e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80215ec:	270b      	movs	r7, #11
 80215ee:	4638      	mov	r0, r7
 80215f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80215f4:	2701      	movs	r7, #1
 80215f6:	4638      	mov	r0, r7
 80215f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80215fc:	270c      	movs	r7, #12
 80215fe:	4638      	mov	r0, r7
 8021600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021604:	f104 0010 	add.w	r0, r4, #16
 8021608:	f001 fb3c 	bl	8022c84 <uxr_close_udp_transport>
 802160c:	4621      	mov	r1, r4
 802160e:	480c      	ldr	r0, [pc, #48]	; (8021640 <rmw_init+0x1f8>)
 8021610:	f7ff fe10 	bl	8021234 <put_memory>
 8021614:	4638      	mov	r0, r7
 8021616:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 802161a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802161e:	f104 0010 	add.w	r0, r4, #16
 8021622:	f001 fb2f 	bl	8022c84 <uxr_close_udp_transport>
 8021626:	4621      	mov	r1, r4
 8021628:	4805      	ldr	r0, [pc, #20]	; (8021640 <rmw_init+0x1f8>)
 802162a:	f7ff fe03 	bl	8021234 <put_memory>
 802162e:	64f7      	str	r7, [r6, #76]	; 0x4c
 8021630:	2701      	movs	r7, #1
 8021632:	e7d8      	b.n	80215e6 <rmw_init+0x19e>
 8021634:	08029a2c 	.word	0x08029a2c
 8021638:	2000ff80 	.word	0x2000ff80
 802163c:	20013358 	.word	0x20013358
 8021640:	20013128 	.word	0x20013128
 8021644:	20010d60 	.word	0x20010d60
 8021648:	20012f54 	.word	0x20012f54
 802164c:	20013138 	.word	0x20013138
 8021650:	20010888 	.word	0x20010888
 8021654:	200131ec 	.word	0x200131ec
 8021658:	2000ffa0 	.word	0x2000ffa0
 802165c:	2000ff90 	.word	0x2000ff90
 8021660:	20013290 	.word	0x20013290
 8021664:	200131dc 	.word	0x200131dc
 8021668:	20010c98 	.word	0x20010c98
 802166c:	20010810 	.word	0x20010810
 8021670:	20012f64 	.word	0x20012f64
 8021674:	20013118 	.word	0x20013118
 8021678:	20012ed0 	.word	0x20012ed0
 802167c:	2001327c 	.word	0x2001327c
 8021680:	20012e60 	.word	0x20012e60
 8021684:	20014888 	.word	0x20014888
 8021688:	200131fc 	.word	0x200131fc
 802168c:	20013108 	.word	0x20013108
 8021690:	080233d1 	.word	0x080233d1
 8021694:	080233c9 	.word	0x080233c9
 8021698:	08023465 	.word	0x08023465
 802169c:	08023501 	.word	0x08023501

080216a0 <rmw_context_fini>:
 80216a0:	4b17      	ldr	r3, [pc, #92]	; (8021700 <rmw_context_fini+0x60>)
 80216a2:	b570      	push	{r4, r5, r6, lr}
 80216a4:	681c      	ldr	r4, [r3, #0]
 80216a6:	4605      	mov	r5, r0
 80216a8:	b33c      	cbz	r4, 80216fa <rmw_context_fini+0x5a>
 80216aa:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80216ac:	2600      	movs	r6, #0
 80216ae:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 80216b2:	6902      	ldr	r2, [r0, #16]
 80216b4:	428a      	cmp	r2, r1
 80216b6:	d018      	beq.n	80216ea <rmw_context_fini+0x4a>
 80216b8:	2c00      	cmp	r4, #0
 80216ba:	d1f8      	bne.n	80216ae <rmw_context_fini+0xe>
 80216bc:	b189      	cbz	r1, 80216e2 <rmw_context_fini+0x42>
 80216be:	f8d1 3310 	ldr.w	r3, [r1, #784]	; 0x310
 80216c2:	f501 700a 	add.w	r0, r1, #552	; 0x228
 80216c6:	789b      	ldrb	r3, [r3, #2]
 80216c8:	2b01      	cmp	r3, #1
 80216ca:	bf14      	ite	ne
 80216cc:	210a      	movne	r1, #10
 80216ce:	2100      	moveq	r1, #0
 80216d0:	f7fc fd0a 	bl	801e0e8 <uxr_delete_session_retries>
 80216d4:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 80216d6:	f7fa fd59 	bl	801c18c <rmw_uxrce_fini_session_memory>
 80216da:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 80216dc:	3010      	adds	r0, #16
 80216de:	f001 fad1 	bl	8022c84 <uxr_close_udp_transport>
 80216e2:	2300      	movs	r3, #0
 80216e4:	4630      	mov	r0, r6
 80216e6:	64eb      	str	r3, [r5, #76]	; 0x4c
 80216e8:	bd70      	pop	{r4, r5, r6, pc}
 80216ea:	3018      	adds	r0, #24
 80216ec:	f000 f90a 	bl	8021904 <rmw_destroy_node>
 80216f0:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 80216f2:	4606      	mov	r6, r0
 80216f4:	2c00      	cmp	r4, #0
 80216f6:	d1da      	bne.n	80216ae <rmw_context_fini+0xe>
 80216f8:	e7e0      	b.n	80216bc <rmw_context_fini+0x1c>
 80216fa:	4626      	mov	r6, r4
 80216fc:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80216fe:	e7dd      	b.n	80216bc <rmw_context_fini+0x1c>
 8021700:	20012f54 	.word	0x20012f54

08021704 <create_topic>:
 8021704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021708:	4605      	mov	r5, r0
 802170a:	b084      	sub	sp, #16
 802170c:	4822      	ldr	r0, [pc, #136]	; (8021798 <create_topic+0x94>)
 802170e:	460f      	mov	r7, r1
 8021710:	4616      	mov	r6, r2
 8021712:	f7ff fd7f 	bl	8021214 <get_memory>
 8021716:	4604      	mov	r4, r0
 8021718:	2800      	cmp	r0, #0
 802171a:	d034      	beq.n	8021786 <create_topic+0x82>
 802171c:	692a      	ldr	r2, [r5, #16]
 802171e:	f241 531e 	movw	r3, #5406	; 0x151e
 8021722:	6884      	ldr	r4, [r0, #8]
 8021724:	2102      	movs	r1, #2
 8021726:	5ad0      	ldrh	r0, [r2, r3]
 8021728:	61a5      	str	r5, [r4, #24]
 802172a:	f100 0c01 	add.w	ip, r0, #1
 802172e:	6166      	str	r6, [r4, #20]
 8021730:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80217a0 <create_topic+0x9c>
 8021734:	f822 c003 	strh.w	ip, [r2, r3]
 8021738:	f7fc f89c 	bl	801d874 <uxr_object_id>
 802173c:	4603      	mov	r3, r0
 802173e:	4638      	mov	r0, r7
 8021740:	4f16      	ldr	r7, [pc, #88]	; (802179c <create_topic+0x98>)
 8021742:	6123      	str	r3, [r4, #16]
 8021744:	223c      	movs	r2, #60	; 0x3c
 8021746:	4641      	mov	r1, r8
 8021748:	f7fa fe62 	bl	801c410 <generate_topic_name>
 802174c:	4639      	mov	r1, r7
 802174e:	2264      	movs	r2, #100	; 0x64
 8021750:	4630      	mov	r0, r6
 8021752:	f7fa fe23 	bl	801c39c <generate_type_name>
 8021756:	6928      	ldr	r0, [r5, #16]
 8021758:	2106      	movs	r1, #6
 802175a:	696b      	ldr	r3, [r5, #20]
 802175c:	f8d0 230c 	ldr.w	r2, [r0, #780]	; 0x30c
 8021760:	f500 700a 	add.w	r0, r0, #552	; 0x228
 8021764:	9102      	str	r1, [sp, #8]
 8021766:	e9cd 8700 	strd	r8, r7, [sp]
 802176a:	6811      	ldr	r1, [r2, #0]
 802176c:	6922      	ldr	r2, [r4, #16]
 802176e:	f7fb ffa5 	bl	801d6bc <uxr_buffer_create_topic_bin>
 8021772:	4602      	mov	r2, r0
 8021774:	6928      	ldr	r0, [r5, #16]
 8021776:	f8d0 3314 	ldr.w	r3, [r0, #788]	; 0x314
 802177a:	f8d0 130c 	ldr.w	r1, [r0, #780]	; 0x30c
 802177e:	f7fa fdd7 	bl	801c330 <run_xrce_session>
 8021782:	4603      	mov	r3, r0
 8021784:	b118      	cbz	r0, 802178e <create_topic+0x8a>
 8021786:	4620      	mov	r0, r4
 8021788:	b004      	add	sp, #16
 802178a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802178e:	4620      	mov	r0, r4
 8021790:	461c      	mov	r4, r3
 8021792:	f7fa fd71 	bl	801c278 <rmw_uxrce_fini_topic_memory>
 8021796:	e7f6      	b.n	8021786 <create_topic+0x82>
 8021798:	20013118 	.word	0x20013118
 802179c:	2000fea0 	.word	0x2000fea0
 80217a0:	2000fe64 	.word	0x2000fe64

080217a4 <destroy_topic>:
 80217a4:	b538      	push	{r3, r4, r5, lr}
 80217a6:	6985      	ldr	r5, [r0, #24]
 80217a8:	b1dd      	cbz	r5, 80217e2 <destroy_topic+0x3e>
 80217aa:	4604      	mov	r4, r0
 80217ac:	6928      	ldr	r0, [r5, #16]
 80217ae:	f8d0 3310 	ldr.w	r3, [r0, #784]	; 0x310
 80217b2:	f500 700a 	add.w	r0, r0, #552	; 0x228
 80217b6:	6922      	ldr	r2, [r4, #16]
 80217b8:	6819      	ldr	r1, [r3, #0]
 80217ba:	f7fb ff01 	bl	801d5c0 <uxr_buffer_delete_entity>
 80217be:	4602      	mov	r2, r0
 80217c0:	6928      	ldr	r0, [r5, #16]
 80217c2:	f8d0 1310 	ldr.w	r1, [r0, #784]	; 0x310
 80217c6:	f8d0 3318 	ldr.w	r3, [r0, #792]	; 0x318
 80217ca:	f7fa fdb1 	bl	801c330 <run_xrce_session>
 80217ce:	4603      	mov	r3, r0
 80217d0:	4620      	mov	r0, r4
 80217d2:	2b00      	cmp	r3, #0
 80217d4:	bf14      	ite	ne
 80217d6:	2400      	movne	r4, #0
 80217d8:	2402      	moveq	r4, #2
 80217da:	f7fa fd4d 	bl	801c278 <rmw_uxrce_fini_topic_memory>
 80217de:	4620      	mov	r0, r4
 80217e0:	bd38      	pop	{r3, r4, r5, pc}
 80217e2:	2401      	movs	r4, #1
 80217e4:	4620      	mov	r0, r4
 80217e6:	bd38      	pop	{r3, r4, r5, pc}

080217e8 <create_node>:
 80217e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80217ec:	b082      	sub	sp, #8
 80217ee:	2b00      	cmp	r3, #0
 80217f0:	d065      	beq.n	80218be <create_node+0xd6>
 80217f2:	4606      	mov	r6, r0
 80217f4:	4838      	ldr	r0, [pc, #224]	; (80218d8 <create_node+0xf0>)
 80217f6:	460f      	mov	r7, r1
 80217f8:	4690      	mov	r8, r2
 80217fa:	461d      	mov	r5, r3
 80217fc:	f7ff fd0a 	bl	8021214 <get_memory>
 8021800:	2800      	cmp	r0, #0
 8021802:	d05c      	beq.n	80218be <create_node+0xd6>
 8021804:	6884      	ldr	r4, [r0, #8]
 8021806:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8021808:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 802180c:	f104 0518 	add.w	r5, r4, #24
 8021810:	6123      	str	r3, [r4, #16]
 8021812:	f7ff fd23 	bl	802125c <rmw_get_implementation_identifier>
 8021816:	4603      	mov	r3, r0
 8021818:	61e4      	str	r4, [r4, #28]
 802181a:	4630      	mov	r0, r6
 802181c:	61a3      	str	r3, [r4, #24]
 802181e:	f8c4 9020 	str.w	r9, [r4, #32]
 8021822:	f7de fcff 	bl	8000224 <strlen>
 8021826:	1c42      	adds	r2, r0, #1
 8021828:	2a3c      	cmp	r2, #60	; 0x3c
 802182a:	d840      	bhi.n	80218ae <create_node+0xc6>
 802182c:	f104 0a68 	add.w	sl, r4, #104	; 0x68
 8021830:	4631      	mov	r1, r6
 8021832:	4648      	mov	r0, r9
 8021834:	f002 f8ae 	bl	8023994 <memcpy>
 8021838:	4638      	mov	r0, r7
 802183a:	f8c4 a024 	str.w	sl, [r4, #36]	; 0x24
 802183e:	f7de fcf1 	bl	8000224 <strlen>
 8021842:	1c42      	adds	r2, r0, #1
 8021844:	2a3c      	cmp	r2, #60	; 0x3c
 8021846:	d832      	bhi.n	80218ae <create_node+0xc6>
 8021848:	4639      	mov	r1, r7
 802184a:	4650      	mov	r0, sl
 802184c:	f002 f8a2 	bl	8023994 <memcpy>
 8021850:	f241 531c 	movw	r3, #5404	; 0x151c
 8021854:	6922      	ldr	r2, [r4, #16]
 8021856:	2101      	movs	r1, #1
 8021858:	5ad0      	ldrh	r0, [r2, r3]
 802185a:	eb00 0c01 	add.w	ip, r0, r1
 802185e:	f822 c003 	strh.w	ip, [r2, r3]
 8021862:	f7fc f807 	bl	801d874 <uxr_object_id>
 8021866:	6160      	str	r0, [r4, #20]
 8021868:	783b      	ldrb	r3, [r7, #0]
 802186a:	2b2f      	cmp	r3, #47	; 0x2f
 802186c:	d12c      	bne.n	80218c8 <create_node+0xe0>
 802186e:	787b      	ldrb	r3, [r7, #1]
 8021870:	bb53      	cbnz	r3, 80218c8 <create_node+0xe0>
 8021872:	4633      	mov	r3, r6
 8021874:	4a19      	ldr	r2, [pc, #100]	; (80218dc <create_node+0xf4>)
 8021876:	213c      	movs	r1, #60	; 0x3c
 8021878:	4819      	ldr	r0, [pc, #100]	; (80218e0 <create_node+0xf8>)
 802187a:	f002 fb2d 	bl	8023ed8 <sniprintf>
 802187e:	6920      	ldr	r0, [r4, #16]
 8021880:	2606      	movs	r6, #6
 8021882:	4917      	ldr	r1, [pc, #92]	; (80218e0 <create_node+0xf8>)
 8021884:	fa1f f388 	uxth.w	r3, r8
 8021888:	f8d0 230c 	ldr.w	r2, [r0, #780]	; 0x30c
 802188c:	f500 700a 	add.w	r0, r0, #552	; 0x228
 8021890:	e9cd 1600 	strd	r1, r6, [sp]
 8021894:	6811      	ldr	r1, [r2, #0]
 8021896:	6962      	ldr	r2, [r4, #20]
 8021898:	f7fb fede 	bl	801d658 <uxr_buffer_create_participant_bin>
 802189c:	4602      	mov	r2, r0
 802189e:	6920      	ldr	r0, [r4, #16]
 80218a0:	f8d0 3314 	ldr.w	r3, [r0, #788]	; 0x314
 80218a4:	f8d0 130c 	ldr.w	r1, [r0, #780]	; 0x30c
 80218a8:	f7fa fd42 	bl	801c330 <run_xrce_session>
 80218ac:	b918      	cbnz	r0, 80218b6 <create_node+0xce>
 80218ae:	4628      	mov	r0, r5
 80218b0:	2500      	movs	r5, #0
 80218b2:	f7fa fc71 	bl	801c198 <rmw_uxrce_fini_node_memory>
 80218b6:	4628      	mov	r0, r5
 80218b8:	b002      	add	sp, #8
 80218ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80218be:	2500      	movs	r5, #0
 80218c0:	4628      	mov	r0, r5
 80218c2:	b002      	add	sp, #8
 80218c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80218c8:	463b      	mov	r3, r7
 80218ca:	4a06      	ldr	r2, [pc, #24]	; (80218e4 <create_node+0xfc>)
 80218cc:	213c      	movs	r1, #60	; 0x3c
 80218ce:	9600      	str	r6, [sp, #0]
 80218d0:	4803      	ldr	r0, [pc, #12]	; (80218e0 <create_node+0xf8>)
 80218d2:	f002 fb01 	bl	8023ed8 <sniprintf>
 80218d6:	e7d2      	b.n	802187e <create_node+0x96>
 80218d8:	20012f54 	.word	0x20012f54
 80218dc:	0802944c 	.word	0x0802944c
 80218e0:	2000ff04 	.word	0x2000ff04
 80218e4:	080295d4 	.word	0x080295d4

080218e8 <rmw_create_node>:
 80218e8:	4603      	mov	r3, r0
 80218ea:	4608      	mov	r0, r1
 80218ec:	b141      	cbz	r1, 8021900 <rmw_create_node+0x18>
 80218ee:	7809      	ldrb	r1, [r1, #0]
 80218f0:	b131      	cbz	r1, 8021900 <rmw_create_node+0x18>
 80218f2:	b12a      	cbz	r2, 8021900 <rmw_create_node+0x18>
 80218f4:	7811      	ldrb	r1, [r2, #0]
 80218f6:	b119      	cbz	r1, 8021900 <rmw_create_node+0x18>
 80218f8:	4611      	mov	r1, r2
 80218fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80218fc:	f7ff bf74 	b.w	80217e8 <create_node>
 8021900:	2000      	movs	r0, #0
 8021902:	4770      	bx	lr

08021904 <rmw_destroy_node>:
 8021904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021906:	2800      	cmp	r0, #0
 8021908:	d067      	beq.n	80219da <rmw_destroy_node+0xd6>
 802190a:	4607      	mov	r7, r0
 802190c:	6800      	ldr	r0, [r0, #0]
 802190e:	b128      	cbz	r0, 802191c <rmw_destroy_node+0x18>
 8021910:	4b34      	ldr	r3, [pc, #208]	; (80219e4 <rmw_destroy_node+0xe0>)
 8021912:	6819      	ldr	r1, [r3, #0]
 8021914:	f7de fc7c 	bl	8000210 <strcmp>
 8021918:	2800      	cmp	r0, #0
 802191a:	d15e      	bne.n	80219da <rmw_destroy_node+0xd6>
 802191c:	687c      	ldr	r4, [r7, #4]
 802191e:	2c00      	cmp	r4, #0
 8021920:	d05b      	beq.n	80219da <rmw_destroy_node+0xd6>
 8021922:	4b31      	ldr	r3, [pc, #196]	; (80219e8 <rmw_destroy_node+0xe4>)
 8021924:	681d      	ldr	r5, [r3, #0]
 8021926:	2d00      	cmp	r5, #0
 8021928:	d05a      	beq.n	80219e0 <rmw_destroy_node+0xdc>
 802192a:	2600      	movs	r6, #0
 802192c:	e9d5 5101 	ldrd	r5, r1, [r5, #4]
 8021930:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8021934:	429c      	cmp	r4, r3
 8021936:	d048      	beq.n	80219ca <rmw_destroy_node+0xc6>
 8021938:	2d00      	cmp	r5, #0
 802193a:	d1f7      	bne.n	802192c <rmw_destroy_node+0x28>
 802193c:	4b2b      	ldr	r3, [pc, #172]	; (80219ec <rmw_destroy_node+0xe8>)
 802193e:	681d      	ldr	r5, [r3, #0]
 8021940:	b15d      	cbz	r5, 802195a <rmw_destroy_node+0x56>
 8021942:	e9d5 5101 	ldrd	r5, r1, [r5, #4]
 8021946:	6a0b      	ldr	r3, [r1, #32]
 8021948:	429c      	cmp	r4, r3
 802194a:	d1f9      	bne.n	8021940 <rmw_destroy_node+0x3c>
 802194c:	317c      	adds	r1, #124	; 0x7c
 802194e:	4638      	mov	r0, r7
 8021950:	f000 f89c 	bl	8021a8c <rmw_destroy_subscription>
 8021954:	4606      	mov	r6, r0
 8021956:	2d00      	cmp	r5, #0
 8021958:	d1f3      	bne.n	8021942 <rmw_destroy_node+0x3e>
 802195a:	4b25      	ldr	r3, [pc, #148]	; (80219f0 <rmw_destroy_node+0xec>)
 802195c:	681d      	ldr	r5, [r3, #0]
 802195e:	b15d      	cbz	r5, 8021978 <rmw_destroy_node+0x74>
 8021960:	e9d5 5101 	ldrd	r5, r1, [r5, #4]
 8021964:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8021966:	429c      	cmp	r4, r3
 8021968:	d1f9      	bne.n	802195e <rmw_destroy_node+0x5a>
 802196a:	317c      	adds	r1, #124	; 0x7c
 802196c:	4638      	mov	r0, r7
 802196e:	f000 f849 	bl	8021a04 <rmw_destroy_service>
 8021972:	4606      	mov	r6, r0
 8021974:	2d00      	cmp	r5, #0
 8021976:	d1f3      	bne.n	8021960 <rmw_destroy_node+0x5c>
 8021978:	4b1e      	ldr	r3, [pc, #120]	; (80219f4 <rmw_destroy_node+0xf0>)
 802197a:	681d      	ldr	r5, [r3, #0]
 802197c:	b15d      	cbz	r5, 8021996 <rmw_destroy_node+0x92>
 802197e:	e9d5 5101 	ldrd	r5, r1, [r5, #4]
 8021982:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8021984:	429c      	cmp	r4, r3
 8021986:	d1f9      	bne.n	802197c <rmw_destroy_node+0x78>
 8021988:	317c      	adds	r1, #124	; 0x7c
 802198a:	4638      	mov	r0, r7
 802198c:	f001 fe02 	bl	8023594 <rmw_destroy_client>
 8021990:	4606      	mov	r6, r0
 8021992:	2d00      	cmp	r5, #0
 8021994:	d1f3      	bne.n	802197e <rmw_destroy_node+0x7a>
 8021996:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 802199a:	f8d0 3310 	ldr.w	r3, [r0, #784]	; 0x310
 802199e:	f500 700a 	add.w	r0, r0, #552	; 0x228
 80219a2:	6819      	ldr	r1, [r3, #0]
 80219a4:	f7fb fe0c 	bl	801d5c0 <uxr_buffer_delete_entity>
 80219a8:	4602      	mov	r2, r0
 80219aa:	6920      	ldr	r0, [r4, #16]
 80219ac:	f8d0 1310 	ldr.w	r1, [r0, #784]	; 0x310
 80219b0:	f8d0 3318 	ldr.w	r3, [r0, #792]	; 0x318
 80219b4:	f7fa fcbc 	bl	801c330 <run_xrce_session>
 80219b8:	4603      	mov	r3, r0
 80219ba:	4638      	mov	r0, r7
 80219bc:	2b00      	cmp	r3, #0
 80219be:	bf08      	it	eq
 80219c0:	2602      	moveq	r6, #2
 80219c2:	f7fa fbe9 	bl	801c198 <rmw_uxrce_fini_node_memory>
 80219c6:	4630      	mov	r0, r6
 80219c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80219ca:	3184      	adds	r1, #132	; 0x84
 80219cc:	4638      	mov	r0, r7
 80219ce:	f7fa fa49 	bl	801be64 <rmw_destroy_publisher>
 80219d2:	4606      	mov	r6, r0
 80219d4:	2d00      	cmp	r5, #0
 80219d6:	d1a9      	bne.n	802192c <rmw_destroy_node+0x28>
 80219d8:	e7b0      	b.n	802193c <rmw_destroy_node+0x38>
 80219da:	2601      	movs	r6, #1
 80219dc:	4630      	mov	r0, r6
 80219de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80219e0:	462e      	mov	r6, r5
 80219e2:	e7ab      	b.n	802193c <rmw_destroy_node+0x38>
 80219e4:	08029a2c 	.word	0x08029a2c
 80219e8:	2000ff90 	.word	0x2000ff90
 80219ec:	200131ec 	.word	0x200131ec
 80219f0:	200131dc 	.word	0x200131dc
 80219f4:	20010810 	.word	0x20010810

080219f8 <rmw_node_get_graph_guard_condition>:
 80219f8:	6843      	ldr	r3, [r0, #4]
 80219fa:	6918      	ldr	r0, [r3, #16]
 80219fc:	f500 703c 	add.w	r0, r0, #752	; 0x2f0
 8021a00:	4770      	bx	lr
 8021a02:	bf00      	nop

08021a04 <rmw_destroy_service>:
 8021a04:	b570      	push	{r4, r5, r6, lr}
 8021a06:	b128      	cbz	r0, 8021a14 <rmw_destroy_service+0x10>
 8021a08:	4604      	mov	r4, r0
 8021a0a:	6800      	ldr	r0, [r0, #0]
 8021a0c:	460d      	mov	r5, r1
 8021a0e:	f7fa fd15 	bl	801c43c <is_uxrce_rmw_identifier_valid>
 8021a12:	b910      	cbnz	r0, 8021a1a <rmw_destroy_service+0x16>
 8021a14:	2401      	movs	r4, #1
 8021a16:	4620      	mov	r0, r4
 8021a18:	bd70      	pop	{r4, r5, r6, pc}
 8021a1a:	6863      	ldr	r3, [r4, #4]
 8021a1c:	2b00      	cmp	r3, #0
 8021a1e:	d0f9      	beq.n	8021a14 <rmw_destroy_service+0x10>
 8021a20:	2d00      	cmp	r5, #0
 8021a22:	d0f7      	beq.n	8021a14 <rmw_destroy_service+0x10>
 8021a24:	6828      	ldr	r0, [r5, #0]
 8021a26:	f7fa fd09 	bl	801c43c <is_uxrce_rmw_identifier_valid>
 8021a2a:	2800      	cmp	r0, #0
 8021a2c:	d0f2      	beq.n	8021a14 <rmw_destroy_service+0x10>
 8021a2e:	686e      	ldr	r6, [r5, #4]
 8021a30:	2e00      	cmp	r6, #0
 8021a32:	d0ef      	beq.n	8021a14 <rmw_destroy_service+0x10>
 8021a34:	6864      	ldr	r4, [r4, #4]
 8021a36:	6932      	ldr	r2, [r6, #16]
 8021a38:	6920      	ldr	r0, [r4, #16]
 8021a3a:	f8d0 3310 	ldr.w	r3, [r0, #784]	; 0x310
 8021a3e:	f500 700a 	add.w	r0, r0, #552	; 0x228
 8021a42:	6819      	ldr	r1, [r3, #0]
 8021a44:	f000 ffc2 	bl	80229cc <uxr_buffer_cancel_data>
 8021a48:	4602      	mov	r2, r0
 8021a4a:	6920      	ldr	r0, [r4, #16]
 8021a4c:	f8d0 3318 	ldr.w	r3, [r0, #792]	; 0x318
 8021a50:	f8d0 1310 	ldr.w	r1, [r0, #784]	; 0x310
 8021a54:	f7fa fc6c 	bl	801c330 <run_xrce_session>
 8021a58:	6920      	ldr	r0, [r4, #16]
 8021a5a:	6932      	ldr	r2, [r6, #16]
 8021a5c:	f8d0 3310 	ldr.w	r3, [r0, #784]	; 0x310
 8021a60:	f500 700a 	add.w	r0, r0, #552	; 0x228
 8021a64:	6819      	ldr	r1, [r3, #0]
 8021a66:	f7fb fdab 	bl	801d5c0 <uxr_buffer_delete_entity>
 8021a6a:	4602      	mov	r2, r0
 8021a6c:	6920      	ldr	r0, [r4, #16]
 8021a6e:	f8d0 3318 	ldr.w	r3, [r0, #792]	; 0x318
 8021a72:	f8d0 1310 	ldr.w	r1, [r0, #784]	; 0x310
 8021a76:	f7fa fc5b 	bl	801c330 <run_xrce_session>
 8021a7a:	4603      	mov	r3, r0
 8021a7c:	4628      	mov	r0, r5
 8021a7e:	2b00      	cmp	r3, #0
 8021a80:	bf14      	ite	ne
 8021a82:	2400      	movne	r4, #0
 8021a84:	2402      	moveq	r4, #2
 8021a86:	f7fa fbcb 	bl	801c220 <rmw_uxrce_fini_service_memory>
 8021a8a:	e7c4      	b.n	8021a16 <rmw_destroy_service+0x12>

08021a8c <rmw_destroy_subscription>:
 8021a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021a8e:	b128      	cbz	r0, 8021a9c <rmw_destroy_subscription+0x10>
 8021a90:	4604      	mov	r4, r0
 8021a92:	6800      	ldr	r0, [r0, #0]
 8021a94:	460d      	mov	r5, r1
 8021a96:	f7fa fcd1 	bl	801c43c <is_uxrce_rmw_identifier_valid>
 8021a9a:	b910      	cbnz	r0, 8021aa2 <rmw_destroy_subscription+0x16>
 8021a9c:	2401      	movs	r4, #1
 8021a9e:	4620      	mov	r0, r4
 8021aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021aa2:	6863      	ldr	r3, [r4, #4]
 8021aa4:	2b00      	cmp	r3, #0
 8021aa6:	d0f9      	beq.n	8021a9c <rmw_destroy_subscription+0x10>
 8021aa8:	fab5 f485 	clz	r4, r5
 8021aac:	0964      	lsrs	r4, r4, #5
 8021aae:	2d00      	cmp	r5, #0
 8021ab0:	d0f4      	beq.n	8021a9c <rmw_destroy_subscription+0x10>
 8021ab2:	6828      	ldr	r0, [r5, #0]
 8021ab4:	f7fa fcc2 	bl	801c43c <is_uxrce_rmw_identifier_valid>
 8021ab8:	2800      	cmp	r0, #0
 8021aba:	d0ef      	beq.n	8021a9c <rmw_destroy_subscription+0x10>
 8021abc:	686e      	ldr	r6, [r5, #4]
 8021abe:	2e00      	cmp	r6, #0
 8021ac0:	d0ec      	beq.n	8021a9c <rmw_destroy_subscription+0x10>
 8021ac2:	6a37      	ldr	r7, [r6, #32]
 8021ac4:	6972      	ldr	r2, [r6, #20]
 8021ac6:	6938      	ldr	r0, [r7, #16]
 8021ac8:	f8d0 3310 	ldr.w	r3, [r0, #784]	; 0x310
 8021acc:	f500 700a 	add.w	r0, r0, #552	; 0x228
 8021ad0:	6819      	ldr	r1, [r3, #0]
 8021ad2:	f000 ff7b 	bl	80229cc <uxr_buffer_cancel_data>
 8021ad6:	4602      	mov	r2, r0
 8021ad8:	6938      	ldr	r0, [r7, #16]
 8021ada:	f8d0 3318 	ldr.w	r3, [r0, #792]	; 0x318
 8021ade:	f8d0 1310 	ldr.w	r1, [r0, #784]	; 0x310
 8021ae2:	f7fa fc25 	bl	801c330 <run_xrce_session>
 8021ae6:	69f0      	ldr	r0, [r6, #28]
 8021ae8:	f7ff fe5c 	bl	80217a4 <destroy_topic>
 8021aec:	6a33      	ldr	r3, [r6, #32]
 8021aee:	6972      	ldr	r2, [r6, #20]
 8021af0:	6918      	ldr	r0, [r3, #16]
 8021af2:	f8d0 3310 	ldr.w	r3, [r0, #784]	; 0x310
 8021af6:	f500 700a 	add.w	r0, r0, #552	; 0x228
 8021afa:	6819      	ldr	r1, [r3, #0]
 8021afc:	f7fb fd60 	bl	801d5c0 <uxr_buffer_delete_entity>
 8021b00:	6a33      	ldr	r3, [r6, #32]
 8021b02:	6932      	ldr	r2, [r6, #16]
 8021b04:	4606      	mov	r6, r0
 8021b06:	6918      	ldr	r0, [r3, #16]
 8021b08:	f8d0 3310 	ldr.w	r3, [r0, #784]	; 0x310
 8021b0c:	f500 700a 	add.w	r0, r0, #552	; 0x228
 8021b10:	6819      	ldr	r1, [r3, #0]
 8021b12:	f7fb fd55 	bl	801d5c0 <uxr_buffer_delete_entity>
 8021b16:	6939      	ldr	r1, [r7, #16]
 8021b18:	4632      	mov	r2, r6
 8021b1a:	4606      	mov	r6, r0
 8021b1c:	f8d1 3318 	ldr.w	r3, [r1, #792]	; 0x318
 8021b20:	4608      	mov	r0, r1
 8021b22:	f8d1 1310 	ldr.w	r1, [r1, #784]	; 0x310
 8021b26:	f7fa fc03 	bl	801c330 <run_xrce_session>
 8021b2a:	6939      	ldr	r1, [r7, #16]
 8021b2c:	4632      	mov	r2, r6
 8021b2e:	4606      	mov	r6, r0
 8021b30:	f8d1 3318 	ldr.w	r3, [r1, #792]	; 0x318
 8021b34:	4608      	mov	r0, r1
 8021b36:	f8d1 1310 	ldr.w	r1, [r1, #784]	; 0x310
 8021b3a:	f7fa fbf9 	bl	801c330 <run_xrce_session>
 8021b3e:	b126      	cbz	r6, 8021b4a <rmw_destroy_subscription+0xbe>
 8021b40:	b118      	cbz	r0, 8021b4a <rmw_destroy_subscription+0xbe>
 8021b42:	4628      	mov	r0, r5
 8021b44:	f7fa fb56 	bl	801c1f4 <rmw_uxrce_fini_subscription_memory>
 8021b48:	e7a9      	b.n	8021a9e <rmw_destroy_subscription+0x12>
 8021b4a:	2402      	movs	r4, #2
 8021b4c:	e7f9      	b.n	8021b42 <rmw_destroy_subscription+0xb6>
 8021b4e:	bf00      	nop

08021b50 <rmw_uxrce_transport_init>:
 8021b50:	b510      	push	{r4, lr}
 8021b52:	4604      	mov	r4, r0
 8021b54:	4610      	mov	r0, r2
 8021b56:	b169      	cbz	r1, 8021b74 <rmw_uxrce_transport_init+0x24>
 8021b58:	f101 0210 	add.w	r2, r1, #16
 8021b5c:	f101 0320 	add.w	r3, r1, #32
 8021b60:	b10c      	cbz	r4, 8021b66 <rmw_uxrce_transport_init+0x16>
 8021b62:	f104 0010 	add.w	r0, r4, #16
 8021b66:	2100      	movs	r1, #0
 8021b68:	f001 f872 	bl	8022c50 <uxr_init_udp_transport>
 8021b6c:	f080 0001 	eor.w	r0, r0, #1
 8021b70:	b2c0      	uxtb	r0, r0
 8021b72:	bd10      	pop	{r4, pc}
 8021b74:	4a01      	ldr	r2, [pc, #4]	; (8021b7c <rmw_uxrce_transport_init+0x2c>)
 8021b76:	4b02      	ldr	r3, [pc, #8]	; (8021b80 <rmw_uxrce_transport_init+0x30>)
 8021b78:	e7f2      	b.n	8021b60 <rmw_uxrce_transport_init+0x10>
 8021b7a:	bf00      	nop
 8021b7c:	08029a30 	.word	0x08029a30
 8021b80:	08029a40 	.word	0x08029a40

08021b84 <rmw_uros_epoch_nanos>:
 8021b84:	4b05      	ldr	r3, [pc, #20]	; (8021b9c <rmw_uros_epoch_nanos+0x18>)
 8021b86:	681b      	ldr	r3, [r3, #0]
 8021b88:	b123      	cbz	r3, 8021b94 <rmw_uros_epoch_nanos+0x10>
 8021b8a:	6898      	ldr	r0, [r3, #8]
 8021b8c:	f500 700a 	add.w	r0, r0, #552	; 0x228
 8021b90:	f7fc bb48 	b.w	801e224 <uxr_epoch_nanos>
 8021b94:	2000      	movs	r0, #0
 8021b96:	2100      	movs	r1, #0
 8021b98:	4770      	bx	lr
 8021b9a:	bf00      	nop
 8021b9c:	20013128 	.word	0x20013128

08021ba0 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8021ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021ba4:	6805      	ldr	r5, [r0, #0]
 8021ba6:	4604      	mov	r4, r0
 8021ba8:	460f      	mov	r7, r1
 8021baa:	4628      	mov	r0, r5
 8021bac:	f7de fb30 	bl	8000210 <strcmp>
 8021bb0:	b1c8      	cbz	r0, 8021be6 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8021bb2:	4b11      	ldr	r3, [pc, #68]	; (8021bf8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8021bb4:	681b      	ldr	r3, [r3, #0]
 8021bb6:	429d      	cmp	r5, r3
 8021bb8:	d112      	bne.n	8021be0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8021bba:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8021bbe:	f8d8 4000 	ldr.w	r4, [r8]
 8021bc2:	b16c      	cbz	r4, 8021be0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8021bc4:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8021bc8:	2500      	movs	r5, #0
 8021bca:	3e04      	subs	r6, #4
 8021bcc:	4639      	mov	r1, r7
 8021bce:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8021bd2:	f7de fb1d 	bl	8000210 <strcmp>
 8021bd6:	00ab      	lsls	r3, r5, #2
 8021bd8:	3501      	adds	r5, #1
 8021bda:	b138      	cbz	r0, 8021bec <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8021bdc:	42a5      	cmp	r5, r4
 8021bde:	d1f5      	bne.n	8021bcc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8021be0:	2000      	movs	r0, #0
 8021be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021be6:	4620      	mov	r0, r4
 8021be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021bec:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8021bf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021bf4:	58d3      	ldr	r3, [r2, r3]
 8021bf6:	4718      	bx	r3
 8021bf8:	200000b8 	.word	0x200000b8

08021bfc <std_msgs__msg__Int32__init>:
 8021bfc:	3800      	subs	r0, #0
 8021bfe:	bf18      	it	ne
 8021c00:	2001      	movne	r0, #1
 8021c02:	4770      	bx	lr

08021c04 <std_msgs__msg__Int32__fini>:
 8021c04:	4770      	bx	lr
 8021c06:	bf00      	nop

08021c08 <ucdr_serialize_endian_array_char>:
 8021c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021c0c:	4619      	mov	r1, r3
 8021c0e:	461e      	mov	r6, r3
 8021c10:	4690      	mov	r8, r2
 8021c12:	4604      	mov	r4, r0
 8021c14:	f7fb fc0e 	bl	801d434 <ucdr_check_buffer_available_for>
 8021c18:	b9e0      	cbnz	r0, 8021c54 <ucdr_serialize_endian_array_char+0x4c>
 8021c1a:	4637      	mov	r7, r6
 8021c1c:	e00b      	b.n	8021c36 <ucdr_serialize_endian_array_char+0x2e>
 8021c1e:	4441      	add	r1, r8
 8021c20:	68a0      	ldr	r0, [r4, #8]
 8021c22:	462a      	mov	r2, r5
 8021c24:	1b7f      	subs	r7, r7, r5
 8021c26:	f001 feb5 	bl	8023994 <memcpy>
 8021c2a:	68a3      	ldr	r3, [r4, #8]
 8021c2c:	6920      	ldr	r0, [r4, #16]
 8021c2e:	442b      	add	r3, r5
 8021c30:	4428      	add	r0, r5
 8021c32:	60a3      	str	r3, [r4, #8]
 8021c34:	6120      	str	r0, [r4, #16]
 8021c36:	4639      	mov	r1, r7
 8021c38:	2201      	movs	r2, #1
 8021c3a:	4620      	mov	r0, r4
 8021c3c:	f7fb fc82 	bl	801d544 <ucdr_check_final_buffer_behavior_array>
 8021c40:	1bf1      	subs	r1, r6, r7
 8021c42:	4605      	mov	r5, r0
 8021c44:	2800      	cmp	r0, #0
 8021c46:	d1ea      	bne.n	8021c1e <ucdr_serialize_endian_array_char+0x16>
 8021c48:	2301      	movs	r3, #1
 8021c4a:	7da0      	ldrb	r0, [r4, #22]
 8021c4c:	7563      	strb	r3, [r4, #21]
 8021c4e:	4058      	eors	r0, r3
 8021c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021c54:	4632      	mov	r2, r6
 8021c56:	4641      	mov	r1, r8
 8021c58:	68a0      	ldr	r0, [r4, #8]
 8021c5a:	f001 fe9b 	bl	8023994 <memcpy>
 8021c5e:	68a2      	ldr	r2, [r4, #8]
 8021c60:	6923      	ldr	r3, [r4, #16]
 8021c62:	4432      	add	r2, r6
 8021c64:	4433      	add	r3, r6
 8021c66:	60a2      	str	r2, [r4, #8]
 8021c68:	6123      	str	r3, [r4, #16]
 8021c6a:	e7ed      	b.n	8021c48 <ucdr_serialize_endian_array_char+0x40>

08021c6c <ucdr_deserialize_endian_array_char>:
 8021c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021c70:	4619      	mov	r1, r3
 8021c72:	461e      	mov	r6, r3
 8021c74:	4690      	mov	r8, r2
 8021c76:	4604      	mov	r4, r0
 8021c78:	f7fb fbdc 	bl	801d434 <ucdr_check_buffer_available_for>
 8021c7c:	b9e8      	cbnz	r0, 8021cba <ucdr_deserialize_endian_array_char+0x4e>
 8021c7e:	4637      	mov	r7, r6
 8021c80:	e00c      	b.n	8021c9c <ucdr_deserialize_endian_array_char+0x30>
 8021c82:	eb08 0003 	add.w	r0, r8, r3
 8021c86:	68a1      	ldr	r1, [r4, #8]
 8021c88:	462a      	mov	r2, r5
 8021c8a:	1b7f      	subs	r7, r7, r5
 8021c8c:	f001 fe82 	bl	8023994 <memcpy>
 8021c90:	68a3      	ldr	r3, [r4, #8]
 8021c92:	6920      	ldr	r0, [r4, #16]
 8021c94:	442b      	add	r3, r5
 8021c96:	4428      	add	r0, r5
 8021c98:	60a3      	str	r3, [r4, #8]
 8021c9a:	6120      	str	r0, [r4, #16]
 8021c9c:	2201      	movs	r2, #1
 8021c9e:	4639      	mov	r1, r7
 8021ca0:	4620      	mov	r0, r4
 8021ca2:	f7fb fc4f 	bl	801d544 <ucdr_check_final_buffer_behavior_array>
 8021ca6:	1bf3      	subs	r3, r6, r7
 8021ca8:	4605      	mov	r5, r0
 8021caa:	2800      	cmp	r0, #0
 8021cac:	d1e9      	bne.n	8021c82 <ucdr_deserialize_endian_array_char+0x16>
 8021cae:	2301      	movs	r3, #1
 8021cb0:	7da0      	ldrb	r0, [r4, #22]
 8021cb2:	7563      	strb	r3, [r4, #21]
 8021cb4:	4058      	eors	r0, r3
 8021cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021cba:	4632      	mov	r2, r6
 8021cbc:	4640      	mov	r0, r8
 8021cbe:	68a1      	ldr	r1, [r4, #8]
 8021cc0:	f001 fe68 	bl	8023994 <memcpy>
 8021cc4:	68a2      	ldr	r2, [r4, #8]
 8021cc6:	6923      	ldr	r3, [r4, #16]
 8021cc8:	4432      	add	r2, r6
 8021cca:	4433      	add	r3, r6
 8021ccc:	60a2      	str	r2, [r4, #8]
 8021cce:	6123      	str	r3, [r4, #16]
 8021cd0:	e7ed      	b.n	8021cae <ucdr_deserialize_endian_array_char+0x42>
 8021cd2:	bf00      	nop

08021cd4 <ucdr_serialize_array_uint8_t>:
 8021cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021cd8:	4688      	mov	r8, r1
 8021cda:	4611      	mov	r1, r2
 8021cdc:	4616      	mov	r6, r2
 8021cde:	4604      	mov	r4, r0
 8021ce0:	f7fb fba8 	bl	801d434 <ucdr_check_buffer_available_for>
 8021ce4:	b9e0      	cbnz	r0, 8021d20 <ucdr_serialize_array_uint8_t+0x4c>
 8021ce6:	4637      	mov	r7, r6
 8021ce8:	e00b      	b.n	8021d02 <ucdr_serialize_array_uint8_t+0x2e>
 8021cea:	4441      	add	r1, r8
 8021cec:	68a0      	ldr	r0, [r4, #8]
 8021cee:	462a      	mov	r2, r5
 8021cf0:	1b7f      	subs	r7, r7, r5
 8021cf2:	f001 fe4f 	bl	8023994 <memcpy>
 8021cf6:	68a3      	ldr	r3, [r4, #8]
 8021cf8:	6920      	ldr	r0, [r4, #16]
 8021cfa:	442b      	add	r3, r5
 8021cfc:	4428      	add	r0, r5
 8021cfe:	60a3      	str	r3, [r4, #8]
 8021d00:	6120      	str	r0, [r4, #16]
 8021d02:	4639      	mov	r1, r7
 8021d04:	2201      	movs	r2, #1
 8021d06:	4620      	mov	r0, r4
 8021d08:	f7fb fc1c 	bl	801d544 <ucdr_check_final_buffer_behavior_array>
 8021d0c:	1bf1      	subs	r1, r6, r7
 8021d0e:	4605      	mov	r5, r0
 8021d10:	2800      	cmp	r0, #0
 8021d12:	d1ea      	bne.n	8021cea <ucdr_serialize_array_uint8_t+0x16>
 8021d14:	2301      	movs	r3, #1
 8021d16:	7da0      	ldrb	r0, [r4, #22]
 8021d18:	7563      	strb	r3, [r4, #21]
 8021d1a:	4058      	eors	r0, r3
 8021d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021d20:	4632      	mov	r2, r6
 8021d22:	4641      	mov	r1, r8
 8021d24:	68a0      	ldr	r0, [r4, #8]
 8021d26:	f001 fe35 	bl	8023994 <memcpy>
 8021d2a:	68a3      	ldr	r3, [r4, #8]
 8021d2c:	6922      	ldr	r2, [r4, #16]
 8021d2e:	4433      	add	r3, r6
 8021d30:	4432      	add	r2, r6
 8021d32:	60a3      	str	r3, [r4, #8]
 8021d34:	6122      	str	r2, [r4, #16]
 8021d36:	e7ed      	b.n	8021d14 <ucdr_serialize_array_uint8_t+0x40>

08021d38 <ucdr_serialize_endian_array_uint8_t>:
 8021d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021d3c:	4619      	mov	r1, r3
 8021d3e:	461e      	mov	r6, r3
 8021d40:	4690      	mov	r8, r2
 8021d42:	4604      	mov	r4, r0
 8021d44:	f7fb fb76 	bl	801d434 <ucdr_check_buffer_available_for>
 8021d48:	b9e0      	cbnz	r0, 8021d84 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8021d4a:	4637      	mov	r7, r6
 8021d4c:	e00b      	b.n	8021d66 <ucdr_serialize_endian_array_uint8_t+0x2e>
 8021d4e:	4441      	add	r1, r8
 8021d50:	68a0      	ldr	r0, [r4, #8]
 8021d52:	462a      	mov	r2, r5
 8021d54:	1b7f      	subs	r7, r7, r5
 8021d56:	f001 fe1d 	bl	8023994 <memcpy>
 8021d5a:	68a3      	ldr	r3, [r4, #8]
 8021d5c:	6920      	ldr	r0, [r4, #16]
 8021d5e:	442b      	add	r3, r5
 8021d60:	4428      	add	r0, r5
 8021d62:	60a3      	str	r3, [r4, #8]
 8021d64:	6120      	str	r0, [r4, #16]
 8021d66:	4639      	mov	r1, r7
 8021d68:	2201      	movs	r2, #1
 8021d6a:	4620      	mov	r0, r4
 8021d6c:	f7fb fbea 	bl	801d544 <ucdr_check_final_buffer_behavior_array>
 8021d70:	1bf1      	subs	r1, r6, r7
 8021d72:	4605      	mov	r5, r0
 8021d74:	2800      	cmp	r0, #0
 8021d76:	d1ea      	bne.n	8021d4e <ucdr_serialize_endian_array_uint8_t+0x16>
 8021d78:	2301      	movs	r3, #1
 8021d7a:	7da0      	ldrb	r0, [r4, #22]
 8021d7c:	7563      	strb	r3, [r4, #21]
 8021d7e:	4058      	eors	r0, r3
 8021d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021d84:	4632      	mov	r2, r6
 8021d86:	4641      	mov	r1, r8
 8021d88:	68a0      	ldr	r0, [r4, #8]
 8021d8a:	f001 fe03 	bl	8023994 <memcpy>
 8021d8e:	68a2      	ldr	r2, [r4, #8]
 8021d90:	6923      	ldr	r3, [r4, #16]
 8021d92:	4432      	add	r2, r6
 8021d94:	4433      	add	r3, r6
 8021d96:	60a2      	str	r2, [r4, #8]
 8021d98:	6123      	str	r3, [r4, #16]
 8021d9a:	e7ed      	b.n	8021d78 <ucdr_serialize_endian_array_uint8_t+0x40>

08021d9c <ucdr_deserialize_array_uint8_t>:
 8021d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021da0:	4688      	mov	r8, r1
 8021da2:	4611      	mov	r1, r2
 8021da4:	4616      	mov	r6, r2
 8021da6:	4604      	mov	r4, r0
 8021da8:	f7fb fb44 	bl	801d434 <ucdr_check_buffer_available_for>
 8021dac:	b9e8      	cbnz	r0, 8021dea <ucdr_deserialize_array_uint8_t+0x4e>
 8021dae:	4637      	mov	r7, r6
 8021db0:	e00c      	b.n	8021dcc <ucdr_deserialize_array_uint8_t+0x30>
 8021db2:	eb08 0003 	add.w	r0, r8, r3
 8021db6:	68a1      	ldr	r1, [r4, #8]
 8021db8:	462a      	mov	r2, r5
 8021dba:	1b7f      	subs	r7, r7, r5
 8021dbc:	f001 fdea 	bl	8023994 <memcpy>
 8021dc0:	68a3      	ldr	r3, [r4, #8]
 8021dc2:	6920      	ldr	r0, [r4, #16]
 8021dc4:	442b      	add	r3, r5
 8021dc6:	4428      	add	r0, r5
 8021dc8:	60a3      	str	r3, [r4, #8]
 8021dca:	6120      	str	r0, [r4, #16]
 8021dcc:	2201      	movs	r2, #1
 8021dce:	4639      	mov	r1, r7
 8021dd0:	4620      	mov	r0, r4
 8021dd2:	f7fb fbb7 	bl	801d544 <ucdr_check_final_buffer_behavior_array>
 8021dd6:	1bf3      	subs	r3, r6, r7
 8021dd8:	4605      	mov	r5, r0
 8021dda:	2800      	cmp	r0, #0
 8021ddc:	d1e9      	bne.n	8021db2 <ucdr_deserialize_array_uint8_t+0x16>
 8021dde:	2301      	movs	r3, #1
 8021de0:	7da0      	ldrb	r0, [r4, #22]
 8021de2:	7563      	strb	r3, [r4, #21]
 8021de4:	4058      	eors	r0, r3
 8021de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021dea:	4632      	mov	r2, r6
 8021dec:	4640      	mov	r0, r8
 8021dee:	68a1      	ldr	r1, [r4, #8]
 8021df0:	f001 fdd0 	bl	8023994 <memcpy>
 8021df4:	68a3      	ldr	r3, [r4, #8]
 8021df6:	6922      	ldr	r2, [r4, #16]
 8021df8:	4433      	add	r3, r6
 8021dfa:	4432      	add	r2, r6
 8021dfc:	60a3      	str	r3, [r4, #8]
 8021dfe:	6122      	str	r2, [r4, #16]
 8021e00:	e7ed      	b.n	8021dde <ucdr_deserialize_array_uint8_t+0x42>
 8021e02:	bf00      	nop

08021e04 <ucdr_deserialize_endian_array_uint8_t>:
 8021e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021e08:	4619      	mov	r1, r3
 8021e0a:	461e      	mov	r6, r3
 8021e0c:	4690      	mov	r8, r2
 8021e0e:	4604      	mov	r4, r0
 8021e10:	f7fb fb10 	bl	801d434 <ucdr_check_buffer_available_for>
 8021e14:	b9e8      	cbnz	r0, 8021e52 <ucdr_deserialize_endian_array_uint8_t+0x4e>
 8021e16:	4637      	mov	r7, r6
 8021e18:	e00c      	b.n	8021e34 <ucdr_deserialize_endian_array_uint8_t+0x30>
 8021e1a:	eb08 0003 	add.w	r0, r8, r3
 8021e1e:	68a1      	ldr	r1, [r4, #8]
 8021e20:	462a      	mov	r2, r5
 8021e22:	1b7f      	subs	r7, r7, r5
 8021e24:	f001 fdb6 	bl	8023994 <memcpy>
 8021e28:	68a3      	ldr	r3, [r4, #8]
 8021e2a:	6920      	ldr	r0, [r4, #16]
 8021e2c:	442b      	add	r3, r5
 8021e2e:	4428      	add	r0, r5
 8021e30:	60a3      	str	r3, [r4, #8]
 8021e32:	6120      	str	r0, [r4, #16]
 8021e34:	2201      	movs	r2, #1
 8021e36:	4639      	mov	r1, r7
 8021e38:	4620      	mov	r0, r4
 8021e3a:	f7fb fb83 	bl	801d544 <ucdr_check_final_buffer_behavior_array>
 8021e3e:	1bf3      	subs	r3, r6, r7
 8021e40:	4605      	mov	r5, r0
 8021e42:	2800      	cmp	r0, #0
 8021e44:	d1e9      	bne.n	8021e1a <ucdr_deserialize_endian_array_uint8_t+0x16>
 8021e46:	2301      	movs	r3, #1
 8021e48:	7da0      	ldrb	r0, [r4, #22]
 8021e4a:	7563      	strb	r3, [r4, #21]
 8021e4c:	4058      	eors	r0, r3
 8021e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021e52:	4632      	mov	r2, r6
 8021e54:	4640      	mov	r0, r8
 8021e56:	68a1      	ldr	r1, [r4, #8]
 8021e58:	f001 fd9c 	bl	8023994 <memcpy>
 8021e5c:	68a2      	ldr	r2, [r4, #8]
 8021e5e:	6923      	ldr	r3, [r4, #16]
 8021e60:	4432      	add	r2, r6
 8021e62:	4433      	add	r3, r6
 8021e64:	60a2      	str	r2, [r4, #8]
 8021e66:	6123      	str	r3, [r4, #16]
 8021e68:	e7ed      	b.n	8021e46 <ucdr_deserialize_endian_array_uint8_t+0x42>
 8021e6a:	bf00      	nop

08021e6c <ucdr_serialize_sequence_char>:
 8021e6c:	b570      	push	{r4, r5, r6, lr}
 8021e6e:	4615      	mov	r5, r2
 8021e70:	460e      	mov	r6, r1
 8021e72:	7d01      	ldrb	r1, [r0, #20]
 8021e74:	4604      	mov	r4, r0
 8021e76:	f7fa fe33 	bl	801cae0 <ucdr_serialize_endian_uint32_t>
 8021e7a:	b90d      	cbnz	r5, 8021e80 <ucdr_serialize_sequence_char+0x14>
 8021e7c:	2001      	movs	r0, #1
 8021e7e:	bd70      	pop	{r4, r5, r6, pc}
 8021e80:	462b      	mov	r3, r5
 8021e82:	4632      	mov	r2, r6
 8021e84:	7d21      	ldrb	r1, [r4, #20]
 8021e86:	4620      	mov	r0, r4
 8021e88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021e8c:	f7ff bebc 	b.w	8021c08 <ucdr_serialize_endian_array_char>

08021e90 <ucdr_deserialize_sequence_char>:
 8021e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021e94:	461d      	mov	r5, r3
 8021e96:	4616      	mov	r6, r2
 8021e98:	460f      	mov	r7, r1
 8021e9a:	461a      	mov	r2, r3
 8021e9c:	7d01      	ldrb	r1, [r0, #20]
 8021e9e:	4604      	mov	r4, r0
 8021ea0:	f7fa ff46 	bl	801cd30 <ucdr_deserialize_endian_uint32_t>
 8021ea4:	682b      	ldr	r3, [r5, #0]
 8021ea6:	429e      	cmp	r6, r3
 8021ea8:	d201      	bcs.n	8021eae <ucdr_deserialize_sequence_char+0x1e>
 8021eaa:	2201      	movs	r2, #1
 8021eac:	75a2      	strb	r2, [r4, #22]
 8021eae:	b913      	cbnz	r3, 8021eb6 <ucdr_deserialize_sequence_char+0x26>
 8021eb0:	2001      	movs	r0, #1
 8021eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021eb6:	463a      	mov	r2, r7
 8021eb8:	7d21      	ldrb	r1, [r4, #20]
 8021eba:	4620      	mov	r0, r4
 8021ebc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021ec0:	f7ff bed4 	b.w	8021c6c <ucdr_deserialize_endian_array_char>

08021ec4 <ucdr_serialize_sequence_uint8_t>:
 8021ec4:	b570      	push	{r4, r5, r6, lr}
 8021ec6:	4615      	mov	r5, r2
 8021ec8:	460e      	mov	r6, r1
 8021eca:	7d01      	ldrb	r1, [r0, #20]
 8021ecc:	4604      	mov	r4, r0
 8021ece:	f7fa fe07 	bl	801cae0 <ucdr_serialize_endian_uint32_t>
 8021ed2:	b90d      	cbnz	r5, 8021ed8 <ucdr_serialize_sequence_uint8_t+0x14>
 8021ed4:	2001      	movs	r0, #1
 8021ed6:	bd70      	pop	{r4, r5, r6, pc}
 8021ed8:	462b      	mov	r3, r5
 8021eda:	4632      	mov	r2, r6
 8021edc:	7d21      	ldrb	r1, [r4, #20]
 8021ede:	4620      	mov	r0, r4
 8021ee0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021ee4:	f7ff bf28 	b.w	8021d38 <ucdr_serialize_endian_array_uint8_t>

08021ee8 <ucdr_deserialize_sequence_uint8_t>:
 8021ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021eec:	461d      	mov	r5, r3
 8021eee:	4616      	mov	r6, r2
 8021ef0:	460f      	mov	r7, r1
 8021ef2:	461a      	mov	r2, r3
 8021ef4:	7d01      	ldrb	r1, [r0, #20]
 8021ef6:	4604      	mov	r4, r0
 8021ef8:	f7fa ff1a 	bl	801cd30 <ucdr_deserialize_endian_uint32_t>
 8021efc:	682b      	ldr	r3, [r5, #0]
 8021efe:	429e      	cmp	r6, r3
 8021f00:	d201      	bcs.n	8021f06 <ucdr_deserialize_sequence_uint8_t+0x1e>
 8021f02:	2201      	movs	r2, #1
 8021f04:	75a2      	strb	r2, [r4, #22]
 8021f06:	b913      	cbnz	r3, 8021f0e <ucdr_deserialize_sequence_uint8_t+0x26>
 8021f08:	2001      	movs	r0, #1
 8021f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021f0e:	463a      	mov	r2, r7
 8021f10:	7d21      	ldrb	r1, [r4, #20]
 8021f12:	4620      	mov	r0, r4
 8021f14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021f18:	f7ff bf74 	b.w	8021e04 <ucdr_deserialize_endian_array_uint8_t>

08021f1c <ucdr_serialize_string>:
 8021f1c:	b510      	push	{r4, lr}
 8021f1e:	b082      	sub	sp, #8
 8021f20:	4604      	mov	r4, r0
 8021f22:	4608      	mov	r0, r1
 8021f24:	9101      	str	r1, [sp, #4]
 8021f26:	f7de f97d 	bl	8000224 <strlen>
 8021f2a:	4602      	mov	r2, r0
 8021f2c:	9901      	ldr	r1, [sp, #4]
 8021f2e:	4620      	mov	r0, r4
 8021f30:	3201      	adds	r2, #1
 8021f32:	b002      	add	sp, #8
 8021f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021f38:	f7ff bf98 	b.w	8021e6c <ucdr_serialize_sequence_char>

08021f3c <ucdr_deserialize_string>:
 8021f3c:	b500      	push	{lr}
 8021f3e:	b083      	sub	sp, #12
 8021f40:	ab01      	add	r3, sp, #4
 8021f42:	f7ff ffa5 	bl	8021e90 <ucdr_deserialize_sequence_char>
 8021f46:	b003      	add	sp, #12
 8021f48:	f85d fb04 	ldr.w	pc, [sp], #4

08021f4c <uxr_init_input_best_effort_stream>:
 8021f4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8021f50:	8003      	strh	r3, [r0, #0]
 8021f52:	4770      	bx	lr

08021f54 <uxr_reset_input_best_effort_stream>:
 8021f54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8021f58:	8003      	strh	r3, [r0, #0]
 8021f5a:	4770      	bx	lr

08021f5c <uxr_receive_best_effort_message>:
 8021f5c:	b538      	push	{r3, r4, r5, lr}
 8021f5e:	4604      	mov	r4, r0
 8021f60:	8800      	ldrh	r0, [r0, #0]
 8021f62:	460d      	mov	r5, r1
 8021f64:	f000 fe20 	bl	8022ba8 <uxr_seq_num_cmp>
 8021f68:	4603      	mov	r3, r0
 8021f6a:	0fc0      	lsrs	r0, r0, #31
 8021f6c:	2b00      	cmp	r3, #0
 8021f6e:	bfb8      	it	lt
 8021f70:	8025      	strhlt	r5, [r4, #0]
 8021f72:	bd38      	pop	{r3, r4, r5, pc}

08021f74 <on_full_input_buffer>:
 8021f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021f76:	4605      	mov	r5, r0
 8021f78:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8021f7c:	460c      	mov	r4, r1
 8021f7e:	7d0f      	ldrb	r7, [r1, #20]
 8021f80:	682a      	ldr	r2, [r5, #0]
 8021f82:	e9d1 6000 	ldrd	r6, r0, [r1]
 8021f86:	1b93      	subs	r3, r2, r6
 8021f88:	fbb0 f2fc 	udiv	r2, r0, ip
 8021f8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8021f90:	3301      	adds	r3, #1
 8021f92:	b29b      	uxth	r3, r3
 8021f94:	fbb3 f1fc 	udiv	r1, r3, ip
 8021f98:	fb0c 3311 	mls	r3, ip, r1, r3
 8021f9c:	b29b      	uxth	r3, r3
 8021f9e:	fb02 f203 	mul.w	r2, r2, r3
 8021fa2:	1d13      	adds	r3, r2, #4
 8021fa4:	4433      	add	r3, r6
 8021fa6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8021faa:	b117      	cbz	r7, 8021fb2 <on_full_input_buffer+0x3e>
 8021fac:	2100      	movs	r1, #0
 8021fae:	f843 1c04 	str.w	r1, [r3, #-4]
 8021fb2:	2803      	cmp	r0, #3
 8021fb4:	d801      	bhi.n	8021fba <on_full_input_buffer+0x46>
 8021fb6:	2001      	movs	r0, #1
 8021fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021fba:	f102 0108 	add.w	r1, r2, #8
 8021fbe:	692b      	ldr	r3, [r5, #16]
 8021fc0:	1f02      	subs	r2, r0, #4
 8021fc2:	4628      	mov	r0, r5
 8021fc4:	4431      	add	r1, r6
 8021fc6:	f7fb fa7f 	bl	801d4c8 <ucdr_init_buffer_origin>
 8021fca:	4628      	mov	r0, r5
 8021fcc:	4622      	mov	r2, r4
 8021fce:	4902      	ldr	r1, [pc, #8]	; (8021fd8 <on_full_input_buffer+0x64>)
 8021fd0:	f7fb fa58 	bl	801d484 <ucdr_set_on_full_buffer_callback>
 8021fd4:	2000      	movs	r0, #0
 8021fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021fd8:	08021f75 	.word	0x08021f75

08021fdc <uxr_init_input_reliable_stream>:
 8021fdc:	b4f0      	push	{r4, r5, r6, r7}
 8021fde:	9c04      	ldr	r4, [sp, #16]
 8021fe0:	2700      	movs	r7, #0
 8021fe2:	6001      	str	r1, [r0, #0]
 8021fe4:	8103      	strh	r3, [r0, #8]
 8021fe6:	6042      	str	r2, [r0, #4]
 8021fe8:	6104      	str	r4, [r0, #16]
 8021fea:	7507      	strb	r7, [r0, #20]
 8021fec:	b1ab      	cbz	r3, 802201a <uxr_init_input_reliable_stream+0x3e>
 8021fee:	600f      	str	r7, [r1, #0]
 8021ff0:	8902      	ldrh	r2, [r0, #8]
 8021ff2:	2a01      	cmp	r2, #1
 8021ff4:	d911      	bls.n	802201a <uxr_init_input_reliable_stream+0x3e>
 8021ff6:	2101      	movs	r1, #1
 8021ff8:	6845      	ldr	r5, [r0, #4]
 8021ffa:	1c4e      	adds	r6, r1, #1
 8021ffc:	6804      	ldr	r4, [r0, #0]
 8021ffe:	fbb1 f3f2 	udiv	r3, r1, r2
 8022002:	fbb5 f5f2 	udiv	r5, r5, r2
 8022006:	fb02 1313 	mls	r3, r2, r3, r1
 802200a:	b2b1      	uxth	r1, r6
 802200c:	b29b      	uxth	r3, r3
 802200e:	fb03 f305 	mul.w	r3, r3, r5
 8022012:	50e7      	str	r7, [r4, r3]
 8022014:	8902      	ldrh	r2, [r0, #8]
 8022016:	428a      	cmp	r2, r1
 8022018:	d8ee      	bhi.n	8021ff8 <uxr_init_input_reliable_stream+0x1c>
 802201a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802201e:	bcf0      	pop	{r4, r5, r6, r7}
 8022020:	60c3      	str	r3, [r0, #12]
 8022022:	4770      	bx	lr

08022024 <uxr_reset_input_reliable_stream>:
 8022024:	8902      	ldrh	r2, [r0, #8]
 8022026:	b1ca      	cbz	r2, 802205c <uxr_reset_input_reliable_stream+0x38>
 8022028:	b4f0      	push	{r4, r5, r6, r7}
 802202a:	2600      	movs	r6, #0
 802202c:	4631      	mov	r1, r6
 802202e:	4637      	mov	r7, r6
 8022030:	6844      	ldr	r4, [r0, #4]
 8022032:	3601      	adds	r6, #1
 8022034:	6805      	ldr	r5, [r0, #0]
 8022036:	fbb1 f3f2 	udiv	r3, r1, r2
 802203a:	fbb4 f4f2 	udiv	r4, r4, r2
 802203e:	fb02 1313 	mls	r3, r2, r3, r1
 8022042:	b2b1      	uxth	r1, r6
 8022044:	b29b      	uxth	r3, r3
 8022046:	fb03 f304 	mul.w	r3, r3, r4
 802204a:	50ef      	str	r7, [r5, r3]
 802204c:	8902      	ldrh	r2, [r0, #8]
 802204e:	428a      	cmp	r2, r1
 8022050:	d8ee      	bhi.n	8022030 <uxr_reset_input_reliable_stream+0xc>
 8022052:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022056:	bcf0      	pop	{r4, r5, r6, r7}
 8022058:	60c3      	str	r3, [r0, #12]
 802205a:	4770      	bx	lr
 802205c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022060:	60c3      	str	r3, [r0, #12]
 8022062:	4770      	bx	lr

08022064 <uxr_receive_reliable_message>:
 8022064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022068:	4604      	mov	r4, r0
 802206a:	460d      	mov	r5, r1
 802206c:	8901      	ldrh	r1, [r0, #8]
 802206e:	4617      	mov	r7, r2
 8022070:	8980      	ldrh	r0, [r0, #12]
 8022072:	4698      	mov	r8, r3
 8022074:	f000 fd90 	bl	8022b98 <uxr_seq_num_add>
 8022078:	4629      	mov	r1, r5
 802207a:	4606      	mov	r6, r0
 802207c:	89a0      	ldrh	r0, [r4, #12]
 802207e:	f000 fd93 	bl	8022ba8 <uxr_seq_num_cmp>
 8022082:	2800      	cmp	r0, #0
 8022084:	db0a      	blt.n	802209c <uxr_receive_reliable_message+0x38>
 8022086:	2600      	movs	r6, #0
 8022088:	4629      	mov	r1, r5
 802208a:	89e0      	ldrh	r0, [r4, #14]
 802208c:	f000 fd8c 	bl	8022ba8 <uxr_seq_num_cmp>
 8022090:	2800      	cmp	r0, #0
 8022092:	4630      	mov	r0, r6
 8022094:	bfb8      	it	lt
 8022096:	81e5      	strhlt	r5, [r4, #14]
 8022098:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802209c:	4630      	mov	r0, r6
 802209e:	4629      	mov	r1, r5
 80220a0:	f000 fd82 	bl	8022ba8 <uxr_seq_num_cmp>
 80220a4:	2800      	cmp	r0, #0
 80220a6:	dbee      	blt.n	8022086 <uxr_receive_reliable_message+0x22>
 80220a8:	6923      	ldr	r3, [r4, #16]
 80220aa:	4638      	mov	r0, r7
 80220ac:	4798      	blx	r3
 80220ae:	2101      	movs	r1, #1
 80220b0:	4681      	mov	r9, r0
 80220b2:	89a0      	ldrh	r0, [r4, #12]
 80220b4:	f000 fd70 	bl	8022b98 <uxr_seq_num_add>
 80220b8:	1a2e      	subs	r6, r5, r0
 80220ba:	fab6 f686 	clz	r6, r6
 80220be:	0976      	lsrs	r6, r6, #5
 80220c0:	f1b9 0f00 	cmp.w	r9, #0
 80220c4:	bf18      	it	ne
 80220c6:	2600      	movne	r6, #0
 80220c8:	b126      	cbz	r6, 80220d4 <uxr_receive_reliable_message+0x70>
 80220ca:	2300      	movs	r3, #0
 80220cc:	9a08      	ldr	r2, [sp, #32]
 80220ce:	81a0      	strh	r0, [r4, #12]
 80220d0:	7013      	strb	r3, [r2, #0]
 80220d2:	e7d9      	b.n	8022088 <uxr_receive_reliable_message+0x24>
 80220d4:	8921      	ldrh	r1, [r4, #8]
 80220d6:	fbb5 f3f1 	udiv	r3, r5, r1
 80220da:	e9d4 0200 	ldrd	r0, r2, [r4]
 80220de:	fb01 5313 	mls	r3, r1, r3, r5
 80220e2:	fbb2 f2f1 	udiv	r2, r2, r1
 80220e6:	b29b      	uxth	r3, r3
 80220e8:	fb03 f302 	mul.w	r3, r3, r2
 80220ec:	3304      	adds	r3, #4
 80220ee:	4418      	add	r0, r3
 80220f0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80220f4:	2b00      	cmp	r3, #0
 80220f6:	d1c6      	bne.n	8022086 <uxr_receive_reliable_message+0x22>
 80220f8:	4639      	mov	r1, r7
 80220fa:	4642      	mov	r2, r8
 80220fc:	f001 fc4a 	bl	8023994 <memcpy>
 8022100:	8921      	ldrh	r1, [r4, #8]
 8022102:	6862      	ldr	r2, [r4, #4]
 8022104:	2001      	movs	r0, #1
 8022106:	fbb5 f3f1 	udiv	r3, r5, r1
 802210a:	fbb2 f2f1 	udiv	r2, r2, r1
 802210e:	fb01 5313 	mls	r3, r1, r3, r5
 8022112:	6821      	ldr	r1, [r4, #0]
 8022114:	b29b      	uxth	r3, r3
 8022116:	fb03 f302 	mul.w	r3, r3, r2
 802211a:	f841 8003 	str.w	r8, [r1, r3]
 802211e:	9b08      	ldr	r3, [sp, #32]
 8022120:	7018      	strb	r0, [r3, #0]
 8022122:	f1b9 0f00 	cmp.w	r9, #0
 8022126:	d0ae      	beq.n	8022086 <uxr_receive_reliable_message+0x22>
 8022128:	89a6      	ldrh	r6, [r4, #12]
 802212a:	e001      	b.n	8022130 <uxr_receive_reliable_message+0xcc>
 802212c:	2801      	cmp	r0, #1
 802212e:	d1aa      	bne.n	8022086 <uxr_receive_reliable_message+0x22>
 8022130:	4630      	mov	r0, r6
 8022132:	2101      	movs	r1, #1
 8022134:	f000 fd30 	bl	8022b98 <uxr_seq_num_add>
 8022138:	8927      	ldrh	r7, [r4, #8]
 802213a:	4606      	mov	r6, r0
 802213c:	fbb0 f3f7 	udiv	r3, r0, r7
 8022140:	e9d4 2100 	ldrd	r2, r1, [r4]
 8022144:	fb07 0313 	mls	r3, r7, r3, r0
 8022148:	fbb1 f1f7 	udiv	r1, r1, r7
 802214c:	b29b      	uxth	r3, r3
 802214e:	fb03 f301 	mul.w	r3, r3, r1
 8022152:	3304      	adds	r3, #4
 8022154:	18d0      	adds	r0, r2, r3
 8022156:	f850 3c04 	ldr.w	r3, [r0, #-4]
 802215a:	2b00      	cmp	r3, #0
 802215c:	d093      	beq.n	8022086 <uxr_receive_reliable_message+0x22>
 802215e:	6923      	ldr	r3, [r4, #16]
 8022160:	4798      	blx	r3
 8022162:	2802      	cmp	r0, #2
 8022164:	d1e2      	bne.n	802212c <uxr_receive_reliable_message+0xc8>
 8022166:	2601      	movs	r6, #1
 8022168:	e78e      	b.n	8022088 <uxr_receive_reliable_message+0x24>
 802216a:	bf00      	nop

0802216c <uxr_next_input_reliable_buffer_available>:
 802216c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022170:	4604      	mov	r4, r0
 8022172:	460f      	mov	r7, r1
 8022174:	8980      	ldrh	r0, [r0, #12]
 8022176:	2101      	movs	r1, #1
 8022178:	4690      	mov	r8, r2
 802217a:	f000 fd0d 	bl	8022b98 <uxr_seq_num_add>
 802217e:	8921      	ldrh	r1, [r4, #8]
 8022180:	fbb0 f5f1 	udiv	r5, r0, r1
 8022184:	e9d4 3200 	ldrd	r3, r2, [r4]
 8022188:	fb01 0515 	mls	r5, r1, r5, r0
 802218c:	fbb2 f2f1 	udiv	r2, r2, r1
 8022190:	b2ad      	uxth	r5, r5
 8022192:	fb05 f502 	mul.w	r5, r5, r2
 8022196:	3504      	adds	r5, #4
 8022198:	441d      	add	r5, r3
 802219a:	f855 9c04 	ldr.w	r9, [r5, #-4]
 802219e:	f1b9 0f00 	cmp.w	r9, #0
 80221a2:	d025      	beq.n	80221f0 <uxr_next_input_reliable_buffer_available+0x84>
 80221a4:	4606      	mov	r6, r0
 80221a6:	6923      	ldr	r3, [r4, #16]
 80221a8:	4628      	mov	r0, r5
 80221aa:	4798      	blx	r3
 80221ac:	4682      	mov	sl, r0
 80221ae:	b310      	cbz	r0, 80221f6 <uxr_next_input_reliable_buffer_available+0x8a>
 80221b0:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80221b4:	e005      	b.n	80221c2 <uxr_next_input_reliable_buffer_available+0x56>
 80221b6:	6923      	ldr	r3, [r4, #16]
 80221b8:	4798      	blx	r3
 80221ba:	2802      	cmp	r0, #2
 80221bc:	d032      	beq.n	8022224 <uxr_next_input_reliable_buffer_available+0xb8>
 80221be:	2801      	cmp	r0, #1
 80221c0:	d116      	bne.n	80221f0 <uxr_next_input_reliable_buffer_available+0x84>
 80221c2:	4650      	mov	r0, sl
 80221c4:	2101      	movs	r1, #1
 80221c6:	f000 fce7 	bl	8022b98 <uxr_seq_num_add>
 80221ca:	8921      	ldrh	r1, [r4, #8]
 80221cc:	4682      	mov	sl, r0
 80221ce:	fbba f3f1 	udiv	r3, sl, r1
 80221d2:	e9d4 0200 	ldrd	r0, r2, [r4]
 80221d6:	fb01 a313 	mls	r3, r1, r3, sl
 80221da:	fbb2 f2f1 	udiv	r2, r2, r1
 80221de:	b29b      	uxth	r3, r3
 80221e0:	fb03 f302 	mul.w	r3, r3, r2
 80221e4:	3304      	adds	r3, #4
 80221e6:	4418      	add	r0, r3
 80221e8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80221ec:	2b00      	cmp	r3, #0
 80221ee:	d1e2      	bne.n	80221b6 <uxr_next_input_reliable_buffer_available+0x4a>
 80221f0:	2000      	movs	r0, #0
 80221f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80221f6:	464a      	mov	r2, r9
 80221f8:	4629      	mov	r1, r5
 80221fa:	4638      	mov	r0, r7
 80221fc:	f7fb f96c 	bl	801d4d8 <ucdr_init_buffer>
 8022200:	8921      	ldrh	r1, [r4, #8]
 8022202:	6862      	ldr	r2, [r4, #4]
 8022204:	2001      	movs	r0, #1
 8022206:	fbb6 f3f1 	udiv	r3, r6, r1
 802220a:	fbb2 f2f1 	udiv	r2, r2, r1
 802220e:	fb01 6313 	mls	r3, r1, r3, r6
 8022212:	6821      	ldr	r1, [r4, #0]
 8022214:	b29b      	uxth	r3, r3
 8022216:	fb03 f302 	mul.w	r3, r3, r2
 802221a:	f841 a003 	str.w	sl, [r1, r3]
 802221e:	81a6      	strh	r6, [r4, #12]
 8022220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022224:	f8b4 e008 	ldrh.w	lr, [r4, #8]
 8022228:	eb05 0108 	add.w	r1, r5, r8
 802222c:	6863      	ldr	r3, [r4, #4]
 802222e:	f04f 0c00 	mov.w	ip, #0
 8022232:	eba9 0208 	sub.w	r2, r9, r8
 8022236:	fbb6 f0fe 	udiv	r0, r6, lr
 802223a:	fbb3 f5fe 	udiv	r5, r3, lr
 802223e:	fb0e 6610 	mls	r6, lr, r0, r6
 8022242:	6823      	ldr	r3, [r4, #0]
 8022244:	4638      	mov	r0, r7
 8022246:	b2b6      	uxth	r6, r6
 8022248:	fb06 f605 	mul.w	r6, r6, r5
 802224c:	f843 c006 	str.w	ip, [r3, r6]
 8022250:	f7fb f942 	bl	801d4d8 <ucdr_init_buffer>
 8022254:	4638      	mov	r0, r7
 8022256:	4622      	mov	r2, r4
 8022258:	4903      	ldr	r1, [pc, #12]	; (8022268 <uxr_next_input_reliable_buffer_available+0xfc>)
 802225a:	f7fb f913 	bl	801d484 <ucdr_set_on_full_buffer_callback>
 802225e:	2001      	movs	r0, #1
 8022260:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8022264:	e7c5      	b.n	80221f2 <uxr_next_input_reliable_buffer_available+0x86>
 8022266:	bf00      	nop
 8022268:	08021f75 	.word	0x08021f75

0802226c <uxr_process_heartbeat>:
 802226c:	b538      	push	{r3, r4, r5, lr}
 802226e:	4611      	mov	r1, r2
 8022270:	4604      	mov	r4, r0
 8022272:	89c0      	ldrh	r0, [r0, #14]
 8022274:	4615      	mov	r5, r2
 8022276:	f000 fc97 	bl	8022ba8 <uxr_seq_num_cmp>
 802227a:	2800      	cmp	r0, #0
 802227c:	bfb8      	it	lt
 802227e:	81e5      	strhlt	r5, [r4, #14]
 8022280:	bd38      	pop	{r3, r4, r5, pc}
 8022282:	bf00      	nop

08022284 <uxr_compute_acknack>:
 8022284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022288:	8903      	ldrh	r3, [r0, #8]
 802228a:	4604      	mov	r4, r0
 802228c:	460f      	mov	r7, r1
 802228e:	8985      	ldrh	r5, [r0, #12]
 8022290:	b1db      	cbz	r3, 80222ca <uxr_compute_acknack+0x46>
 8022292:	4628      	mov	r0, r5
 8022294:	2601      	movs	r6, #1
 8022296:	e004      	b.n	80222a2 <uxr_compute_acknack+0x1e>
 8022298:	4566      	cmp	r6, ip
 802229a:	f106 0601 	add.w	r6, r6, #1
 802229e:	d214      	bcs.n	80222ca <uxr_compute_acknack+0x46>
 80222a0:	89a0      	ldrh	r0, [r4, #12]
 80222a2:	b2b1      	uxth	r1, r6
 80222a4:	f000 fc78 	bl	8022b98 <uxr_seq_num_add>
 80222a8:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80222ac:	fbb0 f2fc 	udiv	r2, r0, ip
 80222b0:	e9d4 1300 	ldrd	r1, r3, [r4]
 80222b4:	fb0c 0212 	mls	r2, ip, r2, r0
 80222b8:	fbb3 f3fc 	udiv	r3, r3, ip
 80222bc:	b292      	uxth	r2, r2
 80222be:	fb02 1303 	mla	r3, r2, r3, r1
 80222c2:	681b      	ldr	r3, [r3, #0]
 80222c4:	2b00      	cmp	r3, #0
 80222c6:	d1e7      	bne.n	8022298 <uxr_compute_acknack+0x14>
 80222c8:	4605      	mov	r5, r0
 80222ca:	4628      	mov	r0, r5
 80222cc:	803d      	strh	r5, [r7, #0]
 80222ce:	89e5      	ldrh	r5, [r4, #14]
 80222d0:	2101      	movs	r1, #1
 80222d2:	f000 fc65 	bl	8022ba0 <uxr_seq_num_sub>
 80222d6:	4601      	mov	r1, r0
 80222d8:	4628      	mov	r0, r5
 80222da:	f000 fc61 	bl	8022ba0 <uxr_seq_num_sub>
 80222de:	4606      	mov	r6, r0
 80222e0:	b320      	cbz	r0, 802232c <uxr_compute_acknack+0xa8>
 80222e2:	f04f 0900 	mov.w	r9, #0
 80222e6:	f04f 0801 	mov.w	r8, #1
 80222ea:	464d      	mov	r5, r9
 80222ec:	fa1f f189 	uxth.w	r1, r9
 80222f0:	8838      	ldrh	r0, [r7, #0]
 80222f2:	f000 fc51 	bl	8022b98 <uxr_seq_num_add>
 80222f6:	8923      	ldrh	r3, [r4, #8]
 80222f8:	fa08 fc09 	lsl.w	ip, r8, r9
 80222fc:	f109 0901 	add.w	r9, r9, #1
 8022300:	fbb0 fef3 	udiv	lr, r0, r3
 8022304:	e9d4 2100 	ldrd	r2, r1, [r4]
 8022308:	ea4c 0c05 	orr.w	ip, ip, r5
 802230c:	fbb1 f1f3 	udiv	r1, r1, r3
 8022310:	fb0e 0313 	mls	r3, lr, r3, r0
 8022314:	b29b      	uxth	r3, r3
 8022316:	fb03 2101 	mla	r1, r3, r1, r2
 802231a:	680b      	ldr	r3, [r1, #0]
 802231c:	b90b      	cbnz	r3, 8022322 <uxr_compute_acknack+0x9e>
 802231e:	fa1f f58c 	uxth.w	r5, ip
 8022322:	454e      	cmp	r6, r9
 8022324:	d1e2      	bne.n	80222ec <uxr_compute_acknack+0x68>
 8022326:	4628      	mov	r0, r5
 8022328:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802232c:	4605      	mov	r5, r0
 802232e:	4628      	mov	r0, r5
 8022330:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08022334 <uxr_init_output_best_effort_stream>:
 8022334:	b410      	push	{r4}
 8022336:	f64f 74ff 	movw	r4, #65535	; 0xffff
 802233a:	7303      	strb	r3, [r0, #12]
 802233c:	6082      	str	r2, [r0, #8]
 802233e:	81c4      	strh	r4, [r0, #14]
 8022340:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022344:	e9c0 1300 	strd	r1, r3, [r0]
 8022348:	4770      	bx	lr
 802234a:	bf00      	nop

0802234c <uxr_reset_output_best_effort_stream>:
 802234c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022350:	7b03      	ldrb	r3, [r0, #12]
 8022352:	81c2      	strh	r2, [r0, #14]
 8022354:	6043      	str	r3, [r0, #4]
 8022356:	4770      	bx	lr

08022358 <uxr_prepare_best_effort_buffer_to_write>:
 8022358:	b5f0      	push	{r4, r5, r6, r7, lr}
 802235a:	4604      	mov	r4, r0
 802235c:	b083      	sub	sp, #12
 802235e:	6840      	ldr	r0, [r0, #4]
 8022360:	460d      	mov	r5, r1
 8022362:	4616      	mov	r6, r2
 8022364:	f7fc fb36 	bl	801e9d4 <uxr_submessage_padding>
 8022368:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 802236c:	4410      	add	r0, r2
 802236e:	1942      	adds	r2, r0, r5
 8022370:	4293      	cmp	r3, r2
 8022372:	bf2c      	ite	cs
 8022374:	2701      	movcs	r7, #1
 8022376:	2700      	movcc	r7, #0
 8022378:	d202      	bcs.n	8022380 <uxr_prepare_best_effort_buffer_to_write+0x28>
 802237a:	4638      	mov	r0, r7
 802237c:	b003      	add	sp, #12
 802237e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022380:	9000      	str	r0, [sp, #0]
 8022382:	2300      	movs	r3, #0
 8022384:	4630      	mov	r0, r6
 8022386:	6821      	ldr	r1, [r4, #0]
 8022388:	f7fb f894 	bl	801d4b4 <ucdr_init_buffer_origin_offset>
 802238c:	6861      	ldr	r1, [r4, #4]
 802238e:	4638      	mov	r0, r7
 8022390:	4429      	add	r1, r5
 8022392:	6061      	str	r1, [r4, #4]
 8022394:	b003      	add	sp, #12
 8022396:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022398 <uxr_prepare_best_effort_buffer_to_send>:
 8022398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802239c:	6845      	ldr	r5, [r0, #4]
 802239e:	4604      	mov	r4, r0
 80223a0:	7b00      	ldrb	r0, [r0, #12]
 80223a2:	4285      	cmp	r5, r0
 80223a4:	bf8c      	ite	hi
 80223a6:	2501      	movhi	r5, #1
 80223a8:	2500      	movls	r5, #0
 80223aa:	d802      	bhi.n	80223b2 <uxr_prepare_best_effort_buffer_to_send+0x1a>
 80223ac:	4628      	mov	r0, r5
 80223ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80223b2:	4688      	mov	r8, r1
 80223b4:	89e0      	ldrh	r0, [r4, #14]
 80223b6:	2101      	movs	r1, #1
 80223b8:	4617      	mov	r7, r2
 80223ba:	461e      	mov	r6, r3
 80223bc:	f000 fbec 	bl	8022b98 <uxr_seq_num_add>
 80223c0:	81e0      	strh	r0, [r4, #14]
 80223c2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80223c6:	8030      	strh	r0, [r6, #0]
 80223c8:	4628      	mov	r0, r5
 80223ca:	f8c8 2000 	str.w	r2, [r8]
 80223ce:	603b      	str	r3, [r7, #0]
 80223d0:	7b23      	ldrb	r3, [r4, #12]
 80223d2:	6063      	str	r3, [r4, #4]
 80223d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080223d8 <on_full_output_buffer>:
 80223d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80223da:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 80223de:	460d      	mov	r5, r1
 80223e0:	6803      	ldr	r3, [r0, #0]
 80223e2:	4606      	mov	r6, r0
 80223e4:	7b2a      	ldrb	r2, [r5, #12]
 80223e6:	e9d1 1700 	ldrd	r1, r7, [r1]
 80223ea:	fbb7 f7fc 	udiv	r7, r7, ip
 80223ee:	1a5c      	subs	r4, r3, r1
 80223f0:	6903      	ldr	r3, [r0, #16]
 80223f2:	fbb4 f4f7 	udiv	r4, r4, r7
 80223f6:	3401      	adds	r4, #1
 80223f8:	b2a4      	uxth	r4, r4
 80223fa:	fbb4 fefc 	udiv	lr, r4, ip
 80223fe:	fb0c 441e 	mls	r4, ip, lr, r4
 8022402:	b2a4      	uxth	r4, r4
 8022404:	fb07 f404 	mul.w	r4, r7, r4
 8022408:	590f      	ldr	r7, [r1, r4]
 802240a:	4414      	add	r4, r2
 802240c:	1aba      	subs	r2, r7, r2
 802240e:	3408      	adds	r4, #8
 8022410:	3a04      	subs	r2, #4
 8022412:	4421      	add	r1, r4
 8022414:	f7fb f858 	bl	801d4c8 <ucdr_init_buffer_origin>
 8022418:	4630      	mov	r0, r6
 802241a:	462a      	mov	r2, r5
 802241c:	4902      	ldr	r1, [pc, #8]	; (8022428 <on_full_output_buffer+0x50>)
 802241e:	f7fb f831 	bl	801d484 <ucdr_set_on_full_buffer_callback>
 8022422:	2000      	movs	r0, #0
 8022424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022426:	bf00      	nop
 8022428:	080223d9 	.word	0x080223d9

0802242c <uxr_init_output_reliable_stream>:
 802242c:	b4f0      	push	{r4, r5, r6, r7}
 802242e:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8022432:	6001      	str	r1, [r0, #0]
 8022434:	8103      	strh	r3, [r0, #8]
 8022436:	6042      	str	r2, [r0, #4]
 8022438:	7304      	strb	r4, [r0, #12]
 802243a:	b1b3      	cbz	r3, 802246a <uxr_init_output_reliable_stream+0x3e>
 802243c:	600c      	str	r4, [r1, #0]
 802243e:	8902      	ldrh	r2, [r0, #8]
 8022440:	2a01      	cmp	r2, #1
 8022442:	d912      	bls.n	802246a <uxr_init_output_reliable_stream+0x3e>
 8022444:	2101      	movs	r1, #1
 8022446:	6845      	ldr	r5, [r0, #4]
 8022448:	1c4f      	adds	r7, r1, #1
 802244a:	7b06      	ldrb	r6, [r0, #12]
 802244c:	6804      	ldr	r4, [r0, #0]
 802244e:	fbb1 f3f2 	udiv	r3, r1, r2
 8022452:	fbb5 f5f2 	udiv	r5, r5, r2
 8022456:	fb02 1313 	mls	r3, r2, r3, r1
 802245a:	b2b9      	uxth	r1, r7
 802245c:	b29b      	uxth	r3, r3
 802245e:	fb03 f305 	mul.w	r3, r3, r5
 8022462:	50e6      	str	r6, [r4, r3]
 8022464:	8902      	ldrh	r2, [r0, #8]
 8022466:	428a      	cmp	r2, r1
 8022468:	d8ed      	bhi.n	8022446 <uxr_init_output_reliable_stream+0x1a>
 802246a:	4d08      	ldr	r5, [pc, #32]	; (802248c <uxr_init_output_reliable_stream+0x60>)
 802246c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8022470:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022474:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022478:	2100      	movs	r1, #0
 802247a:	f8c0 500e 	str.w	r5, [r0, #14]
 802247e:	8244      	strh	r4, [r0, #18]
 8022480:	8401      	strh	r1, [r0, #32]
 8022482:	bcf0      	pop	{r4, r5, r6, r7}
 8022484:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8022488:	4770      	bx	lr
 802248a:	bf00      	nop
 802248c:	ffff0000 	.word	0xffff0000

08022490 <uxr_reset_output_reliable_stream>:
 8022490:	8902      	ldrh	r2, [r0, #8]
 8022492:	b4f0      	push	{r4, r5, r6, r7}
 8022494:	b19a      	cbz	r2, 80224be <uxr_reset_output_reliable_stream+0x2e>
 8022496:	2600      	movs	r6, #0
 8022498:	4631      	mov	r1, r6
 802249a:	6845      	ldr	r5, [r0, #4]
 802249c:	3601      	adds	r6, #1
 802249e:	7b07      	ldrb	r7, [r0, #12]
 80224a0:	6804      	ldr	r4, [r0, #0]
 80224a2:	fbb1 f3f2 	udiv	r3, r1, r2
 80224a6:	fbb5 f5f2 	udiv	r5, r5, r2
 80224aa:	fb02 1313 	mls	r3, r2, r3, r1
 80224ae:	b2b1      	uxth	r1, r6
 80224b0:	b29b      	uxth	r3, r3
 80224b2:	fb03 f305 	mul.w	r3, r3, r5
 80224b6:	50e7      	str	r7, [r4, r3]
 80224b8:	8902      	ldrh	r2, [r0, #8]
 80224ba:	428a      	cmp	r2, r1
 80224bc:	d8ed      	bhi.n	802249a <uxr_reset_output_reliable_stream+0xa>
 80224be:	4d08      	ldr	r5, [pc, #32]	; (80224e0 <uxr_reset_output_reliable_stream+0x50>)
 80224c0:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80224c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80224c8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80224cc:	2100      	movs	r1, #0
 80224ce:	f8c0 500e 	str.w	r5, [r0, #14]
 80224d2:	8244      	strh	r4, [r0, #18]
 80224d4:	8401      	strh	r1, [r0, #32]
 80224d6:	bcf0      	pop	{r4, r5, r6, r7}
 80224d8:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80224dc:	4770      	bx	lr
 80224de:	bf00      	nop
 80224e0:	ffff0000 	.word	0xffff0000

080224e4 <uxr_prepare_reliable_buffer_to_write>:
 80224e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80224e8:	8906      	ldrh	r6, [r0, #8]
 80224ea:	b091      	sub	sp, #68	; 0x44
 80224ec:	89c4      	ldrh	r4, [r0, #14]
 80224ee:	4605      	mov	r5, r0
 80224f0:	9205      	str	r2, [sp, #20]
 80224f2:	4688      	mov	r8, r1
 80224f4:	6840      	ldr	r0, [r0, #4]
 80224f6:	2104      	movs	r1, #4
 80224f8:	682b      	ldr	r3, [r5, #0]
 80224fa:	fbb4 f2f6 	udiv	r2, r4, r6
 80224fe:	fbb0 f0f6 	udiv	r0, r0, r6
 8022502:	fb06 4212 	mls	r2, r6, r2, r4
 8022506:	1f06      	subs	r6, r0, #4
 8022508:	9006      	str	r0, [sp, #24]
 802250a:	b292      	uxth	r2, r2
 802250c:	fb00 f202 	mul.w	r2, r0, r2
 8022510:	440a      	add	r2, r1
 8022512:	4413      	add	r3, r2
 8022514:	f853 7c04 	ldr.w	r7, [r3, #-4]
 8022518:	9304      	str	r3, [sp, #16]
 802251a:	4638      	mov	r0, r7
 802251c:	f7fa ffe0 	bl	801d4e0 <ucdr_alignment>
 8022520:	183b      	adds	r3, r7, r0
 8022522:	eb03 0708 	add.w	r7, r3, r8
 8022526:	9303      	str	r3, [sp, #12]
 8022528:	42b7      	cmp	r7, r6
 802252a:	f240 80e5 	bls.w	80226f8 <uxr_prepare_reliable_buffer_to_write+0x214>
 802252e:	7b28      	ldrb	r0, [r5, #12]
 8022530:	eb00 0308 	add.w	r3, r0, r8
 8022534:	42b3      	cmp	r3, r6
 8022536:	f240 80cc 	bls.w	80226d2 <uxr_prepare_reliable_buffer_to_write+0x1ee>
 802253a:	9b03      	ldr	r3, [sp, #12]
 802253c:	3304      	adds	r3, #4
 802253e:	42b3      	cmp	r3, r6
 8022540:	f080 8117 	bcs.w	8022772 <uxr_prepare_reliable_buffer_to_write+0x28e>
 8022544:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 8022548:	f1bc 0f00 	cmp.w	ip, #0
 802254c:	f000 812e 	beq.w	80227ac <uxr_prepare_reliable_buffer_to_write+0x2c8>
 8022550:	686a      	ldr	r2, [r5, #4]
 8022552:	2700      	movs	r7, #0
 8022554:	f8d5 e000 	ldr.w	lr, [r5]
 8022558:	4639      	mov	r1, r7
 802255a:	463b      	mov	r3, r7
 802255c:	fbb2 f9fc 	udiv	r9, r2, ip
 8022560:	fbb3 f2fc 	udiv	r2, r3, ip
 8022564:	fb0c 3212 	mls	r2, ip, r2, r3
 8022568:	3701      	adds	r7, #1
 802256a:	b292      	uxth	r2, r2
 802256c:	b2bb      	uxth	r3, r7
 802256e:	fb09 e202 	mla	r2, r9, r2, lr
 8022572:	6812      	ldr	r2, [r2, #0]
 8022574:	4290      	cmp	r0, r2
 8022576:	d101      	bne.n	802257c <uxr_prepare_reliable_buffer_to_write+0x98>
 8022578:	3101      	adds	r1, #1
 802257a:	b289      	uxth	r1, r1
 802257c:	4563      	cmp	r3, ip
 802257e:	d3ef      	bcc.n	8022560 <uxr_prepare_reliable_buffer_to_write+0x7c>
 8022580:	1f37      	subs	r7, r6, #4
 8022582:	9b03      	ldr	r3, [sp, #12]
 8022584:	b2bf      	uxth	r7, r7
 8022586:	eba7 0903 	sub.w	r9, r7, r3
 802258a:	1a3f      	subs	r7, r7, r0
 802258c:	fa1f f989 	uxth.w	r9, r9
 8022590:	b2bf      	uxth	r7, r7
 8022592:	eba8 0809 	sub.w	r8, r8, r9
 8022596:	9707      	str	r7, [sp, #28]
 8022598:	fbb8 faf7 	udiv	sl, r8, r7
 802259c:	fb07 831a 	mls	r3, r7, sl, r8
 80225a0:	b113      	cbz	r3, 80225a8 <uxr_prepare_reliable_buffer_to_write+0xc4>
 80225a2:	f10a 0a01 	add.w	sl, sl, #1
 80225a6:	9307      	str	r3, [sp, #28]
 80225a8:	fa1f fa8a 	uxth.w	sl, sl
 80225ac:	458a      	cmp	sl, r1
 80225ae:	f200 809f 	bhi.w	80226f0 <uxr_prepare_reliable_buffer_to_write+0x20c>
 80225b2:	f1ba 0f00 	cmp.w	sl, #0
 80225b6:	f000 80f6 	beq.w	80227a6 <uxr_prepare_reliable_buffer_to_write+0x2c2>
 80225ba:	f04f 0800 	mov.w	r8, #0
 80225be:	f10d 0b20 	add.w	fp, sp, #32
 80225c2:	4660      	mov	r0, ip
 80225c4:	e000      	b.n	80225c8 <uxr_prepare_reliable_buffer_to_write+0xe4>
 80225c6:	8928      	ldrh	r0, [r5, #8]
 80225c8:	686a      	ldr	r2, [r5, #4]
 80225ca:	2300      	movs	r3, #0
 80225cc:	6829      	ldr	r1, [r5, #0]
 80225ce:	f108 0801 	add.w	r8, r8, #1
 80225d2:	fbb4 fcf0 	udiv	ip, r4, r0
 80225d6:	fbb2 f2f0 	udiv	r2, r2, r0
 80225da:	fb00 4c1c 	mls	ip, r0, ip, r4
 80225de:	4658      	mov	r0, fp
 80225e0:	fa1f fc8c 	uxth.w	ip, ip
 80225e4:	fb0c fc02 	mul.w	ip, ip, r2
 80225e8:	4632      	mov	r2, r6
 80225ea:	f10c 0c04 	add.w	ip, ip, #4
 80225ee:	4461      	add	r1, ip
 80225f0:	f851 cc04 	ldr.w	ip, [r1, #-4]
 80225f4:	f8cd c000 	str.w	ip, [sp]
 80225f8:	f7fa ff5c 	bl	801d4b4 <ucdr_init_buffer_origin_offset>
 80225fc:	464a      	mov	r2, r9
 80225fe:	2300      	movs	r3, #0
 8022600:	210d      	movs	r1, #13
 8022602:	4658      	mov	r0, fp
 8022604:	46b9      	mov	r9, r7
 8022606:	f7fc f9a5 	bl	801e954 <uxr_buffer_submessage_header>
 802260a:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 802260e:	686a      	ldr	r2, [r5, #4]
 8022610:	4620      	mov	r0, r4
 8022612:	682b      	ldr	r3, [r5, #0]
 8022614:	fbb4 f1fc 	udiv	r1, r4, ip
 8022618:	fbb2 f2fc 	udiv	r2, r2, ip
 802261c:	fb0c 4411 	mls	r4, ip, r1, r4
 8022620:	2101      	movs	r1, #1
 8022622:	b2a4      	uxth	r4, r4
 8022624:	fb04 f402 	mul.w	r4, r4, r2
 8022628:	511e      	str	r6, [r3, r4]
 802262a:	f000 fab5 	bl	8022b98 <uxr_seq_num_add>
 802262e:	4604      	mov	r4, r0
 8022630:	fa1f f388 	uxth.w	r3, r8
 8022634:	459a      	cmp	sl, r3
 8022636:	d8c6      	bhi.n	80225c6 <uxr_prepare_reliable_buffer_to_write+0xe2>
 8022638:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 802263c:	686b      	ldr	r3, [r5, #4]
 802263e:	4632      	mov	r2, r6
 8022640:	6829      	ldr	r1, [r5, #0]
 8022642:	fbb4 f0fc 	udiv	r0, r4, ip
 8022646:	fb0c 4010 	mls	r0, ip, r0, r4
 802264a:	fbb3 fcfc 	udiv	ip, r3, ip
 802264e:	b286      	uxth	r6, r0
 8022650:	2300      	movs	r3, #0
 8022652:	4658      	mov	r0, fp
 8022654:	fb06 f60c 	mul.w	r6, r6, ip
 8022658:	3604      	adds	r6, #4
 802265a:	4431      	add	r1, r6
 802265c:	f851 6c04 	ldr.w	r6, [r1, #-4]
 8022660:	9600      	str	r6, [sp, #0]
 8022662:	f7fa ff27 	bl	801d4b4 <ucdr_init_buffer_origin_offset>
 8022666:	f8dd 801c 	ldr.w	r8, [sp, #28]
 802266a:	4658      	mov	r0, fp
 802266c:	2302      	movs	r3, #2
 802266e:	fa1f f288 	uxth.w	r2, r8
 8022672:	210d      	movs	r1, #13
 8022674:	f7fc f96e 	bl	801e954 <uxr_buffer_submessage_header>
 8022678:	892f      	ldrh	r7, [r5, #8]
 802267a:	f895 e00c 	ldrb.w	lr, [r5, #12]
 802267e:	686e      	ldr	r6, [r5, #4]
 8022680:	9b06      	ldr	r3, [sp, #24]
 8022682:	f10e 0e04 	add.w	lr, lr, #4
 8022686:	9803      	ldr	r0, [sp, #12]
 8022688:	44c6      	add	lr, r8
 802268a:	f1a3 0208 	sub.w	r2, r3, #8
 802268e:	682b      	ldr	r3, [r5, #0]
 8022690:	1d01      	adds	r1, r0, #4
 8022692:	1a12      	subs	r2, r2, r0
 8022694:	9804      	ldr	r0, [sp, #16]
 8022696:	9303      	str	r3, [sp, #12]
 8022698:	f8dd 9014 	ldr.w	r9, [sp, #20]
 802269c:	4408      	add	r0, r1
 802269e:	9b03      	ldr	r3, [sp, #12]
 80226a0:	4601      	mov	r1, r0
 80226a2:	4648      	mov	r0, r9
 80226a4:	fbb4 fcf7 	udiv	ip, r4, r7
 80226a8:	fbb6 f8f7 	udiv	r8, r6, r7
 80226ac:	fb07 461c 	mls	r6, r7, ip, r4
 80226b0:	b2b6      	uxth	r6, r6
 80226b2:	fb06 f608 	mul.w	r6, r6, r8
 80226b6:	f843 e006 	str.w	lr, [r3, r6]
 80226ba:	f7fa ff0d 	bl	801d4d8 <ucdr_init_buffer>
 80226be:	4648      	mov	r0, r9
 80226c0:	462a      	mov	r2, r5
 80226c2:	493b      	ldr	r1, [pc, #236]	; (80227b0 <uxr_prepare_reliable_buffer_to_write+0x2cc>)
 80226c4:	f7fa fede 	bl	801d484 <ucdr_set_on_full_buffer_callback>
 80226c8:	2001      	movs	r0, #1
 80226ca:	81ec      	strh	r4, [r5, #14]
 80226cc:	b011      	add	sp, #68	; 0x44
 80226ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80226d2:	2101      	movs	r1, #1
 80226d4:	89e8      	ldrh	r0, [r5, #14]
 80226d6:	f000 fa5f 	bl	8022b98 <uxr_seq_num_add>
 80226da:	4604      	mov	r4, r0
 80226dc:	8929      	ldrh	r1, [r5, #8]
 80226de:	8a68      	ldrh	r0, [r5, #18]
 80226e0:	f000 fa5a 	bl	8022b98 <uxr_seq_num_add>
 80226e4:	4601      	mov	r1, r0
 80226e6:	4620      	mov	r0, r4
 80226e8:	f000 fa5e 	bl	8022ba8 <uxr_seq_num_cmp>
 80226ec:	2800      	cmp	r0, #0
 80226ee:	dd25      	ble.n	802273c <uxr_prepare_reliable_buffer_to_write+0x258>
 80226f0:	2000      	movs	r0, #0
 80226f2:	b011      	add	sp, #68	; 0x44
 80226f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80226f8:	8929      	ldrh	r1, [r5, #8]
 80226fa:	8a68      	ldrh	r0, [r5, #18]
 80226fc:	f000 fa4c 	bl	8022b98 <uxr_seq_num_add>
 8022700:	4601      	mov	r1, r0
 8022702:	4620      	mov	r0, r4
 8022704:	f000 fa50 	bl	8022ba8 <uxr_seq_num_cmp>
 8022708:	2800      	cmp	r0, #0
 802270a:	dcf1      	bgt.n	80226f0 <uxr_prepare_reliable_buffer_to_write+0x20c>
 802270c:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 8022710:	fbb4 f3fc 	udiv	r3, r4, ip
 8022714:	e9d5 6200 	ldrd	r6, r2, [r5]
 8022718:	fb0c 4413 	mls	r4, ip, r3, r4
 802271c:	2300      	movs	r3, #0
 802271e:	fbb2 f5fc 	udiv	r5, r2, ip
 8022722:	b2a4      	uxth	r4, r4
 8022724:	463a      	mov	r2, r7
 8022726:	fb04 f405 	mul.w	r4, r4, r5
 802272a:	5137      	str	r7, [r6, r4]
 802272c:	9c03      	ldr	r4, [sp, #12]
 802272e:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
 8022732:	9400      	str	r4, [sp, #0]
 8022734:	f7fa febe 	bl	801d4b4 <ucdr_init_buffer_origin_offset>
 8022738:	2001      	movs	r0, #1
 802273a:	e7da      	b.n	80226f2 <uxr_prepare_reliable_buffer_to_write+0x20e>
 802273c:	892e      	ldrh	r6, [r5, #8]
 802273e:	2300      	movs	r3, #0
 8022740:	686a      	ldr	r2, [r5, #4]
 8022742:	9805      	ldr	r0, [sp, #20]
 8022744:	fbb4 f1f6 	udiv	r1, r4, r6
 8022748:	fbb2 f7f6 	udiv	r7, r2, r6
 802274c:	fb06 4111 	mls	r1, r6, r1, r4
 8022750:	7b2a      	ldrb	r2, [r5, #12]
 8022752:	682e      	ldr	r6, [r5, #0]
 8022754:	b289      	uxth	r1, r1
 8022756:	4442      	add	r2, r8
 8022758:	fb01 f107 	mul.w	r1, r1, r7
 802275c:	3104      	adds	r1, #4
 802275e:	4431      	add	r1, r6
 8022760:	f841 2c04 	str.w	r2, [r1, #-4]
 8022764:	7b2e      	ldrb	r6, [r5, #12]
 8022766:	9600      	str	r6, [sp, #0]
 8022768:	f7fa fea4 	bl	801d4b4 <ucdr_init_buffer_origin_offset>
 802276c:	2001      	movs	r0, #1
 802276e:	81ec      	strh	r4, [r5, #14]
 8022770:	e7bf      	b.n	80226f2 <uxr_prepare_reliable_buffer_to_write+0x20e>
 8022772:	4620      	mov	r0, r4
 8022774:	2101      	movs	r1, #1
 8022776:	f000 fa0f 	bl	8022b98 <uxr_seq_num_add>
 802277a:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 802277e:	4604      	mov	r4, r0
 8022780:	7b28      	ldrb	r0, [r5, #12]
 8022782:	fbb4 f1fc 	udiv	r1, r4, ip
 8022786:	e9d5 2300 	ldrd	r2, r3, [r5]
 802278a:	fbb3 f7fc 	udiv	r7, r3, ip
 802278e:	fb0c 4311 	mls	r3, ip, r1, r4
 8022792:	b29b      	uxth	r3, r3
 8022794:	fb03 f307 	mul.w	r3, r3, r7
 8022798:	3304      	adds	r3, #4
 802279a:	18d3      	adds	r3, r2, r3
 802279c:	9304      	str	r3, [sp, #16]
 802279e:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80227a2:	9303      	str	r3, [sp, #12]
 80227a4:	e6d0      	b.n	8022548 <uxr_prepare_reliable_buffer_to_write+0x64>
 80227a6:	f10d 0b20 	add.w	fp, sp, #32
 80227aa:	e747      	b.n	802263c <uxr_prepare_reliable_buffer_to_write+0x158>
 80227ac:	4661      	mov	r1, ip
 80227ae:	e6e7      	b.n	8022580 <uxr_prepare_reliable_buffer_to_write+0x9c>
 80227b0:	080223d9 	.word	0x080223d9

080227b4 <uxr_prepare_next_reliable_buffer_to_send>:
 80227b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80227b8:	4606      	mov	r6, r0
 80227ba:	461f      	mov	r7, r3
 80227bc:	4689      	mov	r9, r1
 80227be:	8a00      	ldrh	r0, [r0, #16]
 80227c0:	2101      	movs	r1, #1
 80227c2:	4690      	mov	r8, r2
 80227c4:	f000 f9e8 	bl	8022b98 <uxr_seq_num_add>
 80227c8:	6872      	ldr	r2, [r6, #4]
 80227ca:	6833      	ldr	r3, [r6, #0]
 80227cc:	8038      	strh	r0, [r7, #0]
 80227ce:	8931      	ldrh	r1, [r6, #8]
 80227d0:	fbb0 f5f1 	udiv	r5, r0, r1
 80227d4:	fbb2 f2f1 	udiv	r2, r2, r1
 80227d8:	fb01 0415 	mls	r4, r1, r5, r0
 80227dc:	89f1      	ldrh	r1, [r6, #14]
 80227de:	b2a4      	uxth	r4, r4
 80227e0:	fb04 f402 	mul.w	r4, r4, r2
 80227e4:	3404      	adds	r4, #4
 80227e6:	4423      	add	r3, r4
 80227e8:	f8c9 3000 	str.w	r3, [r9]
 80227ec:	6833      	ldr	r3, [r6, #0]
 80227ee:	441c      	add	r4, r3
 80227f0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80227f4:	f8c8 3000 	str.w	r3, [r8]
 80227f8:	f000 f9d6 	bl	8022ba8 <uxr_seq_num_cmp>
 80227fc:	2800      	cmp	r0, #0
 80227fe:	dd02      	ble.n	8022806 <uxr_prepare_next_reliable_buffer_to_send+0x52>
 8022800:	2000      	movs	r0, #0
 8022802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022806:	f8d8 2000 	ldr.w	r2, [r8]
 802280a:	7b33      	ldrb	r3, [r6, #12]
 802280c:	429a      	cmp	r2, r3
 802280e:	d9f7      	bls.n	8022800 <uxr_prepare_next_reliable_buffer_to_send+0x4c>
 8022810:	8a71      	ldrh	r1, [r6, #18]
 8022812:	8a30      	ldrh	r0, [r6, #16]
 8022814:	f000 f9c4 	bl	8022ba0 <uxr_seq_num_sub>
 8022818:	8933      	ldrh	r3, [r6, #8]
 802281a:	4283      	cmp	r3, r0
 802281c:	d0f0      	beq.n	8022800 <uxr_prepare_next_reliable_buffer_to_send+0x4c>
 802281e:	8838      	ldrh	r0, [r7, #0]
 8022820:	89f3      	ldrh	r3, [r6, #14]
 8022822:	8230      	strh	r0, [r6, #16]
 8022824:	4298      	cmp	r0, r3
 8022826:	d002      	beq.n	802282e <uxr_prepare_next_reliable_buffer_to_send+0x7a>
 8022828:	2001      	movs	r0, #1
 802282a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802282e:	2101      	movs	r1, #1
 8022830:	f000 f9b2 	bl	8022b98 <uxr_seq_num_add>
 8022834:	4603      	mov	r3, r0
 8022836:	2001      	movs	r0, #1
 8022838:	81f3      	strh	r3, [r6, #14]
 802283a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802283e:	bf00      	nop

08022840 <uxr_update_output_stream_heartbeat_timestamp>:
 8022840:	b5d0      	push	{r4, r6, r7, lr}
 8022842:	8a01      	ldrh	r1, [r0, #16]
 8022844:	4604      	mov	r4, r0
 8022846:	8a40      	ldrh	r0, [r0, #18]
 8022848:	4616      	mov	r6, r2
 802284a:	461f      	mov	r7, r3
 802284c:	f000 f9ac 	bl	8022ba8 <uxr_seq_num_cmp>
 8022850:	2800      	cmp	r0, #0
 8022852:	db07      	blt.n	8022864 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8022854:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022858:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802285c:	2000      	movs	r0, #0
 802285e:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8022862:	bdd0      	pop	{r4, r6, r7, pc}
 8022864:	f894 0020 	ldrb.w	r0, [r4, #32]
 8022868:	b948      	cbnz	r0, 802287e <uxr_update_output_stream_heartbeat_timestamp+0x3e>
 802286a:	2301      	movs	r3, #1
 802286c:	f884 3020 	strb.w	r3, [r4, #32]
 8022870:	f116 0264 	adds.w	r2, r6, #100	; 0x64
 8022874:	f147 0300 	adc.w	r3, r7, #0
 8022878:	e9c4 2306 	strd	r2, r3, [r4, #24]
 802287c:	bdd0      	pop	{r4, r6, r7, pc}
 802287e:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8022882:	4296      	cmp	r6, r2
 8022884:	eb77 0303 	sbcs.w	r3, r7, r3
 8022888:	db04      	blt.n	8022894 <uxr_update_output_stream_heartbeat_timestamp+0x54>
 802288a:	1c43      	adds	r3, r0, #1
 802288c:	2001      	movs	r0, #1
 802288e:	f884 3020 	strb.w	r3, [r4, #32]
 8022892:	e7ed      	b.n	8022870 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8022894:	2000      	movs	r0, #0
 8022896:	e7eb      	b.n	8022870 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08022898 <uxr_begin_output_nack_buffer_it>:
 8022898:	8a40      	ldrh	r0, [r0, #18]
 802289a:	4770      	bx	lr

0802289c <uxr_next_reliable_nack_buffer_to_send>:
 802289c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80228a0:	f890 9021 	ldrb.w	r9, [r0, #33]	; 0x21
 80228a4:	f1b9 0f00 	cmp.w	r9, #0
 80228a8:	d012      	beq.n	80228d0 <uxr_next_reliable_nack_buffer_to_send+0x34>
 80228aa:	4682      	mov	sl, r0
 80228ac:	460f      	mov	r7, r1
 80228ae:	4690      	mov	r8, r2
 80228b0:	461e      	mov	r6, r3
 80228b2:	8818      	ldrh	r0, [r3, #0]
 80228b4:	2101      	movs	r1, #1
 80228b6:	f000 f96f 	bl	8022b98 <uxr_seq_num_add>
 80228ba:	8030      	strh	r0, [r6, #0]
 80228bc:	f8ba 1010 	ldrh.w	r1, [sl, #16]
 80228c0:	f000 f972 	bl	8022ba8 <uxr_seq_num_cmp>
 80228c4:	2800      	cmp	r0, #0
 80228c6:	dd06      	ble.n	80228d6 <uxr_next_reliable_nack_buffer_to_send+0x3a>
 80228c8:	2300      	movs	r3, #0
 80228ca:	4699      	mov	r9, r3
 80228cc:	f88a 3021 	strb.w	r3, [sl, #33]	; 0x21
 80228d0:	4648      	mov	r0, r9
 80228d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80228d6:	f8ba 2008 	ldrh.w	r2, [sl, #8]
 80228da:	8830      	ldrh	r0, [r6, #0]
 80228dc:	fbb0 f4f2 	udiv	r4, r0, r2
 80228e0:	e9da 5300 	ldrd	r5, r3, [sl]
 80228e4:	fb02 0414 	mls	r4, r2, r4, r0
 80228e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80228ec:	b2a4      	uxth	r4, r4
 80228ee:	fb04 f403 	mul.w	r4, r4, r3
 80228f2:	3404      	adds	r4, #4
 80228f4:	4425      	add	r5, r4
 80228f6:	603d      	str	r5, [r7, #0]
 80228f8:	f8da 3000 	ldr.w	r3, [sl]
 80228fc:	441c      	add	r4, r3
 80228fe:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8022902:	f8c8 3000 	str.w	r3, [r8]
 8022906:	f89a 200c 	ldrb.w	r2, [sl, #12]
 802290a:	429a      	cmp	r2, r3
 802290c:	d0d2      	beq.n	80228b4 <uxr_next_reliable_nack_buffer_to_send+0x18>
 802290e:	e7df      	b.n	80228d0 <uxr_next_reliable_nack_buffer_to_send+0x34>

08022910 <uxr_process_acknack>:
 8022910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022914:	4604      	mov	r4, r0
 8022916:	460f      	mov	r7, r1
 8022918:	4610      	mov	r0, r2
 802291a:	2101      	movs	r1, #1
 802291c:	f000 f940 	bl	8022ba0 <uxr_seq_num_sub>
 8022920:	8a61      	ldrh	r1, [r4, #18]
 8022922:	f000 f93d 	bl	8022ba0 <uxr_seq_num_sub>
 8022926:	b1d8      	cbz	r0, 8022960 <uxr_process_acknack+0x50>
 8022928:	4606      	mov	r6, r0
 802292a:	f04f 0800 	mov.w	r8, #0
 802292e:	2101      	movs	r1, #1
 8022930:	8a60      	ldrh	r0, [r4, #18]
 8022932:	f000 f931 	bl	8022b98 <uxr_seq_num_add>
 8022936:	8923      	ldrh	r3, [r4, #8]
 8022938:	6861      	ldr	r1, [r4, #4]
 802293a:	f108 0801 	add.w	r8, r8, #1
 802293e:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8022942:	6825      	ldr	r5, [r4, #0]
 8022944:	4546      	cmp	r6, r8
 8022946:	8260      	strh	r0, [r4, #18]
 8022948:	fbb0 f2f3 	udiv	r2, r0, r3
 802294c:	fbb1 f1f3 	udiv	r1, r1, r3
 8022950:	fb03 0312 	mls	r3, r3, r2, r0
 8022954:	b29b      	uxth	r3, r3
 8022956:	fb03 f301 	mul.w	r3, r3, r1
 802295a:	f845 c003 	str.w	ip, [r5, r3]
 802295e:	d1e6      	bne.n	802292e <uxr_process_acknack+0x1e>
 8022960:	3f00      	subs	r7, #0
 8022962:	f04f 0300 	mov.w	r3, #0
 8022966:	bf18      	it	ne
 8022968:	2701      	movne	r7, #1
 802296a:	f884 3020 	strb.w	r3, [r4, #32]
 802296e:	f884 7021 	strb.w	r7, [r4, #33]	; 0x21
 8022972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022976:	bf00      	nop

08022978 <uxr_is_output_up_to_date>:
 8022978:	8a01      	ldrh	r1, [r0, #16]
 802297a:	8a40      	ldrh	r0, [r0, #18]
 802297c:	b508      	push	{r3, lr}
 802297e:	f000 f913 	bl	8022ba8 <uxr_seq_num_cmp>
 8022982:	fab0 f080 	clz	r0, r0
 8022986:	0940      	lsrs	r0, r0, #5
 8022988:	bd08      	pop	{r3, pc}
 802298a:	bf00      	nop

0802298c <get_available_free_slots>:
 802298c:	8901      	ldrh	r1, [r0, #8]
 802298e:	b1d9      	cbz	r1, 80229c8 <get_available_free_slots+0x3c>
 8022990:	4603      	mov	r3, r0
 8022992:	b4f0      	push	{r4, r5, r6, r7}
 8022994:	6845      	ldr	r5, [r0, #4]
 8022996:	2400      	movs	r4, #0
 8022998:	6807      	ldr	r7, [r0, #0]
 802299a:	4622      	mov	r2, r4
 802299c:	4620      	mov	r0, r4
 802299e:	7b1e      	ldrb	r6, [r3, #12]
 80229a0:	fbb5 f5f1 	udiv	r5, r5, r1
 80229a4:	fbb2 f3f1 	udiv	r3, r2, r1
 80229a8:	fb01 2313 	mls	r3, r1, r3, r2
 80229ac:	3401      	adds	r4, #1
 80229ae:	b29b      	uxth	r3, r3
 80229b0:	b2a2      	uxth	r2, r4
 80229b2:	fb05 7303 	mla	r3, r5, r3, r7
 80229b6:	681b      	ldr	r3, [r3, #0]
 80229b8:	429e      	cmp	r6, r3
 80229ba:	d101      	bne.n	80229c0 <get_available_free_slots+0x34>
 80229bc:	3001      	adds	r0, #1
 80229be:	b280      	uxth	r0, r0
 80229c0:	428a      	cmp	r2, r1
 80229c2:	d3ef      	bcc.n	80229a4 <get_available_free_slots+0x18>
 80229c4:	bcf0      	pop	{r4, r5, r6, r7}
 80229c6:	4770      	bx	lr
 80229c8:	4608      	mov	r0, r1
 80229ca:	4770      	bx	lr

080229cc <uxr_buffer_cancel_data>:
 80229cc:	b570      	push	{r4, r5, r6, lr}
 80229ce:	2308      	movs	r3, #8
 80229d0:	b094      	sub	sp, #80	; 0x50
 80229d2:	2400      	movs	r4, #0
 80229d4:	2601      	movs	r6, #1
 80229d6:	9300      	str	r3, [sp, #0]
 80229d8:	ab0c      	add	r3, sp, #48	; 0x30
 80229da:	9205      	str	r2, [sp, #20]
 80229dc:	4605      	mov	r5, r0
 80229de:	9103      	str	r1, [sp, #12]
 80229e0:	f8ad 401c 	strh.w	r4, [sp, #28]
 80229e4:	f88d 401e 	strb.w	r4, [sp, #30]
 80229e8:	f8cd 4026 	str.w	r4, [sp, #38]	; 0x26
 80229ec:	f8cd 402a 	str.w	r4, [sp, #42]	; 0x2a
 80229f0:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
 80229f4:	e9cd 4201 	strd	r4, r2, [sp, #4]
 80229f8:	2210      	movs	r2, #16
 80229fa:	f7fb fd0f 	bl	801e41c <uxr_prepare_stream_to_write_submessage>
 80229fe:	b918      	cbnz	r0, 8022a08 <uxr_buffer_cancel_data+0x3c>
 8022a00:	4604      	mov	r4, r0
 8022a02:	4620      	mov	r0, r4
 8022a04:	b014      	add	sp, #80	; 0x50
 8022a06:	bd70      	pop	{r4, r5, r6, pc}
 8022a08:	9905      	ldr	r1, [sp, #20]
 8022a0a:	aa06      	add	r2, sp, #24
 8022a0c:	4628      	mov	r0, r5
 8022a0e:	f7fb fe3b 	bl	801e688 <uxr_init_base_object_request>
 8022a12:	4604      	mov	r4, r0
 8022a14:	a906      	add	r1, sp, #24
 8022a16:	a80c      	add	r0, sp, #48	; 0x30
 8022a18:	f7fc feac 	bl	801f774 <uxr_serialize_READ_DATA_Payload>
 8022a1c:	4620      	mov	r0, r4
 8022a1e:	b014      	add	sp, #80	; 0x50
 8022a20:	bd70      	pop	{r4, r5, r6, pc}
 8022a22:	bf00      	nop

08022a24 <read_submessage_format>:
 8022a24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022a28:	b095      	sub	sp, #84	; 0x54
 8022a2a:	f8bd 9078 	ldrh.w	r9, [sp, #120]	; 0x78
 8022a2e:	b113      	cbz	r3, 8022a36 <read_submessage_format+0x12>
 8022a30:	b015      	add	sp, #84	; 0x54
 8022a32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022a36:	460c      	mov	r4, r1
 8022a38:	4690      	mov	r8, r2
 8022a3a:	461d      	mov	r5, r3
 8022a3c:	4606      	mov	r6, r0
 8022a3e:	a80c      	add	r0, sp, #48	; 0x30
 8022a40:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8022a44:	e9dd 731c 	ldrd	r7, r3, [sp, #112]	; 0x70
 8022a48:	1a52      	subs	r2, r2, r1
 8022a4a:	e9cd 7304 	strd	r7, r3, [sp, #16]
 8022a4e:	f89d 7076 	ldrb.w	r7, [sp, #118]	; 0x76
 8022a52:	f7fa fd41 	bl	801d4d8 <ucdr_init_buffer>
 8022a56:	a80c      	add	r0, sp, #48	; 0x30
 8022a58:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8022a5c:	f7fa fd12 	bl	801d484 <ucdr_set_on_full_buffer_callback>
 8022a60:	69e3      	ldr	r3, [r4, #28]
 8022a62:	b17b      	cbz	r3, 8022a84 <read_submessage_format+0x60>
 8022a64:	2f07      	cmp	r7, #7
 8022a66:	751d      	strb	r5, [r3, #20]
 8022a68:	d03a      	beq.n	8022ae0 <read_submessage_format+0xbc>
 8022a6a:	2f08      	cmp	r7, #8
 8022a6c:	d029      	beq.n	8022ac2 <read_submessage_format+0x9e>
 8022a6e:	2f06      	cmp	r7, #6
 8022a70:	d00e      	beq.n	8022a90 <read_submessage_format+0x6c>
 8022a72:	2201      	movs	r2, #1
 8022a74:	751a      	strb	r2, [r3, #20]
 8022a76:	4641      	mov	r1, r8
 8022a78:	4620      	mov	r0, r4
 8022a7a:	f7fa fd81 	bl	801d580 <ucdr_advance_buffer>
 8022a7e:	b015      	add	sp, #84	; 0x54
 8022a80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022a84:	2f07      	cmp	r7, #7
 8022a86:	d02b      	beq.n	8022ae0 <read_submessage_format+0xbc>
 8022a88:	2f08      	cmp	r7, #8
 8022a8a:	d01a      	beq.n	8022ac2 <read_submessage_format+0x9e>
 8022a8c:	2f06      	cmp	r7, #6
 8022a8e:	d1f2      	bne.n	8022a76 <read_submessage_format+0x52>
 8022a90:	f8d6 5088 	ldr.w	r5, [r6, #136]	; 0x88
 8022a94:	b195      	cbz	r5, 8022abc <read_submessage_format+0x98>
 8022a96:	2106      	movs	r1, #6
 8022a98:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8022a9c:	464a      	mov	r2, r9
 8022a9e:	4630      	mov	r0, r6
 8022aa0:	f88d 1016 	strb.w	r1, [sp, #22]
 8022aa4:	a90c      	add	r1, sp, #48	; 0x30
 8022aa6:	9302      	str	r3, [sp, #8]
 8022aa8:	9100      	str	r1, [sp, #0]
 8022aaa:	9b04      	ldr	r3, [sp, #16]
 8022aac:	9905      	ldr	r1, [sp, #20]
 8022aae:	f8cd 8004 	str.w	r8, [sp, #4]
 8022ab2:	47a8      	blx	r5
 8022ab4:	2201      	movs	r2, #1
 8022ab6:	69e3      	ldr	r3, [r4, #28]
 8022ab8:	f886 20b4 	strb.w	r2, [r6, #180]	; 0xb4
 8022abc:	2b00      	cmp	r3, #0
 8022abe:	d1d8      	bne.n	8022a72 <read_submessage_format+0x4e>
 8022ac0:	e7d9      	b.n	8022a76 <read_submessage_format+0x52>
 8022ac2:	f8d6 20a4 	ldr.w	r2, [r6, #164]	; 0xa4
 8022ac6:	2a00      	cmp	r2, #0
 8022ac8:	d0f8      	beq.n	8022abc <read_submessage_format+0x98>
 8022aca:	a80c      	add	r0, sp, #48	; 0x30
 8022acc:	a906      	add	r1, sp, #24
 8022ace:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8022ad0:	f7fc fef8 	bl	801f8c4 <uxr_deserialize_SampleIdentity>
 8022ad4:	2800      	cmp	r0, #0
 8022ad6:	d13c      	bne.n	8022b52 <read_submessage_format+0x12e>
 8022ad8:	69e3      	ldr	r3, [r4, #28]
 8022ada:	2b00      	cmp	r3, #0
 8022adc:	d1c9      	bne.n	8022a72 <read_submessage_format+0x4e>
 8022ade:	e7ca      	b.n	8022a76 <read_submessage_format+0x52>
 8022ae0:	f8d6 20ac 	ldr.w	r2, [r6, #172]	; 0xac
 8022ae4:	b132      	cbz	r2, 8022af4 <read_submessage_format+0xd0>
 8022ae6:	a906      	add	r1, sp, #24
 8022ae8:	a80c      	add	r0, sp, #48	; 0x30
 8022aea:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8022aec:	f7fc fcd8 	bl	801f4a0 <uxr_deserialize_BaseObjectRequest>
 8022af0:	b930      	cbnz	r0, 8022b00 <read_submessage_format+0xdc>
 8022af2:	69e3      	ldr	r3, [r4, #28]
 8022af4:	68a2      	ldr	r2, [r4, #8]
 8022af6:	4442      	add	r2, r8
 8022af8:	60a2      	str	r2, [r4, #8]
 8022afa:	2b00      	cmp	r3, #0
 8022afc:	d1b9      	bne.n	8022a72 <read_submessage_format+0x4e>
 8022afe:	e7ba      	b.n	8022a76 <read_submessage_format+0x52>
 8022b00:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022b02:	a80c      	add	r0, sp, #48	; 0x30
 8022b04:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022b06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022b08:	1aed      	subs	r5, r5, r3
 8022b0a:	1a52      	subs	r2, r2, r1
 8022b0c:	4445      	add	r5, r8
 8022b0e:	f7fa fce3 	bl	801d4d8 <ucdr_init_buffer>
 8022b12:	a80c      	add	r0, sp, #48	; 0x30
 8022b14:	b2ad      	uxth	r5, r5
 8022b16:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8022b1a:	f7fa fcb3 	bl	801d484 <ucdr_set_on_full_buffer_callback>
 8022b1e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8022b22:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8022b26:	2107      	movs	r1, #7
 8022b28:	f8d6 70b0 	ldr.w	r7, [r6, #176]	; 0xb0
 8022b2c:	464a      	mov	r2, r9
 8022b2e:	f88d 1016 	strb.w	r1, [sp, #22]
 8022b32:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 8022b36:	a90c      	add	r1, sp, #48	; 0x30
 8022b38:	9501      	str	r5, [sp, #4]
 8022b3a:	b29b      	uxth	r3, r3
 8022b3c:	9702      	str	r7, [sp, #8]
 8022b3e:	9100      	str	r1, [sp, #0]
 8022b40:	4630      	mov	r0, r6
 8022b42:	9905      	ldr	r1, [sp, #20]
 8022b44:	f8d6 50ac 	ldr.w	r5, [r6, #172]	; 0xac
 8022b48:	47a8      	blx	r5
 8022b4a:	2301      	movs	r3, #1
 8022b4c:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8022b50:	e7cf      	b.n	8022af2 <read_submessage_format+0xce>
 8022b52:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022b54:	a80c      	add	r0, sp, #48	; 0x30
 8022b56:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022b58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022b5a:	1aed      	subs	r5, r5, r3
 8022b5c:	1a52      	subs	r2, r2, r1
 8022b5e:	4445      	add	r5, r8
 8022b60:	f7fa fcba 	bl	801d4d8 <ucdr_init_buffer>
 8022b64:	a80c      	add	r0, sp, #48	; 0x30
 8022b66:	b2ad      	uxth	r5, r5
 8022b68:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8022b6c:	f7fa fc8a 	bl	801d484 <ucdr_set_on_full_buffer_callback>
 8022b70:	2208      	movs	r2, #8
 8022b72:	f8d6 70a8 	ldr.w	r7, [r6, #168]	; 0xa8
 8022b76:	a90c      	add	r1, sp, #48	; 0x30
 8022b78:	f88d 2016 	strb.w	r2, [sp, #22]
 8022b7c:	ab06      	add	r3, sp, #24
 8022b7e:	9100      	str	r1, [sp, #0]
 8022b80:	464a      	mov	r2, r9
 8022b82:	9501      	str	r5, [sp, #4]
 8022b84:	4630      	mov	r0, r6
 8022b86:	9702      	str	r7, [sp, #8]
 8022b88:	9905      	ldr	r1, [sp, #20]
 8022b8a:	f8d6 50a4 	ldr.w	r5, [r6, #164]	; 0xa4
 8022b8e:	47a8      	blx	r5
 8022b90:	2301      	movs	r3, #1
 8022b92:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8022b96:	e79f      	b.n	8022ad8 <read_submessage_format+0xb4>

08022b98 <uxr_seq_num_add>:
 8022b98:	4408      	add	r0, r1
 8022b9a:	b280      	uxth	r0, r0
 8022b9c:	4770      	bx	lr
 8022b9e:	bf00      	nop

08022ba0 <uxr_seq_num_sub>:
 8022ba0:	1a40      	subs	r0, r0, r1
 8022ba2:	b280      	uxth	r0, r0
 8022ba4:	4770      	bx	lr
 8022ba6:	bf00      	nop

08022ba8 <uxr_seq_num_cmp>:
 8022ba8:	4288      	cmp	r0, r1
 8022baa:	d011      	beq.n	8022bd0 <uxr_seq_num_cmp+0x28>
 8022bac:	d309      	bcc.n	8022bc2 <uxr_seq_num_cmp+0x1a>
 8022bae:	4288      	cmp	r0, r1
 8022bb0:	d910      	bls.n	8022bd4 <uxr_seq_num_cmp+0x2c>
 8022bb2:	1a40      	subs	r0, r0, r1
 8022bb4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8022bb8:	bfd4      	ite	le
 8022bba:	2001      	movle	r0, #1
 8022bbc:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8022bc0:	4770      	bx	lr
 8022bc2:	1a0b      	subs	r3, r1, r0
 8022bc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8022bc8:	daf1      	bge.n	8022bae <uxr_seq_num_cmp+0x6>
 8022bca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022bce:	4770      	bx	lr
 8022bd0:	2000      	movs	r0, #0
 8022bd2:	4770      	bx	lr
 8022bd4:	2001      	movs	r0, #1
 8022bd6:	4770      	bx	lr

08022bd8 <get_udp_error>:
 8022bd8:	4b01      	ldr	r3, [pc, #4]	; (8022be0 <get_udp_error+0x8>)
 8022bda:	7818      	ldrb	r0, [r3, #0]
 8022bdc:	4770      	bx	lr
 8022bde:	bf00      	nop
 8022be0:	2000ff40 	.word	0x2000ff40

08022be4 <recv_udp_msg>:
 8022be4:	b570      	push	{r4, r5, r6, lr}
 8022be6:	b084      	sub	sp, #16
 8022be8:	4615      	mov	r5, r2
 8022bea:	4604      	mov	r4, r0
 8022bec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8022bf0:	f10d 060f 	add.w	r6, sp, #15
 8022bf4:	9600      	str	r6, [sp, #0]
 8022bf6:	460e      	mov	r6, r1
 8022bf8:	4601      	mov	r1, r0
 8022bfa:	f500 7005 	add.w	r0, r0, #532	; 0x214
 8022bfe:	f000 f8b5 	bl	8022d6c <uxr_read_udp_data_platform>
 8022c02:	4603      	mov	r3, r0
 8022c04:	b120      	cbz	r0, 8022c10 <recv_udp_msg+0x2c>
 8022c06:	2001      	movs	r0, #1
 8022c08:	6034      	str	r4, [r6, #0]
 8022c0a:	602b      	str	r3, [r5, #0]
 8022c0c:	b004      	add	sp, #16
 8022c0e:	bd70      	pop	{r4, r5, r6, pc}
 8022c10:	4b02      	ldr	r3, [pc, #8]	; (8022c1c <recv_udp_msg+0x38>)
 8022c12:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8022c16:	701a      	strb	r2, [r3, #0]
 8022c18:	b004      	add	sp, #16
 8022c1a:	bd70      	pop	{r4, r5, r6, pc}
 8022c1c:	2000ff40 	.word	0x2000ff40

08022c20 <send_udp_msg>:
 8022c20:	b510      	push	{r4, lr}
 8022c22:	b082      	sub	sp, #8
 8022c24:	f500 7005 	add.w	r0, r0, #532	; 0x214
 8022c28:	4614      	mov	r4, r2
 8022c2a:	f10d 0307 	add.w	r3, sp, #7
 8022c2e:	f000 f88f 	bl	8022d50 <uxr_write_udp_data_platform>
 8022c32:	b128      	cbz	r0, 8022c40 <send_udp_msg+0x20>
 8022c34:	1a20      	subs	r0, r4, r0
 8022c36:	fab0 f080 	clz	r0, r0
 8022c3a:	0940      	lsrs	r0, r0, #5
 8022c3c:	b002      	add	sp, #8
 8022c3e:	bd10      	pop	{r4, pc}
 8022c40:	4b02      	ldr	r3, [pc, #8]	; (8022c4c <send_udp_msg+0x2c>)
 8022c42:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8022c46:	701a      	strb	r2, [r3, #0]
 8022c48:	b002      	add	sp, #8
 8022c4a:	bd10      	pop	{r4, pc}
 8022c4c:	2000ff40 	.word	0x2000ff40

08022c50 <uxr_init_udp_transport>:
 8022c50:	b538      	push	{r3, r4, r5, lr}
 8022c52:	4604      	mov	r4, r0
 8022c54:	f500 7005 	add.w	r0, r0, #532	; 0x214
 8022c58:	f000 f818 	bl	8022c8c <uxr_init_udp_platform>
 8022c5c:	b150      	cbz	r0, 8022c74 <uxr_init_udp_transport+0x24>
 8022c5e:	4d06      	ldr	r5, [pc, #24]	; (8022c78 <uxr_init_udp_transport+0x28>)
 8022c60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8022c64:	4905      	ldr	r1, [pc, #20]	; (8022c7c <uxr_init_udp_transport+0x2c>)
 8022c66:	4a06      	ldr	r2, [pc, #24]	; (8022c80 <uxr_init_udp_transport+0x30>)
 8022c68:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
 8022c6c:	e9c4 4580 	strd	r4, r5, [r4, #512]	; 0x200
 8022c70:	e9c4 1282 	strd	r1, r2, [r4, #520]	; 0x208
 8022c74:	bd38      	pop	{r3, r4, r5, pc}
 8022c76:	bf00      	nop
 8022c78:	08022c21 	.word	0x08022c21
 8022c7c:	08022be5 	.word	0x08022be5
 8022c80:	08022bd9 	.word	0x08022bd9

08022c84 <uxr_close_udp_transport>:
 8022c84:	f500 7005 	add.w	r0, r0, #532	; 0x214
 8022c88:	f000 b856 	b.w	8022d38 <uxr_close_udp_platform>

08022c8c <uxr_init_udp_platform>:
 8022c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022c8e:	4605      	mov	r5, r0
 8022c90:	b08b      	sub	sp, #44	; 0x2c
 8022c92:	460c      	mov	r4, r1
 8022c94:	4617      	mov	r7, r2
 8022c96:	461e      	mov	r6, r3
 8022c98:	b379      	cbz	r1, 8022cfa <uxr_init_udp_platform+0x6e>
 8022c9a:	2901      	cmp	r1, #1
 8022c9c:	d006      	beq.n	8022cac <uxr_init_udp_platform+0x20>
 8022c9e:	6803      	ldr	r3, [r0, #0]
 8022ca0:	3301      	adds	r3, #1
 8022ca2:	d10b      	bne.n	8022cbc <uxr_init_udp_platform+0x30>
 8022ca4:	2500      	movs	r5, #0
 8022ca6:	4628      	mov	r0, r5
 8022ca8:	b00b      	add	sp, #44	; 0x2c
 8022caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022cac:	2200      	movs	r2, #0
 8022cae:	2102      	movs	r1, #2
 8022cb0:	4610      	mov	r0, r2
 8022cb2:	f7ea f9e5 	bl	800d080 <lwip_socket>
 8022cb6:	6028      	str	r0, [r5, #0]
 8022cb8:	3001      	adds	r0, #1
 8022cba:	d0f3      	beq.n	8022ca4 <uxr_init_udp_platform+0x18>
 8022cbc:	ab02      	add	r3, sp, #8
 8022cbe:	2220      	movs	r2, #32
 8022cc0:	2100      	movs	r1, #0
 8022cc2:	4618      	mov	r0, r3
 8022cc4:	f000 fe8e 	bl	80239e4 <memset>
 8022cc8:	4603      	mov	r3, r0
 8022cca:	2402      	movs	r4, #2
 8022ccc:	461a      	mov	r2, r3
 8022cce:	4631      	mov	r1, r6
 8022cd0:	4638      	mov	r0, r7
 8022cd2:	ab01      	add	r3, sp, #4
 8022cd4:	9404      	str	r4, [sp, #16]
 8022cd6:	f7e9 fa9d 	bl	800c214 <lwip_getaddrinfo>
 8022cda:	9c01      	ldr	r4, [sp, #4]
 8022cdc:	b9f8      	cbnz	r0, 8022d1e <uxr_init_udp_platform+0x92>
 8022cde:	b914      	cbnz	r4, 8022ce6 <uxr_init_udp_platform+0x5a>
 8022ce0:	e027      	b.n	8022d32 <uxr_init_udp_platform+0xa6>
 8022ce2:	69e4      	ldr	r4, [r4, #28]
 8022ce4:	b314      	cbz	r4, 8022d2c <uxr_init_udp_platform+0xa0>
 8022ce6:	6828      	ldr	r0, [r5, #0]
 8022ce8:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8022cec:	f7e9 fd0c 	bl	800c708 <lwip_connect>
 8022cf0:	2800      	cmp	r0, #0
 8022cf2:	d1f6      	bne.n	8022ce2 <uxr_init_udp_platform+0x56>
 8022cf4:	9c01      	ldr	r4, [sp, #4]
 8022cf6:	2501      	movs	r5, #1
 8022cf8:	e012      	b.n	8022d20 <uxr_init_udp_platform+0x94>
 8022cfa:	2102      	movs	r1, #2
 8022cfc:	4622      	mov	r2, r4
 8022cfe:	4608      	mov	r0, r1
 8022d00:	f7ea f9be 	bl	800d080 <lwip_socket>
 8022d04:	6028      	str	r0, [r5, #0]
 8022d06:	3001      	adds	r0, #1
 8022d08:	d0cc      	beq.n	8022ca4 <uxr_init_udp_platform+0x18>
 8022d0a:	ab02      	add	r3, sp, #8
 8022d0c:	2220      	movs	r2, #32
 8022d0e:	4621      	mov	r1, r4
 8022d10:	4618      	mov	r0, r3
 8022d12:	f000 fe67 	bl	80239e4 <memset>
 8022d16:	2202      	movs	r2, #2
 8022d18:	4603      	mov	r3, r0
 8022d1a:	9203      	str	r2, [sp, #12]
 8022d1c:	e7d5      	b.n	8022cca <uxr_init_udp_platform+0x3e>
 8022d1e:	2500      	movs	r5, #0
 8022d20:	4620      	mov	r0, r4
 8022d22:	f7e9 fa61 	bl	800c1e8 <lwip_freeaddrinfo>
 8022d26:	4628      	mov	r0, r5
 8022d28:	b00b      	add	sp, #44	; 0x2c
 8022d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022d2c:	9c01      	ldr	r4, [sp, #4]
 8022d2e:	2500      	movs	r5, #0
 8022d30:	e7f6      	b.n	8022d20 <uxr_init_udp_platform+0x94>
 8022d32:	4625      	mov	r5, r4
 8022d34:	e7f4      	b.n	8022d20 <uxr_init_udp_platform+0x94>
 8022d36:	bf00      	nop

08022d38 <uxr_close_udp_platform>:
 8022d38:	6800      	ldr	r0, [r0, #0]
 8022d3a:	1c42      	adds	r2, r0, #1
 8022d3c:	d101      	bne.n	8022d42 <uxr_close_udp_platform+0xa>
 8022d3e:	2001      	movs	r0, #1
 8022d40:	4770      	bx	lr
 8022d42:	b508      	push	{r3, lr}
 8022d44:	f7e9 fc86 	bl	800c654 <lwip_close>
 8022d48:	fab0 f080 	clz	r0, r0
 8022d4c:	0940      	lsrs	r0, r0, #5
 8022d4e:	bd08      	pop	{r3, pc}

08022d50 <uxr_write_udp_data_platform>:
 8022d50:	b510      	push	{r4, lr}
 8022d52:	6800      	ldr	r0, [r0, #0]
 8022d54:	461c      	mov	r4, r3
 8022d56:	2300      	movs	r3, #0
 8022d58:	f7ea f882 	bl	800ce60 <lwip_send>
 8022d5c:	1c43      	adds	r3, r0, #1
 8022d5e:	bf0a      	itet	eq
 8022d60:	2301      	moveq	r3, #1
 8022d62:	2300      	movne	r3, #0
 8022d64:	2000      	moveq	r0, #0
 8022d66:	7023      	strb	r3, [r4, #0]
 8022d68:	bd10      	pop	{r4, pc}
 8022d6a:	bf00      	nop

08022d6c <uxr_read_udp_data_platform>:
 8022d6c:	2b01      	cmp	r3, #1
 8022d6e:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
 8022d72:	bfb8      	it	lt
 8022d74:	2301      	movlt	r3, #1
 8022d76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022d7a:	461d      	mov	r5, r3
 8022d7c:	4c15      	ldr	r4, [pc, #84]	; (8022dd4 <uxr_read_udp_data_platform+0x68>)
 8022d7e:	4690      	mov	r8, r2
 8022d80:	b086      	sub	sp, #24
 8022d82:	fba4 3405 	umull	r3, r4, r4, r5
 8022d86:	2310      	movs	r3, #16
 8022d88:	4606      	mov	r6, r0
 8022d8a:	460f      	mov	r7, r1
 8022d8c:	09a4      	lsrs	r4, r4, #6
 8022d8e:	6800      	ldr	r0, [r0, #0]
 8022d90:	f640 71ff 	movw	r1, #4095	; 0xfff
 8022d94:	9300      	str	r3, [sp, #0]
 8022d96:	fb0c 5214 	mls	r2, ip, r4, r5
 8022d9a:	17e5      	asrs	r5, r4, #31
 8022d9c:	ab02      	add	r3, sp, #8
 8022d9e:	fb0c fc02 	mul.w	ip, ip, r2
 8022da2:	f241 0206 	movw	r2, #4102	; 0x1006
 8022da6:	f8cd c010 	str.w	ip, [sp, #16]
 8022daa:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8022dae:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022db0:	f7ea fb8e 	bl	800d4d0 <lwip_setsockopt>
 8022db4:	4642      	mov	r2, r8
 8022db6:	4639      	mov	r1, r7
 8022db8:	6830      	ldr	r0, [r6, #0]
 8022dba:	2300      	movs	r3, #0
 8022dbc:	f7ea f83a 	bl	800ce34 <lwip_recv>
 8022dc0:	1c43      	adds	r3, r0, #1
 8022dc2:	bf0a      	itet	eq
 8022dc4:	2301      	moveq	r3, #1
 8022dc6:	2300      	movne	r3, #0
 8022dc8:	2000      	moveq	r0, #0
 8022dca:	7023      	strb	r3, [r4, #0]
 8022dcc:	b006      	add	sp, #24
 8022dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022dd2:	bf00      	nop
 8022dd4:	10624dd3 	.word	0x10624dd3

08022dd8 <rcl_get_default_domain_id>:
 8022dd8:	b510      	push	{r4, lr}
 8022dda:	2300      	movs	r3, #0
 8022ddc:	b082      	sub	sp, #8
 8022dde:	9300      	str	r3, [sp, #0]
 8022de0:	b1e8      	cbz	r0, 8022e1e <rcl_get_default_domain_id+0x46>
 8022de2:	4604      	mov	r4, r0
 8022de4:	4669      	mov	r1, sp
 8022de6:	4813      	ldr	r0, [pc, #76]	; (8022e34 <rcl_get_default_domain_id+0x5c>)
 8022de8:	f7fd fdcc 	bl	8020984 <rcutils_get_env>
 8022dec:	4602      	mov	r2, r0
 8022dee:	b110      	cbz	r0, 8022df6 <rcl_get_default_domain_id+0x1e>
 8022df0:	2001      	movs	r0, #1
 8022df2:	b002      	add	sp, #8
 8022df4:	bd10      	pop	{r4, pc}
 8022df6:	9b00      	ldr	r3, [sp, #0]
 8022df8:	b1a3      	cbz	r3, 8022e24 <rcl_get_default_domain_id+0x4c>
 8022dfa:	7818      	ldrb	r0, [r3, #0]
 8022dfc:	2800      	cmp	r0, #0
 8022dfe:	d0f8      	beq.n	8022df2 <rcl_get_default_domain_id+0x1a>
 8022e00:	4618      	mov	r0, r3
 8022e02:	a901      	add	r1, sp, #4
 8022e04:	9201      	str	r2, [sp, #4]
 8022e06:	f001 fa1b 	bl	8024240 <strtoul>
 8022e0a:	b170      	cbz	r0, 8022e2a <rcl_get_default_domain_id+0x52>
 8022e0c:	1c43      	adds	r3, r0, #1
 8022e0e:	d103      	bne.n	8022e18 <rcl_get_default_domain_id+0x40>
 8022e10:	4b09      	ldr	r3, [pc, #36]	; (8022e38 <rcl_get_default_domain_id+0x60>)
 8022e12:	681b      	ldr	r3, [r3, #0]
 8022e14:	2b22      	cmp	r3, #34	; 0x22
 8022e16:	d0eb      	beq.n	8022df0 <rcl_get_default_domain_id+0x18>
 8022e18:	6020      	str	r0, [r4, #0]
 8022e1a:	2000      	movs	r0, #0
 8022e1c:	e7e9      	b.n	8022df2 <rcl_get_default_domain_id+0x1a>
 8022e1e:	200b      	movs	r0, #11
 8022e20:	b002      	add	sp, #8
 8022e22:	bd10      	pop	{r4, pc}
 8022e24:	4618      	mov	r0, r3
 8022e26:	b002      	add	sp, #8
 8022e28:	bd10      	pop	{r4, pc}
 8022e2a:	9b01      	ldr	r3, [sp, #4]
 8022e2c:	781b      	ldrb	r3, [r3, #0]
 8022e2e:	2b00      	cmp	r3, #0
 8022e30:	d0f2      	beq.n	8022e18 <rcl_get_default_domain_id+0x40>
 8022e32:	e7dd      	b.n	8022df0 <rcl_get_default_domain_id+0x18>
 8022e34:	08029a60 	.word	0x08029a60
 8022e38:	2000ff64 	.word	0x2000ff64

08022e3c <rcl_expand_topic_name>:
 8022e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e40:	b08b      	sub	sp, #44	; 0x2c
 8022e42:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8022e44:	fab4 f584 	clz	r5, r4
 8022e48:	096d      	lsrs	r5, r5, #5
 8022e4a:	2b00      	cmp	r3, #0
 8022e4c:	bf08      	it	eq
 8022e4e:	2501      	moveq	r5, #1
 8022e50:	2a00      	cmp	r2, #0
 8022e52:	bf08      	it	eq
 8022e54:	2501      	moveq	r5, #1
 8022e56:	2900      	cmp	r1, #0
 8022e58:	bf08      	it	eq
 8022e5a:	2501      	moveq	r5, #1
 8022e5c:	2d00      	cmp	r5, #0
 8022e5e:	d13d      	bne.n	8022edc <rcl_expand_topic_name+0xa0>
 8022e60:	4616      	mov	r6, r2
 8022e62:	fab0 f280 	clz	r2, r0
 8022e66:	4604      	mov	r4, r0
 8022e68:	0952      	lsrs	r2, r2, #5
 8022e6a:	2800      	cmp	r0, #0
 8022e6c:	d036      	beq.n	8022edc <rcl_expand_topic_name+0xa0>
 8022e6e:	460f      	mov	r7, r1
 8022e70:	a909      	add	r1, sp, #36	; 0x24
 8022e72:	4698      	mov	r8, r3
 8022e74:	f000 f9e0 	bl	8023238 <rcl_validate_topic_name>
 8022e78:	4605      	mov	r5, r0
 8022e7a:	bb58      	cbnz	r0, 8022ed4 <rcl_expand_topic_name+0x98>
 8022e7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022e7e:	2b00      	cmp	r3, #0
 8022e80:	d135      	bne.n	8022eee <rcl_expand_topic_name+0xb2>
 8022e82:	4602      	mov	r2, r0
 8022e84:	a909      	add	r1, sp, #36	; 0x24
 8022e86:	4638      	mov	r0, r7
 8022e88:	f7fe f968 	bl	802115c <rmw_validate_node_name>
 8022e8c:	bb58      	cbnz	r0, 8022ee6 <rcl_expand_topic_name+0xaa>
 8022e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022e90:	bb93      	cbnz	r3, 8022ef8 <rcl_expand_topic_name+0xbc>
 8022e92:	462a      	mov	r2, r5
 8022e94:	a909      	add	r1, sp, #36	; 0x24
 8022e96:	4630      	mov	r0, r6
 8022e98:	f7fe f942 	bl	8021120 <rmw_validate_namespace>
 8022e9c:	bb18      	cbnz	r0, 8022ee6 <rcl_expand_topic_name+0xaa>
 8022e9e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8022ea0:	2d00      	cmp	r5, #0
 8022ea2:	f040 809f 	bne.w	8022fe4 <rcl_expand_topic_name+0x1a8>
 8022ea6:	217b      	movs	r1, #123	; 0x7b
 8022ea8:	4620      	mov	r0, r4
 8022eaa:	f001 f88c 	bl	8023fc6 <strchr>
 8022eae:	7823      	ldrb	r3, [r4, #0]
 8022eb0:	4681      	mov	r9, r0
 8022eb2:	bb18      	cbnz	r0, 8022efc <rcl_expand_topic_name+0xc0>
 8022eb4:	2b2f      	cmp	r3, #47	; 0x2f
 8022eb6:	d121      	bne.n	8022efc <rcl_expand_topic_name+0xc0>
 8022eb8:	ab14      	add	r3, sp, #80	; 0x50
 8022eba:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	; 0x5c
 8022ebe:	e88d 0003 	stmia.w	sp, {r0, r1}
 8022ec2:	4620      	mov	r0, r4
 8022ec4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8022ec6:	f7fd fe6f 	bl	8020ba8 <rcutils_strdup>
 8022eca:	2800      	cmp	r0, #0
 8022ecc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8022ece:	bf08      	it	eq
 8022ed0:	250a      	moveq	r5, #10
 8022ed2:	6018      	str	r0, [r3, #0]
 8022ed4:	4628      	mov	r0, r5
 8022ed6:	b00b      	add	sp, #44	; 0x2c
 8022ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022edc:	250b      	movs	r5, #11
 8022ede:	4628      	mov	r0, r5
 8022ee0:	b00b      	add	sp, #44	; 0x2c
 8022ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022ee6:	f7fc fd17 	bl	801f918 <rcl_convert_rmw_ret_to_rcl_ret>
 8022eea:	4605      	mov	r5, r0
 8022eec:	e7f2      	b.n	8022ed4 <rcl_expand_topic_name+0x98>
 8022eee:	2567      	movs	r5, #103	; 0x67
 8022ef0:	4628      	mov	r0, r5
 8022ef2:	b00b      	add	sp, #44	; 0x2c
 8022ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022ef8:	25c9      	movs	r5, #201	; 0xc9
 8022efa:	e7eb      	b.n	8022ed4 <rcl_expand_topic_name+0x98>
 8022efc:	2b7e      	cmp	r3, #126	; 0x7e
 8022efe:	d073      	beq.n	8022fe8 <rcl_expand_topic_name+0x1ac>
 8022f00:	f1b9 0f00 	cmp.w	r9, #0
 8022f04:	f000 80c4 	beq.w	8023090 <rcl_expand_topic_name+0x254>
 8022f08:	2300      	movs	r3, #0
 8022f0a:	46a2      	mov	sl, r4
 8022f0c:	469b      	mov	fp, r3
 8022f0e:	9506      	str	r5, [sp, #24]
 8022f10:	4655      	mov	r5, sl
 8022f12:	9407      	str	r4, [sp, #28]
 8022f14:	464c      	mov	r4, r9
 8022f16:	2c00      	cmp	r4, #0
 8022f18:	f000 80b4 	beq.w	8023084 <rcl_expand_topic_name+0x248>
 8022f1c:	217d      	movs	r1, #125	; 0x7d
 8022f1e:	4628      	mov	r0, r5
 8022f20:	f001 f851 	bl	8023fc6 <strchr>
 8022f24:	4681      	mov	r9, r0
 8022f26:	4621      	mov	r1, r4
 8022f28:	486b      	ldr	r0, [pc, #428]	; (80230d8 <rcl_expand_topic_name+0x29c>)
 8022f2a:	eba9 0904 	sub.w	r9, r9, r4
 8022f2e:	f109 0a01 	add.w	sl, r9, #1
 8022f32:	4652      	mov	r2, sl
 8022f34:	f001 f85c 	bl	8023ff0 <strncmp>
 8022f38:	2800      	cmp	r0, #0
 8022f3a:	d051      	beq.n	8022fe0 <rcl_expand_topic_name+0x1a4>
 8022f3c:	4652      	mov	r2, sl
 8022f3e:	4621      	mov	r1, r4
 8022f40:	4866      	ldr	r0, [pc, #408]	; (80230dc <rcl_expand_topic_name+0x2a0>)
 8022f42:	f001 f855 	bl	8023ff0 <strncmp>
 8022f46:	b128      	cbz	r0, 8022f54 <rcl_expand_topic_name+0x118>
 8022f48:	4652      	mov	r2, sl
 8022f4a:	4621      	mov	r1, r4
 8022f4c:	4864      	ldr	r0, [pc, #400]	; (80230e0 <rcl_expand_topic_name+0x2a4>)
 8022f4e:	f001 f84f 	bl	8023ff0 <strncmp>
 8022f52:	bb38      	cbnz	r0, 8022fa4 <rcl_expand_topic_name+0x168>
 8022f54:	46b1      	mov	r9, r6
 8022f56:	ab16      	add	r3, sp, #88	; 0x58
 8022f58:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8022f5c:	ab14      	add	r3, sp, #80	; 0x50
 8022f5e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8022f62:	4620      	mov	r0, r4
 8022f64:	4651      	mov	r1, sl
 8022f66:	cb0c      	ldmia	r3, {r2, r3}
 8022f68:	f7fd fe40 	bl	8020bec <rcutils_strndup>
 8022f6c:	4604      	mov	r4, r0
 8022f6e:	2800      	cmp	r0, #0
 8022f70:	f000 80a7 	beq.w	80230c2 <rcl_expand_topic_name+0x286>
 8022f74:	464a      	mov	r2, r9
 8022f76:	4628      	mov	r0, r5
 8022f78:	ab14      	add	r3, sp, #80	; 0x50
 8022f7a:	4621      	mov	r1, r4
 8022f7c:	f7fd fd1a 	bl	80209b4 <rcutils_repl_str>
 8022f80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022f82:	4605      	mov	r5, r0
 8022f84:	9918      	ldr	r1, [sp, #96]	; 0x60
 8022f86:	4620      	mov	r0, r4
 8022f88:	4798      	blx	r3
 8022f8a:	4658      	mov	r0, fp
 8022f8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022f8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8022f90:	4798      	blx	r3
 8022f92:	2d00      	cmp	r5, #0
 8022f94:	d071      	beq.n	802307a <rcl_expand_topic_name+0x23e>
 8022f96:	217b      	movs	r1, #123	; 0x7b
 8022f98:	4628      	mov	r0, r5
 8022f9a:	f001 f814 	bl	8023fc6 <strchr>
 8022f9e:	46ab      	mov	fp, r5
 8022fa0:	4604      	mov	r4, r0
 8022fa2:	e7b8      	b.n	8022f16 <rcl_expand_topic_name+0xda>
 8022fa4:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8022fa8:	1c61      	adds	r1, r4, #1
 8022faa:	4640      	mov	r0, r8
 8022fac:	f7fd ff36 	bl	8020e1c <rcutils_string_map_getn>
 8022fb0:	4681      	mov	r9, r0
 8022fb2:	2800      	cmp	r0, #0
 8022fb4:	d1cf      	bne.n	8022f56 <rcl_expand_topic_name+0x11a>
 8022fb6:	9919      	ldr	r1, [sp, #100]	; 0x64
 8022fb8:	aa16      	add	r2, sp, #88	; 0x58
 8022fba:	ab14      	add	r3, sp, #80	; 0x50
 8022fbc:	2569      	movs	r5, #105	; 0x69
 8022fbe:	6008      	str	r0, [r1, #0]
 8022fc0:	ca07      	ldmia	r2, {r0, r1, r2}
 8022fc2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8022fc6:	4651      	mov	r1, sl
 8022fc8:	4620      	mov	r0, r4
 8022fca:	cb0c      	ldmia	r3, {r2, r3}
 8022fcc:	f7fd fe0e 	bl	8020bec <rcutils_strndup>
 8022fd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022fd2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8022fd4:	4798      	blx	r3
 8022fd6:	4658      	mov	r0, fp
 8022fd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022fda:	9918      	ldr	r1, [sp, #96]	; 0x60
 8022fdc:	4798      	blx	r3
 8022fde:	e779      	b.n	8022ed4 <rcl_expand_topic_name+0x98>
 8022fe0:	46b9      	mov	r9, r7
 8022fe2:	e7b8      	b.n	8022f56 <rcl_expand_topic_name+0x11a>
 8022fe4:	25ca      	movs	r5, #202	; 0xca
 8022fe6:	e775      	b.n	8022ed4 <rcl_expand_topic_name+0x98>
 8022fe8:	4630      	mov	r0, r6
 8022fea:	f7dd f91b 	bl	8000224 <strlen>
 8022fee:	4a3d      	ldr	r2, [pc, #244]	; (80230e4 <rcl_expand_topic_name+0x2a8>)
 8022ff0:	1c63      	adds	r3, r4, #1
 8022ff2:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 80230f0 <rcl_expand_topic_name+0x2b4>
 8022ff6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8022ffa:	9704      	str	r7, [sp, #16]
 8022ffc:	2801      	cmp	r0, #1
 8022ffe:	bf0c      	ite	eq
 8023000:	4610      	moveq	r0, r2
 8023002:	4660      	movne	r0, ip
 8023004:	9305      	str	r3, [sp, #20]
 8023006:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8023008:	ab14      	add	r3, sp, #80	; 0x50
 802300a:	e9cd 0602 	strd	r0, r6, [sp, #8]
 802300e:	e9cd 2100 	strd	r2, r1, [sp]
 8023012:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8023014:	f7fd fc7c 	bl	8020910 <rcutils_format_string_limit>
 8023018:	4683      	mov	fp, r0
 802301a:	b370      	cbz	r0, 802307a <rcl_expand_topic_name+0x23e>
 802301c:	f1b9 0f00 	cmp.w	r9, #0
 8023020:	d005      	beq.n	802302e <rcl_expand_topic_name+0x1f2>
 8023022:	217b      	movs	r1, #123	; 0x7b
 8023024:	4682      	mov	sl, r0
 8023026:	f000 ffce 	bl	8023fc6 <strchr>
 802302a:	4681      	mov	r9, r0
 802302c:	e76f      	b.n	8022f0e <rcl_expand_topic_name+0xd2>
 802302e:	f89b 3000 	ldrb.w	r3, [fp]
 8023032:	2b2f      	cmp	r3, #47	; 0x2f
 8023034:	d01d      	beq.n	8023072 <rcl_expand_topic_name+0x236>
 8023036:	4630      	mov	r0, r6
 8023038:	f7dd f8f4 	bl	8000224 <strlen>
 802303c:	4b2a      	ldr	r3, [pc, #168]	; (80230e8 <rcl_expand_topic_name+0x2ac>)
 802303e:	492b      	ldr	r1, [pc, #172]	; (80230ec <rcl_expand_topic_name+0x2b0>)
 8023040:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8023044:	f8cd b010 	str.w	fp, [sp, #16]
 8023048:	2801      	cmp	r0, #1
 802304a:	bf0c      	ite	eq
 802304c:	4618      	moveq	r0, r3
 802304e:	4608      	movne	r0, r1
 8023050:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023052:	e9cd 3200 	strd	r3, r2, [sp]
 8023056:	ab14      	add	r3, sp, #80	; 0x50
 8023058:	e9cd 0602 	strd	r0, r6, [sp, #8]
 802305c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802305e:	f7fd fc57 	bl	8020910 <rcutils_format_string_limit>
 8023062:	4604      	mov	r4, r0
 8023064:	4658      	mov	r0, fp
 8023066:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8023068:	46a3      	mov	fp, r4
 802306a:	9918      	ldr	r1, [sp, #96]	; 0x60
 802306c:	4798      	blx	r3
 802306e:	465b      	mov	r3, fp
 8023070:	b11b      	cbz	r3, 802307a <rcl_expand_topic_name+0x23e>
 8023072:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023074:	f8c3 b000 	str.w	fp, [r3]
 8023078:	e72c      	b.n	8022ed4 <rcl_expand_topic_name+0x98>
 802307a:	2300      	movs	r3, #0
 802307c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 802307e:	250a      	movs	r5, #10
 8023080:	6013      	str	r3, [r2, #0]
 8023082:	e727      	b.n	8022ed4 <rcl_expand_topic_name+0x98>
 8023084:	465b      	mov	r3, fp
 8023086:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 802308a:	2b00      	cmp	r3, #0
 802308c:	d1cf      	bne.n	802302e <rcl_expand_topic_name+0x1f2>
 802308e:	7823      	ldrb	r3, [r4, #0]
 8023090:	2b2f      	cmp	r3, #47	; 0x2f
 8023092:	d01e      	beq.n	80230d2 <rcl_expand_topic_name+0x296>
 8023094:	4630      	mov	r0, r6
 8023096:	f7dd f8c5 	bl	8000224 <strlen>
 802309a:	4b13      	ldr	r3, [pc, #76]	; (80230e8 <rcl_expand_topic_name+0x2ac>)
 802309c:	4913      	ldr	r1, [pc, #76]	; (80230ec <rcl_expand_topic_name+0x2b0>)
 802309e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80230a2:	9404      	str	r4, [sp, #16]
 80230a4:	2801      	cmp	r0, #1
 80230a6:	bf0c      	ite	eq
 80230a8:	4618      	moveq	r0, r3
 80230aa:	4608      	movne	r0, r1
 80230ac:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80230ae:	e9cd 3200 	strd	r3, r2, [sp]
 80230b2:	ab14      	add	r3, sp, #80	; 0x50
 80230b4:	e9cd 0602 	strd	r0, r6, [sp, #8]
 80230b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80230ba:	f7fd fc29 	bl	8020910 <rcutils_format_string_limit>
 80230be:	4683      	mov	fp, r0
 80230c0:	e7d5      	b.n	802306e <rcl_expand_topic_name+0x232>
 80230c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80230c4:	4658      	mov	r0, fp
 80230c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80230c8:	250a      	movs	r5, #10
 80230ca:	601c      	str	r4, [r3, #0]
 80230cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80230ce:	4798      	blx	r3
 80230d0:	e700      	b.n	8022ed4 <rcl_expand_topic_name+0x98>
 80230d2:	2300      	movs	r3, #0
 80230d4:	469b      	mov	fp, r3
 80230d6:	e7cc      	b.n	8023072 <rcl_expand_topic_name+0x236>
 80230d8:	08029a78 	.word	0x08029a78
 80230dc:	08029a80 	.word	0x08029a80
 80230e0:	08029a88 	.word	0x08029a88
 80230e4:	08029448 	.word	0x08029448
 80230e8:	08029458 	.word	0x08029458
 80230ec:	080295d4 	.word	0x080295d4
 80230f0:	08029a70 	.word	0x08029a70

080230f4 <rcl_get_default_topic_name_substitutions>:
 80230f4:	2800      	cmp	r0, #0
 80230f6:	bf0c      	ite	eq
 80230f8:	200b      	moveq	r0, #11
 80230fa:	2000      	movne	r0, #0
 80230fc:	4770      	bx	lr
 80230fe:	bf00      	nop

08023100 <rcl_get_zero_initialized_guard_condition>:
 8023100:	4a03      	ldr	r2, [pc, #12]	; (8023110 <rcl_get_zero_initialized_guard_condition+0x10>)
 8023102:	4603      	mov	r3, r0
 8023104:	e892 0003 	ldmia.w	r2, {r0, r1}
 8023108:	e883 0003 	stmia.w	r3, {r0, r1}
 802310c:	4618      	mov	r0, r3
 802310e:	4770      	bx	lr
 8023110:	08029a94 	.word	0x08029a94

08023114 <rcl_guard_condition_init_from_rmw>:
 8023114:	b082      	sub	sp, #8
 8023116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802311a:	b086      	sub	sp, #24
 802311c:	4606      	mov	r6, r0
 802311e:	4688      	mov	r8, r1
 8023120:	4617      	mov	r7, r2
 8023122:	ac0c      	add	r4, sp, #48	; 0x30
 8023124:	ad01      	add	r5, sp, #4
 8023126:	f844 3f04 	str.w	r3, [r4, #4]!
 802312a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802312c:	6824      	ldr	r4, [r4, #0]
 802312e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8023130:	a801      	add	r0, sp, #4
 8023132:	602c      	str	r4, [r5, #0]
 8023134:	f7f8 fd04 	bl	801bb40 <rcutils_allocator_is_valid>
 8023138:	f080 0001 	eor.w	r0, r0, #1
 802313c:	f010 0fff 	tst.w	r0, #255	; 0xff
 8023140:	d123      	bne.n	802318a <rcl_guard_condition_init_from_rmw+0x76>
 8023142:	b316      	cbz	r6, 802318a <rcl_guard_condition_init_from_rmw+0x76>
 8023144:	6874      	ldr	r4, [r6, #4]
 8023146:	b9cc      	cbnz	r4, 802317c <rcl_guard_condition_init_from_rmw+0x68>
 8023148:	b1ff      	cbz	r7, 802318a <rcl_guard_condition_init_from_rmw+0x76>
 802314a:	4638      	mov	r0, r7
 802314c:	f7fc fc08 	bl	801f960 <rcl_context_is_valid>
 8023150:	b1e8      	cbz	r0, 802318e <rcl_guard_condition_init_from_rmw+0x7a>
 8023152:	9b01      	ldr	r3, [sp, #4]
 8023154:	201c      	movs	r0, #28
 8023156:	9905      	ldr	r1, [sp, #20]
 8023158:	4798      	blx	r3
 802315a:	4605      	mov	r5, r0
 802315c:	6070      	str	r0, [r6, #4]
 802315e:	b318      	cbz	r0, 80231a8 <rcl_guard_condition_init_from_rmw+0x94>
 8023160:	f1b8 0f00 	cmp.w	r8, #0
 8023164:	d015      	beq.n	8023192 <rcl_guard_condition_init_from_rmw+0x7e>
 8023166:	f8c0 8000 	str.w	r8, [r0]
 802316a:	7104      	strb	r4, [r0, #4]
 802316c:	ac01      	add	r4, sp, #4
 802316e:	3508      	adds	r5, #8
 8023170:	2600      	movs	r6, #0
 8023172:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8023174:	6824      	ldr	r4, [r4, #0]
 8023176:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8023178:	602c      	str	r4, [r5, #0]
 802317a:	e000      	b.n	802317e <rcl_guard_condition_init_from_rmw+0x6a>
 802317c:	2664      	movs	r6, #100	; 0x64
 802317e:	4630      	mov	r0, r6
 8023180:	b006      	add	sp, #24
 8023182:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023186:	b002      	add	sp, #8
 8023188:	4770      	bx	lr
 802318a:	260b      	movs	r6, #11
 802318c:	e7f7      	b.n	802317e <rcl_guard_condition_init_from_rmw+0x6a>
 802318e:	2665      	movs	r6, #101	; 0x65
 8023190:	e7f5      	b.n	802317e <rcl_guard_condition_init_from_rmw+0x6a>
 8023192:	6838      	ldr	r0, [r7, #0]
 8023194:	3028      	adds	r0, #40	; 0x28
 8023196:	f000 fa41 	bl	802361c <rmw_create_guard_condition>
 802319a:	6028      	str	r0, [r5, #0]
 802319c:	6875      	ldr	r5, [r6, #4]
 802319e:	682c      	ldr	r4, [r5, #0]
 80231a0:	b124      	cbz	r4, 80231ac <rcl_guard_condition_init_from_rmw+0x98>
 80231a2:	2301      	movs	r3, #1
 80231a4:	712b      	strb	r3, [r5, #4]
 80231a6:	e7e1      	b.n	802316c <rcl_guard_condition_init_from_rmw+0x58>
 80231a8:	260a      	movs	r6, #10
 80231aa:	e7e8      	b.n	802317e <rcl_guard_condition_init_from_rmw+0x6a>
 80231ac:	4628      	mov	r0, r5
 80231ae:	9b02      	ldr	r3, [sp, #8]
 80231b0:	9905      	ldr	r1, [sp, #20]
 80231b2:	4798      	blx	r3
 80231b4:	6074      	str	r4, [r6, #4]
 80231b6:	2601      	movs	r6, #1
 80231b8:	e7e1      	b.n	802317e <rcl_guard_condition_init_from_rmw+0x6a>
 80231ba:	bf00      	nop

080231bc <rcl_guard_condition_fini>:
 80231bc:	b570      	push	{r4, r5, r6, lr}
 80231be:	b082      	sub	sp, #8
 80231c0:	b1f0      	cbz	r0, 8023200 <rcl_guard_condition_fini+0x44>
 80231c2:	6843      	ldr	r3, [r0, #4]
 80231c4:	4604      	mov	r4, r0
 80231c6:	b163      	cbz	r3, 80231e2 <rcl_guard_condition_fini+0x26>
 80231c8:	6818      	ldr	r0, [r3, #0]
 80231ca:	68de      	ldr	r6, [r3, #12]
 80231cc:	6999      	ldr	r1, [r3, #24]
 80231ce:	b160      	cbz	r0, 80231ea <rcl_guard_condition_fini+0x2e>
 80231d0:	791d      	ldrb	r5, [r3, #4]
 80231d2:	b965      	cbnz	r5, 80231ee <rcl_guard_condition_fini+0x32>
 80231d4:	4618      	mov	r0, r3
 80231d6:	47b0      	blx	r6
 80231d8:	2300      	movs	r3, #0
 80231da:	4628      	mov	r0, r5
 80231dc:	6063      	str	r3, [r4, #4]
 80231de:	b002      	add	sp, #8
 80231e0:	bd70      	pop	{r4, r5, r6, pc}
 80231e2:	461d      	mov	r5, r3
 80231e4:	4628      	mov	r0, r5
 80231e6:	b002      	add	sp, #8
 80231e8:	bd70      	pop	{r4, r5, r6, pc}
 80231ea:	4605      	mov	r5, r0
 80231ec:	e7f2      	b.n	80231d4 <rcl_guard_condition_fini+0x18>
 80231ee:	9101      	str	r1, [sp, #4]
 80231f0:	f000 fa2a 	bl	8023648 <rmw_destroy_guard_condition>
 80231f4:	1e05      	subs	r5, r0, #0
 80231f6:	6863      	ldr	r3, [r4, #4]
 80231f8:	9901      	ldr	r1, [sp, #4]
 80231fa:	bf18      	it	ne
 80231fc:	2501      	movne	r5, #1
 80231fe:	e7e9      	b.n	80231d4 <rcl_guard_condition_fini+0x18>
 8023200:	250b      	movs	r5, #11
 8023202:	4628      	mov	r0, r5
 8023204:	b002      	add	sp, #8
 8023206:	bd70      	pop	{r4, r5, r6, pc}

08023208 <rcl_guard_condition_get_default_options>:
 8023208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802320c:	b086      	sub	sp, #24
 802320e:	4c09      	ldr	r4, [pc, #36]	; (8023234 <rcl_guard_condition_get_default_options+0x2c>)
 8023210:	4680      	mov	r8, r0
 8023212:	466d      	mov	r5, sp
 8023214:	4668      	mov	r0, sp
 8023216:	f7f8 fc85 	bl	801bb24 <rcutils_get_default_allocator>
 802321a:	4627      	mov	r7, r4
 802321c:	4646      	mov	r6, r8
 802321e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8023220:	682d      	ldr	r5, [r5, #0]
 8023222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8023224:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8023226:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8023228:	4640      	mov	r0, r8
 802322a:	6025      	str	r5, [r4, #0]
 802322c:	6035      	str	r5, [r6, #0]
 802322e:	b006      	add	sp, #24
 8023230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023234:	2000ff44 	.word	0x2000ff44

08023238 <rcl_validate_topic_name>:
 8023238:	2800      	cmp	r0, #0
 802323a:	f000 8083 	beq.w	8023344 <rcl_validate_topic_name+0x10c>
 802323e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023242:	460e      	mov	r6, r1
 8023244:	2900      	cmp	r1, #0
 8023246:	f000 8084 	beq.w	8023352 <rcl_validate_topic_name+0x11a>
 802324a:	4617      	mov	r7, r2
 802324c:	4605      	mov	r5, r0
 802324e:	f7dc ffe9 	bl	8000224 <strlen>
 8023252:	b1b0      	cbz	r0, 8023282 <rcl_validate_topic_name+0x4a>
 8023254:	f895 8000 	ldrb.w	r8, [r5]
 8023258:	f8df c168 	ldr.w	ip, [pc, #360]	; 80233c4 <rcl_validate_topic_name+0x18c>
 802325c:	f81c 3008 	ldrb.w	r3, [ip, r8]
 8023260:	f013 0304 	ands.w	r3, r3, #4
 8023264:	d170      	bne.n	8023348 <rcl_validate_topic_name+0x110>
 8023266:	f100 39ff 	add.w	r9, r0, #4294967295	; 0xffffffff
 802326a:	f815 2009 	ldrb.w	r2, [r5, r9]
 802326e:	2a2f      	cmp	r2, #47	; 0x2f
 8023270:	d10e      	bne.n	8023290 <rcl_validate_topic_name+0x58>
 8023272:	2202      	movs	r2, #2
 8023274:	6032      	str	r2, [r6, #0]
 8023276:	b36f      	cbz	r7, 80232d4 <rcl_validate_topic_name+0x9c>
 8023278:	4618      	mov	r0, r3
 802327a:	f8c7 9000 	str.w	r9, [r7]
 802327e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023282:	2301      	movs	r3, #1
 8023284:	6033      	str	r3, [r6, #0]
 8023286:	b32f      	cbz	r7, 80232d4 <rcl_validate_topic_name+0x9c>
 8023288:	2000      	movs	r0, #0
 802328a:	6038      	str	r0, [r7, #0]
 802328c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023290:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 8023294:	461c      	mov	r4, r3
 8023296:	4619      	mov	r1, r3
 8023298:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 802329c:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80232a0:	f1be 0f09 	cmp.w	lr, #9
 80232a4:	d919      	bls.n	80232da <rcl_validate_topic_name+0xa2>
 80232a6:	f022 0e20 	bic.w	lr, r2, #32
 80232aa:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 80232ae:	f1be 0f19 	cmp.w	lr, #25
 80232b2:	d912      	bls.n	80232da <rcl_validate_topic_name+0xa2>
 80232b4:	2a5f      	cmp	r2, #95	; 0x5f
 80232b6:	d01d      	beq.n	80232f4 <rcl_validate_topic_name+0xbc>
 80232b8:	2a2f      	cmp	r2, #47	; 0x2f
 80232ba:	d058      	beq.n	802336e <rcl_validate_topic_name+0x136>
 80232bc:	2a7e      	cmp	r2, #126	; 0x7e
 80232be:	d04a      	beq.n	8023356 <rcl_validate_topic_name+0x11e>
 80232c0:	2a7b      	cmp	r2, #123	; 0x7b
 80232c2:	d05f      	beq.n	8023384 <rcl_validate_topic_name+0x14c>
 80232c4:	2a7d      	cmp	r2, #125	; 0x7d
 80232c6:	d16c      	bne.n	80233a2 <rcl_validate_topic_name+0x16a>
 80232c8:	2c00      	cmp	r4, #0
 80232ca:	d160      	bne.n	802338e <rcl_validate_topic_name+0x156>
 80232cc:	2305      	movs	r3, #5
 80232ce:	6033      	str	r3, [r6, #0]
 80232d0:	b107      	cbz	r7, 80232d4 <rcl_validate_topic_name+0x9c>
 80232d2:	6039      	str	r1, [r7, #0]
 80232d4:	2000      	movs	r0, #0
 80232d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80232da:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80232de:	0752      	lsls	r2, r2, #29
 80232e0:	d508      	bpl.n	80232f4 <rcl_validate_topic_name+0xbc>
 80232e2:	2900      	cmp	r1, #0
 80232e4:	bf14      	ite	ne
 80232e6:	4622      	movne	r2, r4
 80232e8:	2200      	moveq	r2, #0
 80232ea:	b11a      	cbz	r2, 80232f4 <rcl_validate_topic_name+0xbc>
 80232ec:	1e4c      	subs	r4, r1, #1
 80232ee:	429c      	cmp	r4, r3
 80232f0:	d038      	beq.n	8023364 <rcl_validate_topic_name+0x12c>
 80232f2:	4614      	mov	r4, r2
 80232f4:	3101      	adds	r1, #1
 80232f6:	4288      	cmp	r0, r1
 80232f8:	d1ce      	bne.n	8023298 <rcl_validate_topic_name+0x60>
 80232fa:	2c00      	cmp	r4, #0
 80232fc:	d14c      	bne.n	8023398 <rcl_validate_topic_name+0x160>
 80232fe:	4620      	mov	r0, r4
 8023300:	f109 0e01 	add.w	lr, r9, #1
 8023304:	e009      	b.n	802331a <rcl_validate_topic_name+0xe2>
 8023306:	f1b8 0f7e 	cmp.w	r8, #126	; 0x7e
 802330a:	d101      	bne.n	8023310 <rcl_validate_topic_name+0xd8>
 802330c:	2801      	cmp	r0, #1
 802330e:	d050      	beq.n	80233b2 <rcl_validate_topic_name+0x17a>
 8023310:	428a      	cmp	r2, r1
 8023312:	f105 0501 	add.w	r5, r5, #1
 8023316:	4618      	mov	r0, r3
 8023318:	d23b      	bcs.n	8023392 <rcl_validate_topic_name+0x15a>
 802331a:	4581      	cmp	r9, r0
 802331c:	f100 0301 	add.w	r3, r0, #1
 8023320:	d02c      	beq.n	802337c <rcl_validate_topic_name+0x144>
 8023322:	782c      	ldrb	r4, [r5, #0]
 8023324:	461a      	mov	r2, r3
 8023326:	2c2f      	cmp	r4, #47	; 0x2f
 8023328:	d1ed      	bne.n	8023306 <rcl_validate_topic_name+0xce>
 802332a:	786a      	ldrb	r2, [r5, #1]
 802332c:	f81c 0002 	ldrb.w	r0, [ip, r2]
 8023330:	461a      	mov	r2, r3
 8023332:	0740      	lsls	r0, r0, #29
 8023334:	d5ec      	bpl.n	8023310 <rcl_validate_topic_name+0xd8>
 8023336:	2204      	movs	r2, #4
 8023338:	6032      	str	r2, [r6, #0]
 802333a:	2f00      	cmp	r7, #0
 802333c:	d0ca      	beq.n	80232d4 <rcl_validate_topic_name+0x9c>
 802333e:	2000      	movs	r0, #0
 8023340:	603b      	str	r3, [r7, #0]
 8023342:	e7a3      	b.n	802328c <rcl_validate_topic_name+0x54>
 8023344:	200b      	movs	r0, #11
 8023346:	4770      	bx	lr
 8023348:	2304      	movs	r3, #4
 802334a:	6033      	str	r3, [r6, #0]
 802334c:	2f00      	cmp	r7, #0
 802334e:	d19b      	bne.n	8023288 <rcl_validate_topic_name+0x50>
 8023350:	e7c0      	b.n	80232d4 <rcl_validate_topic_name+0x9c>
 8023352:	200b      	movs	r0, #11
 8023354:	e79a      	b.n	802328c <rcl_validate_topic_name+0x54>
 8023356:	2900      	cmp	r1, #0
 8023358:	d0cc      	beq.n	80232f4 <rcl_validate_topic_name+0xbc>
 802335a:	2306      	movs	r3, #6
 802335c:	6033      	str	r3, [r6, #0]
 802335e:	2f00      	cmp	r7, #0
 8023360:	d1b7      	bne.n	80232d2 <rcl_validate_topic_name+0x9a>
 8023362:	e7b7      	b.n	80232d4 <rcl_validate_topic_name+0x9c>
 8023364:	2309      	movs	r3, #9
 8023366:	6033      	str	r3, [r6, #0]
 8023368:	2f00      	cmp	r7, #0
 802336a:	d1b2      	bne.n	80232d2 <rcl_validate_topic_name+0x9a>
 802336c:	e7b2      	b.n	80232d4 <rcl_validate_topic_name+0x9c>
 802336e:	2c00      	cmp	r4, #0
 8023370:	d0c0      	beq.n	80232f4 <rcl_validate_topic_name+0xbc>
 8023372:	2308      	movs	r3, #8
 8023374:	6033      	str	r3, [r6, #0]
 8023376:	2f00      	cmp	r7, #0
 8023378:	d1ab      	bne.n	80232d2 <rcl_validate_topic_name+0x9a>
 802337a:	e7ab      	b.n	80232d4 <rcl_validate_topic_name+0x9c>
 802337c:	4672      	mov	r2, lr
 802337e:	f109 0301 	add.w	r3, r9, #1
 8023382:	e7c5      	b.n	8023310 <rcl_validate_topic_name+0xd8>
 8023384:	2c00      	cmp	r4, #0
 8023386:	d1f4      	bne.n	8023372 <rcl_validate_topic_name+0x13a>
 8023388:	460b      	mov	r3, r1
 802338a:	2401      	movs	r4, #1
 802338c:	e7b2      	b.n	80232f4 <rcl_validate_topic_name+0xbc>
 802338e:	2400      	movs	r4, #0
 8023390:	e7b0      	b.n	80232f4 <rcl_validate_topic_name+0xbc>
 8023392:	2000      	movs	r0, #0
 8023394:	6030      	str	r0, [r6, #0]
 8023396:	e779      	b.n	802328c <rcl_validate_topic_name+0x54>
 8023398:	2205      	movs	r2, #5
 802339a:	6032      	str	r2, [r6, #0]
 802339c:	2f00      	cmp	r7, #0
 802339e:	d1ce      	bne.n	802333e <rcl_validate_topic_name+0x106>
 80233a0:	e798      	b.n	80232d4 <rcl_validate_topic_name+0x9c>
 80233a2:	2c00      	cmp	r4, #0
 80233a4:	bf14      	ite	ne
 80233a6:	2308      	movne	r3, #8
 80233a8:	2303      	moveq	r3, #3
 80233aa:	6033      	str	r3, [r6, #0]
 80233ac:	2f00      	cmp	r7, #0
 80233ae:	d190      	bne.n	80232d2 <rcl_validate_topic_name+0x9a>
 80233b0:	e790      	b.n	80232d4 <rcl_validate_topic_name+0x9c>
 80233b2:	2307      	movs	r3, #7
 80233b4:	6033      	str	r3, [r6, #0]
 80233b6:	2f00      	cmp	r7, #0
 80233b8:	d08c      	beq.n	80232d4 <rcl_validate_topic_name+0x9c>
 80233ba:	2301      	movs	r3, #1
 80233bc:	2000      	movs	r0, #0
 80233be:	603b      	str	r3, [r7, #0]
 80233c0:	e764      	b.n	802328c <rcl_validate_topic_name+0x54>
 80233c2:	bf00      	nop
 80233c4:	08029a9d 	.word	0x08029a9d

080233c8 <on_status>:
 80233c8:	b082      	sub	sp, #8
 80233ca:	b002      	add	sp, #8
 80233cc:	4770      	bx	lr
 80233ce:	bf00      	nop

080233d0 <on_topic>:
 80233d0:	4a22      	ldr	r2, [pc, #136]	; (802345c <on_topic+0x8c>)
 80233d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80233d6:	6812      	ldr	r2, [r2, #0]
 80233d8:	b094      	sub	sp, #80	; 0x50
 80233da:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80233dc:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 80233e0:	9113      	str	r1, [sp, #76]	; 0x4c
 80233e2:	9312      	str	r3, [sp, #72]	; 0x48
 80233e4:	b3ba      	cbz	r2, 8023456 <on_topic+0x86>
 80233e6:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 80233ea:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 80233ee:	e001      	b.n	80233f4 <on_topic+0x24>
 80233f0:	6852      	ldr	r2, [r2, #4]
 80233f2:	b382      	cbz	r2, 8023456 <on_topic+0x86>
 80233f4:	6894      	ldr	r4, [r2, #8]
 80233f6:	8aa3      	ldrh	r3, [r4, #20]
 80233f8:	428b      	cmp	r3, r1
 80233fa:	d1f9      	bne.n	80233f0 <on_topic+0x20>
 80233fc:	7da3      	ldrb	r3, [r4, #22]
 80233fe:	4283      	cmp	r3, r0
 8023400:	d1f6      	bne.n	80233f0 <on_topic+0x20>
 8023402:	2248      	movs	r2, #72	; 0x48
 8023404:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8023408:	4668      	mov	r0, sp
 802340a:	f000 fac3 	bl	8023994 <memcpy>
 802340e:	4620      	mov	r0, r4
 8023410:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8023414:	f7f8 ff3c 	bl	801c290 <rmw_uxrce_get_static_input_buffer_for_entity>
 8023418:	4607      	mov	r7, r0
 802341a:	b1e0      	cbz	r0, 8023456 <on_topic+0x86>
 802341c:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8023420:	462a      	mov	r2, r5
 8023422:	4630      	mov	r0, r6
 8023424:	f108 0110 	add.w	r1, r8, #16
 8023428:	f7fe fcb8 	bl	8021d9c <ucdr_deserialize_array_uint8_t>
 802342c:	b930      	cbnz	r0, 802343c <on_topic+0x6c>
 802342e:	4639      	mov	r1, r7
 8023430:	480b      	ldr	r0, [pc, #44]	; (8023460 <on_topic+0x90>)
 8023432:	b014      	add	sp, #80	; 0x50
 8023434:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023438:	f7fd befc 	b.w	8021234 <put_memory>
 802343c:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 8023440:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 8023444:	f7fe fb9e 	bl	8021b84 <rmw_uros_epoch_nanos>
 8023448:	f608 0218 	addw	r2, r8, #2072	; 0x818
 802344c:	2305      	movs	r3, #5
 802344e:	e9c2 0100 	strd	r0, r1, [r2]
 8023452:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 8023456:	b014      	add	sp, #80	; 0x50
 8023458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802345c:	200131ec 	.word	0x200131ec
 8023460:	2000ff80 	.word	0x2000ff80

08023464 <on_request>:
 8023464:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023468:	4823      	ldr	r0, [pc, #140]	; (80234f8 <on_request+0x94>)
 802346a:	b095      	sub	sp, #84	; 0x54
 802346c:	9113      	str	r1, [sp, #76]	; 0x4c
 802346e:	6801      	ldr	r1, [r0, #0]
 8023470:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8023474:	f8bd 7074 	ldrh.w	r7, [sp, #116]	; 0x74
 8023478:	2900      	cmp	r1, #0
 802347a:	d039      	beq.n	80234f0 <on_request+0x8c>
 802347c:	461d      	mov	r5, r3
 802347e:	e001      	b.n	8023484 <on_request+0x20>
 8023480:	6849      	ldr	r1, [r1, #4]
 8023482:	b3a9      	cbz	r1, 80234f0 <on_request+0x8c>
 8023484:	688c      	ldr	r4, [r1, #8]
 8023486:	8b20      	ldrh	r0, [r4, #24]
 8023488:	4290      	cmp	r0, r2
 802348a:	d1f9      	bne.n	8023480 <on_request+0x1c>
 802348c:	2248      	movs	r2, #72	; 0x48
 802348e:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8023492:	4668      	mov	r0, sp
 8023494:	f000 fa7e 	bl	8023994 <memcpy>
 8023498:	4620      	mov	r0, r4
 802349a:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 802349e:	f7f8 fef7 	bl	801c290 <rmw_uxrce_get_static_input_buffer_for_entity>
 80234a2:	4606      	mov	r6, r0
 80234a4:	b320      	cbz	r0, 80234f0 <on_request+0x8c>
 80234a6:	f8d0 9008 	ldr.w	r9, [r0, #8]
 80234aa:	463a      	mov	r2, r7
 80234ac:	4640      	mov	r0, r8
 80234ae:	f109 0110 	add.w	r1, r9, #16
 80234b2:	f7fe fc73 	bl	8021d9c <ucdr_deserialize_array_uint8_t>
 80234b6:	b930      	cbnz	r0, 80234c6 <on_request+0x62>
 80234b8:	4631      	mov	r1, r6
 80234ba:	4810      	ldr	r0, [pc, #64]	; (80234fc <on_request+0x98>)
 80234bc:	b015      	add	sp, #84	; 0x54
 80234be:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80234c2:	f7fd beb7 	b.w	8021234 <put_memory>
 80234c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80234c8:	f609 0628 	addw	r6, r9, #2088	; 0x828
 80234cc:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 80234d0:	f8c9 7810 	str.w	r7, [r9, #2064]	; 0x810
 80234d4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80234d6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80234da:	e886 0003 	stmia.w	r6, {r0, r1}
 80234de:	f7fe fb51 	bl	8021b84 <rmw_uros_epoch_nanos>
 80234e2:	f609 0218 	addw	r2, r9, #2072	; 0x818
 80234e6:	2303      	movs	r3, #3
 80234e8:	e9c2 0100 	strd	r0, r1, [r2]
 80234ec:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 80234f0:	b015      	add	sp, #84	; 0x54
 80234f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80234f6:	bf00      	nop
 80234f8:	200131dc 	.word	0x200131dc
 80234fc:	2000ff80 	.word	0x2000ff80

08023500 <on_reply>:
 8023500:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023504:	4821      	ldr	r0, [pc, #132]	; (802358c <on_reply+0x8c>)
 8023506:	b095      	sub	sp, #84	; 0x54
 8023508:	9113      	str	r1, [sp, #76]	; 0x4c
 802350a:	6801      	ldr	r1, [r0, #0]
 802350c:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8023510:	f8bd 7074 	ldrh.w	r7, [sp, #116]	; 0x74
 8023514:	b3b9      	cbz	r1, 8023586 <on_reply+0x86>
 8023516:	461d      	mov	r5, r3
 8023518:	e001      	b.n	802351e <on_reply+0x1e>
 802351a:	6849      	ldr	r1, [r1, #4]
 802351c:	b399      	cbz	r1, 8023586 <on_reply+0x86>
 802351e:	688c      	ldr	r4, [r1, #8]
 8023520:	8b20      	ldrh	r0, [r4, #24]
 8023522:	4290      	cmp	r0, r2
 8023524:	d1f9      	bne.n	802351a <on_reply+0x1a>
 8023526:	2248      	movs	r2, #72	; 0x48
 8023528:	f104 0128 	add.w	r1, r4, #40	; 0x28
 802352c:	4668      	mov	r0, sp
 802352e:	f000 fa31 	bl	8023994 <memcpy>
 8023532:	4620      	mov	r0, r4
 8023534:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8023538:	f7f8 feaa 	bl	801c290 <rmw_uxrce_get_static_input_buffer_for_entity>
 802353c:	4606      	mov	r6, r0
 802353e:	b310      	cbz	r0, 8023586 <on_reply+0x86>
 8023540:	f8d0 9008 	ldr.w	r9, [r0, #8]
 8023544:	463a      	mov	r2, r7
 8023546:	4640      	mov	r0, r8
 8023548:	f109 0110 	add.w	r1, r9, #16
 802354c:	f7fe fc26 	bl	8021d9c <ucdr_deserialize_array_uint8_t>
 8023550:	b930      	cbnz	r0, 8023560 <on_reply+0x60>
 8023552:	4631      	mov	r1, r6
 8023554:	480e      	ldr	r0, [pc, #56]	; (8023590 <on_reply+0x90>)
 8023556:	b015      	add	sp, #84	; 0x54
 8023558:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802355c:	f7fd be6a 	b.w	8021234 <put_memory>
 8023560:	b2aa      	uxth	r2, r5
 8023562:	2300      	movs	r3, #0
 8023564:	f609 0128 	addw	r1, r9, #2088	; 0x828
 8023568:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 802356c:	f8c9 7810 	str.w	r7, [r9, #2064]	; 0x810
 8023570:	e9c1 2300 	strd	r2, r3, [r1]
 8023574:	f7fe fb06 	bl	8021b84 <rmw_uros_epoch_nanos>
 8023578:	f609 0218 	addw	r2, r9, #2072	; 0x818
 802357c:	2304      	movs	r3, #4
 802357e:	e9c2 0100 	strd	r0, r1, [r2]
 8023582:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 8023586:	b015      	add	sp, #84	; 0x54
 8023588:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802358c:	20010810 	.word	0x20010810
 8023590:	2000ff80 	.word	0x2000ff80

08023594 <rmw_destroy_client>:
 8023594:	b570      	push	{r4, r5, r6, lr}
 8023596:	b128      	cbz	r0, 80235a4 <rmw_destroy_client+0x10>
 8023598:	4604      	mov	r4, r0
 802359a:	6800      	ldr	r0, [r0, #0]
 802359c:	460d      	mov	r5, r1
 802359e:	f7f8 ff4d 	bl	801c43c <is_uxrce_rmw_identifier_valid>
 80235a2:	b910      	cbnz	r0, 80235aa <rmw_destroy_client+0x16>
 80235a4:	2401      	movs	r4, #1
 80235a6:	4620      	mov	r0, r4
 80235a8:	bd70      	pop	{r4, r5, r6, pc}
 80235aa:	6863      	ldr	r3, [r4, #4]
 80235ac:	2b00      	cmp	r3, #0
 80235ae:	d0f9      	beq.n	80235a4 <rmw_destroy_client+0x10>
 80235b0:	2d00      	cmp	r5, #0
 80235b2:	d0f7      	beq.n	80235a4 <rmw_destroy_client+0x10>
 80235b4:	6828      	ldr	r0, [r5, #0]
 80235b6:	f7f8 ff41 	bl	801c43c <is_uxrce_rmw_identifier_valid>
 80235ba:	2800      	cmp	r0, #0
 80235bc:	d0f2      	beq.n	80235a4 <rmw_destroy_client+0x10>
 80235be:	686e      	ldr	r6, [r5, #4]
 80235c0:	2e00      	cmp	r6, #0
 80235c2:	d0ef      	beq.n	80235a4 <rmw_destroy_client+0x10>
 80235c4:	6864      	ldr	r4, [r4, #4]
 80235c6:	6932      	ldr	r2, [r6, #16]
 80235c8:	6920      	ldr	r0, [r4, #16]
 80235ca:	f8d0 3310 	ldr.w	r3, [r0, #784]	; 0x310
 80235ce:	f500 700a 	add.w	r0, r0, #552	; 0x228
 80235d2:	6819      	ldr	r1, [r3, #0]
 80235d4:	f7ff f9fa 	bl	80229cc <uxr_buffer_cancel_data>
 80235d8:	4602      	mov	r2, r0
 80235da:	6920      	ldr	r0, [r4, #16]
 80235dc:	f8d0 3318 	ldr.w	r3, [r0, #792]	; 0x318
 80235e0:	f8d0 1310 	ldr.w	r1, [r0, #784]	; 0x310
 80235e4:	f7f8 fea4 	bl	801c330 <run_xrce_session>
 80235e8:	6920      	ldr	r0, [r4, #16]
 80235ea:	6932      	ldr	r2, [r6, #16]
 80235ec:	f8d0 3310 	ldr.w	r3, [r0, #784]	; 0x310
 80235f0:	f500 700a 	add.w	r0, r0, #552	; 0x228
 80235f4:	6819      	ldr	r1, [r3, #0]
 80235f6:	f7f9 ffe3 	bl	801d5c0 <uxr_buffer_delete_entity>
 80235fa:	4602      	mov	r2, r0
 80235fc:	6920      	ldr	r0, [r4, #16]
 80235fe:	f8d0 3318 	ldr.w	r3, [r0, #792]	; 0x318
 8023602:	f8d0 1310 	ldr.w	r1, [r0, #784]	; 0x310
 8023606:	f7f8 fe93 	bl	801c330 <run_xrce_session>
 802360a:	4603      	mov	r3, r0
 802360c:	4628      	mov	r0, r5
 802360e:	2b00      	cmp	r3, #0
 8023610:	bf14      	ite	ne
 8023612:	2400      	movne	r4, #0
 8023614:	2402      	moveq	r4, #2
 8023616:	f7f8 fe19 	bl	801c24c <rmw_uxrce_fini_client_memory>
 802361a:	e7c4      	b.n	80235a6 <rmw_destroy_client+0x12>

0802361c <rmw_create_guard_condition>:
 802361c:	b538      	push	{r3, r4, r5, lr}
 802361e:	4605      	mov	r5, r0
 8023620:	4808      	ldr	r0, [pc, #32]	; (8023644 <rmw_create_guard_condition+0x28>)
 8023622:	f7fd fdf7 	bl	8021214 <get_memory>
 8023626:	4603      	mov	r3, r0
 8023628:	b148      	cbz	r0, 802363e <rmw_create_guard_condition+0x22>
 802362a:	6884      	ldr	r4, [r0, #8]
 802362c:	2300      	movs	r3, #0
 802362e:	61e5      	str	r5, [r4, #28]
 8023630:	7423      	strb	r3, [r4, #16]
 8023632:	f7fd fe13 	bl	802125c <rmw_get_implementation_identifier>
 8023636:	f104 0314 	add.w	r3, r4, #20
 802363a:	e9c4 0405 	strd	r0, r4, [r4, #20]
 802363e:	4618      	mov	r0, r3
 8023640:	bd38      	pop	{r3, r4, r5, pc}
 8023642:	bf00      	nop
 8023644:	20013108 	.word	0x20013108

08023648 <rmw_destroy_guard_condition>:
 8023648:	b508      	push	{r3, lr}
 802364a:	4b08      	ldr	r3, [pc, #32]	; (802366c <rmw_destroy_guard_condition+0x24>)
 802364c:	6819      	ldr	r1, [r3, #0]
 802364e:	b911      	cbnz	r1, 8023656 <rmw_destroy_guard_condition+0xe>
 8023650:	e00a      	b.n	8023668 <rmw_destroy_guard_condition+0x20>
 8023652:	6849      	ldr	r1, [r1, #4]
 8023654:	b141      	cbz	r1, 8023668 <rmw_destroy_guard_condition+0x20>
 8023656:	688b      	ldr	r3, [r1, #8]
 8023658:	3314      	adds	r3, #20
 802365a:	4298      	cmp	r0, r3
 802365c:	d1f9      	bne.n	8023652 <rmw_destroy_guard_condition+0xa>
 802365e:	4803      	ldr	r0, [pc, #12]	; (802366c <rmw_destroy_guard_condition+0x24>)
 8023660:	f7fd fde8 	bl	8021234 <put_memory>
 8023664:	2000      	movs	r0, #0
 8023666:	bd08      	pop	{r3, pc}
 8023668:	2001      	movs	r0, #1
 802366a:	bd08      	pop	{r3, pc}
 802366c:	20013108 	.word	0x20013108

08023670 <atoi>:
 8023670:	220a      	movs	r2, #10
 8023672:	2100      	movs	r1, #0
 8023674:	f000 bd68 	b.w	8024148 <strtol>

08023678 <calloc>:
 8023678:	4b02      	ldr	r3, [pc, #8]	; (8023684 <calloc+0xc>)
 802367a:	460a      	mov	r2, r1
 802367c:	4601      	mov	r1, r0
 802367e:	6818      	ldr	r0, [r3, #0]
 8023680:	f000 b9b8 	b.w	80239f4 <_calloc_r>
 8023684:	200000c0 	.word	0x200000c0

08023688 <std>:
 8023688:	2300      	movs	r3, #0
 802368a:	b510      	push	{r4, lr}
 802368c:	4604      	mov	r4, r0
 802368e:	e9c0 3300 	strd	r3, r3, [r0]
 8023692:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8023696:	6083      	str	r3, [r0, #8]
 8023698:	8181      	strh	r1, [r0, #12]
 802369a:	6643      	str	r3, [r0, #100]	; 0x64
 802369c:	81c2      	strh	r2, [r0, #14]
 802369e:	6183      	str	r3, [r0, #24]
 80236a0:	4619      	mov	r1, r3
 80236a2:	2208      	movs	r2, #8
 80236a4:	305c      	adds	r0, #92	; 0x5c
 80236a6:	f000 f99d 	bl	80239e4 <memset>
 80236aa:	4b05      	ldr	r3, [pc, #20]	; (80236c0 <std+0x38>)
 80236ac:	6263      	str	r3, [r4, #36]	; 0x24
 80236ae:	4b05      	ldr	r3, [pc, #20]	; (80236c4 <std+0x3c>)
 80236b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80236b2:	4b05      	ldr	r3, [pc, #20]	; (80236c8 <std+0x40>)
 80236b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80236b6:	4b05      	ldr	r3, [pc, #20]	; (80236cc <std+0x44>)
 80236b8:	6224      	str	r4, [r4, #32]
 80236ba:	6323      	str	r3, [r4, #48]	; 0x30
 80236bc:	bd10      	pop	{r4, pc}
 80236be:	bf00      	nop
 80236c0:	08023f41 	.word	0x08023f41
 80236c4:	08023f63 	.word	0x08023f63
 80236c8:	08023f9b 	.word	0x08023f9b
 80236cc:	08023fbf 	.word	0x08023fbf

080236d0 <_cleanup_r>:
 80236d0:	4901      	ldr	r1, [pc, #4]	; (80236d8 <_cleanup_r+0x8>)
 80236d2:	f000 b8af 	b.w	8023834 <_fwalk_reent>
 80236d6:	bf00      	nop
 80236d8:	080245f9 	.word	0x080245f9

080236dc <__sfmoreglue>:
 80236dc:	b570      	push	{r4, r5, r6, lr}
 80236de:	2268      	movs	r2, #104	; 0x68
 80236e0:	1e4d      	subs	r5, r1, #1
 80236e2:	4355      	muls	r5, r2
 80236e4:	460e      	mov	r6, r1
 80236e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80236ea:	f000 fa05 	bl	8023af8 <_malloc_r>
 80236ee:	4604      	mov	r4, r0
 80236f0:	b140      	cbz	r0, 8023704 <__sfmoreglue+0x28>
 80236f2:	2100      	movs	r1, #0
 80236f4:	e9c0 1600 	strd	r1, r6, [r0]
 80236f8:	300c      	adds	r0, #12
 80236fa:	60a0      	str	r0, [r4, #8]
 80236fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8023700:	f000 f970 	bl	80239e4 <memset>
 8023704:	4620      	mov	r0, r4
 8023706:	bd70      	pop	{r4, r5, r6, pc}

08023708 <__sfp_lock_acquire>:
 8023708:	4801      	ldr	r0, [pc, #4]	; (8023710 <__sfp_lock_acquire+0x8>)
 802370a:	f000 b920 	b.w	802394e <__retarget_lock_acquire_recursive>
 802370e:	bf00      	nop
 8023710:	2000ff5a 	.word	0x2000ff5a

08023714 <__sfp_lock_release>:
 8023714:	4801      	ldr	r0, [pc, #4]	; (802371c <__sfp_lock_release+0x8>)
 8023716:	f000 b91b 	b.w	8023950 <__retarget_lock_release_recursive>
 802371a:	bf00      	nop
 802371c:	2000ff5a 	.word	0x2000ff5a

08023720 <__sinit_lock_acquire>:
 8023720:	4801      	ldr	r0, [pc, #4]	; (8023728 <__sinit_lock_acquire+0x8>)
 8023722:	f000 b914 	b.w	802394e <__retarget_lock_acquire_recursive>
 8023726:	bf00      	nop
 8023728:	2000ff5b 	.word	0x2000ff5b

0802372c <__sinit_lock_release>:
 802372c:	4801      	ldr	r0, [pc, #4]	; (8023734 <__sinit_lock_release+0x8>)
 802372e:	f000 b90f 	b.w	8023950 <__retarget_lock_release_recursive>
 8023732:	bf00      	nop
 8023734:	2000ff5b 	.word	0x2000ff5b

08023738 <__sinit>:
 8023738:	b510      	push	{r4, lr}
 802373a:	4604      	mov	r4, r0
 802373c:	f7ff fff0 	bl	8023720 <__sinit_lock_acquire>
 8023740:	69a3      	ldr	r3, [r4, #24]
 8023742:	b11b      	cbz	r3, 802374c <__sinit+0x14>
 8023744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023748:	f7ff bff0 	b.w	802372c <__sinit_lock_release>
 802374c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8023750:	6523      	str	r3, [r4, #80]	; 0x50
 8023752:	4b13      	ldr	r3, [pc, #76]	; (80237a0 <__sinit+0x68>)
 8023754:	4a13      	ldr	r2, [pc, #76]	; (80237a4 <__sinit+0x6c>)
 8023756:	681b      	ldr	r3, [r3, #0]
 8023758:	62a2      	str	r2, [r4, #40]	; 0x28
 802375a:	42a3      	cmp	r3, r4
 802375c:	bf04      	itt	eq
 802375e:	2301      	moveq	r3, #1
 8023760:	61a3      	streq	r3, [r4, #24]
 8023762:	4620      	mov	r0, r4
 8023764:	f000 f820 	bl	80237a8 <__sfp>
 8023768:	6060      	str	r0, [r4, #4]
 802376a:	4620      	mov	r0, r4
 802376c:	f000 f81c 	bl	80237a8 <__sfp>
 8023770:	60a0      	str	r0, [r4, #8]
 8023772:	4620      	mov	r0, r4
 8023774:	f000 f818 	bl	80237a8 <__sfp>
 8023778:	2200      	movs	r2, #0
 802377a:	60e0      	str	r0, [r4, #12]
 802377c:	2104      	movs	r1, #4
 802377e:	6860      	ldr	r0, [r4, #4]
 8023780:	f7ff ff82 	bl	8023688 <std>
 8023784:	68a0      	ldr	r0, [r4, #8]
 8023786:	2201      	movs	r2, #1
 8023788:	2109      	movs	r1, #9
 802378a:	f7ff ff7d 	bl	8023688 <std>
 802378e:	68e0      	ldr	r0, [r4, #12]
 8023790:	2202      	movs	r2, #2
 8023792:	2112      	movs	r1, #18
 8023794:	f7ff ff78 	bl	8023688 <std>
 8023798:	2301      	movs	r3, #1
 802379a:	61a3      	str	r3, [r4, #24]
 802379c:	e7d2      	b.n	8023744 <__sinit+0xc>
 802379e:	bf00      	nop
 80237a0:	08029c00 	.word	0x08029c00
 80237a4:	080236d1 	.word	0x080236d1

080237a8 <__sfp>:
 80237a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80237aa:	4607      	mov	r7, r0
 80237ac:	f7ff ffac 	bl	8023708 <__sfp_lock_acquire>
 80237b0:	4b1e      	ldr	r3, [pc, #120]	; (802382c <__sfp+0x84>)
 80237b2:	681e      	ldr	r6, [r3, #0]
 80237b4:	69b3      	ldr	r3, [r6, #24]
 80237b6:	b913      	cbnz	r3, 80237be <__sfp+0x16>
 80237b8:	4630      	mov	r0, r6
 80237ba:	f7ff ffbd 	bl	8023738 <__sinit>
 80237be:	3648      	adds	r6, #72	; 0x48
 80237c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80237c4:	3b01      	subs	r3, #1
 80237c6:	d503      	bpl.n	80237d0 <__sfp+0x28>
 80237c8:	6833      	ldr	r3, [r6, #0]
 80237ca:	b30b      	cbz	r3, 8023810 <__sfp+0x68>
 80237cc:	6836      	ldr	r6, [r6, #0]
 80237ce:	e7f7      	b.n	80237c0 <__sfp+0x18>
 80237d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80237d4:	b9d5      	cbnz	r5, 802380c <__sfp+0x64>
 80237d6:	4b16      	ldr	r3, [pc, #88]	; (8023830 <__sfp+0x88>)
 80237d8:	60e3      	str	r3, [r4, #12]
 80237da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80237de:	6665      	str	r5, [r4, #100]	; 0x64
 80237e0:	f000 f8b4 	bl	802394c <__retarget_lock_init_recursive>
 80237e4:	f7ff ff96 	bl	8023714 <__sfp_lock_release>
 80237e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80237ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80237f0:	6025      	str	r5, [r4, #0]
 80237f2:	61a5      	str	r5, [r4, #24]
 80237f4:	2208      	movs	r2, #8
 80237f6:	4629      	mov	r1, r5
 80237f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80237fc:	f000 f8f2 	bl	80239e4 <memset>
 8023800:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8023804:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8023808:	4620      	mov	r0, r4
 802380a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802380c:	3468      	adds	r4, #104	; 0x68
 802380e:	e7d9      	b.n	80237c4 <__sfp+0x1c>
 8023810:	2104      	movs	r1, #4
 8023812:	4638      	mov	r0, r7
 8023814:	f7ff ff62 	bl	80236dc <__sfmoreglue>
 8023818:	4604      	mov	r4, r0
 802381a:	6030      	str	r0, [r6, #0]
 802381c:	2800      	cmp	r0, #0
 802381e:	d1d5      	bne.n	80237cc <__sfp+0x24>
 8023820:	f7ff ff78 	bl	8023714 <__sfp_lock_release>
 8023824:	230c      	movs	r3, #12
 8023826:	603b      	str	r3, [r7, #0]
 8023828:	e7ee      	b.n	8023808 <__sfp+0x60>
 802382a:	bf00      	nop
 802382c:	08029c00 	.word	0x08029c00
 8023830:	ffff0001 	.word	0xffff0001

08023834 <_fwalk_reent>:
 8023834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023838:	4606      	mov	r6, r0
 802383a:	4688      	mov	r8, r1
 802383c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8023840:	2700      	movs	r7, #0
 8023842:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8023846:	f1b9 0901 	subs.w	r9, r9, #1
 802384a:	d505      	bpl.n	8023858 <_fwalk_reent+0x24>
 802384c:	6824      	ldr	r4, [r4, #0]
 802384e:	2c00      	cmp	r4, #0
 8023850:	d1f7      	bne.n	8023842 <_fwalk_reent+0xe>
 8023852:	4638      	mov	r0, r7
 8023854:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023858:	89ab      	ldrh	r3, [r5, #12]
 802385a:	2b01      	cmp	r3, #1
 802385c:	d907      	bls.n	802386e <_fwalk_reent+0x3a>
 802385e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023862:	3301      	adds	r3, #1
 8023864:	d003      	beq.n	802386e <_fwalk_reent+0x3a>
 8023866:	4629      	mov	r1, r5
 8023868:	4630      	mov	r0, r6
 802386a:	47c0      	blx	r8
 802386c:	4307      	orrs	r7, r0
 802386e:	3568      	adds	r5, #104	; 0x68
 8023870:	e7e9      	b.n	8023846 <_fwalk_reent+0x12>
	...

08023874 <getenv>:
 8023874:	b507      	push	{r0, r1, r2, lr}
 8023876:	4b04      	ldr	r3, [pc, #16]	; (8023888 <getenv+0x14>)
 8023878:	4601      	mov	r1, r0
 802387a:	aa01      	add	r2, sp, #4
 802387c:	6818      	ldr	r0, [r3, #0]
 802387e:	f000 f805 	bl	802388c <_findenv_r>
 8023882:	b003      	add	sp, #12
 8023884:	f85d fb04 	ldr.w	pc, [sp], #4
 8023888:	200000c0 	.word	0x200000c0

0802388c <_findenv_r>:
 802388c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023890:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8023900 <_findenv_r+0x74>
 8023894:	4607      	mov	r7, r0
 8023896:	4689      	mov	r9, r1
 8023898:	4616      	mov	r6, r2
 802389a:	f000 fe15 	bl	80244c8 <__env_lock>
 802389e:	f8da 4000 	ldr.w	r4, [sl]
 80238a2:	b134      	cbz	r4, 80238b2 <_findenv_r+0x26>
 80238a4:	464b      	mov	r3, r9
 80238a6:	4698      	mov	r8, r3
 80238a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80238ac:	b13a      	cbz	r2, 80238be <_findenv_r+0x32>
 80238ae:	2a3d      	cmp	r2, #61	; 0x3d
 80238b0:	d1f9      	bne.n	80238a6 <_findenv_r+0x1a>
 80238b2:	4638      	mov	r0, r7
 80238b4:	f000 fe0e 	bl	80244d4 <__env_unlock>
 80238b8:	2000      	movs	r0, #0
 80238ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80238be:	eba8 0809 	sub.w	r8, r8, r9
 80238c2:	46a3      	mov	fp, r4
 80238c4:	f854 0b04 	ldr.w	r0, [r4], #4
 80238c8:	2800      	cmp	r0, #0
 80238ca:	d0f2      	beq.n	80238b2 <_findenv_r+0x26>
 80238cc:	4642      	mov	r2, r8
 80238ce:	4649      	mov	r1, r9
 80238d0:	f000 fb8e 	bl	8023ff0 <strncmp>
 80238d4:	2800      	cmp	r0, #0
 80238d6:	d1f4      	bne.n	80238c2 <_findenv_r+0x36>
 80238d8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80238dc:	eb03 0508 	add.w	r5, r3, r8
 80238e0:	f813 3008 	ldrb.w	r3, [r3, r8]
 80238e4:	2b3d      	cmp	r3, #61	; 0x3d
 80238e6:	d1ec      	bne.n	80238c2 <_findenv_r+0x36>
 80238e8:	f8da 3000 	ldr.w	r3, [sl]
 80238ec:	ebab 0303 	sub.w	r3, fp, r3
 80238f0:	109b      	asrs	r3, r3, #2
 80238f2:	4638      	mov	r0, r7
 80238f4:	6033      	str	r3, [r6, #0]
 80238f6:	f000 fded 	bl	80244d4 <__env_unlock>
 80238fa:	1c68      	adds	r0, r5, #1
 80238fc:	e7dd      	b.n	80238ba <_findenv_r+0x2e>
 80238fe:	bf00      	nop
 8023900:	20000000 	.word	0x20000000

08023904 <__libc_init_array>:
 8023904:	b570      	push	{r4, r5, r6, lr}
 8023906:	4d0d      	ldr	r5, [pc, #52]	; (802393c <__libc_init_array+0x38>)
 8023908:	4c0d      	ldr	r4, [pc, #52]	; (8023940 <__libc_init_array+0x3c>)
 802390a:	1b64      	subs	r4, r4, r5
 802390c:	10a4      	asrs	r4, r4, #2
 802390e:	2600      	movs	r6, #0
 8023910:	42a6      	cmp	r6, r4
 8023912:	d109      	bne.n	8023928 <__libc_init_array+0x24>
 8023914:	4d0b      	ldr	r5, [pc, #44]	; (8023944 <__libc_init_array+0x40>)
 8023916:	4c0c      	ldr	r4, [pc, #48]	; (8023948 <__libc_init_array+0x44>)
 8023918:	f001 fc40 	bl	802519c <_init>
 802391c:	1b64      	subs	r4, r4, r5
 802391e:	10a4      	asrs	r4, r4, #2
 8023920:	2600      	movs	r6, #0
 8023922:	42a6      	cmp	r6, r4
 8023924:	d105      	bne.n	8023932 <__libc_init_array+0x2e>
 8023926:	bd70      	pop	{r4, r5, r6, pc}
 8023928:	f855 3b04 	ldr.w	r3, [r5], #4
 802392c:	4798      	blx	r3
 802392e:	3601      	adds	r6, #1
 8023930:	e7ee      	b.n	8023910 <__libc_init_array+0xc>
 8023932:	f855 3b04 	ldr.w	r3, [r5], #4
 8023936:	4798      	blx	r3
 8023938:	3601      	adds	r6, #1
 802393a:	e7f2      	b.n	8023922 <__libc_init_array+0x1e>
 802393c:	08029cf0 	.word	0x08029cf0
 8023940:	08029cf0 	.word	0x08029cf0
 8023944:	08029cf0 	.word	0x08029cf0
 8023948:	08029cf8 	.word	0x08029cf8

0802394c <__retarget_lock_init_recursive>:
 802394c:	4770      	bx	lr

0802394e <__retarget_lock_acquire_recursive>:
 802394e:	4770      	bx	lr

08023950 <__retarget_lock_release_recursive>:
 8023950:	4770      	bx	lr
	...

08023954 <malloc>:
 8023954:	4b02      	ldr	r3, [pc, #8]	; (8023960 <malloc+0xc>)
 8023956:	4601      	mov	r1, r0
 8023958:	6818      	ldr	r0, [r3, #0]
 802395a:	f000 b8cd 	b.w	8023af8 <_malloc_r>
 802395e:	bf00      	nop
 8023960:	200000c0 	.word	0x200000c0

08023964 <free>:
 8023964:	4b02      	ldr	r3, [pc, #8]	; (8023970 <free+0xc>)
 8023966:	4601      	mov	r1, r0
 8023968:	6818      	ldr	r0, [r3, #0]
 802396a:	f000 b859 	b.w	8023a20 <_free_r>
 802396e:	bf00      	nop
 8023970:	200000c0 	.word	0x200000c0

08023974 <memcmp>:
 8023974:	b510      	push	{r4, lr}
 8023976:	3901      	subs	r1, #1
 8023978:	4402      	add	r2, r0
 802397a:	4290      	cmp	r0, r2
 802397c:	d101      	bne.n	8023982 <memcmp+0xe>
 802397e:	2000      	movs	r0, #0
 8023980:	e005      	b.n	802398e <memcmp+0x1a>
 8023982:	7803      	ldrb	r3, [r0, #0]
 8023984:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8023988:	42a3      	cmp	r3, r4
 802398a:	d001      	beq.n	8023990 <memcmp+0x1c>
 802398c:	1b18      	subs	r0, r3, r4
 802398e:	bd10      	pop	{r4, pc}
 8023990:	3001      	adds	r0, #1
 8023992:	e7f2      	b.n	802397a <memcmp+0x6>

08023994 <memcpy>:
 8023994:	440a      	add	r2, r1
 8023996:	4291      	cmp	r1, r2
 8023998:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 802399c:	d100      	bne.n	80239a0 <memcpy+0xc>
 802399e:	4770      	bx	lr
 80239a0:	b510      	push	{r4, lr}
 80239a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80239a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80239aa:	4291      	cmp	r1, r2
 80239ac:	d1f9      	bne.n	80239a2 <memcpy+0xe>
 80239ae:	bd10      	pop	{r4, pc}

080239b0 <memmove>:
 80239b0:	4288      	cmp	r0, r1
 80239b2:	b510      	push	{r4, lr}
 80239b4:	eb01 0402 	add.w	r4, r1, r2
 80239b8:	d902      	bls.n	80239c0 <memmove+0x10>
 80239ba:	4284      	cmp	r4, r0
 80239bc:	4623      	mov	r3, r4
 80239be:	d807      	bhi.n	80239d0 <memmove+0x20>
 80239c0:	1e43      	subs	r3, r0, #1
 80239c2:	42a1      	cmp	r1, r4
 80239c4:	d008      	beq.n	80239d8 <memmove+0x28>
 80239c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80239ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80239ce:	e7f8      	b.n	80239c2 <memmove+0x12>
 80239d0:	4402      	add	r2, r0
 80239d2:	4601      	mov	r1, r0
 80239d4:	428a      	cmp	r2, r1
 80239d6:	d100      	bne.n	80239da <memmove+0x2a>
 80239d8:	bd10      	pop	{r4, pc}
 80239da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80239de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80239e2:	e7f7      	b.n	80239d4 <memmove+0x24>

080239e4 <memset>:
 80239e4:	4402      	add	r2, r0
 80239e6:	4603      	mov	r3, r0
 80239e8:	4293      	cmp	r3, r2
 80239ea:	d100      	bne.n	80239ee <memset+0xa>
 80239ec:	4770      	bx	lr
 80239ee:	f803 1b01 	strb.w	r1, [r3], #1
 80239f2:	e7f9      	b.n	80239e8 <memset+0x4>

080239f4 <_calloc_r>:
 80239f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80239f6:	fba1 2402 	umull	r2, r4, r1, r2
 80239fa:	b94c      	cbnz	r4, 8023a10 <_calloc_r+0x1c>
 80239fc:	4611      	mov	r1, r2
 80239fe:	9201      	str	r2, [sp, #4]
 8023a00:	f000 f87a 	bl	8023af8 <_malloc_r>
 8023a04:	9a01      	ldr	r2, [sp, #4]
 8023a06:	4605      	mov	r5, r0
 8023a08:	b930      	cbnz	r0, 8023a18 <_calloc_r+0x24>
 8023a0a:	4628      	mov	r0, r5
 8023a0c:	b003      	add	sp, #12
 8023a0e:	bd30      	pop	{r4, r5, pc}
 8023a10:	220c      	movs	r2, #12
 8023a12:	6002      	str	r2, [r0, #0]
 8023a14:	2500      	movs	r5, #0
 8023a16:	e7f8      	b.n	8023a0a <_calloc_r+0x16>
 8023a18:	4621      	mov	r1, r4
 8023a1a:	f7ff ffe3 	bl	80239e4 <memset>
 8023a1e:	e7f4      	b.n	8023a0a <_calloc_r+0x16>

08023a20 <_free_r>:
 8023a20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023a22:	2900      	cmp	r1, #0
 8023a24:	d044      	beq.n	8023ab0 <_free_r+0x90>
 8023a26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023a2a:	9001      	str	r0, [sp, #4]
 8023a2c:	2b00      	cmp	r3, #0
 8023a2e:	f1a1 0404 	sub.w	r4, r1, #4
 8023a32:	bfb8      	it	lt
 8023a34:	18e4      	addlt	r4, r4, r3
 8023a36:	f000 fea5 	bl	8024784 <__malloc_lock>
 8023a3a:	4a1e      	ldr	r2, [pc, #120]	; (8023ab4 <_free_r+0x94>)
 8023a3c:	9801      	ldr	r0, [sp, #4]
 8023a3e:	6813      	ldr	r3, [r2, #0]
 8023a40:	b933      	cbnz	r3, 8023a50 <_free_r+0x30>
 8023a42:	6063      	str	r3, [r4, #4]
 8023a44:	6014      	str	r4, [r2, #0]
 8023a46:	b003      	add	sp, #12
 8023a48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8023a4c:	f000 bea0 	b.w	8024790 <__malloc_unlock>
 8023a50:	42a3      	cmp	r3, r4
 8023a52:	d908      	bls.n	8023a66 <_free_r+0x46>
 8023a54:	6825      	ldr	r5, [r4, #0]
 8023a56:	1961      	adds	r1, r4, r5
 8023a58:	428b      	cmp	r3, r1
 8023a5a:	bf01      	itttt	eq
 8023a5c:	6819      	ldreq	r1, [r3, #0]
 8023a5e:	685b      	ldreq	r3, [r3, #4]
 8023a60:	1949      	addeq	r1, r1, r5
 8023a62:	6021      	streq	r1, [r4, #0]
 8023a64:	e7ed      	b.n	8023a42 <_free_r+0x22>
 8023a66:	461a      	mov	r2, r3
 8023a68:	685b      	ldr	r3, [r3, #4]
 8023a6a:	b10b      	cbz	r3, 8023a70 <_free_r+0x50>
 8023a6c:	42a3      	cmp	r3, r4
 8023a6e:	d9fa      	bls.n	8023a66 <_free_r+0x46>
 8023a70:	6811      	ldr	r1, [r2, #0]
 8023a72:	1855      	adds	r5, r2, r1
 8023a74:	42a5      	cmp	r5, r4
 8023a76:	d10b      	bne.n	8023a90 <_free_r+0x70>
 8023a78:	6824      	ldr	r4, [r4, #0]
 8023a7a:	4421      	add	r1, r4
 8023a7c:	1854      	adds	r4, r2, r1
 8023a7e:	42a3      	cmp	r3, r4
 8023a80:	6011      	str	r1, [r2, #0]
 8023a82:	d1e0      	bne.n	8023a46 <_free_r+0x26>
 8023a84:	681c      	ldr	r4, [r3, #0]
 8023a86:	685b      	ldr	r3, [r3, #4]
 8023a88:	6053      	str	r3, [r2, #4]
 8023a8a:	4421      	add	r1, r4
 8023a8c:	6011      	str	r1, [r2, #0]
 8023a8e:	e7da      	b.n	8023a46 <_free_r+0x26>
 8023a90:	d902      	bls.n	8023a98 <_free_r+0x78>
 8023a92:	230c      	movs	r3, #12
 8023a94:	6003      	str	r3, [r0, #0]
 8023a96:	e7d6      	b.n	8023a46 <_free_r+0x26>
 8023a98:	6825      	ldr	r5, [r4, #0]
 8023a9a:	1961      	adds	r1, r4, r5
 8023a9c:	428b      	cmp	r3, r1
 8023a9e:	bf04      	itt	eq
 8023aa0:	6819      	ldreq	r1, [r3, #0]
 8023aa2:	685b      	ldreq	r3, [r3, #4]
 8023aa4:	6063      	str	r3, [r4, #4]
 8023aa6:	bf04      	itt	eq
 8023aa8:	1949      	addeq	r1, r1, r5
 8023aaa:	6021      	streq	r1, [r4, #0]
 8023aac:	6054      	str	r4, [r2, #4]
 8023aae:	e7ca      	b.n	8023a46 <_free_r+0x26>
 8023ab0:	b003      	add	sp, #12
 8023ab2:	bd30      	pop	{r4, r5, pc}
 8023ab4:	2000ff5c 	.word	0x2000ff5c

08023ab8 <sbrk_aligned>:
 8023ab8:	b570      	push	{r4, r5, r6, lr}
 8023aba:	4e0e      	ldr	r6, [pc, #56]	; (8023af4 <sbrk_aligned+0x3c>)
 8023abc:	460c      	mov	r4, r1
 8023abe:	6831      	ldr	r1, [r6, #0]
 8023ac0:	4605      	mov	r5, r0
 8023ac2:	b911      	cbnz	r1, 8023aca <sbrk_aligned+0x12>
 8023ac4:	f000 f9f8 	bl	8023eb8 <_sbrk_r>
 8023ac8:	6030      	str	r0, [r6, #0]
 8023aca:	4621      	mov	r1, r4
 8023acc:	4628      	mov	r0, r5
 8023ace:	f000 f9f3 	bl	8023eb8 <_sbrk_r>
 8023ad2:	1c43      	adds	r3, r0, #1
 8023ad4:	d00a      	beq.n	8023aec <sbrk_aligned+0x34>
 8023ad6:	1cc4      	adds	r4, r0, #3
 8023ad8:	f024 0403 	bic.w	r4, r4, #3
 8023adc:	42a0      	cmp	r0, r4
 8023ade:	d007      	beq.n	8023af0 <sbrk_aligned+0x38>
 8023ae0:	1a21      	subs	r1, r4, r0
 8023ae2:	4628      	mov	r0, r5
 8023ae4:	f000 f9e8 	bl	8023eb8 <_sbrk_r>
 8023ae8:	3001      	adds	r0, #1
 8023aea:	d101      	bne.n	8023af0 <sbrk_aligned+0x38>
 8023aec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8023af0:	4620      	mov	r0, r4
 8023af2:	bd70      	pop	{r4, r5, r6, pc}
 8023af4:	2000ff60 	.word	0x2000ff60

08023af8 <_malloc_r>:
 8023af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023afc:	1ccd      	adds	r5, r1, #3
 8023afe:	f025 0503 	bic.w	r5, r5, #3
 8023b02:	3508      	adds	r5, #8
 8023b04:	2d0c      	cmp	r5, #12
 8023b06:	bf38      	it	cc
 8023b08:	250c      	movcc	r5, #12
 8023b0a:	2d00      	cmp	r5, #0
 8023b0c:	4607      	mov	r7, r0
 8023b0e:	db01      	blt.n	8023b14 <_malloc_r+0x1c>
 8023b10:	42a9      	cmp	r1, r5
 8023b12:	d905      	bls.n	8023b20 <_malloc_r+0x28>
 8023b14:	230c      	movs	r3, #12
 8023b16:	603b      	str	r3, [r7, #0]
 8023b18:	2600      	movs	r6, #0
 8023b1a:	4630      	mov	r0, r6
 8023b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023b20:	4e2e      	ldr	r6, [pc, #184]	; (8023bdc <_malloc_r+0xe4>)
 8023b22:	f000 fe2f 	bl	8024784 <__malloc_lock>
 8023b26:	6833      	ldr	r3, [r6, #0]
 8023b28:	461c      	mov	r4, r3
 8023b2a:	bb34      	cbnz	r4, 8023b7a <_malloc_r+0x82>
 8023b2c:	4629      	mov	r1, r5
 8023b2e:	4638      	mov	r0, r7
 8023b30:	f7ff ffc2 	bl	8023ab8 <sbrk_aligned>
 8023b34:	1c43      	adds	r3, r0, #1
 8023b36:	4604      	mov	r4, r0
 8023b38:	d14d      	bne.n	8023bd6 <_malloc_r+0xde>
 8023b3a:	6834      	ldr	r4, [r6, #0]
 8023b3c:	4626      	mov	r6, r4
 8023b3e:	2e00      	cmp	r6, #0
 8023b40:	d140      	bne.n	8023bc4 <_malloc_r+0xcc>
 8023b42:	6823      	ldr	r3, [r4, #0]
 8023b44:	4631      	mov	r1, r6
 8023b46:	4638      	mov	r0, r7
 8023b48:	eb04 0803 	add.w	r8, r4, r3
 8023b4c:	f000 f9b4 	bl	8023eb8 <_sbrk_r>
 8023b50:	4580      	cmp	r8, r0
 8023b52:	d13a      	bne.n	8023bca <_malloc_r+0xd2>
 8023b54:	6821      	ldr	r1, [r4, #0]
 8023b56:	3503      	adds	r5, #3
 8023b58:	1a6d      	subs	r5, r5, r1
 8023b5a:	f025 0503 	bic.w	r5, r5, #3
 8023b5e:	3508      	adds	r5, #8
 8023b60:	2d0c      	cmp	r5, #12
 8023b62:	bf38      	it	cc
 8023b64:	250c      	movcc	r5, #12
 8023b66:	4629      	mov	r1, r5
 8023b68:	4638      	mov	r0, r7
 8023b6a:	f7ff ffa5 	bl	8023ab8 <sbrk_aligned>
 8023b6e:	3001      	adds	r0, #1
 8023b70:	d02b      	beq.n	8023bca <_malloc_r+0xd2>
 8023b72:	6823      	ldr	r3, [r4, #0]
 8023b74:	442b      	add	r3, r5
 8023b76:	6023      	str	r3, [r4, #0]
 8023b78:	e00e      	b.n	8023b98 <_malloc_r+0xa0>
 8023b7a:	6822      	ldr	r2, [r4, #0]
 8023b7c:	1b52      	subs	r2, r2, r5
 8023b7e:	d41e      	bmi.n	8023bbe <_malloc_r+0xc6>
 8023b80:	2a0b      	cmp	r2, #11
 8023b82:	d916      	bls.n	8023bb2 <_malloc_r+0xba>
 8023b84:	1961      	adds	r1, r4, r5
 8023b86:	42a3      	cmp	r3, r4
 8023b88:	6025      	str	r5, [r4, #0]
 8023b8a:	bf18      	it	ne
 8023b8c:	6059      	strne	r1, [r3, #4]
 8023b8e:	6863      	ldr	r3, [r4, #4]
 8023b90:	bf08      	it	eq
 8023b92:	6031      	streq	r1, [r6, #0]
 8023b94:	5162      	str	r2, [r4, r5]
 8023b96:	604b      	str	r3, [r1, #4]
 8023b98:	4638      	mov	r0, r7
 8023b9a:	f104 060b 	add.w	r6, r4, #11
 8023b9e:	f000 fdf7 	bl	8024790 <__malloc_unlock>
 8023ba2:	f026 0607 	bic.w	r6, r6, #7
 8023ba6:	1d23      	adds	r3, r4, #4
 8023ba8:	1af2      	subs	r2, r6, r3
 8023baa:	d0b6      	beq.n	8023b1a <_malloc_r+0x22>
 8023bac:	1b9b      	subs	r3, r3, r6
 8023bae:	50a3      	str	r3, [r4, r2]
 8023bb0:	e7b3      	b.n	8023b1a <_malloc_r+0x22>
 8023bb2:	6862      	ldr	r2, [r4, #4]
 8023bb4:	42a3      	cmp	r3, r4
 8023bb6:	bf0c      	ite	eq
 8023bb8:	6032      	streq	r2, [r6, #0]
 8023bba:	605a      	strne	r2, [r3, #4]
 8023bbc:	e7ec      	b.n	8023b98 <_malloc_r+0xa0>
 8023bbe:	4623      	mov	r3, r4
 8023bc0:	6864      	ldr	r4, [r4, #4]
 8023bc2:	e7b2      	b.n	8023b2a <_malloc_r+0x32>
 8023bc4:	4634      	mov	r4, r6
 8023bc6:	6876      	ldr	r6, [r6, #4]
 8023bc8:	e7b9      	b.n	8023b3e <_malloc_r+0x46>
 8023bca:	230c      	movs	r3, #12
 8023bcc:	603b      	str	r3, [r7, #0]
 8023bce:	4638      	mov	r0, r7
 8023bd0:	f000 fdde 	bl	8024790 <__malloc_unlock>
 8023bd4:	e7a1      	b.n	8023b1a <_malloc_r+0x22>
 8023bd6:	6025      	str	r5, [r4, #0]
 8023bd8:	e7de      	b.n	8023b98 <_malloc_r+0xa0>
 8023bda:	bf00      	nop
 8023bdc:	2000ff5c 	.word	0x2000ff5c

08023be0 <iprintf>:
 8023be0:	b40f      	push	{r0, r1, r2, r3}
 8023be2:	4b0a      	ldr	r3, [pc, #40]	; (8023c0c <iprintf+0x2c>)
 8023be4:	b513      	push	{r0, r1, r4, lr}
 8023be6:	681c      	ldr	r4, [r3, #0]
 8023be8:	b124      	cbz	r4, 8023bf4 <iprintf+0x14>
 8023bea:	69a3      	ldr	r3, [r4, #24]
 8023bec:	b913      	cbnz	r3, 8023bf4 <iprintf+0x14>
 8023bee:	4620      	mov	r0, r4
 8023bf0:	f7ff fda2 	bl	8023738 <__sinit>
 8023bf4:	ab05      	add	r3, sp, #20
 8023bf6:	9a04      	ldr	r2, [sp, #16]
 8023bf8:	68a1      	ldr	r1, [r4, #8]
 8023bfa:	9301      	str	r3, [sp, #4]
 8023bfc:	4620      	mov	r0, r4
 8023bfe:	f000 ff81 	bl	8024b04 <_vfiprintf_r>
 8023c02:	b002      	add	sp, #8
 8023c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023c08:	b004      	add	sp, #16
 8023c0a:	4770      	bx	lr
 8023c0c:	200000c0 	.word	0x200000c0

08023c10 <_puts_r>:
 8023c10:	b570      	push	{r4, r5, r6, lr}
 8023c12:	460e      	mov	r6, r1
 8023c14:	4605      	mov	r5, r0
 8023c16:	b118      	cbz	r0, 8023c20 <_puts_r+0x10>
 8023c18:	6983      	ldr	r3, [r0, #24]
 8023c1a:	b90b      	cbnz	r3, 8023c20 <_puts_r+0x10>
 8023c1c:	f7ff fd8c 	bl	8023738 <__sinit>
 8023c20:	69ab      	ldr	r3, [r5, #24]
 8023c22:	68ac      	ldr	r4, [r5, #8]
 8023c24:	b913      	cbnz	r3, 8023c2c <_puts_r+0x1c>
 8023c26:	4628      	mov	r0, r5
 8023c28:	f7ff fd86 	bl	8023738 <__sinit>
 8023c2c:	4b2c      	ldr	r3, [pc, #176]	; (8023ce0 <_puts_r+0xd0>)
 8023c2e:	429c      	cmp	r4, r3
 8023c30:	d120      	bne.n	8023c74 <_puts_r+0x64>
 8023c32:	686c      	ldr	r4, [r5, #4]
 8023c34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023c36:	07db      	lsls	r3, r3, #31
 8023c38:	d405      	bmi.n	8023c46 <_puts_r+0x36>
 8023c3a:	89a3      	ldrh	r3, [r4, #12]
 8023c3c:	0598      	lsls	r0, r3, #22
 8023c3e:	d402      	bmi.n	8023c46 <_puts_r+0x36>
 8023c40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023c42:	f7ff fe84 	bl	802394e <__retarget_lock_acquire_recursive>
 8023c46:	89a3      	ldrh	r3, [r4, #12]
 8023c48:	0719      	lsls	r1, r3, #28
 8023c4a:	d51d      	bpl.n	8023c88 <_puts_r+0x78>
 8023c4c:	6923      	ldr	r3, [r4, #16]
 8023c4e:	b1db      	cbz	r3, 8023c88 <_puts_r+0x78>
 8023c50:	3e01      	subs	r6, #1
 8023c52:	68a3      	ldr	r3, [r4, #8]
 8023c54:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8023c58:	3b01      	subs	r3, #1
 8023c5a:	60a3      	str	r3, [r4, #8]
 8023c5c:	bb39      	cbnz	r1, 8023cae <_puts_r+0x9e>
 8023c5e:	2b00      	cmp	r3, #0
 8023c60:	da38      	bge.n	8023cd4 <_puts_r+0xc4>
 8023c62:	4622      	mov	r2, r4
 8023c64:	210a      	movs	r1, #10
 8023c66:	4628      	mov	r0, r5
 8023c68:	f000 fb2e 	bl	80242c8 <__swbuf_r>
 8023c6c:	3001      	adds	r0, #1
 8023c6e:	d011      	beq.n	8023c94 <_puts_r+0x84>
 8023c70:	250a      	movs	r5, #10
 8023c72:	e011      	b.n	8023c98 <_puts_r+0x88>
 8023c74:	4b1b      	ldr	r3, [pc, #108]	; (8023ce4 <_puts_r+0xd4>)
 8023c76:	429c      	cmp	r4, r3
 8023c78:	d101      	bne.n	8023c7e <_puts_r+0x6e>
 8023c7a:	68ac      	ldr	r4, [r5, #8]
 8023c7c:	e7da      	b.n	8023c34 <_puts_r+0x24>
 8023c7e:	4b1a      	ldr	r3, [pc, #104]	; (8023ce8 <_puts_r+0xd8>)
 8023c80:	429c      	cmp	r4, r3
 8023c82:	bf08      	it	eq
 8023c84:	68ec      	ldreq	r4, [r5, #12]
 8023c86:	e7d5      	b.n	8023c34 <_puts_r+0x24>
 8023c88:	4621      	mov	r1, r4
 8023c8a:	4628      	mov	r0, r5
 8023c8c:	f000 fb80 	bl	8024390 <__swsetup_r>
 8023c90:	2800      	cmp	r0, #0
 8023c92:	d0dd      	beq.n	8023c50 <_puts_r+0x40>
 8023c94:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8023c98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023c9a:	07da      	lsls	r2, r3, #31
 8023c9c:	d405      	bmi.n	8023caa <_puts_r+0x9a>
 8023c9e:	89a3      	ldrh	r3, [r4, #12]
 8023ca0:	059b      	lsls	r3, r3, #22
 8023ca2:	d402      	bmi.n	8023caa <_puts_r+0x9a>
 8023ca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023ca6:	f7ff fe53 	bl	8023950 <__retarget_lock_release_recursive>
 8023caa:	4628      	mov	r0, r5
 8023cac:	bd70      	pop	{r4, r5, r6, pc}
 8023cae:	2b00      	cmp	r3, #0
 8023cb0:	da04      	bge.n	8023cbc <_puts_r+0xac>
 8023cb2:	69a2      	ldr	r2, [r4, #24]
 8023cb4:	429a      	cmp	r2, r3
 8023cb6:	dc06      	bgt.n	8023cc6 <_puts_r+0xb6>
 8023cb8:	290a      	cmp	r1, #10
 8023cba:	d004      	beq.n	8023cc6 <_puts_r+0xb6>
 8023cbc:	6823      	ldr	r3, [r4, #0]
 8023cbe:	1c5a      	adds	r2, r3, #1
 8023cc0:	6022      	str	r2, [r4, #0]
 8023cc2:	7019      	strb	r1, [r3, #0]
 8023cc4:	e7c5      	b.n	8023c52 <_puts_r+0x42>
 8023cc6:	4622      	mov	r2, r4
 8023cc8:	4628      	mov	r0, r5
 8023cca:	f000 fafd 	bl	80242c8 <__swbuf_r>
 8023cce:	3001      	adds	r0, #1
 8023cd0:	d1bf      	bne.n	8023c52 <_puts_r+0x42>
 8023cd2:	e7df      	b.n	8023c94 <_puts_r+0x84>
 8023cd4:	6823      	ldr	r3, [r4, #0]
 8023cd6:	250a      	movs	r5, #10
 8023cd8:	1c5a      	adds	r2, r3, #1
 8023cda:	6022      	str	r2, [r4, #0]
 8023cdc:	701d      	strb	r5, [r3, #0]
 8023cde:	e7db      	b.n	8023c98 <_puts_r+0x88>
 8023ce0:	08029bc0 	.word	0x08029bc0
 8023ce4:	08029be0 	.word	0x08029be0
 8023ce8:	08029ba0 	.word	0x08029ba0

08023cec <puts>:
 8023cec:	4b02      	ldr	r3, [pc, #8]	; (8023cf8 <puts+0xc>)
 8023cee:	4601      	mov	r1, r0
 8023cf0:	6818      	ldr	r0, [r3, #0]
 8023cf2:	f7ff bf8d 	b.w	8023c10 <_puts_r>
 8023cf6:	bf00      	nop
 8023cf8:	200000c0 	.word	0x200000c0

08023cfc <srand>:
 8023cfc:	b538      	push	{r3, r4, r5, lr}
 8023cfe:	4b10      	ldr	r3, [pc, #64]	; (8023d40 <srand+0x44>)
 8023d00:	681d      	ldr	r5, [r3, #0]
 8023d02:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8023d04:	4604      	mov	r4, r0
 8023d06:	b9b3      	cbnz	r3, 8023d36 <srand+0x3a>
 8023d08:	2018      	movs	r0, #24
 8023d0a:	f7ff fe23 	bl	8023954 <malloc>
 8023d0e:	4602      	mov	r2, r0
 8023d10:	63a8      	str	r0, [r5, #56]	; 0x38
 8023d12:	b920      	cbnz	r0, 8023d1e <srand+0x22>
 8023d14:	4b0b      	ldr	r3, [pc, #44]	; (8023d44 <srand+0x48>)
 8023d16:	480c      	ldr	r0, [pc, #48]	; (8023d48 <srand+0x4c>)
 8023d18:	2142      	movs	r1, #66	; 0x42
 8023d1a:	f000 fba7 	bl	802446c <__assert_func>
 8023d1e:	490b      	ldr	r1, [pc, #44]	; (8023d4c <srand+0x50>)
 8023d20:	4b0b      	ldr	r3, [pc, #44]	; (8023d50 <srand+0x54>)
 8023d22:	e9c0 1300 	strd	r1, r3, [r0]
 8023d26:	4b0b      	ldr	r3, [pc, #44]	; (8023d54 <srand+0x58>)
 8023d28:	6083      	str	r3, [r0, #8]
 8023d2a:	230b      	movs	r3, #11
 8023d2c:	8183      	strh	r3, [r0, #12]
 8023d2e:	2100      	movs	r1, #0
 8023d30:	2001      	movs	r0, #1
 8023d32:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8023d36:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8023d38:	2200      	movs	r2, #0
 8023d3a:	611c      	str	r4, [r3, #16]
 8023d3c:	615a      	str	r2, [r3, #20]
 8023d3e:	bd38      	pop	{r3, r4, r5, pc}
 8023d40:	200000c0 	.word	0x200000c0
 8023d44:	08029c04 	.word	0x08029c04
 8023d48:	08029c1b 	.word	0x08029c1b
 8023d4c:	abcd330e 	.word	0xabcd330e
 8023d50:	e66d1234 	.word	0xe66d1234
 8023d54:	0005deec 	.word	0x0005deec

08023d58 <rand>:
 8023d58:	4b16      	ldr	r3, [pc, #88]	; (8023db4 <rand+0x5c>)
 8023d5a:	b510      	push	{r4, lr}
 8023d5c:	681c      	ldr	r4, [r3, #0]
 8023d5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8023d60:	b9b3      	cbnz	r3, 8023d90 <rand+0x38>
 8023d62:	2018      	movs	r0, #24
 8023d64:	f7ff fdf6 	bl	8023954 <malloc>
 8023d68:	63a0      	str	r0, [r4, #56]	; 0x38
 8023d6a:	b928      	cbnz	r0, 8023d78 <rand+0x20>
 8023d6c:	4602      	mov	r2, r0
 8023d6e:	4b12      	ldr	r3, [pc, #72]	; (8023db8 <rand+0x60>)
 8023d70:	4812      	ldr	r0, [pc, #72]	; (8023dbc <rand+0x64>)
 8023d72:	214e      	movs	r1, #78	; 0x4e
 8023d74:	f000 fb7a 	bl	802446c <__assert_func>
 8023d78:	4a11      	ldr	r2, [pc, #68]	; (8023dc0 <rand+0x68>)
 8023d7a:	4b12      	ldr	r3, [pc, #72]	; (8023dc4 <rand+0x6c>)
 8023d7c:	e9c0 2300 	strd	r2, r3, [r0]
 8023d80:	4b11      	ldr	r3, [pc, #68]	; (8023dc8 <rand+0x70>)
 8023d82:	6083      	str	r3, [r0, #8]
 8023d84:	230b      	movs	r3, #11
 8023d86:	8183      	strh	r3, [r0, #12]
 8023d88:	2201      	movs	r2, #1
 8023d8a:	2300      	movs	r3, #0
 8023d8c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8023d90:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8023d92:	4a0e      	ldr	r2, [pc, #56]	; (8023dcc <rand+0x74>)
 8023d94:	6920      	ldr	r0, [r4, #16]
 8023d96:	6963      	ldr	r3, [r4, #20]
 8023d98:	490d      	ldr	r1, [pc, #52]	; (8023dd0 <rand+0x78>)
 8023d9a:	4342      	muls	r2, r0
 8023d9c:	fb01 2203 	mla	r2, r1, r3, r2
 8023da0:	fba0 0101 	umull	r0, r1, r0, r1
 8023da4:	1c43      	adds	r3, r0, #1
 8023da6:	eb42 0001 	adc.w	r0, r2, r1
 8023daa:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8023dae:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8023db2:	bd10      	pop	{r4, pc}
 8023db4:	200000c0 	.word	0x200000c0
 8023db8:	08029c04 	.word	0x08029c04
 8023dbc:	08029c1b 	.word	0x08029c1b
 8023dc0:	abcd330e 	.word	0xabcd330e
 8023dc4:	e66d1234 	.word	0xe66d1234
 8023dc8:	0005deec 	.word	0x0005deec
 8023dcc:	5851f42d 	.word	0x5851f42d
 8023dd0:	4c957f2d 	.word	0x4c957f2d

08023dd4 <realloc>:
 8023dd4:	4b02      	ldr	r3, [pc, #8]	; (8023de0 <realloc+0xc>)
 8023dd6:	460a      	mov	r2, r1
 8023dd8:	4601      	mov	r1, r0
 8023dda:	6818      	ldr	r0, [r3, #0]
 8023ddc:	f000 bcde 	b.w	802479c <_realloc_r>
 8023de0:	200000c0 	.word	0x200000c0

08023de4 <cleanup_glue>:
 8023de4:	b538      	push	{r3, r4, r5, lr}
 8023de6:	460c      	mov	r4, r1
 8023de8:	6809      	ldr	r1, [r1, #0]
 8023dea:	4605      	mov	r5, r0
 8023dec:	b109      	cbz	r1, 8023df2 <cleanup_glue+0xe>
 8023dee:	f7ff fff9 	bl	8023de4 <cleanup_glue>
 8023df2:	4621      	mov	r1, r4
 8023df4:	4628      	mov	r0, r5
 8023df6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023dfa:	f7ff be11 	b.w	8023a20 <_free_r>
	...

08023e00 <_reclaim_reent>:
 8023e00:	4b2c      	ldr	r3, [pc, #176]	; (8023eb4 <_reclaim_reent+0xb4>)
 8023e02:	681b      	ldr	r3, [r3, #0]
 8023e04:	4283      	cmp	r3, r0
 8023e06:	b570      	push	{r4, r5, r6, lr}
 8023e08:	4604      	mov	r4, r0
 8023e0a:	d051      	beq.n	8023eb0 <_reclaim_reent+0xb0>
 8023e0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8023e0e:	b143      	cbz	r3, 8023e22 <_reclaim_reent+0x22>
 8023e10:	68db      	ldr	r3, [r3, #12]
 8023e12:	2b00      	cmp	r3, #0
 8023e14:	d14a      	bne.n	8023eac <_reclaim_reent+0xac>
 8023e16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023e18:	6819      	ldr	r1, [r3, #0]
 8023e1a:	b111      	cbz	r1, 8023e22 <_reclaim_reent+0x22>
 8023e1c:	4620      	mov	r0, r4
 8023e1e:	f7ff fdff 	bl	8023a20 <_free_r>
 8023e22:	6961      	ldr	r1, [r4, #20]
 8023e24:	b111      	cbz	r1, 8023e2c <_reclaim_reent+0x2c>
 8023e26:	4620      	mov	r0, r4
 8023e28:	f7ff fdfa 	bl	8023a20 <_free_r>
 8023e2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8023e2e:	b111      	cbz	r1, 8023e36 <_reclaim_reent+0x36>
 8023e30:	4620      	mov	r0, r4
 8023e32:	f7ff fdf5 	bl	8023a20 <_free_r>
 8023e36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8023e38:	b111      	cbz	r1, 8023e40 <_reclaim_reent+0x40>
 8023e3a:	4620      	mov	r0, r4
 8023e3c:	f7ff fdf0 	bl	8023a20 <_free_r>
 8023e40:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8023e42:	b111      	cbz	r1, 8023e4a <_reclaim_reent+0x4a>
 8023e44:	4620      	mov	r0, r4
 8023e46:	f7ff fdeb 	bl	8023a20 <_free_r>
 8023e4a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023e4c:	b111      	cbz	r1, 8023e54 <_reclaim_reent+0x54>
 8023e4e:	4620      	mov	r0, r4
 8023e50:	f7ff fde6 	bl	8023a20 <_free_r>
 8023e54:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8023e56:	b111      	cbz	r1, 8023e5e <_reclaim_reent+0x5e>
 8023e58:	4620      	mov	r0, r4
 8023e5a:	f7ff fde1 	bl	8023a20 <_free_r>
 8023e5e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8023e60:	b111      	cbz	r1, 8023e68 <_reclaim_reent+0x68>
 8023e62:	4620      	mov	r0, r4
 8023e64:	f7ff fddc 	bl	8023a20 <_free_r>
 8023e68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023e6a:	b111      	cbz	r1, 8023e72 <_reclaim_reent+0x72>
 8023e6c:	4620      	mov	r0, r4
 8023e6e:	f7ff fdd7 	bl	8023a20 <_free_r>
 8023e72:	69a3      	ldr	r3, [r4, #24]
 8023e74:	b1e3      	cbz	r3, 8023eb0 <_reclaim_reent+0xb0>
 8023e76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8023e78:	4620      	mov	r0, r4
 8023e7a:	4798      	blx	r3
 8023e7c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8023e7e:	b1b9      	cbz	r1, 8023eb0 <_reclaim_reent+0xb0>
 8023e80:	4620      	mov	r0, r4
 8023e82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8023e86:	f7ff bfad 	b.w	8023de4 <cleanup_glue>
 8023e8a:	5949      	ldr	r1, [r1, r5]
 8023e8c:	b941      	cbnz	r1, 8023ea0 <_reclaim_reent+0xa0>
 8023e8e:	3504      	adds	r5, #4
 8023e90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023e92:	2d80      	cmp	r5, #128	; 0x80
 8023e94:	68d9      	ldr	r1, [r3, #12]
 8023e96:	d1f8      	bne.n	8023e8a <_reclaim_reent+0x8a>
 8023e98:	4620      	mov	r0, r4
 8023e9a:	f7ff fdc1 	bl	8023a20 <_free_r>
 8023e9e:	e7ba      	b.n	8023e16 <_reclaim_reent+0x16>
 8023ea0:	680e      	ldr	r6, [r1, #0]
 8023ea2:	4620      	mov	r0, r4
 8023ea4:	f7ff fdbc 	bl	8023a20 <_free_r>
 8023ea8:	4631      	mov	r1, r6
 8023eaa:	e7ef      	b.n	8023e8c <_reclaim_reent+0x8c>
 8023eac:	2500      	movs	r5, #0
 8023eae:	e7ef      	b.n	8023e90 <_reclaim_reent+0x90>
 8023eb0:	bd70      	pop	{r4, r5, r6, pc}
 8023eb2:	bf00      	nop
 8023eb4:	200000c0 	.word	0x200000c0

08023eb8 <_sbrk_r>:
 8023eb8:	b538      	push	{r3, r4, r5, lr}
 8023eba:	4d06      	ldr	r5, [pc, #24]	; (8023ed4 <_sbrk_r+0x1c>)
 8023ebc:	2300      	movs	r3, #0
 8023ebe:	4604      	mov	r4, r0
 8023ec0:	4608      	mov	r0, r1
 8023ec2:	602b      	str	r3, [r5, #0]
 8023ec4:	f7dd fbd0 	bl	8001668 <_sbrk>
 8023ec8:	1c43      	adds	r3, r0, #1
 8023eca:	d102      	bne.n	8023ed2 <_sbrk_r+0x1a>
 8023ecc:	682b      	ldr	r3, [r5, #0]
 8023ece:	b103      	cbz	r3, 8023ed2 <_sbrk_r+0x1a>
 8023ed0:	6023      	str	r3, [r4, #0]
 8023ed2:	bd38      	pop	{r3, r4, r5, pc}
 8023ed4:	2000ff64 	.word	0x2000ff64

08023ed8 <sniprintf>:
 8023ed8:	b40c      	push	{r2, r3}
 8023eda:	b530      	push	{r4, r5, lr}
 8023edc:	4b17      	ldr	r3, [pc, #92]	; (8023f3c <sniprintf+0x64>)
 8023ede:	1e0c      	subs	r4, r1, #0
 8023ee0:	681d      	ldr	r5, [r3, #0]
 8023ee2:	b09d      	sub	sp, #116	; 0x74
 8023ee4:	da08      	bge.n	8023ef8 <sniprintf+0x20>
 8023ee6:	238b      	movs	r3, #139	; 0x8b
 8023ee8:	602b      	str	r3, [r5, #0]
 8023eea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023eee:	b01d      	add	sp, #116	; 0x74
 8023ef0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8023ef4:	b002      	add	sp, #8
 8023ef6:	4770      	bx	lr
 8023ef8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8023efc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8023f00:	bf14      	ite	ne
 8023f02:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8023f06:	4623      	moveq	r3, r4
 8023f08:	9304      	str	r3, [sp, #16]
 8023f0a:	9307      	str	r3, [sp, #28]
 8023f0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8023f10:	9002      	str	r0, [sp, #8]
 8023f12:	9006      	str	r0, [sp, #24]
 8023f14:	f8ad 3016 	strh.w	r3, [sp, #22]
 8023f18:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8023f1a:	ab21      	add	r3, sp, #132	; 0x84
 8023f1c:	a902      	add	r1, sp, #8
 8023f1e:	4628      	mov	r0, r5
 8023f20:	9301      	str	r3, [sp, #4]
 8023f22:	f000 fcc5 	bl	80248b0 <_svfiprintf_r>
 8023f26:	1c43      	adds	r3, r0, #1
 8023f28:	bfbc      	itt	lt
 8023f2a:	238b      	movlt	r3, #139	; 0x8b
 8023f2c:	602b      	strlt	r3, [r5, #0]
 8023f2e:	2c00      	cmp	r4, #0
 8023f30:	d0dd      	beq.n	8023eee <sniprintf+0x16>
 8023f32:	9b02      	ldr	r3, [sp, #8]
 8023f34:	2200      	movs	r2, #0
 8023f36:	701a      	strb	r2, [r3, #0]
 8023f38:	e7d9      	b.n	8023eee <sniprintf+0x16>
 8023f3a:	bf00      	nop
 8023f3c:	200000c0 	.word	0x200000c0

08023f40 <__sread>:
 8023f40:	b510      	push	{r4, lr}
 8023f42:	460c      	mov	r4, r1
 8023f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023f48:	f001 f8a0 	bl	802508c <_read_r>
 8023f4c:	2800      	cmp	r0, #0
 8023f4e:	bfab      	itete	ge
 8023f50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8023f52:	89a3      	ldrhlt	r3, [r4, #12]
 8023f54:	181b      	addge	r3, r3, r0
 8023f56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8023f5a:	bfac      	ite	ge
 8023f5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8023f5e:	81a3      	strhlt	r3, [r4, #12]
 8023f60:	bd10      	pop	{r4, pc}

08023f62 <__swrite>:
 8023f62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023f66:	461f      	mov	r7, r3
 8023f68:	898b      	ldrh	r3, [r1, #12]
 8023f6a:	05db      	lsls	r3, r3, #23
 8023f6c:	4605      	mov	r5, r0
 8023f6e:	460c      	mov	r4, r1
 8023f70:	4616      	mov	r6, r2
 8023f72:	d505      	bpl.n	8023f80 <__swrite+0x1e>
 8023f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023f78:	2302      	movs	r3, #2
 8023f7a:	2200      	movs	r2, #0
 8023f7c:	f000 fb8a 	bl	8024694 <_lseek_r>
 8023f80:	89a3      	ldrh	r3, [r4, #12]
 8023f82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023f86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8023f8a:	81a3      	strh	r3, [r4, #12]
 8023f8c:	4632      	mov	r2, r6
 8023f8e:	463b      	mov	r3, r7
 8023f90:	4628      	mov	r0, r5
 8023f92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023f96:	f000 b9e9 	b.w	802436c <_write_r>

08023f9a <__sseek>:
 8023f9a:	b510      	push	{r4, lr}
 8023f9c:	460c      	mov	r4, r1
 8023f9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023fa2:	f000 fb77 	bl	8024694 <_lseek_r>
 8023fa6:	1c43      	adds	r3, r0, #1
 8023fa8:	89a3      	ldrh	r3, [r4, #12]
 8023faa:	bf15      	itete	ne
 8023fac:	6560      	strne	r0, [r4, #84]	; 0x54
 8023fae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8023fb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8023fb6:	81a3      	strheq	r3, [r4, #12]
 8023fb8:	bf18      	it	ne
 8023fba:	81a3      	strhne	r3, [r4, #12]
 8023fbc:	bd10      	pop	{r4, pc}

08023fbe <__sclose>:
 8023fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023fc2:	f000 ba71 	b.w	80244a8 <_close_r>

08023fc6 <strchr>:
 8023fc6:	b2c9      	uxtb	r1, r1
 8023fc8:	4603      	mov	r3, r0
 8023fca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023fce:	b11a      	cbz	r2, 8023fd8 <strchr+0x12>
 8023fd0:	428a      	cmp	r2, r1
 8023fd2:	d1f9      	bne.n	8023fc8 <strchr+0x2>
 8023fd4:	4618      	mov	r0, r3
 8023fd6:	4770      	bx	lr
 8023fd8:	2900      	cmp	r1, #0
 8023fda:	bf18      	it	ne
 8023fdc:	2300      	movne	r3, #0
 8023fde:	e7f9      	b.n	8023fd4 <strchr+0xe>

08023fe0 <strcpy>:
 8023fe0:	4603      	mov	r3, r0
 8023fe2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023fe6:	f803 2b01 	strb.w	r2, [r3], #1
 8023fea:	2a00      	cmp	r2, #0
 8023fec:	d1f9      	bne.n	8023fe2 <strcpy+0x2>
 8023fee:	4770      	bx	lr

08023ff0 <strncmp>:
 8023ff0:	b510      	push	{r4, lr}
 8023ff2:	b17a      	cbz	r2, 8024014 <strncmp+0x24>
 8023ff4:	4603      	mov	r3, r0
 8023ff6:	3901      	subs	r1, #1
 8023ff8:	1884      	adds	r4, r0, r2
 8023ffa:	f813 0b01 	ldrb.w	r0, [r3], #1
 8023ffe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8024002:	4290      	cmp	r0, r2
 8024004:	d101      	bne.n	802400a <strncmp+0x1a>
 8024006:	42a3      	cmp	r3, r4
 8024008:	d101      	bne.n	802400e <strncmp+0x1e>
 802400a:	1a80      	subs	r0, r0, r2
 802400c:	bd10      	pop	{r4, pc}
 802400e:	2800      	cmp	r0, #0
 8024010:	d1f3      	bne.n	8023ffa <strncmp+0xa>
 8024012:	e7fa      	b.n	802400a <strncmp+0x1a>
 8024014:	4610      	mov	r0, r2
 8024016:	e7f9      	b.n	802400c <strncmp+0x1c>

08024018 <strstr>:
 8024018:	780a      	ldrb	r2, [r1, #0]
 802401a:	b570      	push	{r4, r5, r6, lr}
 802401c:	b96a      	cbnz	r2, 802403a <strstr+0x22>
 802401e:	bd70      	pop	{r4, r5, r6, pc}
 8024020:	429a      	cmp	r2, r3
 8024022:	d109      	bne.n	8024038 <strstr+0x20>
 8024024:	460c      	mov	r4, r1
 8024026:	4605      	mov	r5, r0
 8024028:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 802402c:	2b00      	cmp	r3, #0
 802402e:	d0f6      	beq.n	802401e <strstr+0x6>
 8024030:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8024034:	429e      	cmp	r6, r3
 8024036:	d0f7      	beq.n	8024028 <strstr+0x10>
 8024038:	3001      	adds	r0, #1
 802403a:	7803      	ldrb	r3, [r0, #0]
 802403c:	2b00      	cmp	r3, #0
 802403e:	d1ef      	bne.n	8024020 <strstr+0x8>
 8024040:	4618      	mov	r0, r3
 8024042:	e7ec      	b.n	802401e <strstr+0x6>

08024044 <_strtol_l.constprop.0>:
 8024044:	2b01      	cmp	r3, #1
 8024046:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802404a:	d001      	beq.n	8024050 <_strtol_l.constprop.0+0xc>
 802404c:	2b24      	cmp	r3, #36	; 0x24
 802404e:	d906      	bls.n	802405e <_strtol_l.constprop.0+0x1a>
 8024050:	f000 fa46 	bl	80244e0 <__errno>
 8024054:	2316      	movs	r3, #22
 8024056:	6003      	str	r3, [r0, #0]
 8024058:	2000      	movs	r0, #0
 802405a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802405e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8024144 <_strtol_l.constprop.0+0x100>
 8024062:	460d      	mov	r5, r1
 8024064:	462e      	mov	r6, r5
 8024066:	f815 4b01 	ldrb.w	r4, [r5], #1
 802406a:	f814 700c 	ldrb.w	r7, [r4, ip]
 802406e:	f017 0708 	ands.w	r7, r7, #8
 8024072:	d1f7      	bne.n	8024064 <_strtol_l.constprop.0+0x20>
 8024074:	2c2d      	cmp	r4, #45	; 0x2d
 8024076:	d132      	bne.n	80240de <_strtol_l.constprop.0+0x9a>
 8024078:	782c      	ldrb	r4, [r5, #0]
 802407a:	2701      	movs	r7, #1
 802407c:	1cb5      	adds	r5, r6, #2
 802407e:	2b00      	cmp	r3, #0
 8024080:	d05b      	beq.n	802413a <_strtol_l.constprop.0+0xf6>
 8024082:	2b10      	cmp	r3, #16
 8024084:	d109      	bne.n	802409a <_strtol_l.constprop.0+0x56>
 8024086:	2c30      	cmp	r4, #48	; 0x30
 8024088:	d107      	bne.n	802409a <_strtol_l.constprop.0+0x56>
 802408a:	782c      	ldrb	r4, [r5, #0]
 802408c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8024090:	2c58      	cmp	r4, #88	; 0x58
 8024092:	d14d      	bne.n	8024130 <_strtol_l.constprop.0+0xec>
 8024094:	786c      	ldrb	r4, [r5, #1]
 8024096:	2310      	movs	r3, #16
 8024098:	3502      	adds	r5, #2
 802409a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 802409e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80240a2:	f04f 0c00 	mov.w	ip, #0
 80240a6:	fbb8 f9f3 	udiv	r9, r8, r3
 80240aa:	4666      	mov	r6, ip
 80240ac:	fb03 8a19 	mls	sl, r3, r9, r8
 80240b0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80240b4:	f1be 0f09 	cmp.w	lr, #9
 80240b8:	d816      	bhi.n	80240e8 <_strtol_l.constprop.0+0xa4>
 80240ba:	4674      	mov	r4, lr
 80240bc:	42a3      	cmp	r3, r4
 80240be:	dd24      	ble.n	802410a <_strtol_l.constprop.0+0xc6>
 80240c0:	f1bc 0f00 	cmp.w	ip, #0
 80240c4:	db1e      	blt.n	8024104 <_strtol_l.constprop.0+0xc0>
 80240c6:	45b1      	cmp	r9, r6
 80240c8:	d31c      	bcc.n	8024104 <_strtol_l.constprop.0+0xc0>
 80240ca:	d101      	bne.n	80240d0 <_strtol_l.constprop.0+0x8c>
 80240cc:	45a2      	cmp	sl, r4
 80240ce:	db19      	blt.n	8024104 <_strtol_l.constprop.0+0xc0>
 80240d0:	fb06 4603 	mla	r6, r6, r3, r4
 80240d4:	f04f 0c01 	mov.w	ip, #1
 80240d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80240dc:	e7e8      	b.n	80240b0 <_strtol_l.constprop.0+0x6c>
 80240de:	2c2b      	cmp	r4, #43	; 0x2b
 80240e0:	bf04      	itt	eq
 80240e2:	782c      	ldrbeq	r4, [r5, #0]
 80240e4:	1cb5      	addeq	r5, r6, #2
 80240e6:	e7ca      	b.n	802407e <_strtol_l.constprop.0+0x3a>
 80240e8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80240ec:	f1be 0f19 	cmp.w	lr, #25
 80240f0:	d801      	bhi.n	80240f6 <_strtol_l.constprop.0+0xb2>
 80240f2:	3c37      	subs	r4, #55	; 0x37
 80240f4:	e7e2      	b.n	80240bc <_strtol_l.constprop.0+0x78>
 80240f6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80240fa:	f1be 0f19 	cmp.w	lr, #25
 80240fe:	d804      	bhi.n	802410a <_strtol_l.constprop.0+0xc6>
 8024100:	3c57      	subs	r4, #87	; 0x57
 8024102:	e7db      	b.n	80240bc <_strtol_l.constprop.0+0x78>
 8024104:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8024108:	e7e6      	b.n	80240d8 <_strtol_l.constprop.0+0x94>
 802410a:	f1bc 0f00 	cmp.w	ip, #0
 802410e:	da05      	bge.n	802411c <_strtol_l.constprop.0+0xd8>
 8024110:	2322      	movs	r3, #34	; 0x22
 8024112:	6003      	str	r3, [r0, #0]
 8024114:	4646      	mov	r6, r8
 8024116:	b942      	cbnz	r2, 802412a <_strtol_l.constprop.0+0xe6>
 8024118:	4630      	mov	r0, r6
 802411a:	e79e      	b.n	802405a <_strtol_l.constprop.0+0x16>
 802411c:	b107      	cbz	r7, 8024120 <_strtol_l.constprop.0+0xdc>
 802411e:	4276      	negs	r6, r6
 8024120:	2a00      	cmp	r2, #0
 8024122:	d0f9      	beq.n	8024118 <_strtol_l.constprop.0+0xd4>
 8024124:	f1bc 0f00 	cmp.w	ip, #0
 8024128:	d000      	beq.n	802412c <_strtol_l.constprop.0+0xe8>
 802412a:	1e69      	subs	r1, r5, #1
 802412c:	6011      	str	r1, [r2, #0]
 802412e:	e7f3      	b.n	8024118 <_strtol_l.constprop.0+0xd4>
 8024130:	2430      	movs	r4, #48	; 0x30
 8024132:	2b00      	cmp	r3, #0
 8024134:	d1b1      	bne.n	802409a <_strtol_l.constprop.0+0x56>
 8024136:	2308      	movs	r3, #8
 8024138:	e7af      	b.n	802409a <_strtol_l.constprop.0+0x56>
 802413a:	2c30      	cmp	r4, #48	; 0x30
 802413c:	d0a5      	beq.n	802408a <_strtol_l.constprop.0+0x46>
 802413e:	230a      	movs	r3, #10
 8024140:	e7ab      	b.n	802409a <_strtol_l.constprop.0+0x56>
 8024142:	bf00      	nop
 8024144:	08029a9d 	.word	0x08029a9d

08024148 <strtol>:
 8024148:	4613      	mov	r3, r2
 802414a:	460a      	mov	r2, r1
 802414c:	4601      	mov	r1, r0
 802414e:	4802      	ldr	r0, [pc, #8]	; (8024158 <strtol+0x10>)
 8024150:	6800      	ldr	r0, [r0, #0]
 8024152:	f7ff bf77 	b.w	8024044 <_strtol_l.constprop.0>
 8024156:	bf00      	nop
 8024158:	200000c0 	.word	0x200000c0

0802415c <_strtoul_l.constprop.0>:
 802415c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024160:	4f36      	ldr	r7, [pc, #216]	; (802423c <_strtoul_l.constprop.0+0xe0>)
 8024162:	4686      	mov	lr, r0
 8024164:	460d      	mov	r5, r1
 8024166:	4628      	mov	r0, r5
 8024168:	f815 4b01 	ldrb.w	r4, [r5], #1
 802416c:	5de6      	ldrb	r6, [r4, r7]
 802416e:	f016 0608 	ands.w	r6, r6, #8
 8024172:	d1f8      	bne.n	8024166 <_strtoul_l.constprop.0+0xa>
 8024174:	2c2d      	cmp	r4, #45	; 0x2d
 8024176:	d12f      	bne.n	80241d8 <_strtoul_l.constprop.0+0x7c>
 8024178:	782c      	ldrb	r4, [r5, #0]
 802417a:	2601      	movs	r6, #1
 802417c:	1c85      	adds	r5, r0, #2
 802417e:	2b00      	cmp	r3, #0
 8024180:	d057      	beq.n	8024232 <_strtoul_l.constprop.0+0xd6>
 8024182:	2b10      	cmp	r3, #16
 8024184:	d109      	bne.n	802419a <_strtoul_l.constprop.0+0x3e>
 8024186:	2c30      	cmp	r4, #48	; 0x30
 8024188:	d107      	bne.n	802419a <_strtoul_l.constprop.0+0x3e>
 802418a:	7828      	ldrb	r0, [r5, #0]
 802418c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8024190:	2858      	cmp	r0, #88	; 0x58
 8024192:	d149      	bne.n	8024228 <_strtoul_l.constprop.0+0xcc>
 8024194:	786c      	ldrb	r4, [r5, #1]
 8024196:	2310      	movs	r3, #16
 8024198:	3502      	adds	r5, #2
 802419a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 802419e:	2700      	movs	r7, #0
 80241a0:	fbb8 f8f3 	udiv	r8, r8, r3
 80241a4:	fb03 f908 	mul.w	r9, r3, r8
 80241a8:	ea6f 0909 	mvn.w	r9, r9
 80241ac:	4638      	mov	r0, r7
 80241ae:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80241b2:	f1bc 0f09 	cmp.w	ip, #9
 80241b6:	d814      	bhi.n	80241e2 <_strtoul_l.constprop.0+0x86>
 80241b8:	4664      	mov	r4, ip
 80241ba:	42a3      	cmp	r3, r4
 80241bc:	dd22      	ble.n	8024204 <_strtoul_l.constprop.0+0xa8>
 80241be:	2f00      	cmp	r7, #0
 80241c0:	db1d      	blt.n	80241fe <_strtoul_l.constprop.0+0xa2>
 80241c2:	4580      	cmp	r8, r0
 80241c4:	d31b      	bcc.n	80241fe <_strtoul_l.constprop.0+0xa2>
 80241c6:	d101      	bne.n	80241cc <_strtoul_l.constprop.0+0x70>
 80241c8:	45a1      	cmp	r9, r4
 80241ca:	db18      	blt.n	80241fe <_strtoul_l.constprop.0+0xa2>
 80241cc:	fb00 4003 	mla	r0, r0, r3, r4
 80241d0:	2701      	movs	r7, #1
 80241d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80241d6:	e7ea      	b.n	80241ae <_strtoul_l.constprop.0+0x52>
 80241d8:	2c2b      	cmp	r4, #43	; 0x2b
 80241da:	bf04      	itt	eq
 80241dc:	782c      	ldrbeq	r4, [r5, #0]
 80241de:	1c85      	addeq	r5, r0, #2
 80241e0:	e7cd      	b.n	802417e <_strtoul_l.constprop.0+0x22>
 80241e2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80241e6:	f1bc 0f19 	cmp.w	ip, #25
 80241ea:	d801      	bhi.n	80241f0 <_strtoul_l.constprop.0+0x94>
 80241ec:	3c37      	subs	r4, #55	; 0x37
 80241ee:	e7e4      	b.n	80241ba <_strtoul_l.constprop.0+0x5e>
 80241f0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80241f4:	f1bc 0f19 	cmp.w	ip, #25
 80241f8:	d804      	bhi.n	8024204 <_strtoul_l.constprop.0+0xa8>
 80241fa:	3c57      	subs	r4, #87	; 0x57
 80241fc:	e7dd      	b.n	80241ba <_strtoul_l.constprop.0+0x5e>
 80241fe:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8024202:	e7e6      	b.n	80241d2 <_strtoul_l.constprop.0+0x76>
 8024204:	2f00      	cmp	r7, #0
 8024206:	da07      	bge.n	8024218 <_strtoul_l.constprop.0+0xbc>
 8024208:	2322      	movs	r3, #34	; 0x22
 802420a:	f8ce 3000 	str.w	r3, [lr]
 802420e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024212:	b932      	cbnz	r2, 8024222 <_strtoul_l.constprop.0+0xc6>
 8024214:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024218:	b106      	cbz	r6, 802421c <_strtoul_l.constprop.0+0xc0>
 802421a:	4240      	negs	r0, r0
 802421c:	2a00      	cmp	r2, #0
 802421e:	d0f9      	beq.n	8024214 <_strtoul_l.constprop.0+0xb8>
 8024220:	b107      	cbz	r7, 8024224 <_strtoul_l.constprop.0+0xc8>
 8024222:	1e69      	subs	r1, r5, #1
 8024224:	6011      	str	r1, [r2, #0]
 8024226:	e7f5      	b.n	8024214 <_strtoul_l.constprop.0+0xb8>
 8024228:	2430      	movs	r4, #48	; 0x30
 802422a:	2b00      	cmp	r3, #0
 802422c:	d1b5      	bne.n	802419a <_strtoul_l.constprop.0+0x3e>
 802422e:	2308      	movs	r3, #8
 8024230:	e7b3      	b.n	802419a <_strtoul_l.constprop.0+0x3e>
 8024232:	2c30      	cmp	r4, #48	; 0x30
 8024234:	d0a9      	beq.n	802418a <_strtoul_l.constprop.0+0x2e>
 8024236:	230a      	movs	r3, #10
 8024238:	e7af      	b.n	802419a <_strtoul_l.constprop.0+0x3e>
 802423a:	bf00      	nop
 802423c:	08029a9d 	.word	0x08029a9d

08024240 <strtoul>:
 8024240:	4613      	mov	r3, r2
 8024242:	460a      	mov	r2, r1
 8024244:	4601      	mov	r1, r0
 8024246:	4802      	ldr	r0, [pc, #8]	; (8024250 <strtoul+0x10>)
 8024248:	6800      	ldr	r0, [r0, #0]
 802424a:	f7ff bf87 	b.w	802415c <_strtoul_l.constprop.0>
 802424e:	bf00      	nop
 8024250:	200000c0 	.word	0x200000c0

08024254 <_vsniprintf_r>:
 8024254:	b530      	push	{r4, r5, lr}
 8024256:	4614      	mov	r4, r2
 8024258:	2c00      	cmp	r4, #0
 802425a:	b09b      	sub	sp, #108	; 0x6c
 802425c:	4605      	mov	r5, r0
 802425e:	461a      	mov	r2, r3
 8024260:	da05      	bge.n	802426e <_vsniprintf_r+0x1a>
 8024262:	238b      	movs	r3, #139	; 0x8b
 8024264:	6003      	str	r3, [r0, #0]
 8024266:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802426a:	b01b      	add	sp, #108	; 0x6c
 802426c:	bd30      	pop	{r4, r5, pc}
 802426e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8024272:	f8ad 300c 	strh.w	r3, [sp, #12]
 8024276:	bf14      	ite	ne
 8024278:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 802427c:	4623      	moveq	r3, r4
 802427e:	9302      	str	r3, [sp, #8]
 8024280:	9305      	str	r3, [sp, #20]
 8024282:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8024286:	9100      	str	r1, [sp, #0]
 8024288:	9104      	str	r1, [sp, #16]
 802428a:	f8ad 300e 	strh.w	r3, [sp, #14]
 802428e:	4669      	mov	r1, sp
 8024290:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8024292:	f000 fb0d 	bl	80248b0 <_svfiprintf_r>
 8024296:	1c43      	adds	r3, r0, #1
 8024298:	bfbc      	itt	lt
 802429a:	238b      	movlt	r3, #139	; 0x8b
 802429c:	602b      	strlt	r3, [r5, #0]
 802429e:	2c00      	cmp	r4, #0
 80242a0:	d0e3      	beq.n	802426a <_vsniprintf_r+0x16>
 80242a2:	9b00      	ldr	r3, [sp, #0]
 80242a4:	2200      	movs	r2, #0
 80242a6:	701a      	strb	r2, [r3, #0]
 80242a8:	e7df      	b.n	802426a <_vsniprintf_r+0x16>
	...

080242ac <vsniprintf>:
 80242ac:	b507      	push	{r0, r1, r2, lr}
 80242ae:	9300      	str	r3, [sp, #0]
 80242b0:	4613      	mov	r3, r2
 80242b2:	460a      	mov	r2, r1
 80242b4:	4601      	mov	r1, r0
 80242b6:	4803      	ldr	r0, [pc, #12]	; (80242c4 <vsniprintf+0x18>)
 80242b8:	6800      	ldr	r0, [r0, #0]
 80242ba:	f7ff ffcb 	bl	8024254 <_vsniprintf_r>
 80242be:	b003      	add	sp, #12
 80242c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80242c4:	200000c0 	.word	0x200000c0

080242c8 <__swbuf_r>:
 80242c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80242ca:	460e      	mov	r6, r1
 80242cc:	4614      	mov	r4, r2
 80242ce:	4605      	mov	r5, r0
 80242d0:	b118      	cbz	r0, 80242da <__swbuf_r+0x12>
 80242d2:	6983      	ldr	r3, [r0, #24]
 80242d4:	b90b      	cbnz	r3, 80242da <__swbuf_r+0x12>
 80242d6:	f7ff fa2f 	bl	8023738 <__sinit>
 80242da:	4b21      	ldr	r3, [pc, #132]	; (8024360 <__swbuf_r+0x98>)
 80242dc:	429c      	cmp	r4, r3
 80242de:	d12b      	bne.n	8024338 <__swbuf_r+0x70>
 80242e0:	686c      	ldr	r4, [r5, #4]
 80242e2:	69a3      	ldr	r3, [r4, #24]
 80242e4:	60a3      	str	r3, [r4, #8]
 80242e6:	89a3      	ldrh	r3, [r4, #12]
 80242e8:	071a      	lsls	r2, r3, #28
 80242ea:	d52f      	bpl.n	802434c <__swbuf_r+0x84>
 80242ec:	6923      	ldr	r3, [r4, #16]
 80242ee:	b36b      	cbz	r3, 802434c <__swbuf_r+0x84>
 80242f0:	6923      	ldr	r3, [r4, #16]
 80242f2:	6820      	ldr	r0, [r4, #0]
 80242f4:	1ac0      	subs	r0, r0, r3
 80242f6:	6963      	ldr	r3, [r4, #20]
 80242f8:	b2f6      	uxtb	r6, r6
 80242fa:	4283      	cmp	r3, r0
 80242fc:	4637      	mov	r7, r6
 80242fe:	dc04      	bgt.n	802430a <__swbuf_r+0x42>
 8024300:	4621      	mov	r1, r4
 8024302:	4628      	mov	r0, r5
 8024304:	f000 f978 	bl	80245f8 <_fflush_r>
 8024308:	bb30      	cbnz	r0, 8024358 <__swbuf_r+0x90>
 802430a:	68a3      	ldr	r3, [r4, #8]
 802430c:	3b01      	subs	r3, #1
 802430e:	60a3      	str	r3, [r4, #8]
 8024310:	6823      	ldr	r3, [r4, #0]
 8024312:	1c5a      	adds	r2, r3, #1
 8024314:	6022      	str	r2, [r4, #0]
 8024316:	701e      	strb	r6, [r3, #0]
 8024318:	6963      	ldr	r3, [r4, #20]
 802431a:	3001      	adds	r0, #1
 802431c:	4283      	cmp	r3, r0
 802431e:	d004      	beq.n	802432a <__swbuf_r+0x62>
 8024320:	89a3      	ldrh	r3, [r4, #12]
 8024322:	07db      	lsls	r3, r3, #31
 8024324:	d506      	bpl.n	8024334 <__swbuf_r+0x6c>
 8024326:	2e0a      	cmp	r6, #10
 8024328:	d104      	bne.n	8024334 <__swbuf_r+0x6c>
 802432a:	4621      	mov	r1, r4
 802432c:	4628      	mov	r0, r5
 802432e:	f000 f963 	bl	80245f8 <_fflush_r>
 8024332:	b988      	cbnz	r0, 8024358 <__swbuf_r+0x90>
 8024334:	4638      	mov	r0, r7
 8024336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024338:	4b0a      	ldr	r3, [pc, #40]	; (8024364 <__swbuf_r+0x9c>)
 802433a:	429c      	cmp	r4, r3
 802433c:	d101      	bne.n	8024342 <__swbuf_r+0x7a>
 802433e:	68ac      	ldr	r4, [r5, #8]
 8024340:	e7cf      	b.n	80242e2 <__swbuf_r+0x1a>
 8024342:	4b09      	ldr	r3, [pc, #36]	; (8024368 <__swbuf_r+0xa0>)
 8024344:	429c      	cmp	r4, r3
 8024346:	bf08      	it	eq
 8024348:	68ec      	ldreq	r4, [r5, #12]
 802434a:	e7ca      	b.n	80242e2 <__swbuf_r+0x1a>
 802434c:	4621      	mov	r1, r4
 802434e:	4628      	mov	r0, r5
 8024350:	f000 f81e 	bl	8024390 <__swsetup_r>
 8024354:	2800      	cmp	r0, #0
 8024356:	d0cb      	beq.n	80242f0 <__swbuf_r+0x28>
 8024358:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 802435c:	e7ea      	b.n	8024334 <__swbuf_r+0x6c>
 802435e:	bf00      	nop
 8024360:	08029bc0 	.word	0x08029bc0
 8024364:	08029be0 	.word	0x08029be0
 8024368:	08029ba0 	.word	0x08029ba0

0802436c <_write_r>:
 802436c:	b538      	push	{r3, r4, r5, lr}
 802436e:	4d07      	ldr	r5, [pc, #28]	; (802438c <_write_r+0x20>)
 8024370:	4604      	mov	r4, r0
 8024372:	4608      	mov	r0, r1
 8024374:	4611      	mov	r1, r2
 8024376:	2200      	movs	r2, #0
 8024378:	602a      	str	r2, [r5, #0]
 802437a:	461a      	mov	r2, r3
 802437c:	f7dd f923 	bl	80015c6 <_write>
 8024380:	1c43      	adds	r3, r0, #1
 8024382:	d102      	bne.n	802438a <_write_r+0x1e>
 8024384:	682b      	ldr	r3, [r5, #0]
 8024386:	b103      	cbz	r3, 802438a <_write_r+0x1e>
 8024388:	6023      	str	r3, [r4, #0]
 802438a:	bd38      	pop	{r3, r4, r5, pc}
 802438c:	2000ff64 	.word	0x2000ff64

08024390 <__swsetup_r>:
 8024390:	4b32      	ldr	r3, [pc, #200]	; (802445c <__swsetup_r+0xcc>)
 8024392:	b570      	push	{r4, r5, r6, lr}
 8024394:	681d      	ldr	r5, [r3, #0]
 8024396:	4606      	mov	r6, r0
 8024398:	460c      	mov	r4, r1
 802439a:	b125      	cbz	r5, 80243a6 <__swsetup_r+0x16>
 802439c:	69ab      	ldr	r3, [r5, #24]
 802439e:	b913      	cbnz	r3, 80243a6 <__swsetup_r+0x16>
 80243a0:	4628      	mov	r0, r5
 80243a2:	f7ff f9c9 	bl	8023738 <__sinit>
 80243a6:	4b2e      	ldr	r3, [pc, #184]	; (8024460 <__swsetup_r+0xd0>)
 80243a8:	429c      	cmp	r4, r3
 80243aa:	d10f      	bne.n	80243cc <__swsetup_r+0x3c>
 80243ac:	686c      	ldr	r4, [r5, #4]
 80243ae:	89a3      	ldrh	r3, [r4, #12]
 80243b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80243b4:	0719      	lsls	r1, r3, #28
 80243b6:	d42c      	bmi.n	8024412 <__swsetup_r+0x82>
 80243b8:	06dd      	lsls	r5, r3, #27
 80243ba:	d411      	bmi.n	80243e0 <__swsetup_r+0x50>
 80243bc:	2309      	movs	r3, #9
 80243be:	6033      	str	r3, [r6, #0]
 80243c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80243c4:	81a3      	strh	r3, [r4, #12]
 80243c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80243ca:	e03e      	b.n	802444a <__swsetup_r+0xba>
 80243cc:	4b25      	ldr	r3, [pc, #148]	; (8024464 <__swsetup_r+0xd4>)
 80243ce:	429c      	cmp	r4, r3
 80243d0:	d101      	bne.n	80243d6 <__swsetup_r+0x46>
 80243d2:	68ac      	ldr	r4, [r5, #8]
 80243d4:	e7eb      	b.n	80243ae <__swsetup_r+0x1e>
 80243d6:	4b24      	ldr	r3, [pc, #144]	; (8024468 <__swsetup_r+0xd8>)
 80243d8:	429c      	cmp	r4, r3
 80243da:	bf08      	it	eq
 80243dc:	68ec      	ldreq	r4, [r5, #12]
 80243de:	e7e6      	b.n	80243ae <__swsetup_r+0x1e>
 80243e0:	0758      	lsls	r0, r3, #29
 80243e2:	d512      	bpl.n	802440a <__swsetup_r+0x7a>
 80243e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80243e6:	b141      	cbz	r1, 80243fa <__swsetup_r+0x6a>
 80243e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80243ec:	4299      	cmp	r1, r3
 80243ee:	d002      	beq.n	80243f6 <__swsetup_r+0x66>
 80243f0:	4630      	mov	r0, r6
 80243f2:	f7ff fb15 	bl	8023a20 <_free_r>
 80243f6:	2300      	movs	r3, #0
 80243f8:	6363      	str	r3, [r4, #52]	; 0x34
 80243fa:	89a3      	ldrh	r3, [r4, #12]
 80243fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8024400:	81a3      	strh	r3, [r4, #12]
 8024402:	2300      	movs	r3, #0
 8024404:	6063      	str	r3, [r4, #4]
 8024406:	6923      	ldr	r3, [r4, #16]
 8024408:	6023      	str	r3, [r4, #0]
 802440a:	89a3      	ldrh	r3, [r4, #12]
 802440c:	f043 0308 	orr.w	r3, r3, #8
 8024410:	81a3      	strh	r3, [r4, #12]
 8024412:	6923      	ldr	r3, [r4, #16]
 8024414:	b94b      	cbnz	r3, 802442a <__swsetup_r+0x9a>
 8024416:	89a3      	ldrh	r3, [r4, #12]
 8024418:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802441c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8024420:	d003      	beq.n	802442a <__swsetup_r+0x9a>
 8024422:	4621      	mov	r1, r4
 8024424:	4630      	mov	r0, r6
 8024426:	f000 f96d 	bl	8024704 <__smakebuf_r>
 802442a:	89a0      	ldrh	r0, [r4, #12]
 802442c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024430:	f010 0301 	ands.w	r3, r0, #1
 8024434:	d00a      	beq.n	802444c <__swsetup_r+0xbc>
 8024436:	2300      	movs	r3, #0
 8024438:	60a3      	str	r3, [r4, #8]
 802443a:	6963      	ldr	r3, [r4, #20]
 802443c:	425b      	negs	r3, r3
 802443e:	61a3      	str	r3, [r4, #24]
 8024440:	6923      	ldr	r3, [r4, #16]
 8024442:	b943      	cbnz	r3, 8024456 <__swsetup_r+0xc6>
 8024444:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8024448:	d1ba      	bne.n	80243c0 <__swsetup_r+0x30>
 802444a:	bd70      	pop	{r4, r5, r6, pc}
 802444c:	0781      	lsls	r1, r0, #30
 802444e:	bf58      	it	pl
 8024450:	6963      	ldrpl	r3, [r4, #20]
 8024452:	60a3      	str	r3, [r4, #8]
 8024454:	e7f4      	b.n	8024440 <__swsetup_r+0xb0>
 8024456:	2000      	movs	r0, #0
 8024458:	e7f7      	b.n	802444a <__swsetup_r+0xba>
 802445a:	bf00      	nop
 802445c:	200000c0 	.word	0x200000c0
 8024460:	08029bc0 	.word	0x08029bc0
 8024464:	08029be0 	.word	0x08029be0
 8024468:	08029ba0 	.word	0x08029ba0

0802446c <__assert_func>:
 802446c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802446e:	4614      	mov	r4, r2
 8024470:	461a      	mov	r2, r3
 8024472:	4b09      	ldr	r3, [pc, #36]	; (8024498 <__assert_func+0x2c>)
 8024474:	681b      	ldr	r3, [r3, #0]
 8024476:	4605      	mov	r5, r0
 8024478:	68d8      	ldr	r0, [r3, #12]
 802447a:	b14c      	cbz	r4, 8024490 <__assert_func+0x24>
 802447c:	4b07      	ldr	r3, [pc, #28]	; (802449c <__assert_func+0x30>)
 802447e:	9100      	str	r1, [sp, #0]
 8024480:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8024484:	4906      	ldr	r1, [pc, #24]	; (80244a0 <__assert_func+0x34>)
 8024486:	462b      	mov	r3, r5
 8024488:	f000 f8f2 	bl	8024670 <fiprintf>
 802448c:	f000 fe10 	bl	80250b0 <abort>
 8024490:	4b04      	ldr	r3, [pc, #16]	; (80244a4 <__assert_func+0x38>)
 8024492:	461c      	mov	r4, r3
 8024494:	e7f3      	b.n	802447e <__assert_func+0x12>
 8024496:	bf00      	nop
 8024498:	200000c0 	.word	0x200000c0
 802449c:	08029c76 	.word	0x08029c76
 80244a0:	08029c83 	.word	0x08029c83
 80244a4:	08029cb1 	.word	0x08029cb1

080244a8 <_close_r>:
 80244a8:	b538      	push	{r3, r4, r5, lr}
 80244aa:	4d06      	ldr	r5, [pc, #24]	; (80244c4 <_close_r+0x1c>)
 80244ac:	2300      	movs	r3, #0
 80244ae:	4604      	mov	r4, r0
 80244b0:	4608      	mov	r0, r1
 80244b2:	602b      	str	r3, [r5, #0]
 80244b4:	f7dd f8a3 	bl	80015fe <_close>
 80244b8:	1c43      	adds	r3, r0, #1
 80244ba:	d102      	bne.n	80244c2 <_close_r+0x1a>
 80244bc:	682b      	ldr	r3, [r5, #0]
 80244be:	b103      	cbz	r3, 80244c2 <_close_r+0x1a>
 80244c0:	6023      	str	r3, [r4, #0]
 80244c2:	bd38      	pop	{r3, r4, r5, pc}
 80244c4:	2000ff64 	.word	0x2000ff64

080244c8 <__env_lock>:
 80244c8:	4801      	ldr	r0, [pc, #4]	; (80244d0 <__env_lock+0x8>)
 80244ca:	f7ff ba40 	b.w	802394e <__retarget_lock_acquire_recursive>
 80244ce:	bf00      	nop
 80244d0:	2000ff58 	.word	0x2000ff58

080244d4 <__env_unlock>:
 80244d4:	4801      	ldr	r0, [pc, #4]	; (80244dc <__env_unlock+0x8>)
 80244d6:	f7ff ba3b 	b.w	8023950 <__retarget_lock_release_recursive>
 80244da:	bf00      	nop
 80244dc:	2000ff58 	.word	0x2000ff58

080244e0 <__errno>:
 80244e0:	4b01      	ldr	r3, [pc, #4]	; (80244e8 <__errno+0x8>)
 80244e2:	6818      	ldr	r0, [r3, #0]
 80244e4:	4770      	bx	lr
 80244e6:	bf00      	nop
 80244e8:	200000c0 	.word	0x200000c0

080244ec <__sflush_r>:
 80244ec:	898a      	ldrh	r2, [r1, #12]
 80244ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80244f2:	4605      	mov	r5, r0
 80244f4:	0710      	lsls	r0, r2, #28
 80244f6:	460c      	mov	r4, r1
 80244f8:	d458      	bmi.n	80245ac <__sflush_r+0xc0>
 80244fa:	684b      	ldr	r3, [r1, #4]
 80244fc:	2b00      	cmp	r3, #0
 80244fe:	dc05      	bgt.n	802450c <__sflush_r+0x20>
 8024500:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8024502:	2b00      	cmp	r3, #0
 8024504:	dc02      	bgt.n	802450c <__sflush_r+0x20>
 8024506:	2000      	movs	r0, #0
 8024508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802450c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802450e:	2e00      	cmp	r6, #0
 8024510:	d0f9      	beq.n	8024506 <__sflush_r+0x1a>
 8024512:	2300      	movs	r3, #0
 8024514:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8024518:	682f      	ldr	r7, [r5, #0]
 802451a:	602b      	str	r3, [r5, #0]
 802451c:	d032      	beq.n	8024584 <__sflush_r+0x98>
 802451e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8024520:	89a3      	ldrh	r3, [r4, #12]
 8024522:	075a      	lsls	r2, r3, #29
 8024524:	d505      	bpl.n	8024532 <__sflush_r+0x46>
 8024526:	6863      	ldr	r3, [r4, #4]
 8024528:	1ac0      	subs	r0, r0, r3
 802452a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802452c:	b10b      	cbz	r3, 8024532 <__sflush_r+0x46>
 802452e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024530:	1ac0      	subs	r0, r0, r3
 8024532:	2300      	movs	r3, #0
 8024534:	4602      	mov	r2, r0
 8024536:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8024538:	6a21      	ldr	r1, [r4, #32]
 802453a:	4628      	mov	r0, r5
 802453c:	47b0      	blx	r6
 802453e:	1c43      	adds	r3, r0, #1
 8024540:	89a3      	ldrh	r3, [r4, #12]
 8024542:	d106      	bne.n	8024552 <__sflush_r+0x66>
 8024544:	6829      	ldr	r1, [r5, #0]
 8024546:	291d      	cmp	r1, #29
 8024548:	d82c      	bhi.n	80245a4 <__sflush_r+0xb8>
 802454a:	4a2a      	ldr	r2, [pc, #168]	; (80245f4 <__sflush_r+0x108>)
 802454c:	40ca      	lsrs	r2, r1
 802454e:	07d6      	lsls	r6, r2, #31
 8024550:	d528      	bpl.n	80245a4 <__sflush_r+0xb8>
 8024552:	2200      	movs	r2, #0
 8024554:	6062      	str	r2, [r4, #4]
 8024556:	04d9      	lsls	r1, r3, #19
 8024558:	6922      	ldr	r2, [r4, #16]
 802455a:	6022      	str	r2, [r4, #0]
 802455c:	d504      	bpl.n	8024568 <__sflush_r+0x7c>
 802455e:	1c42      	adds	r2, r0, #1
 8024560:	d101      	bne.n	8024566 <__sflush_r+0x7a>
 8024562:	682b      	ldr	r3, [r5, #0]
 8024564:	b903      	cbnz	r3, 8024568 <__sflush_r+0x7c>
 8024566:	6560      	str	r0, [r4, #84]	; 0x54
 8024568:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802456a:	602f      	str	r7, [r5, #0]
 802456c:	2900      	cmp	r1, #0
 802456e:	d0ca      	beq.n	8024506 <__sflush_r+0x1a>
 8024570:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024574:	4299      	cmp	r1, r3
 8024576:	d002      	beq.n	802457e <__sflush_r+0x92>
 8024578:	4628      	mov	r0, r5
 802457a:	f7ff fa51 	bl	8023a20 <_free_r>
 802457e:	2000      	movs	r0, #0
 8024580:	6360      	str	r0, [r4, #52]	; 0x34
 8024582:	e7c1      	b.n	8024508 <__sflush_r+0x1c>
 8024584:	6a21      	ldr	r1, [r4, #32]
 8024586:	2301      	movs	r3, #1
 8024588:	4628      	mov	r0, r5
 802458a:	47b0      	blx	r6
 802458c:	1c41      	adds	r1, r0, #1
 802458e:	d1c7      	bne.n	8024520 <__sflush_r+0x34>
 8024590:	682b      	ldr	r3, [r5, #0]
 8024592:	2b00      	cmp	r3, #0
 8024594:	d0c4      	beq.n	8024520 <__sflush_r+0x34>
 8024596:	2b1d      	cmp	r3, #29
 8024598:	d001      	beq.n	802459e <__sflush_r+0xb2>
 802459a:	2b16      	cmp	r3, #22
 802459c:	d101      	bne.n	80245a2 <__sflush_r+0xb6>
 802459e:	602f      	str	r7, [r5, #0]
 80245a0:	e7b1      	b.n	8024506 <__sflush_r+0x1a>
 80245a2:	89a3      	ldrh	r3, [r4, #12]
 80245a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80245a8:	81a3      	strh	r3, [r4, #12]
 80245aa:	e7ad      	b.n	8024508 <__sflush_r+0x1c>
 80245ac:	690f      	ldr	r7, [r1, #16]
 80245ae:	2f00      	cmp	r7, #0
 80245b0:	d0a9      	beq.n	8024506 <__sflush_r+0x1a>
 80245b2:	0793      	lsls	r3, r2, #30
 80245b4:	680e      	ldr	r6, [r1, #0]
 80245b6:	bf08      	it	eq
 80245b8:	694b      	ldreq	r3, [r1, #20]
 80245ba:	600f      	str	r7, [r1, #0]
 80245bc:	bf18      	it	ne
 80245be:	2300      	movne	r3, #0
 80245c0:	eba6 0807 	sub.w	r8, r6, r7
 80245c4:	608b      	str	r3, [r1, #8]
 80245c6:	f1b8 0f00 	cmp.w	r8, #0
 80245ca:	dd9c      	ble.n	8024506 <__sflush_r+0x1a>
 80245cc:	6a21      	ldr	r1, [r4, #32]
 80245ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80245d0:	4643      	mov	r3, r8
 80245d2:	463a      	mov	r2, r7
 80245d4:	4628      	mov	r0, r5
 80245d6:	47b0      	blx	r6
 80245d8:	2800      	cmp	r0, #0
 80245da:	dc06      	bgt.n	80245ea <__sflush_r+0xfe>
 80245dc:	89a3      	ldrh	r3, [r4, #12]
 80245de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80245e2:	81a3      	strh	r3, [r4, #12]
 80245e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80245e8:	e78e      	b.n	8024508 <__sflush_r+0x1c>
 80245ea:	4407      	add	r7, r0
 80245ec:	eba8 0800 	sub.w	r8, r8, r0
 80245f0:	e7e9      	b.n	80245c6 <__sflush_r+0xda>
 80245f2:	bf00      	nop
 80245f4:	20400001 	.word	0x20400001

080245f8 <_fflush_r>:
 80245f8:	b538      	push	{r3, r4, r5, lr}
 80245fa:	690b      	ldr	r3, [r1, #16]
 80245fc:	4605      	mov	r5, r0
 80245fe:	460c      	mov	r4, r1
 8024600:	b913      	cbnz	r3, 8024608 <_fflush_r+0x10>
 8024602:	2500      	movs	r5, #0
 8024604:	4628      	mov	r0, r5
 8024606:	bd38      	pop	{r3, r4, r5, pc}
 8024608:	b118      	cbz	r0, 8024612 <_fflush_r+0x1a>
 802460a:	6983      	ldr	r3, [r0, #24]
 802460c:	b90b      	cbnz	r3, 8024612 <_fflush_r+0x1a>
 802460e:	f7ff f893 	bl	8023738 <__sinit>
 8024612:	4b14      	ldr	r3, [pc, #80]	; (8024664 <_fflush_r+0x6c>)
 8024614:	429c      	cmp	r4, r3
 8024616:	d11b      	bne.n	8024650 <_fflush_r+0x58>
 8024618:	686c      	ldr	r4, [r5, #4]
 802461a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802461e:	2b00      	cmp	r3, #0
 8024620:	d0ef      	beq.n	8024602 <_fflush_r+0xa>
 8024622:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8024624:	07d0      	lsls	r0, r2, #31
 8024626:	d404      	bmi.n	8024632 <_fflush_r+0x3a>
 8024628:	0599      	lsls	r1, r3, #22
 802462a:	d402      	bmi.n	8024632 <_fflush_r+0x3a>
 802462c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802462e:	f7ff f98e 	bl	802394e <__retarget_lock_acquire_recursive>
 8024632:	4628      	mov	r0, r5
 8024634:	4621      	mov	r1, r4
 8024636:	f7ff ff59 	bl	80244ec <__sflush_r>
 802463a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802463c:	07da      	lsls	r2, r3, #31
 802463e:	4605      	mov	r5, r0
 8024640:	d4e0      	bmi.n	8024604 <_fflush_r+0xc>
 8024642:	89a3      	ldrh	r3, [r4, #12]
 8024644:	059b      	lsls	r3, r3, #22
 8024646:	d4dd      	bmi.n	8024604 <_fflush_r+0xc>
 8024648:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802464a:	f7ff f981 	bl	8023950 <__retarget_lock_release_recursive>
 802464e:	e7d9      	b.n	8024604 <_fflush_r+0xc>
 8024650:	4b05      	ldr	r3, [pc, #20]	; (8024668 <_fflush_r+0x70>)
 8024652:	429c      	cmp	r4, r3
 8024654:	d101      	bne.n	802465a <_fflush_r+0x62>
 8024656:	68ac      	ldr	r4, [r5, #8]
 8024658:	e7df      	b.n	802461a <_fflush_r+0x22>
 802465a:	4b04      	ldr	r3, [pc, #16]	; (802466c <_fflush_r+0x74>)
 802465c:	429c      	cmp	r4, r3
 802465e:	bf08      	it	eq
 8024660:	68ec      	ldreq	r4, [r5, #12]
 8024662:	e7da      	b.n	802461a <_fflush_r+0x22>
 8024664:	08029bc0 	.word	0x08029bc0
 8024668:	08029be0 	.word	0x08029be0
 802466c:	08029ba0 	.word	0x08029ba0

08024670 <fiprintf>:
 8024670:	b40e      	push	{r1, r2, r3}
 8024672:	b503      	push	{r0, r1, lr}
 8024674:	4601      	mov	r1, r0
 8024676:	ab03      	add	r3, sp, #12
 8024678:	4805      	ldr	r0, [pc, #20]	; (8024690 <fiprintf+0x20>)
 802467a:	f853 2b04 	ldr.w	r2, [r3], #4
 802467e:	6800      	ldr	r0, [r0, #0]
 8024680:	9301      	str	r3, [sp, #4]
 8024682:	f000 fa3f 	bl	8024b04 <_vfiprintf_r>
 8024686:	b002      	add	sp, #8
 8024688:	f85d eb04 	ldr.w	lr, [sp], #4
 802468c:	b003      	add	sp, #12
 802468e:	4770      	bx	lr
 8024690:	200000c0 	.word	0x200000c0

08024694 <_lseek_r>:
 8024694:	b538      	push	{r3, r4, r5, lr}
 8024696:	4d07      	ldr	r5, [pc, #28]	; (80246b4 <_lseek_r+0x20>)
 8024698:	4604      	mov	r4, r0
 802469a:	4608      	mov	r0, r1
 802469c:	4611      	mov	r1, r2
 802469e:	2200      	movs	r2, #0
 80246a0:	602a      	str	r2, [r5, #0]
 80246a2:	461a      	mov	r2, r3
 80246a4:	f7dc ffd2 	bl	800164c <_lseek>
 80246a8:	1c43      	adds	r3, r0, #1
 80246aa:	d102      	bne.n	80246b2 <_lseek_r+0x1e>
 80246ac:	682b      	ldr	r3, [r5, #0]
 80246ae:	b103      	cbz	r3, 80246b2 <_lseek_r+0x1e>
 80246b0:	6023      	str	r3, [r4, #0]
 80246b2:	bd38      	pop	{r3, r4, r5, pc}
 80246b4:	2000ff64 	.word	0x2000ff64

080246b8 <__swhatbuf_r>:
 80246b8:	b570      	push	{r4, r5, r6, lr}
 80246ba:	460e      	mov	r6, r1
 80246bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80246c0:	2900      	cmp	r1, #0
 80246c2:	b096      	sub	sp, #88	; 0x58
 80246c4:	4614      	mov	r4, r2
 80246c6:	461d      	mov	r5, r3
 80246c8:	da08      	bge.n	80246dc <__swhatbuf_r+0x24>
 80246ca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80246ce:	2200      	movs	r2, #0
 80246d0:	602a      	str	r2, [r5, #0]
 80246d2:	061a      	lsls	r2, r3, #24
 80246d4:	d410      	bmi.n	80246f8 <__swhatbuf_r+0x40>
 80246d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80246da:	e00e      	b.n	80246fa <__swhatbuf_r+0x42>
 80246dc:	466a      	mov	r2, sp
 80246de:	f000 fcef 	bl	80250c0 <_fstat_r>
 80246e2:	2800      	cmp	r0, #0
 80246e4:	dbf1      	blt.n	80246ca <__swhatbuf_r+0x12>
 80246e6:	9a01      	ldr	r2, [sp, #4]
 80246e8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80246ec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80246f0:	425a      	negs	r2, r3
 80246f2:	415a      	adcs	r2, r3
 80246f4:	602a      	str	r2, [r5, #0]
 80246f6:	e7ee      	b.n	80246d6 <__swhatbuf_r+0x1e>
 80246f8:	2340      	movs	r3, #64	; 0x40
 80246fa:	2000      	movs	r0, #0
 80246fc:	6023      	str	r3, [r4, #0]
 80246fe:	b016      	add	sp, #88	; 0x58
 8024700:	bd70      	pop	{r4, r5, r6, pc}
	...

08024704 <__smakebuf_r>:
 8024704:	898b      	ldrh	r3, [r1, #12]
 8024706:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8024708:	079d      	lsls	r5, r3, #30
 802470a:	4606      	mov	r6, r0
 802470c:	460c      	mov	r4, r1
 802470e:	d507      	bpl.n	8024720 <__smakebuf_r+0x1c>
 8024710:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8024714:	6023      	str	r3, [r4, #0]
 8024716:	6123      	str	r3, [r4, #16]
 8024718:	2301      	movs	r3, #1
 802471a:	6163      	str	r3, [r4, #20]
 802471c:	b002      	add	sp, #8
 802471e:	bd70      	pop	{r4, r5, r6, pc}
 8024720:	ab01      	add	r3, sp, #4
 8024722:	466a      	mov	r2, sp
 8024724:	f7ff ffc8 	bl	80246b8 <__swhatbuf_r>
 8024728:	9900      	ldr	r1, [sp, #0]
 802472a:	4605      	mov	r5, r0
 802472c:	4630      	mov	r0, r6
 802472e:	f7ff f9e3 	bl	8023af8 <_malloc_r>
 8024732:	b948      	cbnz	r0, 8024748 <__smakebuf_r+0x44>
 8024734:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024738:	059a      	lsls	r2, r3, #22
 802473a:	d4ef      	bmi.n	802471c <__smakebuf_r+0x18>
 802473c:	f023 0303 	bic.w	r3, r3, #3
 8024740:	f043 0302 	orr.w	r3, r3, #2
 8024744:	81a3      	strh	r3, [r4, #12]
 8024746:	e7e3      	b.n	8024710 <__smakebuf_r+0xc>
 8024748:	4b0d      	ldr	r3, [pc, #52]	; (8024780 <__smakebuf_r+0x7c>)
 802474a:	62b3      	str	r3, [r6, #40]	; 0x28
 802474c:	89a3      	ldrh	r3, [r4, #12]
 802474e:	6020      	str	r0, [r4, #0]
 8024750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024754:	81a3      	strh	r3, [r4, #12]
 8024756:	9b00      	ldr	r3, [sp, #0]
 8024758:	6163      	str	r3, [r4, #20]
 802475a:	9b01      	ldr	r3, [sp, #4]
 802475c:	6120      	str	r0, [r4, #16]
 802475e:	b15b      	cbz	r3, 8024778 <__smakebuf_r+0x74>
 8024760:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024764:	4630      	mov	r0, r6
 8024766:	f000 fcbd 	bl	80250e4 <_isatty_r>
 802476a:	b128      	cbz	r0, 8024778 <__smakebuf_r+0x74>
 802476c:	89a3      	ldrh	r3, [r4, #12]
 802476e:	f023 0303 	bic.w	r3, r3, #3
 8024772:	f043 0301 	orr.w	r3, r3, #1
 8024776:	81a3      	strh	r3, [r4, #12]
 8024778:	89a0      	ldrh	r0, [r4, #12]
 802477a:	4305      	orrs	r5, r0
 802477c:	81a5      	strh	r5, [r4, #12]
 802477e:	e7cd      	b.n	802471c <__smakebuf_r+0x18>
 8024780:	080236d1 	.word	0x080236d1

08024784 <__malloc_lock>:
 8024784:	4801      	ldr	r0, [pc, #4]	; (802478c <__malloc_lock+0x8>)
 8024786:	f7ff b8e2 	b.w	802394e <__retarget_lock_acquire_recursive>
 802478a:	bf00      	nop
 802478c:	2000ff59 	.word	0x2000ff59

08024790 <__malloc_unlock>:
 8024790:	4801      	ldr	r0, [pc, #4]	; (8024798 <__malloc_unlock+0x8>)
 8024792:	f7ff b8dd 	b.w	8023950 <__retarget_lock_release_recursive>
 8024796:	bf00      	nop
 8024798:	2000ff59 	.word	0x2000ff59

0802479c <_realloc_r>:
 802479c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80247a0:	4680      	mov	r8, r0
 80247a2:	4614      	mov	r4, r2
 80247a4:	460e      	mov	r6, r1
 80247a6:	b921      	cbnz	r1, 80247b2 <_realloc_r+0x16>
 80247a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80247ac:	4611      	mov	r1, r2
 80247ae:	f7ff b9a3 	b.w	8023af8 <_malloc_r>
 80247b2:	b92a      	cbnz	r2, 80247c0 <_realloc_r+0x24>
 80247b4:	f7ff f934 	bl	8023a20 <_free_r>
 80247b8:	4625      	mov	r5, r4
 80247ba:	4628      	mov	r0, r5
 80247bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80247c0:	f000 fca0 	bl	8025104 <_malloc_usable_size_r>
 80247c4:	4284      	cmp	r4, r0
 80247c6:	4607      	mov	r7, r0
 80247c8:	d802      	bhi.n	80247d0 <_realloc_r+0x34>
 80247ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80247ce:	d812      	bhi.n	80247f6 <_realloc_r+0x5a>
 80247d0:	4621      	mov	r1, r4
 80247d2:	4640      	mov	r0, r8
 80247d4:	f7ff f990 	bl	8023af8 <_malloc_r>
 80247d8:	4605      	mov	r5, r0
 80247da:	2800      	cmp	r0, #0
 80247dc:	d0ed      	beq.n	80247ba <_realloc_r+0x1e>
 80247de:	42bc      	cmp	r4, r7
 80247e0:	4622      	mov	r2, r4
 80247e2:	4631      	mov	r1, r6
 80247e4:	bf28      	it	cs
 80247e6:	463a      	movcs	r2, r7
 80247e8:	f7ff f8d4 	bl	8023994 <memcpy>
 80247ec:	4631      	mov	r1, r6
 80247ee:	4640      	mov	r0, r8
 80247f0:	f7ff f916 	bl	8023a20 <_free_r>
 80247f4:	e7e1      	b.n	80247ba <_realloc_r+0x1e>
 80247f6:	4635      	mov	r5, r6
 80247f8:	e7df      	b.n	80247ba <_realloc_r+0x1e>

080247fa <__ssputs_r>:
 80247fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80247fe:	688e      	ldr	r6, [r1, #8]
 8024800:	429e      	cmp	r6, r3
 8024802:	4682      	mov	sl, r0
 8024804:	460c      	mov	r4, r1
 8024806:	4690      	mov	r8, r2
 8024808:	461f      	mov	r7, r3
 802480a:	d838      	bhi.n	802487e <__ssputs_r+0x84>
 802480c:	898a      	ldrh	r2, [r1, #12]
 802480e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8024812:	d032      	beq.n	802487a <__ssputs_r+0x80>
 8024814:	6825      	ldr	r5, [r4, #0]
 8024816:	6909      	ldr	r1, [r1, #16]
 8024818:	eba5 0901 	sub.w	r9, r5, r1
 802481c:	6965      	ldr	r5, [r4, #20]
 802481e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024822:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8024826:	3301      	adds	r3, #1
 8024828:	444b      	add	r3, r9
 802482a:	106d      	asrs	r5, r5, #1
 802482c:	429d      	cmp	r5, r3
 802482e:	bf38      	it	cc
 8024830:	461d      	movcc	r5, r3
 8024832:	0553      	lsls	r3, r2, #21
 8024834:	d531      	bpl.n	802489a <__ssputs_r+0xa0>
 8024836:	4629      	mov	r1, r5
 8024838:	f7ff f95e 	bl	8023af8 <_malloc_r>
 802483c:	4606      	mov	r6, r0
 802483e:	b950      	cbnz	r0, 8024856 <__ssputs_r+0x5c>
 8024840:	230c      	movs	r3, #12
 8024842:	f8ca 3000 	str.w	r3, [sl]
 8024846:	89a3      	ldrh	r3, [r4, #12]
 8024848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802484c:	81a3      	strh	r3, [r4, #12]
 802484e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024856:	6921      	ldr	r1, [r4, #16]
 8024858:	464a      	mov	r2, r9
 802485a:	f7ff f89b 	bl	8023994 <memcpy>
 802485e:	89a3      	ldrh	r3, [r4, #12]
 8024860:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8024864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024868:	81a3      	strh	r3, [r4, #12]
 802486a:	6126      	str	r6, [r4, #16]
 802486c:	6165      	str	r5, [r4, #20]
 802486e:	444e      	add	r6, r9
 8024870:	eba5 0509 	sub.w	r5, r5, r9
 8024874:	6026      	str	r6, [r4, #0]
 8024876:	60a5      	str	r5, [r4, #8]
 8024878:	463e      	mov	r6, r7
 802487a:	42be      	cmp	r6, r7
 802487c:	d900      	bls.n	8024880 <__ssputs_r+0x86>
 802487e:	463e      	mov	r6, r7
 8024880:	6820      	ldr	r0, [r4, #0]
 8024882:	4632      	mov	r2, r6
 8024884:	4641      	mov	r1, r8
 8024886:	f7ff f893 	bl	80239b0 <memmove>
 802488a:	68a3      	ldr	r3, [r4, #8]
 802488c:	1b9b      	subs	r3, r3, r6
 802488e:	60a3      	str	r3, [r4, #8]
 8024890:	6823      	ldr	r3, [r4, #0]
 8024892:	4433      	add	r3, r6
 8024894:	6023      	str	r3, [r4, #0]
 8024896:	2000      	movs	r0, #0
 8024898:	e7db      	b.n	8024852 <__ssputs_r+0x58>
 802489a:	462a      	mov	r2, r5
 802489c:	f7ff ff7e 	bl	802479c <_realloc_r>
 80248a0:	4606      	mov	r6, r0
 80248a2:	2800      	cmp	r0, #0
 80248a4:	d1e1      	bne.n	802486a <__ssputs_r+0x70>
 80248a6:	6921      	ldr	r1, [r4, #16]
 80248a8:	4650      	mov	r0, sl
 80248aa:	f7ff f8b9 	bl	8023a20 <_free_r>
 80248ae:	e7c7      	b.n	8024840 <__ssputs_r+0x46>

080248b0 <_svfiprintf_r>:
 80248b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80248b4:	4698      	mov	r8, r3
 80248b6:	898b      	ldrh	r3, [r1, #12]
 80248b8:	061b      	lsls	r3, r3, #24
 80248ba:	b09d      	sub	sp, #116	; 0x74
 80248bc:	4607      	mov	r7, r0
 80248be:	460d      	mov	r5, r1
 80248c0:	4614      	mov	r4, r2
 80248c2:	d50e      	bpl.n	80248e2 <_svfiprintf_r+0x32>
 80248c4:	690b      	ldr	r3, [r1, #16]
 80248c6:	b963      	cbnz	r3, 80248e2 <_svfiprintf_r+0x32>
 80248c8:	2140      	movs	r1, #64	; 0x40
 80248ca:	f7ff f915 	bl	8023af8 <_malloc_r>
 80248ce:	6028      	str	r0, [r5, #0]
 80248d0:	6128      	str	r0, [r5, #16]
 80248d2:	b920      	cbnz	r0, 80248de <_svfiprintf_r+0x2e>
 80248d4:	230c      	movs	r3, #12
 80248d6:	603b      	str	r3, [r7, #0]
 80248d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80248dc:	e0d1      	b.n	8024a82 <_svfiprintf_r+0x1d2>
 80248de:	2340      	movs	r3, #64	; 0x40
 80248e0:	616b      	str	r3, [r5, #20]
 80248e2:	2300      	movs	r3, #0
 80248e4:	9309      	str	r3, [sp, #36]	; 0x24
 80248e6:	2320      	movs	r3, #32
 80248e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80248ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80248f0:	2330      	movs	r3, #48	; 0x30
 80248f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8024a9c <_svfiprintf_r+0x1ec>
 80248f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80248fa:	f04f 0901 	mov.w	r9, #1
 80248fe:	4623      	mov	r3, r4
 8024900:	469a      	mov	sl, r3
 8024902:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024906:	b10a      	cbz	r2, 802490c <_svfiprintf_r+0x5c>
 8024908:	2a25      	cmp	r2, #37	; 0x25
 802490a:	d1f9      	bne.n	8024900 <_svfiprintf_r+0x50>
 802490c:	ebba 0b04 	subs.w	fp, sl, r4
 8024910:	d00b      	beq.n	802492a <_svfiprintf_r+0x7a>
 8024912:	465b      	mov	r3, fp
 8024914:	4622      	mov	r2, r4
 8024916:	4629      	mov	r1, r5
 8024918:	4638      	mov	r0, r7
 802491a:	f7ff ff6e 	bl	80247fa <__ssputs_r>
 802491e:	3001      	adds	r0, #1
 8024920:	f000 80aa 	beq.w	8024a78 <_svfiprintf_r+0x1c8>
 8024924:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024926:	445a      	add	r2, fp
 8024928:	9209      	str	r2, [sp, #36]	; 0x24
 802492a:	f89a 3000 	ldrb.w	r3, [sl]
 802492e:	2b00      	cmp	r3, #0
 8024930:	f000 80a2 	beq.w	8024a78 <_svfiprintf_r+0x1c8>
 8024934:	2300      	movs	r3, #0
 8024936:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802493a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802493e:	f10a 0a01 	add.w	sl, sl, #1
 8024942:	9304      	str	r3, [sp, #16]
 8024944:	9307      	str	r3, [sp, #28]
 8024946:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802494a:	931a      	str	r3, [sp, #104]	; 0x68
 802494c:	4654      	mov	r4, sl
 802494e:	2205      	movs	r2, #5
 8024950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024954:	4851      	ldr	r0, [pc, #324]	; (8024a9c <_svfiprintf_r+0x1ec>)
 8024956:	f7db fc73 	bl	8000240 <memchr>
 802495a:	9a04      	ldr	r2, [sp, #16]
 802495c:	b9d8      	cbnz	r0, 8024996 <_svfiprintf_r+0xe6>
 802495e:	06d0      	lsls	r0, r2, #27
 8024960:	bf44      	itt	mi
 8024962:	2320      	movmi	r3, #32
 8024964:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024968:	0711      	lsls	r1, r2, #28
 802496a:	bf44      	itt	mi
 802496c:	232b      	movmi	r3, #43	; 0x2b
 802496e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024972:	f89a 3000 	ldrb.w	r3, [sl]
 8024976:	2b2a      	cmp	r3, #42	; 0x2a
 8024978:	d015      	beq.n	80249a6 <_svfiprintf_r+0xf6>
 802497a:	9a07      	ldr	r2, [sp, #28]
 802497c:	4654      	mov	r4, sl
 802497e:	2000      	movs	r0, #0
 8024980:	f04f 0c0a 	mov.w	ip, #10
 8024984:	4621      	mov	r1, r4
 8024986:	f811 3b01 	ldrb.w	r3, [r1], #1
 802498a:	3b30      	subs	r3, #48	; 0x30
 802498c:	2b09      	cmp	r3, #9
 802498e:	d94e      	bls.n	8024a2e <_svfiprintf_r+0x17e>
 8024990:	b1b0      	cbz	r0, 80249c0 <_svfiprintf_r+0x110>
 8024992:	9207      	str	r2, [sp, #28]
 8024994:	e014      	b.n	80249c0 <_svfiprintf_r+0x110>
 8024996:	eba0 0308 	sub.w	r3, r0, r8
 802499a:	fa09 f303 	lsl.w	r3, r9, r3
 802499e:	4313      	orrs	r3, r2
 80249a0:	9304      	str	r3, [sp, #16]
 80249a2:	46a2      	mov	sl, r4
 80249a4:	e7d2      	b.n	802494c <_svfiprintf_r+0x9c>
 80249a6:	9b03      	ldr	r3, [sp, #12]
 80249a8:	1d19      	adds	r1, r3, #4
 80249aa:	681b      	ldr	r3, [r3, #0]
 80249ac:	9103      	str	r1, [sp, #12]
 80249ae:	2b00      	cmp	r3, #0
 80249b0:	bfbb      	ittet	lt
 80249b2:	425b      	neglt	r3, r3
 80249b4:	f042 0202 	orrlt.w	r2, r2, #2
 80249b8:	9307      	strge	r3, [sp, #28]
 80249ba:	9307      	strlt	r3, [sp, #28]
 80249bc:	bfb8      	it	lt
 80249be:	9204      	strlt	r2, [sp, #16]
 80249c0:	7823      	ldrb	r3, [r4, #0]
 80249c2:	2b2e      	cmp	r3, #46	; 0x2e
 80249c4:	d10c      	bne.n	80249e0 <_svfiprintf_r+0x130>
 80249c6:	7863      	ldrb	r3, [r4, #1]
 80249c8:	2b2a      	cmp	r3, #42	; 0x2a
 80249ca:	d135      	bne.n	8024a38 <_svfiprintf_r+0x188>
 80249cc:	9b03      	ldr	r3, [sp, #12]
 80249ce:	1d1a      	adds	r2, r3, #4
 80249d0:	681b      	ldr	r3, [r3, #0]
 80249d2:	9203      	str	r2, [sp, #12]
 80249d4:	2b00      	cmp	r3, #0
 80249d6:	bfb8      	it	lt
 80249d8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80249dc:	3402      	adds	r4, #2
 80249de:	9305      	str	r3, [sp, #20]
 80249e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8024aac <_svfiprintf_r+0x1fc>
 80249e4:	7821      	ldrb	r1, [r4, #0]
 80249e6:	2203      	movs	r2, #3
 80249e8:	4650      	mov	r0, sl
 80249ea:	f7db fc29 	bl	8000240 <memchr>
 80249ee:	b140      	cbz	r0, 8024a02 <_svfiprintf_r+0x152>
 80249f0:	2340      	movs	r3, #64	; 0x40
 80249f2:	eba0 000a 	sub.w	r0, r0, sl
 80249f6:	fa03 f000 	lsl.w	r0, r3, r0
 80249fa:	9b04      	ldr	r3, [sp, #16]
 80249fc:	4303      	orrs	r3, r0
 80249fe:	3401      	adds	r4, #1
 8024a00:	9304      	str	r3, [sp, #16]
 8024a02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024a06:	4826      	ldr	r0, [pc, #152]	; (8024aa0 <_svfiprintf_r+0x1f0>)
 8024a08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8024a0c:	2206      	movs	r2, #6
 8024a0e:	f7db fc17 	bl	8000240 <memchr>
 8024a12:	2800      	cmp	r0, #0
 8024a14:	d038      	beq.n	8024a88 <_svfiprintf_r+0x1d8>
 8024a16:	4b23      	ldr	r3, [pc, #140]	; (8024aa4 <_svfiprintf_r+0x1f4>)
 8024a18:	bb1b      	cbnz	r3, 8024a62 <_svfiprintf_r+0x1b2>
 8024a1a:	9b03      	ldr	r3, [sp, #12]
 8024a1c:	3307      	adds	r3, #7
 8024a1e:	f023 0307 	bic.w	r3, r3, #7
 8024a22:	3308      	adds	r3, #8
 8024a24:	9303      	str	r3, [sp, #12]
 8024a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024a28:	4433      	add	r3, r6
 8024a2a:	9309      	str	r3, [sp, #36]	; 0x24
 8024a2c:	e767      	b.n	80248fe <_svfiprintf_r+0x4e>
 8024a2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8024a32:	460c      	mov	r4, r1
 8024a34:	2001      	movs	r0, #1
 8024a36:	e7a5      	b.n	8024984 <_svfiprintf_r+0xd4>
 8024a38:	2300      	movs	r3, #0
 8024a3a:	3401      	adds	r4, #1
 8024a3c:	9305      	str	r3, [sp, #20]
 8024a3e:	4619      	mov	r1, r3
 8024a40:	f04f 0c0a 	mov.w	ip, #10
 8024a44:	4620      	mov	r0, r4
 8024a46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024a4a:	3a30      	subs	r2, #48	; 0x30
 8024a4c:	2a09      	cmp	r2, #9
 8024a4e:	d903      	bls.n	8024a58 <_svfiprintf_r+0x1a8>
 8024a50:	2b00      	cmp	r3, #0
 8024a52:	d0c5      	beq.n	80249e0 <_svfiprintf_r+0x130>
 8024a54:	9105      	str	r1, [sp, #20]
 8024a56:	e7c3      	b.n	80249e0 <_svfiprintf_r+0x130>
 8024a58:	fb0c 2101 	mla	r1, ip, r1, r2
 8024a5c:	4604      	mov	r4, r0
 8024a5e:	2301      	movs	r3, #1
 8024a60:	e7f0      	b.n	8024a44 <_svfiprintf_r+0x194>
 8024a62:	ab03      	add	r3, sp, #12
 8024a64:	9300      	str	r3, [sp, #0]
 8024a66:	462a      	mov	r2, r5
 8024a68:	4b0f      	ldr	r3, [pc, #60]	; (8024aa8 <_svfiprintf_r+0x1f8>)
 8024a6a:	a904      	add	r1, sp, #16
 8024a6c:	4638      	mov	r0, r7
 8024a6e:	f3af 8000 	nop.w
 8024a72:	1c42      	adds	r2, r0, #1
 8024a74:	4606      	mov	r6, r0
 8024a76:	d1d6      	bne.n	8024a26 <_svfiprintf_r+0x176>
 8024a78:	89ab      	ldrh	r3, [r5, #12]
 8024a7a:	065b      	lsls	r3, r3, #25
 8024a7c:	f53f af2c 	bmi.w	80248d8 <_svfiprintf_r+0x28>
 8024a80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024a82:	b01d      	add	sp, #116	; 0x74
 8024a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024a88:	ab03      	add	r3, sp, #12
 8024a8a:	9300      	str	r3, [sp, #0]
 8024a8c:	462a      	mov	r2, r5
 8024a8e:	4b06      	ldr	r3, [pc, #24]	; (8024aa8 <_svfiprintf_r+0x1f8>)
 8024a90:	a904      	add	r1, sp, #16
 8024a92:	4638      	mov	r0, r7
 8024a94:	f000 f9d4 	bl	8024e40 <_printf_i>
 8024a98:	e7eb      	b.n	8024a72 <_svfiprintf_r+0x1c2>
 8024a9a:	bf00      	nop
 8024a9c:	08029cb2 	.word	0x08029cb2
 8024aa0:	08029cbc 	.word	0x08029cbc
 8024aa4:	00000000 	.word	0x00000000
 8024aa8:	080247fb 	.word	0x080247fb
 8024aac:	08029cb8 	.word	0x08029cb8

08024ab0 <__sfputc_r>:
 8024ab0:	6893      	ldr	r3, [r2, #8]
 8024ab2:	3b01      	subs	r3, #1
 8024ab4:	2b00      	cmp	r3, #0
 8024ab6:	b410      	push	{r4}
 8024ab8:	6093      	str	r3, [r2, #8]
 8024aba:	da08      	bge.n	8024ace <__sfputc_r+0x1e>
 8024abc:	6994      	ldr	r4, [r2, #24]
 8024abe:	42a3      	cmp	r3, r4
 8024ac0:	db01      	blt.n	8024ac6 <__sfputc_r+0x16>
 8024ac2:	290a      	cmp	r1, #10
 8024ac4:	d103      	bne.n	8024ace <__sfputc_r+0x1e>
 8024ac6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024aca:	f7ff bbfd 	b.w	80242c8 <__swbuf_r>
 8024ace:	6813      	ldr	r3, [r2, #0]
 8024ad0:	1c58      	adds	r0, r3, #1
 8024ad2:	6010      	str	r0, [r2, #0]
 8024ad4:	7019      	strb	r1, [r3, #0]
 8024ad6:	4608      	mov	r0, r1
 8024ad8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024adc:	4770      	bx	lr

08024ade <__sfputs_r>:
 8024ade:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024ae0:	4606      	mov	r6, r0
 8024ae2:	460f      	mov	r7, r1
 8024ae4:	4614      	mov	r4, r2
 8024ae6:	18d5      	adds	r5, r2, r3
 8024ae8:	42ac      	cmp	r4, r5
 8024aea:	d101      	bne.n	8024af0 <__sfputs_r+0x12>
 8024aec:	2000      	movs	r0, #0
 8024aee:	e007      	b.n	8024b00 <__sfputs_r+0x22>
 8024af0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024af4:	463a      	mov	r2, r7
 8024af6:	4630      	mov	r0, r6
 8024af8:	f7ff ffda 	bl	8024ab0 <__sfputc_r>
 8024afc:	1c43      	adds	r3, r0, #1
 8024afe:	d1f3      	bne.n	8024ae8 <__sfputs_r+0xa>
 8024b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08024b04 <_vfiprintf_r>:
 8024b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024b08:	460d      	mov	r5, r1
 8024b0a:	b09d      	sub	sp, #116	; 0x74
 8024b0c:	4614      	mov	r4, r2
 8024b0e:	4698      	mov	r8, r3
 8024b10:	4606      	mov	r6, r0
 8024b12:	b118      	cbz	r0, 8024b1c <_vfiprintf_r+0x18>
 8024b14:	6983      	ldr	r3, [r0, #24]
 8024b16:	b90b      	cbnz	r3, 8024b1c <_vfiprintf_r+0x18>
 8024b18:	f7fe fe0e 	bl	8023738 <__sinit>
 8024b1c:	4b89      	ldr	r3, [pc, #548]	; (8024d44 <_vfiprintf_r+0x240>)
 8024b1e:	429d      	cmp	r5, r3
 8024b20:	d11b      	bne.n	8024b5a <_vfiprintf_r+0x56>
 8024b22:	6875      	ldr	r5, [r6, #4]
 8024b24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024b26:	07d9      	lsls	r1, r3, #31
 8024b28:	d405      	bmi.n	8024b36 <_vfiprintf_r+0x32>
 8024b2a:	89ab      	ldrh	r3, [r5, #12]
 8024b2c:	059a      	lsls	r2, r3, #22
 8024b2e:	d402      	bmi.n	8024b36 <_vfiprintf_r+0x32>
 8024b30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8024b32:	f7fe ff0c 	bl	802394e <__retarget_lock_acquire_recursive>
 8024b36:	89ab      	ldrh	r3, [r5, #12]
 8024b38:	071b      	lsls	r3, r3, #28
 8024b3a:	d501      	bpl.n	8024b40 <_vfiprintf_r+0x3c>
 8024b3c:	692b      	ldr	r3, [r5, #16]
 8024b3e:	b9eb      	cbnz	r3, 8024b7c <_vfiprintf_r+0x78>
 8024b40:	4629      	mov	r1, r5
 8024b42:	4630      	mov	r0, r6
 8024b44:	f7ff fc24 	bl	8024390 <__swsetup_r>
 8024b48:	b1c0      	cbz	r0, 8024b7c <_vfiprintf_r+0x78>
 8024b4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024b4c:	07dc      	lsls	r4, r3, #31
 8024b4e:	d50e      	bpl.n	8024b6e <_vfiprintf_r+0x6a>
 8024b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024b54:	b01d      	add	sp, #116	; 0x74
 8024b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024b5a:	4b7b      	ldr	r3, [pc, #492]	; (8024d48 <_vfiprintf_r+0x244>)
 8024b5c:	429d      	cmp	r5, r3
 8024b5e:	d101      	bne.n	8024b64 <_vfiprintf_r+0x60>
 8024b60:	68b5      	ldr	r5, [r6, #8]
 8024b62:	e7df      	b.n	8024b24 <_vfiprintf_r+0x20>
 8024b64:	4b79      	ldr	r3, [pc, #484]	; (8024d4c <_vfiprintf_r+0x248>)
 8024b66:	429d      	cmp	r5, r3
 8024b68:	bf08      	it	eq
 8024b6a:	68f5      	ldreq	r5, [r6, #12]
 8024b6c:	e7da      	b.n	8024b24 <_vfiprintf_r+0x20>
 8024b6e:	89ab      	ldrh	r3, [r5, #12]
 8024b70:	0598      	lsls	r0, r3, #22
 8024b72:	d4ed      	bmi.n	8024b50 <_vfiprintf_r+0x4c>
 8024b74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8024b76:	f7fe feeb 	bl	8023950 <__retarget_lock_release_recursive>
 8024b7a:	e7e9      	b.n	8024b50 <_vfiprintf_r+0x4c>
 8024b7c:	2300      	movs	r3, #0
 8024b7e:	9309      	str	r3, [sp, #36]	; 0x24
 8024b80:	2320      	movs	r3, #32
 8024b82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8024b86:	f8cd 800c 	str.w	r8, [sp, #12]
 8024b8a:	2330      	movs	r3, #48	; 0x30
 8024b8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8024d50 <_vfiprintf_r+0x24c>
 8024b90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8024b94:	f04f 0901 	mov.w	r9, #1
 8024b98:	4623      	mov	r3, r4
 8024b9a:	469a      	mov	sl, r3
 8024b9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024ba0:	b10a      	cbz	r2, 8024ba6 <_vfiprintf_r+0xa2>
 8024ba2:	2a25      	cmp	r2, #37	; 0x25
 8024ba4:	d1f9      	bne.n	8024b9a <_vfiprintf_r+0x96>
 8024ba6:	ebba 0b04 	subs.w	fp, sl, r4
 8024baa:	d00b      	beq.n	8024bc4 <_vfiprintf_r+0xc0>
 8024bac:	465b      	mov	r3, fp
 8024bae:	4622      	mov	r2, r4
 8024bb0:	4629      	mov	r1, r5
 8024bb2:	4630      	mov	r0, r6
 8024bb4:	f7ff ff93 	bl	8024ade <__sfputs_r>
 8024bb8:	3001      	adds	r0, #1
 8024bba:	f000 80aa 	beq.w	8024d12 <_vfiprintf_r+0x20e>
 8024bbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024bc0:	445a      	add	r2, fp
 8024bc2:	9209      	str	r2, [sp, #36]	; 0x24
 8024bc4:	f89a 3000 	ldrb.w	r3, [sl]
 8024bc8:	2b00      	cmp	r3, #0
 8024bca:	f000 80a2 	beq.w	8024d12 <_vfiprintf_r+0x20e>
 8024bce:	2300      	movs	r3, #0
 8024bd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024bd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024bd8:	f10a 0a01 	add.w	sl, sl, #1
 8024bdc:	9304      	str	r3, [sp, #16]
 8024bde:	9307      	str	r3, [sp, #28]
 8024be0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8024be4:	931a      	str	r3, [sp, #104]	; 0x68
 8024be6:	4654      	mov	r4, sl
 8024be8:	2205      	movs	r2, #5
 8024bea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024bee:	4858      	ldr	r0, [pc, #352]	; (8024d50 <_vfiprintf_r+0x24c>)
 8024bf0:	f7db fb26 	bl	8000240 <memchr>
 8024bf4:	9a04      	ldr	r2, [sp, #16]
 8024bf6:	b9d8      	cbnz	r0, 8024c30 <_vfiprintf_r+0x12c>
 8024bf8:	06d1      	lsls	r1, r2, #27
 8024bfa:	bf44      	itt	mi
 8024bfc:	2320      	movmi	r3, #32
 8024bfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024c02:	0713      	lsls	r3, r2, #28
 8024c04:	bf44      	itt	mi
 8024c06:	232b      	movmi	r3, #43	; 0x2b
 8024c08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024c0c:	f89a 3000 	ldrb.w	r3, [sl]
 8024c10:	2b2a      	cmp	r3, #42	; 0x2a
 8024c12:	d015      	beq.n	8024c40 <_vfiprintf_r+0x13c>
 8024c14:	9a07      	ldr	r2, [sp, #28]
 8024c16:	4654      	mov	r4, sl
 8024c18:	2000      	movs	r0, #0
 8024c1a:	f04f 0c0a 	mov.w	ip, #10
 8024c1e:	4621      	mov	r1, r4
 8024c20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024c24:	3b30      	subs	r3, #48	; 0x30
 8024c26:	2b09      	cmp	r3, #9
 8024c28:	d94e      	bls.n	8024cc8 <_vfiprintf_r+0x1c4>
 8024c2a:	b1b0      	cbz	r0, 8024c5a <_vfiprintf_r+0x156>
 8024c2c:	9207      	str	r2, [sp, #28]
 8024c2e:	e014      	b.n	8024c5a <_vfiprintf_r+0x156>
 8024c30:	eba0 0308 	sub.w	r3, r0, r8
 8024c34:	fa09 f303 	lsl.w	r3, r9, r3
 8024c38:	4313      	orrs	r3, r2
 8024c3a:	9304      	str	r3, [sp, #16]
 8024c3c:	46a2      	mov	sl, r4
 8024c3e:	e7d2      	b.n	8024be6 <_vfiprintf_r+0xe2>
 8024c40:	9b03      	ldr	r3, [sp, #12]
 8024c42:	1d19      	adds	r1, r3, #4
 8024c44:	681b      	ldr	r3, [r3, #0]
 8024c46:	9103      	str	r1, [sp, #12]
 8024c48:	2b00      	cmp	r3, #0
 8024c4a:	bfbb      	ittet	lt
 8024c4c:	425b      	neglt	r3, r3
 8024c4e:	f042 0202 	orrlt.w	r2, r2, #2
 8024c52:	9307      	strge	r3, [sp, #28]
 8024c54:	9307      	strlt	r3, [sp, #28]
 8024c56:	bfb8      	it	lt
 8024c58:	9204      	strlt	r2, [sp, #16]
 8024c5a:	7823      	ldrb	r3, [r4, #0]
 8024c5c:	2b2e      	cmp	r3, #46	; 0x2e
 8024c5e:	d10c      	bne.n	8024c7a <_vfiprintf_r+0x176>
 8024c60:	7863      	ldrb	r3, [r4, #1]
 8024c62:	2b2a      	cmp	r3, #42	; 0x2a
 8024c64:	d135      	bne.n	8024cd2 <_vfiprintf_r+0x1ce>
 8024c66:	9b03      	ldr	r3, [sp, #12]
 8024c68:	1d1a      	adds	r2, r3, #4
 8024c6a:	681b      	ldr	r3, [r3, #0]
 8024c6c:	9203      	str	r2, [sp, #12]
 8024c6e:	2b00      	cmp	r3, #0
 8024c70:	bfb8      	it	lt
 8024c72:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8024c76:	3402      	adds	r4, #2
 8024c78:	9305      	str	r3, [sp, #20]
 8024c7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8024d60 <_vfiprintf_r+0x25c>
 8024c7e:	7821      	ldrb	r1, [r4, #0]
 8024c80:	2203      	movs	r2, #3
 8024c82:	4650      	mov	r0, sl
 8024c84:	f7db fadc 	bl	8000240 <memchr>
 8024c88:	b140      	cbz	r0, 8024c9c <_vfiprintf_r+0x198>
 8024c8a:	2340      	movs	r3, #64	; 0x40
 8024c8c:	eba0 000a 	sub.w	r0, r0, sl
 8024c90:	fa03 f000 	lsl.w	r0, r3, r0
 8024c94:	9b04      	ldr	r3, [sp, #16]
 8024c96:	4303      	orrs	r3, r0
 8024c98:	3401      	adds	r4, #1
 8024c9a:	9304      	str	r3, [sp, #16]
 8024c9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024ca0:	482c      	ldr	r0, [pc, #176]	; (8024d54 <_vfiprintf_r+0x250>)
 8024ca2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8024ca6:	2206      	movs	r2, #6
 8024ca8:	f7db faca 	bl	8000240 <memchr>
 8024cac:	2800      	cmp	r0, #0
 8024cae:	d03f      	beq.n	8024d30 <_vfiprintf_r+0x22c>
 8024cb0:	4b29      	ldr	r3, [pc, #164]	; (8024d58 <_vfiprintf_r+0x254>)
 8024cb2:	bb1b      	cbnz	r3, 8024cfc <_vfiprintf_r+0x1f8>
 8024cb4:	9b03      	ldr	r3, [sp, #12]
 8024cb6:	3307      	adds	r3, #7
 8024cb8:	f023 0307 	bic.w	r3, r3, #7
 8024cbc:	3308      	adds	r3, #8
 8024cbe:	9303      	str	r3, [sp, #12]
 8024cc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024cc2:	443b      	add	r3, r7
 8024cc4:	9309      	str	r3, [sp, #36]	; 0x24
 8024cc6:	e767      	b.n	8024b98 <_vfiprintf_r+0x94>
 8024cc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8024ccc:	460c      	mov	r4, r1
 8024cce:	2001      	movs	r0, #1
 8024cd0:	e7a5      	b.n	8024c1e <_vfiprintf_r+0x11a>
 8024cd2:	2300      	movs	r3, #0
 8024cd4:	3401      	adds	r4, #1
 8024cd6:	9305      	str	r3, [sp, #20]
 8024cd8:	4619      	mov	r1, r3
 8024cda:	f04f 0c0a 	mov.w	ip, #10
 8024cde:	4620      	mov	r0, r4
 8024ce0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024ce4:	3a30      	subs	r2, #48	; 0x30
 8024ce6:	2a09      	cmp	r2, #9
 8024ce8:	d903      	bls.n	8024cf2 <_vfiprintf_r+0x1ee>
 8024cea:	2b00      	cmp	r3, #0
 8024cec:	d0c5      	beq.n	8024c7a <_vfiprintf_r+0x176>
 8024cee:	9105      	str	r1, [sp, #20]
 8024cf0:	e7c3      	b.n	8024c7a <_vfiprintf_r+0x176>
 8024cf2:	fb0c 2101 	mla	r1, ip, r1, r2
 8024cf6:	4604      	mov	r4, r0
 8024cf8:	2301      	movs	r3, #1
 8024cfa:	e7f0      	b.n	8024cde <_vfiprintf_r+0x1da>
 8024cfc:	ab03      	add	r3, sp, #12
 8024cfe:	9300      	str	r3, [sp, #0]
 8024d00:	462a      	mov	r2, r5
 8024d02:	4b16      	ldr	r3, [pc, #88]	; (8024d5c <_vfiprintf_r+0x258>)
 8024d04:	a904      	add	r1, sp, #16
 8024d06:	4630      	mov	r0, r6
 8024d08:	f3af 8000 	nop.w
 8024d0c:	4607      	mov	r7, r0
 8024d0e:	1c78      	adds	r0, r7, #1
 8024d10:	d1d6      	bne.n	8024cc0 <_vfiprintf_r+0x1bc>
 8024d12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024d14:	07d9      	lsls	r1, r3, #31
 8024d16:	d405      	bmi.n	8024d24 <_vfiprintf_r+0x220>
 8024d18:	89ab      	ldrh	r3, [r5, #12]
 8024d1a:	059a      	lsls	r2, r3, #22
 8024d1c:	d402      	bmi.n	8024d24 <_vfiprintf_r+0x220>
 8024d1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8024d20:	f7fe fe16 	bl	8023950 <__retarget_lock_release_recursive>
 8024d24:	89ab      	ldrh	r3, [r5, #12]
 8024d26:	065b      	lsls	r3, r3, #25
 8024d28:	f53f af12 	bmi.w	8024b50 <_vfiprintf_r+0x4c>
 8024d2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024d2e:	e711      	b.n	8024b54 <_vfiprintf_r+0x50>
 8024d30:	ab03      	add	r3, sp, #12
 8024d32:	9300      	str	r3, [sp, #0]
 8024d34:	462a      	mov	r2, r5
 8024d36:	4b09      	ldr	r3, [pc, #36]	; (8024d5c <_vfiprintf_r+0x258>)
 8024d38:	a904      	add	r1, sp, #16
 8024d3a:	4630      	mov	r0, r6
 8024d3c:	f000 f880 	bl	8024e40 <_printf_i>
 8024d40:	e7e4      	b.n	8024d0c <_vfiprintf_r+0x208>
 8024d42:	bf00      	nop
 8024d44:	08029bc0 	.word	0x08029bc0
 8024d48:	08029be0 	.word	0x08029be0
 8024d4c:	08029ba0 	.word	0x08029ba0
 8024d50:	08029cb2 	.word	0x08029cb2
 8024d54:	08029cbc 	.word	0x08029cbc
 8024d58:	00000000 	.word	0x00000000
 8024d5c:	08024adf 	.word	0x08024adf
 8024d60:	08029cb8 	.word	0x08029cb8

08024d64 <_printf_common>:
 8024d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024d68:	4616      	mov	r6, r2
 8024d6a:	4699      	mov	r9, r3
 8024d6c:	688a      	ldr	r2, [r1, #8]
 8024d6e:	690b      	ldr	r3, [r1, #16]
 8024d70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8024d74:	4293      	cmp	r3, r2
 8024d76:	bfb8      	it	lt
 8024d78:	4613      	movlt	r3, r2
 8024d7a:	6033      	str	r3, [r6, #0]
 8024d7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8024d80:	4607      	mov	r7, r0
 8024d82:	460c      	mov	r4, r1
 8024d84:	b10a      	cbz	r2, 8024d8a <_printf_common+0x26>
 8024d86:	3301      	adds	r3, #1
 8024d88:	6033      	str	r3, [r6, #0]
 8024d8a:	6823      	ldr	r3, [r4, #0]
 8024d8c:	0699      	lsls	r1, r3, #26
 8024d8e:	bf42      	ittt	mi
 8024d90:	6833      	ldrmi	r3, [r6, #0]
 8024d92:	3302      	addmi	r3, #2
 8024d94:	6033      	strmi	r3, [r6, #0]
 8024d96:	6825      	ldr	r5, [r4, #0]
 8024d98:	f015 0506 	ands.w	r5, r5, #6
 8024d9c:	d106      	bne.n	8024dac <_printf_common+0x48>
 8024d9e:	f104 0a19 	add.w	sl, r4, #25
 8024da2:	68e3      	ldr	r3, [r4, #12]
 8024da4:	6832      	ldr	r2, [r6, #0]
 8024da6:	1a9b      	subs	r3, r3, r2
 8024da8:	42ab      	cmp	r3, r5
 8024daa:	dc26      	bgt.n	8024dfa <_printf_common+0x96>
 8024dac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8024db0:	1e13      	subs	r3, r2, #0
 8024db2:	6822      	ldr	r2, [r4, #0]
 8024db4:	bf18      	it	ne
 8024db6:	2301      	movne	r3, #1
 8024db8:	0692      	lsls	r2, r2, #26
 8024dba:	d42b      	bmi.n	8024e14 <_printf_common+0xb0>
 8024dbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8024dc0:	4649      	mov	r1, r9
 8024dc2:	4638      	mov	r0, r7
 8024dc4:	47c0      	blx	r8
 8024dc6:	3001      	adds	r0, #1
 8024dc8:	d01e      	beq.n	8024e08 <_printf_common+0xa4>
 8024dca:	6823      	ldr	r3, [r4, #0]
 8024dcc:	68e5      	ldr	r5, [r4, #12]
 8024dce:	6832      	ldr	r2, [r6, #0]
 8024dd0:	f003 0306 	and.w	r3, r3, #6
 8024dd4:	2b04      	cmp	r3, #4
 8024dd6:	bf08      	it	eq
 8024dd8:	1aad      	subeq	r5, r5, r2
 8024dda:	68a3      	ldr	r3, [r4, #8]
 8024ddc:	6922      	ldr	r2, [r4, #16]
 8024dde:	bf0c      	ite	eq
 8024de0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8024de4:	2500      	movne	r5, #0
 8024de6:	4293      	cmp	r3, r2
 8024de8:	bfc4      	itt	gt
 8024dea:	1a9b      	subgt	r3, r3, r2
 8024dec:	18ed      	addgt	r5, r5, r3
 8024dee:	2600      	movs	r6, #0
 8024df0:	341a      	adds	r4, #26
 8024df2:	42b5      	cmp	r5, r6
 8024df4:	d11a      	bne.n	8024e2c <_printf_common+0xc8>
 8024df6:	2000      	movs	r0, #0
 8024df8:	e008      	b.n	8024e0c <_printf_common+0xa8>
 8024dfa:	2301      	movs	r3, #1
 8024dfc:	4652      	mov	r2, sl
 8024dfe:	4649      	mov	r1, r9
 8024e00:	4638      	mov	r0, r7
 8024e02:	47c0      	blx	r8
 8024e04:	3001      	adds	r0, #1
 8024e06:	d103      	bne.n	8024e10 <_printf_common+0xac>
 8024e08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024e10:	3501      	adds	r5, #1
 8024e12:	e7c6      	b.n	8024da2 <_printf_common+0x3e>
 8024e14:	18e1      	adds	r1, r4, r3
 8024e16:	1c5a      	adds	r2, r3, #1
 8024e18:	2030      	movs	r0, #48	; 0x30
 8024e1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8024e1e:	4422      	add	r2, r4
 8024e20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8024e24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8024e28:	3302      	adds	r3, #2
 8024e2a:	e7c7      	b.n	8024dbc <_printf_common+0x58>
 8024e2c:	2301      	movs	r3, #1
 8024e2e:	4622      	mov	r2, r4
 8024e30:	4649      	mov	r1, r9
 8024e32:	4638      	mov	r0, r7
 8024e34:	47c0      	blx	r8
 8024e36:	3001      	adds	r0, #1
 8024e38:	d0e6      	beq.n	8024e08 <_printf_common+0xa4>
 8024e3a:	3601      	adds	r6, #1
 8024e3c:	e7d9      	b.n	8024df2 <_printf_common+0x8e>
	...

08024e40 <_printf_i>:
 8024e40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8024e44:	7e0f      	ldrb	r7, [r1, #24]
 8024e46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024e48:	2f78      	cmp	r7, #120	; 0x78
 8024e4a:	4691      	mov	r9, r2
 8024e4c:	4680      	mov	r8, r0
 8024e4e:	460c      	mov	r4, r1
 8024e50:	469a      	mov	sl, r3
 8024e52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8024e56:	d807      	bhi.n	8024e68 <_printf_i+0x28>
 8024e58:	2f62      	cmp	r7, #98	; 0x62
 8024e5a:	d80a      	bhi.n	8024e72 <_printf_i+0x32>
 8024e5c:	2f00      	cmp	r7, #0
 8024e5e:	f000 80d8 	beq.w	8025012 <_printf_i+0x1d2>
 8024e62:	2f58      	cmp	r7, #88	; 0x58
 8024e64:	f000 80a3 	beq.w	8024fae <_printf_i+0x16e>
 8024e68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8024e6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8024e70:	e03a      	b.n	8024ee8 <_printf_i+0xa8>
 8024e72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8024e76:	2b15      	cmp	r3, #21
 8024e78:	d8f6      	bhi.n	8024e68 <_printf_i+0x28>
 8024e7a:	a101      	add	r1, pc, #4	; (adr r1, 8024e80 <_printf_i+0x40>)
 8024e7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8024e80:	08024ed9 	.word	0x08024ed9
 8024e84:	08024eed 	.word	0x08024eed
 8024e88:	08024e69 	.word	0x08024e69
 8024e8c:	08024e69 	.word	0x08024e69
 8024e90:	08024e69 	.word	0x08024e69
 8024e94:	08024e69 	.word	0x08024e69
 8024e98:	08024eed 	.word	0x08024eed
 8024e9c:	08024e69 	.word	0x08024e69
 8024ea0:	08024e69 	.word	0x08024e69
 8024ea4:	08024e69 	.word	0x08024e69
 8024ea8:	08024e69 	.word	0x08024e69
 8024eac:	08024ff9 	.word	0x08024ff9
 8024eb0:	08024f1d 	.word	0x08024f1d
 8024eb4:	08024fdb 	.word	0x08024fdb
 8024eb8:	08024e69 	.word	0x08024e69
 8024ebc:	08024e69 	.word	0x08024e69
 8024ec0:	0802501b 	.word	0x0802501b
 8024ec4:	08024e69 	.word	0x08024e69
 8024ec8:	08024f1d 	.word	0x08024f1d
 8024ecc:	08024e69 	.word	0x08024e69
 8024ed0:	08024e69 	.word	0x08024e69
 8024ed4:	08024fe3 	.word	0x08024fe3
 8024ed8:	682b      	ldr	r3, [r5, #0]
 8024eda:	1d1a      	adds	r2, r3, #4
 8024edc:	681b      	ldr	r3, [r3, #0]
 8024ede:	602a      	str	r2, [r5, #0]
 8024ee0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8024ee4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8024ee8:	2301      	movs	r3, #1
 8024eea:	e0a3      	b.n	8025034 <_printf_i+0x1f4>
 8024eec:	6820      	ldr	r0, [r4, #0]
 8024eee:	6829      	ldr	r1, [r5, #0]
 8024ef0:	0606      	lsls	r6, r0, #24
 8024ef2:	f101 0304 	add.w	r3, r1, #4
 8024ef6:	d50a      	bpl.n	8024f0e <_printf_i+0xce>
 8024ef8:	680e      	ldr	r6, [r1, #0]
 8024efa:	602b      	str	r3, [r5, #0]
 8024efc:	2e00      	cmp	r6, #0
 8024efe:	da03      	bge.n	8024f08 <_printf_i+0xc8>
 8024f00:	232d      	movs	r3, #45	; 0x2d
 8024f02:	4276      	negs	r6, r6
 8024f04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024f08:	485e      	ldr	r0, [pc, #376]	; (8025084 <_printf_i+0x244>)
 8024f0a:	230a      	movs	r3, #10
 8024f0c:	e019      	b.n	8024f42 <_printf_i+0x102>
 8024f0e:	680e      	ldr	r6, [r1, #0]
 8024f10:	602b      	str	r3, [r5, #0]
 8024f12:	f010 0f40 	tst.w	r0, #64	; 0x40
 8024f16:	bf18      	it	ne
 8024f18:	b236      	sxthne	r6, r6
 8024f1a:	e7ef      	b.n	8024efc <_printf_i+0xbc>
 8024f1c:	682b      	ldr	r3, [r5, #0]
 8024f1e:	6820      	ldr	r0, [r4, #0]
 8024f20:	1d19      	adds	r1, r3, #4
 8024f22:	6029      	str	r1, [r5, #0]
 8024f24:	0601      	lsls	r1, r0, #24
 8024f26:	d501      	bpl.n	8024f2c <_printf_i+0xec>
 8024f28:	681e      	ldr	r6, [r3, #0]
 8024f2a:	e002      	b.n	8024f32 <_printf_i+0xf2>
 8024f2c:	0646      	lsls	r6, r0, #25
 8024f2e:	d5fb      	bpl.n	8024f28 <_printf_i+0xe8>
 8024f30:	881e      	ldrh	r6, [r3, #0]
 8024f32:	4854      	ldr	r0, [pc, #336]	; (8025084 <_printf_i+0x244>)
 8024f34:	2f6f      	cmp	r7, #111	; 0x6f
 8024f36:	bf0c      	ite	eq
 8024f38:	2308      	moveq	r3, #8
 8024f3a:	230a      	movne	r3, #10
 8024f3c:	2100      	movs	r1, #0
 8024f3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8024f42:	6865      	ldr	r5, [r4, #4]
 8024f44:	60a5      	str	r5, [r4, #8]
 8024f46:	2d00      	cmp	r5, #0
 8024f48:	bfa2      	ittt	ge
 8024f4a:	6821      	ldrge	r1, [r4, #0]
 8024f4c:	f021 0104 	bicge.w	r1, r1, #4
 8024f50:	6021      	strge	r1, [r4, #0]
 8024f52:	b90e      	cbnz	r6, 8024f58 <_printf_i+0x118>
 8024f54:	2d00      	cmp	r5, #0
 8024f56:	d04d      	beq.n	8024ff4 <_printf_i+0x1b4>
 8024f58:	4615      	mov	r5, r2
 8024f5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8024f5e:	fb03 6711 	mls	r7, r3, r1, r6
 8024f62:	5dc7      	ldrb	r7, [r0, r7]
 8024f64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8024f68:	4637      	mov	r7, r6
 8024f6a:	42bb      	cmp	r3, r7
 8024f6c:	460e      	mov	r6, r1
 8024f6e:	d9f4      	bls.n	8024f5a <_printf_i+0x11a>
 8024f70:	2b08      	cmp	r3, #8
 8024f72:	d10b      	bne.n	8024f8c <_printf_i+0x14c>
 8024f74:	6823      	ldr	r3, [r4, #0]
 8024f76:	07de      	lsls	r6, r3, #31
 8024f78:	d508      	bpl.n	8024f8c <_printf_i+0x14c>
 8024f7a:	6923      	ldr	r3, [r4, #16]
 8024f7c:	6861      	ldr	r1, [r4, #4]
 8024f7e:	4299      	cmp	r1, r3
 8024f80:	bfde      	ittt	le
 8024f82:	2330      	movle	r3, #48	; 0x30
 8024f84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8024f88:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8024f8c:	1b52      	subs	r2, r2, r5
 8024f8e:	6122      	str	r2, [r4, #16]
 8024f90:	f8cd a000 	str.w	sl, [sp]
 8024f94:	464b      	mov	r3, r9
 8024f96:	aa03      	add	r2, sp, #12
 8024f98:	4621      	mov	r1, r4
 8024f9a:	4640      	mov	r0, r8
 8024f9c:	f7ff fee2 	bl	8024d64 <_printf_common>
 8024fa0:	3001      	adds	r0, #1
 8024fa2:	d14c      	bne.n	802503e <_printf_i+0x1fe>
 8024fa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024fa8:	b004      	add	sp, #16
 8024faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024fae:	4835      	ldr	r0, [pc, #212]	; (8025084 <_printf_i+0x244>)
 8024fb0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8024fb4:	6829      	ldr	r1, [r5, #0]
 8024fb6:	6823      	ldr	r3, [r4, #0]
 8024fb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8024fbc:	6029      	str	r1, [r5, #0]
 8024fbe:	061d      	lsls	r5, r3, #24
 8024fc0:	d514      	bpl.n	8024fec <_printf_i+0x1ac>
 8024fc2:	07df      	lsls	r7, r3, #31
 8024fc4:	bf44      	itt	mi
 8024fc6:	f043 0320 	orrmi.w	r3, r3, #32
 8024fca:	6023      	strmi	r3, [r4, #0]
 8024fcc:	b91e      	cbnz	r6, 8024fd6 <_printf_i+0x196>
 8024fce:	6823      	ldr	r3, [r4, #0]
 8024fd0:	f023 0320 	bic.w	r3, r3, #32
 8024fd4:	6023      	str	r3, [r4, #0]
 8024fd6:	2310      	movs	r3, #16
 8024fd8:	e7b0      	b.n	8024f3c <_printf_i+0xfc>
 8024fda:	6823      	ldr	r3, [r4, #0]
 8024fdc:	f043 0320 	orr.w	r3, r3, #32
 8024fe0:	6023      	str	r3, [r4, #0]
 8024fe2:	2378      	movs	r3, #120	; 0x78
 8024fe4:	4828      	ldr	r0, [pc, #160]	; (8025088 <_printf_i+0x248>)
 8024fe6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8024fea:	e7e3      	b.n	8024fb4 <_printf_i+0x174>
 8024fec:	0659      	lsls	r1, r3, #25
 8024fee:	bf48      	it	mi
 8024ff0:	b2b6      	uxthmi	r6, r6
 8024ff2:	e7e6      	b.n	8024fc2 <_printf_i+0x182>
 8024ff4:	4615      	mov	r5, r2
 8024ff6:	e7bb      	b.n	8024f70 <_printf_i+0x130>
 8024ff8:	682b      	ldr	r3, [r5, #0]
 8024ffa:	6826      	ldr	r6, [r4, #0]
 8024ffc:	6961      	ldr	r1, [r4, #20]
 8024ffe:	1d18      	adds	r0, r3, #4
 8025000:	6028      	str	r0, [r5, #0]
 8025002:	0635      	lsls	r5, r6, #24
 8025004:	681b      	ldr	r3, [r3, #0]
 8025006:	d501      	bpl.n	802500c <_printf_i+0x1cc>
 8025008:	6019      	str	r1, [r3, #0]
 802500a:	e002      	b.n	8025012 <_printf_i+0x1d2>
 802500c:	0670      	lsls	r0, r6, #25
 802500e:	d5fb      	bpl.n	8025008 <_printf_i+0x1c8>
 8025010:	8019      	strh	r1, [r3, #0]
 8025012:	2300      	movs	r3, #0
 8025014:	6123      	str	r3, [r4, #16]
 8025016:	4615      	mov	r5, r2
 8025018:	e7ba      	b.n	8024f90 <_printf_i+0x150>
 802501a:	682b      	ldr	r3, [r5, #0]
 802501c:	1d1a      	adds	r2, r3, #4
 802501e:	602a      	str	r2, [r5, #0]
 8025020:	681d      	ldr	r5, [r3, #0]
 8025022:	6862      	ldr	r2, [r4, #4]
 8025024:	2100      	movs	r1, #0
 8025026:	4628      	mov	r0, r5
 8025028:	f7db f90a 	bl	8000240 <memchr>
 802502c:	b108      	cbz	r0, 8025032 <_printf_i+0x1f2>
 802502e:	1b40      	subs	r0, r0, r5
 8025030:	6060      	str	r0, [r4, #4]
 8025032:	6863      	ldr	r3, [r4, #4]
 8025034:	6123      	str	r3, [r4, #16]
 8025036:	2300      	movs	r3, #0
 8025038:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802503c:	e7a8      	b.n	8024f90 <_printf_i+0x150>
 802503e:	6923      	ldr	r3, [r4, #16]
 8025040:	462a      	mov	r2, r5
 8025042:	4649      	mov	r1, r9
 8025044:	4640      	mov	r0, r8
 8025046:	47d0      	blx	sl
 8025048:	3001      	adds	r0, #1
 802504a:	d0ab      	beq.n	8024fa4 <_printf_i+0x164>
 802504c:	6823      	ldr	r3, [r4, #0]
 802504e:	079b      	lsls	r3, r3, #30
 8025050:	d413      	bmi.n	802507a <_printf_i+0x23a>
 8025052:	68e0      	ldr	r0, [r4, #12]
 8025054:	9b03      	ldr	r3, [sp, #12]
 8025056:	4298      	cmp	r0, r3
 8025058:	bfb8      	it	lt
 802505a:	4618      	movlt	r0, r3
 802505c:	e7a4      	b.n	8024fa8 <_printf_i+0x168>
 802505e:	2301      	movs	r3, #1
 8025060:	4632      	mov	r2, r6
 8025062:	4649      	mov	r1, r9
 8025064:	4640      	mov	r0, r8
 8025066:	47d0      	blx	sl
 8025068:	3001      	adds	r0, #1
 802506a:	d09b      	beq.n	8024fa4 <_printf_i+0x164>
 802506c:	3501      	adds	r5, #1
 802506e:	68e3      	ldr	r3, [r4, #12]
 8025070:	9903      	ldr	r1, [sp, #12]
 8025072:	1a5b      	subs	r3, r3, r1
 8025074:	42ab      	cmp	r3, r5
 8025076:	dcf2      	bgt.n	802505e <_printf_i+0x21e>
 8025078:	e7eb      	b.n	8025052 <_printf_i+0x212>
 802507a:	2500      	movs	r5, #0
 802507c:	f104 0619 	add.w	r6, r4, #25
 8025080:	e7f5      	b.n	802506e <_printf_i+0x22e>
 8025082:	bf00      	nop
 8025084:	08029cc3 	.word	0x08029cc3
 8025088:	08029cd4 	.word	0x08029cd4

0802508c <_read_r>:
 802508c:	b538      	push	{r3, r4, r5, lr}
 802508e:	4d07      	ldr	r5, [pc, #28]	; (80250ac <_read_r+0x20>)
 8025090:	4604      	mov	r4, r0
 8025092:	4608      	mov	r0, r1
 8025094:	4611      	mov	r1, r2
 8025096:	2200      	movs	r2, #0
 8025098:	602a      	str	r2, [r5, #0]
 802509a:	461a      	mov	r2, r3
 802509c:	f7dc fa76 	bl	800158c <_read>
 80250a0:	1c43      	adds	r3, r0, #1
 80250a2:	d102      	bne.n	80250aa <_read_r+0x1e>
 80250a4:	682b      	ldr	r3, [r5, #0]
 80250a6:	b103      	cbz	r3, 80250aa <_read_r+0x1e>
 80250a8:	6023      	str	r3, [r4, #0]
 80250aa:	bd38      	pop	{r3, r4, r5, pc}
 80250ac:	2000ff64 	.word	0x2000ff64

080250b0 <abort>:
 80250b0:	b508      	push	{r3, lr}
 80250b2:	2006      	movs	r0, #6
 80250b4:	f000 f856 	bl	8025164 <raise>
 80250b8:	2001      	movs	r0, #1
 80250ba:	f7dc fa5d 	bl	8001578 <_exit>
	...

080250c0 <_fstat_r>:
 80250c0:	b538      	push	{r3, r4, r5, lr}
 80250c2:	4d07      	ldr	r5, [pc, #28]	; (80250e0 <_fstat_r+0x20>)
 80250c4:	2300      	movs	r3, #0
 80250c6:	4604      	mov	r4, r0
 80250c8:	4608      	mov	r0, r1
 80250ca:	4611      	mov	r1, r2
 80250cc:	602b      	str	r3, [r5, #0]
 80250ce:	f7dc faa2 	bl	8001616 <_fstat>
 80250d2:	1c43      	adds	r3, r0, #1
 80250d4:	d102      	bne.n	80250dc <_fstat_r+0x1c>
 80250d6:	682b      	ldr	r3, [r5, #0]
 80250d8:	b103      	cbz	r3, 80250dc <_fstat_r+0x1c>
 80250da:	6023      	str	r3, [r4, #0]
 80250dc:	bd38      	pop	{r3, r4, r5, pc}
 80250de:	bf00      	nop
 80250e0:	2000ff64 	.word	0x2000ff64

080250e4 <_isatty_r>:
 80250e4:	b538      	push	{r3, r4, r5, lr}
 80250e6:	4d06      	ldr	r5, [pc, #24]	; (8025100 <_isatty_r+0x1c>)
 80250e8:	2300      	movs	r3, #0
 80250ea:	4604      	mov	r4, r0
 80250ec:	4608      	mov	r0, r1
 80250ee:	602b      	str	r3, [r5, #0]
 80250f0:	f7dc faa1 	bl	8001636 <_isatty>
 80250f4:	1c43      	adds	r3, r0, #1
 80250f6:	d102      	bne.n	80250fe <_isatty_r+0x1a>
 80250f8:	682b      	ldr	r3, [r5, #0]
 80250fa:	b103      	cbz	r3, 80250fe <_isatty_r+0x1a>
 80250fc:	6023      	str	r3, [r4, #0]
 80250fe:	bd38      	pop	{r3, r4, r5, pc}
 8025100:	2000ff64 	.word	0x2000ff64

08025104 <_malloc_usable_size_r>:
 8025104:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025108:	1f18      	subs	r0, r3, #4
 802510a:	2b00      	cmp	r3, #0
 802510c:	bfbc      	itt	lt
 802510e:	580b      	ldrlt	r3, [r1, r0]
 8025110:	18c0      	addlt	r0, r0, r3
 8025112:	4770      	bx	lr

08025114 <_raise_r>:
 8025114:	291f      	cmp	r1, #31
 8025116:	b538      	push	{r3, r4, r5, lr}
 8025118:	4604      	mov	r4, r0
 802511a:	460d      	mov	r5, r1
 802511c:	d904      	bls.n	8025128 <_raise_r+0x14>
 802511e:	2316      	movs	r3, #22
 8025120:	6003      	str	r3, [r0, #0]
 8025122:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8025126:	bd38      	pop	{r3, r4, r5, pc}
 8025128:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802512a:	b112      	cbz	r2, 8025132 <_raise_r+0x1e>
 802512c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8025130:	b94b      	cbnz	r3, 8025146 <_raise_r+0x32>
 8025132:	4620      	mov	r0, r4
 8025134:	f000 f830 	bl	8025198 <_getpid_r>
 8025138:	462a      	mov	r2, r5
 802513a:	4601      	mov	r1, r0
 802513c:	4620      	mov	r0, r4
 802513e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025142:	f000 b817 	b.w	8025174 <_kill_r>
 8025146:	2b01      	cmp	r3, #1
 8025148:	d00a      	beq.n	8025160 <_raise_r+0x4c>
 802514a:	1c59      	adds	r1, r3, #1
 802514c:	d103      	bne.n	8025156 <_raise_r+0x42>
 802514e:	2316      	movs	r3, #22
 8025150:	6003      	str	r3, [r0, #0]
 8025152:	2001      	movs	r0, #1
 8025154:	e7e7      	b.n	8025126 <_raise_r+0x12>
 8025156:	2400      	movs	r4, #0
 8025158:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802515c:	4628      	mov	r0, r5
 802515e:	4798      	blx	r3
 8025160:	2000      	movs	r0, #0
 8025162:	e7e0      	b.n	8025126 <_raise_r+0x12>

08025164 <raise>:
 8025164:	4b02      	ldr	r3, [pc, #8]	; (8025170 <raise+0xc>)
 8025166:	4601      	mov	r1, r0
 8025168:	6818      	ldr	r0, [r3, #0]
 802516a:	f7ff bfd3 	b.w	8025114 <_raise_r>
 802516e:	bf00      	nop
 8025170:	200000c0 	.word	0x200000c0

08025174 <_kill_r>:
 8025174:	b538      	push	{r3, r4, r5, lr}
 8025176:	4d07      	ldr	r5, [pc, #28]	; (8025194 <_kill_r+0x20>)
 8025178:	2300      	movs	r3, #0
 802517a:	4604      	mov	r4, r0
 802517c:	4608      	mov	r0, r1
 802517e:	4611      	mov	r1, r2
 8025180:	602b      	str	r3, [r5, #0]
 8025182:	f7dc f9e7 	bl	8001554 <_kill>
 8025186:	1c43      	adds	r3, r0, #1
 8025188:	d102      	bne.n	8025190 <_kill_r+0x1c>
 802518a:	682b      	ldr	r3, [r5, #0]
 802518c:	b103      	cbz	r3, 8025190 <_kill_r+0x1c>
 802518e:	6023      	str	r3, [r4, #0]
 8025190:	bd38      	pop	{r3, r4, r5, pc}
 8025192:	bf00      	nop
 8025194:	2000ff64 	.word	0x2000ff64

08025198 <_getpid_r>:
 8025198:	f7dc b9d4 	b.w	8001544 <_getpid>

0802519c <_init>:
 802519c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802519e:	bf00      	nop
 80251a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80251a2:	bc08      	pop	{r3}
 80251a4:	469e      	mov	lr, r3
 80251a6:	4770      	bx	lr

080251a8 <_fini>:
 80251a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80251aa:	bf00      	nop
 80251ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80251ae:	bc08      	pop	{r3}
 80251b0:	469e      	mov	lr, r3
 80251b2:	4770      	bx	lr
