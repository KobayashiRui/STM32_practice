
STM32F746_LinerSpeedInterrupt_Absolute_Homing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fec  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080021b4  080021b4  000121b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021c4  080021c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080021c4  080021c4  000121c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080021cc  080021cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021cc  080021cc  000121cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021d0  080021d0  000121d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080021d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  080021e0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  080021e0  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f851  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ef6  00000000  00000000  0002f88d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000b7c2  00000000  00000000  00031783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000808  00000000  00000000  0003cf48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001af0  00000000  00000000  0003d750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024ee1  00000000  00000000  0003f240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010315  00000000  00000000  00064121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9a87  00000000  00000000  00074436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015debd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001e54  00000000  00000000  0015df10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800219c 	.word	0x0800219c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	0800219c 	.word	0x0800219c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b96e 	b.w	80004fc <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468c      	mov	ip, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	f040 8083 	bne.w	800034e <__udivmoddi4+0x116>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d947      	bls.n	80002de <__udivmoddi4+0xa6>
 800024e:	fab2 f282 	clz	r2, r2
 8000252:	b142      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000254:	f1c2 0020 	rsb	r0, r2, #32
 8000258:	fa24 f000 	lsr.w	r0, r4, r0
 800025c:	4091      	lsls	r1, r2
 800025e:	4097      	lsls	r7, r2
 8000260:	ea40 0c01 	orr.w	ip, r0, r1
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbbc f6f8 	udiv	r6, ip, r8
 8000270:	fa1f fe87 	uxth.w	lr, r7
 8000274:	fb08 c116 	mls	r1, r8, r6, ip
 8000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027c:	fb06 f10e 	mul.w	r1, r6, lr
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 8119 	bcs.w	80004c0 <__udivmoddi4+0x288>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8116 	bls.w	80004c0 <__udivmoddi4+0x288>
 8000294:	3e02      	subs	r6, #2
 8000296:	443b      	add	r3, r7
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ac:	45a6      	cmp	lr, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	193c      	adds	r4, r7, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b6:	f080 8105 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	f240 8102 	bls.w	80004c4 <__udivmoddi4+0x28c>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c8:	eba4 040e 	sub.w	r4, r4, lr
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xaa>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d150      	bne.n	800038c <__udivmoddi4+0x154>
 80002ea:	1bcb      	subs	r3, r1, r7
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	fa1f f887 	uxth.w	r8, r7
 80002f4:	2601      	movs	r6, #1
 80002f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002fa:	0c21      	lsrs	r1, r4, #16
 80002fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000304:	fb08 f30c 	mul.w	r3, r8, ip
 8000308:	428b      	cmp	r3, r1
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0xe4>
 800030c:	1879      	adds	r1, r7, r1
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0xe2>
 8000314:	428b      	cmp	r3, r1
 8000316:	f200 80e9 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 800031a:	4684      	mov	ip, r0
 800031c:	1ac9      	subs	r1, r1, r3
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x10c>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x10a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80d9 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e7bf      	b.n	80002ce <__udivmoddi4+0x96>
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x12e>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80b1 	beq.w	80004ba <__udivmoddi4+0x282>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x1cc>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0x140>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80b8 	bhi.w	80004e8 <__udivmoddi4+0x2b0>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0103 	sbc.w	r1, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	468c      	mov	ip, r1
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0a8      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000386:	e9c5 4c00 	strd	r4, ip, [r5]
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0xa0>
 800038c:	f1c2 0320 	rsb	r3, r2, #32
 8000390:	fa20 f603 	lsr.w	r6, r0, r3
 8000394:	4097      	lsls	r7, r2
 8000396:	fa01 f002 	lsl.w	r0, r1, r2
 800039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039e:	40d9      	lsrs	r1, r3
 80003a0:	4330      	orrs	r0, r6
 80003a2:	0c03      	lsrs	r3, r0, #16
 80003a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f108 	mul.w	r1, r6, r8
 80003b8:	4299      	cmp	r1, r3
 80003ba:	fa04 f402 	lsl.w	r4, r4, r2
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x19c>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003c6:	f080 808d 	bcs.w	80004e4 <__udivmoddi4+0x2ac>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 808a 	bls.w	80004e4 <__udivmoddi4+0x2ac>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	443b      	add	r3, r7
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b281      	uxth	r1, r0
 80003d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb00 f308 	mul.w	r3, r0, r8
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x1c4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003f2:	d273      	bcs.n	80004dc <__udivmoddi4+0x2a4>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d971      	bls.n	80004dc <__udivmoddi4+0x2a4>
 80003f8:	3802      	subs	r0, #2
 80003fa:	4439      	add	r1, r7
 80003fc:	1acb      	subs	r3, r1, r3
 80003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000402:	e778      	b.n	80002f6 <__udivmoddi4+0xbe>
 8000404:	f1c6 0c20 	rsb	ip, r6, #32
 8000408:	fa03 f406 	lsl.w	r4, r3, r6
 800040c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000410:	431c      	orrs	r4, r3
 8000412:	fa20 f70c 	lsr.w	r7, r0, ip
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000422:	431f      	orrs	r7, r3
 8000424:	0c3b      	lsrs	r3, r7, #16
 8000426:	fbb1 f9fe 	udiv	r9, r1, lr
 800042a:	fa1f f884 	uxth.w	r8, r4
 800042e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000436:	fb09 fa08 	mul.w	sl, r9, r8
 800043a:	458a      	cmp	sl, r1
 800043c:	fa02 f206 	lsl.w	r2, r2, r6
 8000440:	fa00 f306 	lsl.w	r3, r0, r6
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x220>
 8000446:	1861      	adds	r1, r4, r1
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800044c:	d248      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 800044e:	458a      	cmp	sl, r1
 8000450:	d946      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	4421      	add	r1, r4
 8000458:	eba1 010a 	sub.w	r1, r1, sl
 800045c:	b2bf      	uxth	r7, r7
 800045e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000462:	fb0e 1110 	mls	r1, lr, r0, r1
 8000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45b8      	cmp	r8, r7
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x24a>
 8000472:	19e7      	adds	r7, r4, r7
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000478:	d22e      	bcs.n	80004d8 <__udivmoddi4+0x2a0>
 800047a:	45b8      	cmp	r8, r7
 800047c:	d92c      	bls.n	80004d8 <__udivmoddi4+0x2a0>
 800047e:	3802      	subs	r0, #2
 8000480:	4427      	add	r7, r4
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba7 0708 	sub.w	r7, r7, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454f      	cmp	r7, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	4649      	mov	r1, r9
 8000494:	d31a      	bcc.n	80004cc <__udivmoddi4+0x294>
 8000496:	d017      	beq.n	80004c8 <__udivmoddi4+0x290>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x27a>
 800049a:	ebb3 020e 	subs.w	r2, r3, lr
 800049e:	eb67 0701 	sbc.w	r7, r7, r1
 80004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a6:	40f2      	lsrs	r2, r6
 80004a8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ac:	40f7      	lsrs	r7, r6
 80004ae:	e9c5 2700 	strd	r2, r7, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e70b      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fd      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004c8:	4543      	cmp	r3, r8
 80004ca:	d2e5      	bcs.n	8000498 <__udivmoddi4+0x260>
 80004cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d0:	eb69 0104 	sbc.w	r1, r9, r4
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7df      	b.n	8000498 <__udivmoddi4+0x260>
 80004d8:	4608      	mov	r0, r1
 80004da:	e7d2      	b.n	8000482 <__udivmoddi4+0x24a>
 80004dc:	4660      	mov	r0, ip
 80004de:	e78d      	b.n	80003fc <__udivmoddi4+0x1c4>
 80004e0:	4681      	mov	r9, r0
 80004e2:	e7b9      	b.n	8000458 <__udivmoddi4+0x220>
 80004e4:	4666      	mov	r6, ip
 80004e6:	e775      	b.n	80003d4 <__udivmoddi4+0x19c>
 80004e8:	4630      	mov	r0, r6
 80004ea:	e74a      	b.n	8000382 <__udivmoddi4+0x14a>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	4439      	add	r1, r7
 80004f2:	e713      	b.n	800031c <__udivmoddi4+0xe4>
 80004f4:	3802      	subs	r0, #2
 80004f6:	443c      	add	r4, r7
 80004f8:	e724      	b.n	8000344 <__udivmoddi4+0x10c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <Step0>:
	//pull+




	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8000500:	4807      	ldr	r0, [pc, #28]	; (8000520 <Step0+0x20>)
 8000502:	2200      	movs	r2, #0
 8000504:	f44f 5180 	mov.w	r1, #4096	; 0x1000
void Step0(){
 8000508:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 800050a:	f000 fd6d 	bl	8000fe8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 800050e:	4804      	ldr	r0, [pc, #16]	; (8000520 <Step0+0x20>)
 8000510:	2201      	movs	r2, #1
 8000512:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	/*
	 * pull-
	 * HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
	 * HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
	 */
}
 8000516:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 800051a:	f000 bd65 	b.w	8000fe8 <HAL_GPIO_WritePin>
 800051e:	bf00      	nop
 8000520:	40020800 	.word	0x40020800

08000524 <Dir0>:

void Dir0(int dir){
 8000524:	4602      	mov	r2, r0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, dir);
 8000526:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800052a:	4802      	ldr	r0, [pc, #8]	; (8000534 <Dir0+0x10>)
 800052c:	b2d2      	uxtb	r2, r2
 800052e:	f000 bd5b 	b.w	8000fe8 <HAL_GPIO_WritePin>
 8000532:	bf00      	nop
 8000534:	40020800 	.word	0x40020800

08000538 <HAL_GPIO_EXTI_Callback>:
	if(GPIO_Pin == GPIO_PIN_9 ){
 8000538:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800053c:	d000      	beq.n	8000540 <HAL_GPIO_EXTI_Callback+0x8>
 800053e:	4770      	bx	lr
		if(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9)){
 8000540:	4601      	mov	r1, r0
 8000542:	480b      	ldr	r0, [pc, #44]	; (8000570 <HAL_GPIO_EXTI_Callback+0x38>)
{
 8000544:	b508      	push	{r3, lr}
		if(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9)){
 8000546:	f000 fd49 	bl	8000fdc <HAL_GPIO_ReadPin>
 800054a:	b920      	cbnz	r0, 8000556 <HAL_GPIO_EXTI_Callback+0x1e>
			end_stop_state |= 1;
 800054c:	4a09      	ldr	r2, [pc, #36]	; (8000574 <HAL_GPIO_EXTI_Callback+0x3c>)
 800054e:	7813      	ldrb	r3, [r2, #0]
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	7013      	strb	r3, [r2, #0]
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9)){
 8000556:	f44f 7100 	mov.w	r1, #512	; 0x200
 800055a:	4805      	ldr	r0, [pc, #20]	; (8000570 <HAL_GPIO_EXTI_Callback+0x38>)
 800055c:	f000 fd3e 	bl	8000fdc <HAL_GPIO_ReadPin>
 8000560:	b120      	cbz	r0, 800056c <HAL_GPIO_EXTI_Callback+0x34>
			end_stop_state &= ~1;
 8000562:	4a04      	ldr	r2, [pc, #16]	; (8000574 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000564:	7813      	ldrb	r3, [r2, #0]
 8000566:	f023 0301 	bic.w	r3, r3, #1
 800056a:	7013      	strb	r3, [r2, #0]
}
 800056c:	bd08      	pop	{r3, pc}
 800056e:	bf00      	nop
 8000570:	40020800 	.word	0x40020800
 8000574:	20000028 	.word	0x20000028

08000578 <HAL_TIM_OC_DelayElapsedCallback>:

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, mind);

}

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
 8000578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
	unsigned int tmpCtr = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1);
 800057a:	4f5e      	ldr	r7, [pc, #376]	; (80006f4 <HAL_TIM_OC_DelayElapsedCallback+0x17c>)
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 65500);
 800057c:	f64f 73dc 	movw	r3, #65500	; 0xffdc


	for (int i = 0; i < NUM_STEPPERS; i++){
		if ( ! ( (1 << i) & remainingSteppersFlag )){
 8000580:	4d5d      	ldr	r5, [pc, #372]	; (80006f8 <HAL_TIM_OC_DelayElapsedCallback+0x180>)
	unsigned int tmpCtr = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1);
 8000582:	683a      	ldr	r2, [r7, #0]
 8000584:	6b51      	ldr	r1, [r2, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 65500);
 8000586:	6353      	str	r3, [r2, #52]	; 0x34
		if ( ! ( (1 << i) & remainingSteppersFlag )){
 8000588:	782b      	ldrb	r3, [r5, #0]
 800058a:	07d8      	lsls	r0, r3, #31
 800058c:	d555      	bpl.n	800063a <HAL_TIM_OC_DelayElapsedCallback+0xc2>
			continue;
		}

		if( homing_flag & (1 << i)){
 800058e:	4b5b      	ldr	r3, [pc, #364]	; (80006fc <HAL_TIM_OC_DelayElapsedCallback+0x184>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	07db      	lsls	r3, r3, #31
 8000594:	d504      	bpl.n	80005a0 <HAL_TIM_OC_DelayElapsedCallback+0x28>
			if(end_stop_state & (1 << i)){
 8000596:	4b5a      	ldr	r3, [pc, #360]	; (8000700 <HAL_TIM_OC_DelayElapsedCallback+0x188>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	07de      	lsls	r6, r3, #31
 800059c:	f100 809b 	bmi.w	80006d6 <HAL_TIM_OC_DelayElapsedCallback+0x15e>
				remainingSteppersFlag &= ~(1 << i);
				continue;
			}
		}

		if ( ! (nextStepperFlag & (1 << i)) ){
 80005a0:	4e58      	ldr	r6, [pc, #352]	; (8000704 <HAL_TIM_OC_DelayElapsedCallback+0x18c>)
 80005a2:	7833      	ldrb	r3, [r6, #0]
 80005a4:	07dc      	lsls	r4, r3, #31
 80005a6:	f140 8091 	bpl.w	80006cc <HAL_TIM_OC_DelayElapsedCallback+0x154>

		volatile stepperInfo* s = &steppers[i];



		if( (s->stepCount) < (s->totalSteps) ){
 80005aa:	4c57      	ldr	r4, [pc, #348]	; (8000708 <HAL_TIM_OC_DelayElapsedCallback+0x190>)
 80005ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80005ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80005b0:	4299      	cmp	r1, r3
 80005b2:	d20e      	bcs.n	80005d2 <HAL_TIM_OC_DelayElapsedCallback+0x5a>
			s->stepFunc();
 80005b4:	68e3      	ldr	r3, [r4, #12]
 80005b6:	4798      	blx	r3
			s->stepCount++;
 80005b8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80005ba:	3301      	adds	r3, #1
 80005bc:	64a3      	str	r3, [r4, #72]	; 0x48
			s->stepPosition += s->dir;
 80005be:	69e2      	ldr	r2, [r4, #28]
 80005c0:	69a3      	ldr	r3, [r4, #24]
 80005c2:	4413      	add	r3, r2
 80005c4:	61a3      	str	r3, [r4, #24]
			if ( (s->stepCount) >= (s->totalSteps) ){
 80005c6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80005c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80005ca:	429a      	cmp	r2, r3
 80005cc:	f080 8089 	bcs.w	80006e2 <HAL_TIM_OC_DelayElapsedCallback+0x16a>
 80005d0:	683a      	ldr	r2, [r7, #0]
				s->movementDone = 1;
				remainingSteppersFlag &= ~(1 << i);
			}
		}

		if (s->rampUpStepCount == 0){
 80005d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d153      	bne.n	8000680 <HAL_TIM_OC_DelayElapsedCallback+0x108>
			s->n++;
 80005d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80005da:	3301      	adds	r3, #1
 80005dc:	63e3      	str	r3, [r4, #60]	; 0x3c
			s->d = s->d - (2*s->d) / (4*s->n +1);
 80005de:	edd4 6a10 	vldr	s13, [r4, #64]	; 0x40
 80005e2:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
 80005e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80005e8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	3301      	adds	r3, #1
 80005f0:	ee07 3a90 	vmov	s15, r3
 80005f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80005f8:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80005fc:	ee76 7ac6 	vsub.f32	s15, s13, s12
 8000600:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
			if (s->d <= s->minStepInterval ){
 8000604:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
 8000608:	edd4 7a01 	vldr	s15, [r4, #4]
 800060c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000610:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000618:	d807      	bhi.n	800062a <HAL_TIM_OC_DelayElapsedCallback+0xb2>
				s->d = s->minStepInterval;
 800061a:	edd4 7a01 	vldr	s15, [r4, #4]
 800061e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000622:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
				s->rampUpStepCount = s->stepCount;
 8000626:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000628:	63a3      	str	r3, [r4, #56]	; 0x38
			}
			if (s->stepCount >= (s->totalSteps / 2) ){
 800062a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800062c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800062e:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000632:	d344      	bcc.n	80006be <HAL_TIM_OC_DelayElapsedCallback+0x146>
				s->rampUpStepCount = s->stepCount;
 8000634:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000636:	63a3      	str	r3, [r4, #56]	; 0x38
 8000638:	e041      	b.n	80006be <HAL_TIM_OC_DelayElapsedCallback+0x146>
 800063a:	4e32      	ldr	r6, [pc, #200]	; (8000704 <HAL_TIM_OC_DelayElapsedCallback+0x18c>)
		if( ((1 << i) & remainingSteppersFlag) && steppers[i].di < mind ){
 800063c:	782b      	ldrb	r3, [r5, #0]
 800063e:	07d8      	lsls	r0, r3, #31
 8000640:	d504      	bpl.n	800064c <HAL_TIM_OC_DelayElapsedCallback+0xd4>
 8000642:	4b31      	ldr	r3, [pc, #196]	; (8000708 <HAL_TIM_OC_DelayElapsedCallback+0x190>)
 8000644:	4931      	ldr	r1, [pc, #196]	; (800070c <HAL_TIM_OC_DelayElapsedCallback+0x194>)
 8000646:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8000648:	4288      	cmp	r0, r1
 800064a:	d912      	bls.n	8000672 <HAL_TIM_OC_DelayElapsedCallback+0xfa>
 800064c:	4b30      	ldr	r3, [pc, #192]	; (8000710 <HAL_TIM_OC_DelayElapsedCallback+0x198>)
	nextStepperFlag = 0;
 800064e:	2100      	movs	r1, #0
 8000650:	7031      	strb	r1, [r6, #0]
		if( ((1 << i) & remainingSteppersFlag) && steppers[i].di == mind )
 8000652:	7829      	ldrb	r1, [r5, #0]
 8000654:	07c9      	lsls	r1, r1, #31
 8000656:	d503      	bpl.n	8000660 <HAL_TIM_OC_DelayElapsedCallback+0xe8>
 8000658:	492b      	ldr	r1, [pc, #172]	; (8000708 <HAL_TIM_OC_DelayElapsedCallback+0x190>)
 800065a:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800065c:	428b      	cmp	r3, r1
 800065e:	d00a      	beq.n	8000676 <HAL_TIM_OC_DelayElapsedCallback+0xfe>
	if (remainingSteppersFlag == 0){
 8000660:	7829      	ldrb	r1, [r5, #0]
 8000662:	b911      	cbnz	r1, 800066a <HAL_TIM_OC_DelayElapsedCallback+0xf2>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 65500);
 8000664:	f64f 71dc 	movw	r1, #65500	; 0xffdc
 8000668:	6351      	str	r1, [r2, #52]	; 0x34
		s->di = s->d;
	}

	setNextInterruptInterval();

	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800066a:	2100      	movs	r1, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, mind);
 800066c:	6353      	str	r3, [r2, #52]	; 0x34
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800066e:	6251      	str	r1, [r2, #36]	; 0x24


}
 8000670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			mind = steppers[i].di;
 8000672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	for (int i = 0; i < NUM_STEPPERS; i++){
 8000674:	e7eb      	b.n	800064e <HAL_TIM_OC_DelayElapsedCallback+0xd6>
			nextStepperFlag |= (1 << i);
 8000676:	7831      	ldrb	r1, [r6, #0]
 8000678:	f041 0101 	orr.w	r1, r1, #1
 800067c:	7031      	strb	r1, [r6, #0]
	for (int i = 0; i < NUM_STEPPERS; i ++){
 800067e:	e7ef      	b.n	8000660 <HAL_TIM_OC_DelayElapsedCallback+0xe8>
		} else if ( s->stepCount >= s->totalSteps - s->rampUpStepCount) {
 8000680:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8000682:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000684:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000686:	1a1b      	subs	r3, r3, r0
 8000688:	4299      	cmp	r1, r3
 800068a:	d318      	bcc.n	80006be <HAL_TIM_OC_DelayElapsedCallback+0x146>
			s->d = (s->d * (4 * s->n + 1)) / (4 * s->n + 1 -2);
 800068c:	edd4 6a10 	vldr	s13, [r4, #64]	; 0x40
 8000690:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000692:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8000694:	009b      	lsls	r3, r3, #2
 8000696:	0089      	lsls	r1, r1, #2
 8000698:	3301      	adds	r3, #1
 800069a:	3901      	subs	r1, #1
 800069c:	ee07 3a90 	vmov	s15, r3
 80006a0:	ee07 1a10 	vmov	s14, r1
 80006a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006a8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80006ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80006b0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80006b4:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
			s->n--;
 80006b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80006ba:	3b01      	subs	r3, #1
 80006bc:	63e3      	str	r3, [r4, #60]	; 0x3c
		s->di = s->d;
 80006be:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
 80006c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006c6:	edc4 7a11 	vstr	s15, [r4, #68]	; 0x44
 80006ca:	e7b7      	b.n	800063c <HAL_TIM_OC_DelayElapsedCallback+0xc4>
			steppers[i].di -= tmpCtr;
 80006cc:	480e      	ldr	r0, [pc, #56]	; (8000708 <HAL_TIM_OC_DelayElapsedCallback+0x190>)
 80006ce:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80006d0:	1a59      	subs	r1, r3, r1
 80006d2:	6441      	str	r1, [r0, #68]	; 0x44
			continue;
 80006d4:	e7b2      	b.n	800063c <HAL_TIM_OC_DelayElapsedCallback+0xc4>
				remainingSteppersFlag &= ~(1 << i);
 80006d6:	782b      	ldrb	r3, [r5, #0]
 80006d8:	4e0a      	ldr	r6, [pc, #40]	; (8000704 <HAL_TIM_OC_DelayElapsedCallback+0x18c>)
 80006da:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80006de:	702b      	strb	r3, [r5, #0]
				continue;
 80006e0:	e7ac      	b.n	800063c <HAL_TIM_OC_DelayElapsedCallback+0xc4>
				s->movementDone = 1;
 80006e2:	2301      	movs	r3, #1
 80006e4:	683a      	ldr	r2, [r7, #0]
 80006e6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
				remainingSteppersFlag &= ~(1 << i);
 80006ea:	782b      	ldrb	r3, [r5, #0]
 80006ec:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80006f0:	702b      	strb	r3, [r5, #0]
 80006f2:	e76e      	b.n	80005d2 <HAL_TIM_OC_DelayElapsedCallback+0x5a>
 80006f4:	20000078 	.word	0x20000078
 80006f8:	2000002b 	.word	0x2000002b
 80006fc:	20000029 	.word	0x20000029
 8000700:	20000028 	.word	0x20000028
 8000704:	2000002a 	.word	0x2000002a
 8000708:	2000002c 	.word	0x2000002c
 800070c:	000f423e 	.word	0x000f423e
 8000710:	000f423f 	.word	0x000f423f

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	2300      	movs	r3, #0
{
 8000718:	b095      	sub	sp, #84	; 0x54
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800071a:	4a29      	ldr	r2, [pc, #164]	; (80007c0 <SystemClock_Config+0xac>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800071c:	2502      	movs	r5, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000720:	2401      	movs	r4, #1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000724:	2110      	movs	r1, #16
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000728:	2602      	movs	r6, #2
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072a:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072c:	2700      	movs	r7, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 192;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072e:	a808      	add	r0, sp, #32
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000730:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000738:	e9cd 3304 	strd	r3, r3, [sp, #16]
  __HAL_RCC_PWR_CLK_ENABLE();
 800073c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800073e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000742:	6413      	str	r3, [r2, #64]	; 0x40
 8000744:	6c13      	ldr	r3, [r2, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000746:	f5a2 32e4 	sub.w	r2, r2, #116736	; 0x1c800
  __HAL_RCC_PWR_CLK_ENABLE();
 800074a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074e:	9300      	str	r3, [sp, #0]
 8000750:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000752:	6813      	ldr	r3, [r2, #0]
 8000754:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075c:	6013      	str	r3, [r2, #0]
 800075e:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000760:	2202      	movs	r2, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000762:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000764:	25c0      	movs	r5, #192	; 0xc0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000766:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800076a:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076c:	2410      	movs	r4, #16
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800076e:	910c      	str	r1, [sp, #48]	; 0x30
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000770:	9301      	str	r3, [sp, #4]
 8000772:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000774:	2302      	movs	r3, #2
 8000776:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
 800077a:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 800077e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000782:	f000 fc7d 	bl	8001080 <HAL_RCC_OscConfig>
 8000786:	b108      	cbz	r0, 800078c <SystemClock_Config+0x78>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000788:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800078a:	e7fe      	b.n	800078a <SystemClock_Config+0x76>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800078c:	f000 fc3c 	bl	8001008 <HAL_PWREx_EnableOverDrive>
 8000790:	4603      	mov	r3, r0
 8000792:	b108      	cbz	r0, 8000798 <SystemClock_Config+0x84>
 8000794:	b672      	cpsid	i
  while (1)
 8000796:	e7fe      	b.n	8000796 <SystemClock_Config+0x82>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000798:	260f      	movs	r6, #15
 800079a:	2702      	movs	r7, #2
 800079c:	2400      	movs	r4, #0
 800079e:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007a2:	a802      	add	r0, sp, #8
 80007a4:	2103      	movs	r1, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a6:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80007ac:	e9cd 4504 	strd	r4, r5, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007b0:	f000 fe60 	bl	8001474 <HAL_RCC_ClockConfig>
 80007b4:	b108      	cbz	r0, 80007ba <SystemClock_Config+0xa6>
 80007b6:	b672      	cpsid	i
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <SystemClock_Config+0xa4>
}
 80007ba:	b015      	add	sp, #84	; 0x54
 80007bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800

080007c4 <main>:
{
 80007c4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80007c8:	b09f      	sub	sp, #124	; 0x7c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	2400      	movs	r4, #0
  HAL_Init();
 80007cc:	f000 fa42 	bl	8000c54 <HAL_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80007d0:	2600      	movs	r6, #0
  SystemClock_Config();
 80007d2:	f7ff ff9f 	bl	8000714 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d6:	4bae      	ldr	r3, [pc, #696]	; (8000a90 <main+0x2cc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d8:	9413      	str	r4, [sp, #76]	; 0x4c
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80007da:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80007e0:	4622      	mov	r2, r4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	9416      	str	r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80007e4:	2700      	movs	r7, #0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80007e6:	48ab      	ldr	r0, [pc, #684]	; (8000a94 <main+0x2d0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ec:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 80007ee:	f045 0504 	orr.w	r5, r5, #4
 80007f2:	631d      	str	r5, [r3, #48]	; 0x30
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  htim1.Instance = TIM1;
 80007f6:	4da8      	ldr	r5, [pc, #672]	; (8000a98 <main+0x2d4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f8:	f003 0304 	and.w	r3, r3, #4
 80007fc:	9301      	str	r3, [sp, #4]
 80007fe:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000800:	f000 fbf2 	bl	8000fe8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000808:	4ba4      	ldr	r3, [pc, #656]	; (8000a9c <main+0x2d8>)
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800080a:	a912      	add	r1, sp, #72	; 0x48
 800080c:	48a1      	ldr	r0, [pc, #644]	; (8000a94 <main+0x2d0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000810:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000814:	f000 fac2 	bl	8000d9c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000818:	2301      	movs	r3, #1
 800081a:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800081e:	a912      	add	r1, sp, #72	; 0x48
 8000820:	489c      	ldr	r0, [pc, #624]	; (8000a94 <main+0x2d0>)
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000822:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8000826:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800082a:	f000 fab7 	bl	8000d9c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800082e:	4622      	mov	r2, r4
 8000830:	4621      	mov	r1, r4
 8000832:	2017      	movs	r0, #23
 8000834:	f000 fa52 	bl	8000cdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000838:	2017      	movs	r0, #23
 800083a:	f000 fa89 	bl	8000d50 <HAL_NVIC_EnableIRQ>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800083e:	4621      	mov	r1, r4
 8000840:	222c      	movs	r2, #44	; 0x2c
 8000842:	a812      	add	r0, sp, #72	; 0x48
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000844:	9406      	str	r4, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000846:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000848:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800084a:	9409      	str	r4, [sp, #36]	; 0x24
 800084c:	e9cd 4407 	strd	r4, r4, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000850:	e9cd 4403 	strd	r4, r4, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000854:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8000858:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 800085c:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000860:	f001 fc94 	bl	800218c <memset>
  htim1.Instance = TIM1;
 8000864:	498e      	ldr	r1, [pc, #568]	; (8000aa0 <main+0x2dc>)
  htim1.Init.Prescaler = 96-1;
 8000866:	225f      	movs	r2, #95	; 0x5f
  htim1.Init.Period = 65535;
 8000868:	f64f 73ff 	movw	r3, #65535	; 0xffff
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800086c:	4628      	mov	r0, r5
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086e:	60ac      	str	r4, [r5, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000870:	612c      	str	r4, [r5, #16]
  htim1.Init.Period = 65535;
 8000872:	60eb      	str	r3, [r5, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000874:	e9c5 4405 	strd	r4, r4, [r5, #20]
  htim1.Init.Prescaler = 96-1;
 8000878:	e9c5 1200 	strd	r1, r2, [r5]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800087c:	f000 fece 	bl	800161c <HAL_TIM_Base_Init>
 8000880:	b108      	cbz	r0, 8000886 <main+0xc2>
 8000882:	b672      	cpsid	i
  while (1)
 8000884:	e7fe      	b.n	8000884 <main+0xc0>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000886:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800088a:	a906      	add	r1, sp, #24
 800088c:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800088e:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000890:	f001 fa48 	bl	8001d24 <HAL_TIM_ConfigClockSource>
 8000894:	b108      	cbz	r0, 800089a <main+0xd6>
 8000896:	b672      	cpsid	i
  while (1)
 8000898:	e7fe      	b.n	8000898 <main+0xd4>
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800089a:	4628      	mov	r0, r5
 800089c:	f000 ff6c 	bl	8001778 <HAL_TIM_OC_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	b108      	cbz	r0, 80008a8 <main+0xe4>
 80008a4:	b672      	cpsid	i
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <main+0xe2>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008a8:	a902      	add	r1, sp, #8
 80008aa:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ac:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ae:	e9cd 6702 	strd	r6, r7, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008b2:	f001 fb9d 	bl	8001ff0 <HAL_TIMEx_MasterConfigSynchronization>
 80008b6:	4602      	mov	r2, r0
 80008b8:	b108      	cbz	r0, 80008be <main+0xfa>
 80008ba:	b672      	cpsid	i
  while (1)
 80008bc:	e7fe      	b.n	80008bc <main+0xf8>
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008be:	a90a      	add	r1, sp, #40	; 0x28
 80008c0:	4628      	mov	r0, r5
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008c2:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80008c4:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 80008c8:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
 80008cc:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008d0:	f001 f8d4 	bl	8001a7c <HAL_TIM_OC_ConfigChannel>
 80008d4:	b108      	cbz	r0, 80008da <main+0x116>
 80008d6:	b672      	cpsid	i
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <main+0x114>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80008de:	2300      	movs	r3, #0
 80008e0:	f04f 0800 	mov.w	r8, #0
 80008e4:	f44f 5900 	mov.w	r9, #8192	; 0x2000
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008e8:	901c      	str	r0, [sp, #112]	; 0x70
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008ea:	a912      	add	r1, sp, #72	; 0x48
 80008ec:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008ee:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80008f2:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
 80008f6:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
 80008fa:	e9cd 8916 	strd	r8, r9, [sp, #88]	; 0x58
 80008fe:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000902:	f001 fbd1 	bl	80020a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000906:	4606      	mov	r6, r0
 8000908:	b108      	cbz	r0, 800090e <main+0x14a>
 800090a:	b672      	cpsid	i
  while (1)
 800090c:	e7fe      	b.n	800090c <main+0x148>
  steppers[0].dirFunc = Dir0;
 800090e:	4c65      	ldr	r4, [pc, #404]	; (8000aa4 <main+0x2e0>)
  steppers[0].minStepInterval = 100;
 8000910:	2364      	movs	r3, #100	; 0x64
  steppers[0].dirFunc = Dir0;
 8000912:	4f65      	ldr	r7, [pc, #404]	; (8000aa8 <main+0x2e4>)
  steppers[0].dir_inv = 1;
 8000914:	2201      	movs	r2, #1
  steppers[0].stepFunc = Step0;
 8000916:	4965      	ldr	r1, [pc, #404]	; (8000aac <main+0x2e8>)
  steppers[0].pull_off = 500;
 8000918:	f44f 7cfa 	mov.w	ip, #500	; 0x1f4
  steppers[0].dirFunc = Dir0;
 800091c:	60a7      	str	r7, [r4, #8]
  steppers[0].homing_vel = 200;
 800091e:	20c8      	movs	r0, #200	; 0xc8
  steppers[0].stepFunc = Step0;
 8000920:	60e1      	str	r1, [r4, #12]
	si->stepCount = 0;
 8000922:	4637      	mov	r7, r6
  steppers[0].acceleration = 5000;
 8000924:	4962      	ldr	r1, [pc, #392]	; (8000ab0 <main+0x2ec>)
 8000926:	f8df a194 	ldr.w	sl, [pc, #404]	; 8000abc <main+0x2f8>
 800092a:	6021      	str	r1, [r4, #0]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 800092c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  steppers[0].minStepInterval = 100;
 8000930:	6063      	str	r3, [r4, #4]
  steppers[0].homing = 0;
 8000932:	7426      	strb	r6, [r4, #16]
  steppers[0].dir_inv = 1;
 8000934:	6222      	str	r2, [r4, #32]
  steppers[0].seeking_vel = 100;
 8000936:	62a3      	str	r3, [r4, #40]	; 0x28
  steppers[0].homing_vel = 200;
 8000938:	62e0      	str	r0, [r4, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 800093a:	4856      	ldr	r0, [pc, #344]	; (8000a94 <main+0x2d0>)
  steppers[0].pull_off = 500;
 800093c:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8000940:	f000 fb52 	bl	8000fe8 <HAL_GPIO_WritePin>
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000944:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8000ac0 <main+0x2fc>
 8000948:	4631      	mov	r1, r6
		if( ((1 << i) & remainingSteppersFlag) && steppers[i].di < mind ){
 800094a:	f8df b178 	ldr.w	fp, [pc, #376]	; 8000ac4 <main+0x300>
 800094e:	4e59      	ldr	r6, [pc, #356]	; (8000ab4 <main+0x2f0>)
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000950:	4628      	mov	r0, r5
 8000952:	f000 ffbd 	bl	80018d0 <HAL_TIM_OC_Start_IT>
	int steps = absolute_steps - si->stepPosition;
 8000956:	69a3      	ldr	r3, [r4, #24]
 8000958:	f242 7810 	movw	r8, #10000	; 0x2710
 800095c:	eba8 0803 	sub.w	r8, r8, r3
	if(steps == 0){
 8000960:	f1b8 0f00 	cmp.w	r8, #0
 8000964:	d02a      	beq.n	80009bc <main+0x1f8>
	si->dirFunc( steps < 0 ? 1 : 0);
 8000966:	68a3      	ldr	r3, [r4, #8]
 8000968:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800096c:	4798      	blx	r3
	si->dir = steps > 0 ? 1:-1;
 800096e:	f1b8 0f00 	cmp.w	r8, #0
	si->totalSteps = abs(steps);
 8000972:	ea88 73e8 	eor.w	r3, r8, r8, asr #31
	si->dir = steps > 0 ? 1:-1;
 8000976:	bfcc      	ite	gt
 8000978:	2201      	movgt	r2, #1
 800097a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
	si->totalSteps = abs(steps);
 800097e:	eba3 73e8 	sub.w	r3, r3, r8, asr #31
	si->dir = steps > 0 ? 1:-1;
 8000982:	61e2      	str	r2, [r4, #28]
	si->totalSteps = abs(steps);
 8000984:	6323      	str	r3, [r4, #48]	; 0x30
	si->c0 = si->acceleration;
 8000986:	edd4 7a00 	vldr	s15, [r4]
 800098a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800098e:	edc4 7a05 	vstr	s15, [r4, #20]
	si->d = si->c0;
 8000992:	edd4 7a05 	vldr	s15, [r4, #20]
 8000996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800099a:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
	si->di = si->d;
 800099e:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
 80009a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009a6:	edc4 7a11 	vstr	s15, [r4, #68]	; 0x44
	si->stepCount = 0;
 80009aa:	64a7      	str	r7, [r4, #72]	; 0x48
	si->n = 0;
 80009ac:	63e7      	str	r7, [r4, #60]	; 0x3c
	si->rampUpStepCount = 0;
 80009ae:	63a7      	str	r7, [r4, #56]	; 0x38
	si->movementDone = 0;
 80009b0:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
	remainingSteppersFlag |= (1 << whichMotor);
 80009b4:	7833      	ldrb	r3, [r6, #0]
 80009b6:	f043 0301 	orr.w	r3, r3, #1
 80009ba:	7033      	strb	r3, [r6, #0]
		if( ((1 << i) & remainingSteppersFlag) && steppers[i].di < mind ){
 80009bc:	7833      	ldrb	r3, [r6, #0]
 80009be:	07db      	lsls	r3, r3, #31
 80009c0:	d502      	bpl.n	80009c8 <main+0x204>
 80009c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80009c4:	455b      	cmp	r3, fp
 80009c6:	d95e      	bls.n	8000a86 <main+0x2c2>
 80009c8:	464b      	mov	r3, r9
	nextStepperFlag = 0;
 80009ca:	f88a 7000 	strb.w	r7, [sl]
		if( ((1 << i) & remainingSteppersFlag) && steppers[i].di == mind )
 80009ce:	7832      	ldrb	r2, [r6, #0]
 80009d0:	07d0      	lsls	r0, r2, #31
 80009d2:	d502      	bpl.n	80009da <main+0x216>
 80009d4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80009d6:	429a      	cmp	r2, r3
 80009d8:	d076      	beq.n	8000ac8 <main+0x304>
	if (remainingSteppersFlag == 0){
 80009da:	7832      	ldrb	r2, [r6, #0]
 80009dc:	2a00      	cmp	r2, #0
 80009de:	d07c      	beq.n	8000ada <main+0x316>
 80009e0:	682a      	ldr	r2, [r5, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, mind);
 80009e2:	6353      	str	r3, [r2, #52]	; 0x34
	while(remainingSteppersFlag);
 80009e4:	7833      	ldrb	r3, [r6, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d1fc      	bne.n	80009e4 <main+0x220>
	  HAL_Delay(100);
 80009ea:	2064      	movs	r0, #100	; 0x64
 80009ec:	f000 f950 	bl	8000c90 <HAL_Delay>
	int steps = absolute_steps - si->stepPosition;
 80009f0:	69a2      	ldr	r2, [r4, #24]
 80009f2:	4b31      	ldr	r3, [pc, #196]	; (8000ab8 <main+0x2f4>)
	if(steps == 0){
 80009f4:	ebb3 0802 	subs.w	r8, r3, r2
 80009f8:	d02a      	beq.n	8000a50 <main+0x28c>
	si->dirFunc( steps < 0 ? 1 : 0);
 80009fa:	68a3      	ldr	r3, [r4, #8]
 80009fc:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8000a00:	4798      	blx	r3
	si->dir = steps > 0 ? 1:-1;
 8000a02:	f1b8 0f00 	cmp.w	r8, #0
	si->totalSteps = abs(steps);
 8000a06:	ea88 73e8 	eor.w	r3, r8, r8, asr #31
	si->dir = steps > 0 ? 1:-1;
 8000a0a:	bfcc      	ite	gt
 8000a0c:	2201      	movgt	r2, #1
 8000a0e:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
	si->totalSteps = abs(steps);
 8000a12:	eba3 73e8 	sub.w	r3, r3, r8, asr #31
	si->dir = steps > 0 ? 1:-1;
 8000a16:	61e2      	str	r2, [r4, #28]
	si->totalSteps = abs(steps);
 8000a18:	6323      	str	r3, [r4, #48]	; 0x30
	si->c0 = si->acceleration;
 8000a1a:	edd4 7a00 	vldr	s15, [r4]
 8000a1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a22:	edc4 7a05 	vstr	s15, [r4, #20]
	si->d = si->c0;
 8000a26:	edd4 7a05 	vldr	s15, [r4, #20]
 8000a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a2e:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
	si->di = si->d;
 8000a32:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
 8000a36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a3a:	edc4 7a11 	vstr	s15, [r4, #68]	; 0x44
	si->stepCount = 0;
 8000a3e:	64a7      	str	r7, [r4, #72]	; 0x48
	si->n = 0;
 8000a40:	63e7      	str	r7, [r4, #60]	; 0x3c
	si->rampUpStepCount = 0;
 8000a42:	63a7      	str	r7, [r4, #56]	; 0x38
	si->movementDone = 0;
 8000a44:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
	remainingSteppersFlag |= (1 << whichMotor);
 8000a48:	7833      	ldrb	r3, [r6, #0]
 8000a4a:	f043 0301 	orr.w	r3, r3, #1
 8000a4e:	7033      	strb	r3, [r6, #0]
		if( ((1 << i) & remainingSteppersFlag) && steppers[i].di < mind ){
 8000a50:	7833      	ldrb	r3, [r6, #0]
 8000a52:	07d9      	lsls	r1, r3, #31
 8000a54:	d502      	bpl.n	8000a5c <main+0x298>
 8000a56:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a58:	455b      	cmp	r3, fp
 8000a5a:	d916      	bls.n	8000a8a <main+0x2c6>
 8000a5c:	464b      	mov	r3, r9
	nextStepperFlag = 0;
 8000a5e:	f88a 7000 	strb.w	r7, [sl]
		if( ((1 << i) & remainingSteppersFlag) && steppers[i].di == mind )
 8000a62:	7832      	ldrb	r2, [r6, #0]
 8000a64:	07d2      	lsls	r2, r2, #31
 8000a66:	d502      	bpl.n	8000a6e <main+0x2aa>
 8000a68:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d03f      	beq.n	8000aee <main+0x32a>
	if (remainingSteppersFlag == 0){
 8000a6e:	7832      	ldrb	r2, [r6, #0]
 8000a70:	2a00      	cmp	r2, #0
 8000a72:	d037      	beq.n	8000ae4 <main+0x320>
 8000a74:	682a      	ldr	r2, [r5, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, mind);
 8000a76:	6353      	str	r3, [r2, #52]	; 0x34
	while(remainingSteppersFlag);
 8000a78:	7833      	ldrb	r3, [r6, #0]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d1fc      	bne.n	8000a78 <main+0x2b4>
	  HAL_Delay(100);
 8000a7e:	2064      	movs	r0, #100	; 0x64
 8000a80:	f000 f906 	bl	8000c90 <HAL_Delay>
	  prepareAbsoluteMovement(0, 10000);
 8000a84:	e767      	b.n	8000956 <main+0x192>
			mind = steppers[i].di;
 8000a86:	6c63      	ldr	r3, [r4, #68]	; 0x44
	for (int i = 0; i < NUM_STEPPERS; i++){
 8000a88:	e79f      	b.n	80009ca <main+0x206>
			mind = steppers[i].di;
 8000a8a:	6c63      	ldr	r3, [r4, #68]	; 0x44
	for (int i = 0; i < NUM_STEPPERS; i++){
 8000a8c:	e7e7      	b.n	8000a5e <main+0x29a>
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40020800 	.word	0x40020800
 8000a98:	20000078 	.word	0x20000078
 8000a9c:	10310000 	.word	0x10310000
 8000aa0:	40010000 	.word	0x40010000
 8000aa4:	2000002c 	.word	0x2000002c
 8000aa8:	08000525 	.word	0x08000525
 8000aac:	08000501 	.word	0x08000501
 8000ab0:	459c4000 	.word	0x459c4000
 8000ab4:	2000002b 	.word	0x2000002b
 8000ab8:	ffffd8f0 	.word	0xffffd8f0
 8000abc:	2000002a 	.word	0x2000002a
 8000ac0:	000f423f 	.word	0x000f423f
 8000ac4:	000f423e 	.word	0x000f423e
			nextStepperFlag |= (1 << i);
 8000ac8:	f89a 2000 	ldrb.w	r2, [sl]
 8000acc:	f042 0201 	orr.w	r2, r2, #1
 8000ad0:	f88a 2000 	strb.w	r2, [sl]
	if (remainingSteppersFlag == 0){
 8000ad4:	7832      	ldrb	r2, [r6, #0]
 8000ad6:	2a00      	cmp	r2, #0
 8000ad8:	d182      	bne.n	80009e0 <main+0x21c>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 65500);
 8000ada:	682a      	ldr	r2, [r5, #0]
 8000adc:	f64f 71dc 	movw	r1, #65500	; 0xffdc
 8000ae0:	6351      	str	r1, [r2, #52]	; 0x34
 8000ae2:	e77e      	b.n	80009e2 <main+0x21e>
 8000ae4:	682a      	ldr	r2, [r5, #0]
 8000ae6:	f64f 71dc 	movw	r1, #65500	; 0xffdc
 8000aea:	6351      	str	r1, [r2, #52]	; 0x34
 8000aec:	e7c3      	b.n	8000a76 <main+0x2b2>
			nextStepperFlag |= (1 << i);
 8000aee:	f89a 2000 	ldrb.w	r2, [sl]
 8000af2:	f042 0201 	orr.w	r2, r2, #1
 8000af6:	f88a 2000 	strb.w	r2, [sl]
	for (int i = 0; i < NUM_STEPPERS; i ++){
 8000afa:	e7b8      	b.n	8000a6e <main+0x2aa>

08000afc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000afc:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <HAL_MspInit+0x2c>)
{
 8000afe:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b02:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b06:	641a      	str	r2, [r3, #64]	; 0x40
 8000b08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b0a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000b0e:	9200      	str	r2, [sp, #0]
 8000b10:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000b18:	645a      	str	r2, [r3, #68]	; 0x44
 8000b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b20:	9301      	str	r3, [sp, #4]
 8000b22:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b24:	b002      	add	sp, #8
 8000b26:	4770      	bx	lr
 8000b28:	40023800 	.word	0x40023800

08000b2c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8000b2c:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <HAL_TIM_Base_MspInit+0x3c>)
 8000b2e:	6802      	ldr	r2, [r0, #0]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d000      	beq.n	8000b36 <HAL_TIM_Base_MspInit+0xa>
 8000b34:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b36:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	201b      	movs	r0, #27
 8000b3e:	4611      	mov	r1, r2
{
 8000b40:	b510      	push	{r4, lr}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b42:	6c5c      	ldr	r4, [r3, #68]	; 0x44
{
 8000b44:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b46:	f044 0401 	orr.w	r4, r4, #1
 8000b4a:	645c      	str	r4, [r3, #68]	; 0x44
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	9301      	str	r3, [sp, #4]
 8000b54:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000b56:	f000 f8c1 	bl	8000cdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000b5a:	201b      	movs	r0, #27
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b5c:	b002      	add	sp, #8
 8000b5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000b62:	f000 b8f5 	b.w	8000d50 <HAL_NVIC_EnableIRQ>
 8000b66:	bf00      	nop
 8000b68:	40010000 	.word	0x40010000

08000b6c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <NMI_Handler>
 8000b6e:	bf00      	nop

08000b70 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <HardFault_Handler>
 8000b72:	bf00      	nop

08000b74 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <MemManage_Handler>
 8000b76:	bf00      	nop

08000b78 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <BusFault_Handler>
 8000b7a:	bf00      	nop

08000b7c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <UsageFault_Handler>
 8000b7e:	bf00      	nop

08000b80 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <DebugMon_Handler>:
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <PendSV_Handler>:
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8c:	f000 b86e 	b.w	8000c6c <HAL_IncTick>

08000b90 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000b90:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b94:	f000 ba2c 	b.w	8000ff0 <HAL_GPIO_EXTI_IRQHandler>

08000b98 <TIM1_CC_IRQHandler>:
void TIM1_CC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b98:	4801      	ldr	r0, [pc, #4]	; (8000ba0 <TIM1_CC_IRQHandler+0x8>)
 8000b9a:	f001 b971 	b.w	8001e80 <HAL_TIM_IRQHandler>
 8000b9e:	bf00      	nop
 8000ba0:	20000078 	.word	0x20000078

08000ba4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ba4:	4a03      	ldr	r2, [pc, #12]	; (8000bb4 <SystemInit+0x10>)
 8000ba6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000baa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb2:	4770      	bx	lr
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bbc:	480d      	ldr	r0, [pc, #52]	; (8000bf4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bbe:	490e      	ldr	r1, [pc, #56]	; (8000bf8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bc0:	4a0e      	ldr	r2, [pc, #56]	; (8000bfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc4:	e002      	b.n	8000bcc <LoopCopyDataInit>

08000bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bca:	3304      	adds	r3, #4

08000bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd0:	d3f9      	bcc.n	8000bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd2:	4a0b      	ldr	r2, [pc, #44]	; (8000c00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bd4:	4c0b      	ldr	r4, [pc, #44]	; (8000c04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd8:	e001      	b.n	8000bde <LoopFillZerobss>

08000bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bdc:	3204      	adds	r2, #4

08000bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be0:	d3fb      	bcc.n	8000bda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000be2:	f7ff ffdf 	bl	8000ba4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000be6:	f001 faad 	bl	8002144 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bea:	f7ff fdeb 	bl	80007c4 <main>
  bx  lr    
 8000bee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bf0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bfc:	080021d4 	.word	0x080021d4
  ldr r2, =_sbss
 8000c00:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c04:	200000c8 	.word	0x200000c8

08000c08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c08:	e7fe      	b.n	8000c08 <ADC_IRQHandler>
	...

08000c0c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c0c:	490e      	ldr	r1, [pc, #56]	; (8000c48 <HAL_InitTick+0x3c>)
 8000c0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c12:	4a0e      	ldr	r2, [pc, #56]	; (8000c4c <HAL_InitTick+0x40>)
{
 8000c14:	b510      	push	{r4, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c16:	7809      	ldrb	r1, [r1, #0]
{
 8000c18:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c1a:	6812      	ldr	r2, [r2, #0]
 8000c1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c20:	fbb2 f0f3 	udiv	r0, r2, r3
 8000c24:	f000 f8a2 	bl	8000d6c <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c28:	b908      	cbnz	r0, 8000c2e <HAL_InitTick+0x22>
 8000c2a:	2c0f      	cmp	r4, #15
 8000c2c:	d901      	bls.n	8000c32 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000c2e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8000c30:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c32:	2200      	movs	r2, #0
 8000c34:	4621      	mov	r1, r4
 8000c36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c3a:	f000 f84f 	bl	8000cdc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c3e:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <HAL_InitTick+0x44>)
 8000c40:	2000      	movs	r0, #0
 8000c42:	601c      	str	r4, [r3, #0]
}
 8000c44:	bd10      	pop	{r4, pc}
 8000c46:	bf00      	nop
 8000c48:	20000004 	.word	0x20000004
 8000c4c:	20000000 	.word	0x20000000
 8000c50:	20000008 	.word	0x20000008

08000c54 <HAL_Init>:
{
 8000c54:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c56:	2003      	movs	r0, #3
 8000c58:	f000 f82c 	bl	8000cb4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f7ff ffd5 	bl	8000c0c <HAL_InitTick>
  HAL_MspInit();
 8000c62:	f7ff ff4b 	bl	8000afc <HAL_MspInit>
}
 8000c66:	2000      	movs	r0, #0
 8000c68:	bd08      	pop	{r3, pc}
 8000c6a:	bf00      	nop

08000c6c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000c6c:	4a03      	ldr	r2, [pc, #12]	; (8000c7c <HAL_IncTick+0x10>)
 8000c6e:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <HAL_IncTick+0x14>)
 8000c70:	6811      	ldr	r1, [r2, #0]
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	440b      	add	r3, r1
 8000c76:	6013      	str	r3, [r2, #0]
}
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	200000c4 	.word	0x200000c4
 8000c80:	20000004 	.word	0x20000004

08000c84 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000c84:	4b01      	ldr	r3, [pc, #4]	; (8000c8c <HAL_GetTick+0x8>)
 8000c86:	6818      	ldr	r0, [r3, #0]
}
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	200000c4 	.word	0x200000c4

08000c90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c90:	b538      	push	{r3, r4, r5, lr}
 8000c92:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000c94:	f7ff fff6 	bl	8000c84 <HAL_GetTick>
 8000c98:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c9a:	1c63      	adds	r3, r4, #1
 8000c9c:	d002      	beq.n	8000ca4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c9e:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <HAL_Delay+0x20>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ca4:	f7ff ffee 	bl	8000c84 <HAL_GetTick>
 8000ca8:	1b43      	subs	r3, r0, r5
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d3fa      	bcc.n	8000ca4 <HAL_Delay+0x14>
  {
  }
}
 8000cae:	bd38      	pop	{r3, r4, r5, pc}
 8000cb0:	20000004 	.word	0x20000004

08000cb4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb4:	4907      	ldr	r1, [pc, #28]	; (8000cd4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb6:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8000cb8:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cba:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cbc:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc0:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cc2:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8000cc6:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000cc8:	f85d 4b04 	ldr.w	r4, [sp], #4
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ccc:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8000cce:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000cd0:	60cb      	str	r3, [r1, #12]
 8000cd2:	4770      	bx	lr
 8000cd4:	e000ed00 	.word	0xe000ed00
 8000cd8:	05fa0000 	.word	0x05fa0000

08000cdc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cdc:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <HAL_NVIC_SetPriority+0x68>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce4:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce6:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cea:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cec:	2d04      	cmp	r5, #4
 8000cee:	bf28      	it	cs
 8000cf0:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cf2:	2c06      	cmp	r4, #6
 8000cf4:	d919      	bls.n	8000d2a <HAL_NVIC_SetPriority+0x4e>
 8000cf6:	3b03      	subs	r3, #3
 8000cf8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000cfc:	409c      	lsls	r4, r3
 8000cfe:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d02:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 8000d06:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d08:	fa04 f405 	lsl.w	r4, r4, r5
 8000d0c:	ea21 0104 	bic.w	r1, r1, r4
 8000d10:	fa01 f103 	lsl.w	r1, r1, r3
 8000d14:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000d18:	db0a      	blt.n	8000d30 <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1a:	0109      	lsls	r1, r1, #4
 8000d1c:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <HAL_NVIC_SetPriority+0x6c>)
 8000d1e:	b2c9      	uxtb	r1, r1
 8000d20:	4403      	add	r3, r0
 8000d22:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000d26:	bc30      	pop	{r4, r5}
 8000d28:	4770      	bx	lr
 8000d2a:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	e7e8      	b.n	8000d02 <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d30:	f000 000f 	and.w	r0, r0, #15
 8000d34:	0109      	lsls	r1, r1, #4
 8000d36:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <HAL_NVIC_SetPriority+0x70>)
 8000d38:	b2c9      	uxtb	r1, r1
 8000d3a:	4403      	add	r3, r0
 8000d3c:	7619      	strb	r1, [r3, #24]
 8000d3e:	bc30      	pop	{r4, r5}
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000ed00 	.word	0xe000ed00
 8000d48:	e000e100 	.word	0xe000e100
 8000d4c:	e000ecfc 	.word	0xe000ecfc

08000d50 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000d50:	2800      	cmp	r0, #0
 8000d52:	db07      	blt.n	8000d64 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d54:	f000 011f 	and.w	r1, r0, #31
 8000d58:	2301      	movs	r3, #1
 8000d5a:	0940      	lsrs	r0, r0, #5
 8000d5c:	4a02      	ldr	r2, [pc, #8]	; (8000d68 <HAL_NVIC_EnableIRQ+0x18>)
 8000d5e:	408b      	lsls	r3, r1
 8000d60:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000e100 	.word	0xe000e100

08000d6c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d6c:	3801      	subs	r0, #1
 8000d6e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d72:	d20d      	bcs.n	8000d90 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d74:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d76:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d78:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d7a:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7c:	25f0      	movs	r5, #240	; 0xf0
 8000d7e:	4c06      	ldr	r4, [pc, #24]	; (8000d98 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d80:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d82:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d84:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d8a:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8000d8c:	bc30      	pop	{r4, r5}
 8000d8e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000d90:	2001      	movs	r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	e000e010 	.word	0xe000e010
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000da0:	2300      	movs	r3, #0
{
 8000da2:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da4:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8000fd4 <HAL_GPIO_Init+0x238>
 8000da8:	680d      	ldr	r5, [r1, #0]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000daa:	f8df e22c 	ldr.w	lr, [pc, #556]	; 8000fd8 <HAL_GPIO_Init+0x23c>
 8000dae:	e002      	b.n	8000db6 <HAL_GPIO_Init+0x1a>
  for(position = 0; position < GPIO_NUMBER; position++)
 8000db0:	3301      	adds	r3, #1
 8000db2:	2b10      	cmp	r3, #16
 8000db4:	d057      	beq.n	8000e66 <HAL_GPIO_Init+0xca>
    ioposition = ((uint32_t)0x01) << position;
 8000db6:	2201      	movs	r2, #1
 8000db8:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dba:	ea02 0a05 	and.w	sl, r2, r5
    if(iocurrent == ioposition)
 8000dbe:	43aa      	bics	r2, r5
 8000dc0:	d1f6      	bne.n	8000db0 <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dc2:	684a      	ldr	r2, [r1, #4]
 8000dc4:	005f      	lsls	r7, r3, #1
 8000dc6:	f022 0c10 	bic.w	ip, r2, #16
 8000dca:	f10c 34ff 	add.w	r4, ip, #4294967295	; 0xffffffff
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dce:	2c01      	cmp	r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000dd0:	f04f 0403 	mov.w	r4, #3
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dd4:	f200 80c0 	bhi.w	8000f58 <HAL_GPIO_Init+0x1bc>
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000dd8:	f3c2 1600 	ubfx	r6, r2, #4, #1
        temp = GPIOx->OSPEEDR; 
 8000ddc:	f8d0 8008 	ldr.w	r8, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000de0:	40bc      	lsls	r4, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000de2:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000de4:	ea28 0804 	bic.w	r8, r8, r4
 8000de8:	43e4      	mvns	r4, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000dea:	9601      	str	r6, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000dec:	68ce      	ldr	r6, [r1, #12]
 8000dee:	fa06 f907 	lsl.w	r9, r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000df2:	9e01      	ldr	r6, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000df4:	ea49 0808 	orr.w	r8, r9, r8
        GPIOx->OSPEEDR = temp;
 8000df8:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8000dfc:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e00:	ea28 080a 	bic.w	r8, r8, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000e04:	ea46 0608 	orr.w	r6, r6, r8
        GPIOx->OTYPER = temp;
 8000e08:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8000e0a:	68c6      	ldr	r6, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e0c:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e10:	ea06 0804 	and.w	r8, r6, r4
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000e14:	688e      	ldr	r6, [r1, #8]
 8000e16:	fa06 f607 	lsl.w	r6, r6, r7
 8000e1a:	ea46 0608 	orr.w	r6, r6, r8
      GPIOx->PUPDR = temp;
 8000e1e:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e20:	d124      	bne.n	8000e6c <HAL_GPIO_Init+0xd0>
        temp = GPIOx->AFR[position >> 3];
 8000e22:	08de      	lsrs	r6, r3, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e24:	f003 0c07 	and.w	ip, r3, #7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e28:	f002 0203 	and.w	r2, r2, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e2c:	f04f 080f 	mov.w	r8, #15
 8000e30:	eb00 0686 	add.w	r6, r0, r6, lsl #2
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e34:	3301      	adds	r3, #1
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e36:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e3a:	fa02 f707 	lsl.w	r7, r2, r7
        temp = GPIOx->AFR[position >> 3];
 8000e3e:	f8d6 9020 	ldr.w	r9, [r6, #32]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e42:	2b10      	cmp	r3, #16
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000e44:	690a      	ldr	r2, [r1, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e46:	fa08 f80c 	lsl.w	r8, r8, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000e4a:	fa02 fc0c 	lsl.w	ip, r2, ip
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e4e:	ea29 0208 	bic.w	r2, r9, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000e52:	ea4c 0202 	orr.w	r2, ip, r2
        GPIOx->AFR[position >> 3] = temp;
 8000e56:	6232      	str	r2, [r6, #32]
      temp = GPIOx->MODER;
 8000e58:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000e5a:	ea04 0402 	and.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e5e:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 8000e62:	6004      	str	r4, [r0, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e64:	d1a7      	bne.n	8000db6 <HAL_GPIO_Init+0x1a>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8000e66:	b005      	add	sp, #20
 8000e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      temp = GPIOx->MODER;
 8000e6c:	f8d0 c000 	ldr.w	ip, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e70:	f002 0603 	and.w	r6, r2, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000e74:	ea0c 0c04 	and.w	ip, ip, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e78:	fa06 f707 	lsl.w	r7, r6, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e7c:	00d4      	lsls	r4, r2, #3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e7e:	ea47 070c 	orr.w	r7, r7, ip
      GPIOx->MODER = temp;
 8000e82:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e84:	d594      	bpl.n	8000db0 <HAL_GPIO_Init+0x14>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e86:	f8db 7044 	ldr.w	r7, [fp, #68]	; 0x44
 8000e8a:	f023 0c03 	bic.w	ip, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000e8e:	f003 0403 	and.w	r4, r3, #3
 8000e92:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e94:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000e98:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000e9c:	00a4      	lsls	r4, r4, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9e:	f8cb 7044 	str.w	r7, [fp, #68]	; 0x44
 8000ea2:	f50c 3c9c 	add.w	ip, ip, #79872	; 0x13800
 8000ea6:	f8db 7044 	ldr.w	r7, [fp, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000eaa:	fa06 f804 	lsl.w	r8, r6, r4
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eae:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000eb2:	9703      	str	r7, [sp, #12]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000eb4:	4f3e      	ldr	r7, [pc, #248]	; (8000fb0 <HAL_GPIO_Init+0x214>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb6:	9e03      	ldr	r6, [sp, #12]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000eb8:	42b8      	cmp	r0, r7
        temp = SYSCFG->EXTICR[position >> 2];
 8000eba:	f8dc 6008 	ldr.w	r6, [ip, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000ebe:	ea26 0608 	bic.w	r6, r6, r8
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ec2:	d020      	beq.n	8000f06 <HAL_GPIO_Init+0x16a>
 8000ec4:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000ec8:	42b8      	cmp	r0, r7
 8000eca:	d048      	beq.n	8000f5e <HAL_GPIO_Init+0x1c2>
 8000ecc:	4f39      	ldr	r7, [pc, #228]	; (8000fb4 <HAL_GPIO_Init+0x218>)
 8000ece:	42b8      	cmp	r0, r7
 8000ed0:	d04a      	beq.n	8000f68 <HAL_GPIO_Init+0x1cc>
 8000ed2:	4f39      	ldr	r7, [pc, #228]	; (8000fb8 <HAL_GPIO_Init+0x21c>)
 8000ed4:	42b8      	cmp	r0, r7
 8000ed6:	d04c      	beq.n	8000f72 <HAL_GPIO_Init+0x1d6>
 8000ed8:	4f38      	ldr	r7, [pc, #224]	; (8000fbc <HAL_GPIO_Init+0x220>)
 8000eda:	42b8      	cmp	r0, r7
 8000edc:	d04e      	beq.n	8000f7c <HAL_GPIO_Init+0x1e0>
 8000ede:	4f38      	ldr	r7, [pc, #224]	; (8000fc0 <HAL_GPIO_Init+0x224>)
 8000ee0:	42b8      	cmp	r0, r7
 8000ee2:	d055      	beq.n	8000f90 <HAL_GPIO_Init+0x1f4>
 8000ee4:	4f37      	ldr	r7, [pc, #220]	; (8000fc4 <HAL_GPIO_Init+0x228>)
 8000ee6:	42b8      	cmp	r0, r7
 8000ee8:	d057      	beq.n	8000f9a <HAL_GPIO_Init+0x1fe>
 8000eea:	4f37      	ldr	r7, [pc, #220]	; (8000fc8 <HAL_GPIO_Init+0x22c>)
 8000eec:	42b8      	cmp	r0, r7
 8000eee:	d04a      	beq.n	8000f86 <HAL_GPIO_Init+0x1ea>
 8000ef0:	4f36      	ldr	r7, [pc, #216]	; (8000fcc <HAL_GPIO_Init+0x230>)
 8000ef2:	42b8      	cmp	r0, r7
 8000ef4:	d056      	beq.n	8000fa4 <HAL_GPIO_Init+0x208>
 8000ef6:	4f36      	ldr	r7, [pc, #216]	; (8000fd0 <HAL_GPIO_Init+0x234>)
 8000ef8:	42b8      	cmp	r0, r7
 8000efa:	bf0c      	ite	eq
 8000efc:	2709      	moveq	r7, #9
 8000efe:	270a      	movne	r7, #10
 8000f00:	fa07 f404 	lsl.w	r4, r7, r4
 8000f04:	4326      	orrs	r6, r4
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f06:	f8cc 6008 	str.w	r6, [ip, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f0a:	03d7      	lsls	r7, r2, #15
        temp = EXTI->IMR;
 8000f0c:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~((uint32_t)iocurrent);
 8000f10:	ea6f 060a 	mvn.w	r6, sl
          temp |= iocurrent;
 8000f14:	bf4c      	ite	mi
 8000f16:	ea4a 0404 	orrmi.w	r4, sl, r4
        temp &= ~((uint32_t)iocurrent);
 8000f1a:	4034      	andpl	r4, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f1c:	0397      	lsls	r7, r2, #14
        EXTI->IMR = temp;
 8000f1e:	f8ce 4000 	str.w	r4, [lr]
        temp = EXTI->EMR;
 8000f22:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
 8000f26:	bf54      	ite	pl
 8000f28:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000f2a:	ea4a 0404 	orrmi.w	r4, sl, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f2e:	02d7      	lsls	r7, r2, #11
        EXTI->EMR = temp;
 8000f30:	f8ce 4004 	str.w	r4, [lr, #4]
        temp = EXTI->RTSR;
 8000f34:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
 8000f38:	bf54      	ite	pl
 8000f3a:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000f3c:	ea4a 0404 	orrmi.w	r4, sl, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f40:	0292      	lsls	r2, r2, #10
        EXTI->RTSR = temp;
 8000f42:	f8ce 4008 	str.w	r4, [lr, #8]
        temp = EXTI->FTSR;
 8000f46:	f8de 400c 	ldr.w	r4, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
 8000f4a:	bf54      	ite	pl
 8000f4c:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000f4e:	ea4a 0404 	orrmi.w	r4, sl, r4
        EXTI->FTSR = temp;
 8000f52:	f8ce 400c 	str.w	r4, [lr, #12]
 8000f56:	e72b      	b.n	8000db0 <HAL_GPIO_Init+0x14>
 8000f58:	40bc      	lsls	r4, r7
 8000f5a:	43e4      	mvns	r4, r4
 8000f5c:	e755      	b.n	8000e0a <HAL_GPIO_Init+0x6e>
 8000f5e:	2701      	movs	r7, #1
 8000f60:	fa07 f404 	lsl.w	r4, r7, r4
 8000f64:	4326      	orrs	r6, r4
 8000f66:	e7ce      	b.n	8000f06 <HAL_GPIO_Init+0x16a>
 8000f68:	2702      	movs	r7, #2
 8000f6a:	fa07 f404 	lsl.w	r4, r7, r4
 8000f6e:	4326      	orrs	r6, r4
 8000f70:	e7c9      	b.n	8000f06 <HAL_GPIO_Init+0x16a>
 8000f72:	2703      	movs	r7, #3
 8000f74:	fa07 f404 	lsl.w	r4, r7, r4
 8000f78:	4326      	orrs	r6, r4
 8000f7a:	e7c4      	b.n	8000f06 <HAL_GPIO_Init+0x16a>
 8000f7c:	2704      	movs	r7, #4
 8000f7e:	fa07 f404 	lsl.w	r4, r7, r4
 8000f82:	4326      	orrs	r6, r4
 8000f84:	e7bf      	b.n	8000f06 <HAL_GPIO_Init+0x16a>
 8000f86:	2707      	movs	r7, #7
 8000f88:	fa07 f404 	lsl.w	r4, r7, r4
 8000f8c:	4326      	orrs	r6, r4
 8000f8e:	e7ba      	b.n	8000f06 <HAL_GPIO_Init+0x16a>
 8000f90:	2705      	movs	r7, #5
 8000f92:	fa07 f404 	lsl.w	r4, r7, r4
 8000f96:	4326      	orrs	r6, r4
 8000f98:	e7b5      	b.n	8000f06 <HAL_GPIO_Init+0x16a>
 8000f9a:	2706      	movs	r7, #6
 8000f9c:	fa07 f404 	lsl.w	r4, r7, r4
 8000fa0:	4326      	orrs	r6, r4
 8000fa2:	e7b0      	b.n	8000f06 <HAL_GPIO_Init+0x16a>
 8000fa4:	2708      	movs	r7, #8
 8000fa6:	fa07 f404 	lsl.w	r4, r7, r4
 8000faa:	4326      	orrs	r6, r4
 8000fac:	e7ab      	b.n	8000f06 <HAL_GPIO_Init+0x16a>
 8000fae:	bf00      	nop
 8000fb0:	40020000 	.word	0x40020000
 8000fb4:	40020800 	.word	0x40020800
 8000fb8:	40020c00 	.word	0x40020c00
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	40021400 	.word	0x40021400
 8000fc4:	40021800 	.word	0x40021800
 8000fc8:	40021c00 	.word	0x40021c00
 8000fcc:	40022000 	.word	0x40022000
 8000fd0:	40022400 	.word	0x40022400
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40013c00 	.word	0x40013c00

08000fdc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000fdc:	6903      	ldr	r3, [r0, #16]
 8000fde:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000fe0:	bf14      	ite	ne
 8000fe2:	2001      	movne	r0, #1
 8000fe4:	2000      	moveq	r0, #0
 8000fe6:	4770      	bx	lr

08000fe8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fe8:	b902      	cbnz	r2, 8000fec <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000fea:	0409      	lsls	r1, r1, #16
 8000fec:	6181      	str	r1, [r0, #24]
  }
}
 8000fee:	4770      	bx	lr

08000ff0 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000ff0:	4a04      	ldr	r2, [pc, #16]	; (8001004 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000ff2:	6951      	ldr	r1, [r2, #20]
 8000ff4:	4201      	tst	r1, r0
 8000ff6:	d100      	bne.n	8000ffa <HAL_GPIO_EXTI_IRQHandler+0xa>
 8000ff8:	4770      	bx	lr
{
 8000ffa:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ffc:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ffe:	f7ff fa9b 	bl	8000538 <HAL_GPIO_EXTI_Callback>
  }
}
 8001002:	bd08      	pop	{r3, pc}
 8001004:	40013c00 	.word	0x40013c00

08001008 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001008:	4a1b      	ldr	r2, [pc, #108]	; (8001078 <HAL_PWREx_EnableOverDrive+0x70>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800100a:	4b1c      	ldr	r3, [pc, #112]	; (800107c <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800100c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800100e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
 8001012:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001014:	6411      	str	r1, [r2, #64]	; 0x40
{
 8001016:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8001018:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800101a:	461d      	mov	r5, r3
  __HAL_RCC_PWR_CLK_ENABLE();
 800101c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001020:	9201      	str	r2, [sp, #4]
 8001022:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800102a:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800102c:	f7ff fe2a 	bl	8000c84 <HAL_GetTick>
 8001030:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001032:	e005      	b.n	8001040 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001034:	f7ff fe26 	bl	8000c84 <HAL_GetTick>
 8001038:	1b00      	subs	r0, r0, r4
 800103a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800103e:	d817      	bhi.n	8001070 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001040:	686b      	ldr	r3, [r5, #4]
 8001042:	03da      	lsls	r2, r3, #15
 8001044:	d5f6      	bpl.n	8001034 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001046:	682b      	ldr	r3, [r5, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001048:	4e0c      	ldr	r6, [pc, #48]	; (800107c <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800104a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800104e:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8001050:	f7ff fe18 	bl	8000c84 <HAL_GetTick>
 8001054:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001056:	e005      	b.n	8001064 <HAL_PWREx_EnableOverDrive+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001058:	f7ff fe14 	bl	8000c84 <HAL_GetTick>
 800105c:	1b00      	subs	r0, r0, r4
 800105e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001062:	d805      	bhi.n	8001070 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001064:	6873      	ldr	r3, [r6, #4]
 8001066:	039b      	lsls	r3, r3, #14
 8001068:	d5f6      	bpl.n	8001058 <HAL_PWREx_EnableOverDrive+0x50>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800106a:	2000      	movs	r0, #0
}
 800106c:	b002      	add	sp, #8
 800106e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 8001070:	2003      	movs	r0, #3
}
 8001072:	b002      	add	sp, #8
 8001074:	bd70      	pop	{r4, r5, r6, pc}
 8001076:	bf00      	nop
 8001078:	40023800 	.word	0x40023800
 800107c:	40007000 	.word	0x40007000

08001080 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001080:	2800      	cmp	r0, #0
 8001082:	f000 81c1 	beq.w	8001408 <HAL_RCC_OscConfig+0x388>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001086:	6803      	ldr	r3, [r0, #0]
{
 8001088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800108c:	07dd      	lsls	r5, r3, #31
{
 800108e:	b082      	sub	sp, #8
 8001090:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001092:	d535      	bpl.n	8001100 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001094:	49ac      	ldr	r1, [pc, #688]	; (8001348 <HAL_RCC_OscConfig+0x2c8>)
 8001096:	688a      	ldr	r2, [r1, #8]
 8001098:	f002 020c 	and.w	r2, r2, #12
 800109c:	2a04      	cmp	r2, #4
 800109e:	f000 80e6 	beq.w	800126e <HAL_RCC_OscConfig+0x1ee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010a2:	688a      	ldr	r2, [r1, #8]
 80010a4:	f002 020c 	and.w	r2, r2, #12
 80010a8:	2a08      	cmp	r2, #8
 80010aa:	f000 80dc 	beq.w	8001266 <HAL_RCC_OscConfig+0x1e6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ae:	6863      	ldr	r3, [r4, #4]
 80010b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010b4:	d010      	beq.n	80010d8 <HAL_RCC_OscConfig+0x58>
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f000 8104 	beq.w	80012c4 <HAL_RCC_OscConfig+0x244>
 80010bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010c0:	4ba1      	ldr	r3, [pc, #644]	; (8001348 <HAL_RCC_OscConfig+0x2c8>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	f000 8190 	beq.w	80013e8 <HAL_RCC_OscConfig+0x368>
 80010c8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	e004      	b.n	80010e2 <HAL_RCC_OscConfig+0x62>
 80010d8:	4a9b      	ldr	r2, [pc, #620]	; (8001348 <HAL_RCC_OscConfig+0x2c8>)
 80010da:	6813      	ldr	r3, [r2, #0]
 80010dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010e0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010e2:	f7ff fdcf 	bl	8000c84 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010e6:	4e98      	ldr	r6, [pc, #608]	; (8001348 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80010e8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ea:	e005      	b.n	80010f8 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010ec:	f7ff fdca 	bl	8000c84 <HAL_GetTick>
 80010f0:	1b40      	subs	r0, r0, r5
 80010f2:	2864      	cmp	r0, #100	; 0x64
 80010f4:	f200 80e2 	bhi.w	80012bc <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010f8:	6833      	ldr	r3, [r6, #0]
 80010fa:	039a      	lsls	r2, r3, #14
 80010fc:	d5f6      	bpl.n	80010ec <HAL_RCC_OscConfig+0x6c>
 80010fe:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001100:	079f      	lsls	r7, r3, #30
 8001102:	d529      	bpl.n	8001158 <HAL_RCC_OscConfig+0xd8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001104:	4a90      	ldr	r2, [pc, #576]	; (8001348 <HAL_RCC_OscConfig+0x2c8>)
 8001106:	6891      	ldr	r1, [r2, #8]
 8001108:	f011 0f0c 	tst.w	r1, #12
 800110c:	f000 8082 	beq.w	8001214 <HAL_RCC_OscConfig+0x194>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001110:	6891      	ldr	r1, [r2, #8]
 8001112:	f001 010c 	and.w	r1, r1, #12
 8001116:	2908      	cmp	r1, #8
 8001118:	d079      	beq.n	800120e <HAL_RCC_OscConfig+0x18e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800111a:	68e3      	ldr	r3, [r4, #12]
 800111c:	2b00      	cmp	r3, #0
 800111e:	f000 8109 	beq.w	8001334 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001122:	4b89      	ldr	r3, [pc, #548]	; (8001348 <HAL_RCC_OscConfig+0x2c8>)
 8001124:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001126:	461e      	mov	r6, r3
        __HAL_RCC_HSI_ENABLE();
 8001128:	f042 0201 	orr.w	r2, r2, #1
 800112c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800112e:	f7ff fda9 	bl	8000c84 <HAL_GetTick>
 8001132:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001134:	e005      	b.n	8001142 <HAL_RCC_OscConfig+0xc2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001136:	f7ff fda5 	bl	8000c84 <HAL_GetTick>
 800113a:	1b40      	subs	r0, r0, r5
 800113c:	2802      	cmp	r0, #2
 800113e:	f200 80bd 	bhi.w	80012bc <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001142:	6833      	ldr	r3, [r6, #0]
 8001144:	0798      	lsls	r0, r3, #30
 8001146:	d5f6      	bpl.n	8001136 <HAL_RCC_OscConfig+0xb6>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001148:	6833      	ldr	r3, [r6, #0]
 800114a:	6922      	ldr	r2, [r4, #16]
 800114c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001150:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001154:	6033      	str	r3, [r6, #0]
 8001156:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001158:	071a      	lsls	r2, r3, #28
 800115a:	d41f      	bmi.n	800119c <HAL_RCC_OscConfig+0x11c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800115c:	075d      	lsls	r5, r3, #29
 800115e:	d535      	bpl.n	80011cc <HAL_RCC_OscConfig+0x14c>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001160:	4b79      	ldr	r3, [pc, #484]	; (8001348 <HAL_RCC_OscConfig+0x2c8>)
 8001162:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001164:	00d0      	lsls	r0, r2, #3
 8001166:	d573      	bpl.n	8001250 <HAL_RCC_OscConfig+0x1d0>
  FlagStatus pwrclkchanged = RESET;
 8001168:	2500      	movs	r5, #0
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800116a:	4b78      	ldr	r3, [pc, #480]	; (800134c <HAL_RCC_OscConfig+0x2cc>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	05d1      	lsls	r1, r2, #23
 8001170:	f140 8093 	bpl.w	800129a <HAL_RCC_OscConfig+0x21a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001174:	68a3      	ldr	r3, [r4, #8]
 8001176:	2b01      	cmp	r3, #1
 8001178:	f000 80f4 	beq.w	8001364 <HAL_RCC_OscConfig+0x2e4>
 800117c:	2b00      	cmp	r3, #0
 800117e:	f000 80b8 	beq.w	80012f2 <HAL_RCC_OscConfig+0x272>
 8001182:	2b05      	cmp	r3, #5
 8001184:	4b70      	ldr	r3, [pc, #448]	; (8001348 <HAL_RCC_OscConfig+0x2c8>)
 8001186:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001188:	f000 8136 	beq.w	80013f8 <HAL_RCC_OscConfig+0x378>
 800118c:	f022 0201 	bic.w	r2, r2, #1
 8001190:	671a      	str	r2, [r3, #112]	; 0x70
 8001192:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001194:	f022 0204 	bic.w	r2, r2, #4
 8001198:	671a      	str	r2, [r3, #112]	; 0x70
 800119a:	e0e8      	b.n	800136e <HAL_RCC_OscConfig+0x2ee>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800119c:	6963      	ldr	r3, [r4, #20]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d043      	beq.n	800122a <HAL_RCC_OscConfig+0x1aa>
      __HAL_RCC_LSI_ENABLE();
 80011a2:	4b69      	ldr	r3, [pc, #420]	; (8001348 <HAL_RCC_OscConfig+0x2c8>)
 80011a4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011a6:	461e      	mov	r6, r3
      __HAL_RCC_LSI_ENABLE();
 80011a8:	f042 0201 	orr.w	r2, r2, #1
 80011ac:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 80011ae:	f7ff fd69 	bl	8000c84 <HAL_GetTick>
 80011b2:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011b4:	e004      	b.n	80011c0 <HAL_RCC_OscConfig+0x140>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011b6:	f7ff fd65 	bl	8000c84 <HAL_GetTick>
 80011ba:	1b40      	subs	r0, r0, r5
 80011bc:	2802      	cmp	r0, #2
 80011be:	d87d      	bhi.n	80012bc <HAL_RCC_OscConfig+0x23c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011c0:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80011c2:	079b      	lsls	r3, r3, #30
 80011c4:	d5f7      	bpl.n	80011b6 <HAL_RCC_OscConfig+0x136>
 80011c6:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011c8:	075d      	lsls	r5, r3, #29
 80011ca:	d4c9      	bmi.n	8001160 <HAL_RCC_OscConfig+0xe0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011cc:	69a0      	ldr	r0, [r4, #24]
 80011ce:	b1d0      	cbz	r0, 8001206 <HAL_RCC_OscConfig+0x186>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011d0:	4b5d      	ldr	r3, [pc, #372]	; (8001348 <HAL_RCC_OscConfig+0x2c8>)
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	f002 020c 	and.w	r2, r2, #12
 80011d8:	2a08      	cmp	r2, #8
 80011da:	f000 80db 	beq.w	8001394 <HAL_RCC_OscConfig+0x314>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011de:	681a      	ldr	r2, [r3, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011e0:	2802      	cmp	r0, #2

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011e2:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 80011e4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80011e8:	601a      	str	r2, [r3, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011ea:	f000 810f 	beq.w	800140c <HAL_RCC_OscConfig+0x38c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ee:	f7ff fd49 	bl	8000c84 <HAL_GetTick>
 80011f2:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011f4:	e004      	b.n	8001200 <HAL_RCC_OscConfig+0x180>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011f6:	f7ff fd45 	bl	8000c84 <HAL_GetTick>
 80011fa:	1b00      	subs	r0, r0, r4
 80011fc:	2802      	cmp	r0, #2
 80011fe:	d85d      	bhi.n	80012bc <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001200:	682b      	ldr	r3, [r5, #0]
 8001202:	019b      	lsls	r3, r3, #6
 8001204:	d4f7      	bmi.n	80011f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8001206:	2000      	movs	r0, #0
}
 8001208:	b002      	add	sp, #8
 800120a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800120e:	6852      	ldr	r2, [r2, #4]
 8001210:	0256      	lsls	r6, r2, #9
 8001212:	d482      	bmi.n	800111a <HAL_RCC_OscConfig+0x9a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001214:	4a4c      	ldr	r2, [pc, #304]	; (8001348 <HAL_RCC_OscConfig+0x2c8>)
 8001216:	6812      	ldr	r2, [r2, #0]
 8001218:	0795      	lsls	r5, r2, #30
 800121a:	d532      	bpl.n	8001282 <HAL_RCC_OscConfig+0x202>
 800121c:	68e2      	ldr	r2, [r4, #12]
 800121e:	2a01      	cmp	r2, #1
 8001220:	d02f      	beq.n	8001282 <HAL_RCC_OscConfig+0x202>
        return HAL_ERROR;
 8001222:	2001      	movs	r0, #1
}
 8001224:	b002      	add	sp, #8
 8001226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 800122a:	4b47      	ldr	r3, [pc, #284]	; (8001348 <HAL_RCC_OscConfig+0x2c8>)
 800122c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800122e:	461e      	mov	r6, r3
      __HAL_RCC_LSI_DISABLE();
 8001230:	f022 0201 	bic.w	r2, r2, #1
 8001234:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001236:	f7ff fd25 	bl	8000c84 <HAL_GetTick>
 800123a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800123c:	e004      	b.n	8001248 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800123e:	f7ff fd21 	bl	8000c84 <HAL_GetTick>
 8001242:	1b40      	subs	r0, r0, r5
 8001244:	2802      	cmp	r0, #2
 8001246:	d839      	bhi.n	80012bc <HAL_RCC_OscConfig+0x23c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001248:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800124a:	079f      	lsls	r7, r3, #30
 800124c:	d4f7      	bmi.n	800123e <HAL_RCC_OscConfig+0x1be>
 800124e:	e7ba      	b.n	80011c6 <HAL_RCC_OscConfig+0x146>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001250:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8001252:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001254:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001258:	641a      	str	r2, [r3, #64]	; 0x40
 800125a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001260:	9301      	str	r3, [sp, #4]
 8001262:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001264:	e781      	b.n	800116a <HAL_RCC_OscConfig+0xea>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001266:	684a      	ldr	r2, [r1, #4]
 8001268:	0250      	lsls	r0, r2, #9
 800126a:	f57f af20 	bpl.w	80010ae <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800126e:	4a36      	ldr	r2, [pc, #216]	; (8001348 <HAL_RCC_OscConfig+0x2c8>)
 8001270:	6812      	ldr	r2, [r2, #0]
 8001272:	0391      	lsls	r1, r2, #14
 8001274:	f57f af44 	bpl.w	8001100 <HAL_RCC_OscConfig+0x80>
 8001278:	6862      	ldr	r2, [r4, #4]
 800127a:	2a00      	cmp	r2, #0
 800127c:	f47f af40 	bne.w	8001100 <HAL_RCC_OscConfig+0x80>
 8001280:	e7cf      	b.n	8001222 <HAL_RCC_OscConfig+0x1a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001282:	4931      	ldr	r1, [pc, #196]	; (8001348 <HAL_RCC_OscConfig+0x2c8>)
 8001284:	6920      	ldr	r0, [r4, #16]
 8001286:	680a      	ldr	r2, [r1, #0]
 8001288:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800128c:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001290:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001292:	071a      	lsls	r2, r3, #28
 8001294:	f57f af62 	bpl.w	800115c <HAL_RCC_OscConfig+0xdc>
 8001298:	e780      	b.n	800119c <HAL_RCC_OscConfig+0x11c>
      PWR->CR1 |= PWR_CR1_DBP;
 800129a:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800129c:	461f      	mov	r7, r3
      PWR->CR1 |= PWR_CR1_DBP;
 800129e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012a2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80012a4:	f7ff fcee 	bl	8000c84 <HAL_GetTick>
 80012a8:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	05da      	lsls	r2, r3, #23
 80012ae:	f53f af61 	bmi.w	8001174 <HAL_RCC_OscConfig+0xf4>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012b2:	f7ff fce7 	bl	8000c84 <HAL_GetTick>
 80012b6:	1b80      	subs	r0, r0, r6
 80012b8:	2864      	cmp	r0, #100	; 0x64
 80012ba:	d9f6      	bls.n	80012aa <HAL_RCC_OscConfig+0x22a>
            return HAL_TIMEOUT;
 80012bc:	2003      	movs	r0, #3
}
 80012be:	b002      	add	sp, #8
 80012c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012c4:	4b20      	ldr	r3, [pc, #128]	; (8001348 <HAL_RCC_OscConfig+0x2c8>)
 80012c6:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012c8:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80012d6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012d8:	f7ff fcd4 	bl	8000c84 <HAL_GetTick>
 80012dc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012de:	e004      	b.n	80012ea <HAL_RCC_OscConfig+0x26a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012e0:	f7ff fcd0 	bl	8000c84 <HAL_GetTick>
 80012e4:	1b40      	subs	r0, r0, r5
 80012e6:	2864      	cmp	r0, #100	; 0x64
 80012e8:	d8e8      	bhi.n	80012bc <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ea:	6833      	ldr	r3, [r6, #0]
 80012ec:	039b      	lsls	r3, r3, #14
 80012ee:	d4f7      	bmi.n	80012e0 <HAL_RCC_OscConfig+0x260>
 80012f0:	e705      	b.n	80010fe <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <HAL_RCC_OscConfig+0x2c8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012f4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012fa:	461f      	mov	r7, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012fc:	f022 0201 	bic.w	r2, r2, #1
 8001300:	671a      	str	r2, [r3, #112]	; 0x70
 8001302:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001304:	f022 0204 	bic.w	r2, r2, #4
 8001308:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 800130a:	f7ff fcbb 	bl	8000c84 <HAL_GetTick>
 800130e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001310:	e004      	b.n	800131c <HAL_RCC_OscConfig+0x29c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001312:	f7ff fcb7 	bl	8000c84 <HAL_GetTick>
 8001316:	1b80      	subs	r0, r0, r6
 8001318:	4540      	cmp	r0, r8
 800131a:	d8cf      	bhi.n	80012bc <HAL_RCC_OscConfig+0x23c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800131c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800131e:	0798      	lsls	r0, r3, #30
 8001320:	d4f7      	bmi.n	8001312 <HAL_RCC_OscConfig+0x292>
    if (pwrclkchanged == SET)
 8001322:	2d00      	cmp	r5, #0
 8001324:	f43f af52 	beq.w	80011cc <HAL_RCC_OscConfig+0x14c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001328:	4a07      	ldr	r2, [pc, #28]	; (8001348 <HAL_RCC_OscConfig+0x2c8>)
 800132a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800132c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001330:	6413      	str	r3, [r2, #64]	; 0x40
 8001332:	e74b      	b.n	80011cc <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_DISABLE();
 8001334:	4b04      	ldr	r3, [pc, #16]	; (8001348 <HAL_RCC_OscConfig+0x2c8>)
 8001336:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001338:	461e      	mov	r6, r3
        __HAL_RCC_HSI_DISABLE();
 800133a:	f022 0201 	bic.w	r2, r2, #1
 800133e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001340:	f7ff fca0 	bl	8000c84 <HAL_GetTick>
 8001344:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x2da>
 8001348:	40023800 	.word	0x40023800
 800134c:	40007000 	.word	0x40007000
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001350:	f7ff fc98 	bl	8000c84 <HAL_GetTick>
 8001354:	1b40      	subs	r0, r0, r5
 8001356:	2802      	cmp	r0, #2
 8001358:	d8b0      	bhi.n	80012bc <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800135a:	6833      	ldr	r3, [r6, #0]
 800135c:	0799      	lsls	r1, r3, #30
 800135e:	d4f7      	bmi.n	8001350 <HAL_RCC_OscConfig+0x2d0>
 8001360:	6823      	ldr	r3, [r4, #0]
 8001362:	e6f9      	b.n	8001158 <HAL_RCC_OscConfig+0xd8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001364:	4a42      	ldr	r2, [pc, #264]	; (8001470 <HAL_RCC_OscConfig+0x3f0>)
 8001366:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 800136e:	f7ff fc89 	bl	8000c84 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001372:	4f3f      	ldr	r7, [pc, #252]	; (8001470 <HAL_RCC_OscConfig+0x3f0>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001374:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001378:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800137a:	e004      	b.n	8001386 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800137c:	f7ff fc82 	bl	8000c84 <HAL_GetTick>
 8001380:	1b80      	subs	r0, r0, r6
 8001382:	4540      	cmp	r0, r8
 8001384:	d89a      	bhi.n	80012bc <HAL_RCC_OscConfig+0x23c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001386:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001388:	079b      	lsls	r3, r3, #30
 800138a:	d5f7      	bpl.n	800137c <HAL_RCC_OscConfig+0x2fc>
    if (pwrclkchanged == SET)
 800138c:	2d00      	cmp	r5, #0
 800138e:	f43f af1d 	beq.w	80011cc <HAL_RCC_OscConfig+0x14c>
 8001392:	e7c9      	b.n	8001328 <HAL_RCC_OscConfig+0x2a8>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001394:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 8001396:	685a      	ldr	r2, [r3, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001398:	f43f af36 	beq.w	8001208 <HAL_RCC_OscConfig+0x188>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800139c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013a0:	69e1      	ldr	r1, [r4, #28]
 80013a2:	428b      	cmp	r3, r1
 80013a4:	f47f af3d 	bne.w	8001222 <HAL_RCC_OscConfig+0x1a2>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013a8:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ac:	6a21      	ldr	r1, [r4, #32]
 80013ae:	428b      	cmp	r3, r1
 80013b0:	f47f af37 	bne.w	8001222 <HAL_RCC_OscConfig+0x1a2>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80013b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80013ba:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013bc:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 80013c0:	f47f af2f 	bne.w	8001222 <HAL_RCC_OscConfig+0x1a2>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80013c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80013c6:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 80013ca:	085b      	lsrs	r3, r3, #1
 80013cc:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013ce:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 80013d2:	f47f af26 	bne.w	8001222 <HAL_RCC_OscConfig+0x1a2>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80013d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80013d8:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80013dc:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
  return HAL_OK;
 80013e0:	bf14      	ite	ne
 80013e2:	2001      	movne	r0, #1
 80013e4:	2000      	moveq	r0, #0
 80013e6:	e70f      	b.n	8001208 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013e8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	e674      	b.n	80010e2 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013f8:	f042 0204 	orr.w	r2, r2, #4
 80013fc:	671a      	str	r2, [r3, #112]	; 0x70
 80013fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001400:	f042 0201 	orr.w	r2, r2, #1
 8001404:	671a      	str	r2, [r3, #112]	; 0x70
 8001406:	e7b2      	b.n	800136e <HAL_RCC_OscConfig+0x2ee>
    return HAL_ERROR;
 8001408:	2001      	movs	r0, #1
}
 800140a:	4770      	bx	lr
        tickstart = HAL_GetTick();
 800140c:	f7ff fc3a 	bl	8000c84 <HAL_GetTick>
 8001410:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001412:	e005      	b.n	8001420 <HAL_RCC_OscConfig+0x3a0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001414:	f7ff fc36 	bl	8000c84 <HAL_GetTick>
 8001418:	1b80      	subs	r0, r0, r6
 800141a:	2802      	cmp	r0, #2
 800141c:	f63f af4e 	bhi.w	80012bc <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001420:	682b      	ldr	r3, [r5, #0]
 8001422:	0199      	lsls	r1, r3, #6
 8001424:	d4f6      	bmi.n	8001414 <HAL_RCC_OscConfig+0x394>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001426:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001428:	69e3      	ldr	r3, [r4, #28]
 800142a:	0852      	lsrs	r2, r2, #1
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800142c:	4e10      	ldr	r6, [pc, #64]	; (8001470 <HAL_RCC_OscConfig+0x3f0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800142e:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 8001432:	3a01      	subs	r2, #1
 8001434:	430b      	orrs	r3, r1
 8001436:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001438:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800143c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001440:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001444:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001448:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800144a:	682b      	ldr	r3, [r5, #0]
 800144c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001450:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001452:	f7ff fc17 	bl	8000c84 <HAL_GetTick>
 8001456:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001458:	e005      	b.n	8001466 <HAL_RCC_OscConfig+0x3e6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800145a:	f7ff fc13 	bl	8000c84 <HAL_GetTick>
 800145e:	1b00      	subs	r0, r0, r4
 8001460:	2802      	cmp	r0, #2
 8001462:	f63f af2b 	bhi.w	80012bc <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001466:	6833      	ldr	r3, [r6, #0]
 8001468:	019a      	lsls	r2, r3, #6
 800146a:	d5f6      	bpl.n	800145a <HAL_RCC_OscConfig+0x3da>
 800146c:	e6cb      	b.n	8001206 <HAL_RCC_OscConfig+0x186>
 800146e:	bf00      	nop
 8001470:	40023800 	.word	0x40023800

08001474 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001474:	2800      	cmp	r0, #0
 8001476:	f000 80b4 	beq.w	80015e2 <HAL_RCC_ClockConfig+0x16e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800147a:	4a61      	ldr	r2, [pc, #388]	; (8001600 <HAL_RCC_ClockConfig+0x18c>)
 800147c:	6813      	ldr	r3, [r2, #0]
 800147e:	f003 030f 	and.w	r3, r3, #15
 8001482:	428b      	cmp	r3, r1
{
 8001484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001488:	4604      	mov	r4, r0
 800148a:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800148c:	d20c      	bcs.n	80014a8 <HAL_RCC_ClockConfig+0x34>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800148e:	6813      	ldr	r3, [r2, #0]
 8001490:	f023 030f 	bic.w	r3, r3, #15
 8001494:	430b      	orrs	r3, r1
 8001496:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001498:	6813      	ldr	r3, [r2, #0]
 800149a:	f003 030f 	and.w	r3, r3, #15
 800149e:	428b      	cmp	r3, r1
 80014a0:	d002      	beq.n	80014a8 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80014a2:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);

  return HAL_OK;
}
 80014a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014a8:	6823      	ldr	r3, [r4, #0]
 80014aa:	0798      	lsls	r0, r3, #30
 80014ac:	d514      	bpl.n	80014d8 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ae:	0759      	lsls	r1, r3, #29
 80014b0:	d504      	bpl.n	80014bc <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014b2:	4954      	ldr	r1, [pc, #336]	; (8001604 <HAL_RCC_ClockConfig+0x190>)
 80014b4:	688a      	ldr	r2, [r1, #8]
 80014b6:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80014ba:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014bc:	071a      	lsls	r2, r3, #28
 80014be:	d504      	bpl.n	80014ca <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014c0:	4950      	ldr	r1, [pc, #320]	; (8001604 <HAL_RCC_ClockConfig+0x190>)
 80014c2:	688a      	ldr	r2, [r1, #8]
 80014c4:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80014c8:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014ca:	494e      	ldr	r1, [pc, #312]	; (8001604 <HAL_RCC_ClockConfig+0x190>)
 80014cc:	68a0      	ldr	r0, [r4, #8]
 80014ce:	688a      	ldr	r2, [r1, #8]
 80014d0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80014d4:	4302      	orrs	r2, r0
 80014d6:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014d8:	07df      	lsls	r7, r3, #31
 80014da:	d521      	bpl.n	8001520 <HAL_RCC_ClockConfig+0xac>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014dc:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014de:	4b49      	ldr	r3, [pc, #292]	; (8001604 <HAL_RCC_ClockConfig+0x190>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014e0:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e2:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014e4:	d07f      	beq.n	80015e6 <HAL_RCC_ClockConfig+0x172>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014e6:	2a02      	cmp	r2, #2
 80014e8:	d078      	beq.n	80015dc <HAL_RCC_ClockConfig+0x168>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ea:	0799      	lsls	r1, r3, #30
 80014ec:	d5d9      	bpl.n	80014a2 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014ee:	4945      	ldr	r1, [pc, #276]	; (8001604 <HAL_RCC_ClockConfig+0x190>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014f0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014f4:	688b      	ldr	r3, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014f6:	460f      	mov	r7, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014f8:	f023 0303 	bic.w	r3, r3, #3
 80014fc:	4313      	orrs	r3, r2
 80014fe:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001500:	f7ff fbc0 	bl	8000c84 <HAL_GetTick>
 8001504:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001506:	e004      	b.n	8001512 <HAL_RCC_ClockConfig+0x9e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001508:	f7ff fbbc 	bl	8000c84 <HAL_GetTick>
 800150c:	1b80      	subs	r0, r0, r6
 800150e:	4540      	cmp	r0, r8
 8001510:	d86c      	bhi.n	80015ec <HAL_RCC_ClockConfig+0x178>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	6862      	ldr	r2, [r4, #4]
 8001516:	f003 030c 	and.w	r3, r3, #12
 800151a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800151e:	d1f3      	bne.n	8001508 <HAL_RCC_ClockConfig+0x94>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001520:	4a37      	ldr	r2, [pc, #220]	; (8001600 <HAL_RCC_ClockConfig+0x18c>)
 8001522:	6813      	ldr	r3, [r2, #0]
 8001524:	f003 030f 	and.w	r3, r3, #15
 8001528:	42ab      	cmp	r3, r5
 800152a:	d909      	bls.n	8001540 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800152c:	6813      	ldr	r3, [r2, #0]
 800152e:	f023 030f 	bic.w	r3, r3, #15
 8001532:	432b      	orrs	r3, r5
 8001534:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001536:	6813      	ldr	r3, [r2, #0]
 8001538:	f003 030f 	and.w	r3, r3, #15
 800153c:	42ab      	cmp	r3, r5
 800153e:	d1b0      	bne.n	80014a2 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001540:	6823      	ldr	r3, [r4, #0]
 8001542:	075a      	lsls	r2, r3, #29
 8001544:	d506      	bpl.n	8001554 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001546:	492f      	ldr	r1, [pc, #188]	; (8001604 <HAL_RCC_ClockConfig+0x190>)
 8001548:	68e0      	ldr	r0, [r4, #12]
 800154a:	688a      	ldr	r2, [r1, #8]
 800154c:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8001550:	4302      	orrs	r2, r0
 8001552:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001554:	071b      	lsls	r3, r3, #28
 8001556:	d431      	bmi.n	80015bc <HAL_RCC_ClockConfig+0x148>
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001558:	492a      	ldr	r1, [pc, #168]	; (8001604 <HAL_RCC_ClockConfig+0x190>)
 800155a:	688b      	ldr	r3, [r1, #8]
 800155c:	f003 030c 	and.w	r3, r3, #12
 8001560:	2b04      	cmp	r3, #4
 8001562:	d039      	beq.n	80015d8 <HAL_RCC_ClockConfig+0x164>
 8001564:	2b08      	cmp	r3, #8
 8001566:	d118      	bne.n	800159a <HAL_RCC_ClockConfig+0x126>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001568:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800156a:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800156c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001570:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001572:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8001576:	d03b      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x17c>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001578:	4823      	ldr	r0, [pc, #140]	; (8001608 <HAL_RCC_ClockConfig+0x194>)
 800157a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800157e:	2300      	movs	r3, #0
 8001580:	fba1 0100 	umull	r0, r1, r1, r0
 8001584:	f7fe fe40 	bl	8000208 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001588:	4b1e      	ldr	r3, [pc, #120]	; (8001604 <HAL_RCC_ClockConfig+0x190>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001590:	3301      	adds	r3, #1
 8001592:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8001594:	fbb0 f3f3 	udiv	r3, r0, r3
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 8001598:	e000      	b.n	800159c <HAL_RCC_ClockConfig+0x128>
      sysclockfreq = HSI_VALUE;
 800159a:	4b1c      	ldr	r3, [pc, #112]	; (800160c <HAL_RCC_ClockConfig+0x198>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800159c:	4a19      	ldr	r2, [pc, #100]	; (8001604 <HAL_RCC_ClockConfig+0x190>)
 800159e:	4c1c      	ldr	r4, [pc, #112]	; (8001610 <HAL_RCC_ClockConfig+0x19c>)
 80015a0:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 80015a2:	481c      	ldr	r0, [pc, #112]	; (8001614 <HAL_RCC_ClockConfig+0x1a0>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015a4:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80015a8:	491b      	ldr	r1, [pc, #108]	; (8001618 <HAL_RCC_ClockConfig+0x1a4>)
  HAL_InitTick(uwTickPrio);
 80015aa:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015ac:	5ca2      	ldrb	r2, [r4, r2]
 80015ae:	40d3      	lsrs	r3, r2
 80015b0:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 80015b2:	f7ff fb2b 	bl	8000c0c <HAL_InitTick>
  return HAL_OK;
 80015b6:	2000      	movs	r0, #0
}
 80015b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015bc:	4a11      	ldr	r2, [pc, #68]	; (8001604 <HAL_RCC_ClockConfig+0x190>)
 80015be:	6921      	ldr	r1, [r4, #16]
 80015c0:	6893      	ldr	r3, [r2, #8]
 80015c2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80015c6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015ca:	490e      	ldr	r1, [pc, #56]	; (8001604 <HAL_RCC_ClockConfig+0x190>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015cc:	6093      	str	r3, [r2, #8]
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015ce:	688b      	ldr	r3, [r1, #8]
 80015d0:	f003 030c 	and.w	r3, r3, #12
 80015d4:	2b04      	cmp	r3, #4
 80015d6:	d1c5      	bne.n	8001564 <HAL_RCC_ClockConfig+0xf0>
 80015d8:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <HAL_RCC_ClockConfig+0x194>)
 80015da:	e7df      	b.n	800159c <HAL_RCC_ClockConfig+0x128>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015dc:	0198      	lsls	r0, r3, #6
 80015de:	d486      	bmi.n	80014ee <HAL_RCC_ClockConfig+0x7a>
 80015e0:	e75f      	b.n	80014a2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80015e2:	2001      	movs	r0, #1
}
 80015e4:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e6:	039e      	lsls	r6, r3, #14
 80015e8:	d481      	bmi.n	80014ee <HAL_RCC_ClockConfig+0x7a>
 80015ea:	e75a      	b.n	80014a2 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 80015ec:	2003      	movs	r0, #3
 80015ee:	e759      	b.n	80014a4 <HAL_RCC_ClockConfig+0x30>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015f0:	4806      	ldr	r0, [pc, #24]	; (800160c <HAL_RCC_ClockConfig+0x198>)
 80015f2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80015f6:	fba1 0100 	umull	r0, r1, r1, r0
 80015fa:	f7fe fe05 	bl	8000208 <__aeabi_uldivmod>
 80015fe:	e7c3      	b.n	8001588 <HAL_RCC_ClockConfig+0x114>
 8001600:	40023c00 	.word	0x40023c00
 8001604:	40023800 	.word	0x40023800
 8001608:	017d7840 	.word	0x017d7840
 800160c:	00f42400 	.word	0x00f42400
 8001610:	080021b4 	.word	0x080021b4
 8001614:	20000008 	.word	0x20000008
 8001618:	20000000 	.word	0x20000000

0800161c <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800161c:	2800      	cmp	r0, #0
 800161e:	f000 8094 	beq.w	800174a <HAL_TIM_Base_Init+0x12e>
{
 8001622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001624:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001628:	4604      	mov	r4, r0
 800162a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800162e:	2b00      	cmp	r3, #0
 8001630:	d07b      	beq.n	800172a <HAL_TIM_Base_Init+0x10e>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001632:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001634:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001636:	4947      	ldr	r1, [pc, #284]	; (8001754 <HAL_TIM_Base_Init+0x138>)
 8001638:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 800163c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001640:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 8001644:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001646:	fab1 f181 	clz	r1, r1
 800164a:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800164e:	d050      	beq.n	80016f2 <HAL_TIM_Base_Init+0xd6>
 8001650:	2900      	cmp	r1, #0
 8001652:	d14e      	bne.n	80016f2 <HAL_TIM_Base_Init+0xd6>
 8001654:	4d40      	ldr	r5, [pc, #256]	; (8001758 <HAL_TIM_Base_Init+0x13c>)
 8001656:	4841      	ldr	r0, [pc, #260]	; (800175c <HAL_TIM_Base_Init+0x140>)
 8001658:	4282      	cmp	r2, r0
 800165a:	bf18      	it	ne
 800165c:	42aa      	cmpne	r2, r5
 800165e:	d048      	beq.n	80016f2 <HAL_TIM_Base_Init+0xd6>
 8001660:	4f3f      	ldr	r7, [pc, #252]	; (8001760 <HAL_TIM_Base_Init+0x144>)
 8001662:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001666:	1bd7      	subs	r7, r2, r7
 8001668:	42aa      	cmp	r2, r5
 800166a:	fab7 f787 	clz	r7, r7
 800166e:	ea4f 1757 	mov.w	r7, r7, lsr #5
 8001672:	d05f      	beq.n	8001734 <HAL_TIM_Base_Init+0x118>
 8001674:	2f00      	cmp	r7, #0
 8001676:	d15d      	bne.n	8001734 <HAL_TIM_Base_Init+0x118>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001678:	4f3a      	ldr	r7, [pc, #232]	; (8001764 <HAL_TIM_Base_Init+0x148>)
 800167a:	483b      	ldr	r0, [pc, #236]	; (8001768 <HAL_TIM_Base_Init+0x14c>)
 800167c:	4282      	cmp	r2, r0
 800167e:	bf18      	it	ne
 8001680:	42ba      	cmpne	r2, r7
 8001682:	bf0c      	ite	eq
 8001684:	2701      	moveq	r7, #1
 8001686:	2700      	movne	r7, #0
 8001688:	d061      	beq.n	800174e <HAL_TIM_Base_Init+0x132>
 800168a:	4d38      	ldr	r5, [pc, #224]	; (800176c <HAL_TIM_Base_Init+0x150>)
 800168c:	f5a0 3096 	sub.w	r0, r0, #76800	; 0x12c00
 8001690:	4282      	cmp	r2, r0
 8001692:	bf18      	it	ne
 8001694:	42aa      	cmpne	r2, r5
 8001696:	d035      	beq.n	8001704 <HAL_TIM_Base_Init+0xe8>
 8001698:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800169c:	4282      	cmp	r2, r0
 800169e:	d056      	beq.n	800174e <HAL_TIM_Base_Init+0x132>
 80016a0:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80016a4:	4282      	cmp	r2, r0
 80016a6:	d052      	beq.n	800174e <HAL_TIM_Base_Init+0x132>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80016a8:	69a1      	ldr	r1, [r4, #24]
 80016aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80016ae:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80016b0:	430b      	orrs	r3, r1

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80016b2:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80016b4:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80016b6:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80016b8:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80016ba:	2301      	movs	r3, #1
  return HAL_OK;
 80016bc:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 80016be:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016c0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016c4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80016c8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80016cc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80016d0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80016d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80016d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016dc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80016e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80016e4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80016e8:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80016ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80016f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016f2:	4f1b      	ldr	r7, [pc, #108]	; (8001760 <HAL_TIM_Base_Init+0x144>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80016f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80016f8:	68a5      	ldr	r5, [r4, #8]
 80016fa:	1bd7      	subs	r7, r2, r7
 80016fc:	432b      	orrs	r3, r5
 80016fe:	fab7 f787 	clz	r7, r7
 8001702:	097f      	lsrs	r7, r7, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001704:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800170a:	69a5      	ldr	r5, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800170c:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 800170e:	68e6      	ldr	r6, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8001710:	6860      	ldr	r0, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001712:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001716:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8001718:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800171a:	62d6      	str	r6, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800171c:	6290      	str	r0, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800171e:	b909      	cbnz	r1, 8001724 <HAL_TIM_Base_Init+0x108>
 8001720:	2f00      	cmp	r7, #0
 8001722:	d0ca      	beq.n	80016ba <HAL_TIM_Base_Init+0x9e>
    TIMx->RCR = Structure->RepetitionCounter;
 8001724:	6963      	ldr	r3, [r4, #20]
 8001726:	6313      	str	r3, [r2, #48]	; 0x30
 8001728:	e7c7      	b.n	80016ba <HAL_TIM_Base_Init+0x9e>
    htim->Lock = HAL_UNLOCKED;
 800172a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800172e:	f7ff f9fd 	bl	8000b2c <HAL_TIM_Base_MspInit>
 8001732:	e77e      	b.n	8001632 <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001734:	480e      	ldr	r0, [pc, #56]	; (8001770 <HAL_TIM_Base_Init+0x154>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800173a:	68a5      	ldr	r5, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800173c:	4282      	cmp	r2, r0
    tmpcr1 |= Structure->CounterMode;
 800173e:	ea43 0305 	orr.w	r3, r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001742:	d0df      	beq.n	8001704 <HAL_TIM_Base_Init+0xe8>
 8001744:	2f00      	cmp	r7, #0
 8001746:	d1dd      	bne.n	8001704 <HAL_TIM_Base_Init+0xe8>
 8001748:	e796      	b.n	8001678 <HAL_TIM_Base_Init+0x5c>
    return HAL_ERROR;
 800174a:	2001      	movs	r0, #1
}
 800174c:	4770      	bx	lr
 800174e:	2700      	movs	r7, #0
 8001750:	e7d8      	b.n	8001704 <HAL_TIM_Base_Init+0xe8>
 8001752:	bf00      	nop
 8001754:	40010000 	.word	0x40010000
 8001758:	40000400 	.word	0x40000400
 800175c:	40000800 	.word	0x40000800
 8001760:	40010400 	.word	0x40010400
 8001764:	40014000 	.word	0x40014000
 8001768:	40014400 	.word	0x40014400
 800176c:	40014800 	.word	0x40014800
 8001770:	40000c00 	.word	0x40000c00

08001774 <HAL_TIM_OC_MspInit>:
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop

08001778 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8001778:	2800      	cmp	r0, #0
 800177a:	f000 8094 	beq.w	80018a6 <HAL_TIM_OC_Init+0x12e>
{
 800177e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8001780:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001784:	4604      	mov	r4, r0
 8001786:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800178a:	2b00      	cmp	r3, #0
 800178c:	d07b      	beq.n	8001886 <HAL_TIM_OC_Init+0x10e>
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800178e:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001790:	2302      	movs	r3, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001792:	4947      	ldr	r1, [pc, #284]	; (80018b0 <HAL_TIM_OC_Init+0x138>)
 8001794:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 8001798:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800179c:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 80017a0:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017a2:	fab1 f181 	clz	r1, r1
 80017a6:	ea4f 1151 	mov.w	r1, r1, lsr #5
 80017aa:	d050      	beq.n	800184e <HAL_TIM_OC_Init+0xd6>
 80017ac:	2900      	cmp	r1, #0
 80017ae:	d14e      	bne.n	800184e <HAL_TIM_OC_Init+0xd6>
 80017b0:	4d40      	ldr	r5, [pc, #256]	; (80018b4 <HAL_TIM_OC_Init+0x13c>)
 80017b2:	4841      	ldr	r0, [pc, #260]	; (80018b8 <HAL_TIM_OC_Init+0x140>)
 80017b4:	4282      	cmp	r2, r0
 80017b6:	bf18      	it	ne
 80017b8:	42aa      	cmpne	r2, r5
 80017ba:	d048      	beq.n	800184e <HAL_TIM_OC_Init+0xd6>
 80017bc:	4f3f      	ldr	r7, [pc, #252]	; (80018bc <HAL_TIM_OC_Init+0x144>)
 80017be:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80017c2:	1bd7      	subs	r7, r2, r7
 80017c4:	42aa      	cmp	r2, r5
 80017c6:	fab7 f787 	clz	r7, r7
 80017ca:	ea4f 1757 	mov.w	r7, r7, lsr #5
 80017ce:	d05f      	beq.n	8001890 <HAL_TIM_OC_Init+0x118>
 80017d0:	2f00      	cmp	r7, #0
 80017d2:	d15d      	bne.n	8001890 <HAL_TIM_OC_Init+0x118>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017d4:	4f3a      	ldr	r7, [pc, #232]	; (80018c0 <HAL_TIM_OC_Init+0x148>)
 80017d6:	483b      	ldr	r0, [pc, #236]	; (80018c4 <HAL_TIM_OC_Init+0x14c>)
 80017d8:	4282      	cmp	r2, r0
 80017da:	bf18      	it	ne
 80017dc:	42ba      	cmpne	r2, r7
 80017de:	bf0c      	ite	eq
 80017e0:	2701      	moveq	r7, #1
 80017e2:	2700      	movne	r7, #0
 80017e4:	d061      	beq.n	80018aa <HAL_TIM_OC_Init+0x132>
 80017e6:	4d38      	ldr	r5, [pc, #224]	; (80018c8 <HAL_TIM_OC_Init+0x150>)
 80017e8:	f5a0 3096 	sub.w	r0, r0, #76800	; 0x12c00
 80017ec:	4282      	cmp	r2, r0
 80017ee:	bf18      	it	ne
 80017f0:	42aa      	cmpne	r2, r5
 80017f2:	d035      	beq.n	8001860 <HAL_TIM_OC_Init+0xe8>
 80017f4:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80017f8:	4282      	cmp	r2, r0
 80017fa:	d056      	beq.n	80018aa <HAL_TIM_OC_Init+0x132>
 80017fc:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8001800:	4282      	cmp	r2, r0
 8001802:	d052      	beq.n	80018aa <HAL_TIM_OC_Init+0x132>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001804:	69a1      	ldr	r1, [r4, #24]
 8001806:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800180a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800180c:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800180e:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8001810:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001812:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001814:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8001816:	2301      	movs	r3, #1
  return HAL_OK;
 8001818:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 800181a:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800181c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001820:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001824:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001828:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800182c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8001830:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001834:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001838:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800183c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001840:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8001844:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8001848:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800184c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800184e:	4f1b      	ldr	r7, [pc, #108]	; (80018bc <HAL_TIM_OC_Init+0x144>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001854:	68a5      	ldr	r5, [r4, #8]
 8001856:	1bd7      	subs	r7, r2, r7
 8001858:	432b      	orrs	r3, r5
 800185a:	fab7 f787 	clz	r7, r7
 800185e:	097f      	lsrs	r7, r7, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001860:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001866:	69a5      	ldr	r5, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001868:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 800186a:	68e6      	ldr	r6, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 800186c:	6860      	ldr	r0, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800186e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001872:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8001874:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001876:	62d6      	str	r6, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001878:	6290      	str	r0, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800187a:	b909      	cbnz	r1, 8001880 <HAL_TIM_OC_Init+0x108>
 800187c:	2f00      	cmp	r7, #0
 800187e:	d0ca      	beq.n	8001816 <HAL_TIM_OC_Init+0x9e>
    TIMx->RCR = Structure->RepetitionCounter;
 8001880:	6963      	ldr	r3, [r4, #20]
 8001882:	6313      	str	r3, [r2, #48]	; 0x30
 8001884:	e7c7      	b.n	8001816 <HAL_TIM_OC_Init+0x9e>
    htim->Lock = HAL_UNLOCKED;
 8001886:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 800188a:	f7ff ff73 	bl	8001774 <HAL_TIM_OC_MspInit>
 800188e:	e77e      	b.n	800178e <HAL_TIM_OC_Init+0x16>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001890:	480e      	ldr	r0, [pc, #56]	; (80018cc <HAL_TIM_OC_Init+0x154>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001896:	68a5      	ldr	r5, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001898:	4282      	cmp	r2, r0
    tmpcr1 |= Structure->CounterMode;
 800189a:	ea43 0305 	orr.w	r3, r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800189e:	d0df      	beq.n	8001860 <HAL_TIM_OC_Init+0xe8>
 80018a0:	2f00      	cmp	r7, #0
 80018a2:	d1dd      	bne.n	8001860 <HAL_TIM_OC_Init+0xe8>
 80018a4:	e796      	b.n	80017d4 <HAL_TIM_OC_Init+0x5c>
    return HAL_ERROR;
 80018a6:	2001      	movs	r0, #1
}
 80018a8:	4770      	bx	lr
 80018aa:	2700      	movs	r7, #0
 80018ac:	e7d8      	b.n	8001860 <HAL_TIM_OC_Init+0xe8>
 80018ae:	bf00      	nop
 80018b0:	40010000 	.word	0x40010000
 80018b4:	40000400 	.word	0x40000400
 80018b8:	40000800 	.word	0x40000800
 80018bc:	40010400 	.word	0x40010400
 80018c0:	40014000 	.word	0x40014000
 80018c4:	40014400 	.word	0x40014400
 80018c8:	40014800 	.word	0x40014800
 80018cc:	40000c00 	.word	0x40000c00

080018d0 <HAL_TIM_OC_Start_IT>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80018d0:	2900      	cmp	r1, #0
 80018d2:	d14f      	bne.n	8001974 <HAL_TIM_OC_Start_IT+0xa4>
 80018d4:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d155      	bne.n	8001988 <HAL_TIM_OC_Start_IT+0xb8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80018dc:	2302      	movs	r3, #2
 80018de:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80018e2:	6803      	ldr	r3, [r0, #0]
 80018e4:	68da      	ldr	r2, [r3, #12]
 80018e6:	f042 0202 	orr.w	r2, r2, #2
 80018ea:	60da      	str	r2, [r3, #12]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80018ec:	2201      	movs	r2, #1
 80018ee:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80018f2:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80018f4:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 80018f8:	ea20 0001 	bic.w	r0, r0, r1
{
 80018fc:	b410      	push	{r4}
  TIMx->CCER &= ~tmp;
 80018fe:	6218      	str	r0, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001900:	4c57      	ldr	r4, [pc, #348]	; (8001a60 <HAL_TIM_OC_Start_IT+0x190>)

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001902:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001904:	42a3      	cmp	r3, r4
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001906:	ea41 0102 	orr.w	r1, r1, r2
 800190a:	6219      	str	r1, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800190c:	d03e      	beq.n	800198c <HAL_TIM_OC_Start_IT+0xbc>
 800190e:	4a55      	ldr	r2, [pc, #340]	; (8001a64 <HAL_TIM_OC_Start_IT+0x194>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d03b      	beq.n	800198c <HAL_TIM_OC_Start_IT+0xbc>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001914:	4a54      	ldr	r2, [pc, #336]	; (8001a68 <HAL_TIM_OC_Start_IT+0x198>)
 8001916:	4c55      	ldr	r4, [pc, #340]	; (8001a6c <HAL_TIM_OC_Start_IT+0x19c>)
 8001918:	4293      	cmp	r3, r2
 800191a:	bf18      	it	ne
 800191c:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8001920:	4853      	ldr	r0, [pc, #332]	; (8001a70 <HAL_TIM_OC_Start_IT+0x1a0>)
 8001922:	4954      	ldr	r1, [pc, #336]	; (8001a74 <HAL_TIM_OC_Start_IT+0x1a4>)
 8001924:	bf0c      	ite	eq
 8001926:	2201      	moveq	r2, #1
 8001928:	2200      	movne	r2, #0
 800192a:	42a3      	cmp	r3, r4
 800192c:	bf08      	it	eq
 800192e:	f042 0201 	orreq.w	r2, r2, #1
 8001932:	4283      	cmp	r3, r0
 8001934:	bf08      	it	eq
 8001936:	f042 0201 	orreq.w	r2, r2, #1
 800193a:	428b      	cmp	r3, r1
 800193c:	bf08      	it	eq
 800193e:	f042 0201 	orreq.w	r2, r2, #1
 8001942:	b93a      	cbnz	r2, 8001954 <HAL_TIM_OC_Start_IT+0x84>
 8001944:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 8001948:	1a18      	subs	r0, r3, r0
 800194a:	fab0 f080 	clz	r0, r0
 800194e:	0940      	lsrs	r0, r0, #5
 8001950:	2800      	cmp	r0, #0
 8001952:	d076      	beq.n	8001a42 <HAL_TIM_OC_Start_IT+0x172>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001954:	6899      	ldr	r1, [r3, #8]
 8001956:	4a48      	ldr	r2, [pc, #288]	; (8001a78 <HAL_TIM_OC_Start_IT+0x1a8>)
 8001958:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800195a:	2a06      	cmp	r2, #6
 800195c:	d01f      	beq.n	800199e <HAL_TIM_OC_Start_IT+0xce>
 800195e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001962:	d01c      	beq.n	800199e <HAL_TIM_OC_Start_IT+0xce>
      __HAL_TIM_ENABLE(htim);
 8001964:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8001966:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8001968:	f042 0201 	orr.w	r2, r2, #1
 800196c:	601a      	str	r2, [r3, #0]
}
 800196e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001972:	4770      	bx	lr
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001974:	2904      	cmp	r1, #4
 8001976:	d057      	beq.n	8001a28 <HAL_TIM_OC_Start_IT+0x158>
 8001978:	2908      	cmp	r1, #8
 800197a:	d048      	beq.n	8001a0e <HAL_TIM_OC_Start_IT+0x13e>
 800197c:	290c      	cmp	r1, #12
 800197e:	d112      	bne.n	80019a6 <HAL_TIM_OC_Start_IT+0xd6>
 8001980:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001984:	2b01      	cmp	r3, #1
 8001986:	d039      	beq.n	80019fc <HAL_TIM_OC_Start_IT+0x12c>
    return HAL_ERROR;
 8001988:	2001      	movs	r0, #1
}
 800198a:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 800198c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800198e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001992:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001994:	4a38      	ldr	r2, [pc, #224]	; (8001a78 <HAL_TIM_OC_Start_IT+0x1a8>)
 8001996:	6899      	ldr	r1, [r3, #8]
 8001998:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800199a:	2a06      	cmp	r2, #6
 800199c:	d1df      	bne.n	800195e <HAL_TIM_OC_Start_IT+0x8e>
  return HAL_OK;
 800199e:	2000      	movs	r0, #0
}
 80019a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80019a4:	4770      	bx	lr
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80019a6:	2910      	cmp	r1, #16
 80019a8:	d050      	beq.n	8001a4c <HAL_TIM_OC_Start_IT+0x17c>
 80019aa:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d1ea      	bne.n	8001988 <HAL_TIM_OC_Start_IT+0xb8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80019b2:	2302      	movs	r3, #2
 80019b4:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
  switch (Channel)
 80019b8:	290c      	cmp	r1, #12
 80019ba:	d81d      	bhi.n	80019f8 <HAL_TIM_OC_Start_IT+0x128>
 80019bc:	a301      	add	r3, pc, #4	; (adr r3, 80019c4 <HAL_TIM_OC_Start_IT+0xf4>)
 80019be:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80019c2:	bf00      	nop
 80019c4:	080018e3 	.word	0x080018e3
 80019c8:	080019f9 	.word	0x080019f9
 80019cc:	080019f9 	.word	0x080019f9
 80019d0:	080019f9 	.word	0x080019f9
 80019d4:	08001a37 	.word	0x08001a37
 80019d8:	080019f9 	.word	0x080019f9
 80019dc:	080019f9 	.word	0x080019f9
 80019e0:	080019f9 	.word	0x080019f9
 80019e4:	08001a1d 	.word	0x08001a1d
 80019e8:	080019f9 	.word	0x080019f9
 80019ec:	080019f9 	.word	0x080019f9
 80019f0:	080019f9 	.word	0x080019f9
 80019f4:	08001a03 	.word	0x08001a03
 80019f8:	6803      	ldr	r3, [r0, #0]
 80019fa:	e777      	b.n	80018ec <HAL_TIM_OC_Start_IT+0x1c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80019fc:	2302      	movs	r3, #2
 80019fe:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001a02:	6803      	ldr	r3, [r0, #0]
 8001a04:	68da      	ldr	r2, [r3, #12]
 8001a06:	f042 0210 	orr.w	r2, r2, #16
 8001a0a:	60da      	str	r2, [r3, #12]
      break;
 8001a0c:	e76e      	b.n	80018ec <HAL_TIM_OC_Start_IT+0x1c>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001a0e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d1b8      	bne.n	8001988 <HAL_TIM_OC_Start_IT+0xb8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a16:	2302      	movs	r3, #2
 8001a18:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001a1c:	6803      	ldr	r3, [r0, #0]
 8001a1e:	68da      	ldr	r2, [r3, #12]
 8001a20:	f042 0208 	orr.w	r2, r2, #8
 8001a24:	60da      	str	r2, [r3, #12]
      break;
 8001a26:	e761      	b.n	80018ec <HAL_TIM_OC_Start_IT+0x1c>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001a28:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d1ab      	bne.n	8001988 <HAL_TIM_OC_Start_IT+0xb8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a30:	2302      	movs	r3, #2
 8001a32:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001a36:	6803      	ldr	r3, [r0, #0]
 8001a38:	68da      	ldr	r2, [r3, #12]
 8001a3a:	f042 0204 	orr.w	r2, r2, #4
 8001a3e:	60da      	str	r2, [r3, #12]
      break;
 8001a40:	e754      	b.n	80018ec <HAL_TIM_OC_Start_IT+0x1c>
    __HAL_TIM_ENABLE(htim);
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	f042 0201 	orr.w	r2, r2, #1
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	e790      	b.n	800196e <HAL_TIM_OC_Start_IT+0x9e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001a4c:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d199      	bne.n	8001988 <HAL_TIM_OC_Start_IT+0xb8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a54:	2202      	movs	r2, #2
 8001a56:	6803      	ldr	r3, [r0, #0]
 8001a58:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  switch (Channel)
 8001a5c:	e746      	b.n	80018ec <HAL_TIM_OC_Start_IT+0x1c>
 8001a5e:	bf00      	nop
 8001a60:	40010000 	.word	0x40010000
 8001a64:	40010400 	.word	0x40010400
 8001a68:	40000400 	.word	0x40000400
 8001a6c:	40000800 	.word	0x40000800
 8001a70:	40000c00 	.word	0x40000c00
 8001a74:	40014000 	.word	0x40014000
 8001a78:	00010007 	.word	0x00010007

08001a7c <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8001a7c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	f000 8104 	beq.w	8001c8e <HAL_TIM_OC_ConfigChannel+0x212>
 8001a86:	2301      	movs	r3, #1
{
 8001a88:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8001a8a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8001a8e:	2a14      	cmp	r2, #20
 8001a90:	d837      	bhi.n	8001b02 <HAL_TIM_OC_ConfigChannel+0x86>
 8001a92:	e8df f012 	tbh	[pc, r2, lsl #1]
 8001a96:	0015      	.short	0x0015
 8001a98:	00360036 	.word	0x00360036
 8001a9c:	00640036 	.word	0x00640036
 8001aa0:	00360036 	.word	0x00360036
 8001aa4:	00b10036 	.word	0x00b10036
 8001aa8:	00360036 	.word	0x00360036
 8001aac:	008b0036 	.word	0x008b0036
 8001ab0:	00360036 	.word	0x00360036
 8001ab4:	00d60036 	.word	0x00d60036
 8001ab8:	00360036 	.word	0x00360036
 8001abc:	003c0036 	.word	0x003c0036
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ac0:	6803      	ldr	r3, [r0, #0]
  tmpccer |= OC_Config->OCPolarity;
 8001ac2:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ac6:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8001ac8:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001aca:	f025 0501 	bic.w	r5, r5, #1
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001ace:	4c90      	ldr	r4, [pc, #576]	; (8001d10 <HAL_TIM_OC_ConfigChannel+0x294>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ad0:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8001ad2:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8001ad4:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8001ad6:	699d      	ldr	r5, [r3, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8001ad8:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001adc:	402c      	ands	r4, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001ade:	4d8d      	ldr	r5, [pc, #564]	; (8001d14 <HAL_TIM_OC_ConfigChannel+0x298>)
  tmpccer |= OC_Config->OCPolarity;
 8001ae0:	ea42 020c 	orr.w	r2, r2, ip
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001ae4:	42ab      	cmp	r3, r5
  tmpccmrx |= OC_Config->OCMode;
 8001ae6:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001aea:	f000 80de 	beq.w	8001caa <HAL_TIM_OC_ConfigChannel+0x22e>
 8001aee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001af2:	42ab      	cmp	r3, r5
 8001af4:	f000 80d9 	beq.w	8001caa <HAL_TIM_OC_ConfigChannel+0x22e>
  TIMx->CCR1 = OC_Config->Pulse;
 8001af8:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001afa:	605e      	str	r6, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001afc:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001afe:	6359      	str	r1, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8001b00:	621a      	str	r2, [r3, #32]
  __HAL_UNLOCK(htim);
 8001b02:	2300      	movs	r3, #0
 8001b04:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001b08:	4618      	mov	r0, r3
}
 8001b0a:	bcf0      	pop	{r4, r5, r6, r7}
 8001b0c:	4770      	bx	lr
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001b0e:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8001b10:	688e      	ldr	r6, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001b12:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b14:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001b16:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8001b1a:	4c7f      	ldr	r4, [pc, #508]	; (8001d18 <HAL_TIM_OC_ConfigChannel+0x29c>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001b1c:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8001b1e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8001b20:	685d      	ldr	r5, [r3, #4]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8001b22:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx = TIMx->CCMR3;
 8001b26:	f8d3 c054 	ldr.w	ip, [r3, #84]	; 0x54
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8001b2a:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b2e:	4e79      	ldr	r6, [pc, #484]	; (8001d14 <HAL_TIM_OC_ConfigChannel+0x298>)
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8001b30:	ea0c 0404 	and.w	r4, ip, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b34:	42b3      	cmp	r3, r6
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b36:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b3a:	f000 80aa 	beq.w	8001c92 <HAL_TIM_OC_ConfigChannel+0x216>
 8001b3e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001b42:	42b3      	cmp	r3, r6
 8001b44:	f000 80a5 	beq.w	8001c92 <HAL_TIM_OC_ConfigChannel+0x216>
  TIMx->CCR6 = OC_Config->Pulse;
 8001b48:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001b4a:	605d      	str	r5, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8001b4c:	655c      	str	r4, [r3, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8001b4e:	65d9      	str	r1, [r3, #92]	; 0x5c
  TIMx->CCER = tmpccer;
 8001b50:	621a      	str	r2, [r3, #32]
  __HAL_UNLOCK(htim);
 8001b52:	2300      	movs	r3, #0
 8001b54:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001b58:	4618      	mov	r0, r3
}
 8001b5a:	bcf0      	pop	{r4, r5, r6, r7}
 8001b5c:	4770      	bx	lr
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001b5e:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001b60:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b64:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b66:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b68:	f025 0510 	bic.w	r5, r5, #16
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001b6c:	4c6b      	ldr	r4, [pc, #428]	; (8001d1c <HAL_TIM_OC_ConfigChannel+0x2a0>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b6e:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8001b70:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8001b72:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8001b74:	699d      	ldr	r5, [r3, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8001b76:	f022 0220 	bic.w	r2, r2, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001b7a:	402c      	ands	r4, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001b7c:	4d65      	ldr	r5, [pc, #404]	; (8001d14 <HAL_TIM_OC_ConfigChannel+0x298>)
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001b7e:	ea42 120c 	orr.w	r2, r2, ip, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001b82:	42ab      	cmp	r3, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b84:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001b88:	f000 80a3 	beq.w	8001cd2 <HAL_TIM_OC_ConfigChannel+0x256>
 8001b8c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b90:	42ab      	cmp	r3, r5
 8001b92:	f000 809e 	beq.w	8001cd2 <HAL_TIM_OC_ConfigChannel+0x256>
  TIMx->CCR2 = OC_Config->Pulse;
 8001b96:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001b98:	605e      	str	r6, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001b9a:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001b9c:	6399      	str	r1, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001b9e:	621a      	str	r2, [r3, #32]
  __HAL_UNLOCK(htim);
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001ba6:	4618      	mov	r0, r3
}
 8001ba8:	bcf0      	pop	{r4, r5, r6, r7}
 8001baa:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001bac:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001bae:	688e      	ldr	r6, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001bb0:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001bb2:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001bb4:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001bb8:	4c58      	ldr	r4, [pc, #352]	; (8001d1c <HAL_TIM_OC_ConfigChannel+0x2a0>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001bba:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8001bbc:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8001bbe:	685d      	ldr	r5, [r3, #4]
  tmpccer &= ~TIM_CCER_CC4P;
 8001bc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx = TIMx->CCMR2;
 8001bc4:	f8d3 c01c 	ldr.w	ip, [r3, #28]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001bc8:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001bcc:	4e51      	ldr	r6, [pc, #324]	; (8001d14 <HAL_TIM_OC_ConfigChannel+0x298>)
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001bce:	ea0c 0404 	and.w	r4, ip, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001bd2:	42b3      	cmp	r3, r6
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001bd4:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001bd8:	d075      	beq.n	8001cc6 <HAL_TIM_OC_ConfigChannel+0x24a>
 8001bda:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001bde:	42b3      	cmp	r3, r6
 8001be0:	d071      	beq.n	8001cc6 <HAL_TIM_OC_ConfigChannel+0x24a>
  TIMx->CCR4 = OC_Config->Pulse;
 8001be2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001be4:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001be6:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8001be8:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8001bea:	621a      	str	r2, [r3, #32]
  __HAL_UNLOCK(htim);
 8001bec:	2300      	movs	r3, #0
 8001bee:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001bf2:	4618      	mov	r0, r3
}
 8001bf4:	bcf0      	pop	{r4, r5, r6, r7}
 8001bf6:	4770      	bx	lr
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001bf8:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001bfa:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001bfe:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8001c00:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001c02:	f425 7580 	bic.w	r5, r5, #256	; 0x100
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001c06:	4c42      	ldr	r4, [pc, #264]	; (8001d10 <HAL_TIM_OC_ConfigChannel+0x294>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001c08:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8001c0a:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8001c0c:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8001c0e:	69dd      	ldr	r5, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8001c10:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001c14:	402c      	ands	r4, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001c16:	4d3f      	ldr	r5, [pc, #252]	; (8001d14 <HAL_TIM_OC_ConfigChannel+0x298>)
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001c18:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001c1c:	42ab      	cmp	r3, r5
  tmpccmrx |= OC_Config->OCMode;
 8001c1e:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001c22:	d065      	beq.n	8001cf0 <HAL_TIM_OC_ConfigChannel+0x274>
 8001c24:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c28:	42ab      	cmp	r3, r5
 8001c2a:	d061      	beq.n	8001cf0 <HAL_TIM_OC_ConfigChannel+0x274>
  TIMx->CCR3 = OC_Config->Pulse;
 8001c2c:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001c2e:	605e      	str	r6, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001c30:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001c32:	63d9      	str	r1, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8001c34:	621a      	str	r2, [r3, #32]
  __HAL_UNLOCK(htim);
 8001c36:	2300      	movs	r3, #0
 8001c38:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001c3c:	4618      	mov	r0, r3
}
 8001c3e:	bcf0      	pop	{r4, r5, r6, r7}
 8001c40:	4770      	bx	lr
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001c42:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001c44:	688e      	ldr	r6, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001c46:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8001c48:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001c4a:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001c4e:	4c34      	ldr	r4, [pc, #208]	; (8001d20 <HAL_TIM_OC_ConfigChannel+0x2a4>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001c50:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8001c52:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8001c54:	685d      	ldr	r5, [r3, #4]
  tmpccer &= ~TIM_CCER_CC5P;
 8001c56:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx = TIMx->CCMR3;
 8001c5a:	f8d3 c054 	ldr.w	ip, [r3, #84]	; 0x54
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001c5e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c62:	4e2c      	ldr	r6, [pc, #176]	; (8001d14 <HAL_TIM_OC_ConfigChannel+0x298>)
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001c64:	ea0c 0404 	and.w	r4, ip, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c68:	42b3      	cmp	r3, r6
  tmpccmrx |= OC_Config->OCMode;
 8001c6a:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c6e:	d016      	beq.n	8001c9e <HAL_TIM_OC_ConfigChannel+0x222>
 8001c70:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001c74:	42b3      	cmp	r3, r6
 8001c76:	d012      	beq.n	8001c9e <HAL_TIM_OC_ConfigChannel+0x222>
  TIMx->CCR5 = OC_Config->Pulse;
 8001c78:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001c7a:	605d      	str	r5, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8001c7c:	655c      	str	r4, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8001c7e:	6599      	str	r1, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;
 8001c80:	621a      	str	r2, [r3, #32]
  __HAL_UNLOCK(htim);
 8001c82:	2300      	movs	r3, #0
 8001c84:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001c88:	4618      	mov	r0, r3
}
 8001c8a:	bcf0      	pop	{r4, r5, r6, r7}
 8001c8c:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001c8e:	2002      	movs	r0, #2
}
 8001c90:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS6;
 8001c92:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8001c96:	694e      	ldr	r6, [r1, #20]
 8001c98:	ea45 2586 	orr.w	r5, r5, r6, lsl #10
 8001c9c:	e754      	b.n	8001b48 <HAL_TIM_OC_ConfigChannel+0xcc>
    tmpcr2 &= ~TIM_CR2_OIS5;
 8001c9e:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001ca2:	694e      	ldr	r6, [r1, #20]
 8001ca4:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 8001ca8:	e7e6      	b.n	8001c78 <HAL_TIM_OC_ConfigChannel+0x1fc>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001caa:	f426 7c40 	bic.w	ip, r6, #768	; 0x300
    tmpccer &= ~TIM_CCER_CC1NP;
 8001cae:	f022 0208 	bic.w	r2, r2, #8
    tmpcr2 |= OC_Config->OCNIdleState;
 8001cb2:	698e      	ldr	r6, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8001cb4:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8001cb6:	694d      	ldr	r5, [r1, #20]
    tmpccer |= OC_Config->OCNPolarity;
 8001cb8:	433a      	orrs	r2, r7
    tmpcr2 |= OC_Config->OCNIdleState;
 8001cba:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001cbc:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001cc0:	ea45 060c 	orr.w	r6, r5, ip
 8001cc4:	e718      	b.n	8001af8 <HAL_TIM_OC_ConfigChannel+0x7c>
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001cc6:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001cca:	694e      	ldr	r6, [r1, #20]
 8001ccc:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 8001cd0:	e787      	b.n	8001be2 <HAL_TIM_OC_ConfigChannel+0x166>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001cd2:	f426 6c40 	bic.w	ip, r6, #3072	; 0xc00
    tmpccer &= ~TIM_CCER_CC2NP;
 8001cd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001cda:	698e      	ldr	r6, [r1, #24]
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001cdc:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001cde:	694d      	ldr	r5, [r1, #20]
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001ce0:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001ce4:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001ce6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001cea:	ea4c 0685 	orr.w	r6, ip, r5, lsl #2
 8001cee:	e752      	b.n	8001b96 <HAL_TIM_OC_ConfigChannel+0x11a>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001cf0:	f426 5c40 	bic.w	ip, r6, #12288	; 0x3000
    tmpccer &= ~TIM_CCER_CC3NP;
 8001cf4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001cf8:	698e      	ldr	r6, [r1, #24]
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001cfa:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001cfc:	694d      	ldr	r5, [r1, #20]
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001cfe:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001d02:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001d04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001d08:	ea4c 1605 	orr.w	r6, ip, r5, lsl #4
 8001d0c:	e78e      	b.n	8001c2c <HAL_TIM_OC_ConfigChannel+0x1b0>
 8001d0e:	bf00      	nop
 8001d10:	fffeff8c 	.word	0xfffeff8c
 8001d14:	40010000 	.word	0x40010000
 8001d18:	feff8fff 	.word	0xfeff8fff
 8001d1c:	feff8cff 	.word	0xfeff8cff
 8001d20:	fffeff8f 	.word	0xfffeff8f

08001d24 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001d24:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8001d28:	2a01      	cmp	r2, #1
 8001d2a:	d073      	beq.n	8001e14 <HAL_TIM_ConfigClockSource+0xf0>
 8001d2c:	4603      	mov	r3, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8001d2e:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 8001d30:	6800      	ldr	r0, [r0, #0]
{
 8001d32:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8001d34:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_LOCK(htim);
 8001d3a:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d3e:	4c4b      	ldr	r4, [pc, #300]	; (8001e6c <HAL_TIM_ConfigClockSource+0x148>)
  tmpsmcr = htim->Instance->SMCR;
 8001d40:	6885      	ldr	r5, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001d42:	680a      	ldr	r2, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d44:	402c      	ands	r4, r5
  switch (sClockSourceConfig->ClockSource)
 8001d46:	2a60      	cmp	r2, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8001d48:	6084      	str	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001d4a:	d065      	beq.n	8001e18 <HAL_TIM_ConfigClockSource+0xf4>
 8001d4c:	d831      	bhi.n	8001db2 <HAL_TIM_ConfigClockSource+0x8e>
 8001d4e:	2a40      	cmp	r2, #64	; 0x40
 8001d50:	d048      	beq.n	8001de4 <HAL_TIM_ConfigClockSource+0xc0>
 8001d52:	d921      	bls.n	8001d98 <HAL_TIM_ConfigClockSource+0x74>
 8001d54:	2a50      	cmp	r2, #80	; 0x50
 8001d56:	d116      	bne.n	8001d86 <HAL_TIM_ConfigClockSource+0x62>
  tmpccer = TIMx->CCER;
 8001d58:	6a06      	ldr	r6, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d5a:	6a05      	ldr	r5, [r0, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d5c:	684c      	ldr	r4, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d5e:	f026 060a 	bic.w	r6, r6, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d62:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d66:	68cf      	ldr	r7, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 8001d68:	4334      	orrs	r4, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d6a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d6c:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d6e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d72:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001d76:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001d78:	6204      	str	r4, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001d7a:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d7c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001d80:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8001d84:	6082      	str	r2, [r0, #8]
  __HAL_UNLOCK(htim);
 8001d86:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8001d88:	2101      	movs	r1, #1
  return HAL_OK;
 8001d8a:	4610      	mov	r0, r2
  htim->State = HAL_TIM_STATE_READY;
 8001d8c:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8001d94:	bcf0      	pop	{r4, r5, r6, r7}
 8001d96:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8001d98:	2a20      	cmp	r2, #32
 8001d9a:	d002      	beq.n	8001da2 <HAL_TIM_ConfigClockSource+0x7e>
 8001d9c:	d91e      	bls.n	8001ddc <HAL_TIM_ConfigClockSource+0xb8>
 8001d9e:	2a30      	cmp	r2, #48	; 0x30
 8001da0:	d1f1      	bne.n	8001d86 <HAL_TIM_ConfigClockSource+0x62>
  tmpsmcr = TIMx->SMCR;
 8001da2:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001da4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001da8:	430a      	orrs	r2, r1
 8001daa:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 8001dae:	6082      	str	r2, [r0, #8]
}
 8001db0:	e7e9      	b.n	8001d86 <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 8001db2:	2a70      	cmp	r2, #112	; 0x70
 8001db4:	d049      	beq.n	8001e4a <HAL_TIM_ConfigClockSource+0x126>
 8001db6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001dba:	d1e4      	bne.n	8001d86 <HAL_TIM_ConfigClockSource+0x62>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001dbc:	68cc      	ldr	r4, [r1, #12]
 8001dbe:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001dc2:	6881      	ldr	r1, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001dc4:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001dc6:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001dca:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8001dce:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8001dd0:	6082      	str	r2, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001dd2:	6882      	ldr	r2, [r0, #8]
 8001dd4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001dd8:	6082      	str	r2, [r0, #8]
      break;
 8001dda:	e7d4      	b.n	8001d86 <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 8001ddc:	f032 0110 	bics.w	r1, r2, #16
 8001de0:	d1d1      	bne.n	8001d86 <HAL_TIM_ConfigClockSource+0x62>
 8001de2:	e7de      	b.n	8001da2 <HAL_TIM_ConfigClockSource+0x7e>
  tmpccer = TIMx->CCER;
 8001de4:	6a06      	ldr	r6, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001de6:	6a05      	ldr	r5, [r0, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001de8:	684c      	ldr	r4, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001dea:	f026 060a 	bic.w	r6, r6, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001dee:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001df2:	68cf      	ldr	r7, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 8001df4:	4334      	orrs	r4, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001df6:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001df8:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001dfa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001dfe:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001e02:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001e04:	6204      	str	r4, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001e06:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e08:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e0c:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8001e10:	6082      	str	r2, [r0, #8]
}
 8001e12:	e7b8      	b.n	8001d86 <HAL_TIM_ConfigClockSource+0x62>
  __HAL_LOCK(htim);
 8001e14:	2002      	movs	r0, #2
}
 8001e16:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e18:	6a04      	ldr	r4, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e1a:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e1c:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e20:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e22:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e24:	6981      	ldr	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 8001e26:	6a02      	ldr	r2, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e28:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e2c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001e30:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8001e34:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8001e38:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 8001e3a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001e3c:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e3e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e42:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8001e46:	6082      	str	r2, [r0, #8]
}
 8001e48:	e79d      	b.n	8001d86 <HAL_TIM_ConfigClockSource+0x62>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001e4a:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8001e4e:	68cc      	ldr	r4, [r1, #12]
 8001e50:	432a      	orrs	r2, r5
  tmpsmcr = TIMx->SMCR;
 8001e52:	6881      	ldr	r1, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001e54:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e58:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001e5c:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8001e5e:	6082      	str	r2, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001e60:	6882      	ldr	r2, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e62:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8001e66:	6082      	str	r2, [r0, #8]
      break;
 8001e68:	e78d      	b.n	8001d86 <HAL_TIM_ConfigClockSource+0x62>
 8001e6a:	bf00      	nop
 8001e6c:	fffe0088 	.word	0xfffe0088

08001e70 <HAL_TIM_PeriodElapsedCallback>:
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop

08001e74 <HAL_TIM_IC_CaptureCallback>:
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop

08001e78 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop

08001e7c <HAL_TIM_TriggerCallback>:
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop

08001e80 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e80:	6803      	ldr	r3, [r0, #0]
 8001e82:	691a      	ldr	r2, [r3, #16]
 8001e84:	0791      	lsls	r1, r2, #30
{
 8001e86:	b510      	push	{r4, lr}
 8001e88:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e8a:	d502      	bpl.n	8001e92 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e8c:	68da      	ldr	r2, [r3, #12]
 8001e8e:	0792      	lsls	r2, r2, #30
 8001e90:	d468      	bmi.n	8001f64 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e92:	691a      	ldr	r2, [r3, #16]
 8001e94:	0752      	lsls	r2, r2, #29
 8001e96:	d502      	bpl.n	8001e9e <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	0750      	lsls	r0, r2, #29
 8001e9c:	d44f      	bmi.n	8001f3e <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e9e:	691a      	ldr	r2, [r3, #16]
 8001ea0:	0711      	lsls	r1, r2, #28
 8001ea2:	d502      	bpl.n	8001eaa <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	0712      	lsls	r2, r2, #28
 8001ea8:	d437      	bmi.n	8001f1a <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001eaa:	691a      	ldr	r2, [r3, #16]
 8001eac:	06d0      	lsls	r0, r2, #27
 8001eae:	d502      	bpl.n	8001eb6 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001eb0:	68da      	ldr	r2, [r3, #12]
 8001eb2:	06d1      	lsls	r1, r2, #27
 8001eb4:	d41e      	bmi.n	8001ef4 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001eb6:	691a      	ldr	r2, [r3, #16]
 8001eb8:	07d2      	lsls	r2, r2, #31
 8001eba:	d502      	bpl.n	8001ec2 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ebc:	68da      	ldr	r2, [r3, #12]
 8001ebe:	07d0      	lsls	r0, r2, #31
 8001ec0:	d469      	bmi.n	8001f96 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ec2:	691a      	ldr	r2, [r3, #16]
 8001ec4:	0611      	lsls	r1, r2, #24
 8001ec6:	d502      	bpl.n	8001ece <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ec8:	68da      	ldr	r2, [r3, #12]
 8001eca:	0612      	lsls	r2, r2, #24
 8001ecc:	d46b      	bmi.n	8001fa6 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001ece:	691a      	ldr	r2, [r3, #16]
 8001ed0:	05d0      	lsls	r0, r2, #23
 8001ed2:	d502      	bpl.n	8001eda <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ed4:	68da      	ldr	r2, [r3, #12]
 8001ed6:	0611      	lsls	r1, r2, #24
 8001ed8:	d46d      	bmi.n	8001fb6 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001eda:	691a      	ldr	r2, [r3, #16]
 8001edc:	0652      	lsls	r2, r2, #25
 8001ede:	d502      	bpl.n	8001ee6 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	0650      	lsls	r0, r2, #25
 8001ee4:	d46f      	bmi.n	8001fc6 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ee6:	691a      	ldr	r2, [r3, #16]
 8001ee8:	0691      	lsls	r1, r2, #26
 8001eea:	d502      	bpl.n	8001ef2 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	0692      	lsls	r2, r2, #26
 8001ef0:	d449      	bmi.n	8001f86 <HAL_TIM_IRQHandler+0x106>
}
 8001ef2:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ef4:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ef8:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8001efa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001efc:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001efe:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001f06:	d16f      	bne.n	8001fe8 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f08:	f7fe fb36 	bl	8000578 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f0c:	4620      	mov	r0, r4
 8001f0e:	f7ff ffb3 	bl	8001e78 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f12:	2200      	movs	r2, #0
 8001f14:	6823      	ldr	r3, [r4, #0]
 8001f16:	7722      	strb	r2, [r4, #28]
 8001f18:	e7cd      	b.n	8001eb6 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f1a:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f1e:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8001f20:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f22:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f24:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f26:	69db      	ldr	r3, [r3, #28]
 8001f28:	079b      	lsls	r3, r3, #30
 8001f2a:	d15a      	bne.n	8001fe2 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f2c:	f7fe fb24 	bl	8000578 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f30:	4620      	mov	r0, r4
 8001f32:	f7ff ffa1 	bl	8001e78 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f36:	2200      	movs	r2, #0
 8001f38:	6823      	ldr	r3, [r4, #0]
 8001f3a:	7722      	strb	r2, [r4, #28]
 8001f3c:	e7b5      	b.n	8001eaa <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f3e:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f42:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8001f44:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f46:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f48:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001f50:	d144      	bne.n	8001fdc <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f52:	f7fe fb11 	bl	8000578 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f56:	4620      	mov	r0, r4
 8001f58:	f7ff ff8e 	bl	8001e78 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	6823      	ldr	r3, [r4, #0]
 8001f60:	7722      	strb	r2, [r4, #28]
 8001f62:	e79c      	b.n	8001e9e <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f64:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f68:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f6a:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f6c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	0799      	lsls	r1, r3, #30
 8001f72:	d130      	bne.n	8001fd6 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f74:	f7fe fb00 	bl	8000578 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f78:	4620      	mov	r0, r4
 8001f7a:	f7ff ff7d 	bl	8001e78 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f7e:	2200      	movs	r2, #0
 8001f80:	6823      	ldr	r3, [r4, #0]
 8001f82:	7722      	strb	r2, [r4, #28]
 8001f84:	e785      	b.n	8001e92 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f86:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8001f8a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f8c:	611a      	str	r2, [r3, #16]
}
 8001f8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8001f92:	f000 b8d1 	b.w	8002138 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f96:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f9a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f9c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f9e:	f7ff ff67 	bl	8001e70 <HAL_TIM_PeriodElapsedCallback>
 8001fa2:	6823      	ldr	r3, [r4, #0]
 8001fa4:	e78d      	b.n	8001ec2 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fa6:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001faa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fac:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001fae:	f000 f8c5 	bl	800213c <HAL_TIMEx_BreakCallback>
 8001fb2:	6823      	ldr	r3, [r4, #0]
 8001fb4:	e78b      	b.n	8001ece <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001fb6:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 8001fba:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001fbc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8001fbe:	f000 f8bf 	bl	8002140 <HAL_TIMEx_Break2Callback>
 8001fc2:	6823      	ldr	r3, [r4, #0]
 8001fc4:	e789      	b.n	8001eda <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fc6:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8001fca:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fcc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001fce:	f7ff ff55 	bl	8001e7c <HAL_TIM_TriggerCallback>
 8001fd2:	6823      	ldr	r3, [r4, #0]
 8001fd4:	e787      	b.n	8001ee6 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8001fd6:	f7ff ff4d 	bl	8001e74 <HAL_TIM_IC_CaptureCallback>
 8001fda:	e7d0      	b.n	8001f7e <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8001fdc:	f7ff ff4a 	bl	8001e74 <HAL_TIM_IC_CaptureCallback>
 8001fe0:	e7bc      	b.n	8001f5c <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8001fe2:	f7ff ff47 	bl	8001e74 <HAL_TIM_IC_CaptureCallback>
 8001fe6:	e7a6      	b.n	8001f36 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8001fe8:	f7ff ff44 	bl	8001e74 <HAL_TIM_IC_CaptureCallback>
 8001fec:	e791      	b.n	8001f12 <HAL_TIM_IRQHandler+0x92>
 8001fee:	bf00      	nop

08001ff0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001ff0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d048      	beq.n	800208a <HAL_TIMEx_MasterConfigSynchronization+0x9a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001ffc:	6813      	ldr	r3, [r2, #0]
{
 8001ffe:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002000:	4d23      	ldr	r5, [pc, #140]	; (8002090 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002002:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002006:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8002008:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800200a:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800200c:	d026      	beq.n	800205c <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 800200e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002012:	42ab      	cmp	r3, r5
 8002014:	d022      	beq.n	800205c <HAL_TIMEx_MasterConfigSynchronization+0x6c>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002016:	4d1f      	ldr	r5, [pc, #124]	; (8002094 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8002018:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800201c:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800201e:	42ab      	cmp	r3, r5
 8002020:	bf18      	it	ne
 8002022:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8002026:	4f1c      	ldr	r7, [pc, #112]	; (8002098 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002028:	ea40 0006 	orr.w	r0, r0, r6
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800202c:	4e1b      	ldr	r6, [pc, #108]	; (800209c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800202e:	bf0c      	ite	eq
 8002030:	2501      	moveq	r5, #1
 8002032:	2500      	movne	r5, #0
  htim->Instance->CR2 = tmpcr2;
 8002034:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002036:	42bb      	cmp	r3, r7
 8002038:	bf08      	it	eq
 800203a:	f045 0501 	orreq.w	r5, r5, #1
 800203e:	42b3      	cmp	r3, r6
 8002040:	bf14      	ite	ne
 8002042:	4628      	movne	r0, r5
 8002044:	f045 0001 	orreq.w	r0, r5, #1
 8002048:	4d15      	ldr	r5, [pc, #84]	; (80020a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800204a:	42ab      	cmp	r3, r5
 800204c:	bf08      	it	eq
 800204e:	f040 0001 	orreq.w	r0, r0, #1
 8002052:	b960      	cbnz	r0, 800206e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002054:	4813      	ldr	r0, [pc, #76]	; (80020a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002056:	4283      	cmp	r3, r0
 8002058:	d009      	beq.n	800206e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800205a:	e00d      	b.n	8002078 <HAL_TIMEx_MasterConfigSynchronization+0x88>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800205c:	e9d1 5600 	ldrd	r5, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002060:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002064:	4330      	orrs	r0, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8002066:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800206a:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 800206c:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800206e:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002070:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002074:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002076:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8002078:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800207a:	2101      	movs	r1, #1

  return HAL_OK;
 800207c:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800207e:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002082:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8002086:	bcf0      	pop	{r4, r5, r6, r7}
 8002088:	4770      	bx	lr
  __HAL_LOCK(htim);
 800208a:	2002      	movs	r0, #2
}
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	40010000 	.word	0x40010000
 8002094:	40000400 	.word	0x40000400
 8002098:	40000800 	.word	0x40000800
 800209c:	40000c00 	.word	0x40000c00
 80020a0:	40014000 	.word	0x40014000
 80020a4:	40001800 	.word	0x40001800

080020a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80020a8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d03c      	beq.n	800212a <HAL_TIMEx_ConfigBreakDeadTime+0x82>
{
 80020b0:	b470      	push	{r4, r5, r6}
 80020b2:	4605      	mov	r5, r0
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80020b4:	690e      	ldr	r6, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80020b6:	e9d1 0302 	ldrd	r0, r3, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80020ba:	e9d1 2400 	ldrd	r2, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80020be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020c2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80020c4:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80020c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020ca:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80020cc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80020ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80020d2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80020d4:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80020d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020da:	4333      	orrs	r3, r6

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80020dc:	682e      	ldr	r6, [r5, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80020de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80020e2:	4303      	orrs	r3, r0
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80020e4:	4812      	ldr	r0, [pc, #72]	; (8002130 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80020e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80020ea:	4286      	cmp	r6, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80020ec:	ea43 0304 	orr.w	r3, r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80020f0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80020f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80020f8:	d009      	beq.n	800210e <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 80020fa:	4a0e      	ldr	r2, [pc, #56]	; (8002134 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 80020fc:	4296      	cmp	r6, r2
 80020fe:	d006      	beq.n	800210e <HAL_TIMEx_ConfigBreakDeadTime+0x66>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8002100:	2200      	movs	r2, #0
  htim->Instance->BDTR = tmpbdtr;
 8002102:	6473      	str	r3, [r6, #68]	; 0x44

  return HAL_OK;
 8002104:	4610      	mov	r0, r2
  __HAL_UNLOCK(htim);
 8002106:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
}
 800210a:	bc70      	pop	{r4, r5, r6}
 800210c:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800210e:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8002110:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002114:	69c8      	ldr	r0, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002116:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800211a:	6a0a      	ldr	r2, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800211c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002120:	4303      	orrs	r3, r0
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002122:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002126:	4313      	orrs	r3, r2
 8002128:	e7ea      	b.n	8002100 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 800212a:	2002      	movs	r0, #2
}
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	40010000 	.word	0x40010000
 8002134:	40010400 	.word	0x40010400

08002138 <HAL_TIMEx_CommutCallback>:
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop

0800213c <HAL_TIMEx_BreakCallback>:
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop

08002140 <HAL_TIMEx_Break2Callback>:
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop

08002144 <__libc_init_array>:
 8002144:	b570      	push	{r4, r5, r6, lr}
 8002146:	4d0d      	ldr	r5, [pc, #52]	; (800217c <__libc_init_array+0x38>)
 8002148:	4c0d      	ldr	r4, [pc, #52]	; (8002180 <__libc_init_array+0x3c>)
 800214a:	1b64      	subs	r4, r4, r5
 800214c:	10a4      	asrs	r4, r4, #2
 800214e:	2600      	movs	r6, #0
 8002150:	42a6      	cmp	r6, r4
 8002152:	d109      	bne.n	8002168 <__libc_init_array+0x24>
 8002154:	4d0b      	ldr	r5, [pc, #44]	; (8002184 <__libc_init_array+0x40>)
 8002156:	4c0c      	ldr	r4, [pc, #48]	; (8002188 <__libc_init_array+0x44>)
 8002158:	f000 f820 	bl	800219c <_init>
 800215c:	1b64      	subs	r4, r4, r5
 800215e:	10a4      	asrs	r4, r4, #2
 8002160:	2600      	movs	r6, #0
 8002162:	42a6      	cmp	r6, r4
 8002164:	d105      	bne.n	8002172 <__libc_init_array+0x2e>
 8002166:	bd70      	pop	{r4, r5, r6, pc}
 8002168:	f855 3b04 	ldr.w	r3, [r5], #4
 800216c:	4798      	blx	r3
 800216e:	3601      	adds	r6, #1
 8002170:	e7ee      	b.n	8002150 <__libc_init_array+0xc>
 8002172:	f855 3b04 	ldr.w	r3, [r5], #4
 8002176:	4798      	blx	r3
 8002178:	3601      	adds	r6, #1
 800217a:	e7f2      	b.n	8002162 <__libc_init_array+0x1e>
 800217c:	080021cc 	.word	0x080021cc
 8002180:	080021cc 	.word	0x080021cc
 8002184:	080021cc 	.word	0x080021cc
 8002188:	080021d0 	.word	0x080021d0

0800218c <memset>:
 800218c:	4402      	add	r2, r0
 800218e:	4603      	mov	r3, r0
 8002190:	4293      	cmp	r3, r2
 8002192:	d100      	bne.n	8002196 <memset+0xa>
 8002194:	4770      	bx	lr
 8002196:	f803 1b01 	strb.w	r1, [r3], #1
 800219a:	e7f9      	b.n	8002190 <memset+0x4>

0800219c <_init>:
 800219c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800219e:	bf00      	nop
 80021a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021a2:	bc08      	pop	{r3}
 80021a4:	469e      	mov	lr, r3
 80021a6:	4770      	bx	lr

080021a8 <_fini>:
 80021a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021aa:	bf00      	nop
 80021ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ae:	bc08      	pop	{r3}
 80021b0:	469e      	mov	lr, r3
 80021b2:	4770      	bx	lr
