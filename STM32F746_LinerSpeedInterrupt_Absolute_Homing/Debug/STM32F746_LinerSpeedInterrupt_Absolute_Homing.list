
STM32F746_LinerSpeedInterrupt_Absolute_Homing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000322c  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080033f4  080033f4  000133f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003404  08003404  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003404  08003404  00013404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800340c  0800340c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800340c  0800340c  0001340c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003410  08003410  00013410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003414  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000010  08003420  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08003420  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b4d4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001803  00000000  00000000  0002b510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  0002cd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a8  00000000  00000000  0002d778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024ee1  00000000  00000000  0002e120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b460  00000000  00000000  00053001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9a2d  00000000  00000000  0005e461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00147e8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b10  00000000  00000000  00147ee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000010 	.word	0x20000010
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080033dc 	.word	0x080033dc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000014 	.word	0x20000014
 8000204:	080033dc 	.word	0x080033dc

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b96e 	b.w	80004fc <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468c      	mov	ip, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	f040 8083 	bne.w	800034e <__udivmoddi4+0x116>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d947      	bls.n	80002de <__udivmoddi4+0xa6>
 800024e:	fab2 f282 	clz	r2, r2
 8000252:	b142      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000254:	f1c2 0020 	rsb	r0, r2, #32
 8000258:	fa24 f000 	lsr.w	r0, r4, r0
 800025c:	4091      	lsls	r1, r2
 800025e:	4097      	lsls	r7, r2
 8000260:	ea40 0c01 	orr.w	ip, r0, r1
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbbc f6f8 	udiv	r6, ip, r8
 8000270:	fa1f fe87 	uxth.w	lr, r7
 8000274:	fb08 c116 	mls	r1, r8, r6, ip
 8000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027c:	fb06 f10e 	mul.w	r1, r6, lr
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 8119 	bcs.w	80004c0 <__udivmoddi4+0x288>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8116 	bls.w	80004c0 <__udivmoddi4+0x288>
 8000294:	3e02      	subs	r6, #2
 8000296:	443b      	add	r3, r7
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ac:	45a6      	cmp	lr, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	193c      	adds	r4, r7, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b6:	f080 8105 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	f240 8102 	bls.w	80004c4 <__udivmoddi4+0x28c>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c8:	eba4 040e 	sub.w	r4, r4, lr
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xaa>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d150      	bne.n	800038c <__udivmoddi4+0x154>
 80002ea:	1bcb      	subs	r3, r1, r7
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	fa1f f887 	uxth.w	r8, r7
 80002f4:	2601      	movs	r6, #1
 80002f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002fa:	0c21      	lsrs	r1, r4, #16
 80002fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000304:	fb08 f30c 	mul.w	r3, r8, ip
 8000308:	428b      	cmp	r3, r1
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0xe4>
 800030c:	1879      	adds	r1, r7, r1
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0xe2>
 8000314:	428b      	cmp	r3, r1
 8000316:	f200 80e9 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 800031a:	4684      	mov	ip, r0
 800031c:	1ac9      	subs	r1, r1, r3
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x10c>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x10a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80d9 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e7bf      	b.n	80002ce <__udivmoddi4+0x96>
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x12e>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80b1 	beq.w	80004ba <__udivmoddi4+0x282>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x1cc>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0x140>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80b8 	bhi.w	80004e8 <__udivmoddi4+0x2b0>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0103 	sbc.w	r1, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	468c      	mov	ip, r1
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0a8      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000386:	e9c5 4c00 	strd	r4, ip, [r5]
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0xa0>
 800038c:	f1c2 0320 	rsb	r3, r2, #32
 8000390:	fa20 f603 	lsr.w	r6, r0, r3
 8000394:	4097      	lsls	r7, r2
 8000396:	fa01 f002 	lsl.w	r0, r1, r2
 800039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039e:	40d9      	lsrs	r1, r3
 80003a0:	4330      	orrs	r0, r6
 80003a2:	0c03      	lsrs	r3, r0, #16
 80003a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f108 	mul.w	r1, r6, r8
 80003b8:	4299      	cmp	r1, r3
 80003ba:	fa04 f402 	lsl.w	r4, r4, r2
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x19c>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003c6:	f080 808d 	bcs.w	80004e4 <__udivmoddi4+0x2ac>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 808a 	bls.w	80004e4 <__udivmoddi4+0x2ac>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	443b      	add	r3, r7
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b281      	uxth	r1, r0
 80003d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb00 f308 	mul.w	r3, r0, r8
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x1c4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003f2:	d273      	bcs.n	80004dc <__udivmoddi4+0x2a4>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d971      	bls.n	80004dc <__udivmoddi4+0x2a4>
 80003f8:	3802      	subs	r0, #2
 80003fa:	4439      	add	r1, r7
 80003fc:	1acb      	subs	r3, r1, r3
 80003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000402:	e778      	b.n	80002f6 <__udivmoddi4+0xbe>
 8000404:	f1c6 0c20 	rsb	ip, r6, #32
 8000408:	fa03 f406 	lsl.w	r4, r3, r6
 800040c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000410:	431c      	orrs	r4, r3
 8000412:	fa20 f70c 	lsr.w	r7, r0, ip
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000422:	431f      	orrs	r7, r3
 8000424:	0c3b      	lsrs	r3, r7, #16
 8000426:	fbb1 f9fe 	udiv	r9, r1, lr
 800042a:	fa1f f884 	uxth.w	r8, r4
 800042e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000436:	fb09 fa08 	mul.w	sl, r9, r8
 800043a:	458a      	cmp	sl, r1
 800043c:	fa02 f206 	lsl.w	r2, r2, r6
 8000440:	fa00 f306 	lsl.w	r3, r0, r6
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x220>
 8000446:	1861      	adds	r1, r4, r1
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800044c:	d248      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 800044e:	458a      	cmp	sl, r1
 8000450:	d946      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	4421      	add	r1, r4
 8000458:	eba1 010a 	sub.w	r1, r1, sl
 800045c:	b2bf      	uxth	r7, r7
 800045e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000462:	fb0e 1110 	mls	r1, lr, r0, r1
 8000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45b8      	cmp	r8, r7
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x24a>
 8000472:	19e7      	adds	r7, r4, r7
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000478:	d22e      	bcs.n	80004d8 <__udivmoddi4+0x2a0>
 800047a:	45b8      	cmp	r8, r7
 800047c:	d92c      	bls.n	80004d8 <__udivmoddi4+0x2a0>
 800047e:	3802      	subs	r0, #2
 8000480:	4427      	add	r7, r4
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba7 0708 	sub.w	r7, r7, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454f      	cmp	r7, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	4649      	mov	r1, r9
 8000494:	d31a      	bcc.n	80004cc <__udivmoddi4+0x294>
 8000496:	d017      	beq.n	80004c8 <__udivmoddi4+0x290>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x27a>
 800049a:	ebb3 020e 	subs.w	r2, r3, lr
 800049e:	eb67 0701 	sbc.w	r7, r7, r1
 80004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a6:	40f2      	lsrs	r2, r6
 80004a8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ac:	40f7      	lsrs	r7, r6
 80004ae:	e9c5 2700 	strd	r2, r7, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e70b      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fd      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004c8:	4543      	cmp	r3, r8
 80004ca:	d2e5      	bcs.n	8000498 <__udivmoddi4+0x260>
 80004cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d0:	eb69 0104 	sbc.w	r1, r9, r4
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7df      	b.n	8000498 <__udivmoddi4+0x260>
 80004d8:	4608      	mov	r0, r1
 80004da:	e7d2      	b.n	8000482 <__udivmoddi4+0x24a>
 80004dc:	4660      	mov	r0, ip
 80004de:	e78d      	b.n	80003fc <__udivmoddi4+0x1c4>
 80004e0:	4681      	mov	r9, r0
 80004e2:	e7b9      	b.n	8000458 <__udivmoddi4+0x220>
 80004e4:	4666      	mov	r6, ip
 80004e6:	e775      	b.n	80003d4 <__udivmoddi4+0x19c>
 80004e8:	4630      	mov	r0, r6
 80004ea:	e74a      	b.n	8000382 <__udivmoddi4+0x14a>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	4439      	add	r1, r7
 80004f2:	e713      	b.n	800031c <__udivmoddi4+0xe4>
 80004f4:	3802      	subs	r0, #2
 80004f6:	443c      	add	r4, r7
 80004f8:	e724      	b.n	8000344 <__udivmoddi4+0x10c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//end stop senssor state
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_9 ){
 800050a:	88fb      	ldrh	r3, [r7, #6]
 800050c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000510:	d11d      	bne.n	800054e <HAL_GPIO_EXTI_Callback+0x4e>
		if(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9)){
 8000512:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000516:	4810      	ldr	r0, [pc, #64]	; (8000558 <HAL_GPIO_EXTI_Callback+0x58>)
 8000518:	f001 f8f0 	bl	80016fc <HAL_GPIO_ReadPin>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d106      	bne.n	8000530 <HAL_GPIO_EXTI_Callback+0x30>
			end_stop_state |= 1;
 8000522:	4b0e      	ldr	r3, [pc, #56]	; (800055c <HAL_GPIO_EXTI_Callback+0x5c>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	f043 0301 	orr.w	r3, r3, #1
 800052a:	b2da      	uxtb	r2, r3
 800052c:	4b0b      	ldr	r3, [pc, #44]	; (800055c <HAL_GPIO_EXTI_Callback+0x5c>)
 800052e:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9)){
 8000530:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000534:	4808      	ldr	r0, [pc, #32]	; (8000558 <HAL_GPIO_EXTI_Callback+0x58>)
 8000536:	f001 f8e1 	bl	80016fc <HAL_GPIO_ReadPin>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d006      	beq.n	800054e <HAL_GPIO_EXTI_Callback+0x4e>
			end_stop_state &= ~1;
 8000540:	4b06      	ldr	r3, [pc, #24]	; (800055c <HAL_GPIO_EXTI_Callback+0x5c>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	f023 0301 	bic.w	r3, r3, #1
 8000548:	b2da      	uxtb	r2, r3
 800054a:	4b04      	ldr	r3, [pc, #16]	; (800055c <HAL_GPIO_EXTI_Callback+0x5c>)
 800054c:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40020800 	.word	0x40020800
 800055c:	2000002c 	.word	0x2000002c

08000560 <Step0>:

void Step0(){
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8000564:	2200      	movs	r2, #0
 8000566:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800056a:	4805      	ldr	r0, [pc, #20]	; (8000580 <Step0+0x20>)
 800056c:	f001 f8de 	bl	800172c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8000570:	2201      	movs	r2, #1
 8000572:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000576:	4802      	ldr	r0, [pc, #8]	; (8000580 <Step0+0x20>)
 8000578:	f001 f8d8 	bl	800172c <HAL_GPIO_WritePin>
}
 800057c:	bf00      	nop
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40020800 	.word	0x40020800

08000584 <Dir0>:

void Dir0(int dir){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, dir);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	b2db      	uxtb	r3, r3
 8000590:	461a      	mov	r2, r3
 8000592:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000596:	4803      	ldr	r0, [pc, #12]	; (80005a4 <Dir0+0x20>)
 8000598:	f001 f8c8 	bl	800172c <HAL_GPIO_WritePin>
}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40020800 	.word	0x40020800

080005a8 <resetStepper>:
	si->stepPosition = 0;
	si->movementDone = 0;
}


void resetStepper(volatile stepperInfo* si){
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	si->c0 = si->acceleration;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	edd3 7a00 	vldr	s15, [r3]
 80005b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005ba:	ee17 2a90 	vmov	r2, s15
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	615a      	str	r2, [r3, #20]
	si->d = si->c0;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	ee07 3a90 	vmov	s15, r3
 80005ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	si->di = si->d;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80005da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005de:	ee17 2a90 	vmov	r2, s15
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	639a      	str	r2, [r3, #56]	; 0x38
	si->stepCount = 0;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2200      	movs	r2, #0
 80005ea:	63da      	str	r2, [r3, #60]	; 0x3c
	si->n = 0;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2200      	movs	r2, #0
 80005f0:	631a      	str	r2, [r3, #48]	; 0x30
	si->rampUpStepCount = 0;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2200      	movs	r2, #0
 80005f6:	62da      	str	r2, [r3, #44]	; 0x2c
	si->movementDone = 0;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2200      	movs	r2, #0
 80005fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8000600:	bf00      	nop
 8000602:	370c      	adds	r7, #12
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr

0800060c <prepareMovement>:

volatile uint8_t remainingSteppersFlag = 0;

void prepareMovement(int whichMotor, int steps){
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
	volatile stepperInfo* si = &steppers[whichMotor];
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	019b      	lsls	r3, r3, #6
 800061a:	4a17      	ldr	r2, [pc, #92]	; (8000678 <prepareMovement+0x6c>)
 800061c:	4413      	add	r3, r2
 800061e:	60fb      	str	r3, [r7, #12]
	si->dirFunc( steps < 0 ? 1 : 0);
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	683a      	ldr	r2, [r7, #0]
 8000626:	0fd2      	lsrs	r2, r2, #31
 8000628:	4610      	mov	r0, r2
 800062a:	4798      	blx	r3
	si->dir = steps > 0 ? 1:-1;
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	2b00      	cmp	r3, #0
 8000630:	dd01      	ble.n	8000636 <prepareMovement+0x2a>
 8000632:	2201      	movs	r2, #1
 8000634:	e001      	b.n	800063a <prepareMovement+0x2e>
 8000636:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	621a      	str	r2, [r3, #32]
	si->totalSteps = abs(steps);
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	bfb8      	it	lt
 8000644:	425b      	neglt	r3, r3
 8000646:	461a      	mov	r2, r3
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	625a      	str	r2, [r3, #36]	; 0x24
	resetStepper(si);
 800064c:	68f8      	ldr	r0, [r7, #12]
 800064e:	f7ff ffab 	bl	80005a8 <resetStepper>
	remainingSteppersFlag |= (1 << whichMotor);
 8000652:	2201      	movs	r2, #1
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	fa02 f303 	lsl.w	r3, r2, r3
 800065a:	b25a      	sxtb	r2, r3
 800065c:	4b07      	ldr	r3, [pc, #28]	; (800067c <prepareMovement+0x70>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	b2db      	uxtb	r3, r3
 8000662:	b25b      	sxtb	r3, r3
 8000664:	4313      	orrs	r3, r2
 8000666:	b25b      	sxtb	r3, r3
 8000668:	b2da      	uxtb	r2, r3
 800066a:	4b04      	ldr	r3, [pc, #16]	; (800067c <prepareMovement+0x70>)
 800066c:	701a      	strb	r2, [r3, #0]
}
 800066e:	bf00      	nop
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000030 	.word	0x20000030
 800067c:	2000002e 	.word	0x2000002e

08000680 <prepareAbsoluteMovement>:

void prepareAbsoluteMovement(int whichMotor, long long absolute_steps){
 8000680:	b5b0      	push	{r4, r5, r7, lr}
 8000682:	b088      	sub	sp, #32
 8000684:	af00      	add	r7, sp, #0
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	e9c7 2300 	strd	r2, r3, [r7]
	volatile stepperInfo* si = &steppers[whichMotor];
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	019b      	lsls	r3, r3, #6
 8000690:	4a24      	ldr	r2, [pc, #144]	; (8000724 <prepareAbsoluteMovement+0xa4>)
 8000692:	4413      	add	r3, r2
 8000694:	61fb      	str	r3, [r7, #28]
	long long steps = absolute_steps - si->stepPosition;
 8000696:	69fb      	ldr	r3, [r7, #28]
 8000698:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800069c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80006a0:	1a84      	subs	r4, r0, r2
 80006a2:	eb61 0503 	sbc.w	r5, r1, r3
 80006a6:	e9c7 4504 	strd	r4, r5, [r7, #16]
	if(steps == 0){
 80006aa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80006ae:	4313      	orrs	r3, r2
 80006b0:	d033      	beq.n	800071a <prepareAbsoluteMovement+0x9a>
		return;
	}
	si->dirFunc( steps < 0 ? 1 : 0);
 80006b2:	69fb      	ldr	r3, [r7, #28]
 80006b4:	689c      	ldr	r4, [r3, #8]
 80006b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80006ba:	f04f 0200 	mov.w	r2, #0
 80006be:	f04f 0300 	mov.w	r3, #0
 80006c2:	17ca      	asrs	r2, r1, #31
 80006c4:	17cb      	asrs	r3, r1, #31
 80006c6:	4613      	mov	r3, r2
 80006c8:	f003 0301 	and.w	r3, r3, #1
 80006cc:	4618      	mov	r0, r3
 80006ce:	47a0      	blx	r4
	si->dir = steps > 0 ? 1:-1;
 80006d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80006d4:	2a01      	cmp	r2, #1
 80006d6:	f173 0300 	sbcs.w	r3, r3, #0
 80006da:	db01      	blt.n	80006e0 <prepareAbsoluteMovement+0x60>
 80006dc:	2201      	movs	r2, #1
 80006de:	e001      	b.n	80006e4 <prepareAbsoluteMovement+0x64>
 80006e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006e4:	69fb      	ldr	r3, [r7, #28]
 80006e6:	621a      	str	r2, [r3, #32]
	si->totalSteps = abs(steps);
 80006e8:	693b      	ldr	r3, [r7, #16]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	bfb8      	it	lt
 80006ee:	425b      	neglt	r3, r3
 80006f0:	461a      	mov	r2, r3
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	625a      	str	r2, [r3, #36]	; 0x24
	resetStepper(si);
 80006f6:	69f8      	ldr	r0, [r7, #28]
 80006f8:	f7ff ff56 	bl	80005a8 <resetStepper>
	remainingSteppersFlag |= (1 << whichMotor);
 80006fc:	2201      	movs	r2, #1
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	fa02 f303 	lsl.w	r3, r2, r3
 8000704:	b25a      	sxtb	r2, r3
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <prepareAbsoluteMovement+0xa8>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	b2db      	uxtb	r3, r3
 800070c:	b25b      	sxtb	r3, r3
 800070e:	4313      	orrs	r3, r2
 8000710:	b25b      	sxtb	r3, r3
 8000712:	b2da      	uxtb	r2, r3
 8000714:	4b04      	ldr	r3, [pc, #16]	; (8000728 <prepareAbsoluteMovement+0xa8>)
 8000716:	701a      	strb	r2, [r3, #0]
 8000718:	e000      	b.n	800071c <prepareAbsoluteMovement+0x9c>
		return;
 800071a:	bf00      	nop
}
 800071c:	3720      	adds	r7, #32
 800071e:	46bd      	mov	sp, r7
 8000720:	bdb0      	pop	{r4, r5, r7, pc}
 8000722:	bf00      	nop
 8000724:	20000030 	.word	0x20000030
 8000728:	2000002e 	.word	0x2000002e

0800072c <setNextInterruptInterval>:


volatile uint8_t nextStepperFlag = 0;

void setNextInterruptInterval(){
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0

	unsigned int mind = 999999;
 8000732:	4b34      	ldr	r3, [pc, #208]	; (8000804 <setNextInterruptInterval+0xd8>)
 8000734:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < NUM_STEPPERS; i++){
 8000736:	2300      	movs	r3, #0
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	e01d      	b.n	8000778 <setNextInterruptInterval+0x4c>
		if( ((1 << i) & remainingSteppersFlag) && steppers[i].di < mind ){
 800073c:	4b32      	ldr	r3, [pc, #200]	; (8000808 <setNextInterruptInterval+0xdc>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	b2db      	uxtb	r3, r3
 8000742:	461a      	mov	r2, r3
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	fa42 f303 	asr.w	r3, r2, r3
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	2b00      	cmp	r3, #0
 8000750:	d00f      	beq.n	8000772 <setNextInterruptInterval+0x46>
 8000752:	4a2e      	ldr	r2, [pc, #184]	; (800080c <setNextInterruptInterval+0xe0>)
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	019b      	lsls	r3, r3, #6
 8000758:	4413      	add	r3, r2
 800075a:	3338      	adds	r3, #56	; 0x38
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	68fa      	ldr	r2, [r7, #12]
 8000760:	429a      	cmp	r2, r3
 8000762:	d906      	bls.n	8000772 <setNextInterruptInterval+0x46>
			mind = steppers[i].di;
 8000764:	4a29      	ldr	r2, [pc, #164]	; (800080c <setNextInterruptInterval+0xe0>)
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	019b      	lsls	r3, r3, #6
 800076a:	4413      	add	r3, r2
 800076c:	3338      	adds	r3, #56	; 0x38
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < NUM_STEPPERS; i++){
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	3301      	adds	r3, #1
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	2b00      	cmp	r3, #0
 800077c:	ddde      	ble.n	800073c <setNextInterruptInterval+0x10>
		}
	}

	nextStepperFlag = 0;
 800077e:	4b24      	ldr	r3, [pc, #144]	; (8000810 <setNextInterruptInterval+0xe4>)
 8000780:	2200      	movs	r2, #0
 8000782:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_STEPPERS; i ++){
 8000784:	2300      	movs	r3, #0
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	e024      	b.n	80007d4 <setNextInterruptInterval+0xa8>
		if( ((1 << i) & remainingSteppersFlag) && steppers[i].di == mind )
 800078a:	4b1f      	ldr	r3, [pc, #124]	; (8000808 <setNextInterruptInterval+0xdc>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	b2db      	uxtb	r3, r3
 8000790:	461a      	mov	r2, r3
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	fa42 f303 	asr.w	r3, r2, r3
 8000798:	f003 0301 	and.w	r3, r3, #1
 800079c:	2b00      	cmp	r3, #0
 800079e:	d016      	beq.n	80007ce <setNextInterruptInterval+0xa2>
 80007a0:	4a1a      	ldr	r2, [pc, #104]	; (800080c <setNextInterruptInterval+0xe0>)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	019b      	lsls	r3, r3, #6
 80007a6:	4413      	add	r3, r2
 80007a8:	3338      	adds	r3, #56	; 0x38
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	68fa      	ldr	r2, [r7, #12]
 80007ae:	429a      	cmp	r2, r3
 80007b0:	d10d      	bne.n	80007ce <setNextInterruptInterval+0xa2>
			nextStepperFlag |= (1 << i);
 80007b2:	2201      	movs	r2, #1
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ba:	b25a      	sxtb	r2, r3
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <setNextInterruptInterval+0xe4>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	b25b      	sxtb	r3, r3
 80007c4:	4313      	orrs	r3, r2
 80007c6:	b25b      	sxtb	r3, r3
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <setNextInterruptInterval+0xe4>)
 80007cc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_STEPPERS; i ++){
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	3301      	adds	r3, #1
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	ddd7      	ble.n	800078a <setNextInterruptInterval+0x5e>
	}

	if (remainingSteppersFlag == 0){
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <setNextInterruptInterval+0xdc>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d104      	bne.n	80007ee <setNextInterruptInterval+0xc2>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 65500);
 80007e4:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <setNextInterruptInterval+0xe8>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 80007ec:	635a      	str	r2, [r3, #52]	; 0x34
	}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, mind);
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <setNextInterruptInterval+0xe8>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	68fa      	ldr	r2, [r7, #12]
 80007f4:	635a      	str	r2, [r3, #52]	; 0x34

}
 80007f6:	bf00      	nop
 80007f8:	3714      	adds	r7, #20
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	000f423f 	.word	0x000f423f
 8000808:	2000002e 	.word	0x2000002e
 800080c:	20000030 	.word	0x20000030
 8000810:	2000002f 	.word	0x2000002f
 8000814:	20000070 	.word	0x20000070

08000818 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
 8000818:	b5b0      	push	{r4, r5, r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	//HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
	unsigned int tmpCtr = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1);
 8000820:	4b8e      	ldr	r3, [pc, #568]	; (8000a5c <HAL_TIM_OC_DelayElapsedCallback+0x244>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000826:	613b      	str	r3, [r7, #16]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 65500);
 8000828:	4b8c      	ldr	r3, [pc, #560]	; (8000a5c <HAL_TIM_OC_DelayElapsedCallback+0x244>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 8000830:	635a      	str	r2, [r3, #52]	; 0x34


	for (int i = 0; i < NUM_STEPPERS; i++){
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
 8000836:	e102      	b.n	8000a3e <HAL_TIM_OC_DelayElapsedCallback+0x226>
		if ( ! ( (1 << i) & remainingSteppersFlag )){
 8000838:	4b89      	ldr	r3, [pc, #548]	; (8000a60 <HAL_TIM_OC_DelayElapsedCallback+0x248>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	461a      	mov	r2, r3
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	fa42 f303 	asr.w	r3, r2, r3
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	2b00      	cmp	r3, #0
 800084c:	f000 80f3 	beq.w	8000a36 <HAL_TIM_OC_DelayElapsedCallback+0x21e>
			continue;
		}

		if( homing_flag & (1 << i)){
 8000850:	4b84      	ldr	r3, [pc, #528]	; (8000a64 <HAL_TIM_OC_DelayElapsedCallback+0x24c>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	461a      	mov	r2, r3
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	fa42 f303 	asr.w	r3, r2, r3
 800085c:	f003 0301 	and.w	r3, r3, #1
 8000860:	2b00      	cmp	r3, #0
 8000862:	d01a      	beq.n	800089a <HAL_TIM_OC_DelayElapsedCallback+0x82>
			if(end_stop_state & (1 << i)){
 8000864:	4b80      	ldr	r3, [pc, #512]	; (8000a68 <HAL_TIM_OC_DelayElapsedCallback+0x250>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	461a      	mov	r2, r3
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	fa42 f303 	asr.w	r3, r2, r3
 8000870:	f003 0301 	and.w	r3, r3, #1
 8000874:	2b00      	cmp	r3, #0
 8000876:	d010      	beq.n	800089a <HAL_TIM_OC_DelayElapsedCallback+0x82>
				remainingSteppersFlag &= ~(1 << i);
 8000878:	2201      	movs	r2, #1
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	fa02 f303 	lsl.w	r3, r2, r3
 8000880:	b25b      	sxtb	r3, r3
 8000882:	43db      	mvns	r3, r3
 8000884:	b25a      	sxtb	r2, r3
 8000886:	4b76      	ldr	r3, [pc, #472]	; (8000a60 <HAL_TIM_OC_DelayElapsedCallback+0x248>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	b2db      	uxtb	r3, r3
 800088c:	b25b      	sxtb	r3, r3
 800088e:	4013      	ands	r3, r2
 8000890:	b25b      	sxtb	r3, r3
 8000892:	b2da      	uxtb	r2, r3
 8000894:	4b72      	ldr	r3, [pc, #456]	; (8000a60 <HAL_TIM_OC_DelayElapsedCallback+0x248>)
 8000896:	701a      	strb	r2, [r3, #0]
				continue;
 8000898:	e0ce      	b.n	8000a38 <HAL_TIM_OC_DelayElapsedCallback+0x220>
			}
		}

		if ( ! (nextStepperFlag & (1 << i)) ){
 800089a:	4b74      	ldr	r3, [pc, #464]	; (8000a6c <HAL_TIM_OC_DelayElapsedCallback+0x254>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	461a      	mov	r2, r3
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	fa42 f303 	asr.w	r3, r2, r3
 80008a8:	f003 0301 	and.w	r3, r3, #1
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d10e      	bne.n	80008ce <HAL_TIM_OC_DelayElapsedCallback+0xb6>
			steppers[i].di -= tmpCtr;
 80008b0:	4a6f      	ldr	r2, [pc, #444]	; (8000a70 <HAL_TIM_OC_DelayElapsedCallback+0x258>)
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	019b      	lsls	r3, r3, #6
 80008b6:	4413      	add	r3, r2
 80008b8:	3338      	adds	r3, #56	; 0x38
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	693b      	ldr	r3, [r7, #16]
 80008be:	1ad2      	subs	r2, r2, r3
 80008c0:	496b      	ldr	r1, [pc, #428]	; (8000a70 <HAL_TIM_OC_DelayElapsedCallback+0x258>)
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	019b      	lsls	r3, r3, #6
 80008c6:	440b      	add	r3, r1
 80008c8:	3338      	adds	r3, #56	; 0x38
 80008ca:	601a      	str	r2, [r3, #0]
			continue;
 80008cc:	e0b4      	b.n	8000a38 <HAL_TIM_OC_DelayElapsedCallback+0x220>
		}

		volatile stepperInfo* s = &steppers[i];
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	019b      	lsls	r3, r3, #6
 80008d2:	4a67      	ldr	r2, [pc, #412]	; (8000a70 <HAL_TIM_OC_DelayElapsedCallback+0x258>)
 80008d4:	4413      	add	r3, r2
 80008d6:	60fb      	str	r3, [r7, #12]



		if( (s->stepCount) < (s->totalSteps) ){
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d22f      	bcs.n	8000944 <HAL_TIM_OC_DelayElapsedCallback+0x12c>
			s->stepFunc();
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	4798      	blx	r3
			s->stepCount++;
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008ee:	1c5a      	adds	r2, r3, #1
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	63da      	str	r2, [r3, #60]	; 0x3c
			s->stepPosition += s->dir;
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	6a1b      	ldr	r3, [r3, #32]
 80008f8:	68fa      	ldr	r2, [r7, #12]
 80008fa:	e9d2 0106 	ldrd	r0, r1, [r2, #24]
 80008fe:	461a      	mov	r2, r3
 8000900:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000904:	1884      	adds	r4, r0, r2
 8000906:	eb41 0503 	adc.w	r5, r1, r3
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	e9c3 4506 	strd	r4, r5, [r3, #24]
			if ( (s->stepCount) >= (s->totalSteps) ){
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000918:	429a      	cmp	r2, r3
 800091a:	d313      	bcc.n	8000944 <HAL_TIM_OC_DelayElapsedCallback+0x12c>
				s->movementDone = 1;
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	2201      	movs	r2, #1
 8000920:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				remainingSteppersFlag &= ~(1 << i);
 8000924:	2201      	movs	r2, #1
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	b25b      	sxtb	r3, r3
 800092e:	43db      	mvns	r3, r3
 8000930:	b25a      	sxtb	r2, r3
 8000932:	4b4b      	ldr	r3, [pc, #300]	; (8000a60 <HAL_TIM_OC_DelayElapsedCallback+0x248>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	b2db      	uxtb	r3, r3
 8000938:	b25b      	sxtb	r3, r3
 800093a:	4013      	ands	r3, r2
 800093c:	b25b      	sxtb	r3, r3
 800093e:	b2da      	uxtb	r2, r3
 8000940:	4b47      	ldr	r3, [pc, #284]	; (8000a60 <HAL_TIM_OC_DelayElapsedCallback+0x248>)
 8000942:	701a      	strb	r2, [r3, #0]
			}
		}

		if (s->rampUpStepCount == 0){
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000948:	2b00      	cmp	r3, #0
 800094a:	d142      	bne.n	80009d2 <HAL_TIM_OC_DelayElapsedCallback+0x1ba>
			s->n++;
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000950:	1c5a      	adds	r2, r3, #1
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	631a      	str	r2, [r3, #48]	; 0x30
			s->d = s->d - (2*s->d) / (4*s->n +1);
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000962:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	3301      	adds	r3, #1
 800096e:	ee07 3a90 	vmov	s15, r3
 8000972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000976:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800097a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
			if (s->d <= s->minStepInterval ){
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	ee07 3a90 	vmov	s15, r3
 8000992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000996:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800099a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800099e:	d80c      	bhi.n	80009ba <HAL_TIM_OC_DelayElapsedCallback+0x1a2>
				s->d = s->minStepInterval;
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	ee07 3a90 	vmov	s15, r3
 80009a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
				s->rampUpStepCount = s->stepCount;
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	62da      	str	r2, [r3, #44]	; 0x2c
			}
			if (s->stepCount >= (s->totalSteps / 2) ){
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c2:	085b      	lsrs	r3, r3, #1
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d32c      	bcc.n	8000a22 <HAL_TIM_OC_DelayElapsedCallback+0x20a>
				s->rampUpStepCount = s->stepCount;
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80009d0:	e027      	b.n	8000a22 <HAL_TIM_OC_DelayElapsedCallback+0x20a>
			}
		} else if ( s->stepCount >= s->totalSteps - s->rampUpStepCount) {
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009de:	1acb      	subs	r3, r1, r3
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d31e      	bcc.n	8000a22 <HAL_TIM_OC_DelayElapsedCallback+0x20a>
			s->d = (s->d * (4 * s->n + 1)) / (4 * s->n + 1 -2);
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	3301      	adds	r3, #1
 80009f2:	ee07 3a90 	vmov	s15, r3
 80009f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009fa:	ee67 6a27 	vmul.f32	s13, s14, s15
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	3b01      	subs	r3, #1
 8000a06:	ee07 3a90 	vmov	s15, r3
 8000a0a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
			s->n--;
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1c:	1e5a      	subs	r2, r3, #1
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	631a      	str	r2, [r3, #48]	; 0x30
		}
		s->di = s->d;
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000a28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a2c:	ee17 2a90 	vmov	r2, s15
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	639a      	str	r2, [r3, #56]	; 0x38
 8000a34:	e000      	b.n	8000a38 <HAL_TIM_OC_DelayElapsedCallback+0x220>
			continue;
 8000a36:	bf00      	nop
	for (int i = 0; i < NUM_STEPPERS; i++){
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	617b      	str	r3, [r7, #20]
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	f77f aef9 	ble.w	8000838 <HAL_TIM_OC_DelayElapsedCallback+0x20>
	}

	setNextInterruptInterval();
 8000a46:	f7ff fe71 	bl	800072c <setNextInterruptInterval>

	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000a4a:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <HAL_TIM_OC_DelayElapsedCallback+0x244>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	625a      	str	r2, [r3, #36]	; 0x24


}
 8000a52:	bf00      	nop
 8000a54:	3718      	adds	r7, #24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bdb0      	pop	{r4, r5, r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000070 	.word	0x20000070
 8000a60:	2000002e 	.word	0x2000002e
 8000a64:	2000002d 	.word	0x2000002d
 8000a68:	2000002c 	.word	0x2000002c
 8000a6c:	2000002f 	.word	0x2000002f
 8000a70:	20000030 	.word	0x20000030

08000a74 <runAndWait>:
	if( ! HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9)){
		end_stop_state |= 1;
	}
}

void runAndWait(){
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
	setNextInterruptInterval();
 8000a78:	f7ff fe58 	bl	800072c <setNextInterruptInterval>
	while(remainingSteppersFlag);
 8000a7c:	bf00      	nop
 8000a7e:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <runAndWait+0x1c>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d1fa      	bne.n	8000a7e <runAndWait+0xa>
}
 8000a88:	bf00      	nop
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	2000002e 	.word	0x2000002e

08000a94 <stepperHoming>:

void stepperHoming(int whichMotor){
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	homing_flag |= (1 << whichMotor);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa4:	b25a      	sxtb	r2, r3
 8000aa6:	4b31      	ldr	r3, [pc, #196]	; (8000b6c <stepperHoming+0xd8>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	b25b      	sxtb	r3, r3
 8000aac:	4313      	orrs	r3, r2
 8000aae:	b25b      	sxtb	r3, r3
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	4b2e      	ldr	r3, [pc, #184]	; (8000b6c <stepperHoming+0xd8>)
 8000ab4:	701a      	strb	r2, [r3, #0]
	//seeking
	prepareMovement(whichMotor, -1000000000);
 8000ab6:	492e      	ldr	r1, [pc, #184]	; (8000b70 <stepperHoming+0xdc>)
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff fda7 	bl	800060c <prepareMovement>
	runAndWait();
 8000abe:	f7ff ffd9 	bl	8000a74 <runAndWait>
	//pull-off
	homing_flag &= ~(1 << whichMotor);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	b25b      	sxtb	r3, r3
 8000acc:	43db      	mvns	r3, r3
 8000ace:	b25a      	sxtb	r2, r3
 8000ad0:	4b26      	ldr	r3, [pc, #152]	; (8000b6c <stepperHoming+0xd8>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	b25b      	sxtb	r3, r3
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	b25b      	sxtb	r3, r3
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	4b23      	ldr	r3, [pc, #140]	; (8000b6c <stepperHoming+0xd8>)
 8000ade:	701a      	strb	r2, [r3, #0]
	prepareMovement(whichMotor, 6000);
 8000ae0:	f241 7170 	movw	r1, #6000	; 0x1770
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f7ff fd91 	bl	800060c <prepareMovement>
	runAndWait();
 8000aea:	f7ff ffc3 	bl	8000a74 <runAndWait>
	//homing
	homing_flag |= (1 << whichMotor);
 8000aee:	2201      	movs	r2, #1
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	b25a      	sxtb	r2, r3
 8000af8:	4b1c      	ldr	r3, [pc, #112]	; (8000b6c <stepperHoming+0xd8>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	b25b      	sxtb	r3, r3
 8000afe:	4313      	orrs	r3, r2
 8000b00:	b25b      	sxtb	r3, r3
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	4b19      	ldr	r3, [pc, #100]	; (8000b6c <stepperHoming+0xd8>)
 8000b06:	701a      	strb	r2, [r3, #0]
	steppers[0].minStepInterval = 100;
 8000b08:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <stepperHoming+0xe0>)
 8000b0a:	2264      	movs	r2, #100	; 0x64
 8000b0c:	605a      	str	r2, [r3, #4]
	prepareMovement(whichMotor, -1000000000);
 8000b0e:	4918      	ldr	r1, [pc, #96]	; (8000b70 <stepperHoming+0xdc>)
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f7ff fd7b 	bl	800060c <prepareMovement>
	runAndWait();
 8000b16:	f7ff ffad 	bl	8000a74 <runAndWait>
	//pull-off
	homing_flag &= ~(1 << whichMotor);
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	b25b      	sxtb	r3, r3
 8000b24:	43db      	mvns	r3, r3
 8000b26:	b25a      	sxtb	r2, r3
 8000b28:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <stepperHoming+0xd8>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	b25b      	sxtb	r3, r3
 8000b2e:	4013      	ands	r3, r2
 8000b30:	b25b      	sxtb	r3, r3
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <stepperHoming+0xd8>)
 8000b36:	701a      	strb	r2, [r3, #0]

	prepareMovement(whichMotor, 6000);
 8000b38:	f241 7170 	movw	r1, #6000	; 0x1770
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f7ff fd65 	bl	800060c <prepareMovement>
	runAndWait();
 8000b42:	f7ff ff97 	bl	8000a74 <runAndWait>
	steppers[whichMotor].stepPosition = 0;
 8000b46:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <stepperHoming+0xe0>)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	019b      	lsls	r3, r3, #6
 8000b4c:	4413      	add	r3, r2
 8000b4e:	f103 0118 	add.w	r1, r3, #24
 8000b52:	f04f 0200 	mov.w	r2, #0
 8000b56:	f04f 0300 	mov.w	r3, #0
 8000b5a:	e9c1 2300 	strd	r2, r3, [r1]
	steppers[0].minStepInterval = 10;
 8000b5e:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <stepperHoming+0xe0>)
 8000b60:	220a      	movs	r2, #10
 8000b62:	605a      	str	r2, [r3, #4]
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	2000002d 	.word	0x2000002d
 8000b70:	c4653600 	.word	0xc4653600
 8000b74:	20000030 	.word	0x20000030

08000b78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b7c:	f000 fa7f 	bl	800107e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b80:	f000 f856 	bl	8000c30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b84:	f000 f96c 	bl	8000e60 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000b88:	f000 f8c0 	bl	8000d0c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  steppers[0].dirFunc = Dir0;
 8000b8c:	4b22      	ldr	r3, [pc, #136]	; (8000c18 <main+0xa0>)
 8000b8e:	4a23      	ldr	r2, [pc, #140]	; (8000c1c <main+0xa4>)
 8000b90:	609a      	str	r2, [r3, #8]
  steppers[0].stepFunc = Step0;
 8000b92:	4b21      	ldr	r3, [pc, #132]	; (8000c18 <main+0xa0>)
 8000b94:	4a22      	ldr	r2, [pc, #136]	; (8000c20 <main+0xa8>)
 8000b96:	60da      	str	r2, [r3, #12]
  steppers[0].acceleration = 5000;
 8000b98:	4b1f      	ldr	r3, [pc, #124]	; (8000c18 <main+0xa0>)
 8000b9a:	4a22      	ldr	r2, [pc, #136]	; (8000c24 <main+0xac>)
 8000b9c:	601a      	str	r2, [r3, #0]
  steppers[0].minStepInterval = 10;
 8000b9e:	4b1e      	ldr	r3, [pc, #120]	; (8000c18 <main+0xa0>)
 8000ba0:	220a      	movs	r2, #10
 8000ba2:	605a      	str	r2, [r3, #4]
  steppers[0].homing = 0;
 8000ba4:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <main+0xa0>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	741a      	strb	r2, [r3, #16]

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8000baa:	2201      	movs	r2, #1
 8000bac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bb0:	481d      	ldr	r0, [pc, #116]	; (8000c28 <main+0xb0>)
 8000bb2:	f000 fdbb 	bl	800172c <HAL_GPIO_WritePin>

  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	481c      	ldr	r0, [pc, #112]	; (8000c2c <main+0xb4>)
 8000bba:	f001 fb37 	bl	800222c <HAL_TIM_OC_Start_IT>

  stepperHoming(0);
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f7ff ff68 	bl	8000a94 <stepperHoming>
  HAL_Delay(3000);
 8000bc4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000bc8:	f000 fab6 	bl	8001138 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  prepareAbsoluteMovement(0, 10000);
 8000bcc:	f242 7210 	movw	r2, #10000	; 0x2710
 8000bd0:	f04f 0300 	mov.w	r3, #0
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	f7ff fd53 	bl	8000680 <prepareAbsoluteMovement>
	  runAndWait();
 8000bda:	f7ff ff4b 	bl	8000a74 <runAndWait>
	  HAL_Delay(1);
 8000bde:	2001      	movs	r0, #1
 8000be0:	f000 faaa 	bl	8001138 <HAL_Delay>
	  prepareAbsoluteMovement(0, 15000);
 8000be4:	f643 2298 	movw	r2, #15000	; 0x3a98
 8000be8:	f04f 0300 	mov.w	r3, #0
 8000bec:	2000      	movs	r0, #0
 8000bee:	f7ff fd47 	bl	8000680 <prepareAbsoluteMovement>
	  runAndWait();
 8000bf2:	f7ff ff3f 	bl	8000a74 <runAndWait>
	  HAL_Delay(1);
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	f000 fa9e 	bl	8001138 <HAL_Delay>
	  prepareAbsoluteMovement(0, 0);
 8000bfc:	f04f 0200 	mov.w	r2, #0
 8000c00:	f04f 0300 	mov.w	r3, #0
 8000c04:	2000      	movs	r0, #0
 8000c06:	f7ff fd3b 	bl	8000680 <prepareAbsoluteMovement>
	  runAndWait();
 8000c0a:	f7ff ff33 	bl	8000a74 <runAndWait>
	  HAL_Delay(1);
 8000c0e:	2001      	movs	r0, #1
 8000c10:	f000 fa92 	bl	8001138 <HAL_Delay>
	  prepareAbsoluteMovement(0, 10000);
 8000c14:	e7da      	b.n	8000bcc <main+0x54>
 8000c16:	bf00      	nop
 8000c18:	20000030 	.word	0x20000030
 8000c1c:	08000585 	.word	0x08000585
 8000c20:	08000561 	.word	0x08000561
 8000c24:	459c4000 	.word	0x459c4000
 8000c28:	40020800 	.word	0x40020800
 8000c2c:	20000070 	.word	0x20000070

08000c30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b094      	sub	sp, #80	; 0x50
 8000c34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c36:	f107 0320 	add.w	r3, r7, #32
 8000c3a:	2230      	movs	r2, #48	; 0x30
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f002 fbc4 	bl	80033cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c44:	f107 030c 	add.w	r3, r7, #12
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c54:	4b2b      	ldr	r3, [pc, #172]	; (8000d04 <SystemClock_Config+0xd4>)
 8000c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c58:	4a2a      	ldr	r2, [pc, #168]	; (8000d04 <SystemClock_Config+0xd4>)
 8000c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c60:	4b28      	ldr	r3, [pc, #160]	; (8000d04 <SystemClock_Config+0xd4>)
 8000c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c6c:	4b26      	ldr	r3, [pc, #152]	; (8000d08 <SystemClock_Config+0xd8>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c74:	4a24      	ldr	r2, [pc, #144]	; (8000d08 <SystemClock_Config+0xd8>)
 8000c76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c7a:	6013      	str	r3, [r2, #0]
 8000c7c:	4b22      	ldr	r3, [pc, #136]	; (8000d08 <SystemClock_Config+0xd8>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c90:	2310      	movs	r3, #16
 8000c92:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c94:	2302      	movs	r3, #2
 8000c96:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000c9c:	2310      	movs	r3, #16
 8000c9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000ca0:	23c0      	movs	r3, #192	; 0xc0
 8000ca2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cac:	f107 0320 	add.w	r3, r7, #32
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f000 fdbd 	bl	8001830 <HAL_RCC_OscConfig>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000cbc:	f000 f918 	bl	8000ef0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000cc0:	f000 fd66 	bl	8001790 <HAL_PWREx_EnableOverDrive>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000cca:	f000 f911 	bl	8000ef0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cce:	230f      	movs	r3, #15
 8000cd0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cde:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	2103      	movs	r1, #3
 8000cea:	4618      	mov	r0, r3
 8000cec:	f001 f844 	bl	8001d78 <HAL_RCC_ClockConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000cf6:	f000 f8fb 	bl	8000ef0 <Error_Handler>
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	3750      	adds	r7, #80	; 0x50
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40007000 	.word	0x40007000

08000d0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b09a      	sub	sp, #104	; 0x68
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d12:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d20:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
 8000d3c:	615a      	str	r2, [r3, #20]
 8000d3e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	222c      	movs	r2, #44	; 0x2c
 8000d44:	2100      	movs	r1, #0
 8000d46:	4618      	mov	r0, r3
 8000d48:	f002 fb40 	bl	80033cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d4c:	4b42      	ldr	r3, [pc, #264]	; (8000e58 <MX_TIM1_Init+0x14c>)
 8000d4e:	4a43      	ldr	r2, [pc, #268]	; (8000e5c <MX_TIM1_Init+0x150>)
 8000d50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 8000d52:	4b41      	ldr	r3, [pc, #260]	; (8000e58 <MX_TIM1_Init+0x14c>)
 8000d54:	225f      	movs	r2, #95	; 0x5f
 8000d56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d58:	4b3f      	ldr	r3, [pc, #252]	; (8000e58 <MX_TIM1_Init+0x14c>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d5e:	4b3e      	ldr	r3, [pc, #248]	; (8000e58 <MX_TIM1_Init+0x14c>)
 8000d60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d66:	4b3c      	ldr	r3, [pc, #240]	; (8000e58 <MX_TIM1_Init+0x14c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d6c:	4b3a      	ldr	r3, [pc, #232]	; (8000e58 <MX_TIM1_Init+0x14c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d72:	4b39      	ldr	r3, [pc, #228]	; (8000e58 <MX_TIM1_Init+0x14c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d78:	4837      	ldr	r0, [pc, #220]	; (8000e58 <MX_TIM1_Init+0x14c>)
 8000d7a:	f001 f99f 	bl	80020bc <HAL_TIM_Base_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000d84:	f000 f8b4 	bl	8000ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d8c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d8e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d92:	4619      	mov	r1, r3
 8000d94:	4830      	ldr	r0, [pc, #192]	; (8000e58 <MX_TIM1_Init+0x14c>)
 8000d96:	f001 fd1f 	bl	80027d8 <HAL_TIM_ConfigClockSource>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000da0:	f000 f8a6 	bl	8000ef0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000da4:	482c      	ldr	r0, [pc, #176]	; (8000e58 <MX_TIM1_Init+0x14c>)
 8000da6:	f001 f9e0 	bl	800216a <HAL_TIM_OC_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000db0:	f000 f89e 	bl	8000ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db4:	2300      	movs	r3, #0
 8000db6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000db8:	2300      	movs	r3, #0
 8000dba:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dc0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4824      	ldr	r0, [pc, #144]	; (8000e58 <MX_TIM1_Init+0x14c>)
 8000dc8:	f002 f9b2 	bl	8003130 <HAL_TIMEx_MasterConfigSynchronization>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000dd2:	f000 f88d 	bl	8000ef0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 100;
 8000dda:	2364      	movs	r3, #100	; 0x64
 8000ddc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dde:	2300      	movs	r3, #0
 8000de0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000de2:	2300      	movs	r3, #0
 8000de4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dea:	2300      	movs	r3, #0
 8000dec:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dee:	2300      	movs	r3, #0
 8000df0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000df2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000df6:	2200      	movs	r2, #0
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4817      	ldr	r0, [pc, #92]	; (8000e58 <MX_TIM1_Init+0x14c>)
 8000dfc:	f001 fc76 	bl	80026ec <HAL_TIM_OC_ConfigChannel>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000e06:	f000 f873 	bl	8000ef0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e22:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4806      	ldr	r0, [pc, #24]	; (8000e58 <MX_TIM1_Init+0x14c>)
 8000e40:	f002 fa04 	bl	800324c <HAL_TIMEx_ConfigBreakDeadTime>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000e4a:	f000 f851 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	3768      	adds	r7, #104	; 0x68
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000070 	.word	0x20000070
 8000e5c:	40010000 	.word	0x40010000

08000e60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e74:	4b1b      	ldr	r3, [pc, #108]	; (8000ee4 <MX_GPIO_Init+0x84>)
 8000e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e78:	4a1a      	ldr	r2, [pc, #104]	; (8000ee4 <MX_GPIO_Init+0x84>)
 8000e7a:	f043 0304 	orr.w	r3, r3, #4
 8000e7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e80:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <MX_GPIO_Init+0x84>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e84:	f003 0304 	and.w	r3, r3, #4
 8000e88:	603b      	str	r3, [r7, #0]
 8000e8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000e92:	4815      	ldr	r0, [pc, #84]	; (8000ee8 <MX_GPIO_Init+0x88>)
 8000e94:	f000 fc4a 	bl	800172c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000e9e:	4b13      	ldr	r3, [pc, #76]	; (8000eec <MX_GPIO_Init+0x8c>)
 8000ea0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	480f      	ldr	r0, [pc, #60]	; (8000ee8 <MX_GPIO_Init+0x88>)
 8000eac:	f000 fa7a 	bl	80013a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000eb0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000eb4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4808      	ldr	r0, [pc, #32]	; (8000ee8 <MX_GPIO_Init+0x88>)
 8000ec8:	f000 fa6c 	bl	80013a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2100      	movs	r1, #0
 8000ed0:	2017      	movs	r0, #23
 8000ed2:	f000 fa30 	bl	8001336 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ed6:	2017      	movs	r0, #23
 8000ed8:	f000 fa49 	bl	800136e <HAL_NVIC_EnableIRQ>

}
 8000edc:	bf00      	nop
 8000ede:	3718      	adds	r7, #24
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40020800 	.word	0x40020800
 8000eec:	10310000 	.word	0x10310000

08000ef0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef4:	b672      	cpsid	i
}
 8000ef6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <Error_Handler+0x8>
	...

08000efc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f02:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <HAL_MspInit+0x44>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	4a0e      	ldr	r2, [pc, #56]	; (8000f40 <HAL_MspInit+0x44>)
 8000f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <HAL_MspInit+0x44>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1a:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <HAL_MspInit+0x44>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	4a08      	ldr	r2, [pc, #32]	; (8000f40 <HAL_MspInit+0x44>)
 8000f20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f24:	6453      	str	r3, [r2, #68]	; 0x44
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_MspInit+0x44>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f2e:	603b      	str	r3, [r7, #0]
 8000f30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40023800 	.word	0x40023800

08000f44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a0d      	ldr	r2, [pc, #52]	; (8000f88 <HAL_TIM_Base_MspInit+0x44>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d113      	bne.n	8000f7e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f56:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <HAL_TIM_Base_MspInit+0x48>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5a:	4a0c      	ldr	r2, [pc, #48]	; (8000f8c <HAL_TIM_Base_MspInit+0x48>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6453      	str	r3, [r2, #68]	; 0x44
 8000f62:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <HAL_TIM_Base_MspInit+0x48>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2100      	movs	r1, #0
 8000f72:	201b      	movs	r0, #27
 8000f74:	f000 f9df 	bl	8001336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000f78:	201b      	movs	r0, #27
 8000f7a:	f000 f9f8 	bl	800136e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f7e:	bf00      	nop
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40010000 	.word	0x40010000
 8000f8c:	40023800 	.word	0x40023800

08000f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <NMI_Handler+0x4>

08000f96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <HardFault_Handler+0x4>

08000f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <MemManage_Handler+0x4>

08000fa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa6:	e7fe      	b.n	8000fa6 <BusFault_Handler+0x4>

08000fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <UsageFault_Handler+0x4>

08000fae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fdc:	f000 f88c 	bl	80010f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000fe8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fec:	f000 fbb8 	bl	8001760 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ff8:	4802      	ldr	r0, [pc, #8]	; (8001004 <TIM1_CC_IRQHandler+0x10>)
 8000ffa:	f001 fa57 	bl	80024ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000070 	.word	0x20000070

08001008 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <SystemInit+0x20>)
 800100e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001012:	4a05      	ldr	r2, [pc, #20]	; (8001028 <SystemInit+0x20>)
 8001014:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001018:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800102c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001064 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001030:	480d      	ldr	r0, [pc, #52]	; (8001068 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001032:	490e      	ldr	r1, [pc, #56]	; (800106c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001034:	4a0e      	ldr	r2, [pc, #56]	; (8001070 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001038:	e002      	b.n	8001040 <LoopCopyDataInit>

0800103a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800103c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103e:	3304      	adds	r3, #4

08001040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001044:	d3f9      	bcc.n	800103a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001046:	4a0b      	ldr	r2, [pc, #44]	; (8001074 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001048:	4c0b      	ldr	r4, [pc, #44]	; (8001078 <LoopFillZerobss+0x26>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800104c:	e001      	b.n	8001052 <LoopFillZerobss>

0800104e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001050:	3204      	adds	r2, #4

08001052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001054:	d3fb      	bcc.n	800104e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001056:	f7ff ffd7 	bl	8001008 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800105a:	f002 f993 	bl	8003384 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800105e:	f7ff fd8b 	bl	8000b78 <main>
  bx  lr    
 8001062:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001064:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001068:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800106c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001070:	08003414 	.word	0x08003414
  ldr r2, =_sbss
 8001074:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001078:	200000c0 	.word	0x200000c0

0800107c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800107c:	e7fe      	b.n	800107c <ADC_IRQHandler>

0800107e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001082:	2003      	movs	r0, #3
 8001084:	f000 f94c 	bl	8001320 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001088:	2000      	movs	r0, #0
 800108a:	f000 f805 	bl	8001098 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800108e:	f7ff ff35 	bl	8000efc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001092:	2300      	movs	r3, #0
}
 8001094:	4618      	mov	r0, r3
 8001096:	bd80      	pop	{r7, pc}

08001098 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <HAL_InitTick+0x54>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_InitTick+0x58>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	4619      	mov	r1, r3
 80010aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80010b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 f967 	bl	800138a <HAL_SYSTICK_Config>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e00e      	b.n	80010e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b0f      	cmp	r3, #15
 80010ca:	d80a      	bhi.n	80010e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010cc:	2200      	movs	r2, #0
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010d4:	f000 f92f 	bl	8001336 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d8:	4a06      	ldr	r2, [pc, #24]	; (80010f4 <HAL_InitTick+0x5c>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010de:	2300      	movs	r3, #0
 80010e0:	e000      	b.n	80010e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000000 	.word	0x20000000
 80010f0:	20000008 	.word	0x20000008
 80010f4:	20000004 	.word	0x20000004

080010f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_IncTick+0x20>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_IncTick+0x24>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4413      	add	r3, r2
 8001108:	4a04      	ldr	r2, [pc, #16]	; (800111c <HAL_IncTick+0x24>)
 800110a:	6013      	str	r3, [r2, #0]
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000008 	.word	0x20000008
 800111c:	200000bc 	.word	0x200000bc

08001120 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  return uwTick;
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <HAL_GetTick+0x14>)
 8001126:	681b      	ldr	r3, [r3, #0]
}
 8001128:	4618      	mov	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	200000bc 	.word	0x200000bc

08001138 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001140:	f7ff ffee 	bl	8001120 <HAL_GetTick>
 8001144:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001150:	d005      	beq.n	800115e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001152:	4b0a      	ldr	r3, [pc, #40]	; (800117c <HAL_Delay+0x44>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	461a      	mov	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4413      	add	r3, r2
 800115c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800115e:	bf00      	nop
 8001160:	f7ff ffde 	bl	8001120 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	429a      	cmp	r2, r3
 800116e:	d8f7      	bhi.n	8001160 <HAL_Delay+0x28>
  {
  }
}
 8001170:	bf00      	nop
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000008 	.word	0x20000008

08001180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001190:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <__NVIC_SetPriorityGrouping+0x40>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800119c:	4013      	ands	r3, r2
 800119e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <__NVIC_SetPriorityGrouping+0x44>)
 80011aa:	4313      	orrs	r3, r2
 80011ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ae:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <__NVIC_SetPriorityGrouping+0x40>)
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	60d3      	str	r3, [r2, #12]
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00
 80011c4:	05fa0000 	.word	0x05fa0000

080011c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	0a1b      	lsrs	r3, r3, #8
 80011d2:	f003 0307 	and.w	r3, r3, #7
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	db0b      	blt.n	800120e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	f003 021f 	and.w	r2, r3, #31
 80011fc:	4907      	ldr	r1, [pc, #28]	; (800121c <__NVIC_EnableIRQ+0x38>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	095b      	lsrs	r3, r3, #5
 8001204:	2001      	movs	r0, #1
 8001206:	fa00 f202 	lsl.w	r2, r0, r2
 800120a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	e000e100 	.word	0xe000e100

08001220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	6039      	str	r1, [r7, #0]
 800122a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800122c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001230:	2b00      	cmp	r3, #0
 8001232:	db0a      	blt.n	800124a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	b2da      	uxtb	r2, r3
 8001238:	490c      	ldr	r1, [pc, #48]	; (800126c <__NVIC_SetPriority+0x4c>)
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	0112      	lsls	r2, r2, #4
 8001240:	b2d2      	uxtb	r2, r2
 8001242:	440b      	add	r3, r1
 8001244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001248:	e00a      	b.n	8001260 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	b2da      	uxtb	r2, r3
 800124e:	4908      	ldr	r1, [pc, #32]	; (8001270 <__NVIC_SetPriority+0x50>)
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	f003 030f 	and.w	r3, r3, #15
 8001256:	3b04      	subs	r3, #4
 8001258:	0112      	lsls	r2, r2, #4
 800125a:	b2d2      	uxtb	r2, r2
 800125c:	440b      	add	r3, r1
 800125e:	761a      	strb	r2, [r3, #24]
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	e000e100 	.word	0xe000e100
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001274:	b480      	push	{r7}
 8001276:	b089      	sub	sp, #36	; 0x24
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	f1c3 0307 	rsb	r3, r3, #7
 800128e:	2b04      	cmp	r3, #4
 8001290:	bf28      	it	cs
 8001292:	2304      	movcs	r3, #4
 8001294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3304      	adds	r3, #4
 800129a:	2b06      	cmp	r3, #6
 800129c:	d902      	bls.n	80012a4 <NVIC_EncodePriority+0x30>
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3b03      	subs	r3, #3
 80012a2:	e000      	b.n	80012a6 <NVIC_EncodePriority+0x32>
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43da      	mvns	r2, r3
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	401a      	ands	r2, r3
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	fa01 f303 	lsl.w	r3, r1, r3
 80012c6:	43d9      	mvns	r1, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012cc:	4313      	orrs	r3, r2
         );
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3724      	adds	r7, #36	; 0x24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
	...

080012dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012ec:	d301      	bcc.n	80012f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ee:	2301      	movs	r3, #1
 80012f0:	e00f      	b.n	8001312 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f2:	4a0a      	ldr	r2, [pc, #40]	; (800131c <SysTick_Config+0x40>)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012fa:	210f      	movs	r1, #15
 80012fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001300:	f7ff ff8e 	bl	8001220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <SysTick_Config+0x40>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130a:	4b04      	ldr	r3, [pc, #16]	; (800131c <SysTick_Config+0x40>)
 800130c:	2207      	movs	r2, #7
 800130e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	e000e010 	.word	0xe000e010

08001320 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff ff29 	bl	8001180 <__NVIC_SetPriorityGrouping>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001336:	b580      	push	{r7, lr}
 8001338:	b086      	sub	sp, #24
 800133a:	af00      	add	r7, sp, #0
 800133c:	4603      	mov	r3, r0
 800133e:	60b9      	str	r1, [r7, #8]
 8001340:	607a      	str	r2, [r7, #4]
 8001342:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001348:	f7ff ff3e 	bl	80011c8 <__NVIC_GetPriorityGrouping>
 800134c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	68b9      	ldr	r1, [r7, #8]
 8001352:	6978      	ldr	r0, [r7, #20]
 8001354:	f7ff ff8e 	bl	8001274 <NVIC_EncodePriority>
 8001358:	4602      	mov	r2, r0
 800135a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135e:	4611      	mov	r1, r2
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff5d 	bl	8001220 <__NVIC_SetPriority>
}
 8001366:	bf00      	nop
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	4603      	mov	r3, r0
 8001376:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff31 	bl	80011e4 <__NVIC_EnableIRQ>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff ffa2 	bl	80012dc <SysTick_Config>
 8001398:	4603      	mov	r3, r0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b089      	sub	sp, #36	; 0x24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
 80013c2:	e175      	b.n	80016b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80013c4:	2201      	movs	r2, #1
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	697a      	ldr	r2, [r7, #20]
 80013d4:	4013      	ands	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	429a      	cmp	r2, r3
 80013de:	f040 8164 	bne.w	80016aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d00b      	beq.n	8001402 <HAL_GPIO_Init+0x5e>
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d007      	beq.n	8001402 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013f6:	2b11      	cmp	r3, #17
 80013f8:	d003      	beq.n	8001402 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	2b12      	cmp	r3, #18
 8001400:	d130      	bne.n	8001464 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	2203      	movs	r2, #3
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	68da      	ldr	r2, [r3, #12]
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4313      	orrs	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001438:	2201      	movs	r2, #1
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	091b      	lsrs	r3, r3, #4
 800144e:	f003 0201 	and.w	r2, r3, #1
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4313      	orrs	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	2203      	movs	r2, #3
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4313      	orrs	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2b02      	cmp	r3, #2
 800149a:	d003      	beq.n	80014a4 <HAL_GPIO_Init+0x100>
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b12      	cmp	r3, #18
 80014a2:	d123      	bne.n	80014ec <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	08da      	lsrs	r2, r3, #3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3208      	adds	r2, #8
 80014ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	f003 0307 	and.w	r3, r3, #7
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	220f      	movs	r2, #15
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	691a      	ldr	r2, [r3, #16]
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	08da      	lsrs	r2, r3, #3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	3208      	adds	r2, #8
 80014e6:	69b9      	ldr	r1, [r7, #24]
 80014e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	2203      	movs	r2, #3
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f003 0203 	and.w	r2, r3, #3
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4313      	orrs	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 80be 	beq.w	80016aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152e:	4b66      	ldr	r3, [pc, #408]	; (80016c8 <HAL_GPIO_Init+0x324>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	4a65      	ldr	r2, [pc, #404]	; (80016c8 <HAL_GPIO_Init+0x324>)
 8001534:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001538:	6453      	str	r3, [r2, #68]	; 0x44
 800153a:	4b63      	ldr	r3, [pc, #396]	; (80016c8 <HAL_GPIO_Init+0x324>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001546:	4a61      	ldr	r2, [pc, #388]	; (80016cc <HAL_GPIO_Init+0x328>)
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	089b      	lsrs	r3, r3, #2
 800154c:	3302      	adds	r3, #2
 800154e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001552:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f003 0303 	and.w	r3, r3, #3
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	220f      	movs	r2, #15
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43db      	mvns	r3, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4013      	ands	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a58      	ldr	r2, [pc, #352]	; (80016d0 <HAL_GPIO_Init+0x32c>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d037      	beq.n	80015e2 <HAL_GPIO_Init+0x23e>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a57      	ldr	r2, [pc, #348]	; (80016d4 <HAL_GPIO_Init+0x330>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d031      	beq.n	80015de <HAL_GPIO_Init+0x23a>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a56      	ldr	r2, [pc, #344]	; (80016d8 <HAL_GPIO_Init+0x334>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d02b      	beq.n	80015da <HAL_GPIO_Init+0x236>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a55      	ldr	r2, [pc, #340]	; (80016dc <HAL_GPIO_Init+0x338>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d025      	beq.n	80015d6 <HAL_GPIO_Init+0x232>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a54      	ldr	r2, [pc, #336]	; (80016e0 <HAL_GPIO_Init+0x33c>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d01f      	beq.n	80015d2 <HAL_GPIO_Init+0x22e>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a53      	ldr	r2, [pc, #332]	; (80016e4 <HAL_GPIO_Init+0x340>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d019      	beq.n	80015ce <HAL_GPIO_Init+0x22a>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a52      	ldr	r2, [pc, #328]	; (80016e8 <HAL_GPIO_Init+0x344>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d013      	beq.n	80015ca <HAL_GPIO_Init+0x226>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a51      	ldr	r2, [pc, #324]	; (80016ec <HAL_GPIO_Init+0x348>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d00d      	beq.n	80015c6 <HAL_GPIO_Init+0x222>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a50      	ldr	r2, [pc, #320]	; (80016f0 <HAL_GPIO_Init+0x34c>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d007      	beq.n	80015c2 <HAL_GPIO_Init+0x21e>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a4f      	ldr	r2, [pc, #316]	; (80016f4 <HAL_GPIO_Init+0x350>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d101      	bne.n	80015be <HAL_GPIO_Init+0x21a>
 80015ba:	2309      	movs	r3, #9
 80015bc:	e012      	b.n	80015e4 <HAL_GPIO_Init+0x240>
 80015be:	230a      	movs	r3, #10
 80015c0:	e010      	b.n	80015e4 <HAL_GPIO_Init+0x240>
 80015c2:	2308      	movs	r3, #8
 80015c4:	e00e      	b.n	80015e4 <HAL_GPIO_Init+0x240>
 80015c6:	2307      	movs	r3, #7
 80015c8:	e00c      	b.n	80015e4 <HAL_GPIO_Init+0x240>
 80015ca:	2306      	movs	r3, #6
 80015cc:	e00a      	b.n	80015e4 <HAL_GPIO_Init+0x240>
 80015ce:	2305      	movs	r3, #5
 80015d0:	e008      	b.n	80015e4 <HAL_GPIO_Init+0x240>
 80015d2:	2304      	movs	r3, #4
 80015d4:	e006      	b.n	80015e4 <HAL_GPIO_Init+0x240>
 80015d6:	2303      	movs	r3, #3
 80015d8:	e004      	b.n	80015e4 <HAL_GPIO_Init+0x240>
 80015da:	2302      	movs	r3, #2
 80015dc:	e002      	b.n	80015e4 <HAL_GPIO_Init+0x240>
 80015de:	2301      	movs	r3, #1
 80015e0:	e000      	b.n	80015e4 <HAL_GPIO_Init+0x240>
 80015e2:	2300      	movs	r3, #0
 80015e4:	69fa      	ldr	r2, [r7, #28]
 80015e6:	f002 0203 	and.w	r2, r2, #3
 80015ea:	0092      	lsls	r2, r2, #2
 80015ec:	4093      	lsls	r3, r2
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80015f4:	4935      	ldr	r1, [pc, #212]	; (80016cc <HAL_GPIO_Init+0x328>)
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	089b      	lsrs	r3, r3, #2
 80015fa:	3302      	adds	r3, #2
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001602:	4b3d      	ldr	r3, [pc, #244]	; (80016f8 <HAL_GPIO_Init+0x354>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	43db      	mvns	r3, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	4313      	orrs	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001626:	4a34      	ldr	r2, [pc, #208]	; (80016f8 <HAL_GPIO_Init+0x354>)
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800162c:	4b32      	ldr	r3, [pc, #200]	; (80016f8 <HAL_GPIO_Init+0x354>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	43db      	mvns	r3, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	4313      	orrs	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001650:	4a29      	ldr	r2, [pc, #164]	; (80016f8 <HAL_GPIO_Init+0x354>)
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001656:	4b28      	ldr	r3, [pc, #160]	; (80016f8 <HAL_GPIO_Init+0x354>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	43db      	mvns	r3, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4013      	ands	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800167a:	4a1f      	ldr	r2, [pc, #124]	; (80016f8 <HAL_GPIO_Init+0x354>)
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001680:	4b1d      	ldr	r3, [pc, #116]	; (80016f8 <HAL_GPIO_Init+0x354>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	43db      	mvns	r3, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4013      	ands	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016a4:	4a14      	ldr	r2, [pc, #80]	; (80016f8 <HAL_GPIO_Init+0x354>)
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3301      	adds	r3, #1
 80016ae:	61fb      	str	r3, [r7, #28]
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	2b0f      	cmp	r3, #15
 80016b4:	f67f ae86 	bls.w	80013c4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80016b8:	bf00      	nop
 80016ba:	bf00      	nop
 80016bc:	3724      	adds	r7, #36	; 0x24
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40013800 	.word	0x40013800
 80016d0:	40020000 	.word	0x40020000
 80016d4:	40020400 	.word	0x40020400
 80016d8:	40020800 	.word	0x40020800
 80016dc:	40020c00 	.word	0x40020c00
 80016e0:	40021000 	.word	0x40021000
 80016e4:	40021400 	.word	0x40021400
 80016e8:	40021800 	.word	0x40021800
 80016ec:	40021c00 	.word	0x40021c00
 80016f0:	40022000 	.word	0x40022000
 80016f4:	40022400 	.word	0x40022400
 80016f8:	40013c00 	.word	0x40013c00

080016fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	460b      	mov	r3, r1
 8001706:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	691a      	ldr	r2, [r3, #16]
 800170c:	887b      	ldrh	r3, [r7, #2]
 800170e:	4013      	ands	r3, r2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d002      	beq.n	800171a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001714:	2301      	movs	r3, #1
 8001716:	73fb      	strb	r3, [r7, #15]
 8001718:	e001      	b.n	800171e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800171a:	2300      	movs	r3, #0
 800171c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800171e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	460b      	mov	r3, r1
 8001736:	807b      	strh	r3, [r7, #2]
 8001738:	4613      	mov	r3, r2
 800173a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800173c:	787b      	ldrb	r3, [r7, #1]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001742:	887a      	ldrh	r2, [r7, #2]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001748:	e003      	b.n	8001752 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800174a:	887b      	ldrh	r3, [r7, #2]
 800174c:	041a      	lsls	r2, r3, #16
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	619a      	str	r2, [r3, #24]
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
	...

08001760 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800176a:	4b08      	ldr	r3, [pc, #32]	; (800178c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800176c:	695a      	ldr	r2, [r3, #20]
 800176e:	88fb      	ldrh	r3, [r7, #6]
 8001770:	4013      	ands	r3, r2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d006      	beq.n	8001784 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001776:	4a05      	ldr	r2, [pc, #20]	; (800178c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001778:	88fb      	ldrh	r3, [r7, #6]
 800177a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800177c:	88fb      	ldrh	r3, [r7, #6]
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe febe 	bl	8000500 <HAL_GPIO_EXTI_Callback>
  }
}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40013c00 	.word	0x40013c00

08001790 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800179a:	4b23      	ldr	r3, [pc, #140]	; (8001828 <HAL_PWREx_EnableOverDrive+0x98>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	4a22      	ldr	r2, [pc, #136]	; (8001828 <HAL_PWREx_EnableOverDrive+0x98>)
 80017a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a4:	6413      	str	r3, [r2, #64]	; 0x40
 80017a6:	4b20      	ldr	r3, [pc, #128]	; (8001828 <HAL_PWREx_EnableOverDrive+0x98>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ae:	603b      	str	r3, [r7, #0]
 80017b0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80017b2:	4b1e      	ldr	r3, [pc, #120]	; (800182c <HAL_PWREx_EnableOverDrive+0x9c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a1d      	ldr	r2, [pc, #116]	; (800182c <HAL_PWREx_EnableOverDrive+0x9c>)
 80017b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017bc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017be:	f7ff fcaf 	bl	8001120 <HAL_GetTick>
 80017c2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80017c4:	e009      	b.n	80017da <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80017c6:	f7ff fcab 	bl	8001120 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017d4:	d901      	bls.n	80017da <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e022      	b.n	8001820 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80017da:	4b14      	ldr	r3, [pc, #80]	; (800182c <HAL_PWREx_EnableOverDrive+0x9c>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017e6:	d1ee      	bne.n	80017c6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80017e8:	4b10      	ldr	r3, [pc, #64]	; (800182c <HAL_PWREx_EnableOverDrive+0x9c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a0f      	ldr	r2, [pc, #60]	; (800182c <HAL_PWREx_EnableOverDrive+0x9c>)
 80017ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017f4:	f7ff fc94 	bl	8001120 <HAL_GetTick>
 80017f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80017fa:	e009      	b.n	8001810 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80017fc:	f7ff fc90 	bl	8001120 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800180a:	d901      	bls.n	8001810 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e007      	b.n	8001820 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001818:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800181c:	d1ee      	bne.n	80017fc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40023800 	.word	0x40023800
 800182c:	40007000 	.word	0x40007000

08001830 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001838:	2300      	movs	r3, #0
 800183a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e291      	b.n	8001d6a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 8087 	beq.w	8001962 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001854:	4b96      	ldr	r3, [pc, #600]	; (8001ab0 <HAL_RCC_OscConfig+0x280>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f003 030c 	and.w	r3, r3, #12
 800185c:	2b04      	cmp	r3, #4
 800185e:	d00c      	beq.n	800187a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001860:	4b93      	ldr	r3, [pc, #588]	; (8001ab0 <HAL_RCC_OscConfig+0x280>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f003 030c 	and.w	r3, r3, #12
 8001868:	2b08      	cmp	r3, #8
 800186a:	d112      	bne.n	8001892 <HAL_RCC_OscConfig+0x62>
 800186c:	4b90      	ldr	r3, [pc, #576]	; (8001ab0 <HAL_RCC_OscConfig+0x280>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001874:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001878:	d10b      	bne.n	8001892 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800187a:	4b8d      	ldr	r3, [pc, #564]	; (8001ab0 <HAL_RCC_OscConfig+0x280>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d06c      	beq.n	8001960 <HAL_RCC_OscConfig+0x130>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d168      	bne.n	8001960 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e26b      	b.n	8001d6a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800189a:	d106      	bne.n	80018aa <HAL_RCC_OscConfig+0x7a>
 800189c:	4b84      	ldr	r3, [pc, #528]	; (8001ab0 <HAL_RCC_OscConfig+0x280>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a83      	ldr	r2, [pc, #524]	; (8001ab0 <HAL_RCC_OscConfig+0x280>)
 80018a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a6:	6013      	str	r3, [r2, #0]
 80018a8:	e02e      	b.n	8001908 <HAL_RCC_OscConfig+0xd8>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10c      	bne.n	80018cc <HAL_RCC_OscConfig+0x9c>
 80018b2:	4b7f      	ldr	r3, [pc, #508]	; (8001ab0 <HAL_RCC_OscConfig+0x280>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a7e      	ldr	r2, [pc, #504]	; (8001ab0 <HAL_RCC_OscConfig+0x280>)
 80018b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	4b7c      	ldr	r3, [pc, #496]	; (8001ab0 <HAL_RCC_OscConfig+0x280>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a7b      	ldr	r2, [pc, #492]	; (8001ab0 <HAL_RCC_OscConfig+0x280>)
 80018c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	e01d      	b.n	8001908 <HAL_RCC_OscConfig+0xd8>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018d4:	d10c      	bne.n	80018f0 <HAL_RCC_OscConfig+0xc0>
 80018d6:	4b76      	ldr	r3, [pc, #472]	; (8001ab0 <HAL_RCC_OscConfig+0x280>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a75      	ldr	r2, [pc, #468]	; (8001ab0 <HAL_RCC_OscConfig+0x280>)
 80018dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	4b73      	ldr	r3, [pc, #460]	; (8001ab0 <HAL_RCC_OscConfig+0x280>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a72      	ldr	r2, [pc, #456]	; (8001ab0 <HAL_RCC_OscConfig+0x280>)
 80018e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	e00b      	b.n	8001908 <HAL_RCC_OscConfig+0xd8>
 80018f0:	4b6f      	ldr	r3, [pc, #444]	; (8001ab0 <HAL_RCC_OscConfig+0x280>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a6e      	ldr	r2, [pc, #440]	; (8001ab0 <HAL_RCC_OscConfig+0x280>)
 80018f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018fa:	6013      	str	r3, [r2, #0]
 80018fc:	4b6c      	ldr	r3, [pc, #432]	; (8001ab0 <HAL_RCC_OscConfig+0x280>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a6b      	ldr	r2, [pc, #428]	; (8001ab0 <HAL_RCC_OscConfig+0x280>)
 8001902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001906:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d013      	beq.n	8001938 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001910:	f7ff fc06 	bl	8001120 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001918:	f7ff fc02 	bl	8001120 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b64      	cmp	r3, #100	; 0x64
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e21f      	b.n	8001d6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800192a:	4b61      	ldr	r3, [pc, #388]	; (8001ab0 <HAL_RCC_OscConfig+0x280>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0f0      	beq.n	8001918 <HAL_RCC_OscConfig+0xe8>
 8001936:	e014      	b.n	8001962 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001938:	f7ff fbf2 	bl	8001120 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001940:	f7ff fbee 	bl	8001120 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b64      	cmp	r3, #100	; 0x64
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e20b      	b.n	8001d6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001952:	4b57      	ldr	r3, [pc, #348]	; (8001ab0 <HAL_RCC_OscConfig+0x280>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1f0      	bne.n	8001940 <HAL_RCC_OscConfig+0x110>
 800195e:	e000      	b.n	8001962 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d069      	beq.n	8001a42 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800196e:	4b50      	ldr	r3, [pc, #320]	; (8001ab0 <HAL_RCC_OscConfig+0x280>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 030c 	and.w	r3, r3, #12
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00b      	beq.n	8001992 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800197a:	4b4d      	ldr	r3, [pc, #308]	; (8001ab0 <HAL_RCC_OscConfig+0x280>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 030c 	and.w	r3, r3, #12
 8001982:	2b08      	cmp	r3, #8
 8001984:	d11c      	bne.n	80019c0 <HAL_RCC_OscConfig+0x190>
 8001986:	4b4a      	ldr	r3, [pc, #296]	; (8001ab0 <HAL_RCC_OscConfig+0x280>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d116      	bne.n	80019c0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001992:	4b47      	ldr	r3, [pc, #284]	; (8001ab0 <HAL_RCC_OscConfig+0x280>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d005      	beq.n	80019aa <HAL_RCC_OscConfig+0x17a>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d001      	beq.n	80019aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e1df      	b.n	8001d6a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019aa:	4b41      	ldr	r3, [pc, #260]	; (8001ab0 <HAL_RCC_OscConfig+0x280>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	493d      	ldr	r1, [pc, #244]	; (8001ab0 <HAL_RCC_OscConfig+0x280>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019be:	e040      	b.n	8001a42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d023      	beq.n	8001a10 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019c8:	4b39      	ldr	r3, [pc, #228]	; (8001ab0 <HAL_RCC_OscConfig+0x280>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a38      	ldr	r2, [pc, #224]	; (8001ab0 <HAL_RCC_OscConfig+0x280>)
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d4:	f7ff fba4 	bl	8001120 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019dc:	f7ff fba0 	bl	8001120 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e1bd      	b.n	8001d6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ee:	4b30      	ldr	r3, [pc, #192]	; (8001ab0 <HAL_RCC_OscConfig+0x280>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0f0      	beq.n	80019dc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fa:	4b2d      	ldr	r3, [pc, #180]	; (8001ab0 <HAL_RCC_OscConfig+0x280>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	4929      	ldr	r1, [pc, #164]	; (8001ab0 <HAL_RCC_OscConfig+0x280>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	600b      	str	r3, [r1, #0]
 8001a0e:	e018      	b.n	8001a42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a10:	4b27      	ldr	r3, [pc, #156]	; (8001ab0 <HAL_RCC_OscConfig+0x280>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a26      	ldr	r2, [pc, #152]	; (8001ab0 <HAL_RCC_OscConfig+0x280>)
 8001a16:	f023 0301 	bic.w	r3, r3, #1
 8001a1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1c:	f7ff fb80 	bl	8001120 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a24:	f7ff fb7c 	bl	8001120 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e199      	b.n	8001d6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a36:	4b1e      	ldr	r3, [pc, #120]	; (8001ab0 <HAL_RCC_OscConfig+0x280>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f0      	bne.n	8001a24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0308 	and.w	r3, r3, #8
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d038      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d019      	beq.n	8001a8a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a56:	4b16      	ldr	r3, [pc, #88]	; (8001ab0 <HAL_RCC_OscConfig+0x280>)
 8001a58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a5a:	4a15      	ldr	r2, [pc, #84]	; (8001ab0 <HAL_RCC_OscConfig+0x280>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a62:	f7ff fb5d 	bl	8001120 <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a6a:	f7ff fb59 	bl	8001120 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e176      	b.n	8001d6a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <HAL_RCC_OscConfig+0x280>)
 8001a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0f0      	beq.n	8001a6a <HAL_RCC_OscConfig+0x23a>
 8001a88:	e01a      	b.n	8001ac0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a8a:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <HAL_RCC_OscConfig+0x280>)
 8001a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a8e:	4a08      	ldr	r2, [pc, #32]	; (8001ab0 <HAL_RCC_OscConfig+0x280>)
 8001a90:	f023 0301 	bic.w	r3, r3, #1
 8001a94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a96:	f7ff fb43 	bl	8001120 <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a9c:	e00a      	b.n	8001ab4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a9e:	f7ff fb3f 	bl	8001120 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d903      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e15c      	b.n	8001d6a <HAL_RCC_OscConfig+0x53a>
 8001ab0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab4:	4b91      	ldr	r3, [pc, #580]	; (8001cfc <HAL_RCC_OscConfig+0x4cc>)
 8001ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1ee      	bne.n	8001a9e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 80a4 	beq.w	8001c16 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ace:	4b8b      	ldr	r3, [pc, #556]	; (8001cfc <HAL_RCC_OscConfig+0x4cc>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10d      	bne.n	8001af6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ada:	4b88      	ldr	r3, [pc, #544]	; (8001cfc <HAL_RCC_OscConfig+0x4cc>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	4a87      	ldr	r2, [pc, #540]	; (8001cfc <HAL_RCC_OscConfig+0x4cc>)
 8001ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae6:	4b85      	ldr	r3, [pc, #532]	; (8001cfc <HAL_RCC_OscConfig+0x4cc>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001af2:	2301      	movs	r3, #1
 8001af4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001af6:	4b82      	ldr	r3, [pc, #520]	; (8001d00 <HAL_RCC_OscConfig+0x4d0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d118      	bne.n	8001b34 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001b02:	4b7f      	ldr	r3, [pc, #508]	; (8001d00 <HAL_RCC_OscConfig+0x4d0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a7e      	ldr	r2, [pc, #504]	; (8001d00 <HAL_RCC_OscConfig+0x4d0>)
 8001b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b0e:	f7ff fb07 	bl	8001120 <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b16:	f7ff fb03 	bl	8001120 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b64      	cmp	r3, #100	; 0x64
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e120      	b.n	8001d6a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b28:	4b75      	ldr	r3, [pc, #468]	; (8001d00 <HAL_RCC_OscConfig+0x4d0>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d0f0      	beq.n	8001b16 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d106      	bne.n	8001b4a <HAL_RCC_OscConfig+0x31a>
 8001b3c:	4b6f      	ldr	r3, [pc, #444]	; (8001cfc <HAL_RCC_OscConfig+0x4cc>)
 8001b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b40:	4a6e      	ldr	r2, [pc, #440]	; (8001cfc <HAL_RCC_OscConfig+0x4cc>)
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	6713      	str	r3, [r2, #112]	; 0x70
 8001b48:	e02d      	b.n	8001ba6 <HAL_RCC_OscConfig+0x376>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10c      	bne.n	8001b6c <HAL_RCC_OscConfig+0x33c>
 8001b52:	4b6a      	ldr	r3, [pc, #424]	; (8001cfc <HAL_RCC_OscConfig+0x4cc>)
 8001b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b56:	4a69      	ldr	r2, [pc, #420]	; (8001cfc <HAL_RCC_OscConfig+0x4cc>)
 8001b58:	f023 0301 	bic.w	r3, r3, #1
 8001b5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b5e:	4b67      	ldr	r3, [pc, #412]	; (8001cfc <HAL_RCC_OscConfig+0x4cc>)
 8001b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b62:	4a66      	ldr	r2, [pc, #408]	; (8001cfc <HAL_RCC_OscConfig+0x4cc>)
 8001b64:	f023 0304 	bic.w	r3, r3, #4
 8001b68:	6713      	str	r3, [r2, #112]	; 0x70
 8001b6a:	e01c      	b.n	8001ba6 <HAL_RCC_OscConfig+0x376>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	2b05      	cmp	r3, #5
 8001b72:	d10c      	bne.n	8001b8e <HAL_RCC_OscConfig+0x35e>
 8001b74:	4b61      	ldr	r3, [pc, #388]	; (8001cfc <HAL_RCC_OscConfig+0x4cc>)
 8001b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b78:	4a60      	ldr	r2, [pc, #384]	; (8001cfc <HAL_RCC_OscConfig+0x4cc>)
 8001b7a:	f043 0304 	orr.w	r3, r3, #4
 8001b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b80:	4b5e      	ldr	r3, [pc, #376]	; (8001cfc <HAL_RCC_OscConfig+0x4cc>)
 8001b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b84:	4a5d      	ldr	r2, [pc, #372]	; (8001cfc <HAL_RCC_OscConfig+0x4cc>)
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b8c:	e00b      	b.n	8001ba6 <HAL_RCC_OscConfig+0x376>
 8001b8e:	4b5b      	ldr	r3, [pc, #364]	; (8001cfc <HAL_RCC_OscConfig+0x4cc>)
 8001b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b92:	4a5a      	ldr	r2, [pc, #360]	; (8001cfc <HAL_RCC_OscConfig+0x4cc>)
 8001b94:	f023 0301 	bic.w	r3, r3, #1
 8001b98:	6713      	str	r3, [r2, #112]	; 0x70
 8001b9a:	4b58      	ldr	r3, [pc, #352]	; (8001cfc <HAL_RCC_OscConfig+0x4cc>)
 8001b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b9e:	4a57      	ldr	r2, [pc, #348]	; (8001cfc <HAL_RCC_OscConfig+0x4cc>)
 8001ba0:	f023 0304 	bic.w	r3, r3, #4
 8001ba4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d015      	beq.n	8001bda <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bae:	f7ff fab7 	bl	8001120 <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb4:	e00a      	b.n	8001bcc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bb6:	f7ff fab3 	bl	8001120 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e0ce      	b.n	8001d6a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bcc:	4b4b      	ldr	r3, [pc, #300]	; (8001cfc <HAL_RCC_OscConfig+0x4cc>)
 8001bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0ee      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x386>
 8001bd8:	e014      	b.n	8001c04 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bda:	f7ff faa1 	bl	8001120 <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be0:	e00a      	b.n	8001bf8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001be2:	f7ff fa9d 	bl	8001120 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e0b8      	b.n	8001d6a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf8:	4b40      	ldr	r3, [pc, #256]	; (8001cfc <HAL_RCC_OscConfig+0x4cc>)
 8001bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1ee      	bne.n	8001be2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c04:	7dfb      	ldrb	r3, [r7, #23]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d105      	bne.n	8001c16 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c0a:	4b3c      	ldr	r3, [pc, #240]	; (8001cfc <HAL_RCC_OscConfig+0x4cc>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	4a3b      	ldr	r2, [pc, #236]	; (8001cfc <HAL_RCC_OscConfig+0x4cc>)
 8001c10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c14:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f000 80a4 	beq.w	8001d68 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c20:	4b36      	ldr	r3, [pc, #216]	; (8001cfc <HAL_RCC_OscConfig+0x4cc>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 030c 	and.w	r3, r3, #12
 8001c28:	2b08      	cmp	r3, #8
 8001c2a:	d06b      	beq.n	8001d04 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d149      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c34:	4b31      	ldr	r3, [pc, #196]	; (8001cfc <HAL_RCC_OscConfig+0x4cc>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a30      	ldr	r2, [pc, #192]	; (8001cfc <HAL_RCC_OscConfig+0x4cc>)
 8001c3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c40:	f7ff fa6e 	bl	8001120 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c48:	f7ff fa6a 	bl	8001120 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e087      	b.n	8001d6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c5a:	4b28      	ldr	r3, [pc, #160]	; (8001cfc <HAL_RCC_OscConfig+0x4cc>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69da      	ldr	r2, [r3, #28]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c74:	019b      	lsls	r3, r3, #6
 8001c76:	431a      	orrs	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7c:	085b      	lsrs	r3, r3, #1
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	041b      	lsls	r3, r3, #16
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c88:	061b      	lsls	r3, r3, #24
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	4a1b      	ldr	r2, [pc, #108]	; (8001cfc <HAL_RCC_OscConfig+0x4cc>)
 8001c8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001c92:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c94:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <HAL_RCC_OscConfig+0x4cc>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a18      	ldr	r2, [pc, #96]	; (8001cfc <HAL_RCC_OscConfig+0x4cc>)
 8001c9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca0:	f7ff fa3e 	bl	8001120 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca8:	f7ff fa3a 	bl	8001120 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e057      	b.n	8001d6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cba:	4b10      	ldr	r3, [pc, #64]	; (8001cfc <HAL_RCC_OscConfig+0x4cc>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0f0      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x478>
 8001cc6:	e04f      	b.n	8001d68 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <HAL_RCC_OscConfig+0x4cc>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a0b      	ldr	r2, [pc, #44]	; (8001cfc <HAL_RCC_OscConfig+0x4cc>)
 8001cce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd4:	f7ff fa24 	bl	8001120 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cdc:	f7ff fa20 	bl	8001120 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e03d      	b.n	8001d6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cee:	4b03      	ldr	r3, [pc, #12]	; (8001cfc <HAL_RCC_OscConfig+0x4cc>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f0      	bne.n	8001cdc <HAL_RCC_OscConfig+0x4ac>
 8001cfa:	e035      	b.n	8001d68 <HAL_RCC_OscConfig+0x538>
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001d04:	4b1b      	ldr	r3, [pc, #108]	; (8001d74 <HAL_RCC_OscConfig+0x544>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d028      	beq.n	8001d64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d121      	bne.n	8001d64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d11a      	bne.n	8001d64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d34:	4013      	ands	r3, r2
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d3a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d111      	bne.n	8001d64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4a:	085b      	lsrs	r3, r3, #1
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d107      	bne.n	8001d64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d001      	beq.n	8001d68 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e000      	b.n	8001d6a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40023800 	.word	0x40023800

08001d78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e0d0      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d90:	4b6a      	ldr	r3, [pc, #424]	; (8001f3c <HAL_RCC_ClockConfig+0x1c4>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 030f 	and.w	r3, r3, #15
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d910      	bls.n	8001dc0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9e:	4b67      	ldr	r3, [pc, #412]	; (8001f3c <HAL_RCC_ClockConfig+0x1c4>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f023 020f 	bic.w	r2, r3, #15
 8001da6:	4965      	ldr	r1, [pc, #404]	; (8001f3c <HAL_RCC_ClockConfig+0x1c4>)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dae:	4b63      	ldr	r3, [pc, #396]	; (8001f3c <HAL_RCC_ClockConfig+0x1c4>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d001      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e0b8      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d020      	beq.n	8001e0e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d005      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dd8:	4b59      	ldr	r3, [pc, #356]	; (8001f40 <HAL_RCC_ClockConfig+0x1c8>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	4a58      	ldr	r2, [pc, #352]	; (8001f40 <HAL_RCC_ClockConfig+0x1c8>)
 8001dde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001de2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0308 	and.w	r3, r3, #8
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d005      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001df0:	4b53      	ldr	r3, [pc, #332]	; (8001f40 <HAL_RCC_ClockConfig+0x1c8>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	4a52      	ldr	r2, [pc, #328]	; (8001f40 <HAL_RCC_ClockConfig+0x1c8>)
 8001df6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dfa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dfc:	4b50      	ldr	r3, [pc, #320]	; (8001f40 <HAL_RCC_ClockConfig+0x1c8>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	494d      	ldr	r1, [pc, #308]	; (8001f40 <HAL_RCC_ClockConfig+0x1c8>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d040      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d107      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e22:	4b47      	ldr	r3, [pc, #284]	; (8001f40 <HAL_RCC_ClockConfig+0x1c8>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d115      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e07f      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d107      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e3a:	4b41      	ldr	r3, [pc, #260]	; (8001f40 <HAL_RCC_ClockConfig+0x1c8>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d109      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e073      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e4a:	4b3d      	ldr	r3, [pc, #244]	; (8001f40 <HAL_RCC_ClockConfig+0x1c8>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e06b      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e5a:	4b39      	ldr	r3, [pc, #228]	; (8001f40 <HAL_RCC_ClockConfig+0x1c8>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f023 0203 	bic.w	r2, r3, #3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	4936      	ldr	r1, [pc, #216]	; (8001f40 <HAL_RCC_ClockConfig+0x1c8>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e6c:	f7ff f958 	bl	8001120 <HAL_GetTick>
 8001e70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e72:	e00a      	b.n	8001e8a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e74:	f7ff f954 	bl	8001120 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e053      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8a:	4b2d      	ldr	r3, [pc, #180]	; (8001f40 <HAL_RCC_ClockConfig+0x1c8>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 020c 	and.w	r2, r3, #12
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d1eb      	bne.n	8001e74 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e9c:	4b27      	ldr	r3, [pc, #156]	; (8001f3c <HAL_RCC_ClockConfig+0x1c4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 030f 	and.w	r3, r3, #15
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d210      	bcs.n	8001ecc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eaa:	4b24      	ldr	r3, [pc, #144]	; (8001f3c <HAL_RCC_ClockConfig+0x1c4>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 020f 	bic.w	r2, r3, #15
 8001eb2:	4922      	ldr	r1, [pc, #136]	; (8001f3c <HAL_RCC_ClockConfig+0x1c4>)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eba:	4b20      	ldr	r3, [pc, #128]	; (8001f3c <HAL_RCC_ClockConfig+0x1c4>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d001      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e032      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d008      	beq.n	8001eea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ed8:	4b19      	ldr	r3, [pc, #100]	; (8001f40 <HAL_RCC_ClockConfig+0x1c8>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	4916      	ldr	r1, [pc, #88]	; (8001f40 <HAL_RCC_ClockConfig+0x1c8>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d009      	beq.n	8001f0a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ef6:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <HAL_RCC_ClockConfig+0x1c8>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	490e      	ldr	r1, [pc, #56]	; (8001f40 <HAL_RCC_ClockConfig+0x1c8>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f0a:	f000 f821 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <HAL_RCC_ClockConfig+0x1c8>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	091b      	lsrs	r3, r3, #4
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	490a      	ldr	r1, [pc, #40]	; (8001f44 <HAL_RCC_ClockConfig+0x1cc>)
 8001f1c:	5ccb      	ldrb	r3, [r1, r3]
 8001f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f22:	4a09      	ldr	r2, [pc, #36]	; (8001f48 <HAL_RCC_ClockConfig+0x1d0>)
 8001f24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f26:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <HAL_RCC_ClockConfig+0x1d4>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff f8b4 	bl	8001098 <HAL_InitTick>

  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40023c00 	.word	0x40023c00
 8001f40:	40023800 	.word	0x40023800
 8001f44:	080033f4 	.word	0x080033f4
 8001f48:	20000000 	.word	0x20000000
 8001f4c:	20000004 	.word	0x20000004

08001f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f50:	b5b0      	push	{r4, r5, r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001f56:	2100      	movs	r1, #0
 8001f58:	6079      	str	r1, [r7, #4]
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	60f9      	str	r1, [r7, #12]
 8001f5e:	2100      	movs	r1, #0
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001f62:	2100      	movs	r1, #0
 8001f64:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f66:	4952      	ldr	r1, [pc, #328]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f68:	6889      	ldr	r1, [r1, #8]
 8001f6a:	f001 010c 	and.w	r1, r1, #12
 8001f6e:	2908      	cmp	r1, #8
 8001f70:	d00d      	beq.n	8001f8e <HAL_RCC_GetSysClockFreq+0x3e>
 8001f72:	2908      	cmp	r1, #8
 8001f74:	f200 8094 	bhi.w	80020a0 <HAL_RCC_GetSysClockFreq+0x150>
 8001f78:	2900      	cmp	r1, #0
 8001f7a:	d002      	beq.n	8001f82 <HAL_RCC_GetSysClockFreq+0x32>
 8001f7c:	2904      	cmp	r1, #4
 8001f7e:	d003      	beq.n	8001f88 <HAL_RCC_GetSysClockFreq+0x38>
 8001f80:	e08e      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f82:	4b4c      	ldr	r3, [pc, #304]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x164>)
 8001f84:	60bb      	str	r3, [r7, #8]
      break;
 8001f86:	e08e      	b.n	80020a6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f88:	4b4b      	ldr	r3, [pc, #300]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x168>)
 8001f8a:	60bb      	str	r3, [r7, #8]
      break;
 8001f8c:	e08b      	b.n	80020a6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f8e:	4948      	ldr	r1, [pc, #288]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f90:	6849      	ldr	r1, [r1, #4]
 8001f92:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001f96:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001f98:	4945      	ldr	r1, [pc, #276]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f9a:	6849      	ldr	r1, [r1, #4]
 8001f9c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001fa0:	2900      	cmp	r1, #0
 8001fa2:	d024      	beq.n	8001fee <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fa4:	4942      	ldr	r1, [pc, #264]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001fa6:	6849      	ldr	r1, [r1, #4]
 8001fa8:	0989      	lsrs	r1, r1, #6
 8001faa:	4608      	mov	r0, r1
 8001fac:	f04f 0100 	mov.w	r1, #0
 8001fb0:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001fb4:	f04f 0500 	mov.w	r5, #0
 8001fb8:	ea00 0204 	and.w	r2, r0, r4
 8001fbc:	ea01 0305 	and.w	r3, r1, r5
 8001fc0:	493d      	ldr	r1, [pc, #244]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x168>)
 8001fc2:	fb01 f003 	mul.w	r0, r1, r3
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	fb01 f102 	mul.w	r1, r1, r2
 8001fcc:	1844      	adds	r4, r0, r1
 8001fce:	493a      	ldr	r1, [pc, #232]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x168>)
 8001fd0:	fba2 0101 	umull	r0, r1, r2, r1
 8001fd4:	1863      	adds	r3, r4, r1
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	f04f 0300 	mov.w	r3, #0
 8001fe0:	f7fe f912 	bl	8000208 <__aeabi_uldivmod>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	4613      	mov	r3, r2
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	e04a      	b.n	8002084 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fee:	4b30      	ldr	r3, [pc, #192]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	099b      	lsrs	r3, r3, #6
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	f04f 0300 	mov.w	r3, #0
 8001ffa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001ffe:	f04f 0100 	mov.w	r1, #0
 8002002:	ea02 0400 	and.w	r4, r2, r0
 8002006:	ea03 0501 	and.w	r5, r3, r1
 800200a:	4620      	mov	r0, r4
 800200c:	4629      	mov	r1, r5
 800200e:	f04f 0200 	mov.w	r2, #0
 8002012:	f04f 0300 	mov.w	r3, #0
 8002016:	014b      	lsls	r3, r1, #5
 8002018:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800201c:	0142      	lsls	r2, r0, #5
 800201e:	4610      	mov	r0, r2
 8002020:	4619      	mov	r1, r3
 8002022:	1b00      	subs	r0, r0, r4
 8002024:	eb61 0105 	sbc.w	r1, r1, r5
 8002028:	f04f 0200 	mov.w	r2, #0
 800202c:	f04f 0300 	mov.w	r3, #0
 8002030:	018b      	lsls	r3, r1, #6
 8002032:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002036:	0182      	lsls	r2, r0, #6
 8002038:	1a12      	subs	r2, r2, r0
 800203a:	eb63 0301 	sbc.w	r3, r3, r1
 800203e:	f04f 0000 	mov.w	r0, #0
 8002042:	f04f 0100 	mov.w	r1, #0
 8002046:	00d9      	lsls	r1, r3, #3
 8002048:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800204c:	00d0      	lsls	r0, r2, #3
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	1912      	adds	r2, r2, r4
 8002054:	eb45 0303 	adc.w	r3, r5, r3
 8002058:	f04f 0000 	mov.w	r0, #0
 800205c:	f04f 0100 	mov.w	r1, #0
 8002060:	0299      	lsls	r1, r3, #10
 8002062:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002066:	0290      	lsls	r0, r2, #10
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	4610      	mov	r0, r2
 800206e:	4619      	mov	r1, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	461a      	mov	r2, r3
 8002074:	f04f 0300 	mov.w	r3, #0
 8002078:	f7fe f8c6 	bl	8000208 <__aeabi_uldivmod>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4613      	mov	r3, r2
 8002082:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002084:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	0c1b      	lsrs	r3, r3, #16
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	3301      	adds	r3, #1
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	fbb2 f3f3 	udiv	r3, r2, r3
 800209c:	60bb      	str	r3, [r7, #8]
      break;
 800209e:	e002      	b.n	80020a6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020a0:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x164>)
 80020a2:	60bb      	str	r3, [r7, #8]
      break;
 80020a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020a6:	68bb      	ldr	r3, [r7, #8]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bdb0      	pop	{r4, r5, r7, pc}
 80020b0:	40023800 	.word	0x40023800
 80020b4:	00f42400 	.word	0x00f42400
 80020b8:	017d7840 	.word	0x017d7840

080020bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e049      	b.n	8002162 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d106      	bne.n	80020e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7fe ff2e 	bl	8000f44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2202      	movs	r2, #2
 80020ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3304      	adds	r3, #4
 80020f8:	4619      	mov	r1, r3
 80020fa:	4610      	mov	r0, r2
 80020fc:	f000 fc5a 	bl	80029b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b082      	sub	sp, #8
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e049      	b.n	8002210 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b00      	cmp	r3, #0
 8002186:	d106      	bne.n	8002196 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 f841 	bl	8002218 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2202      	movs	r2, #2
 800219a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	3304      	adds	r3, #4
 80021a6:	4619      	mov	r1, r3
 80021a8:	4610      	mov	r0, r2
 80021aa:	f000 fc03 	bl	80029b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d109      	bne.n	8002250 <HAL_TIM_OC_Start_IT+0x24>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b01      	cmp	r3, #1
 8002246:	bf14      	ite	ne
 8002248:	2301      	movne	r3, #1
 800224a:	2300      	moveq	r3, #0
 800224c:	b2db      	uxtb	r3, r3
 800224e:	e03c      	b.n	80022ca <HAL_TIM_OC_Start_IT+0x9e>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	2b04      	cmp	r3, #4
 8002254:	d109      	bne.n	800226a <HAL_TIM_OC_Start_IT+0x3e>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b01      	cmp	r3, #1
 8002260:	bf14      	ite	ne
 8002262:	2301      	movne	r3, #1
 8002264:	2300      	moveq	r3, #0
 8002266:	b2db      	uxtb	r3, r3
 8002268:	e02f      	b.n	80022ca <HAL_TIM_OC_Start_IT+0x9e>
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	2b08      	cmp	r3, #8
 800226e:	d109      	bne.n	8002284 <HAL_TIM_OC_Start_IT+0x58>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2b01      	cmp	r3, #1
 800227a:	bf14      	ite	ne
 800227c:	2301      	movne	r3, #1
 800227e:	2300      	moveq	r3, #0
 8002280:	b2db      	uxtb	r3, r3
 8002282:	e022      	b.n	80022ca <HAL_TIM_OC_Start_IT+0x9e>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	2b0c      	cmp	r3, #12
 8002288:	d109      	bne.n	800229e <HAL_TIM_OC_Start_IT+0x72>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b01      	cmp	r3, #1
 8002294:	bf14      	ite	ne
 8002296:	2301      	movne	r3, #1
 8002298:	2300      	moveq	r3, #0
 800229a:	b2db      	uxtb	r3, r3
 800229c:	e015      	b.n	80022ca <HAL_TIM_OC_Start_IT+0x9e>
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	2b10      	cmp	r3, #16
 80022a2:	d109      	bne.n	80022b8 <HAL_TIM_OC_Start_IT+0x8c>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	bf14      	ite	ne
 80022b0:	2301      	movne	r3, #1
 80022b2:	2300      	moveq	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	e008      	b.n	80022ca <HAL_TIM_OC_Start_IT+0x9e>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	bf14      	ite	ne
 80022c4:	2301      	movne	r3, #1
 80022c6:	2300      	moveq	r3, #0
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_TIM_OC_Start_IT+0xa6>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e0d8      	b.n	8002484 <HAL_TIM_OC_Start_IT+0x258>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d104      	bne.n	80022e2 <HAL_TIM_OC_Start_IT+0xb6>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2202      	movs	r2, #2
 80022dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022e0:	e023      	b.n	800232a <HAL_TIM_OC_Start_IT+0xfe>
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	2b04      	cmp	r3, #4
 80022e6:	d104      	bne.n	80022f2 <HAL_TIM_OC_Start_IT+0xc6>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2202      	movs	r2, #2
 80022ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022f0:	e01b      	b.n	800232a <HAL_TIM_OC_Start_IT+0xfe>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	2b08      	cmp	r3, #8
 80022f6:	d104      	bne.n	8002302 <HAL_TIM_OC_Start_IT+0xd6>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2202      	movs	r2, #2
 80022fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002300:	e013      	b.n	800232a <HAL_TIM_OC_Start_IT+0xfe>
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	2b0c      	cmp	r3, #12
 8002306:	d104      	bne.n	8002312 <HAL_TIM_OC_Start_IT+0xe6>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2202      	movs	r2, #2
 800230c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002310:	e00b      	b.n	800232a <HAL_TIM_OC_Start_IT+0xfe>
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	2b10      	cmp	r3, #16
 8002316:	d104      	bne.n	8002322 <HAL_TIM_OC_Start_IT+0xf6>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2202      	movs	r2, #2
 800231c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002320:	e003      	b.n	800232a <HAL_TIM_OC_Start_IT+0xfe>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2202      	movs	r2, #2
 8002326:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	2b0c      	cmp	r3, #12
 800232e:	d841      	bhi.n	80023b4 <HAL_TIM_OC_Start_IT+0x188>
 8002330:	a201      	add	r2, pc, #4	; (adr r2, 8002338 <HAL_TIM_OC_Start_IT+0x10c>)
 8002332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002336:	bf00      	nop
 8002338:	0800236d 	.word	0x0800236d
 800233c:	080023b5 	.word	0x080023b5
 8002340:	080023b5 	.word	0x080023b5
 8002344:	080023b5 	.word	0x080023b5
 8002348:	0800237f 	.word	0x0800237f
 800234c:	080023b5 	.word	0x080023b5
 8002350:	080023b5 	.word	0x080023b5
 8002354:	080023b5 	.word	0x080023b5
 8002358:	08002391 	.word	0x08002391
 800235c:	080023b5 	.word	0x080023b5
 8002360:	080023b5 	.word	0x080023b5
 8002364:	080023b5 	.word	0x080023b5
 8002368:	080023a3 	.word	0x080023a3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68da      	ldr	r2, [r3, #12]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f042 0202 	orr.w	r2, r2, #2
 800237a:	60da      	str	r2, [r3, #12]
      break;
 800237c:	e01b      	b.n	80023b6 <HAL_TIM_OC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68da      	ldr	r2, [r3, #12]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f042 0204 	orr.w	r2, r2, #4
 800238c:	60da      	str	r2, [r3, #12]
      break;
 800238e:	e012      	b.n	80023b6 <HAL_TIM_OC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68da      	ldr	r2, [r3, #12]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0208 	orr.w	r2, r2, #8
 800239e:	60da      	str	r2, [r3, #12]
      break;
 80023a0:	e009      	b.n	80023b6 <HAL_TIM_OC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68da      	ldr	r2, [r3, #12]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f042 0210 	orr.w	r2, r2, #16
 80023b0:	60da      	str	r2, [r3, #12]
      break;
 80023b2:	e000      	b.n	80023b6 <HAL_TIM_OC_Start_IT+0x18a>
    }

    default:
      break;
 80023b4:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2201      	movs	r2, #1
 80023bc:	6839      	ldr	r1, [r7, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 fe90 	bl	80030e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a30      	ldr	r2, [pc, #192]	; (800248c <HAL_TIM_OC_Start_IT+0x260>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d004      	beq.n	80023d8 <HAL_TIM_OC_Start_IT+0x1ac>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a2f      	ldr	r2, [pc, #188]	; (8002490 <HAL_TIM_OC_Start_IT+0x264>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d101      	bne.n	80023dc <HAL_TIM_OC_Start_IT+0x1b0>
 80023d8:	2301      	movs	r3, #1
 80023da:	e000      	b.n	80023de <HAL_TIM_OC_Start_IT+0x1b2>
 80023dc:	2300      	movs	r3, #0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d007      	beq.n	80023f2 <HAL_TIM_OC_Start_IT+0x1c6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a25      	ldr	r2, [pc, #148]	; (800248c <HAL_TIM_OC_Start_IT+0x260>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d022      	beq.n	8002442 <HAL_TIM_OC_Start_IT+0x216>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002404:	d01d      	beq.n	8002442 <HAL_TIM_OC_Start_IT+0x216>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a22      	ldr	r2, [pc, #136]	; (8002494 <HAL_TIM_OC_Start_IT+0x268>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d018      	beq.n	8002442 <HAL_TIM_OC_Start_IT+0x216>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a20      	ldr	r2, [pc, #128]	; (8002498 <HAL_TIM_OC_Start_IT+0x26c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d013      	beq.n	8002442 <HAL_TIM_OC_Start_IT+0x216>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a1f      	ldr	r2, [pc, #124]	; (800249c <HAL_TIM_OC_Start_IT+0x270>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d00e      	beq.n	8002442 <HAL_TIM_OC_Start_IT+0x216>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a19      	ldr	r2, [pc, #100]	; (8002490 <HAL_TIM_OC_Start_IT+0x264>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d009      	beq.n	8002442 <HAL_TIM_OC_Start_IT+0x216>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a1b      	ldr	r2, [pc, #108]	; (80024a0 <HAL_TIM_OC_Start_IT+0x274>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d004      	beq.n	8002442 <HAL_TIM_OC_Start_IT+0x216>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a19      	ldr	r2, [pc, #100]	; (80024a4 <HAL_TIM_OC_Start_IT+0x278>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d115      	bne.n	800246e <HAL_TIM_OC_Start_IT+0x242>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	4b17      	ldr	r3, [pc, #92]	; (80024a8 <HAL_TIM_OC_Start_IT+0x27c>)
 800244a:	4013      	ands	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2b06      	cmp	r3, #6
 8002452:	d015      	beq.n	8002480 <HAL_TIM_OC_Start_IT+0x254>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800245a:	d011      	beq.n	8002480 <HAL_TIM_OC_Start_IT+0x254>
    {
      __HAL_TIM_ENABLE(htim);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0201 	orr.w	r2, r2, #1
 800246a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800246c:	e008      	b.n	8002480 <HAL_TIM_OC_Start_IT+0x254>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f042 0201 	orr.w	r2, r2, #1
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	e000      	b.n	8002482 <HAL_TIM_OC_Start_IT+0x256>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002480:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40010000 	.word	0x40010000
 8002490:	40010400 	.word	0x40010400
 8002494:	40000400 	.word	0x40000400
 8002498:	40000800 	.word	0x40000800
 800249c:	40000c00 	.word	0x40000c00
 80024a0:	40014000 	.word	0x40014000
 80024a4:	40001800 	.word	0x40001800
 80024a8:	00010007 	.word	0x00010007

080024ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d122      	bne.n	8002508 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d11b      	bne.n	8002508 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f06f 0202 	mvn.w	r2, #2
 80024d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 fa42 	bl	8002978 <HAL_TIM_IC_CaptureCallback>
 80024f4:	e005      	b.n	8002502 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7fe f98e 	bl	8000818 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 fa45 	bl	800298c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	f003 0304 	and.w	r3, r3, #4
 8002512:	2b04      	cmp	r3, #4
 8002514:	d122      	bne.n	800255c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b04      	cmp	r3, #4
 8002522:	d11b      	bne.n	800255c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f06f 0204 	mvn.w	r2, #4
 800252c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2202      	movs	r2, #2
 8002532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 fa18 	bl	8002978 <HAL_TIM_IC_CaptureCallback>
 8002548:	e005      	b.n	8002556 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7fe f964 	bl	8000818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 fa1b 	bl	800298c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b08      	cmp	r3, #8
 8002568:	d122      	bne.n	80025b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	2b08      	cmp	r3, #8
 8002576:	d11b      	bne.n	80025b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f06f 0208 	mvn.w	r2, #8
 8002580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2204      	movs	r2, #4
 8002586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f9ee 	bl	8002978 <HAL_TIM_IC_CaptureCallback>
 800259c:	e005      	b.n	80025aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7fe f93a 	bl	8000818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 f9f1 	bl	800298c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	f003 0310 	and.w	r3, r3, #16
 80025ba:	2b10      	cmp	r3, #16
 80025bc:	d122      	bne.n	8002604 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f003 0310 	and.w	r3, r3, #16
 80025c8:	2b10      	cmp	r3, #16
 80025ca:	d11b      	bne.n	8002604 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f06f 0210 	mvn.w	r2, #16
 80025d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2208      	movs	r2, #8
 80025da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f9c4 	bl	8002978 <HAL_TIM_IC_CaptureCallback>
 80025f0:	e005      	b.n	80025fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7fe f910 	bl	8000818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f9c7 	bl	800298c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b01      	cmp	r3, #1
 8002610:	d10e      	bne.n	8002630 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b01      	cmp	r3, #1
 800261e:	d107      	bne.n	8002630 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f06f 0201 	mvn.w	r2, #1
 8002628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f99a 	bl	8002964 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800263a:	2b80      	cmp	r3, #128	; 0x80
 800263c:	d10e      	bne.n	800265c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002648:	2b80      	cmp	r3, #128	; 0x80
 800264a:	d107      	bne.n	800265c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 fe80 	bl	800335c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800266a:	d10e      	bne.n	800268a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002676:	2b80      	cmp	r3, #128	; 0x80
 8002678:	d107      	bne.n	800268a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 fe73 	bl	8003370 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002694:	2b40      	cmp	r3, #64	; 0x40
 8002696:	d10e      	bne.n	80026b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a2:	2b40      	cmp	r3, #64	; 0x40
 80026a4:	d107      	bne.n	80026b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 f975 	bl	80029a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	f003 0320 	and.w	r3, r3, #32
 80026c0:	2b20      	cmp	r3, #32
 80026c2:	d10e      	bne.n	80026e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	f003 0320 	and.w	r3, r3, #32
 80026ce:	2b20      	cmp	r3, #32
 80026d0:	d107      	bne.n	80026e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f06f 0220 	mvn.w	r2, #32
 80026da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 fe33 	bl	8003348 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d101      	bne.n	8002706 <HAL_TIM_OC_ConfigChannel+0x1a>
 8002702:	2302      	movs	r3, #2
 8002704:	e064      	b.n	80027d0 <HAL_TIM_OC_ConfigChannel+0xe4>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b14      	cmp	r3, #20
 8002712:	d857      	bhi.n	80027c4 <HAL_TIM_OC_ConfigChannel+0xd8>
 8002714:	a201      	add	r2, pc, #4	; (adr r2, 800271c <HAL_TIM_OC_ConfigChannel+0x30>)
 8002716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800271a:	bf00      	nop
 800271c:	08002771 	.word	0x08002771
 8002720:	080027c5 	.word	0x080027c5
 8002724:	080027c5 	.word	0x080027c5
 8002728:	080027c5 	.word	0x080027c5
 800272c:	0800277f 	.word	0x0800277f
 8002730:	080027c5 	.word	0x080027c5
 8002734:	080027c5 	.word	0x080027c5
 8002738:	080027c5 	.word	0x080027c5
 800273c:	0800278d 	.word	0x0800278d
 8002740:	080027c5 	.word	0x080027c5
 8002744:	080027c5 	.word	0x080027c5
 8002748:	080027c5 	.word	0x080027c5
 800274c:	0800279b 	.word	0x0800279b
 8002750:	080027c5 	.word	0x080027c5
 8002754:	080027c5 	.word	0x080027c5
 8002758:	080027c5 	.word	0x080027c5
 800275c:	080027a9 	.word	0x080027a9
 8002760:	080027c5 	.word	0x080027c5
 8002764:	080027c5 	.word	0x080027c5
 8002768:	080027c5 	.word	0x080027c5
 800276c:	080027b7 	.word	0x080027b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68b9      	ldr	r1, [r7, #8]
 8002776:	4618      	mov	r0, r3
 8002778:	f000 f9bc 	bl	8002af4 <TIM_OC1_SetConfig>
      break;
 800277c:	e023      	b.n	80027c6 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68b9      	ldr	r1, [r7, #8]
 8002784:	4618      	mov	r0, r3
 8002786:	f000 fa27 	bl	8002bd8 <TIM_OC2_SetConfig>
      break;
 800278a:	e01c      	b.n	80027c6 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68b9      	ldr	r1, [r7, #8]
 8002792:	4618      	mov	r0, r3
 8002794:	f000 fa98 	bl	8002cc8 <TIM_OC3_SetConfig>
      break;
 8002798:	e015      	b.n	80027c6 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68b9      	ldr	r1, [r7, #8]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 fb07 	bl	8002db4 <TIM_OC4_SetConfig>
      break;
 80027a6:	e00e      	b.n	80027c6 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68b9      	ldr	r1, [r7, #8]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 fb58 	bl	8002e64 <TIM_OC5_SetConfig>
      break;
 80027b4:	e007      	b.n	80027c6 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68b9      	ldr	r1, [r7, #8]
 80027bc:	4618      	mov	r0, r3
 80027be:	f000 fba3 	bl	8002f08 <TIM_OC6_SetConfig>
      break;
 80027c2:	e000      	b.n	80027c6 <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 80027c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d101      	bne.n	80027f0 <HAL_TIM_ConfigClockSource+0x18>
 80027ec:	2302      	movs	r3, #2
 80027ee:	e0b3      	b.n	8002958 <HAL_TIM_ConfigClockSource+0x180>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2202      	movs	r2, #2
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	4b55      	ldr	r3, [pc, #340]	; (8002960 <HAL_TIM_ConfigClockSource+0x188>)
 800280c:	4013      	ands	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002816:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002828:	d03e      	beq.n	80028a8 <HAL_TIM_ConfigClockSource+0xd0>
 800282a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800282e:	f200 8087 	bhi.w	8002940 <HAL_TIM_ConfigClockSource+0x168>
 8002832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002836:	f000 8085 	beq.w	8002944 <HAL_TIM_ConfigClockSource+0x16c>
 800283a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800283e:	d87f      	bhi.n	8002940 <HAL_TIM_ConfigClockSource+0x168>
 8002840:	2b70      	cmp	r3, #112	; 0x70
 8002842:	d01a      	beq.n	800287a <HAL_TIM_ConfigClockSource+0xa2>
 8002844:	2b70      	cmp	r3, #112	; 0x70
 8002846:	d87b      	bhi.n	8002940 <HAL_TIM_ConfigClockSource+0x168>
 8002848:	2b60      	cmp	r3, #96	; 0x60
 800284a:	d050      	beq.n	80028ee <HAL_TIM_ConfigClockSource+0x116>
 800284c:	2b60      	cmp	r3, #96	; 0x60
 800284e:	d877      	bhi.n	8002940 <HAL_TIM_ConfigClockSource+0x168>
 8002850:	2b50      	cmp	r3, #80	; 0x50
 8002852:	d03c      	beq.n	80028ce <HAL_TIM_ConfigClockSource+0xf6>
 8002854:	2b50      	cmp	r3, #80	; 0x50
 8002856:	d873      	bhi.n	8002940 <HAL_TIM_ConfigClockSource+0x168>
 8002858:	2b40      	cmp	r3, #64	; 0x40
 800285a:	d058      	beq.n	800290e <HAL_TIM_ConfigClockSource+0x136>
 800285c:	2b40      	cmp	r3, #64	; 0x40
 800285e:	d86f      	bhi.n	8002940 <HAL_TIM_ConfigClockSource+0x168>
 8002860:	2b30      	cmp	r3, #48	; 0x30
 8002862:	d064      	beq.n	800292e <HAL_TIM_ConfigClockSource+0x156>
 8002864:	2b30      	cmp	r3, #48	; 0x30
 8002866:	d86b      	bhi.n	8002940 <HAL_TIM_ConfigClockSource+0x168>
 8002868:	2b20      	cmp	r3, #32
 800286a:	d060      	beq.n	800292e <HAL_TIM_ConfigClockSource+0x156>
 800286c:	2b20      	cmp	r3, #32
 800286e:	d867      	bhi.n	8002940 <HAL_TIM_ConfigClockSource+0x168>
 8002870:	2b00      	cmp	r3, #0
 8002872:	d05c      	beq.n	800292e <HAL_TIM_ConfigClockSource+0x156>
 8002874:	2b10      	cmp	r3, #16
 8002876:	d05a      	beq.n	800292e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002878:	e062      	b.n	8002940 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6818      	ldr	r0, [r3, #0]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	6899      	ldr	r1, [r3, #8]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	f000 fc0b 	bl	80030a4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800289c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	609a      	str	r2, [r3, #8]
      break;
 80028a6:	e04e      	b.n	8002946 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6818      	ldr	r0, [r3, #0]
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	6899      	ldr	r1, [r3, #8]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f000 fbf4 	bl	80030a4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028ca:	609a      	str	r2, [r3, #8]
      break;
 80028cc:	e03b      	b.n	8002946 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6818      	ldr	r0, [r3, #0]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	6859      	ldr	r1, [r3, #4]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	461a      	mov	r2, r3
 80028dc:	f000 fb68 	bl	8002fb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2150      	movs	r1, #80	; 0x50
 80028e6:	4618      	mov	r0, r3
 80028e8:	f000 fbc1 	bl	800306e <TIM_ITRx_SetConfig>
      break;
 80028ec:	e02b      	b.n	8002946 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6818      	ldr	r0, [r3, #0]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	6859      	ldr	r1, [r3, #4]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	461a      	mov	r2, r3
 80028fc:	f000 fb87 	bl	800300e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2160      	movs	r1, #96	; 0x60
 8002906:	4618      	mov	r0, r3
 8002908:	f000 fbb1 	bl	800306e <TIM_ITRx_SetConfig>
      break;
 800290c:	e01b      	b.n	8002946 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6818      	ldr	r0, [r3, #0]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	6859      	ldr	r1, [r3, #4]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	461a      	mov	r2, r3
 800291c:	f000 fb48 	bl	8002fb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2140      	movs	r1, #64	; 0x40
 8002926:	4618      	mov	r0, r3
 8002928:	f000 fba1 	bl	800306e <TIM_ITRx_SetConfig>
      break;
 800292c:	e00b      	b.n	8002946 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4619      	mov	r1, r3
 8002938:	4610      	mov	r0, r2
 800293a:	f000 fb98 	bl	800306e <TIM_ITRx_SetConfig>
        break;
 800293e:	e002      	b.n	8002946 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002940:	bf00      	nop
 8002942:	e000      	b.n	8002946 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002944:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	fffeff88 	.word	0xfffeff88

08002964 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a40      	ldr	r2, [pc, #256]	; (8002ac8 <TIM_Base_SetConfig+0x114>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d013      	beq.n	80029f4 <TIM_Base_SetConfig+0x40>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d2:	d00f      	beq.n	80029f4 <TIM_Base_SetConfig+0x40>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a3d      	ldr	r2, [pc, #244]	; (8002acc <TIM_Base_SetConfig+0x118>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d00b      	beq.n	80029f4 <TIM_Base_SetConfig+0x40>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a3c      	ldr	r2, [pc, #240]	; (8002ad0 <TIM_Base_SetConfig+0x11c>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d007      	beq.n	80029f4 <TIM_Base_SetConfig+0x40>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a3b      	ldr	r2, [pc, #236]	; (8002ad4 <TIM_Base_SetConfig+0x120>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d003      	beq.n	80029f4 <TIM_Base_SetConfig+0x40>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a3a      	ldr	r2, [pc, #232]	; (8002ad8 <TIM_Base_SetConfig+0x124>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d108      	bne.n	8002a06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a2f      	ldr	r2, [pc, #188]	; (8002ac8 <TIM_Base_SetConfig+0x114>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d02b      	beq.n	8002a66 <TIM_Base_SetConfig+0xb2>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a14:	d027      	beq.n	8002a66 <TIM_Base_SetConfig+0xb2>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a2c      	ldr	r2, [pc, #176]	; (8002acc <TIM_Base_SetConfig+0x118>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d023      	beq.n	8002a66 <TIM_Base_SetConfig+0xb2>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a2b      	ldr	r2, [pc, #172]	; (8002ad0 <TIM_Base_SetConfig+0x11c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d01f      	beq.n	8002a66 <TIM_Base_SetConfig+0xb2>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a2a      	ldr	r2, [pc, #168]	; (8002ad4 <TIM_Base_SetConfig+0x120>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d01b      	beq.n	8002a66 <TIM_Base_SetConfig+0xb2>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a29      	ldr	r2, [pc, #164]	; (8002ad8 <TIM_Base_SetConfig+0x124>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d017      	beq.n	8002a66 <TIM_Base_SetConfig+0xb2>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a28      	ldr	r2, [pc, #160]	; (8002adc <TIM_Base_SetConfig+0x128>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d013      	beq.n	8002a66 <TIM_Base_SetConfig+0xb2>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a27      	ldr	r2, [pc, #156]	; (8002ae0 <TIM_Base_SetConfig+0x12c>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d00f      	beq.n	8002a66 <TIM_Base_SetConfig+0xb2>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a26      	ldr	r2, [pc, #152]	; (8002ae4 <TIM_Base_SetConfig+0x130>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d00b      	beq.n	8002a66 <TIM_Base_SetConfig+0xb2>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a25      	ldr	r2, [pc, #148]	; (8002ae8 <TIM_Base_SetConfig+0x134>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d007      	beq.n	8002a66 <TIM_Base_SetConfig+0xb2>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a24      	ldr	r2, [pc, #144]	; (8002aec <TIM_Base_SetConfig+0x138>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d003      	beq.n	8002a66 <TIM_Base_SetConfig+0xb2>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a23      	ldr	r2, [pc, #140]	; (8002af0 <TIM_Base_SetConfig+0x13c>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d108      	bne.n	8002a78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a0a      	ldr	r2, [pc, #40]	; (8002ac8 <TIM_Base_SetConfig+0x114>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d003      	beq.n	8002aac <TIM_Base_SetConfig+0xf8>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a0c      	ldr	r2, [pc, #48]	; (8002ad8 <TIM_Base_SetConfig+0x124>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d103      	bne.n	8002ab4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	691a      	ldr	r2, [r3, #16]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	615a      	str	r2, [r3, #20]
}
 8002aba:	bf00      	nop
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	40010000 	.word	0x40010000
 8002acc:	40000400 	.word	0x40000400
 8002ad0:	40000800 	.word	0x40000800
 8002ad4:	40000c00 	.word	0x40000c00
 8002ad8:	40010400 	.word	0x40010400
 8002adc:	40014000 	.word	0x40014000
 8002ae0:	40014400 	.word	0x40014400
 8002ae4:	40014800 	.word	0x40014800
 8002ae8:	40001800 	.word	0x40001800
 8002aec:	40001c00 	.word	0x40001c00
 8002af0:	40002000 	.word	0x40002000

08002af4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b087      	sub	sp, #28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	f023 0201 	bic.w	r2, r3, #1
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	4b2b      	ldr	r3, [pc, #172]	; (8002bcc <TIM_OC1_SetConfig+0xd8>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f023 0303 	bic.w	r3, r3, #3
 8002b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f023 0302 	bic.w	r3, r3, #2
 8002b3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a21      	ldr	r2, [pc, #132]	; (8002bd0 <TIM_OC1_SetConfig+0xdc>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d003      	beq.n	8002b58 <TIM_OC1_SetConfig+0x64>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a20      	ldr	r2, [pc, #128]	; (8002bd4 <TIM_OC1_SetConfig+0xe0>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d10c      	bne.n	8002b72 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	f023 0308 	bic.w	r3, r3, #8
 8002b5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f023 0304 	bic.w	r3, r3, #4
 8002b70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a16      	ldr	r2, [pc, #88]	; (8002bd0 <TIM_OC1_SetConfig+0xdc>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d003      	beq.n	8002b82 <TIM_OC1_SetConfig+0x8e>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a15      	ldr	r2, [pc, #84]	; (8002bd4 <TIM_OC1_SetConfig+0xe0>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d111      	bne.n	8002ba6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	621a      	str	r2, [r3, #32]
}
 8002bc0:	bf00      	nop
 8002bc2:	371c      	adds	r7, #28
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	fffeff8f 	.word	0xfffeff8f
 8002bd0:	40010000 	.word	0x40010000
 8002bd4:	40010400 	.word	0x40010400

08002bd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b087      	sub	sp, #28
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	f023 0210 	bic.w	r2, r3, #16
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	4b2e      	ldr	r3, [pc, #184]	; (8002cbc <TIM_OC2_SetConfig+0xe4>)
 8002c04:	4013      	ands	r3, r2
 8002c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	021b      	lsls	r3, r3, #8
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f023 0320 	bic.w	r3, r3, #32
 8002c22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a23      	ldr	r2, [pc, #140]	; (8002cc0 <TIM_OC2_SetConfig+0xe8>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d003      	beq.n	8002c40 <TIM_OC2_SetConfig+0x68>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a22      	ldr	r2, [pc, #136]	; (8002cc4 <TIM_OC2_SetConfig+0xec>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d10d      	bne.n	8002c5c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	011b      	lsls	r3, r3, #4
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a18      	ldr	r2, [pc, #96]	; (8002cc0 <TIM_OC2_SetConfig+0xe8>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d003      	beq.n	8002c6c <TIM_OC2_SetConfig+0x94>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a17      	ldr	r2, [pc, #92]	; (8002cc4 <TIM_OC2_SetConfig+0xec>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d113      	bne.n	8002c94 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	621a      	str	r2, [r3, #32]
}
 8002cae:	bf00      	nop
 8002cb0:	371c      	adds	r7, #28
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	feff8fff 	.word	0xfeff8fff
 8002cc0:	40010000 	.word	0x40010000
 8002cc4:	40010400 	.word	0x40010400

08002cc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b087      	sub	sp, #28
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	4b2d      	ldr	r3, [pc, #180]	; (8002da8 <TIM_OC3_SetConfig+0xe0>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f023 0303 	bic.w	r3, r3, #3
 8002cfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	021b      	lsls	r3, r3, #8
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a22      	ldr	r2, [pc, #136]	; (8002dac <TIM_OC3_SetConfig+0xe4>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d003      	beq.n	8002d2e <TIM_OC3_SetConfig+0x66>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a21      	ldr	r2, [pc, #132]	; (8002db0 <TIM_OC3_SetConfig+0xe8>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d10d      	bne.n	8002d4a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	021b      	lsls	r3, r3, #8
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a17      	ldr	r2, [pc, #92]	; (8002dac <TIM_OC3_SetConfig+0xe4>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d003      	beq.n	8002d5a <TIM_OC3_SetConfig+0x92>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a16      	ldr	r2, [pc, #88]	; (8002db0 <TIM_OC3_SetConfig+0xe8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d113      	bne.n	8002d82 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	011b      	lsls	r3, r3, #4
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	011b      	lsls	r3, r3, #4
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	621a      	str	r2, [r3, #32]
}
 8002d9c:	bf00      	nop
 8002d9e:	371c      	adds	r7, #28
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	fffeff8f 	.word	0xfffeff8f
 8002dac:	40010000 	.word	0x40010000
 8002db0:	40010400 	.word	0x40010400

08002db4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b087      	sub	sp, #28
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	4b1e      	ldr	r3, [pc, #120]	; (8002e58 <TIM_OC4_SetConfig+0xa4>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	021b      	lsls	r3, r3, #8
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002dfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	031b      	lsls	r3, r3, #12
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a13      	ldr	r2, [pc, #76]	; (8002e5c <TIM_OC4_SetConfig+0xa8>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d003      	beq.n	8002e1c <TIM_OC4_SetConfig+0x68>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a12      	ldr	r2, [pc, #72]	; (8002e60 <TIM_OC4_SetConfig+0xac>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d109      	bne.n	8002e30 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	019b      	lsls	r3, r3, #6
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	621a      	str	r2, [r3, #32]
}
 8002e4a:	bf00      	nop
 8002e4c:	371c      	adds	r7, #28
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	feff8fff 	.word	0xfeff8fff
 8002e5c:	40010000 	.word	0x40010000
 8002e60:	40010400 	.word	0x40010400

08002e64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b087      	sub	sp, #28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	4b1b      	ldr	r3, [pc, #108]	; (8002efc <TIM_OC5_SetConfig+0x98>)
 8002e90:	4013      	ands	r3, r2
 8002e92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002ea4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	041b      	lsls	r3, r3, #16
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a12      	ldr	r2, [pc, #72]	; (8002f00 <TIM_OC5_SetConfig+0x9c>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d003      	beq.n	8002ec2 <TIM_OC5_SetConfig+0x5e>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a11      	ldr	r2, [pc, #68]	; (8002f04 <TIM_OC5_SetConfig+0xa0>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d109      	bne.n	8002ed6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ec8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	021b      	lsls	r3, r3, #8
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	621a      	str	r2, [r3, #32]
}
 8002ef0:	bf00      	nop
 8002ef2:	371c      	adds	r7, #28
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	fffeff8f 	.word	0xfffeff8f
 8002f00:	40010000 	.word	0x40010000
 8002f04:	40010400 	.word	0x40010400

08002f08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b087      	sub	sp, #28
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	4b1c      	ldr	r3, [pc, #112]	; (8002fa4 <TIM_OC6_SetConfig+0x9c>)
 8002f34:	4013      	ands	r3, r2
 8002f36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	021b      	lsls	r3, r3, #8
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	051b      	lsls	r3, r3, #20
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a13      	ldr	r2, [pc, #76]	; (8002fa8 <TIM_OC6_SetConfig+0xa0>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d003      	beq.n	8002f68 <TIM_OC6_SetConfig+0x60>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a12      	ldr	r2, [pc, #72]	; (8002fac <TIM_OC6_SetConfig+0xa4>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d109      	bne.n	8002f7c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f6e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	029b      	lsls	r3, r3, #10
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	621a      	str	r2, [r3, #32]
}
 8002f96:	bf00      	nop
 8002f98:	371c      	adds	r7, #28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	feff8fff 	.word	0xfeff8fff
 8002fa8:	40010000 	.word	0x40010000
 8002fac:	40010400 	.word	0x40010400

08002fb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b087      	sub	sp, #28
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	f023 0201 	bic.w	r2, r3, #1
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	011b      	lsls	r3, r3, #4
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f023 030a 	bic.w	r3, r3, #10
 8002fec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	621a      	str	r2, [r3, #32]
}
 8003002:	bf00      	nop
 8003004:	371c      	adds	r7, #28
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800300e:	b480      	push	{r7}
 8003010:	b087      	sub	sp, #28
 8003012:	af00      	add	r7, sp, #0
 8003014:	60f8      	str	r0, [r7, #12]
 8003016:	60b9      	str	r1, [r7, #8]
 8003018:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	f023 0210 	bic.w	r2, r3, #16
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003038:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	031b      	lsls	r3, r3, #12
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	4313      	orrs	r3, r2
 8003042:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800304a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	011b      	lsls	r3, r3, #4
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	4313      	orrs	r3, r2
 8003054:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	621a      	str	r2, [r3, #32]
}
 8003062:	bf00      	nop
 8003064:	371c      	adds	r7, #28
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr

0800306e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800306e:	b480      	push	{r7}
 8003070:	b085      	sub	sp, #20
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
 8003076:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003084:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4313      	orrs	r3, r2
 800308c:	f043 0307 	orr.w	r3, r3, #7
 8003090:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	609a      	str	r2, [r3, #8]
}
 8003098:	bf00      	nop
 800309a:	3714      	adds	r7, #20
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b087      	sub	sp, #28
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
 80030b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	021a      	lsls	r2, r3, #8
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	431a      	orrs	r2, r3
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	609a      	str	r2, [r3, #8]
}
 80030d8:	bf00      	nop
 80030da:	371c      	adds	r7, #28
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b087      	sub	sp, #28
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	f003 031f 	and.w	r3, r3, #31
 80030f6:	2201      	movs	r2, #1
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6a1a      	ldr	r2, [r3, #32]
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	43db      	mvns	r3, r3
 8003106:	401a      	ands	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6a1a      	ldr	r2, [r3, #32]
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	f003 031f 	and.w	r3, r3, #31
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	fa01 f303 	lsl.w	r3, r1, r3
 800311c:	431a      	orrs	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	621a      	str	r2, [r3, #32]
}
 8003122:	bf00      	nop
 8003124:	371c      	adds	r7, #28
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
	...

08003130 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003144:	2302      	movs	r3, #2
 8003146:	e06d      	b.n	8003224 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2202      	movs	r2, #2
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a30      	ldr	r2, [pc, #192]	; (8003230 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d004      	beq.n	800317c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a2f      	ldr	r2, [pc, #188]	; (8003234 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d108      	bne.n	800318e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003182:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	4313      	orrs	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003194:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	4313      	orrs	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a20      	ldr	r2, [pc, #128]	; (8003230 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d022      	beq.n	80031f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ba:	d01d      	beq.n	80031f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a1d      	ldr	r2, [pc, #116]	; (8003238 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d018      	beq.n	80031f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a1c      	ldr	r2, [pc, #112]	; (800323c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d013      	beq.n	80031f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a1a      	ldr	r2, [pc, #104]	; (8003240 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d00e      	beq.n	80031f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a15      	ldr	r2, [pc, #84]	; (8003234 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d009      	beq.n	80031f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a16      	ldr	r2, [pc, #88]	; (8003244 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d004      	beq.n	80031f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a15      	ldr	r2, [pc, #84]	; (8003248 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d10c      	bne.n	8003212 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	4313      	orrs	r3, r2
 8003208:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	40010000 	.word	0x40010000
 8003234:	40010400 	.word	0x40010400
 8003238:	40000400 	.word	0x40000400
 800323c:	40000800 	.word	0x40000800
 8003240:	40000c00 	.word	0x40000c00
 8003244:	40014000 	.word	0x40014000
 8003248:	40001800 	.word	0x40001800

0800324c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003256:	2300      	movs	r3, #0
 8003258:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003260:	2b01      	cmp	r3, #1
 8003262:	d101      	bne.n	8003268 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003264:	2302      	movs	r3, #2
 8003266:	e065      	b.n	8003334 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	4313      	orrs	r3, r2
 800327c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	4313      	orrs	r3, r2
 800328a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	4313      	orrs	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ce:	4313      	orrs	r3, r2
 80032d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	041b      	lsls	r3, r3, #16
 80032de:	4313      	orrs	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a16      	ldr	r2, [pc, #88]	; (8003340 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d004      	beq.n	80032f6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a14      	ldr	r2, [pc, #80]	; (8003344 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d115      	bne.n	8003322 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	051b      	lsls	r3, r3, #20
 8003302:	4313      	orrs	r3, r2
 8003304:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	69db      	ldr	r3, [r3, #28]
 8003310:	4313      	orrs	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	4313      	orrs	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	40010000 	.word	0x40010000
 8003344:	40010400 	.word	0x40010400

08003348 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <__libc_init_array>:
 8003384:	b570      	push	{r4, r5, r6, lr}
 8003386:	4d0d      	ldr	r5, [pc, #52]	; (80033bc <__libc_init_array+0x38>)
 8003388:	4c0d      	ldr	r4, [pc, #52]	; (80033c0 <__libc_init_array+0x3c>)
 800338a:	1b64      	subs	r4, r4, r5
 800338c:	10a4      	asrs	r4, r4, #2
 800338e:	2600      	movs	r6, #0
 8003390:	42a6      	cmp	r6, r4
 8003392:	d109      	bne.n	80033a8 <__libc_init_array+0x24>
 8003394:	4d0b      	ldr	r5, [pc, #44]	; (80033c4 <__libc_init_array+0x40>)
 8003396:	4c0c      	ldr	r4, [pc, #48]	; (80033c8 <__libc_init_array+0x44>)
 8003398:	f000 f820 	bl	80033dc <_init>
 800339c:	1b64      	subs	r4, r4, r5
 800339e:	10a4      	asrs	r4, r4, #2
 80033a0:	2600      	movs	r6, #0
 80033a2:	42a6      	cmp	r6, r4
 80033a4:	d105      	bne.n	80033b2 <__libc_init_array+0x2e>
 80033a6:	bd70      	pop	{r4, r5, r6, pc}
 80033a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80033ac:	4798      	blx	r3
 80033ae:	3601      	adds	r6, #1
 80033b0:	e7ee      	b.n	8003390 <__libc_init_array+0xc>
 80033b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80033b6:	4798      	blx	r3
 80033b8:	3601      	adds	r6, #1
 80033ba:	e7f2      	b.n	80033a2 <__libc_init_array+0x1e>
 80033bc:	0800340c 	.word	0x0800340c
 80033c0:	0800340c 	.word	0x0800340c
 80033c4:	0800340c 	.word	0x0800340c
 80033c8:	08003410 	.word	0x08003410

080033cc <memset>:
 80033cc:	4402      	add	r2, r0
 80033ce:	4603      	mov	r3, r0
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d100      	bne.n	80033d6 <memset+0xa>
 80033d4:	4770      	bx	lr
 80033d6:	f803 1b01 	strb.w	r1, [r3], #1
 80033da:	e7f9      	b.n	80033d0 <memset+0x4>

080033dc <_init>:
 80033dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033de:	bf00      	nop
 80033e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033e2:	bc08      	pop	{r3}
 80033e4:	469e      	mov	lr, r3
 80033e6:	4770      	bx	lr

080033e8 <_fini>:
 80033e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ea:	bf00      	nop
 80033ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ee:	bc08      	pop	{r3}
 80033f0:	469e      	mov	lr, r3
 80033f2:	4770      	bx	lr
