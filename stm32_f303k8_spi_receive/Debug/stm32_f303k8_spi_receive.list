
stm32_f303k8_spi_receive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003168  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080032f0  080032f0  000132f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003330  08003330  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003330  08003330  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003330  08003330  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003330  08003330  00013330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003334  08003334  00013334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003338  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  2000000c  08003344  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08003344  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e157  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ab1  00000000  00000000  0002e193  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000860  00000000  00000000  0002fc48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007a8  00000000  00000000  000304a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017b23  00000000  00000000  00030c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008498  00000000  00000000  00048773  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080cda  00000000  00000000  00050c0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d18e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021c0  00000000  00000000  000d1960  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080032d8 	.word	0x080032d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080032d8 	.word	0x080032d8

080001c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001cc:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <HAL_Init+0x28>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a07      	ldr	r2, [pc, #28]	; (80001f0 <HAL_Init+0x28>)
 80001d2:	f043 0310 	orr.w	r3, r3, #16
 80001d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d8:	2003      	movs	r0, #3
 80001da:	f000 f949 	bl	8000470 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001de:	2000      	movs	r0, #0
 80001e0:	f000 f808 	bl	80001f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001e4:	f002 fe86 	bl	8002ef4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001e8:	2300      	movs	r3, #0
}
 80001ea:	4618      	mov	r0, r3
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	40022000 	.word	0x40022000

080001f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001fc:	4b12      	ldr	r3, [pc, #72]	; (8000248 <HAL_InitTick+0x54>)
 80001fe:	681a      	ldr	r2, [r3, #0]
 8000200:	4b12      	ldr	r3, [pc, #72]	; (800024c <HAL_InitTick+0x58>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	4619      	mov	r1, r3
 8000206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800020a:	fbb3 f3f1 	udiv	r3, r3, r1
 800020e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000212:	4618      	mov	r0, r3
 8000214:	f000 f961 	bl	80004da <HAL_SYSTICK_Config>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800021e:	2301      	movs	r3, #1
 8000220:	e00e      	b.n	8000240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	2b0f      	cmp	r3, #15
 8000226:	d80a      	bhi.n	800023e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000228:	2200      	movs	r2, #0
 800022a:	6879      	ldr	r1, [r7, #4]
 800022c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000230:	f000 f929 	bl	8000486 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000234:	4a06      	ldr	r2, [pc, #24]	; (8000250 <HAL_InitTick+0x5c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
 800023c:	e000      	b.n	8000240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800023e:	2301      	movs	r3, #1
}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	20000008 	.word	0x20000008
 800024c:	20000004 	.word	0x20000004
 8000250:	20000000 	.word	0x20000000

08000254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <HAL_IncTick+0x20>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	461a      	mov	r2, r3
 800025e:	4b06      	ldr	r3, [pc, #24]	; (8000278 <HAL_IncTick+0x24>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4413      	add	r3, r2
 8000264:	4a04      	ldr	r2, [pc, #16]	; (8000278 <HAL_IncTick+0x24>)
 8000266:	6013      	str	r3, [r2, #0]
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	20000004 	.word	0x20000004
 8000278:	20000028 	.word	0x20000028

0800027c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000280:	4b03      	ldr	r3, [pc, #12]	; (8000290 <HAL_GetTick+0x14>)
 8000282:	681b      	ldr	r3, [r3, #0]
}
 8000284:	4618      	mov	r0, r3
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	20000028 	.word	0x20000028

08000294 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800029c:	f7ff ffee 	bl	800027c <HAL_GetTick>
 80002a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80002ac:	d005      	beq.n	80002ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80002ae:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <HAL_Delay+0x40>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	461a      	mov	r2, r3
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	4413      	add	r3, r2
 80002b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002ba:	bf00      	nop
 80002bc:	f7ff ffde 	bl	800027c <HAL_GetTick>
 80002c0:	4602      	mov	r2, r0
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	1ad3      	subs	r3, r2, r3
 80002c6:	68fa      	ldr	r2, [r7, #12]
 80002c8:	429a      	cmp	r2, r3
 80002ca:	d8f7      	bhi.n	80002bc <HAL_Delay+0x28>
  {
  }
}
 80002cc:	bf00      	nop
 80002ce:	3710      	adds	r7, #16
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	20000004 	.word	0x20000004

080002d8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	f003 0307 	and.w	r3, r3, #7
 80002e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002e8:	4b0c      	ldr	r3, [pc, #48]	; (800031c <NVIC_SetPriorityGrouping+0x44>)
 80002ea:	68db      	ldr	r3, [r3, #12]
 80002ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002ee:	68ba      	ldr	r2, [r7, #8]
 80002f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002f4:	4013      	ands	r3, r2
 80002f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002fc:	68bb      	ldr	r3, [r7, #8]
 80002fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800030a:	4a04      	ldr	r2, [pc, #16]	; (800031c <NVIC_SetPriorityGrouping+0x44>)
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	60d3      	str	r3, [r2, #12]
}
 8000310:	bf00      	nop
 8000312:	3714      	adds	r7, #20
 8000314:	46bd      	mov	sp, r7
 8000316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031a:	4770      	bx	lr
 800031c:	e000ed00 	.word	0xe000ed00

08000320 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000324:	4b04      	ldr	r3, [pc, #16]	; (8000338 <NVIC_GetPriorityGrouping+0x18>)
 8000326:	68db      	ldr	r3, [r3, #12]
 8000328:	0a1b      	lsrs	r3, r3, #8
 800032a:	f003 0307 	and.w	r3, r3, #7
}
 800032e:	4618      	mov	r0, r3
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr
 8000338:	e000ed00 	.word	0xe000ed00

0800033c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	4603      	mov	r3, r0
 8000344:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	f003 021f 	and.w	r2, r3, #31
 800034c:	4907      	ldr	r1, [pc, #28]	; (800036c <NVIC_EnableIRQ+0x30>)
 800034e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000352:	095b      	lsrs	r3, r3, #5
 8000354:	2001      	movs	r0, #1
 8000356:	fa00 f202 	lsl.w	r2, r0, r2
 800035a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800035e:	bf00      	nop
 8000360:	370c      	adds	r7, #12
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	e000e100 	.word	0xe000e100

08000370 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
 8000376:	4603      	mov	r3, r0
 8000378:	6039      	str	r1, [r7, #0]
 800037a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800037c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000380:	2b00      	cmp	r3, #0
 8000382:	da0b      	bge.n	800039c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	b2da      	uxtb	r2, r3
 8000388:	490c      	ldr	r1, [pc, #48]	; (80003bc <NVIC_SetPriority+0x4c>)
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	f003 030f 	and.w	r3, r3, #15
 8000390:	3b04      	subs	r3, #4
 8000392:	0112      	lsls	r2, r2, #4
 8000394:	b2d2      	uxtb	r2, r2
 8000396:	440b      	add	r3, r1
 8000398:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800039a:	e009      	b.n	80003b0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800039c:	683b      	ldr	r3, [r7, #0]
 800039e:	b2da      	uxtb	r2, r3
 80003a0:	4907      	ldr	r1, [pc, #28]	; (80003c0 <NVIC_SetPriority+0x50>)
 80003a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003a6:	0112      	lsls	r2, r2, #4
 80003a8:	b2d2      	uxtb	r2, r2
 80003aa:	440b      	add	r3, r1
 80003ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80003b0:	bf00      	nop
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr
 80003bc:	e000ed00 	.word	0xe000ed00
 80003c0:	e000e100 	.word	0xe000e100

080003c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b089      	sub	sp, #36	; 0x24
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	60f8      	str	r0, [r7, #12]
 80003cc:	60b9      	str	r1, [r7, #8]
 80003ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	f003 0307 	and.w	r3, r3, #7
 80003d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003d8:	69fb      	ldr	r3, [r7, #28]
 80003da:	f1c3 0307 	rsb	r3, r3, #7
 80003de:	2b04      	cmp	r3, #4
 80003e0:	bf28      	it	cs
 80003e2:	2304      	movcs	r3, #4
 80003e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003e6:	69fb      	ldr	r3, [r7, #28]
 80003e8:	3304      	adds	r3, #4
 80003ea:	2b06      	cmp	r3, #6
 80003ec:	d902      	bls.n	80003f4 <NVIC_EncodePriority+0x30>
 80003ee:	69fb      	ldr	r3, [r7, #28]
 80003f0:	3b03      	subs	r3, #3
 80003f2:	e000      	b.n	80003f6 <NVIC_EncodePriority+0x32>
 80003f4:	2300      	movs	r3, #0
 80003f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80003fc:	69bb      	ldr	r3, [r7, #24]
 80003fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000402:	43da      	mvns	r2, r3
 8000404:	68bb      	ldr	r3, [r7, #8]
 8000406:	401a      	ands	r2, r3
 8000408:	697b      	ldr	r3, [r7, #20]
 800040a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800040c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000410:	697b      	ldr	r3, [r7, #20]
 8000412:	fa01 f303 	lsl.w	r3, r1, r3
 8000416:	43d9      	mvns	r1, r3
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800041c:	4313      	orrs	r3, r2
         );
}
 800041e:	4618      	mov	r0, r3
 8000420:	3724      	adds	r7, #36	; 0x24
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
	...

0800042c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	3b01      	subs	r3, #1
 8000438:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800043c:	d301      	bcc.n	8000442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800043e:	2301      	movs	r3, #1
 8000440:	e00f      	b.n	8000462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000442:	4a0a      	ldr	r2, [pc, #40]	; (800046c <SysTick_Config+0x40>)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	3b01      	subs	r3, #1
 8000448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800044a:	210f      	movs	r1, #15
 800044c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000450:	f7ff ff8e 	bl	8000370 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000454:	4b05      	ldr	r3, [pc, #20]	; (800046c <SysTick_Config+0x40>)
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800045a:	4b04      	ldr	r3, [pc, #16]	; (800046c <SysTick_Config+0x40>)
 800045c:	2207      	movs	r2, #7
 800045e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000460:	2300      	movs	r3, #0
}
 8000462:	4618      	mov	r0, r3
 8000464:	3708      	adds	r7, #8
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	e000e010 	.word	0xe000e010

08000470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000478:	6878      	ldr	r0, [r7, #4]
 800047a:	f7ff ff2d 	bl	80002d8 <NVIC_SetPriorityGrouping>
}
 800047e:	bf00      	nop
 8000480:	3708      	adds	r7, #8
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}

08000486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000486:	b580      	push	{r7, lr}
 8000488:	b086      	sub	sp, #24
 800048a:	af00      	add	r7, sp, #0
 800048c:	4603      	mov	r3, r0
 800048e:	60b9      	str	r1, [r7, #8]
 8000490:	607a      	str	r2, [r7, #4]
 8000492:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000494:	2300      	movs	r3, #0
 8000496:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000498:	f7ff ff42 	bl	8000320 <NVIC_GetPriorityGrouping>
 800049c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800049e:	687a      	ldr	r2, [r7, #4]
 80004a0:	68b9      	ldr	r1, [r7, #8]
 80004a2:	6978      	ldr	r0, [r7, #20]
 80004a4:	f7ff ff8e 	bl	80003c4 <NVIC_EncodePriority>
 80004a8:	4602      	mov	r2, r0
 80004aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004ae:	4611      	mov	r1, r2
 80004b0:	4618      	mov	r0, r3
 80004b2:	f7ff ff5d 	bl	8000370 <NVIC_SetPriority>
}
 80004b6:	bf00      	nop
 80004b8:	3718      	adds	r7, #24
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}

080004be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004be:	b580      	push	{r7, lr}
 80004c0:	b082      	sub	sp, #8
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	4603      	mov	r3, r0
 80004c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80004c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004cc:	4618      	mov	r0, r3
 80004ce:	f7ff ff35 	bl	800033c <NVIC_EnableIRQ>
}
 80004d2:	bf00      	nop
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}

080004da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004da:	b580      	push	{r7, lr}
 80004dc:	b082      	sub	sp, #8
 80004de:	af00      	add	r7, sp, #0
 80004e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004e2:	6878      	ldr	r0, [r7, #4]
 80004e4:	f7ff ffa2 	bl	800042c <SysTick_Config>
 80004e8:	4603      	mov	r3, r0
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}

080004f2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80004f2:	b580      	push	{r7, lr}
 80004f4:	b084      	sub	sp, #16
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80004fa:	2300      	movs	r3, #0
 80004fc:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d101      	bne.n	8000508 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000504:	2301      	movs	r3, #1
 8000506:	e037      	b.n	8000578 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2202      	movs	r2, #2
 800050c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800051e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000522:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800052c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	68db      	ldr	r3, [r3, #12]
 8000532:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000538:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000544:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	69db      	ldr	r3, [r3, #28]
 800054a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800054c:	68fa      	ldr	r2, [r7, #12]
 800054e:	4313      	orrs	r3, r2
 8000550:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	68fa      	ldr	r2, [r7, #12]
 8000558:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800055a:	6878      	ldr	r0, [r7, #4]
 800055c:	f000 f940 	bl	80007e0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2200      	movs	r2, #0
 8000564:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2201      	movs	r2, #1
 800056a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2200      	movs	r2, #0
 8000572:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000576:	2300      	movs	r3, #0
}  
 8000578:	4618      	mov	r0, r3
 800057a:	3710      	adds	r7, #16
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
 800058c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800058e:	2300      	movs	r3, #0
 8000590:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d101      	bne.n	80005a0 <HAL_DMA_Start_IT+0x20>
 800059c:	2302      	movs	r3, #2
 800059e:	e04a      	b.n	8000636 <HAL_DMA_Start_IT+0xb6>
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	2201      	movs	r2, #1
 80005a4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d13a      	bne.n	8000628 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	2202      	movs	r2, #2
 80005b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	2200      	movs	r2, #0
 80005be:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f022 0201 	bic.w	r2, r2, #1
 80005ce:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	68b9      	ldr	r1, [r7, #8]
 80005d6:	68f8      	ldr	r0, [r7, #12]
 80005d8:	f000 f8d4 	bl	8000784 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d008      	beq.n	80005f6 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f042 020e 	orr.w	r2, r2, #14
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	e00f      	b.n	8000616 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f042 020a 	orr.w	r2, r2, #10
 8000604:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f022 0204 	bic.w	r2, r2, #4
 8000614:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	681a      	ldr	r2, [r3, #0]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f042 0201 	orr.w	r2, r2, #1
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	e005      	b.n	8000634 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	2200      	movs	r2, #0
 800062c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000630:	2302      	movs	r3, #2
 8000632:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8000634:	7dfb      	ldrb	r3, [r7, #23]
} 
 8000636:	4618      	mov	r0, r3
 8000638:	3718      	adds	r7, #24
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b084      	sub	sp, #16
 8000642:	af00      	add	r7, sp, #0
 8000644:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065a:	2204      	movs	r2, #4
 800065c:	409a      	lsls	r2, r3
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	4013      	ands	r3, r2
 8000662:	2b00      	cmp	r3, #0
 8000664:	d024      	beq.n	80006b0 <HAL_DMA_IRQHandler+0x72>
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	f003 0304 	and.w	r3, r3, #4
 800066c:	2b00      	cmp	r3, #0
 800066e:	d01f      	beq.n	80006b0 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	f003 0320 	and.w	r3, r3, #32
 800067a:	2b00      	cmp	r3, #0
 800067c:	d107      	bne.n	800068e <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f022 0204 	bic.w	r2, r2, #4
 800068c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000696:	2104      	movs	r1, #4
 8000698:	fa01 f202 	lsl.w	r2, r1, r2
 800069c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d06a      	beq.n	800077c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80006ae:	e065      	b.n	800077c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	2202      	movs	r2, #2
 80006b6:	409a      	lsls	r2, r3
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	4013      	ands	r3, r2
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d02c      	beq.n	800071a <HAL_DMA_IRQHandler+0xdc>
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	f003 0302 	and.w	r3, r3, #2
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d027      	beq.n	800071a <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f003 0320 	and.w	r3, r3, #32
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d10b      	bne.n	80006f0 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f022 020a 	bic.w	r2, r2, #10
 80006e6:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2201      	movs	r2, #1
 80006ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006f8:	2102      	movs	r1, #2
 80006fa:	fa01 f202 	lsl.w	r2, r1, r2
 80006fe:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2200      	movs	r2, #0
 8000704:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800070c:	2b00      	cmp	r3, #0
 800070e:	d035      	beq.n	800077c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000718:	e030      	b.n	800077c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071e:	2208      	movs	r2, #8
 8000720:	409a      	lsls	r2, r3
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	4013      	ands	r3, r2
 8000726:	2b00      	cmp	r3, #0
 8000728:	d028      	beq.n	800077c <HAL_DMA_IRQHandler+0x13e>
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	f003 0308 	and.w	r3, r3, #8
 8000730:	2b00      	cmp	r3, #0
 8000732:	d023      	beq.n	800077c <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f022 020e 	bic.w	r2, r2, #14
 8000742:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800074c:	2101      	movs	r1, #1
 800074e:	fa01 f202 	lsl.w	r2, r1, r2
 8000752:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2201      	movs	r2, #1
 8000758:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2201      	movs	r2, #1
 800075e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2200      	movs	r2, #0
 8000766:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	2b00      	cmp	r3, #0
 8000770:	d004      	beq.n	800077c <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	4798      	blx	r3
    }
  }
}  
 800077a:	e7ff      	b.n	800077c <HAL_DMA_IRQHandler+0x13e>
 800077c:	bf00      	nop
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	60b9      	str	r1, [r7, #8]
 800078e:	607a      	str	r2, [r7, #4]
 8000790:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800079a:	2101      	movs	r1, #1
 800079c:	fa01 f202 	lsl.w	r2, r1, r2
 80007a0:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	683a      	ldr	r2, [r7, #0]
 80007a8:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	2b10      	cmp	r3, #16
 80007b0:	d108      	bne.n	80007c4 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	68ba      	ldr	r2, [r7, #8]
 80007c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80007c2:	e007      	b.n	80007d4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	68ba      	ldr	r2, [r7, #8]
 80007ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	60da      	str	r2, [r3, #12]
}
 80007d4:	bf00      	nop
 80007d6:	3714      	adds	r7, #20
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	461a      	mov	r2, r3
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <DMA_CalcBaseAndBitshift+0x34>)
 80007f0:	4413      	add	r3, r2
 80007f2:	4a09      	ldr	r2, [pc, #36]	; (8000818 <DMA_CalcBaseAndBitshift+0x38>)
 80007f4:	fba2 2303 	umull	r2, r3, r2, r3
 80007f8:	091b      	lsrs	r3, r3, #4
 80007fa:	009a      	lsls	r2, r3, #2
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4a06      	ldr	r2, [pc, #24]	; (800081c <DMA_CalcBaseAndBitshift+0x3c>)
 8000804:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	bffdfff8 	.word	0xbffdfff8
 8000818:	cccccccd 	.word	0xcccccccd
 800081c:	40020000 	.word	0x40020000

08000820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000820:	b480      	push	{r7}
 8000822:	b087      	sub	sp, #28
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000836:	e14e      	b.n	8000ad6 <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	2101      	movs	r1, #1
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	fa01 f303 	lsl.w	r3, r1, r3
 8000844:	4013      	ands	r3, r2
 8000846:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	2b00      	cmp	r3, #0
 800084c:	f000 8140 	beq.w	8000ad0 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	2b02      	cmp	r3, #2
 8000856:	d003      	beq.n	8000860 <HAL_GPIO_Init+0x40>
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	2b12      	cmp	r3, #18
 800085e:	d123      	bne.n	80008a8 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	08da      	lsrs	r2, r3, #3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	3208      	adds	r2, #8
 8000868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800086c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	f003 0307 	and.w	r3, r3, #7
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	220f      	movs	r2, #15
 8000878:	fa02 f303 	lsl.w	r3, r2, r3
 800087c:	43db      	mvns	r3, r3
 800087e:	693a      	ldr	r2, [r7, #16]
 8000880:	4013      	ands	r3, r2
 8000882:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	691a      	ldr	r2, [r3, #16]
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	f003 0307 	and.w	r3, r3, #7
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	fa02 f303 	lsl.w	r3, r2, r3
 8000894:	693a      	ldr	r2, [r7, #16]
 8000896:	4313      	orrs	r3, r2
 8000898:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	08da      	lsrs	r2, r3, #3
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	3208      	adds	r2, #8
 80008a2:	6939      	ldr	r1, [r7, #16]
 80008a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	2203      	movs	r2, #3
 80008b4:	fa02 f303 	lsl.w	r3, r2, r3
 80008b8:	43db      	mvns	r3, r3
 80008ba:	693a      	ldr	r2, [r7, #16]
 80008bc:	4013      	ands	r3, r2
 80008be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	f003 0203 	and.w	r2, r3, #3
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	fa02 f303 	lsl.w	r3, r2, r3
 80008d0:	693a      	ldr	r2, [r7, #16]
 80008d2:	4313      	orrs	r3, r2
 80008d4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	693a      	ldr	r2, [r7, #16]
 80008da:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d00b      	beq.n	80008fc <HAL_GPIO_Init+0xdc>
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	2b02      	cmp	r3, #2
 80008ea:	d007      	beq.n	80008fc <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008f0:	2b11      	cmp	r3, #17
 80008f2:	d003      	beq.n	80008fc <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	2b12      	cmp	r3, #18
 80008fa:	d130      	bne.n	800095e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	689b      	ldr	r3, [r3, #8]
 8000900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	2203      	movs	r2, #3
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	43db      	mvns	r3, r3
 800090e:	693a      	ldr	r2, [r7, #16]
 8000910:	4013      	ands	r3, r2
 8000912:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	68da      	ldr	r2, [r3, #12]
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	fa02 f303 	lsl.w	r3, r2, r3
 8000920:	693a      	ldr	r2, [r7, #16]
 8000922:	4313      	orrs	r3, r2
 8000924:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	693a      	ldr	r2, [r7, #16]
 800092a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000932:	2201      	movs	r2, #1
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	fa02 f303 	lsl.w	r3, r2, r3
 800093a:	43db      	mvns	r3, r3
 800093c:	693a      	ldr	r2, [r7, #16]
 800093e:	4013      	ands	r3, r2
 8000940:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	091b      	lsrs	r3, r3, #4
 8000948:	f003 0201 	and.w	r2, r3, #1
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	4313      	orrs	r3, r2
 8000956:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	68db      	ldr	r3, [r3, #12]
 8000962:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	2203      	movs	r2, #3
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	43db      	mvns	r3, r3
 8000970:	693a      	ldr	r2, [r7, #16]
 8000972:	4013      	ands	r3, r2
 8000974:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	689a      	ldr	r2, [r3, #8]
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	4313      	orrs	r3, r2
 8000986:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000996:	2b00      	cmp	r3, #0
 8000998:	f000 809a 	beq.w	8000ad0 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099c:	4b55      	ldr	r3, [pc, #340]	; (8000af4 <HAL_GPIO_Init+0x2d4>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	4a54      	ldr	r2, [pc, #336]	; (8000af4 <HAL_GPIO_Init+0x2d4>)
 80009a2:	f043 0301 	orr.w	r3, r3, #1
 80009a6:	6193      	str	r3, [r2, #24]
 80009a8:	4b52      	ldr	r3, [pc, #328]	; (8000af4 <HAL_GPIO_Init+0x2d4>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f003 0301 	and.w	r3, r3, #1
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80009b4:	4a50      	ldr	r2, [pc, #320]	; (8000af8 <HAL_GPIO_Init+0x2d8>)
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	089b      	lsrs	r3, r3, #2
 80009ba:	3302      	adds	r3, #2
 80009bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c0:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	f003 0303 	and.w	r3, r3, #3
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	220f      	movs	r2, #15
 80009cc:	fa02 f303 	lsl.w	r3, r2, r3
 80009d0:	43db      	mvns	r3, r3
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	4013      	ands	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80009de:	d013      	beq.n	8000a08 <HAL_GPIO_Init+0x1e8>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	4a46      	ldr	r2, [pc, #280]	; (8000afc <HAL_GPIO_Init+0x2dc>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d00d      	beq.n	8000a04 <HAL_GPIO_Init+0x1e4>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a45      	ldr	r2, [pc, #276]	; (8000b00 <HAL_GPIO_Init+0x2e0>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d007      	beq.n	8000a00 <HAL_GPIO_Init+0x1e0>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4a44      	ldr	r2, [pc, #272]	; (8000b04 <HAL_GPIO_Init+0x2e4>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d101      	bne.n	80009fc <HAL_GPIO_Init+0x1dc>
 80009f8:	2303      	movs	r3, #3
 80009fa:	e006      	b.n	8000a0a <HAL_GPIO_Init+0x1ea>
 80009fc:	2305      	movs	r3, #5
 80009fe:	e004      	b.n	8000a0a <HAL_GPIO_Init+0x1ea>
 8000a00:	2302      	movs	r3, #2
 8000a02:	e002      	b.n	8000a0a <HAL_GPIO_Init+0x1ea>
 8000a04:	2301      	movs	r3, #1
 8000a06:	e000      	b.n	8000a0a <HAL_GPIO_Init+0x1ea>
 8000a08:	2300      	movs	r3, #0
 8000a0a:	697a      	ldr	r2, [r7, #20]
 8000a0c:	f002 0203 	and.w	r2, r2, #3
 8000a10:	0092      	lsls	r2, r2, #2
 8000a12:	4093      	lsls	r3, r2
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000a1a:	4937      	ldr	r1, [pc, #220]	; (8000af8 <HAL_GPIO_Init+0x2d8>)
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	089b      	lsrs	r3, r3, #2
 8000a20:	3302      	adds	r3, #2
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a28:	4b37      	ldr	r3, [pc, #220]	; (8000b08 <HAL_GPIO_Init+0x2e8>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	43db      	mvns	r3, r3
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	4013      	ands	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d003      	beq.n	8000a4c <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a4c:	4a2e      	ldr	r2, [pc, #184]	; (8000b08 <HAL_GPIO_Init+0x2e8>)
 8000a4e:	693b      	ldr	r3, [r7, #16]
 8000a50:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a52:	4b2d      	ldr	r3, [pc, #180]	; (8000b08 <HAL_GPIO_Init+0x2e8>)
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	693a      	ldr	r2, [r7, #16]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d003      	beq.n	8000a76 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a76:	4a24      	ldr	r2, [pc, #144]	; (8000b08 <HAL_GPIO_Init+0x2e8>)
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a7c:	4b22      	ldr	r3, [pc, #136]	; (8000b08 <HAL_GPIO_Init+0x2e8>)
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	43db      	mvns	r3, r3
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	4013      	ands	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d003      	beq.n	8000aa0 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 8000a98:	693a      	ldr	r2, [r7, #16]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000aa0:	4a19      	ldr	r2, [pc, #100]	; (8000b08 <HAL_GPIO_Init+0x2e8>)
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000aa6:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <HAL_GPIO_Init+0x2e8>)
 8000aa8:	68db      	ldr	r3, [r3, #12]
 8000aaa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	43db      	mvns	r3, r3
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d003      	beq.n	8000aca <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000aca:	4a0f      	ldr	r2, [pc, #60]	; (8000b08 <HAL_GPIO_Init+0x2e8>)
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	f47f aea9 	bne.w	8000838 <HAL_GPIO_Init+0x18>
  }
}
 8000ae6:	bf00      	nop
 8000ae8:	371c      	adds	r7, #28
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	40021000 	.word	0x40021000
 8000af8:	40010000 	.word	0x40010000
 8000afc:	48000400 	.word	0x48000400
 8000b00:	48000800 	.word	0x48000800
 8000b04:	48000c00 	.word	0x48000c00
 8000b08:	40010400 	.word	0x40010400

08000b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	460b      	mov	r3, r1
 8000b16:	807b      	strh	r3, [r7, #2]
 8000b18:	4613      	mov	r3, r2
 8000b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b1c:	787b      	ldrb	r3, [r7, #1]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d003      	beq.n	8000b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b22:	887a      	ldrh	r2, [r7, #2]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b28:	e002      	b.n	8000b30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b2a:	887a      	ldrh	r2, [r7, #2]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d102      	bne.n	8000b56 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000b50:	2301      	movs	r3, #1
 8000b52:	f000 beda 	b.w	800190a <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f003 0301 	and.w	r3, r3, #1
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	f000 816e 	beq.w	8000e42 <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b66:	4bb5      	ldr	r3, [pc, #724]	; (8000e3c <HAL_RCC_OscConfig+0x300>)
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f003 030c 	and.w	r3, r3, #12
 8000b6e:	2b04      	cmp	r3, #4
 8000b70:	d00c      	beq.n	8000b8c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b72:	4bb2      	ldr	r3, [pc, #712]	; (8000e3c <HAL_RCC_OscConfig+0x300>)
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f003 030c 	and.w	r3, r3, #12
 8000b7a:	2b08      	cmp	r3, #8
 8000b7c:	d15a      	bne.n	8000c34 <HAL_RCC_OscConfig+0xf8>
 8000b7e:	4baf      	ldr	r3, [pc, #700]	; (8000e3c <HAL_RCC_OscConfig+0x300>)
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b8a:	d153      	bne.n	8000c34 <HAL_RCC_OscConfig+0xf8>
 8000b8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b90:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b94:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000b98:	fa93 f3a3 	rbit	r3, r3
 8000b9c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000ba0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ba4:	fab3 f383 	clz	r3, r3
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	095b      	lsrs	r3, r3, #5
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	f043 0301 	orr.w	r3, r3, #1
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d102      	bne.n	8000bbe <HAL_RCC_OscConfig+0x82>
 8000bb8:	4ba0      	ldr	r3, [pc, #640]	; (8000e3c <HAL_RCC_OscConfig+0x300>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	e015      	b.n	8000bea <HAL_RCC_OscConfig+0xae>
 8000bbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bc2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bc6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000bca:	fa93 f3a3 	rbit	r3, r3
 8000bce:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000bd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bd6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000bda:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000bde:	fa93 f3a3 	rbit	r3, r3
 8000be2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000be6:	4b95      	ldr	r3, [pc, #596]	; (8000e3c <HAL_RCC_OscConfig+0x300>)
 8000be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000bee:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000bf2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000bf6:	fa92 f2a2 	rbit	r2, r2
 8000bfa:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 8000bfe:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000c02:	fab2 f282 	clz	r2, r2
 8000c06:	b252      	sxtb	r2, r2
 8000c08:	f042 0220 	orr.w	r2, r2, #32
 8000c0c:	b252      	sxtb	r2, r2
 8000c0e:	b2d2      	uxtb	r2, r2
 8000c10:	f002 021f 	and.w	r2, r2, #31
 8000c14:	2101      	movs	r1, #1
 8000c16:	fa01 f202 	lsl.w	r2, r1, r2
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	f000 810f 	beq.w	8000e40 <HAL_RCC_OscConfig+0x304>
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	f040 8109 	bne.w	8000e40 <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	f000 be6b 	b.w	800190a <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c3e:	d106      	bne.n	8000c4e <HAL_RCC_OscConfig+0x112>
 8000c40:	4b7e      	ldr	r3, [pc, #504]	; (8000e3c <HAL_RCC_OscConfig+0x300>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a7d      	ldr	r2, [pc, #500]	; (8000e3c <HAL_RCC_OscConfig+0x300>)
 8000c46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c4a:	6013      	str	r3, [r2, #0]
 8000c4c:	e030      	b.n	8000cb0 <HAL_RCC_OscConfig+0x174>
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d10c      	bne.n	8000c72 <HAL_RCC_OscConfig+0x136>
 8000c58:	4b78      	ldr	r3, [pc, #480]	; (8000e3c <HAL_RCC_OscConfig+0x300>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a77      	ldr	r2, [pc, #476]	; (8000e3c <HAL_RCC_OscConfig+0x300>)
 8000c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c62:	6013      	str	r3, [r2, #0]
 8000c64:	4b75      	ldr	r3, [pc, #468]	; (8000e3c <HAL_RCC_OscConfig+0x300>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a74      	ldr	r2, [pc, #464]	; (8000e3c <HAL_RCC_OscConfig+0x300>)
 8000c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c6e:	6013      	str	r3, [r2, #0]
 8000c70:	e01e      	b.n	8000cb0 <HAL_RCC_OscConfig+0x174>
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c7c:	d10c      	bne.n	8000c98 <HAL_RCC_OscConfig+0x15c>
 8000c7e:	4b6f      	ldr	r3, [pc, #444]	; (8000e3c <HAL_RCC_OscConfig+0x300>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a6e      	ldr	r2, [pc, #440]	; (8000e3c <HAL_RCC_OscConfig+0x300>)
 8000c84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c88:	6013      	str	r3, [r2, #0]
 8000c8a:	4b6c      	ldr	r3, [pc, #432]	; (8000e3c <HAL_RCC_OscConfig+0x300>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a6b      	ldr	r2, [pc, #428]	; (8000e3c <HAL_RCC_OscConfig+0x300>)
 8000c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c94:	6013      	str	r3, [r2, #0]
 8000c96:	e00b      	b.n	8000cb0 <HAL_RCC_OscConfig+0x174>
 8000c98:	4b68      	ldr	r3, [pc, #416]	; (8000e3c <HAL_RCC_OscConfig+0x300>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a67      	ldr	r2, [pc, #412]	; (8000e3c <HAL_RCC_OscConfig+0x300>)
 8000c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ca2:	6013      	str	r3, [r2, #0]
 8000ca4:	4b65      	ldr	r3, [pc, #404]	; (8000e3c <HAL_RCC_OscConfig+0x300>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a64      	ldr	r2, [pc, #400]	; (8000e3c <HAL_RCC_OscConfig+0x300>)
 8000caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cae:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000cb0:	4b62      	ldr	r3, [pc, #392]	; (8000e3c <HAL_RCC_OscConfig+0x300>)
 8000cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb4:	f023 020f 	bic.w	r2, r3, #15
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	495f      	ldr	r1, [pc, #380]	; (8000e3c <HAL_RCC_OscConfig+0x300>)
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d05a      	beq.n	8000d84 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cce:	f7ff fad5 	bl	800027c <HAL_GetTick>
 8000cd2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cd6:	e00a      	b.n	8000cee <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cd8:	f7ff fad0 	bl	800027c <HAL_GetTick>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ce2:	1ad3      	subs	r3, r2, r3
 8000ce4:	2b64      	cmp	r3, #100	; 0x64
 8000ce6:	d902      	bls.n	8000cee <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	f000 be0e 	b.w	800190a <HAL_RCC_OscConfig+0xdce>
 8000cee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cf2:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cf6:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000cfa:	fa93 f3a3 	rbit	r3, r3
 8000cfe:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8000d02:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d06:	fab3 f383 	clz	r3, r3
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	095b      	lsrs	r3, r3, #5
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d102      	bne.n	8000d20 <HAL_RCC_OscConfig+0x1e4>
 8000d1a:	4b48      	ldr	r3, [pc, #288]	; (8000e3c <HAL_RCC_OscConfig+0x300>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	e015      	b.n	8000d4c <HAL_RCC_OscConfig+0x210>
 8000d20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d24:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d28:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000d2c:	fa93 f3a3 	rbit	r3, r3
 8000d30:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000d34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d38:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000d3c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000d40:	fa93 f3a3 	rbit	r3, r3
 8000d44:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000d48:	4b3c      	ldr	r3, [pc, #240]	; (8000e3c <HAL_RCC_OscConfig+0x300>)
 8000d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d4c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d50:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000d54:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000d58:	fa92 f2a2 	rbit	r2, r2
 8000d5c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8000d60:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	b252      	sxtb	r2, r2
 8000d6a:	f042 0220 	orr.w	r2, r2, #32
 8000d6e:	b252      	sxtb	r2, r2
 8000d70:	b2d2      	uxtb	r2, r2
 8000d72:	f002 021f 	and.w	r2, r2, #31
 8000d76:	2101      	movs	r1, #1
 8000d78:	fa01 f202 	lsl.w	r2, r1, r2
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d0aa      	beq.n	8000cd8 <HAL_RCC_OscConfig+0x19c>
 8000d82:	e05e      	b.n	8000e42 <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d84:	f7ff fa7a 	bl	800027c <HAL_GetTick>
 8000d88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d8c:	e00a      	b.n	8000da4 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d8e:	f7ff fa75 	bl	800027c <HAL_GetTick>
 8000d92:	4602      	mov	r2, r0
 8000d94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	2b64      	cmp	r3, #100	; 0x64
 8000d9c:	d902      	bls.n	8000da4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	f000 bdb3 	b.w	800190a <HAL_RCC_OscConfig+0xdce>
 8000da4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000da8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000db0:	fa93 f3a3 	rbit	r3, r3
 8000db4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8000db8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dbc:	fab3 f383 	clz	r3, r3
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	095b      	lsrs	r3, r3, #5
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d102      	bne.n	8000dd6 <HAL_RCC_OscConfig+0x29a>
 8000dd0:	4b1a      	ldr	r3, [pc, #104]	; (8000e3c <HAL_RCC_OscConfig+0x300>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	e015      	b.n	8000e02 <HAL_RCC_OscConfig+0x2c6>
 8000dd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dda:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dde:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000de2:	fa93 f3a3 	rbit	r3, r3
 8000de6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000dea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dee:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000df2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000df6:	fa93 f3a3 	rbit	r3, r3
 8000dfa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <HAL_RCC_OscConfig+0x300>)
 8000e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e06:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000e0a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000e0e:	fa92 f2a2 	rbit	r2, r2
 8000e12:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8000e16:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000e1a:	fab2 f282 	clz	r2, r2
 8000e1e:	b252      	sxtb	r2, r2
 8000e20:	f042 0220 	orr.w	r2, r2, #32
 8000e24:	b252      	sxtb	r2, r2
 8000e26:	b2d2      	uxtb	r2, r2
 8000e28:	f002 021f 	and.w	r2, r2, #31
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e32:	4013      	ands	r3, r2
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d1aa      	bne.n	8000d8e <HAL_RCC_OscConfig+0x252>
 8000e38:	e003      	b.n	8000e42 <HAL_RCC_OscConfig+0x306>
 8000e3a:	bf00      	nop
 8000e3c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f003 0302 	and.w	r3, r3, #2
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	f000 8170 	beq.w	8001132 <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e52:	4bd0      	ldr	r3, [pc, #832]	; (8001194 <HAL_RCC_OscConfig+0x658>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f003 030c 	and.w	r3, r3, #12
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d00b      	beq.n	8000e76 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e5e:	4bcd      	ldr	r3, [pc, #820]	; (8001194 <HAL_RCC_OscConfig+0x658>)
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f003 030c 	and.w	r3, r3, #12
 8000e66:	2b08      	cmp	r3, #8
 8000e68:	d16d      	bne.n	8000f46 <HAL_RCC_OscConfig+0x40a>
 8000e6a:	4bca      	ldr	r3, [pc, #808]	; (8001194 <HAL_RCC_OscConfig+0x658>)
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d167      	bne.n	8000f46 <HAL_RCC_OscConfig+0x40a>
 8000e76:	2302      	movs	r3, #2
 8000e78:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e7c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000e80:	fa93 f3a3 	rbit	r3, r3
 8000e84:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8000e88:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e8c:	fab3 f383 	clz	r3, r3
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	095b      	lsrs	r3, r3, #5
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d102      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x36a>
 8000ea0:	4bbc      	ldr	r3, [pc, #752]	; (8001194 <HAL_RCC_OscConfig+0x658>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	e013      	b.n	8000ece <HAL_RCC_OscConfig+0x392>
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eac:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000eb0:	fa93 f3a3 	rbit	r3, r3
 8000eb4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000eb8:	2302      	movs	r3, #2
 8000eba:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000ebe:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000ec2:	fa93 f3a3 	rbit	r3, r3
 8000ec6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000eca:	4bb2      	ldr	r3, [pc, #712]	; (8001194 <HAL_RCC_OscConfig+0x658>)
 8000ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ece:	2202      	movs	r2, #2
 8000ed0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000ed4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000ed8:	fa92 f2a2 	rbit	r2, r2
 8000edc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8000ee0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000ee4:	fab2 f282 	clz	r2, r2
 8000ee8:	b252      	sxtb	r2, r2
 8000eea:	f042 0220 	orr.w	r2, r2, #32
 8000eee:	b252      	sxtb	r2, r2
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	f002 021f 	and.w	r2, r2, #31
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8000efc:	4013      	ands	r3, r2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d007      	beq.n	8000f12 <HAL_RCC_OscConfig+0x3d6>
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	691b      	ldr	r3, [r3, #16]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d002      	beq.n	8000f12 <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	f000 bcfc 	b.w	800190a <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f12:	4ba0      	ldr	r3, [pc, #640]	; (8001194 <HAL_RCC_OscConfig+0x658>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	6959      	ldr	r1, [r3, #20]
 8000f20:	23f8      	movs	r3, #248	; 0xf8
 8000f22:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f26:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000f2a:	fa93 f3a3 	rbit	r3, r3
 8000f2e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8000f32:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000f36:	fab3 f383 	clz	r3, r3
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3e:	4995      	ldr	r1, [pc, #596]	; (8001194 <HAL_RCC_OscConfig+0x658>)
 8000f40:	4313      	orrs	r3, r2
 8000f42:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f44:	e0f5      	b.n	8001132 <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	691b      	ldr	r3, [r3, #16]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	f000 8085 	beq.w	800105c <HAL_RCC_OscConfig+0x520>
 8000f52:	2301      	movs	r3, #1
 8000f54:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f58:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000f5c:	fa93 f3a3 	rbit	r3, r3
 8000f60:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8000f64:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f68:	fab3 f383 	clz	r3, r3
 8000f6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	461a      	mov	r2, r3
 8000f78:	2301      	movs	r3, #1
 8000f7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f7c:	f7ff f97e 	bl	800027c <HAL_GetTick>
 8000f80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f84:	e00a      	b.n	8000f9c <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f86:	f7ff f979 	bl	800027c <HAL_GetTick>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d902      	bls.n	8000f9c <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	f000 bcb7 	b.w	800190a <HAL_RCC_OscConfig+0xdce>
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000fa6:	fa93 f3a3 	rbit	r3, r3
 8000faa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8000fae:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fb2:	fab3 f383 	clz	r3, r3
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	095b      	lsrs	r3, r3, #5
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d102      	bne.n	8000fcc <HAL_RCC_OscConfig+0x490>
 8000fc6:	4b73      	ldr	r3, [pc, #460]	; (8001194 <HAL_RCC_OscConfig+0x658>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	e013      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4b8>
 8000fcc:	2302      	movs	r3, #2
 8000fce:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000fd6:	fa93 f3a3 	rbit	r3, r3
 8000fda:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000fde:	2302      	movs	r3, #2
 8000fe0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000fe4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000fe8:	fa93 f3a3 	rbit	r3, r3
 8000fec:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000ff0:	4b68      	ldr	r3, [pc, #416]	; (8001194 <HAL_RCC_OscConfig+0x658>)
 8000ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff4:	2202      	movs	r2, #2
 8000ff6:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000ffa:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000ffe:	fa92 f2a2 	rbit	r2, r2
 8001002:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8001006:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800100a:	fab2 f282 	clz	r2, r2
 800100e:	b252      	sxtb	r2, r2
 8001010:	f042 0220 	orr.w	r2, r2, #32
 8001014:	b252      	sxtb	r2, r2
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	f002 021f 	and.w	r2, r2, #31
 800101c:	2101      	movs	r1, #1
 800101e:	fa01 f202 	lsl.w	r2, r1, r2
 8001022:	4013      	ands	r3, r2
 8001024:	2b00      	cmp	r3, #0
 8001026:	d0ae      	beq.n	8000f86 <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001028:	4b5a      	ldr	r3, [pc, #360]	; (8001194 <HAL_RCC_OscConfig+0x658>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	6959      	ldr	r1, [r3, #20]
 8001036:	23f8      	movs	r3, #248	; 0xf8
 8001038:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800103c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001040:	fa93 f3a3 	rbit	r3, r3
 8001044:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8001048:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800104c:	fab3 f383 	clz	r3, r3
 8001050:	fa01 f303 	lsl.w	r3, r1, r3
 8001054:	494f      	ldr	r1, [pc, #316]	; (8001194 <HAL_RCC_OscConfig+0x658>)
 8001056:	4313      	orrs	r3, r2
 8001058:	600b      	str	r3, [r1, #0]
 800105a:	e06a      	b.n	8001132 <HAL_RCC_OscConfig+0x5f6>
 800105c:	2301      	movs	r3, #1
 800105e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001062:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001066:	fa93 f3a3 	rbit	r3, r3
 800106a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 800106e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001072:	fab3 f383 	clz	r3, r3
 8001076:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800107a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	461a      	mov	r2, r3
 8001082:	2300      	movs	r3, #0
 8001084:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001086:	f7ff f8f9 	bl	800027c <HAL_GetTick>
 800108a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800108e:	e00a      	b.n	80010a6 <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001090:	f7ff f8f4 	bl	800027c <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	2b02      	cmp	r3, #2
 800109e:	d902      	bls.n	80010a6 <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 80010a0:	2303      	movs	r3, #3
 80010a2:	f000 bc32 	b.w	800190a <HAL_RCC_OscConfig+0xdce>
 80010a6:	2302      	movs	r3, #2
 80010a8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80010b0:	fa93 f3a3 	rbit	r3, r3
 80010b4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 80010b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010bc:	fab3 f383 	clz	r3, r3
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	095b      	lsrs	r3, r3, #5
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	f043 0301 	orr.w	r3, r3, #1
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d102      	bne.n	80010d6 <HAL_RCC_OscConfig+0x59a>
 80010d0:	4b30      	ldr	r3, [pc, #192]	; (8001194 <HAL_RCC_OscConfig+0x658>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	e013      	b.n	80010fe <HAL_RCC_OscConfig+0x5c2>
 80010d6:	2302      	movs	r3, #2
 80010d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80010e0:	fa93 f3a3 	rbit	r3, r3
 80010e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80010e8:	2302      	movs	r3, #2
 80010ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80010ee:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80010f2:	fa93 f3a3 	rbit	r3, r3
 80010f6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80010fa:	4b26      	ldr	r3, [pc, #152]	; (8001194 <HAL_RCC_OscConfig+0x658>)
 80010fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fe:	2202      	movs	r2, #2
 8001100:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001104:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001108:	fa92 f2a2 	rbit	r2, r2
 800110c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8001110:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001114:	fab2 f282 	clz	r2, r2
 8001118:	b252      	sxtb	r2, r2
 800111a:	f042 0220 	orr.w	r2, r2, #32
 800111e:	b252      	sxtb	r2, r2
 8001120:	b2d2      	uxtb	r2, r2
 8001122:	f002 021f 	and.w	r2, r2, #31
 8001126:	2101      	movs	r1, #1
 8001128:	fa01 f202 	lsl.w	r2, r1, r2
 800112c:	4013      	ands	r3, r2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1ae      	bne.n	8001090 <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0308 	and.w	r3, r3, #8
 800113c:	2b00      	cmp	r3, #0
 800113e:	f000 80d8 	beq.w	80012f2 <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d067      	beq.n	800121c <HAL_RCC_OscConfig+0x6e0>
 800114c:	2301      	movs	r3, #1
 800114e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001152:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001156:	fa93 f3a3 	rbit	r3, r3
 800115a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 800115e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001162:	fab3 f383 	clz	r3, r3
 8001166:	461a      	mov	r2, r3
 8001168:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <HAL_RCC_OscConfig+0x65c>)
 800116a:	4413      	add	r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	461a      	mov	r2, r3
 8001170:	2301      	movs	r3, #1
 8001172:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001174:	f7ff f882 	bl	800027c <HAL_GetTick>
 8001178:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800117c:	e00e      	b.n	800119c <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800117e:	f7ff f87d 	bl	800027c <HAL_GetTick>
 8001182:	4602      	mov	r2, r0
 8001184:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b02      	cmp	r3, #2
 800118c:	d906      	bls.n	800119c <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e3bb      	b.n	800190a <HAL_RCC_OscConfig+0xdce>
 8001192:	bf00      	nop
 8001194:	40021000 	.word	0x40021000
 8001198:	10908120 	.word	0x10908120
 800119c:	2302      	movs	r3, #2
 800119e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80011a6:	fa93 f3a3 	rbit	r3, r3
 80011aa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80011ae:	2302      	movs	r3, #2
 80011b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80011b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80011b8:	fa93 f2a3 	rbit	r2, r3
 80011bc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80011c6:	2202      	movs	r2, #2
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	fa93 f2a3 	rbit	r2, r3
 80011d4:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80011d8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011da:	4ba5      	ldr	r3, [pc, #660]	; (8001470 <HAL_RCC_OscConfig+0x934>)
 80011dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011de:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80011e2:	2102      	movs	r1, #2
 80011e4:	6019      	str	r1, [r3, #0]
 80011e6:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	fa93 f1a3 	rbit	r1, r3
 80011f0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80011f4:	6019      	str	r1, [r3, #0]
  return(result);
 80011f6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	fab3 f383 	clz	r3, r3
 8001200:	b25b      	sxtb	r3, r3
 8001202:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001206:	b25b      	sxtb	r3, r3
 8001208:	b2db      	uxtb	r3, r3
 800120a:	f003 031f 	and.w	r3, r3, #31
 800120e:	2101      	movs	r1, #1
 8001210:	fa01 f303 	lsl.w	r3, r1, r3
 8001214:	4013      	ands	r3, r2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d0b1      	beq.n	800117e <HAL_RCC_OscConfig+0x642>
 800121a:	e06a      	b.n	80012f2 <HAL_RCC_OscConfig+0x7b6>
 800121c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001220:	2201      	movs	r2, #1
 8001222:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001224:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	fa93 f2a3 	rbit	r2, r3
 800122e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001232:	601a      	str	r2, [r3, #0]
  return(result);
 8001234:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001238:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800123a:	fab3 f383 	clz	r3, r3
 800123e:	461a      	mov	r2, r3
 8001240:	4b8c      	ldr	r3, [pc, #560]	; (8001474 <HAL_RCC_OscConfig+0x938>)
 8001242:	4413      	add	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	461a      	mov	r2, r3
 8001248:	2300      	movs	r3, #0
 800124a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800124c:	f7ff f816 	bl	800027c <HAL_GetTick>
 8001250:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001254:	e009      	b.n	800126a <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001256:	f7ff f811 	bl	800027c <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b02      	cmp	r3, #2
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e34f      	b.n	800190a <HAL_RCC_OscConfig+0xdce>
 800126a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800126e:	2202      	movs	r2, #2
 8001270:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001272:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	fa93 f2a3 	rbit	r2, r3
 800127c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001286:	2202      	movs	r2, #2
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	fa93 f2a3 	rbit	r2, r3
 8001294:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800129e:	2202      	movs	r2, #2
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	fa93 f2a3 	rbit	r2, r3
 80012ac:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80012b0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b2:	4b6f      	ldr	r3, [pc, #444]	; (8001470 <HAL_RCC_OscConfig+0x934>)
 80012b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012b6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012ba:	2102      	movs	r1, #2
 80012bc:	6019      	str	r1, [r3, #0]
 80012be:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	fa93 f1a3 	rbit	r1, r3
 80012c8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80012cc:	6019      	str	r1, [r3, #0]
  return(result);
 80012ce:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	fab3 f383 	clz	r3, r3
 80012d8:	b25b      	sxtb	r3, r3
 80012da:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80012de:	b25b      	sxtb	r3, r3
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	f003 031f 	and.w	r3, r3, #31
 80012e6:	2101      	movs	r1, #1
 80012e8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ec:	4013      	ands	r3, r2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1b1      	bne.n	8001256 <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0304 	and.w	r3, r3, #4
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f000 8159 	beq.w	80015b4 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001302:	2300      	movs	r3, #0
 8001304:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001308:	4b59      	ldr	r3, [pc, #356]	; (8001470 <HAL_RCC_OscConfig+0x934>)
 800130a:	69db      	ldr	r3, [r3, #28]
 800130c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d112      	bne.n	800133a <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001314:	4b56      	ldr	r3, [pc, #344]	; (8001470 <HAL_RCC_OscConfig+0x934>)
 8001316:	69db      	ldr	r3, [r3, #28]
 8001318:	4a55      	ldr	r2, [pc, #340]	; (8001470 <HAL_RCC_OscConfig+0x934>)
 800131a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800131e:	61d3      	str	r3, [r2, #28]
 8001320:	4b53      	ldr	r3, [pc, #332]	; (8001470 <HAL_RCC_OscConfig+0x934>)
 8001322:	69db      	ldr	r3, [r3, #28]
 8001324:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001328:	f107 030c 	add.w	r3, r7, #12
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	f107 030c 	add.w	r3, r7, #12
 8001332:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001334:	2301      	movs	r3, #1
 8001336:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800133a:	4b4f      	ldr	r3, [pc, #316]	; (8001478 <HAL_RCC_OscConfig+0x93c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001342:	2b00      	cmp	r3, #0
 8001344:	d11a      	bne.n	800137c <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001346:	4b4c      	ldr	r3, [pc, #304]	; (8001478 <HAL_RCC_OscConfig+0x93c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a4b      	ldr	r2, [pc, #300]	; (8001478 <HAL_RCC_OscConfig+0x93c>)
 800134c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001350:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001352:	f7fe ff93 	bl	800027c <HAL_GetTick>
 8001356:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800135a:	e009      	b.n	8001370 <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800135c:	f7fe ff8e 	bl	800027c <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b64      	cmp	r3, #100	; 0x64
 800136a:	d901      	bls.n	8001370 <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e2cc      	b.n	800190a <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001370:	4b41      	ldr	r3, [pc, #260]	; (8001478 <HAL_RCC_OscConfig+0x93c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001378:	2b00      	cmp	r3, #0
 800137a:	d0ef      	beq.n	800135c <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d106      	bne.n	8001394 <HAL_RCC_OscConfig+0x858>
 8001386:	4b3a      	ldr	r3, [pc, #232]	; (8001470 <HAL_RCC_OscConfig+0x934>)
 8001388:	6a1b      	ldr	r3, [r3, #32]
 800138a:	4a39      	ldr	r2, [pc, #228]	; (8001470 <HAL_RCC_OscConfig+0x934>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6213      	str	r3, [r2, #32]
 8001392:	e02f      	b.n	80013f4 <HAL_RCC_OscConfig+0x8b8>
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d10c      	bne.n	80013b8 <HAL_RCC_OscConfig+0x87c>
 800139e:	4b34      	ldr	r3, [pc, #208]	; (8001470 <HAL_RCC_OscConfig+0x934>)
 80013a0:	6a1b      	ldr	r3, [r3, #32]
 80013a2:	4a33      	ldr	r2, [pc, #204]	; (8001470 <HAL_RCC_OscConfig+0x934>)
 80013a4:	f023 0301 	bic.w	r3, r3, #1
 80013a8:	6213      	str	r3, [r2, #32]
 80013aa:	4b31      	ldr	r3, [pc, #196]	; (8001470 <HAL_RCC_OscConfig+0x934>)
 80013ac:	6a1b      	ldr	r3, [r3, #32]
 80013ae:	4a30      	ldr	r2, [pc, #192]	; (8001470 <HAL_RCC_OscConfig+0x934>)
 80013b0:	f023 0304 	bic.w	r3, r3, #4
 80013b4:	6213      	str	r3, [r2, #32]
 80013b6:	e01d      	b.n	80013f4 <HAL_RCC_OscConfig+0x8b8>
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	2b05      	cmp	r3, #5
 80013c0:	d10c      	bne.n	80013dc <HAL_RCC_OscConfig+0x8a0>
 80013c2:	4b2b      	ldr	r3, [pc, #172]	; (8001470 <HAL_RCC_OscConfig+0x934>)
 80013c4:	6a1b      	ldr	r3, [r3, #32]
 80013c6:	4a2a      	ldr	r2, [pc, #168]	; (8001470 <HAL_RCC_OscConfig+0x934>)
 80013c8:	f043 0304 	orr.w	r3, r3, #4
 80013cc:	6213      	str	r3, [r2, #32]
 80013ce:	4b28      	ldr	r3, [pc, #160]	; (8001470 <HAL_RCC_OscConfig+0x934>)
 80013d0:	6a1b      	ldr	r3, [r3, #32]
 80013d2:	4a27      	ldr	r2, [pc, #156]	; (8001470 <HAL_RCC_OscConfig+0x934>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6213      	str	r3, [r2, #32]
 80013da:	e00b      	b.n	80013f4 <HAL_RCC_OscConfig+0x8b8>
 80013dc:	4b24      	ldr	r3, [pc, #144]	; (8001470 <HAL_RCC_OscConfig+0x934>)
 80013de:	6a1b      	ldr	r3, [r3, #32]
 80013e0:	4a23      	ldr	r2, [pc, #140]	; (8001470 <HAL_RCC_OscConfig+0x934>)
 80013e2:	f023 0301 	bic.w	r3, r3, #1
 80013e6:	6213      	str	r3, [r2, #32]
 80013e8:	4b21      	ldr	r3, [pc, #132]	; (8001470 <HAL_RCC_OscConfig+0x934>)
 80013ea:	6a1b      	ldr	r3, [r3, #32]
 80013ec:	4a20      	ldr	r2, [pc, #128]	; (8001470 <HAL_RCC_OscConfig+0x934>)
 80013ee:	f023 0304 	bic.w	r3, r3, #4
 80013f2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d06b      	beq.n	80014d6 <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fe:	f7fe ff3d 	bl	800027c <HAL_GetTick>
 8001402:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001406:	e00b      	b.n	8001420 <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001408:	f7fe ff38 	bl	800027c <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	f241 3288 	movw	r2, #5000	; 0x1388
 8001418:	4293      	cmp	r3, r2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e274      	b.n	800190a <HAL_RCC_OscConfig+0xdce>
 8001420:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001424:	2202      	movs	r2, #2
 8001426:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001428:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	fa93 f2a3 	rbit	r2, r3
 8001432:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800143c:	2202      	movs	r2, #2
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	fa93 f2a3 	rbit	r2, r3
 800144a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800144e:	601a      	str	r2, [r3, #0]
  return(result);
 8001450:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001454:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001456:	fab3 f383 	clz	r3, r3
 800145a:	b2db      	uxtb	r3, r3
 800145c:	095b      	lsrs	r3, r3, #5
 800145e:	b2db      	uxtb	r3, r3
 8001460:	f043 0302 	orr.w	r3, r3, #2
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d108      	bne.n	800147c <HAL_RCC_OscConfig+0x940>
 800146a:	4b01      	ldr	r3, [pc, #4]	; (8001470 <HAL_RCC_OscConfig+0x934>)
 800146c:	6a1b      	ldr	r3, [r3, #32]
 800146e:	e013      	b.n	8001498 <HAL_RCC_OscConfig+0x95c>
 8001470:	40021000 	.word	0x40021000
 8001474:	10908120 	.word	0x10908120
 8001478:	40007000 	.word	0x40007000
 800147c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001480:	2202      	movs	r2, #2
 8001482:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001484:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	fa93 f2a3 	rbit	r2, r3
 800148e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	4bbb      	ldr	r3, [pc, #748]	; (8001784 <HAL_RCC_OscConfig+0xc48>)
 8001496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001498:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800149c:	2102      	movs	r1, #2
 800149e:	6011      	str	r1, [r2, #0]
 80014a0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80014a4:	6812      	ldr	r2, [r2, #0]
 80014a6:	fa92 f1a2 	rbit	r1, r2
 80014aa:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80014ae:	6011      	str	r1, [r2, #0]
  return(result);
 80014b0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80014b4:	6812      	ldr	r2, [r2, #0]
 80014b6:	fab2 f282 	clz	r2, r2
 80014ba:	b252      	sxtb	r2, r2
 80014bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014c0:	b252      	sxtb	r2, r2
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	f002 021f 	and.w	r2, r2, #31
 80014c8:	2101      	movs	r1, #1
 80014ca:	fa01 f202 	lsl.w	r2, r1, r2
 80014ce:	4013      	ands	r3, r2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d099      	beq.n	8001408 <HAL_RCC_OscConfig+0x8cc>
 80014d4:	e064      	b.n	80015a0 <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d6:	f7fe fed1 	bl	800027c <HAL_GetTick>
 80014da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014de:	e00b      	b.n	80014f8 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014e0:	f7fe fecc 	bl	800027c <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e208      	b.n	800190a <HAL_RCC_OscConfig+0xdce>
 80014f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014fc:	2202      	movs	r2, #2
 80014fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001500:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	fa93 f2a3 	rbit	r2, r3
 800150a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001514:	2202      	movs	r2, #2
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	fa93 f2a3 	rbit	r2, r3
 8001522:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001526:	601a      	str	r2, [r3, #0]
  return(result);
 8001528:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800152c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800152e:	fab3 f383 	clz	r3, r3
 8001532:	b2db      	uxtb	r3, r3
 8001534:	095b      	lsrs	r3, r3, #5
 8001536:	b2db      	uxtb	r3, r3
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d102      	bne.n	8001548 <HAL_RCC_OscConfig+0xa0c>
 8001542:	4b90      	ldr	r3, [pc, #576]	; (8001784 <HAL_RCC_OscConfig+0xc48>)
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	e00d      	b.n	8001564 <HAL_RCC_OscConfig+0xa28>
 8001548:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800154c:	2202      	movs	r2, #2
 800154e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001550:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	fa93 f2a3 	rbit	r2, r3
 800155a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	4b88      	ldr	r3, [pc, #544]	; (8001784 <HAL_RCC_OscConfig+0xc48>)
 8001562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001564:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001568:	2102      	movs	r1, #2
 800156a:	6011      	str	r1, [r2, #0]
 800156c:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001570:	6812      	ldr	r2, [r2, #0]
 8001572:	fa92 f1a2 	rbit	r1, r2
 8001576:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800157a:	6011      	str	r1, [r2, #0]
  return(result);
 800157c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001580:	6812      	ldr	r2, [r2, #0]
 8001582:	fab2 f282 	clz	r2, r2
 8001586:	b252      	sxtb	r2, r2
 8001588:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800158c:	b252      	sxtb	r2, r2
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	f002 021f 	and.w	r2, r2, #31
 8001594:	2101      	movs	r1, #1
 8001596:	fa01 f202 	lsl.w	r2, r1, r2
 800159a:	4013      	ands	r3, r2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d19f      	bne.n	80014e0 <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015a0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d105      	bne.n	80015b4 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015a8:	4b76      	ldr	r3, [pc, #472]	; (8001784 <HAL_RCC_OscConfig+0xc48>)
 80015aa:	69db      	ldr	r3, [r3, #28]
 80015ac:	4a75      	ldr	r2, [pc, #468]	; (8001784 <HAL_RCC_OscConfig+0xc48>)
 80015ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015b2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015b4:	1d3b      	adds	r3, r7, #4
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f000 81a4 	beq.w	8001908 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015c0:	4b70      	ldr	r3, [pc, #448]	; (8001784 <HAL_RCC_OscConfig+0xc48>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 030c 	and.w	r3, r3, #12
 80015c8:	2b08      	cmp	r3, #8
 80015ca:	f000 819b 	beq.w	8001904 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	69db      	ldr	r3, [r3, #28]
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	f040 8113 	bne.w	8001800 <HAL_RCC_OscConfig+0xcc4>
 80015da:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80015de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	fa93 f2a3 	rbit	r2, r3
 80015ee:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80015f2:	601a      	str	r2, [r3, #0]
  return(result);
 80015f4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80015f8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015fa:	fab3 f383 	clz	r3, r3
 80015fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001602:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	461a      	mov	r2, r3
 800160a:	2300      	movs	r3, #0
 800160c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160e:	f7fe fe35 	bl	800027c <HAL_GetTick>
 8001612:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001616:	e009      	b.n	800162c <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001618:	f7fe fe30 	bl	800027c <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e16e      	b.n	800190a <HAL_RCC_OscConfig+0xdce>
 800162c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001630:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001634:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001636:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	fa93 f2a3 	rbit	r2, r3
 8001640:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001644:	601a      	str	r2, [r3, #0]
  return(result);
 8001646:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800164a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800164c:	fab3 f383 	clz	r3, r3
 8001650:	b2db      	uxtb	r3, r3
 8001652:	095b      	lsrs	r3, r3, #5
 8001654:	b2db      	uxtb	r3, r3
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b01      	cmp	r3, #1
 800165e:	d102      	bne.n	8001666 <HAL_RCC_OscConfig+0xb2a>
 8001660:	4b48      	ldr	r3, [pc, #288]	; (8001784 <HAL_RCC_OscConfig+0xc48>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	e01b      	b.n	800169e <HAL_RCC_OscConfig+0xb62>
 8001666:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800166a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800166e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001670:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	fa93 f2a3 	rbit	r2, r3
 800167a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001684:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	fa93 f2a3 	rbit	r2, r3
 8001694:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	4b3a      	ldr	r3, [pc, #232]	; (8001784 <HAL_RCC_OscConfig+0xc48>)
 800169c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80016a2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80016a6:	6011      	str	r1, [r2, #0]
 80016a8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80016ac:	6812      	ldr	r2, [r2, #0]
 80016ae:	fa92 f1a2 	rbit	r1, r2
 80016b2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80016b6:	6011      	str	r1, [r2, #0]
  return(result);
 80016b8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80016bc:	6812      	ldr	r2, [r2, #0]
 80016be:	fab2 f282 	clz	r2, r2
 80016c2:	b252      	sxtb	r2, r2
 80016c4:	f042 0220 	orr.w	r2, r2, #32
 80016c8:	b252      	sxtb	r2, r2
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	f002 021f 	and.w	r2, r2, #31
 80016d0:	2101      	movs	r1, #1
 80016d2:	fa01 f202 	lsl.w	r2, r1, r2
 80016d6:	4013      	ands	r3, r2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d19d      	bne.n	8001618 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016dc:	4b29      	ldr	r3, [pc, #164]	; (8001784 <HAL_RCC_OscConfig+0xc48>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	430b      	orrs	r3, r1
 80016f2:	4924      	ldr	r1, [pc, #144]	; (8001784 <HAL_RCC_OscConfig+0xc48>)
 80016f4:	4313      	orrs	r3, r2
 80016f6:	604b      	str	r3, [r1, #4]
 80016f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80016fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001700:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001702:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	fa93 f2a3 	rbit	r2, r3
 800170c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001710:	601a      	str	r2, [r3, #0]
  return(result);
 8001712:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001716:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001718:	fab3 f383 	clz	r3, r3
 800171c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001720:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	461a      	mov	r2, r3
 8001728:	2301      	movs	r3, #1
 800172a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172c:	f7fe fda6 	bl	800027c <HAL_GetTick>
 8001730:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001734:	e009      	b.n	800174a <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001736:	f7fe fda1 	bl	800027c <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e0df      	b.n	800190a <HAL_RCC_OscConfig+0xdce>
 800174a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800174e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001752:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001754:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	fa93 f2a3 	rbit	r2, r3
 800175e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001762:	601a      	str	r2, [r3, #0]
  return(result);
 8001764:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001768:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800176a:	fab3 f383 	clz	r3, r3
 800176e:	b2db      	uxtb	r3, r3
 8001770:	095b      	lsrs	r3, r3, #5
 8001772:	b2db      	uxtb	r3, r3
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2b01      	cmp	r3, #1
 800177c:	d104      	bne.n	8001788 <HAL_RCC_OscConfig+0xc4c>
 800177e:	4b01      	ldr	r3, [pc, #4]	; (8001784 <HAL_RCC_OscConfig+0xc48>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	e01d      	b.n	80017c0 <HAL_RCC_OscConfig+0xc84>
 8001784:	40021000 	.word	0x40021000
 8001788:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800178c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001790:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001792:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	fa93 f2a3 	rbit	r2, r3
 800179c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80017a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	fa93 f2a3 	rbit	r2, r3
 80017b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	4b55      	ldr	r3, [pc, #340]	; (8001914 <HAL_RCC_OscConfig+0xdd8>)
 80017be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80017c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80017c8:	6011      	str	r1, [r2, #0]
 80017ca:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80017ce:	6812      	ldr	r2, [r2, #0]
 80017d0:	fa92 f1a2 	rbit	r1, r2
 80017d4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80017d8:	6011      	str	r1, [r2, #0]
  return(result);
 80017da:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80017de:	6812      	ldr	r2, [r2, #0]
 80017e0:	fab2 f282 	clz	r2, r2
 80017e4:	b252      	sxtb	r2, r2
 80017e6:	f042 0220 	orr.w	r2, r2, #32
 80017ea:	b252      	sxtb	r2, r2
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	f002 021f 	and.w	r2, r2, #31
 80017f2:	2101      	movs	r1, #1
 80017f4:	fa01 f202 	lsl.w	r2, r1, r2
 80017f8:	4013      	ands	r3, r2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d09b      	beq.n	8001736 <HAL_RCC_OscConfig+0xbfa>
 80017fe:	e083      	b.n	8001908 <HAL_RCC_OscConfig+0xdcc>
 8001800:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001804:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001808:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	fa93 f2a3 	rbit	r2, r3
 8001814:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001818:	601a      	str	r2, [r3, #0]
  return(result);
 800181a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800181e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001820:	fab3 f383 	clz	r3, r3
 8001824:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001828:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	461a      	mov	r2, r3
 8001830:	2300      	movs	r3, #0
 8001832:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001834:	f7fe fd22 	bl	800027c <HAL_GetTick>
 8001838:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800183c:	e009      	b.n	8001852 <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800183e:	f7fe fd1d 	bl	800027c <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e05b      	b.n	800190a <HAL_RCC_OscConfig+0xdce>
 8001852:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001856:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800185a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	fa93 f2a3 	rbit	r2, r3
 8001866:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800186a:	601a      	str	r2, [r3, #0]
  return(result);
 800186c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001870:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001872:	fab3 f383 	clz	r3, r3
 8001876:	b2db      	uxtb	r3, r3
 8001878:	095b      	lsrs	r3, r3, #5
 800187a:	b2db      	uxtb	r3, r3
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b01      	cmp	r3, #1
 8001884:	d102      	bne.n	800188c <HAL_RCC_OscConfig+0xd50>
 8001886:	4b23      	ldr	r3, [pc, #140]	; (8001914 <HAL_RCC_OscConfig+0xdd8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	e01b      	b.n	80018c4 <HAL_RCC_OscConfig+0xd88>
 800188c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001890:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001894:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	fa93 f2a3 	rbit	r2, r3
 80018a0:	f107 0320 	add.w	r3, r7, #32
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	f107 031c 	add.w	r3, r7, #28
 80018aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	f107 031c 	add.w	r3, r7, #28
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	fa93 f2a3 	rbit	r2, r3
 80018ba:	f107 0318 	add.w	r3, r7, #24
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	4b14      	ldr	r3, [pc, #80]	; (8001914 <HAL_RCC_OscConfig+0xdd8>)
 80018c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c4:	f107 0214 	add.w	r2, r7, #20
 80018c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80018cc:	6011      	str	r1, [r2, #0]
 80018ce:	f107 0214 	add.w	r2, r7, #20
 80018d2:	6812      	ldr	r2, [r2, #0]
 80018d4:	fa92 f1a2 	rbit	r1, r2
 80018d8:	f107 0210 	add.w	r2, r7, #16
 80018dc:	6011      	str	r1, [r2, #0]
  return(result);
 80018de:	f107 0210 	add.w	r2, r7, #16
 80018e2:	6812      	ldr	r2, [r2, #0]
 80018e4:	fab2 f282 	clz	r2, r2
 80018e8:	b252      	sxtb	r2, r2
 80018ea:	f042 0220 	orr.w	r2, r2, #32
 80018ee:	b252      	sxtb	r2, r2
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	f002 021f 	and.w	r2, r2, #31
 80018f6:	2101      	movs	r1, #1
 80018f8:	fa01 f202 	lsl.w	r2, r1, r2
 80018fc:	4013      	ands	r3, r2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d19d      	bne.n	800183e <HAL_RCC_OscConfig+0xd02>
 8001902:	e001      	b.n	8001908 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40021000 	.word	0x40021000

08001918 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b09e      	sub	sp, #120	; 0x78
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001922:	2300      	movs	r3, #0
 8001924:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e164      	b.n	8001bfa <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001930:	4b92      	ldr	r3, [pc, #584]	; (8001b7c <HAL_RCC_ClockConfig+0x264>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0307 	and.w	r3, r3, #7
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	429a      	cmp	r2, r3
 800193c:	d910      	bls.n	8001960 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193e:	4b8f      	ldr	r3, [pc, #572]	; (8001b7c <HAL_RCC_ClockConfig+0x264>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f023 0207 	bic.w	r2, r3, #7
 8001946:	498d      	ldr	r1, [pc, #564]	; (8001b7c <HAL_RCC_ClockConfig+0x264>)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	4313      	orrs	r3, r2
 800194c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800194e:	4b8b      	ldr	r3, [pc, #556]	; (8001b7c <HAL_RCC_ClockConfig+0x264>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	429a      	cmp	r2, r3
 800195a:	d001      	beq.n	8001960 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e14c      	b.n	8001bfa <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d008      	beq.n	800197e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800196c:	4b84      	ldr	r3, [pc, #528]	; (8001b80 <HAL_RCC_ClockConfig+0x268>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	4981      	ldr	r1, [pc, #516]	; (8001b80 <HAL_RCC_ClockConfig+0x268>)
 800197a:	4313      	orrs	r3, r2
 800197c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b00      	cmp	r3, #0
 8001988:	f000 80df 	beq.w	8001b4a <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d13d      	bne.n	8001a10 <HAL_RCC_ClockConfig+0xf8>
 8001994:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001998:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800199c:	fa93 f3a3 	rbit	r3, r3
 80019a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 80019a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a4:	fab3 f383 	clz	r3, r3
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	095b      	lsrs	r3, r3, #5
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d102      	bne.n	80019be <HAL_RCC_ClockConfig+0xa6>
 80019b8:	4b71      	ldr	r3, [pc, #452]	; (8001b80 <HAL_RCC_ClockConfig+0x268>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	e00f      	b.n	80019de <HAL_RCC_ClockConfig+0xc6>
 80019be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019c2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019c6:	fa93 f3a3 	rbit	r3, r3
 80019ca:	667b      	str	r3, [r7, #100]	; 0x64
 80019cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019d0:	663b      	str	r3, [r7, #96]	; 0x60
 80019d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019d4:	fa93 f3a3 	rbit	r3, r3
 80019d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80019da:	4b69      	ldr	r3, [pc, #420]	; (8001b80 <HAL_RCC_ClockConfig+0x268>)
 80019dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019e2:	65ba      	str	r2, [r7, #88]	; 0x58
 80019e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80019e6:	fa92 f2a2 	rbit	r2, r2
 80019ea:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 80019ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80019ee:	fab2 f282 	clz	r2, r2
 80019f2:	b252      	sxtb	r2, r2
 80019f4:	f042 0220 	orr.w	r2, r2, #32
 80019f8:	b252      	sxtb	r2, r2
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	f002 021f 	and.w	r2, r2, #31
 8001a00:	2101      	movs	r1, #1
 8001a02:	fa01 f202 	lsl.w	r2, r1, r2
 8001a06:	4013      	ands	r3, r2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d17d      	bne.n	8001b08 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e0f4      	b.n	8001bfa <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d13d      	bne.n	8001a94 <HAL_RCC_ClockConfig+0x17c>
 8001a18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a1c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a20:	fa93 f3a3 	rbit	r3, r3
 8001a24:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8001a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a28:	fab3 f383 	clz	r3, r3
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	095b      	lsrs	r3, r3, #5
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d102      	bne.n	8001a42 <HAL_RCC_ClockConfig+0x12a>
 8001a3c:	4b50      	ldr	r3, [pc, #320]	; (8001b80 <HAL_RCC_ClockConfig+0x268>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	e00f      	b.n	8001a62 <HAL_RCC_ClockConfig+0x14a>
 8001a42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a46:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a4a:	fa93 f3a3 	rbit	r3, r3
 8001a4e:	647b      	str	r3, [r7, #68]	; 0x44
 8001a50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a54:	643b      	str	r3, [r7, #64]	; 0x40
 8001a56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a58:	fa93 f3a3 	rbit	r3, r3
 8001a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a5e:	4b48      	ldr	r3, [pc, #288]	; (8001b80 <HAL_RCC_ClockConfig+0x268>)
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a66:	63ba      	str	r2, [r7, #56]	; 0x38
 8001a68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a6a:	fa92 f2a2 	rbit	r2, r2
 8001a6e:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 8001a70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a72:	fab2 f282 	clz	r2, r2
 8001a76:	b252      	sxtb	r2, r2
 8001a78:	f042 0220 	orr.w	r2, r2, #32
 8001a7c:	b252      	sxtb	r2, r2
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	f002 021f 	and.w	r2, r2, #31
 8001a84:	2101      	movs	r1, #1
 8001a86:	fa01 f202 	lsl.w	r2, r1, r2
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d13b      	bne.n	8001b08 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e0b2      	b.n	8001bfa <HAL_RCC_ClockConfig+0x2e2>
 8001a94:	2302      	movs	r3, #2
 8001a96:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a9a:	fa93 f3a3 	rbit	r3, r3
 8001a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8001aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa2:	fab3 f383 	clz	r3, r3
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	095b      	lsrs	r3, r3, #5
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d102      	bne.n	8001abc <HAL_RCC_ClockConfig+0x1a4>
 8001ab6:	4b32      	ldr	r3, [pc, #200]	; (8001b80 <HAL_RCC_ClockConfig+0x268>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	e00d      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x1c0>
 8001abc:	2302      	movs	r3, #2
 8001abe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac2:	fa93 f3a3 	rbit	r3, r3
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac8:	2302      	movs	r3, #2
 8001aca:	623b      	str	r3, [r7, #32]
 8001acc:	6a3b      	ldr	r3, [r7, #32]
 8001ace:	fa93 f3a3 	rbit	r3, r3
 8001ad2:	61fb      	str	r3, [r7, #28]
 8001ad4:	4b2a      	ldr	r3, [pc, #168]	; (8001b80 <HAL_RCC_ClockConfig+0x268>)
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	2202      	movs	r2, #2
 8001ada:	61ba      	str	r2, [r7, #24]
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	fa92 f2a2 	rbit	r2, r2
 8001ae2:	617a      	str	r2, [r7, #20]
  return(result);
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	fab2 f282 	clz	r2, r2
 8001aea:	b252      	sxtb	r2, r2
 8001aec:	f042 0220 	orr.w	r2, r2, #32
 8001af0:	b252      	sxtb	r2, r2
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	f002 021f 	and.w	r2, r2, #31
 8001af8:	2101      	movs	r1, #1
 8001afa:	fa01 f202 	lsl.w	r2, r1, r2
 8001afe:	4013      	ands	r3, r2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e078      	b.n	8001bfa <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b08:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <HAL_RCC_ClockConfig+0x268>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f023 0203 	bic.w	r2, r3, #3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	491a      	ldr	r1, [pc, #104]	; (8001b80 <HAL_RCC_ClockConfig+0x268>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b1a:	f7fe fbaf 	bl	800027c <HAL_GetTick>
 8001b1e:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b20:	e00a      	b.n	8001b38 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b22:	f7fe fbab 	bl	800027c <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e060      	b.n	8001bfa <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b38:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <HAL_RCC_ClockConfig+0x268>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 020c 	and.w	r2, r3, #12
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d1eb      	bne.n	8001b22 <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b4a:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <HAL_RCC_ClockConfig+0x264>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d215      	bcs.n	8001b84 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b58:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <HAL_RCC_ClockConfig+0x264>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f023 0207 	bic.w	r2, r3, #7
 8001b60:	4906      	ldr	r1, [pc, #24]	; (8001b7c <HAL_RCC_ClockConfig+0x264>)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b68:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <HAL_RCC_ClockConfig+0x264>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d006      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e03f      	b.n	8001bfa <HAL_RCC_ClockConfig+0x2e2>
 8001b7a:	bf00      	nop
 8001b7c:	40022000 	.word	0x40022000
 8001b80:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d008      	beq.n	8001ba2 <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b90:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <HAL_RCC_ClockConfig+0x2ec>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	4919      	ldr	r1, [pc, #100]	; (8001c04 <HAL_RCC_ClockConfig+0x2ec>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d009      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bae:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <HAL_RCC_ClockConfig+0x2ec>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	4911      	ldr	r1, [pc, #68]	; (8001c04 <HAL_RCC_ClockConfig+0x2ec>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001bc2:	f000 f825 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 8001bc6:	4601      	mov	r1, r0
 8001bc8:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <HAL_RCC_ClockConfig+0x2ec>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bd0:	23f0      	movs	r3, #240	; 0xf0
 8001bd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	fa93 f3a3 	rbit	r3, r3
 8001bda:	60fb      	str	r3, [r7, #12]
  return(result);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	fab3 f383 	clz	r3, r3
 8001be2:	fa22 f303 	lsr.w	r3, r2, r3
 8001be6:	4a08      	ldr	r2, [pc, #32]	; (8001c08 <HAL_RCC_ClockConfig+0x2f0>)
 8001be8:	5cd3      	ldrb	r3, [r2, r3]
 8001bea:	fa21 f303 	lsr.w	r3, r1, r3
 8001bee:	4a07      	ldr	r2, [pc, #28]	; (8001c0c <HAL_RCC_ClockConfig+0x2f4>)
 8001bf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	f7fe fafe 	bl	80001f4 <HAL_InitTick>
  
  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3778      	adds	r7, #120	; 0x78
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40021000 	.word	0x40021000
 8001c08:	08003318 	.word	0x08003318
 8001c0c:	20000008 	.word	0x20000008

08001c10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b08b      	sub	sp, #44	; 0x2c
 8001c14:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61bb      	str	r3, [r7, #24]
 8001c1e:	2300      	movs	r3, #0
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001c2a:	4b29      	ldr	r3, [pc, #164]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f003 030c 	and.w	r3, r3, #12
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	d002      	beq.n	8001c40 <HAL_RCC_GetSysClockFreq+0x30>
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d003      	beq.n	8001c46 <HAL_RCC_GetSysClockFreq+0x36>
 8001c3e:	e03c      	b.n	8001cba <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c40:	4b24      	ldr	r3, [pc, #144]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c42:	623b      	str	r3, [r7, #32]
      break;
 8001c44:	e03c      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c4c:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001c50:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	fa93 f3a3 	rbit	r3, r3
 8001c58:	607b      	str	r3, [r7, #4]
  return(result);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	fab3 f383 	clz	r3, r3
 8001c60:	fa22 f303 	lsr.w	r3, r2, r3
 8001c64:	4a1c      	ldr	r2, [pc, #112]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001c66:	5cd3      	ldrb	r3, [r2, r3]
 8001c68:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001c6a:	4b19      	ldr	r3, [pc, #100]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6e:	f003 020f 	and.w	r2, r3, #15
 8001c72:	230f      	movs	r3, #15
 8001c74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	fa93 f3a3 	rbit	r3, r3
 8001c7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	fab3 f383 	clz	r3, r3
 8001c84:	fa22 f303 	lsr.w	r3, r2, r3
 8001c88:	4a14      	ldr	r2, [pc, #80]	; (8001cdc <HAL_RCC_GetSysClockFreq+0xcc>)
 8001c8a:	5cd3      	ldrb	r3, [r2, r3]
 8001c8c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d008      	beq.n	8001caa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001c98:	4a0e      	ldr	r2, [pc, #56]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	fb02 f303 	mul.w	r3, r2, r3
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca8:	e004      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	4a0c      	ldr	r2, [pc, #48]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001cae:	fb02 f303 	mul.w	r3, r2, r3
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	623b      	str	r3, [r7, #32]
      break;
 8001cb8:	e002      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cba:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001cbc:	623b      	str	r3, [r7, #32]
      break;
 8001cbe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cc0:	6a3b      	ldr	r3, [r7, #32]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	372c      	adds	r7, #44	; 0x2c
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	007a1200 	.word	0x007a1200
 8001cd8:	080032f8 	.word	0x080032f8
 8001cdc:	08003308 	.word	0x08003308
 8001ce0:	003d0900 	.word	0x003d0900

08001ce4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ce8:	4b03      	ldr	r3, [pc, #12]	; (8001cf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cea:	681b      	ldr	r3, [r3, #0]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	20000008 	.word	0x20000008

08001cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001d02:	f7ff ffef 	bl	8001ce4 <HAL_RCC_GetHCLKFreq>
 8001d06:	4601      	mov	r1, r0
 8001d08:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d10:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001d14:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	fa93 f3a3 	rbit	r3, r3
 8001d1c:	603b      	str	r3, [r7, #0]
  return(result);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	fab3 f383 	clz	r3, r3
 8001d24:	fa22 f303 	lsr.w	r3, r2, r3
 8001d28:	4a04      	ldr	r2, [pc, #16]	; (8001d3c <HAL_RCC_GetPCLK1Freq+0x40>)
 8001d2a:	5cd3      	ldrb	r3, [r2, r3]
 8001d2c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001d30:	4618      	mov	r0, r3
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	08003328 	.word	0x08003328

08001d40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001d46:	f7ff ffcd 	bl	8001ce4 <HAL_RCC_GetHCLKFreq>
 8001d4a:	4601      	mov	r1, r0
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8001d54:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001d58:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	fa93 f3a3 	rbit	r3, r3
 8001d60:	603b      	str	r3, [r7, #0]
  return(result);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	fab3 f383 	clz	r3, r3
 8001d68:	fa22 f303 	lsr.w	r3, r2, r3
 8001d6c:	4a04      	ldr	r2, [pc, #16]	; (8001d80 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001d6e:	5cd3      	ldrb	r3, [r2, r3]
 8001d70:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001d74:	4618      	mov	r0, r3
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	08003328 	.word	0x08003328

08001d84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e07c      	b.n	8001e90 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d106      	bne.n	8001db6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f001 f8c3 	bl	8002f3c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2202      	movs	r2, #2
 8001dba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dcc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001dd6:	d902      	bls.n	8001dde <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	e002      	b.n	8001de4 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001dde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001de2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001dec:	d007      	beq.n	8001dfe <HAL_SPI_Init+0x7a>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001df6:	d002      	beq.n	8001dfe <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10b      	bne.n	8001e1e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001e0e:	d903      	bls.n	8001e18 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2202      	movs	r2, #2
 8001e14:	631a      	str	r2, [r3, #48]	; 0x30
 8001e16:	e002      	b.n	8001e1e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685a      	ldr	r2, [r3, #4]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	431a      	orrs	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	ea42 0103 	orr.w	r1, r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	430a      	orrs	r2, r1
 8001e56:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	0c1b      	lsrs	r3, r3, #16
 8001e5e:	f003 0204 	and.w	r2, r3, #4
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	ea42 0103 	orr.w	r1, r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
 8001ea4:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61bb      	str	r3, [r7, #24]
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d101      	bne.n	8001ec0 <HAL_SPI_TransmitReceive_DMA+0x28>
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	e14d      	b.n	800215c <HAL_SPI_TransmitReceive_DMA+0x2c4>
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmp  = hspi->State;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	61bb      	str	r3, [r7, #24]
  tmp1 = hspi->Init.Mode;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	617b      	str	r3, [r7, #20]
  if (!((tmp == HAL_SPI_STATE_READY) ||
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d00d      	beq.n	8001efa <HAL_SPI_TransmitReceive_DMA+0x62>
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ee4:	d106      	bne.n	8001ef4 <HAL_SPI_TransmitReceive_DMA+0x5c>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d102      	bne.n	8001ef4 <HAL_SPI_TransmitReceive_DMA+0x5c>
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d002      	beq.n	8001efa <HAL_SPI_TransmitReceive_DMA+0x62>
  {
    errorcode = HAL_BUSY;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001ef8:	e12b      	b.n	8002152 <HAL_SPI_TransmitReceive_DMA+0x2ba>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d005      	beq.n	8001f0c <HAL_SPI_TransmitReceive_DMA+0x74>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d002      	beq.n	8001f0c <HAL_SPI_TransmitReceive_DMA+0x74>
 8001f06:	887b      	ldrh	r3, [r7, #2]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d102      	bne.n	8001f12 <HAL_SPI_TransmitReceive_DMA+0x7a>
  {
    errorcode = HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f10:	e11f      	b.n	8002152 <HAL_SPI_TransmitReceive_DMA+0x2ba>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	d003      	beq.n	8001f26 <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2205      	movs	r2, #5
 8001f22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	887a      	ldrh	r2, [r7, #2]
 8001f36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	887a      	ldrh	r2, [r7, #2]
 8001f3c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	887a      	ldrh	r2, [r7, #2]
 8001f48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	887a      	ldrh	r2, [r7, #2]
 8001f50:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	651a      	str	r2, [r3, #80]	; 0x50
    goto error;
  }
#endif

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8001f6e:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001f78:	d908      	bls.n	8001f8c <HAL_SPI_TransmitReceive_DMA+0xf4>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	e06f      	b.n	800206c <HAL_SPI_TransmitReceive_DMA+0x1d4>
  }
  else
  {
    /* Set fiforxthresold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001f9a:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fa6:	d126      	bne.n	8001ff6 <HAL_SPI_TransmitReceive_DMA+0x15e>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10f      	bne.n	8001fd4 <HAL_SPI_TransmitReceive_DMA+0x13c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001fc2:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	085b      	lsrs	r3, r3, #1
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001fd2:	e010      	b.n	8001ff6 <HAL_SPI_TransmitReceive_DMA+0x15e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fe2:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	085b      	lsrs	r3, r3, #1
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	3301      	adds	r3, #1
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002000:	d134      	bne.n	800206c <HAL_SPI_TransmitReceive_DMA+0x1d4>
    {
      /* Set fiforxthresold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002010:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002018:	b29b      	uxth	r3, r3
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d111      	bne.n	8002046 <HAL_SPI_TransmitReceive_DMA+0x1ae>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002030:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002038:	b29b      	uxth	r3, r3
 800203a:	085b      	lsrs	r3, r3, #1
 800203c:	b29a      	uxth	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002044:	e012      	b.n	800206c <HAL_SPI_TransmitReceive_DMA+0x1d4>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002054:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800205c:	b29b      	uxth	r3, r3
 800205e:	085b      	lsrs	r3, r3, #1
 8002060:	b29b      	uxth	r3, r3
 8002062:	3301      	adds	r3, #1
 8002064:	b29a      	uxth	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b04      	cmp	r3, #4
 8002076:	d108      	bne.n	800208a <HAL_SPI_TransmitReceive_DMA+0x1f2>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207c:	4a39      	ldr	r2, [pc, #228]	; (8002164 <HAL_SPI_TransmitReceive_DMA+0x2cc>)
 800207e:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002084:	4a38      	ldr	r2, [pc, #224]	; (8002168 <HAL_SPI_TransmitReceive_DMA+0x2d0>)
 8002086:	629a      	str	r2, [r3, #40]	; 0x28
 8002088:	e007      	b.n	800209a <HAL_SPI_TransmitReceive_DMA+0x202>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208e:	4a37      	ldr	r2, [pc, #220]	; (800216c <HAL_SPI_TransmitReceive_DMA+0x2d4>)
 8002090:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002096:	4a36      	ldr	r2, [pc, #216]	; (8002170 <HAL_SPI_TransmitReceive_DMA+0x2d8>)
 8002098:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209e:	4a35      	ldr	r2, [pc, #212]	; (8002174 <HAL_SPI_TransmitReceive_DMA+0x2dc>)
 80020a0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a6:	2200      	movs	r2, #0
 80020a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	330c      	adds	r3, #12
 80020b4:	4619      	mov	r1, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	461a      	mov	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	f7fe fa5c 	bl	8000580 <HAL_DMA_Start_IT>

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f042 0201 	orr.w	r2, r2, #1
 80020d6:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020dc:	2200      	movs	r2, #0
 80020de:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e4:	2200      	movs	r2, #0
 80020e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ec:	2200      	movs	r2, #0
 80020ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f4:	2200      	movs	r2, #0
 80020f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel  */
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002100:	4619      	mov	r1, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	330c      	adds	r3, #12
 8002108:	461a      	mov	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800210e:	b29b      	uxth	r3, r3
 8002110:	f7fe fa36 	bl	8000580 <HAL_DMA_Start_IT>

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800211e:	2b40      	cmp	r3, #64	; 0x40
 8002120:	d007      	beq.n	8002132 <HAL_SPI_TransmitReceive_DMA+0x29a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002130:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f042 0220 	orr.w	r2, r2, #32
 8002140:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f042 0202 	orr.w	r2, r2, #2
 8002150:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800215a:	7ffb      	ldrb	r3, [r7, #31]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3720      	adds	r7, #32
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	080022f9 	.word	0x080022f9
 8002168:	080021dd 	.word	0x080021dd
 800216c:	08002315 	.word	0x08002315
 8002170:	08002265 	.word	0x08002265
 8002174:	08002331 	.word	0x08002331

08002178 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e8:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = 0U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	60bb      	str	r3, [r7, #8]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021ee:	f7fe f845 	bl	800027c <HAL_GetTick>
 80021f2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0320 	and.w	r3, r3, #32
 80021fe:	2b20      	cmp	r3, #32
 8002200:	d02a      	beq.n	8002258 <SPI_DMAReceiveCplt+0x7c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 0220 	bic.w	r2, r2, #32
 8002210:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0203 	bic.w	r2, r2, #3
 8002220:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	2164      	movs	r1, #100	; 0x64
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f000 f97a 	bl	8002520 <SPI_EndRxTransaction>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d002      	beq.n	8002238 <SPI_DMAReceiveCplt+0x5c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2220      	movs	r2, #32
 8002236:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800224c:	2b00      	cmp	r3, #0
 800224e:	d003      	beq.n	8002258 <SPI_DMAReceiveCplt+0x7c>
    {
      HAL_SPI_ErrorCallback(hspi);
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f7ff ffb9 	bl	80021c8 <HAL_SPI_ErrorCallback>
      return;
 8002256:	e002      	b.n	800225e <SPI_DMAReceiveCplt+0x82>
    }
  }
  HAL_SPI_RxCpltCallback(hspi);
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f7ff ff8d 	bl	8002178 <HAL_SPI_RxCpltCallback>
}
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002270:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = 0U;
 8002272:	2300      	movs	r3, #0
 8002274:	60bb      	str	r3, [r7, #8]
#if (USE_SPI_CRC != 0U)
  __IO int16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002276:	f7fe f801 	bl	800027c <HAL_GetTick>
 800227a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0320 	and.w	r3, r3, #32
 8002286:	2b20      	cmp	r3, #32
 8002288:	d030      	beq.n	80022ec <SPI_DMATransmitReceiveCplt+0x88>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 0220 	bic.w	r2, r2, #32
 8002298:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	2164      	movs	r1, #100	; 0x64
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f000 f996 	bl	80025d0 <SPI_EndRxTxTransaction>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d005      	beq.n	80022b6 <SPI_DMATransmitReceiveCplt+0x52>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ae:	f043 0220 	orr.w	r2, r3, #32
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 0203 	bic.w	r2, r2, #3
 80022c4:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d003      	beq.n	80022ec <SPI_DMATransmitReceiveCplt+0x88>
    {
      HAL_SPI_ErrorCallback(hspi);
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f7ff ff6f 	bl	80021c8 <HAL_SPI_ErrorCallback>
      return;
 80022ea:	e002      	b.n	80022f2 <SPI_DMATransmitReceiveCplt+0x8e>
    }
  }
  HAL_SPI_TxRxCpltCallback(hspi);
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f7ff ff4d 	bl	800218c <HAL_SPI_TxRxCpltCallback>
}
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002304:	60fb      	str	r3, [r7, #12]

  HAL_SPI_RxHalfCpltCallback(hspi);
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f7ff ff4a 	bl	80021a0 <HAL_SPI_RxHalfCpltCallback>
}
 800230c:	bf00      	nop
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002320:	60fb      	str	r3, [r7, #12]

  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f7ff ff46 	bl	80021b4 <HAL_SPI_TxRxHalfCpltCallback>
}
 8002328:	bf00      	nop
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 0203 	bic.w	r2, r2, #3
 800234c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002352:	f043 0210 	orr.w	r2, r3, #16
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  HAL_SPI_ErrorCallback(hspi);
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f7ff ff30 	bl	80021c8 <HAL_SPI_ErrorCallback>
}
 8002368:	bf00      	nop
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
 800237c:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800237e:	e04c      	b.n	800241a <SPI_WaitFlagStateUntilTimeout+0xaa>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002386:	d048      	beq.n	800241a <SPI_WaitFlagStateUntilTimeout+0xaa>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d007      	beq.n	800239e <SPI_WaitFlagStateUntilTimeout+0x2e>
 800238e:	f7fd ff75 	bl	800027c <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	429a      	cmp	r2, r3
 800239c:	d83d      	bhi.n	800241a <SPI_WaitFlagStateUntilTimeout+0xaa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80023ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023b6:	d111      	bne.n	80023dc <SPI_WaitFlagStateUntilTimeout+0x6c>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023c0:	d004      	beq.n	80023cc <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ca:	d107      	bne.n	80023dc <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023e4:	d10f      	bne.n	8002406 <SPI_WaitFlagStateUntilTimeout+0x96>
        {
          SPI_RESET_CRC(hspi);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002404:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e00e      	b.n	8002438 <SPI_WaitFlagStateUntilTimeout+0xc8>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	4013      	ands	r3, r2
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	429a      	cmp	r2, r3
 8002428:	d101      	bne.n	800242e <SPI_WaitFlagStateUntilTimeout+0xbe>
 800242a:	2201      	movs	r2, #1
 800242c:	e000      	b.n	8002430 <SPI_WaitFlagStateUntilTimeout+0xc0>
 800242e:	2200      	movs	r2, #0
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	429a      	cmp	r2, r3
 8002434:	d1a4      	bne.n	8002380 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
 800244c:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 800244e:	e05a      	b.n	8002506 <SPI_WaitFifoStateUntilTimeout+0xc6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002456:	d109      	bne.n	800246c <SPI_WaitFifoStateUntilTimeout+0x2c>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d106      	bne.n	800246c <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	330c      	adds	r3, #12
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	b2db      	uxtb	r3, r3
 8002468:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800246a:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002472:	d048      	beq.n	8002506 <SPI_WaitFifoStateUntilTimeout+0xc6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d007      	beq.n	800248a <SPI_WaitFifoStateUntilTimeout+0x4a>
 800247a:	f7fd feff 	bl	800027c <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	6a3b      	ldr	r3, [r7, #32]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	429a      	cmp	r2, r3
 8002488:	d83d      	bhi.n	8002506 <SPI_WaitFifoStateUntilTimeout+0xc6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002498:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024a2:	d111      	bne.n	80024c8 <SPI_WaitFifoStateUntilTimeout+0x88>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024ac:	d004      	beq.n	80024b8 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024b6:	d107      	bne.n	80024c8 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024d0:	d10f      	bne.n	80024f2 <SPI_WaitFifoStateUntilTimeout+0xb2>
        {
          SPI_RESET_CRC(hspi);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e008      	b.n	8002518 <SPI_WaitFifoStateUntilTimeout+0xd8>
  while ((hspi->Instance->SR & Fifo) != State)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	4013      	ands	r3, r2
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	429a      	cmp	r2, r3
 8002514:	d19c      	bne.n	8002450 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3718      	adds	r7, #24
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af02      	add	r7, sp, #8
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002534:	d111      	bne.n	800255a <SPI_EndRxTransaction+0x3a>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800253e:	d004      	beq.n	800254a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002548:	d107      	bne.n	800255a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002558:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	2200      	movs	r2, #0
 8002562:	2180      	movs	r1, #128	; 0x80
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f7ff ff03 	bl	8002370 <SPI_WaitFlagStateUntilTimeout>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d007      	beq.n	8002580 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002574:	f043 0220 	orr.w	r2, r3, #32
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e023      	b.n	80025c8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002588:	d11d      	bne.n	80025c6 <SPI_EndRxTransaction+0xa6>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002592:	d004      	beq.n	800259e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800259c:	d113      	bne.n	80025c6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f7ff ff48 	bl	8002440 <SPI_WaitFifoStateUntilTimeout>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d007      	beq.n	80025c6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ba:	f043 0220 	orr.w	r2, r3, #32
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e000      	b.n	80025c8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af02      	add	r7, sp, #8
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f7ff ff29 	bl	8002440 <SPI_WaitFifoStateUntilTimeout>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d007      	beq.n	8002604 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025f8:	f043 0220 	orr.w	r2, r3, #32
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e027      	b.n	8002654 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	2200      	movs	r2, #0
 800260c:	2180      	movs	r1, #128	; 0x80
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f7ff feae 	bl	8002370 <SPI_WaitFlagStateUntilTimeout>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d007      	beq.n	800262a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800261e:	f043 0220 	orr.w	r2, r3, #32
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e014      	b.n	8002654 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	2200      	movs	r2, #0
 8002632:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f7ff ff02 	bl	8002440 <SPI_WaitFifoStateUntilTimeout>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d007      	beq.n	8002652 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002646:	f043 0220 	orr.w	r2, r3, #32
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e000      	b.n	8002654 <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e043      	b.n	80026f6 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d106      	bne.n	8002688 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 fd02 	bl	800308c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2224      	movs	r2, #36	; 0x24
 800268c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0201 	bic.w	r2, r2, #1
 800269e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f82d 	bl	8002700 <UART_SetConfig>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d101      	bne.n	80026b0 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e022      	b.n	80026f6 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d002      	beq.n	80026be <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 f987 	bl	80029cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026cc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026dc:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f042 0201 	orr.w	r2, r2, #1
 80026ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 fa0e 	bl	8002b10 <UART_CheckIdleState>
 80026f4:	4603      	mov	r3, r0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002708:	2300      	movs	r3, #0
 800270a:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800270c:	2310      	movs	r3, #16
 800270e:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8002710:	2300      	movs	r3, #0
 8002712:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8002714:	2300      	movs	r3, #0
 8002716:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002718:	2300      	movs	r3, #0
 800271a:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	431a      	orrs	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	4313      	orrs	r3, r2
 8002732:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	4b9f      	ldr	r3, [pc, #636]	; (80029b8 <UART_SetConfig+0x2b8>)
 800273c:	4013      	ands	r3, r2
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	6812      	ldr	r2, [r2, #0]
 8002742:	68f9      	ldr	r1, [r7, #12]
 8002744:	430b      	orrs	r3, r1
 8002746:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68da      	ldr	r2, [r3, #12]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	699a      	ldr	r2, [r3, #24]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	4313      	orrs	r3, r2
 8002768:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	430a      	orrs	r2, r1
 800277c:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a8e      	ldr	r2, [pc, #568]	; (80029bc <UART_SetConfig+0x2bc>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d121      	bne.n	80027cc <UART_SetConfig+0xcc>
 8002788:	4b8d      	ldr	r3, [pc, #564]	; (80029c0 <UART_SetConfig+0x2c0>)
 800278a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278c:	f003 0303 	and.w	r3, r3, #3
 8002790:	2b03      	cmp	r3, #3
 8002792:	d817      	bhi.n	80027c4 <UART_SetConfig+0xc4>
 8002794:	a201      	add	r2, pc, #4	; (adr r2, 800279c <UART_SetConfig+0x9c>)
 8002796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800279a:	bf00      	nop
 800279c:	080027ad 	.word	0x080027ad
 80027a0:	080027b9 	.word	0x080027b9
 80027a4:	080027bf 	.word	0x080027bf
 80027a8:	080027b3 	.word	0x080027b3
 80027ac:	2300      	movs	r3, #0
 80027ae:	75fb      	strb	r3, [r7, #23]
 80027b0:	e01e      	b.n	80027f0 <UART_SetConfig+0xf0>
 80027b2:	2302      	movs	r3, #2
 80027b4:	75fb      	strb	r3, [r7, #23]
 80027b6:	e01b      	b.n	80027f0 <UART_SetConfig+0xf0>
 80027b8:	2304      	movs	r3, #4
 80027ba:	75fb      	strb	r3, [r7, #23]
 80027bc:	e018      	b.n	80027f0 <UART_SetConfig+0xf0>
 80027be:	2308      	movs	r3, #8
 80027c0:	75fb      	strb	r3, [r7, #23]
 80027c2:	e015      	b.n	80027f0 <UART_SetConfig+0xf0>
 80027c4:	2310      	movs	r3, #16
 80027c6:	75fb      	strb	r3, [r7, #23]
 80027c8:	bf00      	nop
 80027ca:	e011      	b.n	80027f0 <UART_SetConfig+0xf0>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a7c      	ldr	r2, [pc, #496]	; (80029c4 <UART_SetConfig+0x2c4>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d102      	bne.n	80027dc <UART_SetConfig+0xdc>
 80027d6:	2300      	movs	r3, #0
 80027d8:	75fb      	strb	r3, [r7, #23]
 80027da:	e009      	b.n	80027f0 <UART_SetConfig+0xf0>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a79      	ldr	r2, [pc, #484]	; (80029c8 <UART_SetConfig+0x2c8>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d102      	bne.n	80027ec <UART_SetConfig+0xec>
 80027e6:	2300      	movs	r3, #0
 80027e8:	75fb      	strb	r3, [r7, #23]
 80027ea:	e001      	b.n	80027f0 <UART_SetConfig+0xf0>
 80027ec:	2310      	movs	r3, #16
 80027ee:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69db      	ldr	r3, [r3, #28]
 80027f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027f8:	d16f      	bne.n	80028da <UART_SetConfig+0x1da>
  {
    switch (clocksource)
 80027fa:	7dfb      	ldrb	r3, [r7, #23]
 80027fc:	2b08      	cmp	r3, #8
 80027fe:	d857      	bhi.n	80028b0 <UART_SetConfig+0x1b0>
 8002800:	a201      	add	r2, pc, #4	; (adr r2, 8002808 <UART_SetConfig+0x108>)
 8002802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002806:	bf00      	nop
 8002808:	0800282d 	.word	0x0800282d
 800280c:	08002849 	.word	0x08002849
 8002810:	08002865 	.word	0x08002865
 8002814:	080028b1 	.word	0x080028b1
 8002818:	0800287f 	.word	0x0800287f
 800281c:	080028b1 	.word	0x080028b1
 8002820:	080028b1 	.word	0x080028b1
 8002824:	080028b1 	.word	0x080028b1
 8002828:	0800289b 	.word	0x0800289b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800282c:	f7ff fa66 	bl	8001cfc <HAL_RCC_GetPCLK1Freq>
 8002830:	4603      	mov	r3, r0
 8002832:	005a      	lsls	r2, r3, #1
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	085b      	lsrs	r3, r3, #1
 800283a:	441a      	add	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	fbb2 f3f3 	udiv	r3, r2, r3
 8002844:	82bb      	strh	r3, [r7, #20]
        break;
 8002846:	e036      	b.n	80028b6 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002848:	f7ff fa7a 	bl	8001d40 <HAL_RCC_GetPCLK2Freq>
 800284c:	4603      	mov	r3, r0
 800284e:	005a      	lsls	r2, r3, #1
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	085b      	lsrs	r3, r3, #1
 8002856:	441a      	add	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002860:	82bb      	strh	r3, [r7, #20]
        break;
 8002862:	e028      	b.n	80028b6 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	085b      	lsrs	r3, r3, #1
 800286a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800286e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6852      	ldr	r2, [r2, #4]
 8002876:	fbb3 f3f2 	udiv	r3, r3, r2
 800287a:	82bb      	strh	r3, [r7, #20]
        break;
 800287c:	e01b      	b.n	80028b6 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800287e:	f7ff f9c7 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 8002882:	4603      	mov	r3, r0
 8002884:	005a      	lsls	r2, r3, #1
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	085b      	lsrs	r3, r3, #1
 800288c:	441a      	add	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	fbb2 f3f3 	udiv	r3, r2, r3
 8002896:	82bb      	strh	r3, [r7, #20]
        break;
 8002898:	e00d      	b.n	80028b6 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	085b      	lsrs	r3, r3, #1
 80028a0:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ac:	82bb      	strh	r3, [r7, #20]
        break;
 80028ae:	e002      	b.n	80028b6 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	74fb      	strb	r3, [r7, #19]
        break;
 80028b4:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 80028b6:	8abb      	ldrh	r3, [r7, #20]
 80028b8:	f023 030f 	bic.w	r3, r3, #15
 80028bc:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80028be:	8abb      	ldrh	r3, [r7, #20]
 80028c0:	105b      	asrs	r3, r3, #1
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	897b      	ldrh	r3, [r7, #10]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	897a      	ldrh	r2, [r7, #10]
 80028d6:	60da      	str	r2, [r3, #12]
 80028d8:	e069      	b.n	80029ae <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 80028da:	7dfb      	ldrb	r3, [r7, #23]
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d863      	bhi.n	80029a8 <UART_SetConfig+0x2a8>
 80028e0:	a201      	add	r2, pc, #4	; (adr r2, 80028e8 <UART_SetConfig+0x1e8>)
 80028e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e6:	bf00      	nop
 80028e8:	0800290d 	.word	0x0800290d
 80028ec:	0800292d 	.word	0x0800292d
 80028f0:	0800294d 	.word	0x0800294d
 80028f4:	080029a9 	.word	0x080029a9
 80028f8:	0800296d 	.word	0x0800296d
 80028fc:	080029a9 	.word	0x080029a9
 8002900:	080029a9 	.word	0x080029a9
 8002904:	080029a9 	.word	0x080029a9
 8002908:	0800298d 	.word	0x0800298d
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800290c:	f7ff f9f6 	bl	8001cfc <HAL_RCC_GetPCLK1Freq>
 8002910:	4602      	mov	r2, r0
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	085b      	lsrs	r3, r3, #1
 8002918:	441a      	add	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002922:	b29a      	uxth	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	60da      	str	r2, [r3, #12]
        break;
 800292a:	e040      	b.n	80029ae <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800292c:	f7ff fa08 	bl	8001d40 <HAL_RCC_GetPCLK2Freq>
 8002930:	4602      	mov	r2, r0
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	085b      	lsrs	r3, r3, #1
 8002938:	441a      	add	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002942:	b29a      	uxth	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	60da      	str	r2, [r3, #12]
        break;
 800294a:	e030      	b.n	80029ae <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	085b      	lsrs	r3, r3, #1
 8002952:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002956:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	6852      	ldr	r2, [r2, #4]
 800295e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002962:	b29a      	uxth	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	60da      	str	r2, [r3, #12]
        break;
 800296a:	e020      	b.n	80029ae <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800296c:	f7ff f950 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 8002970:	4602      	mov	r2, r0
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	085b      	lsrs	r3, r3, #1
 8002978:	441a      	add	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002982:	b29a      	uxth	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	60da      	str	r2, [r3, #12]
        break;
 800298a:	e010      	b.n	80029ae <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	085b      	lsrs	r3, r3, #1
 8002992:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	fbb2 f3f3 	udiv	r3, r2, r3
 800299e:	b29a      	uxth	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	60da      	str	r2, [r3, #12]
        break;
 80029a6:	e002      	b.n	80029ae <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	74fb      	strb	r3, [r7, #19]
        break;
 80029ac:	bf00      	nop
    }
  }

  return ret;
 80029ae:	7cfb      	ldrb	r3, [r7, #19]

}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	efff69f3 	.word	0xefff69f3
 80029bc:	40013800 	.word	0x40013800
 80029c0:	40021000 	.word	0x40021000
 80029c4:	40004400 	.word	0x40004400
 80029c8:	40004800 	.word	0x40004800

080029cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00a      	beq.n	80029f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00a      	beq.n	8002a18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00a      	beq.n	8002a3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00a      	beq.n	8002a5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	f003 0310 	and.w	r3, r3, #16
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00a      	beq.n	8002a7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a82:	f003 0320 	and.w	r3, r3, #32
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00a      	beq.n	8002aa0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d01a      	beq.n	8002ae2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002aca:	d10a      	bne.n	8002ae2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00a      	beq.n	8002b04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	605a      	str	r2, [r3, #4]
  }
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af02      	add	r7, sp, #8
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002b22:	f7fd fbab 	bl	800027c <HAL_GetTick>
 8002b26:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0308 	and.w	r3, r3, #8
 8002b32:	2b08      	cmp	r3, #8
 8002b34:	d10e      	bne.n	8002b54 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b36:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 f82c 	bl	8002ba2 <UART_WaitOnFlagUntilTimeout>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e022      	b.n	8002b9a <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0304 	and.w	r3, r3, #4
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d10e      	bne.n	8002b80 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b62:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 f816 	bl	8002ba2 <UART_WaitOnFlagUntilTimeout>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e00c      	b.n	8002b9a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2220      	movs	r2, #32
 8002b84:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b084      	sub	sp, #16
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	60f8      	str	r0, [r7, #12]
 8002baa:	60b9      	str	r1, [r7, #8]
 8002bac:	603b      	str	r3, [r7, #0]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bb2:	e02c      	b.n	8002c0e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bba:	d028      	beq.n	8002c0e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d007      	beq.n	8002bd2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002bc2:	f7fd fb5b 	bl	800027c <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d21d      	bcs.n	8002c0e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002be0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0201 	bic.w	r2, r2, #1
 8002bf0:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e00f      	b.n	8002c2e <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	69da      	ldr	r2, [r3, #28]
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	4013      	ands	r3, r2
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	bf0c      	ite	eq
 8002c1e:	2301      	moveq	r3, #1
 8002c20:	2300      	movne	r3, #0
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	461a      	mov	r2, r3
 8002c26:	79fb      	ldrb	r3, [r7, #7]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d0c3      	beq.n	8002bb4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
	...

08002c38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b08a      	sub	sp, #40	; 0x28
 8002c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t aTxBuffer1[]={'A','B','C','D','E','F'};
 8002c3e:	4a1a      	ldr	r2, [pc, #104]	; (8002ca8 <main+0x70>)
 8002c40:	f107 0320 	add.w	r3, r7, #32
 8002c44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c48:	6018      	str	r0, [r3, #0]
 8002c4a:	3304      	adds	r3, #4
 8002c4c:	8019      	strh	r1, [r3, #0]
	uint8_t aTxBuffer2[11]={0};
 8002c4e:	f107 0314 	add.w	r3, r7, #20
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	605a      	str	r2, [r3, #4]
 8002c58:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t aRxBuffer1[6]={0};
 8002c5c:	f107 030c 	add.w	r3, r7, #12
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	809a      	strh	r2, [r3, #4]
	uint8_t aRxBuffer2[11]={0};
 8002c66:	463b      	mov	r3, r7
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	605a      	str	r2, [r3, #4]
 8002c6e:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t flag = 0;
 8002c72:	2300      	movs	r3, #0
 8002c74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c78:	f7fd faa6 	bl	80001c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c7c:	f000 f818 	bl	8002cb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c80:	f000 f8e6 	bl	8002e50 <MX_GPIO_Init>
  MX_DMA_Init();
 8002c84:	f000 f8be 	bl	8002e04 <MX_DMA_Init>
  MX_SPI1_Init();
 8002c88:	f000 f854 	bl	8002d34 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002c8c:	f000 f88a 	bl	8002da4 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_SPI_TransmitReceive_DMA(&hspi1, aTxBuffer1, aRxBuffer1, 6);
 8002c90:	f107 020c 	add.w	r2, r7, #12
 8002c94:	f107 0120 	add.w	r1, r7, #32
 8002c98:	2306      	movs	r3, #6
 8002c9a:	4804      	ldr	r0, [pc, #16]	; (8002cac <main+0x74>)
 8002c9c:	f7ff f8fc 	bl	8001e98 <HAL_SPI_TransmitReceive_DMA>
	  //何かの処理
	 // for(int i=0; i < 6; i++){
	//	  HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)&aTxBuffer1[i],(uint8_t*)&aRxBuffer1[i],1,0xFFFFFFFF);
	//	  HAL_Delay(1);
	  //}
	  HAL_Delay(1);
 8002ca0:	2001      	movs	r0, #1
 8002ca2:	f7fd faf7 	bl	8000294 <HAL_Delay>
	  HAL_SPI_TransmitReceive_DMA(&hspi1, aTxBuffer1, aRxBuffer1, 6);
 8002ca6:	e7f3      	b.n	8002c90 <main+0x58>
 8002ca8:	080032f0 	.word	0x080032f0
 8002cac:	2000002c 	.word	0x2000002c

08002cb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b090      	sub	sp, #64	; 0x40
 8002cb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cb6:	f107 0318 	add.w	r3, r7, #24
 8002cba:	2228      	movs	r2, #40	; 0x28
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 fb02 	bl	80032c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cc4:	1d3b      	adds	r3, r7, #4
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	605a      	str	r2, [r3, #4]
 8002ccc:	609a      	str	r2, [r3, #8]
 8002cce:	60da      	str	r2, [r3, #12]
 8002cd0:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002cda:	2310      	movs	r3, #16
 8002cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002ce6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002cea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cec:	f107 0318 	add.w	r3, r7, #24
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7fd ff23 	bl	8000b3c <HAL_RCC_OscConfig>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8002cfc:	f000 f8f2 	bl	8002ee4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d00:	230f      	movs	r3, #15
 8002d02:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d04:	2302      	movs	r3, #2
 8002d06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002d0c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8002d10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002d16:	1d3b      	adds	r3, r7, #4
 8002d18:	2101      	movs	r1, #1
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fe fdfc 	bl	8001918 <HAL_RCC_ClockConfig>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8002d26:	f000 f8dd 	bl	8002ee4 <Error_Handler>
  }
}
 8002d2a:	bf00      	nop
 8002d2c:	3740      	adds	r7, #64	; 0x40
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
	...

08002d34 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002d38:	4b18      	ldr	r3, [pc, #96]	; (8002d9c <MX_SPI1_Init+0x68>)
 8002d3a:	4a19      	ldr	r2, [pc, #100]	; (8002da0 <MX_SPI1_Init+0x6c>)
 8002d3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8002d3e:	4b17      	ldr	r3, [pc, #92]	; (8002d9c <MX_SPI1_Init+0x68>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d44:	4b15      	ldr	r3, [pc, #84]	; (8002d9c <MX_SPI1_Init+0x68>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d4a:	4b14      	ldr	r3, [pc, #80]	; (8002d9c <MX_SPI1_Init+0x68>)
 8002d4c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002d50:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d52:	4b12      	ldr	r3, [pc, #72]	; (8002d9c <MX_SPI1_Init+0x68>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002d58:	4b10      	ldr	r3, [pc, #64]	; (8002d9c <MX_SPI1_Init+0x68>)
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8002d5e:	4b0f      	ldr	r3, [pc, #60]	; (8002d9c <MX_SPI1_Init+0x68>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d64:	4b0d      	ldr	r3, [pc, #52]	; (8002d9c <MX_SPI1_Init+0x68>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d6a:	4b0c      	ldr	r3, [pc, #48]	; (8002d9c <MX_SPI1_Init+0x68>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d70:	4b0a      	ldr	r3, [pc, #40]	; (8002d9c <MX_SPI1_Init+0x68>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002d76:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <MX_SPI1_Init+0x68>)
 8002d78:	2207      	movs	r2, #7
 8002d7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002d7c:	4b07      	ldr	r3, [pc, #28]	; (8002d9c <MX_SPI1_Init+0x68>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002d82:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <MX_SPI1_Init+0x68>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d88:	4804      	ldr	r0, [pc, #16]	; (8002d9c <MX_SPI1_Init+0x68>)
 8002d8a:	f7fe fffb 	bl	8001d84 <HAL_SPI_Init>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8002d94:	f000 f8a6 	bl	8002ee4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d98:	bf00      	nop
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	2000002c 	.word	0x2000002c
 8002da0:	40013000 	.word	0x40013000

08002da4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002da8:	4b14      	ldr	r3, [pc, #80]	; (8002dfc <MX_USART2_UART_Init+0x58>)
 8002daa:	4a15      	ldr	r2, [pc, #84]	; (8002e00 <MX_USART2_UART_Init+0x5c>)
 8002dac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8002dae:	4b13      	ldr	r3, [pc, #76]	; (8002dfc <MX_USART2_UART_Init+0x58>)
 8002db0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002db4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002db6:	4b11      	ldr	r3, [pc, #68]	; (8002dfc <MX_USART2_UART_Init+0x58>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002dbc:	4b0f      	ldr	r3, [pc, #60]	; (8002dfc <MX_USART2_UART_Init+0x58>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002dc2:	4b0e      	ldr	r3, [pc, #56]	; (8002dfc <MX_USART2_UART_Init+0x58>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002dc8:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <MX_USART2_UART_Init+0x58>)
 8002dca:	220c      	movs	r2, #12
 8002dcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dce:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <MX_USART2_UART_Init+0x58>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dd4:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <MX_USART2_UART_Init+0x58>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002dda:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <MX_USART2_UART_Init+0x58>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002de0:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <MX_USART2_UART_Init+0x58>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002de6:	4805      	ldr	r0, [pc, #20]	; (8002dfc <MX_USART2_UART_Init+0x58>)
 8002de8:	f7ff fc38 	bl	800265c <HAL_UART_Init>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002df2:	f000 f877 	bl	8002ee4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002df6:	bf00      	nop
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	20000090 	.word	0x20000090
 8002e00:	40004400 	.word	0x40004400

08002e04 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e0a:	4b10      	ldr	r3, [pc, #64]	; (8002e4c <MX_DMA_Init+0x48>)
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	4a0f      	ldr	r2, [pc, #60]	; (8002e4c <MX_DMA_Init+0x48>)
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	6153      	str	r3, [r2, #20]
 8002e16:	4b0d      	ldr	r3, [pc, #52]	; (8002e4c <MX_DMA_Init+0x48>)
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	607b      	str	r3, [r7, #4]
 8002e20:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002e22:	2200      	movs	r2, #0
 8002e24:	2100      	movs	r1, #0
 8002e26:	200c      	movs	r0, #12
 8002e28:	f7fd fb2d 	bl	8000486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002e2c:	200c      	movs	r0, #12
 8002e2e:	f7fd fb46 	bl	80004be <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002e32:	2200      	movs	r2, #0
 8002e34:	2100      	movs	r1, #0
 8002e36:	200d      	movs	r0, #13
 8002e38:	f7fd fb25 	bl	8000486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002e3c:	200d      	movs	r0, #13
 8002e3e:	f7fd fb3e 	bl	80004be <HAL_NVIC_EnableIRQ>

}
 8002e42:	bf00      	nop
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40021000 	.word	0x40021000

08002e50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b088      	sub	sp, #32
 8002e54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e56:	f107 030c 	add.w	r3, r7, #12
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	605a      	str	r2, [r3, #4]
 8002e60:	609a      	str	r2, [r3, #8]
 8002e62:	60da      	str	r2, [r3, #12]
 8002e64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e66:	4b1d      	ldr	r3, [pc, #116]	; (8002edc <MX_GPIO_Init+0x8c>)
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	4a1c      	ldr	r2, [pc, #112]	; (8002edc <MX_GPIO_Init+0x8c>)
 8002e6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e70:	6153      	str	r3, [r2, #20]
 8002e72:	4b1a      	ldr	r3, [pc, #104]	; (8002edc <MX_GPIO_Init+0x8c>)
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e7a:	60bb      	str	r3, [r7, #8]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e7e:	4b17      	ldr	r3, [pc, #92]	; (8002edc <MX_GPIO_Init+0x8c>)
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	4a16      	ldr	r2, [pc, #88]	; (8002edc <MX_GPIO_Init+0x8c>)
 8002e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e88:	6153      	str	r3, [r2, #20]
 8002e8a:	4b14      	ldr	r3, [pc, #80]	; (8002edc <MX_GPIO_Init+0x8c>)
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e92:	607b      	str	r3, [r7, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e96:	4b11      	ldr	r3, [pc, #68]	; (8002edc <MX_GPIO_Init+0x8c>)
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	4a10      	ldr	r2, [pc, #64]	; (8002edc <MX_GPIO_Init+0x8c>)
 8002e9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ea0:	6153      	str	r3, [r2, #20]
 8002ea2:	4b0e      	ldr	r3, [pc, #56]	; (8002edc <MX_GPIO_Init+0x8c>)
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eaa:	603b      	str	r3, [r7, #0]
 8002eac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002eae:	2200      	movs	r2, #0
 8002eb0:	2108      	movs	r1, #8
 8002eb2:	480b      	ldr	r0, [pc, #44]	; (8002ee0 <MX_GPIO_Init+0x90>)
 8002eb4:	f7fd fe2a 	bl	8000b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002eb8:	2308      	movs	r3, #8
 8002eba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ec8:	f107 030c 	add.w	r3, r7, #12
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4804      	ldr	r0, [pc, #16]	; (8002ee0 <MX_GPIO_Init+0x90>)
 8002ed0:	f7fd fca6 	bl	8000820 <HAL_GPIO_Init>

}
 8002ed4:	bf00      	nop
 8002ed6:	3720      	adds	r7, #32
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	48000400 	.word	0x48000400

08002ee4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002ee8:	bf00      	nop
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
	...

08002ef4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002efa:	4b0f      	ldr	r3, [pc, #60]	; (8002f38 <HAL_MspInit+0x44>)
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	4a0e      	ldr	r2, [pc, #56]	; (8002f38 <HAL_MspInit+0x44>)
 8002f00:	f043 0301 	orr.w	r3, r3, #1
 8002f04:	6193      	str	r3, [r2, #24]
 8002f06:	4b0c      	ldr	r3, [pc, #48]	; (8002f38 <HAL_MspInit+0x44>)
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	607b      	str	r3, [r7, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f12:	4b09      	ldr	r3, [pc, #36]	; (8002f38 <HAL_MspInit+0x44>)
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	4a08      	ldr	r2, [pc, #32]	; (8002f38 <HAL_MspInit+0x44>)
 8002f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f1c:	61d3      	str	r3, [r2, #28]
 8002f1e:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <HAL_MspInit+0x44>)
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f26:	603b      	str	r3, [r7, #0]
 8002f28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	40021000 	.word	0x40021000

08002f3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b08a      	sub	sp, #40	; 0x28
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f44:	f107 0314 	add.w	r3, r7, #20
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	605a      	str	r2, [r3, #4]
 8002f4e:	609a      	str	r2, [r3, #8]
 8002f50:	60da      	str	r2, [r3, #12]
 8002f52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a46      	ldr	r2, [pc, #280]	; (8003074 <HAL_SPI_MspInit+0x138>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	f040 8086 	bne.w	800306c <HAL_SPI_MspInit+0x130>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f60:	4b45      	ldr	r3, [pc, #276]	; (8003078 <HAL_SPI_MspInit+0x13c>)
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	4a44      	ldr	r2, [pc, #272]	; (8003078 <HAL_SPI_MspInit+0x13c>)
 8002f66:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f6a:	6193      	str	r3, [r2, #24]
 8002f6c:	4b42      	ldr	r3, [pc, #264]	; (8003078 <HAL_SPI_MspInit+0x13c>)
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f74:	613b      	str	r3, [r7, #16]
 8002f76:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f78:	4b3f      	ldr	r3, [pc, #252]	; (8003078 <HAL_SPI_MspInit+0x13c>)
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	4a3e      	ldr	r2, [pc, #248]	; (8003078 <HAL_SPI_MspInit+0x13c>)
 8002f7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f82:	6153      	str	r3, [r2, #20]
 8002f84:	4b3c      	ldr	r3, [pc, #240]	; (8003078 <HAL_SPI_MspInit+0x13c>)
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002f90:	2310      	movs	r3, #16
 8002f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f94:	2302      	movs	r3, #2
 8002f96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002fa0:	2305      	movs	r3, #5
 8002fa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fa4:	f107 0314 	add.w	r3, r7, #20
 8002fa8:	4619      	mov	r1, r3
 8002faa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fae:	f7fd fc37 	bl	8000820 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002fb2:	23e0      	movs	r3, #224	; 0xe0
 8002fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002fc2:	2305      	movs	r3, #5
 8002fc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fc6:	f107 0314 	add.w	r3, r7, #20
 8002fca:	4619      	mov	r1, r3
 8002fcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fd0:	f7fd fc26 	bl	8000820 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8002fd4:	4b29      	ldr	r3, [pc, #164]	; (800307c <HAL_SPI_MspInit+0x140>)
 8002fd6:	4a2a      	ldr	r2, [pc, #168]	; (8003080 <HAL_SPI_MspInit+0x144>)
 8002fd8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fda:	4b28      	ldr	r3, [pc, #160]	; (800307c <HAL_SPI_MspInit+0x140>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fe0:	4b26      	ldr	r3, [pc, #152]	; (800307c <HAL_SPI_MspInit+0x140>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fe6:	4b25      	ldr	r3, [pc, #148]	; (800307c <HAL_SPI_MspInit+0x140>)
 8002fe8:	2280      	movs	r2, #128	; 0x80
 8002fea:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fec:	4b23      	ldr	r3, [pc, #140]	; (800307c <HAL_SPI_MspInit+0x140>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ff2:	4b22      	ldr	r3, [pc, #136]	; (800307c <HAL_SPI_MspInit+0x140>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002ff8:	4b20      	ldr	r3, [pc, #128]	; (800307c <HAL_SPI_MspInit+0x140>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ffe:	4b1f      	ldr	r3, [pc, #124]	; (800307c <HAL_SPI_MspInit+0x140>)
 8003000:	2200      	movs	r2, #0
 8003002:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003004:	481d      	ldr	r0, [pc, #116]	; (800307c <HAL_SPI_MspInit+0x140>)
 8003006:	f7fd fa74 	bl	80004f2 <HAL_DMA_Init>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <HAL_SPI_MspInit+0xd8>
    {
      Error_Handler();
 8003010:	f7ff ff68 	bl	8002ee4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a19      	ldr	r2, [pc, #100]	; (800307c <HAL_SPI_MspInit+0x140>)
 8003018:	659a      	str	r2, [r3, #88]	; 0x58
 800301a:	4a18      	ldr	r2, [pc, #96]	; (800307c <HAL_SPI_MspInit+0x140>)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8003020:	4b18      	ldr	r3, [pc, #96]	; (8003084 <HAL_SPI_MspInit+0x148>)
 8003022:	4a19      	ldr	r2, [pc, #100]	; (8003088 <HAL_SPI_MspInit+0x14c>)
 8003024:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003026:	4b17      	ldr	r3, [pc, #92]	; (8003084 <HAL_SPI_MspInit+0x148>)
 8003028:	2210      	movs	r2, #16
 800302a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800302c:	4b15      	ldr	r3, [pc, #84]	; (8003084 <HAL_SPI_MspInit+0x148>)
 800302e:	2200      	movs	r2, #0
 8003030:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003032:	4b14      	ldr	r3, [pc, #80]	; (8003084 <HAL_SPI_MspInit+0x148>)
 8003034:	2280      	movs	r2, #128	; 0x80
 8003036:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003038:	4b12      	ldr	r3, [pc, #72]	; (8003084 <HAL_SPI_MspInit+0x148>)
 800303a:	2200      	movs	r2, #0
 800303c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800303e:	4b11      	ldr	r3, [pc, #68]	; (8003084 <HAL_SPI_MspInit+0x148>)
 8003040:	2200      	movs	r2, #0
 8003042:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003044:	4b0f      	ldr	r3, [pc, #60]	; (8003084 <HAL_SPI_MspInit+0x148>)
 8003046:	2200      	movs	r2, #0
 8003048:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800304a:	4b0e      	ldr	r3, [pc, #56]	; (8003084 <HAL_SPI_MspInit+0x148>)
 800304c:	2200      	movs	r2, #0
 800304e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003050:	480c      	ldr	r0, [pc, #48]	; (8003084 <HAL_SPI_MspInit+0x148>)
 8003052:	f7fd fa4e 	bl	80004f2 <HAL_DMA_Init>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <HAL_SPI_MspInit+0x124>
    {
      Error_Handler();
 800305c:	f7ff ff42 	bl	8002ee4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a08      	ldr	r2, [pc, #32]	; (8003084 <HAL_SPI_MspInit+0x148>)
 8003064:	655a      	str	r2, [r3, #84]	; 0x54
 8003066:	4a07      	ldr	r2, [pc, #28]	; (8003084 <HAL_SPI_MspInit+0x148>)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800306c:	bf00      	nop
 800306e:	3728      	adds	r7, #40	; 0x28
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40013000 	.word	0x40013000
 8003078:	40021000 	.word	0x40021000
 800307c:	20000100 	.word	0x20000100
 8003080:	4002001c 	.word	0x4002001c
 8003084:	20000144 	.word	0x20000144
 8003088:	40020030 	.word	0x40020030

0800308c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b08a      	sub	sp, #40	; 0x28
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003094:	f107 0314 	add.w	r3, r7, #20
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	605a      	str	r2, [r3, #4]
 800309e:	609a      	str	r2, [r3, #8]
 80030a0:	60da      	str	r2, [r3, #12]
 80030a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a18      	ldr	r2, [pc, #96]	; (800310c <HAL_UART_MspInit+0x80>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d129      	bne.n	8003102 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80030ae:	4b18      	ldr	r3, [pc, #96]	; (8003110 <HAL_UART_MspInit+0x84>)
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	4a17      	ldr	r2, [pc, #92]	; (8003110 <HAL_UART_MspInit+0x84>)
 80030b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030b8:	61d3      	str	r3, [r2, #28]
 80030ba:	4b15      	ldr	r3, [pc, #84]	; (8003110 <HAL_UART_MspInit+0x84>)
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030c6:	4b12      	ldr	r3, [pc, #72]	; (8003110 <HAL_UART_MspInit+0x84>)
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	4a11      	ldr	r2, [pc, #68]	; (8003110 <HAL_UART_MspInit+0x84>)
 80030cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030d0:	6153      	str	r3, [r2, #20]
 80030d2:	4b0f      	ldr	r3, [pc, #60]	; (8003110 <HAL_UART_MspInit+0x84>)
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030da:	60fb      	str	r3, [r7, #12]
 80030dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80030de:	f248 0304 	movw	r3, #32772	; 0x8004
 80030e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e4:	2302      	movs	r3, #2
 80030e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e8:	2300      	movs	r3, #0
 80030ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030ec:	2303      	movs	r3, #3
 80030ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80030f0:	2307      	movs	r3, #7
 80030f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030f4:	f107 0314 	add.w	r3, r7, #20
 80030f8:	4619      	mov	r1, r3
 80030fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030fe:	f7fd fb8f 	bl	8000820 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003102:	bf00      	nop
 8003104:	3728      	adds	r7, #40	; 0x28
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	40004400 	.word	0x40004400
 8003110:	40021000 	.word	0x40021000

08003114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003118:	bf00      	nop
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003122:	b480      	push	{r7}
 8003124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003126:	e7fe      	b.n	8003126 <HardFault_Handler+0x4>

08003128 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800312c:	e7fe      	b.n	800312c <MemManage_Handler+0x4>

0800312e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800312e:	b480      	push	{r7}
 8003130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003132:	e7fe      	b.n	8003132 <BusFault_Handler+0x4>

08003134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003138:	e7fe      	b.n	8003138 <UsageFault_Handler+0x4>

0800313a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800313a:	b480      	push	{r7}
 800313c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800313e:	bf00      	nop
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800314c:	bf00      	nop
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003156:	b480      	push	{r7}
 8003158:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800315a:	bf00      	nop
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003168:	f7fd f874 	bl	8000254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800316c:	bf00      	nop
 800316e:	bd80      	pop	{r7, pc}

08003170 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003174:	4802      	ldr	r0, [pc, #8]	; (8003180 <DMA1_Channel2_IRQHandler+0x10>)
 8003176:	f7fd fa62 	bl	800063e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800317a:	bf00      	nop
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	20000100 	.word	0x20000100

08003184 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003188:	4802      	ldr	r0, [pc, #8]	; (8003194 <DMA1_Channel3_IRQHandler+0x10>)
 800318a:	f7fd fa58 	bl	800063e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800318e:	bf00      	nop
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20000144 	.word	0x20000144

08003198 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800319c:	4b1f      	ldr	r3, [pc, #124]	; (800321c <SystemInit+0x84>)
 800319e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a2:	4a1e      	ldr	r2, [pc, #120]	; (800321c <SystemInit+0x84>)
 80031a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80031ac:	4b1c      	ldr	r3, [pc, #112]	; (8003220 <SystemInit+0x88>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a1b      	ldr	r2, [pc, #108]	; (8003220 <SystemInit+0x88>)
 80031b2:	f043 0301 	orr.w	r3, r3, #1
 80031b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80031b8:	4b19      	ldr	r3, [pc, #100]	; (8003220 <SystemInit+0x88>)
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	4918      	ldr	r1, [pc, #96]	; (8003220 <SystemInit+0x88>)
 80031be:	4b19      	ldr	r3, [pc, #100]	; (8003224 <SystemInit+0x8c>)
 80031c0:	4013      	ands	r3, r2
 80031c2:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80031c4:	4b16      	ldr	r3, [pc, #88]	; (8003220 <SystemInit+0x88>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a15      	ldr	r2, [pc, #84]	; (8003220 <SystemInit+0x88>)
 80031ca:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80031ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031d2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80031d4:	4b12      	ldr	r3, [pc, #72]	; (8003220 <SystemInit+0x88>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a11      	ldr	r2, [pc, #68]	; (8003220 <SystemInit+0x88>)
 80031da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031de:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80031e0:	4b0f      	ldr	r3, [pc, #60]	; (8003220 <SystemInit+0x88>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	4a0e      	ldr	r2, [pc, #56]	; (8003220 <SystemInit+0x88>)
 80031e6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80031ea:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80031ec:	4b0c      	ldr	r3, [pc, #48]	; (8003220 <SystemInit+0x88>)
 80031ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f0:	4a0b      	ldr	r2, [pc, #44]	; (8003220 <SystemInit+0x88>)
 80031f2:	f023 030f 	bic.w	r3, r3, #15
 80031f6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80031f8:	4b09      	ldr	r3, [pc, #36]	; (8003220 <SystemInit+0x88>)
 80031fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031fc:	4908      	ldr	r1, [pc, #32]	; (8003220 <SystemInit+0x88>)
 80031fe:	4b0a      	ldr	r3, [pc, #40]	; (8003228 <SystemInit+0x90>)
 8003200:	4013      	ands	r3, r2
 8003202:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003204:	4b06      	ldr	r3, [pc, #24]	; (8003220 <SystemInit+0x88>)
 8003206:	2200      	movs	r2, #0
 8003208:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800320a:	4b04      	ldr	r3, [pc, #16]	; (800321c <SystemInit+0x84>)
 800320c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003210:	609a      	str	r2, [r3, #8]
#endif
}
 8003212:	bf00      	nop
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	e000ed00 	.word	0xe000ed00
 8003220:	40021000 	.word	0x40021000
 8003224:	f87fc00c 	.word	0xf87fc00c
 8003228:	ff00fccc 	.word	0xff00fccc

0800322c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800322c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003264 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003230:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003232:	e003      	b.n	800323c <LoopCopyDataInit>

08003234 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003234:	4b0c      	ldr	r3, [pc, #48]	; (8003268 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003236:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003238:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800323a:	3104      	adds	r1, #4

0800323c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800323c:	480b      	ldr	r0, [pc, #44]	; (800326c <LoopForever+0xa>)
	ldr	r3, =_edata
 800323e:	4b0c      	ldr	r3, [pc, #48]	; (8003270 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003240:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003242:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003244:	d3f6      	bcc.n	8003234 <CopyDataInit>
	ldr	r2, =_sbss
 8003246:	4a0b      	ldr	r2, [pc, #44]	; (8003274 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003248:	e002      	b.n	8003250 <LoopFillZerobss>

0800324a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800324a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800324c:	f842 3b04 	str.w	r3, [r2], #4

08003250 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003250:	4b09      	ldr	r3, [pc, #36]	; (8003278 <LoopForever+0x16>)
	cmp	r2, r3
 8003252:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003254:	d3f9      	bcc.n	800324a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003256:	f7ff ff9f 	bl	8003198 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800325a:	f000 f811 	bl	8003280 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800325e:	f7ff fceb 	bl	8002c38 <main>

08003262 <LoopForever>:

LoopForever:
    b LoopForever
 8003262:	e7fe      	b.n	8003262 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003264:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8003268:	08003338 	.word	0x08003338
	ldr	r0, =_sdata
 800326c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003270:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8003274:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8003278:	20000188 	.word	0x20000188

0800327c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800327c:	e7fe      	b.n	800327c <ADC1_2_IRQHandler>
	...

08003280 <__libc_init_array>:
 8003280:	b570      	push	{r4, r5, r6, lr}
 8003282:	4e0d      	ldr	r6, [pc, #52]	; (80032b8 <__libc_init_array+0x38>)
 8003284:	4c0d      	ldr	r4, [pc, #52]	; (80032bc <__libc_init_array+0x3c>)
 8003286:	1ba4      	subs	r4, r4, r6
 8003288:	10a4      	asrs	r4, r4, #2
 800328a:	2500      	movs	r5, #0
 800328c:	42a5      	cmp	r5, r4
 800328e:	d109      	bne.n	80032a4 <__libc_init_array+0x24>
 8003290:	4e0b      	ldr	r6, [pc, #44]	; (80032c0 <__libc_init_array+0x40>)
 8003292:	4c0c      	ldr	r4, [pc, #48]	; (80032c4 <__libc_init_array+0x44>)
 8003294:	f000 f820 	bl	80032d8 <_init>
 8003298:	1ba4      	subs	r4, r4, r6
 800329a:	10a4      	asrs	r4, r4, #2
 800329c:	2500      	movs	r5, #0
 800329e:	42a5      	cmp	r5, r4
 80032a0:	d105      	bne.n	80032ae <__libc_init_array+0x2e>
 80032a2:	bd70      	pop	{r4, r5, r6, pc}
 80032a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032a8:	4798      	blx	r3
 80032aa:	3501      	adds	r5, #1
 80032ac:	e7ee      	b.n	800328c <__libc_init_array+0xc>
 80032ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032b2:	4798      	blx	r3
 80032b4:	3501      	adds	r5, #1
 80032b6:	e7f2      	b.n	800329e <__libc_init_array+0x1e>
 80032b8:	08003330 	.word	0x08003330
 80032bc:	08003330 	.word	0x08003330
 80032c0:	08003330 	.word	0x08003330
 80032c4:	08003334 	.word	0x08003334

080032c8 <memset>:
 80032c8:	4402      	add	r2, r0
 80032ca:	4603      	mov	r3, r0
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d100      	bne.n	80032d2 <memset+0xa>
 80032d0:	4770      	bx	lr
 80032d2:	f803 1b01 	strb.w	r1, [r3], #1
 80032d6:	e7f9      	b.n	80032cc <memset+0x4>

080032d8 <_init>:
 80032d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032da:	bf00      	nop
 80032dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032de:	bc08      	pop	{r3}
 80032e0:	469e      	mov	lr, r3
 80032e2:	4770      	bx	lr

080032e4 <_fini>:
 80032e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032e6:	bf00      	nop
 80032e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ea:	bc08      	pop	{r3}
 80032ec:	469e      	mov	lr, r3
 80032ee:	4770      	bx	lr
