
stm32_f446_usart2can.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dfc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003fc0  08003fc0  00013fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fe0  08003fe0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003fe0  08003fe0  00013fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fe8  08003fe8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fe8  08003fe8  00013fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fec  08003fec  00013fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003ff0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000010  08004000  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08004000  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009017  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001827  00000000  00000000  00029057  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000888  00000000  00000000  0002a880  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007c0  00000000  00000000  0002b108  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002063f  00000000  00000000  0002b8c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000731b  00000000  00000000  0004bf07  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c5b8b  00000000  00000000  00053222  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00118dad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002250  00000000  00000000  00118e28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003fa8 	.word	0x08003fa8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08003fa8 	.word	0x08003fa8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000508:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <HAL_Init+0x40>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a0d      	ldr	r2, [pc, #52]	; (8000544 <HAL_Init+0x40>)
 800050e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <HAL_Init+0x40>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <HAL_Init+0x40>)
 800051a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800051e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <HAL_Init+0x40>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a07      	ldr	r2, [pc, #28]	; (8000544 <HAL_Init+0x40>)
 8000526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800052a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 fead 	bl	800128c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 f808 	bl	8000548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000538:	f003 fab2 	bl	8003aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800053c:	2300      	movs	r3, #0
}
 800053e:	4618      	mov	r0, r3
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40023c00 	.word	0x40023c00

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <HAL_InitTick+0x54>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_InitTick+0x58>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4619      	mov	r1, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000562:	fbb2 f3f3 	udiv	r3, r2, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f000 fec5 	bl	80012f6 <HAL_SYSTICK_Config>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000572:	2301      	movs	r3, #1
 8000574:	e00e      	b.n	8000594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	d80a      	bhi.n	8000592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800057c:	2200      	movs	r2, #0
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000584:	f000 fe8d 	bl	80012a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <HAL_InitTick+0x5c>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800058e:	2300      	movs	r3, #0
 8000590:	e000      	b.n	8000594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
}
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	2000000c 	.word	0x2000000c
 80005a0:	20000004 	.word	0x20000004
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_IncTick+0x20>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_IncTick+0x24>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <HAL_IncTick+0x24>)
 80005ba:	6013      	str	r3, [r2, #0]
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000004 	.word	0x20000004
 80005cc:	20000034 	.word	0x20000034

080005d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return uwTick;
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <HAL_GetTick+0x14>)
 80005d6:	681b      	ldr	r3, [r3, #0]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000034 	.word	0x20000034

080005e8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d101      	bne.n	80005fa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80005f6:	2301      	movs	r3, #1
 80005f8:	e0ed      	b.n	80007d6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	2b00      	cmp	r3, #0
 8000604:	d102      	bne.n	800060c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f003 fa72 	bl	8003af0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f022 0202 	bic.w	r2, r2, #2
 800061a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800061c:	f7ff ffd8 	bl	80005d0 <HAL_GetTick>
 8000620:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000622:	e012      	b.n	800064a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000624:	f7ff ffd4 	bl	80005d0 <HAL_GetTick>
 8000628:	4602      	mov	r2, r0
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	1ad3      	subs	r3, r2, r3
 800062e:	2b0a      	cmp	r3, #10
 8000630:	d90b      	bls.n	800064a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000636:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2205      	movs	r2, #5
 8000642:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000646:	2301      	movs	r3, #1
 8000648:	e0c5      	b.n	80007d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	f003 0302 	and.w	r3, r3, #2
 8000654:	2b00      	cmp	r3, #0
 8000656:	d1e5      	bne.n	8000624 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f042 0201 	orr.w	r2, r2, #1
 8000666:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000668:	f7ff ffb2 	bl	80005d0 <HAL_GetTick>
 800066c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800066e:	e012      	b.n	8000696 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000670:	f7ff ffae 	bl	80005d0 <HAL_GetTick>
 8000674:	4602      	mov	r2, r0
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	1ad3      	subs	r3, r2, r3
 800067a:	2b0a      	cmp	r3, #10
 800067c:	d90b      	bls.n	8000696 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000682:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2205      	movs	r2, #5
 800068e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000692:	2301      	movs	r3, #1
 8000694:	e09f      	b.n	80007d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	f003 0301 	and.w	r3, r3, #1
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d0e5      	beq.n	8000670 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	7e1b      	ldrb	r3, [r3, #24]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d108      	bne.n	80006be <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	e007      	b.n	80006ce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80006cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	7e5b      	ldrb	r3, [r3, #25]
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d108      	bne.n	80006e8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	e007      	b.n	80006f8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80006f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	7e9b      	ldrb	r3, [r3, #26]
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d108      	bne.n	8000712 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f042 0220 	orr.w	r2, r2, #32
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	e007      	b.n	8000722 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f022 0220 	bic.w	r2, r2, #32
 8000720:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	7edb      	ldrb	r3, [r3, #27]
 8000726:	2b01      	cmp	r3, #1
 8000728:	d108      	bne.n	800073c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f022 0210 	bic.w	r2, r2, #16
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	e007      	b.n	800074c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f042 0210 	orr.w	r2, r2, #16
 800074a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	7f1b      	ldrb	r3, [r3, #28]
 8000750:	2b01      	cmp	r3, #1
 8000752:	d108      	bne.n	8000766 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f042 0208 	orr.w	r2, r2, #8
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	e007      	b.n	8000776 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f022 0208 	bic.w	r2, r2, #8
 8000774:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	7f5b      	ldrb	r3, [r3, #29]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d108      	bne.n	8000790 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f042 0204 	orr.w	r2, r2, #4
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	e007      	b.n	80007a0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f022 0204 	bic.w	r2, r2, #4
 800079e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	689a      	ldr	r2, [r3, #8]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	431a      	orrs	r2, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	691b      	ldr	r3, [r3, #16]
 80007ae:	431a      	orrs	r2, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	695b      	ldr	r3, [r3, #20]
 80007b4:	ea42 0103 	orr.w	r1, r2, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	1e5a      	subs	r2, r3, #1
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	430a      	orrs	r2, r1
 80007c4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2200      	movs	r2, #0
 80007ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2201      	movs	r2, #1
 80007d0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80007d4:	2300      	movs	r3, #0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b087      	sub	sp, #28
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007f6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80007f8:	7cfb      	ldrb	r3, [r7, #19]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d003      	beq.n	8000806 <HAL_CAN_ConfigFilter+0x26>
 80007fe:	7cfb      	ldrb	r3, [r7, #19]
 8000800:	2b02      	cmp	r3, #2
 8000802:	f040 80be 	bne.w	8000982 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000806:	4b65      	ldr	r3, [pc, #404]	; (800099c <HAL_CAN_ConfigFilter+0x1bc>)
 8000808:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000810:	f043 0201 	orr.w	r2, r3, #1
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000820:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000834:	021b      	lsls	r3, r3, #8
 8000836:	431a      	orrs	r2, r3
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	695b      	ldr	r3, [r3, #20]
 8000842:	f003 031f 	and.w	r3, r3, #31
 8000846:	2201      	movs	r2, #1
 8000848:	fa02 f303 	lsl.w	r3, r2, r3
 800084c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	43db      	mvns	r3, r3
 8000858:	401a      	ands	r2, r3
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	69db      	ldr	r3, [r3, #28]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d123      	bne.n	80008b0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	43db      	mvns	r3, r3
 8000872:	401a      	ands	r2, r3
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	68db      	ldr	r3, [r3, #12]
 800087e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000886:	683a      	ldr	r2, [r7, #0]
 8000888:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800088a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	3248      	adds	r2, #72	; 0x48
 8000890:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	689b      	ldr	r3, [r3, #8]
 8000898:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80008a4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80008a6:	6979      	ldr	r1, [r7, #20]
 80008a8:	3348      	adds	r3, #72	; 0x48
 80008aa:	00db      	lsls	r3, r3, #3
 80008ac:	440b      	add	r3, r1
 80008ae:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	69db      	ldr	r3, [r3, #28]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d122      	bne.n	80008fe <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	431a      	orrs	r2, r3
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008d4:	683a      	ldr	r2, [r7, #0]
 80008d6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80008d8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	3248      	adds	r2, #72	; 0x48
 80008de:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	689b      	ldr	r3, [r3, #8]
 80008e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80008f2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80008f4:	6979      	ldr	r1, [r7, #20]
 80008f6:	3348      	adds	r3, #72	; 0x48
 80008f8:	00db      	lsls	r3, r3, #3
 80008fa:	440b      	add	r3, r1
 80008fc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	699b      	ldr	r3, [r3, #24]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d109      	bne.n	800091a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	43db      	mvns	r3, r3
 8000910:	401a      	ands	r2, r3
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000918:	e007      	b.n	800092a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	431a      	orrs	r2, r3
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	691b      	ldr	r3, [r3, #16]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d109      	bne.n	8000946 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	43db      	mvns	r3, r3
 800093c:	401a      	ands	r2, r3
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000944:	e007      	b.n	8000956 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	431a      	orrs	r2, r3
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	6a1b      	ldr	r3, [r3, #32]
 800095a:	2b01      	cmp	r3, #1
 800095c:	d107      	bne.n	800096e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	431a      	orrs	r2, r3
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000974:	f023 0201 	bic.w	r2, r3, #1
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800097e:	2300      	movs	r3, #0
 8000980:	e006      	b.n	8000990 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000986:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800098e:	2301      	movs	r3, #1
  }
}
 8000990:	4618      	mov	r0, r3
 8000992:	371c      	adds	r7, #28
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	40006400 	.word	0x40006400

080009a0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d12e      	bne.n	8000a12 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2202      	movs	r2, #2
 80009b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f022 0201 	bic.w	r2, r2, #1
 80009ca:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80009cc:	f7ff fe00 	bl	80005d0 <HAL_GetTick>
 80009d0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80009d2:	e012      	b.n	80009fa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009d4:	f7ff fdfc 	bl	80005d0 <HAL_GetTick>
 80009d8:	4602      	mov	r2, r0
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	2b0a      	cmp	r3, #10
 80009e0:	d90b      	bls.n	80009fa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2205      	movs	r2, #5
 80009f2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e012      	b.n	8000a20 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	f003 0301 	and.w	r3, r3, #1
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d1e5      	bne.n	80009d4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	e006      	b.n	8000a20 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a16:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
  }
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b087      	sub	sp, #28
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
 8000a34:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a3c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000a3e:	7dfb      	ldrb	r3, [r7, #23]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d003      	beq.n	8000a4c <HAL_CAN_GetRxMessage+0x24>
 8000a44:	7dfb      	ldrb	r3, [r7, #23]
 8000a46:	2b02      	cmp	r3, #2
 8000a48:	f040 80f4 	bne.w	8000c34 <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d10e      	bne.n	8000a70 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	f003 0303 	and.w	r3, r3, #3
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d116      	bne.n	8000a8e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a64:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	e0e8      	b.n	8000c42 <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	691b      	ldr	r3, [r3, #16]
 8000a76:	f003 0303 	and.w	r3, r3, #3
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d107      	bne.n	8000a8e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a82:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e0d9      	b.n	8000c42 <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	331b      	adds	r3, #27
 8000a96:	011b      	lsls	r3, r3, #4
 8000a98:	4413      	add	r3, r2
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f003 0204 	and.w	r2, r3, #4
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d10c      	bne.n	8000ac6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	331b      	adds	r3, #27
 8000ab4:	011b      	lsls	r3, r3, #4
 8000ab6:	4413      	add	r3, r2
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	0d5b      	lsrs	r3, r3, #21
 8000abc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	e00b      	b.n	8000ade <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	331b      	adds	r3, #27
 8000ace:	011b      	lsls	r3, r3, #4
 8000ad0:	4413      	add	r3, r2
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	08db      	lsrs	r3, r3, #3
 8000ad6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	331b      	adds	r3, #27
 8000ae6:	011b      	lsls	r3, r3, #4
 8000ae8:	4413      	add	r3, r2
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	085b      	lsrs	r3, r3, #1
 8000aee:	f003 0201 	and.w	r2, r3, #1
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	331b      	adds	r3, #27
 8000afe:	011b      	lsls	r3, r3, #4
 8000b00:	4413      	add	r3, r2
 8000b02:	3304      	adds	r3, #4
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f003 020f 	and.w	r2, r3, #15
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	331b      	adds	r3, #27
 8000b16:	011b      	lsls	r3, r3, #4
 8000b18:	4413      	add	r3, r2
 8000b1a:	3304      	adds	r3, #4
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	0a1b      	lsrs	r3, r3, #8
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	331b      	adds	r3, #27
 8000b2e:	011b      	lsls	r3, r3, #4
 8000b30:	4413      	add	r3, r2
 8000b32:	3304      	adds	r3, #4
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	0c1b      	lsrs	r3, r3, #16
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	011b      	lsls	r3, r3, #4
 8000b46:	4413      	add	r3, r2
 8000b48:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	011b      	lsls	r3, r3, #4
 8000b5c:	4413      	add	r3, r2
 8000b5e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	0a1a      	lsrs	r2, r3, #8
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	b2d2      	uxtb	r2, r2
 8000b6c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	011b      	lsls	r3, r3, #4
 8000b76:	4413      	add	r3, r2
 8000b78:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	0c1a      	lsrs	r2, r3, #16
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	3302      	adds	r3, #2
 8000b84:	b2d2      	uxtb	r2, r2
 8000b86:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	011b      	lsls	r3, r3, #4
 8000b90:	4413      	add	r3, r2
 8000b92:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	0e1a      	lsrs	r2, r3, #24
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	3303      	adds	r3, #3
 8000b9e:	b2d2      	uxtb	r2, r2
 8000ba0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	011b      	lsls	r3, r3, #4
 8000baa:	4413      	add	r3, r2
 8000bac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	3304      	adds	r3, #4
 8000bb6:	b2d2      	uxtb	r2, r2
 8000bb8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	011b      	lsls	r3, r3, #4
 8000bc2:	4413      	add	r3, r2
 8000bc4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	0a1a      	lsrs	r2, r3, #8
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	3305      	adds	r3, #5
 8000bd0:	b2d2      	uxtb	r2, r2
 8000bd2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	011b      	lsls	r3, r3, #4
 8000bdc:	4413      	add	r3, r2
 8000bde:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	0c1a      	lsrs	r2, r3, #16
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	3306      	adds	r3, #6
 8000bea:	b2d2      	uxtb	r2, r2
 8000bec:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	011b      	lsls	r3, r3, #4
 8000bf6:	4413      	add	r3, r2
 8000bf8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	0e1a      	lsrs	r2, r3, #24
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	3307      	adds	r3, #7
 8000c04:	b2d2      	uxtb	r2, r2
 8000c06:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d108      	bne.n	8000c20 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	68da      	ldr	r2, [r3, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f042 0220 	orr.w	r2, r2, #32
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	e007      	b.n	8000c30 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	691a      	ldr	r2, [r3, #16]
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f042 0220 	orr.w	r2, r2, #32
 8000c2e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000c30:	2300      	movs	r3, #0
 8000c32:	e006      	b.n	8000c42 <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c38:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c40:	2301      	movs	r3, #1
  }
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	371c      	adds	r7, #28
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr

08000c4e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	b085      	sub	sp, #20
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
 8000c56:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c5e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000c60:	7bfb      	ldrb	r3, [r7, #15]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d002      	beq.n	8000c6c <HAL_CAN_ActivateNotification+0x1e>
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
 8000c68:	2b02      	cmp	r3, #2
 8000c6a:	d109      	bne.n	8000c80 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	6959      	ldr	r1, [r3, #20]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	683a      	ldr	r2, [r7, #0]
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	e006      	b.n	8000c8e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c84:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c8c:	2301      	movs	r3, #1
  }
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b08a      	sub	sp, #40	; 0x28
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	695b      	ldr	r3, [r3, #20]
 8000cac:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	691b      	ldr	r3, [r3, #16]
 8000ccc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000cd6:	6a3b      	ldr	r3, [r7, #32]
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d07c      	beq.n	8000dda <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d023      	beq.n	8000d32 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2201      	movs	r2, #1
 8000cf0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	f003 0302 	and.w	r3, r3, #2
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d003      	beq.n	8000d04 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f000 f97d 	bl	8000ffc <HAL_CAN_TxMailbox0CompleteCallback>
 8000d02:	e016      	b.n	8000d32 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	f003 0304 	and.w	r3, r3, #4
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d004      	beq.n	8000d18 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
 8000d16:	e00c      	b.n	8000d32 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	f003 0308 	and.w	r3, r3, #8
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d004      	beq.n	8000d2c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
 8000d2a:	e002      	b.n	8000d32 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f000 f983 	bl	8001038 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d024      	beq.n	8000d86 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d44:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d003      	beq.n	8000d58 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f000 f95d 	bl	8001010 <HAL_CAN_TxMailbox1CompleteCallback>
 8000d56:	e016      	b.n	8000d86 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d004      	beq.n	8000d6c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
 8000d6a:	e00c      	b.n	8000d86 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d004      	beq.n	8000d80 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d7e:	e002      	b.n	8000d86 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f000 f963 	bl	800104c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d024      	beq.n	8000dda <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d98:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d003      	beq.n	8000dac <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f000 f93d 	bl	8001024 <HAL_CAN_TxMailbox2CompleteCallback>
 8000daa:	e016      	b.n	8000dda <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d004      	beq.n	8000dc0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8000dbe:	e00c      	b.n	8000dda <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d004      	beq.n	8000dd4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8000dd2:	e002      	b.n	8000dda <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f000 f943 	bl	8001060 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000dda:	6a3b      	ldr	r3, [r7, #32]
 8000ddc:	f003 0308 	and.w	r3, r3, #8
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d00c      	beq.n	8000dfe <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	f003 0310 	and.w	r3, r3, #16
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d007      	beq.n	8000dfe <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2210      	movs	r2, #16
 8000dfc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000dfe:	6a3b      	ldr	r3, [r7, #32]
 8000e00:	f003 0304 	and.w	r3, r3, #4
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d00b      	beq.n	8000e20 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	f003 0308 	and.w	r3, r3, #8
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d006      	beq.n	8000e20 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2208      	movs	r2, #8
 8000e18:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f000 f92a 	bl	8001074 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000e20:	6a3b      	ldr	r3, [r7, #32]
 8000e22:	f003 0302 	and.w	r3, r3, #2
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d009      	beq.n	8000e3e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d002      	beq.n	8000e3e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f002 fe09 	bl	8003a50 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000e3e:	6a3b      	ldr	r3, [r7, #32]
 8000e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d00c      	beq.n	8000e62 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	f003 0310 	and.w	r3, r3, #16
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d007      	beq.n	8000e62 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2210      	movs	r2, #16
 8000e60:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000e62:	6a3b      	ldr	r3, [r7, #32]
 8000e64:	f003 0320 	and.w	r3, r3, #32
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d00b      	beq.n	8000e84 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	f003 0308 	and.w	r3, r3, #8
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d006      	beq.n	8000e84 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2208      	movs	r2, #8
 8000e7c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f000 f90c 	bl	800109c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000e84:	6a3b      	ldr	r3, [r7, #32]
 8000e86:	f003 0310 	and.w	r3, r3, #16
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d009      	beq.n	8000ea2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	691b      	ldr	r3, [r3, #16]
 8000e94:	f003 0303 	and.w	r3, r3, #3
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d002      	beq.n	8000ea2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f000 f8f3 	bl	8001088 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000ea2:	6a3b      	ldr	r3, [r7, #32]
 8000ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d00b      	beq.n	8000ec4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f003 0310 	and.w	r3, r3, #16
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d006      	beq.n	8000ec4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2210      	movs	r2, #16
 8000ebc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f000 f8f6 	bl	80010b0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000ec4:	6a3b      	ldr	r3, [r7, #32]
 8000ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d00b      	beq.n	8000ee6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	f003 0308 	and.w	r3, r3, #8
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d006      	beq.n	8000ee6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2208      	movs	r2, #8
 8000ede:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f000 f8ef 	bl	80010c4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000ee6:	6a3b      	ldr	r3, [r7, #32]
 8000ee8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d075      	beq.n	8000fdc <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	f003 0304 	and.w	r3, r3, #4
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d06c      	beq.n	8000fd4 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000efa:	6a3b      	ldr	r3, [r7, #32]
 8000efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d008      	beq.n	8000f16 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d003      	beq.n	8000f16 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000f16:	6a3b      	ldr	r3, [r7, #32]
 8000f18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d008      	beq.n	8000f32 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2c:	f043 0302 	orr.w	r3, r3, #2
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000f32:	6a3b      	ldr	r3, [r7, #32]
 8000f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d008      	beq.n	8000f4e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d003      	beq.n	8000f4e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f48:	f043 0304 	orr.w	r3, r3, #4
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000f4e:	6a3b      	ldr	r3, [r7, #32]
 8000f50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d03d      	beq.n	8000fd4 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d038      	beq.n	8000fd4 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000f68:	2b30      	cmp	r3, #48	; 0x30
 8000f6a:	d017      	beq.n	8000f9c <HAL_CAN_IRQHandler+0x302>
 8000f6c:	2b30      	cmp	r3, #48	; 0x30
 8000f6e:	d804      	bhi.n	8000f7a <HAL_CAN_IRQHandler+0x2e0>
 8000f70:	2b10      	cmp	r3, #16
 8000f72:	d009      	beq.n	8000f88 <HAL_CAN_IRQHandler+0x2ee>
 8000f74:	2b20      	cmp	r3, #32
 8000f76:	d00c      	beq.n	8000f92 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000f78:	e024      	b.n	8000fc4 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8000f7a:	2b50      	cmp	r3, #80	; 0x50
 8000f7c:	d018      	beq.n	8000fb0 <HAL_CAN_IRQHandler+0x316>
 8000f7e:	2b60      	cmp	r3, #96	; 0x60
 8000f80:	d01b      	beq.n	8000fba <HAL_CAN_IRQHandler+0x320>
 8000f82:	2b40      	cmp	r3, #64	; 0x40
 8000f84:	d00f      	beq.n	8000fa6 <HAL_CAN_IRQHandler+0x30c>
            break;
 8000f86:	e01d      	b.n	8000fc4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8000f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8a:	f043 0308 	orr.w	r3, r3, #8
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000f90:	e018      	b.n	8000fc4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f94:	f043 0310 	orr.w	r3, r3, #16
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000f9a:	e013      	b.n	8000fc4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9e:	f043 0320 	orr.w	r3, r3, #32
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000fa4:	e00e      	b.n	8000fc4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000fae:	e009      	b.n	8000fc4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8000fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000fb8:	e004      	b.n	8000fc4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000fc2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	699a      	ldr	r2, [r3, #24]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000fd2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2204      	movs	r2, #4
 8000fda:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d008      	beq.n	8000ff4 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe8:	431a      	orrs	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 f872 	bl	80010d8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8000ff4:	bf00      	nop
 8000ff6:	3728      	adds	r7, #40	; 0x28
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <__NVIC_SetPriorityGrouping+0x44>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001108:	4013      	ands	r3, r2
 800110a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001114:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800111c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111e:	4a04      	ldr	r2, [pc, #16]	; (8001130 <__NVIC_SetPriorityGrouping+0x44>)
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	60d3      	str	r3, [r2, #12]
}
 8001124:	bf00      	nop
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001138:	4b04      	ldr	r3, [pc, #16]	; (800114c <__NVIC_GetPriorityGrouping+0x18>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	0a1b      	lsrs	r3, r3, #8
 800113e:	f003 0307 	and.w	r3, r3, #7
}
 8001142:	4618      	mov	r0, r3
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	2b00      	cmp	r3, #0
 8001160:	db0b      	blt.n	800117a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	f003 021f 	and.w	r2, r3, #31
 8001168:	4907      	ldr	r1, [pc, #28]	; (8001188 <__NVIC_EnableIRQ+0x38>)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	095b      	lsrs	r3, r3, #5
 8001170:	2001      	movs	r0, #1
 8001172:	fa00 f202 	lsl.w	r2, r0, r2
 8001176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	e000e100 	.word	0xe000e100

0800118c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	6039      	str	r1, [r7, #0]
 8001196:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119c:	2b00      	cmp	r3, #0
 800119e:	db0a      	blt.n	80011b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	490c      	ldr	r1, [pc, #48]	; (80011d8 <__NVIC_SetPriority+0x4c>)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	0112      	lsls	r2, r2, #4
 80011ac:	b2d2      	uxtb	r2, r2
 80011ae:	440b      	add	r3, r1
 80011b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b4:	e00a      	b.n	80011cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4908      	ldr	r1, [pc, #32]	; (80011dc <__NVIC_SetPriority+0x50>)
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	f003 030f 	and.w	r3, r3, #15
 80011c2:	3b04      	subs	r3, #4
 80011c4:	0112      	lsls	r2, r2, #4
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	440b      	add	r3, r1
 80011ca:	761a      	strb	r2, [r3, #24]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000e100 	.word	0xe000e100
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b089      	sub	sp, #36	; 0x24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f1c3 0307 	rsb	r3, r3, #7
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	bf28      	it	cs
 80011fe:	2304      	movcs	r3, #4
 8001200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3304      	adds	r3, #4
 8001206:	2b06      	cmp	r3, #6
 8001208:	d902      	bls.n	8001210 <NVIC_EncodePriority+0x30>
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3b03      	subs	r3, #3
 800120e:	e000      	b.n	8001212 <NVIC_EncodePriority+0x32>
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43da      	mvns	r2, r3
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	401a      	ands	r2, r3
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001228:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	fa01 f303 	lsl.w	r3, r1, r3
 8001232:	43d9      	mvns	r1, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	4313      	orrs	r3, r2
         );
}
 800123a:	4618      	mov	r0, r3
 800123c:	3724      	adds	r7, #36	; 0x24
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
	...

08001248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001258:	d301      	bcc.n	800125e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800125a:	2301      	movs	r3, #1
 800125c:	e00f      	b.n	800127e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125e:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <SysTick_Config+0x40>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3b01      	subs	r3, #1
 8001264:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001266:	210f      	movs	r1, #15
 8001268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800126c:	f7ff ff8e 	bl	800118c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <SysTick_Config+0x40>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001276:	4b04      	ldr	r3, [pc, #16]	; (8001288 <SysTick_Config+0x40>)
 8001278:	2207      	movs	r2, #7
 800127a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	e000e010 	.word	0xe000e010

0800128c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff ff29 	bl	80010ec <__NVIC_SetPriorityGrouping>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b086      	sub	sp, #24
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	4603      	mov	r3, r0
 80012aa:	60b9      	str	r1, [r7, #8]
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012b4:	f7ff ff3e 	bl	8001134 <__NVIC_GetPriorityGrouping>
 80012b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	68b9      	ldr	r1, [r7, #8]
 80012be:	6978      	ldr	r0, [r7, #20]
 80012c0:	f7ff ff8e 	bl	80011e0 <NVIC_EncodePriority>
 80012c4:	4602      	mov	r2, r0
 80012c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ca:	4611      	mov	r1, r2
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff5d 	bl	800118c <__NVIC_SetPriority>
}
 80012d2:	bf00      	nop
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	4603      	mov	r3, r0
 80012e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ff31 	bl	8001150 <__NVIC_EnableIRQ>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff ffa2 	bl	8001248 <SysTick_Config>
 8001304:	4603      	mov	r3, r0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800131c:	f7ff f958 	bl	80005d0 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d101      	bne.n	800132c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e099      	b.n	8001460 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2202      	movs	r2, #2
 8001338:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f022 0201 	bic.w	r2, r2, #1
 800134a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800134c:	e00f      	b.n	800136e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800134e:	f7ff f93f 	bl	80005d0 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b05      	cmp	r3, #5
 800135a:	d908      	bls.n	800136e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2220      	movs	r2, #32
 8001360:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2203      	movs	r2, #3
 8001366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e078      	b.n	8001460 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1e8      	bne.n	800134e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	4b38      	ldr	r3, [pc, #224]	; (8001468 <HAL_DMA_Init+0x158>)
 8001388:	4013      	ands	r3, r2
 800138a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685a      	ldr	r2, [r3, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800139a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	4313      	orrs	r3, r2
 80013be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c4:	2b04      	cmp	r3, #4
 80013c6:	d107      	bne.n	80013d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d0:	4313      	orrs	r3, r2
 80013d2:	697a      	ldr	r2, [r7, #20]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	f023 0307 	bic.w	r3, r3, #7
 80013ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f4:	697a      	ldr	r2, [r7, #20]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fe:	2b04      	cmp	r3, #4
 8001400:	d117      	bne.n	8001432 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	4313      	orrs	r3, r2
 800140a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001410:	2b00      	cmp	r3, #0
 8001412:	d00e      	beq.n	8001432 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f000 fa99 	bl	800194c <DMA_CheckFifoParam>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d008      	beq.n	8001432 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2240      	movs	r2, #64	; 0x40
 8001424:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2201      	movs	r2, #1
 800142a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800142e:	2301      	movs	r3, #1
 8001430:	e016      	b.n	8001460 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	697a      	ldr	r2, [r7, #20]
 8001438:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f000 fa50 	bl	80018e0 <DMA_CalcBaseAndBitshift>
 8001440:	4603      	mov	r3, r0
 8001442:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001448:	223f      	movs	r2, #63	; 0x3f
 800144a:	409a      	lsls	r2, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2201      	movs	r2, #1
 800145a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	f010803f 	.word	0xf010803f

0800146c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
 8001478:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800147a:	2300      	movs	r3, #0
 800147c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001482:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800148a:	2b01      	cmp	r3, #1
 800148c:	d101      	bne.n	8001492 <HAL_DMA_Start_IT+0x26>
 800148e:	2302      	movs	r3, #2
 8001490:	e048      	b.n	8001524 <HAL_DMA_Start_IT+0xb8>
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2201      	movs	r2, #1
 8001496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d137      	bne.n	8001516 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2202      	movs	r2, #2
 80014aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2200      	movs	r2, #0
 80014b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	68b9      	ldr	r1, [r7, #8]
 80014ba:	68f8      	ldr	r0, [r7, #12]
 80014bc:	f000 f9e2 	bl	8001884 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c4:	223f      	movs	r2, #63	; 0x3f
 80014c6:	409a      	lsls	r2, r3
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f042 0216 	orr.w	r2, r2, #22
 80014da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	695a      	ldr	r2, [r3, #20]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014ea:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d007      	beq.n	8001504 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f042 0208 	orr.w	r2, r2, #8
 8001502:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f042 0201 	orr.w	r2, r2, #1
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	e005      	b.n	8001522 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800151e:	2302      	movs	r3, #2
 8001520:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001522:	7dfb      	ldrb	r3, [r7, #23]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d004      	beq.n	800154a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2280      	movs	r2, #128	; 0x80
 8001544:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e00c      	b.n	8001564 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2205      	movs	r2, #5
 800154e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 0201 	bic.w	r2, r2, #1
 8001560:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001578:	2300      	movs	r3, #0
 800157a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800157c:	4b92      	ldr	r3, [pc, #584]	; (80017c8 <HAL_DMA_IRQHandler+0x258>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a92      	ldr	r2, [pc, #584]	; (80017cc <HAL_DMA_IRQHandler+0x25c>)
 8001582:	fba2 2303 	umull	r2, r3, r2, r3
 8001586:	0a9b      	lsrs	r3, r3, #10
 8001588:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800159a:	2208      	movs	r2, #8
 800159c:	409a      	lsls	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4013      	ands	r3, r2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d01a      	beq.n	80015dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0304 	and.w	r3, r3, #4
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d013      	beq.n	80015dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 0204 	bic.w	r2, r2, #4
 80015c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c8:	2208      	movs	r2, #8
 80015ca:	409a      	lsls	r2, r3
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d4:	f043 0201 	orr.w	r2, r3, #1
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e0:	2201      	movs	r2, #1
 80015e2:	409a      	lsls	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4013      	ands	r3, r2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d012      	beq.n	8001612 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d00b      	beq.n	8001612 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015fe:	2201      	movs	r2, #1
 8001600:	409a      	lsls	r2, r3
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800160a:	f043 0202 	orr.w	r2, r3, #2
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001616:	2204      	movs	r2, #4
 8001618:	409a      	lsls	r2, r3
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	4013      	ands	r3, r2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d012      	beq.n	8001648 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d00b      	beq.n	8001648 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001634:	2204      	movs	r2, #4
 8001636:	409a      	lsls	r2, r3
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001640:	f043 0204 	orr.w	r2, r3, #4
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164c:	2210      	movs	r2, #16
 800164e:	409a      	lsls	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4013      	ands	r3, r2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d043      	beq.n	80016e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0308 	and.w	r3, r3, #8
 8001662:	2b00      	cmp	r3, #0
 8001664:	d03c      	beq.n	80016e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800166a:	2210      	movs	r2, #16
 800166c:	409a      	lsls	r2, r3
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d018      	beq.n	80016b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d108      	bne.n	80016a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	2b00      	cmp	r3, #0
 8001694:	d024      	beq.n	80016e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	4798      	blx	r3
 800169e:	e01f      	b.n	80016e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d01b      	beq.n	80016e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	4798      	blx	r3
 80016b0:	e016      	b.n	80016e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d107      	bne.n	80016d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 0208 	bic.w	r2, r2, #8
 80016ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e4:	2220      	movs	r2, #32
 80016e6:	409a      	lsls	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4013      	ands	r3, r2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f000 808e 	beq.w	800180e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0310 	and.w	r3, r3, #16
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f000 8086 	beq.w	800180e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001706:	2220      	movs	r2, #32
 8001708:	409a      	lsls	r2, r3
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b05      	cmp	r3, #5
 8001718:	d136      	bne.n	8001788 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 0216 	bic.w	r2, r2, #22
 8001728:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	695a      	ldr	r2, [r3, #20]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001738:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	2b00      	cmp	r3, #0
 8001740:	d103      	bne.n	800174a <HAL_DMA_IRQHandler+0x1da>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001746:	2b00      	cmp	r3, #0
 8001748:	d007      	beq.n	800175a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f022 0208 	bic.w	r2, r2, #8
 8001758:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800175e:	223f      	movs	r2, #63	; 0x3f
 8001760:	409a      	lsls	r2, r3
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2201      	movs	r2, #1
 8001772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800177a:	2b00      	cmp	r3, #0
 800177c:	d07d      	beq.n	800187a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	4798      	blx	r3
        }
        return;
 8001786:	e078      	b.n	800187a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d01c      	beq.n	80017d0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d108      	bne.n	80017b6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d030      	beq.n	800180e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	4798      	blx	r3
 80017b4:	e02b      	b.n	800180e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d027      	beq.n	800180e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	4798      	blx	r3
 80017c6:	e022      	b.n	800180e <HAL_DMA_IRQHandler+0x29e>
 80017c8:	2000000c 	.word	0x2000000c
 80017cc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10f      	bne.n	80017fe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f022 0210 	bic.w	r2, r2, #16
 80017ec:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2201      	movs	r2, #1
 80017fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001812:	2b00      	cmp	r3, #0
 8001814:	d032      	beq.n	800187c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b00      	cmp	r3, #0
 8001820:	d022      	beq.n	8001868 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2205      	movs	r2, #5
 8001826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 0201 	bic.w	r2, r2, #1
 8001838:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	3301      	adds	r3, #1
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	697a      	ldr	r2, [r7, #20]
 8001842:	429a      	cmp	r2, r3
 8001844:	d307      	bcc.n	8001856 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1f2      	bne.n	800183a <HAL_DMA_IRQHandler+0x2ca>
 8001854:	e000      	b.n	8001858 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001856:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186c:	2b00      	cmp	r3, #0
 800186e:	d005      	beq.n	800187c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	4798      	blx	r3
 8001878:	e000      	b.n	800187c <HAL_DMA_IRQHandler+0x30c>
        return;
 800187a:	bf00      	nop
    }
  }
}
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop

08001884 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
 8001890:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	2b40      	cmp	r3, #64	; 0x40
 80018b0:	d108      	bne.n	80018c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80018c2:	e007      	b.n	80018d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68ba      	ldr	r2, [r7, #8]
 80018ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	60da      	str	r2, [r3, #12]
}
 80018d4:	bf00      	nop
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	3b10      	subs	r3, #16
 80018f0:	4a14      	ldr	r2, [pc, #80]	; (8001944 <DMA_CalcBaseAndBitshift+0x64>)
 80018f2:	fba2 2303 	umull	r2, r3, r2, r3
 80018f6:	091b      	lsrs	r3, r3, #4
 80018f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018fa:	4a13      	ldr	r2, [pc, #76]	; (8001948 <DMA_CalcBaseAndBitshift+0x68>)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4413      	add	r3, r2
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	461a      	mov	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2b03      	cmp	r3, #3
 800190c:	d909      	bls.n	8001922 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001916:	f023 0303 	bic.w	r3, r3, #3
 800191a:	1d1a      	adds	r2, r3, #4
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	659a      	str	r2, [r3, #88]	; 0x58
 8001920:	e007      	b.n	8001932 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800192a:	f023 0303 	bic.w	r3, r3, #3
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001936:	4618      	mov	r0, r3
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	aaaaaaab 	.word	0xaaaaaaab
 8001948:	08003fc0 	.word	0x08003fc0

0800194c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001954:	2300      	movs	r3, #0
 8001956:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d11f      	bne.n	80019a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	2b03      	cmp	r3, #3
 800196a:	d855      	bhi.n	8001a18 <DMA_CheckFifoParam+0xcc>
 800196c:	a201      	add	r2, pc, #4	; (adr r2, 8001974 <DMA_CheckFifoParam+0x28>)
 800196e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001972:	bf00      	nop
 8001974:	08001985 	.word	0x08001985
 8001978:	08001997 	.word	0x08001997
 800197c:	08001985 	.word	0x08001985
 8001980:	08001a19 	.word	0x08001a19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001988:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d045      	beq.n	8001a1c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001994:	e042      	b.n	8001a1c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800199e:	d13f      	bne.n	8001a20 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019a4:	e03c      	b.n	8001a20 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019ae:	d121      	bne.n	80019f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	2b03      	cmp	r3, #3
 80019b4:	d836      	bhi.n	8001a24 <DMA_CheckFifoParam+0xd8>
 80019b6:	a201      	add	r2, pc, #4	; (adr r2, 80019bc <DMA_CheckFifoParam+0x70>)
 80019b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019bc:	080019cd 	.word	0x080019cd
 80019c0:	080019d3 	.word	0x080019d3
 80019c4:	080019cd 	.word	0x080019cd
 80019c8:	080019e5 	.word	0x080019e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	73fb      	strb	r3, [r7, #15]
      break;
 80019d0:	e02f      	b.n	8001a32 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d024      	beq.n	8001a28 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019e2:	e021      	b.n	8001a28 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019ec:	d11e      	bne.n	8001a2c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80019f2:	e01b      	b.n	8001a2c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d902      	bls.n	8001a00 <DMA_CheckFifoParam+0xb4>
 80019fa:	2b03      	cmp	r3, #3
 80019fc:	d003      	beq.n	8001a06 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80019fe:	e018      	b.n	8001a32 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	73fb      	strb	r3, [r7, #15]
      break;
 8001a04:	e015      	b.n	8001a32 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d00e      	beq.n	8001a30 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	73fb      	strb	r3, [r7, #15]
      break;
 8001a16:	e00b      	b.n	8001a30 <DMA_CheckFifoParam+0xe4>
      break;
 8001a18:	bf00      	nop
 8001a1a:	e00a      	b.n	8001a32 <DMA_CheckFifoParam+0xe6>
      break;
 8001a1c:	bf00      	nop
 8001a1e:	e008      	b.n	8001a32 <DMA_CheckFifoParam+0xe6>
      break;
 8001a20:	bf00      	nop
 8001a22:	e006      	b.n	8001a32 <DMA_CheckFifoParam+0xe6>
      break;
 8001a24:	bf00      	nop
 8001a26:	e004      	b.n	8001a32 <DMA_CheckFifoParam+0xe6>
      break;
 8001a28:	bf00      	nop
 8001a2a:	e002      	b.n	8001a32 <DMA_CheckFifoParam+0xe6>
      break;   
 8001a2c:	bf00      	nop
 8001a2e:	e000      	b.n	8001a32 <DMA_CheckFifoParam+0xe6>
      break;
 8001a30:	bf00      	nop
    }
  } 
  
  return status; 
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b089      	sub	sp, #36	; 0x24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a56:	2300      	movs	r3, #0
 8001a58:	61fb      	str	r3, [r7, #28]
 8001a5a:	e165      	b.n	8001d28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	f040 8154 	bne.w	8001d22 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d003      	beq.n	8001a8a <HAL_GPIO_Init+0x4a>
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b12      	cmp	r3, #18
 8001a88:	d123      	bne.n	8001ad2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	08da      	lsrs	r2, r3, #3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3208      	adds	r2, #8
 8001a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	220f      	movs	r2, #15
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	691a      	ldr	r2, [r3, #16]
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	08da      	lsrs	r2, r3, #3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3208      	adds	r2, #8
 8001acc:	69b9      	ldr	r1, [r7, #24]
 8001ace:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	2203      	movs	r2, #3
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 0203 	and.w	r2, r3, #3
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d00b      	beq.n	8001b26 <HAL_GPIO_Init+0xe6>
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d007      	beq.n	8001b26 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b1a:	2b11      	cmp	r3, #17
 8001b1c:	d003      	beq.n	8001b26 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b12      	cmp	r3, #18
 8001b24:	d130      	bne.n	8001b88 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	2203      	movs	r2, #3
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43db      	mvns	r3, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	091b      	lsrs	r3, r3, #4
 8001b72:	f003 0201 	and.w	r2, r3, #1
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	2203      	movs	r2, #3
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 80ae 	beq.w	8001d22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	4b5c      	ldr	r3, [pc, #368]	; (8001d3c <HAL_GPIO_Init+0x2fc>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bce:	4a5b      	ldr	r2, [pc, #364]	; (8001d3c <HAL_GPIO_Init+0x2fc>)
 8001bd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bd6:	4b59      	ldr	r3, [pc, #356]	; (8001d3c <HAL_GPIO_Init+0x2fc>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001be2:	4a57      	ldr	r2, [pc, #348]	; (8001d40 <HAL_GPIO_Init+0x300>)
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	089b      	lsrs	r3, r3, #2
 8001be8:	3302      	adds	r3, #2
 8001bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f003 0303 	and.w	r3, r3, #3
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	220f      	movs	r2, #15
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4013      	ands	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a4e      	ldr	r2, [pc, #312]	; (8001d44 <HAL_GPIO_Init+0x304>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d025      	beq.n	8001c5a <HAL_GPIO_Init+0x21a>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a4d      	ldr	r2, [pc, #308]	; (8001d48 <HAL_GPIO_Init+0x308>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d01f      	beq.n	8001c56 <HAL_GPIO_Init+0x216>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a4c      	ldr	r2, [pc, #304]	; (8001d4c <HAL_GPIO_Init+0x30c>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d019      	beq.n	8001c52 <HAL_GPIO_Init+0x212>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a4b      	ldr	r2, [pc, #300]	; (8001d50 <HAL_GPIO_Init+0x310>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d013      	beq.n	8001c4e <HAL_GPIO_Init+0x20e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a4a      	ldr	r2, [pc, #296]	; (8001d54 <HAL_GPIO_Init+0x314>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d00d      	beq.n	8001c4a <HAL_GPIO_Init+0x20a>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a49      	ldr	r2, [pc, #292]	; (8001d58 <HAL_GPIO_Init+0x318>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d007      	beq.n	8001c46 <HAL_GPIO_Init+0x206>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a48      	ldr	r2, [pc, #288]	; (8001d5c <HAL_GPIO_Init+0x31c>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d101      	bne.n	8001c42 <HAL_GPIO_Init+0x202>
 8001c3e:	2306      	movs	r3, #6
 8001c40:	e00c      	b.n	8001c5c <HAL_GPIO_Init+0x21c>
 8001c42:	2307      	movs	r3, #7
 8001c44:	e00a      	b.n	8001c5c <HAL_GPIO_Init+0x21c>
 8001c46:	2305      	movs	r3, #5
 8001c48:	e008      	b.n	8001c5c <HAL_GPIO_Init+0x21c>
 8001c4a:	2304      	movs	r3, #4
 8001c4c:	e006      	b.n	8001c5c <HAL_GPIO_Init+0x21c>
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e004      	b.n	8001c5c <HAL_GPIO_Init+0x21c>
 8001c52:	2302      	movs	r3, #2
 8001c54:	e002      	b.n	8001c5c <HAL_GPIO_Init+0x21c>
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <HAL_GPIO_Init+0x21c>
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	69fa      	ldr	r2, [r7, #28]
 8001c5e:	f002 0203 	and.w	r2, r2, #3
 8001c62:	0092      	lsls	r2, r2, #2
 8001c64:	4093      	lsls	r3, r2
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c6c:	4934      	ldr	r1, [pc, #208]	; (8001d40 <HAL_GPIO_Init+0x300>)
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	089b      	lsrs	r3, r3, #2
 8001c72:	3302      	adds	r3, #2
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c7a:	4b39      	ldr	r3, [pc, #228]	; (8001d60 <HAL_GPIO_Init+0x320>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	43db      	mvns	r3, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4013      	ands	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c9e:	4a30      	ldr	r2, [pc, #192]	; (8001d60 <HAL_GPIO_Init+0x320>)
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ca4:	4b2e      	ldr	r3, [pc, #184]	; (8001d60 <HAL_GPIO_Init+0x320>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cc8:	4a25      	ldr	r2, [pc, #148]	; (8001d60 <HAL_GPIO_Init+0x320>)
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cce:	4b24      	ldr	r3, [pc, #144]	; (8001d60 <HAL_GPIO_Init+0x320>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cf2:	4a1b      	ldr	r2, [pc, #108]	; (8001d60 <HAL_GPIO_Init+0x320>)
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cf8:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <HAL_GPIO_Init+0x320>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	43db      	mvns	r3, r3
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4013      	ands	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d1c:	4a10      	ldr	r2, [pc, #64]	; (8001d60 <HAL_GPIO_Init+0x320>)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3301      	adds	r3, #1
 8001d26:	61fb      	str	r3, [r7, #28]
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	2b0f      	cmp	r3, #15
 8001d2c:	f67f ae96 	bls.w	8001a5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d30:	bf00      	nop
 8001d32:	3724      	adds	r7, #36	; 0x24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40013800 	.word	0x40013800
 8001d44:	40020000 	.word	0x40020000
 8001d48:	40020400 	.word	0x40020400
 8001d4c:	40020800 	.word	0x40020800
 8001d50:	40020c00 	.word	0x40020c00
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40021400 	.word	0x40021400
 8001d5c:	40021800 	.word	0x40021800
 8001d60:	40013c00 	.word	0x40013c00

08001d64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	807b      	strh	r3, [r7, #2]
 8001d70:	4613      	mov	r3, r2
 8001d72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d74:	787b      	ldrb	r3, [r7, #1]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d7a:	887a      	ldrh	r2, [r7, #2]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d80:	e003      	b.n	8001d8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d82:	887b      	ldrh	r3, [r7, #2]
 8001d84:	041a      	lsls	r2, r3, #16
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	619a      	str	r2, [r3, #24]
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e0ca      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dac:	4b67      	ldr	r3, [pc, #412]	; (8001f4c <HAL_RCC_ClockConfig+0x1b4>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 030f 	and.w	r3, r3, #15
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d90c      	bls.n	8001dd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dba:	4b64      	ldr	r3, [pc, #400]	; (8001f4c <HAL_RCC_ClockConfig+0x1b4>)
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc2:	4b62      	ldr	r3, [pc, #392]	; (8001f4c <HAL_RCC_ClockConfig+0x1b4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d001      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e0b6      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d020      	beq.n	8001e22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d005      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dec:	4b58      	ldr	r3, [pc, #352]	; (8001f50 <HAL_RCC_ClockConfig+0x1b8>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	4a57      	ldr	r2, [pc, #348]	; (8001f50 <HAL_RCC_ClockConfig+0x1b8>)
 8001df2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001df6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0308 	and.w	r3, r3, #8
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d005      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e04:	4b52      	ldr	r3, [pc, #328]	; (8001f50 <HAL_RCC_ClockConfig+0x1b8>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	4a51      	ldr	r2, [pc, #324]	; (8001f50 <HAL_RCC_ClockConfig+0x1b8>)
 8001e0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e10:	4b4f      	ldr	r3, [pc, #316]	; (8001f50 <HAL_RCC_ClockConfig+0x1b8>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	494c      	ldr	r1, [pc, #304]	; (8001f50 <HAL_RCC_ClockConfig+0x1b8>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d044      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d107      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e36:	4b46      	ldr	r3, [pc, #280]	; (8001f50 <HAL_RCC_ClockConfig+0x1b8>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d119      	bne.n	8001e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e07d      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d003      	beq.n	8001e56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e52:	2b03      	cmp	r3, #3
 8001e54:	d107      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e56:	4b3e      	ldr	r3, [pc, #248]	; (8001f50 <HAL_RCC_ClockConfig+0x1b8>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d109      	bne.n	8001e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e06d      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e66:	4b3a      	ldr	r3, [pc, #232]	; (8001f50 <HAL_RCC_ClockConfig+0x1b8>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e065      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e76:	4b36      	ldr	r3, [pc, #216]	; (8001f50 <HAL_RCC_ClockConfig+0x1b8>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f023 0203 	bic.w	r2, r3, #3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	4933      	ldr	r1, [pc, #204]	; (8001f50 <HAL_RCC_ClockConfig+0x1b8>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e88:	f7fe fba2 	bl	80005d0 <HAL_GetTick>
 8001e8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8e:	e00a      	b.n	8001ea6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e90:	f7fe fb9e 	bl	80005d0 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e04d      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea6:	4b2a      	ldr	r3, [pc, #168]	; (8001f50 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 020c 	and.w	r2, r3, #12
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d1eb      	bne.n	8001e90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001eb8:	4b24      	ldr	r3, [pc, #144]	; (8001f4c <HAL_RCC_ClockConfig+0x1b4>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 030f 	and.w	r3, r3, #15
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d20c      	bcs.n	8001ee0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec6:	4b21      	ldr	r3, [pc, #132]	; (8001f4c <HAL_RCC_ClockConfig+0x1b4>)
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ece:	4b1f      	ldr	r3, [pc, #124]	; (8001f4c <HAL_RCC_ClockConfig+0x1b4>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d001      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e030      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d008      	beq.n	8001efe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eec:	4b18      	ldr	r3, [pc, #96]	; (8001f50 <HAL_RCC_ClockConfig+0x1b8>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	4915      	ldr	r1, [pc, #84]	; (8001f50 <HAL_RCC_ClockConfig+0x1b8>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d009      	beq.n	8001f1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f0a:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <HAL_RCC_ClockConfig+0x1b8>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	490d      	ldr	r1, [pc, #52]	; (8001f50 <HAL_RCC_ClockConfig+0x1b8>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f1e:	f000 f851 	bl	8001fc4 <HAL_RCC_GetSysClockFreq>
 8001f22:	4601      	mov	r1, r0
 8001f24:	4b0a      	ldr	r3, [pc, #40]	; (8001f50 <HAL_RCC_ClockConfig+0x1b8>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	091b      	lsrs	r3, r3, #4
 8001f2a:	f003 030f 	and.w	r3, r3, #15
 8001f2e:	4a09      	ldr	r2, [pc, #36]	; (8001f54 <HAL_RCC_ClockConfig+0x1bc>)
 8001f30:	5cd3      	ldrb	r3, [r2, r3]
 8001f32:	fa21 f303 	lsr.w	r3, r1, r3
 8001f36:	4a08      	ldr	r2, [pc, #32]	; (8001f58 <HAL_RCC_ClockConfig+0x1c0>)
 8001f38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f7fe fb04 	bl	8000548 <HAL_InitTick>

  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40023c00 	.word	0x40023c00
 8001f50:	40023800 	.word	0x40023800
 8001f54:	08003fc8 	.word	0x08003fc8
 8001f58:	2000000c 	.word	0x2000000c

08001f5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f60:	4b03      	ldr	r3, [pc, #12]	; (8001f70 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f62:	681b      	ldr	r3, [r3, #0]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	2000000c 	.word	0x2000000c

08001f74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f78:	f7ff fff0 	bl	8001f5c <HAL_RCC_GetHCLKFreq>
 8001f7c:	4601      	mov	r1, r0
 8001f7e:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	0a9b      	lsrs	r3, r3, #10
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	4a03      	ldr	r2, [pc, #12]	; (8001f98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f8a:	5cd3      	ldrb	r3, [r2, r3]
 8001f8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40023800 	.word	0x40023800
 8001f98:	08003fd8 	.word	0x08003fd8

08001f9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fa0:	f7ff ffdc 	bl	8001f5c <HAL_RCC_GetHCLKFreq>
 8001fa4:	4601      	mov	r1, r0
 8001fa6:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	0b5b      	lsrs	r3, r3, #13
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	4a03      	ldr	r2, [pc, #12]	; (8001fc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fb2:	5cd3      	ldrb	r3, [r2, r3]
 8001fb4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	08003fd8 	.word	0x08003fd8

08001fc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fc6:	b087      	sub	sp, #28
 8001fc8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fde:	4bc6      	ldr	r3, [pc, #792]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x334>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 030c 	and.w	r3, r3, #12
 8001fe6:	2b0c      	cmp	r3, #12
 8001fe8:	f200 817e 	bhi.w	80022e8 <HAL_RCC_GetSysClockFreq+0x324>
 8001fec:	a201      	add	r2, pc, #4	; (adr r2, 8001ff4 <HAL_RCC_GetSysClockFreq+0x30>)
 8001fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff2:	bf00      	nop
 8001ff4:	08002029 	.word	0x08002029
 8001ff8:	080022e9 	.word	0x080022e9
 8001ffc:	080022e9 	.word	0x080022e9
 8002000:	080022e9 	.word	0x080022e9
 8002004:	0800202f 	.word	0x0800202f
 8002008:	080022e9 	.word	0x080022e9
 800200c:	080022e9 	.word	0x080022e9
 8002010:	080022e9 	.word	0x080022e9
 8002014:	08002035 	.word	0x08002035
 8002018:	080022e9 	.word	0x080022e9
 800201c:	080022e9 	.word	0x080022e9
 8002020:	080022e9 	.word	0x080022e9
 8002024:	08002191 	.word	0x08002191
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002028:	4bb4      	ldr	r3, [pc, #720]	; (80022fc <HAL_RCC_GetSysClockFreq+0x338>)
 800202a:	613b      	str	r3, [r7, #16]
       break;
 800202c:	e15f      	b.n	80022ee <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800202e:	4bb4      	ldr	r3, [pc, #720]	; (8002300 <HAL_RCC_GetSysClockFreq+0x33c>)
 8002030:	613b      	str	r3, [r7, #16]
      break;
 8002032:	e15c      	b.n	80022ee <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002034:	4bb0      	ldr	r3, [pc, #704]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800203c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800203e:	4bae      	ldr	r3, [pc, #696]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d04a      	beq.n	80020e0 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800204a:	4bab      	ldr	r3, [pc, #684]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x334>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	099b      	lsrs	r3, r3, #6
 8002050:	f04f 0400 	mov.w	r4, #0
 8002054:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002058:	f04f 0200 	mov.w	r2, #0
 800205c:	ea03 0501 	and.w	r5, r3, r1
 8002060:	ea04 0602 	and.w	r6, r4, r2
 8002064:	4629      	mov	r1, r5
 8002066:	4632      	mov	r2, r6
 8002068:	f04f 0300 	mov.w	r3, #0
 800206c:	f04f 0400 	mov.w	r4, #0
 8002070:	0154      	lsls	r4, r2, #5
 8002072:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002076:	014b      	lsls	r3, r1, #5
 8002078:	4619      	mov	r1, r3
 800207a:	4622      	mov	r2, r4
 800207c:	1b49      	subs	r1, r1, r5
 800207e:	eb62 0206 	sbc.w	r2, r2, r6
 8002082:	f04f 0300 	mov.w	r3, #0
 8002086:	f04f 0400 	mov.w	r4, #0
 800208a:	0194      	lsls	r4, r2, #6
 800208c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002090:	018b      	lsls	r3, r1, #6
 8002092:	1a5b      	subs	r3, r3, r1
 8002094:	eb64 0402 	sbc.w	r4, r4, r2
 8002098:	f04f 0100 	mov.w	r1, #0
 800209c:	f04f 0200 	mov.w	r2, #0
 80020a0:	00e2      	lsls	r2, r4, #3
 80020a2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80020a6:	00d9      	lsls	r1, r3, #3
 80020a8:	460b      	mov	r3, r1
 80020aa:	4614      	mov	r4, r2
 80020ac:	195b      	adds	r3, r3, r5
 80020ae:	eb44 0406 	adc.w	r4, r4, r6
 80020b2:	f04f 0100 	mov.w	r1, #0
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	0262      	lsls	r2, r4, #9
 80020bc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80020c0:	0259      	lsls	r1, r3, #9
 80020c2:	460b      	mov	r3, r1
 80020c4:	4614      	mov	r4, r2
 80020c6:	4618      	mov	r0, r3
 80020c8:	4621      	mov	r1, r4
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f04f 0400 	mov.w	r4, #0
 80020d0:	461a      	mov	r2, r3
 80020d2:	4623      	mov	r3, r4
 80020d4:	f7fe f896 	bl	8000204 <__aeabi_uldivmod>
 80020d8:	4603      	mov	r3, r0
 80020da:	460c      	mov	r4, r1
 80020dc:	617b      	str	r3, [r7, #20]
 80020de:	e049      	b.n	8002174 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020e0:	4b85      	ldr	r3, [pc, #532]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x334>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	099b      	lsrs	r3, r3, #6
 80020e6:	f04f 0400 	mov.w	r4, #0
 80020ea:	f240 11ff 	movw	r1, #511	; 0x1ff
 80020ee:	f04f 0200 	mov.w	r2, #0
 80020f2:	ea03 0501 	and.w	r5, r3, r1
 80020f6:	ea04 0602 	and.w	r6, r4, r2
 80020fa:	4629      	mov	r1, r5
 80020fc:	4632      	mov	r2, r6
 80020fe:	f04f 0300 	mov.w	r3, #0
 8002102:	f04f 0400 	mov.w	r4, #0
 8002106:	0154      	lsls	r4, r2, #5
 8002108:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800210c:	014b      	lsls	r3, r1, #5
 800210e:	4619      	mov	r1, r3
 8002110:	4622      	mov	r2, r4
 8002112:	1b49      	subs	r1, r1, r5
 8002114:	eb62 0206 	sbc.w	r2, r2, r6
 8002118:	f04f 0300 	mov.w	r3, #0
 800211c:	f04f 0400 	mov.w	r4, #0
 8002120:	0194      	lsls	r4, r2, #6
 8002122:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002126:	018b      	lsls	r3, r1, #6
 8002128:	1a5b      	subs	r3, r3, r1
 800212a:	eb64 0402 	sbc.w	r4, r4, r2
 800212e:	f04f 0100 	mov.w	r1, #0
 8002132:	f04f 0200 	mov.w	r2, #0
 8002136:	00e2      	lsls	r2, r4, #3
 8002138:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800213c:	00d9      	lsls	r1, r3, #3
 800213e:	460b      	mov	r3, r1
 8002140:	4614      	mov	r4, r2
 8002142:	195b      	adds	r3, r3, r5
 8002144:	eb44 0406 	adc.w	r4, r4, r6
 8002148:	f04f 0100 	mov.w	r1, #0
 800214c:	f04f 0200 	mov.w	r2, #0
 8002150:	02a2      	lsls	r2, r4, #10
 8002152:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002156:	0299      	lsls	r1, r3, #10
 8002158:	460b      	mov	r3, r1
 800215a:	4614      	mov	r4, r2
 800215c:	4618      	mov	r0, r3
 800215e:	4621      	mov	r1, r4
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f04f 0400 	mov.w	r4, #0
 8002166:	461a      	mov	r2, r3
 8002168:	4623      	mov	r3, r4
 800216a:	f7fe f84b 	bl	8000204 <__aeabi_uldivmod>
 800216e:	4603      	mov	r3, r0
 8002170:	460c      	mov	r4, r1
 8002172:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002174:	4b60      	ldr	r3, [pc, #384]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	0c1b      	lsrs	r3, r3, #16
 800217a:	f003 0303 	and.w	r3, r3, #3
 800217e:	3301      	adds	r3, #1
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	fbb2 f3f3 	udiv	r3, r2, r3
 800218c:	613b      	str	r3, [r7, #16]
      break;
 800218e:	e0ae      	b.n	80022ee <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002190:	4b59      	ldr	r3, [pc, #356]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002198:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800219a:	4b57      	ldr	r3, [pc, #348]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x334>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d04a      	beq.n	800223c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021a6:	4b54      	ldr	r3, [pc, #336]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x334>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	099b      	lsrs	r3, r3, #6
 80021ac:	f04f 0400 	mov.w	r4, #0
 80021b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021b4:	f04f 0200 	mov.w	r2, #0
 80021b8:	ea03 0501 	and.w	r5, r3, r1
 80021bc:	ea04 0602 	and.w	r6, r4, r2
 80021c0:	4629      	mov	r1, r5
 80021c2:	4632      	mov	r2, r6
 80021c4:	f04f 0300 	mov.w	r3, #0
 80021c8:	f04f 0400 	mov.w	r4, #0
 80021cc:	0154      	lsls	r4, r2, #5
 80021ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021d2:	014b      	lsls	r3, r1, #5
 80021d4:	4619      	mov	r1, r3
 80021d6:	4622      	mov	r2, r4
 80021d8:	1b49      	subs	r1, r1, r5
 80021da:	eb62 0206 	sbc.w	r2, r2, r6
 80021de:	f04f 0300 	mov.w	r3, #0
 80021e2:	f04f 0400 	mov.w	r4, #0
 80021e6:	0194      	lsls	r4, r2, #6
 80021e8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80021ec:	018b      	lsls	r3, r1, #6
 80021ee:	1a5b      	subs	r3, r3, r1
 80021f0:	eb64 0402 	sbc.w	r4, r4, r2
 80021f4:	f04f 0100 	mov.w	r1, #0
 80021f8:	f04f 0200 	mov.w	r2, #0
 80021fc:	00e2      	lsls	r2, r4, #3
 80021fe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002202:	00d9      	lsls	r1, r3, #3
 8002204:	460b      	mov	r3, r1
 8002206:	4614      	mov	r4, r2
 8002208:	195b      	adds	r3, r3, r5
 800220a:	eb44 0406 	adc.w	r4, r4, r6
 800220e:	f04f 0100 	mov.w	r1, #0
 8002212:	f04f 0200 	mov.w	r2, #0
 8002216:	0262      	lsls	r2, r4, #9
 8002218:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800221c:	0259      	lsls	r1, r3, #9
 800221e:	460b      	mov	r3, r1
 8002220:	4614      	mov	r4, r2
 8002222:	4618      	mov	r0, r3
 8002224:	4621      	mov	r1, r4
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f04f 0400 	mov.w	r4, #0
 800222c:	461a      	mov	r2, r3
 800222e:	4623      	mov	r3, r4
 8002230:	f7fd ffe8 	bl	8000204 <__aeabi_uldivmod>
 8002234:	4603      	mov	r3, r0
 8002236:	460c      	mov	r4, r1
 8002238:	617b      	str	r3, [r7, #20]
 800223a:	e049      	b.n	80022d0 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800223c:	4b2e      	ldr	r3, [pc, #184]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x334>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	099b      	lsrs	r3, r3, #6
 8002242:	f04f 0400 	mov.w	r4, #0
 8002246:	f240 11ff 	movw	r1, #511	; 0x1ff
 800224a:	f04f 0200 	mov.w	r2, #0
 800224e:	ea03 0501 	and.w	r5, r3, r1
 8002252:	ea04 0602 	and.w	r6, r4, r2
 8002256:	4629      	mov	r1, r5
 8002258:	4632      	mov	r2, r6
 800225a:	f04f 0300 	mov.w	r3, #0
 800225e:	f04f 0400 	mov.w	r4, #0
 8002262:	0154      	lsls	r4, r2, #5
 8002264:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002268:	014b      	lsls	r3, r1, #5
 800226a:	4619      	mov	r1, r3
 800226c:	4622      	mov	r2, r4
 800226e:	1b49      	subs	r1, r1, r5
 8002270:	eb62 0206 	sbc.w	r2, r2, r6
 8002274:	f04f 0300 	mov.w	r3, #0
 8002278:	f04f 0400 	mov.w	r4, #0
 800227c:	0194      	lsls	r4, r2, #6
 800227e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002282:	018b      	lsls	r3, r1, #6
 8002284:	1a5b      	subs	r3, r3, r1
 8002286:	eb64 0402 	sbc.w	r4, r4, r2
 800228a:	f04f 0100 	mov.w	r1, #0
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	00e2      	lsls	r2, r4, #3
 8002294:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002298:	00d9      	lsls	r1, r3, #3
 800229a:	460b      	mov	r3, r1
 800229c:	4614      	mov	r4, r2
 800229e:	195b      	adds	r3, r3, r5
 80022a0:	eb44 0406 	adc.w	r4, r4, r6
 80022a4:	f04f 0100 	mov.w	r1, #0
 80022a8:	f04f 0200 	mov.w	r2, #0
 80022ac:	02a2      	lsls	r2, r4, #10
 80022ae:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80022b2:	0299      	lsls	r1, r3, #10
 80022b4:	460b      	mov	r3, r1
 80022b6:	4614      	mov	r4, r2
 80022b8:	4618      	mov	r0, r3
 80022ba:	4621      	mov	r1, r4
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f04f 0400 	mov.w	r4, #0
 80022c2:	461a      	mov	r2, r3
 80022c4:	4623      	mov	r3, r4
 80022c6:	f7fd ff9d 	bl	8000204 <__aeabi_uldivmod>
 80022ca:	4603      	mov	r3, r0
 80022cc:	460c      	mov	r4, r1
 80022ce:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80022d0:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x334>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	0f1b      	lsrs	r3, r3, #28
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e4:	613b      	str	r3, [r7, #16]
      break;
 80022e6:	e002      	b.n	80022ee <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022e8:	4b04      	ldr	r3, [pc, #16]	; (80022fc <HAL_RCC_GetSysClockFreq+0x338>)
 80022ea:	613b      	str	r3, [r7, #16]
      break;
 80022ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022ee:	693b      	ldr	r3, [r7, #16]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	371c      	adds	r7, #28
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022f8:	40023800 	.word	0x40023800
 80022fc:	00f42400 	.word	0x00f42400
 8002300:	007a1200 	.word	0x007a1200

08002304 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800230c:	2300      	movs	r3, #0
 800230e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 8083 	beq.w	8002424 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800231e:	4b95      	ldr	r3, [pc, #596]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 030c 	and.w	r3, r3, #12
 8002326:	2b04      	cmp	r3, #4
 8002328:	d019      	beq.n	800235e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800232a:	4b92      	ldr	r3, [pc, #584]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002332:	2b08      	cmp	r3, #8
 8002334:	d106      	bne.n	8002344 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002336:	4b8f      	ldr	r3, [pc, #572]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800233e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002342:	d00c      	beq.n	800235e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002344:	4b8b      	ldr	r3, [pc, #556]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800234c:	2b0c      	cmp	r3, #12
 800234e:	d112      	bne.n	8002376 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002350:	4b88      	ldr	r3, [pc, #544]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002358:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800235c:	d10b      	bne.n	8002376 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800235e:	4b85      	ldr	r3, [pc, #532]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d05b      	beq.n	8002422 <HAL_RCC_OscConfig+0x11e>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d157      	bne.n	8002422 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e216      	b.n	80027a4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800237e:	d106      	bne.n	800238e <HAL_RCC_OscConfig+0x8a>
 8002380:	4b7c      	ldr	r3, [pc, #496]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a7b      	ldr	r2, [pc, #492]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 8002386:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800238a:	6013      	str	r3, [r2, #0]
 800238c:	e01d      	b.n	80023ca <HAL_RCC_OscConfig+0xc6>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002396:	d10c      	bne.n	80023b2 <HAL_RCC_OscConfig+0xae>
 8002398:	4b76      	ldr	r3, [pc, #472]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a75      	ldr	r2, [pc, #468]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 800239e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023a2:	6013      	str	r3, [r2, #0]
 80023a4:	4b73      	ldr	r3, [pc, #460]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a72      	ldr	r2, [pc, #456]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 80023aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ae:	6013      	str	r3, [r2, #0]
 80023b0:	e00b      	b.n	80023ca <HAL_RCC_OscConfig+0xc6>
 80023b2:	4b70      	ldr	r3, [pc, #448]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a6f      	ldr	r2, [pc, #444]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 80023b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	4b6d      	ldr	r3, [pc, #436]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a6c      	ldr	r2, [pc, #432]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 80023c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023c8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d013      	beq.n	80023fa <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d2:	f7fe f8fd 	bl	80005d0 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023da:	f7fe f8f9 	bl	80005d0 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b64      	cmp	r3, #100	; 0x64
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e1db      	b.n	80027a4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ec:	4b61      	ldr	r3, [pc, #388]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0f0      	beq.n	80023da <HAL_RCC_OscConfig+0xd6>
 80023f8:	e014      	b.n	8002424 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fa:	f7fe f8e9 	bl	80005d0 <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002400:	e008      	b.n	8002414 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002402:	f7fe f8e5 	bl	80005d0 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b64      	cmp	r3, #100	; 0x64
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e1c7      	b.n	80027a4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002414:	4b57      	ldr	r3, [pc, #348]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1f0      	bne.n	8002402 <HAL_RCC_OscConfig+0xfe>
 8002420:	e000      	b.n	8002424 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002422:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d06f      	beq.n	8002510 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002430:	4b50      	ldr	r3, [pc, #320]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 030c 	and.w	r3, r3, #12
 8002438:	2b00      	cmp	r3, #0
 800243a:	d017      	beq.n	800246c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800243c:	4b4d      	ldr	r3, [pc, #308]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002444:	2b08      	cmp	r3, #8
 8002446:	d105      	bne.n	8002454 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002448:	4b4a      	ldr	r3, [pc, #296]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00b      	beq.n	800246c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002454:	4b47      	ldr	r3, [pc, #284]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800245c:	2b0c      	cmp	r3, #12
 800245e:	d11c      	bne.n	800249a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002460:	4b44      	ldr	r3, [pc, #272]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d116      	bne.n	800249a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800246c:	4b41      	ldr	r3, [pc, #260]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d005      	beq.n	8002484 <HAL_RCC_OscConfig+0x180>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d001      	beq.n	8002484 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e18f      	b.n	80027a4 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002484:	4b3b      	ldr	r3, [pc, #236]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	4938      	ldr	r1, [pc, #224]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 8002494:	4313      	orrs	r3, r2
 8002496:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002498:	e03a      	b.n	8002510 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d020      	beq.n	80024e4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024a2:	4b35      	ldr	r3, [pc, #212]	; (8002578 <HAL_RCC_OscConfig+0x274>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a8:	f7fe f892 	bl	80005d0 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024b0:	f7fe f88e 	bl	80005d0 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e170      	b.n	80027a4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c2:	4b2c      	ldr	r3, [pc, #176]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f0      	beq.n	80024b0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ce:	4b29      	ldr	r3, [pc, #164]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	4925      	ldr	r1, [pc, #148]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	600b      	str	r3, [r1, #0]
 80024e2:	e015      	b.n	8002510 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024e4:	4b24      	ldr	r3, [pc, #144]	; (8002578 <HAL_RCC_OscConfig+0x274>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ea:	f7fe f871 	bl	80005d0 <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024f2:	f7fe f86d 	bl	80005d0 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e14f      	b.n	80027a4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002504:	4b1b      	ldr	r3, [pc, #108]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1f0      	bne.n	80024f2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0308 	and.w	r3, r3, #8
 8002518:	2b00      	cmp	r3, #0
 800251a:	d037      	beq.n	800258c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d016      	beq.n	8002552 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002524:	4b15      	ldr	r3, [pc, #84]	; (800257c <HAL_RCC_OscConfig+0x278>)
 8002526:	2201      	movs	r2, #1
 8002528:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800252a:	f7fe f851 	bl	80005d0 <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002530:	e008      	b.n	8002544 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002532:	f7fe f84d 	bl	80005d0 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e12f      	b.n	80027a4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002544:	4b0b      	ldr	r3, [pc, #44]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 8002546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0f0      	beq.n	8002532 <HAL_RCC_OscConfig+0x22e>
 8002550:	e01c      	b.n	800258c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002552:	4b0a      	ldr	r3, [pc, #40]	; (800257c <HAL_RCC_OscConfig+0x278>)
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002558:	f7fe f83a 	bl	80005d0 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800255e:	e00f      	b.n	8002580 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002560:	f7fe f836 	bl	80005d0 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d908      	bls.n	8002580 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e118      	b.n	80027a4 <HAL_RCC_OscConfig+0x4a0>
 8002572:	bf00      	nop
 8002574:	40023800 	.word	0x40023800
 8002578:	42470000 	.word	0x42470000
 800257c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002580:	4b8a      	ldr	r3, [pc, #552]	; (80027ac <HAL_RCC_OscConfig+0x4a8>)
 8002582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1e9      	bne.n	8002560 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0304 	and.w	r3, r3, #4
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 8097 	beq.w	80026c8 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800259a:	2300      	movs	r3, #0
 800259c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800259e:	4b83      	ldr	r3, [pc, #524]	; (80027ac <HAL_RCC_OscConfig+0x4a8>)
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10f      	bne.n	80025ca <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	4b7f      	ldr	r3, [pc, #508]	; (80027ac <HAL_RCC_OscConfig+0x4a8>)
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	4a7e      	ldr	r2, [pc, #504]	; (80027ac <HAL_RCC_OscConfig+0x4a8>)
 80025b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b8:	6413      	str	r3, [r2, #64]	; 0x40
 80025ba:	4b7c      	ldr	r3, [pc, #496]	; (80027ac <HAL_RCC_OscConfig+0x4a8>)
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80025c6:	2301      	movs	r3, #1
 80025c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ca:	4b79      	ldr	r3, [pc, #484]	; (80027b0 <HAL_RCC_OscConfig+0x4ac>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d118      	bne.n	8002608 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025d6:	4b76      	ldr	r3, [pc, #472]	; (80027b0 <HAL_RCC_OscConfig+0x4ac>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a75      	ldr	r2, [pc, #468]	; (80027b0 <HAL_RCC_OscConfig+0x4ac>)
 80025dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025e2:	f7fd fff5 	bl	80005d0 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ea:	f7fd fff1 	bl	80005d0 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e0d3      	b.n	80027a4 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fc:	4b6c      	ldr	r3, [pc, #432]	; (80027b0 <HAL_RCC_OscConfig+0x4ac>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0f0      	beq.n	80025ea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d106      	bne.n	800261e <HAL_RCC_OscConfig+0x31a>
 8002610:	4b66      	ldr	r3, [pc, #408]	; (80027ac <HAL_RCC_OscConfig+0x4a8>)
 8002612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002614:	4a65      	ldr	r2, [pc, #404]	; (80027ac <HAL_RCC_OscConfig+0x4a8>)
 8002616:	f043 0301 	orr.w	r3, r3, #1
 800261a:	6713      	str	r3, [r2, #112]	; 0x70
 800261c:	e01c      	b.n	8002658 <HAL_RCC_OscConfig+0x354>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	2b05      	cmp	r3, #5
 8002624:	d10c      	bne.n	8002640 <HAL_RCC_OscConfig+0x33c>
 8002626:	4b61      	ldr	r3, [pc, #388]	; (80027ac <HAL_RCC_OscConfig+0x4a8>)
 8002628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262a:	4a60      	ldr	r2, [pc, #384]	; (80027ac <HAL_RCC_OscConfig+0x4a8>)
 800262c:	f043 0304 	orr.w	r3, r3, #4
 8002630:	6713      	str	r3, [r2, #112]	; 0x70
 8002632:	4b5e      	ldr	r3, [pc, #376]	; (80027ac <HAL_RCC_OscConfig+0x4a8>)
 8002634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002636:	4a5d      	ldr	r2, [pc, #372]	; (80027ac <HAL_RCC_OscConfig+0x4a8>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	6713      	str	r3, [r2, #112]	; 0x70
 800263e:	e00b      	b.n	8002658 <HAL_RCC_OscConfig+0x354>
 8002640:	4b5a      	ldr	r3, [pc, #360]	; (80027ac <HAL_RCC_OscConfig+0x4a8>)
 8002642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002644:	4a59      	ldr	r2, [pc, #356]	; (80027ac <HAL_RCC_OscConfig+0x4a8>)
 8002646:	f023 0301 	bic.w	r3, r3, #1
 800264a:	6713      	str	r3, [r2, #112]	; 0x70
 800264c:	4b57      	ldr	r3, [pc, #348]	; (80027ac <HAL_RCC_OscConfig+0x4a8>)
 800264e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002650:	4a56      	ldr	r2, [pc, #344]	; (80027ac <HAL_RCC_OscConfig+0x4a8>)
 8002652:	f023 0304 	bic.w	r3, r3, #4
 8002656:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d015      	beq.n	800268c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002660:	f7fd ffb6 	bl	80005d0 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002666:	e00a      	b.n	800267e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002668:	f7fd ffb2 	bl	80005d0 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	f241 3288 	movw	r2, #5000	; 0x1388
 8002676:	4293      	cmp	r3, r2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e092      	b.n	80027a4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800267e:	4b4b      	ldr	r3, [pc, #300]	; (80027ac <HAL_RCC_OscConfig+0x4a8>)
 8002680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d0ee      	beq.n	8002668 <HAL_RCC_OscConfig+0x364>
 800268a:	e014      	b.n	80026b6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268c:	f7fd ffa0 	bl	80005d0 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002692:	e00a      	b.n	80026aa <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002694:	f7fd ff9c 	bl	80005d0 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e07c      	b.n	80027a4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026aa:	4b40      	ldr	r3, [pc, #256]	; (80027ac <HAL_RCC_OscConfig+0x4a8>)
 80026ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1ee      	bne.n	8002694 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026b6:	7dfb      	ldrb	r3, [r7, #23]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d105      	bne.n	80026c8 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026bc:	4b3b      	ldr	r3, [pc, #236]	; (80027ac <HAL_RCC_OscConfig+0x4a8>)
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	4a3a      	ldr	r2, [pc, #232]	; (80027ac <HAL_RCC_OscConfig+0x4a8>)
 80026c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d068      	beq.n	80027a2 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026d0:	4b36      	ldr	r3, [pc, #216]	; (80027ac <HAL_RCC_OscConfig+0x4a8>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 030c 	and.w	r3, r3, #12
 80026d8:	2b08      	cmp	r3, #8
 80026da:	d060      	beq.n	800279e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d145      	bne.n	8002770 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e4:	4b33      	ldr	r3, [pc, #204]	; (80027b4 <HAL_RCC_OscConfig+0x4b0>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ea:	f7fd ff71 	bl	80005d0 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026f2:	f7fd ff6d 	bl	80005d0 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e04f      	b.n	80027a4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002704:	4b29      	ldr	r3, [pc, #164]	; (80027ac <HAL_RCC_OscConfig+0x4a8>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1f0      	bne.n	80026f2 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	69da      	ldr	r2, [r3, #28]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	431a      	orrs	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271e:	019b      	lsls	r3, r3, #6
 8002720:	431a      	orrs	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002726:	085b      	lsrs	r3, r3, #1
 8002728:	3b01      	subs	r3, #1
 800272a:	041b      	lsls	r3, r3, #16
 800272c:	431a      	orrs	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002732:	061b      	lsls	r3, r3, #24
 8002734:	431a      	orrs	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	071b      	lsls	r3, r3, #28
 800273c:	491b      	ldr	r1, [pc, #108]	; (80027ac <HAL_RCC_OscConfig+0x4a8>)
 800273e:	4313      	orrs	r3, r2
 8002740:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002742:	4b1c      	ldr	r3, [pc, #112]	; (80027b4 <HAL_RCC_OscConfig+0x4b0>)
 8002744:	2201      	movs	r2, #1
 8002746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002748:	f7fd ff42 	bl	80005d0 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002750:	f7fd ff3e 	bl	80005d0 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e020      	b.n	80027a4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002762:	4b12      	ldr	r3, [pc, #72]	; (80027ac <HAL_RCC_OscConfig+0x4a8>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0f0      	beq.n	8002750 <HAL_RCC_OscConfig+0x44c>
 800276e:	e018      	b.n	80027a2 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002770:	4b10      	ldr	r3, [pc, #64]	; (80027b4 <HAL_RCC_OscConfig+0x4b0>)
 8002772:	2200      	movs	r2, #0
 8002774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002776:	f7fd ff2b 	bl	80005d0 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800277e:	f7fd ff27 	bl	80005d0 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e009      	b.n	80027a4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002790:	4b06      	ldr	r3, [pc, #24]	; (80027ac <HAL_RCC_OscConfig+0x4a8>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1f0      	bne.n	800277e <HAL_RCC_OscConfig+0x47a>
 800279c:	e001      	b.n	80027a2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e000      	b.n	80027a4 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40023800 	.word	0x40023800
 80027b0:	40007000 	.word	0x40007000
 80027b4:	42470060 	.word	0x42470060

080027b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e03f      	b.n	800284a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d106      	bne.n	80027e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f001 fa6a 	bl	8003cb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2224      	movs	r2, #36	; 0x24
 80027e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 fc69 	bl	80030d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	691a      	ldr	r2, [r3, #16]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002810:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	695a      	ldr	r2, [r3, #20]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002820:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68da      	ldr	r2, [r3, #12]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002830:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2220      	movs	r2, #32
 800283c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2220      	movs	r2, #32
 8002844:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b088      	sub	sp, #32
 8002856:	af02      	add	r7, sp, #8
 8002858:	60f8      	str	r0, [r7, #12]
 800285a:	60b9      	str	r1, [r7, #8]
 800285c:	603b      	str	r3, [r7, #0]
 800285e:	4613      	mov	r3, r2
 8002860:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b20      	cmp	r3, #32
 8002870:	f040 8083 	bne.w	800297a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d002      	beq.n	8002880 <HAL_UART_Transmit+0x2e>
 800287a:	88fb      	ldrh	r3, [r7, #6]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e07b      	b.n	800297c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800288a:	2b01      	cmp	r3, #1
 800288c:	d101      	bne.n	8002892 <HAL_UART_Transmit+0x40>
 800288e:	2302      	movs	r3, #2
 8002890:	e074      	b.n	800297c <HAL_UART_Transmit+0x12a>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2221      	movs	r2, #33	; 0x21
 80028a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80028a8:	f7fd fe92 	bl	80005d0 <HAL_GetTick>
 80028ac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	88fa      	ldrh	r2, [r7, #6]
 80028b2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	88fa      	ldrh	r2, [r7, #6]
 80028b8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80028ba:	e042      	b.n	8002942 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028d2:	d122      	bne.n	800291a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	2200      	movs	r2, #0
 80028dc:	2180      	movs	r1, #128	; 0x80
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f000 fa76 	bl	8002dd0 <UART_WaitOnFlagUntilTimeout>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e046      	b.n	800297c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	881b      	ldrh	r3, [r3, #0]
 80028f6:	461a      	mov	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002900:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d103      	bne.n	8002912 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	3302      	adds	r3, #2
 800290e:	60bb      	str	r3, [r7, #8]
 8002910:	e017      	b.n	8002942 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	3301      	adds	r3, #1
 8002916:	60bb      	str	r3, [r7, #8]
 8002918:	e013      	b.n	8002942 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	2200      	movs	r2, #0
 8002922:	2180      	movs	r1, #128	; 0x80
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f000 fa53 	bl	8002dd0 <UART_WaitOnFlagUntilTimeout>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e023      	b.n	800297c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	1c5a      	adds	r2, r3, #1
 8002938:	60ba      	str	r2, [r7, #8]
 800293a:	781a      	ldrb	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002946:	b29b      	uxth	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1b7      	bne.n	80028bc <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	2200      	movs	r2, #0
 8002954:	2140      	movs	r1, #64	; 0x40
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f000 fa3a 	bl	8002dd0 <UART_WaitOnFlagUntilTimeout>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e00a      	b.n	800297c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2220      	movs	r2, #32
 800296a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	e000      	b.n	800297c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800297a:	2302      	movs	r3, #2
  }
}
 800297c:	4618      	mov	r0, r3
 800297e:	3718      	adds	r7, #24
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	4613      	mov	r3, r2
 8002990:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b20      	cmp	r3, #32
 800299c:	d166      	bne.n	8002a6c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d002      	beq.n	80029aa <HAL_UART_Receive_DMA+0x26>
 80029a4:	88fb      	ldrh	r3, [r7, #6]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e05f      	b.n	8002a6e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d101      	bne.n	80029bc <HAL_UART_Receive_DMA+0x38>
 80029b8:	2302      	movs	r3, #2
 80029ba:	e058      	b.n	8002a6e <HAL_UART_Receive_DMA+0xea>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	88fa      	ldrh	r2, [r7, #6]
 80029ce:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2222      	movs	r2, #34	; 0x22
 80029da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e2:	4a25      	ldr	r2, [pc, #148]	; (8002a78 <HAL_UART_Receive_DMA+0xf4>)
 80029e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ea:	4a24      	ldr	r2, [pc, #144]	; (8002a7c <HAL_UART_Receive_DMA+0xf8>)
 80029ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f2:	4a23      	ldr	r2, [pc, #140]	; (8002a80 <HAL_UART_Receive_DMA+0xfc>)
 80029f4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029fa:	2200      	movs	r2, #0
 80029fc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80029fe:	f107 0308 	add.w	r3, r7, #8
 8002a02:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	4619      	mov	r1, r3
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	88fb      	ldrh	r3, [r7, #6]
 8002a16:	f7fe fd29 	bl	800146c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	613b      	str	r3, [r7, #16]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	613b      	str	r3, [r7, #16]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	613b      	str	r3, [r7, #16]
 8002a2e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68da      	ldr	r2, [r3, #12]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a46:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	695a      	ldr	r2, [r3, #20]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0201 	orr.w	r2, r2, #1
 8002a56:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	695a      	ldr	r2, [r3, #20]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a66:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	e000      	b.n	8002a6e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8002a6c:	2302      	movs	r3, #2
  }
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3718      	adds	r7, #24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	08002cb9 	.word	0x08002cb9
 8002a7c:	08002d21 	.word	0x08002d21
 8002a80:	08002d3d 	.word	0x08002d3d

08002a84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b088      	sub	sp, #32
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10d      	bne.n	8002ad6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	f003 0320 	and.w	r3, r3, #32
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d008      	beq.n	8002ad6 <HAL_UART_IRQHandler+0x52>
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	f003 0320 	and.w	r3, r3, #32
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 fa7e 	bl	8002fd0 <UART_Receive_IT>
      return;
 8002ad4:	e0cc      	b.n	8002c70 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 80ab 	beq.w	8002c34 <HAL_UART_IRQHandler+0x1b0>
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d105      	bne.n	8002af4 <HAL_UART_IRQHandler+0x70>
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 80a0 	beq.w	8002c34 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00a      	beq.n	8002b14 <HAL_UART_IRQHandler+0x90>
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d005      	beq.n	8002b14 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0c:	f043 0201 	orr.w	r2, r3, #1
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f003 0304 	and.w	r3, r3, #4
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00a      	beq.n	8002b34 <HAL_UART_IRQHandler+0xb0>
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d005      	beq.n	8002b34 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b2c:	f043 0202 	orr.w	r2, r3, #2
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00a      	beq.n	8002b54 <HAL_UART_IRQHandler+0xd0>
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d005      	beq.n	8002b54 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4c:	f043 0204 	orr.w	r2, r3, #4
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00a      	beq.n	8002b74 <HAL_UART_IRQHandler+0xf0>
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d005      	beq.n	8002b74 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6c:	f043 0208 	orr.w	r2, r3, #8
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d078      	beq.n	8002c6e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	f003 0320 	and.w	r3, r3, #32
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d007      	beq.n	8002b96 <HAL_UART_IRQHandler+0x112>
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	f003 0320 	and.w	r3, r3, #32
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d002      	beq.n	8002b96 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 fa1d 	bl	8002fd0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba0:	2b40      	cmp	r3, #64	; 0x40
 8002ba2:	bf0c      	ite	eq
 8002ba4:	2301      	moveq	r3, #1
 8002ba6:	2300      	movne	r3, #0
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb0:	f003 0308 	and.w	r3, r3, #8
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d102      	bne.n	8002bbe <HAL_UART_IRQHandler+0x13a>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d031      	beq.n	8002c22 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f966 	bl	8002e90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bce:	2b40      	cmp	r3, #64	; 0x40
 8002bd0:	d123      	bne.n	8002c1a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695a      	ldr	r2, [r3, #20]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002be0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d013      	beq.n	8002c12 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bee:	4a22      	ldr	r2, [pc, #136]	; (8002c78 <HAL_UART_IRQHandler+0x1f4>)
 8002bf0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fc98 	bl	800152c <HAL_DMA_Abort_IT>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d016      	beq.n	8002c30 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c0c:	4610      	mov	r0, r2
 8002c0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c10:	e00e      	b.n	8002c30 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f846 	bl	8002ca4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c18:	e00a      	b.n	8002c30 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f842 	bl	8002ca4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c20:	e006      	b.n	8002c30 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f83e 	bl	8002ca4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002c2e:	e01e      	b.n	8002c6e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c30:	bf00      	nop
    return;
 8002c32:	e01c      	b.n	8002c6e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d008      	beq.n	8002c50 <HAL_UART_IRQHandler+0x1cc>
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d003      	beq.n	8002c50 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 f953 	bl	8002ef4 <UART_Transmit_IT>
    return;
 8002c4e:	e00f      	b.n	8002c70 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00a      	beq.n	8002c70 <HAL_UART_IRQHandler+0x1ec>
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d005      	beq.n	8002c70 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f99b 	bl	8002fa0 <UART_EndTransmit_IT>
    return;
 8002c6a:	bf00      	nop
 8002c6c:	e000      	b.n	8002c70 <HAL_UART_IRQHandler+0x1ec>
    return;
 8002c6e:	bf00      	nop
  }
}
 8002c70:	3720      	adds	r7, #32
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	08002ecd 	.word	0x08002ecd

08002c7c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d11e      	bne.n	8002d12 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ce8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	695a      	ldr	r2, [r3, #20]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 0201 	bic.w	r2, r2, #1
 8002cf8:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	695a      	ldr	r2, [r3, #20]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d08:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2220      	movs	r2, #32
 8002d0e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 fe84 	bl	8003a20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d18:	bf00      	nop
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f7ff ffae 	bl	8002c90 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d34:	bf00      	nop
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d58:	2b80      	cmp	r3, #128	; 0x80
 8002d5a:	bf0c      	ite	eq
 8002d5c:	2301      	moveq	r3, #1
 8002d5e:	2300      	movne	r3, #0
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b21      	cmp	r3, #33	; 0x21
 8002d6e:	d108      	bne.n	8002d82 <UART_DMAError+0x46>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d005      	beq.n	8002d82 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002d7c:	68b8      	ldr	r0, [r7, #8]
 8002d7e:	f000 f871 	bl	8002e64 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d8c:	2b40      	cmp	r3, #64	; 0x40
 8002d8e:	bf0c      	ite	eq
 8002d90:	2301      	moveq	r3, #1
 8002d92:	2300      	movne	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b22      	cmp	r3, #34	; 0x22
 8002da2:	d108      	bne.n	8002db6 <UART_DMAError+0x7a>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d005      	beq.n	8002db6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	2200      	movs	r2, #0
 8002dae:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002db0:	68b8      	ldr	r0, [r7, #8]
 8002db2:	f000 f86d 	bl	8002e90 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dba:	f043 0210 	orr.w	r2, r3, #16
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002dc2:	68b8      	ldr	r0, [r7, #8]
 8002dc4:	f7ff ff6e 	bl	8002ca4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002dc8:	bf00      	nop
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	603b      	str	r3, [r7, #0]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002de0:	e02c      	b.n	8002e3c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002de8:	d028      	beq.n	8002e3c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d007      	beq.n	8002e00 <UART_WaitOnFlagUntilTimeout+0x30>
 8002df0:	f7fd fbee 	bl	80005d0 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d21d      	bcs.n	8002e3c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68da      	ldr	r2, [r3, #12]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e0e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695a      	ldr	r2, [r3, #20]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0201 	bic.w	r2, r2, #1
 8002e1e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e00f      	b.n	8002e5c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	4013      	ands	r3, r2
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	bf0c      	ite	eq
 8002e4c:	2301      	moveq	r3, #1
 8002e4e:	2300      	movne	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	461a      	mov	r2, r3
 8002e54:	79fb      	ldrb	r3, [r7, #7]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d0c3      	beq.n	8002de2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002e7a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68da      	ldr	r2, [r3, #12]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002ea6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	695a      	ldr	r2, [r3, #20]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 0201 	bic.w	r2, r2, #1
 8002eb6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f7ff fedc 	bl	8002ca4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002eec:	bf00      	nop
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b21      	cmp	r3, #33	; 0x21
 8002f06:	d144      	bne.n	8002f92 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f10:	d11a      	bne.n	8002f48 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f26:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d105      	bne.n	8002f3c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	1c9a      	adds	r2, r3, #2
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	621a      	str	r2, [r3, #32]
 8002f3a:	e00e      	b.n	8002f5a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	1c5a      	adds	r2, r3, #1
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	621a      	str	r2, [r3, #32]
 8002f46:	e008      	b.n	8002f5a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	1c59      	adds	r1, r3, #1
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6211      	str	r1, [r2, #32]
 8002f52:	781a      	ldrb	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	3b01      	subs	r3, #1
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	4619      	mov	r1, r3
 8002f68:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10f      	bne.n	8002f8e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68da      	ldr	r2, [r3, #12]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f7c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68da      	ldr	r2, [r3, #12]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f8c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	e000      	b.n	8002f94 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002f92:	2302      	movs	r3, #2
  }
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3714      	adds	r7, #20
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68da      	ldr	r2, [r3, #12]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fb6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f7ff fe5b 	bl	8002c7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b22      	cmp	r3, #34	; 0x22
 8002fe2:	d171      	bne.n	80030c8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fec:	d123      	bne.n	8003036 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10e      	bne.n	800301a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	b29b      	uxth	r3, r3
 8003004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003008:	b29a      	uxth	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003012:	1c9a      	adds	r2, r3, #2
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	629a      	str	r2, [r3, #40]	; 0x28
 8003018:	e029      	b.n	800306e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	b29b      	uxth	r3, r3
 8003022:	b2db      	uxtb	r3, r3
 8003024:	b29a      	uxth	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302e:	1c5a      	adds	r2, r3, #1
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	629a      	str	r2, [r3, #40]	; 0x28
 8003034:	e01b      	b.n	800306e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10a      	bne.n	8003054 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6858      	ldr	r0, [r3, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003048:	1c59      	adds	r1, r3, #1
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6291      	str	r1, [r2, #40]	; 0x28
 800304e:	b2c2      	uxtb	r2, r0
 8003050:	701a      	strb	r2, [r3, #0]
 8003052:	e00c      	b.n	800306e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	b2da      	uxtb	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003060:	1c58      	adds	r0, r3, #1
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	6288      	str	r0, [r1, #40]	; 0x28
 8003066:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003072:	b29b      	uxth	r3, r3
 8003074:	3b01      	subs	r3, #1
 8003076:	b29b      	uxth	r3, r3
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	4619      	mov	r1, r3
 800307c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800307e:	2b00      	cmp	r3, #0
 8003080:	d120      	bne.n	80030c4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68da      	ldr	r2, [r3, #12]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 0220 	bic.w	r2, r2, #32
 8003090:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68da      	ldr	r2, [r3, #12]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695a      	ldr	r2, [r3, #20]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 0201 	bic.w	r2, r2, #1
 80030b0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2220      	movs	r2, #32
 80030b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 fcb0 	bl	8003a20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80030c0:	2300      	movs	r3, #0
 80030c2:	e002      	b.n	80030ca <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	e000      	b.n	80030ca <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80030c8:	2302      	movs	r3, #2
  }
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
	...

080030d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030d4:	b5b0      	push	{r4, r5, r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	689a      	ldr	r2, [r3, #8]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	431a      	orrs	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	4313      	orrs	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003114:	f023 030c 	bic.w	r3, r3, #12
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6812      	ldr	r2, [r2, #0]
 800311c:	68f9      	ldr	r1, [r7, #12]
 800311e:	430b      	orrs	r3, r1
 8003120:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	699a      	ldr	r2, [r3, #24]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003140:	f040 80e4 	bne.w	800330c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4aab      	ldr	r2, [pc, #684]	; (80033f8 <UART_SetConfig+0x324>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d004      	beq.n	8003158 <UART_SetConfig+0x84>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4aaa      	ldr	r2, [pc, #680]	; (80033fc <UART_SetConfig+0x328>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d16c      	bne.n	8003232 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003158:	f7fe ff20 	bl	8001f9c <HAL_RCC_GetPCLK2Freq>
 800315c:	4602      	mov	r2, r0
 800315e:	4613      	mov	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4413      	add	r3, r2
 8003164:	009a      	lsls	r2, r3, #2
 8003166:	441a      	add	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003172:	4aa3      	ldr	r2, [pc, #652]	; (8003400 <UART_SetConfig+0x32c>)
 8003174:	fba2 2303 	umull	r2, r3, r2, r3
 8003178:	095b      	lsrs	r3, r3, #5
 800317a:	011c      	lsls	r4, r3, #4
 800317c:	f7fe ff0e 	bl	8001f9c <HAL_RCC_GetPCLK2Freq>
 8003180:	4602      	mov	r2, r0
 8003182:	4613      	mov	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	009a      	lsls	r2, r3, #2
 800318a:	441a      	add	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	fbb2 f5f3 	udiv	r5, r2, r3
 8003196:	f7fe ff01 	bl	8001f9c <HAL_RCC_GetPCLK2Freq>
 800319a:	4602      	mov	r2, r0
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	009a      	lsls	r2, r3, #2
 80031a4:	441a      	add	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b0:	4a93      	ldr	r2, [pc, #588]	; (8003400 <UART_SetConfig+0x32c>)
 80031b2:	fba2 2303 	umull	r2, r3, r2, r3
 80031b6:	095b      	lsrs	r3, r3, #5
 80031b8:	2264      	movs	r2, #100	; 0x64
 80031ba:	fb02 f303 	mul.w	r3, r2, r3
 80031be:	1aeb      	subs	r3, r5, r3
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	3332      	adds	r3, #50	; 0x32
 80031c4:	4a8e      	ldr	r2, [pc, #568]	; (8003400 <UART_SetConfig+0x32c>)
 80031c6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ca:	095b      	lsrs	r3, r3, #5
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031d2:	441c      	add	r4, r3
 80031d4:	f7fe fee2 	bl	8001f9c <HAL_RCC_GetPCLK2Freq>
 80031d8:	4602      	mov	r2, r0
 80031da:	4613      	mov	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	009a      	lsls	r2, r3, #2
 80031e2:	441a      	add	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	fbb2 f5f3 	udiv	r5, r2, r3
 80031ee:	f7fe fed5 	bl	8001f9c <HAL_RCC_GetPCLK2Freq>
 80031f2:	4602      	mov	r2, r0
 80031f4:	4613      	mov	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	009a      	lsls	r2, r3, #2
 80031fc:	441a      	add	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	fbb2 f3f3 	udiv	r3, r2, r3
 8003208:	4a7d      	ldr	r2, [pc, #500]	; (8003400 <UART_SetConfig+0x32c>)
 800320a:	fba2 2303 	umull	r2, r3, r2, r3
 800320e:	095b      	lsrs	r3, r3, #5
 8003210:	2264      	movs	r2, #100	; 0x64
 8003212:	fb02 f303 	mul.w	r3, r2, r3
 8003216:	1aeb      	subs	r3, r5, r3
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	3332      	adds	r3, #50	; 0x32
 800321c:	4a78      	ldr	r2, [pc, #480]	; (8003400 <UART_SetConfig+0x32c>)
 800321e:	fba2 2303 	umull	r2, r3, r2, r3
 8003222:	095b      	lsrs	r3, r3, #5
 8003224:	f003 0207 	and.w	r2, r3, #7
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4422      	add	r2, r4
 800322e:	609a      	str	r2, [r3, #8]
 8003230:	e154      	b.n	80034dc <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003232:	f7fe fe9f 	bl	8001f74 <HAL_RCC_GetPCLK1Freq>
 8003236:	4602      	mov	r2, r0
 8003238:	4613      	mov	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	009a      	lsls	r2, r3, #2
 8003240:	441a      	add	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	fbb2 f3f3 	udiv	r3, r2, r3
 800324c:	4a6c      	ldr	r2, [pc, #432]	; (8003400 <UART_SetConfig+0x32c>)
 800324e:	fba2 2303 	umull	r2, r3, r2, r3
 8003252:	095b      	lsrs	r3, r3, #5
 8003254:	011c      	lsls	r4, r3, #4
 8003256:	f7fe fe8d 	bl	8001f74 <HAL_RCC_GetPCLK1Freq>
 800325a:	4602      	mov	r2, r0
 800325c:	4613      	mov	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	009a      	lsls	r2, r3, #2
 8003264:	441a      	add	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	fbb2 f5f3 	udiv	r5, r2, r3
 8003270:	f7fe fe80 	bl	8001f74 <HAL_RCC_GetPCLK1Freq>
 8003274:	4602      	mov	r2, r0
 8003276:	4613      	mov	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4413      	add	r3, r2
 800327c:	009a      	lsls	r2, r3, #2
 800327e:	441a      	add	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	fbb2 f3f3 	udiv	r3, r2, r3
 800328a:	4a5d      	ldr	r2, [pc, #372]	; (8003400 <UART_SetConfig+0x32c>)
 800328c:	fba2 2303 	umull	r2, r3, r2, r3
 8003290:	095b      	lsrs	r3, r3, #5
 8003292:	2264      	movs	r2, #100	; 0x64
 8003294:	fb02 f303 	mul.w	r3, r2, r3
 8003298:	1aeb      	subs	r3, r5, r3
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	3332      	adds	r3, #50	; 0x32
 800329e:	4a58      	ldr	r2, [pc, #352]	; (8003400 <UART_SetConfig+0x32c>)
 80032a0:	fba2 2303 	umull	r2, r3, r2, r3
 80032a4:	095b      	lsrs	r3, r3, #5
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80032ac:	441c      	add	r4, r3
 80032ae:	f7fe fe61 	bl	8001f74 <HAL_RCC_GetPCLK1Freq>
 80032b2:	4602      	mov	r2, r0
 80032b4:	4613      	mov	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	009a      	lsls	r2, r3, #2
 80032bc:	441a      	add	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	fbb2 f5f3 	udiv	r5, r2, r3
 80032c8:	f7fe fe54 	bl	8001f74 <HAL_RCC_GetPCLK1Freq>
 80032cc:	4602      	mov	r2, r0
 80032ce:	4613      	mov	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	009a      	lsls	r2, r3, #2
 80032d6:	441a      	add	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e2:	4a47      	ldr	r2, [pc, #284]	; (8003400 <UART_SetConfig+0x32c>)
 80032e4:	fba2 2303 	umull	r2, r3, r2, r3
 80032e8:	095b      	lsrs	r3, r3, #5
 80032ea:	2264      	movs	r2, #100	; 0x64
 80032ec:	fb02 f303 	mul.w	r3, r2, r3
 80032f0:	1aeb      	subs	r3, r5, r3
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	3332      	adds	r3, #50	; 0x32
 80032f6:	4a42      	ldr	r2, [pc, #264]	; (8003400 <UART_SetConfig+0x32c>)
 80032f8:	fba2 2303 	umull	r2, r3, r2, r3
 80032fc:	095b      	lsrs	r3, r3, #5
 80032fe:	f003 0207 	and.w	r2, r3, #7
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4422      	add	r2, r4
 8003308:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800330a:	e0e7      	b.n	80034dc <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a39      	ldr	r2, [pc, #228]	; (80033f8 <UART_SetConfig+0x324>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d004      	beq.n	8003320 <UART_SetConfig+0x24c>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a38      	ldr	r2, [pc, #224]	; (80033fc <UART_SetConfig+0x328>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d171      	bne.n	8003404 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003320:	f7fe fe3c 	bl	8001f9c <HAL_RCC_GetPCLK2Freq>
 8003324:	4602      	mov	r2, r0
 8003326:	4613      	mov	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	009a      	lsls	r2, r3, #2
 800332e:	441a      	add	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	fbb2 f3f3 	udiv	r3, r2, r3
 800333a:	4a31      	ldr	r2, [pc, #196]	; (8003400 <UART_SetConfig+0x32c>)
 800333c:	fba2 2303 	umull	r2, r3, r2, r3
 8003340:	095b      	lsrs	r3, r3, #5
 8003342:	011c      	lsls	r4, r3, #4
 8003344:	f7fe fe2a 	bl	8001f9c <HAL_RCC_GetPCLK2Freq>
 8003348:	4602      	mov	r2, r0
 800334a:	4613      	mov	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	009a      	lsls	r2, r3, #2
 8003352:	441a      	add	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	fbb2 f5f3 	udiv	r5, r2, r3
 800335e:	f7fe fe1d 	bl	8001f9c <HAL_RCC_GetPCLK2Freq>
 8003362:	4602      	mov	r2, r0
 8003364:	4613      	mov	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	009a      	lsls	r2, r3, #2
 800336c:	441a      	add	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	fbb2 f3f3 	udiv	r3, r2, r3
 8003378:	4a21      	ldr	r2, [pc, #132]	; (8003400 <UART_SetConfig+0x32c>)
 800337a:	fba2 2303 	umull	r2, r3, r2, r3
 800337e:	095b      	lsrs	r3, r3, #5
 8003380:	2264      	movs	r2, #100	; 0x64
 8003382:	fb02 f303 	mul.w	r3, r2, r3
 8003386:	1aeb      	subs	r3, r5, r3
 8003388:	011b      	lsls	r3, r3, #4
 800338a:	3332      	adds	r3, #50	; 0x32
 800338c:	4a1c      	ldr	r2, [pc, #112]	; (8003400 <UART_SetConfig+0x32c>)
 800338e:	fba2 2303 	umull	r2, r3, r2, r3
 8003392:	095b      	lsrs	r3, r3, #5
 8003394:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003398:	441c      	add	r4, r3
 800339a:	f7fe fdff 	bl	8001f9c <HAL_RCC_GetPCLK2Freq>
 800339e:	4602      	mov	r2, r0
 80033a0:	4613      	mov	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	009a      	lsls	r2, r3, #2
 80033a8:	441a      	add	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	fbb2 f5f3 	udiv	r5, r2, r3
 80033b4:	f7fe fdf2 	bl	8001f9c <HAL_RCC_GetPCLK2Freq>
 80033b8:	4602      	mov	r2, r0
 80033ba:	4613      	mov	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4413      	add	r3, r2
 80033c0:	009a      	lsls	r2, r3, #2
 80033c2:	441a      	add	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ce:	4a0c      	ldr	r2, [pc, #48]	; (8003400 <UART_SetConfig+0x32c>)
 80033d0:	fba2 2303 	umull	r2, r3, r2, r3
 80033d4:	095b      	lsrs	r3, r3, #5
 80033d6:	2264      	movs	r2, #100	; 0x64
 80033d8:	fb02 f303 	mul.w	r3, r2, r3
 80033dc:	1aeb      	subs	r3, r5, r3
 80033de:	011b      	lsls	r3, r3, #4
 80033e0:	3332      	adds	r3, #50	; 0x32
 80033e2:	4a07      	ldr	r2, [pc, #28]	; (8003400 <UART_SetConfig+0x32c>)
 80033e4:	fba2 2303 	umull	r2, r3, r2, r3
 80033e8:	095b      	lsrs	r3, r3, #5
 80033ea:	f003 020f 	and.w	r2, r3, #15
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4422      	add	r2, r4
 80033f4:	609a      	str	r2, [r3, #8]
 80033f6:	e071      	b.n	80034dc <UART_SetConfig+0x408>
 80033f8:	40011000 	.word	0x40011000
 80033fc:	40011400 	.word	0x40011400
 8003400:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003404:	f7fe fdb6 	bl	8001f74 <HAL_RCC_GetPCLK1Freq>
 8003408:	4602      	mov	r2, r0
 800340a:	4613      	mov	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	009a      	lsls	r2, r3, #2
 8003412:	441a      	add	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	fbb2 f3f3 	udiv	r3, r2, r3
 800341e:	4a31      	ldr	r2, [pc, #196]	; (80034e4 <UART_SetConfig+0x410>)
 8003420:	fba2 2303 	umull	r2, r3, r2, r3
 8003424:	095b      	lsrs	r3, r3, #5
 8003426:	011c      	lsls	r4, r3, #4
 8003428:	f7fe fda4 	bl	8001f74 <HAL_RCC_GetPCLK1Freq>
 800342c:	4602      	mov	r2, r0
 800342e:	4613      	mov	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	009a      	lsls	r2, r3, #2
 8003436:	441a      	add	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	fbb2 f5f3 	udiv	r5, r2, r3
 8003442:	f7fe fd97 	bl	8001f74 <HAL_RCC_GetPCLK1Freq>
 8003446:	4602      	mov	r2, r0
 8003448:	4613      	mov	r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	009a      	lsls	r2, r3, #2
 8003450:	441a      	add	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	fbb2 f3f3 	udiv	r3, r2, r3
 800345c:	4a21      	ldr	r2, [pc, #132]	; (80034e4 <UART_SetConfig+0x410>)
 800345e:	fba2 2303 	umull	r2, r3, r2, r3
 8003462:	095b      	lsrs	r3, r3, #5
 8003464:	2264      	movs	r2, #100	; 0x64
 8003466:	fb02 f303 	mul.w	r3, r2, r3
 800346a:	1aeb      	subs	r3, r5, r3
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	3332      	adds	r3, #50	; 0x32
 8003470:	4a1c      	ldr	r2, [pc, #112]	; (80034e4 <UART_SetConfig+0x410>)
 8003472:	fba2 2303 	umull	r2, r3, r2, r3
 8003476:	095b      	lsrs	r3, r3, #5
 8003478:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800347c:	441c      	add	r4, r3
 800347e:	f7fe fd79 	bl	8001f74 <HAL_RCC_GetPCLK1Freq>
 8003482:	4602      	mov	r2, r0
 8003484:	4613      	mov	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	009a      	lsls	r2, r3, #2
 800348c:	441a      	add	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	fbb2 f5f3 	udiv	r5, r2, r3
 8003498:	f7fe fd6c 	bl	8001f74 <HAL_RCC_GetPCLK1Freq>
 800349c:	4602      	mov	r2, r0
 800349e:	4613      	mov	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4413      	add	r3, r2
 80034a4:	009a      	lsls	r2, r3, #2
 80034a6:	441a      	add	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b2:	4a0c      	ldr	r2, [pc, #48]	; (80034e4 <UART_SetConfig+0x410>)
 80034b4:	fba2 2303 	umull	r2, r3, r2, r3
 80034b8:	095b      	lsrs	r3, r3, #5
 80034ba:	2264      	movs	r2, #100	; 0x64
 80034bc:	fb02 f303 	mul.w	r3, r2, r3
 80034c0:	1aeb      	subs	r3, r5, r3
 80034c2:	011b      	lsls	r3, r3, #4
 80034c4:	3332      	adds	r3, #50	; 0x32
 80034c6:	4a07      	ldr	r2, [pc, #28]	; (80034e4 <UART_SetConfig+0x410>)
 80034c8:	fba2 2303 	umull	r2, r3, r2, r3
 80034cc:	095b      	lsrs	r3, r3, #5
 80034ce:	f003 020f 	and.w	r2, r3, #15
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4422      	add	r2, r4
 80034d8:	609a      	str	r2, [r3, #8]
}
 80034da:	e7ff      	b.n	80034dc <UART_SetConfig+0x408>
 80034dc:	bf00      	nop
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bdb0      	pop	{r4, r5, r7, pc}
 80034e4:	51eb851f 	.word	0x51eb851f

080034e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034ee:	f7fd f809 	bl	8000504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034f2:	f000 f901 	bl	80036f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80034f6:	f000 fa23 	bl	8003940 <MX_GPIO_Init>
  MX_DMA_Init();
 80034fa:	f000 fa01 	bl	8003900 <MX_DMA_Init>
  MX_CAN1_Init();
 80034fe:	f000 f969 	bl	80037d4 <MX_CAN1_Init>
  MX_CAN2_Init();
 8003502:	f000 f99d 	bl	8003840 <MX_CAN2_Init>
  MX_USART2_UART_Init();
 8003506:	f000 f9d1 	bl	80038ac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //CANの設定
   //フィルタの設定
   sFilterConfig.FilterBank = 0;
 800350a:	4b6f      	ldr	r3, [pc, #444]	; (80036c8 <main+0x1e0>)
 800350c:	2200      	movs	r2, #0
 800350e:	615a      	str	r2, [r3, #20]
   sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8003510:	4b6d      	ldr	r3, [pc, #436]	; (80036c8 <main+0x1e0>)
 8003512:	2200      	movs	r2, #0
 8003514:	619a      	str	r2, [r3, #24]
   sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8003516:	4b6c      	ldr	r3, [pc, #432]	; (80036c8 <main+0x1e0>)
 8003518:	2201      	movs	r2, #1
 800351a:	61da      	str	r2, [r3, #28]
   sFilterConfig.FilterIdHigh = 0x0000;
 800351c:	4b6a      	ldr	r3, [pc, #424]	; (80036c8 <main+0x1e0>)
 800351e:	2200      	movs	r2, #0
 8003520:	601a      	str	r2, [r3, #0]
   sFilterConfig.FilterIdLow = 0x0000;
 8003522:	4b69      	ldr	r3, [pc, #420]	; (80036c8 <main+0x1e0>)
 8003524:	2200      	movs	r2, #0
 8003526:	605a      	str	r2, [r3, #4]
   sFilterConfig.FilterMaskIdHigh = 0x0000;
 8003528:	4b67      	ldr	r3, [pc, #412]	; (80036c8 <main+0x1e0>)
 800352a:	2200      	movs	r2, #0
 800352c:	609a      	str	r2, [r3, #8]
   sFilterConfig.FilterMaskIdLow = 0x0000;
 800352e:	4b66      	ldr	r3, [pc, #408]	; (80036c8 <main+0x1e0>)
 8003530:	2200      	movs	r2, #0
 8003532:	60da      	str	r2, [r3, #12]
   sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8003534:	4b64      	ldr	r3, [pc, #400]	; (80036c8 <main+0x1e0>)
 8003536:	2200      	movs	r2, #0
 8003538:	611a      	str	r2, [r3, #16]
   sFilterConfig.FilterActivation=ENABLE;
 800353a:	4b63      	ldr	r3, [pc, #396]	; (80036c8 <main+0x1e0>)
 800353c:	2201      	movs	r2, #1
 800353e:	621a      	str	r2, [r3, #32]
   sFilterConfig.SlaveStartFilterBank=14;
 8003540:	4b61      	ldr	r3, [pc, #388]	; (80036c8 <main+0x1e0>)
 8003542:	220e      	movs	r2, #14
 8003544:	625a      	str	r2, [r3, #36]	; 0x24

   //フィルタをcan1に適用
   if(HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig) != HAL_OK)
 8003546:	4960      	ldr	r1, [pc, #384]	; (80036c8 <main+0x1e0>)
 8003548:	4860      	ldr	r0, [pc, #384]	; (80036cc <main+0x1e4>)
 800354a:	f7fd f949 	bl	80007e0 <HAL_CAN_ConfigFilter>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <main+0x70>
   {
     Error_Handler();
 8003554:	f000 fa9c 	bl	8003a90 <Error_Handler>
   }

   //can1をスタート
   if(HAL_CAN_Start(&hcan1)!=HAL_OK)
 8003558:	485c      	ldr	r0, [pc, #368]	; (80036cc <main+0x1e4>)
 800355a:	f7fd fa21 	bl	80009a0 <HAL_CAN_Start>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <main+0x80>
   {
     Error_Handler();
 8003564:	f000 fa94 	bl	8003a90 <Error_Handler>
   }

   //can1の割り込みを許可
   if(HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8003568:	2103      	movs	r1, #3
 800356a:	4858      	ldr	r0, [pc, #352]	; (80036cc <main+0x1e4>)
 800356c:	f7fd fb6f 	bl	8000c4e <HAL_CAN_ActivateNotification>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <main+0x92>
   {
 	Error_Handler();
 8003576:	f000 fa8b 	bl	8003a90 <Error_Handler>
   }


  //HAL_UART_Receive_DMA(&huart2, UART1_Data, 6);//6文字受信したら割り込み発生させる

   uint8_t flag =0;
 800357a:	2300      	movs	r3, #0
 800357c:	71fb      	strb	r3, [r7, #7]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //受信割り込みの開始=6byte受け取ったら次の処理へ
	  get_uart_flag=0;
 800357e:	4b54      	ldr	r3, [pc, #336]	; (80036d0 <main+0x1e8>)
 8003580:	2200      	movs	r2, #0
 8003582:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_DMA(&huart2, UART1_Data, 6);
 8003584:	2206      	movs	r2, #6
 8003586:	4953      	ldr	r1, [pc, #332]	; (80036d4 <main+0x1ec>)
 8003588:	4853      	ldr	r0, [pc, #332]	; (80036d8 <main+0x1f0>)
 800358a:	f7ff f9fb 	bl	8002984 <HAL_UART_Receive_DMA>
	  //受信するまで待つ
	  while(!get_uart_flag){}
 800358e:	bf00      	nop
 8003590:	4b4f      	ldr	r3, [pc, #316]	; (80036d0 <main+0x1e8>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0fb      	beq.n	8003590 <main+0xa8>

	  //can通信の処理
	  //todo can通信を二つに対応させる=>UARTがある数より大きい=CAN2へ
	  can_id = can_id_list[UART1_Data[0]]; //uartで受け取った値の0~7bit:can_id_listのデータ
 8003598:	4b4e      	ldr	r3, [pc, #312]	; (80036d4 <main+0x1ec>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	461a      	mov	r2, r3
 800359e:	4b4f      	ldr	r3, [pc, #316]	; (80036dc <main+0x1f4>)
 80035a0:	5c9a      	ldrb	r2, [r3, r2]
 80035a2:	4b4f      	ldr	r3, [pc, #316]	; (80036e0 <main+0x1f8>)
 80035a4:	701a      	strb	r2, [r3, #0]
	  //can_idが0の場合は何もしない処理
	  if(can_id == 0){
 80035a6:	4b4e      	ldr	r3, [pc, #312]	; (80036e0 <main+0x1f8>)
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 8089 	beq.w	80036c2 <main+0x1da>
		  continue;
	  }
	  cmd_data = UART1_Data[1];//uartで受け取った値の8~15bit:canのコマンド
 80035b0:	4b48      	ldr	r3, [pc, #288]	; (80036d4 <main+0x1ec>)
 80035b2:	785a      	ldrb	r2, [r3, #1]
 80035b4:	4b4b      	ldr	r3, [pc, #300]	; (80036e4 <main+0x1fc>)
 80035b6:	701a      	strb	r2, [r3, #0]
	  get_can_flag=0; //canデータ受信用のフラグを0に
 80035b8:	4b4b      	ldr	r3, [pc, #300]	; (80036e8 <main+0x200>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	701a      	strb	r2, [r3, #0]
	  switch(cmd_data){
 80035be:	4b49      	ldr	r3, [pc, #292]	; (80036e4 <main+0x1fc>)
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d002      	beq.n	80035cc <main+0xe4>
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d03e      	beq.n	8003648 <main+0x160>
 80035ca:	e071      	b.n	80036b0 <main+0x1c8>
	  	  case 0x01://ポジションを送る
	  		  get_can_flag = 1;//canデータを受け取らないので1に
 80035cc:	4b46      	ldr	r3, [pc, #280]	; (80036e8 <main+0x200>)
 80035ce:	2201      	movs	r2, #1
 80035d0:	701a      	strb	r2, [r3, #0]
	  		  TxHeader.StdId=(can_id << 5) + (0x00C); //can_id, コントロールcmd
 80035d2:	4b43      	ldr	r3, [pc, #268]	; (80036e0 <main+0x1f8>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	015b      	lsls	r3, r3, #5
 80035d8:	330c      	adds	r3, #12
 80035da:	461a      	mov	r2, r3
 80035dc:	4b43      	ldr	r3, [pc, #268]	; (80036ec <main+0x204>)
 80035de:	601a      	str	r2, [r3, #0]
	  		  TxHeader.RTR = 0;//CAN_RTR_DATA;
 80035e0:	4b42      	ldr	r3, [pc, #264]	; (80036ec <main+0x204>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	60da      	str	r2, [r3, #12]
	  		  TxHeader.IDE = CAN_ID_STD;
 80035e6:	4b41      	ldr	r3, [pc, #260]	; (80036ec <main+0x204>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	609a      	str	r2, [r3, #8]
	  		  TxHeader.DLC = 0x08;
 80035ec:	4b3f      	ldr	r3, [pc, #252]	; (80036ec <main+0x204>)
 80035ee:	2208      	movs	r2, #8
 80035f0:	611a      	str	r2, [r3, #16]
	  		  TxHeader.TransmitGlobalTime = DISABLE;
 80035f2:	4b3e      	ldr	r3, [pc, #248]	; (80036ec <main+0x204>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	751a      	strb	r2, [r3, #20]
	  		  TxData[0] = UART1_Data[2];
 80035f8:	4b36      	ldr	r3, [pc, #216]	; (80036d4 <main+0x1ec>)
 80035fa:	789a      	ldrb	r2, [r3, #2]
 80035fc:	4b3c      	ldr	r3, [pc, #240]	; (80036f0 <main+0x208>)
 80035fe:	701a      	strb	r2, [r3, #0]
	  		  TxData[1] = UART1_Data[3] >>  8;
 8003600:	4b34      	ldr	r3, [pc, #208]	; (80036d4 <main+0x1ec>)
 8003602:	78db      	ldrb	r3, [r3, #3]
 8003604:	121b      	asrs	r3, r3, #8
 8003606:	b2da      	uxtb	r2, r3
 8003608:	4b39      	ldr	r3, [pc, #228]	; (80036f0 <main+0x208>)
 800360a:	705a      	strb	r2, [r3, #1]
	  		  TxData[2] = UART1_Data[4] >> 16;
 800360c:	4b31      	ldr	r3, [pc, #196]	; (80036d4 <main+0x1ec>)
 800360e:	791b      	ldrb	r3, [r3, #4]
 8003610:	141b      	asrs	r3, r3, #16
 8003612:	b2da      	uxtb	r2, r3
 8003614:	4b36      	ldr	r3, [pc, #216]	; (80036f0 <main+0x208>)
 8003616:	709a      	strb	r2, [r3, #2]
	  		  TxData[3] = UART1_Data[5] >> 24;
 8003618:	4b2e      	ldr	r3, [pc, #184]	; (80036d4 <main+0x1ec>)
 800361a:	795b      	ldrb	r3, [r3, #5]
 800361c:	161b      	asrs	r3, r3, #24
 800361e:	b2da      	uxtb	r2, r3
 8003620:	4b33      	ldr	r3, [pc, #204]	; (80036f0 <main+0x208>)
 8003622:	70da      	strb	r2, [r3, #3]
	  		  TxData[4] = 0;
 8003624:	4b32      	ldr	r3, [pc, #200]	; (80036f0 <main+0x208>)
 8003626:	2200      	movs	r2, #0
 8003628:	711a      	strb	r2, [r3, #4]
	  		  TxData[5] = 0;
 800362a:	4b31      	ldr	r3, [pc, #196]	; (80036f0 <main+0x208>)
 800362c:	2200      	movs	r2, #0
 800362e:	715a      	strb	r2, [r3, #5]
	  		  TxData[6] = 0;
 8003630:	4b2f      	ldr	r3, [pc, #188]	; (80036f0 <main+0x208>)
 8003632:	2200      	movs	r2, #0
 8003634:	719a      	strb	r2, [r3, #6]
	  		  TxData[7] = 0;
 8003636:	4b2e      	ldr	r3, [pc, #184]	; (80036f0 <main+0x208>)
 8003638:	2200      	movs	r2, #0
 800363a:	71da      	strb	r2, [r3, #7]
	  		  //HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox);//todo can2への対応
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 800363c:	2201      	movs	r2, #1
 800363e:	2120      	movs	r1, #32
 8003640:	482c      	ldr	r0, [pc, #176]	; (80036f4 <main+0x20c>)
 8003642:	f7fe fb8f 	bl	8001d64 <HAL_GPIO_WritePin>
	  		  break;
 8003646:	e036      	b.n	80036b6 <main+0x1ce>

	  	  case 0x02://ポジションを受け取る
	  		  get_can_flag = 1;
 8003648:	4b27      	ldr	r3, [pc, #156]	; (80036e8 <main+0x200>)
 800364a:	2201      	movs	r2, #1
 800364c:	701a      	strb	r2, [r3, #0]
	  		  TxHeader.StdId=(can_id << 5) + (0x009); //can_id, コントロールcmd
 800364e:	4b24      	ldr	r3, [pc, #144]	; (80036e0 <main+0x1f8>)
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	015b      	lsls	r3, r3, #5
 8003654:	3309      	adds	r3, #9
 8003656:	461a      	mov	r2, r3
 8003658:	4b24      	ldr	r3, [pc, #144]	; (80036ec <main+0x204>)
 800365a:	601a      	str	r2, [r3, #0]
	  		  TxHeader.RTR = 2;//CAN_RTR_DATA;
 800365c:	4b23      	ldr	r3, [pc, #140]	; (80036ec <main+0x204>)
 800365e:	2202      	movs	r2, #2
 8003660:	60da      	str	r2, [r3, #12]
	  		  TxHeader.IDE = CAN_ID_STD;
 8003662:	4b22      	ldr	r3, [pc, #136]	; (80036ec <main+0x204>)
 8003664:	2200      	movs	r2, #0
 8003666:	609a      	str	r2, [r3, #8]
	  		  TxHeader.DLC = 0x08;
 8003668:	4b20      	ldr	r3, [pc, #128]	; (80036ec <main+0x204>)
 800366a:	2208      	movs	r2, #8
 800366c:	611a      	str	r2, [r3, #16]
	  		  TxHeader.TransmitGlobalTime = DISABLE;
 800366e:	4b1f      	ldr	r3, [pc, #124]	; (80036ec <main+0x204>)
 8003670:	2200      	movs	r2, #0
 8003672:	751a      	strb	r2, [r3, #20]
	  		  TxData[0] = 0;
 8003674:	4b1e      	ldr	r3, [pc, #120]	; (80036f0 <main+0x208>)
 8003676:	2200      	movs	r2, #0
 8003678:	701a      	strb	r2, [r3, #0]
	  		  TxData[1] = 0;
 800367a:	4b1d      	ldr	r3, [pc, #116]	; (80036f0 <main+0x208>)
 800367c:	2200      	movs	r2, #0
 800367e:	705a      	strb	r2, [r3, #1]
	  		  TxData[2] = 0;
 8003680:	4b1b      	ldr	r3, [pc, #108]	; (80036f0 <main+0x208>)
 8003682:	2200      	movs	r2, #0
 8003684:	709a      	strb	r2, [r3, #2]
	  		  TxData[3] = 0;
 8003686:	4b1a      	ldr	r3, [pc, #104]	; (80036f0 <main+0x208>)
 8003688:	2200      	movs	r2, #0
 800368a:	70da      	strb	r2, [r3, #3]
	  		  TxData[4] = 0;
 800368c:	4b18      	ldr	r3, [pc, #96]	; (80036f0 <main+0x208>)
 800368e:	2200      	movs	r2, #0
 8003690:	711a      	strb	r2, [r3, #4]
	  		  TxData[5] = 0;
 8003692:	4b17      	ldr	r3, [pc, #92]	; (80036f0 <main+0x208>)
 8003694:	2200      	movs	r2, #0
 8003696:	715a      	strb	r2, [r3, #5]
	  		  TxData[6] = 0;
 8003698:	4b15      	ldr	r3, [pc, #84]	; (80036f0 <main+0x208>)
 800369a:	2200      	movs	r2, #0
 800369c:	719a      	strb	r2, [r3, #6]
	  		  TxData[7] = 0;
 800369e:	4b14      	ldr	r3, [pc, #80]	; (80036f0 <main+0x208>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	71da      	strb	r2, [r3, #7]
	  		  //HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox);//todo can2への対応
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80036a4:	2200      	movs	r2, #0
 80036a6:	2120      	movs	r1, #32
 80036a8:	4812      	ldr	r0, [pc, #72]	; (80036f4 <main+0x20c>)
 80036aa:	f7fe fb5b 	bl	8001d64 <HAL_GPIO_WritePin>
	  		  break;
 80036ae:	e002      	b.n	80036b6 <main+0x1ce>

	  	  default:
	  		 get_can_flag=1;
 80036b0:	4b0d      	ldr	r3, [pc, #52]	; (80036e8 <main+0x200>)
 80036b2:	2201      	movs	r2, #1
 80036b4:	701a      	strb	r2, [r3, #0]
	  }
	  while(!get_can_flag){}
 80036b6:	bf00      	nop
 80036b8:	4b0b      	ldr	r3, [pc, #44]	; (80036e8 <main+0x200>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0fb      	beq.n	80036b8 <main+0x1d0>
 80036c0:	e75d      	b.n	800357e <main+0x96>
		  continue;
 80036c2:	bf00      	nop
	  get_uart_flag=0;
 80036c4:	e75b      	b.n	800357e <main+0x96>
 80036c6:	bf00      	nop
 80036c8:	20000038 	.word	0x20000038
 80036cc:	20000144 	.word	0x20000144
 80036d0:	2000002f 	.word	0x2000002f
 80036d4:	200000e8 	.word	0x200000e8
 80036d8:	20000104 	.word	0x20000104
 80036dc:	20000008 	.word	0x20000008
 80036e0:	2000002c 	.word	0x2000002c
 80036e4:	2000002d 	.word	0x2000002d
 80036e8:	2000002e 	.word	0x2000002e
 80036ec:	2000016c 	.word	0x2000016c
 80036f0:	200000f0 	.word	0x200000f0
 80036f4:	40020000 	.word	0x40020000

080036f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b094      	sub	sp, #80	; 0x50
 80036fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036fe:	f107 031c 	add.w	r3, r7, #28
 8003702:	2234      	movs	r2, #52	; 0x34
 8003704:	2100      	movs	r1, #0
 8003706:	4618      	mov	r0, r3
 8003708:	f000 fc46 	bl	8003f98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800370c:	f107 0308 	add.w	r3, r7, #8
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	605a      	str	r2, [r3, #4]
 8003716:	609a      	str	r2, [r3, #8]
 8003718:	60da      	str	r2, [r3, #12]
 800371a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800371c:	2300      	movs	r3, #0
 800371e:	607b      	str	r3, [r7, #4]
 8003720:	4b2a      	ldr	r3, [pc, #168]	; (80037cc <SystemClock_Config+0xd4>)
 8003722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003724:	4a29      	ldr	r2, [pc, #164]	; (80037cc <SystemClock_Config+0xd4>)
 8003726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800372a:	6413      	str	r3, [r2, #64]	; 0x40
 800372c:	4b27      	ldr	r3, [pc, #156]	; (80037cc <SystemClock_Config+0xd4>)
 800372e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003734:	607b      	str	r3, [r7, #4]
 8003736:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003738:	2300      	movs	r3, #0
 800373a:	603b      	str	r3, [r7, #0]
 800373c:	4b24      	ldr	r3, [pc, #144]	; (80037d0 <SystemClock_Config+0xd8>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003744:	4a22      	ldr	r2, [pc, #136]	; (80037d0 <SystemClock_Config+0xd8>)
 8003746:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800374a:	6013      	str	r3, [r2, #0]
 800374c:	4b20      	ldr	r3, [pc, #128]	; (80037d0 <SystemClock_Config+0xd8>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003754:	603b      	str	r3, [r7, #0]
 8003756:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003758:	2302      	movs	r3, #2
 800375a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800375c:	2301      	movs	r3, #1
 800375e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003760:	2310      	movs	r3, #16
 8003762:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003764:	2302      	movs	r3, #2
 8003766:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003768:	2300      	movs	r3, #0
 800376a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800376c:	2310      	movs	r3, #16
 800376e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003770:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003774:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003776:	2304      	movs	r3, #4
 8003778:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800377a:	2302      	movs	r3, #2
 800377c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800377e:	2302      	movs	r3, #2
 8003780:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003782:	f107 031c 	add.w	r3, r7, #28
 8003786:	4618      	mov	r0, r3
 8003788:	f7fe fdbc 	bl	8002304 <HAL_RCC_OscConfig>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8003792:	f000 f97d 	bl	8003a90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003796:	230f      	movs	r3, #15
 8003798:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800379a:	2302      	movs	r3, #2
 800379c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800379e:	2300      	movs	r3, #0
 80037a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80037a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80037a8:	2300      	movs	r3, #0
 80037aa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80037ac:	f107 0308 	add.w	r3, r7, #8
 80037b0:	2102      	movs	r1, #2
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7fe faf0 	bl	8001d98 <HAL_RCC_ClockConfig>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80037be:	f000 f967 	bl	8003a90 <Error_Handler>
  }
}
 80037c2:	bf00      	nop
 80037c4:	3750      	adds	r7, #80	; 0x50
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	40023800 	.word	0x40023800
 80037d0:	40007000 	.word	0x40007000

080037d4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80037d8:	4b17      	ldr	r3, [pc, #92]	; (8003838 <MX_CAN1_Init+0x64>)
 80037da:	4a18      	ldr	r2, [pc, #96]	; (800383c <MX_CAN1_Init+0x68>)
 80037dc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80037de:	4b16      	ldr	r3, [pc, #88]	; (8003838 <MX_CAN1_Init+0x64>)
 80037e0:	2206      	movs	r2, #6
 80037e2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80037e4:	4b14      	ldr	r3, [pc, #80]	; (8003838 <MX_CAN1_Init+0x64>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80037ea:	4b13      	ldr	r3, [pc, #76]	; (8003838 <MX_CAN1_Init+0x64>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80037f0:	4b11      	ldr	r3, [pc, #68]	; (8003838 <MX_CAN1_Init+0x64>)
 80037f2:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80037f6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80037f8:	4b0f      	ldr	r3, [pc, #60]	; (8003838 <MX_CAN1_Init+0x64>)
 80037fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80037fe:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003800:	4b0d      	ldr	r3, [pc, #52]	; (8003838 <MX_CAN1_Init+0x64>)
 8003802:	2200      	movs	r2, #0
 8003804:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003806:	4b0c      	ldr	r3, [pc, #48]	; (8003838 <MX_CAN1_Init+0x64>)
 8003808:	2200      	movs	r2, #0
 800380a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800380c:	4b0a      	ldr	r3, [pc, #40]	; (8003838 <MX_CAN1_Init+0x64>)
 800380e:	2200      	movs	r2, #0
 8003810:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8003812:	4b09      	ldr	r3, [pc, #36]	; (8003838 <MX_CAN1_Init+0x64>)
 8003814:	2200      	movs	r2, #0
 8003816:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003818:	4b07      	ldr	r3, [pc, #28]	; (8003838 <MX_CAN1_Init+0x64>)
 800381a:	2200      	movs	r2, #0
 800381c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800381e:	4b06      	ldr	r3, [pc, #24]	; (8003838 <MX_CAN1_Init+0x64>)
 8003820:	2200      	movs	r2, #0
 8003822:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003824:	4804      	ldr	r0, [pc, #16]	; (8003838 <MX_CAN1_Init+0x64>)
 8003826:	f7fc fedf 	bl	80005e8 <HAL_CAN_Init>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8003830:	f000 f92e 	bl	8003a90 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8003834:	bf00      	nop
 8003836:	bd80      	pop	{r7, pc}
 8003838:	20000144 	.word	0x20000144
 800383c:	40006400 	.word	0x40006400

08003840 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8003844:	4b17      	ldr	r3, [pc, #92]	; (80038a4 <MX_CAN2_Init+0x64>)
 8003846:	4a18      	ldr	r2, [pc, #96]	; (80038a8 <MX_CAN2_Init+0x68>)
 8003848:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 6;
 800384a:	4b16      	ldr	r3, [pc, #88]	; (80038a4 <MX_CAN2_Init+0x64>)
 800384c:	2206      	movs	r2, #6
 800384e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8003850:	4b14      	ldr	r3, [pc, #80]	; (80038a4 <MX_CAN2_Init+0x64>)
 8003852:	2200      	movs	r2, #0
 8003854:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003856:	4b13      	ldr	r3, [pc, #76]	; (80038a4 <MX_CAN2_Init+0x64>)
 8003858:	2200      	movs	r2, #0
 800385a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_11TQ;
 800385c:	4b11      	ldr	r3, [pc, #68]	; (80038a4 <MX_CAN2_Init+0x64>)
 800385e:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8003862:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8003864:	4b0f      	ldr	r3, [pc, #60]	; (80038a4 <MX_CAN2_Init+0x64>)
 8003866:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800386a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800386c:	4b0d      	ldr	r3, [pc, #52]	; (80038a4 <MX_CAN2_Init+0x64>)
 800386e:	2200      	movs	r2, #0
 8003870:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8003872:	4b0c      	ldr	r3, [pc, #48]	; (80038a4 <MX_CAN2_Init+0x64>)
 8003874:	2200      	movs	r2, #0
 8003876:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8003878:	4b0a      	ldr	r3, [pc, #40]	; (80038a4 <MX_CAN2_Init+0x64>)
 800387a:	2200      	movs	r2, #0
 800387c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800387e:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <MX_CAN2_Init+0x64>)
 8003880:	2200      	movs	r2, #0
 8003882:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8003884:	4b07      	ldr	r3, [pc, #28]	; (80038a4 <MX_CAN2_Init+0x64>)
 8003886:	2200      	movs	r2, #0
 8003888:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800388a:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <MX_CAN2_Init+0x64>)
 800388c:	2200      	movs	r2, #0
 800388e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8003890:	4804      	ldr	r0, [pc, #16]	; (80038a4 <MX_CAN2_Init+0x64>)
 8003892:	f7fc fea9 	bl	80005e8 <HAL_CAN_Init>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 800389c:	f000 f8f8 	bl	8003a90 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80038a0:	bf00      	nop
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	200000c0 	.word	0x200000c0
 80038a8:	40006800 	.word	0x40006800

080038ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80038b0:	4b11      	ldr	r3, [pc, #68]	; (80038f8 <MX_USART2_UART_Init+0x4c>)
 80038b2:	4a12      	ldr	r2, [pc, #72]	; (80038fc <MX_USART2_UART_Init+0x50>)
 80038b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80038b6:	4b10      	ldr	r3, [pc, #64]	; (80038f8 <MX_USART2_UART_Init+0x4c>)
 80038b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80038bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80038be:	4b0e      	ldr	r3, [pc, #56]	; (80038f8 <MX_USART2_UART_Init+0x4c>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80038c4:	4b0c      	ldr	r3, [pc, #48]	; (80038f8 <MX_USART2_UART_Init+0x4c>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80038ca:	4b0b      	ldr	r3, [pc, #44]	; (80038f8 <MX_USART2_UART_Init+0x4c>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80038d0:	4b09      	ldr	r3, [pc, #36]	; (80038f8 <MX_USART2_UART_Init+0x4c>)
 80038d2:	220c      	movs	r2, #12
 80038d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038d6:	4b08      	ldr	r3, [pc, #32]	; (80038f8 <MX_USART2_UART_Init+0x4c>)
 80038d8:	2200      	movs	r2, #0
 80038da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80038dc:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <MX_USART2_UART_Init+0x4c>)
 80038de:	2200      	movs	r2, #0
 80038e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80038e2:	4805      	ldr	r0, [pc, #20]	; (80038f8 <MX_USART2_UART_Init+0x4c>)
 80038e4:	f7fe ff68 	bl	80027b8 <HAL_UART_Init>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80038ee:	f000 f8cf 	bl	8003a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80038f2:	bf00      	nop
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20000104 	.word	0x20000104
 80038fc:	40004400 	.word	0x40004400

08003900 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003906:	2300      	movs	r3, #0
 8003908:	607b      	str	r3, [r7, #4]
 800390a:	4b0c      	ldr	r3, [pc, #48]	; (800393c <MX_DMA_Init+0x3c>)
 800390c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390e:	4a0b      	ldr	r2, [pc, #44]	; (800393c <MX_DMA_Init+0x3c>)
 8003910:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003914:	6313      	str	r3, [r2, #48]	; 0x30
 8003916:	4b09      	ldr	r3, [pc, #36]	; (800393c <MX_DMA_Init+0x3c>)
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800391e:	607b      	str	r3, [r7, #4]
 8003920:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003922:	2200      	movs	r2, #0
 8003924:	2100      	movs	r1, #0
 8003926:	2010      	movs	r0, #16
 8003928:	f7fd fcbb 	bl	80012a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800392c:	2010      	movs	r0, #16
 800392e:	f7fd fcd4 	bl	80012da <HAL_NVIC_EnableIRQ>

}
 8003932:	bf00      	nop
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	40023800 	.word	0x40023800

08003940 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b08a      	sub	sp, #40	; 0x28
 8003944:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003946:	f107 0314 	add.w	r3, r7, #20
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	605a      	str	r2, [r3, #4]
 8003950:	609a      	str	r2, [r3, #8]
 8003952:	60da      	str	r2, [r3, #12]
 8003954:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003956:	2300      	movs	r3, #0
 8003958:	613b      	str	r3, [r7, #16]
 800395a:	4b2d      	ldr	r3, [pc, #180]	; (8003a10 <MX_GPIO_Init+0xd0>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	4a2c      	ldr	r2, [pc, #176]	; (8003a10 <MX_GPIO_Init+0xd0>)
 8003960:	f043 0304 	orr.w	r3, r3, #4
 8003964:	6313      	str	r3, [r2, #48]	; 0x30
 8003966:	4b2a      	ldr	r3, [pc, #168]	; (8003a10 <MX_GPIO_Init+0xd0>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	f003 0304 	and.w	r3, r3, #4
 800396e:	613b      	str	r3, [r7, #16]
 8003970:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003972:	2300      	movs	r3, #0
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	4b26      	ldr	r3, [pc, #152]	; (8003a10 <MX_GPIO_Init+0xd0>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	4a25      	ldr	r2, [pc, #148]	; (8003a10 <MX_GPIO_Init+0xd0>)
 800397c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003980:	6313      	str	r3, [r2, #48]	; 0x30
 8003982:	4b23      	ldr	r3, [pc, #140]	; (8003a10 <MX_GPIO_Init+0xd0>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800398e:	2300      	movs	r3, #0
 8003990:	60bb      	str	r3, [r7, #8]
 8003992:	4b1f      	ldr	r3, [pc, #124]	; (8003a10 <MX_GPIO_Init+0xd0>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	4a1e      	ldr	r2, [pc, #120]	; (8003a10 <MX_GPIO_Init+0xd0>)
 8003998:	f043 0301 	orr.w	r3, r3, #1
 800399c:	6313      	str	r3, [r2, #48]	; 0x30
 800399e:	4b1c      	ldr	r3, [pc, #112]	; (8003a10 <MX_GPIO_Init+0xd0>)
 80039a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	60bb      	str	r3, [r7, #8]
 80039a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039aa:	2300      	movs	r3, #0
 80039ac:	607b      	str	r3, [r7, #4]
 80039ae:	4b18      	ldr	r3, [pc, #96]	; (8003a10 <MX_GPIO_Init+0xd0>)
 80039b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b2:	4a17      	ldr	r2, [pc, #92]	; (8003a10 <MX_GPIO_Init+0xd0>)
 80039b4:	f043 0302 	orr.w	r3, r3, #2
 80039b8:	6313      	str	r3, [r2, #48]	; 0x30
 80039ba:	4b15      	ldr	r3, [pc, #84]	; (8003a10 <MX_GPIO_Init+0xd0>)
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	607b      	str	r3, [r7, #4]
 80039c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80039c6:	2200      	movs	r2, #0
 80039c8:	2120      	movs	r1, #32
 80039ca:	4812      	ldr	r0, [pc, #72]	; (8003a14 <MX_GPIO_Init+0xd4>)
 80039cc:	f7fe f9ca 	bl	8001d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80039d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80039d6:	4b10      	ldr	r3, [pc, #64]	; (8003a18 <MX_GPIO_Init+0xd8>)
 80039d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039da:	2300      	movs	r3, #0
 80039dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80039de:	f107 0314 	add.w	r3, r7, #20
 80039e2:	4619      	mov	r1, r3
 80039e4:	480d      	ldr	r0, [pc, #52]	; (8003a1c <MX_GPIO_Init+0xdc>)
 80039e6:	f7fe f82b 	bl	8001a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80039ea:	2320      	movs	r3, #32
 80039ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039ee:	2301      	movs	r3, #1
 80039f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f2:	2300      	movs	r3, #0
 80039f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039f6:	2300      	movs	r3, #0
 80039f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80039fa:	f107 0314 	add.w	r3, r7, #20
 80039fe:	4619      	mov	r1, r3
 8003a00:	4804      	ldr	r0, [pc, #16]	; (8003a14 <MX_GPIO_Init+0xd4>)
 8003a02:	f7fe f81d 	bl	8001a40 <HAL_GPIO_Init>

}
 8003a06:	bf00      	nop
 8003a08:	3728      	adds	r7, #40	; 0x28
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	40023800 	.word	0x40023800
 8003a14:	40020000 	.word	0x40020000
 8003a18:	10210000 	.word	0x10210000
 8003a1c:	40020800 	.word	0x40020800

08003a20 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef*UartHandle)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,UART1_Data,6,1000);
 8003a28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a2c:	2206      	movs	r2, #6
 8003a2e:	4905      	ldr	r1, [pc, #20]	; (8003a44 <HAL_UART_RxCpltCallback+0x24>)
 8003a30:	4805      	ldr	r0, [pc, #20]	; (8003a48 <HAL_UART_RxCpltCallback+0x28>)
 8003a32:	f7fe ff0e 	bl	8002852 <HAL_UART_Transmit>
	get_uart_flag=1;
 8003a36:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <HAL_UART_RxCpltCallback+0x2c>)
 8003a38:	2201      	movs	r2, #1
 8003a3a:	701a      	strb	r2, [r3, #0]
}
 8003a3c:	bf00      	nop
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	200000e8 	.word	0x200000e8
 8003a48:	20000104 	.word	0x20000104
 8003a4c:	2000002f 	.word	0x2000002f

08003a50 <HAL_CAN_RxFifo0MsgPendingCallback>:
	  //HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,1);
}

//CAN通信の受信割り込み
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan_)
{;
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan_,CAN_RX_FIFO0,&RxHeader,RxData);
 8003a58:	4b09      	ldr	r3, [pc, #36]	; (8003a80 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8003a5a:	4a0a      	ldr	r2, [pc, #40]	; (8003a84 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7fc ffe2 	bl	8000a28 <HAL_CAN_GetRxMessage>
	HAL_UART_Transmit(&huart2,RxData,4,1000);
 8003a64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a68:	2204      	movs	r2, #4
 8003a6a:	4905      	ldr	r1, [pc, #20]	; (8003a80 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8003a6c:	4806      	ldr	r0, [pc, #24]	; (8003a88 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8003a6e:	f7fe fef0 	bl	8002852 <HAL_UART_Transmit>
	get_can_flag=1;
 8003a72:	4b06      	ldr	r3, [pc, #24]	; (8003a8c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8003a74:	2201      	movs	r2, #1
 8003a76:	701a      	strb	r2, [r3, #0]
}
 8003a78:	bf00      	nop
 8003a7a:	3708      	adds	r7, #8
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	200000fc 	.word	0x200000fc
 8003a84:	20000184 	.word	0x20000184
 8003a88:	20000104 	.word	0x20000104
 8003a8c:	2000002e 	.word	0x2000002e

08003a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003a94:	bf00      	nop
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
	...

08003aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	607b      	str	r3, [r7, #4]
 8003aaa:	4b10      	ldr	r3, [pc, #64]	; (8003aec <HAL_MspInit+0x4c>)
 8003aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aae:	4a0f      	ldr	r2, [pc, #60]	; (8003aec <HAL_MspInit+0x4c>)
 8003ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ab6:	4b0d      	ldr	r3, [pc, #52]	; (8003aec <HAL_MspInit+0x4c>)
 8003ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003abe:	607b      	str	r3, [r7, #4]
 8003ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	603b      	str	r3, [r7, #0]
 8003ac6:	4b09      	ldr	r3, [pc, #36]	; (8003aec <HAL_MspInit+0x4c>)
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	4a08      	ldr	r2, [pc, #32]	; (8003aec <HAL_MspInit+0x4c>)
 8003acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ad2:	4b06      	ldr	r3, [pc, #24]	; (8003aec <HAL_MspInit+0x4c>)
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ada:	603b      	str	r3, [r7, #0]
 8003adc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003ade:	2007      	movs	r0, #7
 8003ae0:	f7fd fbd4 	bl	800128c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ae4:	bf00      	nop
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	40023800 	.word	0x40023800

08003af0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b08c      	sub	sp, #48	; 0x30
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003af8:	f107 031c 	add.w	r3, r7, #28
 8003afc:	2200      	movs	r2, #0
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	605a      	str	r2, [r3, #4]
 8003b02:	609a      	str	r2, [r3, #8]
 8003b04:	60da      	str	r2, [r3, #12]
 8003b06:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a64      	ldr	r2, [pc, #400]	; (8003ca0 <HAL_CAN_MspInit+0x1b0>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d157      	bne.n	8003bc2 <HAL_CAN_MspInit+0xd2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003b12:	4b64      	ldr	r3, [pc, #400]	; (8003ca4 <HAL_CAN_MspInit+0x1b4>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	3301      	adds	r3, #1
 8003b18:	4a62      	ldr	r2, [pc, #392]	; (8003ca4 <HAL_CAN_MspInit+0x1b4>)
 8003b1a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003b1c:	4b61      	ldr	r3, [pc, #388]	; (8003ca4 <HAL_CAN_MspInit+0x1b4>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d10d      	bne.n	8003b40 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003b24:	2300      	movs	r3, #0
 8003b26:	61bb      	str	r3, [r7, #24]
 8003b28:	4b5f      	ldr	r3, [pc, #380]	; (8003ca8 <HAL_CAN_MspInit+0x1b8>)
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2c:	4a5e      	ldr	r2, [pc, #376]	; (8003ca8 <HAL_CAN_MspInit+0x1b8>)
 8003b2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b32:	6413      	str	r3, [r2, #64]	; 0x40
 8003b34:	4b5c      	ldr	r3, [pc, #368]	; (8003ca8 <HAL_CAN_MspInit+0x1b8>)
 8003b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3c:	61bb      	str	r3, [r7, #24]
 8003b3e:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b40:	2300      	movs	r3, #0
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	4b58      	ldr	r3, [pc, #352]	; (8003ca8 <HAL_CAN_MspInit+0x1b8>)
 8003b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b48:	4a57      	ldr	r2, [pc, #348]	; (8003ca8 <HAL_CAN_MspInit+0x1b8>)
 8003b4a:	f043 0301 	orr.w	r3, r3, #1
 8003b4e:	6313      	str	r3, [r2, #48]	; 0x30
 8003b50:	4b55      	ldr	r3, [pc, #340]	; (8003ca8 <HAL_CAN_MspInit+0x1b8>)
 8003b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	617b      	str	r3, [r7, #20]
 8003b5a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003b5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b62:	2302      	movs	r3, #2
 8003b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b66:	2300      	movs	r3, #0
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003b6e:	2309      	movs	r3, #9
 8003b70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b72:	f107 031c 	add.w	r3, r7, #28
 8003b76:	4619      	mov	r1, r3
 8003b78:	484c      	ldr	r0, [pc, #304]	; (8003cac <HAL_CAN_MspInit+0x1bc>)
 8003b7a:	f7fd ff61 	bl	8001a40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003b7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b84:	2302      	movs	r3, #2
 8003b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003b90:	2309      	movs	r3, #9
 8003b92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b94:	f107 031c 	add.w	r3, r7, #28
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4844      	ldr	r0, [pc, #272]	; (8003cac <HAL_CAN_MspInit+0x1bc>)
 8003b9c:	f7fd ff50 	bl	8001a40 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	2013      	movs	r0, #19
 8003ba6:	f7fd fb7c 	bl	80012a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8003baa:	2013      	movs	r0, #19
 8003bac:	f7fd fb95 	bl	80012da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	2014      	movs	r0, #20
 8003bb6:	f7fd fb74 	bl	80012a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003bba:	2014      	movs	r0, #20
 8003bbc:	f7fd fb8d 	bl	80012da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8003bc0:	e069      	b.n	8003c96 <HAL_CAN_MspInit+0x1a6>
  else if(hcan->Instance==CAN2)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a3a      	ldr	r2, [pc, #232]	; (8003cb0 <HAL_CAN_MspInit+0x1c0>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d164      	bne.n	8003c96 <HAL_CAN_MspInit+0x1a6>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8003bcc:	2300      	movs	r3, #0
 8003bce:	613b      	str	r3, [r7, #16]
 8003bd0:	4b35      	ldr	r3, [pc, #212]	; (8003ca8 <HAL_CAN_MspInit+0x1b8>)
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd4:	4a34      	ldr	r2, [pc, #208]	; (8003ca8 <HAL_CAN_MspInit+0x1b8>)
 8003bd6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bda:	6413      	str	r3, [r2, #64]	; 0x40
 8003bdc:	4b32      	ldr	r3, [pc, #200]	; (8003ca8 <HAL_CAN_MspInit+0x1b8>)
 8003bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003be4:	613b      	str	r3, [r7, #16]
 8003be6:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003be8:	4b2e      	ldr	r3, [pc, #184]	; (8003ca4 <HAL_CAN_MspInit+0x1b4>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	3301      	adds	r3, #1
 8003bee:	4a2d      	ldr	r2, [pc, #180]	; (8003ca4 <HAL_CAN_MspInit+0x1b4>)
 8003bf0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003bf2:	4b2c      	ldr	r3, [pc, #176]	; (8003ca4 <HAL_CAN_MspInit+0x1b4>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d10d      	bne.n	8003c16 <HAL_CAN_MspInit+0x126>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	60fb      	str	r3, [r7, #12]
 8003bfe:	4b2a      	ldr	r3, [pc, #168]	; (8003ca8 <HAL_CAN_MspInit+0x1b8>)
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	4a29      	ldr	r2, [pc, #164]	; (8003ca8 <HAL_CAN_MspInit+0x1b8>)
 8003c04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c08:	6413      	str	r3, [r2, #64]	; 0x40
 8003c0a:	4b27      	ldr	r3, [pc, #156]	; (8003ca8 <HAL_CAN_MspInit+0x1b8>)
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c16:	2300      	movs	r3, #0
 8003c18:	60bb      	str	r3, [r7, #8]
 8003c1a:	4b23      	ldr	r3, [pc, #140]	; (8003ca8 <HAL_CAN_MspInit+0x1b8>)
 8003c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1e:	4a22      	ldr	r2, [pc, #136]	; (8003ca8 <HAL_CAN_MspInit+0x1b8>)
 8003c20:	f043 0302 	orr.w	r3, r3, #2
 8003c24:	6313      	str	r3, [r2, #48]	; 0x30
 8003c26:	4b20      	ldr	r3, [pc, #128]	; (8003ca8 <HAL_CAN_MspInit+0x1b8>)
 8003c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	60bb      	str	r3, [r7, #8]
 8003c30:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003c32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c38:	2302      	movs	r3, #2
 8003c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c40:	2303      	movs	r3, #3
 8003c42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8003c44:	2309      	movs	r3, #9
 8003c46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c48:	f107 031c 	add.w	r3, r7, #28
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	4819      	ldr	r0, [pc, #100]	; (8003cb4 <HAL_CAN_MspInit+0x1c4>)
 8003c50:	f7fd fef6 	bl	8001a40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003c54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c62:	2303      	movs	r3, #3
 8003c64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8003c66:	2309      	movs	r3, #9
 8003c68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c6a:	f107 031c 	add.w	r3, r7, #28
 8003c6e:	4619      	mov	r1, r3
 8003c70:	4810      	ldr	r0, [pc, #64]	; (8003cb4 <HAL_CAN_MspInit+0x1c4>)
 8003c72:	f7fd fee5 	bl	8001a40 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8003c76:	2200      	movs	r2, #0
 8003c78:	2100      	movs	r1, #0
 8003c7a:	203f      	movs	r0, #63	; 0x3f
 8003c7c:	f7fd fb11 	bl	80012a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8003c80:	203f      	movs	r0, #63	; 0x3f
 8003c82:	f7fd fb2a 	bl	80012da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8003c86:	2200      	movs	r2, #0
 8003c88:	2100      	movs	r1, #0
 8003c8a:	2040      	movs	r0, #64	; 0x40
 8003c8c:	f7fd fb09 	bl	80012a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8003c90:	2040      	movs	r0, #64	; 0x40
 8003c92:	f7fd fb22 	bl	80012da <HAL_NVIC_EnableIRQ>
}
 8003c96:	bf00      	nop
 8003c98:	3730      	adds	r7, #48	; 0x30
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40006400 	.word	0x40006400
 8003ca4:	20000030 	.word	0x20000030
 8003ca8:	40023800 	.word	0x40023800
 8003cac:	40020000 	.word	0x40020000
 8003cb0:	40006800 	.word	0x40006800
 8003cb4:	40020400 	.word	0x40020400

08003cb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b08a      	sub	sp, #40	; 0x28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cc0:	f107 0314 	add.w	r3, r7, #20
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]
 8003cc8:	605a      	str	r2, [r3, #4]
 8003cca:	609a      	str	r2, [r3, #8]
 8003ccc:	60da      	str	r2, [r3, #12]
 8003cce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a34      	ldr	r2, [pc, #208]	; (8003da8 <HAL_UART_MspInit+0xf0>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d162      	bne.n	8003da0 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003cda:	2300      	movs	r3, #0
 8003cdc:	613b      	str	r3, [r7, #16]
 8003cde:	4b33      	ldr	r3, [pc, #204]	; (8003dac <HAL_UART_MspInit+0xf4>)
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	4a32      	ldr	r2, [pc, #200]	; (8003dac <HAL_UART_MspInit+0xf4>)
 8003ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8003cea:	4b30      	ldr	r3, [pc, #192]	; (8003dac <HAL_UART_MspInit+0xf4>)
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf2:	613b      	str	r3, [r7, #16]
 8003cf4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60fb      	str	r3, [r7, #12]
 8003cfa:	4b2c      	ldr	r3, [pc, #176]	; (8003dac <HAL_UART_MspInit+0xf4>)
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfe:	4a2b      	ldr	r2, [pc, #172]	; (8003dac <HAL_UART_MspInit+0xf4>)
 8003d00:	f043 0301 	orr.w	r3, r3, #1
 8003d04:	6313      	str	r3, [r2, #48]	; 0x30
 8003d06:	4b29      	ldr	r3, [pc, #164]	; (8003dac <HAL_UART_MspInit+0xf4>)
 8003d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	60fb      	str	r3, [r7, #12]
 8003d10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003d12:	230c      	movs	r3, #12
 8003d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d16:	2302      	movs	r3, #2
 8003d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003d22:	2307      	movs	r3, #7
 8003d24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d26:	f107 0314 	add.w	r3, r7, #20
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4820      	ldr	r0, [pc, #128]	; (8003db0 <HAL_UART_MspInit+0xf8>)
 8003d2e:	f7fd fe87 	bl	8001a40 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003d32:	4b20      	ldr	r3, [pc, #128]	; (8003db4 <HAL_UART_MspInit+0xfc>)
 8003d34:	4a20      	ldr	r2, [pc, #128]	; (8003db8 <HAL_UART_MspInit+0x100>)
 8003d36:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003d38:	4b1e      	ldr	r3, [pc, #120]	; (8003db4 <HAL_UART_MspInit+0xfc>)
 8003d3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d3e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d40:	4b1c      	ldr	r3, [pc, #112]	; (8003db4 <HAL_UART_MspInit+0xfc>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d46:	4b1b      	ldr	r3, [pc, #108]	; (8003db4 <HAL_UART_MspInit+0xfc>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d4c:	4b19      	ldr	r3, [pc, #100]	; (8003db4 <HAL_UART_MspInit+0xfc>)
 8003d4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d52:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d54:	4b17      	ldr	r3, [pc, #92]	; (8003db4 <HAL_UART_MspInit+0xfc>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d5a:	4b16      	ldr	r3, [pc, #88]	; (8003db4 <HAL_UART_MspInit+0xfc>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003d60:	4b14      	ldr	r3, [pc, #80]	; (8003db4 <HAL_UART_MspInit+0xfc>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003d66:	4b13      	ldr	r3, [pc, #76]	; (8003db4 <HAL_UART_MspInit+0xfc>)
 8003d68:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003d6c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d6e:	4b11      	ldr	r3, [pc, #68]	; (8003db4 <HAL_UART_MspInit+0xfc>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003d74:	480f      	ldr	r0, [pc, #60]	; (8003db4 <HAL_UART_MspInit+0xfc>)
 8003d76:	f7fd facb 	bl	8001310 <HAL_DMA_Init>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003d80:	f7ff fe86 	bl	8003a90 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a0b      	ldr	r2, [pc, #44]	; (8003db4 <HAL_UART_MspInit+0xfc>)
 8003d88:	635a      	str	r2, [r3, #52]	; 0x34
 8003d8a:	4a0a      	ldr	r2, [pc, #40]	; (8003db4 <HAL_UART_MspInit+0xfc>)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003d90:	2200      	movs	r2, #0
 8003d92:	2100      	movs	r1, #0
 8003d94:	2026      	movs	r0, #38	; 0x26
 8003d96:	f7fd fa84 	bl	80012a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003d9a:	2026      	movs	r0, #38	; 0x26
 8003d9c:	f7fd fa9d 	bl	80012da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003da0:	bf00      	nop
 8003da2:	3728      	adds	r7, #40	; 0x28
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	40004400 	.word	0x40004400
 8003dac:	40023800 	.word	0x40023800
 8003db0:	40020000 	.word	0x40020000
 8003db4:	20000060 	.word	0x20000060
 8003db8:	40026088 	.word	0x40026088

08003dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003dc0:	bf00      	nop
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003dce:	e7fe      	b.n	8003dce <HardFault_Handler+0x4>

08003dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003dd4:	e7fe      	b.n	8003dd4 <MemManage_Handler+0x4>

08003dd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003dda:	e7fe      	b.n	8003dda <BusFault_Handler+0x4>

08003ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003de0:	e7fe      	b.n	8003de0 <UsageFault_Handler+0x4>

08003de2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003de2:	b480      	push	{r7}
 8003de4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003de6:	bf00      	nop
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003df4:	bf00      	nop
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e02:	bf00      	nop
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e10:	f7fc fbca 	bl	80005a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e14:	bf00      	nop
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003e1c:	4802      	ldr	r0, [pc, #8]	; (8003e28 <DMA1_Stream5_IRQHandler+0x10>)
 8003e1e:	f7fd fba7 	bl	8001570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003e22:	bf00      	nop
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	20000060 	.word	0x20000060

08003e2c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003e30:	4802      	ldr	r0, [pc, #8]	; (8003e3c <CAN1_TX_IRQHandler+0x10>)
 8003e32:	f7fc ff32 	bl	8000c9a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8003e36:	bf00      	nop
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	20000144 	.word	0x20000144

08003e40 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003e44:	4802      	ldr	r0, [pc, #8]	; (8003e50 <CAN1_RX0_IRQHandler+0x10>)
 8003e46:	f7fc ff28 	bl	8000c9a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003e4a:	bf00      	nop
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	20000144 	.word	0x20000144

08003e54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003e58:	4802      	ldr	r0, [pc, #8]	; (8003e64 <USART2_IRQHandler+0x10>)
 8003e5a:	f7fe fe13 	bl	8002a84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003e5e:	bf00      	nop
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	20000104 	.word	0x20000104

08003e68 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupt.
  */
void CAN2_TX_IRQHandler(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003e6c:	4802      	ldr	r0, [pc, #8]	; (8003e78 <CAN2_TX_IRQHandler+0x10>)
 8003e6e:	f7fc ff14 	bl	8000c9a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8003e72:	bf00      	nop
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	200000c0 	.word	0x200000c0

08003e7c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003e80:	4802      	ldr	r0, [pc, #8]	; (8003e8c <CAN2_RX0_IRQHandler+0x10>)
 8003e82:	f7fc ff0a 	bl	8000c9a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8003e86:	bf00      	nop
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	200000c0 	.word	0x200000c0

08003e90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e94:	4b16      	ldr	r3, [pc, #88]	; (8003ef0 <SystemInit+0x60>)
 8003e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9a:	4a15      	ldr	r2, [pc, #84]	; (8003ef0 <SystemInit+0x60>)
 8003e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ea0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003ea4:	4b13      	ldr	r3, [pc, #76]	; (8003ef4 <SystemInit+0x64>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a12      	ldr	r2, [pc, #72]	; (8003ef4 <SystemInit+0x64>)
 8003eaa:	f043 0301 	orr.w	r3, r3, #1
 8003eae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003eb0:	4b10      	ldr	r3, [pc, #64]	; (8003ef4 <SystemInit+0x64>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003eb6:	4b0f      	ldr	r3, [pc, #60]	; (8003ef4 <SystemInit+0x64>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a0e      	ldr	r2, [pc, #56]	; (8003ef4 <SystemInit+0x64>)
 8003ebc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003ec0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ec4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003ec6:	4b0b      	ldr	r3, [pc, #44]	; (8003ef4 <SystemInit+0x64>)
 8003ec8:	4a0b      	ldr	r2, [pc, #44]	; (8003ef8 <SystemInit+0x68>)
 8003eca:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003ecc:	4b09      	ldr	r3, [pc, #36]	; (8003ef4 <SystemInit+0x64>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a08      	ldr	r2, [pc, #32]	; (8003ef4 <SystemInit+0x64>)
 8003ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ed6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003ed8:	4b06      	ldr	r3, [pc, #24]	; (8003ef4 <SystemInit+0x64>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003ede:	4b04      	ldr	r3, [pc, #16]	; (8003ef0 <SystemInit+0x60>)
 8003ee0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ee4:	609a      	str	r2, [r3, #8]
#endif
}
 8003ee6:	bf00      	nop
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	e000ed00 	.word	0xe000ed00
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	24003010 	.word	0x24003010

08003efc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003efc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f34 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003f00:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003f02:	e003      	b.n	8003f0c <LoopCopyDataInit>

08003f04 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003f04:	4b0c      	ldr	r3, [pc, #48]	; (8003f38 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003f06:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003f08:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003f0a:	3104      	adds	r1, #4

08003f0c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003f0c:	480b      	ldr	r0, [pc, #44]	; (8003f3c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003f0e:	4b0c      	ldr	r3, [pc, #48]	; (8003f40 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003f10:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003f12:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003f14:	d3f6      	bcc.n	8003f04 <CopyDataInit>
  ldr  r2, =_sbss
 8003f16:	4a0b      	ldr	r2, [pc, #44]	; (8003f44 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003f18:	e002      	b.n	8003f20 <LoopFillZerobss>

08003f1a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003f1a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003f1c:	f842 3b04 	str.w	r3, [r2], #4

08003f20 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003f20:	4b09      	ldr	r3, [pc, #36]	; (8003f48 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003f22:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003f24:	d3f9      	bcc.n	8003f1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003f26:	f7ff ffb3 	bl	8003e90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f2a:	f000 f811 	bl	8003f50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f2e:	f7ff fadb 	bl	80034e8 <main>
  bx  lr    
 8003f32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003f34:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003f38:	08003ff0 	.word	0x08003ff0
  ldr  r0, =_sdata
 8003f3c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003f40:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8003f44:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8003f48:	200001a0 	.word	0x200001a0

08003f4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f4c:	e7fe      	b.n	8003f4c <ADC_IRQHandler>
	...

08003f50 <__libc_init_array>:
 8003f50:	b570      	push	{r4, r5, r6, lr}
 8003f52:	4e0d      	ldr	r6, [pc, #52]	; (8003f88 <__libc_init_array+0x38>)
 8003f54:	4c0d      	ldr	r4, [pc, #52]	; (8003f8c <__libc_init_array+0x3c>)
 8003f56:	1ba4      	subs	r4, r4, r6
 8003f58:	10a4      	asrs	r4, r4, #2
 8003f5a:	2500      	movs	r5, #0
 8003f5c:	42a5      	cmp	r5, r4
 8003f5e:	d109      	bne.n	8003f74 <__libc_init_array+0x24>
 8003f60:	4e0b      	ldr	r6, [pc, #44]	; (8003f90 <__libc_init_array+0x40>)
 8003f62:	4c0c      	ldr	r4, [pc, #48]	; (8003f94 <__libc_init_array+0x44>)
 8003f64:	f000 f820 	bl	8003fa8 <_init>
 8003f68:	1ba4      	subs	r4, r4, r6
 8003f6a:	10a4      	asrs	r4, r4, #2
 8003f6c:	2500      	movs	r5, #0
 8003f6e:	42a5      	cmp	r5, r4
 8003f70:	d105      	bne.n	8003f7e <__libc_init_array+0x2e>
 8003f72:	bd70      	pop	{r4, r5, r6, pc}
 8003f74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f78:	4798      	blx	r3
 8003f7a:	3501      	adds	r5, #1
 8003f7c:	e7ee      	b.n	8003f5c <__libc_init_array+0xc>
 8003f7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f82:	4798      	blx	r3
 8003f84:	3501      	adds	r5, #1
 8003f86:	e7f2      	b.n	8003f6e <__libc_init_array+0x1e>
 8003f88:	08003fe8 	.word	0x08003fe8
 8003f8c:	08003fe8 	.word	0x08003fe8
 8003f90:	08003fe8 	.word	0x08003fe8
 8003f94:	08003fec 	.word	0x08003fec

08003f98 <memset>:
 8003f98:	4402      	add	r2, r0
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d100      	bne.n	8003fa2 <memset+0xa>
 8003fa0:	4770      	bx	lr
 8003fa2:	f803 1b01 	strb.w	r1, [r3], #1
 8003fa6:	e7f9      	b.n	8003f9c <memset+0x4>

08003fa8 <_init>:
 8003fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003faa:	bf00      	nop
 8003fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fae:	bc08      	pop	{r3}
 8003fb0:	469e      	mov	lr, r3
 8003fb2:	4770      	bx	lr

08003fb4 <_fini>:
 8003fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fb6:	bf00      	nop
 8003fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fba:	bc08      	pop	{r3}
 8003fbc:	469e      	mov	lr, r3
 8003fbe:	4770      	bx	lr
