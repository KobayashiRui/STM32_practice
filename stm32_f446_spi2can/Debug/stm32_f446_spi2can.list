
stm32_f446_spi2can.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035a4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003768  08003768  00013768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003780  08003780  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003780  08003780  00013780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003788  08003788  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003788  08003788  00013788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800378c  0800378c  0001378c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003790  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20000010  080037a0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  080037a0  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b04  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001804  00000000  00000000  00029b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009c0  00000000  00000000  0002b348  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008f8  00000000  00000000  0002bd08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000208eb  00000000  00000000  0002c600  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007b14  00000000  00000000  0004ceeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c741b  00000000  00000000  000549ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011be1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002804  00000000  00000000  0011be98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003750 	.word	0x08003750

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08003750 	.word	0x08003750

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000508:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <HAL_Init+0x40>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a0d      	ldr	r2, [pc, #52]	; (8000544 <HAL_Init+0x40>)
 800050e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <HAL_Init+0x40>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <HAL_Init+0x40>)
 800051a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800051e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <HAL_Init+0x40>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a07      	ldr	r2, [pc, #28]	; (8000544 <HAL_Init+0x40>)
 8000526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800052a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 ff89 	bl	8001444 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 f808 	bl	8000548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000538:	f002 fe4c 	bl	80031d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800053c:	2300      	movs	r3, #0
}
 800053e:	4618      	mov	r0, r3
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40023c00 	.word	0x40023c00

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <HAL_InitTick+0x54>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_InitTick+0x58>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4619      	mov	r1, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000562:	fbb2 f3f3 	udiv	r3, r2, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f000 ffa1 	bl	80014ae <HAL_SYSTICK_Config>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000572:	2301      	movs	r3, #1
 8000574:	e00e      	b.n	8000594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	d80a      	bhi.n	8000592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800057c:	2200      	movs	r2, #0
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000584:	f000 ff69 	bl	800145a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <HAL_InitTick+0x5c>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800058e:	2300      	movs	r3, #0
 8000590:	e000      	b.n	8000594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
}
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	2000000c 	.word	0x2000000c
 80005a0:	20000004 	.word	0x20000004
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_IncTick+0x20>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_IncTick+0x24>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <HAL_IncTick+0x24>)
 80005ba:	6013      	str	r3, [r2, #0]
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000004 	.word	0x20000004
 80005cc:	20000034 	.word	0x20000034

080005d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return uwTick;
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <HAL_GetTick+0x14>)
 80005d6:	681b      	ldr	r3, [r3, #0]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000034 	.word	0x20000034

080005e8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d101      	bne.n	80005fa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80005f6:	2301      	movs	r3, #1
 80005f8:	e0ed      	b.n	80007d6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	2b00      	cmp	r3, #0
 8000604:	d102      	bne.n	800060c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f002 fe0c 	bl	8003224 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f022 0202 	bic.w	r2, r2, #2
 800061a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800061c:	f7ff ffd8 	bl	80005d0 <HAL_GetTick>
 8000620:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000622:	e012      	b.n	800064a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000624:	f7ff ffd4 	bl	80005d0 <HAL_GetTick>
 8000628:	4602      	mov	r2, r0
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	1ad3      	subs	r3, r2, r3
 800062e:	2b0a      	cmp	r3, #10
 8000630:	d90b      	bls.n	800064a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000636:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2205      	movs	r2, #5
 8000642:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000646:	2301      	movs	r3, #1
 8000648:	e0c5      	b.n	80007d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	f003 0302 	and.w	r3, r3, #2
 8000654:	2b00      	cmp	r3, #0
 8000656:	d1e5      	bne.n	8000624 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f042 0201 	orr.w	r2, r2, #1
 8000666:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000668:	f7ff ffb2 	bl	80005d0 <HAL_GetTick>
 800066c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800066e:	e012      	b.n	8000696 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000670:	f7ff ffae 	bl	80005d0 <HAL_GetTick>
 8000674:	4602      	mov	r2, r0
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	1ad3      	subs	r3, r2, r3
 800067a:	2b0a      	cmp	r3, #10
 800067c:	d90b      	bls.n	8000696 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000682:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2205      	movs	r2, #5
 800068e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000692:	2301      	movs	r3, #1
 8000694:	e09f      	b.n	80007d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	f003 0301 	and.w	r3, r3, #1
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d0e5      	beq.n	8000670 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	7e1b      	ldrb	r3, [r3, #24]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d108      	bne.n	80006be <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	e007      	b.n	80006ce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80006cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	7e5b      	ldrb	r3, [r3, #25]
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d108      	bne.n	80006e8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	e007      	b.n	80006f8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80006f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	7e9b      	ldrb	r3, [r3, #26]
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d108      	bne.n	8000712 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f042 0220 	orr.w	r2, r2, #32
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	e007      	b.n	8000722 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f022 0220 	bic.w	r2, r2, #32
 8000720:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	7edb      	ldrb	r3, [r3, #27]
 8000726:	2b01      	cmp	r3, #1
 8000728:	d108      	bne.n	800073c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f022 0210 	bic.w	r2, r2, #16
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	e007      	b.n	800074c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f042 0210 	orr.w	r2, r2, #16
 800074a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	7f1b      	ldrb	r3, [r3, #28]
 8000750:	2b01      	cmp	r3, #1
 8000752:	d108      	bne.n	8000766 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f042 0208 	orr.w	r2, r2, #8
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	e007      	b.n	8000776 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f022 0208 	bic.w	r2, r2, #8
 8000774:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	7f5b      	ldrb	r3, [r3, #29]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d108      	bne.n	8000790 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f042 0204 	orr.w	r2, r2, #4
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	e007      	b.n	80007a0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f022 0204 	bic.w	r2, r2, #4
 800079e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	689a      	ldr	r2, [r3, #8]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	431a      	orrs	r2, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	691b      	ldr	r3, [r3, #16]
 80007ae:	431a      	orrs	r2, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	695b      	ldr	r3, [r3, #20]
 80007b4:	ea42 0103 	orr.w	r1, r2, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	1e5a      	subs	r2, r3, #1
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	430a      	orrs	r2, r1
 80007c4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2200      	movs	r2, #0
 80007ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2201      	movs	r2, #1
 80007d0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80007d4:	2300      	movs	r3, #0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b087      	sub	sp, #28
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007f6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80007f8:	7cfb      	ldrb	r3, [r7, #19]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d003      	beq.n	8000806 <HAL_CAN_ConfigFilter+0x26>
 80007fe:	7cfb      	ldrb	r3, [r7, #19]
 8000800:	2b02      	cmp	r3, #2
 8000802:	f040 80be 	bne.w	8000982 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000806:	4b65      	ldr	r3, [pc, #404]	; (800099c <HAL_CAN_ConfigFilter+0x1bc>)
 8000808:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000810:	f043 0201 	orr.w	r2, r3, #1
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000820:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000834:	021b      	lsls	r3, r3, #8
 8000836:	431a      	orrs	r2, r3
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	695b      	ldr	r3, [r3, #20]
 8000842:	f003 031f 	and.w	r3, r3, #31
 8000846:	2201      	movs	r2, #1
 8000848:	fa02 f303 	lsl.w	r3, r2, r3
 800084c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	43db      	mvns	r3, r3
 8000858:	401a      	ands	r2, r3
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	69db      	ldr	r3, [r3, #28]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d123      	bne.n	80008b0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	43db      	mvns	r3, r3
 8000872:	401a      	ands	r2, r3
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	68db      	ldr	r3, [r3, #12]
 800087e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000886:	683a      	ldr	r2, [r7, #0]
 8000888:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800088a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	3248      	adds	r2, #72	; 0x48
 8000890:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	689b      	ldr	r3, [r3, #8]
 8000898:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80008a4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80008a6:	6979      	ldr	r1, [r7, #20]
 80008a8:	3348      	adds	r3, #72	; 0x48
 80008aa:	00db      	lsls	r3, r3, #3
 80008ac:	440b      	add	r3, r1
 80008ae:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	69db      	ldr	r3, [r3, #28]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d122      	bne.n	80008fe <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	431a      	orrs	r2, r3
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008d4:	683a      	ldr	r2, [r7, #0]
 80008d6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80008d8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	3248      	adds	r2, #72	; 0x48
 80008de:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	689b      	ldr	r3, [r3, #8]
 80008e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80008f2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80008f4:	6979      	ldr	r1, [r7, #20]
 80008f6:	3348      	adds	r3, #72	; 0x48
 80008f8:	00db      	lsls	r3, r3, #3
 80008fa:	440b      	add	r3, r1
 80008fc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	699b      	ldr	r3, [r3, #24]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d109      	bne.n	800091a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	43db      	mvns	r3, r3
 8000910:	401a      	ands	r2, r3
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000918:	e007      	b.n	800092a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	431a      	orrs	r2, r3
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	691b      	ldr	r3, [r3, #16]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d109      	bne.n	8000946 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	43db      	mvns	r3, r3
 800093c:	401a      	ands	r2, r3
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000944:	e007      	b.n	8000956 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	431a      	orrs	r2, r3
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	6a1b      	ldr	r3, [r3, #32]
 800095a:	2b01      	cmp	r3, #1
 800095c:	d107      	bne.n	800096e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	431a      	orrs	r2, r3
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000974:	f023 0201 	bic.w	r2, r3, #1
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800097e:	2300      	movs	r3, #0
 8000980:	e006      	b.n	8000990 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000986:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800098e:	2301      	movs	r3, #1
  }
}
 8000990:	4618      	mov	r0, r3
 8000992:	371c      	adds	r7, #28
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	40006400 	.word	0x40006400

080009a0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d12e      	bne.n	8000a12 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2202      	movs	r2, #2
 80009b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f022 0201 	bic.w	r2, r2, #1
 80009ca:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80009cc:	f7ff fe00 	bl	80005d0 <HAL_GetTick>
 80009d0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80009d2:	e012      	b.n	80009fa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009d4:	f7ff fdfc 	bl	80005d0 <HAL_GetTick>
 80009d8:	4602      	mov	r2, r0
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	2b0a      	cmp	r3, #10
 80009e0:	d90b      	bls.n	80009fa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2205      	movs	r2, #5
 80009f2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e012      	b.n	8000a20 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	f003 0301 	and.w	r3, r3, #1
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d1e5      	bne.n	80009d4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	e006      	b.n	8000a20 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a16:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
  }
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b089      	sub	sp, #36	; 0x24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
 8000a34:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a3c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000a46:	7ffb      	ldrb	r3, [r7, #31]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d003      	beq.n	8000a54 <HAL_CAN_AddTxMessage+0x2c>
 8000a4c:	7ffb      	ldrb	r3, [r7, #31]
 8000a4e:	2b02      	cmp	r3, #2
 8000a50:	f040 80b8 	bne.w	8000bc4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d10a      	bne.n	8000a74 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000a5e:	69bb      	ldr	r3, [r7, #24]
 8000a60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d105      	bne.n	8000a74 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	f000 80a0 	beq.w	8000bb4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	0e1b      	lsrs	r3, r3, #24
 8000a78:	f003 0303 	and.w	r3, r3, #3
 8000a7c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	2b02      	cmp	r3, #2
 8000a82:	d907      	bls.n	8000a94 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a88:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000a90:	2301      	movs	r3, #1
 8000a92:	e09e      	b.n	8000bd2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000a94:	2201      	movs	r2, #1
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	409a      	lsls	r2, r3
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d10d      	bne.n	8000ac2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000ab0:	68f9      	ldr	r1, [r7, #12]
 8000ab2:	6809      	ldr	r1, [r1, #0]
 8000ab4:	431a      	orrs	r2, r3
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	3318      	adds	r3, #24
 8000aba:	011b      	lsls	r3, r3, #4
 8000abc:	440b      	add	r3, r1
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	e00f      	b.n	8000ae2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000acc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ad2:	68f9      	ldr	r1, [r7, #12]
 8000ad4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000ad6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	3318      	adds	r3, #24
 8000adc:	011b      	lsls	r3, r3, #4
 8000ade:	440b      	add	r3, r1
 8000ae0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	6819      	ldr	r1, [r3, #0]
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	691a      	ldr	r2, [r3, #16]
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	3318      	adds	r3, #24
 8000aee:	011b      	lsls	r3, r3, #4
 8000af0:	440b      	add	r3, r1
 8000af2:	3304      	adds	r3, #4
 8000af4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	7d1b      	ldrb	r3, [r3, #20]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d111      	bne.n	8000b22 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	3318      	adds	r3, #24
 8000b06:	011b      	lsls	r3, r3, #4
 8000b08:	4413      	add	r3, r2
 8000b0a:	3304      	adds	r3, #4
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	6811      	ldr	r1, [r2, #0]
 8000b12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	3318      	adds	r3, #24
 8000b1a:	011b      	lsls	r3, r3, #4
 8000b1c:	440b      	add	r3, r1
 8000b1e:	3304      	adds	r3, #4
 8000b20:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	3307      	adds	r3, #7
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	061a      	lsls	r2, r3, #24
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	3306      	adds	r3, #6
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	041b      	lsls	r3, r3, #16
 8000b32:	431a      	orrs	r2, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3305      	adds	r3, #5
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	021b      	lsls	r3, r3, #8
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	3204      	adds	r2, #4
 8000b42:	7812      	ldrb	r2, [r2, #0]
 8000b44:	4610      	mov	r0, r2
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	6811      	ldr	r1, [r2, #0]
 8000b4a:	ea43 0200 	orr.w	r2, r3, r0
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	011b      	lsls	r3, r3, #4
 8000b52:	440b      	add	r3, r1
 8000b54:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000b58:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	3303      	adds	r3, #3
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	061a      	lsls	r2, r3, #24
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	3302      	adds	r3, #2
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	041b      	lsls	r3, r3, #16
 8000b6a:	431a      	orrs	r2, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	021b      	lsls	r3, r3, #8
 8000b74:	4313      	orrs	r3, r2
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	7812      	ldrb	r2, [r2, #0]
 8000b7a:	4610      	mov	r0, r2
 8000b7c:	68fa      	ldr	r2, [r7, #12]
 8000b7e:	6811      	ldr	r1, [r2, #0]
 8000b80:	ea43 0200 	orr.w	r2, r3, r0
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	011b      	lsls	r3, r3, #4
 8000b88:	440b      	add	r3, r1
 8000b8a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000b8e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	3318      	adds	r3, #24
 8000b98:	011b      	lsls	r3, r3, #4
 8000b9a:	4413      	add	r3, r2
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	6811      	ldr	r1, [r2, #0]
 8000ba2:	f043 0201 	orr.w	r2, r3, #1
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	3318      	adds	r3, #24
 8000baa:	011b      	lsls	r3, r3, #4
 8000bac:	440b      	add	r3, r1
 8000bae:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	e00e      	b.n	8000bd2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bb8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	e006      	b.n	8000bd2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bc8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000bd0:	2301      	movs	r3, #1
  }
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3724      	adds	r7, #36	; 0x24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000bde:	b480      	push	{r7}
 8000be0:	b087      	sub	sp, #28
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	60f8      	str	r0, [r7, #12]
 8000be6:	60b9      	str	r1, [r7, #8]
 8000be8:	607a      	str	r2, [r7, #4]
 8000bea:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bf2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000bf4:	7dfb      	ldrb	r3, [r7, #23]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d003      	beq.n	8000c02 <HAL_CAN_GetRxMessage+0x24>
 8000bfa:	7dfb      	ldrb	r3, [r7, #23]
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	f040 80f4 	bne.w	8000dea <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d10e      	bne.n	8000c26 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	68db      	ldr	r3, [r3, #12]
 8000c0e:	f003 0303 	and.w	r3, r3, #3
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d116      	bne.n	8000c44 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c1a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e0e8      	b.n	8000df8 <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	691b      	ldr	r3, [r3, #16]
 8000c2c:	f003 0303 	and.w	r3, r3, #3
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d107      	bne.n	8000c44 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c38:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000c40:	2301      	movs	r3, #1
 8000c42:	e0d9      	b.n	8000df8 <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	331b      	adds	r3, #27
 8000c4c:	011b      	lsls	r3, r3, #4
 8000c4e:	4413      	add	r3, r2
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f003 0204 	and.w	r2, r3, #4
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d10c      	bne.n	8000c7c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	331b      	adds	r3, #27
 8000c6a:	011b      	lsls	r3, r3, #4
 8000c6c:	4413      	add	r3, r2
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	0d5b      	lsrs	r3, r3, #21
 8000c72:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	e00b      	b.n	8000c94 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	331b      	adds	r3, #27
 8000c84:	011b      	lsls	r3, r3, #4
 8000c86:	4413      	add	r3, r2
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	08db      	lsrs	r3, r3, #3
 8000c8c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	331b      	adds	r3, #27
 8000c9c:	011b      	lsls	r3, r3, #4
 8000c9e:	4413      	add	r3, r2
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	085b      	lsrs	r3, r3, #1
 8000ca4:	f003 0201 	and.w	r2, r3, #1
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	331b      	adds	r3, #27
 8000cb4:	011b      	lsls	r3, r3, #4
 8000cb6:	4413      	add	r3, r2
 8000cb8:	3304      	adds	r3, #4
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f003 020f 	and.w	r2, r3, #15
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	331b      	adds	r3, #27
 8000ccc:	011b      	lsls	r3, r3, #4
 8000cce:	4413      	add	r3, r2
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	0a1b      	lsrs	r3, r3, #8
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	331b      	adds	r3, #27
 8000ce4:	011b      	lsls	r3, r3, #4
 8000ce6:	4413      	add	r3, r2
 8000ce8:	3304      	adds	r3, #4
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	0c1b      	lsrs	r3, r3, #16
 8000cee:	b29a      	uxth	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	011b      	lsls	r3, r3, #4
 8000cfc:	4413      	add	r3, r2
 8000cfe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	011b      	lsls	r3, r3, #4
 8000d12:	4413      	add	r3, r2
 8000d14:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	0a1a      	lsrs	r2, r3, #8
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	b2d2      	uxtb	r2, r2
 8000d22:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	011b      	lsls	r3, r3, #4
 8000d2c:	4413      	add	r3, r2
 8000d2e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	0c1a      	lsrs	r2, r3, #16
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	3302      	adds	r3, #2
 8000d3a:	b2d2      	uxtb	r2, r2
 8000d3c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	011b      	lsls	r3, r3, #4
 8000d46:	4413      	add	r3, r2
 8000d48:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	0e1a      	lsrs	r2, r3, #24
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	3303      	adds	r3, #3
 8000d54:	b2d2      	uxtb	r2, r2
 8000d56:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	011b      	lsls	r3, r3, #4
 8000d60:	4413      	add	r3, r2
 8000d62:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	3304      	adds	r3, #4
 8000d6c:	b2d2      	uxtb	r2, r2
 8000d6e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	011b      	lsls	r3, r3, #4
 8000d78:	4413      	add	r3, r2
 8000d7a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	0a1a      	lsrs	r2, r3, #8
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	3305      	adds	r3, #5
 8000d86:	b2d2      	uxtb	r2, r2
 8000d88:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	011b      	lsls	r3, r3, #4
 8000d92:	4413      	add	r3, r2
 8000d94:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	0c1a      	lsrs	r2, r3, #16
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	3306      	adds	r3, #6
 8000da0:	b2d2      	uxtb	r2, r2
 8000da2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	011b      	lsls	r3, r3, #4
 8000dac:	4413      	add	r3, r2
 8000dae:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	0e1a      	lsrs	r2, r3, #24
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	3307      	adds	r3, #7
 8000dba:	b2d2      	uxtb	r2, r2
 8000dbc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d108      	bne.n	8000dd6 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	68da      	ldr	r2, [r3, #12]
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f042 0220 	orr.w	r2, r2, #32
 8000dd2:	60da      	str	r2, [r3, #12]
 8000dd4:	e007      	b.n	8000de6 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	691a      	ldr	r2, [r3, #16]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f042 0220 	orr.w	r2, r2, #32
 8000de4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000de6:	2300      	movs	r3, #0
 8000de8:	e006      	b.n	8000df8 <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
  }
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	371c      	adds	r7, #28
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e14:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e16:	7bfb      	ldrb	r3, [r7, #15]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d002      	beq.n	8000e22 <HAL_CAN_ActivateNotification+0x1e>
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d109      	bne.n	8000e36 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	6959      	ldr	r1, [r3, #20]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	683a      	ldr	r2, [r7, #0]
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000e32:	2300      	movs	r3, #0
 8000e34:	e006      	b.n	8000e44 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
  }
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	; 0x28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	695b      	ldr	r3, [r3, #20]
 8000e62:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	68db      	ldr	r3, [r3, #12]
 8000e7a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	691b      	ldr	r3, [r3, #16]
 8000e82:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000e8c:	6a3b      	ldr	r3, [r7, #32]
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d07c      	beq.n	8000f90 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	f003 0301 	and.w	r3, r3, #1
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d023      	beq.n	8000ee8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d003      	beq.n	8000eba <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f000 f97d 	bl	80011b2 <HAL_CAN_TxMailbox0CompleteCallback>
 8000eb8:	e016      	b.n	8000ee8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	f003 0304 	and.w	r3, r3, #4
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d004      	beq.n	8000ece <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000eca:	627b      	str	r3, [r7, #36]	; 0x24
 8000ecc:	e00c      	b.n	8000ee8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	f003 0308 	and.w	r3, r3, #8
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d004      	beq.n	8000ee2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eda:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
 8000ee0:	e002      	b.n	8000ee8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f000 f983 	bl	80011ee <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d024      	beq.n	8000f3c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000efa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f000 f95d 	bl	80011c6 <HAL_CAN_TxMailbox1CompleteCallback>
 8000f0c:	e016      	b.n	8000f3c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d004      	beq.n	8000f22 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f20:	e00c      	b.n	8000f3c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d004      	beq.n	8000f36 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
 8000f34:	e002      	b.n	8000f3c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f000 f963 	bl	8001202 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d024      	beq.n	8000f90 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f4e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d003      	beq.n	8000f62 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f000 f93d 	bl	80011da <HAL_CAN_TxMailbox2CompleteCallback>
 8000f60:	e016      	b.n	8000f90 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d004      	beq.n	8000f76 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
 8000f74:	e00c      	b.n	8000f90 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d004      	beq.n	8000f8a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
 8000f88:	e002      	b.n	8000f90 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f000 f943 	bl	8001216 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000f90:	6a3b      	ldr	r3, [r7, #32]
 8000f92:	f003 0308 	and.w	r3, r3, #8
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d00c      	beq.n	8000fb4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	f003 0310 	and.w	r3, r3, #16
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d007      	beq.n	8000fb4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2210      	movs	r2, #16
 8000fb2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000fb4:	6a3b      	ldr	r3, [r7, #32]
 8000fb6:	f003 0304 	and.w	r3, r3, #4
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d00b      	beq.n	8000fd6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	f003 0308 	and.w	r3, r3, #8
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d006      	beq.n	8000fd6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2208      	movs	r2, #8
 8000fce:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f000 f92a 	bl	800122a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000fd6:	6a3b      	ldr	r3, [r7, #32]
 8000fd8:	f003 0302 	and.w	r3, r3, #2
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d009      	beq.n	8000ff4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d002      	beq.n	8000ff4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f002 f8d0 	bl	8003194 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000ff4:	6a3b      	ldr	r3, [r7, #32]
 8000ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d00c      	beq.n	8001018 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	f003 0310 	and.w	r3, r3, #16
 8001004:	2b00      	cmp	r3, #0
 8001006:	d007      	beq.n	8001018 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800100e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2210      	movs	r2, #16
 8001016:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001018:	6a3b      	ldr	r3, [r7, #32]
 800101a:	f003 0320 	and.w	r3, r3, #32
 800101e:	2b00      	cmp	r3, #0
 8001020:	d00b      	beq.n	800103a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	f003 0308 	and.w	r3, r3, #8
 8001028:	2b00      	cmp	r3, #0
 800102a:	d006      	beq.n	800103a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2208      	movs	r2, #8
 8001032:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f000 f90c 	bl	8001252 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800103a:	6a3b      	ldr	r3, [r7, #32]
 800103c:	f003 0310 	and.w	r3, r3, #16
 8001040:	2b00      	cmp	r3, #0
 8001042:	d009      	beq.n	8001058 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	691b      	ldr	r3, [r3, #16]
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	2b00      	cmp	r3, #0
 8001050:	d002      	beq.n	8001058 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f000 f8f3 	bl	800123e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001058:	6a3b      	ldr	r3, [r7, #32]
 800105a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d00b      	beq.n	800107a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	f003 0310 	and.w	r3, r3, #16
 8001068:	2b00      	cmp	r3, #0
 800106a:	d006      	beq.n	800107a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2210      	movs	r2, #16
 8001072:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f000 f8f6 	bl	8001266 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800107a:	6a3b      	ldr	r3, [r7, #32]
 800107c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d00b      	beq.n	800109c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f003 0308 	and.w	r3, r3, #8
 800108a:	2b00      	cmp	r3, #0
 800108c:	d006      	beq.n	800109c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2208      	movs	r2, #8
 8001094:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f000 f8ef 	bl	800127a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800109c:	6a3b      	ldr	r3, [r7, #32]
 800109e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d075      	beq.n	8001192 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	f003 0304 	and.w	r3, r3, #4
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d06c      	beq.n	800118a <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80010b0:	6a3b      	ldr	r3, [r7, #32]
 80010b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d008      	beq.n	80010cc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80010c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c6:	f043 0301 	orr.w	r3, r3, #1
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80010cc:	6a3b      	ldr	r3, [r7, #32]
 80010ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d008      	beq.n	80010e8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d003      	beq.n	80010e8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e2:	f043 0302 	orr.w	r3, r3, #2
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80010e8:	6a3b      	ldr	r3, [r7, #32]
 80010ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d008      	beq.n	8001104 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d003      	beq.n	8001104 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80010fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fe:	f043 0304 	orr.w	r3, r3, #4
 8001102:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001104:	6a3b      	ldr	r3, [r7, #32]
 8001106:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800110a:	2b00      	cmp	r3, #0
 800110c:	d03d      	beq.n	800118a <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001114:	2b00      	cmp	r3, #0
 8001116:	d038      	beq.n	800118a <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800111e:	2b30      	cmp	r3, #48	; 0x30
 8001120:	d017      	beq.n	8001152 <HAL_CAN_IRQHandler+0x302>
 8001122:	2b30      	cmp	r3, #48	; 0x30
 8001124:	d804      	bhi.n	8001130 <HAL_CAN_IRQHandler+0x2e0>
 8001126:	2b10      	cmp	r3, #16
 8001128:	d009      	beq.n	800113e <HAL_CAN_IRQHandler+0x2ee>
 800112a:	2b20      	cmp	r3, #32
 800112c:	d00c      	beq.n	8001148 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800112e:	e024      	b.n	800117a <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001130:	2b50      	cmp	r3, #80	; 0x50
 8001132:	d018      	beq.n	8001166 <HAL_CAN_IRQHandler+0x316>
 8001134:	2b60      	cmp	r3, #96	; 0x60
 8001136:	d01b      	beq.n	8001170 <HAL_CAN_IRQHandler+0x320>
 8001138:	2b40      	cmp	r3, #64	; 0x40
 800113a:	d00f      	beq.n	800115c <HAL_CAN_IRQHandler+0x30c>
            break;
 800113c:	e01d      	b.n	800117a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 800113e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001140:	f043 0308 	orr.w	r3, r3, #8
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001146:	e018      	b.n	800117a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114a:	f043 0310 	orr.w	r3, r3, #16
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001150:	e013      	b.n	800117a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001154:	f043 0320 	orr.w	r3, r3, #32
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800115a:	e00e      	b.n	800117a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 800115c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001164:	e009      	b.n	800117a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800116e:	e004      	b.n	800117a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001178:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	699a      	ldr	r2, [r3, #24]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001188:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2204      	movs	r2, #4
 8001190:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001194:	2b00      	cmp	r3, #0
 8001196:	d008      	beq.n	80011aa <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800119c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119e:	431a      	orrs	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f000 f872 	bl	800128e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80011aa:	bf00      	nop
 80011ac:	3728      	adds	r7, #40	; 0x28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b083      	sub	sp, #12
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80011c6:	b480      	push	{r7}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80011da:	b480      	push	{r7}
 80011dc:	b083      	sub	sp, #12
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80011ee:	b480      	push	{r7}
 80011f0:	b083      	sub	sp, #12
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001202:	b480      	push	{r7}
 8001204:	b083      	sub	sp, #12
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001252:	b480      	push	{r7}
 8001254:	b083      	sub	sp, #12
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800128e:	b480      	push	{r7}
 8001290:	b083      	sub	sp, #12
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <__NVIC_SetPriorityGrouping+0x44>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012c0:	4013      	ands	r3, r2
 80012c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d6:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <__NVIC_SetPriorityGrouping+0x44>)
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	60d3      	str	r3, [r2, #12]
}
 80012dc:	bf00      	nop
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f0:	4b04      	ldr	r3, [pc, #16]	; (8001304 <__NVIC_GetPriorityGrouping+0x18>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	0a1b      	lsrs	r3, r3, #8
 80012f6:	f003 0307 	and.w	r3, r3, #7
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	2b00      	cmp	r3, #0
 8001318:	db0b      	blt.n	8001332 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	f003 021f 	and.w	r2, r3, #31
 8001320:	4907      	ldr	r1, [pc, #28]	; (8001340 <__NVIC_EnableIRQ+0x38>)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	095b      	lsrs	r3, r3, #5
 8001328:	2001      	movs	r0, #1
 800132a:	fa00 f202 	lsl.w	r2, r0, r2
 800132e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000e100 	.word	0xe000e100

08001344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	6039      	str	r1, [r7, #0]
 800134e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001354:	2b00      	cmp	r3, #0
 8001356:	db0a      	blt.n	800136e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	b2da      	uxtb	r2, r3
 800135c:	490c      	ldr	r1, [pc, #48]	; (8001390 <__NVIC_SetPriority+0x4c>)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	0112      	lsls	r2, r2, #4
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	440b      	add	r3, r1
 8001368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800136c:	e00a      	b.n	8001384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4908      	ldr	r1, [pc, #32]	; (8001394 <__NVIC_SetPriority+0x50>)
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	f003 030f 	and.w	r3, r3, #15
 800137a:	3b04      	subs	r3, #4
 800137c:	0112      	lsls	r2, r2, #4
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	440b      	add	r3, r1
 8001382:	761a      	strb	r2, [r3, #24]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000e100 	.word	0xe000e100
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001398:	b480      	push	{r7}
 800139a:	b089      	sub	sp, #36	; 0x24
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	f1c3 0307 	rsb	r3, r3, #7
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	bf28      	it	cs
 80013b6:	2304      	movcs	r3, #4
 80013b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3304      	adds	r3, #4
 80013be:	2b06      	cmp	r3, #6
 80013c0:	d902      	bls.n	80013c8 <NVIC_EncodePriority+0x30>
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3b03      	subs	r3, #3
 80013c6:	e000      	b.n	80013ca <NVIC_EncodePriority+0x32>
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43da      	mvns	r2, r3
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	401a      	ands	r2, r3
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ea:	43d9      	mvns	r1, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f0:	4313      	orrs	r3, r2
         );
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3724      	adds	r7, #36	; 0x24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
	...

08001400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3b01      	subs	r3, #1
 800140c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001410:	d301      	bcc.n	8001416 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001412:	2301      	movs	r3, #1
 8001414:	e00f      	b.n	8001436 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001416:	4a0a      	ldr	r2, [pc, #40]	; (8001440 <SysTick_Config+0x40>)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3b01      	subs	r3, #1
 800141c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800141e:	210f      	movs	r1, #15
 8001420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001424:	f7ff ff8e 	bl	8001344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001428:	4b05      	ldr	r3, [pc, #20]	; (8001440 <SysTick_Config+0x40>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800142e:	4b04      	ldr	r3, [pc, #16]	; (8001440 <SysTick_Config+0x40>)
 8001430:	2207      	movs	r2, #7
 8001432:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	e000e010 	.word	0xe000e010

08001444 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff ff29 	bl	80012a4 <__NVIC_SetPriorityGrouping>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800145a:	b580      	push	{r7, lr}
 800145c:	b086      	sub	sp, #24
 800145e:	af00      	add	r7, sp, #0
 8001460:	4603      	mov	r3, r0
 8001462:	60b9      	str	r1, [r7, #8]
 8001464:	607a      	str	r2, [r7, #4]
 8001466:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800146c:	f7ff ff3e 	bl	80012ec <__NVIC_GetPriorityGrouping>
 8001470:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	68b9      	ldr	r1, [r7, #8]
 8001476:	6978      	ldr	r0, [r7, #20]
 8001478:	f7ff ff8e 	bl	8001398 <NVIC_EncodePriority>
 800147c:	4602      	mov	r2, r0
 800147e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001482:	4611      	mov	r1, r2
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff ff5d 	bl	8001344 <__NVIC_SetPriority>
}
 800148a:	bf00      	nop
 800148c:	3718      	adds	r7, #24
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	4603      	mov	r3, r0
 800149a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800149c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff31 	bl	8001308 <__NVIC_EnableIRQ>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff ffa2 	bl	8001400 <SysTick_Config>
 80014bc:	4603      	mov	r3, r0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
	...

080014c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b089      	sub	sp, #36	; 0x24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014da:	2300      	movs	r3, #0
 80014dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
 80014e2:	e165      	b.n	80017b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014e4:	2201      	movs	r2, #1
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	4013      	ands	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	f040 8154 	bne.w	80017aa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2b02      	cmp	r3, #2
 8001508:	d003      	beq.n	8001512 <HAL_GPIO_Init+0x4a>
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b12      	cmp	r3, #18
 8001510:	d123      	bne.n	800155a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	08da      	lsrs	r2, r3, #3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3208      	adds	r2, #8
 800151a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800151e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	220f      	movs	r2, #15
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43db      	mvns	r3, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4013      	ands	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	691a      	ldr	r2, [r3, #16]
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	f003 0307 	and.w	r3, r3, #7
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4313      	orrs	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	08da      	lsrs	r2, r3, #3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3208      	adds	r2, #8
 8001554:	69b9      	ldr	r1, [r7, #24]
 8001556:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	2203      	movs	r2, #3
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43db      	mvns	r3, r3
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4013      	ands	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f003 0203 	and.w	r2, r3, #3
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	4313      	orrs	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d00b      	beq.n	80015ae <HAL_GPIO_Init+0xe6>
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b02      	cmp	r3, #2
 800159c:	d007      	beq.n	80015ae <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015a2:	2b11      	cmp	r3, #17
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b12      	cmp	r3, #18
 80015ac:	d130      	bne.n	8001610 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	2203      	movs	r2, #3
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43db      	mvns	r3, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4013      	ands	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	68da      	ldr	r2, [r3, #12]
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015e4:	2201      	movs	r2, #1
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	091b      	lsrs	r3, r3, #4
 80015fa:	f003 0201 	and.w	r2, r3, #1
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	2203      	movs	r2, #3
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4013      	ands	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001648:	2b00      	cmp	r3, #0
 800164a:	f000 80ae 	beq.w	80017aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	4b5c      	ldr	r3, [pc, #368]	; (80017c4 <HAL_GPIO_Init+0x2fc>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	4a5b      	ldr	r2, [pc, #364]	; (80017c4 <HAL_GPIO_Init+0x2fc>)
 8001658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800165c:	6453      	str	r3, [r2, #68]	; 0x44
 800165e:	4b59      	ldr	r3, [pc, #356]	; (80017c4 <HAL_GPIO_Init+0x2fc>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800166a:	4a57      	ldr	r2, [pc, #348]	; (80017c8 <HAL_GPIO_Init+0x300>)
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	089b      	lsrs	r3, r3, #2
 8001670:	3302      	adds	r3, #2
 8001672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001676:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	220f      	movs	r2, #15
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4013      	ands	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a4e      	ldr	r2, [pc, #312]	; (80017cc <HAL_GPIO_Init+0x304>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d025      	beq.n	80016e2 <HAL_GPIO_Init+0x21a>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a4d      	ldr	r2, [pc, #308]	; (80017d0 <HAL_GPIO_Init+0x308>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d01f      	beq.n	80016de <HAL_GPIO_Init+0x216>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a4c      	ldr	r2, [pc, #304]	; (80017d4 <HAL_GPIO_Init+0x30c>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d019      	beq.n	80016da <HAL_GPIO_Init+0x212>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a4b      	ldr	r2, [pc, #300]	; (80017d8 <HAL_GPIO_Init+0x310>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d013      	beq.n	80016d6 <HAL_GPIO_Init+0x20e>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a4a      	ldr	r2, [pc, #296]	; (80017dc <HAL_GPIO_Init+0x314>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d00d      	beq.n	80016d2 <HAL_GPIO_Init+0x20a>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a49      	ldr	r2, [pc, #292]	; (80017e0 <HAL_GPIO_Init+0x318>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d007      	beq.n	80016ce <HAL_GPIO_Init+0x206>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a48      	ldr	r2, [pc, #288]	; (80017e4 <HAL_GPIO_Init+0x31c>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d101      	bne.n	80016ca <HAL_GPIO_Init+0x202>
 80016c6:	2306      	movs	r3, #6
 80016c8:	e00c      	b.n	80016e4 <HAL_GPIO_Init+0x21c>
 80016ca:	2307      	movs	r3, #7
 80016cc:	e00a      	b.n	80016e4 <HAL_GPIO_Init+0x21c>
 80016ce:	2305      	movs	r3, #5
 80016d0:	e008      	b.n	80016e4 <HAL_GPIO_Init+0x21c>
 80016d2:	2304      	movs	r3, #4
 80016d4:	e006      	b.n	80016e4 <HAL_GPIO_Init+0x21c>
 80016d6:	2303      	movs	r3, #3
 80016d8:	e004      	b.n	80016e4 <HAL_GPIO_Init+0x21c>
 80016da:	2302      	movs	r3, #2
 80016dc:	e002      	b.n	80016e4 <HAL_GPIO_Init+0x21c>
 80016de:	2301      	movs	r3, #1
 80016e0:	e000      	b.n	80016e4 <HAL_GPIO_Init+0x21c>
 80016e2:	2300      	movs	r3, #0
 80016e4:	69fa      	ldr	r2, [r7, #28]
 80016e6:	f002 0203 	and.w	r2, r2, #3
 80016ea:	0092      	lsls	r2, r2, #2
 80016ec:	4093      	lsls	r3, r2
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016f4:	4934      	ldr	r1, [pc, #208]	; (80017c8 <HAL_GPIO_Init+0x300>)
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	089b      	lsrs	r3, r3, #2
 80016fa:	3302      	adds	r3, #2
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001702:	4b39      	ldr	r3, [pc, #228]	; (80017e8 <HAL_GPIO_Init+0x320>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	43db      	mvns	r3, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4013      	ands	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	4313      	orrs	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001726:	4a30      	ldr	r2, [pc, #192]	; (80017e8 <HAL_GPIO_Init+0x320>)
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800172c:	4b2e      	ldr	r3, [pc, #184]	; (80017e8 <HAL_GPIO_Init+0x320>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	43db      	mvns	r3, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4013      	ands	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d003      	beq.n	8001750 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	4313      	orrs	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001750:	4a25      	ldr	r2, [pc, #148]	; (80017e8 <HAL_GPIO_Init+0x320>)
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001756:	4b24      	ldr	r3, [pc, #144]	; (80017e8 <HAL_GPIO_Init+0x320>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	43db      	mvns	r3, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4013      	ands	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	4313      	orrs	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800177a:	4a1b      	ldr	r2, [pc, #108]	; (80017e8 <HAL_GPIO_Init+0x320>)
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001780:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <HAL_GPIO_Init+0x320>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	43db      	mvns	r3, r3
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4013      	ands	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017a4:	4a10      	ldr	r2, [pc, #64]	; (80017e8 <HAL_GPIO_Init+0x320>)
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3301      	adds	r3, #1
 80017ae:	61fb      	str	r3, [r7, #28]
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	2b0f      	cmp	r3, #15
 80017b4:	f67f ae96 	bls.w	80014e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017b8:	bf00      	nop
 80017ba:	3724      	adds	r7, #36	; 0x24
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40013800 	.word	0x40013800
 80017cc:	40020000 	.word	0x40020000
 80017d0:	40020400 	.word	0x40020400
 80017d4:	40020800 	.word	0x40020800
 80017d8:	40020c00 	.word	0x40020c00
 80017dc:	40021000 	.word	0x40021000
 80017e0:	40021400 	.word	0x40021400
 80017e4:	40021800 	.word	0x40021800
 80017e8:	40013c00 	.word	0x40013c00

080017ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	807b      	strh	r3, [r7, #2]
 80017f8:	4613      	mov	r3, r2
 80017fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017fc:	787b      	ldrb	r3, [r7, #1]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001802:	887a      	ldrh	r2, [r7, #2]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001808:	e003      	b.n	8001812 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800180a:	887b      	ldrh	r3, [r7, #2]
 800180c:	041a      	lsls	r2, r3, #16
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	619a      	str	r2, [r3, #24]
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
	...

08001820 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e0ca      	b.n	80019ca <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001834:	4b67      	ldr	r3, [pc, #412]	; (80019d4 <HAL_RCC_ClockConfig+0x1b4>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 030f 	and.w	r3, r3, #15
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	429a      	cmp	r2, r3
 8001840:	d90c      	bls.n	800185c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001842:	4b64      	ldr	r3, [pc, #400]	; (80019d4 <HAL_RCC_ClockConfig+0x1b4>)
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800184a:	4b62      	ldr	r3, [pc, #392]	; (80019d4 <HAL_RCC_ClockConfig+0x1b4>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	429a      	cmp	r2, r3
 8001856:	d001      	beq.n	800185c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e0b6      	b.n	80019ca <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d020      	beq.n	80018aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b00      	cmp	r3, #0
 8001872:	d005      	beq.n	8001880 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001874:	4b58      	ldr	r3, [pc, #352]	; (80019d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	4a57      	ldr	r2, [pc, #348]	; (80019d8 <HAL_RCC_ClockConfig+0x1b8>)
 800187a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800187e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0308 	and.w	r3, r3, #8
 8001888:	2b00      	cmp	r3, #0
 800188a:	d005      	beq.n	8001898 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800188c:	4b52      	ldr	r3, [pc, #328]	; (80019d8 <HAL_RCC_ClockConfig+0x1b8>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	4a51      	ldr	r2, [pc, #324]	; (80019d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001892:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001896:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001898:	4b4f      	ldr	r3, [pc, #316]	; (80019d8 <HAL_RCC_ClockConfig+0x1b8>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	494c      	ldr	r1, [pc, #304]	; (80019d8 <HAL_RCC_ClockConfig+0x1b8>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d044      	beq.n	8001940 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d107      	bne.n	80018ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018be:	4b46      	ldr	r3, [pc, #280]	; (80019d8 <HAL_RCC_ClockConfig+0x1b8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d119      	bne.n	80018fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e07d      	b.n	80019ca <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d003      	beq.n	80018de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018da:	2b03      	cmp	r3, #3
 80018dc:	d107      	bne.n	80018ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018de:	4b3e      	ldr	r3, [pc, #248]	; (80019d8 <HAL_RCC_ClockConfig+0x1b8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d109      	bne.n	80018fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e06d      	b.n	80019ca <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ee:	4b3a      	ldr	r3, [pc, #232]	; (80019d8 <HAL_RCC_ClockConfig+0x1b8>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e065      	b.n	80019ca <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018fe:	4b36      	ldr	r3, [pc, #216]	; (80019d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f023 0203 	bic.w	r2, r3, #3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	4933      	ldr	r1, [pc, #204]	; (80019d8 <HAL_RCC_ClockConfig+0x1b8>)
 800190c:	4313      	orrs	r3, r2
 800190e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001910:	f7fe fe5e 	bl	80005d0 <HAL_GetTick>
 8001914:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001916:	e00a      	b.n	800192e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001918:	f7fe fe5a 	bl	80005d0 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	f241 3288 	movw	r2, #5000	; 0x1388
 8001926:	4293      	cmp	r3, r2
 8001928:	d901      	bls.n	800192e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e04d      	b.n	80019ca <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800192e:	4b2a      	ldr	r3, [pc, #168]	; (80019d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 020c 	and.w	r2, r3, #12
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	429a      	cmp	r2, r3
 800193e:	d1eb      	bne.n	8001918 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001940:	4b24      	ldr	r3, [pc, #144]	; (80019d4 <HAL_RCC_ClockConfig+0x1b4>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 030f 	and.w	r3, r3, #15
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	429a      	cmp	r2, r3
 800194c:	d20c      	bcs.n	8001968 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194e:	4b21      	ldr	r3, [pc, #132]	; (80019d4 <HAL_RCC_ClockConfig+0x1b4>)
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001956:	4b1f      	ldr	r3, [pc, #124]	; (80019d4 <HAL_RCC_ClockConfig+0x1b4>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 030f 	and.w	r3, r3, #15
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	429a      	cmp	r2, r3
 8001962:	d001      	beq.n	8001968 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e030      	b.n	80019ca <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	2b00      	cmp	r3, #0
 8001972:	d008      	beq.n	8001986 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001974:	4b18      	ldr	r3, [pc, #96]	; (80019d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	4915      	ldr	r1, [pc, #84]	; (80019d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001982:	4313      	orrs	r3, r2
 8001984:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	2b00      	cmp	r3, #0
 8001990:	d009      	beq.n	80019a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001992:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	691b      	ldr	r3, [r3, #16]
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	490d      	ldr	r1, [pc, #52]	; (80019d8 <HAL_RCC_ClockConfig+0x1b8>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019a6:	f000 f851 	bl	8001a4c <HAL_RCC_GetSysClockFreq>
 80019aa:	4601      	mov	r1, r0
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <HAL_RCC_ClockConfig+0x1b8>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	091b      	lsrs	r3, r3, #4
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	4a09      	ldr	r2, [pc, #36]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 80019b8:	5cd3      	ldrb	r3, [r2, r3]
 80019ba:	fa21 f303 	lsr.w	r3, r1, r3
 80019be:	4a08      	ldr	r2, [pc, #32]	; (80019e0 <HAL_RCC_ClockConfig+0x1c0>)
 80019c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80019c2:	2000      	movs	r0, #0
 80019c4:	f7fe fdc0 	bl	8000548 <HAL_InitTick>

  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40023c00 	.word	0x40023c00
 80019d8:	40023800 	.word	0x40023800
 80019dc:	08003768 	.word	0x08003768
 80019e0:	2000000c 	.word	0x2000000c

080019e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019e8:	4b03      	ldr	r3, [pc, #12]	; (80019f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80019ea:	681b      	ldr	r3, [r3, #0]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	2000000c 	.word	0x2000000c

080019fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a00:	f7ff fff0 	bl	80019e4 <HAL_RCC_GetHCLKFreq>
 8001a04:	4601      	mov	r1, r0
 8001a06:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	0a9b      	lsrs	r3, r3, #10
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	4a03      	ldr	r2, [pc, #12]	; (8001a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a12:	5cd3      	ldrb	r3, [r2, r3]
 8001a14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	08003778 	.word	0x08003778

08001a24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a28:	f7ff ffdc 	bl	80019e4 <HAL_RCC_GetHCLKFreq>
 8001a2c:	4601      	mov	r1, r0
 8001a2e:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	0b5b      	lsrs	r3, r3, #13
 8001a34:	f003 0307 	and.w	r3, r3, #7
 8001a38:	4a03      	ldr	r2, [pc, #12]	; (8001a48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a3a:	5cd3      	ldrb	r3, [r2, r3]
 8001a3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40023800 	.word	0x40023800
 8001a48:	08003778 	.word	0x08003778

08001a4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a4e:	b087      	sub	sp, #28
 8001a50:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a66:	4bc6      	ldr	r3, [pc, #792]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x334>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 030c 	and.w	r3, r3, #12
 8001a6e:	2b0c      	cmp	r3, #12
 8001a70:	f200 817e 	bhi.w	8001d70 <HAL_RCC_GetSysClockFreq+0x324>
 8001a74:	a201      	add	r2, pc, #4	; (adr r2, 8001a7c <HAL_RCC_GetSysClockFreq+0x30>)
 8001a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a7a:	bf00      	nop
 8001a7c:	08001ab1 	.word	0x08001ab1
 8001a80:	08001d71 	.word	0x08001d71
 8001a84:	08001d71 	.word	0x08001d71
 8001a88:	08001d71 	.word	0x08001d71
 8001a8c:	08001ab7 	.word	0x08001ab7
 8001a90:	08001d71 	.word	0x08001d71
 8001a94:	08001d71 	.word	0x08001d71
 8001a98:	08001d71 	.word	0x08001d71
 8001a9c:	08001abd 	.word	0x08001abd
 8001aa0:	08001d71 	.word	0x08001d71
 8001aa4:	08001d71 	.word	0x08001d71
 8001aa8:	08001d71 	.word	0x08001d71
 8001aac:	08001c19 	.word	0x08001c19
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ab0:	4bb4      	ldr	r3, [pc, #720]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x338>)
 8001ab2:	613b      	str	r3, [r7, #16]
       break;
 8001ab4:	e15f      	b.n	8001d76 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ab6:	4bb4      	ldr	r3, [pc, #720]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x33c>)
 8001ab8:	613b      	str	r3, [r7, #16]
      break;
 8001aba:	e15c      	b.n	8001d76 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001abc:	4bb0      	ldr	r3, [pc, #704]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x334>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ac4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ac6:	4bae      	ldr	r3, [pc, #696]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x334>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d04a      	beq.n	8001b68 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ad2:	4bab      	ldr	r3, [pc, #684]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x334>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	099b      	lsrs	r3, r3, #6
 8001ad8:	f04f 0400 	mov.w	r4, #0
 8001adc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	ea03 0501 	and.w	r5, r3, r1
 8001ae8:	ea04 0602 	and.w	r6, r4, r2
 8001aec:	4629      	mov	r1, r5
 8001aee:	4632      	mov	r2, r6
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	f04f 0400 	mov.w	r4, #0
 8001af8:	0154      	lsls	r4, r2, #5
 8001afa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001afe:	014b      	lsls	r3, r1, #5
 8001b00:	4619      	mov	r1, r3
 8001b02:	4622      	mov	r2, r4
 8001b04:	1b49      	subs	r1, r1, r5
 8001b06:	eb62 0206 	sbc.w	r2, r2, r6
 8001b0a:	f04f 0300 	mov.w	r3, #0
 8001b0e:	f04f 0400 	mov.w	r4, #0
 8001b12:	0194      	lsls	r4, r2, #6
 8001b14:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001b18:	018b      	lsls	r3, r1, #6
 8001b1a:	1a5b      	subs	r3, r3, r1
 8001b1c:	eb64 0402 	sbc.w	r4, r4, r2
 8001b20:	f04f 0100 	mov.w	r1, #0
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	00e2      	lsls	r2, r4, #3
 8001b2a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001b2e:	00d9      	lsls	r1, r3, #3
 8001b30:	460b      	mov	r3, r1
 8001b32:	4614      	mov	r4, r2
 8001b34:	195b      	adds	r3, r3, r5
 8001b36:	eb44 0406 	adc.w	r4, r4, r6
 8001b3a:	f04f 0100 	mov.w	r1, #0
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	0262      	lsls	r2, r4, #9
 8001b44:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001b48:	0259      	lsls	r1, r3, #9
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4614      	mov	r4, r2
 8001b4e:	4618      	mov	r0, r3
 8001b50:	4621      	mov	r1, r4
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f04f 0400 	mov.w	r4, #0
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4623      	mov	r3, r4
 8001b5c:	f7fe fb52 	bl	8000204 <__aeabi_uldivmod>
 8001b60:	4603      	mov	r3, r0
 8001b62:	460c      	mov	r4, r1
 8001b64:	617b      	str	r3, [r7, #20]
 8001b66:	e049      	b.n	8001bfc <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b68:	4b85      	ldr	r3, [pc, #532]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x334>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	099b      	lsrs	r3, r3, #6
 8001b6e:	f04f 0400 	mov.w	r4, #0
 8001b72:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b76:	f04f 0200 	mov.w	r2, #0
 8001b7a:	ea03 0501 	and.w	r5, r3, r1
 8001b7e:	ea04 0602 	and.w	r6, r4, r2
 8001b82:	4629      	mov	r1, r5
 8001b84:	4632      	mov	r2, r6
 8001b86:	f04f 0300 	mov.w	r3, #0
 8001b8a:	f04f 0400 	mov.w	r4, #0
 8001b8e:	0154      	lsls	r4, r2, #5
 8001b90:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b94:	014b      	lsls	r3, r1, #5
 8001b96:	4619      	mov	r1, r3
 8001b98:	4622      	mov	r2, r4
 8001b9a:	1b49      	subs	r1, r1, r5
 8001b9c:	eb62 0206 	sbc.w	r2, r2, r6
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	f04f 0400 	mov.w	r4, #0
 8001ba8:	0194      	lsls	r4, r2, #6
 8001baa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001bae:	018b      	lsls	r3, r1, #6
 8001bb0:	1a5b      	subs	r3, r3, r1
 8001bb2:	eb64 0402 	sbc.w	r4, r4, r2
 8001bb6:	f04f 0100 	mov.w	r1, #0
 8001bba:	f04f 0200 	mov.w	r2, #0
 8001bbe:	00e2      	lsls	r2, r4, #3
 8001bc0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001bc4:	00d9      	lsls	r1, r3, #3
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4614      	mov	r4, r2
 8001bca:	195b      	adds	r3, r3, r5
 8001bcc:	eb44 0406 	adc.w	r4, r4, r6
 8001bd0:	f04f 0100 	mov.w	r1, #0
 8001bd4:	f04f 0200 	mov.w	r2, #0
 8001bd8:	02a2      	lsls	r2, r4, #10
 8001bda:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001bde:	0299      	lsls	r1, r3, #10
 8001be0:	460b      	mov	r3, r1
 8001be2:	4614      	mov	r4, r2
 8001be4:	4618      	mov	r0, r3
 8001be6:	4621      	mov	r1, r4
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f04f 0400 	mov.w	r4, #0
 8001bee:	461a      	mov	r2, r3
 8001bf0:	4623      	mov	r3, r4
 8001bf2:	f7fe fb07 	bl	8000204 <__aeabi_uldivmod>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	460c      	mov	r4, r1
 8001bfa:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bfc:	4b60      	ldr	r3, [pc, #384]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x334>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	0c1b      	lsrs	r3, r3, #16
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	3301      	adds	r3, #1
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c14:	613b      	str	r3, [r7, #16]
      break;
 8001c16:	e0ae      	b.n	8001d76 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c18:	4b59      	ldr	r3, [pc, #356]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x334>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c20:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c22:	4b57      	ldr	r3, [pc, #348]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x334>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d04a      	beq.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c2e:	4b54      	ldr	r3, [pc, #336]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x334>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	099b      	lsrs	r3, r3, #6
 8001c34:	f04f 0400 	mov.w	r4, #0
 8001c38:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c3c:	f04f 0200 	mov.w	r2, #0
 8001c40:	ea03 0501 	and.w	r5, r3, r1
 8001c44:	ea04 0602 	and.w	r6, r4, r2
 8001c48:	4629      	mov	r1, r5
 8001c4a:	4632      	mov	r2, r6
 8001c4c:	f04f 0300 	mov.w	r3, #0
 8001c50:	f04f 0400 	mov.w	r4, #0
 8001c54:	0154      	lsls	r4, r2, #5
 8001c56:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c5a:	014b      	lsls	r3, r1, #5
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4622      	mov	r2, r4
 8001c60:	1b49      	subs	r1, r1, r5
 8001c62:	eb62 0206 	sbc.w	r2, r2, r6
 8001c66:	f04f 0300 	mov.w	r3, #0
 8001c6a:	f04f 0400 	mov.w	r4, #0
 8001c6e:	0194      	lsls	r4, r2, #6
 8001c70:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c74:	018b      	lsls	r3, r1, #6
 8001c76:	1a5b      	subs	r3, r3, r1
 8001c78:	eb64 0402 	sbc.w	r4, r4, r2
 8001c7c:	f04f 0100 	mov.w	r1, #0
 8001c80:	f04f 0200 	mov.w	r2, #0
 8001c84:	00e2      	lsls	r2, r4, #3
 8001c86:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001c8a:	00d9      	lsls	r1, r3, #3
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	4614      	mov	r4, r2
 8001c90:	195b      	adds	r3, r3, r5
 8001c92:	eb44 0406 	adc.w	r4, r4, r6
 8001c96:	f04f 0100 	mov.w	r1, #0
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	0262      	lsls	r2, r4, #9
 8001ca0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001ca4:	0259      	lsls	r1, r3, #9
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4614      	mov	r4, r2
 8001caa:	4618      	mov	r0, r3
 8001cac:	4621      	mov	r1, r4
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f04f 0400 	mov.w	r4, #0
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4623      	mov	r3, r4
 8001cb8:	f7fe faa4 	bl	8000204 <__aeabi_uldivmod>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	460c      	mov	r4, r1
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	e049      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cc4:	4b2e      	ldr	r3, [pc, #184]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x334>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	099b      	lsrs	r3, r3, #6
 8001cca:	f04f 0400 	mov.w	r4, #0
 8001cce:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001cd2:	f04f 0200 	mov.w	r2, #0
 8001cd6:	ea03 0501 	and.w	r5, r3, r1
 8001cda:	ea04 0602 	and.w	r6, r4, r2
 8001cde:	4629      	mov	r1, r5
 8001ce0:	4632      	mov	r2, r6
 8001ce2:	f04f 0300 	mov.w	r3, #0
 8001ce6:	f04f 0400 	mov.w	r4, #0
 8001cea:	0154      	lsls	r4, r2, #5
 8001cec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001cf0:	014b      	lsls	r3, r1, #5
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4622      	mov	r2, r4
 8001cf6:	1b49      	subs	r1, r1, r5
 8001cf8:	eb62 0206 	sbc.w	r2, r2, r6
 8001cfc:	f04f 0300 	mov.w	r3, #0
 8001d00:	f04f 0400 	mov.w	r4, #0
 8001d04:	0194      	lsls	r4, r2, #6
 8001d06:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001d0a:	018b      	lsls	r3, r1, #6
 8001d0c:	1a5b      	subs	r3, r3, r1
 8001d0e:	eb64 0402 	sbc.w	r4, r4, r2
 8001d12:	f04f 0100 	mov.w	r1, #0
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	00e2      	lsls	r2, r4, #3
 8001d1c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001d20:	00d9      	lsls	r1, r3, #3
 8001d22:	460b      	mov	r3, r1
 8001d24:	4614      	mov	r4, r2
 8001d26:	195b      	adds	r3, r3, r5
 8001d28:	eb44 0406 	adc.w	r4, r4, r6
 8001d2c:	f04f 0100 	mov.w	r1, #0
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	02a2      	lsls	r2, r4, #10
 8001d36:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001d3a:	0299      	lsls	r1, r3, #10
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	4614      	mov	r4, r2
 8001d40:	4618      	mov	r0, r3
 8001d42:	4621      	mov	r1, r4
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f04f 0400 	mov.w	r4, #0
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	4623      	mov	r3, r4
 8001d4e:	f7fe fa59 	bl	8000204 <__aeabi_uldivmod>
 8001d52:	4603      	mov	r3, r0
 8001d54:	460c      	mov	r4, r1
 8001d56:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001d58:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x334>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	0f1b      	lsrs	r3, r3, #28
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6c:	613b      	str	r3, [r7, #16]
      break;
 8001d6e:	e002      	b.n	8001d76 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d70:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x338>)
 8001d72:	613b      	str	r3, [r7, #16]
      break;
 8001d74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d76:	693b      	ldr	r3, [r7, #16]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	371c      	adds	r7, #28
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d80:	40023800 	.word	0x40023800
 8001d84:	00f42400 	.word	0x00f42400
 8001d88:	007a1200 	.word	0x007a1200

08001d8c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 8083 	beq.w	8001eac <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001da6:	4b95      	ldr	r3, [pc, #596]	; (8001ffc <HAL_RCC_OscConfig+0x270>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 030c 	and.w	r3, r3, #12
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	d019      	beq.n	8001de6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001db2:	4b92      	ldr	r3, [pc, #584]	; (8001ffc <HAL_RCC_OscConfig+0x270>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001dba:	2b08      	cmp	r3, #8
 8001dbc:	d106      	bne.n	8001dcc <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001dbe:	4b8f      	ldr	r3, [pc, #572]	; (8001ffc <HAL_RCC_OscConfig+0x270>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dca:	d00c      	beq.n	8001de6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dcc:	4b8b      	ldr	r3, [pc, #556]	; (8001ffc <HAL_RCC_OscConfig+0x270>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001dd4:	2b0c      	cmp	r3, #12
 8001dd6:	d112      	bne.n	8001dfe <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dd8:	4b88      	ldr	r3, [pc, #544]	; (8001ffc <HAL_RCC_OscConfig+0x270>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001de0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001de4:	d10b      	bne.n	8001dfe <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de6:	4b85      	ldr	r3, [pc, #532]	; (8001ffc <HAL_RCC_OscConfig+0x270>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d05b      	beq.n	8001eaa <HAL_RCC_OscConfig+0x11e>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d157      	bne.n	8001eaa <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e216      	b.n	800222c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e06:	d106      	bne.n	8001e16 <HAL_RCC_OscConfig+0x8a>
 8001e08:	4b7c      	ldr	r3, [pc, #496]	; (8001ffc <HAL_RCC_OscConfig+0x270>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a7b      	ldr	r2, [pc, #492]	; (8001ffc <HAL_RCC_OscConfig+0x270>)
 8001e0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e12:	6013      	str	r3, [r2, #0]
 8001e14:	e01d      	b.n	8001e52 <HAL_RCC_OscConfig+0xc6>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e1e:	d10c      	bne.n	8001e3a <HAL_RCC_OscConfig+0xae>
 8001e20:	4b76      	ldr	r3, [pc, #472]	; (8001ffc <HAL_RCC_OscConfig+0x270>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a75      	ldr	r2, [pc, #468]	; (8001ffc <HAL_RCC_OscConfig+0x270>)
 8001e26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e2a:	6013      	str	r3, [r2, #0]
 8001e2c:	4b73      	ldr	r3, [pc, #460]	; (8001ffc <HAL_RCC_OscConfig+0x270>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a72      	ldr	r2, [pc, #456]	; (8001ffc <HAL_RCC_OscConfig+0x270>)
 8001e32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e36:	6013      	str	r3, [r2, #0]
 8001e38:	e00b      	b.n	8001e52 <HAL_RCC_OscConfig+0xc6>
 8001e3a:	4b70      	ldr	r3, [pc, #448]	; (8001ffc <HAL_RCC_OscConfig+0x270>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a6f      	ldr	r2, [pc, #444]	; (8001ffc <HAL_RCC_OscConfig+0x270>)
 8001e40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	4b6d      	ldr	r3, [pc, #436]	; (8001ffc <HAL_RCC_OscConfig+0x270>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a6c      	ldr	r2, [pc, #432]	; (8001ffc <HAL_RCC_OscConfig+0x270>)
 8001e4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e50:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d013      	beq.n	8001e82 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5a:	f7fe fbb9 	bl	80005d0 <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e62:	f7fe fbb5 	bl	80005d0 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b64      	cmp	r3, #100	; 0x64
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e1db      	b.n	800222c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e74:	4b61      	ldr	r3, [pc, #388]	; (8001ffc <HAL_RCC_OscConfig+0x270>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0f0      	beq.n	8001e62 <HAL_RCC_OscConfig+0xd6>
 8001e80:	e014      	b.n	8001eac <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e82:	f7fe fba5 	bl	80005d0 <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e8a:	f7fe fba1 	bl	80005d0 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b64      	cmp	r3, #100	; 0x64
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e1c7      	b.n	800222c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e9c:	4b57      	ldr	r3, [pc, #348]	; (8001ffc <HAL_RCC_OscConfig+0x270>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1f0      	bne.n	8001e8a <HAL_RCC_OscConfig+0xfe>
 8001ea8:	e000      	b.n	8001eac <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eaa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d06f      	beq.n	8001f98 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001eb8:	4b50      	ldr	r3, [pc, #320]	; (8001ffc <HAL_RCC_OscConfig+0x270>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 030c 	and.w	r3, r3, #12
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d017      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ec4:	4b4d      	ldr	r3, [pc, #308]	; (8001ffc <HAL_RCC_OscConfig+0x270>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	d105      	bne.n	8001edc <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ed0:	4b4a      	ldr	r3, [pc, #296]	; (8001ffc <HAL_RCC_OscConfig+0x270>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00b      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001edc:	4b47      	ldr	r3, [pc, #284]	; (8001ffc <HAL_RCC_OscConfig+0x270>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ee4:	2b0c      	cmp	r3, #12
 8001ee6:	d11c      	bne.n	8001f22 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ee8:	4b44      	ldr	r3, [pc, #272]	; (8001ffc <HAL_RCC_OscConfig+0x270>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d116      	bne.n	8001f22 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ef4:	4b41      	ldr	r3, [pc, #260]	; (8001ffc <HAL_RCC_OscConfig+0x270>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d005      	beq.n	8001f0c <HAL_RCC_OscConfig+0x180>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d001      	beq.n	8001f0c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e18f      	b.n	800222c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f0c:	4b3b      	ldr	r3, [pc, #236]	; (8001ffc <HAL_RCC_OscConfig+0x270>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	4938      	ldr	r1, [pc, #224]	; (8001ffc <HAL_RCC_OscConfig+0x270>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f20:	e03a      	b.n	8001f98 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d020      	beq.n	8001f6c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f2a:	4b35      	ldr	r3, [pc, #212]	; (8002000 <HAL_RCC_OscConfig+0x274>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f30:	f7fe fb4e 	bl	80005d0 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f38:	f7fe fb4a 	bl	80005d0 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e170      	b.n	800222c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f4a:	4b2c      	ldr	r3, [pc, #176]	; (8001ffc <HAL_RCC_OscConfig+0x270>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d0f0      	beq.n	8001f38 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f56:	4b29      	ldr	r3, [pc, #164]	; (8001ffc <HAL_RCC_OscConfig+0x270>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	4925      	ldr	r1, [pc, #148]	; (8001ffc <HAL_RCC_OscConfig+0x270>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	600b      	str	r3, [r1, #0]
 8001f6a:	e015      	b.n	8001f98 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f6c:	4b24      	ldr	r3, [pc, #144]	; (8002000 <HAL_RCC_OscConfig+0x274>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f72:	f7fe fb2d 	bl	80005d0 <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f7a:	f7fe fb29 	bl	80005d0 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e14f      	b.n	800222c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f8c:	4b1b      	ldr	r3, [pc, #108]	; (8001ffc <HAL_RCC_OscConfig+0x270>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1f0      	bne.n	8001f7a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0308 	and.w	r3, r3, #8
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d037      	beq.n	8002014 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d016      	beq.n	8001fda <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fac:	4b15      	ldr	r3, [pc, #84]	; (8002004 <HAL_RCC_OscConfig+0x278>)
 8001fae:	2201      	movs	r2, #1
 8001fb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb2:	f7fe fb0d 	bl	80005d0 <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fba:	f7fe fb09 	bl	80005d0 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e12f      	b.n	800222c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <HAL_RCC_OscConfig+0x270>)
 8001fce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0f0      	beq.n	8001fba <HAL_RCC_OscConfig+0x22e>
 8001fd8:	e01c      	b.n	8002014 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fda:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <HAL_RCC_OscConfig+0x278>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe0:	f7fe faf6 	bl	80005d0 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe6:	e00f      	b.n	8002008 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fe8:	f7fe faf2 	bl	80005d0 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d908      	bls.n	8002008 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e118      	b.n	800222c <HAL_RCC_OscConfig+0x4a0>
 8001ffa:	bf00      	nop
 8001ffc:	40023800 	.word	0x40023800
 8002000:	42470000 	.word	0x42470000
 8002004:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002008:	4b8a      	ldr	r3, [pc, #552]	; (8002234 <HAL_RCC_OscConfig+0x4a8>)
 800200a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1e9      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 8097 	beq.w	8002150 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002022:	2300      	movs	r3, #0
 8002024:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002026:	4b83      	ldr	r3, [pc, #524]	; (8002234 <HAL_RCC_OscConfig+0x4a8>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10f      	bne.n	8002052 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	4b7f      	ldr	r3, [pc, #508]	; (8002234 <HAL_RCC_OscConfig+0x4a8>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	4a7e      	ldr	r2, [pc, #504]	; (8002234 <HAL_RCC_OscConfig+0x4a8>)
 800203c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002040:	6413      	str	r3, [r2, #64]	; 0x40
 8002042:	4b7c      	ldr	r3, [pc, #496]	; (8002234 <HAL_RCC_OscConfig+0x4a8>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800204e:	2301      	movs	r3, #1
 8002050:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002052:	4b79      	ldr	r3, [pc, #484]	; (8002238 <HAL_RCC_OscConfig+0x4ac>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205a:	2b00      	cmp	r3, #0
 800205c:	d118      	bne.n	8002090 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800205e:	4b76      	ldr	r3, [pc, #472]	; (8002238 <HAL_RCC_OscConfig+0x4ac>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a75      	ldr	r2, [pc, #468]	; (8002238 <HAL_RCC_OscConfig+0x4ac>)
 8002064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002068:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800206a:	f7fe fab1 	bl	80005d0 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002072:	f7fe faad 	bl	80005d0 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e0d3      	b.n	800222c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002084:	4b6c      	ldr	r3, [pc, #432]	; (8002238 <HAL_RCC_OscConfig+0x4ac>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0f0      	beq.n	8002072 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d106      	bne.n	80020a6 <HAL_RCC_OscConfig+0x31a>
 8002098:	4b66      	ldr	r3, [pc, #408]	; (8002234 <HAL_RCC_OscConfig+0x4a8>)
 800209a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800209c:	4a65      	ldr	r2, [pc, #404]	; (8002234 <HAL_RCC_OscConfig+0x4a8>)
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	6713      	str	r3, [r2, #112]	; 0x70
 80020a4:	e01c      	b.n	80020e0 <HAL_RCC_OscConfig+0x354>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2b05      	cmp	r3, #5
 80020ac:	d10c      	bne.n	80020c8 <HAL_RCC_OscConfig+0x33c>
 80020ae:	4b61      	ldr	r3, [pc, #388]	; (8002234 <HAL_RCC_OscConfig+0x4a8>)
 80020b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b2:	4a60      	ldr	r2, [pc, #384]	; (8002234 <HAL_RCC_OscConfig+0x4a8>)
 80020b4:	f043 0304 	orr.w	r3, r3, #4
 80020b8:	6713      	str	r3, [r2, #112]	; 0x70
 80020ba:	4b5e      	ldr	r3, [pc, #376]	; (8002234 <HAL_RCC_OscConfig+0x4a8>)
 80020bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020be:	4a5d      	ldr	r2, [pc, #372]	; (8002234 <HAL_RCC_OscConfig+0x4a8>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	6713      	str	r3, [r2, #112]	; 0x70
 80020c6:	e00b      	b.n	80020e0 <HAL_RCC_OscConfig+0x354>
 80020c8:	4b5a      	ldr	r3, [pc, #360]	; (8002234 <HAL_RCC_OscConfig+0x4a8>)
 80020ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020cc:	4a59      	ldr	r2, [pc, #356]	; (8002234 <HAL_RCC_OscConfig+0x4a8>)
 80020ce:	f023 0301 	bic.w	r3, r3, #1
 80020d2:	6713      	str	r3, [r2, #112]	; 0x70
 80020d4:	4b57      	ldr	r3, [pc, #348]	; (8002234 <HAL_RCC_OscConfig+0x4a8>)
 80020d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d8:	4a56      	ldr	r2, [pc, #344]	; (8002234 <HAL_RCC_OscConfig+0x4a8>)
 80020da:	f023 0304 	bic.w	r3, r3, #4
 80020de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d015      	beq.n	8002114 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e8:	f7fe fa72 	bl	80005d0 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ee:	e00a      	b.n	8002106 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020f0:	f7fe fa6e 	bl	80005d0 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fe:	4293      	cmp	r3, r2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e092      	b.n	800222c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002106:	4b4b      	ldr	r3, [pc, #300]	; (8002234 <HAL_RCC_OscConfig+0x4a8>)
 8002108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0ee      	beq.n	80020f0 <HAL_RCC_OscConfig+0x364>
 8002112:	e014      	b.n	800213e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002114:	f7fe fa5c 	bl	80005d0 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800211a:	e00a      	b.n	8002132 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800211c:	f7fe fa58 	bl	80005d0 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	f241 3288 	movw	r2, #5000	; 0x1388
 800212a:	4293      	cmp	r3, r2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e07c      	b.n	800222c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002132:	4b40      	ldr	r3, [pc, #256]	; (8002234 <HAL_RCC_OscConfig+0x4a8>)
 8002134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1ee      	bne.n	800211c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800213e:	7dfb      	ldrb	r3, [r7, #23]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d105      	bne.n	8002150 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002144:	4b3b      	ldr	r3, [pc, #236]	; (8002234 <HAL_RCC_OscConfig+0x4a8>)
 8002146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002148:	4a3a      	ldr	r2, [pc, #232]	; (8002234 <HAL_RCC_OscConfig+0x4a8>)
 800214a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800214e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d068      	beq.n	800222a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002158:	4b36      	ldr	r3, [pc, #216]	; (8002234 <HAL_RCC_OscConfig+0x4a8>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 030c 	and.w	r3, r3, #12
 8002160:	2b08      	cmp	r3, #8
 8002162:	d060      	beq.n	8002226 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	2b02      	cmp	r3, #2
 800216a:	d145      	bne.n	80021f8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800216c:	4b33      	ldr	r3, [pc, #204]	; (800223c <HAL_RCC_OscConfig+0x4b0>)
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002172:	f7fe fa2d 	bl	80005d0 <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002178:	e008      	b.n	800218c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800217a:	f7fe fa29 	bl	80005d0 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e04f      	b.n	800222c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800218c:	4b29      	ldr	r3, [pc, #164]	; (8002234 <HAL_RCC_OscConfig+0x4a8>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1f0      	bne.n	800217a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69da      	ldr	r2, [r3, #28]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	431a      	orrs	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a6:	019b      	lsls	r3, r3, #6
 80021a8:	431a      	orrs	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ae:	085b      	lsrs	r3, r3, #1
 80021b0:	3b01      	subs	r3, #1
 80021b2:	041b      	lsls	r3, r3, #16
 80021b4:	431a      	orrs	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ba:	061b      	lsls	r3, r3, #24
 80021bc:	431a      	orrs	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	071b      	lsls	r3, r3, #28
 80021c4:	491b      	ldr	r1, [pc, #108]	; (8002234 <HAL_RCC_OscConfig+0x4a8>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021ca:	4b1c      	ldr	r3, [pc, #112]	; (800223c <HAL_RCC_OscConfig+0x4b0>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d0:	f7fe f9fe 	bl	80005d0 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021d8:	f7fe f9fa 	bl	80005d0 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e020      	b.n	800222c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ea:	4b12      	ldr	r3, [pc, #72]	; (8002234 <HAL_RCC_OscConfig+0x4a8>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0f0      	beq.n	80021d8 <HAL_RCC_OscConfig+0x44c>
 80021f6:	e018      	b.n	800222a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f8:	4b10      	ldr	r3, [pc, #64]	; (800223c <HAL_RCC_OscConfig+0x4b0>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fe:	f7fe f9e7 	bl	80005d0 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002206:	f7fe f9e3 	bl	80005d0 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e009      	b.n	800222c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002218:	4b06      	ldr	r3, [pc, #24]	; (8002234 <HAL_RCC_OscConfig+0x4a8>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1f0      	bne.n	8002206 <HAL_RCC_OscConfig+0x47a>
 8002224:	e001      	b.n	800222a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e000      	b.n	800222c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40023800 	.word	0x40023800
 8002238:	40007000 	.word	0x40007000
 800223c:	42470060 	.word	0x42470060

08002240 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e056      	b.n	8002300 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b00      	cmp	r3, #0
 8002262:	d106      	bne.n	8002272 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f001 f8bd 	bl	80033ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2202      	movs	r2, #2
 8002276:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002288:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685a      	ldr	r2, [r3, #4]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	431a      	orrs	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	431a      	orrs	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	431a      	orrs	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	431a      	orrs	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	ea42 0103 	orr.w	r1, r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	0c1b      	lsrs	r3, r3, #16
 80022d0:	f003 0104 	and.w	r1, r3, #4
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	69da      	ldr	r2, [r3, #28]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08c      	sub	sp, #48	; 0x30
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
 8002314:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002316:	2301      	movs	r3, #1
 8002318:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800231a:	2300      	movs	r3, #0
 800231c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002326:	2b01      	cmp	r3, #1
 8002328:	d101      	bne.n	800232e <HAL_SPI_TransmitReceive+0x26>
 800232a:	2302      	movs	r3, #2
 800232c:	e18a      	b.n	8002644 <HAL_SPI_TransmitReceive+0x33c>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002336:	f7fe f94b 	bl	80005d0 <HAL_GetTick>
 800233a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800234c:	887b      	ldrh	r3, [r7, #2]
 800234e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002350:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002354:	2b01      	cmp	r3, #1
 8002356:	d00f      	beq.n	8002378 <HAL_SPI_TransmitReceive+0x70>
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800235e:	d107      	bne.n	8002370 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d103      	bne.n	8002370 <HAL_SPI_TransmitReceive+0x68>
 8002368:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800236c:	2b04      	cmp	r3, #4
 800236e:	d003      	beq.n	8002378 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002370:	2302      	movs	r3, #2
 8002372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002376:	e15b      	b.n	8002630 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d005      	beq.n	800238a <HAL_SPI_TransmitReceive+0x82>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d002      	beq.n	800238a <HAL_SPI_TransmitReceive+0x82>
 8002384:	887b      	ldrh	r3, [r7, #2]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d103      	bne.n	8002392 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002390:	e14e      	b.n	8002630 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b04      	cmp	r3, #4
 800239c:	d003      	beq.n	80023a6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2205      	movs	r2, #5
 80023a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	887a      	ldrh	r2, [r7, #2]
 80023b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	887a      	ldrh	r2, [r7, #2]
 80023bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	887a      	ldrh	r2, [r7, #2]
 80023c8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	887a      	ldrh	r2, [r7, #2]
 80023ce:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e6:	2b40      	cmp	r3, #64	; 0x40
 80023e8:	d007      	beq.n	80023fa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002402:	d178      	bne.n	80024f6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d002      	beq.n	8002412 <HAL_SPI_TransmitReceive+0x10a>
 800240c:	8b7b      	ldrh	r3, [r7, #26]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d166      	bne.n	80024e0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	881a      	ldrh	r2, [r3, #0]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	1c9a      	adds	r2, r3, #2
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800242c:	b29b      	uxth	r3, r3
 800242e:	3b01      	subs	r3, #1
 8002430:	b29a      	uxth	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002436:	e053      	b.n	80024e0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b02      	cmp	r3, #2
 8002444:	d11b      	bne.n	800247e <HAL_SPI_TransmitReceive+0x176>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800244a:	b29b      	uxth	r3, r3
 800244c:	2b00      	cmp	r3, #0
 800244e:	d016      	beq.n	800247e <HAL_SPI_TransmitReceive+0x176>
 8002450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002452:	2b01      	cmp	r3, #1
 8002454:	d113      	bne.n	800247e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	881a      	ldrh	r2, [r3, #0]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	1c9a      	adds	r2, r3, #2
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002470:	b29b      	uxth	r3, r3
 8002472:	3b01      	subs	r3, #1
 8002474:	b29a      	uxth	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800247a:	2300      	movs	r3, #0
 800247c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b01      	cmp	r3, #1
 800248a:	d119      	bne.n	80024c0 <HAL_SPI_TransmitReceive+0x1b8>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002490:	b29b      	uxth	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d014      	beq.n	80024c0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68da      	ldr	r2, [r3, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a0:	b292      	uxth	r2, r2
 80024a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a8:	1c9a      	adds	r2, r3, #2
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	3b01      	subs	r3, #1
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80024bc:	2301      	movs	r3, #1
 80024be:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80024c0:	f7fe f886 	bl	80005d0 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d807      	bhi.n	80024e0 <HAL_SPI_TransmitReceive+0x1d8>
 80024d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024d6:	d003      	beq.n	80024e0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80024de:	e0a7      	b.n	8002630 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1a6      	bne.n	8002438 <HAL_SPI_TransmitReceive+0x130>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1a1      	bne.n	8002438 <HAL_SPI_TransmitReceive+0x130>
 80024f4:	e07c      	b.n	80025f0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d002      	beq.n	8002504 <HAL_SPI_TransmitReceive+0x1fc>
 80024fe:	8b7b      	ldrh	r3, [r7, #26]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d16b      	bne.n	80025dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	330c      	adds	r3, #12
 800250e:	7812      	ldrb	r2, [r2, #0]
 8002510:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	1c5a      	adds	r2, r3, #1
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002520:	b29b      	uxth	r3, r3
 8002522:	3b01      	subs	r3, #1
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800252a:	e057      	b.n	80025dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b02      	cmp	r3, #2
 8002538:	d11c      	bne.n	8002574 <HAL_SPI_TransmitReceive+0x26c>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800253e:	b29b      	uxth	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	d017      	beq.n	8002574 <HAL_SPI_TransmitReceive+0x26c>
 8002544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002546:	2b01      	cmp	r3, #1
 8002548:	d114      	bne.n	8002574 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	330c      	adds	r3, #12
 8002554:	7812      	ldrb	r2, [r2, #0]
 8002556:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002566:	b29b      	uxth	r3, r3
 8002568:	3b01      	subs	r3, #1
 800256a:	b29a      	uxth	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002570:	2300      	movs	r3, #0
 8002572:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b01      	cmp	r3, #1
 8002580:	d119      	bne.n	80025b6 <HAL_SPI_TransmitReceive+0x2ae>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002586:	b29b      	uxth	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d014      	beq.n	80025b6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68da      	ldr	r2, [r3, #12]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259e:	1c5a      	adds	r2, r3, #1
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80025b2:	2301      	movs	r3, #1
 80025b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80025b6:	f7fe f80b 	bl	80005d0 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d803      	bhi.n	80025ce <HAL_SPI_TransmitReceive+0x2c6>
 80025c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025cc:	d102      	bne.n	80025d4 <HAL_SPI_TransmitReceive+0x2cc>
 80025ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d103      	bne.n	80025dc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80025da:	e029      	b.n	8002630 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1a2      	bne.n	800252c <HAL_SPI_TransmitReceive+0x224>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d19d      	bne.n	800252c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f000 f893 	bl	8002720 <SPI_EndRxTxTransaction>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d006      	beq.n	800260e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2220      	movs	r2, #32
 800260a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800260c:	e010      	b.n	8002630 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10b      	bne.n	800262e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002616:	2300      	movs	r3, #0
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	617b      	str	r3, [r7, #20]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	617b      	str	r3, [r7, #20]
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	e000      	b.n	8002630 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800262e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002640:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002644:	4618      	mov	r0, r3
 8002646:	3730      	adds	r7, #48	; 0x30
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	603b      	str	r3, [r7, #0]
 8002658:	4613      	mov	r3, r2
 800265a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800265c:	e04c      	b.n	80026f8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002664:	d048      	beq.n	80026f8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002666:	f7fd ffb3 	bl	80005d0 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	429a      	cmp	r2, r3
 8002674:	d902      	bls.n	800267c <SPI_WaitFlagStateUntilTimeout+0x30>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d13d      	bne.n	80026f8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800268a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002694:	d111      	bne.n	80026ba <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800269e:	d004      	beq.n	80026aa <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026a8:	d107      	bne.n	80026ba <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026c2:	d10f      	bne.n	80026e4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e00f      	b.n	8002718 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	4013      	ands	r3, r2
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	429a      	cmp	r2, r3
 8002706:	bf0c      	ite	eq
 8002708:	2301      	moveq	r3, #1
 800270a:	2300      	movne	r3, #0
 800270c:	b2db      	uxtb	r3, r3
 800270e:	461a      	mov	r2, r3
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	429a      	cmp	r2, r3
 8002714:	d1a3      	bne.n	800265e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b088      	sub	sp, #32
 8002724:	af02      	add	r7, sp, #8
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800272c:	4b1b      	ldr	r3, [pc, #108]	; (800279c <SPI_EndRxTxTransaction+0x7c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a1b      	ldr	r2, [pc, #108]	; (80027a0 <SPI_EndRxTxTransaction+0x80>)
 8002732:	fba2 2303 	umull	r2, r3, r2, r3
 8002736:	0d5b      	lsrs	r3, r3, #21
 8002738:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800273c:	fb02 f303 	mul.w	r3, r2, r3
 8002740:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800274a:	d112      	bne.n	8002772 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2200      	movs	r2, #0
 8002754:	2180      	movs	r1, #128	; 0x80
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f7ff ff78 	bl	800264c <SPI_WaitFlagStateUntilTimeout>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d016      	beq.n	8002790 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002766:	f043 0220 	orr.w	r2, r3, #32
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e00f      	b.n	8002792 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00a      	beq.n	800278e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	3b01      	subs	r3, #1
 800277c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002788:	2b80      	cmp	r3, #128	; 0x80
 800278a:	d0f2      	beq.n	8002772 <SPI_EndRxTxTransaction+0x52>
 800278c:	e000      	b.n	8002790 <SPI_EndRxTxTransaction+0x70>
        break;
 800278e:	bf00      	nop
  }

  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3718      	adds	r7, #24
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	2000000c 	.word	0x2000000c
 80027a0:	165e9f81 	.word	0x165e9f81

080027a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e03f      	b.n	8002836 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d106      	bne.n	80027d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 fe96 	bl	80034fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2224      	movs	r2, #36	; 0x24
 80027d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68da      	ldr	r2, [r3, #12]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 f829 	bl	8002840 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	691a      	ldr	r2, [r3, #16]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	695a      	ldr	r2, [r3, #20]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800280c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68da      	ldr	r2, [r3, #12]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800281c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2220      	movs	r2, #32
 8002828:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2220      	movs	r2, #32
 8002830:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002840:	b5b0      	push	{r4, r5, r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68da      	ldr	r2, [r3, #12]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689a      	ldr	r2, [r3, #8]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	431a      	orrs	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	4313      	orrs	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002880:	f023 030c 	bic.w	r3, r3, #12
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6812      	ldr	r2, [r2, #0]
 8002888:	68f9      	ldr	r1, [r7, #12]
 800288a:	430b      	orrs	r3, r1
 800288c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	699a      	ldr	r2, [r3, #24]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	69db      	ldr	r3, [r3, #28]
 80028a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028ac:	f040 80e4 	bne.w	8002a78 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4aab      	ldr	r2, [pc, #684]	; (8002b64 <UART_SetConfig+0x324>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d004      	beq.n	80028c4 <UART_SetConfig+0x84>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4aaa      	ldr	r2, [pc, #680]	; (8002b68 <UART_SetConfig+0x328>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d16c      	bne.n	800299e <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80028c4:	f7ff f8ae 	bl	8001a24 <HAL_RCC_GetPCLK2Freq>
 80028c8:	4602      	mov	r2, r0
 80028ca:	4613      	mov	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	009a      	lsls	r2, r3, #2
 80028d2:	441a      	add	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	fbb2 f3f3 	udiv	r3, r2, r3
 80028de:	4aa3      	ldr	r2, [pc, #652]	; (8002b6c <UART_SetConfig+0x32c>)
 80028e0:	fba2 2303 	umull	r2, r3, r2, r3
 80028e4:	095b      	lsrs	r3, r3, #5
 80028e6:	011c      	lsls	r4, r3, #4
 80028e8:	f7ff f89c 	bl	8001a24 <HAL_RCC_GetPCLK2Freq>
 80028ec:	4602      	mov	r2, r0
 80028ee:	4613      	mov	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	009a      	lsls	r2, r3, #2
 80028f6:	441a      	add	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	fbb2 f5f3 	udiv	r5, r2, r3
 8002902:	f7ff f88f 	bl	8001a24 <HAL_RCC_GetPCLK2Freq>
 8002906:	4602      	mov	r2, r0
 8002908:	4613      	mov	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	009a      	lsls	r2, r3, #2
 8002910:	441a      	add	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	fbb2 f3f3 	udiv	r3, r2, r3
 800291c:	4a93      	ldr	r2, [pc, #588]	; (8002b6c <UART_SetConfig+0x32c>)
 800291e:	fba2 2303 	umull	r2, r3, r2, r3
 8002922:	095b      	lsrs	r3, r3, #5
 8002924:	2264      	movs	r2, #100	; 0x64
 8002926:	fb02 f303 	mul.w	r3, r2, r3
 800292a:	1aeb      	subs	r3, r5, r3
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	3332      	adds	r3, #50	; 0x32
 8002930:	4a8e      	ldr	r2, [pc, #568]	; (8002b6c <UART_SetConfig+0x32c>)
 8002932:	fba2 2303 	umull	r2, r3, r2, r3
 8002936:	095b      	lsrs	r3, r3, #5
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800293e:	441c      	add	r4, r3
 8002940:	f7ff f870 	bl	8001a24 <HAL_RCC_GetPCLK2Freq>
 8002944:	4602      	mov	r2, r0
 8002946:	4613      	mov	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	009a      	lsls	r2, r3, #2
 800294e:	441a      	add	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	fbb2 f5f3 	udiv	r5, r2, r3
 800295a:	f7ff f863 	bl	8001a24 <HAL_RCC_GetPCLK2Freq>
 800295e:	4602      	mov	r2, r0
 8002960:	4613      	mov	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	009a      	lsls	r2, r3, #2
 8002968:	441a      	add	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	fbb2 f3f3 	udiv	r3, r2, r3
 8002974:	4a7d      	ldr	r2, [pc, #500]	; (8002b6c <UART_SetConfig+0x32c>)
 8002976:	fba2 2303 	umull	r2, r3, r2, r3
 800297a:	095b      	lsrs	r3, r3, #5
 800297c:	2264      	movs	r2, #100	; 0x64
 800297e:	fb02 f303 	mul.w	r3, r2, r3
 8002982:	1aeb      	subs	r3, r5, r3
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	3332      	adds	r3, #50	; 0x32
 8002988:	4a78      	ldr	r2, [pc, #480]	; (8002b6c <UART_SetConfig+0x32c>)
 800298a:	fba2 2303 	umull	r2, r3, r2, r3
 800298e:	095b      	lsrs	r3, r3, #5
 8002990:	f003 0207 	and.w	r2, r3, #7
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4422      	add	r2, r4
 800299a:	609a      	str	r2, [r3, #8]
 800299c:	e154      	b.n	8002c48 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800299e:	f7ff f82d 	bl	80019fc <HAL_RCC_GetPCLK1Freq>
 80029a2:	4602      	mov	r2, r0
 80029a4:	4613      	mov	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	009a      	lsls	r2, r3, #2
 80029ac:	441a      	add	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b8:	4a6c      	ldr	r2, [pc, #432]	; (8002b6c <UART_SetConfig+0x32c>)
 80029ba:	fba2 2303 	umull	r2, r3, r2, r3
 80029be:	095b      	lsrs	r3, r3, #5
 80029c0:	011c      	lsls	r4, r3, #4
 80029c2:	f7ff f81b 	bl	80019fc <HAL_RCC_GetPCLK1Freq>
 80029c6:	4602      	mov	r2, r0
 80029c8:	4613      	mov	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	009a      	lsls	r2, r3, #2
 80029d0:	441a      	add	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	fbb2 f5f3 	udiv	r5, r2, r3
 80029dc:	f7ff f80e 	bl	80019fc <HAL_RCC_GetPCLK1Freq>
 80029e0:	4602      	mov	r2, r0
 80029e2:	4613      	mov	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4413      	add	r3, r2
 80029e8:	009a      	lsls	r2, r3, #2
 80029ea:	441a      	add	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f6:	4a5d      	ldr	r2, [pc, #372]	; (8002b6c <UART_SetConfig+0x32c>)
 80029f8:	fba2 2303 	umull	r2, r3, r2, r3
 80029fc:	095b      	lsrs	r3, r3, #5
 80029fe:	2264      	movs	r2, #100	; 0x64
 8002a00:	fb02 f303 	mul.w	r3, r2, r3
 8002a04:	1aeb      	subs	r3, r5, r3
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	3332      	adds	r3, #50	; 0x32
 8002a0a:	4a58      	ldr	r2, [pc, #352]	; (8002b6c <UART_SetConfig+0x32c>)
 8002a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a10:	095b      	lsrs	r3, r3, #5
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a18:	441c      	add	r4, r3
 8002a1a:	f7fe ffef 	bl	80019fc <HAL_RCC_GetPCLK1Freq>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	4613      	mov	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	009a      	lsls	r2, r3, #2
 8002a28:	441a      	add	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	fbb2 f5f3 	udiv	r5, r2, r3
 8002a34:	f7fe ffe2 	bl	80019fc <HAL_RCC_GetPCLK1Freq>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	009a      	lsls	r2, r3, #2
 8002a42:	441a      	add	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4e:	4a47      	ldr	r2, [pc, #284]	; (8002b6c <UART_SetConfig+0x32c>)
 8002a50:	fba2 2303 	umull	r2, r3, r2, r3
 8002a54:	095b      	lsrs	r3, r3, #5
 8002a56:	2264      	movs	r2, #100	; 0x64
 8002a58:	fb02 f303 	mul.w	r3, r2, r3
 8002a5c:	1aeb      	subs	r3, r5, r3
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	3332      	adds	r3, #50	; 0x32
 8002a62:	4a42      	ldr	r2, [pc, #264]	; (8002b6c <UART_SetConfig+0x32c>)
 8002a64:	fba2 2303 	umull	r2, r3, r2, r3
 8002a68:	095b      	lsrs	r3, r3, #5
 8002a6a:	f003 0207 	and.w	r2, r3, #7
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4422      	add	r2, r4
 8002a74:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002a76:	e0e7      	b.n	8002c48 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a39      	ldr	r2, [pc, #228]	; (8002b64 <UART_SetConfig+0x324>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d004      	beq.n	8002a8c <UART_SetConfig+0x24c>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a38      	ldr	r2, [pc, #224]	; (8002b68 <UART_SetConfig+0x328>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d171      	bne.n	8002b70 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002a8c:	f7fe ffca 	bl	8001a24 <HAL_RCC_GetPCLK2Freq>
 8002a90:	4602      	mov	r2, r0
 8002a92:	4613      	mov	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4413      	add	r3, r2
 8002a98:	009a      	lsls	r2, r3, #2
 8002a9a:	441a      	add	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa6:	4a31      	ldr	r2, [pc, #196]	; (8002b6c <UART_SetConfig+0x32c>)
 8002aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aac:	095b      	lsrs	r3, r3, #5
 8002aae:	011c      	lsls	r4, r3, #4
 8002ab0:	f7fe ffb8 	bl	8001a24 <HAL_RCC_GetPCLK2Freq>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	009a      	lsls	r2, r3, #2
 8002abe:	441a      	add	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	fbb2 f5f3 	udiv	r5, r2, r3
 8002aca:	f7fe ffab 	bl	8001a24 <HAL_RCC_GetPCLK2Freq>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	009a      	lsls	r2, r3, #2
 8002ad8:	441a      	add	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae4:	4a21      	ldr	r2, [pc, #132]	; (8002b6c <UART_SetConfig+0x32c>)
 8002ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aea:	095b      	lsrs	r3, r3, #5
 8002aec:	2264      	movs	r2, #100	; 0x64
 8002aee:	fb02 f303 	mul.w	r3, r2, r3
 8002af2:	1aeb      	subs	r3, r5, r3
 8002af4:	011b      	lsls	r3, r3, #4
 8002af6:	3332      	adds	r3, #50	; 0x32
 8002af8:	4a1c      	ldr	r2, [pc, #112]	; (8002b6c <UART_SetConfig+0x32c>)
 8002afa:	fba2 2303 	umull	r2, r3, r2, r3
 8002afe:	095b      	lsrs	r3, r3, #5
 8002b00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b04:	441c      	add	r4, r3
 8002b06:	f7fe ff8d 	bl	8001a24 <HAL_RCC_GetPCLK2Freq>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4413      	add	r3, r2
 8002b12:	009a      	lsls	r2, r3, #2
 8002b14:	441a      	add	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	fbb2 f5f3 	udiv	r5, r2, r3
 8002b20:	f7fe ff80 	bl	8001a24 <HAL_RCC_GetPCLK2Freq>
 8002b24:	4602      	mov	r2, r0
 8002b26:	4613      	mov	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	009a      	lsls	r2, r3, #2
 8002b2e:	441a      	add	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3a:	4a0c      	ldr	r2, [pc, #48]	; (8002b6c <UART_SetConfig+0x32c>)
 8002b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b40:	095b      	lsrs	r3, r3, #5
 8002b42:	2264      	movs	r2, #100	; 0x64
 8002b44:	fb02 f303 	mul.w	r3, r2, r3
 8002b48:	1aeb      	subs	r3, r5, r3
 8002b4a:	011b      	lsls	r3, r3, #4
 8002b4c:	3332      	adds	r3, #50	; 0x32
 8002b4e:	4a07      	ldr	r2, [pc, #28]	; (8002b6c <UART_SetConfig+0x32c>)
 8002b50:	fba2 2303 	umull	r2, r3, r2, r3
 8002b54:	095b      	lsrs	r3, r3, #5
 8002b56:	f003 020f 	and.w	r2, r3, #15
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4422      	add	r2, r4
 8002b60:	609a      	str	r2, [r3, #8]
 8002b62:	e071      	b.n	8002c48 <UART_SetConfig+0x408>
 8002b64:	40011000 	.word	0x40011000
 8002b68:	40011400 	.word	0x40011400
 8002b6c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002b70:	f7fe ff44 	bl	80019fc <HAL_RCC_GetPCLK1Freq>
 8002b74:	4602      	mov	r2, r0
 8002b76:	4613      	mov	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	009a      	lsls	r2, r3, #2
 8002b7e:	441a      	add	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8a:	4a31      	ldr	r2, [pc, #196]	; (8002c50 <UART_SetConfig+0x410>)
 8002b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b90:	095b      	lsrs	r3, r3, #5
 8002b92:	011c      	lsls	r4, r3, #4
 8002b94:	f7fe ff32 	bl	80019fc <HAL_RCC_GetPCLK1Freq>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	009a      	lsls	r2, r3, #2
 8002ba2:	441a      	add	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	fbb2 f5f3 	udiv	r5, r2, r3
 8002bae:	f7fe ff25 	bl	80019fc <HAL_RCC_GetPCLK1Freq>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	4413      	add	r3, r2
 8002bba:	009a      	lsls	r2, r3, #2
 8002bbc:	441a      	add	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc8:	4a21      	ldr	r2, [pc, #132]	; (8002c50 <UART_SetConfig+0x410>)
 8002bca:	fba2 2303 	umull	r2, r3, r2, r3
 8002bce:	095b      	lsrs	r3, r3, #5
 8002bd0:	2264      	movs	r2, #100	; 0x64
 8002bd2:	fb02 f303 	mul.w	r3, r2, r3
 8002bd6:	1aeb      	subs	r3, r5, r3
 8002bd8:	011b      	lsls	r3, r3, #4
 8002bda:	3332      	adds	r3, #50	; 0x32
 8002bdc:	4a1c      	ldr	r2, [pc, #112]	; (8002c50 <UART_SetConfig+0x410>)
 8002bde:	fba2 2303 	umull	r2, r3, r2, r3
 8002be2:	095b      	lsrs	r3, r3, #5
 8002be4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002be8:	441c      	add	r4, r3
 8002bea:	f7fe ff07 	bl	80019fc <HAL_RCC_GetPCLK1Freq>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009a      	lsls	r2, r3, #2
 8002bf8:	441a      	add	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	fbb2 f5f3 	udiv	r5, r2, r3
 8002c04:	f7fe fefa 	bl	80019fc <HAL_RCC_GetPCLK1Freq>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	009a      	lsls	r2, r3, #2
 8002c12:	441a      	add	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c1e:	4a0c      	ldr	r2, [pc, #48]	; (8002c50 <UART_SetConfig+0x410>)
 8002c20:	fba2 2303 	umull	r2, r3, r2, r3
 8002c24:	095b      	lsrs	r3, r3, #5
 8002c26:	2264      	movs	r2, #100	; 0x64
 8002c28:	fb02 f303 	mul.w	r3, r2, r3
 8002c2c:	1aeb      	subs	r3, r5, r3
 8002c2e:	011b      	lsls	r3, r3, #4
 8002c30:	3332      	adds	r3, #50	; 0x32
 8002c32:	4a07      	ldr	r2, [pc, #28]	; (8002c50 <UART_SetConfig+0x410>)
 8002c34:	fba2 2303 	umull	r2, r3, r2, r3
 8002c38:	095b      	lsrs	r3, r3, #5
 8002c3a:	f003 020f 	and.w	r2, r3, #15
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4422      	add	r2, r4
 8002c44:	609a      	str	r2, [r3, #8]
}
 8002c46:	e7ff      	b.n	8002c48 <UART_SetConfig+0x408>
 8002c48:	bf00      	nop
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bdb0      	pop	{r4, r5, r7, pc}
 8002c50:	51eb851f 	.word	0x51eb851f

08002c54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c5a:	f7fd fc53 	bl	8000504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c5e:	f000 f8f3 	bl	8002e48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c62:	f000 fa27 	bl	80030b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002c66:	f000 f9fb 	bl	8003060 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8002c6a:	f000 f95b 	bl	8002f24 <MX_CAN1_Init>
  MX_CAN2_Init();
 8002c6e:	f000 f98f 	bl	8002f90 <MX_CAN2_Init>
  MX_SPI2_Init();
 8002c72:	f000 f9c3 	bl	8002ffc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  //CANの設定
  //フィルタの設定
  sFilterConfig.FilterBank = 0;
 8002c76:	4b6a      	ldr	r3, [pc, #424]	; (8002e20 <main+0x1cc>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002c7c:	4b68      	ldr	r3, [pc, #416]	; (8002e20 <main+0x1cc>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002c82:	4b67      	ldr	r3, [pc, #412]	; (8002e20 <main+0x1cc>)
 8002c84:	2201      	movs	r2, #1
 8002c86:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8002c88:	4b65      	ldr	r3, [pc, #404]	; (8002e20 <main+0x1cc>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8002c8e:	4b64      	ldr	r3, [pc, #400]	; (8002e20 <main+0x1cc>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8002c94:	4b62      	ldr	r3, [pc, #392]	; (8002e20 <main+0x1cc>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8002c9a:	4b61      	ldr	r3, [pc, #388]	; (8002e20 <main+0x1cc>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002ca0:	4b5f      	ldr	r3, [pc, #380]	; (8002e20 <main+0x1cc>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation=ENABLE;
 8002ca6:	4b5e      	ldr	r3, [pc, #376]	; (8002e20 <main+0x1cc>)
 8002ca8:	2201      	movs	r2, #1
 8002caa:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank=14;
 8002cac:	4b5c      	ldr	r3, [pc, #368]	; (8002e20 <main+0x1cc>)
 8002cae:	220e      	movs	r2, #14
 8002cb0:	625a      	str	r2, [r3, #36]	; 0x24

  //フィルタをcan1に適用
  if(HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig) != HAL_OK)
 8002cb2:	495b      	ldr	r1, [pc, #364]	; (8002e20 <main+0x1cc>)
 8002cb4:	485b      	ldr	r0, [pc, #364]	; (8002e24 <main+0x1d0>)
 8002cb6:	f7fd fd93 	bl	80007e0 <HAL_CAN_ConfigFilter>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <main+0x70>
  {
    Error_Handler();
 8002cc0:	f000 fa80 	bl	80031c4 <Error_Handler>
  }

  //can1をスタート
  if(HAL_CAN_Start(&hcan1)!=HAL_OK)
 8002cc4:	4857      	ldr	r0, [pc, #348]	; (8002e24 <main+0x1d0>)
 8002cc6:	f7fd fe6b 	bl	80009a0 <HAL_CAN_Start>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <main+0x80>
  {
    Error_Handler();
 8002cd0:	f000 fa78 	bl	80031c4 <Error_Handler>
  }

  //can1の割り込みを許可
  if(HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8002cd4:	2103      	movs	r1, #3
 8002cd6:	4853      	ldr	r0, [pc, #332]	; (8002e24 <main+0x1d0>)
 8002cd8:	f7fe f894 	bl	8000e04 <HAL_CAN_ActivateNotification>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <main+0x92>
  {
	Error_Handler();
 8002ce2:	f000 fa6f 	bl	80031c4 <Error_Handler>
  }



  //SPI通信関連
  uint8_t aTxBuffer[6]={0};
 8002ce6:	f107 0308 	add.w	r3, r7, #8
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	809a      	strh	r2, [r3, #4]
  uint8_t aRxBuffer[6]={0};
 8002cf0:	463b      	mov	r3, r7
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	809a      	strh	r2, [r3, #4]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //spiの受信待ち
	  HAL_SPI_TransmitReceive(&hspi2,(uint8_t*)aTxBuffer,(uint8_t*)aRxBuffer,6,0xFFFFFFFF);
 8002cf8:	463a      	mov	r2, r7
 8002cfa:	f107 0108 	add.w	r1, r7, #8
 8002cfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	2306      	movs	r3, #6
 8002d06:	4848      	ldr	r0, [pc, #288]	; (8002e28 <main+0x1d4>)
 8002d08:	f7ff fafe 	bl	8002308 <HAL_SPI_TransmitReceive>
	  can_get_flag = 0;
 8002d0c:	4b47      	ldr	r3, [pc, #284]	; (8002e2c <main+0x1d8>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	701a      	strb	r2, [r3, #0]

	  //spiで受け取ったデータを分解
	  can_id = can_id_list[aRxBuffer[0]]; //spiで受け取った値
 8002d12:	783b      	ldrb	r3, [r7, #0]
 8002d14:	461a      	mov	r2, r3
 8002d16:	4b46      	ldr	r3, [pc, #280]	; (8002e30 <main+0x1dc>)
 8002d18:	5c9a      	ldrb	r2, [r3, r2]
 8002d1a:	4b46      	ldr	r3, [pc, #280]	; (8002e34 <main+0x1e0>)
 8002d1c:	701a      	strb	r2, [r3, #0]

	  //can_idが0の場合は何もしない処理
	  if(can_id == 0){
 8002d1e:	4b45      	ldr	r3, [pc, #276]	; (8002e34 <main+0x1e0>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d07a      	beq.n	8002e1c <main+0x1c8>
		  continue;
	  }

	  cmd_data = aRxBuffer[1];
 8002d26:	787a      	ldrb	r2, [r7, #1]
 8002d28:	4b43      	ldr	r3, [pc, #268]	; (8002e38 <main+0x1e4>)
 8002d2a:	701a      	strb	r2, [r3, #0]
	  switch(cmd_data){
 8002d2c:	4b42      	ldr	r3, [pc, #264]	; (8002e38 <main+0x1e4>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d002      	beq.n	8002d3a <main+0xe6>
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d035      	beq.n	8002da4 <main+0x150>
 8002d38:	e066      	b.n	8002e08 <main+0x1b4>
	  	  case 0x01://ポジションを送る
	  		  can_get_flag = 1;
 8002d3a:	4b3c      	ldr	r3, [pc, #240]	; (8002e2c <main+0x1d8>)
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	701a      	strb	r2, [r3, #0]
	  		  TxHeader.StdId=(can_id << 5) + (0x00C); //can_id, コントロールcmd
 8002d40:	4b3c      	ldr	r3, [pc, #240]	; (8002e34 <main+0x1e0>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	015b      	lsls	r3, r3, #5
 8002d46:	330c      	adds	r3, #12
 8002d48:	461a      	mov	r2, r3
 8002d4a:	4b3c      	ldr	r3, [pc, #240]	; (8002e3c <main+0x1e8>)
 8002d4c:	601a      	str	r2, [r3, #0]
	  		  TxHeader.RTR = 1;//CAN_RTR_DATA;
 8002d4e:	4b3b      	ldr	r3, [pc, #236]	; (8002e3c <main+0x1e8>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	60da      	str	r2, [r3, #12]
	  		  TxHeader.IDE = CAN_ID_STD;
 8002d54:	4b39      	ldr	r3, [pc, #228]	; (8002e3c <main+0x1e8>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	609a      	str	r2, [r3, #8]
	  		  TxHeader.DLC = 0x08;
 8002d5a:	4b38      	ldr	r3, [pc, #224]	; (8002e3c <main+0x1e8>)
 8002d5c:	2208      	movs	r2, #8
 8002d5e:	611a      	str	r2, [r3, #16]
	  		  TxHeader.TransmitGlobalTime = DISABLE;
 8002d60:	4b36      	ldr	r3, [pc, #216]	; (8002e3c <main+0x1e8>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	751a      	strb	r2, [r3, #20]
	  		  TxData[0] = aRxBuffer[2];
 8002d66:	78ba      	ldrb	r2, [r7, #2]
 8002d68:	4b35      	ldr	r3, [pc, #212]	; (8002e40 <main+0x1ec>)
 8002d6a:	701a      	strb	r2, [r3, #0]
	  		  TxData[1] = aRxBuffer[3];
 8002d6c:	78fa      	ldrb	r2, [r7, #3]
 8002d6e:	4b34      	ldr	r3, [pc, #208]	; (8002e40 <main+0x1ec>)
 8002d70:	705a      	strb	r2, [r3, #1]
	  		  TxData[2] = aRxBuffer[4];
 8002d72:	793a      	ldrb	r2, [r7, #4]
 8002d74:	4b32      	ldr	r3, [pc, #200]	; (8002e40 <main+0x1ec>)
 8002d76:	709a      	strb	r2, [r3, #2]
	  		  TxData[3] = aRxBuffer[5];
 8002d78:	797a      	ldrb	r2, [r7, #5]
 8002d7a:	4b31      	ldr	r3, [pc, #196]	; (8002e40 <main+0x1ec>)
 8002d7c:	70da      	strb	r2, [r3, #3]
	  		  TxData[4] = 0;
 8002d7e:	4b30      	ldr	r3, [pc, #192]	; (8002e40 <main+0x1ec>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	711a      	strb	r2, [r3, #4]
	  		  TxData[5] = 0;
 8002d84:	4b2e      	ldr	r3, [pc, #184]	; (8002e40 <main+0x1ec>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	715a      	strb	r2, [r3, #5]
	  		  TxData[6] = 0;
 8002d8a:	4b2d      	ldr	r3, [pc, #180]	; (8002e40 <main+0x1ec>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	719a      	strb	r2, [r3, #6]
	  		  TxData[7] = 0;
 8002d90:	4b2b      	ldr	r3, [pc, #172]	; (8002e40 <main+0x1ec>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	71da      	strb	r2, [r3, #7]
	  		  HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox);
 8002d96:	4b2b      	ldr	r3, [pc, #172]	; (8002e44 <main+0x1f0>)
 8002d98:	4a29      	ldr	r2, [pc, #164]	; (8002e40 <main+0x1ec>)
 8002d9a:	4928      	ldr	r1, [pc, #160]	; (8002e3c <main+0x1e8>)
 8002d9c:	4821      	ldr	r0, [pc, #132]	; (8002e24 <main+0x1d0>)
 8002d9e:	f7fd fe43 	bl	8000a28 <HAL_CAN_AddTxMessage>
	  		  break;
 8002da2:	e034      	b.n	8002e0e <main+0x1ba>

	  	  case 0x02://ポジションを受け取る
	  		  TxHeader.StdId=(can_id << 5) + (0x009); //can_id, コントロールcmd
 8002da4:	4b23      	ldr	r3, [pc, #140]	; (8002e34 <main+0x1e0>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	015b      	lsls	r3, r3, #5
 8002daa:	3309      	adds	r3, #9
 8002dac:	461a      	mov	r2, r3
 8002dae:	4b23      	ldr	r3, [pc, #140]	; (8002e3c <main+0x1e8>)
 8002db0:	601a      	str	r2, [r3, #0]
	  		  TxHeader.RTR = 2;//CAN_RTR_DATA;
 8002db2:	4b22      	ldr	r3, [pc, #136]	; (8002e3c <main+0x1e8>)
 8002db4:	2202      	movs	r2, #2
 8002db6:	60da      	str	r2, [r3, #12]
	  		  TxHeader.IDE = CAN_ID_STD;
 8002db8:	4b20      	ldr	r3, [pc, #128]	; (8002e3c <main+0x1e8>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	609a      	str	r2, [r3, #8]
	  		  TxHeader.DLC = 0x08;
 8002dbe:	4b1f      	ldr	r3, [pc, #124]	; (8002e3c <main+0x1e8>)
 8002dc0:	2208      	movs	r2, #8
 8002dc2:	611a      	str	r2, [r3, #16]
	  		  TxHeader.TransmitGlobalTime = DISABLE;
 8002dc4:	4b1d      	ldr	r3, [pc, #116]	; (8002e3c <main+0x1e8>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	751a      	strb	r2, [r3, #20]
	  		  TxData[0] = 0;
 8002dca:	4b1d      	ldr	r3, [pc, #116]	; (8002e40 <main+0x1ec>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	701a      	strb	r2, [r3, #0]
	  		  TxData[1] = 0;
 8002dd0:	4b1b      	ldr	r3, [pc, #108]	; (8002e40 <main+0x1ec>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	705a      	strb	r2, [r3, #1]
	  		  TxData[2] = 0;
 8002dd6:	4b1a      	ldr	r3, [pc, #104]	; (8002e40 <main+0x1ec>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	709a      	strb	r2, [r3, #2]
	  		  TxData[3] = 0;
 8002ddc:	4b18      	ldr	r3, [pc, #96]	; (8002e40 <main+0x1ec>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	70da      	strb	r2, [r3, #3]
	  		  TxData[4] = 0;
 8002de2:	4b17      	ldr	r3, [pc, #92]	; (8002e40 <main+0x1ec>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	711a      	strb	r2, [r3, #4]
	  		  TxData[5] = 0;
 8002de8:	4b15      	ldr	r3, [pc, #84]	; (8002e40 <main+0x1ec>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	715a      	strb	r2, [r3, #5]
	  		  TxData[6] = 0;
 8002dee:	4b14      	ldr	r3, [pc, #80]	; (8002e40 <main+0x1ec>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	719a      	strb	r2, [r3, #6]
	  		  TxData[7] = 0;
 8002df4:	4b12      	ldr	r3, [pc, #72]	; (8002e40 <main+0x1ec>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	71da      	strb	r2, [r3, #7]
	  		  HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox);
 8002dfa:	4b12      	ldr	r3, [pc, #72]	; (8002e44 <main+0x1f0>)
 8002dfc:	4a10      	ldr	r2, [pc, #64]	; (8002e40 <main+0x1ec>)
 8002dfe:	490f      	ldr	r1, [pc, #60]	; (8002e3c <main+0x1e8>)
 8002e00:	4808      	ldr	r0, [pc, #32]	; (8002e24 <main+0x1d0>)
 8002e02:	f7fd fe11 	bl	8000a28 <HAL_CAN_AddTxMessage>
	  		  break;
 8002e06:	e002      	b.n	8002e0e <main+0x1ba>

	  	  default:
	  		 can_get_flag=1;
 8002e08:	4b08      	ldr	r3, [pc, #32]	; (8002e2c <main+0x1d8>)
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	701a      	strb	r2, [r3, #0]
	  }
	  while(!can_get_flag){asm("NOP");}//nopいるか
 8002e0e:	e000      	b.n	8002e12 <main+0x1be>
 8002e10:	bf00      	nop
 8002e12:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <main+0x1d8>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0fa      	beq.n	8002e10 <main+0x1bc>
 8002e1a:	e76d      	b.n	8002cf8 <main+0xa4>
		  continue;
 8002e1c:	bf00      	nop
	  HAL_SPI_TransmitReceive(&hspi2,(uint8_t*)aTxBuffer,(uint8_t*)aRxBuffer,6,0xFFFFFFFF);
 8002e1e:	e76b      	b.n	8002cf8 <main+0xa4>
 8002e20:	20000038 	.word	0x20000038
 8002e24:	20000134 	.word	0x20000134
 8002e28:	20000060 	.word	0x20000060
 8002e2c:	2000002e 	.word	0x2000002e
 8002e30:	20000008 	.word	0x20000008
 8002e34:	2000002c 	.word	0x2000002c
 8002e38:	2000002d 	.word	0x2000002d
 8002e3c:	2000015c 	.word	0x2000015c
 8002e40:	200000e0 	.word	0x200000e0
 8002e44:	200000e8 	.word	0x200000e8

08002e48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b094      	sub	sp, #80	; 0x50
 8002e4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e4e:	f107 031c 	add.w	r3, r7, #28
 8002e52:	2234      	movs	r2, #52	; 0x34
 8002e54:	2100      	movs	r1, #0
 8002e56:	4618      	mov	r0, r3
 8002e58:	f000 fc72 	bl	8003740 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e5c:	f107 0308 	add.w	r3, r7, #8
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	605a      	str	r2, [r3, #4]
 8002e66:	609a      	str	r2, [r3, #8]
 8002e68:	60da      	str	r2, [r3, #12]
 8002e6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	607b      	str	r3, [r7, #4]
 8002e70:	4b2a      	ldr	r3, [pc, #168]	; (8002f1c <SystemClock_Config+0xd4>)
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	4a29      	ldr	r2, [pc, #164]	; (8002f1c <SystemClock_Config+0xd4>)
 8002e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e7a:	6413      	str	r3, [r2, #64]	; 0x40
 8002e7c:	4b27      	ldr	r3, [pc, #156]	; (8002f1c <SystemClock_Config+0xd4>)
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e84:	607b      	str	r3, [r7, #4]
 8002e86:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002e88:	2300      	movs	r3, #0
 8002e8a:	603b      	str	r3, [r7, #0]
 8002e8c:	4b24      	ldr	r3, [pc, #144]	; (8002f20 <SystemClock_Config+0xd8>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002e94:	4a22      	ldr	r2, [pc, #136]	; (8002f20 <SystemClock_Config+0xd8>)
 8002e96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e9a:	6013      	str	r3, [r2, #0]
 8002e9c:	4b20      	ldr	r3, [pc, #128]	; (8002f20 <SystemClock_Config+0xd8>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ea4:	603b      	str	r3, [r7, #0]
 8002ea6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002eac:	2301      	movs	r3, #1
 8002eae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002eb0:	2310      	movs	r3, #16
 8002eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002ebc:	2310      	movs	r3, #16
 8002ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002ec0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002ec4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002ec6:	2304      	movs	r3, #4
 8002ec8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002eca:	2302      	movs	r3, #2
 8002ecc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002ece:	2302      	movs	r3, #2
 8002ed0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ed2:	f107 031c 	add.w	r3, r7, #28
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fe ff58 	bl	8001d8c <HAL_RCC_OscConfig>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002ee2:	f000 f96f 	bl	80031c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ee6:	230f      	movs	r3, #15
 8002ee8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002eea:	2302      	movs	r3, #2
 8002eec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ef2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ef6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002efc:	f107 0308 	add.w	r3, r7, #8
 8002f00:	2102      	movs	r1, #2
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fe fc8c 	bl	8001820 <HAL_RCC_ClockConfig>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002f0e:	f000 f959 	bl	80031c4 <Error_Handler>
  }
}
 8002f12:	bf00      	nop
 8002f14:	3750      	adds	r7, #80	; 0x50
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	40007000 	.word	0x40007000

08002f24 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002f28:	4b17      	ldr	r3, [pc, #92]	; (8002f88 <MX_CAN1_Init+0x64>)
 8002f2a:	4a18      	ldr	r2, [pc, #96]	; (8002f8c <MX_CAN1_Init+0x68>)
 8002f2c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 7;
 8002f2e:	4b16      	ldr	r3, [pc, #88]	; (8002f88 <MX_CAN1_Init+0x64>)
 8002f30:	2207      	movs	r2, #7
 8002f32:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002f34:	4b14      	ldr	r3, [pc, #80]	; (8002f88 <MX_CAN1_Init+0x64>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002f3a:	4b13      	ldr	r3, [pc, #76]	; (8002f88 <MX_CAN1_Init+0x64>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8002f40:	4b11      	ldr	r3, [pc, #68]	; (8002f88 <MX_CAN1_Init+0x64>)
 8002f42:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8002f46:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002f48:	4b0f      	ldr	r3, [pc, #60]	; (8002f88 <MX_CAN1_Init+0x64>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002f4e:	4b0e      	ldr	r3, [pc, #56]	; (8002f88 <MX_CAN1_Init+0x64>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002f54:	4b0c      	ldr	r3, [pc, #48]	; (8002f88 <MX_CAN1_Init+0x64>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002f5a:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <MX_CAN1_Init+0x64>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002f60:	4b09      	ldr	r3, [pc, #36]	; (8002f88 <MX_CAN1_Init+0x64>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002f66:	4b08      	ldr	r3, [pc, #32]	; (8002f88 <MX_CAN1_Init+0x64>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002f6c:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <MX_CAN1_Init+0x64>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002f72:	4805      	ldr	r0, [pc, #20]	; (8002f88 <MX_CAN1_Init+0x64>)
 8002f74:	f7fd fb38 	bl	80005e8 <HAL_CAN_Init>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8002f7e:	f000 f921 	bl	80031c4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002f82:	bf00      	nop
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	20000134 	.word	0x20000134
 8002f8c:	40006400 	.word	0x40006400

08002f90 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8002f94:	4b17      	ldr	r3, [pc, #92]	; (8002ff4 <MX_CAN2_Init+0x64>)
 8002f96:	4a18      	ldr	r2, [pc, #96]	; (8002ff8 <MX_CAN2_Init+0x68>)
 8002f98:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 7;
 8002f9a:	4b16      	ldr	r3, [pc, #88]	; (8002ff4 <MX_CAN2_Init+0x64>)
 8002f9c:	2207      	movs	r2, #7
 8002f9e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002fa0:	4b14      	ldr	r3, [pc, #80]	; (8002ff4 <MX_CAN2_Init+0x64>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002fa6:	4b13      	ldr	r3, [pc, #76]	; (8002ff4 <MX_CAN2_Init+0x64>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8002fac:	4b11      	ldr	r3, [pc, #68]	; (8002ff4 <MX_CAN2_Init+0x64>)
 8002fae:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8002fb2:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002fb4:	4b0f      	ldr	r3, [pc, #60]	; (8002ff4 <MX_CAN2_Init+0x64>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8002fba:	4b0e      	ldr	r3, [pc, #56]	; (8002ff4 <MX_CAN2_Init+0x64>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8002fc0:	4b0c      	ldr	r3, [pc, #48]	; (8002ff4 <MX_CAN2_Init+0x64>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8002fc6:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <MX_CAN2_Init+0x64>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8002fcc:	4b09      	ldr	r3, [pc, #36]	; (8002ff4 <MX_CAN2_Init+0x64>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8002fd2:	4b08      	ldr	r3, [pc, #32]	; (8002ff4 <MX_CAN2_Init+0x64>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8002fd8:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <MX_CAN2_Init+0x64>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002fde:	4805      	ldr	r0, [pc, #20]	; (8002ff4 <MX_CAN2_Init+0x64>)
 8002fe0:	f7fd fb02 	bl	80005e8 <HAL_CAN_Init>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8002fea:	f000 f8eb 	bl	80031c4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8002fee:	bf00      	nop
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	200000b8 	.word	0x200000b8
 8002ff8:	40006800 	.word	0x40006800

08002ffc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003000:	4b15      	ldr	r3, [pc, #84]	; (8003058 <MX_SPI2_Init+0x5c>)
 8003002:	4a16      	ldr	r2, [pc, #88]	; (800305c <MX_SPI2_Init+0x60>)
 8003004:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8003006:	4b14      	ldr	r3, [pc, #80]	; (8003058 <MX_SPI2_Init+0x5c>)
 8003008:	2200      	movs	r2, #0
 800300a:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800300c:	4b12      	ldr	r3, [pc, #72]	; (8003058 <MX_SPI2_Init+0x5c>)
 800300e:	2200      	movs	r2, #0
 8003010:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003012:	4b11      	ldr	r3, [pc, #68]	; (8003058 <MX_SPI2_Init+0x5c>)
 8003014:	2200      	movs	r2, #0
 8003016:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003018:	4b0f      	ldr	r3, [pc, #60]	; (8003058 <MX_SPI2_Init+0x5c>)
 800301a:	2200      	movs	r2, #0
 800301c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800301e:	4b0e      	ldr	r3, [pc, #56]	; (8003058 <MX_SPI2_Init+0x5c>)
 8003020:	2201      	movs	r2, #1
 8003022:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8003024:	4b0c      	ldr	r3, [pc, #48]	; (8003058 <MX_SPI2_Init+0x5c>)
 8003026:	2200      	movs	r2, #0
 8003028:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800302a:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <MX_SPI2_Init+0x5c>)
 800302c:	2200      	movs	r2, #0
 800302e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003030:	4b09      	ldr	r3, [pc, #36]	; (8003058 <MX_SPI2_Init+0x5c>)
 8003032:	2200      	movs	r2, #0
 8003034:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003036:	4b08      	ldr	r3, [pc, #32]	; (8003058 <MX_SPI2_Init+0x5c>)
 8003038:	2200      	movs	r2, #0
 800303a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800303c:	4b06      	ldr	r3, [pc, #24]	; (8003058 <MX_SPI2_Init+0x5c>)
 800303e:	220a      	movs	r2, #10
 8003040:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003042:	4805      	ldr	r0, [pc, #20]	; (8003058 <MX_SPI2_Init+0x5c>)
 8003044:	f7ff f8fc 	bl	8002240 <HAL_SPI_Init>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <MX_SPI2_Init+0x56>
  {
    Error_Handler();
 800304e:	f000 f8b9 	bl	80031c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003052:	bf00      	nop
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	20000060 	.word	0x20000060
 800305c:	40003800 	.word	0x40003800

08003060 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003064:	4b11      	ldr	r3, [pc, #68]	; (80030ac <MX_USART2_UART_Init+0x4c>)
 8003066:	4a12      	ldr	r2, [pc, #72]	; (80030b0 <MX_USART2_UART_Init+0x50>)
 8003068:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800306a:	4b10      	ldr	r3, [pc, #64]	; (80030ac <MX_USART2_UART_Init+0x4c>)
 800306c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003070:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003072:	4b0e      	ldr	r3, [pc, #56]	; (80030ac <MX_USART2_UART_Init+0x4c>)
 8003074:	2200      	movs	r2, #0
 8003076:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003078:	4b0c      	ldr	r3, [pc, #48]	; (80030ac <MX_USART2_UART_Init+0x4c>)
 800307a:	2200      	movs	r2, #0
 800307c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800307e:	4b0b      	ldr	r3, [pc, #44]	; (80030ac <MX_USART2_UART_Init+0x4c>)
 8003080:	2200      	movs	r2, #0
 8003082:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003084:	4b09      	ldr	r3, [pc, #36]	; (80030ac <MX_USART2_UART_Init+0x4c>)
 8003086:	220c      	movs	r2, #12
 8003088:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800308a:	4b08      	ldr	r3, [pc, #32]	; (80030ac <MX_USART2_UART_Init+0x4c>)
 800308c:	2200      	movs	r2, #0
 800308e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003090:	4b06      	ldr	r3, [pc, #24]	; (80030ac <MX_USART2_UART_Init+0x4c>)
 8003092:	2200      	movs	r2, #0
 8003094:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003096:	4805      	ldr	r0, [pc, #20]	; (80030ac <MX_USART2_UART_Init+0x4c>)
 8003098:	f7ff fb84 	bl	80027a4 <HAL_UART_Init>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80030a2:	f000 f88f 	bl	80031c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80030a6:	bf00      	nop
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	200000f4 	.word	0x200000f4
 80030b0:	40004400 	.word	0x40004400

080030b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b08a      	sub	sp, #40	; 0x28
 80030b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ba:	f107 0314 	add.w	r3, r7, #20
 80030be:	2200      	movs	r2, #0
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	605a      	str	r2, [r3, #4]
 80030c4:	609a      	str	r2, [r3, #8]
 80030c6:	60da      	str	r2, [r3, #12]
 80030c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	613b      	str	r3, [r7, #16]
 80030ce:	4b2d      	ldr	r3, [pc, #180]	; (8003184 <MX_GPIO_Init+0xd0>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	4a2c      	ldr	r2, [pc, #176]	; (8003184 <MX_GPIO_Init+0xd0>)
 80030d4:	f043 0304 	orr.w	r3, r3, #4
 80030d8:	6313      	str	r3, [r2, #48]	; 0x30
 80030da:	4b2a      	ldr	r3, [pc, #168]	; (8003184 <MX_GPIO_Init+0xd0>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	f003 0304 	and.w	r3, r3, #4
 80030e2:	613b      	str	r3, [r7, #16]
 80030e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030e6:	2300      	movs	r3, #0
 80030e8:	60fb      	str	r3, [r7, #12]
 80030ea:	4b26      	ldr	r3, [pc, #152]	; (8003184 <MX_GPIO_Init+0xd0>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	4a25      	ldr	r2, [pc, #148]	; (8003184 <MX_GPIO_Init+0xd0>)
 80030f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030f4:	6313      	str	r3, [r2, #48]	; 0x30
 80030f6:	4b23      	ldr	r3, [pc, #140]	; (8003184 <MX_GPIO_Init+0xd0>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	60bb      	str	r3, [r7, #8]
 8003106:	4b1f      	ldr	r3, [pc, #124]	; (8003184 <MX_GPIO_Init+0xd0>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	4a1e      	ldr	r2, [pc, #120]	; (8003184 <MX_GPIO_Init+0xd0>)
 800310c:	f043 0301 	orr.w	r3, r3, #1
 8003110:	6313      	str	r3, [r2, #48]	; 0x30
 8003112:	4b1c      	ldr	r3, [pc, #112]	; (8003184 <MX_GPIO_Init+0xd0>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	60bb      	str	r3, [r7, #8]
 800311c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800311e:	2300      	movs	r3, #0
 8003120:	607b      	str	r3, [r7, #4]
 8003122:	4b18      	ldr	r3, [pc, #96]	; (8003184 <MX_GPIO_Init+0xd0>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	4a17      	ldr	r2, [pc, #92]	; (8003184 <MX_GPIO_Init+0xd0>)
 8003128:	f043 0302 	orr.w	r3, r3, #2
 800312c:	6313      	str	r3, [r2, #48]	; 0x30
 800312e:	4b15      	ldr	r3, [pc, #84]	; (8003184 <MX_GPIO_Init+0xd0>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	607b      	str	r3, [r7, #4]
 8003138:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800313a:	2200      	movs	r2, #0
 800313c:	2120      	movs	r1, #32
 800313e:	4812      	ldr	r0, [pc, #72]	; (8003188 <MX_GPIO_Init+0xd4>)
 8003140:	f7fe fb54 	bl	80017ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003144:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003148:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800314a:	4b10      	ldr	r3, [pc, #64]	; (800318c <MX_GPIO_Init+0xd8>)
 800314c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314e:	2300      	movs	r3, #0
 8003150:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003152:	f107 0314 	add.w	r3, r7, #20
 8003156:	4619      	mov	r1, r3
 8003158:	480d      	ldr	r0, [pc, #52]	; (8003190 <MX_GPIO_Init+0xdc>)
 800315a:	f7fe f9b5 	bl	80014c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800315e:	2320      	movs	r3, #32
 8003160:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003162:	2301      	movs	r3, #1
 8003164:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003166:	2300      	movs	r3, #0
 8003168:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800316a:	2300      	movs	r3, #0
 800316c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800316e:	f107 0314 	add.w	r3, r7, #20
 8003172:	4619      	mov	r1, r3
 8003174:	4804      	ldr	r0, [pc, #16]	; (8003188 <MX_GPIO_Init+0xd4>)
 8003176:	f7fe f9a7 	bl	80014c8 <HAL_GPIO_Init>

}
 800317a:	bf00      	nop
 800317c:	3728      	adds	r7, #40	; 0x28
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	40023800 	.word	0x40023800
 8003188:	40020000 	.word	0x40020000
 800318c:	10210000 	.word	0x10210000
 8003190:	40020800 	.word	0x40020800

08003194 <HAL_CAN_RxFifo0MsgPendingCallback>:
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,1);
}

//CAN通信の受信割り込み
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan_)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  //HAL_CAN_GetRxMessage(&hcan,CAN_RX_FIFO0,&RxHeader,RxData);
	HAL_CAN_GetRxMessage(hcan_,CAN_RX_FIFO0,&RxHeader,RxData);
 800319c:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 800319e:	4a07      	ldr	r2, [pc, #28]	; (80031bc <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80031a0:	2100      	movs	r1, #0
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f7fd fd1b 	bl	8000bde <HAL_CAN_GetRxMessage>
	can_get_flag = 1;//受信完了フラグ
 80031a8:	4b05      	ldr	r3, [pc, #20]	; (80031c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80031aa:	2201      	movs	r2, #1
 80031ac:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(10);
  }
*/
  //HAL_UART_Transmit(&huart2,RxData,4,0xFFFF);

}
 80031ae:	bf00      	nop
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	200000ec 	.word	0x200000ec
 80031bc:	20000174 	.word	0x20000174
 80031c0:	2000002e 	.word	0x2000002e

080031c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80031c8:	bf00      	nop
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
	...

080031d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031da:	2300      	movs	r3, #0
 80031dc:	607b      	str	r3, [r7, #4]
 80031de:	4b10      	ldr	r3, [pc, #64]	; (8003220 <HAL_MspInit+0x4c>)
 80031e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e2:	4a0f      	ldr	r2, [pc, #60]	; (8003220 <HAL_MspInit+0x4c>)
 80031e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031e8:	6453      	str	r3, [r2, #68]	; 0x44
 80031ea:	4b0d      	ldr	r3, [pc, #52]	; (8003220 <HAL_MspInit+0x4c>)
 80031ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031f2:	607b      	str	r3, [r7, #4]
 80031f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031f6:	2300      	movs	r3, #0
 80031f8:	603b      	str	r3, [r7, #0]
 80031fa:	4b09      	ldr	r3, [pc, #36]	; (8003220 <HAL_MspInit+0x4c>)
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	4a08      	ldr	r2, [pc, #32]	; (8003220 <HAL_MspInit+0x4c>)
 8003200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003204:	6413      	str	r3, [r2, #64]	; 0x40
 8003206:	4b06      	ldr	r3, [pc, #24]	; (8003220 <HAL_MspInit+0x4c>)
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320e:	603b      	str	r3, [r7, #0]
 8003210:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003212:	2007      	movs	r0, #7
 8003214:	f7fe f916 	bl	8001444 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003218:	bf00      	nop
 800321a:	3708      	adds	r7, #8
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40023800 	.word	0x40023800

08003224 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b08c      	sub	sp, #48	; 0x30
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800322c:	f107 031c 	add.w	r3, r7, #28
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	605a      	str	r2, [r3, #4]
 8003236:	609a      	str	r2, [r3, #8]
 8003238:	60da      	str	r2, [r3, #12]
 800323a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a64      	ldr	r2, [pc, #400]	; (80033d4 <HAL_CAN_MspInit+0x1b0>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d157      	bne.n	80032f6 <HAL_CAN_MspInit+0xd2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003246:	4b64      	ldr	r3, [pc, #400]	; (80033d8 <HAL_CAN_MspInit+0x1b4>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	3301      	adds	r3, #1
 800324c:	4a62      	ldr	r2, [pc, #392]	; (80033d8 <HAL_CAN_MspInit+0x1b4>)
 800324e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003250:	4b61      	ldr	r3, [pc, #388]	; (80033d8 <HAL_CAN_MspInit+0x1b4>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d10d      	bne.n	8003274 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003258:	2300      	movs	r3, #0
 800325a:	61bb      	str	r3, [r7, #24]
 800325c:	4b5f      	ldr	r3, [pc, #380]	; (80033dc <HAL_CAN_MspInit+0x1b8>)
 800325e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003260:	4a5e      	ldr	r2, [pc, #376]	; (80033dc <HAL_CAN_MspInit+0x1b8>)
 8003262:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003266:	6413      	str	r3, [r2, #64]	; 0x40
 8003268:	4b5c      	ldr	r3, [pc, #368]	; (80033dc <HAL_CAN_MspInit+0x1b8>)
 800326a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003270:	61bb      	str	r3, [r7, #24]
 8003272:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003274:	2300      	movs	r3, #0
 8003276:	617b      	str	r3, [r7, #20]
 8003278:	4b58      	ldr	r3, [pc, #352]	; (80033dc <HAL_CAN_MspInit+0x1b8>)
 800327a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327c:	4a57      	ldr	r2, [pc, #348]	; (80033dc <HAL_CAN_MspInit+0x1b8>)
 800327e:	f043 0301 	orr.w	r3, r3, #1
 8003282:	6313      	str	r3, [r2, #48]	; 0x30
 8003284:	4b55      	ldr	r3, [pc, #340]	; (80033dc <HAL_CAN_MspInit+0x1b8>)
 8003286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	617b      	str	r3, [r7, #20]
 800328e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003290:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003294:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003296:	2302      	movs	r3, #2
 8003298:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329a:	2300      	movs	r3, #0
 800329c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800329e:	2303      	movs	r3, #3
 80032a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80032a2:	2309      	movs	r3, #9
 80032a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032a6:	f107 031c 	add.w	r3, r7, #28
 80032aa:	4619      	mov	r1, r3
 80032ac:	484c      	ldr	r0, [pc, #304]	; (80033e0 <HAL_CAN_MspInit+0x1bc>)
 80032ae:	f7fe f90b 	bl	80014c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80032b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b8:	2302      	movs	r3, #2
 80032ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032bc:	2301      	movs	r3, #1
 80032be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032c0:	2303      	movs	r3, #3
 80032c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80032c4:	2309      	movs	r3, #9
 80032c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032c8:	f107 031c 	add.w	r3, r7, #28
 80032cc:	4619      	mov	r1, r3
 80032ce:	4844      	ldr	r0, [pc, #272]	; (80033e0 <HAL_CAN_MspInit+0x1bc>)
 80032d0:	f7fe f8fa 	bl	80014c8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80032d4:	2200      	movs	r2, #0
 80032d6:	2100      	movs	r1, #0
 80032d8:	2013      	movs	r0, #19
 80032da:	f7fe f8be 	bl	800145a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80032de:	2013      	movs	r0, #19
 80032e0:	f7fe f8d7 	bl	8001492 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80032e4:	2200      	movs	r2, #0
 80032e6:	2100      	movs	r1, #0
 80032e8:	2014      	movs	r0, #20
 80032ea:	f7fe f8b6 	bl	800145a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80032ee:	2014      	movs	r0, #20
 80032f0:	f7fe f8cf 	bl	8001492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80032f4:	e069      	b.n	80033ca <HAL_CAN_MspInit+0x1a6>
  else if(hcan->Instance==CAN2)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a3a      	ldr	r2, [pc, #232]	; (80033e4 <HAL_CAN_MspInit+0x1c0>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d164      	bne.n	80033ca <HAL_CAN_MspInit+0x1a6>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8003300:	2300      	movs	r3, #0
 8003302:	613b      	str	r3, [r7, #16]
 8003304:	4b35      	ldr	r3, [pc, #212]	; (80033dc <HAL_CAN_MspInit+0x1b8>)
 8003306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003308:	4a34      	ldr	r2, [pc, #208]	; (80033dc <HAL_CAN_MspInit+0x1b8>)
 800330a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800330e:	6413      	str	r3, [r2, #64]	; 0x40
 8003310:	4b32      	ldr	r3, [pc, #200]	; (80033dc <HAL_CAN_MspInit+0x1b8>)
 8003312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003314:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003318:	613b      	str	r3, [r7, #16]
 800331a:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800331c:	4b2e      	ldr	r3, [pc, #184]	; (80033d8 <HAL_CAN_MspInit+0x1b4>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	3301      	adds	r3, #1
 8003322:	4a2d      	ldr	r2, [pc, #180]	; (80033d8 <HAL_CAN_MspInit+0x1b4>)
 8003324:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003326:	4b2c      	ldr	r3, [pc, #176]	; (80033d8 <HAL_CAN_MspInit+0x1b4>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d10d      	bne.n	800334a <HAL_CAN_MspInit+0x126>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800332e:	2300      	movs	r3, #0
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	4b2a      	ldr	r3, [pc, #168]	; (80033dc <HAL_CAN_MspInit+0x1b8>)
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	4a29      	ldr	r2, [pc, #164]	; (80033dc <HAL_CAN_MspInit+0x1b8>)
 8003338:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800333c:	6413      	str	r3, [r2, #64]	; 0x40
 800333e:	4b27      	ldr	r3, [pc, #156]	; (80033dc <HAL_CAN_MspInit+0x1b8>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800334a:	2300      	movs	r3, #0
 800334c:	60bb      	str	r3, [r7, #8]
 800334e:	4b23      	ldr	r3, [pc, #140]	; (80033dc <HAL_CAN_MspInit+0x1b8>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	4a22      	ldr	r2, [pc, #136]	; (80033dc <HAL_CAN_MspInit+0x1b8>)
 8003354:	f043 0302 	orr.w	r3, r3, #2
 8003358:	6313      	str	r3, [r2, #48]	; 0x30
 800335a:	4b20      	ldr	r3, [pc, #128]	; (80033dc <HAL_CAN_MspInit+0x1b8>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	60bb      	str	r3, [r7, #8]
 8003364:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003366:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800336a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800336c:	2302      	movs	r3, #2
 800336e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003370:	2300      	movs	r3, #0
 8003372:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003374:	2303      	movs	r3, #3
 8003376:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8003378:	2309      	movs	r3, #9
 800337a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800337c:	f107 031c 	add.w	r3, r7, #28
 8003380:	4619      	mov	r1, r3
 8003382:	4819      	ldr	r0, [pc, #100]	; (80033e8 <HAL_CAN_MspInit+0x1c4>)
 8003384:	f7fe f8a0 	bl	80014c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003388:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800338c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800338e:	2302      	movs	r3, #2
 8003390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003392:	2301      	movs	r3, #1
 8003394:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003396:	2303      	movs	r3, #3
 8003398:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800339a:	2309      	movs	r3, #9
 800339c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800339e:	f107 031c 	add.w	r3, r7, #28
 80033a2:	4619      	mov	r1, r3
 80033a4:	4810      	ldr	r0, [pc, #64]	; (80033e8 <HAL_CAN_MspInit+0x1c4>)
 80033a6:	f7fe f88f 	bl	80014c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 80033aa:	2200      	movs	r2, #0
 80033ac:	2100      	movs	r1, #0
 80033ae:	203f      	movs	r0, #63	; 0x3f
 80033b0:	f7fe f853 	bl	800145a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 80033b4:	203f      	movs	r0, #63	; 0x3f
 80033b6:	f7fe f86c 	bl	8001492 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80033ba:	2200      	movs	r2, #0
 80033bc:	2100      	movs	r1, #0
 80033be:	2040      	movs	r0, #64	; 0x40
 80033c0:	f7fe f84b 	bl	800145a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80033c4:	2040      	movs	r0, #64	; 0x40
 80033c6:	f7fe f864 	bl	8001492 <HAL_NVIC_EnableIRQ>
}
 80033ca:	bf00      	nop
 80033cc:	3730      	adds	r7, #48	; 0x30
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	40006400 	.word	0x40006400
 80033d8:	20000030 	.word	0x20000030
 80033dc:	40023800 	.word	0x40023800
 80033e0:	40020000 	.word	0x40020000
 80033e4:	40006800 	.word	0x40006800
 80033e8:	40020400 	.word	0x40020400

080033ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b08a      	sub	sp, #40	; 0x28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f4:	f107 0314 	add.w	r3, r7, #20
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	605a      	str	r2, [r3, #4]
 80033fe:	609a      	str	r2, [r3, #8]
 8003400:	60da      	str	r2, [r3, #12]
 8003402:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a38      	ldr	r2, [pc, #224]	; (80034ec <HAL_SPI_MspInit+0x100>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d16a      	bne.n	80034e4 <HAL_SPI_MspInit+0xf8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800340e:	2300      	movs	r3, #0
 8003410:	613b      	str	r3, [r7, #16]
 8003412:	4b37      	ldr	r3, [pc, #220]	; (80034f0 <HAL_SPI_MspInit+0x104>)
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	4a36      	ldr	r2, [pc, #216]	; (80034f0 <HAL_SPI_MspInit+0x104>)
 8003418:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800341c:	6413      	str	r3, [r2, #64]	; 0x40
 800341e:	4b34      	ldr	r3, [pc, #208]	; (80034f0 <HAL_SPI_MspInit+0x104>)
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003426:	613b      	str	r3, [r7, #16]
 8003428:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800342a:	2300      	movs	r3, #0
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	4b30      	ldr	r3, [pc, #192]	; (80034f0 <HAL_SPI_MspInit+0x104>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	4a2f      	ldr	r2, [pc, #188]	; (80034f0 <HAL_SPI_MspInit+0x104>)
 8003434:	f043 0304 	orr.w	r3, r3, #4
 8003438:	6313      	str	r3, [r2, #48]	; 0x30
 800343a:	4b2d      	ldr	r3, [pc, #180]	; (80034f0 <HAL_SPI_MspInit+0x104>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	f003 0304 	and.w	r3, r3, #4
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003446:	2300      	movs	r3, #0
 8003448:	60bb      	str	r3, [r7, #8]
 800344a:	4b29      	ldr	r3, [pc, #164]	; (80034f0 <HAL_SPI_MspInit+0x104>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	4a28      	ldr	r2, [pc, #160]	; (80034f0 <HAL_SPI_MspInit+0x104>)
 8003450:	f043 0302 	orr.w	r3, r3, #2
 8003454:	6313      	str	r3, [r2, #48]	; 0x30
 8003456:	4b26      	ldr	r3, [pc, #152]	; (80034f0 <HAL_SPI_MspInit+0x104>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	60bb      	str	r3, [r7, #8]
 8003460:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    PB4     ------> SPI2_NSS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003462:	2302      	movs	r3, #2
 8003464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003466:	2302      	movs	r3, #2
 8003468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800346a:	2301      	movs	r3, #1
 800346c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800346e:	2303      	movs	r3, #3
 8003470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8003472:	2307      	movs	r3, #7
 8003474:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003476:	f107 0314 	add.w	r3, r7, #20
 800347a:	4619      	mov	r1, r3
 800347c:	481d      	ldr	r0, [pc, #116]	; (80034f4 <HAL_SPI_MspInit+0x108>)
 800347e:	f7fe f823 	bl	80014c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003482:	2304      	movs	r3, #4
 8003484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003486:	2302      	movs	r3, #2
 8003488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800348a:	2301      	movs	r3, #1
 800348c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800348e:	2303      	movs	r3, #3
 8003490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003492:	2305      	movs	r3, #5
 8003494:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003496:	f107 0314 	add.w	r3, r7, #20
 800349a:	4619      	mov	r1, r3
 800349c:	4815      	ldr	r0, [pc, #84]	; (80034f4 <HAL_SPI_MspInit+0x108>)
 800349e:	f7fe f813 	bl	80014c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80034a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a8:	2302      	movs	r3, #2
 80034aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034ac:	2301      	movs	r3, #1
 80034ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034b0:	2303      	movs	r3, #3
 80034b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80034b4:	2305      	movs	r3, #5
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034b8:	f107 0314 	add.w	r3, r7, #20
 80034bc:	4619      	mov	r1, r3
 80034be:	480e      	ldr	r0, [pc, #56]	; (80034f8 <HAL_SPI_MspInit+0x10c>)
 80034c0:	f7fe f802 	bl	80014c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80034c4:	2310      	movs	r3, #16
 80034c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c8:	2302      	movs	r3, #2
 80034ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034cc:	2300      	movs	r3, #0
 80034ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034d0:	2303      	movs	r3, #3
 80034d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80034d4:	2307      	movs	r3, #7
 80034d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034d8:	f107 0314 	add.w	r3, r7, #20
 80034dc:	4619      	mov	r1, r3
 80034de:	4806      	ldr	r0, [pc, #24]	; (80034f8 <HAL_SPI_MspInit+0x10c>)
 80034e0:	f7fd fff2 	bl	80014c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80034e4:	bf00      	nop
 80034e6:	3728      	adds	r7, #40	; 0x28
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40003800 	.word	0x40003800
 80034f0:	40023800 	.word	0x40023800
 80034f4:	40020800 	.word	0x40020800
 80034f8:	40020400 	.word	0x40020400

080034fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b08a      	sub	sp, #40	; 0x28
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003504:	f107 0314 	add.w	r3, r7, #20
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	605a      	str	r2, [r3, #4]
 800350e:	609a      	str	r2, [r3, #8]
 8003510:	60da      	str	r2, [r3, #12]
 8003512:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a19      	ldr	r2, [pc, #100]	; (8003580 <HAL_UART_MspInit+0x84>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d12b      	bne.n	8003576 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800351e:	2300      	movs	r3, #0
 8003520:	613b      	str	r3, [r7, #16]
 8003522:	4b18      	ldr	r3, [pc, #96]	; (8003584 <HAL_UART_MspInit+0x88>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	4a17      	ldr	r2, [pc, #92]	; (8003584 <HAL_UART_MspInit+0x88>)
 8003528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800352c:	6413      	str	r3, [r2, #64]	; 0x40
 800352e:	4b15      	ldr	r3, [pc, #84]	; (8003584 <HAL_UART_MspInit+0x88>)
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003536:	613b      	str	r3, [r7, #16]
 8003538:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800353a:	2300      	movs	r3, #0
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	4b11      	ldr	r3, [pc, #68]	; (8003584 <HAL_UART_MspInit+0x88>)
 8003540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003542:	4a10      	ldr	r2, [pc, #64]	; (8003584 <HAL_UART_MspInit+0x88>)
 8003544:	f043 0301 	orr.w	r3, r3, #1
 8003548:	6313      	str	r3, [r2, #48]	; 0x30
 800354a:	4b0e      	ldr	r3, [pc, #56]	; (8003584 <HAL_UART_MspInit+0x88>)
 800354c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003556:	230c      	movs	r3, #12
 8003558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800355a:	2302      	movs	r3, #2
 800355c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800355e:	2301      	movs	r3, #1
 8003560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003562:	2303      	movs	r3, #3
 8003564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003566:	2307      	movs	r3, #7
 8003568:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800356a:	f107 0314 	add.w	r3, r7, #20
 800356e:	4619      	mov	r1, r3
 8003570:	4805      	ldr	r0, [pc, #20]	; (8003588 <HAL_UART_MspInit+0x8c>)
 8003572:	f7fd ffa9 	bl	80014c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003576:	bf00      	nop
 8003578:	3728      	adds	r7, #40	; 0x28
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	40004400 	.word	0x40004400
 8003584:	40023800 	.word	0x40023800
 8003588:	40020000 	.word	0x40020000

0800358c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003590:	bf00      	nop
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800359a:	b480      	push	{r7}
 800359c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800359e:	e7fe      	b.n	800359e <HardFault_Handler+0x4>

080035a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035a4:	e7fe      	b.n	80035a4 <MemManage_Handler+0x4>

080035a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035a6:	b480      	push	{r7}
 80035a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035aa:	e7fe      	b.n	80035aa <BusFault_Handler+0x4>

080035ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035b0:	e7fe      	b.n	80035b0 <UsageFault_Handler+0x4>

080035b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035b2:	b480      	push	{r7}
 80035b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035b6:	bf00      	nop
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035c4:	bf00      	nop
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035ce:	b480      	push	{r7}
 80035d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035d2:	bf00      	nop
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035e0:	f7fc ffe2 	bl	80005a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035e4:	bf00      	nop
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80035ec:	4802      	ldr	r0, [pc, #8]	; (80035f8 <CAN1_TX_IRQHandler+0x10>)
 80035ee:	f7fd fc2f 	bl	8000e50 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80035f2:	bf00      	nop
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	20000134 	.word	0x20000134

080035fc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003600:	4802      	ldr	r0, [pc, #8]	; (800360c <CAN1_RX0_IRQHandler+0x10>)
 8003602:	f7fd fc25 	bl	8000e50 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003606:	bf00      	nop
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	20000134 	.word	0x20000134

08003610 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupt.
  */
void CAN2_TX_IRQHandler(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003614:	4802      	ldr	r0, [pc, #8]	; (8003620 <CAN2_TX_IRQHandler+0x10>)
 8003616:	f7fd fc1b 	bl	8000e50 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 800361a:	bf00      	nop
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	200000b8 	.word	0x200000b8

08003624 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003628:	4802      	ldr	r0, [pc, #8]	; (8003634 <CAN2_RX0_IRQHandler+0x10>)
 800362a:	f7fd fc11 	bl	8000e50 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800362e:	bf00      	nop
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	200000b8 	.word	0x200000b8

08003638 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800363c:	4b16      	ldr	r3, [pc, #88]	; (8003698 <SystemInit+0x60>)
 800363e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003642:	4a15      	ldr	r2, [pc, #84]	; (8003698 <SystemInit+0x60>)
 8003644:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003648:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800364c:	4b13      	ldr	r3, [pc, #76]	; (800369c <SystemInit+0x64>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a12      	ldr	r2, [pc, #72]	; (800369c <SystemInit+0x64>)
 8003652:	f043 0301 	orr.w	r3, r3, #1
 8003656:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003658:	4b10      	ldr	r3, [pc, #64]	; (800369c <SystemInit+0x64>)
 800365a:	2200      	movs	r2, #0
 800365c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800365e:	4b0f      	ldr	r3, [pc, #60]	; (800369c <SystemInit+0x64>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a0e      	ldr	r2, [pc, #56]	; (800369c <SystemInit+0x64>)
 8003664:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003668:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800366c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800366e:	4b0b      	ldr	r3, [pc, #44]	; (800369c <SystemInit+0x64>)
 8003670:	4a0b      	ldr	r2, [pc, #44]	; (80036a0 <SystemInit+0x68>)
 8003672:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003674:	4b09      	ldr	r3, [pc, #36]	; (800369c <SystemInit+0x64>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a08      	ldr	r2, [pc, #32]	; (800369c <SystemInit+0x64>)
 800367a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800367e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003680:	4b06      	ldr	r3, [pc, #24]	; (800369c <SystemInit+0x64>)
 8003682:	2200      	movs	r2, #0
 8003684:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003686:	4b04      	ldr	r3, [pc, #16]	; (8003698 <SystemInit+0x60>)
 8003688:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800368c:	609a      	str	r2, [r3, #8]
#endif
}
 800368e:	bf00      	nop
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	e000ed00 	.word	0xe000ed00
 800369c:	40023800 	.word	0x40023800
 80036a0:	24003010 	.word	0x24003010

080036a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80036a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036dc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80036a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80036aa:	e003      	b.n	80036b4 <LoopCopyDataInit>

080036ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80036ac:	4b0c      	ldr	r3, [pc, #48]	; (80036e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80036ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80036b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80036b2:	3104      	adds	r1, #4

080036b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80036b4:	480b      	ldr	r0, [pc, #44]	; (80036e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80036b6:	4b0c      	ldr	r3, [pc, #48]	; (80036e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80036b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80036ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80036bc:	d3f6      	bcc.n	80036ac <CopyDataInit>
  ldr  r2, =_sbss
 80036be:	4a0b      	ldr	r2, [pc, #44]	; (80036ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80036c0:	e002      	b.n	80036c8 <LoopFillZerobss>

080036c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80036c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80036c4:	f842 3b04 	str.w	r3, [r2], #4

080036c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80036c8:	4b09      	ldr	r3, [pc, #36]	; (80036f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80036ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80036cc:	d3f9      	bcc.n	80036c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80036ce:	f7ff ffb3 	bl	8003638 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036d2:	f000 f811 	bl	80036f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036d6:	f7ff fabd 	bl	8002c54 <main>
  bx  lr    
 80036da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80036dc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80036e0:	08003790 	.word	0x08003790
  ldr  r0, =_sdata
 80036e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80036e8:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80036ec:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80036f0:	20000190 	.word	0x20000190

080036f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036f4:	e7fe      	b.n	80036f4 <ADC_IRQHandler>
	...

080036f8 <__libc_init_array>:
 80036f8:	b570      	push	{r4, r5, r6, lr}
 80036fa:	4e0d      	ldr	r6, [pc, #52]	; (8003730 <__libc_init_array+0x38>)
 80036fc:	4c0d      	ldr	r4, [pc, #52]	; (8003734 <__libc_init_array+0x3c>)
 80036fe:	1ba4      	subs	r4, r4, r6
 8003700:	10a4      	asrs	r4, r4, #2
 8003702:	2500      	movs	r5, #0
 8003704:	42a5      	cmp	r5, r4
 8003706:	d109      	bne.n	800371c <__libc_init_array+0x24>
 8003708:	4e0b      	ldr	r6, [pc, #44]	; (8003738 <__libc_init_array+0x40>)
 800370a:	4c0c      	ldr	r4, [pc, #48]	; (800373c <__libc_init_array+0x44>)
 800370c:	f000 f820 	bl	8003750 <_init>
 8003710:	1ba4      	subs	r4, r4, r6
 8003712:	10a4      	asrs	r4, r4, #2
 8003714:	2500      	movs	r5, #0
 8003716:	42a5      	cmp	r5, r4
 8003718:	d105      	bne.n	8003726 <__libc_init_array+0x2e>
 800371a:	bd70      	pop	{r4, r5, r6, pc}
 800371c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003720:	4798      	blx	r3
 8003722:	3501      	adds	r5, #1
 8003724:	e7ee      	b.n	8003704 <__libc_init_array+0xc>
 8003726:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800372a:	4798      	blx	r3
 800372c:	3501      	adds	r5, #1
 800372e:	e7f2      	b.n	8003716 <__libc_init_array+0x1e>
 8003730:	08003788 	.word	0x08003788
 8003734:	08003788 	.word	0x08003788
 8003738:	08003788 	.word	0x08003788
 800373c:	0800378c 	.word	0x0800378c

08003740 <memset>:
 8003740:	4402      	add	r2, r0
 8003742:	4603      	mov	r3, r0
 8003744:	4293      	cmp	r3, r2
 8003746:	d100      	bne.n	800374a <memset+0xa>
 8003748:	4770      	bx	lr
 800374a:	f803 1b01 	strb.w	r1, [r3], #1
 800374e:	e7f9      	b.n	8003744 <memset+0x4>

08003750 <_init>:
 8003750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003752:	bf00      	nop
 8003754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003756:	bc08      	pop	{r3}
 8003758:	469e      	mov	lr, r3
 800375a:	4770      	bx	lr

0800375c <_fini>:
 800375c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800375e:	bf00      	nop
 8003760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003762:	bc08      	pop	{r3}
 8003764:	469e      	mov	lr, r3
 8003766:	4770      	bx	lr
