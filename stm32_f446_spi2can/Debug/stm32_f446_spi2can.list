
stm32_f446_spi2can.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002310  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080024d4  080024d4  000124d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024ec  080024ec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080024ec  080024ec  000124ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080024f4  080024f4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024f4  080024f4  000124f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024f8  080024f8  000124f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080024fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  2000000c  08002508  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08002508  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000091fe  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000171f  00000000  00000000  0002923a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000990  00000000  00000000  0002a960  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008c8  00000000  00000000  0002b2f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000208eb  00000000  00000000  0002bbb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007a47  00000000  00000000  0004c4a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c733f  00000000  00000000  00053eea  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011b229  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002748  00000000  00000000  0011b2a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080024bc 	.word	0x080024bc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080024bc 	.word	0x080024bc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000508:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <HAL_Init+0x40>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a0d      	ldr	r2, [pc, #52]	; (8000544 <HAL_Init+0x40>)
 800050e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <HAL_Init+0x40>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <HAL_Init+0x40>)
 800051a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800051e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <HAL_Init+0x40>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a07      	ldr	r2, [pc, #28]	; (8000544 <HAL_Init+0x40>)
 8000526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800052a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 fa09 	bl	8000944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 f808 	bl	8000548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000538:	f001 fd6c 	bl	8002014 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800053c:	2300      	movs	r3, #0
}
 800053e:	4618      	mov	r0, r3
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40023c00 	.word	0x40023c00

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <HAL_InitTick+0x54>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_InitTick+0x58>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4619      	mov	r1, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000562:	fbb2 f3f3 	udiv	r3, r2, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f000 fa13 	bl	8000992 <HAL_SYSTICK_Config>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000572:	2301      	movs	r3, #1
 8000574:	e00e      	b.n	8000594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	d80a      	bhi.n	8000592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800057c:	2200      	movs	r2, #0
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000584:	f000 f9e9 	bl	800095a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <HAL_InitTick+0x5c>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800058e:	2300      	movs	r3, #0
 8000590:	e000      	b.n	8000594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
}
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000008 	.word	0x20000008
 80005a0:	20000004 	.word	0x20000004
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_IncTick+0x20>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_IncTick+0x24>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <HAL_IncTick+0x24>)
 80005ba:	6013      	str	r3, [r2, #0]
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000004 	.word	0x20000004
 80005cc:	2000002c 	.word	0x2000002c

080005d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return uwTick;
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <HAL_GetTick+0x14>)
 80005d6:	681b      	ldr	r3, [r3, #0]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	2000002c 	.word	0x2000002c

080005e8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d101      	bne.n	80005fa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80005f6:	2301      	movs	r3, #1
 80005f8:	e0ed      	b.n	80007d6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	2b00      	cmp	r3, #0
 8000604:	d102      	bne.n	800060c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f001 fd2c 	bl	8002064 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f022 0202 	bic.w	r2, r2, #2
 800061a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800061c:	f7ff ffd8 	bl	80005d0 <HAL_GetTick>
 8000620:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000622:	e012      	b.n	800064a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000624:	f7ff ffd4 	bl	80005d0 <HAL_GetTick>
 8000628:	4602      	mov	r2, r0
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	1ad3      	subs	r3, r2, r3
 800062e:	2b0a      	cmp	r3, #10
 8000630:	d90b      	bls.n	800064a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000636:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2205      	movs	r2, #5
 8000642:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000646:	2301      	movs	r3, #1
 8000648:	e0c5      	b.n	80007d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	f003 0302 	and.w	r3, r3, #2
 8000654:	2b00      	cmp	r3, #0
 8000656:	d1e5      	bne.n	8000624 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f042 0201 	orr.w	r2, r2, #1
 8000666:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000668:	f7ff ffb2 	bl	80005d0 <HAL_GetTick>
 800066c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800066e:	e012      	b.n	8000696 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000670:	f7ff ffae 	bl	80005d0 <HAL_GetTick>
 8000674:	4602      	mov	r2, r0
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	1ad3      	subs	r3, r2, r3
 800067a:	2b0a      	cmp	r3, #10
 800067c:	d90b      	bls.n	8000696 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000682:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2205      	movs	r2, #5
 800068e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000692:	2301      	movs	r3, #1
 8000694:	e09f      	b.n	80007d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	f003 0301 	and.w	r3, r3, #1
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d0e5      	beq.n	8000670 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	7e1b      	ldrb	r3, [r3, #24]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d108      	bne.n	80006be <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	e007      	b.n	80006ce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80006cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	7e5b      	ldrb	r3, [r3, #25]
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d108      	bne.n	80006e8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	e007      	b.n	80006f8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80006f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	7e9b      	ldrb	r3, [r3, #26]
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d108      	bne.n	8000712 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f042 0220 	orr.w	r2, r2, #32
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	e007      	b.n	8000722 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f022 0220 	bic.w	r2, r2, #32
 8000720:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	7edb      	ldrb	r3, [r3, #27]
 8000726:	2b01      	cmp	r3, #1
 8000728:	d108      	bne.n	800073c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f022 0210 	bic.w	r2, r2, #16
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	e007      	b.n	800074c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f042 0210 	orr.w	r2, r2, #16
 800074a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	7f1b      	ldrb	r3, [r3, #28]
 8000750:	2b01      	cmp	r3, #1
 8000752:	d108      	bne.n	8000766 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f042 0208 	orr.w	r2, r2, #8
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	e007      	b.n	8000776 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f022 0208 	bic.w	r2, r2, #8
 8000774:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	7f5b      	ldrb	r3, [r3, #29]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d108      	bne.n	8000790 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f042 0204 	orr.w	r2, r2, #4
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	e007      	b.n	80007a0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f022 0204 	bic.w	r2, r2, #4
 800079e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	689a      	ldr	r2, [r3, #8]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	431a      	orrs	r2, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	691b      	ldr	r3, [r3, #16]
 80007ae:	431a      	orrs	r2, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	695b      	ldr	r3, [r3, #20]
 80007b4:	ea42 0103 	orr.w	r1, r2, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	1e5a      	subs	r2, r3, #1
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	430a      	orrs	r2, r1
 80007c4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2200      	movs	r2, #0
 80007ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2201      	movs	r2, #1
 80007d0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80007d4:	2300      	movs	r3, #0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	f003 0307 	and.w	r3, r3, #7
 80007ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <__NVIC_SetPriorityGrouping+0x44>)
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007f6:	68ba      	ldr	r2, [r7, #8]
 80007f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007fc:	4013      	ands	r3, r2
 80007fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000808:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800080c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000812:	4a04      	ldr	r2, [pc, #16]	; (8000824 <__NVIC_SetPriorityGrouping+0x44>)
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	60d3      	str	r3, [r2, #12]
}
 8000818:	bf00      	nop
 800081a:	3714      	adds	r7, #20
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800082c:	4b04      	ldr	r3, [pc, #16]	; (8000840 <__NVIC_GetPriorityGrouping+0x18>)
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	0a1b      	lsrs	r3, r3, #8
 8000832:	f003 0307 	and.w	r3, r3, #7
}
 8000836:	4618      	mov	r0, r3
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	6039      	str	r1, [r7, #0]
 800084e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000854:	2b00      	cmp	r3, #0
 8000856:	db0a      	blt.n	800086e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	b2da      	uxtb	r2, r3
 800085c:	490c      	ldr	r1, [pc, #48]	; (8000890 <__NVIC_SetPriority+0x4c>)
 800085e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000862:	0112      	lsls	r2, r2, #4
 8000864:	b2d2      	uxtb	r2, r2
 8000866:	440b      	add	r3, r1
 8000868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800086c:	e00a      	b.n	8000884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	b2da      	uxtb	r2, r3
 8000872:	4908      	ldr	r1, [pc, #32]	; (8000894 <__NVIC_SetPriority+0x50>)
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	f003 030f 	and.w	r3, r3, #15
 800087a:	3b04      	subs	r3, #4
 800087c:	0112      	lsls	r2, r2, #4
 800087e:	b2d2      	uxtb	r2, r2
 8000880:	440b      	add	r3, r1
 8000882:	761a      	strb	r2, [r3, #24]
}
 8000884:	bf00      	nop
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	e000e100 	.word	0xe000e100
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000898:	b480      	push	{r7}
 800089a:	b089      	sub	sp, #36	; 0x24
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	f003 0307 	and.w	r3, r3, #7
 80008aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008ac:	69fb      	ldr	r3, [r7, #28]
 80008ae:	f1c3 0307 	rsb	r3, r3, #7
 80008b2:	2b04      	cmp	r3, #4
 80008b4:	bf28      	it	cs
 80008b6:	2304      	movcs	r3, #4
 80008b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	3304      	adds	r3, #4
 80008be:	2b06      	cmp	r3, #6
 80008c0:	d902      	bls.n	80008c8 <NVIC_EncodePriority+0x30>
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	3b03      	subs	r3, #3
 80008c6:	e000      	b.n	80008ca <NVIC_EncodePriority+0x32>
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008d0:	69bb      	ldr	r3, [r7, #24]
 80008d2:	fa02 f303 	lsl.w	r3, r2, r3
 80008d6:	43da      	mvns	r2, r3
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	401a      	ands	r2, r3
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ea:	43d9      	mvns	r1, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f0:	4313      	orrs	r3, r2
         );
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3724      	adds	r7, #36	; 0x24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
	...

08000900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	3b01      	subs	r3, #1
 800090c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000910:	d301      	bcc.n	8000916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000912:	2301      	movs	r3, #1
 8000914:	e00f      	b.n	8000936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000916:	4a0a      	ldr	r2, [pc, #40]	; (8000940 <SysTick_Config+0x40>)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	3b01      	subs	r3, #1
 800091c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800091e:	210f      	movs	r1, #15
 8000920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000924:	f7ff ff8e 	bl	8000844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000928:	4b05      	ldr	r3, [pc, #20]	; (8000940 <SysTick_Config+0x40>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800092e:	4b04      	ldr	r3, [pc, #16]	; (8000940 <SysTick_Config+0x40>)
 8000930:	2207      	movs	r2, #7
 8000932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000934:	2300      	movs	r3, #0
}
 8000936:	4618      	mov	r0, r3
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	e000e010 	.word	0xe000e010

08000944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f7ff ff47 	bl	80007e0 <__NVIC_SetPriorityGrouping>
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800095a:	b580      	push	{r7, lr}
 800095c:	b086      	sub	sp, #24
 800095e:	af00      	add	r7, sp, #0
 8000960:	4603      	mov	r3, r0
 8000962:	60b9      	str	r1, [r7, #8]
 8000964:	607a      	str	r2, [r7, #4]
 8000966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800096c:	f7ff ff5c 	bl	8000828 <__NVIC_GetPriorityGrouping>
 8000970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	68b9      	ldr	r1, [r7, #8]
 8000976:	6978      	ldr	r0, [r7, #20]
 8000978:	f7ff ff8e 	bl	8000898 <NVIC_EncodePriority>
 800097c:	4602      	mov	r2, r0
 800097e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000982:	4611      	mov	r1, r2
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff ff5d 	bl	8000844 <__NVIC_SetPriority>
}
 800098a:	bf00      	nop
 800098c:	3718      	adds	r7, #24
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b082      	sub	sp, #8
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f7ff ffb0 	bl	8000900 <SysTick_Config>
 80009a0:	4603      	mov	r3, r0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
	...

080009ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b089      	sub	sp, #36	; 0x24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80009be:	2300      	movs	r3, #0
 80009c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80009c2:	2300      	movs	r3, #0
 80009c4:	61fb      	str	r3, [r7, #28]
 80009c6:	e165      	b.n	8000c94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80009c8:	2201      	movs	r2, #1
 80009ca:	69fb      	ldr	r3, [r7, #28]
 80009cc:	fa02 f303 	lsl.w	r3, r2, r3
 80009d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	697a      	ldr	r2, [r7, #20]
 80009d8:	4013      	ands	r3, r2
 80009da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80009dc:	693a      	ldr	r2, [r7, #16]
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	f040 8154 	bne.w	8000c8e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	2b02      	cmp	r3, #2
 80009ec:	d003      	beq.n	80009f6 <HAL_GPIO_Init+0x4a>
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	2b12      	cmp	r3, #18
 80009f4:	d123      	bne.n	8000a3e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	08da      	lsrs	r2, r3, #3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	3208      	adds	r2, #8
 80009fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a04:	69fb      	ldr	r3, [r7, #28]
 8000a06:	f003 0307 	and.w	r3, r3, #7
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	220f      	movs	r2, #15
 8000a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a12:	43db      	mvns	r3, r3
 8000a14:	69ba      	ldr	r2, [r7, #24]
 8000a16:	4013      	ands	r3, r2
 8000a18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	691a      	ldr	r2, [r3, #16]
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	f003 0307 	and.w	r3, r3, #7
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	69ba      	ldr	r2, [r7, #24]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	08da      	lsrs	r2, r3, #3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3208      	adds	r2, #8
 8000a38:	69b9      	ldr	r1, [r7, #24]
 8000a3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a44:	69fb      	ldr	r3, [r7, #28]
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	2203      	movs	r2, #3
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	43db      	mvns	r3, r3
 8000a50:	69ba      	ldr	r2, [r7, #24]
 8000a52:	4013      	ands	r3, r2
 8000a54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	f003 0203 	and.w	r2, r3, #3
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	fa02 f303 	lsl.w	r3, r2, r3
 8000a66:	69ba      	ldr	r2, [r7, #24]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	69ba      	ldr	r2, [r7, #24]
 8000a70:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d00b      	beq.n	8000a92 <HAL_GPIO_Init+0xe6>
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d007      	beq.n	8000a92 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a86:	2b11      	cmp	r3, #17
 8000a88:	d003      	beq.n	8000a92 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	2b12      	cmp	r3, #18
 8000a90:	d130      	bne.n	8000af4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	689b      	ldr	r3, [r3, #8]
 8000a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	2203      	movs	r2, #3
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	43db      	mvns	r3, r3
 8000aa4:	69ba      	ldr	r2, [r7, #24]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	68da      	ldr	r2, [r3, #12]
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	69ba      	ldr	r2, [r7, #24]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	69ba      	ldr	r2, [r7, #24]
 8000ac0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ac8:	2201      	movs	r2, #1
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	69ba      	ldr	r2, [r7, #24]
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	091b      	lsrs	r3, r3, #4
 8000ade:	f003 0201 	and.w	r2, r3, #1
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae8:	69ba      	ldr	r2, [r7, #24]
 8000aea:	4313      	orrs	r3, r2
 8000aec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	69ba      	ldr	r2, [r7, #24]
 8000af2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	2203      	movs	r2, #3
 8000b00:	fa02 f303 	lsl.w	r3, r2, r3
 8000b04:	43db      	mvns	r3, r3
 8000b06:	69ba      	ldr	r2, [r7, #24]
 8000b08:	4013      	ands	r3, r2
 8000b0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	689a      	ldr	r2, [r3, #8]
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	fa02 f303 	lsl.w	r3, r2, r3
 8000b18:	69ba      	ldr	r2, [r7, #24]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	69ba      	ldr	r2, [r7, #24]
 8000b22:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	f000 80ae 	beq.w	8000c8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	4b5c      	ldr	r3, [pc, #368]	; (8000ca8 <HAL_GPIO_Init+0x2fc>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	4a5b      	ldr	r2, [pc, #364]	; (8000ca8 <HAL_GPIO_Init+0x2fc>)
 8000b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b40:	6453      	str	r3, [r2, #68]	; 0x44
 8000b42:	4b59      	ldr	r3, [pc, #356]	; (8000ca8 <HAL_GPIO_Init+0x2fc>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b4e:	4a57      	ldr	r2, [pc, #348]	; (8000cac <HAL_GPIO_Init+0x300>)
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	089b      	lsrs	r3, r3, #2
 8000b54:	3302      	adds	r3, #2
 8000b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	f003 0303 	and.w	r3, r3, #3
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	220f      	movs	r2, #15
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	43db      	mvns	r3, r3
 8000b6c:	69ba      	ldr	r2, [r7, #24]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4a4e      	ldr	r2, [pc, #312]	; (8000cb0 <HAL_GPIO_Init+0x304>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d025      	beq.n	8000bc6 <HAL_GPIO_Init+0x21a>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4a4d      	ldr	r2, [pc, #308]	; (8000cb4 <HAL_GPIO_Init+0x308>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d01f      	beq.n	8000bc2 <HAL_GPIO_Init+0x216>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4a4c      	ldr	r2, [pc, #304]	; (8000cb8 <HAL_GPIO_Init+0x30c>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d019      	beq.n	8000bbe <HAL_GPIO_Init+0x212>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4a4b      	ldr	r2, [pc, #300]	; (8000cbc <HAL_GPIO_Init+0x310>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d013      	beq.n	8000bba <HAL_GPIO_Init+0x20e>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4a4a      	ldr	r2, [pc, #296]	; (8000cc0 <HAL_GPIO_Init+0x314>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d00d      	beq.n	8000bb6 <HAL_GPIO_Init+0x20a>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4a49      	ldr	r2, [pc, #292]	; (8000cc4 <HAL_GPIO_Init+0x318>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d007      	beq.n	8000bb2 <HAL_GPIO_Init+0x206>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4a48      	ldr	r2, [pc, #288]	; (8000cc8 <HAL_GPIO_Init+0x31c>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d101      	bne.n	8000bae <HAL_GPIO_Init+0x202>
 8000baa:	2306      	movs	r3, #6
 8000bac:	e00c      	b.n	8000bc8 <HAL_GPIO_Init+0x21c>
 8000bae:	2307      	movs	r3, #7
 8000bb0:	e00a      	b.n	8000bc8 <HAL_GPIO_Init+0x21c>
 8000bb2:	2305      	movs	r3, #5
 8000bb4:	e008      	b.n	8000bc8 <HAL_GPIO_Init+0x21c>
 8000bb6:	2304      	movs	r3, #4
 8000bb8:	e006      	b.n	8000bc8 <HAL_GPIO_Init+0x21c>
 8000bba:	2303      	movs	r3, #3
 8000bbc:	e004      	b.n	8000bc8 <HAL_GPIO_Init+0x21c>
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	e002      	b.n	8000bc8 <HAL_GPIO_Init+0x21c>
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e000      	b.n	8000bc8 <HAL_GPIO_Init+0x21c>
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	69fa      	ldr	r2, [r7, #28]
 8000bca:	f002 0203 	and.w	r2, r2, #3
 8000bce:	0092      	lsls	r2, r2, #2
 8000bd0:	4093      	lsls	r3, r2
 8000bd2:	69ba      	ldr	r2, [r7, #24]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000bd8:	4934      	ldr	r1, [pc, #208]	; (8000cac <HAL_GPIO_Init+0x300>)
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	089b      	lsrs	r3, r3, #2
 8000bde:	3302      	adds	r3, #2
 8000be0:	69ba      	ldr	r2, [r7, #24]
 8000be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000be6:	4b39      	ldr	r3, [pc, #228]	; (8000ccc <HAL_GPIO_Init+0x320>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	43db      	mvns	r3, r3
 8000bf0:	69ba      	ldr	r2, [r7, #24]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d003      	beq.n	8000c0a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000c02:	69ba      	ldr	r2, [r7, #24]
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000c0a:	4a30      	ldr	r2, [pc, #192]	; (8000ccc <HAL_GPIO_Init+0x320>)
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000c10:	4b2e      	ldr	r3, [pc, #184]	; (8000ccc <HAL_GPIO_Init+0x320>)
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	69ba      	ldr	r2, [r7, #24]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d003      	beq.n	8000c34 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000c2c:	69ba      	ldr	r2, [r7, #24]
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000c34:	4a25      	ldr	r2, [pc, #148]	; (8000ccc <HAL_GPIO_Init+0x320>)
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c3a:	4b24      	ldr	r3, [pc, #144]	; (8000ccc <HAL_GPIO_Init+0x320>)
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	43db      	mvns	r3, r3
 8000c44:	69ba      	ldr	r2, [r7, #24]
 8000c46:	4013      	ands	r3, r2
 8000c48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d003      	beq.n	8000c5e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000c56:	69ba      	ldr	r2, [r7, #24]
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000c5e:	4a1b      	ldr	r2, [pc, #108]	; (8000ccc <HAL_GPIO_Init+0x320>)
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c64:	4b19      	ldr	r3, [pc, #100]	; (8000ccc <HAL_GPIO_Init+0x320>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	69ba      	ldr	r2, [r7, #24]
 8000c70:	4013      	ands	r3, r2
 8000c72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d003      	beq.n	8000c88 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000c80:	69ba      	ldr	r2, [r7, #24]
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000c88:	4a10      	ldr	r2, [pc, #64]	; (8000ccc <HAL_GPIO_Init+0x320>)
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3301      	adds	r3, #1
 8000c92:	61fb      	str	r3, [r7, #28]
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	2b0f      	cmp	r3, #15
 8000c98:	f67f ae96 	bls.w	80009c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000c9c:	bf00      	nop
 8000c9e:	3724      	adds	r7, #36	; 0x24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40013800 	.word	0x40013800
 8000cb0:	40020000 	.word	0x40020000
 8000cb4:	40020400 	.word	0x40020400
 8000cb8:	40020800 	.word	0x40020800
 8000cbc:	40020c00 	.word	0x40020c00
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	40021400 	.word	0x40021400
 8000cc8:	40021800 	.word	0x40021800
 8000ccc:	40013c00 	.word	0x40013c00

08000cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	460b      	mov	r3, r1
 8000cda:	807b      	strh	r3, [r7, #2]
 8000cdc:	4613      	mov	r3, r2
 8000cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ce0:	787b      	ldrb	r3, [r7, #1]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d003      	beq.n	8000cee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ce6:	887a      	ldrh	r2, [r7, #2]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000cec:	e003      	b.n	8000cf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000cee:	887b      	ldrh	r3, [r7, #2]
 8000cf0:	041a      	lsls	r2, r3, #16
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	619a      	str	r2, [r3, #24]
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
	...

08000d04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d101      	bne.n	8000d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000d14:	2301      	movs	r3, #1
 8000d16:	e0ca      	b.n	8000eae <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000d18:	4b67      	ldr	r3, [pc, #412]	; (8000eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f003 030f 	and.w	r3, r3, #15
 8000d20:	683a      	ldr	r2, [r7, #0]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d90c      	bls.n	8000d40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d26:	4b64      	ldr	r3, [pc, #400]	; (8000eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8000d28:	683a      	ldr	r2, [r7, #0]
 8000d2a:	b2d2      	uxtb	r2, r2
 8000d2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d2e:	4b62      	ldr	r3, [pc, #392]	; (8000eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f003 030f 	and.w	r3, r3, #15
 8000d36:	683a      	ldr	r2, [r7, #0]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d001      	beq.n	8000d40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	e0b6      	b.n	8000eae <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f003 0302 	and.w	r3, r3, #2
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d020      	beq.n	8000d8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f003 0304 	and.w	r3, r3, #4
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d005      	beq.n	8000d64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d58:	4b58      	ldr	r3, [pc, #352]	; (8000ebc <HAL_RCC_ClockConfig+0x1b8>)
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	4a57      	ldr	r2, [pc, #348]	; (8000ebc <HAL_RCC_ClockConfig+0x1b8>)
 8000d5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000d62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f003 0308 	and.w	r3, r3, #8
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d005      	beq.n	8000d7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d70:	4b52      	ldr	r3, [pc, #328]	; (8000ebc <HAL_RCC_ClockConfig+0x1b8>)
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	4a51      	ldr	r2, [pc, #324]	; (8000ebc <HAL_RCC_ClockConfig+0x1b8>)
 8000d76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000d7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d7c:	4b4f      	ldr	r3, [pc, #316]	; (8000ebc <HAL_RCC_ClockConfig+0x1b8>)
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	494c      	ldr	r1, [pc, #304]	; (8000ebc <HAL_RCC_ClockConfig+0x1b8>)
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d044      	beq.n	8000e24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d107      	bne.n	8000db2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000da2:	4b46      	ldr	r3, [pc, #280]	; (8000ebc <HAL_RCC_ClockConfig+0x1b8>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d119      	bne.n	8000de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e07d      	b.n	8000eae <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d003      	beq.n	8000dc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000dbe:	2b03      	cmp	r3, #3
 8000dc0:	d107      	bne.n	8000dd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dc2:	4b3e      	ldr	r3, [pc, #248]	; (8000ebc <HAL_RCC_ClockConfig+0x1b8>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d109      	bne.n	8000de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e06d      	b.n	8000eae <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dd2:	4b3a      	ldr	r3, [pc, #232]	; (8000ebc <HAL_RCC_ClockConfig+0x1b8>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f003 0302 	and.w	r3, r3, #2
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d101      	bne.n	8000de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e065      	b.n	8000eae <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000de2:	4b36      	ldr	r3, [pc, #216]	; (8000ebc <HAL_RCC_ClockConfig+0x1b8>)
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	f023 0203 	bic.w	r2, r3, #3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	4933      	ldr	r1, [pc, #204]	; (8000ebc <HAL_RCC_ClockConfig+0x1b8>)
 8000df0:	4313      	orrs	r3, r2
 8000df2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000df4:	f7ff fbec 	bl	80005d0 <HAL_GetTick>
 8000df8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000dfa:	e00a      	b.n	8000e12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dfc:	f7ff fbe8 	bl	80005d0 <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d901      	bls.n	8000e12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	e04d      	b.n	8000eae <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e12:	4b2a      	ldr	r3, [pc, #168]	; (8000ebc <HAL_RCC_ClockConfig+0x1b8>)
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	f003 020c 	and.w	r2, r3, #12
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d1eb      	bne.n	8000dfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000e24:	4b24      	ldr	r3, [pc, #144]	; (8000eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f003 030f 	and.w	r3, r3, #15
 8000e2c:	683a      	ldr	r2, [r7, #0]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d20c      	bcs.n	8000e4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e32:	4b21      	ldr	r3, [pc, #132]	; (8000eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8000e34:	683a      	ldr	r2, [r7, #0]
 8000e36:	b2d2      	uxtb	r2, r2
 8000e38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e3a:	4b1f      	ldr	r3, [pc, #124]	; (8000eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f003 030f 	and.w	r3, r3, #15
 8000e42:	683a      	ldr	r2, [r7, #0]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d001      	beq.n	8000e4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	e030      	b.n	8000eae <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f003 0304 	and.w	r3, r3, #4
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d008      	beq.n	8000e6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e58:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <HAL_RCC_ClockConfig+0x1b8>)
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	4915      	ldr	r1, [pc, #84]	; (8000ebc <HAL_RCC_ClockConfig+0x1b8>)
 8000e66:	4313      	orrs	r3, r2
 8000e68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f003 0308 	and.w	r3, r3, #8
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d009      	beq.n	8000e8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000e76:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <HAL_RCC_ClockConfig+0x1b8>)
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	691b      	ldr	r3, [r3, #16]
 8000e82:	00db      	lsls	r3, r3, #3
 8000e84:	490d      	ldr	r1, [pc, #52]	; (8000ebc <HAL_RCC_ClockConfig+0x1b8>)
 8000e86:	4313      	orrs	r3, r2
 8000e88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000e8a:	f000 f851 	bl	8000f30 <HAL_RCC_GetSysClockFreq>
 8000e8e:	4601      	mov	r1, r0
 8000e90:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <HAL_RCC_ClockConfig+0x1b8>)
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	091b      	lsrs	r3, r3, #4
 8000e96:	f003 030f 	and.w	r3, r3, #15
 8000e9a:	4a09      	ldr	r2, [pc, #36]	; (8000ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8000e9c:	5cd3      	ldrb	r3, [r2, r3]
 8000e9e:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea2:	4a08      	ldr	r2, [pc, #32]	; (8000ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8000ea4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f7ff fb4e 	bl	8000548 <HAL_InitTick>

  return HAL_OK;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40023c00 	.word	0x40023c00
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	080024d4 	.word	0x080024d4
 8000ec4:	20000008 	.word	0x20000008

08000ec8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000ecc:	4b03      	ldr	r3, [pc, #12]	; (8000edc <HAL_RCC_GetHCLKFreq+0x14>)
 8000ece:	681b      	ldr	r3, [r3, #0]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	20000008 	.word	0x20000008

08000ee0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000ee4:	f7ff fff0 	bl	8000ec8 <HAL_RCC_GetHCLKFreq>
 8000ee8:	4601      	mov	r1, r0
 8000eea:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	0a9b      	lsrs	r3, r3, #10
 8000ef0:	f003 0307 	and.w	r3, r3, #7
 8000ef4:	4a03      	ldr	r2, [pc, #12]	; (8000f04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000ef6:	5cd3      	ldrb	r3, [r2, r3]
 8000ef8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40023800 	.word	0x40023800
 8000f04:	080024e4 	.word	0x080024e4

08000f08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000f0c:	f7ff ffdc 	bl	8000ec8 <HAL_RCC_GetHCLKFreq>
 8000f10:	4601      	mov	r1, r0
 8000f12:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	0b5b      	lsrs	r3, r3, #13
 8000f18:	f003 0307 	and.w	r3, r3, #7
 8000f1c:	4a03      	ldr	r2, [pc, #12]	; (8000f2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8000f1e:	5cd3      	ldrb	r3, [r2, r3]
 8000f20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	080024e4 	.word	0x080024e4

08000f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f32:	b087      	sub	sp, #28
 8000f34:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8000f42:	2300      	movs	r3, #0
 8000f44:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f4a:	4bc6      	ldr	r3, [pc, #792]	; (8001264 <HAL_RCC_GetSysClockFreq+0x334>)
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	f003 030c 	and.w	r3, r3, #12
 8000f52:	2b0c      	cmp	r3, #12
 8000f54:	f200 817e 	bhi.w	8001254 <HAL_RCC_GetSysClockFreq+0x324>
 8000f58:	a201      	add	r2, pc, #4	; (adr r2, 8000f60 <HAL_RCC_GetSysClockFreq+0x30>)
 8000f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f5e:	bf00      	nop
 8000f60:	08000f95 	.word	0x08000f95
 8000f64:	08001255 	.word	0x08001255
 8000f68:	08001255 	.word	0x08001255
 8000f6c:	08001255 	.word	0x08001255
 8000f70:	08000f9b 	.word	0x08000f9b
 8000f74:	08001255 	.word	0x08001255
 8000f78:	08001255 	.word	0x08001255
 8000f7c:	08001255 	.word	0x08001255
 8000f80:	08000fa1 	.word	0x08000fa1
 8000f84:	08001255 	.word	0x08001255
 8000f88:	08001255 	.word	0x08001255
 8000f8c:	08001255 	.word	0x08001255
 8000f90:	080010fd 	.word	0x080010fd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000f94:	4bb4      	ldr	r3, [pc, #720]	; (8001268 <HAL_RCC_GetSysClockFreq+0x338>)
 8000f96:	613b      	str	r3, [r7, #16]
       break;
 8000f98:	e15f      	b.n	800125a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000f9a:	4bb4      	ldr	r3, [pc, #720]	; (800126c <HAL_RCC_GetSysClockFreq+0x33c>)
 8000f9c:	613b      	str	r3, [r7, #16]
      break;
 8000f9e:	e15c      	b.n	800125a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000fa0:	4bb0      	ldr	r3, [pc, #704]	; (8001264 <HAL_RCC_GetSysClockFreq+0x334>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000fa8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000faa:	4bae      	ldr	r3, [pc, #696]	; (8001264 <HAL_RCC_GetSysClockFreq+0x334>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d04a      	beq.n	800104c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fb6:	4bab      	ldr	r3, [pc, #684]	; (8001264 <HAL_RCC_GetSysClockFreq+0x334>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	099b      	lsrs	r3, r3, #6
 8000fbc:	f04f 0400 	mov.w	r4, #0
 8000fc0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000fc4:	f04f 0200 	mov.w	r2, #0
 8000fc8:	ea03 0501 	and.w	r5, r3, r1
 8000fcc:	ea04 0602 	and.w	r6, r4, r2
 8000fd0:	4629      	mov	r1, r5
 8000fd2:	4632      	mov	r2, r6
 8000fd4:	f04f 0300 	mov.w	r3, #0
 8000fd8:	f04f 0400 	mov.w	r4, #0
 8000fdc:	0154      	lsls	r4, r2, #5
 8000fde:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000fe2:	014b      	lsls	r3, r1, #5
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4622      	mov	r2, r4
 8000fe8:	1b49      	subs	r1, r1, r5
 8000fea:	eb62 0206 	sbc.w	r2, r2, r6
 8000fee:	f04f 0300 	mov.w	r3, #0
 8000ff2:	f04f 0400 	mov.w	r4, #0
 8000ff6:	0194      	lsls	r4, r2, #6
 8000ff8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000ffc:	018b      	lsls	r3, r1, #6
 8000ffe:	1a5b      	subs	r3, r3, r1
 8001000:	eb64 0402 	sbc.w	r4, r4, r2
 8001004:	f04f 0100 	mov.w	r1, #0
 8001008:	f04f 0200 	mov.w	r2, #0
 800100c:	00e2      	lsls	r2, r4, #3
 800100e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001012:	00d9      	lsls	r1, r3, #3
 8001014:	460b      	mov	r3, r1
 8001016:	4614      	mov	r4, r2
 8001018:	195b      	adds	r3, r3, r5
 800101a:	eb44 0406 	adc.w	r4, r4, r6
 800101e:	f04f 0100 	mov.w	r1, #0
 8001022:	f04f 0200 	mov.w	r2, #0
 8001026:	0262      	lsls	r2, r4, #9
 8001028:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800102c:	0259      	lsls	r1, r3, #9
 800102e:	460b      	mov	r3, r1
 8001030:	4614      	mov	r4, r2
 8001032:	4618      	mov	r0, r3
 8001034:	4621      	mov	r1, r4
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	f04f 0400 	mov.w	r4, #0
 800103c:	461a      	mov	r2, r3
 800103e:	4623      	mov	r3, r4
 8001040:	f7ff f8e0 	bl	8000204 <__aeabi_uldivmod>
 8001044:	4603      	mov	r3, r0
 8001046:	460c      	mov	r4, r1
 8001048:	617b      	str	r3, [r7, #20]
 800104a:	e049      	b.n	80010e0 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800104c:	4b85      	ldr	r3, [pc, #532]	; (8001264 <HAL_RCC_GetSysClockFreq+0x334>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	099b      	lsrs	r3, r3, #6
 8001052:	f04f 0400 	mov.w	r4, #0
 8001056:	f240 11ff 	movw	r1, #511	; 0x1ff
 800105a:	f04f 0200 	mov.w	r2, #0
 800105e:	ea03 0501 	and.w	r5, r3, r1
 8001062:	ea04 0602 	and.w	r6, r4, r2
 8001066:	4629      	mov	r1, r5
 8001068:	4632      	mov	r2, r6
 800106a:	f04f 0300 	mov.w	r3, #0
 800106e:	f04f 0400 	mov.w	r4, #0
 8001072:	0154      	lsls	r4, r2, #5
 8001074:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001078:	014b      	lsls	r3, r1, #5
 800107a:	4619      	mov	r1, r3
 800107c:	4622      	mov	r2, r4
 800107e:	1b49      	subs	r1, r1, r5
 8001080:	eb62 0206 	sbc.w	r2, r2, r6
 8001084:	f04f 0300 	mov.w	r3, #0
 8001088:	f04f 0400 	mov.w	r4, #0
 800108c:	0194      	lsls	r4, r2, #6
 800108e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001092:	018b      	lsls	r3, r1, #6
 8001094:	1a5b      	subs	r3, r3, r1
 8001096:	eb64 0402 	sbc.w	r4, r4, r2
 800109a:	f04f 0100 	mov.w	r1, #0
 800109e:	f04f 0200 	mov.w	r2, #0
 80010a2:	00e2      	lsls	r2, r4, #3
 80010a4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80010a8:	00d9      	lsls	r1, r3, #3
 80010aa:	460b      	mov	r3, r1
 80010ac:	4614      	mov	r4, r2
 80010ae:	195b      	adds	r3, r3, r5
 80010b0:	eb44 0406 	adc.w	r4, r4, r6
 80010b4:	f04f 0100 	mov.w	r1, #0
 80010b8:	f04f 0200 	mov.w	r2, #0
 80010bc:	02a2      	lsls	r2, r4, #10
 80010be:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80010c2:	0299      	lsls	r1, r3, #10
 80010c4:	460b      	mov	r3, r1
 80010c6:	4614      	mov	r4, r2
 80010c8:	4618      	mov	r0, r3
 80010ca:	4621      	mov	r1, r4
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f04f 0400 	mov.w	r4, #0
 80010d2:	461a      	mov	r2, r3
 80010d4:	4623      	mov	r3, r4
 80010d6:	f7ff f895 	bl	8000204 <__aeabi_uldivmod>
 80010da:	4603      	mov	r3, r0
 80010dc:	460c      	mov	r4, r1
 80010de:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80010e0:	4b60      	ldr	r3, [pc, #384]	; (8001264 <HAL_RCC_GetSysClockFreq+0x334>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	0c1b      	lsrs	r3, r3, #16
 80010e6:	f003 0303 	and.w	r3, r3, #3
 80010ea:	3301      	adds	r3, #1
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80010f0:	697a      	ldr	r2, [r7, #20]
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f8:	613b      	str	r3, [r7, #16]
      break;
 80010fa:	e0ae      	b.n	800125a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80010fc:	4b59      	ldr	r3, [pc, #356]	; (8001264 <HAL_RCC_GetSysClockFreq+0x334>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001104:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001106:	4b57      	ldr	r3, [pc, #348]	; (8001264 <HAL_RCC_GetSysClockFreq+0x334>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d04a      	beq.n	80011a8 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001112:	4b54      	ldr	r3, [pc, #336]	; (8001264 <HAL_RCC_GetSysClockFreq+0x334>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	099b      	lsrs	r3, r3, #6
 8001118:	f04f 0400 	mov.w	r4, #0
 800111c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001120:	f04f 0200 	mov.w	r2, #0
 8001124:	ea03 0501 	and.w	r5, r3, r1
 8001128:	ea04 0602 	and.w	r6, r4, r2
 800112c:	4629      	mov	r1, r5
 800112e:	4632      	mov	r2, r6
 8001130:	f04f 0300 	mov.w	r3, #0
 8001134:	f04f 0400 	mov.w	r4, #0
 8001138:	0154      	lsls	r4, r2, #5
 800113a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800113e:	014b      	lsls	r3, r1, #5
 8001140:	4619      	mov	r1, r3
 8001142:	4622      	mov	r2, r4
 8001144:	1b49      	subs	r1, r1, r5
 8001146:	eb62 0206 	sbc.w	r2, r2, r6
 800114a:	f04f 0300 	mov.w	r3, #0
 800114e:	f04f 0400 	mov.w	r4, #0
 8001152:	0194      	lsls	r4, r2, #6
 8001154:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001158:	018b      	lsls	r3, r1, #6
 800115a:	1a5b      	subs	r3, r3, r1
 800115c:	eb64 0402 	sbc.w	r4, r4, r2
 8001160:	f04f 0100 	mov.w	r1, #0
 8001164:	f04f 0200 	mov.w	r2, #0
 8001168:	00e2      	lsls	r2, r4, #3
 800116a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800116e:	00d9      	lsls	r1, r3, #3
 8001170:	460b      	mov	r3, r1
 8001172:	4614      	mov	r4, r2
 8001174:	195b      	adds	r3, r3, r5
 8001176:	eb44 0406 	adc.w	r4, r4, r6
 800117a:	f04f 0100 	mov.w	r1, #0
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	0262      	lsls	r2, r4, #9
 8001184:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001188:	0259      	lsls	r1, r3, #9
 800118a:	460b      	mov	r3, r1
 800118c:	4614      	mov	r4, r2
 800118e:	4618      	mov	r0, r3
 8001190:	4621      	mov	r1, r4
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f04f 0400 	mov.w	r4, #0
 8001198:	461a      	mov	r2, r3
 800119a:	4623      	mov	r3, r4
 800119c:	f7ff f832 	bl	8000204 <__aeabi_uldivmod>
 80011a0:	4603      	mov	r3, r0
 80011a2:	460c      	mov	r4, r1
 80011a4:	617b      	str	r3, [r7, #20]
 80011a6:	e049      	b.n	800123c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011a8:	4b2e      	ldr	r3, [pc, #184]	; (8001264 <HAL_RCC_GetSysClockFreq+0x334>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	099b      	lsrs	r3, r3, #6
 80011ae:	f04f 0400 	mov.w	r4, #0
 80011b2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80011b6:	f04f 0200 	mov.w	r2, #0
 80011ba:	ea03 0501 	and.w	r5, r3, r1
 80011be:	ea04 0602 	and.w	r6, r4, r2
 80011c2:	4629      	mov	r1, r5
 80011c4:	4632      	mov	r2, r6
 80011c6:	f04f 0300 	mov.w	r3, #0
 80011ca:	f04f 0400 	mov.w	r4, #0
 80011ce:	0154      	lsls	r4, r2, #5
 80011d0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80011d4:	014b      	lsls	r3, r1, #5
 80011d6:	4619      	mov	r1, r3
 80011d8:	4622      	mov	r2, r4
 80011da:	1b49      	subs	r1, r1, r5
 80011dc:	eb62 0206 	sbc.w	r2, r2, r6
 80011e0:	f04f 0300 	mov.w	r3, #0
 80011e4:	f04f 0400 	mov.w	r4, #0
 80011e8:	0194      	lsls	r4, r2, #6
 80011ea:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80011ee:	018b      	lsls	r3, r1, #6
 80011f0:	1a5b      	subs	r3, r3, r1
 80011f2:	eb64 0402 	sbc.w	r4, r4, r2
 80011f6:	f04f 0100 	mov.w	r1, #0
 80011fa:	f04f 0200 	mov.w	r2, #0
 80011fe:	00e2      	lsls	r2, r4, #3
 8001200:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001204:	00d9      	lsls	r1, r3, #3
 8001206:	460b      	mov	r3, r1
 8001208:	4614      	mov	r4, r2
 800120a:	195b      	adds	r3, r3, r5
 800120c:	eb44 0406 	adc.w	r4, r4, r6
 8001210:	f04f 0100 	mov.w	r1, #0
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	02a2      	lsls	r2, r4, #10
 800121a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800121e:	0299      	lsls	r1, r3, #10
 8001220:	460b      	mov	r3, r1
 8001222:	4614      	mov	r4, r2
 8001224:	4618      	mov	r0, r3
 8001226:	4621      	mov	r1, r4
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f04f 0400 	mov.w	r4, #0
 800122e:	461a      	mov	r2, r3
 8001230:	4623      	mov	r3, r4
 8001232:	f7fe ffe7 	bl	8000204 <__aeabi_uldivmod>
 8001236:	4603      	mov	r3, r0
 8001238:	460c      	mov	r4, r1
 800123a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800123c:	4b09      	ldr	r3, [pc, #36]	; (8001264 <HAL_RCC_GetSysClockFreq+0x334>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	0f1b      	lsrs	r3, r3, #28
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001248:	697a      	ldr	r2, [r7, #20]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001250:	613b      	str	r3, [r7, #16]
      break;
 8001252:	e002      	b.n	800125a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001254:	4b04      	ldr	r3, [pc, #16]	; (8001268 <HAL_RCC_GetSysClockFreq+0x338>)
 8001256:	613b      	str	r3, [r7, #16]
      break;
 8001258:	bf00      	nop
    }
  }
  return sysclockfreq;
 800125a:	693b      	ldr	r3, [r7, #16]
}
 800125c:	4618      	mov	r0, r3
 800125e:	371c      	adds	r7, #28
 8001260:	46bd      	mov	sp, r7
 8001262:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001264:	40023800 	.word	0x40023800
 8001268:	00f42400 	.word	0x00f42400
 800126c:	007a1200 	.word	0x007a1200

08001270 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001278:	2300      	movs	r3, #0
 800127a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	2b00      	cmp	r3, #0
 8001286:	f000 8083 	beq.w	8001390 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800128a:	4b95      	ldr	r3, [pc, #596]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f003 030c 	and.w	r3, r3, #12
 8001292:	2b04      	cmp	r3, #4
 8001294:	d019      	beq.n	80012ca <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001296:	4b92      	ldr	r3, [pc, #584]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800129e:	2b08      	cmp	r3, #8
 80012a0:	d106      	bne.n	80012b0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80012a2:	4b8f      	ldr	r3, [pc, #572]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012ae:	d00c      	beq.n	80012ca <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012b0:	4b8b      	ldr	r3, [pc, #556]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80012b8:	2b0c      	cmp	r3, #12
 80012ba:	d112      	bne.n	80012e2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012bc:	4b88      	ldr	r3, [pc, #544]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012c8:	d10b      	bne.n	80012e2 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ca:	4b85      	ldr	r3, [pc, #532]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d05b      	beq.n	800138e <HAL_RCC_OscConfig+0x11e>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d157      	bne.n	800138e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e216      	b.n	8001710 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ea:	d106      	bne.n	80012fa <HAL_RCC_OscConfig+0x8a>
 80012ec:	4b7c      	ldr	r3, [pc, #496]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a7b      	ldr	r2, [pc, #492]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 80012f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	e01d      	b.n	8001336 <HAL_RCC_OscConfig+0xc6>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001302:	d10c      	bne.n	800131e <HAL_RCC_OscConfig+0xae>
 8001304:	4b76      	ldr	r3, [pc, #472]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a75      	ldr	r2, [pc, #468]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 800130a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	4b73      	ldr	r3, [pc, #460]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a72      	ldr	r2, [pc, #456]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 8001316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800131a:	6013      	str	r3, [r2, #0]
 800131c:	e00b      	b.n	8001336 <HAL_RCC_OscConfig+0xc6>
 800131e:	4b70      	ldr	r3, [pc, #448]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a6f      	ldr	r2, [pc, #444]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 8001324:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	4b6d      	ldr	r3, [pc, #436]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a6c      	ldr	r2, [pc, #432]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 8001330:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001334:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d013      	beq.n	8001366 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800133e:	f7ff f947 	bl	80005d0 <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001344:	e008      	b.n	8001358 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001346:	f7ff f943 	bl	80005d0 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b64      	cmp	r3, #100	; 0x64
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e1db      	b.n	8001710 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001358:	4b61      	ldr	r3, [pc, #388]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d0f0      	beq.n	8001346 <HAL_RCC_OscConfig+0xd6>
 8001364:	e014      	b.n	8001390 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001366:	f7ff f933 	bl	80005d0 <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800136e:	f7ff f92f 	bl	80005d0 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b64      	cmp	r3, #100	; 0x64
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e1c7      	b.n	8001710 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001380:	4b57      	ldr	r3, [pc, #348]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1f0      	bne.n	800136e <HAL_RCC_OscConfig+0xfe>
 800138c:	e000      	b.n	8001390 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800138e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d06f      	beq.n	800147c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800139c:	4b50      	ldr	r3, [pc, #320]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f003 030c 	and.w	r3, r3, #12
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d017      	beq.n	80013d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80013a8:	4b4d      	ldr	r3, [pc, #308]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80013b0:	2b08      	cmp	r3, #8
 80013b2:	d105      	bne.n	80013c0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80013b4:	4b4a      	ldr	r3, [pc, #296]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d00b      	beq.n	80013d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013c0:	4b47      	ldr	r3, [pc, #284]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80013c8:	2b0c      	cmp	r3, #12
 80013ca:	d11c      	bne.n	8001406 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013cc:	4b44      	ldr	r3, [pc, #272]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d116      	bne.n	8001406 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013d8:	4b41      	ldr	r3, [pc, #260]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d005      	beq.n	80013f0 <HAL_RCC_OscConfig+0x180>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d001      	beq.n	80013f0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e18f      	b.n	8001710 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f0:	4b3b      	ldr	r3, [pc, #236]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	4938      	ldr	r1, [pc, #224]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 8001400:	4313      	orrs	r3, r2
 8001402:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001404:	e03a      	b.n	800147c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d020      	beq.n	8001450 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800140e:	4b35      	ldr	r3, [pc, #212]	; (80014e4 <HAL_RCC_OscConfig+0x274>)
 8001410:	2201      	movs	r2, #1
 8001412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001414:	f7ff f8dc 	bl	80005d0 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800141c:	f7ff f8d8 	bl	80005d0 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e170      	b.n	8001710 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800142e:	4b2c      	ldr	r3, [pc, #176]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0f0      	beq.n	800141c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800143a:	4b29      	ldr	r3, [pc, #164]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	691b      	ldr	r3, [r3, #16]
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	4925      	ldr	r1, [pc, #148]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 800144a:	4313      	orrs	r3, r2
 800144c:	600b      	str	r3, [r1, #0]
 800144e:	e015      	b.n	800147c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001450:	4b24      	ldr	r3, [pc, #144]	; (80014e4 <HAL_RCC_OscConfig+0x274>)
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001456:	f7ff f8bb 	bl	80005d0 <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800145e:	f7ff f8b7 	bl	80005d0 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e14f      	b.n	8001710 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001470:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1f0      	bne.n	800145e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0308 	and.w	r3, r3, #8
 8001484:	2b00      	cmp	r3, #0
 8001486:	d037      	beq.n	80014f8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d016      	beq.n	80014be <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001490:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <HAL_RCC_OscConfig+0x278>)
 8001492:	2201      	movs	r2, #1
 8001494:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001496:	f7ff f89b 	bl	80005d0 <HAL_GetTick>
 800149a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800149c:	e008      	b.n	80014b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800149e:	f7ff f897 	bl	80005d0 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e12f      	b.n	8001710 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b0:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 80014b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0f0      	beq.n	800149e <HAL_RCC_OscConfig+0x22e>
 80014bc:	e01c      	b.n	80014f8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014be:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <HAL_RCC_OscConfig+0x278>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c4:	f7ff f884 	bl	80005d0 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ca:	e00f      	b.n	80014ec <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014cc:	f7ff f880 	bl	80005d0 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d908      	bls.n	80014ec <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e118      	b.n	8001710 <HAL_RCC_OscConfig+0x4a0>
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800
 80014e4:	42470000 	.word	0x42470000
 80014e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ec:	4b8a      	ldr	r3, [pc, #552]	; (8001718 <HAL_RCC_OscConfig+0x4a8>)
 80014ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1e9      	bne.n	80014cc <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0304 	and.w	r3, r3, #4
 8001500:	2b00      	cmp	r3, #0
 8001502:	f000 8097 	beq.w	8001634 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001506:	2300      	movs	r3, #0
 8001508:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800150a:	4b83      	ldr	r3, [pc, #524]	; (8001718 <HAL_RCC_OscConfig+0x4a8>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d10f      	bne.n	8001536 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	4b7f      	ldr	r3, [pc, #508]	; (8001718 <HAL_RCC_OscConfig+0x4a8>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	4a7e      	ldr	r2, [pc, #504]	; (8001718 <HAL_RCC_OscConfig+0x4a8>)
 8001520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001524:	6413      	str	r3, [r2, #64]	; 0x40
 8001526:	4b7c      	ldr	r3, [pc, #496]	; (8001718 <HAL_RCC_OscConfig+0x4a8>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001532:	2301      	movs	r3, #1
 8001534:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001536:	4b79      	ldr	r3, [pc, #484]	; (800171c <HAL_RCC_OscConfig+0x4ac>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800153e:	2b00      	cmp	r3, #0
 8001540:	d118      	bne.n	8001574 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001542:	4b76      	ldr	r3, [pc, #472]	; (800171c <HAL_RCC_OscConfig+0x4ac>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a75      	ldr	r2, [pc, #468]	; (800171c <HAL_RCC_OscConfig+0x4ac>)
 8001548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800154c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800154e:	f7ff f83f 	bl	80005d0 <HAL_GetTick>
 8001552:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001554:	e008      	b.n	8001568 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001556:	f7ff f83b 	bl	80005d0 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e0d3      	b.n	8001710 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001568:	4b6c      	ldr	r3, [pc, #432]	; (800171c <HAL_RCC_OscConfig+0x4ac>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001570:	2b00      	cmp	r3, #0
 8001572:	d0f0      	beq.n	8001556 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d106      	bne.n	800158a <HAL_RCC_OscConfig+0x31a>
 800157c:	4b66      	ldr	r3, [pc, #408]	; (8001718 <HAL_RCC_OscConfig+0x4a8>)
 800157e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001580:	4a65      	ldr	r2, [pc, #404]	; (8001718 <HAL_RCC_OscConfig+0x4a8>)
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	6713      	str	r3, [r2, #112]	; 0x70
 8001588:	e01c      	b.n	80015c4 <HAL_RCC_OscConfig+0x354>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	2b05      	cmp	r3, #5
 8001590:	d10c      	bne.n	80015ac <HAL_RCC_OscConfig+0x33c>
 8001592:	4b61      	ldr	r3, [pc, #388]	; (8001718 <HAL_RCC_OscConfig+0x4a8>)
 8001594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001596:	4a60      	ldr	r2, [pc, #384]	; (8001718 <HAL_RCC_OscConfig+0x4a8>)
 8001598:	f043 0304 	orr.w	r3, r3, #4
 800159c:	6713      	str	r3, [r2, #112]	; 0x70
 800159e:	4b5e      	ldr	r3, [pc, #376]	; (8001718 <HAL_RCC_OscConfig+0x4a8>)
 80015a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a2:	4a5d      	ldr	r2, [pc, #372]	; (8001718 <HAL_RCC_OscConfig+0x4a8>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6713      	str	r3, [r2, #112]	; 0x70
 80015aa:	e00b      	b.n	80015c4 <HAL_RCC_OscConfig+0x354>
 80015ac:	4b5a      	ldr	r3, [pc, #360]	; (8001718 <HAL_RCC_OscConfig+0x4a8>)
 80015ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b0:	4a59      	ldr	r2, [pc, #356]	; (8001718 <HAL_RCC_OscConfig+0x4a8>)
 80015b2:	f023 0301 	bic.w	r3, r3, #1
 80015b6:	6713      	str	r3, [r2, #112]	; 0x70
 80015b8:	4b57      	ldr	r3, [pc, #348]	; (8001718 <HAL_RCC_OscConfig+0x4a8>)
 80015ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015bc:	4a56      	ldr	r2, [pc, #344]	; (8001718 <HAL_RCC_OscConfig+0x4a8>)
 80015be:	f023 0304 	bic.w	r3, r3, #4
 80015c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d015      	beq.n	80015f8 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015cc:	f7ff f800 	bl	80005d0 <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d2:	e00a      	b.n	80015ea <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015d4:	f7fe fffc 	bl	80005d0 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e092      	b.n	8001710 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ea:	4b4b      	ldr	r3, [pc, #300]	; (8001718 <HAL_RCC_OscConfig+0x4a8>)
 80015ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0ee      	beq.n	80015d4 <HAL_RCC_OscConfig+0x364>
 80015f6:	e014      	b.n	8001622 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f8:	f7fe ffea 	bl	80005d0 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015fe:	e00a      	b.n	8001616 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001600:	f7fe ffe6 	bl	80005d0 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	f241 3288 	movw	r2, #5000	; 0x1388
 800160e:	4293      	cmp	r3, r2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e07c      	b.n	8001710 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001616:	4b40      	ldr	r3, [pc, #256]	; (8001718 <HAL_RCC_OscConfig+0x4a8>)
 8001618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1ee      	bne.n	8001600 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001622:	7dfb      	ldrb	r3, [r7, #23]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d105      	bne.n	8001634 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001628:	4b3b      	ldr	r3, [pc, #236]	; (8001718 <HAL_RCC_OscConfig+0x4a8>)
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	4a3a      	ldr	r2, [pc, #232]	; (8001718 <HAL_RCC_OscConfig+0x4a8>)
 800162e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001632:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d068      	beq.n	800170e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800163c:	4b36      	ldr	r3, [pc, #216]	; (8001718 <HAL_RCC_OscConfig+0x4a8>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f003 030c 	and.w	r3, r3, #12
 8001644:	2b08      	cmp	r3, #8
 8001646:	d060      	beq.n	800170a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	2b02      	cmp	r3, #2
 800164e:	d145      	bne.n	80016dc <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001650:	4b33      	ldr	r3, [pc, #204]	; (8001720 <HAL_RCC_OscConfig+0x4b0>)
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001656:	f7fe ffbb 	bl	80005d0 <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800165e:	f7fe ffb7 	bl	80005d0 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e04f      	b.n	8001710 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001670:	4b29      	ldr	r3, [pc, #164]	; (8001718 <HAL_RCC_OscConfig+0x4a8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1f0      	bne.n	800165e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	69da      	ldr	r2, [r3, #28]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	431a      	orrs	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168a:	019b      	lsls	r3, r3, #6
 800168c:	431a      	orrs	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001692:	085b      	lsrs	r3, r3, #1
 8001694:	3b01      	subs	r3, #1
 8001696:	041b      	lsls	r3, r3, #16
 8001698:	431a      	orrs	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169e:	061b      	lsls	r3, r3, #24
 80016a0:	431a      	orrs	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	071b      	lsls	r3, r3, #28
 80016a8:	491b      	ldr	r1, [pc, #108]	; (8001718 <HAL_RCC_OscConfig+0x4a8>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016ae:	4b1c      	ldr	r3, [pc, #112]	; (8001720 <HAL_RCC_OscConfig+0x4b0>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b4:	f7fe ff8c 	bl	80005d0 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016bc:	f7fe ff88 	bl	80005d0 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e020      	b.n	8001710 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ce:	4b12      	ldr	r3, [pc, #72]	; (8001718 <HAL_RCC_OscConfig+0x4a8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d0f0      	beq.n	80016bc <HAL_RCC_OscConfig+0x44c>
 80016da:	e018      	b.n	800170e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016dc:	4b10      	ldr	r3, [pc, #64]	; (8001720 <HAL_RCC_OscConfig+0x4b0>)
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e2:	f7fe ff75 	bl	80005d0 <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ea:	f7fe ff71 	bl	80005d0 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e009      	b.n	8001710 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <HAL_RCC_OscConfig+0x4a8>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1f0      	bne.n	80016ea <HAL_RCC_OscConfig+0x47a>
 8001708:	e001      	b.n	800170e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e000      	b.n	8001710 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40023800 	.word	0x40023800
 800171c:	40007000 	.word	0x40007000
 8001720:	42470060 	.word	0x42470060

08001724 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e056      	b.n	80017e4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b00      	cmp	r3, #0
 8001746:	d106      	bne.n	8001756 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 fd29 	bl	80021a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2202      	movs	r2, #2
 800175a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800176c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	431a      	orrs	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	431a      	orrs	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	431a      	orrs	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	695b      	ldr	r3, [r3, #20]
 8001788:	431a      	orrs	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001792:	431a      	orrs	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	69db      	ldr	r3, [r3, #28]
 8001798:	431a      	orrs	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a1b      	ldr	r3, [r3, #32]
 800179e:	ea42 0103 	orr.w	r1, r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	0c1b      	lsrs	r3, r3, #16
 80017b4:	f003 0104 	and.w	r1, r3, #4
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	430a      	orrs	r2, r1
 80017c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	69da      	ldr	r2, [r3, #28]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2201      	movs	r2, #1
 80017de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e03f      	b.n	800187e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d106      	bne.n	8001818 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f000 fd50 	bl	80022b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2224      	movs	r2, #36	; 0x24
 800181c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68da      	ldr	r2, [r3, #12]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800182e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 f829 	bl	8001888 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	691a      	ldr	r2, [r3, #16]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001844:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	695a      	ldr	r2, [r3, #20]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001854:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	68da      	ldr	r2, [r3, #12]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001864:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2220      	movs	r2, #32
 8001870:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2220      	movs	r2, #32
 8001878:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001888:	b5b0      	push	{r4, r5, r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	68da      	ldr	r2, [r3, #12]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689a      	ldr	r2, [r3, #8]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	431a      	orrs	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80018c8:	f023 030c 	bic.w	r3, r3, #12
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6812      	ldr	r2, [r2, #0]
 80018d0:	68f9      	ldr	r1, [r7, #12]
 80018d2:	430b      	orrs	r3, r1
 80018d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	695b      	ldr	r3, [r3, #20]
 80018dc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	699a      	ldr	r2, [r3, #24]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69db      	ldr	r3, [r3, #28]
 80018f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018f4:	f040 80e4 	bne.w	8001ac0 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4aab      	ldr	r2, [pc, #684]	; (8001bac <UART_SetConfig+0x324>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d004      	beq.n	800190c <UART_SetConfig+0x84>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4aaa      	ldr	r2, [pc, #680]	; (8001bb0 <UART_SetConfig+0x328>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d16c      	bne.n	80019e6 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800190c:	f7ff fafc 	bl	8000f08 <HAL_RCC_GetPCLK2Freq>
 8001910:	4602      	mov	r2, r0
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	009a      	lsls	r2, r3, #2
 800191a:	441a      	add	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	fbb2 f3f3 	udiv	r3, r2, r3
 8001926:	4aa3      	ldr	r2, [pc, #652]	; (8001bb4 <UART_SetConfig+0x32c>)
 8001928:	fba2 2303 	umull	r2, r3, r2, r3
 800192c:	095b      	lsrs	r3, r3, #5
 800192e:	011c      	lsls	r4, r3, #4
 8001930:	f7ff faea 	bl	8000f08 <HAL_RCC_GetPCLK2Freq>
 8001934:	4602      	mov	r2, r0
 8001936:	4613      	mov	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	009a      	lsls	r2, r3, #2
 800193e:	441a      	add	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	fbb2 f5f3 	udiv	r5, r2, r3
 800194a:	f7ff fadd 	bl	8000f08 <HAL_RCC_GetPCLK2Freq>
 800194e:	4602      	mov	r2, r0
 8001950:	4613      	mov	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	009a      	lsls	r2, r3, #2
 8001958:	441a      	add	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	fbb2 f3f3 	udiv	r3, r2, r3
 8001964:	4a93      	ldr	r2, [pc, #588]	; (8001bb4 <UART_SetConfig+0x32c>)
 8001966:	fba2 2303 	umull	r2, r3, r2, r3
 800196a:	095b      	lsrs	r3, r3, #5
 800196c:	2264      	movs	r2, #100	; 0x64
 800196e:	fb02 f303 	mul.w	r3, r2, r3
 8001972:	1aeb      	subs	r3, r5, r3
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	3332      	adds	r3, #50	; 0x32
 8001978:	4a8e      	ldr	r2, [pc, #568]	; (8001bb4 <UART_SetConfig+0x32c>)
 800197a:	fba2 2303 	umull	r2, r3, r2, r3
 800197e:	095b      	lsrs	r3, r3, #5
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001986:	441c      	add	r4, r3
 8001988:	f7ff fabe 	bl	8000f08 <HAL_RCC_GetPCLK2Freq>
 800198c:	4602      	mov	r2, r0
 800198e:	4613      	mov	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	009a      	lsls	r2, r3, #2
 8001996:	441a      	add	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	fbb2 f5f3 	udiv	r5, r2, r3
 80019a2:	f7ff fab1 	bl	8000f08 <HAL_RCC_GetPCLK2Freq>
 80019a6:	4602      	mov	r2, r0
 80019a8:	4613      	mov	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	009a      	lsls	r2, r3, #2
 80019b0:	441a      	add	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019bc:	4a7d      	ldr	r2, [pc, #500]	; (8001bb4 <UART_SetConfig+0x32c>)
 80019be:	fba2 2303 	umull	r2, r3, r2, r3
 80019c2:	095b      	lsrs	r3, r3, #5
 80019c4:	2264      	movs	r2, #100	; 0x64
 80019c6:	fb02 f303 	mul.w	r3, r2, r3
 80019ca:	1aeb      	subs	r3, r5, r3
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	3332      	adds	r3, #50	; 0x32
 80019d0:	4a78      	ldr	r2, [pc, #480]	; (8001bb4 <UART_SetConfig+0x32c>)
 80019d2:	fba2 2303 	umull	r2, r3, r2, r3
 80019d6:	095b      	lsrs	r3, r3, #5
 80019d8:	f003 0207 	and.w	r2, r3, #7
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4422      	add	r2, r4
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	e154      	b.n	8001c90 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80019e6:	f7ff fa7b 	bl	8000ee0 <HAL_RCC_GetPCLK1Freq>
 80019ea:	4602      	mov	r2, r0
 80019ec:	4613      	mov	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	009a      	lsls	r2, r3, #2
 80019f4:	441a      	add	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a00:	4a6c      	ldr	r2, [pc, #432]	; (8001bb4 <UART_SetConfig+0x32c>)
 8001a02:	fba2 2303 	umull	r2, r3, r2, r3
 8001a06:	095b      	lsrs	r3, r3, #5
 8001a08:	011c      	lsls	r4, r3, #4
 8001a0a:	f7ff fa69 	bl	8000ee0 <HAL_RCC_GetPCLK1Freq>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	4613      	mov	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	009a      	lsls	r2, r3, #2
 8001a18:	441a      	add	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	fbb2 f5f3 	udiv	r5, r2, r3
 8001a24:	f7ff fa5c 	bl	8000ee0 <HAL_RCC_GetPCLK1Freq>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	009a      	lsls	r2, r3, #2
 8001a32:	441a      	add	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3e:	4a5d      	ldr	r2, [pc, #372]	; (8001bb4 <UART_SetConfig+0x32c>)
 8001a40:	fba2 2303 	umull	r2, r3, r2, r3
 8001a44:	095b      	lsrs	r3, r3, #5
 8001a46:	2264      	movs	r2, #100	; 0x64
 8001a48:	fb02 f303 	mul.w	r3, r2, r3
 8001a4c:	1aeb      	subs	r3, r5, r3
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	3332      	adds	r3, #50	; 0x32
 8001a52:	4a58      	ldr	r2, [pc, #352]	; (8001bb4 <UART_SetConfig+0x32c>)
 8001a54:	fba2 2303 	umull	r2, r3, r2, r3
 8001a58:	095b      	lsrs	r3, r3, #5
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001a60:	441c      	add	r4, r3
 8001a62:	f7ff fa3d 	bl	8000ee0 <HAL_RCC_GetPCLK1Freq>
 8001a66:	4602      	mov	r2, r0
 8001a68:	4613      	mov	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	009a      	lsls	r2, r3, #2
 8001a70:	441a      	add	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	fbb2 f5f3 	udiv	r5, r2, r3
 8001a7c:	f7ff fa30 	bl	8000ee0 <HAL_RCC_GetPCLK1Freq>
 8001a80:	4602      	mov	r2, r0
 8001a82:	4613      	mov	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	4413      	add	r3, r2
 8001a88:	009a      	lsls	r2, r3, #2
 8001a8a:	441a      	add	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a96:	4a47      	ldr	r2, [pc, #284]	; (8001bb4 <UART_SetConfig+0x32c>)
 8001a98:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9c:	095b      	lsrs	r3, r3, #5
 8001a9e:	2264      	movs	r2, #100	; 0x64
 8001aa0:	fb02 f303 	mul.w	r3, r2, r3
 8001aa4:	1aeb      	subs	r3, r5, r3
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	3332      	adds	r3, #50	; 0x32
 8001aaa:	4a42      	ldr	r2, [pc, #264]	; (8001bb4 <UART_SetConfig+0x32c>)
 8001aac:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab0:	095b      	lsrs	r3, r3, #5
 8001ab2:	f003 0207 	and.w	r2, r3, #7
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4422      	add	r2, r4
 8001abc:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8001abe:	e0e7      	b.n	8001c90 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a39      	ldr	r2, [pc, #228]	; (8001bac <UART_SetConfig+0x324>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d004      	beq.n	8001ad4 <UART_SetConfig+0x24c>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a38      	ldr	r2, [pc, #224]	; (8001bb0 <UART_SetConfig+0x328>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d171      	bne.n	8001bb8 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001ad4:	f7ff fa18 	bl	8000f08 <HAL_RCC_GetPCLK2Freq>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	4613      	mov	r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4413      	add	r3, r2
 8001ae0:	009a      	lsls	r2, r3, #2
 8001ae2:	441a      	add	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aee:	4a31      	ldr	r2, [pc, #196]	; (8001bb4 <UART_SetConfig+0x32c>)
 8001af0:	fba2 2303 	umull	r2, r3, r2, r3
 8001af4:	095b      	lsrs	r3, r3, #5
 8001af6:	011c      	lsls	r4, r3, #4
 8001af8:	f7ff fa06 	bl	8000f08 <HAL_RCC_GetPCLK2Freq>
 8001afc:	4602      	mov	r2, r0
 8001afe:	4613      	mov	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	009a      	lsls	r2, r3, #2
 8001b06:	441a      	add	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	fbb2 f5f3 	udiv	r5, r2, r3
 8001b12:	f7ff f9f9 	bl	8000f08 <HAL_RCC_GetPCLK2Freq>
 8001b16:	4602      	mov	r2, r0
 8001b18:	4613      	mov	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	009a      	lsls	r2, r3, #2
 8001b20:	441a      	add	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2c:	4a21      	ldr	r2, [pc, #132]	; (8001bb4 <UART_SetConfig+0x32c>)
 8001b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b32:	095b      	lsrs	r3, r3, #5
 8001b34:	2264      	movs	r2, #100	; 0x64
 8001b36:	fb02 f303 	mul.w	r3, r2, r3
 8001b3a:	1aeb      	subs	r3, r5, r3
 8001b3c:	011b      	lsls	r3, r3, #4
 8001b3e:	3332      	adds	r3, #50	; 0x32
 8001b40:	4a1c      	ldr	r2, [pc, #112]	; (8001bb4 <UART_SetConfig+0x32c>)
 8001b42:	fba2 2303 	umull	r2, r3, r2, r3
 8001b46:	095b      	lsrs	r3, r3, #5
 8001b48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b4c:	441c      	add	r4, r3
 8001b4e:	f7ff f9db 	bl	8000f08 <HAL_RCC_GetPCLK2Freq>
 8001b52:	4602      	mov	r2, r0
 8001b54:	4613      	mov	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	009a      	lsls	r2, r3, #2
 8001b5c:	441a      	add	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	fbb2 f5f3 	udiv	r5, r2, r3
 8001b68:	f7ff f9ce 	bl	8000f08 <HAL_RCC_GetPCLK2Freq>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	4613      	mov	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4413      	add	r3, r2
 8001b74:	009a      	lsls	r2, r3, #2
 8001b76:	441a      	add	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b82:	4a0c      	ldr	r2, [pc, #48]	; (8001bb4 <UART_SetConfig+0x32c>)
 8001b84:	fba2 2303 	umull	r2, r3, r2, r3
 8001b88:	095b      	lsrs	r3, r3, #5
 8001b8a:	2264      	movs	r2, #100	; 0x64
 8001b8c:	fb02 f303 	mul.w	r3, r2, r3
 8001b90:	1aeb      	subs	r3, r5, r3
 8001b92:	011b      	lsls	r3, r3, #4
 8001b94:	3332      	adds	r3, #50	; 0x32
 8001b96:	4a07      	ldr	r2, [pc, #28]	; (8001bb4 <UART_SetConfig+0x32c>)
 8001b98:	fba2 2303 	umull	r2, r3, r2, r3
 8001b9c:	095b      	lsrs	r3, r3, #5
 8001b9e:	f003 020f 	and.w	r2, r3, #15
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4422      	add	r2, r4
 8001ba8:	609a      	str	r2, [r3, #8]
 8001baa:	e071      	b.n	8001c90 <UART_SetConfig+0x408>
 8001bac:	40011000 	.word	0x40011000
 8001bb0:	40011400 	.word	0x40011400
 8001bb4:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001bb8:	f7ff f992 	bl	8000ee0 <HAL_RCC_GetPCLK1Freq>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	009a      	lsls	r2, r3, #2
 8001bc6:	441a      	add	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd2:	4a31      	ldr	r2, [pc, #196]	; (8001c98 <UART_SetConfig+0x410>)
 8001bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd8:	095b      	lsrs	r3, r3, #5
 8001bda:	011c      	lsls	r4, r3, #4
 8001bdc:	f7ff f980 	bl	8000ee0 <HAL_RCC_GetPCLK1Freq>
 8001be0:	4602      	mov	r2, r0
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	009a      	lsls	r2, r3, #2
 8001bea:	441a      	add	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	fbb2 f5f3 	udiv	r5, r2, r3
 8001bf6:	f7ff f973 	bl	8000ee0 <HAL_RCC_GetPCLK1Freq>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	009a      	lsls	r2, r3, #2
 8001c04:	441a      	add	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c10:	4a21      	ldr	r2, [pc, #132]	; (8001c98 <UART_SetConfig+0x410>)
 8001c12:	fba2 2303 	umull	r2, r3, r2, r3
 8001c16:	095b      	lsrs	r3, r3, #5
 8001c18:	2264      	movs	r2, #100	; 0x64
 8001c1a:	fb02 f303 	mul.w	r3, r2, r3
 8001c1e:	1aeb      	subs	r3, r5, r3
 8001c20:	011b      	lsls	r3, r3, #4
 8001c22:	3332      	adds	r3, #50	; 0x32
 8001c24:	4a1c      	ldr	r2, [pc, #112]	; (8001c98 <UART_SetConfig+0x410>)
 8001c26:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2a:	095b      	lsrs	r3, r3, #5
 8001c2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c30:	441c      	add	r4, r3
 8001c32:	f7ff f955 	bl	8000ee0 <HAL_RCC_GetPCLK1Freq>
 8001c36:	4602      	mov	r2, r0
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	009a      	lsls	r2, r3, #2
 8001c40:	441a      	add	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	fbb2 f5f3 	udiv	r5, r2, r3
 8001c4c:	f7ff f948 	bl	8000ee0 <HAL_RCC_GetPCLK1Freq>
 8001c50:	4602      	mov	r2, r0
 8001c52:	4613      	mov	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	009a      	lsls	r2, r3, #2
 8001c5a:	441a      	add	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c66:	4a0c      	ldr	r2, [pc, #48]	; (8001c98 <UART_SetConfig+0x410>)
 8001c68:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6c:	095b      	lsrs	r3, r3, #5
 8001c6e:	2264      	movs	r2, #100	; 0x64
 8001c70:	fb02 f303 	mul.w	r3, r2, r3
 8001c74:	1aeb      	subs	r3, r5, r3
 8001c76:	011b      	lsls	r3, r3, #4
 8001c78:	3332      	adds	r3, #50	; 0x32
 8001c7a:	4a07      	ldr	r2, [pc, #28]	; (8001c98 <UART_SetConfig+0x410>)
 8001c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c80:	095b      	lsrs	r3, r3, #5
 8001c82:	f003 020f 	and.w	r2, r3, #15
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4422      	add	r2, r4
 8001c8c:	609a      	str	r2, [r3, #8]
}
 8001c8e:	e7ff      	b.n	8001c90 <UART_SetConfig+0x408>
 8001c90:	bf00      	nop
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bdb0      	pop	{r4, r5, r7, pc}
 8001c98:	51eb851f 	.word	0x51eb851f

08001c9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ca0:	f7fe fc30 	bl	8000504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ca4:	f000 f80c 	bl	8001cc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ca8:	f000 f93c 	bl	8001f24 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001cac:	f000 f910 	bl	8001ed0 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8001cb0:	f000 f874 	bl	8001d9c <MX_CAN1_Init>
  MX_CAN2_Init();
 8001cb4:	f000 f8a6 	bl	8001e04 <MX_CAN2_Init>
  MX_SPI2_Init();
 8001cb8:	f000 f8d8 	bl	8001e6c <MX_SPI2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001cbc:	e7fe      	b.n	8001cbc <main+0x20>
	...

08001cc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b094      	sub	sp, #80	; 0x50
 8001cc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cc6:	f107 031c 	add.w	r3, r7, #28
 8001cca:	2234      	movs	r2, #52	; 0x34
 8001ccc:	2100      	movs	r1, #0
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 fbec 	bl	80024ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cd4:	f107 0308 	add.w	r3, r7, #8
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	607b      	str	r3, [r7, #4]
 8001ce8:	4b2a      	ldr	r3, [pc, #168]	; (8001d94 <SystemClock_Config+0xd4>)
 8001cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cec:	4a29      	ldr	r2, [pc, #164]	; (8001d94 <SystemClock_Config+0xd4>)
 8001cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf2:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf4:	4b27      	ldr	r3, [pc, #156]	; (8001d94 <SystemClock_Config+0xd4>)
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	607b      	str	r3, [r7, #4]
 8001cfe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001d00:	2300      	movs	r3, #0
 8001d02:	603b      	str	r3, [r7, #0]
 8001d04:	4b24      	ldr	r3, [pc, #144]	; (8001d98 <SystemClock_Config+0xd8>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d0c:	4a22      	ldr	r2, [pc, #136]	; (8001d98 <SystemClock_Config+0xd8>)
 8001d0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	4b20      	ldr	r3, [pc, #128]	; (8001d98 <SystemClock_Config+0xd8>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d1c:	603b      	str	r3, [r7, #0]
 8001d1e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d20:	2302      	movs	r3, #2
 8001d22:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d24:	2301      	movs	r3, #1
 8001d26:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d28:	2310      	movs	r3, #16
 8001d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d30:	2300      	movs	r3, #0
 8001d32:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001d34:	2310      	movs	r3, #16
 8001d36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001d38:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001d3c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001d3e:	2304      	movs	r3, #4
 8001d40:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001d42:	2302      	movs	r3, #2
 8001d44:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001d46:	2302      	movs	r3, #2
 8001d48:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d4a:	f107 031c 	add.w	r3, r7, #28
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff fa8e 	bl	8001270 <HAL_RCC_OscConfig>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001d5a:	f000 f953 	bl	8002004 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d5e:	230f      	movs	r3, #15
 8001d60:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d62:	2302      	movs	r3, #2
 8001d64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d66:	2300      	movs	r3, #0
 8001d68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d70:	2300      	movs	r3, #0
 8001d72:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d74:	f107 0308 	add.w	r3, r7, #8
 8001d78:	2102      	movs	r1, #2
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe ffc2 	bl	8000d04 <HAL_RCC_ClockConfig>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001d86:	f000 f93d 	bl	8002004 <Error_Handler>
  }
}
 8001d8a:	bf00      	nop
 8001d8c:	3750      	adds	r7, #80	; 0x50
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40023800 	.word	0x40023800
 8001d98:	40007000 	.word	0x40007000

08001d9c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001da0:	4b16      	ldr	r3, [pc, #88]	; (8001dfc <MX_CAN1_Init+0x60>)
 8001da2:	4a17      	ldr	r2, [pc, #92]	; (8001e00 <MX_CAN1_Init+0x64>)
 8001da4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001da6:	4b15      	ldr	r3, [pc, #84]	; (8001dfc <MX_CAN1_Init+0x60>)
 8001da8:	2210      	movs	r2, #16
 8001daa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001dac:	4b13      	ldr	r3, [pc, #76]	; (8001dfc <MX_CAN1_Init+0x60>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001db2:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <MX_CAN1_Init+0x60>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001db8:	4b10      	ldr	r3, [pc, #64]	; (8001dfc <MX_CAN1_Init+0x60>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001dbe:	4b0f      	ldr	r3, [pc, #60]	; (8001dfc <MX_CAN1_Init+0x60>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001dc4:	4b0d      	ldr	r3, [pc, #52]	; (8001dfc <MX_CAN1_Init+0x60>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001dca:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <MX_CAN1_Init+0x60>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001dd0:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <MX_CAN1_Init+0x60>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001dd6:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <MX_CAN1_Init+0x60>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001ddc:	4b07      	ldr	r3, [pc, #28]	; (8001dfc <MX_CAN1_Init+0x60>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001de2:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <MX_CAN1_Init+0x60>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001de8:	4804      	ldr	r0, [pc, #16]	; (8001dfc <MX_CAN1_Init+0x60>)
 8001dea:	f7fe fbfd 	bl	80005e8 <HAL_CAN_Init>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001df4:	f000 f906 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001df8:	bf00      	nop
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	200000f0 	.word	0x200000f0
 8001e00:	40006400 	.word	0x40006400

08001e04 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001e08:	4b16      	ldr	r3, [pc, #88]	; (8001e64 <MX_CAN2_Init+0x60>)
 8001e0a:	4a17      	ldr	r2, [pc, #92]	; (8001e68 <MX_CAN2_Init+0x64>)
 8001e0c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8001e0e:	4b15      	ldr	r3, [pc, #84]	; (8001e64 <MX_CAN2_Init+0x60>)
 8001e10:	2210      	movs	r2, #16
 8001e12:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001e14:	4b13      	ldr	r3, [pc, #76]	; (8001e64 <MX_CAN2_Init+0x60>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001e1a:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <MX_CAN2_Init+0x60>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001e20:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <MX_CAN2_Init+0x60>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001e26:	4b0f      	ldr	r3, [pc, #60]	; (8001e64 <MX_CAN2_Init+0x60>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001e2c:	4b0d      	ldr	r3, [pc, #52]	; (8001e64 <MX_CAN2_Init+0x60>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001e32:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <MX_CAN2_Init+0x60>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001e38:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <MX_CAN2_Init+0x60>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001e3e:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <MX_CAN2_Init+0x60>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001e44:	4b07      	ldr	r3, [pc, #28]	; (8001e64 <MX_CAN2_Init+0x60>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001e4a:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <MX_CAN2_Init+0x60>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001e50:	4804      	ldr	r0, [pc, #16]	; (8001e64 <MX_CAN2_Init+0x60>)
 8001e52:	f7fe fbc9 	bl	80005e8 <HAL_CAN_Init>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8001e5c:	f000 f8d2 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001e60:	bf00      	nop
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20000088 	.word	0x20000088
 8001e68:	40006800 	.word	0x40006800

08001e6c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001e70:	4b15      	ldr	r3, [pc, #84]	; (8001ec8 <MX_SPI2_Init+0x5c>)
 8001e72:	4a16      	ldr	r2, [pc, #88]	; (8001ecc <MX_SPI2_Init+0x60>)
 8001e74:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8001e76:	4b14      	ldr	r3, [pc, #80]	; (8001ec8 <MX_SPI2_Init+0x5c>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e7c:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <MX_SPI2_Init+0x5c>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e82:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <MX_SPI2_Init+0x5c>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e88:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <MX_SPI2_Init+0x5c>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ec8 <MX_SPI2_Init+0x5c>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001e94:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <MX_SPI2_Init+0x5c>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <MX_SPI2_Init+0x5c>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ea0:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <MX_SPI2_Init+0x5c>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ea6:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <MX_SPI2_Init+0x5c>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001eac:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <MX_SPI2_Init+0x5c>)
 8001eae:	220a      	movs	r2, #10
 8001eb0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001eb2:	4805      	ldr	r0, [pc, #20]	; (8001ec8 <MX_SPI2_Init+0x5c>)
 8001eb4:	f7ff fc36 	bl	8001724 <HAL_SPI_Init>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_SPI2_Init+0x56>
  {
    Error_Handler();
 8001ebe:	f000 f8a1 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000030 	.word	0x20000030
 8001ecc:	40003800 	.word	0x40003800

08001ed0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ed4:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <MX_USART2_UART_Init+0x4c>)
 8001ed6:	4a12      	ldr	r2, [pc, #72]	; (8001f20 <MX_USART2_UART_Init+0x50>)
 8001ed8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001eda:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <MX_USART2_UART_Init+0x4c>)
 8001edc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ee0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ee2:	4b0e      	ldr	r3, [pc, #56]	; (8001f1c <MX_USART2_UART_Init+0x4c>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <MX_USART2_UART_Init+0x4c>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001eee:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <MX_USART2_UART_Init+0x4c>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ef4:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <MX_USART2_UART_Init+0x4c>)
 8001ef6:	220c      	movs	r2, #12
 8001ef8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001efa:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <MX_USART2_UART_Init+0x4c>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <MX_USART2_UART_Init+0x4c>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f06:	4805      	ldr	r0, [pc, #20]	; (8001f1c <MX_USART2_UART_Init+0x4c>)
 8001f08:	f7ff fc70 	bl	80017ec <HAL_UART_Init>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f12:	f000 f877 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	200000b0 	.word	0x200000b0
 8001f20:	40004400 	.word	0x40004400

08001f24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08a      	sub	sp, #40	; 0x28
 8001f28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2a:	f107 0314 	add.w	r3, r7, #20
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	605a      	str	r2, [r3, #4]
 8001f34:	609a      	str	r2, [r3, #8]
 8001f36:	60da      	str	r2, [r3, #12]
 8001f38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	4b2d      	ldr	r3, [pc, #180]	; (8001ff4 <MX_GPIO_Init+0xd0>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	4a2c      	ldr	r2, [pc, #176]	; (8001ff4 <MX_GPIO_Init+0xd0>)
 8001f44:	f043 0304 	orr.w	r3, r3, #4
 8001f48:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4a:	4b2a      	ldr	r3, [pc, #168]	; (8001ff4 <MX_GPIO_Init+0xd0>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	f003 0304 	and.w	r3, r3, #4
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	4b26      	ldr	r3, [pc, #152]	; (8001ff4 <MX_GPIO_Init+0xd0>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	4a25      	ldr	r2, [pc, #148]	; (8001ff4 <MX_GPIO_Init+0xd0>)
 8001f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f64:	6313      	str	r3, [r2, #48]	; 0x30
 8001f66:	4b23      	ldr	r3, [pc, #140]	; (8001ff4 <MX_GPIO_Init+0xd0>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	4b1f      	ldr	r3, [pc, #124]	; (8001ff4 <MX_GPIO_Init+0xd0>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	4a1e      	ldr	r2, [pc, #120]	; (8001ff4 <MX_GPIO_Init+0xd0>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	6313      	str	r3, [r2, #48]	; 0x30
 8001f82:	4b1c      	ldr	r3, [pc, #112]	; (8001ff4 <MX_GPIO_Init+0xd0>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	60bb      	str	r3, [r7, #8]
 8001f8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	607b      	str	r3, [r7, #4]
 8001f92:	4b18      	ldr	r3, [pc, #96]	; (8001ff4 <MX_GPIO_Init+0xd0>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	4a17      	ldr	r2, [pc, #92]	; (8001ff4 <MX_GPIO_Init+0xd0>)
 8001f98:	f043 0302 	orr.w	r3, r3, #2
 8001f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9e:	4b15      	ldr	r3, [pc, #84]	; (8001ff4 <MX_GPIO_Init+0xd0>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	607b      	str	r3, [r7, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001faa:	2200      	movs	r2, #0
 8001fac:	2120      	movs	r1, #32
 8001fae:	4812      	ldr	r0, [pc, #72]	; (8001ff8 <MX_GPIO_Init+0xd4>)
 8001fb0:	f7fe fe8e 	bl	8000cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001fb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001fba:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <MX_GPIO_Init+0xd8>)
 8001fbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001fc2:	f107 0314 	add.w	r3, r7, #20
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	480d      	ldr	r0, [pc, #52]	; (8002000 <MX_GPIO_Init+0xdc>)
 8001fca:	f7fe fcef 	bl	80009ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001fce:	2320      	movs	r3, #32
 8001fd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001fde:	f107 0314 	add.w	r3, r7, #20
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4804      	ldr	r0, [pc, #16]	; (8001ff8 <MX_GPIO_Init+0xd4>)
 8001fe6:	f7fe fce1 	bl	80009ac <HAL_GPIO_Init>

}
 8001fea:	bf00      	nop
 8001fec:	3728      	adds	r7, #40	; 0x28
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40020000 	.word	0x40020000
 8001ffc:	10210000 	.word	0x10210000
 8002000:	40020800 	.word	0x40020800

08002004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
	...

08002014 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	607b      	str	r3, [r7, #4]
 800201e:	4b10      	ldr	r3, [pc, #64]	; (8002060 <HAL_MspInit+0x4c>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	4a0f      	ldr	r2, [pc, #60]	; (8002060 <HAL_MspInit+0x4c>)
 8002024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002028:	6453      	str	r3, [r2, #68]	; 0x44
 800202a:	4b0d      	ldr	r3, [pc, #52]	; (8002060 <HAL_MspInit+0x4c>)
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002032:	607b      	str	r3, [r7, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	603b      	str	r3, [r7, #0]
 800203a:	4b09      	ldr	r3, [pc, #36]	; (8002060 <HAL_MspInit+0x4c>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	4a08      	ldr	r2, [pc, #32]	; (8002060 <HAL_MspInit+0x4c>)
 8002040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002044:	6413      	str	r3, [r2, #64]	; 0x40
 8002046:	4b06      	ldr	r3, [pc, #24]	; (8002060 <HAL_MspInit+0x4c>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204e:	603b      	str	r3, [r7, #0]
 8002050:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002052:	2007      	movs	r0, #7
 8002054:	f7fe fc76 	bl	8000944 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002058:	bf00      	nop
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40023800 	.word	0x40023800

08002064 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08c      	sub	sp, #48	; 0x30
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206c:	f107 031c 	add.w	r3, r7, #28
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a43      	ldr	r2, [pc, #268]	; (8002190 <HAL_CAN_MspInit+0x12c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d136      	bne.n	80020f4 <HAL_CAN_MspInit+0x90>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002086:	4b43      	ldr	r3, [pc, #268]	; (8002194 <HAL_CAN_MspInit+0x130>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	3301      	adds	r3, #1
 800208c:	4a41      	ldr	r2, [pc, #260]	; (8002194 <HAL_CAN_MspInit+0x130>)
 800208e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002090:	4b40      	ldr	r3, [pc, #256]	; (8002194 <HAL_CAN_MspInit+0x130>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d10d      	bne.n	80020b4 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002098:	2300      	movs	r3, #0
 800209a:	61bb      	str	r3, [r7, #24]
 800209c:	4b3e      	ldr	r3, [pc, #248]	; (8002198 <HAL_CAN_MspInit+0x134>)
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	4a3d      	ldr	r2, [pc, #244]	; (8002198 <HAL_CAN_MspInit+0x134>)
 80020a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020a6:	6413      	str	r3, [r2, #64]	; 0x40
 80020a8:	4b3b      	ldr	r3, [pc, #236]	; (8002198 <HAL_CAN_MspInit+0x134>)
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b0:	61bb      	str	r3, [r7, #24]
 80020b2:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
 80020b8:	4b37      	ldr	r3, [pc, #220]	; (8002198 <HAL_CAN_MspInit+0x134>)
 80020ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020bc:	4a36      	ldr	r2, [pc, #216]	; (8002198 <HAL_CAN_MspInit+0x134>)
 80020be:	f043 0301 	orr.w	r3, r3, #1
 80020c2:	6313      	str	r3, [r2, #48]	; 0x30
 80020c4:	4b34      	ldr	r3, [pc, #208]	; (8002198 <HAL_CAN_MspInit+0x134>)
 80020c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	617b      	str	r3, [r7, #20]
 80020ce:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80020d0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80020d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d6:	2302      	movs	r3, #2
 80020d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020de:	2303      	movs	r3, #3
 80020e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80020e2:	2309      	movs	r3, #9
 80020e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e6:	f107 031c 	add.w	r3, r7, #28
 80020ea:	4619      	mov	r1, r3
 80020ec:	482b      	ldr	r0, [pc, #172]	; (800219c <HAL_CAN_MspInit+0x138>)
 80020ee:	f7fe fc5d 	bl	80009ac <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80020f2:	e048      	b.n	8002186 <HAL_CAN_MspInit+0x122>
  else if(hcan->Instance==CAN2)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a29      	ldr	r2, [pc, #164]	; (80021a0 <HAL_CAN_MspInit+0x13c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d143      	bne.n	8002186 <HAL_CAN_MspInit+0x122>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	4b25      	ldr	r3, [pc, #148]	; (8002198 <HAL_CAN_MspInit+0x134>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	4a24      	ldr	r2, [pc, #144]	; (8002198 <HAL_CAN_MspInit+0x134>)
 8002108:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800210c:	6413      	str	r3, [r2, #64]	; 0x40
 800210e:	4b22      	ldr	r3, [pc, #136]	; (8002198 <HAL_CAN_MspInit+0x134>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800211a:	4b1e      	ldr	r3, [pc, #120]	; (8002194 <HAL_CAN_MspInit+0x130>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	3301      	adds	r3, #1
 8002120:	4a1c      	ldr	r2, [pc, #112]	; (8002194 <HAL_CAN_MspInit+0x130>)
 8002122:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002124:	4b1b      	ldr	r3, [pc, #108]	; (8002194 <HAL_CAN_MspInit+0x130>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d10d      	bne.n	8002148 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800212c:	2300      	movs	r3, #0
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	4b19      	ldr	r3, [pc, #100]	; (8002198 <HAL_CAN_MspInit+0x134>)
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	4a18      	ldr	r2, [pc, #96]	; (8002198 <HAL_CAN_MspInit+0x134>)
 8002136:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800213a:	6413      	str	r3, [r2, #64]	; 0x40
 800213c:	4b16      	ldr	r3, [pc, #88]	; (8002198 <HAL_CAN_MspInit+0x134>)
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002148:	2300      	movs	r3, #0
 800214a:	60bb      	str	r3, [r7, #8]
 800214c:	4b12      	ldr	r3, [pc, #72]	; (8002198 <HAL_CAN_MspInit+0x134>)
 800214e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002150:	4a11      	ldr	r2, [pc, #68]	; (8002198 <HAL_CAN_MspInit+0x134>)
 8002152:	f043 0302 	orr.w	r3, r3, #2
 8002156:	6313      	str	r3, [r2, #48]	; 0x30
 8002158:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <HAL_CAN_MspInit+0x134>)
 800215a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002164:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216a:	2302      	movs	r3, #2
 800216c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216e:	2300      	movs	r3, #0
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002172:	2303      	movs	r3, #3
 8002174:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002176:	2309      	movs	r3, #9
 8002178:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800217a:	f107 031c 	add.w	r3, r7, #28
 800217e:	4619      	mov	r1, r3
 8002180:	4808      	ldr	r0, [pc, #32]	; (80021a4 <HAL_CAN_MspInit+0x140>)
 8002182:	f7fe fc13 	bl	80009ac <HAL_GPIO_Init>
}
 8002186:	bf00      	nop
 8002188:	3730      	adds	r7, #48	; 0x30
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40006400 	.word	0x40006400
 8002194:	20000028 	.word	0x20000028
 8002198:	40023800 	.word	0x40023800
 800219c:	40020000 	.word	0x40020000
 80021a0:	40006800 	.word	0x40006800
 80021a4:	40020400 	.word	0x40020400

080021a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08a      	sub	sp, #40	; 0x28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b0:	f107 0314 	add.w	r3, r7, #20
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a38      	ldr	r2, [pc, #224]	; (80022a8 <HAL_SPI_MspInit+0x100>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d16a      	bne.n	80022a0 <HAL_SPI_MspInit+0xf8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	613b      	str	r3, [r7, #16]
 80021ce:	4b37      	ldr	r3, [pc, #220]	; (80022ac <HAL_SPI_MspInit+0x104>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	4a36      	ldr	r2, [pc, #216]	; (80022ac <HAL_SPI_MspInit+0x104>)
 80021d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021d8:	6413      	str	r3, [r2, #64]	; 0x40
 80021da:	4b34      	ldr	r3, [pc, #208]	; (80022ac <HAL_SPI_MspInit+0x104>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021e2:	613b      	str	r3, [r7, #16]
 80021e4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	4b30      	ldr	r3, [pc, #192]	; (80022ac <HAL_SPI_MspInit+0x104>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	4a2f      	ldr	r2, [pc, #188]	; (80022ac <HAL_SPI_MspInit+0x104>)
 80021f0:	f043 0304 	orr.w	r3, r3, #4
 80021f4:	6313      	str	r3, [r2, #48]	; 0x30
 80021f6:	4b2d      	ldr	r3, [pc, #180]	; (80022ac <HAL_SPI_MspInit+0x104>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	60bb      	str	r3, [r7, #8]
 8002206:	4b29      	ldr	r3, [pc, #164]	; (80022ac <HAL_SPI_MspInit+0x104>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	4a28      	ldr	r2, [pc, #160]	; (80022ac <HAL_SPI_MspInit+0x104>)
 800220c:	f043 0302 	orr.w	r3, r3, #2
 8002210:	6313      	str	r3, [r2, #48]	; 0x30
 8002212:	4b26      	ldr	r3, [pc, #152]	; (80022ac <HAL_SPI_MspInit+0x104>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	60bb      	str	r3, [r7, #8]
 800221c:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    PB4     ------> SPI2_NSS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800221e:	2302      	movs	r3, #2
 8002220:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002222:	2302      	movs	r3, #2
 8002224:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222a:	2303      	movs	r3, #3
 800222c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800222e:	2307      	movs	r3, #7
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002232:	f107 0314 	add.w	r3, r7, #20
 8002236:	4619      	mov	r1, r3
 8002238:	481d      	ldr	r0, [pc, #116]	; (80022b0 <HAL_SPI_MspInit+0x108>)
 800223a:	f7fe fbb7 	bl	80009ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800223e:	2304      	movs	r3, #4
 8002240:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002242:	2302      	movs	r3, #2
 8002244:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002246:	2300      	movs	r3, #0
 8002248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800224a:	2303      	movs	r3, #3
 800224c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800224e:	2305      	movs	r3, #5
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002252:	f107 0314 	add.w	r3, r7, #20
 8002256:	4619      	mov	r1, r3
 8002258:	4815      	ldr	r0, [pc, #84]	; (80022b0 <HAL_SPI_MspInit+0x108>)
 800225a:	f7fe fba7 	bl	80009ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800225e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002262:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002264:	2302      	movs	r3, #2
 8002266:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800226c:	2303      	movs	r3, #3
 800226e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002270:	2305      	movs	r3, #5
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002274:	f107 0314 	add.w	r3, r7, #20
 8002278:	4619      	mov	r1, r3
 800227a:	480e      	ldr	r0, [pc, #56]	; (80022b4 <HAL_SPI_MspInit+0x10c>)
 800227c:	f7fe fb96 	bl	80009ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002280:	2310      	movs	r3, #16
 8002282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002284:	2302      	movs	r3, #2
 8002286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002288:	2300      	movs	r3, #0
 800228a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800228c:	2303      	movs	r3, #3
 800228e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002290:	2307      	movs	r3, #7
 8002292:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002294:	f107 0314 	add.w	r3, r7, #20
 8002298:	4619      	mov	r1, r3
 800229a:	4806      	ldr	r0, [pc, #24]	; (80022b4 <HAL_SPI_MspInit+0x10c>)
 800229c:	f7fe fb86 	bl	80009ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80022a0:	bf00      	nop
 80022a2:	3728      	adds	r7, #40	; 0x28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40003800 	.word	0x40003800
 80022ac:	40023800 	.word	0x40023800
 80022b0:	40020800 	.word	0x40020800
 80022b4:	40020400 	.word	0x40020400

080022b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08a      	sub	sp, #40	; 0x28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c0:	f107 0314 	add.w	r3, r7, #20
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	609a      	str	r2, [r3, #8]
 80022cc:	60da      	str	r2, [r3, #12]
 80022ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a19      	ldr	r2, [pc, #100]	; (800233c <HAL_UART_MspInit+0x84>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d12b      	bne.n	8002332 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	613b      	str	r3, [r7, #16]
 80022de:	4b18      	ldr	r3, [pc, #96]	; (8002340 <HAL_UART_MspInit+0x88>)
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	4a17      	ldr	r2, [pc, #92]	; (8002340 <HAL_UART_MspInit+0x88>)
 80022e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022e8:	6413      	str	r3, [r2, #64]	; 0x40
 80022ea:	4b15      	ldr	r3, [pc, #84]	; (8002340 <HAL_UART_MspInit+0x88>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	4b11      	ldr	r3, [pc, #68]	; (8002340 <HAL_UART_MspInit+0x88>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	4a10      	ldr	r2, [pc, #64]	; (8002340 <HAL_UART_MspInit+0x88>)
 8002300:	f043 0301 	orr.w	r3, r3, #1
 8002304:	6313      	str	r3, [r2, #48]	; 0x30
 8002306:	4b0e      	ldr	r3, [pc, #56]	; (8002340 <HAL_UART_MspInit+0x88>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002312:	230c      	movs	r3, #12
 8002314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002316:	2302      	movs	r3, #2
 8002318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800231a:	2301      	movs	r3, #1
 800231c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800231e:	2303      	movs	r3, #3
 8002320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002322:	2307      	movs	r3, #7
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002326:	f107 0314 	add.w	r3, r7, #20
 800232a:	4619      	mov	r1, r3
 800232c:	4805      	ldr	r0, [pc, #20]	; (8002344 <HAL_UART_MspInit+0x8c>)
 800232e:	f7fe fb3d 	bl	80009ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002332:	bf00      	nop
 8002334:	3728      	adds	r7, #40	; 0x28
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40004400 	.word	0x40004400
 8002340:	40023800 	.word	0x40023800
 8002344:	40020000 	.word	0x40020000

08002348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800234c:	bf00      	nop
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002356:	b480      	push	{r7}
 8002358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800235a:	e7fe      	b.n	800235a <HardFault_Handler+0x4>

0800235c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002360:	e7fe      	b.n	8002360 <MemManage_Handler+0x4>

08002362 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002366:	e7fe      	b.n	8002366 <BusFault_Handler+0x4>

08002368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800236c:	e7fe      	b.n	800236c <UsageFault_Handler+0x4>

0800236e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800236e:	b480      	push	{r7}
 8002370:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002372:	bf00      	nop
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002380:	bf00      	nop
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800238a:	b480      	push	{r7}
 800238c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800239c:	f7fe f904 	bl	80005a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023a0:	bf00      	nop
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023a8:	4b16      	ldr	r3, [pc, #88]	; (8002404 <SystemInit+0x60>)
 80023aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ae:	4a15      	ldr	r2, [pc, #84]	; (8002404 <SystemInit+0x60>)
 80023b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80023b8:	4b13      	ldr	r3, [pc, #76]	; (8002408 <SystemInit+0x64>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a12      	ldr	r2, [pc, #72]	; (8002408 <SystemInit+0x64>)
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80023c4:	4b10      	ldr	r3, [pc, #64]	; (8002408 <SystemInit+0x64>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80023ca:	4b0f      	ldr	r3, [pc, #60]	; (8002408 <SystemInit+0x64>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a0e      	ldr	r2, [pc, #56]	; (8002408 <SystemInit+0x64>)
 80023d0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80023d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80023da:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <SystemInit+0x64>)
 80023dc:	4a0b      	ldr	r2, [pc, #44]	; (800240c <SystemInit+0x68>)
 80023de:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80023e0:	4b09      	ldr	r3, [pc, #36]	; (8002408 <SystemInit+0x64>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a08      	ldr	r2, [pc, #32]	; (8002408 <SystemInit+0x64>)
 80023e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80023ec:	4b06      	ldr	r3, [pc, #24]	; (8002408 <SystemInit+0x64>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80023f2:	4b04      	ldr	r3, [pc, #16]	; (8002404 <SystemInit+0x60>)
 80023f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023f8:	609a      	str	r2, [r3, #8]
#endif
}
 80023fa:	bf00      	nop
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	e000ed00 	.word	0xe000ed00
 8002408:	40023800 	.word	0x40023800
 800240c:	24003010 	.word	0x24003010

08002410 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002410:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002448 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002414:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002416:	e003      	b.n	8002420 <LoopCopyDataInit>

08002418 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002418:	4b0c      	ldr	r3, [pc, #48]	; (800244c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800241a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800241c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800241e:	3104      	adds	r1, #4

08002420 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002420:	480b      	ldr	r0, [pc, #44]	; (8002450 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002422:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002424:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002426:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002428:	d3f6      	bcc.n	8002418 <CopyDataInit>
  ldr  r2, =_sbss
 800242a:	4a0b      	ldr	r2, [pc, #44]	; (8002458 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800242c:	e002      	b.n	8002434 <LoopFillZerobss>

0800242e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800242e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002430:	f842 3b04 	str.w	r3, [r2], #4

08002434 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002434:	4b09      	ldr	r3, [pc, #36]	; (800245c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002436:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002438:	d3f9      	bcc.n	800242e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800243a:	f7ff ffb3 	bl	80023a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800243e:	f000 f811 	bl	8002464 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002442:	f7ff fc2b 	bl	8001c9c <main>
  bx  lr    
 8002446:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002448:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800244c:	080024fc 	.word	0x080024fc
  ldr  r0, =_sdata
 8002450:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002454:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002458:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800245c:	20000118 	.word	0x20000118

08002460 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002460:	e7fe      	b.n	8002460 <ADC_IRQHandler>
	...

08002464 <__libc_init_array>:
 8002464:	b570      	push	{r4, r5, r6, lr}
 8002466:	4e0d      	ldr	r6, [pc, #52]	; (800249c <__libc_init_array+0x38>)
 8002468:	4c0d      	ldr	r4, [pc, #52]	; (80024a0 <__libc_init_array+0x3c>)
 800246a:	1ba4      	subs	r4, r4, r6
 800246c:	10a4      	asrs	r4, r4, #2
 800246e:	2500      	movs	r5, #0
 8002470:	42a5      	cmp	r5, r4
 8002472:	d109      	bne.n	8002488 <__libc_init_array+0x24>
 8002474:	4e0b      	ldr	r6, [pc, #44]	; (80024a4 <__libc_init_array+0x40>)
 8002476:	4c0c      	ldr	r4, [pc, #48]	; (80024a8 <__libc_init_array+0x44>)
 8002478:	f000 f820 	bl	80024bc <_init>
 800247c:	1ba4      	subs	r4, r4, r6
 800247e:	10a4      	asrs	r4, r4, #2
 8002480:	2500      	movs	r5, #0
 8002482:	42a5      	cmp	r5, r4
 8002484:	d105      	bne.n	8002492 <__libc_init_array+0x2e>
 8002486:	bd70      	pop	{r4, r5, r6, pc}
 8002488:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800248c:	4798      	blx	r3
 800248e:	3501      	adds	r5, #1
 8002490:	e7ee      	b.n	8002470 <__libc_init_array+0xc>
 8002492:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002496:	4798      	blx	r3
 8002498:	3501      	adds	r5, #1
 800249a:	e7f2      	b.n	8002482 <__libc_init_array+0x1e>
 800249c:	080024f4 	.word	0x080024f4
 80024a0:	080024f4 	.word	0x080024f4
 80024a4:	080024f4 	.word	0x080024f4
 80024a8:	080024f8 	.word	0x080024f8

080024ac <memset>:
 80024ac:	4402      	add	r2, r0
 80024ae:	4603      	mov	r3, r0
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d100      	bne.n	80024b6 <memset+0xa>
 80024b4:	4770      	bx	lr
 80024b6:	f803 1b01 	strb.w	r1, [r3], #1
 80024ba:	e7f9      	b.n	80024b0 <memset+0x4>

080024bc <_init>:
 80024bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024be:	bf00      	nop
 80024c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024c2:	bc08      	pop	{r3}
 80024c4:	469e      	mov	lr, r3
 80024c6:	4770      	bx	lr

080024c8 <_fini>:
 80024c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ca:	bf00      	nop
 80024cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ce:	bc08      	pop	{r3}
 80024d0:	469e      	mov	lr, r3
 80024d2:	4770      	bx	lr
